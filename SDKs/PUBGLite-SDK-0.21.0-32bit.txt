Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20 , Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24 , Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28 , Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c , Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30 , Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34 , Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38 , Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c , Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48 , Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54 , Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60 , Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c , Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70 , Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74 , Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78 , Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c , Size: 124]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xfc , Size: 4]
	NavigationSystem* NavigationSystem;//[Offset: 0x11c , Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x120 , Size: 4]
	GameStateBase* GameState;//[Offset: 0x124 , Size: 4]
	AISystemBase* AISystem;//[Offset: 0x128 , Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x12c , Size: 4]
	Level*[] Levels;//[Offset: 0x130 , Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x13c , Size: 12]
	Level* CurrentLevel;//[Offset: 0x14c , Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x150 , Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x154 , Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x160 , Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x164 , Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x70c , Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x752 , Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1bf56d0

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88 , Size: 4]
	Model* Model;//[Offset: 0x8c , Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90 , Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c , Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0 , Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4 , Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8 , Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac , Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0 , Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4 , Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0 , Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4 , Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8 , Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4 , Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150 , Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x154 , Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x164 , Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x168 , Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174 , Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174 , Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174 , Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x1c8 , Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1d0 , Size: 12]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x1ec , Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x50c , Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x23c , Size: 4]
	float MinDrawDistance;//[Offset: 0x240 , Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x244 , Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x248 , Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x24c , Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x250 , Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x251 , Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x252 , Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x252 , Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x252 , Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x252 , Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x253 , Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x253 , Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x253 , Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x253 , Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x253 , Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x253 , Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x253 , Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x253 , Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254 , Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254 , Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254 , Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254 , Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x254 , Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x254 , Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x254 , Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x254 , Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x258 , Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268 , Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x26c , Size: 4]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270 , Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270 , Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x270 , Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x270 , Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x270 , Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x270 , Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x270 , Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x270 , Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x271 , Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x271 , Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x271 , Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x271 , Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x271 , Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x271 , Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x271 , Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x271 , Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x272 , Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x272 , Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x272 , Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x272 , Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x272 , Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x272 , Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x272 , Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x272 , Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x273 , Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x273 , Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x273 , Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x273 , Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x274 , Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x276 , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x277 , Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x278 , Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x27c , Size: 4]
	int TranslucencySortPriority;//[Offset: 0x280 , Size: 4]
	int VisibilityId;//[Offset: 0x284 , Size: 4]
	float BoundsScale;//[Offset: 0x294 , Size: 4]
	float LastSubmitTime;//[Offset: 0x298 , Size: 4]
	float LastRenderTime;//[Offset: 0x29c , Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x2a0 , Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2a4 , Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2b0 , Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x2c8 , Size: 328]
	delegate OnComponentHit;//[Offset: 0x410 , Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x41c , Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x428 , Size: 12]
	delegate OnComponentWake;//[Offset: 0x434 , Size: 12]
	delegate OnComponentSleep;//[Offset: 0x440 , Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x458 , Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x464 , Size: 12]
	delegate OnClicked;//[Offset: 0x470 , Size: 12]
	delegate OnReleased;//[Offset: 0x47c , Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x488 , Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x494 , Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x4a0 , Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x4ac , Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4c0 , Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x4c4 , Size: 60]
	void WakeRigidBody(FName BoneName);// 0x2dbb8c0
	void WakeAllRigidBodies();// 0x2cd5ef4
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2dbb828
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2dbb7b0
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x133a074
	void SetSimulatePhysics(bool bSimulate);// 0x2dbb728
	void SetRenderInMono(bool bValue);// 0x2dbb6a8
	void SetRenderInMainPass(bool bValue);// 0x2dbb628
	void SetRenderCustomDepth(bool bValue);// 0x2dbb5a8
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2dbb528
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2dbb4a8
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2dbb394
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2dbb270
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2dbb270
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2dbb15c
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2dbb048
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2dbaf10
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2dbaf10
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2dbae90
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2dbae10
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2dbad88
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2dbacc4
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2dbac00
	void SetMassScale(FName BoneName, float InMassScale);// 0x2dbab34
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2dbaa18
	void SetLockedAxis(byte LockedAxis);// 0x2dba998
	void SetLinearDamping(float InDamping);// 0x13213ec
	void SetEnableGravity(bool bGravityEnabled);// 0x2dba910
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x2dba890
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2dba818
	void SetCustomDepthStencilValue(int Value);// 0x2dba7a0
	void SetCullDistance(float NewCullDistance);// 0x2dba728
	void SetConstraintMode(byte ConstraintMode);// 0x2dba6a8
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x2dba5e4
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x2dba564
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x2dba4e4
	void SetCollisionObjectType(byte Channel);// 0x2dba464
	void SetCollisionEnabled(byte NewType);// 0x2dba3e4
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2dba324
	void SetCastShadow(bool NewCastShadow);// 0x2dba2a4
	void SetBoundsScale(float NewBoundsScale);// 0x2dba22c
	void SetAngularDamping(float InDamping);// 0x2dba1ac
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2dba0e0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2dba004
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2db9efc
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x2db9e20
	void SetAllMassScale(float InMassScale);// 0x2db9da0
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x2db9cb4
	void PutRigidBodyToSleep(FName BoneName);// 0x2db9c3c
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x2db9b74
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x2db9aa0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2db97b0
	bool K2_IsQueryCollisionEnabled();// 0x2db9770
	bool K2_IsPhysicsCollisionEnabled();// 0x2db9730
	bool K2_IsCollisionEnabled();// 0x2db96f8
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2db9678
	bool IsOverlappingActor(const Actor* Other);// 0x2db95f8
	bool IsGravityEnabled();// 0x2db95c8
	bool IsAnyRigidBodyAwake();// 0x14caa34
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2db9504
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2db9440
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x2db9404
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x2db9320
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x2db928c
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x2db91f8
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x2db914c
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x2db914c
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x2db9080
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2db8f6c
	int GetNumMaterials();// 0x2db8f3c
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2db8e60
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2db8dd8
	float GetMassScale(FName BoneName);// 0x2db8d50
	float GetMass();// 0x2db8d20
	float GetLinearDamping();// 0x2db8cf0
	Vector GetInertiaTensor(FName BoneName);// 0x2db8c54
	byte GetCollisionResponseToChannel(byte Channel);// 0x2db8bcc
	FName GetCollisionProfileName();// 0x2db8b8c
	byte GetCollisionObjectType();// 0x2db8b5c
	byte GetCollisionEnabled();// 0x12f1e70
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x2db8a2c
	Vector GetCenterOfMass(FName BoneName);// 0x2db8998
	float GetAngularDamping();// 0x2db8968
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x2db889c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2db87d0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2db8748
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2db8688
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2db85c8
	void ClearMoveIgnoreComponents();// 0x2db8598
	void ClearMoveIgnoreActors();// 0x2db8584
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2db84fc
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2db82b8
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2db83c8
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2db82b8
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2db8114
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2db7f70
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2db7e58
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2db7d40
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x2db7c28
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x2db7b10
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x2db79f8
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2db78e0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2db77a4
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2db768c

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc4 , Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xcc , Size: 4]
	FName AttachSocketName;//[Offset: 0xd0 , Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8 , Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe4 , Size: 12]
	Vector RelativeLocation;//[Offset: 0x118 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124 , Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130 , Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1a0 , Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac , Size: 1]
	bool bVisibleInVeryLowLevelDevice;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ac , Size: 1]
	bool bVisibleInLowLevelDevice;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ac , Size: 1]
	bool bVisibleInMidLevelDevice;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac , Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ad , Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ad , Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ad , Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ad , Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ad , Size: 1]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ae , Size: 1]
	byte Mobility;//[Offset: 0x1af , Size: 1]
	byte DetailMode;//[Offset: 0x1b0 , Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x200 , Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x2dcd2d0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x2dcd20c
	void SetWorldScale3D(Vector NewScale);// 0x2dcd19c
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x2dcd0c8
	void SetRelativeScale3D(Vector NewScale3D);// 0x2dcd050
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2dccf7c
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2dcce5c
	void ResetRelativeTransform();// 0x2dcce48
	void OnRep_Visibility(bool OldValue);// 0x2dccdc8
	void OnRep_Transform();// 0x2dccdb4
	void OnRep_AttachSocketName();// 0x2dccda0
	void OnRep_AttachParent();// 0x2dccda0
	void OnRep_AttachChildren();// 0x2dccd8c
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dccb80
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcca04
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcc848
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcc6cc
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcc4c0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcc338
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcc17c
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcc000
	Transform K2_GetComponentToWorld();// 0x2dcbf78
	Vector K2_GetComponentScale();// 0x2dcbf30
	Rotator K2_GetComponentRotation();// 0x2dcbee8
	Vector K2_GetComponentLocation();// 0x2dcbea0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2dcbd50
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2dcbb68
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2dcba0c
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcb800
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcb680
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcb504
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcb388
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcb20c
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcb000
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcae7c
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2dcad00
	bool IsVisible();// 0x2dcacd0
	bool IsSimulatingPhysics(FName BoneName);// 0x2dcac48
	bool IsAnySimulatingPhysics();// 0x2dcac18
	Vector GetUpVector();// 0x2dcabd0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x2dcaaa8
	Rotator GetSocketRotation(FName InSocketName);// 0x2dcaa0c
	Quat GetSocketQuaternion(FName InSocketName);// 0x2dca970
	Vector GetSocketLocation(FName InSocketName);// 0x2dca8d4
	Vector GetRightVector();// 0x2dca88c
	Transform GetRelativeTransform();// 0x2dca804
	PhysicsVolume* GetPhysicsVolume();// 0x2dca7dc
	void GetParentComponents(out SceneComponent*[] Parents);// 0x2dca710
	int GetNumChildrenComponents();// 0x2dca6e8
	Vector GetForwardVector();// 0x2da262c
	Vector GetComponentVelocity();// 0x2dca698
	Transform GetComponentTransformViewTranslatedBP();// 0x2dca61c
	Transform GetComponentLocal(Transform LocalTransform);// 0x2dca4d0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2dca3b4
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2dca334
	FName GetAttachSocketName();// 0x2dca318
	SceneComponent* GetAttachParent();// 0x2dca2fc
	FName[] GetAllSocketNames();// 0x2dca23c
	bool DoesSocketExist(FName InSocketName);// 0x2dca1b4
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2dca0dc

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20 , Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d , Size: 1]
	FName[] ComponentTags;//[Offset: 0x60 , Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70 , Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78 , Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84 , Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84 , Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x85 , Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86 , Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86 , Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86 , Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86 , Size: 1]
	enum CreationMethod;//[Offset: 0x88 , Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c , Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c , Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8 , Size: 12]
	void ToggleActive();// 0x13dc3b0
	void SetTickGroup(byte NewTickGroup);// 0x2c9fb00
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x2c9fa80
	void SetIsReplicated(bool ShouldReplicate);// 0x2c9fa00
	void SetComponentTickInterval(float TickInterval);// 0x2c9f988
	void SetComponentTickEnabled(bool bEnabled);// 0x2c9f900
	void SetAutoActivate(bool bNewAutoActivate);// 0x12f49ac
	void SetActive(bool bNewActive, bool bReset);// 0x2c9f828
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2c9f7a8
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2c9f728
	void ReceiveTick(float DeltaSeconds);// 0x1bf56d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void OnRep_IsActive();// 0x2c9f714
	void K2_DestroyComponent(Object* Object);// 0x2c9f69c
	bool IsComponentTickEnabled();// 0x2c9f674
	bool IsBeingDestroyed();// 0x2c9f654
	bool IsActive();// 0x2c9f624
	Actor* GetOwner();// 0x2c9f608
	float GetComponentTickInterval();// 0x2c9f5e0
	void ForceNetUpdate();// 0x13e0834
	void Deactivate();// 0x13dc378
	bool ComponentHasTag(FName Tag);// 0x2c9f560
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2c9f4e0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2c9f460
	void Activate(bool bReset);// 0x12f4924

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2f0 , Size: 4]
	int Priority;//[Offset: 0x2f4 , Size: 4]
	float FluidFriction;//[Offset: 0x2f8 , Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc , Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc , Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2c8 , Size: 1]
	Color BrushColor;//[Offset: 0x2cc , Size: 4]
	int PolyFlags;//[Offset: 0x2d0 , Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4 , Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4 , Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4 , Size: 1]
	Model* Brush;//[Offset: 0x2d8 , Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x2dc , Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0 , Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x2e4 , Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c , Size: 60]
	uint32 MaxDelayBeginPlayNumber;//[Offset: 0x58 , Size: 4]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float CustomTimeDilation;//[Offset: 0x60 , Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64 , Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64 , Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64 , Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64 , Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64 , Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x64 , Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x64 , Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x64 , Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65 , Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65 , Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65 , Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65 , Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x65 , Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x65 , Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x65 , Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x66 , Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x66 , Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x66 , Size: 1]
	byte RemoteRole;//[Offset: 0x67 , Size: 1]
	Actor* Owner;//[Offset: 0x68 , Size: 4]
	byte WorldParallelismID;//[Offset: 0x6c , Size: 1]
	FName NetDriverName;//[Offset: 0x78 , Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x80 , Size: 52]
	float InitialLifeSpan;//[Offset: 0xb4 , Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xb8 , Size: 56]
	byte Role;//[Offset: 0xf0 , Size: 1]
	byte NetDormancy;//[Offset: 0xf1 , Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf2 , Size: 1]
	int InputPriority;//[Offset: 0xf4 , Size: 4]
	InputComponent* InputComponent;//[Offset: 0xf8 , Size: 4]
	float NetCullDistanceSquared;//[Offset: 0xfc , Size: 4]
	int NetTag;//[Offset: 0x100 , Size: 4]
	float NetConsiderFrequency;//[Offset: 0x108 , Size: 4]
	float NetUpdateFrequency;//[Offset: 0x10c , Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x110 , Size: 4]
	float NetPriority;//[Offset: 0x118 , Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120 , Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120 , Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120 , Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x120 , Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x120 , Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x120 , Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x120 , Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x120 , Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x121 , Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x121 , Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x121 , Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x121 , Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x121 , Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x122 , Size: 1]
	Pawn* Instigator;//[Offset: 0x130 , Size: 4]
	Actor*[] Children;//[Offset: 0x134 , Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x140 , Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x144 , Size: 12]
	FName[] Layers;//[Offset: 0x158 , Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x164 , Size: 8]
	FName[] Tags;//[Offset: 0x16c , Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x178 , Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x180 , Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x18c , Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x198 , Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1a4 , Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1b0 , Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1bc , Size: 12]
	delegate OnClicked;//[Offset: 0x1c8 , Size: 12]
	delegate OnReleased;//[Offset: 0x1d4 , Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1e0 , Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1ec , Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x1f8 , Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x204 , Size: 12]
	delegate OnActorHit;//[Offset: 0x210 , Size: 12]
	delegate OnDestroyed;//[Offset: 0x21c , Size: 12]
	delegate OnEndPlay;//[Offset: 0x228 , Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2ac , Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2b8 , Size: 12]
	bool WasRecentlyRendered(float Tolerance);// 0x2c9c6f4
	void UserConstructionScript();// 0x1bf56d0
	void TearOff();// 0x1333500
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x2c9c638
	void SetTickGroup(byte NewTickGroup);// 0x2c9c5c0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x2c9c540
	void SetReplicates(bool bInReplicates);// 0x2c9c4c0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x2c9c438
	void SetOwner(Actor* NewOwner);// 0x13b3438
	void SetNetDormancy(byte NewDormancy);// 0x2c9c3c0
	void SetLifeSpan(float InLifespan);// 0x2c9c340
	void SetActorTickInterval(float TickInterval);// 0x2c9c2c8
	void SetActorTickEnabled(bool bEnabled);// 0x2c9c248
	void SetActorScale3D(Vector NewScale3D);// 0x2c9c1d8
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x2c9c168
	void SetActorHiddenInGame(bool bNewHidden);// 0x2c9c0e0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x2c9c060
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1339f44
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1339fe0
	void ReceiveTick(float DeltaSeconds);// 0x1bf56d0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1bf56d0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1bf56d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1bf56d0
	void ReceiveDestroyed();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1bf56d0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1bf56d0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1bf56d0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1bf56d0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1bf56d0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1bf56d0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1bf56d0
	void ReceiveActorEndCursorOver();// 0x1bf56d0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1bf56d0
	void ReceiveActorBeginCursorOver();// 0x1bf56d0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x2c9bf4c
	void OnRep_ReplicateMovement();// 0x13118ec
	void OnRep_ReplicatedMovement();// 0x12d7a20
	void OnRep_Owner();// 0x13dc3b0
	void OnRep_Instigator();// 0x2c9bf30
	void OnRep_AttachmentReplication();// 0x131144c
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x2c9bd94
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x1380200
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x2c9bccc
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9bab0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x2c9b9dc
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9b7d0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9b64c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9b4d0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9b300
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9b180
	void K2_OnReset();// 0x1bf56d0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1bf56d0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1bf56d0
	SceneComponent* K2_GetRootComponent();// 0x2c9b164
	Rotator K2_GetActorRotation();// 0x2c9b05c
	Vector K2_GetActorLocation();// 0x2c9aff8
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x2c9aef8
	void K2_DestroyComponent(ActorComponent* Component);// 0x2c9ae80
	void K2_DestroyActor();// 0x2c9ae64
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2c9ac84
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2c9aaa4
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x2c9a950
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x2c9a7fc
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9a5f0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9a468
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9a2ec
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9a0e0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c99f5c
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c99de0
	bool IsOverlappingActor(const Actor* Other);// 0x2c99d60
	bool IsChildActor();// 0x2c99d38
	bool IsActorTickEnabled();// 0x2c99d10
	bool IsActorBeingDestroyed();// 0x2c99cec
	bool HasAuthority();// 0x2c99cc4
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x2c99c44
	Vector GetVelocity();// 0x2c99bf4
	Transform GetTransform();// 0x2c99b60
	bool GetTickableWhenPaused();// 0x2c99b38
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x2c99ab8
	byte GetRemoteRole();// 0x2c99a9c
	ChildActorComponent* GetParentComponent();// 0x2c99a74
	Actor* GetParentActor();// 0x2c99a4c
	Actor* GetOwner();// 0x2c99a30
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x2c99964
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2c99850
	float GetLifeSpan();// 0x2c99820
	Controller* GetInstigatorController();// 0x2c997f8
	Pawn* GetInstigator();// 0x2c997d0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x2c994cc
	float GetInputAxisValue(const FName InputAxisName);// 0x2c9944c
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x2c99154
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x2c990d4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x2c99054
	float GetGameTimeSinceCreation();// 0x2c9902c
	float GetDotProductTo(const Actor* OtherActor);// 0x2c98fac
	float GetDistanceTo(const Actor* OtherActor);// 0x2c98f2c
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x2c98dd8
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x2c98cd0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x2c98c50
	FName GetAttachParentSocketName();// 0x2c98c10
	Actor* GetAttachParentActor();// 0x2c98be8
	void GetAttachedActors(out Actor*[] OutActors);// 0x2c98b1c
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x2c98a00
	Vector GetActorUpVector();// 0x2c9898c
	float GetActorTimeDilation();// 0x2c98964
	float GetActorTickInterval();// 0x2c9893c
	Vector GetActorScale3D();// 0x2c988f4
	Vector GetActorRightVector();// 0x2c98880
	Vector GetActorRelativeScale3D();// 0x2c98838
	Vector GetActorForwardVector();// 0x2c987c4
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x2c986e4
	bool GetActorEnableCollision();// 0x2c986c4
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x2c9859c
	void ForceNetUpdate();// 0x13e0834
	void ForceNetConsider();// 0x2c98580
	void FlushNetDormancy();// 0x2c9856c
	void EnableInput(PlayerController* PlayerController);// 0x2c984ec
	void DisableInput(PlayerController* PlayerController);// 0x2c9846c
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x2c983ec
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2c9836c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x2c982ec
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x2c98100
	bool ActorHasTag(FName Tag);// 0x2c98080

--------------------------------
Class: Color
	byte B;//[Offset: 0x0 , Size: 1]
	byte G;//[Offset: 0x1 , Size: 1]
	byte R;//[Offset: 0x2 , Size: 1]
	byte A;//[Offset: 0x3 , Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x500 , Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x504 , Size: 4]
	Vector PrePivot;//[Offset: 0x508 , Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c , Size: 52]
	FName BoneName;//[Offset: 0x50 , Size: 8]
	byte PhysicsType;//[Offset: 0x58 , Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59 , Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59 , Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59 , Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59 , Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59 , Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59 , Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59 , Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c , Size: 4]
	byte CollisionReponse;//[Offset: 0x60 , Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x61 , Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x68 , Size: 328]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1b0 , Size: 16]
	float BuildScale;//[Offset: 0x1c0 , Size: 4]
	Vector BuildScale3D;//[Offset: 0x1c4 , Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0 , Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc , Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18 , Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10 , Size: 64]
	Vector Center;//[Offset: 0x50 , Size: 12]
	float Radius;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0 , Size: 16]
	Plane YPlane;//[Offset: 0x10 , Size: 16]
	Plane ZPlane;//[Offset: 0x20 , Size: 16]
	Plane WPlane;//[Offset: 0x30 , Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10 , Size: 64]
	Quat Orientation;//[Offset: 0x50 , Size: 16]
	Vector Center;//[Offset: 0x60 , Size: 12]
	Rotator Rotation;//[Offset: 0x6c , Size: 12]
	float X;//[Offset: 0x78 , Size: 4]
	float Y;//[Offset: 0x7c , Size: 4]
	float Z;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0 , Size: 4]
	float Yaw;//[Offset: 0x4 , Size: 4]
	float Roll;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10 , Size: 64]
	Quat Orientation;//[Offset: 0x50 , Size: 16]
	Vector Center;//[Offset: 0x60 , Size: 12]
	Rotator Rotation;//[Offset: 0x6c , Size: 12]
	float Radius;//[Offset: 0x78 , Size: 4]
	float Length;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10 , Size: 12]
	Box ElemBox;//[Offset: 0x1c , Size: 28]
	Transform Transform;//[Offset: 0x40 , Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0 , Size: 12]
	Vector Max;//[Offset: 0xc , Size: 12]
	byte IsValid;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0 , Size: 16]
	Vector Translation;//[Offset: 0x10 , Size: 12]
	Vector Scale3D;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c , Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20 , Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	float Restitution;//[Offset: 0x24 , Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28 , Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	float Density;//[Offset: 0x2c , Size: 4]
	float RaiseMassToPower;//[Offset: 0x30 , Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34 , Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38 , Size: 4]
	byte SurfaceType;//[Offset: 0x3c , Size: 1]
	float TireFrictionScale;//[Offset: 0x40 , Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0 , Size: 4]
	float FrictionScale;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19 , Size: 1]
	byte DOFMode;//[Offset: 0x1a , Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b , Size: 1]
	FName CollisionProfileName;//[Offset: 0x20 , Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28 , Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55 , Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55 , Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55 , Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55 , Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55 , Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55 , Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55 , Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55 , Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56 , Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56 , Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56 , Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56 , Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56 , Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56 , Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56 , Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56 , Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57 , Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57 , Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57 , Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57 , Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57 , Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58 , Size: 4]
	float MassInKgOverride;//[Offset: 0x64 , Size: 4]
	float LinearDamping;//[Offset: 0x68 , Size: 4]
	float AngularDamping;//[Offset: 0x6c , Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70 , Size: 12]
	Vector COMNudge;//[Offset: 0x7c , Size: 12]
	float MassScale;//[Offset: 0x88 , Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c , Size: 12]
	byte ObjectType;//[Offset: 0x98 , Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4 , Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4 , Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8 , Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc , Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0 , Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4 , Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8 , Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0 , Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8 , Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0 , Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0 , Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0 , Size: 1]
	byte WorldDynamic;//[Offset: 0x1 , Size: 1]
	byte Pawn;//[Offset: 0x2 , Size: 1]
	byte Visibility;//[Offset: 0x3 , Size: 1]
	byte Camera;//[Offset: 0x4 , Size: 1]
	byte PhysicsBody;//[Offset: 0x5 , Size: 1]
	byte Vehicle;//[Offset: 0x6 , Size: 1]
	byte Destructible;//[Offset: 0x7 , Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8 , Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9 , Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa , Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb , Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc , Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd , Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe , Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf , Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10 , Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11 , Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12 , Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13 , Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14 , Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15 , Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16 , Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17 , Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18 , Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19 , Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a , Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b , Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c , Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d , Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e , Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f , Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0 , Size: 8]
	byte Response;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0 , Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0 , Size: 4]
	int Index;//[Offset: 0x4 , Size: 4]
	int SelectionIndex;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4 , Size: 1]
	byte EndTickGroup;//[Offset: 0x5 , Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	float TickInterval;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0 , Size: 12]
	Vector AngularVelocity;//[Offset: 0xc , Size: 12]
	Vector Location;//[Offset: 0x18 , Size: 12]
	Rotator Rotation;//[Offset: 0x24 , Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31 , Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32 , Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33 , Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4 , Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10 , Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c , Size: 12]
	FName AttachSocket;//[Offset: 0x28 , Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x2d0a88c
	bool WasControllerKeyJustPressed(Key Key);// 0x2d0a88c
	bool IsControllerKeyDown(Key Key);// 0x2d0a88c
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2d0a70c
	Vector GetControllerVectorKeyState(Key Key);// 0x2d0a408
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x2d0a328
	float GetControllerKeyTimeDown(Key Key);// 0x2d09f0c
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2d0a204
	float GetControllerAnalogKeyState(Key Key);// 0x2d09f0c

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc , Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc , Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc , Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc , Size: 1]
	float BaseEyeHeight;//[Offset: 0x2d0 , Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x2d4 , Size: 1]
	enum AutoPossessAI;//[Offset: 0x2d5 , Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x2d8 , Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2dc , Size: 4]
	byte RemoteViewPitch;//[Offset: 0x2e0 , Size: 1]
	Controller* LastHitBy;//[Offset: 0x2e4 , Size: 4]
	Controller* Controller;//[Offset: 0x2e8 , Size: 4]
	Vector ControlInputVector;//[Offset: 0x2f4 , Size: 12]
	Vector LastControlInputVector;//[Offset: 0x300 , Size: 12]
	void SpawnDefaultController();// 0x2d9be80
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x2d9bdf8
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x2d9bd28
	void ReceiveUnpossessed(Controller* OldController);// 0x1bf56d0
	void ReceivePossessed(Controller* NewController);// 0x1bf56d0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x2d9bbd4
	void OnRep_PlayerState();// 0x14e2038
	void OnRep_Controller();// 0x2cd5e3c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2d9bac0
	Vector K2_GetMovementInputVector();// 0x2d9b9f0
	bool IsPlayerControlled();// 0x2d9ba90
	bool IsMoveInputIgnored();// 0x2cd5c78
	bool IsLocallyControlled();// 0x2d9ba60
	bool IsControlled();// 0x2d9ba38
	Vector GetPendingMovementInputVector();// 0x2d9b9f0
	Vector GetNavAgentLocation();// 0x2cd5bb4
	PawnMovementComponent* GetMovementComponent();// 0x1409b00
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x2d9b978
	Vector GetLastMovementInputVector();// 0x2d9b930
	Rotator GetControlRotation();// 0x2d9b8e0
	Controller* GetController();// 0x12d4eb8
	Rotator GetBaseAimRotation();// 0x2d9b890
	void DetachFromControllerPendingDestroy();// 0x14c54cc
	Vector ConsumeMovementInputVector();// 0x2d9b840
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x2d9b72c
	void AddControllerYawInput(float Val);// 0x2d9b6ac
	void AddControllerRollInput(float Val);// 0x13213ec
	void AddControllerPitchInput(float Val);// 0x147ff60

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2cc , Size: 4]
	Character* Character;//[Offset: 0x2d8 , Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2dc , Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2e0 , Size: 4]
	Rotator ControlRotation;//[Offset: 0x2e4 , Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0 , Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0 , Size: 1]
	FName StateName;//[Offset: 0x300 , Size: 8]
	Actor* ObservedActor;//[Offset: 0x308 , Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x30c , Size: 12]
	void UnPossess();// 0x2cd611c
	void StopMovement();// 0x2cd6100
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x2cd6020
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x2cd5f98
	void SetIgnoreLookInput(bool bNewLookInput);// 0x2cd5f10
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x14b2ca8
	void ResetIgnoreMoveInput();// 0x2cd5ef4
	void ResetIgnoreLookInput();// 0x2cd5ed8
	void ResetIgnoreInputFlags();// 0x147e57c
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1bf56d0
	void Possess(Pawn* InPawn);// 0x2cd5e58
	void OnRep_PlayerState();// 0x14e2038
	void OnRep_Pawn();// 0x2cd5e3c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x2cd5d20
	Pawn* K2_GetPawn();// 0x2cd5cf8
	bool IsPlayerController();// 0x2cd5cd8
	bool IsMoveInputIgnored();// 0x2cd5ca8
	bool IsLookInputIgnored();// 0x2cd5c78
	bool IsLocalPlayerController();// 0x2cd5c34
	bool IsLocalController();// 0x2cd5c04
	Actor* GetViewTarget();// 0x14e1a40
	Rotator GetDesiredRotation();// 0x2cd5bb4
	Rotator GetControlRotation();// 0x2cd5b64
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x2cd5a98
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x2cd59d0
	PlayerController* CastToPlayerController();// 0x2cd59a8

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x30c , Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x310 , Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x314 , Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x318 , Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x348 , Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x378 , Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x37c , Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x390 , Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3a0 , Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3b0 , Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1 , Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3b4 , Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3b8 , Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3bc , Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3c0 , Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x3c8 , Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc , Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cc , Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cc , Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cc , Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cc , Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cc , Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cc , Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cc , Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cd , Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x3d0 , Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x3d4 , Size: 4]
	int JumpMaxCount;//[Offset: 0x3d8 , Size: 4]
	int JumpCurrentCount;//[Offset: 0x3dc , Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0 , Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x3e4 , Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x3fc , Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x408 , Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x414 , Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4b0 , Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4f0 , Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x500 , Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x2ccc704
	void StopJumping();// 0x2ccc6e8
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x2ccc668
	void SetReplicateMovement(bool bInReplicateMovement);// 0x2c9c438
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x2ccc5a4
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x2ccc48c
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x2ccc30c
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x2ccc2f8
	void OnRep_RootMotion();// 0x2ccc2e4
	void OnRep_ReplicatedBasedMovement();// 0x2ccc2c8
	void OnRep_IsCrouched();// 0x2ccc2ac
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1bf56d0
	void OnLanded(out const HitResult Hit);// 0x1bf56d0
	void OnJumped();// 0x2ccc290
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2ccc174
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1bf56d0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1bf56d0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1bf56d0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1bf56d0
	void Jump();// 0x2ccc158
	bool IsPlayingRootMotion();// 0x2ccc130
	bool IsPlayingNetworkedRootMotionMontage();// 0x2ccc108
	bool IsJumpProvidingForce();// 0x14caa34
	AnimMontage* GetCurrentMontage();// 0x2ccc0e0
	Vector GetBaseTranslationOffset();// 0x2ccc0bc
	Rotator GetBaseRotationOffsetRotator();// 0x2ccc058
	float GetAnimRootMotionTranslationScale();// 0x2ccc030
	void Crouch(bool bClientSimulation);// 0x2ccbfa8
	void ClientCheatWalk();// 0x2ccbf8c
	void ClientCheatGhost();// 0x2ccbf70
	void ClientCheatFly();// 0x14dc010
	bool CanJumpInternal();// 0x2ccbf40
	bool CanJump();// 0x2ccbf18
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x2ccbe50

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x60c , Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x610 , Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x614 , Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x618 , Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x61c , Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x628 , Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x62c , Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x660 , Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x66c , Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x68c , Size: 4]
	enum UseAsyncScene;//[Offset: 0x690 , Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x691 , Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x692 , Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x693 , Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694 , Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x694 , Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x694 , Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x694 , Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x694 , Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x694 , Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x698 , Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a4 , Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a4 , Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a4 , Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a4 , Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6a4 , Size: 1]
	float ClothBlendWeight;//[Offset: 0x6a8 , Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x6b0 , Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6bc , Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6bc , Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6bc , Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd , Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6be , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x6c0 , Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4 , Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c5 , Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c5 , Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c5 , Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c5 , Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c5 , Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6c5 , Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6c5 , Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c5 , Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x6c6 , Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x6c8 , Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x6d8 , Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x798 , Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x79c , Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x7a0 , Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x890 , Size: 12]
	bool ReuseAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c , Size: 1]
	AnimSequence* SequenceToPlay;//[Offset: 0x928 , Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0x92c , Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x930 , Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x930 , Size: 1]
	float DefaultPosition;//[Offset: 0x934 , Size: 4]
	float DefaultPlayRate;//[Offset: 0x938 , Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0x93c , Size: 4]
	float LastPoseTickTime;//[Offset: 0x940 , Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c , Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97e , Size: 1]
	enum CurrentTickMode;//[Offset: 0x97f , Size: 1]
	bool bEnableConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x984 , Size: 1]
	bool bEnableShouldUseLodMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x985 , Size: 1]
	bool bEnableShouldUseMidLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x986 , Size: 1]
	bool bEnableUseSkipMapForDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x987 , Size: 1]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x988 , Size: 12]
	LODToSkipFrame[] ConfigLODToFrameSkipMap;//[Offset: 0x994 , Size: 12]
	float ConfigMinDistFromMainChar;//[Offset: 0x9a0 , Size: 4]
	float ConfigMaxDistFromMainChar;//[Offset: 0x9a4 , Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x9a8 , Size: 4]
	bool bEnableNewURO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac , Size: 1]
	bool bShouldUseMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ad , Size: 1]
	bool bShouldUseLodMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ae , Size: 1]
	bool bUseSkipMapForDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9af , Size: 1]
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x9b0 , Size: 12]
	LODToSkipFrame[] LODToFrameSkipMap;//[Offset: 0x9bc , Size: 12]
	float MinDistFromMainChar;//[Offset: 0x9c8 , Size: 4]
	float MaxDistFromMainChar;//[Offset: 0x9cc , Size: 4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x9d0 , Size: 4]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x2dd44a4
	void SuspendClothingSimulation();// 0x2dd4490
	void Stop();// 0x2dd447c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2dd436c
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x133a074
	void SetTickMode(enum BatchedStatus);// 0x2dd42f8
	void SetTeleportRotationThreshold(float Threshold);// 0x2dd4280
	void SetTeleportDistanceThreshold(float Threshold);// 0x2dd4208
	void SetPosition(float InPos, bool bFireNotifies);// 0x2dd4144
	void SetPlayRate(float Rate);// 0x2dd40cc
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x2dd4054
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x2dd3f30
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x2dd3e1c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x2dd3d9c
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x2dd3c80
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x2dd3bb8
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x2dd3b38
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x2dd3a6c
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x2dd3950
	void SetClothMaxDistanceScale(float Scale);// 0x2dd38d8
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x2dd3808
	void SetAnimInstanceClass(class Object NewClass);// 0x2dd3790
	void SetAnimationMode(byte InAnimationMode);// 0x2dd3718
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x2dd36a0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x2dd354c
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x2dd3430
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x2dd33b0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2dd3290
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x2dd3170
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x2dd3020
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x2dd2fa0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2dd2edc
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x2dd2db0
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x2dd2c3c
	void ResumeClothingSimulation();// 0x2dd2c28
	void ResetClothTeleportMode();// 0x2dd2c14
	void ResetAllowedAnimCurveEvaluation();// 0x2dd2c00
	void ResetAllBodiesSimulatePhysics();// 0x2dd2bec
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x2dd2b28
	void Play(bool bLooping);// 0x2dd2aa8
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x2dd2900
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x2dd2714
	bool IsPlaying();// 0x2dd26ec
	bool IsClothingSimulationSuspended();// 0x2dd26c4
	bool IsBodyGravityEnabled(FName BoneName);// 0x2dd2644
	enum GetTickMode();// 0x2dd2628
	float GetTeleportRotationThreshold();// 0x2dd2600
	float GetTeleportDistanceThreshold();// 0x2dd2600
	AnimInstance*[] GetSubAnimInstances();// 0x2dd2540
	Vector GetSkeletalCenterOfMass();// 0x2dd24f8
	AnimInstance* GetPostProcessInstance();// 0x2dd24d0
	float GetPosition();// 0x2dd24a8
	float GetPlayRate();// 0x2dd2480
	float GetMorphTarget(FName MorphTargetName);// 0x2dd2400
	bool GetDisableAnimCurves();// 0x2dd23dc
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x2dd225c
	float GetClothMaxDistanceScale();// 0x2dd2234
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x2dd2160
	AnimInstance* GetAnimInstance();// 0x2dd2138
	byte GetAnimationMode();// 0x2dd2110
	bool GetAllowedAnimCurveEvaluate();// 0x2dd20f0
	void ForceClothNextUpdateTeleportAndReset();// 0x2dd20dc
	void ForceClothNextUpdateTeleport();// 0x2dd20c8
	FName FindConstraintBoneName(int ConstraintIndex);// 0x2dd2040
	void ClearMorphTargets();// 0x2dd202c
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x2dd1f1c
	void BindClothToMasterPoseComponent();// 0x2dd1f08
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x2dd1e3c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x2dd1cd4
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x2dd1b6c
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x2dd1a4c

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x51c , Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x520 , Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c , Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x588 , Size: 4]
	int ForcedLodModel;//[Offset: 0x58c , Size: 4]
	int MinLodModel;//[Offset: 0x590 , Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5a0 , Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x5ac , Size: 4]
	Color WireframeColor;//[Offset: 0x5b0 , Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b4 , Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b4 , Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b4 , Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b4 , Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c4 , Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c4 , Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c4 , Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x5c5 , Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c6 , Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c7 , Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c7 , Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c7 , Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x5c8 , Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c9 , Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c9 , Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5cc , Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d0 , Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x5dc , Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8 , Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9 , Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa , Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fb , Size: 1]
	void UnHideBoneByName(FName BoneName);// 0x2dd8168
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2dd7fa4
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x2dd7de0
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x2dd7cd0
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x2dd7bc0
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x2dd7af4
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x2dd7a28
	void SetMinLOD(int InNewMinLOD);// 0x2dd79b0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x2dd7938
	void SetForcedLOD(int InNewForcedLOD);// 0x2dd78c0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x2dd7840
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x2dd77c0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x2dd7748
	bool IsBoneHiddenByName(FName BoneName);// 0x2dd76c8
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x2dd7604
	FName GetSocketBoneName(FName InSocketName);// 0x2dd7578
	FName GetParentBone(FName BoneName);// 0x2dd74ec
	int GetNumBones();// 0x2dd74c4
	FName GetBoneName(int BoneIndex);// 0x2dd743c
	int GetBoneIndex(FName BoneName);// 0x2dd73bc
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x2dd7244
	void ClearVertexColorOverride(int LODIndex);// 0x2dd71cc
	void ClearSkinWeightOverride(int LODIndex);// 0x2dd7154
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x2dd7088

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x500 , Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2d7f420
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2d7f35c
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2d7f248
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x2d7f1c0
	FName[] GetMaterialSlotNames();// 0x2d7f0f8
	MaterialInterface*[] GetMaterials();// 0x2d7f030
	int GetMaterialIndex(FName MaterialSlotName);// 0x2d7efa8

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c , Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	float CullingScreenSize;//[Offset: 0x34 , Size: 4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x38 , Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x54 , Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x70 , Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x7c , Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0x88 , Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x94 , Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xa0 , Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xa1 , Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xa4 , Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0 , Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0 , Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0 , Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0 , Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0 , Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0 , Size: 1]
	BodySetup* BodySetup;//[Offset: 0xb4 , Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xb8 , Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xbc , Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xc0 , Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xcc , Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x1e4 , Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x1f0 , Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x1f4 , Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x200 , Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x210 , Size: 12]
	int NumSockets();// 0x2dd01dc
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x2dd0110
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x2dd0090
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x2dd0010
	BoxSphereBounds GetImportedBounds();// 0x2dcffbc
	BoxSphereBounds GetBounds();// 0x2dcff68
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x2dcfe8c
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x2dcfe0c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20 , Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c , Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108 , Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118 , Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124 , Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c , Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8 , Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4 , Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x270 , Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0 , Size: 8]
	int ParentIndex;//[Offset: 0x8 , Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc , Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0 , Size: 4]
	int B;//[Offset: 0x4 , Size: 4]
	int C;//[Offset: 0x8 , Size: 4]
	int D;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0 , Size: 8]
	FName TargetBoneName;//[Offset: 0x8 , Size: 8]
	FName VirtualBoneName;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20 , Size: 8]
	FName BoneName;//[Offset: 0x28 , Size: 8]
	Vector RelativeLocation;//[Offset: 0x30 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c , Size: 12]
	Vector RelativeScale;//[Offset: 0x48 , Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x2dd606c
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x2dd5fdc

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20 , Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0 , Size: 24]
	float BlendScale;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0 , Size: 8]
	FName[] SlotNames;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0 , Size: 12]
	Vector BoxExtent;//[Offset: 0xc , Size: 12]
	float SphereRadius;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0 , Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	FName MaterialSlotName;//[Offset: 0x8 , Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10 , Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28 , Size: 24]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20 , Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x28 , Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x3c , Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset);// 0x14e8e00
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x2d7cbc0
	PhysicalMaterial* GetPhysicalMaterial();// 0x2d7cb90
	Material* GetBaseMaterial();// 0x2d7cb68

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c , Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0 , Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4 , Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14 , Size: 16]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0 , Size: 4]
	float G;//[Offset: 0x4 , Size: 4]
	float B;//[Offset: 0x8 , Size: 4]
	float A;//[Offset: 0xc , Size: 4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	float EmissiveBoost;//[Offset: 0x4 , Size: 4]
	float DiffuseBoost;//[Offset: 0x8 , Size: 4]
	float ExportResolutionScale;//[Offset: 0xc , Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0 , Size: 4]
	int UVChannelIndex;//[Offset: 0x4 , Size: 4]
	FName TextureName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x4c , Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x50 , Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x88 , Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc0 , Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0xf8 , Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x130 , Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x168 , Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a0 , Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e0 , Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x218 , Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x250 , Size: 56]
	byte MaterialDomain;//[Offset: 0x288 , Size: 1]
	byte BlendMode;//[Offset: 0x289 , Size: 1]
	byte DecalBlendMode;//[Offset: 0x28a , Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x28b , Size: 1]
	byte ShadingModel;//[Offset: 0x28c , Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x290 , Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x294 , Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298 , Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a0 , Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e0 , Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x320 , Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x358 , Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x390 , Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3c8 , Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x400 , Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x438 , Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x470 , Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x670 , Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6a8 , Size: 56]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e0 , Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e0 , Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e0 , Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e0 , Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e0 , Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e0 , Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6e0 , Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e0 , Size: 1]
	int NumCustomizedUVs;//[Offset: 0x6e4 , Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x6e8 , Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x6ec , Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0 , Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x6f4 , Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x6f8 , Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x6fc , Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x700 , Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x704 , Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x708 , Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x718 , Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c , Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c , Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c , Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c , Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71c , Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c , Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71c , Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71c , Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71d , Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71d , Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71d , Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71d , Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71d , Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71d , Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71d , Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71d , Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71e , Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71e , Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71e , Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71e , Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71e , Size: 1]
	bool bIgnoreForceUseVertexNormal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71e , Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71e , Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71e , Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71f , Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71f , Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71f , Size: 1]
	bool bBatchSimilarMaterialInstances;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71f , Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71f , Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71f , Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71f , Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71f , Size: 1]
	byte ShadowOverride;//[Offset: 0x720 , Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x721 , Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x722 , Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x722 , Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x722 , Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x723 , Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x724 , Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x724 , Size: 1]
	float MaxDisplacement;//[Offset: 0x728 , Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72c , Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72c , Size: 1]
	int EditorX;//[Offset: 0x730 , Size: 4]
	int EditorY;//[Offset: 0x734 , Size: 4]
	int EditorPitch;//[Offset: 0x738 , Size: 4]
	int EditorYaw;//[Offset: 0x73c , Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x740 , Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x74c , Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x758 , Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764 , Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x764 , Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x764 , Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x764 , Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x764 , Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x764 , Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x764 , Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x764 , Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x768 , Size: 4]
	byte BlendableLocation;//[Offset: 0x76c , Size: 1]
	int BlendablePriority;//[Offset: 0x770 , Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774 , Size: 1]
	byte RefractionMode;//[Offset: 0x775 , Size: 1]
	float RefractionDepthBias;//[Offset: 0x778 , Size: 4]
	Guid stateID;//[Offset: 0x77c , Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x814 , Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Color Constant;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0 , Size: 4]
	FString InputName;//[Offset: 0x4 , Size: 12]
	int Mask;//[Offset: 0x10 , Size: 4]
	int MaskR;//[Offset: 0x14 , Size: 4]
	int MaskG;//[Offset: 0x18 , Size: 4]
	int MaskB;//[Offset: 0x1c , Size: 4]
	int MaskA;//[Offset: 0x20 , Size: 4]
	FName ExpressionName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float Constant;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Vector Constant;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float ConstantX;//[Offset: 0x34 , Size: 4]
	float ConstantY;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0 , Size: 4]
	FString InputName;//[Offset: 0x4 , Size: 12]
	int Mask;//[Offset: 0x10 , Size: 4]
	int MaskR;//[Offset: 0x14 , Size: 4]
	int MaskG;//[Offset: 0x18 , Size: 4]
	int MaskB;//[Offset: 0x1c , Size: 4]
	int MaskA;//[Offset: 0x20 , Size: 4]
	FName ExpressionName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c , Size: 4]
	MaterialFunction* Function;//[Offset: 0x20 , Size: 4]
	FString Desc;//[Offset: 0x24 , Size: 12]
	Color BorderColor;//[Offset: 0x30 , Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34 , Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34 , Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34 , Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34 , Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34 , Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35 , Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35 , Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35 , Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c , Size: 16]
	FString Description;//[Offset: 0x2c , Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c , Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0 , Size: 12]
	int Mask;//[Offset: 0xc , Size: 4]
	int MaskR;//[Offset: 0x10 , Size: 4]
	int MaskG;//[Offset: 0x14 , Size: 4]
	int MaskB;//[Offset: 0x18 , Size: 4]
	int MaskA;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0 , Size: 16]
	MaterialFunction* Function;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0 , Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c , Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c , Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	Guid ID;//[Offset: 0x8 , Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18 , Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20 , Size: 16]
	int LODBias;//[Offset: 0x30 , Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34 , Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38 , Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38 , Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38 , Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38 , Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38 , Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c , Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48 , Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	byte CompressionSettings;//[Offset: 0x4d , Size: 1]
	byte Filter;//[Offset: 0x4e , Size: 1]
	byte LODGroup;//[Offset: 0x4f , Size: 1]
	bool bDisableCrunchCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]
	float CrunchCompressionAmmount;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	float LocalUVDensities;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0 , Size: 8]
	FString SubPathString;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0 , Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0 , Size: 4]
	float LODHysteresis;//[Offset: 0x4 , Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8 , Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14 , Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20 , Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30 , Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178 , Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204 , Size: 532]
	FName[] RemovedBones;//[Offset: 0x418 , Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424 , Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430 , Size: 4]
	FString SourceImportFilename;//[Offset: 0x434 , Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440 , Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0 , Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1 , Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0 , Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4 , Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8 , Size: 4]
	int ScreenSize;//[Offset: 0xc , Size: 4]
	float WeldingThreshold;//[Offset: 0x10 , Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float NormalsThreshold;//[Offset: 0x18 , Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c , Size: 1]
	byte TextureImportance;//[Offset: 0x1d , Size: 1]
	byte ShadingImportance;//[Offset: 0x1e , Size: 1]
	byte SkinningImportance;//[Offset: 0x1f , Size: 1]
	float BoneReductionRatio;//[Offset: 0x20 , Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24 , Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c , Size: 12]
	int BaseLOD;//[Offset: 0x38 , Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c , Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42 , Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44 , Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac , Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140 , Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144 , Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	byte MaterialLODType;//[Offset: 0x1 , Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	byte TextureWidth;//[Offset: 0x3 , Size: 1]
	byte TextureHeight;//[Offset: 0x4 , Size: 1]
	byte SamplingQuality;//[Offset: 0x5 , Size: 1]
	int GutterSpace;//[Offset: 0x8 , Size: 4]
	byte TextureStrech;//[Offset: 0xc , Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10 , Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e , Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f , Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24 , Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0 , Size: 1]
	byte Caster;//[Offset: 0x1 , Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	byte ColorChannels;//[Offset: 0x3 , Size: 1]
	int BitsPerChannel;//[Offset: 0x4 , Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa , Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb , Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0 , Size: 8]
	byte TextureSizingType;//[Offset: 0x8 , Size: 1]
	float GutterSpace;//[Offset: 0xc , Size: 4]
	enum SamplingQuality;//[Offset: 0x10 , Size: 1]
	enum UVStrech;//[Offset: 0x11 , Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13 , Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15 , Size: 1]
	float MetallicConstant;//[Offset: 0x18 , Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	float RoughnessConstant;//[Offset: 0x20 , Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float SpecularConstant;//[Offset: 0x28 , Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d , Size: 1]
	float OpacityConstant;//[Offset: 0x30 , Size: 4]
	float AOConstant;//[Offset: 0x34 , Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c , Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44 , Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48 , Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50 , Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58 , Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60 , Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68 , Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70 , Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78 , Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80 , Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88 , Size: 8]
	byte MaterialMergeType;//[Offset: 0x90 , Size: 1]
	byte BlendMode;//[Offset: 0x91 , Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0 , Size: 4]
	int Y;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c , Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80 , Size: 12]
	byte AdditiveAnimType;//[Offset: 0xf0 , Size: 1]
	byte RefPoseType;//[Offset: 0xf1 , Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0xf4 , Size: 4]
	int RefFrameIndex;//[Offset: 0xf8 , Size: 4]
	int EncodingPkgVersion;//[Offset: 0xfc , Size: 4]
	FName RetargetSource;//[Offset: 0x100 , Size: 8]
	enum Interpolation;//[Offset: 0x108 , Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109 , Size: 1]
	byte RootMotionRootLock;//[Offset: 0x10a , Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b , Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x110 , Size: 12]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c , Size: 12]
	float SequenceLength;//[Offset: 0x68 , Size: 4]
	float RateScale;//[Offset: 0x6c , Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70 , Size: 12]
	float GetPlayLength();// 0x13160e0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20 , Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44 , Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50 , Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0 , Size: 8]
	float Time;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24 , Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28 , Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c , Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30 , Size: 4]
	FName NotifyName;//[Offset: 0x38 , Size: 8]
	AnimNotify* Notify;//[Offset: 0x40 , Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44 , Size: 4]
	float Duration;//[Offset: 0x48 , Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c , Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70 , Size: 1]
	byte MontageTickType;//[Offset: 0x71 , Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74 , Size: 4]
	byte NotifyFilterType;//[Offset: 0x78 , Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c , Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	int TrackIndex;//[Offset: 0x84 , Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4 , Size: 4]
	int SlotIndex;//[Offset: 0x8 , Size: 4]
	int SegmentIndex;//[Offset: 0xc , Size: 4]
	byte LinkMethod;//[Offset: 0x10 , Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11 , Size: 1]
	float SegmentBeginTime;//[Offset: 0x14 , Size: 4]
	float SegmentLength;//[Offset: 0x18 , Size: 4]
	float LinkValue;//[Offset: 0x1c , Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c , Size: 44]
	float BlendInTime;//[Offset: 0xa8 , Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac , Size: 44]
	float BlendOutTime;//[Offset: 0xd8 , Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc , Size: 4]
	FName SyncGroup;//[Offset: 0xe0 , Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8 , Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec , Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104 , Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110 , Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c , Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128 , Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129 , Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a , Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c , Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138 , Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144 , Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168 , Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0 , Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4 , Size: 4]
	float blendTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20 , Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]
	float GetFloatValue(float InTime);// 0x2cd84ec

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x2cd7f28
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x2cd7e48

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40 , Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41 , Size: 1]
	float DefaultValue;//[Offset: 0x44 , Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4 , Size: 60]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0 , Size: 1]
	byte TangentMode;//[Offset: 0x1 , Size: 1]
	byte TangentWeightMode;//[Offset: 0x2 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]
	float Value;//[Offset: 0x8 , Size: 4]
	float ArriveTangent;//[Offset: 0xc , Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10 , Size: 4]
	float LeaveTangent;//[Offset: 0x14 , Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28 , Size: 8]
	float StartTime;//[Offset: 0x30 , Size: 4]
	FName NextSectionName;//[Offset: 0x38 , Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0 , Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0 , Size: 4]
	float StartPos;//[Offset: 0x4 , Size: 4]
	float AnimStartTime;//[Offset: 0x8 , Size: 4]
	float AnimEndTime;//[Offset: 0xc , Size: 4]
	float AnimPlayRate;//[Offset: 0x10 , Size: 4]
	int LoopingCount;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28 , Size: 8]
	float DisplayTime;//[Offset: 0x30 , Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0 , Size: 4]
	float TriggerTime;//[Offset: 0x4 , Size: 4]
	byte NotifyEventType;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0 , Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4 , Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8 , Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0 , Size: 4]
	float alpha;//[Offset: 0xc , Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x1bf56d0
	FString GetNotifyName();// 0x2caddc4

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x1bf56d0
	bool Received_NotifyEnd(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x1bf56d0
	bool Received_NotifyBegin(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x1bf56d0
	FString GetNotifyName();// 0x2caddc4

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c , Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0 , Size: 8]
	SmartName Name;//[Offset: 0x8 , Size: 16]
	int CurveTypeFlags;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	int ScreenSize;//[Offset: 0x4 , Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	float HardAngleThreshold;//[Offset: 0xc , Size: 4]
	int MergeDistance;//[Offset: 0x10 , Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float ClippingLevel;//[Offset: 0x18 , Size: 4]
	int AxisIndex;//[Offset: 0x1c , Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22 , Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24 , Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1 , Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4 , Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c , Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210 , Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0 , Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4 , Size: 148]
	int TextureWidth;//[Offset: 0x98 , Size: 4]
	int TextureHeight;//[Offset: 0x9c , Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1 , Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2 , Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3 , Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float MergeDistance;//[Offset: 0xa8 , Size: 4]
	float HardAngleThreshold;//[Offset: 0xac , Size: 4]
	int LightMapResolution;//[Offset: 0xb0 , Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5 , Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6 , Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7 , Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8 , Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9 , Size: 1]
	int LODGroupIndex;//[Offset: 0xbc , Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	enum AggregatorMode;//[Offset: 0xc1 , Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2 , Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c , Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28 , Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34 , Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc , Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0 , Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x258 , Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0 , Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0 , Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	float OrientationStrength;//[Offset: 0xc , Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10 , Size: 4]
	float PositionStrength;//[Offset: 0x14 , Size: 4]
	float VelocityStrength;//[Offset: 0x18 , Size: 4]
	float MaxLinearForce;//[Offset: 0x1c , Size: 4]
	float MaxAngularForce;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20 , Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0 , Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc , Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10 , Size: 8]
	FName ConstraintBone1;//[Offset: 0x18 , Size: 8]
	FName ConstraintBone2;//[Offset: 0x20 , Size: 8]
	Vector Pos1;//[Offset: 0x28 , Size: 12]
	Vector PriAxis1;//[Offset: 0x34 , Size: 12]
	Vector SecAxis1;//[Offset: 0x40 , Size: 12]
	Vector Pos2;//[Offset: 0x4c , Size: 12]
	Vector PriAxis2;//[Offset: 0x58 , Size: 12]
	Vector SecAxis2;//[Offset: 0x64 , Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70 , Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84 , Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0 , Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4 , Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8 , Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc , Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10 , Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c , Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c , Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68 , Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4 , Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100 , Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100 , Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100 , Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100 , Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100 , Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14 , Size: 4]
	byte XMotion;//[Offset: 0x18 , Size: 1]
	byte YMotion;//[Offset: 0x19 , Size: 1]
	byte ZMotion;//[Offset: 0x1a , Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0 , Size: 4]
	float Damping;//[Offset: 0x4 , Size: 4]
	float Restitution;//[Offset: 0x8 , Size: 4]
	float ContactDistance;//[Offset: 0xc , Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14 , Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18 , Size: 4]
	byte Swing1Motion;//[Offset: 0x1c , Size: 1]
	byte Swing2Motion;//[Offset: 0x1d , Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14 , Size: 4]
	byte TwistMotion;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0 , Size: 12]
	Vector VelocityTarget;//[Offset: 0xc , Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18 , Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28 , Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38 , Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0 , Size: 4]
	float Damping;//[Offset: 0x4 , Size: 4]
	float MaxForce;//[Offset: 0x8 , Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0 , Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10 , Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20 , Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30 , Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c , Size: 12]
	byte AngularDriveMode;//[Offset: 0x48 , Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0 , Size: 260]
	FName ProfileName;//[Offset: 0x108 , Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c , Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58 , Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0 , Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10 , Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	class Object* ParentClass;//[Offset: 0x3c , Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40 , Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48 , Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c , Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58 , Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64 , Size: 4]
	byte BlueprintType;//[Offset: 0x68 , Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c , Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8 , Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c , Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20 , Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c , Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28 , Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34 , Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38 , Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c , Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c , Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20 , Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28 , Size: 56]
	FName VariableName;//[Offset: 0x60 , Size: 8]
	FName AttachToName;//[Offset: 0x68 , Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70 , Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78 , Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84 , Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90 , Size: 12]
	Guid VariableGuid;//[Offset: 0x9c , Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad , Size: 1]
	FName NativeComponentName;//[Offset: 0xb0 , Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8 , Size: 1]
	FName InternalVariableName;//[Offset: 0xc0 , Size: 8]
	bool bIsLazyLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0 , Size: 8]
	int ArrayIndex;//[Offset: 0x8 , Size: 4]
	Struct* PropertyScope;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0 , Size: 8]
	FString DataValue;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c , Size: 4]
	byte LengthMode;//[Offset: 0x20 , Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21 , Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21 , Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21 , Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21 , Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24 , Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30 , Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c , Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48 , Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54 , Size: 12]
	Guid TimelineGuid;//[Offset: 0x60 , Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0 , Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc , Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20 , Size: 84]
	Vector GetVectorValue(float InTime);// 0x2cd975c

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc , Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20 , Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x2cd88d4

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c , Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0 , Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4 , Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8 , Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28 , Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0 , Size: 4]
	FName SCSVariableName;//[Offset: 0x8 , Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0 , Size: 8]
	FString ApexFileName;//[Offset: 0x8 , Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18 , Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0 , Size: 4]
	float HorizontalResistance;//[Offset: 0x4 , Size: 4]
	float BendResistance;//[Offset: 0x8 , Size: 4]
	float ShearResistance;//[Offset: 0xc , Size: 4]
	float Friction;//[Offset: 0x10 , Size: 4]
	float Damping;//[Offset: 0x14 , Size: 4]
	float TetherStiffness;//[Offset: 0x18 , Size: 4]
	float TetherLimit;//[Offset: 0x1c , Size: 4]
	float Drag;//[Offset: 0x20 , Size: 4]
	float StiffnessFrequency;//[Offset: 0x24 , Size: 4]
	float GravityScale;//[Offset: 0x28 , Size: 4]
	float MassScale;//[Offset: 0x2c , Size: 4]
	float InertiaBlend;//[Offset: 0x30 , Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34 , Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38 , Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c , Size: 4]
	float SolverFrequency;//[Offset: 0x40 , Size: 4]
	float FiberCompression;//[Offset: 0x44 , Size: 4]
	float FiberExpansion;//[Offset: 0x48 , Size: 4]
	float FiberResistance;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c , Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20 , Size: 4]
	byte RootMotionMode;//[Offset: 0x24 , Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27 , Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c , Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38 , Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44 , Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50 , Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118 , Size: 12]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x2ca6aec
	Pawn* TryGetPawnOwner();// 0x1545e9c
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x2ca7cfc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x2ca7be4
	void SetRootMotionMode(byte Value);// 0x2ca7b64
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x2ca7aa0
	void SavePoseSnapshot(FName SnapshotName);// 0x2ca7a20
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x2ca77a8
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x2ca75c0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x2ca7504
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x2ca7448
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x2ca738c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x2ca7284
	void Montage_Resume(const AnimMontage* Montage);// 0x2ca720c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x14d8080
	void Montage_Pause(const AnimMontage* Montage);// 0x2ca7194
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x2ca70d8
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x2ca701c
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x2ca6f9c
	bool Montage_IsActive(const AnimMontage* Montage);// 0x2ca6f1c
	float Montage_GetPosition(const AnimMontage* Montage);// 0x2ca6e9c
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x2ca6e1c
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x2ca6d44
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x2ca6cc4
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x2ca6c3c
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x2ca6bbc
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x2ca6aec
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x2ca697c
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x2ca68b8
	bool IsAnyMontagePlaying();// 0x2ca6890
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x2ca67c4
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x2ca6694
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x2ca65fc
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x2ca6538
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x2ca6474
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x2ca63b0
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x2ca62ec
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x2ca6228
	SkeletalMeshComponent* GetOwningComponent();// 0x2ca6200
	Actor* GetOwningActor();// 0x2ca61d8
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x2ca6114
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x2ca6050
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x2ca5f8c
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x2ca5ec8
	float GetInstanceMachineWeight(int MachineIndex);// 0x2ca5e48
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x2ca5dc8
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x2ca5d48
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x2ca5cc8
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x2ca5c48
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x2ca5bc8
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x2ca5b48
	float GetCurveValue(FName CurveName);// 0x2ca5ac8
	FName GetCurrentStateName(int MachineIndex);// 0x2ca5a40
	AnimMontage* GetCurrentActiveMontage();// 0x2ca5a18
	void ClearMorphTargets();// 0x2ca5a04
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x2ca5924
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1bf56d0
	void BlueprintPostEvaluateAnimation();// 0x1bf56d0
	void BlueprintInitializeAnimation();// 0x1bf56d0
	void BlueprintBeginPlay();// 0x1bf56d0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0 , Size: 12]
	FName[] BoneNames;//[Offset: 0xc , Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18 , Size: 8]
	FName SnapshotName;//[Offset: 0x20 , Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0 , Size: 8]
	FName NextMarkerName;//[Offset: 0x8 , Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c , Size: 12]
	Guid AssetGuid;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0 , Size: 4]
	byte Weights;//[Offset: 0x20 , Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0 , Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4 , Size: 1]
	float SavedPosition;//[Offset: 0x8 , Size: 4]
	float SavedPlayRate;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: LODToSkipFrame
	int SkipFrame;//[Offset: 0x0 , Size: 4]
	int SkipAnimCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c , Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130 , Size: 1]
	float GravityScale;//[Offset: 0x134 , Size: 4]
	float MaxStepHeight;//[Offset: 0x138 , Size: 4]
	float JumpZVelocity;//[Offset: 0x13c , Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140 , Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144 , Size: 4]
	float WalkableFloorZ;//[Offset: 0x148 , Size: 4]
	byte MovementMode;//[Offset: 0x14c , Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d , Size: 1]
	float GroundFriction;//[Offset: 0x170 , Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174 , Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178 , Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c , Size: 4]
	float MaxFlySpeed;//[Offset: 0x180 , Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184 , Size: 4]
	float MaxAcceleration;//[Offset: 0x188 , Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c , Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190 , Size: 4]
	float BrakingFriction;//[Offset: 0x194 , Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198 , Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c , Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0 , Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4 , Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8 , Size: 4]
	float AirControl;//[Offset: 0x1ac , Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0 , Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4 , Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8 , Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc , Size: 4]
	float Buoyancy;//[Offset: 0x1c0 , Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4 , Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8 , Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc , Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8 , Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8 , Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8 , Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8 , Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8 , Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8 , Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8 , Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9 , Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9 , Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9 , Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9 , Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9 , Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9 , Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc , Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0 , Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4 , Size: 4]
	float Mass;//[Offset: 0x1e8 , Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec , Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed , Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee , Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef , Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0 , Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4 , Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8 , Size: 4]
	float PushForceFactor;//[Offset: 0x1fc , Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200 , Size: 4]
	float TouchForceFactor;//[Offset: 0x204 , Size: 4]
	float MinTouchForce;//[Offset: 0x208 , Size: 4]
	float MaxTouchForce;//[Offset: 0x20c , Size: 4]
	float RepulsionForce;//[Offset: 0x210 , Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214 , Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218 , Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c , Size: 4]
	Vector Acceleration;//[Offset: 0x220 , Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c , Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240 , Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250 , Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c , Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260 , Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c , Size: 12]
	float AnalogInputModifier;//[Offset: 0x278 , Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288 , Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c , Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290 , Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294 , Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298 , Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c , Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0 , Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4 , Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8 , Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac , Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0 , Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4 , Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8 , Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc , Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd , Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0 , Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4 , Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8 , Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x360 , Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x361 , Size: 1]
	byte GroundMovementMode;//[Offset: 0x362 , Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x363 , Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x363 , Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x363 , Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x363 , Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x363 , Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364 , Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364 , Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364 , Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364 , Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x364 , Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x364 , Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x364 , Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x364 , Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365 , Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x365 , Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x365 , Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x365 , Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x365 , Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x365 , Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x365 , Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x366 , Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x366 , Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x366 , Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x378 , Size: 4]
	Vector RequestedVelocity;//[Offset: 0x37c , Size: 12]
	int AvoidanceUID;//[Offset: 0x388 , Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x38c , Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x390 , Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x394 , Size: 4]
	float AvoidanceWeight;//[Offset: 0x398 , Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x39c , Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x448 , Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x44c , Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x450 , Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x454 , Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x458 , Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x45c , Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x460 , Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4a4 , Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4a8 , Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5d0 , Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x610 , Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c , Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d , Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x2cd0600
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x2cd0588
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x2cd04c4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x2cd0440
	void SetGroupsToIgnore(int GroupFlags);// 0x2cd03c8
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x2cd0344
	void SetGroupsToAvoid(int GroupFlags);// 0x2cd02cc
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x2cd0248
	void SetAvoidanceGroup(int GroupFlags);// 0x2cd01d0
	void SetAvoidanceEnabled(bool bEnable);// 0x2cd0150
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x2ccfffc
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x2ccfac4
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x2ccf58c
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x2ccf200
	float K2_GetWalkableFloorZ();// 0x2ccf1d8
	float K2_GetWalkableFloorAngle();// 0x2ccf1b0
	float K2_GetModifiedMaxAcceleration();// 0x12d4e88
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x2ccf0c8
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x2ccef08
	bool IsWalking();// 0x2cceed8
	bool IsWalkable(out const HitResult Hit);// 0x1430c48
	float GetValidPerchRadius();// 0x2cceeb0
	float GetPerchRadiusThreshold();// 0x2ccee88
	PrimitiveComponent* GetMovementBase();// 0x2ccee60
	float GetMinAnalogSpeed();// 0x2ccee30
	float GetMaxJumpHeightWithJumpTime();// 0x2ccee00
	float GetMaxJumpHeight();// 0x2ccedd0
	float GetMaxBrakingDeceleration();// 0x2cceda0
	float GetMaxAcceleration();// 0x14e1b58
	Vector GetImpartedMovementBaseVelocity();// 0x2cced50
	Vector GetCurrentAcceleration();// 0x2cced08
	Character* GetCharacterOwner();// 0x14d272c
	float GetAnalogInputModifier();// 0x2ccece0
	void DisableMovement();// 0x2ccecc4
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2ccea84
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cce67c
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cce358
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x2cce0b0
	void ClientAckGoodMove(float TimeStamp);// 0x2cce030
	void ClearAccumulatedForces();// 0x14c559c
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2ccde2c
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x2ccdcd0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x2ccdc04
	void AddForce(Vector force);// 0x2ccdb8c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120 , Size: 4]
	Vector K2_GetInputVector();// 0x2d9cb34
	bool IsMoveInputIgnored();// 0x2d9cb7c
	Vector GetPendingInputVector();// 0x2d9cb34
	Pawn* GetPawnOwner();// 0x2d9cb0c
	Vector GetLastInputVector();// 0x2d9cac4
	Vector ConsumeInputVector();// 0x2d9ca74
	void AddInputVector(Vector WorldVector, bool bForce);// 0x2d9c9a8

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4 , Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c , Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110 , Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110 , Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110 , Size: 1]
	MovementProperties MovementState;//[Offset: 0x114 , Size: 4]
	void StopMovementKeepPathing();// 0x2d8ad38
	void StopActiveMovement();// 0x141b2e4
	bool IsSwimming();// 0x2d8ad08
	bool IsMovingOnGround();// 0x2cceed8
	bool IsFlying();// 0x2d8acd8
	bool IsFalling();// 0x2d8aca8
	bool IsCrouching();// 0x183f438

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc , Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0 , Size: 4]
	Vector Velocity;//[Offset: 0xc8 , Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4 , Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4 , Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5 , Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8 , Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4 , Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0 , Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0 , Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0 , Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0 , Size: 1]
	void StopMovementImmediately();// 0x2d82634
	void SnapUpdatedComponentToPlane();// 0x2d82618
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x2d82598
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x2d82520
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x2d824a8
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x2d823e0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x2d82358
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x2d822d8
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x1831b50
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x2d82114
	float K2_GetModifiedMaxSpeed();// 0x133ca4c
	float K2_GetMaxSpeedModifier();// 0x2d820e4
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x12f27bc
	Vector GetPlaneConstraintOrigin();// 0x2d820b0
	Vector GetPlaneConstraintNormal();// 0x2d8207c
	enum GetPlaneConstraintAxisSetting();// 0x2d82060
	PhysicsVolume* GetPhysicsVolume();// 0x13a86a4
	float GetMaxSpeed();// 0x2d82030
	float GetGravityZ();// 0x2d82000
	Vector ConstrainNormalToPlane(Vector Normal);// 0x2d81f64
	Vector ConstrainLocationToPlane(Vector Location);// 0x2d81ec8
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x2d81e2c

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	float FloorDist;//[Offset: 0x4 , Size: 4]
	float LineDist;//[Offset: 0x8 , Size: 4]
	HitResult HitResult;//[Offset: 0x10 , Size: 136]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]
	float Distance;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc , Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18 , Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30 , Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c , Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48 , Size: 12]
	float PenetrationDepth;//[Offset: 0x54 , Size: 4]
	int Item;//[Offset: 0x58 , Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c , Size: 8]
	Actor* Actor;//[Offset: 0x64 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c , Size: 8]
	FName BoneName;//[Offset: 0x78 , Size: 8]
	int FaceIndex;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2 , Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2 , Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2 , Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2 , Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2 , Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2 , Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2 , Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2 , Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3 , Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3 , Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3 , Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3 , Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3 , Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3 , Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3 , Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3 , Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4 , Size: 4]
	float AgentHeight;//[Offset: 0x8 , Size: 4]
	float AgentStepHeight;//[Offset: 0xc , Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10 , Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2c8 , Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x2d0 , Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320 , Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320 , Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320 , Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320 , Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320 , Size: 1]
	enum RuntimeGeneration;//[Offset: 0x321 , Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x324 , Size: 4]
	uint32 DataVersion;//[Offset: 0x328 , Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3b4 , Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18 , Size: 8]
	Color Color;//[Offset: 0x20 , Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24 , Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30 , Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38 , Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0 , Size: 12]
	int AreaID;//[Offset: 0xc , Size: 4]
	class Object* AreaClass;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d , Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80 , Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d , Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0 , Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float BlendWeight;//[Offset: 0x4 , Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10 , Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x510 , Size: 4]
	float CapsuleRadius;//[Offset: 0x514 , Size: 4]
	float CapsuleHeight;//[Offset: 0x518 , Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x2ccae00
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x2ccad38
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x2ccac70
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2ccab84
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2ccaaa0
	float GetUnscaledCapsuleRadius();// 0x2ccaa84
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x2ccaa54
	float GetUnscaledCapsuleHalfHeight();// 0x2ccaa38
	float GetShapeScale();// 0x2cca9f0
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2cca8c0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2cca798
	float GetScaledCapsuleRadius();// 0x2cca740
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x2cca6dc
	float GetScaledCapsuleHalfHeight();// 0x2cca688

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x500 , Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x504 , Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508 , Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x508 , Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x508 , Size: 1]
	class NavArea* AreaClass;//[Offset: 0x50c , Size: 4]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c , Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20 , Size: 4]
	Color DrawColor;//[Offset: 0x24 , Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28 , Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d , Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10 , Size: 12]
	Rotator Rotation;//[Offset: 0x1c , Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a , Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0 , Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8 , Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4 , Size: 4]
	float Position;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc , Size: 12]
	Rotator Rotation;//[Offset: 0x18 , Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24 , Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28 , Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31 , Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34 , Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4 , Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0 , Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2c8 , Size: 4]
	byte Ping;//[Offset: 0x2cc , Size: 1]
	FString PlayerName;//[Offset: 0x2d0 , Size: 12]
	int PlayerID;//[Offset: 0x2e8 , Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec , Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec , Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec , Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ec , Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ec , Size: 1]
	int StartTime;//[Offset: 0x2f0 , Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f4 , Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x2fc , Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x308 , Size: 12]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1bf56d0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1bf56d0
	void OnRep_UniqueId();// 0x133318c
	void OnRep_Score();// 0x13323cc
	void OnRep_PlayerName();// 0x13323b0
	void OnRep_bIsInactive();// 0x12e4e38

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	float DamageImpulse;//[Offset: 0x20 , Size: 4]
	float DestructibleImpulse;//[Offset: 0x24 , Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28 , Size: 4]
	float DamageFalloff;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x318 , Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x320 , Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x324 , Size: 4]
	HUD* MyHUD;//[Offset: 0x32c , Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x330 , Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x334 , Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338 , Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x33c , Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x354 , Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x358 , Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x364 , Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x374 , Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x378 , Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x384 , Size: 12]
	int ClientCap;//[Offset: 0x390 , Size: 4]
	CheatManager* CheatManager;//[Offset: 0x394 , Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x398 , Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x39c , Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3a0 , Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40c , Size: 1]
	byte NetPlayerIndex;//[Offset: 0x40d , Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x43c , Size: 4]
	NetConnection* NetConnection;//[Offset: 0x440 , Size: 4]
	float InputYawScale;//[Offset: 0x450 , Size: 4]
	float InputPitchScale;//[Offset: 0x454 , Size: 4]
	float InputRollScale;//[Offset: 0x458 , Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c , Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c , Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c , Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c , Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45c , Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x45c , Size: 1]
	float ForceFeedbackScale;//[Offset: 0x460 , Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x464 , Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x470 , Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x471 , Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x472 , Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x473 , Size: 1]
	float HitResultTraceDistance;//[Offset: 0x474 , Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488 , Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4f8 , Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fc , Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x508 , Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x54c , Size: 4]
	Vector SpawnLocation;//[Offset: 0x550 , Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560 , Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x562 , Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x564 , Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c , Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x2daf85c
	bool WasInputKeyJustPressed(Key Key);// 0x2daf568
	void ToggleSpeaking(bool bInSpeaking);// 0x2daf4e0
	void SwitchLevel(FString URL);// 0x2daf41c
	void StopHapticEffect(enum Hand);// 0x2daf3a4
	void StartFire(byte FireModeNum);// 0x2daf324
	void SetVirtualJoystickVisibility(bool bVisible);// 0x2daf29c
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x2daf0fc
	void SetName(FString S);// 0x2daf038
	void SetMouseLocation(const int X, const int Y);// 0x2daef7c
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x2daeec0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x2daedc0
	void SetControllerLightColor(Color Color);// 0x2daed50
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2daeb84
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x2daea78
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x2dae968
	void ServerViewPrevPlayer();// 0x2dae90c
	void ServerViewNextPlayer();// 0x2dae8b0
	void ServerVerifyViewTarget();// 0x2dae854
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x2dae748
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x2dae644
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x2dae128
	void ServerToggleAILogging();// 0x2dae0cc
	void ServerShortTimeout();// 0x2dae070
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x2dadfa8
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x2dade90
	void ServerRestartPlayer();// 0x2dade34
	void ServerPause();// 0x2daddd8
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x2dadd34
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x2dad818
	void ServerCheckClientPossessionReliable();// 0x2dad7bc
	void ServerCheckClientPossession();// 0x2dad760
	void ServerChangeName(FString S);// 0x2dad66c
	void ServerCamera(FName NewMode);// 0x2dad5b8
	void ServerAcknowledgePossession(Pawn* P);// 0x2dad504
	void SendToConsole(FString Command);// 0x2dad440
	void RestartLevel();// 0x14da3a0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x2dad320
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x2dad1d0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x2dacef0
	void Pause();// 0x2dacecc
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x2dace44
	void LocalTravel(FString URL);// 0x2dacd80
	bool IsInputKeyDown(Key Key);// 0x2daca8c
	void GetViewportSize(out int SizeX, out int SizeY);// 0x2dac9ac
	SpectatorPawn* GetSpectatorPawn();// 0x147f870
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x2dac8c4
	Vector GetInputVectorKeyState(Key Key);// 0x2dac5c0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2dac440
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x2dac360
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x2dac1dc
	float GetInputKeyTimeDown(Key Key);// 0x2dabee4
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2dabdc0
	float GetInputAnalogKeyState(Key Key);// 0x2dabac8
	HUD* GetHUD();// 0x2dabaa0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x2dab8cc
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2dab750
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2dab5d4
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x2dab444
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2dab30c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2dab1d4
	Vector GetFocalLocation();// 0x14a3c48
	void FOV(float NewFOV);// 0x2dab154
	void EnableCheats();// 0x184aac8
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x2daafe8
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x2daaf08
	void ConsoleKey(Key Key);// 0x2daac14
	void ClientWasKicked(const FText KickReason);// 0x2daaa80
	void ClientVoiceHandshakeComplete();// 0x2daaa64
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x2daa8ac
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x2daa540
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x2daa390
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x2daa1f0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x2daa054
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x2da9f90
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x2da9ec4
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x2da9e44
	void ClientStartOnlineSession();// 0x1486fd4
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x14372d4
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x2da9d3c
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x2da9cb4
	void ClientSetHUD(class HUD NewHUDClass);// 0x2da9c34
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x2da9b2c
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x2da99b0
	void ClientSetCameraMode(FName NewCamMode);// 0x2da9930
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x2da978c
	void ClientSetBlockOnAsyncLoading();// 0x2da9770
	void ClientReturnToMainMenu(FString ReturnReason);// 0x2da96ac
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x184088c
	void ClientRestart(Pawn* NewPawn);// 0x2da962c
	void ClientReset();// 0x2da9610
	void ClientRepObjRef(Object* Object);// 0x2da9590
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x2da93f8
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x2da929c
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x2da9178
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x2da9024
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x2da8f1c
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x2da8db0
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2da8c5c
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x2da898c
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x2da8620
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x2da84cc
	void ClientIgnoreMoveInput(bool bIgnore);// 0x2da8444
	void ClientIgnoreLookInput(bool bIgnore);// 0x2da83bc
	void ClientGotoState(FName NewState);// 0x2da833c
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x2da8270
	void ClientForceGarbageCollection();// 0x2da8254
	void ClientFlushLevelStreaming();// 0x2da8240
	void ClientEndOnlineSession();// 0x1486ec0
	void ClientEnableNetworkVoice(bool bEnable);// 0x2da81b8
	void ClientCommitMapChange();// 0x2da819c
	void ClientClearCameraLensEffects();// 0x2da8180
	void ClientCapBandwidth(int Cap);// 0x2da8100
	void ClientCancelPendingMapChange();// 0x18492e8
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x2da7ff4
	void ClearAudioListenerOverride();// 0x2da7fe0
	void Camera(FName NewMode);// 0x2da7f60
	void AddYawInput(float Val);// 0x2da7ee0
	void AddRollInput(float Val);// 0x2da7e60
	void AddPitchInput(float Val);// 0x2da7de0
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x149e248

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20 , Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24 , Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28 , Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2c8 , Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc , Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc , Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc , Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc , Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc , Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc , Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x2d0 , Size: 12]
	FName[] DebugDisplay;//[Offset: 0x2e4 , Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x2f0 , Size: 12]
	Canvas* Canvas;//[Offset: 0x2fc , Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x300 , Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x304 , Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x310 , Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x314 , Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x1bf56d0
	void ShowHUD();// 0x13323cc
	void ShowDebugToggleSubCategory(FName Category);// 0x2d06260
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x2d061e8
	void ShowDebugForMoifiedTargetActor();// 0x2d061d4
	void ShowDebug(FName DebugType);// 0x2d06154
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x2d06090
	void RemoveAllDebugStrings();// 0x2d0607c
	void ReceiveHitBoxRelease(const FName BoxName);// 0x1bf56d0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x1bf56d0
	void ReceiveHitBoxClick(const FName BoxName);// 0x1bf56d0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x1bf56d0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x1bf56d0
	Vector Project(Vector Location);// 0x2d05fe8
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x2d05dec
	PlayerController* GetOwningPlayerController();// 0x2531dfc
	Pawn* GetOwningPawn();// 0x2d05dc4
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x2d05b6c
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x2d059d4
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2d0555c
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x2d052e4
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x2d05148
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x2d04dc4
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x2d04b9c
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2d047c4
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x2d045e0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x2d0447c
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x2d042e0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x2d03ef0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c , Size: 4]
	float OrgY;//[Offset: 0x20 , Size: 4]
	float ClipX;//[Offset: 0x24 , Size: 4]
	float ClipY;//[Offset: 0x28 , Size: 4]
	Color DrawColor;//[Offset: 0x2c , Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30 , Size: 1]
	int SizeX;//[Offset: 0x34 , Size: 4]
	int SizeY;//[Offset: 0x38 , Size: 4]
	Plane ColorModulate;//[Offset: 0x40 , Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50 , Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54 , Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58 , Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x2cc975c
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x2cc964c
	Vector K2_Project(Vector WorldLocation);// 0x2cc95b8
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x2cc9414
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x2cc9140
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x2cc8d38
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x2cc8ba4
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x2cc8a00
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x2cc87e8
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x2cc8690
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x2cc8590
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x2cc8070
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x2cc7f54

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0x94 , Size: 4]
	int LevelIndex;//[Offset: 0x98 , Size: 4]
	int FirstResourceMemMip;//[Offset: 0x9c , Size: 4]
	IntPoint ImportedSize;//[Offset: 0xa0 , Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xa8 , Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1 , Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2 , Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2 , Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2 , Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2 , Size: 1]
	byte AddressX;//[Offset: 0xb3 , Size: 1]
	byte AddressY;//[Offset: 0xb4 , Size: 1]
	int Blueprint_GetSizeY();// 0x2de9dfc
	int Blueprint_GetSizeX();// 0x2de9dd4

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20 , Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24 , Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30 , Size: 12]
	int IsRemapped;//[Offset: 0x3c , Size: 4]
	float EmScale;//[Offset: 0x40 , Size: 4]
	float Ascent;//[Offset: 0x44 , Size: 4]
	float Descent;//[Offset: 0x48 , Size: 4]
	float Leading;//[Offset: 0x4c , Size: 4]
	int Kerning;//[Offset: 0x50 , Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54 , Size: 144]
	int NumCharacters;//[Offset: 0xe4 , Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8 , Size: 12]
	float ScalingFactor;//[Offset: 0xf4 , Size: 4]
	int LegacyFontSize;//[Offset: 0xf8 , Size: 4]
	FName LegacyFontName;//[Offset: 0x100 , Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108 , Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0 , Size: 4]
	int StartV;//[Offset: 0x4 , Size: 4]
	int USize;//[Offset: 0x8 , Size: 4]
	int VSize;//[Offset: 0xc , Size: 4]
	byte TextureIndex;//[Offset: 0x10 , Size: 1]
	int VerticalOffset;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0 , Size: 12]
	float Height;//[Offset: 0xc , Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10 , Size: 1]
	byte CharacterSet;//[Offset: 0x11 , Size: 1]
	FString Chars;//[Offset: 0x14 , Size: 12]
	FString UnicodeRange;//[Offset: 0x20 , Size: 12]
	FString CharsFilePath;//[Offset: 0x2c , Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38 , Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48 , Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]
	int TexturePageWidth;//[Offset: 0x5c , Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60 , Size: 4]
	int XPadding;//[Offset: 0x64 , Size: 4]
	int YPadding;//[Offset: 0x68 , Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c , Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70 , Size: 4]
	int ExtendBoxRight;//[Offset: 0x74 , Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78 , Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	int Kerning;//[Offset: 0x80 , Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84 , Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88 , Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c , Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0 , Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc , Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0 , Size: 8]
	FontData Font;//[Offset: 0x8 , Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0 , Size: 12]
	enum Hinting;//[Offset: 0xc , Size: 1]
	enum LoadingPolicy;//[Offset: 0xd , Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0 , Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc , Size: 12]
	float ScalingFactor;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0 , Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0 , Size: 1]
	int Value;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0 , Size: 8]
	Vector2D V0_UV;//[Offset: 0x8 , Size: 8]
	LinearColor V0_Color;//[Offset: 0x10 , Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20 , Size: 8]
	Vector2D V1_UV;//[Offset: 0x28 , Size: 8]
	LinearColor V1_Color;//[Offset: 0x30 , Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40 , Size: 8]
	Vector2D V2_UV;//[Offset: 0x48 , Size: 8]
	LinearColor V2_Color;//[Offset: 0x50 , Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0 , Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4 , Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10 , Size: 12]
	FString DebugText;//[Offset: 0x1c , Size: 12]
	float TimeRemaining;//[Offset: 0x28 , Size: 4]
	float Duration;//[Offset: 0x2c , Size: 4]
	Color TextColor;//[Offset: 0x30 , Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38 , Size: 12]
	Font* Font;//[Offset: 0x44 , Size: 4]
	float FontScale;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2c8 , Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2cc , Size: 4]
	float DefaultFOV;//[Offset: 0x2d8 , Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x2e0 , Size: 4]
	float DefaultAspectRatio;//[Offset: 0x2e8 , Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x330 , Size: 1328]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x860 , Size: 1328]
	TViewTarget ViewTarget;//[Offset: 0xd90 , Size: 1344]
	TViewTarget PendingViewTarget;//[Offset: 0x12d0 , Size: 1344]
	CameraModifier*[] ModifierList;//[Offset: 0x1824 , Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1830 , Size: 12]
	float FreeCamDistance;//[Offset: 0x183c , Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1840 , Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x184c , Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1868 , Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1874 , Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1878 , Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1898 , Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x18b0 , Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x18bc , Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x18c8 , Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18cc , Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18cc , Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18cc , Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18cd , Size: 1]
	float ViewPitchMin;//[Offset: 0x18d0 , Size: 4]
	float ViewPitchMax;//[Offset: 0x18d4 , Size: 4]
	float ViewYawMin;//[Offset: 0x18d8 , Size: 4]
	float ViewYawMax;//[Offset: 0x18dc , Size: 4]
	float ViewRollMin;//[Offset: 0x18e0 , Size: 4]
	float ViewRollMax;//[Offset: 0x18e4 , Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x2da5718
	void StopCameraFade();// 0x2cd5ef4
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x2da564c
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x2da5580
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x2da54b4
	void StopAllCameraShakes(bool bImmediately);// 0x2da542c
	void StopAllCameraAnims(bool bImmediate);// 0x2da53a4
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x2da51b8
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x2da50a4
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x2cf5418
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x2da5024
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2da4ec8
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2da4ba4
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x2da4a3c
	void OnPhotographySessionStart();// 0x133318c
	void OnPhotographySessionEnd();// 0x12e4e38
	void OnPhotographyMultiPartCaptureStart();// 0x13323b0
	void OnPhotographyMultiPartCaptureEnd();// 0x13323cc
	PlayerController* GetOwningPlayerController();// 0x2da4a0c
	float GetFOVAngle();// 0x2ccee00
	Rotator GetCameraRotation();// 0x2da49c4
	Vector GetCameraLocation();// 0x2da497c
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x2da48f4
	void ClearCameraLensEffects();// 0x2d9be80
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x1bf56d0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x2da486c
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x14c5094

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0 , Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10 , Size: 1312]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc , Size: 12]
	Rotator Rotation;//[Offset: 0x18 , Size: 12]
	float FOV;//[Offset: 0x24 , Size: 4]
	float OrthoWidth;//[Offset: 0x28 , Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c , Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30 , Size: 4]
	float AspectRatio;//[Offset: 0x34 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	byte ProjectionMode;//[Offset: 0x39 , Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40 , Size: 1232]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x510 , Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2 , Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5 , Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5 , Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5 , Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5 , Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5 , Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8 , Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9 , Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa , Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa , Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb , Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb , Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc , Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe , Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe , Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe , Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe , Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe , Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe , Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe , Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe , Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf , Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf , Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10 , Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11 , Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11 , Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12 , Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12 , Size: 1]
	float WhiteTemp;//[Offset: 0x14 , Size: 4]
	float WhiteTint;//[Offset: 0x18 , Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20 , Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30 , Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40 , Size: 16]
	Vector4 ColorGain;//[Offset: 0x50 , Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60 , Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70 , Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80 , Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90 , Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0 , Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0 , Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0 , Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0 , Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0 , Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0 , Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100 , Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110 , Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120 , Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130 , Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140 , Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150 , Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160 , Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170 , Size: 4]
	float FilmSlope;//[Offset: 0x174 , Size: 4]
	float FilmToe;//[Offset: 0x178 , Size: 4]
	float FilmShoulder;//[Offset: 0x17c , Size: 4]
	float FilmBlackClip;//[Offset: 0x180 , Size: 4]
	float FilmWhiteClip;//[Offset: 0x184 , Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188 , Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198 , Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8 , Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac , Size: 4]
	float FilmSaturation;//[Offset: 0x1b0 , Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4 , Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4 , Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4 , Size: 16]
	float FilmContrast;//[Offset: 0x1e4 , Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8 , Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec , Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0 , Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4 , Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204 , Size: 4]
	byte BloomMethod;//[Offset: 0x208 , Size: 1]
	float BloomIntensity;//[Offset: 0x20c , Size: 4]
	float BloomThreshold;//[Offset: 0x210 , Size: 4]
	float BloomSizeScale;//[Offset: 0x214 , Size: 4]
	float Bloom1Size;//[Offset: 0x218 , Size: 4]
	float Bloom2Size;//[Offset: 0x21c , Size: 4]
	float Bloom3Size;//[Offset: 0x220 , Size: 4]
	float Bloom4Size;//[Offset: 0x224 , Size: 4]
	float Bloom5Size;//[Offset: 0x228 , Size: 4]
	float Bloom6Size;//[Offset: 0x22c , Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230 , Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240 , Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250 , Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260 , Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270 , Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280 , Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290 , Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294 , Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298 , Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0 , Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac , Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0 , Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4 , Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8 , Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc , Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0 , Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4 , Size: 16]
	LinearColor AmbientCubemapTint;//[Offset: 0x2d4 , Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2e4 , Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2e8 , Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2ec , Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x2f0 , Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x2f4 , Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x2f8 , Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x2fc , Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x300 , Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x304 , Size: 4]
	float AutoExposureBias;//[Offset: 0x308 , Size: 4]
	float HistogramLogMin;//[Offset: 0x30c , Size: 4]
	float HistogramLogMax;//[Offset: 0x310 , Size: 4]
	float LensFlareIntensity;//[Offset: 0x314 , Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x318 , Size: 16]
	float LensFlareBokehSize;//[Offset: 0x328 , Size: 4]
	int LensFlareCount;//[Offset: 0x32c , Size: 4]
	float LensFlareThreshold;//[Offset: 0x330 , Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x334 , Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x338 , Size: 16]
	float VignetteIntensity;//[Offset: 0x3b8 , Size: 4]
	float GrainJitter;//[Offset: 0x3bc , Size: 4]
	float GrainIntensity;//[Offset: 0x3c0 , Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3c4 , Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3c8 , Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3cc , Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0 , Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3d4 , Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3d8 , Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3dc , Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3e0 , Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3e4 , Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3e8 , Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3ec , Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x3f0 , Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x3f4 , Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x3f8 , Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x408 , Size: 4]
	float ColorGradingIntensity;//[Offset: 0x40c , Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x410 , Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x414 , Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x415 , Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x418 , Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x41c , Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x420 , Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x424 , Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x428 , Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x42c , Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x430 , Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x434 , Size: 4]
	float DepthOfFieldScale;//[Offset: 0x438 , Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x43c , Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x440 , Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x444 , Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x448 , Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x44c , Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x450 , Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x454 , Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x458 , Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x45c , Size: 4]
	float MotionBlurAmount;//[Offset: 0x460 , Size: 4]
	float MotionBlurMax;//[Offset: 0x464 , Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x468 , Size: 4]
	float LPVIntensity;//[Offset: 0x46c , Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x470 , Size: 4]
	float LPVSize;//[Offset: 0x474 , Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x478 , Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x47c , Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x480 , Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x484 , Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x488 , Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x48c , Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x490 , Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x494 , Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x498 , Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x49c , Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4a0 , Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4a4 , Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4a8 , Size: 4]
	float LPVFadeRange;//[Offset: 0x4ac , Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4b0 , Size: 4]
	float ScreenPercentage;//[Offset: 0x4b4 , Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4b8 , Size: 12]
	Object*[] Blendables;//[Offset: 0x4c4 , Size: 12]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0 , Size: 4]
	Object* Object;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0 , Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10 , Size: 1312]
	PlayerState* PlayerState;//[Offset: 0x530 , Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	byte Priority;//[Offset: 0x1d , Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20 , Size: 4]
	float AlphaInTime;//[Offset: 0x24 , Size: 4]
	float AlphaOutTime;//[Offset: 0x28 , Size: 4]
	float alpha;//[Offset: 0x2c , Size: 4]
	bool IsDisabled();// 0x13880f8
	Actor* GetViewTarget();// 0x1545568
	void EnableModifier();// 0x15bb30c
	void DisableModifier(bool bImmediate);// 0x2cc5f84
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x1bf56d0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x1bf56d0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x300 , Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x304 , Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x308 , Size: 4]
	Transform RelativeTransform;//[Offset: 0x310 , Size: 48]
	float BaseFOV;//[Offset: 0x340 , Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344 , Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344 , Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x348 , Size: 12]
	float DistFromCamera;//[Offset: 0x354 , Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2c8 , Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc , Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc , Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x2d0 , Size: 12]
	delegate OnParticleBurst;//[Offset: 0x2dc , Size: 12]
	delegate OnParticleDeath;//[Offset: 0x2e8 , Size: 12]
	delegate OnParticleCollide;//[Offset: 0x2f4 , Size: 12]
	void ToggleActive();// 0x2ce3c78
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2ce3bb8
	void SetTemplate(ParticleSystem* NewTemplate);// 0x12d4be4
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2ce3afc
	void SetFloatParameter(FName ParameterName, float Param);// 0x2ce3a38
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2ce3970
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2ce38b4
	void OnRep_bCurrentlyActive();// 0x13323b0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x12d4b64
	bool IsActive();// 0x2ce388c
	void Deactivate();// 0x2ce3878
	void Activate();// 0x2ce3864

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c , Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20 , Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24 , Size: 4]
	float WarmupTime;//[Offset: 0x28 , Size: 4]
	float WarmupTickRate;//[Offset: 0x2c , Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30 , Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c , Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40 , Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48 , Size: 4]
	float CullingScreenSize;//[Offset: 0x4c , Size: 4]
	byte LODMethod;//[Offset: 0x50 , Size: 1]
	float[] LODDistances;//[Offset: 0x54 , Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x64 , Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70 , Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x74 , Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x90 , Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94 , Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94 , Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94 , Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94 , Size: 1]
	float Delay;//[Offset: 0x98 , Size: 4]
	float DelayLow;//[Offset: 0x9c , Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0 , Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1 , Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa4 , Size: 4]
	enum InsignificantReaction;//[Offset: 0xa8 , Size: 1]
	float InsignificanceDelay;//[Offset: 0xac , Size: 4]
	bool IsImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0 , Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb1 , Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb4 , Size: 12]
	float MacroUVRadius;//[Offset: 0xc0 , Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc4 , Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc8 , Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe4 , Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf0 , Size: 12]
	BoxSphereBounds GetBounds();// 0x2d97cb8
	Box GetBoundingBox();// 0x2d97c64
	bool ContainsEmitterType(class Object TypeData);// 0x2d97be4

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20 , Size: 8]
	int SubUVDataOffset;//[Offset: 0x28 , Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c , Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30 , Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	int PeakActiveParticles;//[Offset: 0x40 , Size: 4]
	int InitialAllocationCount;//[Offset: 0x44 , Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48 , Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c , Size: 4]
	byte DetailMode;//[Offset: 0x50 , Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51 , Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51 , Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51 , Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51 , Size: 1]
	enum SignificanceLevel;//[Offset: 0x52 , Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53 , Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24 , Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28 , Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34 , Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38 , Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c , Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40 , Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c , Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58 , Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64 , Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70 , Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	int PeakActiveParticles;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20 , Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24 , Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30 , Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c , Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40 , Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44 , Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48 , Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48 , Size: 1]
	byte SortMode;//[Offset: 0x49 , Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a , Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a , Size: 1]
	float EmitterDuration;//[Offset: 0x4c , Size: 4]
	float EmitterDurationLow;//[Offset: 0x50 , Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	int EmitterLoops;//[Offset: 0x58 , Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c , Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84 , Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x88 , Size: 12]
	float EmitterDelay;//[Offset: 0x94 , Size: 4]
	float EmitterDelayLow;//[Offset: 0x98 , Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c , Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d , Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0 , Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4 , Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	float RandomImageTime;//[Offset: 0xac , Size: 4]
	int RandomImageChanges;//[Offset: 0xb0 , Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4 , Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8 , Size: 12]
	float MacroUVRadius;//[Offset: 0xc4 , Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8 , Size: 1]
	int MaxDrawCount;//[Offset: 0xcc , Size: 4]
	int MaxDrawCountInLowDevice;//[Offset: 0xd0 , Size: 4]
	enum UVFlippingMode;//[Offset: 0xd4 , Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd8 , Size: 4]
	byte BoundingMode;//[Offset: 0xdc , Size: 1]
	byte OpacitySourceMode;//[Offset: 0xdd , Size: 1]
	float AlphaThreshold;//[Offset: 0xe0 , Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe4 , Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xe8 , Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf4 , Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100 , Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x104 , Size: 12]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c , Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c , Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c , Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c , Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c , Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d , Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d , Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d , Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d , Size: 1]
	byte LODValidity;//[Offset: 0x1e , Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c , Size: 4]
	float MaxValue;//[Offset: 0x20 , Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0 , Size: 28]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0 , Size: 1]
	byte EntryCount;//[Offset: 0x1 , Size: 1]
	byte EntryStride;//[Offset: 0x2 , Size: 1]
	byte SubEntryStride;//[Offset: 0x3 , Size: 1]
	float TimeScale;//[Offset: 0x4 , Size: 4]
	float TimeBias;//[Offset: 0x8 , Size: 4]
	float[] Values;//[Offset: 0xc , Size: 12]
	byte LockFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0 , Size: 4]
	int CountLow;//[Offset: 0x4 , Size: 4]
	float Time;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20 , Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48 , Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70 , Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x74 , Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80 , Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0 , Size: 1]
	int Frequency;//[Offset: 0x4 , Size: 4]
	int ParticleFrequency;//[Offset: 0x8 , Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc , Size: 1]
	FName CustomName;//[Offset: 0x10 , Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20 , Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24 , Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64 , Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68 , Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8 , Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac , Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec , Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c , Size: 4]
	float MaxValue;//[Offset: 0x20 , Size: 4]
	Vector MinValueVec;//[Offset: 0x24 , Size: 12]
	Vector MaxValueVec;//[Offset: 0x30 , Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20 , Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f , Size: 1]
	FName EventName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x500 , Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x504 , Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x510 , Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51c , Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d , Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51d , Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x51d , Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51d , Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51e , Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51e , Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x51e , Size: 1]
	bool bIsImportant;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51e , Size: 1]
	byte LODMethod;//[Offset: 0x520 , Size: 1]
	enum RequiredSignificance;//[Offset: 0x521 , Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x524 , Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x530 , Size: 12]
	delegate OnParticleBurst;//[Offset: 0x53c , Size: 12]
	delegate OnParticleDeath;//[Offset: 0x548 , Size: 12]
	delegate OnParticleCollide;//[Offset: 0x554 , Size: 12]
	Vector OldPosition;//[Offset: 0x560 , Size: 12]
	Vector PartSysVelocity;//[Offset: 0x56c , Size: 12]
	float WarmupTime;//[Offset: 0x578 , Size: 4]
	float WarmupTickRate;//[Offset: 0x57c , Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x584 , Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x58c , Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x5ac , Size: 12]
	float CustomTimeDilation;//[Offset: 0x5c0 , Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x604 , Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x610 , Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x618 , Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x619 , Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x61a , Size: 1]
	delegate OnSystemFinished;//[Offset: 0x644 , Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2d9a76c
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2d9a614
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2d9a59c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2d9a4e0
	void SetFloatParameter(FName ParameterName, float Param);// 0x2d9a41c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x2d9a348
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2d9a280
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x2d9a174
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x2d9a06c
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x2d99f60
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x2d99e54
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x2d99d4c
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x2d99c40
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x2d99b7c
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x2d99a4c
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x2d998a8
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2d997ec
	ParticleSystem* GetTemplate();// 0x2d997c4
	int GetNumActiveParticles();// 0x2d9979c
	MaterialInterface* GetNamedMaterial(FName InName);// 0x2d99714
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x2d995f8
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x2d994d8
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x2d993bc
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x2d992a0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x2d99180
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x2d99064
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x2d98f8c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x2d98dec
	void EndTrails();// 0x2d98dd8
	void DisableTickWhenNoParticle(bool StartCheck);// 0x2d98d58
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x2d98c8c
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x2d98b34

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0 , Size: 8]
	byte ParamType;//[Offset: 0x8 , Size: 1]
	float Scalar;//[Offset: 0xc , Size: 4]
	float Scalar_Low;//[Offset: 0x10 , Size: 4]
	Vector Vector;//[Offset: 0x14 , Size: 12]
	Vector Vector_Low;//[Offset: 0x20 , Size: 12]
	Color Color;//[Offset: 0x2c , Size: 4]
	Actor* Actor;//[Offset: 0x30 , Size: 4]
	MaterialInterface* Material;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x2d7c428
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x2d7c36c
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x2d7c2a8
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float alpha);// 0x2d7c1a8
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x2d7c118
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x2d7c098
	float K2_GetScalarParameterValue(FName ParameterName);// 0x2d7c018
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x2d7bfa0
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x2d7bf28
	void CopyInterpParameters(MaterialInstance* Source);// 0x2d7beb0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x4c , Size: 4]
	MaterialInterface* Parent;//[Offset: 0x50 , Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x58 , Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x64 , Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70 , Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x7c , Size: 12]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x8c , Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xb0 , Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	Font* FontValue;//[Offset: 0x8 , Size: 4]
	int FontPage;//[Offset: 0xc , Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	float ParameterValue;//[Offset: 0x8 , Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc , Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	Texture* ParameterValue;//[Offset: 0x8 , Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc , Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8 , Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18 , Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8 , Size: 4]
	byte BlendMode;//[Offset: 0xc , Size: 1]
	byte ShadingModel;//[Offset: 0xd , Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe , Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe , Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe , Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c , Size: 12]
	int ActiveTab;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0 , Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc , Size: 12]
	float ViewStartInput;//[Offset: 0x18 , Size: 4]
	float ViewEndInput;//[Offset: 0x1c , Size: 4]
	float ViewStartOutput;//[Offset: 0x20 , Size: 4]
	float ViewEndOutput;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0 , Size: 4]
	Color CurveColor;//[Offset: 0x4 , Size: 4]
	FString CurveName;//[Offset: 0x8 , Size: 12]
	int bHideCurve;//[Offset: 0x14 , Size: 4]
	int bColorCurve;//[Offset: 0x18 , Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c , Size: 4]
	int bClamp;//[Offset: 0x20 , Size: 4]
	float ClampLow;//[Offset: 0x24 , Size: 4]
	float ClampHigh;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0 , Size: 8]
	MaterialInterface* Material;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30 , Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	float OscillationDuration;//[Offset: 0x20 , Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24 , Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28 , Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c , Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50 , Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74 , Size: 12]
	float AnimPlayRate;//[Offset: 0x80 , Size: 4]
	float AnimScale;//[Offset: 0x84 , Size: 4]
	float AnimBlendInTime;//[Offset: 0x88 , Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c , Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90 , Size: 4]
	CameraAnim* Anim;//[Offset: 0x94 , Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98 , Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8 , Size: 4]
	float ShakeScale;//[Offset: 0x134 , Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138 , Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c , Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x1bf56d0
	void ReceivePlayShake(float Scale);// 0x1bf56d0
	bool ReceiveIsFinished();// 0x1345f34
	void BlueprintUpdateCameraShake(float DeltaTime, float alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x1bf56d0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0 , Size: 12]
	FOscillator Yaw;//[Offset: 0xc , Size: 12]
	FOscillator Roll;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0 , Size: 4]
	float Frequency;//[Offset: 0x4 , Size: 4]
	byte InitialOffset;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0 , Size: 12]
	FOscillator Y;//[Offset: 0xc , Size: 12]
	FOscillator Z;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c , Size: 4]
	float AnimLength;//[Offset: 0x20 , Size: 4]
	Box BoundingBox;//[Offset: 0x24 , Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40 , Size: 1]
	float BaseFOV;//[Offset: 0x44 , Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50 , Size: 1232]
	float BasePostProcessBlendWeight;//[Offset: 0x520 , Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20 , Size: 12]
	FName GroupName;//[Offset: 0x30 , Size: 8]
	Color GroupColor;//[Offset: 0x38 , Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c , Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c , Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c , Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c , Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24 , Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30 , Size: 4]
	byte ActiveCondition;//[Offset: 0x34 , Size: 1]
	FString TrackTitle;//[Offset: 0x38 , Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44 , Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44 , Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44 , Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44 , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44 , Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44 , Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c , Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20 , Size: 4]
	float PlayRate;//[Offset: 0x3c , Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50 , Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54 , Size: 4]
	byte PlaySpace;//[Offset: 0x58 , Size: 1]
	void Stop(bool bImmediate);// 0x2cc4a20
	void SetScale(float NewDuration);// 0x14fb430
	void SetDuration(float NewDuration);// 0x2cc49a8

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c , Size: 4]
	Actor* GroupActor;//[Offset: 0x20 , Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48 , Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c , Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70 , Size: 12]
	FName LookAtGroupName;//[Offset: 0x80 , Size: 8]
	float LinCurveTension;//[Offset: 0x88 , Size: 4]
	float AngCurveTension;//[Offset: 0x8c , Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90 , Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90 , Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90 , Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90 , Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90 , Size: 1]
	byte RotMode;//[Offset: 0x91 , Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0 , Size: 4]
	Vector OutVal;//[Offset: 0x4 , Size: 12]
	Vector ArriveTangent;//[Offset: 0x10 , Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c , Size: 12]
	byte InterpMode;//[Offset: 0x28 , Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0 , Size: 8]
	float Time;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c , Size: 12]
	Rotator ResetRotation;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2c8 , Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x2cc , Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x2d0 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	float AspectRatio;//[Offset: 0x2e0 , Size: 4]
	float FOVAngle;//[Offset: 0x2e4 , Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x2e8 , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0 , Size: 1232]
	int GetAutoActivatePlayerIndex();// 0x2cc43f8

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x238 , Size: 4]
	float OrthoWidth;//[Offset: 0x23c , Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x240 , Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x244 , Size: 4]
	float AspectRatio;//[Offset: 0x248 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c , Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c , Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c , Size: 1]
	byte ProjectionMode;//[Offset: 0x24d , Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x250 , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260 , Size: 1232]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c , Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x2cc5428
	void SetProjectionMode(byte InProjectionMode);// 0x2cc53b4
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x2cc5340
	void SetOrthoWidth(float InOrthoWidth);// 0x2cc52cc
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x2cc5258
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x2cc51e4
	void SetFieldOfView(float InFieldOfView);// 0x1337080
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x2cc515c
	void SetAspectRatio(float InAspectRatio);// 0x2cc50e8
	void SetActive(bool bNewActive, bool bReset);// 0x2c9f828
	void RemoveBlendable(interface classByteProperty InBlendableObject);// 0x2cc4ff8
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x13d57b0
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x2cc4f80
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x2cc4e50

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c , Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20 , Size: 4]
	void Walk();// 0x15bb30c
	void ViewSelf();// 0x2c9bf30
	void ViewPlayer(FString S);// 0x2cd2944
	void ViewClass(class Actor DesiredClass);// 0x148e17c
	void ViewActor(FName actorName);// 0x2cd28c4
	void ToggleDebugCamera();// 0x2cd28a8
	void ToggleAILogging();// 0x2cd288c
	void TestCollisionDistance();// 0x2cd2870
	void Teleport();// 0x13dc394
	void Summon(FString ClassName);// 0x2cd27ac
	void StreamLevelOut(FName PackageName);// 0x2cd272c
	void StreamLevelIn(FName PackageName);// 0x2cd26ac
	void Slomo(float NewTimeDilation);// 0x2cd262c
	void SetWorldOrigin();// 0x2cd2618
	void SetNavDrawDistance(float DrawDistance);// 0x2cd25a0
	void SetMouseSensitivityToDefault();// 0x2cd258c
	void ServerToggleAILogging();// 0x2cd2530
	void ReceiveInitCheatManager();// 0x1bf56d0
	void ReceiveEndPlay();// 0x1bf56d0
	void RebuildNavigation();// 0x2cd2514
	void PlayersOnly();// 0x12f4c88
	void OnlyLoadLevel(FName PackageName);// 0x143980c
	void LogLoc();// 0x2cd24f8
	void InvertMouse();// 0x2cd24e4
	void God();// 0x15178c0
	void Ghost();// 0x13861d4
	void FreezeFrame(float Delay);// 0x12e29b0
	void Fly();// 0x12f4c6c
	void FlushLog();// 0x2cd24c8
	void EnableDebugCamera();// 0x2cd24ac
	void DumpVoiceMutingState();// 0x2cd2490
	void DumpPartyState();// 0x14d82c8
	void DumpOnlineSessionState();// 0x2cd2474
	void DumpChatState();// 0x2cd2458
	void DisableDebugCamera();// 0x2cd243c
	void DestroyTarget();// 0x12f5134
	void DestroyPawns(class Pawn aClass);// 0x2cd23bc
	void DestroyAllPawnsExceptTarget();// 0x2cd23a0
	void DestroyAll(class Actor aClass);// 0x23746a0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x2cd22dc
	void DebugCapsuleSweepPawn();// 0x2cd22c0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x2cd2238
	void DebugCapsuleSweepClear();// 0x2cd221c
	void DebugCapsuleSweepChannel(byte Channel);// 0x2cd219c
	void DebugCapsuleSweepCapture();// 0x2cd2180
	void DebugCapsuleSweep();// 0x1339fc4
	void DamageTarget(float DamageAmount);// 0x2cd2100
	void CheatScript(FString ScriptName);// 0x2cd1fa8
	void ChangeSize(float F);// 0x14fcb84
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x2cd1dac
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x2cd1bcc
	void BugIt(FString ScreenShotDescription);// 0x2cd1b08

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d , Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d , Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570 , Size: 4]
	float SpeedScale;//[Offset: 0x584 , Size: 4]
	float InitialMaxSpeed;//[Offset: 0x588 , Size: 4]
	float InitialAccel;//[Offset: 0x58c , Size: 4]
	float InitialDecel;//[Offset: 0x590 , Size: 4]
	void ToggleDisplay();// 0x2cdb5f0
	void ShowDebugSelectedInfo();// 0x2cdb5d4
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x2cdb55c
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x1bf56d0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x1bf56d0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x1bf56d0
	Actor* GetSelectedActor();// 0x2cdb534

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x500 , Size: 4]
	float FrustumAngle;//[Offset: 0x504 , Size: 4]
	float FrustumAspectRatio;//[Offset: 0x508 , Size: 4]
	float FrustumStartDist;//[Offset: 0x50c , Size: 4]
	float FrustumEndDist;//[Offset: 0x510 , Size: 4]
	Texture* Texture;//[Offset: 0x514 , Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d , Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160 , Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190 , Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x2db32e8
	void SetBind(FName BindName, FString Command);// 0x2db31e0
	void InvertAxisKey(const Key AxisKey);// 0x2db2ef4
	void InvertAxis(const FName AxisName);// 0x2db2e7c
	void ClearSmoothing();// 0x2db2e68

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0 , Size: 16]
	FString Command;//[Offset: 0x10 , Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c , Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c , Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c , Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c , Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c , Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d , Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c , Size: 12]
	float Duration;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4 , Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0 , Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30 , Size: 12]
	NetDriver* Driver;//[Offset: 0x3c , Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40 , Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44 , Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48 , Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54 , Size: 12]
	Actor* ViewTarget;//[Offset: 0x60 , Size: 4]
	Actor* OwningActor;//[Offset: 0x64 , Size: 4]
	int MaxPacket;//[Offset: 0x68 , Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xec , Size: 12]
	double LastReceiveTime;//[Offset: 0x148 , Size: 8]
	Channel*[] ChannelsToTick;//[Offset: 0x29538 , Size: 12]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x295b0 , Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20 , Size: 12]
	FString ReplicationDriverClassName;//[Offset: 0x2c , Size: 12]
	int MaxDownloadSize;//[Offset: 0x38 , Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x40 , Size: 4]
	int MaxInternetClientRate;//[Offset: 0x44 , Size: 4]
	int MaxClientRate;//[Offset: 0x48 , Size: 4]
	float ServerTravelPause;//[Offset: 0x4c , Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x50 , Size: 4]
	float RelevantTimeout;//[Offset: 0x54 , Size: 4]
	float KeepAliveTime;//[Offset: 0x58 , Size: 4]
	float InitialConnectTimeout;//[Offset: 0x5c , Size: 4]
	float ConnectionTimeout;//[Offset: 0x60 , Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x64 , Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69 , Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x6c , Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x70 , Size: 12]
	World* World;//[Offset: 0xc4 , Size: 4]
	Package* WorldPackage;//[Offset: 0xc8 , Size: 4]
	class Object* NetConnectionClass;//[Offset: 0xdc , Size: 4]
	class Object* ReplicationDriverClass;//[Offset: 0xe0 , Size: 4]
	Property* RoleProperty;//[Offset: 0xe4 , Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0xe8 , Size: 4]
	FName NetDriverName;//[Offset: 0xf0 , Size: 8]
	float Time;//[Offset: 0x11c , Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x49c , Size: 60]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x528 , Size: 4]

--------------------------------
Class: Package.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c , Size: 12]
	float ActiveOpacity;//[Offset: 0x28 , Size: 4]
	float InactiveOpacity;//[Offset: 0x2c , Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30 , Size: 4]
	float TimeUntilReset;//[Offset: 0x34 , Size: 4]
	float ActivationDelay;//[Offset: 0x38 , Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	float StartupDelay;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0 , Size: 4]
	Texture2D* Image2;//[Offset: 0x4 , Size: 4]
	Vector2D Center;//[Offset: 0x8 , Size: 8]
	Vector2D VisualSize;//[Offset: 0x10 , Size: 8]
	Vector2D ThumbSize;//[Offset: 0x18 , Size: 8]
	Vector2D InteractionSize;//[Offset: 0x20 , Size: 8]
	Vector2D InputScale;//[Offset: 0x28 , Size: 8]
	Key MainInputKey;//[Offset: 0x30 , Size: 16]
	Key AltInputKey;//[Offset: 0x40 , Size: 16]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x30c , Size: 4]
	float BaseLookUpRate;//[Offset: 0x310 , Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x314 , Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x318 , Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x31c , Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320 , Size: 1]
	void TurnAtRate(float Rate);// 0x2cddcec
	void MoveUp_World(float Val);// 0x2cddc6c
	void MoveRight(float Val);// 0x2cddbec
	void MoveForward(float Val);// 0x14da08c
	void LookUpAtRate(float Rate);// 0x2cddb74

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x510 , Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x2ddb5fc
	float GetUnscaledSphereRadius();// 0x2ccaa38
	float GetShapeScale();// 0x2cca9f0
	float GetScaledSphereRadius();// 0x2cca688

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x51c , Size: 4]
	int PreviousLODLevel;//[Offset: 0x520 , Size: 4]
	int MinLod;//[Offset: 0x524 , Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x528 , Size: 4]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52c , Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x52c , Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x52c , Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x52c , Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x52c , Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x52c , Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x52c , Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x52c , Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x530 , Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x534 , Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x540 , Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c , Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x550 , Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x58c , Size: 24]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a4 , Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x25322f0
	void SetForcedLodModel(int NewForcedLodModel);// 0x2de5fdc
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x138c394
	void SetDirty();// 0x2de5fc8
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x2de5f50
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x2de5e78

--------------------------------
Class: StaticMesh.Object
	FName LODGroup;//[Offset: 0x30 , Size: 8]
	int MinLod;//[Offset: 0x38 , Size: 4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c , Size: 12]
	BodySetup* BodySetup;//[Offset: 0x48 , Size: 4]
	int LODForCollision;//[Offset: 0x4c , Size: 4]
	float CullingScreenSize;//[Offset: 0x50 , Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55 , Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56 , Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57 , Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57 , Size: 1]
	bool bIsVisibleInVeryLowDevice;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57 , Size: 1]
	bool bIsVisibleInLowDevice;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57 , Size: 1]
	bool bIsVisibleInMidDevice;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57 , Size: 1]
	int SupportCPUInstancesLOD;//[Offset: 0x58 , Size: 4]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x94 , Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xc0 , Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xd4 , Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xe0 , Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xec , Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x108 , Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x114 , Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x118 , Size: 12]
	NavCollision* NavCollision;//[Offset: 0x124 , Size: 4]
	int GetNumSections(int InLOD);// 0x2de55cc
	int GetNumLODs();// 0x2de55a4
	int GetMaterialIndex(FName MaterialSlotName);// 0x2de5524
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x2de54a4
	BoxSphereBounds GetBounds();// 0x2de5450
	Box GetBoundingBox();// 0x2de53fc

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0 , Size: 4]
	FName MaterialSlotName;//[Offset: 0x8 , Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10 , Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28 , Size: 24]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20 , Size: 8]
	Vector RelativeLocation;//[Offset: 0x28 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34 , Size: 12]
	Vector RelativeScale;//[Offset: 0x40 , Size: 12]
	FString Tag;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58 , Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64 , Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70 , Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74 , Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74 , Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0 , Size: 12]
	float Radius;//[Offset: 0xc , Size: 4]
	float Height;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0 , Size: 12]
	Vector Extent;//[Offset: 0xc , Size: 12]

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0 , Size: 12]
	PackedNormal Normal;//[Offset: 0xc , Size: 4]
	Color Color;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0 , Size: 1]
	byte Y;//[Offset: 0x1 , Size: 1]
	byte Z;//[Offset: 0x2 , Size: 1]
	byte W;//[Offset: 0x3 , Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0 , Size: 4]
	int TextureLevelIndex;//[Offset: 0x4 , Size: 4]
	float TexelFactor;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4 , Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8 , Size: 4]
	float EmissiveBoost;//[Offset: 0xc , Size: 4]
	float DiffuseBoost;//[Offset: 0x10 , Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0 , Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0 , Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf0 , Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x110 , Size: 16]
	Margin Padding;//[Offset: 0x120 , Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x130 , Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x13c , Size: 12]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x148 , Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x154 , Size: 4]
	int Priority;//[Offset: 0x158 , Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c , Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c , Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c , Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c , Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c , Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c , Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c , Size: 1]
	InputComponent* InputComponent;//[Offset: 0x160 , Size: 4]
	void UnregisterInputComponent();// 0x239c030
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1bf56d0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x239bf64
	void StopListeningForAllInputActions();// 0x239bf50
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x239bed8
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x239be18
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x239bd5c
	void SetPadding(Margin InPadding);// 0x239bcd4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x239bc5c
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x239bbe4
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x239bb28
	void SetInputActionPriority(int NewPriority);// 0x239bab0
	void SetInputActionBlocking(bool bShouldBlock);// 0x239ba30
	void SetForegroundColor(SlateColor InForegroundColor);// 0x239b710
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x239b690
	void SetDesiredSizeInViewport(Vector2D Size);// 0x239b620
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x239b5a4
	void SetAnchorsInViewport(Anchors Anchors);// 0x239b51c
	void SetAlignmentInViewport(Vector2D Alignment);// 0x239b4ac
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x239b434
	void RemoveFromViewport();// 0x239b420
	void RegisterInputComponent();// 0x239b40c
	void PreConstruct(bool IsDesignTime);// 0x1bf56d0
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x239b238
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x239b0a8
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x239b028
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1bf56d0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1bf56d0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1bf56d0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1bf56d0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x1bf56d0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1bf56d0
	void OnPaint(out PaintContext Context);// 0x1bf56d0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1bf56d0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	void OnMouseCaptureLost();// 0x1bf56d0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1bf56d0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1bf56d0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1bf56d0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1bf56d0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x1bf56d0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x1bf56d0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x1bf56d0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1bf56d0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1bf56d0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1bf56d0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1bf56d0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x1bf56d0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x1bf56d0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x239afa8
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x239af28
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x1bf56d0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x1bf56d0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x239ad98
	bool IsPlayingAnimation();// 0x239ad70
	bool IsListeningForInputAction(FName ActionName);// 0x239acf0
	bool IsInViewport();// 0x239aabc
	bool IsInteractable();// 0x1bf56d0
	bool IsAnyAnimationPlaying();// 0x239acc8
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x239ac48
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x239abc8
	Widget* GetWidgetFromName(out const FName Name);// 0x239ab34
	Pawn* GetOwningPlayerPawn();// 0x239ab0c
	PlayerController* GetOwningPlayer();// 0x1545568
	LocalPlayer* GetOwningLocalPlayer();// 0x239aae4
	bool GetIsVisible();// 0x239aabc
	bool GetDontPaintWhenChildEmpty();// 0x239aa94
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x239aa14
	Anchors GetAnchorsInViewport();// 0x239a9d0
	Vector2D GetAlignmentInViewport();// 0x239a990
	void Destruct();// 0x1bf56d0
	void Construct();// 0x1bf56d0
	void AddToViewport(int ZOrder);// 0x239a918
	bool AddToPlayerScreen(int ZOrder);// 0x239a898

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c , Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20 , Size: 16]
	FText ToolTipText;//[Offset: 0x30 , Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40 , Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50 , Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58 , Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68 , Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78 , Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94 , Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c , Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c , Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c , Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c , Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c , Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d , Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e , Size: 1]
	byte Cursor;//[Offset: 0x9f , Size: 1]
	enum Clipping;//[Offset: 0xa0 , Size: 1]
	enum Visibility;//[Offset: 0xa1 , Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa4 , Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc0 , Size: 12]
	void SetVisibility(enum InVisibility);// 0x239fa84
	void SetUserFocus(PlayerController* PlayerController);// 0x239fa0c
	void SetToolTipText(out const FText InToolTipText);// 0x239f868
	void SetToolTip(Widget* Widget);// 0x239f7f0
	void SetRenderTranslation(Vector2D Translation);// 0x239f780
	void SetRenderTransformPivot(Vector2D Pivot);// 0x239f710
	void SetRenderTransform(WidgetTransform InTransform);// 0x239f638
	void SetRenderShear(Vector2D Shear);// 0x239f5c8
	void SetRenderScale(Vector2D Scale);// 0x239f558
	void SetRenderAngle(float Angle);// 0x239f4e0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x239f3d8
	void SetKeyboardFocus();// 0x239f3c4
	void SetIsEnabled(bool bInIsEnabled);// 0x12f4924
	void SetCursor(byte InCursor);// 0x239f34c
	void SetClipping(enum InClipping);// 0x239f2d4
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x239f218
	void ResetCursor();// 0x239f204
	void RemoveFromParent();// 0x13dc394
	EventReply OnReply__DelegateSignature();// 0x1bf56d0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1bf56d0
	bool IsVisible();// 0x239f1dc
	bool IsHovered();// 0x239f1b4
	void InvalidateLayoutAndVolatility();// 0x239f1a0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x239f120
	bool HasUserFocus(PlayerController* PlayerController);// 0x239f0a0
	bool HasMouseCapture();// 0x239f078
	bool HasKeyboardFocus();// 0x239f050
	bool HasFocusedDescendants();// 0x239f028
	bool HasAnyUserFocus();// 0x239f000
	Widget* GetWidget__DelegateSignature();// 0x1bf56d0
	enum GetVisibility();// 0x239efd8
	FText GetText__DelegateSignature();// 0x1bf56d0
	enum GetSlateVisibility__DelegateSignature();// 0x1bf56d0
	SlateColor GetSlateColor__DelegateSignature();// 0x1bf56d0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1bf56d0
	PanelWidget* GetParent();// 0x239efb0
	PlayerController* GetOwningPlayer();// 0x1545568
	byte GetMouseCursor__DelegateSignature();// 0x1bf56d0
	LinearColor GetLinearColor__DelegateSignature();// 0x1bf56d0
	bool GetIsEnabled();// 0x239ef88
	int GetInt32__DelegateSignature();// 0x1bf56d0
	float GetFloat__DelegateSignature();// 0x1bf56d0
	Vector2D GetDesiredSize();// 0x239ef48
	enum GetClipping();// 0x239ef20
	enum GetCheckBoxState__DelegateSignature();// 0x1bf56d0
	Geometry GetCachedGeometry();// 0x239eef0
	Geometry GetCachedAllottedGeometry();// 0x239eec0
	bool GetBool__DelegateSignature();// 0x1bf56d0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1bf56d0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1bf56d0
	void ForceVolatile(bool bForce);// 0x239ee40
	void ForceLayoutPrepass();// 0x239ee2c

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c , Size: 4]
	Widget* Content;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xcc , Size: 12]
	bool RemoveChildAt(int Index);// 0x2386554
	bool RemoveChild(Widget* Content);// 0x23864d4
	bool HasChild(Widget* Content);// 0x2386454
	bool HasAnyChildren();// 0x238642c
	int GetChildrenCount();// 0x1549438
	int GetChildIndex(Widget* Content);// 0x23863ac
	Widget* GetChildAt(int Index);// 0x238632c
	void DoToAllChildren(delegate Act, bool MultFrame);// 0x238623c
	void ClearChildren();// 0x2386228
	PanelSlot* AddChild(Widget* Content);// 0x23861a8

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0 , Size: 8]
	Vector2D Scale;//[Offset: 0x8 , Size: 8]
	Vector2D Shear;//[Offset: 0x10 , Size: 8]
	float Angle;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20 , Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38 , Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50 , Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68 , Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80 , Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98 , Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0 , Size: 1]
	FName WidgetToFocus;//[Offset: 0x8 , Size: 8]
	Widget* Widget;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c , Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24 , Size: 12]
	FName DestinationProperty;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0 , Size: 8]
	int ArrayIndex;//[Offset: 0x8 , Size: 4]
	Struct* Struct;//[Offset: 0xc , Size: 4]
	Field* Field;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0 , Size: 16]
	byte ColorUseRule;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0 , Size: 4]
	float Top;//[Offset: 0x4 , Size: 4]
	float Right;//[Offset: 0x8 , Size: 4]
	float Bottom;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0 , Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220 , Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c , Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238 , Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c , Size: 12]
	float GetStartTime();// 0x23a089c
	float GetEndTime();// 0x23a0874

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x48 , Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1dc , Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1e0 , Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c , Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c , Size: 16]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x48 , Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x54 , Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x60 , Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x6c , Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x78 , Size: 4]
	FloatRange SelectionRange;//[Offset: 0x7c , Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x8c , Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]
	float FixedFrameInterval;//[Offset: 0xa0 , Size: 4]
	float InTime;//[Offset: 0xa4 , Size: 4]
	float OutTime;//[Offset: 0xa8 , Size: 4]
	float StartTime;//[Offset: 0xac , Size: 4]
	float endTime;//[Offset: 0xb0 , Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0 , Size: 16]
	FString Name;//[Offset: 0x10 , Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c , Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20 , Size: 12]
	enum Ownership;//[Offset: 0x2c , Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0 , Size: 16]
	FString Name;//[Offset: 0x10 , Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c , Size: 4]
	Guid ParentGuid;//[Offset: 0x20 , Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0 , Size: 16]
	FString BindingName;//[Offset: 0x10 , Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0 , Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0 , Size: 1]
	float Value;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0 , Size: 8]
	FName SlotWidgetName;//[Offset: 0x8 , Size: 8]
	Guid AnimationGuid;//[Offset: 0x10 , Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0 , Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78 , Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c , Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114 , Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190 , Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190 , Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0 , Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10 , Size: 2]
	enum EvaluationMethod;//[Offset: 0x12 , Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14 , Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20 , Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30 , Size: 56]
	FName EvaluationGroup;//[Offset: 0x68 , Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70 , Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70 , Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0 , Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc , Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0 , Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc , Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0 , Size: 4]
	int NumInitPtrs;//[Offset: 0x4 , Size: 4]
	int NumEvalPtrs;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0 , Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0 , Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc , Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0 , Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc , Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0 , Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4 , Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0 , Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c , Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0 , Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4 , Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8 , Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10 , Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20 , Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24 , Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34 , Size: 16]
	int HierarchicalBias;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0 , Size: 4]
	float Offset;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0 , Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0 , Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4 , Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40 , Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0 , Size: 8]
	Widget* Content;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c , Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38 , Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58 , Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c , Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	int ControllerId;//[Offset: 0xa0 , Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24 , Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28 , Size: 12]
	World* World;//[Offset: 0x58 , Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c , Size: 4]
	void SSSwapControllers();// 0x13118ec
	void ShowTitleSafeArea();// 0x1333500
	void SetConsoleTarget(int PlayerIndex);// 0x12e29b0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24 , Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28 , Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c , Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0 , Size: 4]
	class Object* WithinClass;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24 , Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30 , Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c , Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	void ReceiveShutdown();// 0x1bf56d0
	void ReceiveInit();// 0x1bf56d0
	void HandleTravelError(byte FailureType);// 0x1bf56d0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1bf56d0
	int GetDeviceLevel();// 0x1477a3c
	void DebugRemovePlayer(int ControllerId);// 0x2cd262c
	void DebugCreatePlayer(int ControllerId);// 0x2cf3a34

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0 , Size: 8]
	Vector2D Maximum;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c , Size: 12]
	Object* Payload;//[Offset: 0x28 , Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c , Size: 4]
	enum Pivot;//[Offset: 0x30 , Size: 1]
	Vector2D Offset;//[Offset: 0x34 , Size: 8]
	delegate OnDrop;//[Offset: 0x3c , Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48 , Size: 12]
	delegate OnDragged;//[Offset: 0x54 , Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x237c258
	void Dragged(out const PointerEvent PointerEvent);// 0x237c024
	void DragCancelled(out const PointerEvent PointerEvent);// 0x237bdf0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4 , Size: 8]
	Margin Margin;//[Offset: 0xc , Size: 16]
	SlateColor TintColor;//[Offset: 0x1c , Size: 28]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	Object* ResourceObject;//[Offset: 0x3c , Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40 , Size: 40]
	FName ResourceName;//[Offset: 0x68 , Size: 8]
	Box2D UVRegion;//[Offset: 0x70 , Size: 20]
	byte DrawAs;//[Offset: 0x84 , Size: 1]
	byte Tiling;//[Offset: 0x85 , Size: 1]
	byte Mirroring;//[Offset: 0x86 , Size: 1]
	byte ImageType;//[Offset: 0x87 , Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88 , Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0 , Size: 8]
	Vector2D Max;//[Offset: 0x8 , Size: 8]
	byte bIsValid;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0 , Size: 4]
	byte BlendFunction;//[Offset: 0x4 , Size: 1]
	float BlendExp;//[Offset: 0x8 , Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0 , Size: 4]
	int UUID;//[Offset: 0x4 , Size: 4]
	FName ExecutionFunction;//[Offset: 0x8 , Size: 8]
	Object* CallbackTarget;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: SoundBase.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2c8 , Size: 4]
	FName MatineeControllerName;//[Offset: 0x2d0 , Size: 8]
	float PlayRate;//[Offset: 0x2d8 , Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc , Size: 1]
	float ForceStartPosition;//[Offset: 0x2e0 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4 , Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4 , Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e4 , Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e4 , Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e4 , Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e4 , Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e4 , Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e4 , Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x2e8 , Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec , Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec , Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec , Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ec , Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2f0 , Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc , Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x300 , Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x30c , Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318 , Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318 , Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318 , Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318 , Size: 1]
	float InterpPosition;//[Offset: 0x31c , Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x324 , Size: 1]
	delegate OnPlay;//[Offset: 0x328 , Size: 12]
	delegate OnStop;//[Offset: 0x334 , Size: 12]
	delegate OnPause;//[Offset: 0x340 , Size: 12]
	void Stop();// 0x12e4e38
	void SetPosition(float NewPosition, bool bJump);// 0x2d7e5a8
	void SetLoopingState(bool bNewLooping);// 0x2d7e520
	void Reverse();// 0x133318c
	void Play();// 0x13323b0
	void Pause();// 0x133790c
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x2d7e378
	void ChangePlaybackDirection();// 0x135ca14

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c , Size: 4]
	float PathBuildTime;//[Offset: 0x20 , Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24 , Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30 , Size: 4]
	float EdSectionStart;//[Offset: 0x34 , Size: 4]
	float EdSectionEnd;//[Offset: 0x38 , Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40 , Size: 4]
	FName[] AllEventNames;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0 , Size: 8]
	Actor*[] Actors;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	float TimeStamp;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x238 , Size: 4]
	Actor* ChildActor;//[Offset: 0x23c , Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x240 , Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x2cd3d04

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0 , Size: 4]
	FName MemberName;//[Offset: 0x8 , Size: 8]
	Guid MemberGuid;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x1bf56d0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2d671f0
	bool RemoteEvent(FName EventName);// 0x2d67168
	void LevelReset();// 0x1bf56d0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0 , Size: 4]
	int Y;//[Offset: 0x4 , Size: 4]
	int Z;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2cc , Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2d0 , Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2d4 , Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8 , Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x500 , Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x504 , Size: 1]
	float ScreenSize;//[Offset: 0x508 , Size: 4]
	float U;//[Offset: 0x50c , Size: 4]
	float UL;//[Offset: 0x510 , Size: 4]
	float V;//[Offset: 0x514 , Size: 4]
	float VL;//[Offset: 0x518 , Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x2cb8c34
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x2cb8a9c
	void SetSprite(Texture2D* NewSprite);// 0x2cb8a1c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c , Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x2d0 , Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc , Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc , Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc , Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc , Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc , Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc , Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dc , Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dd , Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dd , Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dd , Size: 1]
	float KillZ;//[Offset: 0x2e0 , Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x2e4 , Size: 4]
	float WorldGravityZ;//[Offset: 0x2e8 , Size: 4]
	float GlobalGravityZ;//[Offset: 0x2ec , Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2f0 , Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2f4 , Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2f8 , Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2fc , Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300 , Size: 1]
	Vector DefaultColorScale;//[Offset: 0x304 , Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x310 , Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x314 , Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318 , Size: 1]
	float MaxWorldSize;//[Offset: 0x31c , Size: 4]
	int RegionSizeNear;//[Offset: 0x320 , Size: 4]
	int RegionSizeFar;//[Offset: 0x324 , Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329 , Size: 1]
	int Graduation;//[Offset: 0x32c , Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x330 , Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334 , Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334 , Size: 1]
	int VisibilityCellSize;//[Offset: 0x338 , Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x33c , Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d , Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x340 , Size: 80]
	float WorldToMeters;//[Offset: 0x390 , Size: 4]
	float MonoCullingDistance;//[Offset: 0x394 , Size: 4]
	BookMark* BookMarks;//[Offset: 0x398 , Size: 4]
	float TimeDilation;//[Offset: 0x3c0 , Size: 4]
	float MatineeTimeDilation;//[Offset: 0x3c4 , Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x3c8 , Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x3cc , Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x3d0 , Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x3d4 , Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x3d8 , Size: 4]
	PlayerState* Pauser;//[Offset: 0x3dc , Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0 , Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0 , Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x3e4 , Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x3f0 , Size: 12]
	float[] LODRelativeDistances;//[Offset: 0x3fc , Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408 , Size: 1]
	int WorldCompositionNums;//[Offset: 0x40c , Size: 4]
	int CompositionBlockLength;//[Offset: 0x410 , Size: 4]
	void OnRep_WorldGravityZ();// 0x13323b0

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c , Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20 , Size: 4]
	float LastImpactSoundTime;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2c8 , Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2cc , Size: 4]
	int TotalNetBandwidth;//[Offset: 0x2d0 , Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x2d4 , Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x2d8 , Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc , Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x2e0 , Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x2e4 , Size: 4]
	int BadPingThreshold;//[Offset: 0x2e8 , Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x2ec , Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x2f0 , Size: 4]
	float PercentForBadPing;//[Offset: 0x2f4 , Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2f8 , Size: 4]
	float MoveRepSize;//[Offset: 0x2fc , Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x300 , Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x304 , Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x308 , Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x30c , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x310 , Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x314 , Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x318 , Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x31c , Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x320 , Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x324 , Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x32c , Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330 , Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331 , Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x334 , Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x338 , Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x33c , Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x340 , Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344 , Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345 , Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0 , Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4 , Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8 , Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc , Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10 , Size: 4]
	Color EnvironmentColor;//[Offset: 0x14 , Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18 , Size: 4]
	float EmissiveBoost;//[Offset: 0x1c , Size: 4]
	float DiffuseBoost;//[Offset: 0x20 , Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24 , Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28 , Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c , Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30 , Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38 , Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c , Size: 4]
	float OcclusionExponent;//[Offset: 0x40 , Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44 , Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48 , Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c , Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c , Size: 1]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0 , Size: 4]
	Actor* InViewer;//[Offset: 0x4 , Size: 4]
	Actor* ViewTarget;//[Offset: 0x8 , Size: 4]
	Vector ViewLocation;//[Offset: 0xc , Size: 12]
	Vector ViewDir;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20 , Size: 8]
	World* WorldAsset;//[Offset: 0x28 , Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50 , Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58 , Size: 12]
	Transform LevelTransform;//[Offset: 0x70 , Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0 , Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0 , Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0 , Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0 , Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1 , Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa1 , Size: 1]
	int LevelLODIndex;//[Offset: 0xa4 , Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8 , Size: 1]
	Color DrawColor;//[Offset: 0xac , Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0 , Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc0 , Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc , Size: 4]
	FString[] Keywords;//[Offset: 0xd4 , Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0 , Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec , Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8 , Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104 , Size: 12]
	Level* LoadedLevel;//[Offset: 0x110 , Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x114 , Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x118 , Size: 12]
	bool IsStreamingStatePending();// 0x2d67afc
	bool IsLevelVisible();// 0x2d67ad4
	bool IsLevelLoaded();// 0x2d67ab0
	FName GetWorldAssetPackageFName();// 0x2d67a70
	LevelScriptActor* GetLevelScriptActor();// 0x2d67a48
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x2d678e8

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2f0 , Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc , Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc , Size: 1]
	byte StreamingUsage;//[Offset: 0x2fd , Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x5fc , Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x888 , Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0 , Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8 , Size: 4]
	Level* Level;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4 , Size: 60]
	<class Object> EnabledClasses;//[Offset: 0x40 , Size: 60]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0 , Size: 4]
	Object*[] Pool;//[Offset: 0x4 , Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x10 , Size: 60]
	int Size;//[Offset: 0x4c , Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c , Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20 , Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24 , Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28 , Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28 , Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28 , Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28 , Size: 1]
	enum DataGatheringMode;//[Offset: 0x29 , Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a , Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c , Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x30 , Size: 12]
	float UpdateInterval;//[Offset: 0x3c , Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40 , Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x44 , Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x50 , Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4 , Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0 , Size: 12]
	enum OperationMode;//[Offset: 0x160 , Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x2d87714
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x2d8769c
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x2d875dc
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x2d87528
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x2d874b0
	void SetGeometryGatheringMode(enum NewMode);// 0x2d87438
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x2d87424
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x2d87324
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x2d87178
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x2d87100
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x2d86f00
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x2d86d10
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d86b20
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d86930
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x2d868b8
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x2d86840
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d86694
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d864e8
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d862e4
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x2d860e0
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x2d86068
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x2d85ebc
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x2d85cdc

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0 , Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc , Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c , Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28 , Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0 , Size: 4]
	float TravelCostOverride;//[Offset: 0x4 , Size: 4]
	float EnteringCostOverride;//[Offset: 0x8 , Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2f0 , Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c , Size: 12]
	Vector[] PathPoints;//[Offset: 0x28 , Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34 , Size: 1]
	bool IsValid();// 0x2d852e4
	bool IsStringPulled();// 0x144d378
	bool IsPartial();// 0x2d852bc
	float GetPathLength();// 0x2d85294
	float GetPathCost();// 0x2d8526c
	FString GetDebugString();// 0x2d851ac
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x2d8512c
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x2d8505c

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2c8 , Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x2d4 , Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x2d8 , Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2dc , Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x2e0 , Size: 4]
	class HUD* HUDClass;//[Offset: 0x2e4 , Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x2e8 , Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2ec , Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2f0 , Size: 4]
	GameSession* GameSession;//[Offset: 0x2f4 , Size: 4]
	GameStateBase* GameState;//[Offset: 0x2f8 , Size: 4]
	FText DefaultPlayerName;//[Offset: 0x2fc , Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308 , Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308 , Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x308 , Size: 1]
	void StartPlay();// 0x2cf56c8
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x2cf55fc
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x2cf54a0
	bool ShouldReset(Actor* ActorToReset);// 0x2cf5418
	void ReturnToMainMenuHost();// 0x2cf53fc
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x2cf52a0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x184a4f8
	void RestartPlayer(Controller* NewPlayer);// 0x13213ec
	void ResetLevel();// 0x2cf5280
	bool PlayerCanRestart(PlayerController* Player);// 0x1523f1c
	bool MustSpectate(PlayerController* NewPlayerController);// 0x2cf51f8
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1bf56d0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1bf56d0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1bf56d0
	void K2_OnLogout(Controller* ExitingController);// 0x1bf56d0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1bf56d0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x2cf50f0
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x14fd66c
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x12d4b64
	bool HasMatchStarted();// 0x2cd5c04
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x1334e8c
	int GetNumSpectators();// 0x14e1a40
	int GetNumPlayers();// 0x2ccee30
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x1487f34
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x2cf4fe0
	Actor* ChoosePlayerStart(Controller* Player);// 0x1335de4
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x1848494
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x2cf4f14

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2c8 , Size: 4]
	int MaxPlayers;//[Offset: 0x2cc , Size: 4]
	int MaxPartySize;//[Offset: 0x2d0 , Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2d4 , Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5 , Size: 1]
	FName SessionName;//[Offset: 0x2d8 , Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2c8 , Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2cc , Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2d0 , Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x2d4 , Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2e4 , Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2e8 , Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2ec , Size: 4]
	void OnRep_SpectatorClass();// 0x2cd5e3c
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1337698
	void OnRep_ReplicatedHasBegunPlay();// 0x14e2038
	void OnRep_GameModeClass();// 0x2d0065c
	bool HasMatchStarted();// 0x1487ed4
	bool HasBegunPlay();// 0x2d0062c
	float GetServerWorldTimeSeconds();// 0x1409b00
	float GetPlayerStartTime(Controller* Controller);// 0x2d005a4
	float GetPlayerRespawnDelay(Controller* Controller);// 0x2d0051c

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20 , Size: 24]
	FName AISystemModuleName;//[Offset: 0x38 , Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20 , Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24 , Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28 , Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c , Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30 , Size: 4]
	float TestHeightDifference;//[Offset: 0x34 , Size: 4]
	float HeightCheckMargin;//[Offset: 0x38 , Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x2cb85fc
	int GetObjectCount();// 0x2cb85d4
	int GetNewAvoidanceUID();// 0x2cb85ac
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x2cb851c

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4 , Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8 , Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc , Size: 4]
	Level* PersistentLevel;//[Offset: 0x10 , Size: 4]
	<Level*> Levels;//[Offset: 0x14 , Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20 , Size: 4]
	World* World;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x98 , Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8 , Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1 , Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4 , Size: 4]
	FString PVEBordersName;//[Offset: 0xb8 , Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xc4 , Size: 12]
	<FString> UnloadTileSet;//[Offset: 0xd0 , Size: 60]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x510 , Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x2cc2d7c
	Vector GetUnscaledBoxExtent();// 0x2cc2d54
	Vector GetScaledBoxExtent();// 0x2cc2cfc

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x300 , Size: 4]
	void IsNewIphone(out bool IsNewIphone, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x1bf56d0
	void SetWateMaterial(bool bHDR, bool CallFunc_IsNewIphone_isNewIphone, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x1bf56d0
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x1bf56d0
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x1bf56d0
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1bf56d0
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1bf56d0
	void CustomEvent(byte gamePawnEvent);// 0x1bf56d0
	void CustomEvent(int UserQualitySettingLevel);// 0x1bf56d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1bf56d0
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, byte K2Node_CustomEvent_gamePawnEvent, bool K2Node_SwitchEnum_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess5, int K2Node_CustomEvent_UserQualitySettingLevel, bool CallFunc_IsOpenHDR_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess6, byte K2Node_Event_EndPlayReason, bool CallFunc_IsInFight_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_IsDedicatedServer_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue4);// 0x1bf56d0
	GameEventListener* GameEventListener;//[Offset: 0x304 , Size: 4]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x308 , Size: 4]
	AkComponent* Ak;//[Offset: 0x30c , Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x310 , Size: 4]
	BoxComponent* PostSceneBox;//[Offset: 0x314 , Size: 4]
	StaticMeshComponent* watermesh;//[Offset: 0x318 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x31c , Size: 4]
	float Gamma;//[Offset: 0x320 , Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x330 , Size: 1232]
	STExtraBaseCharacter*[] playerList;//[Offset: 0x800 , Size: 12]
	byte NewVar;//[Offset: 0x80c , Size: 1]
	float FogDensity;//[Offset: 0x810 , Size: 4]
	ExponentialHeightFog* heightfog;//[Offset: 0x814 , Size: 4]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x818 , Size: 4]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x81c , Size: 4]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x820 , Size: 4]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x824 , Size: 4]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0x828 , Size: 4]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0x82c , Size: 4]
	<FString> newIOSDevice;//[Offset: 0x830 , Size: 60]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x2c8 , Size: 4]
	float Interval;//[Offset: 0x2cc , Size: 4]
	class DamageType* DamageType;//[Offset: 0x2d0 , Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x2d4 , Size: 12]
	int[] BuffIDs;//[Offset: 0x2e0 , Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x2ec , Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x2f8 , Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x153ab58
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x153aa70

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x298 , Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x2a4 , Size: 3]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x2a7 , Size: 3]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x2aa , Size: 3]
	UserDetailSetting UserDetailSetting;//[Offset: 0x2b0 , Size: 84]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321 , Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322 , Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323 , Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	int iEnableRegionID;//[Offset: 0x328 , Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x32c , Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x338 , Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x344 , Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x350 , Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x35c , Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x368 , Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x374 , Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x380 , Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x38c , Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x398 , Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x3a4 , Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x3b0 , Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x3bc , Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x3c8 , Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x3d4 , Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x3e0 , Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x3ec , Size: 12]
	SoftObjectPath[] ResidentAssets;//[Offset: 0x3f8 , Size: 12]
	bool AutoTestTriggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404 , Size: 1]
	FString AutoTestMissionType;//[Offset: 0x408 , Size: 12]
	FString CustomLineStr;//[Offset: 0x414 , Size: 12]
	enum GamePlayMode;//[Offset: 0x420 , Size: 4]
	Vector2D FOVRange;//[Offset: 0x424 , Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x42c , Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434 , Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435 , Size: 1]
	float SwimRotateX;//[Offset: 0x438 , Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c , Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x460 , Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x464 , Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x468 , Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x46c , Size: 4]
	ReplayUIManager* ReplayUIManager;//[Offset: 0x470 , Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x478 , Size: 4]
	AntiCheatConfig* ACConfig;//[Offset: 0x47c , Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x48c , Size: 4]
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x1bf56d0
	void UpdateWorldCullDistanceVolumes();// 0x1478abc
	void TestAyncLoad();// 0x1478aa8
	void SuperBattle();// 0x1478a94
	void SetWorldDoorCullDistance(int Distance);// 0x1478a1c
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x1478880
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x14787c4
	void SetUserSetingShadowQuality(bool bShadow);// 0x1478744
	void SetSoundEffectQuality(int Type);// 0x14786cc
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x1478638
	void SetHZBMobileState();// 0x12dedb4
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x14785c0
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x1478418
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x1478270
	static void SetCustomRouteLine();// 0x147825c
	static void SetAutoMissionType();// 0x1478248
	void ReSetFOVScreenSizeCullingFactor();// 0x1478234
	void RenderForLowFPS();// 0x1478220
	void RefuseRenderForLowFPS();// 0x147820c
	void QuitGame();// 0x14781f8
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x1478110
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x138c394
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x14780fc
	bool isUsingAssumedNameInReplay();// 0x14780d4
	bool IsSupportTagCulling();// 0x14780b8
	bool IsSupportSwitchSoundEffectQuality();// 0x1478090
	bool IsSupportSwitchRenderLevelRuntime();// 0x1478068
	bool IsSupportMSAA();// 0x1478040
	bool IsSupportLDR();// 0x1478018
	static bool IsSecAutoRunTest();// 0x13f8610
	bool IsPVENightChangeCullDistance();// 0x1477ff0
	bool IsOpenHDR();// 0x1477fc8
	bool IsIOSOneGigabyteDevice();// 0x144d378
	static bool IsGAutomatorTest();// 0x1477fa0
	static bool IsAutoRunTestGamePVEProfile();// 0x1477f78
	static bool IsAutoRunTestGamePVE();// 0x1477f50
	static bool IsAutoRunTestGame();// 0x1477f28
	void GMStandalone(FString Map);// 0x1477dd0
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x1477da8
	bool GetUserSetingShadowQuality();// 0x1477d80
	int GetUserQualitySettingLevel();// 0x1477d64
	int GetSoundEffectQuality();// 0x1477d3c
	ReplayUIManager* GetReplayUIManager();// 0x1477d14
	RenderQualitySettings GetRenderQualityLastSet();// 0x1477cc4
	RenderQualitySettings GetRenderQualityApplying();// 0x1477c74
	ObservingReplay* GetObservingReplay();// 0x1477c4c
	static STExtraGameInstance* GetInstance();// 0x1477c24
	int GetFPSLevel();// 0x1477bfc
	int GetExactDeviceLevel();// 0x1477bd4
	int GetDeviceUpdateVersionFlag();// 0x1477ba4
	FString GetDeviceProfilerLevel();// 0x1477ae4
	byte GetDeviceMaxSupportSoundEffect();// 0x1477abc
	byte GetDeviceMaxSupportLevel();// 0x1477a94
	int GetDeviceLimit();// 0x1477a6c
	int GetDeviceLevel();// 0x1477a3c
	bool GetDefaultSoundEffectQuality();// 0x1477a14
	DeathPlayback* GetDeathPlayback();// 0x14779ec
	CompletePlayback* GetCompletePlayback();// 0x14779c4
	static int GetAutoRunTestServerIdx();// 0x147799c
	static FString GetAutoRunPassWD();// 0x14778e4
	static FString GetAutoRunLuaTest();// 0x147782c
	static FString GetAutoRunAccount();// 0x1477774
	bool GetApplyingShadowQuality();// 0x147774c
	FString GetActiveDeviceProfile();// 0x147768c
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x147741c
	void EnableStreamingLevelLOD(bool bEnable);// 0x147739c
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x147729c
	bool DeleteSavedFiles(bool allfilesSaved);// 0x1477214
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x1477150
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x147708c
	void AutoActiveLDR();// 0x1477078
	void ActiveStyle_PPForDynamicRender(byte Type);// 0x1476ff8
	void ActiveStyle_PP(byte Level);// 0x1476f78
	void ActiveStyle_ACESForDynamicRender(byte Type);// 0x1476ef8
	void ActiveStyle(byte Level);// 0x1476e78
	void ActiveNightVision(bool bSet);// 0x1476df8
	void ActiveMSAA(bool bOpenMSAA);// 0x1476d78
	void ActiveDynamicStyle(bool bSet, byte Type);// 0x1476ca8

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x188 , Size: 216]
	delegate EnginePreTick;//[Offset: 0x260 , Size: 12]
	ActionQueueManager* ActionQueueManager;//[Offset: 0x284 , Size: 4]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x28c , Size: 4]
	UIMsgBus* AssociatedUIMsgBus;//[Offset: 0x294 , Size: 4]
	void TestExec();// 0x12dedb4
	void LuaLeakDetect();// 0x15bf578
	void LuaDoString(FString LuaString);// 0x15bf4bc
	float GetWeatherTime();// 0x15bf4a0
	int GetWeatherID();// 0x15bf480
	UIMsgBus* GetUIMsgBus();// 0x15bf458
	int GetDeviceLevel();// 0x1477a3c
	static UAEDataTable* GetDataTableFromCurentGI(FString tableName);// 0x15bf39c
	UAEDataTable* GetDataTable(FString tableName);// 0x15bf2d8
	FrontendHUD* GetAssociatedFrontendHUD();// 0x15bf2b0

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0 , Size: 12]
	uint64 RoleID;//[Offset: 0x10 , Size: 8]
	FString GameSvrId;//[Offset: 0x18 , Size: 12]
	FString GameAppID;//[Offset: 0x24 , Size: 12]
	uint16 AreaID;//[Offset: 0x30 , Size: 2]
	int8 PlatID;//[Offset: 0x32 , Size: 1]
	FString ZoneID;//[Offset: 0x34 , Size: 12]
	uint64 BattleID;//[Offset: 0x40 , Size: 8]
	FString BattleServerIP;//[Offset: 0x48 , Size: 12]
	uint32 BattleServerPort;//[Offset: 0x54 , Size: 4]
	FString UserName;//[Offset: 0x58 , Size: 12]
	FString PicUrl;//[Offset: 0x64 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x70 , Size: 4]
	int8 WeatherID;//[Offset: 0x78 , Size: 1]
	FString WeatherLevelName;//[Offset: 0x7c , Size: 12]
	float WeatherTime;//[Offset: 0x88 , Size: 4]
	int[] MrpcsData;//[Offset: 0x8c , Size: 12]
	<int,FString> AdvConfig;//[Offset: 0x9c , Size: 60]

--------------------------------
Class: ActionQueueManager.Object
	<FString,ActionQueueObject*> ActionQueueObjectPool;//[Offset: 0x1c , Size: 60]
	ActionQueueObject* GetQueueObject(FString Name);// 0x15a6de4

--------------------------------
Class: ActionQueueObject.Object
	static ActionQueueObject* Create(Object* Outer);// 0x15a7360
	void Clear();// 0x15a734c
	void ArrayIndexAddQueue(delegate Delegate, int first, int End);// 0x15a7220

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c , Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34 , Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40 , Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44 , Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50 , Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98 , Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c , Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0 , Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4 , Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8 , Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac , Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0 , Size: 8]
	FName LastGameStatus;//[Offset: 0xb8 , Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8 , Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0 , Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc , Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8 , Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4 , Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x100 , Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x10c , Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x118 , Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x124 , Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x130 , Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x13c , Size: 4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x2eae4fc
	void OnPreLoadMap(FString MapName);// 0x2eae438
	void OnPostLoadMapWithWorld(World* World);// 0x2eae3b8
	void OnGameViewportClientCreated();// 0x12dedb4
	World* GetWorld();// 0x2eae388
	FrontendUtils* GetUtils();// 0x2eae360
	PlayerController* GetPlayerController();// 0x2eae338
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x2eae1d8
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x2eae158
	GameViewportClient* GetGameViewportClient();// 0x2eae130
	GameMode* GetGameMode();// 0x2eae108
	void EnableGuiTest(bool bEnable);// 0x2eae088
	void DynamicAddUIMsgToCache(FString FuncName, UAEUserWidget* Widget, FString module);// 0x2eadf04
	void ClearLogicManagerByName(FString ManagerName);// 0x2eaddac

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c , Size: 4]
	FName CurrentSceneCameraName;//[Offset: 0x40 , Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x48 , Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x54 , Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x90 , Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x9c , Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xd8 , Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xe4 , Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x120 , Size: 60]
	<FName,Actor*> SceneMatChangeableMeshMap;//[Offset: 0x15c , Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x200 , Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x20c , Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x210 , Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x214 , Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x220 , Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x22c , Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x268 , Size: 12]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x2eaffb0
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x2eafe9c
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x2eafc80
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x2eaf9d0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x2eaf770
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x2eaf6ac
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x2eaf5f0
	void RegisterSceneMatChangeableMesh(FName meshName, Actor* Mesh);// 0x2eaf534
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x2eaf478
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x2eaf3bc
	void PopAllPushedUI();// 0x2eaf3a8
	void OnAllSceneCamerasRegistered();// 0x12f4c6c
	bool IsPushedPanel(out const FName ManagerName);// 0x2eaf314
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x2eaf1b4
	FString GetUIStackTopSrcTag();// 0x2eaf0f4
	FString GetUIStackTopDstTag();// 0x2eaf034
	FString GetUIStackTop();// 0x2eaef74
	Actor* GetSceneMatChangeableMeshByIdx(FName meshName);// 0x2eaeef4
	FrontendHUD* GetOwningFrontendHUD();// 0x2eaeecc
	Object* GetGlobalUIEventDispatcher();// 0x2eaeea4
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x2eaee24
	void EnableLobbyMainLight(bool NewEnable);// 0x2eaeda4

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2c8 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	void ToggleEnabled();// 0x2d68c10
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2d68ba0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2d68b28
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2d68ab0
	void SetLightColor(LinearColor NewLightColor);// 0x2d68a34
	void SetEnabled(bool bSetEnabled);// 0x2d689b4
	void SetCastShadows(bool bNewValue);// 0x2d68934
	void SetBrightness(float NewBrightness);// 0x2d688bc
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2d6883c
	void OnRep_bEnabled();// 0x13323cc
	bool IsEnabled();// 0x2d68814
	LinearColor GetLightColor();// 0x2d687d0
	float GetBrightness();// 0x2d687a8

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x260 , Size: 4]
	float MaxDrawDistance;//[Offset: 0x264 , Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x268 , Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c , Size: 1]
	int ShadowMapChannel;//[Offset: 0x270 , Size: 4]
	float MinRoughness;//[Offset: 0x278 , Size: 4]
	float ShadowResolutionScale;//[Offset: 0x27c , Size: 4]
	float ShadowBias;//[Offset: 0x280 , Size: 4]
	float ShadowSharpen;//[Offset: 0x284 , Size: 4]
	float ContactShadowLength;//[Offset: 0x288 , Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c , Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c , Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c , Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x28d , Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x290 , Size: 4]
	Vector LightFunctionScale;//[Offset: 0x294 , Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2a0 , Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4 , Size: 1]
	float IESBrightnessScale;//[Offset: 0x2a8 , Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2ac , Size: 4]
	float DisabledBrightness;//[Offset: 0x2b0 , Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4 , Size: 1]
	float BloomScale;//[Offset: 0x2b8 , Size: 4]
	float BloomThreshold;//[Offset: 0x2bc , Size: 4]
	Color BloomTint;//[Offset: 0x2c0 , Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2c8 , Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2d69acc
	void SetTemperature(float NewTemperature);// 0x2d69a54
	void SetShadowBias(float NewValue);// 0x2d699dc
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2d6996c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2d698f4
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2d6987c
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x2d69804
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x2d6973c
	void SetIntensity(float NewIntensity);// 0x2d696c4
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2d6964c
	void SetIESTexture(TextureLightProfile* NewValue);// 0x2d695d4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x2d69554
	void SetBloomTint(Color NewValue);// 0x2d694e4
	void SetBloomThreshold(float NewValue);// 0x2d6946c
	void SetBloomScale(float NewValue);// 0x2d693f4
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2d69374
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x2d692f4

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x238 , Size: 16]
	float Brightness;//[Offset: 0x248 , Size: 4]
	float Intensity;//[Offset: 0x24c , Size: 4]
	Color LightColor;//[Offset: 0x250 , Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254 , Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254 , Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254 , Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254 , Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x254 , Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x254 , Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x258 , Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x25c , Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x2d6abfc
	void SetCastShadows(bool bNewValue);// 0x2d6ab7c
	LinearColor GetLightColor();// 0x2d6ab38

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xc8 , Size: 4]
	float TextureMultiplier;//[Offset: 0xcc , Size: 4]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2d0 , Size: 4]
	void SetRadius(float NewRadius);// 0x2db40cc
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x2db4054

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x328 , Size: 4]
	float AttenuationRadius;//[Offset: 0x32c , Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330 , Size: 1]
	float LightFalloffExponent;//[Offset: 0x334 , Size: 4]
	float SourceRadius;//[Offset: 0x338 , Size: 4]
	float SoftSourceRadius;//[Offset: 0x33c , Size: 4]
	float SourceLength;//[Offset: 0x340 , Size: 4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x344 , Size: 12]
	void SetSourceRadius(float bNewValue);// 0x2db45f0
	void SetSourceLength(float NewValue);// 0x2db4578
	void SetSoftSourceRadius(float bNewValue);// 0x2db4500
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x2db4488
	void SetAttenuationRadius(float NewRadius);// 0x2db4410

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0 , Size: 4]
	float ShadowExponent;//[Offset: 0x4 , Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2c8 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	void OnRep_bEnabled();// 0x13323cc

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x260 , Size: 1]
	TextureCube* Cubemap;//[Offset: 0x264 , Size: 4]
	float SourceCubemapAngle;//[Offset: 0x268 , Size: 4]
	int CubemapResolution;//[Offset: 0x26c , Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x270 , Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274 , Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275 , Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x278 , Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x288 , Size: 4]
	float Contrast;//[Offset: 0x28c , Size: 4]
	float OcclusionExponent;//[Offset: 0x290 , Size: 4]
	float MinOcclusion;//[Offset: 0x294 , Size: 4]
	Color OcclusionTint;//[Offset: 0x298 , Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x29c , Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x348 , Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2dd98ac
	void SetOcclusionTint(out const Color InTint);// 0x2dd9828
	void SetOcclusionExponent(float InOcclusionExponent);// 0x2dd97b0
	void SetOcclusionContrast(float InOcclusionContrast);// 0x2dd9738
	void SetMinOcclusion(float InMinOcclusion);// 0x2dd96c0
	void SetLightColor(LinearColor NewLightColor);// 0x2dd9644
	void SetIntensity(float NewIntensity);// 0x2dd95cc
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2dd9554
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x2dd9454
	void SetCubemap(TextureCube* NewCubemap);// 0x2dd93dc
	void RecaptureSky();// 0x2dd93c8

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x2ec , Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x139fd10
	void RemoveWidget(UserWidget* Widget);// 0x2eb4efc
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x13cfdd8
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x2eb4e40
	void AddWidgetInternal(UserWidget* Widget);// 0x13d7274
	void AddWidget(UserWidget* Widget);// 0x2eb4dc8

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1ac , Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1b0 , Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1b4 , Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1b8 , Size: 4]
	Property*[] Params;//[Offset: 0x234 , Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x248 , Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x258 , Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x278 , Size: 32]
	float TickRate;//[Offset: 0x298 , Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c , Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d , Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e , Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f , Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2a0 , Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2a8 , Size: 8]
	enum FadingStatus;//[Offset: 0x2b8 , Size: 1]
	float CurrentOpacity;//[Offset: 0x2bc , Size: 4]
	float FadingInTime;//[Offset: 0x2c0 , Size: 4]
	float FadingOutTime;//[Offset: 0x2c4 , Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9 , Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca , Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cb , Size: 1]
	FString UIMsgPrefix;//[Offset: 0x2cc , Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x2d8 , Size: 12]
	void UnRegistFromGameFrontendHUD();// 0x2eb3d50
	void SynchronizeBlueprintProperties();// 0x1bf56d0
	void Show();// 0x2eb3d3c
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x2eb3cc4
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x2eb3c4c
	static void SetOnWidgetShow(delegate onShow);// 0x2eb3bb0
	static void SetOnWidgetHide(delegate OnHide);// 0x2eb3b14
	static void SetOnClearUIStack(delegate onClear);// 0x2eb3a78
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x2eb3930
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x2eb38b8
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x2eb37f4
	void ReceiveShow();// 0x1bf56d0
	void ReceiveHide();// 0x1bf56d0
	void ReceivedInitWidget();// 0x1bf56d0
	void ReCachedUIMsgFunction();// 0x2eb37e0
	static void PushOpenedUIStack(FString Name);// 0x2eb372c
	static void PopOpenedUIStack(FString curOpen);// 0x2eb3678
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x1bf56d0
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x1bf56d0
	void OnRightClicked(Vector2D TempScreenPos);// 0x1bf56d0
	void OnFadeOutFinished();// 0x13a0664
	void OnFadeInFinished();// 0x13a0648
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x1bf56d0
	void OnClicked(Vector2D TempScreenPos);// 0x1bf56d0
	void OnClearUIStack__DelegateSignature();// 0x1bf56d0
	bool IntCompare(int A, int B, enum CompareType);// 0x2eb3570
	void InitWidget(bool Recursive);// 0x2eb34f0
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x140af14
	void Hide();// 0x2eb34dc
	void HandleUIMessageBattle(FString UIMessage);// 0x2eb3420
	void HandleUIMessage(FString UIMessage);// 0x2eb3364
	void HandleAEUIFunction(FString FuncName, enum UAEUIMsgCallType);// 0x2eb3264
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x2eb30d0
	UAEUserWidget* GetParentWidget();// 0x2eb30a8
	PlayerController* GetOwningPlayer();// 0x1545568
	LogicManagerBase* GetOwningLogicManager();// 0x2eb3080
	FrontendHUD* GetOwningFrontendHUD();// 0x2eb3058
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x2eb2fd8
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x2eb2e8c
	UserWidget* GetChildWidget(FString WName);// 0x2eb2dc8
	bool FloatCompare(float A, float B, enum CompareType);// 0x2eb2cc0
	void DynamicAddUIMsgToCache(UAEUserWidget* Widget, FString FuncName);// 0x2eb2bc0
	void DestroyWidget();// 0x2eb2bac
	static void ClearOpenedUIStack();// 0x2eb2b98
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x2eb2adc
	void ClearFunctionCache();// 0x2eb2ac8
	void ClearClassWidgetTree();// 0x2eb2ab4
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x140aa64

--------------------------------
Class: LogicManagerBase.Object
	FString ManagerName;//[Offset: 0x1c , Size: 12]
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28 , Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a , Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b , Size: 1]
	int iUIControlState;//[Offset: 0x3c , Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x40 , Size: 4]
	FName[] GameStatusList;//[Offset: 0x50 , Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x8c , Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa8 , Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x2eb0e4c
	bool IsEnableRemoveDynamicWidgets();// 0x2eb0e24
	UAEUserWidget*[] GetWidgetList();// 0x2eb0d64
	UAEUserWidget* GetWidgetByName(FString InName);// 0x2eb0ca0
	FrontendHUD* GetOwningFrontendHUD();// 0x2d00da4
	int GetDefaultSceneCamera();// 0x2eae360
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x2eb0ac0

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0 , Size: 12]
	FName ContainerName;//[Offset: 0x10 , Size: 8]
	int ZOrder;//[Offset: 0x18 , Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x519 , Size: 1]
	enum TimingPolicy;//[Offset: 0x51a , Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x51c , Size: 4]
	IntPoint DrawSize;//[Offset: 0x520 , Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528 , Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529 , Size: 1]
	float RedrawTime;//[Offset: 0x52c , Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x538 , Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540 , Size: 1]
	Vector2D Pivot;//[Offset: 0x544 , Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c , Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d , Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x550 , Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x554 , Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x564 , Size: 16]
	float OpacityFromTexture;//[Offset: 0x574 , Size: 4]
	enum BlendMode;//[Offset: 0x578 , Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579 , Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a , Size: 1]
	UserWidget* Widget;//[Offset: 0x57c , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x590 , Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x594 , Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x598 , Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x59c , Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x5a0 , Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x5a4 , Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5a8 , Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5ac , Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x5b0 , Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4 , Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5 , Size: 1]
	FName SharedLayerName;//[Offset: 0x5b8 , Size: 8]
	int LayerZOrder;//[Offset: 0x5c0 , Size: 4]
	enum GeometryMode;//[Offset: 0x5c4 , Size: 1]
	float CylinderArcAngle;//[Offset: 0x5c8 , Size: 4]
	void SetWidget(UserWidget* Widget);// 0x23a7c48
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x23a7bcc
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x23a7b54
	void SetDrawSize(Vector2D Size);// 0x23a7ae4
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x23a7a68
	void RequestRedraw();// 0x23a7a4c
	UserWidget* GetUserWidgetObject();// 0x23a7a24
	TextureRenderTarget2D* GetRenderTarget();// 0x23a79fc
	LocalPlayer* GetOwnerPlayer();// 0x23a79d4
	MaterialInstanceDynamic* GetMaterialInstance();// 0x23a79ac
	Vector2D GetDrawSize();// 0x23a796c

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x9c , Size: 4]
	int SizeY;//[Offset: 0xa0 , Size: 4]
	LinearColor ClearColor;//[Offset: 0xa4 , Size: 16]
	byte AddressX;//[Offset: 0xb4 , Size: 1]
	byte AddressY;//[Offset: 0xb5 , Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb6 , Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb6 , Size: 1]
	byte RenderTargetFormat;//[Offset: 0xb7 , Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8 , Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8 , Size: 1]
	byte OverrideFormat;//[Offset: 0xb9 , Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0x94 , Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0 , Size: 144]
	delegate BrushDelegate;//[Offset: 0x160 , Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x170 , Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x180 , Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190 , Size: 1]
	float HitTestAreaRadius;//[Offset: 0x194 , Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x198 , Size: 16]
	delegate OnSetBrushFromPathAsyncFinished;//[Offset: 0x1a8 , Size: 12]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4 , Size: 1]
	void SetOpacity(float InOpacity);// 0x2380d80
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x2380d00
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x2380c84
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x2380bc0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize, bool bAuto2Mat);// 0x2380aac
	void SetBrushFromPath(FString ResourcePath, bool bMatchSize, bool bAsync);// 0x2380954
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x23808dc
	void SetBrushFromAsset(SlateBrushAsset* Asset, bool bAuto2Mat);// 0x2380818
	void SetBrush(out const SlateBrush InBrush, bool bAuto2Mat);// 0x238051c
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x23804f4
	bool GetDontPaintWhenAlphaZero();// 0x23804cc

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0x9c , Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20 , Size: 144]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x318 , Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320 , Size: 1]
	int NumSpectators;//[Offset: 0x324 , Size: 4]
	int NumPlayers;//[Offset: 0x328 , Size: 4]
	int NumBots;//[Offset: 0x32c , Size: 4]
	float MinRespawnDelay;//[Offset: 0x330 , Size: 4]
	int NumTravellingPlayers;//[Offset: 0x334 , Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x338 , Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x33c , Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x348 , Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c , Size: 1]
	void StartMatch();// 0x2cf413c
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x2cf40bc
	void Say(FString Msg);// 0x2cf3ff8
	void RestartGame();// 0x2cf3fdc
	bool ReadyToStartMatch();// 0x147fb04
	bool ReadyToEndMatch();// 0x2cf3fac
	void K2_OnSetMatchState(FName NewState);// 0x1bf56d0
	bool IsMatchInProgress();// 0x2cf3f7c
	bool HasMatchEnded();// 0x2cf3f4c
	FName GetMatchState();// 0x2cf3f28
	void EndMatch();// 0x2cf3f0c
	void AbortMatch();// 0x2cf3ef0

--------------------------------
Class: UIMsgBus.CustomMsgBus.BlueprintFunctionLibrary.Object
	static UIMsgBus* GetUIMsgBus(Object* WorldContextObj);// 0x15adf54

--------------------------------
Class: CustomMsgBus.BlueprintFunctionLibrary.Object
	<FString,CustomGameMsgGroup*> MsgListenerGroupMap;//[Offset: 0x1c , Size: 60]
	<FString,CustomTaggedGameMsgGroup*> TaggedMsgListenerGroupMap;//[Offset: 0x58 , Size: 60]
	void UnRegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, const Object* InMsgLisenter);// 0x15ad838
	void UnRegistMsgListener(FString InMsgName, const Object* InMsgLisenter);// 0x15ad694
	void RegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, Object* InMsgLisenter);// 0x15ad3d8
	void RegistMsgListener(FString InMsgName, Object* InMsgLisenter);// 0x15ad234
	void PushTaggedMsg(FString InMsgName, FString InMsgTagName, CustomGameMsg* InTargetMsg, int TaggedMsgMaxProcessCount);// 0x15acf30
	void PushMsg(FString InMsgName, CustomGameMsg* InTargetMsg);// 0x15acd8c

--------------------------------
Class: CustomGameMsgGroup.Object
	FString MsgName;//[Offset: 0x1c , Size: 12]
	Object*[] MsgListenerGroup;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: CustomTaggedGameMsgGroup.CustomGameMsgGroup.Object
	FString MsgTagName;//[Offset: 0x34 , Size: 12]
	GameMsgCache[] CachedMsgList;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: GameMsgCache
	CustomGameMsg* CachedGameMsg;//[Offset: 0x0 , Size: 4]
	int ProcessedCount;//[Offset: 0x4 , Size: 4]
	int MaxProcessCount;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CustomGameMsg.Object
	static CustomGameMsg* MakeGameMsg(Object* UIMsgMaker, class CustomGameMsg CustomMsgClass);// 0x15ac738

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x6c , Size: 60]
	bool TryGetTableDataRowStruct(FString KeyValue, out UAETableRow Result);// 0x2eb1e20
	UAETableRow GetTableDataRowStruct(FString KeyValue);// 0x2eb1d54
	int GetTableDataByDefault_Int32(FString KeyValue, FString TagName, int DefaultValue);// 0x2eb1bc8
	FString GetTableData_String(FString KeyValue, FString TagName);// 0x2eb1a00
	int GetTableData_Int32(FString KeyValue, FString TagName);// 0x2eb18b8
	float GetTableData_Float(FString KeyValue, FString TagName);// 0x2eb176c
	bool GetTableData_Bool(FString KeyValue, FString TagName);// 0x2eb1624

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: UAETableRow
	UAEDataTable* Table;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0 , Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1 , Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0 , Size: 4]
	int TCQualityGrade;//[Offset: 0x4 , Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0x8 , Size: 4]
	int UserQualitySetting;//[Offset: 0xc , Size: 4]
	int DeviceSupportHDR;//[Offset: 0x10 , Size: 4]
	int IsOpenHDR;//[Offset: 0x14 , Size: 4]
	int UserHDRSetting;//[Offset: 0x18 , Size: 4]
	int IsSupportMSAA;//[Offset: 0x1c , Size: 4]
	bool UserMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	int UserShadowSetting;//[Offset: 0x24 , Size: 4]
	int UserShadowSwitch;//[Offset: 0x28 , Size: 4]
	int PUBGLimitSetting;//[Offset: 0x2c , Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x30 , Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x34 , Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x38 , Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x3c , Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x40 , Size: 4]
	float PUBGCRLRuntmieMinMem;//[Offset: 0x44 , Size: 4]
	int PUBGRenderSwitch;//[Offset: 0x48 , Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	int UserMaterialQualityLevel;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0 , Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc , Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0 , Size: 12]
	float Value;//[Offset: 0xc , Size: 4]
	FString DependKey;//[Offset: 0x10 , Size: 12]
	float DependValue;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0 , Size: 12]
	float RenderValue;//[Offset: 0xc , Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0 , Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4 , Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10 , Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0 , Size: 16]
	float Bright;//[Offset: 0x10 , Size: 4]
	float Gray;//[Offset: 0x14 , Size: 4]
	float ShoulderStrength;//[Offset: 0x18 , Size: 4]
	float ToeStrength;//[Offset: 0x1c , Size: 4]
	float LinearStrength;//[Offset: 0x20 , Size: 4]
	float LinearAngle;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c , Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28 , Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60 , Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68 , Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c , Size: 12]
	void StopRecord(bool bRankFirst);// 0x154ac18
	void StartRecord();// 0x154ac04
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x154a9c8
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x154a894
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x154a5b8
	void BuildOutputData();// 0x154a5a4
	void BuildContinuousKillOutputData();// 0x154a590

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0 , Size: 4]
	float EndTimeSecs;//[Offset: 0x4 , Size: 4]
	byte WonderfulCutType;//[Offset: 0x8 , Size: 1]
	float ShootDistance;//[Offset: 0xc , Size: 4]
	FString CauserName;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0 , Size: 4]
	float EndTimeSecs;//[Offset: 0x4 , Size: 4]
	int KillNum;//[Offset: 0x8 , Size: 4]
	float FarthestKillDistance;//[Offset: 0xc , Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0 , Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	byte CaptureType;//[Offset: 0x1 , Size: 1]
	byte ShootDamageType;//[Offset: 0x2 , Size: 1]
	float DamageTimeSecs;//[Offset: 0x4 , Size: 4]
	float ShootDistance;//[Offset: 0x8 , Size: 4]
	FString CauserName;//[Offset: 0xc , Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0 , Size: 4]
	float DamageTimeSecs;//[Offset: 0x4 , Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	byte CaptureType;//[Offset: 0x9 , Size: 1]
	byte ShootDamageType;//[Offset: 0xa , Size: 1]
	float ShootDistance;//[Offset: 0xc , Size: 4]
	FString CauserName;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	<FString,DeathPlayCharacterTrans> CharacterTransMap;//[Offset: 0x13c , Size: 60]
	bool IsSwitchedOffByDevice();// 0x1354b44
	FString GetReplayTargetName();// 0x1354a84
	void EnableDeathPlayback(bool bEnable);// 0x1354a04

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x24 , Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x28 , Size: 40]
	enum ReplayType;//[Offset: 0x50 , Size: 1]
	ReplayUIManager* pReplayUIMgr;//[Offset: 0x5c , Size: 4]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0xcc , Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0xd4 , Size: 12]
	bool StopRecordingReplay();// 0x1345f78
	bool StopPlay();// 0x13880f8
	bool StartRecordingReplay();// 0x1345f34
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x1387f50
	void SetReplayStreamer(FString InReplayStreamer);// 0x1387db8
	void SetIsGMSpectator(bool bGM);// 0x1387d3c
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x1387cc4
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1387c4c
	void ReplayOnWeaponChanged();// 0x1387c38
	void ReplayOnSimulatedWeaponChanged();// 0x1387c24
	void ReplayOnBulletNumChanged();// 0x1387c10
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1387b98
	bool PlayReplay();// 0x1387b68
	bool PauseReplay(bool bPaused);// 0x1387ad8
	bool IsInRecordState();// 0x1387ab0
	bool IsInPlayState();// 0x1387a88
	bool IsFastForwarding();// 0x1387a60
	bool HaveRecordingData();// 0x1387a30
	void HandleChangeStatePC();// 0x1387a1c
	FString GetSpectatorName();// 0x1354a84
	float GetCurrentReplayTotalTimeInSeconds();// 0x13879f4
	float GetCurrentReplayCurTimeInSeconds();// 0x13879cc

--------------------------------
Class: ReplayUIManager.Object
	STExtraPlayerController* pSTExtraPC;//[Offset: 0x20 , Size: 4]
	STExtraGameInstance* pExtraInst;//[Offset: 0x24 , Size: 4]
	STExtraPlayerState* pExtraPS;//[Offset: 0x28 , Size: 4]
	STExtraBaseCharacter* pViewCharacter;//[Offset: 0x2c , Size: 4]
	class UserWidget* ReplayUIPath;//[Offset: 0x30 , Size: 40]
	ReplayUserWidget* pReplayUserWidget;//[Offset: 0x58 , Size: 4]
	ReplayTeammateInfo[] SavedTeammateInfoArray;//[Offset: 0x5c , Size: 12]
	<uint32,FString> AssumedMap_Key2name;//[Offset: 0x68 , Size: 60]
	<FString,FString> AssumedMap_Name2name;//[Offset: 0xa4 , Size: 60]
	int ReplayTargetTeamID;//[Offset: 0xf0 , Size: 4]
	FString ReplayTargetName;//[Offset: 0xf4 , Size: 12]
	void UpdateReplayUI();// 0x1401abc
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x1387c4c
	void ReplayOnWeaponChanged();// 0x1401aa8
	void ReplayOnSimulatedWeaponChanged();// 0x1401a94
	void ReplayOnBulletNumChanged();// 0x1401a80
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x1387b98
	void ReleaseManager();// 0x1401a6c
	void InitManager();// 0x1401a58
	void ChangeProgress();// 0x1401a44

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x95c , Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0x960 , Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964 , Size: 1]
	<int> TouchIndexSet;//[Offset: 0x968 , Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0x9a4 , Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0x9a5 , Size: 1]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x9b8 , Size: 60]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x9f4 , Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00 , Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xa01 , Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xa04 , Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xa08 , Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xa0c , Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xa10 , Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xa14 , Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xa18 , Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xa1c , Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xa20 , Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xa24 , Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xa28 , Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xa2c , Size: 4]
	Vector2D StartPosition;//[Offset: 0xa30 , Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xa38 , Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xa40 , Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xa4c , Size: 12]
	FString FollowCandidateName;//[Offset: 0xa5c , Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xa68 , Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xaa4 , Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xab0 , Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xae0 , Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0xae1 , Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xae4 , Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8 , Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaea , Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xaec , Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xaf8 , Size: 16]
	byte AutoAimType;//[Offset: 0xb08 , Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3a , Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3b , Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48 , Size: 1]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xb4c , Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xb58 , Size: 144]
	SensibilityConfig SensibilityConfig;//[Offset: 0xbe8 , Size: 172]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc94 , Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc95 , Size: 1]
	int UseMotionControlType;//[Offset: 0xc98 , Size: 4]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0xc9c , Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0xca8 , Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0xcb4 , Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0xcc0 , Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0xccc , Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0xcd8 , Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0xce4 , Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0xcf0 , Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0xcfc , Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0xd08 , Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0xd14 , Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0xd20 , Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0xd2c , Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0xd38 , Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0xd44 , Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0xd50 , Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0xd5c , Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0xd68 , Size: 12]
	delegate OnNightBeggan;//[Offset: 0xd74 , Size: 12]
	delegate OnNightEnded;//[Offset: 0xd80 , Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0xd8c , Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0xd98 , Size: 4]
	delegate OnInitTaskData;//[Offset: 0xd9c , Size: 12]
	delegate OnInitCollectionData;//[Offset: 0xda8 , Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0xdb4 , Size: 12]
	delegate OnPlayerKilling;//[Offset: 0xdc0 , Size: 12]
	delegate OnPickupItem;//[Offset: 0xdcc , Size: 12]
	delegate OnDropItem;//[Offset: 0xdd8 , Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0xde4 , Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0xdf0 , Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0xdfc , Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0xe20 , Size: 68]
	delegate OnStartFireEvent;//[Offset: 0xe64 , Size: 12]
	delegate OnStopFireEvent;//[Offset: 0xe70 , Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0xe7c , Size: 12]
	delegate OnReleaseScreen;//[Offset: 0xe88 , Size: 12]
	delegate OnFingerMove;//[Offset: 0xe94 , Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0xea0 , Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0xeac , Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0xeb8 , Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0xec4 , Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0xed0 , Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0xedc , Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0xee8 , Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0xef4 , Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0xf00 , Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0xf0c , Size: 12]
	delegate OnDamageToOther;//[Offset: 0xf18 , Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xf24 , Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0xf30 , Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0xf3c , Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0xf48 , Size: 12]
	delegate OnRank;//[Offset: 0xf54 , Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0xf60 , Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0xf6c , Size: 12]
	delegate OnUseMainSlot;//[Offset: 0xf78 , Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0xf84 , Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0xf90 , Size: 12]
	delegate OnRepPlayerState;//[Offset: 0xf9c , Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0xfa8 , Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0xfb4 , Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0xfc4 , Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0xfd0 , Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0xfdc , Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0xfe8 , Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0xff4 , Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1000 , Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x100c , Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x1018 , Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1024 , Size: 12]
	delegate OnGameStateChange;//[Offset: 0x1030 , Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x103c , Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1058 , Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x105c , Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x1068 , Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1074 , Size: 12]
	delegate OnLostConnection;//[Offset: 0x109c , Size: 12]
	delegate OnReconnected;//[Offset: 0x10a8 , Size: 12]
	delegate OnExitGame;//[Offset: 0x10b4 , Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x10c0 , Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x10cc , Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x10d8 , Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x10e4 , Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x10e8 , Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x10ec , Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x10f0 , Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f4 , Size: 1]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x12b4 , Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c4 , Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c5 , Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c6 , Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c7 , Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8 , Size: 1]
	bool DisableItemAttachListFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c9 , Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ca , Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12cb , Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x12cc , Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x12d0 , Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x12d4 , Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x12d8 , Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x12dc , Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x12e0 , Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e4 , Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x12e8 , Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x130c , Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1330 , Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1338 , Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1340 , Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1364 , Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x136c , Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1374 , Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1398 , Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x13d4 , Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x13d8 , Size: 4]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13dc , Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13dd , Size: 1]
	byte CurCameraMode;//[Offset: 0x13e4 , Size: 1]
	FName AutoScopeAimCompName;//[Offset: 0x13e8 , Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x13f0 , Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f4 , Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f5 , Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f6 , Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f7 , Size: 1]
	float MoveableLandHardTime;//[Offset: 0x13f8 , Size: 4]
	float CanMoveCDTime;//[Offset: 0x13fc , Size: 4]
	float CanSprintCDTime;//[Offset: 0x1400 , Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1404 , Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1408 , Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x140c , Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1410 , Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1414 , Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1420 , Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1424 , Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1428 , Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1464 , Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1465 , Size: 1]
	int AutoAimLevel;//[Offset: 0x1468 , Size: 4]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146c , Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1470 , Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1474 , Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1475 , Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1478 , Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1480 , Size: 1]
	float AccumulateYawInput;//[Offset: 0x1484 , Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1488 , Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148c , Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148d , Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148e , Size: 1]
	float NoRespondArea;//[Offset: 0x1490 , Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1494 , Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1498 , Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1499 , Size: 1]
	byte sprintOptType;//[Offset: 0x149a , Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x149c , Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x14a0 , Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x14a4 , Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x14a8 , Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ac , Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x14ad , Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x14b0 , Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b4 , Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x14b8 , Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x14f4 , Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x14f8 , Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x14fc , Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1500 , Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1504 , Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1508 , Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x150c , Size: 4]
	byte TouchFireType;//[Offset: 0x1510 , Size: 1]
	float TestForce;//[Offset: 0x1514 , Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1518 , Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1524 , Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1530 , Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1531 , Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1532 , Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1533 , Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1534 , Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1538 , Size: 4]
	float AutoSprintThreshold;//[Offset: 0x153c , Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1540 , Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1544 , Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1548 , Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154c , Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1550 , Size: 4]
	float MinFovChangeView;//[Offset: 0x1554 , Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1558 , Size: 48]
	int GameTipMsgID;//[Offset: 0x1588 , Size: 4]
	FString GameTipParam1;//[Offset: 0x158c , Size: 12]
	FString GameTipParam2;//[Offset: 0x1598 , Size: 12]
	float AutoSprintCD;//[Offset: 0x15e0 , Size: 4]
	TeamMateStateInfo[] TeamMateStates;//[Offset: 0x15e4 , Size: 12]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x15f0 , Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x162c , Size: 60]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1680 , Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1748 , Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x174c , Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1750 , Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1754 , Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1764 , Size: 4]
	FString[] ForbitPickList;//[Offset: 0x1770 , Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1788 , Size: 1]
	int pickupPlayerChoice;//[Offset: 0x178c , Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1790 , Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1791 , Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x1794 , Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1798 , Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179c , Size: 1]
	float FreeViewUpRate;//[Offset: 0x17a0 , Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x17a4 , Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x17a8 , Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ac , Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ae , Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x17b0 , Size: 12]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17bc , Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x17bd , Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17be , Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x17fc , Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1864 , Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x1920 , Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x1924 , Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x1928 , Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x192c , Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x1930 , Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x1934 , Size: 4]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194d , Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x194e , Size: 1]
	BattleItemData[] ObservedItemList;//[Offset: 0x196c , Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0x19d8 , Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x19e4 , Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x19f0 , Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x19fc , Size: 12]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x1a08 , Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a14 , Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x1a18 , Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x1a28 , Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x1a2c , Size: 12]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x1a38 , Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x1a44 , Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x1a50 , Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x1a5c , Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x1a68 , Size: 60]
	ObservedData ObservedData;//[Offset: 0x1aa8 , Size: 72]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b01 , Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x1b04 , Size: 12]
	delegate OnToggleOBMapShowHide;//[Offset: 0x1b14 , Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x1b20 , Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x1b34 , Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x1b40 , Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x1b4c , Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x1b58 , Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x1b64 , Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x1b80 , Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x1b84 , Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x1b88 , Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x1b8c , Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8d , Size: 1]
	int FireMode;//[Offset: 0x1b90 , Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b94 , Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b95 , Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b96 , Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b97 , Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x1b98 , Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x1ba4 , Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x1bbc , Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x1bd4 , Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be0 , Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x1be4 , Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x1bf0 , Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x1bfc , Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x1c08 , Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x1c14 , Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c21 , Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x1c24 , Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x1c30 , Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3c , Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x1c40 , Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x1c4c , Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c58 , Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x1c5c , Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x1c60 , Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x1c64 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x1c68 , Size: 4]
	float RealTimePawnHeight;//[Offset: 0x1c6c , Size: 4]
	Rotator OB_DestControlRotation;//[Offset: 0x1c70 , Size: 12]
	float OB_RotationLagSpeed;//[Offset: 0x1c88 , Size: 4]
	ItemDefineWeaponSyncData[] SpawnAndBackpackWeaponReplicatedDataArray;//[Offset: 0x1ca4 , Size: 12]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x1cb4 , Size: 12]
	Actor* ThePlane;//[Offset: 0x1cc0 , Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x1ccc , Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x1cd4 , Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x1ce8 , Size: 4]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cee , Size: 1]
	FString LastBreathMurder;//[Offset: 0x1cf0 , Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cfc , Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x1d00 , Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x1d08 , Size: 4]
	FString murderName;//[Offset: 0x1d0c , Size: 12]
	FString FinalMurderName;//[Offset: 0x1d18 , Size: 12]
	uint64 MurderUID;//[Offset: 0x1d28 , Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d30 , Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d31 , Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x1d64 , Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x1da0 , Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x1de4 , Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x1de8 , Size: 4]
	int CurrOBAirDropID;//[Offset: 0x1dec , Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x1df0 , Size: 60]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x1ebc , Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec0 , Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x1ec4 , Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x1f0c , Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f10 , Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x1f14 , Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f18 , Size: 1]
	enum ServerStateType;//[Offset: 0x1f19 , Size: 1]
	enum ClientStateType;//[Offset: 0x1f1a , Size: 1]
	bool bDebugDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1b , Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f30 , Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f31 , Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f32 , Size: 1]
	float ObservingTime;//[Offset: 0x1f34 , Size: 4]
	KillerTracker* tracker;//[Offset: 0x1f38 , Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4c , Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4d , Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x1f98 , Size: 4]
	bool IsQuickGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9c , Size: 1]
	FString DefaultHUDClassPath;//[Offset: 0x1fa0 , Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x1fc8 , Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x1fd4 , Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd8 , Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd9 , Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x1fdc , Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x1fe0 , Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1fe4 , Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x201c , Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x2028 , Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x202c , Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x2030 , Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x206c , Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x20ac , Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x20b0 , Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x20bc , Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x2110 , Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x2114 , Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2118 , Size: 4]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2188 , Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2189 , Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x218c , Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2190 , Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x219c , Size: 8]
	int IdCardMarkType;//[Offset: 0x21a8 , Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21af , Size: 1]
	int VehicleControlMode;//[Offset: 0x21b0 , Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b4 , Size: 1]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x21b8 , Size: 4]
	uint32 LastKillerKey;//[Offset: 0x21bc , Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c0 , Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c1 , Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e4 , Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e5 , Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e6 , Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x21e8 , Size: 4]
	delegate OnTeammateConveyStatusChangedDelegate;//[Offset: 0x21ec , Size: 12]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x21f8 , Size: 12]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x2204 , Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x2210 , Size: 12]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x221c , Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2228 , Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2234 , Size: 12]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x2240 , Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x2244 , Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2250 , Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2260 , Size: 1]
	double LastFlyLeapPlatfromTime;//[Offset: 0x23c8 , Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240c , Size: 1]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x2410 , Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2420 , Size: 16]
	void VisualizeItem();// 0x12dedb4
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x14b6a68
	void ViewPlane();// 0x14b6a54
	void UseZombieModeSkill();// 0x14b6a40
	void UserDropItemOperation(ItemDefineID DefineID);// 0x14b69b8
	void UseItem(int ID);// 0x14b6940
	void UpdatePoseViewPitchLimit();// 0x14b692c
	void UpdatePoseState(byte PoseType);// 0x14b68b4
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x14b67ec
	void UnLoadAllCollision(bool Unload);// 0x14b676c
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x14b65cc
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x14b636c
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x14b6474
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x14b636c
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x14b62b0
	void TouchMove(Vector Loc, byte FingerIndex);// 0x14b61f4
	bool TouchEnd(byte PressType);// 0x14b6174
	void TouchBegin(byte PressType);// 0x14b60fc
	void ToggleVehicleSync(bool Val);// 0x133a074
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x133a074
	void ToggleUserCmdDeltaFlag(bool Val);// 0x133a074
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x133a074
	void ToggleUserCmdDelta(bool Val);// 0x133a074
	void ToggleServerAcknowledgePossession(bool Val);// 0x133a074
	void ToggleOBTPPFollowFreeView();// 0x14b60e8
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x14b6068
	void ToggleCheatLocation(bool Val);// 0x133a074
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x14b5f68
	void TeamNoAlwaysRelevant();// 0x14b5f54
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x14b5d74
	void SwitchViewTarget();// 0x12dedb4
	void SwitchToTeamByNumPressed();// 0x14b5d60
	void SwitchToPlayerByNumPressed();// 0x14b5d4c
	void SwitchToDeadBox();// 0x14b5d38
	void SwitchShowUI();// 0x14b5d24
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x14b5c28
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState);// 0x14b5b20
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x14b5a5c
	void SwitchMouseCursorShowState();// 0x14b5a48
	void SwitchGenerateItem();// 0x14b59ec
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x14b5930
	void SwitchCameraModeByOrder();// 0x14b591c
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x14b57c0
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x14b56b8
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x14b55e0
	void StartReadyCountDown();// 0x14b55cc
	void StartLandOnGroundAfterJumpPlane();// 0x14b55b8
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x14b54a0
	void StartGame();// 0x14b548c
	void StartFreeCamera(byte FigerIndex);// 0x14b5414
	void StartAirDropSpecified(float X, float Y);// 0x14b5358
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x14b5258
	void StartAirDrop(int Index);// 0x14b51e0
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x14b50e0
	void StartAirAttack(int Index);// 0x14b5068
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x14b4fa0
	void SpawnVehicleWithPath(FString Path);// 0x14b4ee4
	void SpawnVehicleInAir();// 0x14b4ed0
	void SpawnVehicle();// 0x14b4ebc
	void SpawnHeavyweaponBox(int Num);// 0x14b4e44
	void SpawnAllVehicle(FString Path);// 0x14b4d88
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x14b4c88
	void SpawnAI(int Num);// 0x14b4c10
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x14b4b98
	void ShutDownItemGenerate(bool IsOpen);// 0x14b4b18
	void ShowWeaponRecordInfo();// 0x12dedb4
	void ShowVaultEnable();// 0x1432694
	void ShowStringMsg(const FString Message, FString FromPlayerName, int msgID);// 0x14b4864
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x14b4720
	void ShowMovePath(const Vector[] Path);// 0x14b465c
	void ShowFireBtn(bool bShow);// 0x1bf56d0
	void ShowBulletShoot(Vector StartLoc, Rotator rot);// 0x14b4594
	void ShowAllRoles();// 0x12dedb4
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x14b4514
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x14b4494
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x14b4414
	void SetUAETriggerEnable(bool IsEnbale);// 0x14b4394
	void SetTimeSpeedFactor(float Val);// 0x138c394
	void SetTimeSpeedCheck(bool Val);// 0x133a074
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x14b4284
	void SetStateLeftTime(int LeftTime);// 0x14b420c
	void SetSpeed(float Modifier);// 0x14b4194
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x14b4114
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x133a074
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x14b404c
	void SetReconnectZombieWaveDataToClient(const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x14b3ea8
	void SetRageLevel(int Level);// 0x14b3e30
	void SetPoisonFogEnable(bool IsEnbale);// 0x14b3db0
	void SetPlayerMark(Vector Loc);// 0x14b3d04
	void SetPlaneEnabled(bool InEnable);// 0x14b3c84
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x14b3b70
	void SetObservingTime(float Time);// 0x14b3af8
	void SetNightStatus(int nightStatus);// 0x14b3a80
	void SetMaxHealth(float HP);// 0x14b3a08
	void SetJoyStickScale(float JSScale);// 0x14b3990
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x14b38d4
	void SetJoyStickOpacity(float JSOpacity);// 0x14b385c
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x14b37ec
	void SetJoyStickCenter(Vector2D JSCenter);// 0x14b377c
	void SetIsSnowy(bool bSnowy);// 0x14b36fc
	void SetIsShowBlood(bool InIsShowBlood);// 0x14b367c
	void SetIsRainy(bool bRainy);// 0x14b35fc
	void SetIsBlizzard(bool bBlizzard);// 0x14b357c
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x14b339c
	void SetGameStateModeUI(const FString[] ModeUIMgr);// 0x14b3240
	void SetForbidNightVehicle(int isForbid);// 0x14b31c8
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x14b3104
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x14b3004
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x14b2ebc
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x14b2dc0
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x14b2ca8
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x14b2b9c
	void SetBeKickedPlayerName(FString InPlayerName);// 0x14b2a44
	void SetAllInfectedAreaLevel(int LevelId);// 0x14b29cc
	void SetAirDropEnable(bool Enable);// 0x14b294c
	void SetAirAttackEnable(bool Enable);// 0x14b28cc
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x14b271c
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x14b25b4
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x14b2500
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x14b244c
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x14b2398
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x14b22e4
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x14b2128
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, int CurrentBullet);// 0x14b1f94
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, int CurrentBullet);// 0x14b1e00
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x14b1d04
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x14b1a5c
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x14b1878
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x14b1734
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x14b1638
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x14b1584
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType);// 0x14b1488
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x14b1344
	void ServerSetObsverLocation(const Vector locat);// 0x14b1298
	void ServerSetIsQuickGrenade(bool IsOpenQuickGrenade);// 0x14b11d0
	void ServerSetIsFreeView(bool isFreeView);// 0x14b1108
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x14b0ff4
	void ServerSetFreeCamera(Rotator InRotation);// 0x14b0f48
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x14b0e34
	void ServerSetControlRotation(const Rotator NewRotation);// 0x14b0d88
	void ServerSendLogToLobby(FString ErrorLog);// 0x14b0ccc
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x14b0b60
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x14b08a0
	void ServerRemoteDestroyActor(int SingleId);// 0x14b081c
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x14b06c0
	void ServerReceiveThePlane(int64 TimeStamp);// 0x14b0608
	void ServerReceiveServerStateType(enum ReceivedType, enum ClientType, int64 TimeStamp);// 0x14b04b0
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x14b00c8
	void ServerOpenParachute();// 0x14b006c
	void ServerObserveKiller();// 0x14b0010
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x14aff5c
	void ServerObserveAirDropBox(int BoxId);// 0x14afea8
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x14afd98
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x14afce4
	void ServerJumpFromPlane();// 0x14afc88
	void ServerInterruptGame();// 0x14afc2c
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x14afb38
	void ServerHandleMsg(enum Msg);// 0x14afa84
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x14af954
	void ServerGetTotalPlayers();// 0x14af8f8
	void ServerGetPlayerAliasInfoList();// 0x14af89c
	void ServerFight();// 0x14af840
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x14af78c
	void ServerExitFreeCamera();// 0x14af730
	void ServerDropItem(ItemDefineID DefineID, int count, enum Reason);// 0x14af5cc
	void ServerDoPickupRevivalFlag();// 0x14af570
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x14af454
	void ServerCMD_RPC(FString Cmd);// 0x14af360
	void ServerCMD(FString Cmd);// 0x138b3d0
	void ServerClearTeammatesCache();// 0x14af304
	void SendStringMsg(FString Message, int msgID);// 0x14af204
	void SendLogToLobbyOnece(byte LogType);// 0x14af18c
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x14af0c0
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x14aef44
	void ScopeOut();// 0x14aef30
	void ScopeIn();// 0x14aef1c
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x14aed34
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x14aebdc
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x14aea84
	void RunOnNextFrameEvent();// 0x14aea70
	void RunOnNextFrame__DelegateSignature();// 0x1bf56d0
	void RPC_ServerCoronaLab(const byte[] CoronaLab, uint32 CoronaState, const byte[] ProParam);// 0x14ae8ac
	void RPC_ServerCoronaCook(int8 InShotType, const byte[] CoronaShot);// 0x14ae770
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x14ae590
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x14ae1b0
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x14ade20
	void RPC_Server_SendLog(FString ErrorLog);// 0x14add20
	void RPC_Server_ReqHealth();// 0x14adcc4
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x14adbd0
	void RPC_Server_PrintHP();// 0x14adb74
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x14ada78
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x14ad9c4
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x14ad910
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x14ad81c
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x14ad6c8
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x14ad514
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x14ad420
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x14ad060
	void RPC_Server_NorifyServerWhichTeamOpenedAirdropBox(int AirdropboxID, int ByTeamID);// 0x14acf5c
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x14acf00
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x14acd68
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray);// 0x14acc18
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x14acb24
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x14aca30
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x14ac8e8
	void RPC_Server_ClientHasReactivated();// 0x14ac88c
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x14ac6f4
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x14ac55c
	void RPC_Server_CharacterSpawnFinish();// 0x14ac500
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x14ac404
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x14ac350
	void RPC_ReviveState_GiveUpRevive();// 0x14ac2f4
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x14ac240
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x14ac02c
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x14abe68
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x14abcec
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x14abbec
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x14abb38
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x14ab9e0
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x14ab884
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 Uid, const bool IsMurderSameTeam);// 0x14ab67c
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 Uid, const bool IsMurderSameTeam);// 0x14aac84
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x14aabbc
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x14aa9e8
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int count);// 0x14aa8ec
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x14aa7f0
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x14aa6f4
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x14aa59c
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector BulletStart, Vector BulletEnd);// 0x14aa484
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x14aa340
	void RPC_GiveUpGame();// 0x14aa2e4
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x14aa1a4
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x14aa06c
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x14a9ee8
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x14a9de0
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x14a9bcc
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x14a9a00
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x14a9834
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x14a9668
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeID);// 0x14a9560
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x14a94e0
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x14a934c
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator rot);// 0x14a9234
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x14a8f8c
	void RPC_Client_NotifyHealth(float Health);// 0x14a8ed8
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x14a8d74
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x14a8c80
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x14a8b84
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc);// 0x14a8a4c
	void RevivalTemateSuccess();// 0x14a8a30
	void RevivalTemateFail(FString Reason);// 0x14a896c
	float RetriveMobileContentScaleFactor();// 0x14a8944
	void RestoreDefaultInteractionSize(int JSIndex);// 0x14a88cc
	void RespawnRecoverData(UAEPlayerController* PC);// 0x14a8854
	void ResetMissingUIUpdate();// 0x1bf56d0
	void RequireNetCullingDistanceByDevice();// 0x14a87f8
	void RequireDeviceInfo();// 0x14a87dc
	void RequestPlayerNewbieInfo();// 0x14a87c8
	bool RequestChangeWearInBattle(int newIndex);// 0x14a8748
	bool RequestChangeWear(int newIndex);// 0x14a86c8
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x14a8600
	void ReqLeaveVehicle();// 0x14a85ec
	void ReqEnterSnowBoard();// 0x14a85d8
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x14a8560
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x14a8404
	void ReportAntiCheatInfo();// 0x14a83f0
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x14a8378
	void RemoveAllDoors();// 0x14a8364
	void ReleaseFire();// 0x1bf56d0
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x14a82ec
	void RefreshTopMostUIPanel(byte Type);// 0x1bf56d0
	void RefreshShootDetailInfo();// 0x14a82d8
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x1bf56d0
	void RecoverStatusAfterReconnecting();// 0x14a82bc
	void RecordPathPoint();// 0x14a82a8
	void ReceiveClientRestart();// 0x1bf56d0
	void ReceiveBackpackComponent();// 0x14a828c
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x14a813c
	void PrintMovementLog(int PrintLog);// 0x14a80c4
	void PrintDownCollision();// 0x14a80b0
	void PrintAllPickupWarpper();// 0x14a809c
	void PressGrenade(bool isThrow);// 0x1bf56d0
	void PressFire(int FingerIndex);// 0x1bf56d0
	void PlayVehicleCameraShake();// 0x14a8088
	void PlayMatinee(int Index);// 0x14a8010
	void PlayInteractionEmote(int EmoteId);// 0x14a7f98
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x14a7edc
	void PlayerKillingDelegate__DelegateSignature();// 0x1bf56d0
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x1bf56d0
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x1bf56d0
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x1bf56d0
	void PlayBattleSound(FString BankName, FString SoundName);// 0x14a7d9c
	void OpenParachute();// 0x14a7d88
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x1bf56d0
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x1bf56d0
	void OnWallFeedBack(bool _WallFeedBack);// 0x14a7d08
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x14a7c4c
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x14a7bd4
	void OnViewTargetChangeVehicleSeat();// 0x14a7bc0
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x14a7b48
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x1bf56d0
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x1bf56d0
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x1bf56d0
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x1bf56d0
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x14a7968
	void OnTeammatesAllDie();// 0x14a7954
	void OnTeammateLogin(int InTeamID);// 0x14a78dc
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x1bf56d0
	void OnTeammateConveyStatusChangedDelegate__DelegateSignature(STExtraPlayerState* STPlayerState, enum TeammateConveyStatus);// 0x1bf56d0
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x1bf56d0
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x1bf56d0
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x1bf56d0
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x1bf56d0
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x1bf56d0
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x1bf56d0
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x1bf56d0
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x1bf56d0
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x1bf56d0
	void OnStopFireDelegate__DelegateSignature();// 0x1bf56d0
	void OnStartFireDelegate__DelegateSignature();// 0x1bf56d0
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x1bf56d0
	void OnSpectatorChange__DelegateSignature();// 0x1bf56d0
	void OnSpectatorCameraChange(bool bDie);// 0x1bf56d0
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime);// 0x1bf56d0
	void OnShowAutoSprintButton__DelegateSignature(bool visible, Vector2D showPos, bool IsInside);// 0x1bf56d0
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x1bf56d0
	void OnServerFinishPickupRevivalFlag();// 0x14a78c0
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x1bf56d0
	void OnRepTeammateChange__DelegateSignature();// 0x1bf56d0
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x1bf56d0
	void OnRepPlayerState__DelegateSignature();// 0x1bf56d0
	void OnRepNotify_SetBattleOwner();// 0x14a78ac
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x12dedb4
	void OnRep_WeatherFog();// 0x14a7898
	void OnRep_WeaponSystemReconnectReplicateData();// 0x14a7884
	void OnRep_WeaponAvatarDataList();// 0x14a7868
	void OnRep_UsedSimulation();// 0x14a784c
	void OnRep_SwitchWeather();// 0x14a7838
	void OnRep_STExtraBaseCharacter();// 0x14a7824
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x14a7810
	void OnRep_SpawnAndBackpackWeaponReplicatedDataArray();// 0x14a77fc
	void OnRep_ShowWeaponHitDetailInfo();// 0x14a77e8
	void OnRep_ServerStateType();// 0x14a77d4
	void OnRep_RefreshTotalPlayers();// 0x14a77c0
	void OnRep_RefreshAirDropBox();// 0x14a77ac
	void OnRep_Plane();// 0x14a7798
	void OnRep_ObservedItemList();// 0x14a7784
	void OnRep_InitialEquipmentAvatar();// 0x14a7768
	void OnRep_ImprisonmentTeammateSucess();// 0x14a7754
	void OnRep_ForbitPickEffect();// 0x12dedb4
	void OnRep_ForbitPick();// 0x12dedb4
	void OnRep_FiringPlayerList();// 0x14a7740
	void OnRep_EnableDeathPlaybackDelay();// 0x14a772c
	void OnRep_DestControlRotation();// 0x12dedb4
	void OnRep_DeadTombBox();// 0x14a7718
	void OnRep_CanOpenParachute();// 0x14a7704
	void OnRep_CanJump();// 0x14a76f0
	void OnRep_CanImprisonmentTeammate();// 0x12dedb4
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x14a76dc
	void OnRep_BackpackComponent();// 0x14a76c8
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x1bf56d0
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x1bf56d0
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x1bf56d0
	void OnReleaseFire();// 0x14a76b4
	void OnReconnected__DelegateSignature();// 0x1bf56d0
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x1bf56d0
	void OnPressVampireClothSlotBtn();// 0x14a76a0
	void OnPressTurnplateQuickMsgBtn();// 0x14a768c
	void OnPressTriggerEntireMapBtn();// 0x14a7678
	void OnPressShowTagVehileSeatListBtn();// 0x14a7664
	void OnPressRolewearChangeBtn(int Index);// 0x14a75ec
	void OnPressItemSKillBtn();// 0x14a75d8
	void OnPressFire();// 0x14a75c4
	void OnPressBackpackBtn();// 0x14a75b0
	void OnPlayerUseRecoverItem();// 0x14a759c
	void OnPlayerStateChanged();// 0x14a7588
	void OnPlayerReConnected(int LostPlayerKey);// 0x14a74d4
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x1bf56d0
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x1bf56d0
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x1bf56d0
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x1bf56d0
	void OnPlayerLostConnection(int LostPlayerKey);// 0x14a7420
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x14a73a0
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x1bf56d0
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x1bf56d0
	void OnPlayerContollerTouchBegin__DelegateSignature(out const Vector2D TouchBeginPos);// 0x1bf56d0
	void OnPlayerClickDriveBtn();// 0x14a738c
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x1bf56d0
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x1bf56d0
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x14a7234
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int count, STExtraPlayerController* PC);// 0x1bf56d0
	void OnPickUpExpand();// 0x14a71cc
	void OnPickUpCollapsed(bool isCollapsed);// 0x14a714c
	void OnObserverLevelLoaded();// 0x14a7138
	void OnObservedUsingWeaponChanged();// 0x14a7124
	void OnObservedPoisonFogStageChanged();// 0x14a7110
	void OnObservedItemsChanged();// 0x14a70fc
	void OnObservedBulletNumChanged();// 0x14a70e8
	void OnNightStateChangedDelegate__DelegateSignature();// 0x1bf56d0
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x1bf56d0
	void OnLostConnection__DelegateSignature();// 0x1bf56d0
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x1bf56d0
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x1bf56d0
	void OnKillerNotify(Actor* Killer);// 0x14a7070
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int count);// 0x14a6f60
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x14a6e50
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x1bf56d0
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x1bf56d0
	void OnGameStartDelegate__DelegateSignature();// 0x1bf56d0
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x1bf56d0
	void OnGameModeStateChanged();// 0x1bf56d0
	void OnFingerMove__DelegateSignature(Vector Loc);// 0x1bf56d0
	void OnExitGame__DelegateSignature();// 0x1bf56d0
	void OnEquipWeaponDelegate__DelegateSignature();// 0x1bf56d0
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x1bf56d0
	void OnEquipmentAvatarChange__DelegateSignature();// 0x1bf56d0
	void OnEnterBattleResultStep();// 0x14a6e3c
	void OnDropItemDelegate__DelegateSignature(int ItemID, int count, STExtraPlayerController* PC);// 0x1bf56d0
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x1bf56d0
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x1bf56d0
	void OnDeadBoxExpand();// 0x14a6e28
	void OnDeadBoxCollapsed(bool isCollpased);// 0x14a6da8
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x1bf56d0
	void OnCoronaCookCallBack(int InShotType, out const byte[] DataArray);// 0x14a6c98
	void OnClientWillGotoSpectating();// 0x14a6c84
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CampID, Actor*[] PeerVisualFieldActorList);// 0x1bf56d0
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x1bf56d0
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x1bf56d0
	void OnCharacterRecoveryHealthEvent();// 0x14a6c70
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x1bf56d0
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x1bf56d0
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x1bf56d0
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x1bf56d0
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x1bf56d0
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x1bf56d0
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x1bf56d0
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x1bf56d0
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x1bf56d0
	void OnAutoSprintActive__DelegateSignature();// 0x1bf56d0
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x1bf56d0
	void ObserveWhoKilledMe();// 0x14a6c5c
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x14a6ba8
	void ObserveCharacter(FString InPlayerName);// 0x14a6a50
	void ObserveAirDropBox(int BoxId);// 0x14a69d8
	void OBCameraTurnSlower();// 0x14a69c4
	void OBCameraTurnFaster();// 0x14a69b0
	void OBCameraMoveSlower();// 0x14a699c
	void OBCameraMoveNear();// 0x14a6988
	void OBCameraMoveFaster();// 0x14a6974
	void OBCameraMoveFar();// 0x14a6960
	void NotifyObserverFinalDamage(float FinalDamage, int AttackerTeamID, STExtraBaseCharacter* VictimCharacter);// 0x14a6858
	void NotifyIsInResultView(bool isInResultView);// 0x14a67d8
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x1bf56d0
	void MoveUp(float Rate);// 0x14a6760
	void MoveToVehicle(int ItemID);// 0x14a66e8
	void MoveToItem(int ItemID);// 0x14a6670
	void MoveToAIByDropItem(int ItemID);// 0x14a65f8
	void MoveToAI();// 0x14a65e4
	void MoveTo(float X, float Y, float Z);// 0x14a64e4
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x14a6428
	void ModifyStreamingDistance(int Distance);// 0x14a63b0
	void MemberVoice(int member, int Status);// 0x1bf56d0
	void MarkStartFireFrame();// 0x14a639c
	void LocalProfileFootprint();// 0x14a6388
	void LocalGetGameStateReconnectInfo();// 0x14a6374
	void LoadAllLand(bool bLoadAll);// 0x14a62f4
	void LerpFPPCamera();// 0x14a62e0
	void KillSomeOne(FString InPlayerName);// 0x14a6224
	void KillAll();// 0x14a6210
	void Kill(int GivenNumber);// 0x14a6198
	void KickPlayerFromGame();// 0x14a6184
	void JumpFromPlane();// 0x14a6170
	void JoystickTriggerSprint(bool bIsSprint);// 0x1bf56d0
	bool IsViewTarget(const Actor* pActor);// 0x14a60e8
	bool IsUse3DTouch();// 0x14a60c0
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x14a6040
	bool IsShowBlood();// 0x14a6020
	bool IsSameTeam(Pawn* Other);// 0x14a5fa0
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x14a5f20
	bool IsMurderSelfDefense(FString InformMurderName);// 0x14a5e5c
	bool IsMoveable_DontConsiderFollowingState();// 0x14a5e34
	bool IsMoveable();// 0x14a5e0c
	bool IsLastBreathOrRescueingOther();// 0x14a5de4
	bool IsInRevival();// 0x14a5dbc
	bool IsInPlane();// 0x14a5d94
	bool IsInParachuteOpen();// 0x14a5d6c
	bool IsInParachuteJump();// 0x14a5d44
	bool IsInParachute();// 0x14a5d1c
	bool IsInObservingPlayback();// 0x14a5cf4
	bool IsInInitial();// 0x14a5ccc
	bool IsInFreeCameraView();// 0x14a5cb0
	bool IsInFinish();// 0x14a5c88
	bool IsInFight();// 0x14a5c60
	bool IsInDeathReplay();// 0x14a5c38
	bool IsInDead();// 0x14a5c10
	bool IsForbitPickMakeEffect();// 0x14a5be8
	bool IsForbitPick(out const FName tombName);// 0x14a5b54
	bool IsCanViewEnemy();// 0x14a5b2c
	bool IsCanSpectateTeammate();// 0x14a5b04
	bool IsCanImprisonmentTeammate();// 0x14a5adc
	bool IsAllowActorTouchMove();// 0x14a5ab4
	bool IsAGMPlayer();// 0x14a5a8c
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x14a59d0
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x14a5958
	void InputCameraMoveTest(float DeltaSeconds);// 0x14a58e0
	void InitWeatherConfigComponent();// 0x14a58cc
	void InitTaskDatas(uint32 InPlayerKey);// 0x14a5854
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0x1bf56d0
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x14a566c
	void InitTaskComponent();// 0x14a5658
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x1bf56d0
	void InitJoyStickAfterActivation();// 0x1bf56d0
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0x1bf56d0
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x14a5558
	void IniClientCoronaLab();// 0x14a5544
	void ImprisonmentTeammate(FString TeammateName, bool IsSelfDef);// 0x14a53f4
	void HandleUpdateShovelingRelease();// 0x14a53e0
	void HandleUpdateShovelingPressed();// 0x14a53cc
	void HandleUpdateShoveling();// 0x14a53b8
	void HandleTogglePlayerListInOB();// 0x14a53a4
	void HandleToggleOBTeamList(bool InShow);// 0x14a5324
	void HandleToggleMapInOB();// 0x14a5310
	void HandleToggleHitDamageDisplay();// 0x14a52fc
	void HandleSwitchToTeammatePrev();// 0x14a52e8
	void HandleSwitchToTeammateNext();// 0x14a52d4
	void HandleSwitchToTeam(int InTeamID);// 0x14a525c
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x14a51e4
	void HandleLeaveFreeViewInOB();// 0x14a51bc
	void HandleLandOnGroundEnd();// 0x14a51d0
	void HandleEnterFreeViewInOB();// 0x14a51bc
	void HandleClientHasReactivated();// 0x14a51a8
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x14a50ec
	int GotoSpectating(int TeammatePlayerid);// 0x14a5064
	void GotoFlying();// 0x14a5050
	void GMUseSynVerify(int UseSynVerifyFlag);// 0x14a4fd8
	void GMTeleport(FName Teleporter);// 0x14a4f60
	void GMSetBoolPoisonCircle();// 0x14a4f4c
	void GMSetBoolAirDrop();// 0x14a4f38
	void GMSetBoolAirAttack();// 0x14a4f24
	void GMSetBoolAI();// 0x14a4f10
	void GMResVerifySize(int VerifySize);// 0x14a4e98
	void GMOpenWeather(int OpenWeatherID);// 0x14a4e20
	void GMEnableRandom();// 0x14a4e0c
	void GMEnableAllComponent();// 0x14a4df8
	void GMDisableRandom();// 0x14a4de4
	void GMDisableAllComponent();// 0x14a4dd0
	void GMCloseWeather(int CloseWeatherID);// 0x14a4d58
	int GetWriteCircleDistance();// 0x14a4d30
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x14a4d08
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x14a4c0c
	float GetViewPortDPIScale();// 0x14a4bdc
	VehicleUserComponent* GetVehicleUserComp();// 0x14a4bb4
	bool GetUseMotionControlLog();// 0x14a4b8c
	bool GetUseMotionControlEnable();// 0x14a4b64
	int GetUnlockWearCount();// 0x14a4b3c
	float GetTouchForce(byte FingerIndex);// 0x14a4abc
	Actor* GetThePlane();// 0x14a4a9c
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x14a4a1c
	SpringArmComponent* GetTargetedSpringArm();// 0x14a49f4
	int GetStatTriangles();// 0x1302320
	FString GetStatMemory();// 0x1483058
	int GetStatDrawCalls();// 0x1302320
	int[] GetSpecialAreaList();// 0x14a4934
	int GetSpecialAreaID();// 0x14a490c
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x14a4874
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x14a4718
	int GetRevivalCountDownTime();// 0x14a46f0
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x1bf56d0
	QuickSignComponent* GetQuickSignComponent();// 0x14a46c8
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x14a46a0
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x14a448c
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x14a4464
	Transform GetPaintDecalTargetTransform();// 0x14a43dc
	ObservingReplay* GetObservingPlayback();// 0x14a43b4
	Vector GetNewestAirDropBoxPos();// 0x14a436c
	PlayerInfoInOB[] GetNearPlayerList();// 0x14a425c
	FString GetMurderUIDStr();// 0x14a4160
	FString GetMurderName();// 0x14a40a0
	bool GetMurderIsAI();// 0x14a4068
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x14a3e2c
	byte GetMaxTouchForceFinger();// 0x14a3dec
	Vector2D GetJoyStickVisualSize();// 0x14a3dac
	Vector2D GetJoyStickCenter();// 0x14a3d6c
	bool GetIsRespawn();// 0x14a3d4c
	bool GetIsMurderSameTeam();// 0x14a3d14
	bool GetIsFreeCamera();// 0x14a3cf4
	enum GetInfectionPawnSubType();// 0x144d378
	enum GetInfectionPawnMainType();// 0x13dd620
	void GetGameStateReconnectInfoOnServer();// 0x14a3c98
	void GetGameScreenSize();// 0x12dedb4
	int GetFriendDistance();// 0x1302320
	Vector GetFocalLocation();// 0x14a3c48
	WeaponHitDetailInfo GetDetailHitInfo();// 0x14a3b14
	STExtraPlayerState* GetCurPlayerState();// 0x14a3aec
	int GetCurPlayerId();// 0x14a3ac4
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x14a3a9c
	Vector GetCurPawnLocation();// 0x14a3a54
	Pawn* GetCurPawn();// 0x14a3a2c
	float GetCurFPS();// 0x1302320
	Rotator GetControlLookRotation();// 0x14a39dc
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x14a38f0
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x14a3798
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x14a3718
	ChatComponent* GetChatComponent();// 0x14a36f0
	BackpackComponent* GetBackpackComponent();// 0x14a36c8
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x14a3564
	void GameModeGotoNextState();// 0x14a3550
	void GameModeGotoFightingState();// 0x14a353c
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x14a3480
	void ForceServerSetControlRotationOnVehicle();// 0x14a346c
	void ForceReleaseCurTouchMoveFinger();// 0x14a3458
	void FlushItem(int onlyStatic);// 0x14a33e0
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x14a3370
	void FireOrGrenade();// 0x14a335c
	void FindAIDropItem(int ItemID);// 0x14a32e4
	void Fight();// 0x14a32d0
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x14a312c
	void ExitNightState();// 0x14a3118
	void ExitFreeCamera(bool IsForceReset);// 0x14a3098
	void ExecDSCommand(const FString DSCommand);// 0x14a2fd4
	void EnterNightState();// 0x14a2fc0
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x14a2eb8
	void EndForceTouchFire(Vector Loc);// 0x14a2e48
	void EnablePlayerInHouse(bool bIsIn);// 0x14a2dc8
	void EnableMyLandscapeDraw();// 0x12dedb4
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x1bf56d0
	void DynamicCreateComponents();// 0x14a2db4
	void DropItem(int ID);// 0x14a2d3c
	void DropAllItem();// 0x14a2d28
	void DoUITouchMove(Vector Loc);// 0x1bf56d0
	void DoubleClickCancel(const byte FingerIndex);// 0x14a2cb0
	void DoTouchMove(float Yaw, float Pitch);// 0x1bf56d0
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x14a2bfc
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x14a2b48
	void DoAutoManageActiveCameraTarget();// 0x14a2b34
	void DisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x14a2928
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x14a2670
	void DisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x14a23b8
	void DisplayGameTipWithMsgID(int ID);// 0x14a2340
	void DisplayGameTipForLowFPSWarning(int ID, FString Param1, FString Param2);// 0x14a2088
	void DisplayBattleGeneralTip(int ID, FString Param1, FString Param2);// 0x14a1dd0
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x138c394
	void DispatchPlayerReconnectedEvent();// 0x14a1dbc
	void DispatchPlayerLostEvent();// 0x14a1da8
	void DispatchPlayerExitEvent();// 0x14a1d94
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x14a1d1c
	void DisableMyLandscapeDraw();// 0x12dedb4
	void DisableAirDrop();// 0x14a1d08
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x1bf56d0
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x1bf56d0
	void DelayGotoSpectating();// 0x14a1cf4
	void DelayForceExitFreeCamera();// 0x14a1ce0
	void DelayedFocusPlayerPawn();// 0x14a1ccc
	void DebugWorldPlayerAvatarInfo();// 0x14a1cb8
	void DebugSetUIVisibility(bool bUIVisibility);// 0x1bf56d0
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x14a1c38
	void DebugEnableDrawSearchLine(int bEnabled);// 0x138c394
	void DebugEnableBulletImpact(int bEnabled);// 0x138c394
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x14a1aa8
	void DealGetAllNearShotWeapon(float disRate);// 0x14a1a30
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x14a1974
	void DealGetAllNearMoveCharacter(float checkDis);// 0x14a18fc
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x14a1838
	void CreateVehicleOverlapDamage();// 0x14a1824
	void CreateGodzilla(float X, float Y, float Z);// 0x14a1724
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x14a1568
	void CollectAllPlayerWeaponPosInfo();// 0x12dedb4
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x14a1450
	void ClientStopShoveling();// 0x14a13f4
	void ClientStartOnlineGame();// 0x14a13d8
	void ClientShowInfectAreaWarning();// 0x14a137c
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x14a1254
	void ClientSetPoisonSmogStage(int SmogStage);// 0x14a11a0
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x14a1098
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x14a0f9c
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x14a0ecc
	void ClientQuitViewEnemy();// 0x14a0eb0
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x14a0db0
	void ClientOnHurt();// 0x14a0d94
	void ClientOnDamageToOther(float _DamageToOther);// 0x14a0d14
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x14a0c00
	void ClientInterruptGame();// 0x14a0ba4
	void ClientInitIngameUIAfterRespawn();// 0x14a0b48
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x14a0a8c
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x14a09c4
	void ClientGotoSpectating();// 0x14a09a8
	void ClientGiveUpRevivalTemmates();// 0x14a0994
	void ClientGameStarted();// 0x14a0978
	void ClientFriendBattleEnd();// 0x1493fcc
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x14a08f0
	void ClientEnterViewBox(int BoxId);// 0x14a0870
	void ClientEndOnlineGame();// 0x14a0854
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x14a0640
	void ClientDisplayGameTipWithMsgID(int ID);// 0x14a058c
	void ClientCheckStartShovelingFail();// 0x14a0530
	void ClientChangeStatePC(enum TargetStateType);// 0x14a04b0
	void ClearBossBornPoint();// 0x14a049c
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x14a03fc
	bool CientRevivalTemmates();// 0x14a03d4
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x14a0308
	void CheckConsumeGlideItem();// 0x14a02f4
	void ChangeSpectatorStateToFreeView();// 0x14a02e0
	bool ChangeRolewearIndex(int newIndex);// 0x14a0260
	void ChangeFinishTime(int RestTime);// 0x14a01e8
	void CanSeeAllUI(bool bUIVisibility);// 0x133a074
	bool CaluIsReleasePosInAimBtnRange(Vector Loc, Vector2D AimBtnPos, Vector2D AimBtnSize);// 0x14a00e0
	void CallZombieFlowAirDrop(int ZombieID);// 0x14a0068
	void CallZombieAirDrop(int ZombieID);// 0x149fff0
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID);// 0x149fe54
	void CallShowTouchInterface(bool InShow);// 0x149fdcc
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x149f7fc
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x149f69c
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x149f624
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x149f5ac
	void C2S_RequestSkillPrompt();// 0x149f550
	void C2S_RequestBeingRescuedRemainingTime();// 0x149f4f4
	void BroadcastFatalDamageToClient(FString CauserName, FString VictimName, byte DamageType, int AdditionalParam, bool IsHeadShot, byte ResultHealthStatus, byte Relationship, byte PreviousHealthStatus, FString RealKillerName, byte realKillerNewKillNum, FString CauserNation, FString VictimNation, uint32 causerKey, uint32 victimKey, int causerAnchorPlatformResID, int causerAnchorPlatformColorID, int victimAnchorPlatformResID, int victimAnchorPlatformColorID, int realKillerAnchorPlatformResID, int realKillerAnchorPlatformColorID, int CauserWeaponAvatarID, byte CauserType, byte VictimType);// 0x149ecd0
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x149ea10
	bool BPGetIsAndroidSimulator();// 0x149e9e8
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x1bf56d0
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x149e970
	void BindVoiceCheckFunction();// 0x149e95c
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x149e8a0
	void BackToGameDataRefresh();// 0x149e88c
	bool AutoSelectViewTarget();// 0x149e864
	void AutoSelectTeammateToView();// 0x149e850
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x149e744
	void AddItemAttachList(int BaseItemID);// 0x149e6cc
	void AddItem(int ID, int count);// 0x149e610
	void AddBossBornPoint(float BornX, float BornY);// 0x149e554
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x149e40c
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x149e348
	void ActiveCurCamera(bool bActive);// 0x149e2c8
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x149e248

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x580 , Size: 8]
	FString PlayerName;//[Offset: 0x588 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x594 , Size: 4]
	int TeamID;//[Offset: 0x5ac , Size: 4]
	Vector CharacterLocation;//[Offset: 0x5b0 , Size: 12]
	int RoomMode;//[Offset: 0x5bc , Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x5c0 , Size: 20]
	int planeAvatarId;//[Offset: 0x5d4 , Size: 4]
	int PlayerStartID;//[Offset: 0x5d8 , Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc , Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x5e0 , Size: 48]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628 , Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629 , Size: 1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x62c , Size: 36]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x650 , Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x65c , Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x668 , Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c , Size: 1]
	FString Nation;//[Offset: 0x670 , Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c , Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x67d , Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x680 , Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x68c , Size: 12]
	int RolewearIndex;//[Offset: 0x698 , Size: 4]
	int[] equip_plating_list;//[Offset: 0x69c , Size: 12]
	int VehicleSkinInReady;//[Offset: 0x6a8 , Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac , Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x6b0 , Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x6bc , Size: 24]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x6d4 , Size: 12]
	int[] InitialCharSkillList;//[Offset: 0x6e0 , Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x6ec , Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x6f8 , Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x704 , Size: 4]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x708 , Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x714 , Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x750 , Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x75c , Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x798 , Size: 60]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x7d4 , Size: 12]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x7e0 , Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0x7ec , Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x7f8 , Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0x804 , Size: 4]
	int AnchorPlatResID;//[Offset: 0x808 , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x80c , Size: 4]
	int64 LastGameResultTime;//[Offset: 0x820 , Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828 , Size: 1]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829 , Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82a , Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82b , Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c , Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0x830 , Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834 , Size: 1]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x835 , Size: 1]
	FString[] FriendObservers;//[Offset: 0x838 , Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844 , Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850 , Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0x854 , Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860 , Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0x870 , Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0x87c , Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0x888 , Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0x894 , Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0x8a0 , Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0x8ac , Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0x8b8 , Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x8c4 , Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0x8d0 , Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x8f8 , Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904 , Size: 1]
	float NotifyTimeOut;//[Offset: 0x908 , Size: 4]
	FString NeedLoadLevelName;//[Offset: 0x90c , Size: 12]
	int AntiDataCD;//[Offset: 0x928 , Size: 4]
	bool UseingWeaponScheme();// 0x144d378
	void TestRespawn();// 0x12dedb4
	void TestLogout();// 0x12dedb4
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x1850754
	void SetUsedSimulationCVar(bool Value);// 0x18506d4
	void SetPanels(out const UAEUserWidget*[] panels);// 0x1850600
	void ServerTestLogout();// 0x18505a4
	void ServerSetVoiceId(int VoiceID);// 0x18504f0
	void ServerKickSelf();// 0x1850494
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x18503e0
	void ServerExitGame();// 0x1850384
	void ServerAcknowledgeReconnection(uint32 Token);// 0x18502d0
	void Respawn();// 0x18502b4
	void ResetUsedSimulationCVar();// 0x18502a0
	void ReleaseInGameUI();// 0x1850284
	void PrintStatistics();// 0x12dedb4
	void PlayerStartIDReceived();// 0x1850270
	void OnRep_WeaponAvatarDataList();// 0x14a7868
	void OnRep_WatchPlayerKey();// 0x1850254
	void OnRep_UsedSimulation();// 0x14a784c
	void OnRep_PlayerOBInfoList();// 0x1850240
	void OnRep_LastGameResultTime();// 0x1850224
	void OnRep_IsSpectatingEnemy();// 0x1850208
	void OnRep_IsSpectating();// 0x18501ec
	void OnRep_IsObserver();// 0x18501d0
	void OnRep_InitialEquipmentAvatar();// 0x14a7768
	void OnRep_FriendObservers();// 0x18501b4
	void OnRep_bRoomOwner();// 0x1850198
	void NotifyEnterBattle();// 0x1850184
	void LuaDoString(FString LuaString);// 0x18500c0
	void KickSelf();// 0x12dedb4
	bool IsSpectator();// 0x1850098
	bool IsRoomMode();// 0x1850074
	bool IsPureSpectator();// 0x185004c
	bool IsObserver();// 0x1850024
	bool IsInSpectatingEnemy();// 0x184fffc
	bool IsInSpectating();// 0x184ffd4
	bool IsFriendOrEnemySpectator();// 0x184ffac
	bool IsFriendObserver();// 0x184ff84
	bool IsDemoRecSpectator();// 0x184ff5c
	bool IsDemoPlaySpectator();// 0x184ff34
	bool IsDemoPlayGlobalObserver();// 0x184ff0c
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x184fe60
	void InitWeaponAvatarItems();// 0x184fe44
	void InitVehicleAvatarList();// 0x184fe28
	void InitVehicleAdvanceAvatarList();// 0x184fe0c
	void InitIngameUI();// 0x184fdf0
	int GotoSpectating(int PlayerID);// 0x14a5064
	int GetWeaponAvatarItemId(int ID);// 0x184fd70
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskID);// 0x184fce0
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x184fcb8
	uint32 GetCurrentOBPlayerKey();// 0x184fc88
	int GetCurrentOBPlayerInfoIndex();// 0x184fc60
	void ForceNetReady();// 0x184fc4c
	void ExitGame();// 0x184fc38
	void ExhaustCPU();// 0x184fc24
	void ExecDSCommand(const FString DSCommand);// 0x14a2fd4
	void ExcuteIntRecord(FString Key, int count);// 0x184fa88
	void ExcuteIntCounterRecord(FString Key, int count);// 0x184f8ec
	void EnableInGameUI();// 0x184f8d8
	void DumpUAENetActors();// 0x184f8c4
	void DumpRegions();// 0x184f8b0
	void DumpNetActors();// 0x12dedb4
	void DumpCharacters();// 0x184f89c
	void DumpAllUI();// 0x12dedb4
	void DumpAllObjects();// 0x12dedb4
	void DumpAllActors();// 0x12dedb4
	void DoCrash();// 0x12dedb4
	void DisableInGameUI();// 0x184f888
	void ClientShowTeammateEscapeNotice();// 0x184f86c
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x184f724
	void ClientInitPlayerOBInfoButton();// 0x184f708
	void ClientBroadcastRespawnComplete();// 0x184f6ec
	void ClientBroadcastReconnectionSuccessful();// 0x184f6d0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x184f650
	void CheckPlayerOBInfoButtonInit();// 0x184f634
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x184f5ac
	void CastUIMsg(FString strMsg, FString module);// 0x184f464
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x184f31c
	void CallLuaGlobalFunction(FString FunctionName);// 0x184f258

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x8e4 , Size: 12]
	delegate OnPlayerPawnHPChange;//[Offset: 0x8f0 , Size: 12]
	delegate OnDeath;//[Offset: 0x8fc , Size: 12]
	delegate OnBulletChange;//[Offset: 0x908 , Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0x914 , Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x920 , Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x92c , Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0x938 , Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x944 , Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x950 , Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x95c , Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x968 , Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x974 , Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0x9a8 , Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0x9b4 , Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x9c0 , Size: 12]
	delegate OnDeathDelegate;//[Offset: 0x9cc , Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x9d8 , Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0x9e4 , Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xa0c , Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xa18 , Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xa64 , Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xa70 , Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xa7c , Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xa88 , Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xa94 , Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xaa0 , Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xaac , Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xab8 , Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xac4 , Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xad0 , Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xadc , Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xae0 , Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xae4 , Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xae8 , Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xaec , Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xaf0 , Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf4 , Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaf4 , Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaf4 , Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xaf8 , Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc , Size: 1]
	float Money;//[Offset: 0xb00 , Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04 , Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb05 , Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb05 , Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb06 , Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb07 , Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xb08 , Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0c , Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0d , Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0e , Size: 1]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0f , Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10 , Size: 1]
	float FallingTime;//[Offset: 0xb14 , Size: 4]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18 , Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19 , Size: 1]
	Actor* MyConstActor;//[Offset: 0xb1c , Size: 4]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20 , Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xb28 , Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xb30 , Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xb34 , Size: 4]
	FName HeadSocketName;//[Offset: 0xb38 , Size: 8]
	FName LFootSocketName;//[Offset: 0xb40 , Size: 8]
	FName RFootSocketName;//[Offset: 0xb48 , Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xb50 , Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xb54 , Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xb58 , Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xb5c , Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xb60 , Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xb64 , Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xb68 , Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c , Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xb70 , Size: 12]
	byte PoseState;//[Offset: 0xb7c , Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xb80 , Size: 4]
	Actor* ThePlane;//[Offset: 0xb84 , Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xb88 , Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xb8c , Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98 , Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99 , Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8 , Size: 1]
	float RadialDamageScale;//[Offset: 0xbb0 , Size: 4]
	byte LastPoseState;//[Offset: 0xbb4 , Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb5 , Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0xbb8 , Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0 , Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1 , Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc2 , Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0xbc4 , Size: 4]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0xbc8 , Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0xbcc , Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0xbd8 , Size: 12]
	Actor*[] InventoryData;//[Offset: 0xbe4 , Size: 12]
	AkComponent* SoundComp;//[Offset: 0xc3c , Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0xc40 , Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc44 , Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0xc48 , Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0xc4c , Size: 4]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0xc50 , Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0xc8c , Size: 4]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90 , Size: 1]
	Actor* WaterObj;//[Offset: 0xc94 , Size: 4]
	float HearRadius;//[Offset: 0xc98 , Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c , Size: 1]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9d , Size: 1]
	byte ClientHitPartJudgment;//[Offset: 0xc9e , Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xc9f , Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xca0 , Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xca4 , Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xca8 , Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcac , Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0xcb0 , Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4 , Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xcb8 , Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0 , Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0xcc4 , Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0xcc8 , Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0xcd0 , Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0xcd8 , Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0xce0 , Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0xce8 , Size: 8]
	Vector NewStandHitBodyBoxScale;//[Offset: 0xcf0 , Size: 12]
	Vector NewProneHitBodyBoxScale;//[Offset: 0xcfc , Size: 12]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xd08 , Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0xd44 , Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0xd50 , Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0xd5c , Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0xd60 , Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0xd6c , Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0xd70 , Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0xd74 , Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0xd7c , Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0xd88 , Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0xd8c , Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0xd90 , Size: 4]
	float ScopeLagScale;//[Offset: 0xd98 , Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0xd9c , Size: 4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0xda0 , Size: 4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0xda4 , Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0xda8 , Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0xdac , Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0xdb0 , Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0xdb4 , Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0xdc0 , Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc , Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0xdd0 , Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0xdd4 , Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0xdd8 , Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0xddc , Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0xde0 , Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0xde4 , Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0xde8 , Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdec , Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0xdf0 , Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xe00 , Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0xe0c , Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0xe18 , Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24 , Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe25 , Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe26 , Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0xe28 , Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0xe2c , Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0xe38 , Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0xe44 , Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0xe50 , Size: 4]
	float PickUpRadius;//[Offset: 0xe54 , Size: 4]
	SimViewData SimulateViewData;//[Offset: 0xe58 , Size: 4]
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxResult;//[Offset: 0xe5c , Size: 12]
	AnchorPlatData AnchorPlat;//[Offset: 0xe68 , Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0xe78 , Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0xea0 , Size: 8]
	float MaxDispalyFootprintDistance;//[Offset: 0xeb4 , Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0xeb8 , Size: 12]
	KilledTipsBlock BlockData;//[Offset: 0xec4 , Size: 40]
	class AnimInstance* MainCharAnimClass;//[Offset: 0xeec , Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0xef0 , Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8 , Size: 1]
	int CurrentEmoteIndex;//[Offset: 0xefc , Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0xf04 , Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0xf10 , Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0xf38 , Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0xf3c , Size: 4]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0xf44 , Size: 60]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80 , Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf81 , Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0xf84 , Size: 4]
	Vector CurInputVector;//[Offset: 0xf88 , Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0xf94 , Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0xfa4 , Size: 4]
	float voiceCheckCD;//[Offset: 0xfa8 , Size: 4]
	float voiceCheckShowCD;//[Offset: 0xfac , Size: 4]
	float VoiceCheckDis;//[Offset: 0xfb0 , Size: 4]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0xfb4 , Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0xfd0 , Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x100c , Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x101c , Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1020 , Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x1024 , Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1028 , Size: 4]
	int HandFolderRatio;//[Offset: 0x102c , Size: 4]
	float SwimUpRate;//[Offset: 0x1030 , Size: 4]
	bool IsSwimUpWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1034 , Size: 1]
	float UpWaterHeight;//[Offset: 0x1038 , Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x103c , Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040 , Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1041 , Size: 1]
	Vector_NetQuantize MoveInputState;//[Offset: 0x107c , Size: 12]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0 , Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x10e0 , Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x10e8 , Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1100 , Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1130 , Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1178 , Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x117c , Size: 4]
	float DelayHideDuration;//[Offset: 0x1180 , Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1184 , Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188 , Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x118c , Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0x1190 , Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c , Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x11a0 , Size: 132]
	AnimParamList CurAnimParamList;//[Offset: 0x1224 , Size: 276]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1338 , Size: 112]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x13a8 , Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x13d8 , Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x13f8 , Size: 32]
	byte ThrowGrenadeMode;//[Offset: 0x1418 , Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428 , Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1429 , Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x142c , Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434 , Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1438 , Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x143c , Size: 4]
	float HighWalkSpeed;//[Offset: 0x1454 , Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1458 , Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x145c , Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1460 , Size: 4]
	float MaxProneSpeed;//[Offset: 0x1464 , Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1468 , Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x146c , Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1470 , Size: 4]
	float HealthPredict;//[Offset: 0x1474 , Size: 4]
	float BreathAmount;//[Offset: 0x1478 , Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c , Size: 1]
	int PoisonSmogStage;//[Offset: 0x1480 , Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1484 , Size: 4]
	float AntidoteExeTime;//[Offset: 0x1488 , Size: 4]
	float AntidoteMaxTime;//[Offset: 0x148c , Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1490 , Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1494 , Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1498 , Size: 12]
	byte HealthStatus;//[Offset: 0x14a4 , Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x14a8 , Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e4 , Size: 1]
	float SpeedScale;//[Offset: 0x14e8 , Size: 4]
	float SkillSpeedScale;//[Offset: 0x14ec , Size: 4]
	float EnergySpeedScale;//[Offset: 0x14f0 , Size: 4]
	float DefaultSpeedValue;//[Offset: 0x14f4 , Size: 4]
	float SpeedValue;//[Offset: 0x14f8 , Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x14fc , Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x1500 , Size: 44]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152c , Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1530 , Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1534 , Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1538 , Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x153c , Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1544 , Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1548 , Size: 4]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x154c , Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1550 , Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1554 , Size: 4]
	float StandHalfHeight;//[Offset: 0x1558 , Size: 4]
	float CrouchHalfHeight;//[Offset: 0x155c , Size: 4]
	float ProneHalfHeight;//[Offset: 0x1560 , Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1564 , Size: 4]
	float StandRadius;//[Offset: 0x1568 , Size: 4]
	float DyingRadius;//[Offset: 0x156c , Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1570 , Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x157c , Size: 4]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158c , Size: 1]
	float LastVehicleDamageCD;//[Offset: 0x1594 , Size: 4]
	int VehicleSeatIdx;//[Offset: 0x159c , Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a6 , Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x15a8 , Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c4 , Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x15c8 , Size: 4]
	<enum,int> AvatarRectifyData;//[Offset: 0x15cc , Size: 60]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x1608 , Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x1610 , Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x161c , Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x1628 , Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x1634 , Size: 12]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0x1674 , Size: 12]
	uint64 CurrentStates;//[Offset: 0x1680 , Size: 8]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1714 , Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171c , Size: 1]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171d , Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x1720 , Size: 4]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1728 , Size: 24]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1740 , Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1760 , Size: 1]
	float MoveForwardInputValue;//[Offset: 0x1764 , Size: 4]
	float MoveRightInputValue;//[Offset: 0x1768 , Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c , Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x1770 , Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1774 , Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1778 , Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x177c , Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x1784 , Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x1788 , Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x1794 , Size: 4]
	enum FollowState;//[Offset: 0x1798 , Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x179c , Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x17a8 , Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x17b4 , Size: 12]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x17c4 , Size: 4]
	float maxShowAlpha;//[Offset: 0x17cc , Size: 4]
	float MoveMaxShowDis;//[Offset: 0x17d0 , Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x17d4 , Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x17d8 , Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x1814 , Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1818 , Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x181c , Size: 4]
	int IsEnableReportRoute;//[Offset: 0x18e8 , Size: 4]
	Vector EmoteColBox;//[Offset: 0x1928 , Size: 12]
	float CompVisionOpDis;//[Offset: 0x1934 , Size: 4]
	float CompVisionOpDelay;//[Offset: 0x1938 , Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193c , Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x194c , Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1988 , Size: 1]
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1989 , Size: 1]
	float MaxRelavantDistance;//[Offset: 0x1990 , Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x1994 , Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x1998 , Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x199c , Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x19a0 , Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x19a4 , Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x19a8 , Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ac , Size: 1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x19b8 , Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0 , Size: 1]
	float EquipingScopeDelay;//[Offset: 0x19c4 , Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c9 , Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x19cc , Size: 12]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x19dc , Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x19f4 , Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x1a04 , Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a40 , Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a41 , Size: 1]
	delegate CharacterDisplayFinalDamageDelegate;//[Offset: 0x1a44 , Size: 12]
	<byte,float> DamagePosOffsetZ;//[Offset: 0x1a50 , Size: 60]
	int AloneDistance;//[Offset: 0x1a8c , Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x1a90 , Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x1a98 , Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x1ac0 , Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x1ac4 , Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x1ac8 , Size: 12]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x1ad4 , Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x1ad8 , Size: 12]
	Vector ChangeWearingColBox;//[Offset: 0x1b1c , Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x1b28 , Size: 4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x1b2c , Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b30 , Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b31 , Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x1b34 , Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x1b38 , Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x1b3c , Size: 4]
	Actor* DecalActor;//[Offset: 0x1b40 , Size: 4]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x1b44 , Size: 4]
	Actor* PuzzleTraceLineActor;//[Offset: 0x1b48 , Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4c , Size: 1]
	float OutBattleStateTime;//[Offset: 0x1b50 , Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x1b58 , Size: 12]
	delegate OnCharacterPlayEmote;//[Offset: 0x1b64 , Size: 12]
	delegate OnCharacterWin;//[Offset: 0x1b70 , Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x1b7c , Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x1b88 , Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x1b94 , Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x1b95 , Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b96 , Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x1b98 , Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x1ba4 , Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x1ba8 , Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x1be4 , Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf5 , Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x1bf8 , Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x1c04 , Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x1c08 , Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x1c0c , Size: 244]
	byte MeleeAutoAimType;//[Offset: 0x1d00 , Size: 1]
	float LastSprintTriggerTime;//[Offset: 0x1d34 , Size: 4]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3c , Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x1d40 , Size: 12]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x1d4c , Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x1d50 , Size: 4]
	delegate MarkPlayerPosDelegate;//[Offset: 0x1d54 , Size: 12]
	PlayerVaultComponent* VaultControllerComp;//[Offset: 0x1d60 , Size: 4]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x1d64 , Size: 28]
	enum CharacterMainType;//[Offset: 0x1d80 , Size: 1]
	enum CharacterSubType;//[Offset: 0x1d81 , Size: 1]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d82 , Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x1d84 , Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x1d90 , Size: 4]
	Actor* LastShootActor;//[Offset: 0x1d98 , Size: 4]
	float RTNoDamageTime;//[Offset: 0x1d9c , Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x1da0 , Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x1da4 , Size: 4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dac , Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dad , Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x1db0 , Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x1db8 , Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x1dc0 , Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x1df0 , Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x1df4 , Size: 12]
	float ParticleShowingInterval;//[Offset: 0x1e00 , Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e08 , Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e09 , Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x1e10 , Size: 40]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x1e38 , Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x1e3c , Size: 4]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x14581d4
	void VaultFailPawnCPP(const FString Content);// 0x1458110
	void VaultFailPawnBluePrint(out const FString Content);// 0x145803c
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x1457f80
	void UserCancelRescue();// 0x1457f6c
	bool UpdateShovelingState();// 0x1457f44
	void UpdateShovelingHoldStateRelease();// 0x1457f30
	void UpdateShovelingHoldStatePressed();// 0x1457f1c
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x1457e60
	void UpdateFallingTime(float Delta);// 0x1457de8
	void UpdateDeathReplayInitTrans(float DeltaTime);// 0x1457d70
	void UpdateCurrentShootWeaponTick();// 0x1457d5c
	void UpdateAllInstanceBodyTransform(int Type);// 0x1457ce4
	void UnequipWeaponFinish();// 0x12dedb4
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x1457c20
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x1457a60
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x1457990
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x1457908
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x1bf56d0
	void SyncWaterObjectServer(Actor* WaterObject);// 0x1457854
	void SyncWaterObject(Actor* WaterObject);// 0x14577d4
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x1457670
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x14575f0
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x1457524
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x14573bc
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x14572ec
	void SwitchToLastNoneMeleeWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x145721c
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x145714c
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x1456f8c
	void SwapMainWeapon();// 0x1456f78
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x1456df0
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x1456ce0
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x1456c60
	bool StopFireFilter();// 0x1456c30
	void StopFire();// 0x1456c1c
	bool StopChangeWearingAnim();// 0x1456bf4
	void StartWaitRefreshShootDetailInfo();// 0x1456be0
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x1456b60
	void StartFireSimple();// 0x1456b44
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x1456abc
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x14568d0
	bool StartChangeWearingAnim();// 0x14568a8
	void SpawnFootprint(enum FootprintType);// 0x1456830
	void SpawnAndSwithToGrenadeServerCall(byte grenadeType, float SentTime);// 0x1456734
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x14566b4
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x1456634
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x1456478
	void ShowNightVisionFrame();// 0x145645c
	void ShowDebugRole();// 0x12dedb4
	void ShowDebugRecordData();// 0x1456448
	void ShowDebugPickUpFlow();// 0x1456448
	void ShowDebugEquipOrUnequipFlow();// 0x1456448
	void ShowDebugBornLandFlow();// 0x1456434
	void ShowConfirmDialogOfMisKill();// 0x1456418
	bool ShouldUpdateHPOnUI();// 0x14563e8
	bool ShouldShowCorp();// 0x14563c0
	bool ShouldShowAnchor();// 0x1456398
	bool ShouldAutoScopeWhenPeek();// 0x1456368
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x145617c
	void SetWeaponShootType(byte shootType);// 0x1456104
	void SetViewTargetAgainForOB();// 0x14560f0
	void SetThrowGrenadeMode(byte ThrowMode);// 0x1456078
	void SetRTNoDamageTimer(float Timer);// 0x1456000
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x1455f3c
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x1455e78
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x1455df0
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x1455d28
	void SetHighWalkSpeed(float WalkSpeed);// 0x1455cb0
	void SetHealthSafety(float NewHealth, byte Reason);// 0x1455bf4
	void SetHandFoldRatio(int Ratio);// 0x1455b7c
	void SetExitingParachute(bool ExitParachute);// 0x1455afc
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x1455a7c
	void SetDelayStateSwitchTime(float DelayTime);// 0x1455a04
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x145592c
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x1455860
	void SetCheatSpeedModifier(float NewModifier);// 0x14557e0
	void SetChangeWearingPromptEnable(bool bShow);// 0x1455760
	void SetAntidoteMaxTime(float MaxTime);// 0x14556e8
	void SetAntidoteExeTime(float ExeTime);// 0x1455670
	void SetAnimParamIsRescueing(bool Val);// 0x14555f0
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x1455570
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x14554f0
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x1455434
	void SetAmbientRTPC(FString RTPC, float Value);// 0x1455298
	void ServerUpdateShovelingHoldState(bool ishold);// 0x14551d0
	void ServerTriggerJump();// 0x1455174
	void ServerSetPoisonSmogStage(int SmogStage);// 0x14550fc
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x1454fd8
	void ServerSetPeekCollision(bool HasCollision);// 0x1454f10
	void ServerSetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x1454e00
	void ServerSetMovementState(Vector Input);// 0x1454d54
	void ServerSendToLobbyServerUseItem(int ItemID, int count);// 0x1454c98
	void ServerResponseInvite(STExtraPlayerState* SomeOne, enum res, bool NotAllowInvitedLater);// 0x1454b40
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x1454984
	void ServerNightVisionUse(bool bUse);// 0x14548bc
	void ServerInviteTeammate(const FString[] Names);// 0x1454760
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x145464c
	void ServerFollowTeammate(FString Name);// 0x1454558
	void ServerEndZombieModePropSkill();// 0x12dedb4
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x14544a4
	void ServerCancelFollow();// 0x1454448
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x1454310
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x1454198
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x1454020
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x1453f30
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x1453e2c
	void Scoping(byte NewType);// 0x1453db4
	void ScopeOut(byte NewType);// 0x1453d3c
	void ScopeInterrupt(byte NewType);// 0x1453cc4
	void ScopeIn(byte NewType);// 0x1453c4c
	void SaveMeshUpdateFlag();// 0x1453c2c
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x1453b68
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x1453ab4
	void RspPlayInteractionEmote(int EmoteId);// 0x1453a00
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x1453978
	void RPC_Server_UseZombieModeSkill();// 0x145391c
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x1453868
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x145369c
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x14535e8
	void RPC_Server_SwapMainWeapon();// 0x145358c
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x14534d8
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x1453424
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x145335c
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x1453300
	void RPC_ReliableOwnerClientDie(float Damage, const DamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float CurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x145304c
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x1452f98
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x1452ee4
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x1452d18
	void RPC_Client_SwapMainWeapon();// 0x1452cbc
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x1452c08
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x1452ac4
	void RPC_Client_ShootVertifyRes(const byte VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x14528d0
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x145281c
	void RPC_Client_ResetWeaponSlot();// 0x1452800
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x145274c
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x1452698
	void RPC_Client_OnDeathStopRecordingNotify(FName SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x1452520
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x1452278
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x1452184
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x14520bc
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x1452060
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x1451f08
	void RestoreMeshUpdateFlag();// 0x1451ee8
	void ResponceInvite(STExtraPlayerState* SomeOne, enum res, bool NotAllowInvitedLater);// 0x1451de0
	void ResetValueLimitForHealthPredict();// 0x1451dcc
	void ResetCharacterEnergy();// 0x1451db8
	void ResetCamera();// 0x1451da4
	void RequestUserCancleRescue();// 0x1451d48
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x1451c38
	bool RequestPaintDecal(int DecalId);// 0x1451bb8
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x1451abc
	void ReqStartPlayEmote(int EmoteIndex);// 0x1451a08
	void ReqStartChangeWearing();// 0x14519ac
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x14518f8
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x14517b4
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x1451700
	void ReqInteruptChangeWearing();// 0x14516a4
	void ReqEmotePlayFinished(int EmoteIndex);// 0x14515f0
	void ReqChangeWearingFinished(int Index);// 0x145153c
	void ReqAcceptInteractionEmote();// 0x14514e0
	void ReportAntiCheatInfo();// 0x12dedb4
	bool ReloadWeaponFilter();// 0x14514b0
	bool ReloadCurrentWeapon();// 0x1451488
	void RegisterPlayerPickUpList();// 0x1451474
	void RefreshWeaponOwnerCollision(float CountDown);// 0x14513f4
	void RefreshPersonPerspective();// 0x14513e0
	void RefreshPawnVaultTypeServer();// 0x1451384
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x14512fc
	void RefreshMoveAttrModifier();// 0x14512e8
	void RefreshAvatar(enum slotType, bool isEquipped, int ItemID);// 0x14511dc
	void PrintAIPolicyDecisionData();// 0x12dedb4
	void PostGetPlayerAnimation();// 0x1bf56d0
	void PlaySwitchSightSound();// 0x14511c8
	void PlaySwitchFireModeSound();// 0x14511b4
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x145113c
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x1450fe4
	void PlaySelfThrowAwayWeaponSound();// 0x1450fd0
	void PlayPumpkinAvatarEffect(ParticleSystem* ParticleSystem);// 0x1450f50
	void PlayPullBoltSound();// 0x1450f3c
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x1450ccc
	void PlayMountAccessoriesSound();// 0x1450cb8
	void PlayMagOUTSound();// 0x1450ca4
	void PlayMagINSound();// 0x1450c90
	void PlayLocalShellDropFX();// 0x1450c7c
	void PlayLoadBulletSound();// 0x1450c68
	void PlayFootstepSound(byte FootStepState);// 0x1450bf0
	bool PlayerConfirmToRescue();// 0x1450bc8
	void PlayChangeMagazineSound();// 0x1450bb4
	void PlayAmbientSound();// 0x1450ba0
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount);// 0x14509c4
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount);// 0x14508c4
	void PawnVaultStopCPP();// 0x14508a8
	void PawnVaultStopBluePrint();// 0x145088c
	void PawnVaultServerStopCheckCPP();// 0x1450830
	void PawnVaultServerStopCheckBluePrint();// 0x1450814
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x145038c
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x144ffb0
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x144fc3c
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x144f8ac
	void PawnLeaveState(enum State);// 0x144f82c
	bool PawnHasState(enum PawnState);// 0x144f7a4
	bool PawnEnterState(enum State);// 0x144f71c
	bool PawnAllowState(enum State, bool withLog);// 0x144f648
	void OnWeaponEquipmentUpdate();// 0x144f62c
	void OnUnEquipWeapon();// 0x1bf56d0
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x144f52c
	void OnStopFire();// 0x1bf56d0
	void OnStateLeave(enum EnteredState);// 0x144f4b4
	void OnStateEnter(enum EnteredState);// 0x144f43c
	void OnStartFire(byte isAuto);// 0x1bf56d0
	void OnShowName(bool _IsShow, FString _Name);// 0x1bf56d0
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x144f3bc
	void OnScopeNotHandFold();// 0x144f3a8
	void OnScopeHandFold();// 0x144f394
	void OnRep_ZombieModeSkillPropLevel();// 0x144f380
	void OnRep_ZombieModeSkillPropChanged();// 0x144f36c
	void OnRep_WaterObj();// 0x144f358
	void OnRep_VehicleSeatIdx();// 0x144f344
	void OnRep_UnmannedVehicleSyncData();// 0x144f328
	void OnRep_ThrowGrenadeMode();// 0x144f314
	void OnRep_StatusChanged(byte prevStatus);// 0x144f294
	void OnRep_ShowRevivalPointIcon();// 0x144f280
	void OnRep_ResetDataOnRespawn();// 0x144f26c
	void OnRep_ReplicatedParachuteState();// 0x12dedb4
	void OnRep_ReplicatedMoveState();// 0x144f258
	void OnRep_ReplicatedIsStartParachute();// 0x144f244
	void OnRep_RemainUseSupplySpotTimes();// 0x144f230
	void OnRep_RemainUseEnhancerSpotTimes();// 0x144f21c
	void OnRep_PoseStateNotify(byte LastState);// 0x144f1a4
	void OnRep_PoisonFogStageChange();// 0x144f190
	void OnRep_PlayerKey();// 0x144f174
	void OnRep_PeekHasCollision();// 0x144f160
	void OnRep_MoneyNotify();// 0x144f14c
	void OnRep_KillTipsNotify();// 0x12dedb4
	void OnRep_IsRescueingOtherStatusChange();// 0x144f138
	void OnRep_IsInvincible();// 0x144f124
	void OnRep_IsFPPChanged();// 0x144f110
	void OnRep_IsBeingRescuedStatusChange();// 0x144f0fc
	void OnRep_HealthPredict();// 0x144f0e8
	void OnRep_Health();// 0x144f0cc
	void OnRep_HandFolderRatio();// 0x144f0b8
	void OnRep_FollowState();// 0x144f0a4
	void OnRep_EnergyChange();// 0x144f090
	void OnRep_DisabledPawnStates();// 0x144f07c
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x144f004
	void OnRep_CurrentStates(uint64 prevStates);// 0x144ef88
	void OnRep_CharacterFallingVelocityZFactor();// 0x144ef74
	void OnRep_ChangeHalloweenVampireCloth();// 0x144ef60
	void OnRep_BreathAmmountChange();// 0x144ef4c
	void OnRep_bNightVisionUseTest();// 0x144ef38
	void OnRep_bNightVisionUse();// 0x144ef24
	void OnRep_bIsCallingForRevival();// 0x144ef10
	void OnRep_AntidoteMaxTimeSync();// 0x12dedb4
	void OnRep_AntidoteExeTimeSync();// 0x12dedb4
	void OnRep_AnchorPlat();// 0x144eefc
	void OnRep_AKEventNotify();// 0x144eee8
	void OnPoseStateChange(byte LastState, byte CurState);// 0x1bf56d0
	bool OnPlayEmote(int EmoteId);// 0x144ee68
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x144eda4
	void OnNotifyHurt();// 0x1bf56d0
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x144ed2c
	void OnLeaveStateForBp(enum State);// 0x1bf56d0
	void OnInterruptCurrentEmote();// 0x144ed18
	void OnInterruptChangeWearing();// 0x144ed04
	void OnHealthChangeFromRPC(float InHealth);// 0x144ec8c
	void OnFollowStateChange();// 0x144ec78
	void OnEquipWeapon(byte Slot);// 0x1bf56d0
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x144ec00
	void OnEnterStateForBp(enum State);// 0x1bf56d0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x144eb44
	void OnEndChangeWearing(int StopReason);// 0x144eacc
	void OnDetectPaintDecalTarget(bool bStart);// 0x1bf56d0
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x144ea10
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x144e998
	bool OnChangeWearing(int Index);// 0x144e918
	void OnBPMoneyChange();// 0x1bf56d0
	void OnBPIsInvincibleChange();// 0x1bf56d0
	void OnBPHealthChange();// 0x1bf56d0
	void OnBeforeGetUp();// 0x1bf56d0
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim);// 0x144e798
	void OnAsyncLoadChangeWearingAnim();// 0x144e784
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x144e61c
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x144e544
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x144e448
	void MulticastStartPlayEmote(int EmoteIndex);// 0x144e394
	void MulticastStartChangeWearing();// 0x144e338
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x144e284
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x144e1d0
	void MulticastInteruptChangeWearingOnServer();// 0x144e174
	void MulticastInteruptChangeWearing();// 0x144e118
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x144e098
	void MeleeServer();// 0x144e03c
	void MeleeReleased();// 0x144e028
	void MeleeLocal();// 0x1bf56d0
	void MeleeBroadcastOtherClients();// 0x144dfcc
	void Melee(bool IsForCE);// 0x144df4c
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x144df38
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x144dec0
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x144dd98
	bool LocalStartPlayEmote(int EmoteIndex);// 0x144dd18
	bool LocalStartChangeWearing();// 0x144dcf0
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x144dc70
	bool LocalInteruptChangeWearing();// 0x144dc48
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x144db8c
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x144db0c
	void LeaveState(enum State);// 0x144da94
	void LeaveServerState(enum State);// 0x144d9e0
	void LeaveBattleState();// 0x144d9cc
	bool IsWeaponOwnerLocallyControlled();// 0x144d99c
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x144d854
	bool IsValidPaintDecalTarget_Simple();// 0x144d834
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x144d6fc
	bool IsUsingGrenade();// 0x144d6d4
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x144d654
	bool IsSameTeamWithLocal();// 0x144d62c
	bool IsSameTeam(Pawn* Other);// 0x144d5a4
	bool IsReplayViewTarget();// 0x144d57c
	bool IsProneMove();// 0x144d554
	bool IsPawnStateDisabled(enum State);// 0x144d4d4
	bool IsOnVehicleNotUAV();// 0x144d494
	bool IsOnVehicle();// 0x144d470
	bool IsNowUpWater();// 0x144d448
	bool IsNearDeath();// 0x144d420
	bool IsLocalViewed();// 0x144d3f0
	bool IsLocalControlorView();// 0x144d3c8
	bool IsInFlyingTeam();// 0x144d3a0
	bool IsInEditor();// 0x144d378
	bool IsHealthyAlive();// 0x144d350
	bool IsHandleInFold();// 0x144d328
	bool IsGunADS();// 0x144d2f8
	bool IsForbidDriveSnowBoard();// 0x144d2d0
	bool IsFirstPerson();// 0x144d2a8
	bool IsExitingParachute();// 0x144d280
	bool IsEnableBulletFlySound();// 0x144d250
	bool IsDetectingPaintDecalTarget();// 0x144d230
	bool IsDeathPlayViewTarget();// 0x144d208
	bool IsClient_WeaponOwner();// 0x144d1d8
	bool IsCharacterSprinting();// 0x144d1b0
	bool IsChangeWearingState();// 0x144d188
	bool IsCanDriveSnowBoard();// 0x144d160
	bool IsBattleState();// 0x144d138
	bool IsAngledSight();// 0x144d110
	bool IsAllowScopeIn();// 0x144d0e8
	bool IsAlive();// 0x144d0b8
	void InviteTeammate(FString[] Names);// 0x144cea4
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x144cde8
	void InitCharacterSkillList();// 0x144cdd4
	void InitBodyBoneMap();// 0x144cdb8
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x144ccfc
	void HidePlayerMagOnGunReload();// 0x144cce8
	void HideNightVisionFrame();// 0x144cccc
	bool HasState(enum State);// 0x144cc4c
	void HandleWeaponShootLost();// 0x144cc30
	void HandleWeaponOnShoot();// 0x144cc1c
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x144cb1c
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x144ca9c
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x144ca1c
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x144c960
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x144c8e0
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x144c824
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x144c768
	void HandleOpenPickUpBoxAction();// 0x144c754
	void HandleOnCharAnimLoadingFinished();// 0x144c740
	void HandleMoveAntiShootVerifyMiss();// 0x144c724
	void HandleConsumeItemSkillBreak();// 0x144c710
	void HandleBulletHitEvent(Actor* ImpactActor, Vector ImpactPoint);// 0x144c64c
	void HandleAutoSwitchWeaponDelay();// 0x144c638
	void GrenadeBackToWeaponServerCall();// 0x144c5dc
	void GMTestZengzuo();// 0x144c5c8
	void GMShowName();// 0x12dedb4
	Actor* GetWeaponUserConst();// 0x144c598
	float GetWeaponOwnerPawnHealth();// 0x144c568
	WeaponManagerComponent* GetWeaponManager();// 0x144c538
	Rotator GetViewRotation();// 0x144c4e8
	PlayerVaultComponent* GetVaultComponent();// 0x144c4c0
	float GetValueLimitForHealthPredict();// 0x144c498
	Vector GetUIHelmetPosition();// 0x144c448
	enum GetUAVState();// 0x144c42c
	byte GetThrowGrenadeMode();// 0x144c40c
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x144c38c
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x144c1ac
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x1bf56d0
	byte GetRole();// 0x144c17c
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x144c15c
	int GetRedClothIDByEmote(int EmoteIndex);// 0x144c0d4
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x144c044
	void GetPumpkinAvatar(int ID, ParticleSystem* ParticleSystem);// 0x144bf48
	BoxComponent* GetProneShapeComponent();// 0x144bf2c
	byte GetPlayerWeaponFireMode();// 0x13dd620
	byte GetPlayerWeaponEquipSlot();// 0x144bf04
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x144be40
	PlayerVehAnimList GetPlayerVehAnimation();// 0x144be0c
	int GetPlayerTeamIndex();// 0x144bde4
	STExtraPlayerState* GetPlayerStateSafety();// 0x144bdbc
	STExtraPlayerState* GetPlayerState();// 0x144bd8c
	FString GetPlayerPawnCollisionInfo();// 0x144bccc
	FString GetPlayerNameSafety();// 0x144bc04
	byte GetPlayerJumpType();// 0x144bbdc
	STExtraPlayerController* GetPlayerControllerSafety();// 0x144bbac
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x144bb84
	STExtraPlayerController* GetPlayerControllerInDeathReplay();// 0x144bb5c
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x144ba2c
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x144b9a4
	PlayerAnimList GetPlayerAnimation();// 0x144b8dc
	int GetNearTeamPlayerNum();// 0x144b8b4
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x144b884
	STExtraBaseCharacter* GetLatestInviter();// 0x144b85c
	STExtraPlayerState* GetLastInviterPlayerState();// 0x144b834
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x144b804
	bool GetIsPlayingEmote();// 0x144b7e4
	bool GetIsFPP();// 0x144b7bc
	bool GetIsChangeWearing();// 0x144b79c
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x144b71c
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x144b688
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x144b5bc
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x144b448
	Vector GetHeadLocation(bool bUseHeadBone);// 0x144b3b0
	int GetHandFolderRatio();// 0x144b380
	Vector GetGunOwnerHeadLocation();// 0x144b330
	FString GetGrenadeNameByGrenadeType(byte grenadeType);// 0x1bf56d0
	BaseFPPComponent* GetFPPComp();// 0x144b308
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x144b278
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x144b1e8
	float GetFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x144b074
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x1bf56d0
	FString GetEmote(int ItemDefineID);// 0x1bf56d0
	STExtraWeapon* GetCurrentWeapon();// 0x144b04c
	STExtraVehicleBase* GetCurrentVehicle();// 0x144b01c
	uint64 GetCurrentStatesInterface();// 0x144afec
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x144afc4
	STExtraWeapon* GetCurrentShieldWeapon();// 0x144af9c
	byte GetCurHitPartJugementType();// 0x144af74
	FString GetCorpName();// 0x144aeb4
	Controller* GetControllerSafety();// 0x144ae84
	float GetCharacterXYPlaneVelocity();// 0x144ae5c
	enum GetCharacterSubType();// 0x144ae34
	enum GetCharacterMainType();// 0x144ae0c
	CharacterEnergyData GetCharacterEnergy();// 0x144ac20
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x144abf0
	CapsuleComponent* GetCapsuleComponentInterface();// 0x144abc0
	Rotator GetCachedControlRotation();// 0x144ab78
	float GetBodyhurtDamage(float Damage, out const DamageEvent DamageEvent, out bool IsHeadShot, out enum OutHitPos);// 0x144a9dc
	CharacterAvatarComponent2* getAvatarComponent2();// 0x144a9b4
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x144a934
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x144a870
	SpringArmComponent* GetActiveSpringArm();// 0x144a840
	void GeneratePlayerBackpackWrappersToGround();// 0x144a824
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x144a558
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x144a314
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x144a294
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x144a1c8
	void ForcePlayerUpdateAnimation();// 0x144a1b4
	void ForceDestroyWeaponInventoryAndClearData(bool bKeepOnPlaneItems);// 0x144a134
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x144a044
	void FollowTeammate(FString Name);// 0x1449eec
	enum FindBuffRelatedPawnState(FName _buffName);// 0x1449e6c
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x1449cf4
	void ExecFollowTeammate(FString Name);// 0x1449b9c
	void EquipZoomScope(int WeaponID, int ScopeID);// 0x1449ae0
	void EquipWeaponFinish();// 0x12dedb4
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x1449a1c
	bool EnterState(enum State);// 0x144999c
	void EnterServerState(enum State);// 0x14498e8
	void EnterFire();// 0x14498cc
	void EnterBattleState();// 0x14498b8
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x1449838
	bool EmoteAnimFinishedSuccessfully();// 0x1449810
	void DoPuzzleActorTickable(bool bStart);// 0x1449790
	void DoDetectPaintDecalTarget(bool bStart);// 0x1449710
	void DisappearOnDeath();// 0x14496fc
	void DettachWeapon();// 0x12dedb4
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x1449630
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x144955c
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x1449548
	void DelayMoveEnd();// 0x1449534
	void DelayMove(float Time);// 0x14494bc
	void DelayHidden();// 0x14494a0
	void DelayCustomDepth(float Time);// 0x1449428
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x14492d8
	bool CurrentStateHas(enum State);// 0x144921c
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x1449194
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x1449114
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x1449094
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x1449014
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x1448e98
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res);// 0x1448d90
	void ClientSomeOneInviteMe(STExtraPlayerState* SomeOne);// 0x1448d10
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x1448c98
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x1448bd4
	void ClientResponseFeedback(enum res);// 0x1448b54
	void ClientPlayVehicleOverlapCameraShake();// 0x1448af8
	void ClientOnPossessBy(Controller* NewController);// 0x1448a44
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, enum HitPosition);// 0x1448828
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, enum HitPosition);// 0x14485f8
	void ClientBulletLineTrace(Vector_NetQuantize10 BornPos, Vector_NetQuantize10 EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x1448494
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x14483d8
	void ClearHPUI();// 0x14483bc
	void ClearClientJump();// 0x14483a8
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x1448320
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x1448290
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x14481cc
	bool CheckIsWearingThisCloth(int RedClothID);// 0x144814c
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x14480c4
	bool CheckBaseIsMoving();// 0x144809c
	bool CheckBaseIsMoveable();// 0x1448074
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x1447ffc
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x1447ef0
	bool ChangeWearingAnimFinishedSuccessfully();// 0x1447ec8
	void ChangeVehWeaponCameraData(bool Enable);// 0x1447e48
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x1447d40
	bool CanPaintDecal(int DecalId);// 0x1447cc0
	bool CanGetPumpkinAvatar(int ID);// 0x1447c40
	bool CanEnterWaterArea(enum[] disallowedState);// 0x1447ae0
	bool CanEnterState(enum NewState);// 0x1447a60
	bool CanChangeThrowMode();// 0x13dd620
	void CancelFollow();// 0x1447a4c
	void CalculateBornLandThrowGrenade(int ID);// 0x14479d4
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x1447910
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* meshComp, Actor* BulletActor);// 0x14477c4
	void BulletChange();// 0x1447768
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x1447504
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x1447250
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* VictimName, ClientFatalDamageRecordData Data);// 0x14470a0
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1446dd4
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1446b08
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x14467d0
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1446498
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x14461cc
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1445f00
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1445c34
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1445968
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1445688
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x14453a8
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x14450dc
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1444e10
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1444b44
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1444878
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x14445a4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x14442d0
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1443f98
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, enum HitPosition);// 0x1443c60
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x1443ae4
	void BPResetCharacter();// 0x1bf56d0
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x1bf56d0
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1bf56d0
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1bf56d0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1bf56d0
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x1443970
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x1bf56d0
	void BleStopCurSkill();// 0x144395c
	bool BleIsCastingSkill();// 0x1443934
	void AutoScopeWhenPeek();// 0x1443920
	void AttachWeapon();// 0x12dedb4
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x14438a8
	bool AllowState(enum State, bool withLog);// 0x14437dc
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x1443688
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x14434c8
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x14433c8
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x1443214

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate CharacterAnimEventDelegate;//[Offset: 0x708 , Size: 12]
	float Health;//[Offset: 0x7a0 , Size: 4]
	float HealthMax;//[Offset: 0x7a4 , Size: 4]
	int[] TypeIds;//[Offset: 0x7a8 , Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x7b4 , Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b8 , Size: 1]
	float threatenValue;//[Offset: 0x7bc , Size: 4]
	float HurtParticleOffset;//[Offset: 0x7c0 , Size: 4]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x7c4 , Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x7c8 , Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0x7d0 , Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0x7d8 , Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x7dc , Size: 4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0x7e0 , Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0x7ec , Size: 12]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0x810 , Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0x814 , Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0x818 , Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x81c , Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0x820 , Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x824 , Size: 12]
	delegate StateEnterHandler;//[Offset: 0x830 , Size: 12]
	delegate StateLeaveHandler;//[Offset: 0x83c , Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0x864 , Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0x870 , Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874 , Size: 1]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880 , Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881 , Size: 1]
	byte TeamNum;//[Offset: 0x88c , Size: 1]
	float VehicleDetailedTraceDist;//[Offset: 0x890 , Size: 4]
	float SpringArmTraceDist;//[Offset: 0x894 , Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0x898 , Size: 60]
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x1457908
	void TriggerCustomEvent_Implementation(byte EventType);// 0x1471480
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x14713ac
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x147129c
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x1471144
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x1471020
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x1470ec0
	void OnRep_UnmannedVehicleSyncData();// 0x144f328
	void OnRep_HealthMax();// 0x1470ea4
	void OnRep_Health();// 0x144f0cc
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x1bf56d0
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x1bf56d0
	bool IsPawnStateDisabledByWeapon(enum State);// 0x1470e1c
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x1470d78
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x1470cd4
	bool IsAlive();// 0x144d0b8
	bool HasBuffID(int BuffID);// 0x1470c4c
	bool HasBuff(FName BuffName);// 0x1470bc4
	STExtraVehicleBase* GetUnmannedVehicle();// 0x1470ba8
	FString GetPlayerNameSafety();// 0x144bc04
	STExtraPlayerController* GetPlayerControllerSafety();// 0x144bbac
	enum GetObserverType();// 0x1470b78
	enum[] GetDamageableGameObjectType();// 0x1470ab0
	UTSkill* GetCurSkill();// 0x1470a80
	STExtraVehicleBase* GetCurrentVehicle();// 0x144b01c
	STBuff*[] GetBuffsByID(int BuffID);// 0x1470978
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamageType);// 0x1470838
	void DelayHidden();// 0x14494a0
	void ClearBuff();// 0x147081c
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x147070c
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x14705b4
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x1470410

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x5e4 , Size: 4]
	FName PlayerType;//[Offset: 0x5f0 , Size: 8]
	FString PlayerName;//[Offset: 0x5f8 , Size: 12]
	FString Nation;//[Offset: 0x604 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x610 , Size: 4]
	FString PlayerUID;//[Offset: 0x614 , Size: 12]
	int TeamID;//[Offset: 0x620 , Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624 , Size: 1]
	int CampID;//[Offset: 0x628 , Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x62c , Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x630 , Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x63c , Size: 36]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x660 , Size: 24]
	int planeAvatarId;//[Offset: 0x678 , Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x67c , Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688 , Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689 , Size: 1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c , Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d , Size: 1]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac , Size: 1]
	void OnRep_UseWholeModel();// 0x12dedb4
	void OnRep_TeamID();// 0x1840cec
	void OnRep_PlayerUID();// 0x12dedb4
	void OnRep_PlayerKey();// 0x144f174
	void OnRep_CampID();// 0x12dedb4
	FString GetPlayerKey();// 0x1840c2c
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x1840b64
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x1840a9c
	ActorComponent*[] GetNonSimulatedComponents();// 0x18409d4
	ActorComponent*[] GetNonDedicatedComponents();// 0x184090c
	void ClientAcknowledgeReconnection(uint32 Token);// 0x184088c

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c , Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20 , Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float MinimumDuration;//[Offset: 0x28 , Size: 4]
	float MaximumDuration;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x3a8 , Size: 4]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac , Size: 1]
	enum VehicleType;//[Offset: 0x3ad , Size: 1]
	enum VehicleShapeType;//[Offset: 0x3ae , Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x3b0 , Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x3c8 , Size: 4]
	ParticleSystem* PS_Explosion;//[Offset: 0x3cc , Size: 4]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x3d0 , Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x3d4 , Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x410 , Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x44c , Size: 4]
	byte CameraDataType;//[Offset: 0x450 , Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451 , Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452 , Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x453 , Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x454 , Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x458 , Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c , Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d , Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x460 , Size: 4]
	float FuelConsumptionModifierBoost;//[Offset: 0x464 , Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468 , Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469 , Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a , Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x46c , Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470 , Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x474 , Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478 , Size: 1]
	int MainMaterialIndex;//[Offset: 0x47c , Size: 4]
	FText VehicleDisplayName;//[Offset: 0x480 , Size: 12]
	Vector AirDropVelocity;//[Offset: 0x48c , Size: 12]
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x498 , Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x4a0 , Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8 , Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9 , Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa , Size: 1]
	float BackpackCapacity;//[Offset: 0x4ac , Size: 4]
	FName BackpackName;//[Offset: 0x4b0 , Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x4b8 , Size: 12]
	int[] marr_MidIndexes;//[Offset: 0x4c4 , Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x4d0 , Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x4d4 , Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x4d8 , Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc , Size: 1]
	float StaticForceFixInterval;//[Offset: 0x4e0 , Size: 4]
	float voiceCheckCD;//[Offset: 0x4e4 , Size: 4]
	float voiceCheckShowCD;//[Offset: 0x4e8 , Size: 4]
	float VoiceCheckDis;//[Offset: 0x4ec , Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x4f0 , Size: 4]
	float voiceCheckSpeed;//[Offset: 0x4f4 , Size: 4]
	delegate OnSeatAttached;//[Offset: 0x520 , Size: 12]
	delegate OnSeatDetached;//[Offset: 0x52c , Size: 12]
	delegate OnSeatChange;//[Offset: 0x538 , Size: 12]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544 , Size: 1]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545 , Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x548 , Size: 4]
	enum VehicleHealthState;//[Offset: 0x568 , Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569 , Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a , Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56b , Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c , Size: 1]
	Vector BloodEffectScale;//[Offset: 0x570 , Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x57c , Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x580 , Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x584 , Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x588 , Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x58c , Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x590 , Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x594 , Size: 4]
	VehicleComponent*[] VehicleComps;//[Offset: 0x598 , Size: 12]
	float VehicleHitThreshold;//[Offset: 0x5bc , Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x5c0 , Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x5d0 , Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x5dc , Size: 12]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x5ec , Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x5f8 , Size: 12]
	float VehicleEnterDistance;//[Offset: 0x608 , Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x60c , Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x610 , Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d , Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x620 , Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x624 , Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d , Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x630 , Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x634 , Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x638 , Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x644 , Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x650 , Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x654 , Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660 , Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x664 , Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x668 , Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x66c , Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0 , Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x6a4 , Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x6a8 , Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x6ac , Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x6b0 , Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x6b4 , Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x6b8 , Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x6bc , Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x6c0 , Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x6c4 , Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x6c8 , Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x6cc , Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x6d0 , Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x6d4 , Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x6d8 , Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x6dc , Size: 4]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0x6e0 , Size: 12]
	float EngineSfxEndDelayTime;//[Offset: 0x6ec , Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0 , Size: 1]
	float OverrideCullingSizeWithPlayer;//[Offset: 0x6f4 , Size: 4]
	float OverrideCullingSizeWithoutPlayer;//[Offset: 0x6f8 , Size: 4]
	float RPMSfxScale;//[Offset: 0x86c , Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0x870 , Size: 4]
	float PlayMusicChance;//[Offset: 0x87c , Size: 4]
	int CurMusicIndex;//[Offset: 0x880 , Size: 4]
	enum VehicleSyncTag;//[Offset: 0x891 , Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x894 , Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0x8a0 , Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0x8a4 , Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0x8a8 , Size: 4]
	delegate OnVehicleHealthStateChanged;//[Offset: 0x8ac , Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8 , Size: 1]
	float MinRideAngleDgree;//[Offset: 0x8bc , Size: 4]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8 , Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9 , Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0x8cc , Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0x8d0 , Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0 , Size: 1]
	float StuckMinImpulse;//[Offset: 0x8f4 , Size: 4]
	float ContinuousStuckInterval;//[Offset: 0x8f8 , Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0x8fc , Size: 4]
	float StuckResovingTime;//[Offset: 0x900 , Size: 4]
	float ContinuousStuckTimer;//[Offset: 0x908 , Size: 4]
	float StuckResovingTimer;//[Offset: 0x90c , Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914 , Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960 , Size: 1]
	float RespawnWaitingTime;//[Offset: 0x964 , Size: 4]
	float RespawnTickInterval;//[Offset: 0x968 , Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c , Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4 , Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00 , Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xa04 , Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xa10 , Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xa1c , Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58 , Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78 , Size: 1]
	Vector SeekLockOffset;//[Offset: 0xa7c , Size: 12]
	FName SeekLockSocket;//[Offset: 0xa88 , Size: 8]
	float ProduceSoundInterval;//[Offset: 0xa90 , Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xa98 , Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xaa4 , Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xaa8 , Size: 12]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xabc , Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xac0 , Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xac8 , Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xaf0 , Size: 4]
	float OverlapCameraShakeInterval;//[Offset: 0xb8c , Size: 4]
	float OverlapDamageRate;//[Offset: 0xb94 , Size: 4]
	float OverlapImpulseRate;//[Offset: 0xb98 , Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xb9c , Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xba0 , Size: 4]
	float MinOverlapSpeed;//[Offset: 0xba4 , Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xba8 , Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0xbb0 , Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xbb4 , Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xbbc , Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xbcc , Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xbd4 , Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xbd8 , Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9 , Size: 1]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xbec , Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xbf0 , Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xbf4 , Size: 12]
	bool bEnterSocketChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00 , Size: 1]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xc04 , Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xc10 , Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xc14 , Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18 , Size: 1]
	int nAvatarID;//[Offset: 0xc1c , Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20 , Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28 , Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xc2c , Size: 4]
	float VehicleGoStraight;//[Offset: 0xc40 , Size: 4]
	float MaxLinearVelocity;//[Offset: 0xc44 , Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48 , Size: 1]
	int TeamID;//[Offset: 0xc4c , Size: 4]
	int CampID;//[Offset: 0xc50 , Size: 4]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xc54 , Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xc60 , Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xc78 , Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xc90 , Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xca0 , Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xcac , Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8 , Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xcc0 , Size: 8]
	float TombBoxTraceLength;//[Offset: 0xcc8 , Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xccc , Size: 4]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd0 , Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xcd4 , Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xcd8 , Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0 , Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce1 , Size: 1]
	Vector AttachedRelLoc;//[Offset: 0xce4 , Size: 12]
	Actor* AttachedActor;//[Offset: 0xcf0 , Size: 4]
	void WeakTick(float DeltaTime);// 0x14dcb98
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x14dcb20
	void StartFireSimple(byte ShootMode);// 0x14dcaa8
	void StartAirDrop();// 0x14dca94
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x14dc9e8
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x14dc8dc
	void ServerSetUsingHorn(bool bUse);// 0x14dc814
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x14dc74c
	void ServerSetBoosting(bool bEnalbed);// 0x14dc684
	void ServerSetAirControlF(float Rate);// 0x14dc5d0
	void ServerSetAirControlB(float Rate);// 0x14dc51c
	void SendVehicleInAirChangedTimeToServer();// 0x14dc4c0
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x14dc40c
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x14dc358
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x14dc33c
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x14dc22c
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x14dc0d4
	void RemoveAntiStuckBox();// 0x14dc0c0
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x14dc048
	void ProcessAvatarOutline();// 0x14dc02c
	void PrintStats();// 0x14dc010
	bool PreChangeVehicleFPPAvatar();// 0x14dbfe8
	bool PreChangeVehicleBrokenMat();// 0x14dbfc0
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x14dbefc
	void PostLoadFPPMesh();// 0x14dbee0
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x14dbe68
	void OnUpdateEffects();// 0x1bf56d0
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x14dbdac
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x14dbcf0
	void OnSetTailLightValue(float LightValue);// 0x1bf56d0
	void OnRep_VehicleSyncFlag();// 0x12dedb4
	void OnRep_VehicleHealthState();// 0x14db304
	void OnRep_TeamID();// 0x1321528
	void OnRep_SimulateViewData();// 0x14dbcdc
	void OnRep_SimulateFreeCameraViewData();// 0x14dbcc8
	void OnRep_ServerLastReplicatedServer();// 0x14dbcb4
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x14dbca0
	void OnRep_IsForbidNightVehicle();// 0x14dbc8c
	void OnRep_IsEngineStarted();// 0x14dbc78
	void OnRep_IsBoosting();// 0x14dbc64
	void OnRep_IsAirdroppingVehicle();// 0x14dbc50
	void OnRep_FrozenStatic();// 0x14dbc3c
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x14dbbc4
	void OnRep_CampID();// 0x12dedb4
	void OnRep_AttachedRelLoc();// 0x14dbbb0
	void OnRep_AttachedActor();// 0x14dbb9c
	void OnPlayerExitVehicle(bool IsDriver);// 0x1bf56d0
	void OnPlayerEnterVehicle(bool isSuccess, enum SeatType);// 0x1bf56d0
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x14dba30
	void OnEngineStop();// 0x1bf56d0
	void OnEngineStart();// 0x1bf56d0
	void OnBoostingChanged();// 0x1bf56d0
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x14db930
	void LoadFPPVehicleModel();// 0x14db91c
	bool IsUsingFPPModel();// 0x14db8f4
	bool IsUCAV();// 0x14db8cc
	bool IsUAV();// 0x14db898
	bool IsSpawnedInReady();// 0x14db87c
	bool IsNotInWater();// 0x14db84c
	bool IsMotorbike();// 0x14db824
	bool IsInMidAir();// 0x14db7f4
	bool IsInBuffSpeedState();// 0x14db7d8
	bool IsHelicopter();// 0x14db7b0
	bool IsEntirelyUnderWater();// 0x14db788
	bool IsElectronic_Failure();// 0x14db760
	bool IsArmedVehicle();// 0x14db738
	bool IsAmphibiousVehicle();// 0x14db710
	bool IsAlive();// 0x14db6e0
	bool IsAirVehicle();// 0x14db6b0
	void InitVehicle(int FuelPercent, bool bEngineOn);// 0x14db5e4
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x14db564
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x14db4a0
	bool HasSkillID(int SkillID);// 0x14db420
	bool HasBuffID(int BuffID);// 0x14db398
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x14db318
	void HandleOnVehicleAvatarDataCopied();// 0x14db304
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14db1fc
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x14db064
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14daf5c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x14dada0
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x14dad20
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x14daca0
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x14dac28
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x14dabf8
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x14dab34
	int GetVehicleSkinItemID();// 0x14dab0c
	VehicleAvatarComponent* GetVehicleAvatar();// 0x14daae4
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x14daabc
	int GetTeamId();// 0x14daa94
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x13a21d8
	Vector GetRotationInputDir();// 0x1437ffc
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x14daa64
	BattleItemHandleBase* GetItemHandle();// 0x14daa48
	Vector GetGunOwnerHeadLocation();// 0x14da9f8
	float GetForwardSpeed();// 0x14da9c8
	STExtraPlayerCharacter* GetFirstPassenger();// 0x14da9a0
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x14da984
	STExtraPlayerCharacter* GetDriver();// 0x14da95c
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x14da890
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x14da704
	int GetCampId();// 0x14da6dc
	int GetAvatarID();// 0x14da6c0
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x14da5f4
	void ExitFPPVehicle();// 0x14da5e0
	void EnterFPPVehicle();// 0x14da5cc
	void EnableWeakTick(bool Enabled);// 0x14da544
	void EnableAvatarOutline(enum OutlineType);// 0x14da4cc
	void DestroyAndRespawnSelf();// 0x14da4b8
	void DeactiveEffect(FName EffectName);// 0x14da440
	void CreateAntiStuckBox();// 0x14da42c
	void ClientPlayVehicleCameraShake();// 0x14da3d0
	void ClearInputs();// 0x14da3bc
	void ClearBuff();// 0x14da3a0
	bool CheckHaveSpecialAttachActor();// 0x14d5138
	void CheckEnableAvatarOutline();// 0x1bf56d0
	void CheckAvatarModifyEnterSocket(STExtraBaseCharacter* InCharacter);// 0x14da328
	bool ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x14da2a0
	bool CanVehicleJump();// 0x14da278
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x14da1f0
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x14da128
	void BroadcastClientVehicleExplosionEffect();// 0x14da10c
	void BPPostLoadFPPMesh();// 0x1bf56d0
	void BPPlayOverlapDamageCameraShake();// 0x1bf56d0
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x14da08c
	void AutoLoadEffect();// 0x14da078
	bool ApplyAnimation();// 0x14da050
	void AfterBeginPlay();// 0x1bf56d0
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x14d9f40
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x14d9de8
	void ActiveEffectAsync(FName EffectName);// 0x14d9d70
	void ActiveEffect(FName EffectName);// 0x14d9cf8

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0 , Size: 4]
	int TypeSpecificID;//[Offset: 0x4 , Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	uint64 InstanceID;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0 , Size: 40]
	Vector Location;//[Offset: 0x28 , Size: 12]
	Rotator Rotation;//[Offset: 0x34 , Size: 12]
	Vector Scale;//[Offset: 0x40 , Size: 12]
	FName AttachSocketName;//[Offset: 0x50 , Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	STExtraVehicleSeat[] Seats;//[Offset: 0xbc , Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0xc8 , Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0xd4 , Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0xe0 , Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0xec , Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0xf8 , Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x104 , Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x110 , Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115 , Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x120 , Size: 12]
	delegate OnSeatAttached;//[Offset: 0x12c , Size: 12]
	delegate OnSeatDetached;//[Offset: 0x138 , Size: 12]
	delegate OnSeatChanged;//[Offset: 0x144 , Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x150 , Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x15c , Size: 12]
	delegate OnDriverChange;//[Offset: 0x168 , Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x174 , Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x180 , Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x188 , Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x190 , Size: 4]
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x152c0fc
	void OnRep_VehicleWeapons();// 0x152c0e8
	void OnRep_Occupiers();// 0x152c0d4
	void OnRep_Attachments();// 0x152c0c0
	bool IsSeatIndexAvailable(int SeatIndex);// 0x152c040
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x152bfc0
	bool IsSeatAvailable(enum SeatType);// 0x152bf40
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x152bd30
	STExtraPlayerCharacter* GetFirstPassenger();// 0x152bcfc
	STExtraPlayerCharacter* GetDriver();// 0x152bcd4
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x152bbd8
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x152bb14
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int newIndex);// 0x152b9d0

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0 , Size: 1]
	FName AnimCompTagName;//[Offset: 0x8 , Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10 , Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18 , Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20 , Size: 1]
	byte HoldWeaponType;//[Offset: 0x21 , Size: 1]
	byte SeatSpecialType;//[Offset: 0x22 , Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23 , Size: 1]
	int GUIDisplayIndex;//[Offset: 0x24 , Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x28 , Size: 4]
	Rotator CharRotVsVehiRot;//[Offset: 0x2c , Size: 12]
	byte SeatSideType;//[Offset: 0x38 , Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a , Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b , Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x3c , Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x50 , Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float Radius;//[Offset: 0x5c , Size: 4]
	float HalfHeight;//[Offset: 0x60 , Size: 4]
	Transform CollisionOffset;//[Offset: 0x70 , Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0 , Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8 , Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc , Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14 , Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	float MuzzleDirTor;//[Offset: 0x20 , Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28 , Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30 , Size: 28]
	float DistTorSquared;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xae4 , Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8 , Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae9 , Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaea , Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xaf0 , Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xaf8 , Size: 28]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb14 , Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0xb18 , Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xb20 , Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xb24 , Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xb28 , Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0xb2c , Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xb30 , Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34 , Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xb38 , Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xb40 , Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48 , Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49 , Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4a , Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4b , Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4c , Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c , Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5d , Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5e , Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb61 , Size: 1]
	FName CharacterSocket;//[Offset: 0xb68 , Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70 , Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71 , Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb72 , Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb73 , Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb74 , Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75 , Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0xb78 , Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0xb80 , Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0xb88 , Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c , Size: 1]
	float FuelConsumptionRate;//[Offset: 0xb90 , Size: 4]
	float StartReloadDelayTime;//[Offset: 0xba8 , Size: 4]
	float EndReloadDelayTime;//[Offset: 0xbb8 , Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0xbbc , Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0 , Size: 1]
	Actor* OwnerActor;//[Offset: 0xbc4 , Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xbc8 , Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0xbd0 , Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0xbd4 , Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0xbd8 , Size: 4]
	void StartReloadAnim();// 0x152d034
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x152cf20
	void OnVehicleExplode();// 0x152cf04
	void OnRep_OwnerActor();// 0x152cef0
	void NetMulticastReturnBullets();// 0x152ce94
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x152cd38
	void K2_SetSpecialMeshHide(bool isHide);// 0x1bf56d0
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x1bf56d0
	void K2_OnReturnBullets();// 0x1bf56d0
	MeshComponent* K2_GetWeaponMeshComp();// 0x1bf56d0
	void HnadleScopeInAfterReload();// 0x152cd24
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x152cc68
	void HandleWeaponStartReload();// 0x152cc54
	void HandleWeaponEndReload();// 0x152cc40
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x152cbc0
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x152cb3c
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x152cb14
	STExtraVehicleBase* GetOwnerVehicle();// 0x152caec
	Rotator GetOwnerCameraRotator();// 0x152caa4
	Transform GetCharacterSocketTransform();// 0x152ca1c
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x152c9a4
	bool CheckIsAutonomousOrObTarget();// 0x152c97c
	void AfterReloadEnd();// 0x152c968

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688 , Size: 1]
	float voiceCheckCD;//[Offset: 0x68c , Size: 4]
	float voiceCheckShowCD;//[Offset: 0x690 , Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694 , Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x6b0 , Size: 60]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec , Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed , Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x6f0 , Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x6fc , Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x708 , Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x714 , Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x720 , Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x72c , Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x738 , Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x744 , Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x750 , Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x75c , Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x768 , Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x774 , Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x780 , Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x78c , Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x798 , Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x7b0 , Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x7bc , Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0x7c8 , Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0x7cc , Size: 4]
	delegate OnScopeIn;//[Offset: 0x7d0 , Size: 12]
	delegate OnScopeOut;//[Offset: 0x7dc , Size: 12]
	delegate OnScopeInContinue;//[Offset: 0x7e8 , Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0x7f4 , Size: 4]
	int CurBulletNumInClip;//[Offset: 0x7f8 , Size: 4]
	int CurMaxBulletNumInOneClip;//[Offset: 0x7fc , Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0x800 , Size: 4]
	byte ShootMode;//[Offset: 0x804 , Size: 1]
	byte CurShootType;//[Offset: 0x805 , Size: 1]
	int CurShootTotalType;//[Offset: 0x808 , Size: 4]
	float VoiceCheckDis;//[Offset: 0x80c , Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0x810 , Size: 4]
	float nowVoiceCheckDis;//[Offset: 0x814 , Size: 4]
	Vector ShootTargetLoc;//[Offset: 0x818 , Size: 12]
	byte TraceChannel;//[Offset: 0x828 , Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0x82c , Size: 12]
	float LastImpactEffectTime;//[Offset: 0x838 , Size: 4]
	int CurBurstShootIndex;//[Offset: 0x840 , Size: 4]
	Transform BoltActionTransform;//[Offset: 0x850 , Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880 , Size: 1]
	int ClientShootTimes;//[Offset: 0x884 , Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0x888 , Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x88c , Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0x890 , Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0x894 , Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0x898 , Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0x89c , Size: 4]
	Vector BulletDecalScale;//[Offset: 0x8a0 , Size: 12]
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0x8ac , Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0x8b4 , Size: 4]
	float AIShootLoudness;//[Offset: 0x8b8 , Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0x8bc , Size: 4]
	float AIShootMaxDis;//[Offset: 0x8c0 , Size: 4]
	float AISilenceShootLoudness;//[Offset: 0x8c4 , Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0x8c8 , Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0x8cc , Size: 4]
	byte CurShootWeaponState;//[Offset: 0x8d0 , Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0x8e0 , Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0x8e4 , Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0x8e8 , Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec , Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed , Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ee , Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0x8f0 , Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x8fc , Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x908 , Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x914 , Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x920 , Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x92c , Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0x938 , Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x944 , Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0x950 , Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0x95c , Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0x968 , Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0x974 , Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0x980 , Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0x98c , Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998 , Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0x9a0 , Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x9ac , Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0x9b0 , Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0x9bc , Size: 12]
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x9d0 , Size: 12]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0x9dc , Size: 12]
	bool UseNewSimulateHitInfoData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8 , Size: 1]
	bool bNeedForceSyncSimulatedClientsBulletsNumAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0 , Size: 1]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1 , Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2 , Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0 , Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0 , Size: 1]
	void UpdateComponentTick();// 0x14cab44
	bool StopFireFilter();// 0x14cab14
	void StopFire(byte ToState);// 0x14caa94
	int StartReload();// 0x14caa64
	bool StartFireFilter();// 0x14caa34
	void StartFire();// 0x14caa18
	void StartDoPreBarrel(float HandledTime);// 0x14ca998
	void StartDoBarrel();// 0x14ca97c
	void ShowDefaultScope(bool bShow);// 0x14ca8fc
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x14ca838
	void ShootIDIsNotValid();// 0x14ca81c
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable);// 0x14ca714
	void SetCurShootType(byte shootType);// 0x14ca69c
	void SetCurrentBulletNumInClipOnServer(int count);// 0x14ca624
	void SetCurrentBulletNumInClipOnClient(int count);// 0x14ca5ac
	void SetCurReloadMethod(byte method);// 0x14ca534
	void SetBaseImpactDamageEntity(float Damage);// 0x138c394
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x14ca428
	bool ScopeOut();// 0x14ca3f8
	void ScopeInContinue();// 0x14ca3e4
	bool ScopeIn();// 0x14ca3b4
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x14ca334
	void RPC_ServerSetMaxBulletNum();// 0x14ca2d8
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x14ca224
	void RPC_ClientSetCurShootType(byte shootType);// 0x14ca170
	void RPC_ClientSetCurReloadMethod(byte method);// 0x14ca0bc
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x14ca03c
	void RPC_Client_SetBulletNumInClip(int count);// 0x14c9f88
	void RotateCrossHair(Rotator rot);// 0x14c9f18
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x14c9e98
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x1bf56d0
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x1bf56d0
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x1bf56d0
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x1bf56d0
	void OnWeaponShootDelegate__DelegateSignature();// 0x1bf56d0
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x1bf56d0
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x1bf56d0
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x1bf56d0
	void OnWeaponEquipDelegate__DelegateSignature();// 0x1bf56d0
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x1bf56d0
	void OnStopFireDelegate__DelegateSignature();// 0x1bf56d0
	void OnStartFireDelegate__DelegateSignature();// 0x1bf56d0
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x1bf56d0
	void OnScopeInContinue__DelegateSignature();// 0x1bf56d0
	void OnRep_SimulateHitDataArray();// 0x14c9e84
	void OnRep_HitDataArray();// 0x14c9e70
	void OnRep_CurMaxBulletNumChange();// 0x14c9e5c
	void OnRep_CurBulletNumInClipOnSimulatedClients();// 0x14c9e48
	void OnMaxBulletChange__DelegateSignature();// 0x1bf56d0
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x1bf56d0
	void OnCurBulletChange__DelegateSignature();// 0x1bf56d0
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x1bf56d0
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x1bf56d0
	void NotifyServerNoneShootAction();// 0x14c9dec
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x14c9d74
	void NotifyClientNoneShootAction();// 0x14c9d18
	void LocalSetBulletNumInClip(int count);// 0x14c9ca0
	bool IsWeaponAttachmentFullEquiped();// 0x14c9c78
	bool IsVehicleWeapon();// 0x14c9c50
	bool IsSupportAutoAim();// 0x14c9c28
	bool IsInPreFire();// 0x14c9c00
	bool IsEnableReloadADS();// 0x14c9be4
	bool IsDriverVehicleWeapon();// 0x14c9bbc
	void HandleWeaponScopeEquiped();// 0x14c9ba8
	byte GetWeaponReloadType();// 0x14c9b80
	int GetWeaponIDFromEntity();// 0x14c9b58
	int GetWeaponID();// 0x14c9b30
	float GetWeaponBodyLength();// 0x14c9b08
	ParticleSystem* GetVisualBulletTrackFX();// 0x14c9ae0
	bool GetVisualBulletTrackEnabled();// 0x14c9ab8
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x14c9a78
	FName GetVerifyScopeSocketNameFromEntity();// 0x14c9a38
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x14c9a10
	float GetTraceDistanceFromEntity();// 0x14c99e8
	FName GetSilencerSocketNameFromEntity();// 0x14c99a8
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x14c9980
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x14c9958
	byte GetShootTypeFromEntity();// 0x14c9930
	float GetShootIntervalFromEntity();// 0x14c9908
	FName GetShellDropSocketNameFromEntity();// 0x14c98c8
	int GetScopeID(bool bIsAngledOpticalSight);// 0x14c9840
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x14c977c
	bool GetReloadWithNoCostFromEntity();// 0x14c9754
	float GetReloadTimeMagOutFromEntity();// 0x14c972c
	float GetReloadTimeFromEntity();// 0x14c9704
	FName GetReloadTIDName(byte method);// 0x14c9674
	float GetReloadTacticalTimeFromEntity();// 0x14c964c
	int GetReloadSpecificBulletNumFromEntity();// 0x14c9624
	float GetReloadDurationStartFromEntity();// 0x14c95fc
	float GetReloadDurationLoopFromEntity();// 0x14c95d4
	Transform GetRelativeMuzzleTransform();// 0x14c9544
	float GetReferenceDistance();// 0x14c951c
	float GetRangeModifier();// 0x14c94f4
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x14c9434
	float GetPreFireTimeFromEntity();// 0x14c940c
	float GetPostReloadTimeFromEntity();// 0x14c93e4
	float GetPostFireTimeFromEntity();// 0x14c93bc
	Transform GetMuzzleTransform();// 0x14c932c
	FName GetMuzzleSocketNameFromEntity();// 0x14c92e4
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x14c92bc
	float GetMaxValidHitTimeFromEntity();// 0x14c9294
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x14c926c
	int GetMaxBulletNumInOneClipFromEntity();// 0x14c9244
	int GetMaxBulletNumInBarrelFromEntity();// 0x14c921c
	bool GetIsNeedOffsetVelocityFromEntity();// 0x14c91f4
	bool GetIsEnableScopeInFromEntity();// 0x14c91cc
	float GetImpactEffectSkipDistanceFromEntity();// 0x14c91a4
	float GetIgnoreRangeAttenuatDis();// 0x14c917c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x14c90e8
	float GetGameDeviationFactor();// 0x14c90c0
	FName GetFiringSuppressorSocketNameFromEntity();// 0x14c9080
	float GetFireSensitiveYawRate();// 0x14c9058
	float GetFireSensitivePitchRate();// 0x14c9030
	<int,bool> GetEquipAttachSlotMap();// 0x14c8e60
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x14c8dd4
	byte GetCurSightType();// 0x14c8dac
	float GetCurReloadTime();// 0x14c8d84
	byte GetCurReloadMethod();// 0x14c8d5c
	float GetCrossHairInitSize();// 0x14c8d34
	float GetCrossHairBurstSpeed();// 0x14c8d0c
	float GetCrossHairBurstIncreaseSpeed();// 0x14c8ce4
	byte GetControllerRole();// 0x1375384
	bool GetClipHasInfiniteBulletsFromEntity();// 0x14c8cbc
	MeshComponent* GetChildMeshComp(FName compTag);// 0x14c8c3c
	bool GetCanRecordHitDetailFromEntity();// 0x14c8c14
	float GetBurstShootIntervalFromEntity();// 0x14c8bec
	float GetBurstShootCDFromEntity();// 0x14c8bc4
	int GetBurstShootBulletsNumFromEntity();// 0x14c8b9c
	ItemDefineID GetBulletTypeFromEntity();// 0x14c8b50
	float GetBulletRangeEntity();// 0x14c8b28
	float GetBulletNumSingleShotFromEntity();// 0x14c8b00
	float GetBulletFireSpeedFromEntity();// 0x14c8ad8
	float GetBaseImpactDamageEntity();// 0x14c8ab0
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x14c8998
	bool GetAutoReloadFromEntity();// 0x14c8970
	bool GetADSManualStop();// 0x14c8948
	float GetAccessoriesVRecoilFactor();// 0x14c8920
	float GetAccessoriesRecoveryFactor();// 0x14c88f8
	float GetAccessoriesHRecoilFactor();// 0x14c88d0
	float GetAccessoriesDeviationFactor();// 0x14c88a8
	void ForceSyncSimulatedClientsBulletsNumAfterReload(int InCurBulletNum);// 0x14c87f4
	void ForceSyncAllClientsBulletsNumOnServer();// 0x14c87e0
	void FixBulletNumWithValideData();// 0x14c87cc
	void EnableInfiniteBullets(bool bEnable);// 0x14c874c
	void ClearWeaponAttrModifier();// 0x14c8738
	void CheckReloadAttr();// 0x14c8724
	bool CheckNeedClientSetMaxBulletNum();// 0x14c86fc
	void BP_OnActiveLocalShellDropFX();// 0x1bf56d0
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x14c8678

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x2d0 , Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x2d4 , Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8 , Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9 , Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da , Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db , Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x2dc , Size: 16]
	Transform FPPWeaponOffset;//[Offset: 0x2f0 , Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x320 , Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x350 , Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x380 , Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x3b0 , Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x3e0 , Size: 48]
	int CrossHairType;//[Offset: 0x410 , Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x414 , Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x418 , Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x420 , Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x428 , Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x42c , Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x438 , Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x444 , Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x450 , Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x45c , Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x468 , Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x46c , Size: 1]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x470 , Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x47c , Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x488 , Size: 12]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x494 , Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x4a0 , Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x4a8 , Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0 , Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1 , Size: 1]
	float MaxReconnectTime;//[Offset: 0x4b4 , Size: 4]
	float StartReconnectTime;//[Offset: 0x4b8 , Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x4c0 , Size: 96]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x528 , Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534 , Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x538 , Size: 80]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x58c , Size: 4]
	byte CurWeaponState;//[Offset: 0x590 , Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x594 , Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x598 , Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x5a0 , Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x5e8 , Size: 4]
	MeshSynData[] synData;//[Offset: 0x5ec , Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8 , Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x5fc , Size: 4]
	float WaitMeshInitTime;//[Offset: 0x600 , Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604 , Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605 , Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x608 , Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c , Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x620 , Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624 , Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x628 , Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634 , Size: 1]
	byte WeaponUIType;//[Offset: 0x635 , Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x640 , Size: 48]
	Rotator RotForSimulate;//[Offset: 0x670 , Size: 12]
	int FuncFlag;//[Offset: 0x67c , Size: 4]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x1bf56d0
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x1bf56d0
	void UpdateWeaponAvatar(float DeltaTime);// 0x1bf56d0
	void SpecialResetForWeaponCrosshair();// 0x1bf56d0
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x14e216c
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x14e20b8
	void PlayLocalShellDropFX();// 0x1bf56d0
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x1bf56d0
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x1bf56d0
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x1bf56d0
	void OnRep_WeaponReconnectReplicateData();// 0x14e20a4
	void OnRep_WeaponAttachSocketName();// 0x14e2090
	void OnRep_SimulatedOwnerPawn();// 0x14e207c
	void OnRep_OwnerClientCreateWeaponData();// 0x14e2068
	void OnRep_AvatarMeshChanged();// 0x14e2054
	void OnRep_AttachmentReplication();// 0x131144c
	void OnReleaseTrigger();// 0x13376b4
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x1bf56d0
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x1bf56d0
	void OnPushTrigger();// 0x14e2038
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x1bf56d0
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x1bf56d0
	void NewInitWeapon();// 0x14e2024
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x14e1fa4
	bool IsLocalOrSpectorPlayer();// 0x14e1f7c
	void InitWeapon();// 0x14e1f68
	bool HasComponentSlot(byte Slot);// 0x14e1ee8
	void HandleReconnectNew(Actor* WeaponOwner);// 0x14e1e70
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x14e1e48
	byte GetWeaponStateType();// 0x14e1e20
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x14e1df8
	enum GetWeaponOwnerObserverType();// 0x14e1dd0
	FString GetWeaponName();// 0x14e1d10
	MeshComponent* GetWeaponMeshComponent();// 0x14e1ce0
	WeaponEntity* GetWeaponEntityComponent();// 0x14e1cb8
	FName GetWeaponAttachSocket();// 0x14e1c70
	WeaponSpecificHandler* GetSpecificHandler();// 0x14e1c48
	FString GetOwnerPlayerName();// 0x14e1b88
	PlayerController* GetOwnerPlayerController();// 0x14e1b58
	Pawn* GetOwnerPawn();// 0x14e1b30
	FString GetOwnerName();// 0x14e1a70
	Controller* GetOwnerController();// 0x12d4e88
	Actor* GetOwnerActor();// 0x14e1a40
	ItemDefineID GetItemDefineID();// 0x14e19f4
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x14e19cc
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x14e18f8
	LinearColor GetColorByTeamID(int TeamID);// 0x1bf56d0
	ItemHandleBase* GetBackpackItemHandle();// 0x14e18d0
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x1bf56d0
	void DelayHandleAvatarMeshChanged();// 0x14e18bc
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x14e1844
	void ChangeSequenceState(byte StateType);// 0x14e17c4
	void CallForceHideWeaponWidgetDel();// 0x14e17b0

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0 , Size: 4]
	int[] SkillIDList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAsyncLoadMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc , Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x3d0 , Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x3dc , Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x3e8 , Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x3f4 , Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x400 , Size: 12]
	BackpackWeaponHandle* AsyncCacheWeaponHandle;//[Offset: 0x40c , Size: 4]
	delegate OnWeaponPartsEquipped;//[Offset: 0x410 , Size: 12]
	BattleItemHandleBase* handleRecord;//[Offset: 0x41c , Size: 4]
	BattleItemHandleBase* MasterWeaponHandle;//[Offset: 0x420 , Size: 4]
	SoftObjectPath[] AsyncLoadMeshAssetRef;//[Offset: 0x424 , Size: 12]
	int AsyncLoadMeshAsyncLoadID;//[Offset: 0x430 , Size: 4]
	TimerHandle AsyncLoadMeshTimerHandle;//[Offset: 0x438 , Size: 8]
	<MiniItem,WeaponAttachmentConfig> attachmentRef;//[Offset: 0x440 , Size: 60]
	MeshSynData[] defaultSynData;//[Offset: 0x488 , Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x494 , Size: 60]
	<int,ParticleEffectGroup> ParticleComponents;//[Offset: 0x4d0 , Size: 60]
	bool ShouldDisplayByQuality(int SlotID);// 0x153f294
	void ResetAttachmentParent();// 0x153f280
	void RemoveParticleEffect(int SlotID);// 0x153f208
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* Handle);// 0x153f188
	bool PutOnMasterComponentByItemHandle(BackpackWeaponHandle* weaponHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bAutonomous);// 0x153f028
	bool PutOnEquipmentByResID(int resID);// 0x12f27bc
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bAutonomous);// 0x12f265c
	bool PutOffEquimentByResID(int resID);// 0x12f25d4
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData SyncData);// 0x153ef4c
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool isEquipped);// 0x1bf56d0
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x1bf56d0
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x1bf56d0
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x1bf56d0
	void OnScopeUnequipDelegate__DelegateSignature();// 0x1bf56d0
	void OnScopeEquipDelegate__DelegateSignature();// 0x1bf56d0
	void OnMeshLoadedFunc();// 0x153ef38
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* itemHandles, bool isReplaced, bool bAutonomous);// 0x153ece4
	void OnItemHandleLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x153ec18
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandleList);// 0x153eac0
	void OnDefaultItemLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x153e9f4
	void OnAttachItemLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x153e928
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x12f22fc
	void OnAsyncInitDefaultAvatar_Default();// 0x153e914
	void OnAsyncInitDefaultAvatar(bool bAutonomous);// 0x153e894
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x153e794
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad, bool bAutonomous);// 0x12f1fcc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x12f1ea0
	void LoadDefaultAttachmentsAsync();// 0x153e780
	bool IsTeammate();// 0x12f1e70
	bool IsAutonomousAvatar();// 0x153e750
	void InitMasterComponent(int AGender);// 0x139fd10
	void InitialAvatarParam(int AGender);// 0x153e6d0
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x12f1c1c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x12f1b9c
	void InitDefaultAttachment(BackpackWeaponHandle* weaponHandle, bool bAutonomous);// 0x153e60c
	int GetWeaponParentID(int Slot, out const ItemDefineID InItemDefineID);// 0x153e530
	Controller* GetWeaponController();// 0x153e508
	StaticMesh* GetStaticMesh(out const WeaponMeshCfg meshPack, bool bAutonomous);// 0x153e2fc
	FName GetSocketName(int SlotID, int subSlotID);// 0x153e228
	SkeletalMesh* GetSkeletalMesh(out const WeaponMeshCfg meshPack, bool bAutonomous);// 0x153e01c
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef, out WeaponMeshCfg OutMeshCfg, bool bAutonomous);// 0x153dd28
	bool GetMeshPack(BattleItemHandleBase* Handle, out WeaponMeshCfg meshCfg);// 0x153db24
	MeshComponent* GetMeshComponentBySlotID(int SlotID);// 0x153daa4
	MaterialInstance* GetMaterial(out WeaponMeshCfg meshPack);// 0x153d8e4
	BackpackWeaponAttachHandle* GetEquippedHandle(int SlotID);// 0x153d864
	MeshComponent* GetAttachmentSocketTransform(int SlotID);// 0x153d7e4
	AnimationAsset* GetAttachmentAnim(enum SlotID, int AnimIdx);// 0x153d720
	void ClearMeshBySlot(int Slot, bool putDefault, bool bAutonomous);// 0x12f13e0
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x12f1360
	bool CheckSlotIsEquipped(int SlotID);// 0x153d6a0
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x153d610
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12f11b8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12f1010
	void ApplyParticleEffect(int Slot, BackpackWeaponAttachHandle* Handle, bool bAutonomous);// 0x153d508
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp, bool bAutonomous);// 0x12f0da8
	void ApplyAttachment(BackpackWeaponAttachHandle* attachHandle, bool bAutonomous);// 0x153d444
	void ApplyAnimation(int Slot, BackpackWeaponHandle* Handle);// 0x153d388

--------------------------------
Class: AvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,MeshData> avatarMeshList;//[Offset: 0xfc , Size: 60]
	<int,MeshComponent*> meshComponentList;//[Offset: 0x138 , Size: 60]
	<int,FName> slotToSocket;//[Offset: 0x174 , Size: 60]
	<enum,MeshData> DefaultAvataConfig;//[Offset: 0x1b0 , Size: 60]
	<int,BattleItemHandleBase*> loadedItemList;//[Offset: 0x1ec , Size: 60]
	int gender;//[Offset: 0x228 , Size: 4]
	bool isNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c , Size: 1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d , Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e , Size: 1]
	<SoftObjectPath,BattleItemHandleBase*> PendingLoadRes;//[Offset: 0x230 , Size: 60]
	delegate OnAvatarEquipped;//[Offset: 0x26c , Size: 12]
	BattleItemHandleBase*[] handleTickDispatcher;//[Offset: 0x278 , Size: 12]
	<int,bool> OutlineEnableList;//[Offset: 0x2a8 , Size: 60]
	int MinLod;//[Offset: 0x2e4 , Size: 4]
	bool bResSyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	<int,AsyncLoadMeshResReq> PendingLoadMeshRequestList;//[Offset: 0x38c , Size: 60]
	int AsyncLoadReqID;//[Offset: 0x3c8 , Size: 4]
	void ShowAttachmentByIndex(int Index, bool bIsVisible);// 0x12f2a08
	bool SetMeshVisibleByID(int Slot, bool visible, bool ignoreDefault);// 0x12f28ec
	void ResetComponentMaster();// 0x12f28d8
	void ResetAllAvataSlot();// 0x12f28c4
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x12f2844
	bool PutOnEquipmentByResID(int resID);// 0x12f27bc
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bAutonomous);// 0x12f265c
	bool PutOffEquimentByResID(int resID);// 0x12f25d4
	bool PutOffEquiment(int Slot);// 0x12f2554
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x12f22fc
	void OnAsyncLoadMesh(SoftObjectPath AssetRef, bool isReplaced, bool bAutonomous);// 0x12f20f0
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad, bool bAutonomous);// 0x12f1fcc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x12f1ea0
	bool IsTeammate();// 0x12f1e70
	bool IsSlotHasEquipped(int Slot);// 0x12f1df0
	bool IsNeedReplaced(BackpackAvatarHandle* doReplaceHandle);// 0x12f1d68
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x12f1c9c
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x12f1c1c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x12f1b9c
	StaticMesh* GetStaticMesh(out const MeshPackage meshPack, bool bAutonomous);// 0x12f1a9c
	ItemDefineID GetSlotDefinedID(int SlotID);// 0x12f1a08
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage meshPack, bool bAutonomous);// 0x12f1908
	MaterialInstance* GetMaterial(out const MeshPackage meshPack);// 0x12f1854
	bool GetEquimentMeshBySlot(int Slot, out MeshData meshPack);// 0x12f175c
	static enum GetAvatarSlotTypeFromInt(int SlotTypeValue);// 0x12f16e4
	enum GetApplyMeshType(int Slot, int subSlotID, bool bForceSkeletalWithSocketType);// 0x12f15cc
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x12f14fc
	void ClearMeshBySlot(int Slot, bool putDefault, bool bAutonomous);// 0x12f13e0
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x12f1360
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12f11b8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle, bool bAutonomous);// 0x12f1010
	void ApplyMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh, bool bAutonomous);// 0x12f0eb8
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp, bool bAutonomous);// 0x12f0da8
	void ApplyConfig();// 0x12f0d94

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0xe4 , Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9 , Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea , Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb , Size: 1]
	FName LightVectorName;//[Offset: 0xf0 , Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0xf8 , Size: 4]
	bool IsLobbyAvatar();// 0x12f37a4
	bool IsLobbyActor();// 0x12f3788
	bool IsForceClientMode();// 0x12f376c
	GameInstance* GetGameInstance();// 0x12f373c

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0xa8 , Size: 4]
	WeaponMeshCfg MeshPackage;//[Offset: 0xb0 , Size: 320]
	class AnimInstance* animBP;//[Offset: 0x1f0 , Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x1f8 , Size: 40]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x220 , Size: 60]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x25c , Size: 12]
	ItemDefineID ParentID;//[Offset: 0x268 , Size: 24]
	ItemDefineID[] ParentIDList;//[Offset: 0x280 , Size: 12]
	class STExtraWeapon* lobbyWeapon;//[Offset: 0x28c , Size: 4]
	enum OverrideSocket;//[Offset: 0x290 , Size: 1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x294 , Size: 12]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x2a0 , Size: 4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x2a8 , Size: 56]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x2e0 , Size: 12]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x2ec , Size: 4]
	ParticleSystem* LightEffect;//[Offset: 0x2f0 , Size: 40]
	ParticleSystem* ShootLightEffect;//[Offset: 0x318 , Size: 40]
	<byte,AkAudioEvent*> HitSoundMap;//[Offset: 0x340 , Size: 60]
	AkAudioEvent* SlashSound;//[Offset: 0x380 , Size: 40]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	void SaveWeaponAttachmentListBeforeDrop();// 0x1316b94
	void PreLocalHandleDisuse();// 0x1316b80
	PickUpWrapperActor* LocalSpawnWrapperOnGround(class Object InWrapperClass, STExtraBaseCharacter* InOwningCharacter);// 0x1316abc
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason, WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, BattleItemHandleBase* InCharacterItemHandle, BackpackComponent* InOwningBackpackComponnent, STExtraBaseCharacter* InOwningCharacter, class STExtraWeapon InWeaponClass, bool bInResetInitBulletInBullet, out STExtraWeapon* OutTargetWeaponActor, out FName bOutSocket);// 0x1316508
	FName LocalGetAvailableInstantLogicSocketName(WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, out bool bOutNeedPutDownOldWeapon, out bool bOutAutoUse);// 0x1316198
	void LocalAutoEquipAttachments();// 0x1bf56d0
	bool IsVirtualAvatarHandle();// 0x1316168
	bool IsAvatarWeapon();// 0x1316140
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x13153b0
	int GetSubSlotID();// 0x1316110
	int GetSlotID();// 0x13160e0
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x1316074
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x1315eb4
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x1315de0
	class Object GetAnimationBP();// 0x1315db0

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x88 , Size: 12]
	float UnitWeight;//[Offset: 0x94 , Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99 , Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a , Size: 1]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x12fee58
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x12fea44
	bool HandleEnable(bool bEnable);// 0x12fe61c
	bool HandleDrop(int InCount, enum Reason);// 0x12fe550
	bool HandleDisuse(enum Reason);// 0x12fe4c8
	World* GetWorldInternal();// 0x15ab6e8
	BattleItemData ExtractItemData();// 0x13038b4

--------------------------------
Class: ItemHandleBase.Object
	int count;//[Offset: 0x1c , Size: 4]
	int MaxCount;//[Offset: 0x20 , Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28 , Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68 , Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x15b14ac
	void RemoveAssociation(FName Name);// 0x15b1434
	void Init(ItemDefineID InDefineID);// 0x15b13a4
	ItemDefineID GetDefineID();// 0x15b1360
	<FName,ItemAssociation> GetAssociationMap();// 0x15b11e0
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x15b10d0
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x15b1024
	ItemAssociation GetAssociation(FName Name);// 0x15b0f84
	void AddAssociation(FName Name, ItemAssociation Association);// 0x15b0e7c

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0xc4 , Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0xd0 , Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0xdc , Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0xe8 , Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0xf4 , Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x100 , Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x10c , Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x118 , Size: 12]
	delegate ItemUpdatedDelegate;//[Offset: 0x124 , Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x130 , Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x13c , Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x154 , Size: 24]
	BattleItemData[] CachItemList;//[Offset: 0x16c , Size: 12]
	IncNetArray ItemListNetCache;//[Offset: 0x178 , Size: 24]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x194 , Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x1a0 , Size: 60]
	int CapacityThreshold;//[Offset: 0x1dc , Size: 4]
	float Capacity;//[Offset: 0x1e0 , Size: 4]
	float OccupiedCapacity;//[Offset: 0x1e4 , Size: 4]
	int virtualitemid;//[Offset: 0x1f8 , Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x200 , Size: 12]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x20c , Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x181cef0
	float UpdateCapacity();// 0x181cec0
	void UnequipItem(ItemDefineID DefineID);// 0x181ce38
	void TryMergeItemHandles(ItemDefineID DefineID);// 0x181cdb0
	int TakeItem(ItemDefineID DefineID, int count, bool bCallHandleDrop);// 0x181cc8c
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x181cba0
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x181ca70
	int ReturnItem(ItemDefineID DefineID, int count, bool bCallHandlePickup);// 0x181c94c
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x181c8b4
	void ReceiveItemList();// 0x13c0654
	void ReceiveCapacity();// 0x1344650
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x181c5c0
	void OnRep_specialCountLimit();// 0x12dedb4
	void OnRep_ItemListNet();// 0x181c5ac
	void OnRep_ItemList();// 0x181c598
	void OnRep_Capacity();// 0x181c584
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x181c4f4
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x181c464
	void NotifyItemListUpdated();// 0x1342d54
	void NotifyCapacityUpdated();// 0x1342df0
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x181c3cc
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x181c308
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int count);// 0x181c24c
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x181c198
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x181bfd4
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x181bf10
	bool HasItemBySubType(int subType);// 0x181be90
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x181be00
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x181bd3c
	World* GetWorld_BP();// 0x181bd14
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x181bc74
	SpecialPickInfo GetSpecialItemBefore(int ItemResID);// 0x181bbe4
	BattleItemData[] GetItemListByDefineID(out const ItemDefineID DefineID);// 0x181ba74
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x181ba3c
	ItemHandleBase*[] GetItemHandleList();// 0x181b9cc
	int GetItemCountByType(int InItemType);// 0x181b94c
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x181b890
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x181b7e4
	BattleItemData[] GetAllItemList();// 0x181b744
	void ForceNetUpdate();// 0x13e0834
	void EquipItem(ItemDefineID DefineID);// 0x181b6bc
	bool DropItem(ItemDefineID DefineID, int count, enum Reason);// 0x181b59c
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x181b4c0
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x181b428
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x181b390
	int ConsumeItem(ItemDefineID DefineID, int count);// 0x181b2bc
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x181b23c
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x181b1a0
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x181b104
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x181afec
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x181aed4
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x181adf4
	int CheckCapacityForItem(ItemDefineID DefineID, int count);// 0x181ad20
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x181ac90
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int count);// 0x181ab80
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x181aa70
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x181a960
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x181a884

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0 , Size: 4]
	int cur_count;//[Offset: 0x4 , Size: 4]
	int total_count;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0 , Size: 56]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	int count;//[Offset: 0x18 , Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20 , Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0 , Size: 8]
	float FloatData;//[Offset: 0x8 , Size: 4]
	FString StringData;//[Offset: 0xc , Size: 12]
	int IntData;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0 , Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8 , Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: BattleItemData.ItemData
	int count;//[Offset: 0x48 , Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50 , Size: 12]
	BattleItemFeatureData FeatureData;//[Offset: 0x5c , Size: 24]
	ItemAssociation[] Associations;//[Offset: 0x74 , Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8 , Size: 24]
	FString Name;//[Offset: 0x20 , Size: 12]
	FString Desc;//[Offset: 0x2c , Size: 12]
	FString Icon;//[Offset: 0x38 , Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0 , Size: 4]
	int MaxCount;//[Offset: 0x4 , Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa , Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb , Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	int SortingPriority;//[Offset: 0x10 , Size: 4]
	int ItemType;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0 , Size: 24]
	FName TargetAssociationName;//[Offset: 0x18 , Size: 8]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8 , Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18 , Size: 32]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0 , Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28 , Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50 , Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78 , Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0 , Size: 40]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xc8 , Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf0 , Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0xf8 , Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x120 , Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x12c , Size: 12]
	enum meshType;//[Offset: 0x138 , Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0 , Size: 4]
	FName AttachSocket;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0 , Size: 4]
	FName AttachSocket;//[Offset: 0x8 , Size: 8]
	Transform Trans;//[Offset: 0x10 , Size: 48]
	Vector2D DrawSize;//[Offset: 0x40 , Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	enum socket;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: PlayerTombBox.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x2cc , Size: 12]
	FName tombName;//[Offset: 0x2d8 , Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2e0 , Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x2e4 , Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x2e8 , Size: 24]
	int DeadTime;//[Offset: 0x300 , Size: 4]
	int BoxLifeSpan;//[Offset: 0x304 , Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x30c , Size: 12]
	Actor* AttachedActor;//[Offset: 0x318 , Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	enum BoxType;//[Offset: 0x31d , Size: 1]
	uint32 OwnerUniqueID;//[Offset: 0x320 , Size: 4]
	int TargetPlayerKey;//[Offset: 0x324 , Size: 4]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x328 , Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x330 , Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x338 , Size: 4]
	void SwitchToDeadTombBox();// 0x13323b0
	void SetVisible(bool IsVisible);// 0x13e97e4
	void RegisterToPlayerPickUpList();// 0x13e97d0
	void OnRep_VisibilityChange();// 0x13e97bc
	void OnRep_BoxLifeSpan();// 0x12dedb4
	void OnRep_AttachmentReplication();// 0x131144c
	void OnRep_AttachedActor();// 0x13e97a8
	void HideDeadTombApparence();// 0x13323cc
	int GetUniqueInstanceID();// 0x13e9780
	int GetTombboxLifespan();// 0x13e9758
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x13e972c
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x13e9610
	void GeneratePlayerBackpackWrappers();// 0x135ca14
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x13e9478
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x13e937c
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirdropboxID);// 0x13e921c

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x450 , Size: 12]
	enum BoxType;//[Offset: 0x45c , Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x13de458
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x13de384
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x1bf56d0
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x1bf56d0
	void OnRep_PickUpDataList();// 0x13de370
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0x1bf56d0
	PickUpItemData[] GetDataList();// 0x13de304
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x13de1fc

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x2e4 , Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	ItemDefineID DefineID;//[Offset: 0x2f0 , Size: 24]
	int count;//[Offset: 0x308 , Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d , Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e , Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x310 , Size: 12]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d , Size: 1]
	FName OwnerName;//[Offset: 0x320 , Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x328 , Size: 4]
	Vector AttachedRelLoc;//[Offset: 0x32c , Size: 12]
	Actor* AttachedActor;//[Offset: 0x338 , Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x33c , Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348 , Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x34c , Size: 4]
	float PickUpColdCountDown;//[Offset: 0x350 , Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x390 , Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x398 , Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x39c , Size: 4]
	FString ItemValue;//[Offset: 0x3a0 , Size: 12]
	FString ItemCategory;//[Offset: 0x3ac , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8 , Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9 , Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x3c0 , Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x3d0 , Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3d4 , Size: 4]
	int ObjectPoolSize;//[Offset: 0x3d8 , Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc , Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd , Size: 1]
	FString EffectPath;//[Offset: 0x3e0 , Size: 12]
	FString DurationTime;//[Offset: 0x3ec , Size: 12]
	int ItemID;//[Offset: 0x3f8 , Size: 4]
	Color DefaultColor;//[Offset: 0x3fc , Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x428 , Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x430 , Size: 24]
	FString ToDetailString();// 0x13e1204
	void ShowMesh(bool bShow);// 0x13e1184
	void ShowActor();// 0x13e1170
	void SetDefineID(out const ItemDefineID DID);// 0x13e10e0
	void SetCountOnServerAfterSpawn(int _Count);// 0x13e1068
	void ServerResetShowActor();// 0x13e1054
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x13e0ef8
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x13e0e44
	void OnRep_PickUpColdCountDown();// 0x13e0e30
	void OnRep_AttachmentReplication();// 0x131144c
	void OnRep_AttachedActor();// 0x13e0e1c
	void ModifyData(int _Count);// 0x13e0da4
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x13e0cdc
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x13e0bf8
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x13e08a0
	StaticMeshComponent* GetPickupMesh();// 0x13e0878
	int GetNetGUIDOffsetValue();// 0x13e0850
	PickUpItemData[] GetDataList();// 0x13de304
	void ForceNetUpdate();// 0x13e0834
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x13de1fc
	void ColdTimeCountDown();// 0x13e0820
	void ClientResetShowActor();// 0x13e080c
	bool CheckPickUpDataIsWeapon();// 0x13e07e4
	void BroadcastDataToAllClients(int Count_New);// 0x13e0730
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x13e06b0
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x13e049c

--------------------------------
Class: UAENetActor.Actor.Object
	int iRegionActor;//[Offset: 0x2cc , Size: 4]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0 , Size: 24]
	int count;//[Offset: 0x18 , Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c , Size: 12]
	int InstanceID;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x24c , Size: 4]
	bool DisableLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251 , Size: 1]
	byte SpotGroupType;//[Offset: 0x252 , Size: 1]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x254 , Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x258 , Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x264 , Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x268 , Size: 60]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x1833880
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x18337c8
	bool GenerateSpot();// 0x1833798
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x1833694
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x1833424
	int CountCacheItemValeCategory();// 0x18333fc

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x235 , Size: 1]
	int WorldCompositionID;//[Offset: 0x238 , Size: 4]
	float HalfHeight;//[Offset: 0x23c , Size: 4]
	int SpotProbability;//[Offset: 0x240 , Size: 4]
	float LineOffsetZ;//[Offset: 0x244 , Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248 , Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249 , Size: 1]
	void SetSpotValid(bool Valid);// 0x183f724
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x183f468
	bool IsSpotValid();// 0x183f438
	FString GetRandomCategory(out const SpotWeight[] SpotWeights, out bool IsRandom);// 0x183f214
	bool GenerateSpot();// 0x1833798
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x183f09c

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x168 , Size: 12]
	byte BornIslandGroupType;//[Offset: 0x174 , Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175 , Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x178 , Size: 196]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x23c , Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x278 , Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284 , Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285 , Size: 1]
	FString[] AreaIDList;//[Offset: 0x288 , Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x294 , Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x2a0 , Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x2dc , Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x2fc , Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x300 , Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x304 , Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x340 , Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x37c , Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x388 , Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395 , Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396 , Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x398 , Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x3a0 , Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x3e8 , Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x400 , Size: 12]
	FString CookedBandFilePath;//[Offset: 0x448 , Size: 12]
	void WriteItemClassStatisticsDatas_V15();// 0x12dedb4
	void WriteItemClassStatisticsDatas();// 0x1831ea4
	void WriteGroupStatisticsDatas();// 0x1831e90
	void WriteBuildingStatisticsDatas();// 0x1831e7c
	void WriteAllStatisticsDatasToLog();// 0x1831e60
	void WriteAllStatisticsDatas();// 0x139605c
	void SetCatetoryRate(<FString,float> Rates);// 0x1831cb4
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x1831bd0
	void RegisterBornIslandItem(Actor* Item);// 0x1831b50
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x1831998
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] items);// 0x183176c
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x1831654
	void RandomGroups();// 0x12d7a20
	void RandomBornIslandGroups();// 0x1831638
	void LoadItemGenerateTable();// 0x13a0648
	bool IsCatetoryEnabled();// 0x1831610
	void InitCatetorys();// 0x18315fc
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x18314d4
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, bool IsRandom);// 0x18311ec
	float GetCatetoryRate(FString Catetory);// 0x1831124
	void GenerateSpotOnTick(float DeltaTime);// 0x13aaa5c
	void DeleteValidGroups();// 0x1831110
	void DeleteBornIslandItems();// 0x18310fc
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x1830fc8

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0xc0 , Size: 4]
	FString ItemTableName;//[Offset: 0xc4 , Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0xd0 , Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0xd8 , Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x114 , Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x120 , Size: 60]
	FString CookedFilePath;//[Offset: 0x15c , Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x13b3438
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x14fedb0
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x134fe04
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x181e7c8
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x181e6fc
	void GenerateSpots();// 0x181e6e0
	void GenerateSpotOnTick(float DeltaTime);// 0x13aaa5c
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x181e49c
	void CheckTileLevelsVisible();// 0x181e488

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4 , Size: 4]
	int AllSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidSpotCount;//[Offset: 0xc , Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10 , Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c , Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88 , Size: 60]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4 , Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc , Size: 4]
	int AllSpotCount;//[Offset: 0x10 , Size: 4]
	int AllValidSpotCount;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4 , Size: 12]
	float BuildingLocationX;//[Offset: 0x10 , Size: 4]
	float BuildingLocationY;//[Offset: 0x14 , Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c , Size: 4]
	int AllSpotCount;//[Offset: 0x20 , Size: 4]
	int AllValidSpotCount;//[Offset: 0x24 , Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28 , Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4 , Size: 1]
	int AllSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidSpotCount;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString fItemPath;//[Offset: 0x4 , Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int ItemCount;//[Offset: 0x14 , Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18 , Size: 12]
	int ItemTogetherCount;//[Offset: 0x24 , Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0 , Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x235 , Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236 , Size: 1]
	int WorldCompositionID;//[Offset: 0x238 , Size: 4]
	float LastGenerateItemTime;//[Offset: 0x23c , Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x240 , Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244 , Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245 , Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246 , Size: 1]
	void SetGroupValid(bool Valid);// 0x182eb6c
	bool IsValidGroup();// 0x182eb3c
	int FindWorldCompositionID();// 0x182eb14
	void DoPickUp();// 0x182eb00

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0 , Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0 , Size: 1]
	int SpotGroupPercent;//[Offset: 0x4 , Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8 , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18 , Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0 , Size: 1]
	int SpotPercentMin;//[Offset: 0x4 , Size: 4]
	int SpotPercentMax;//[Offset: 0x8 , Size: 4]
	int SpotPercentDot;//[Offset: 0xc , Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10 , Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14 , Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18 , Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0 , Size: 12]
	int Weight;//[Offset: 0xc , Size: 4]
	bool NonRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0 , Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc , Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0 , Size: 4]
	FString ItemValue;//[Offset: 0x4 , Size: 12]
	FString ItemCategory;//[Offset: 0x10 , Size: 12]
	int ItemWeight;//[Offset: 0x1c , Size: 4]
	FString fItemPath;//[Offset: 0x20 , Size: 12]
	int ItemStackCount;//[Offset: 0x2c , Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30 , Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c , Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40 , Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x248 , Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x24c , Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x258 , Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x1832f94
	void RepeatSpots();// 0x1832f80
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x1832f08
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x1832d6c
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x1832c1c
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x1832af8

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0 , Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8 , Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0 , Size: 60]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0 , Size: 4]
	class Object* ItemClass;//[Offset: 0x4 , Size: 4]
	int ItemCount;//[Offset: 0x8 , Size: 4]
	FString MetaData;//[Offset: 0xc , Size: 12]
	FString ItemValue;//[Offset: 0x18 , Size: 12]
	FString ItemCategory;//[Offset: 0x24 , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	Actor* HostActor;//[Offset: 0x6c , Size: 4]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xc0 , Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x100 , Size: 8]
	FName RightLogicSocketName;//[Offset: 0x108 , Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x110 , Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x14c , Size: 60]
	<FName,class STExtraWeapon> UGrenadeLogicSocketToWeaponClassMap;//[Offset: 0x188 , Size: 60]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x1c4 , Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x200 , Size: 4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x208 , Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x210 , Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218 , Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x220 , Size: 8]
	FName LastUseNoneMeleeLogicSlot;//[Offset: 0x228 , Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x230 , Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238 , Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239 , Size: 1]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x23c , Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x248 , Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x254 , Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x260 , Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x26c , Size: 12]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x290 , Size: 60]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x2cc , Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x308 , Size: 12]
	ItemDefineID[] TargetCreateArray;//[Offset: 0x318 , Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x328 , Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x338 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x370 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x3a8 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x3e0 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x418 , Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x454 , Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x458 , Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x45c , Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x460 , Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x464 , Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x494 , Size: 4]
	FString MainWeaponTableName;//[Offset: 0x4a4 , Size: 12]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x1bf56d0
	void UpdateOwnerClientCreateWeapon();// 0x1543690
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x15435cc
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x15435b8
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x1bf56d0
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x1bf56d0
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x15434f4
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x154347c
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x1543468
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x1543454
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x1543440
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x154342c
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x1543418
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x15433a0
	void OnRep_CurrentWeaponReplicated();// 0x15327b0
	void OnRep_CurrentWeaponLogicSocket();// 0x154338c
	void OnRep_CurrentShieldWeaponReplicated();// 0x1543378
	void OnReconnectOnServer();// 0x133caac
	void OnReconnectOnClient();// 0x133ca90
	void LogInventoryDataInfo();// 0x1543364
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x1543254
	void LocalForceFinishSwitchWeapon();// 0x1543240
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x1bf56d0
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x154322c
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x1543218
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x1bf56d0
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x15431f0
	bool IsCreatingWeaponOnServer();// 0x15431bc
	static void InitializeTable(FString MainWeaponTableName);// 0x154306c
	FName GetShieldWeaponSlot();// 0x154302c
	STExtraWeapon* GetShieldWeapon();// 0x1543004
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x1542f84
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x1542e7c
	FName GetLogicSocketBySlot(byte Slot);// 0x1542df4
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x1542d74
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x1542cf4
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x1542c74
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x1542be4
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x1542b5c
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x1542ac4
	STExtraWeapon* GetCurrentUsingWeapon();// 0x1542a9c
	byte GetCurrentUsingPropSlot();// 0x1542a74
	FName GetCurrentUsingLogicSocketOnServer();// 0x1542a34
	FName GetCurrentUsingLogicSocket();// 0x1542a34
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x1542a0c
	int GetBagLevel();// 0x133ca4c
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x15428fc
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x15428e8
	void EnableAllBroadcast(bool bEnable);// 0x154286c
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x15427a8
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x1542730
	void DebugReconnectToClientOnServer();// 0x154271c
	void DebugDisconnetToServerOnClient();// 0x1542708
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x1bf56d0
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x1bf56d0
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x1542634

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0 , Size: 4]
	FName LogicSocket;//[Offset: 0x8 , Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	ItemDefineID ID;//[Offset: 0x18 , Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	int OperationIndex;//[Offset: 0x34 , Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x38 , Size: 4]
	FString OwnerCharacterName;//[Offset: 0x3c , Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0 , Size: 4]
	FName LogicSocket;//[Offset: 0x8 , Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	ItemDefineID ID;//[Offset: 0x18 , Size: 24]
	int OperationIndex;//[Offset: 0x30 , Size: 4]
	int BagLevel;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0 , Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4 , Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8 , Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc , Size: 12]
	enum meshType;//[Offset: 0x18 , Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c , Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28 , Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34 , Size: 12]
	ItemDefineID definedID;//[Offset: 0x40 , Size: 24]
	enum subSlot;//[Offset: 0x58 , Size: 1]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59 , Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: AsyncLoadMeshResReq
	SoftObjectPath[] MeshResList;//[Offset: 0x0 , Size: 12]
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x9b , Size: 1]
	enum subSlot;//[Offset: 0x9c , Size: 1]
	enum specialType;//[Offset: 0x9d , Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xa0 , Size: 60]
	MeshPackage meshPack;//[Offset: 0xe0 , Size: 432]
	MeshPackage replacedMeshPack;//[Offset: 0x290 , Size: 432]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x440 , Size: 12]
	enum[] hiddenFlags;//[Offset: 0x44c , Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x458 , Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x464 , Size: 12]
	enum[] ignoreFlags;//[Offset: 0x470 , Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x47c , Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x488 , Size: 4]
	int itemCapacity;//[Offset: 0x48c , Size: 4]
	int Durability;//[Offset: 0x490 , Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x49c , Size: 36]
	enum hideBoneSlot;//[Offset: 0x4c0 , Size: 1]
	FName hideBoneName;//[Offset: 0x4c8 , Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x4d0 , Size: 12]
	enum HideBoneType;//[Offset: 0x4dc , Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x4e0 , Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x51c , Size: 12]
	int PendantConfigIndex;//[Offset: 0x528 , Size: 4]
	float PendantScale;//[Offset: 0x52c , Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x530 , Size: 4]
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x12fef74
	bool HasCustomInfo();// 0x12fef4c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x12fee58
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x12fed44
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x12fea44
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x12fe900
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x12fe800
	bool HandleMeshpackPostProcess(Object* Outer);// 0x12fe778
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x12fe6ac
	bool HandleEnable(bool bEnable);// 0x12fe61c
	bool HandleDrop(int InCount, enum Reason);// 0x12fe550
	bool HandleDisuse(enum Reason);// 0x12fe4c8
	BackpackComponent* GetBackpackComponent();// 0x12fe4a0
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x12fe3dc

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8 , Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30 , Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0x58 , Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0x80 , Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xa8 , Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0xd0 , Size: 40]
	MaterialInterface* maleMat;//[Offset: 0xf8 , Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x120 , Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x148 , Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x154 , Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x160 , Size: 4]
	class AnimInstance* animBP;//[Offset: 0x164 , Size: 4]
	AvatarEffectData[] EffectDataList;//[Offset: 0x168 , Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x174 , Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x180 , Size: 40]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0 , Size: 40]
	enum targetSlot;//[Offset: 0x28 , Size: 1]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0 , Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30 , Size: 40]
	FName AttachSocket;//[Offset: 0x58 , Size: 8]
	enum ValidMethod;//[Offset: 0x60 , Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x64 , Size: 12]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10 , Size: 48]
	FName AttachSocket;//[Offset: 0x40 , Size: 8]
	FName SlotName;//[Offset: 0x48 , Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50 , Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78 , Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0 , Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8 , Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0 , Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0 , Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1 , Size: 1]
	enum operationWhenHidden;//[Offset: 0x2 , Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0 , Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc , Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0 , Size: 12]
	enum Op;//[Offset: 0xc , Size: 1]
	float ModifyValue;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0 , Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10 , Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0 , Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10 , Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40 , Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0 , Size: 4]
	int subSlotID;//[Offset: 0x4 , Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8 , Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20 , Size: 24]
	int gender;//[Offset: 0x38 , Size: 4]
	int HideState;//[Offset: 0x3c , Size: 4]
	int ReplaceState;//[Offset: 0x40 , Size: 4]
	AvatarCustom CustomInfo;//[Offset: 0x44 , Size: 20]
	enum SlotDescDiff;//[Offset: 0x58 , Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60 , Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0 , Size: 1]
	int ColorID;//[Offset: 0x4 , Size: 4]
	int PatternID;//[Offset: 0x8 , Size: 4]
	int NumID;//[Offset: 0xc , Size: 4]
	int ParticleID;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	int gender;//[Offset: 0x520 , Size: 4]
	delegate OnAvatarHeadVisible;//[Offset: 0x524 , Size: 12]
	delegate OnAvatarEquipped;//[Offset: 0x530 , Size: 12]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c , Size: 1]
	int HeadAvatarID;//[Offset: 0x550 , Size: 4]
	int PreHeadAvatarID;//[Offset: 0x554 , Size: 4]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568 , Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569 , Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x56c , Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x5a8 , Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x5b4 , Size: 60]
	int[] ignoreSlots;//[Offset: 0x5f0 , Size: 12]
	int WholeBodyModelID;//[Offset: 0x5fc , Size: 4]
	int CurrentClothID;//[Offset: 0x600 , Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x604 , Size: 12]
	int[] LastSuitItems;//[Offset: 0x610 , Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c , Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x620 , Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x65c , Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0x698 , Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0x6d4 , Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0x710 , Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0x74c , Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0x758 , Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0x794 , Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0x798 , Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x79c , Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x7a0 , Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0x7ac , Size: 12]
	int EnableEquipAvatarPendant;//[Offset: 0x7b8 , Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc , Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bd , Size: 1]
	int TypeToInt(enum InSlotType);// 0x13382b0
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x13381dc
	bool SetSkinMaterial(int SlotID, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x13380c0
	void SetNormalMaterial(out const MeshPackage meshPack, MeshComponent* meshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x1337f48
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1337e24
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x1337dac
	bool SetBodySuitsMaterial(out const MeshPackage meshPack, MeshComponent* meshComp, BackpackAvatarHandle* InAvatarHandle);// 0x1337c70
	void SetAvatarVisibility(enum slotType, bool visible, bool IsForCE);// 0x1337b5c
	void SetAvatarGender(int AGender);// 0x1337ae4
	void SetAvatarForceLOD(enum slotType, int LODLevel);// 0x1337a28
	void SetAllMeshCharMode(bool bMainChar);// 0x13379a8
	void ResetAnimDynamicsByMeshComp(MeshComponent* meshComp);// 0x1337928
	void ResetAllAnimDynamics();// 0x133790c
	void RequestSyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1337840
	void RemoveClothParticleEffect(int SlotID);// 0x13377c8
	void RemoveAttachMesh(int SlotID);// 0x1337750
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x13376d0
	void ProcessClothSuits();// 0x13376b4
	void ProcessAvatarRectify();// 0x1337698
	void PreProcessBeforeLoadMesh();// 0x1322f10
	void PostProcessAfterLoadMesh();// 0x1322f48
	void OnSyncLoadBattleHandlesDone(BattleItemHandleBase*[] AvatarHandles);// 0x1337540
	void OnRep_BodySlotStateChanged();// 0x1337524
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1337454
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1337338
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x133720c
	void OnAvatarHeadVisible__DelegateSignature(int ItemID);// 0x1bf56d0
	void OnAvatarEquippedCall(enum slotType, bool bEquipped, int ItemID);// 0x1337100
	void OnAvatarEquipped__DelegateSignature(enum slotType, bool isEquipped, int ItemID);// 0x1bf56d0
	void OnAvatarAttachEquipped__DelegateSignature(enum slotType, bool isEquipped, int ItemID);// 0x1bf56d0
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1337080
	void OnAsyncLoadBattleHandlesDone(BattleItemHandleBase*[] AvatarHandles);// 0x1336f20
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc);// 0x1336e48
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x1336d20
	bool IsTeammate();// 0x1336cf0
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1336bf4
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1336af8
	bool IsMasterMeshSlotID(int InSlotID);// 0x1336a70
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1336940
	enum IntToType(int InSlotID);// 0x13368cc
	void InitMasterComponent();// 0x13368b8
	void Initialize();// 0x133689c
	void InitialAvatarParam(int AGender);// 0x1336824
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x13367ac
	void InitDefaultAvatarByResID(int AGender, int Head, int hair);// 0x13366ac
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x13365c8
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x1336530
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x13364b8
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x1336440
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1336364
	StaticMesh* GetStaticMesh(out const MeshPackage meshPack);// 0x13362b0
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x13361a0
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage meshPack);// 0x13360ec
	MeshComponent* GetMeshCompBySlot(enum slotType);// 0x1336064
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x1335fa0
	MaterialInstance* GetMaterial(out const MeshPackage meshPack);// 0x1335eec
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x1335e6c
	int GetEquipmentSkinItemID(int InItemID);// 0x1335de4
	bool GetEquimentMeshBySlot(int Slot, out MeshData meshPack);// 0x1335cec
	int[] GetDefaultBodyItemIDList();// 0x1335c2c
	FName GetClothMaterialSkinName(enum slotType, bool bSuit);// 0x1335b58
	FName GetClothMaterialColorName(enum slotType, bool bSuit);// 0x1335a84
	MaterialInterface* GetCharSkinMaterial(enum slotType, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1bf56d0
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x133597c
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x13358b8
	bool GetAttachMeshResRef(out const AvatarAttachMeshData meshPack, out SoftObjectPath OutAssetRef);// 0x1335734
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x1bf56d0
	bool EnableEquipAvatarPendantFeature();// 0x133570c
	bool DeleteAvatarMeshData(int InSlotID);// 0x1335684
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x1bf56d0
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x1bf56d0
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x13355a0
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x1335508
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x12d5064
	bool CheckIsHiddenByOther(int InItemResID);// 0x1335488
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x13353cc
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1335310
	void ApplyMeshCompCollision(int SlotID);// 0x1335298
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x13351cc
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1335110
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x1334fc8
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1334f0c
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x1334e8c

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> slotToSocket;//[Offset: 0x288 , Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x2c4 , Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x300 , Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x33c , Size: 60]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x378 , Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x384 , Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390 , Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x394 , Size: 12]
	int AsyncLoadReqID;//[Offset: 0x438 , Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x43c , Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450 , Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x454 , Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x460 , Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x49c , Size: 4]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x141b3a4
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x13381dc
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1337e24
	void SetDefaultEquip(out AvatarSyncData Data);// 0x141b300
	void ResetSlotSyncData();// 0x141b2e4
	void RequestSyncLoadMeshes();// 0x141b2d0
	void RequestAsyncLoadMeshes();// 0x141b2bc
	void RequestAsyncLoadHandles();// 0x141b2a8
	void RemoveEquippedAvatar(int InSlotID);// 0x141b228
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x141b1a0
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x141b090
	void ReloadAllLogicAvatar(enum ReloadType);// 0x141b010
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x13376d0
	bool PutOnEquipmentByResID(int resID);// 0x141af88
	bool PutOffEquimentByResID(int resID);// 0x12f1d68
	void PreProcessBeforeLoadMesh();// 0x1322f10
	void PostProcessAfterLoadMesh();// 0x1322f48
	void OnSyncLoadMeshesDone();// 0x141af74
	void OnRep_BodySlotStateChanged();// 0x1337524
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x133720c
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemID);// 0x1bf56d0
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x1bf56d0
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1337080
	void OnAsyncLoadHandlesDone(AvatarHandleBase*[] AvatarHandles);// 0x141ae14
	void OnAllAvatarHandleLoadedDoneSync();// 0x141ae00
	void OnAllAvatarHandleLoadedDone();// 0x141adec
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc);// 0x1336e48
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x141ad20
	bool IsMasterMeshSlotID(int InSlotID);// 0x1336a70
	bool IsItemHasEquipped(int InItemID);// 0x141aca0
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x1418298
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x141abdc
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x13361a0
	enum GetMeshType(int SlotID);// 0x141ab54
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x141aad4
	MeshComponent* GetMeshCompBySlot(enum slotType);// 0x1336064
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x141aa64
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x141a954
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x141a844
	AvatarEntityFactory* GetEntityFactory();// 0x1409b00
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x141a760
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int subSlotID);// 0x141a658
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x1bf56d0
	bool DeleteAvatarMeshData(int InSlotID);// 0x1335684
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x13355a0
	AvatarEntity* CreateAvatarEntity(int SlotID, int subSlotID);// 0x141a594
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x141a3ac
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x141a2e0
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x141a1d0
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x1bf56d0

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0xfc , Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x138 , Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x174 , Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x18c , Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x198 , Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x1a4 , Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x1b0 , Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x1bc , Size: 12]
	int ItemType;//[Offset: 0x1c8 , Size: 4]
	enum CustomType;//[Offset: 0x1cc , Size: 1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd , Size: 1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4 , Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5 , Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6 , Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d7 , Size: 1]
	int SubSlotStartNum;//[Offset: 0x1d8 , Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x1dc , Size: 4]
	int[] AlawysHideResetOperation;//[Offset: 0x264 , Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x274 , Size: 12]
	void RemoveAllEquippedItem();// 0x1418dc0
	void OnRep_BodySlotStateChanged();// 0x1337524
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1337454
	void OnHandleUnequipSlot(int InSlotID);// 0x1418d48
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x1418ca4
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x1418c00
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1337338
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x1bf56d0
	void OnAvatarLogicUnequippedEvent(int InSlotID, ItemDefineID OldItemID);// 0x1418b28
	void OnAvatarLogicEquippedEvent(int InSlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x14189fc
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x1bf56d0
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x1bf56d0
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x1bf56d0
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x14188ec
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x14187dc
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x14186cc
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x14185bc
	int MakeStateInfo(out const int[] InSlotDesc);// 0x14184e8
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x141841c
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1336bf4
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x1418338
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1336940
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x1418298
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x1418200
	bool HandleUnequipSlot(int InSlotID);// 0x1418180
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x14180e8
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x1417f08
	void HandleItemResetOrderDesc();// 0x1417ef4
	void HandleItemResetOperation();// 0x1417ee0
	void HandleItemReplaceRelation();// 0x1417ecc
	void HandleItemHideRelation();// 0x1417eb8
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x1417dbc
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1417c14
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1417a6c
	bool GetViewDataItemID(int InSlotID, out ItemDefineID OutItemDefineID);// 0x1417990
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x141787c
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x14176d4
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x141752c
	bool GetSyncDataItemID(int InSlotID, out ItemDefineID OutItemDefineID);// 0x1417450
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x1417360
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x14172c8
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x1417228
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x1417194
	int GetAvatarSlotID(int InSubSlotID);// 0x1417114
	void ClientPostProcessViewDataMiddle();// 0x1402330
	void ClientPostProcessViewDataBefore();// 0x1402474
	void ClientPostProcessViewDataAfter();// 0x140234c
	void ClientBodySlotStateChanged();// 0x1417100
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x1416fb8
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x1416dd8
	bool BPClientPostProcessViewDataMiddle();// 0x1416da8
	bool BPClientPostProcessViewDataBefore();// 0x1416d78
	bool BPClientPostProcessViewDataAfter();// 0x1416d48

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24 , Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x1301390
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x13012d4

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c , Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x1300cc0
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x1300bb8
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x1300aa4
	CharacterAvatarComponent2* GetOwnerComponent();// 0x1300a7c

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0 , Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4 , Size: 12]
	float GrayScale;//[Offset: 0x10 , Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18 , Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24 , Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30 , Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48 , Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x1301bf4
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1301b38
	bool IsPatternNumMode();// 0x1301b10
	void InitPatternNumID(int InNumID);// 0x1301a9c
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x1bf56d0

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0 , Size: 1]
	Texture* PatternTexture;//[Offset: 0x8 , Size: 40]
	float IconScale;//[Offset: 0x30 , Size: 4]
	Texture* PatternTexture;//[Offset: 0x38 , Size: 40]
	float IconScale;//[Offset: 0x60 , Size: 4]
	LinearColor IconOffset;//[Offset: 0x64 , Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0 , Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0 , Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int SkipFrame;//[Offset: 0x0 , Size: 4]
	int SkipAnimCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0 , Size: 12]
	int gender;//[Offset: 0xc , Size: 4]
	int BaseID;//[Offset: 0x10 , Size: 4]
	int UpdateFlag;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemID;//[Offset: 0x0 , Size: 4]
	int AdditionalItemID;//[Offset: 0x4 , Size: 4]
	int SlotID;//[Offset: 0x8 , Size: 4]
	int subSlotID;//[Offset: 0xc , Size: 4]
	int HideState;//[Offset: 0x10 , Size: 4]
	int ReplaceState;//[Offset: 0x14 , Size: 4]
	int FakeItemID;//[Offset: 0x18 , Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c , Size: 1]
	enum OperationType;//[Offset: 0x1d , Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20 , Size: 20]

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0 , Size: 4]
	int subSlotID;//[Offset: 0x4 , Size: 4]
	int[] HideFlags;//[Offset: 0x8 , Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14 , Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20 , Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c , Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38 , Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44 , Size: 12]
	int[] ConflictConfig;//[Offset: 0x50 , Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c , Size: 12]
	int HideBoneSlotID;//[Offset: 0x68 , Size: 4]
	int HideBoneType;//[Offset: 0x6c , Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70 , Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0 , Size: 4]
	MeshComponent* meshComp;//[Offset: 0x4 , Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc , Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0 , Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc , Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0 , Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30 , Size: 40]
	FName AttachSocket;//[Offset: 0x58 , Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x60 , Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d , Size: 1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0 , Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4 , Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc , Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18 , Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30 , Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x1347438
	void AsyncLoadCustomAssetDone();// 0x1347424
	bool ApplyCustomInfo();// 0x1345f34

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c , Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20 , Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28 , Size: 8]
	void SetCustomID(int InCustomID);// 0x13470ac
	MeshComponent* GetOwnerMeshComp();// 0x1347084
	ActorComponent* GetOwnerComp();// 0x134705c
	bool ClearCustomInfo();// 0x1345f78
	bool ApplyCustomInfo();// 0x1345f34

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0 , Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8 , Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14 , Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0 , Size: 8]
	FName Tips;//[Offset: 0x8 , Size: 8]
	float Scalar;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0 , Size: 8]
	FName Tips;//[Offset: 0x8 , Size: 8]
	LinearColor Color;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0 , Size: 8]
	FName Tips;//[Offset: 0x8 , Size: 8]
	Texture* Textrue;//[Offset: 0x10 , Size: 40]
	FString TextruePath;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c , Size: 4]
	int subSlotID;//[Offset: 0x20 , Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24 , Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28 , Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c , Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30 , Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38 , Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98 , Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9 , Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa , Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb , Size: 1]
	FName SocketName;//[Offset: 0x100 , Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108 , Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118 , Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130 , Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148 , Size: 60]
	void UpdateVisibility();// 0x12f53f8
	void UnRegisterTick();// 0x12f53dc
	void TickEntity();// 0x12f53c0
	void SetSocketName();// 0x12f53a4
	void SetParentDefineID(ItemDefineID ParentID);// 0x12f5318
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x12f5240
	void RevertEntityMeshData();// 0x12f522c
	void RenderEntity(out SoftObjectPath SoftPath);// 0x12f5150
	void RegisterTick();// 0x12f5134
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x12f50ac
	void PutOnDefaultEquipment(enum slotType);// 0x12f502c
	void OnPostRender();// 0x12f5010
	bool IsEntityAvailable(enum VisibilityType);// 0x12f4f88
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x12f4ebc
	void Init(int SlotID, int subSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x12f4db4
	enum GetMeshType();// 0x12f4d84
	MeshData GetMeshData();// 0x12f4d20
	BattleItemHandleBase* GetLoadedHandle();// 0x12f4cf8
	ItemDefineID GetDefineID();// 0x12f4ca4
	void EnterRenderPipeline();// 0x12f4c88
	void EnterLogicPipeline();// 0x12f4c6c
	void DrawOutline(bool bEnable);// 0x12f4be4
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x12f4b00
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x12f4a34
	void ClearEquipmentLogic(bool putDefault);// 0x12f49ac
	void ClearEntity(bool ForceClear);// 0x12f4924
	void ApplyAnimation();// 0x12f4908
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x12f4888

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x5e4 , Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x5e8 , Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x5ec , Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x5f0 , Size: 4]
	void SetupAttachMeshComponent(MeshComponent* meshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x134caf0
	Actor* GetBindOwner();// 0x134cac8
	MeshComponent* GetAttachedMeshComponent();// 0x134caac
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* meshComp, FName SocketName, out const Transform RelativeTrans);// 0x134c8d0
	void BindOwner(Actor* Owner);// 0x134c850
	void BindEvent(bool bShowWidget);// 0x134c7c8

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int subSlotID);// 0x12f6c08

--------------------------------
Class: AvatarHandleBase.ItemHandleBase.Object
	bool bEnableBPModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	int SlotID;//[Offset: 0x88 , Size: 4]
	bool HandlePreApplyResource(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x12f7610
	bool HandlePostApplyResource(MeshComponent* InMeshComp, Object* Outer);// 0x12f7544

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: MiniItem
	int Type;//[Offset: 0x0 , Size: 4]
	int TypeSpecificID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0 , Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc , Size: 1]
	enum subSlot;//[Offset: 0xd , Size: 1]
	enum SightType;//[Offset: 0xe , Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14 , Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x20 , Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x2c , Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68 , Size: 320]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1a8 , Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1b4 , Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1c0 , Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0 , Size: 12]
	enum Op;//[Offset: 0xc , Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	float ModifyValue;//[Offset: 0x10 , Size: 4]
	Object* ModifyResValue;//[Offset: 0x18 , Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0 , Size: 12]
	FText DescValue;//[Offset: 0xc , Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0 , Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10 , Size: 320]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	int gender;//[Offset: 0x18 , Size: 4]
	enum OperationType;//[Offset: 0x1c , Size: 1]
	int AdditionalItemID;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: HandleMeshPack
	BackpackWeaponAttachHandle* Handle;//[Offset: 0x0 , Size: 4]
	WeaponMeshCfg meshCfg;//[Offset: 0x8 , Size: 320]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xa8 , Size: 472]
	class AnimInstance* animBP;//[Offset: 0x280 , Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x288 , Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x2b0 , Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x2bc , Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x2c8 , Size: 4]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x1315548
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x131552c
	bool IsVirtualAvatarHandle();// 0x13154fc
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x1315484
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x13153b0
	int GetSubSlotID();// 0x1315380
	int GetSlotID();// 0x1315350
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x13152e4
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x1315124
	WeaponAttachmentConfig GetAttachmentConfig();// 0x13150b8
	class Object GetAnimationBP();// 0x1315088
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x1314f74

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0 , Size: 1]
	int PendantIndex;//[Offset: 0x4 , Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10 , Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0 , Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ParticleEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0 , Size: 12]
	ParticleRes[] ParticleRes;//[Offset: 0xc , Size: 12]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28 , Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c , Size: 4]
	Controller* OwnerController;//[Offset: 0x30 , Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34 , Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x1bf56d0
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x1548160
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x15480a4
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x154807c
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x1548054
	PlayerController* GetOwnerPlayerController();// 0x154802c
	Pawn* GetOwnerPawn();// 0x1548004
	Controller* GetOwnerController();// 0x1547fdc
	Actor* GetOwnerActor();// 0x1547fc0

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0xd0 , Size: 4]
	byte WeaponType;//[Offset: 0xd4 , Size: 1]
	byte WeaponTypeNew;//[Offset: 0xd5 , Size: 1]
	byte WeaponHoldType;//[Offset: 0xd6 , Size: 1]
	FName WeaponAttachSocket;//[Offset: 0xd8 , Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xe8 , Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	int MaxNoGravityRange;//[Offset: 0xf4 , Size: 4]
	float LaunchGravityScale;//[Offset: 0xf8 , Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x100 , Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106 , Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x108 , Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	int UnablePeekTipID;//[Offset: 0x110 , Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115 , Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x118 , Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x154 , Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x190 , Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x194 , Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x198 , Size: 12]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1b0 , Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x1e0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x210 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x240 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x270 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2a0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x2d0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x300 , Size: 48]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x330 , Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334 , Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335 , Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xc4 , Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xcc , Size: 4]
	void UpdateComponentTick();// 0x1344650
	STExtraWeapon* TryGetOwnerWeapon();// 0x15408bc
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x1540894
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x15407d0
	bool IsWeaponOwnerOBTarget();// 0x15407a8
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x1540728
	bool IsWeaponLogicComponentTickEnabled();// 0x1540700
	bool IsLocalOrSpectorPlayer();// 0x15406d8
	byte GetOwnerPawnRole();// 0x15406b0

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0 , Size: 336]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x150 , Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc , Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10 , Size: 144]
	SlateBrush LargerProfileImage;//[Offset: 0xa0 , Size: 144]
	FString Name;//[Offset: 0x130 , Size: 12]
	FString Description;//[Offset: 0x13c , Size: 12]
	int DisplayPriority;//[Offset: 0x148 , Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4 , Size: 4]
	int PickUpSoundID;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc , Size: 4]
	byte Type;//[Offset: 0x10 , Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0 , Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4 , Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc , Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18 , Size: 8]
	int WeaponBulletNumInClip;//[Offset: 0x20 , Size: 4]
	uint32 WeaponShootID;//[Offset: 0x24 , Size: 4]
	uint32 WeaponClipID;//[Offset: 0x28 , Size: 4]
	byte CurWeaponState;//[Offset: 0x2c , Size: 1]
	byte CurShootType;//[Offset: 0x2d , Size: 1]
	int CurShootTotalType;//[Offset: 0x30 , Size: 4]
	ItemDefineID DefineID;//[Offset: 0x38 , Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x50 , Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	int OperationIndex;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xd0 , Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0xd4 , Size: 4]
	WeaponStateBase* GetCurrentState();// 0x1549438
	byte GetCurrentFreshWeaponStateType();// 0x1549410

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0xd0 , Size: 12]
	delegate OnEndState;//[Offset: 0xdc , Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	byte FreshWeaponStateType;//[Offset: 0xe9 , Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x274 , Size: 12]
	void PreChangeGrenadeAvatar(int InItemID);// 0x1396078
	void PostChangeItemAvatar();// 0x139605c
	FString GetItemAvatarHandlePath(int ItemID);// 0x1bf56d0
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x1bf56d0
	int GetDefaultAvatarID(int InAvatarID);// 0x1bf56d0
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x1395f20

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	ItemDefineID DefaultCfg;//[Offset: 0x100 , Size: 24]
	MeshComponent* ItemBodyMesh;//[Offset: 0x118 , Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x120 , Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x1d8 , Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x1dc , Size: 4]
	int ItemType;//[Offset: 0x1e0 , Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x1e8 , Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x210 , Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x238 , Size: 60]
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x13a24b8
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x13a23b0
	void ResetItemAvatar();// 0x13a239c
	void PreChangeItemAvatar(int InItemID);// 0x13a231c
	void OnRep_ItemAvatarChanged();// 0x13a2308
	bool IsValidAvatar();// 0x13a22e4
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x13a22b4
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x13a21d8
	MeshComponent* GetItemBodyMesh();// 0x13a21bc
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance);// 0x13a213c
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x13a2078
	void AsyncChangeItemAvatar(int InItemID);// 0x13a1ff8
	bool ApplyMesh(MeshComponent* meshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x13a1ee8
	bool ApplyMaterial(MeshComponent* meshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x13a1d60
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x1395f20

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0x9c , Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xa8 , Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0xd0 , Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x12fee58
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x12fea44
	bool HandleDrop(int InCount, enum Reason);// 0x12fe550
	bool HandleDisuse(enum Reason);// 0x12fe4c8
	BackpackComponent* GetBackpackComponent();// 0x1302320
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x130225c

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0 , Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0 , Size: 24]
	byte UpdateFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0 , Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8 , Size: 24]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c , Size: 4]
	Vector2D Position;//[Offset: 0x20 , Size: 8]
	Vector2D Size;//[Offset: 0x28 , Size: 8]
	Vector2D Origin;//[Offset: 0x30 , Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38 , Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40 , Size: 1]
	float Opacity;//[Offset: 0x44 , Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c , Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50 , Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54 , Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59 , Size: 1]
	float LastRenderTime;//[Offset: 0x5c , Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60 , Size: 8]
	Vector2D RenderSize;//[Offset: 0x68 , Size: 8]
	float RenderScale;//[Offset: 0x70 , Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74 , Size: 8]
	Canvas* Canvas;//[Offset: 0x7c , Size: 4]
	float AspectScale;//[Offset: 0x80 , Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84 , Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c , Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x12fe61c
	void SetHidden(bool bIsHidden);// 0x139b94c
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x139b6dc
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x139b548
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x139b3f4
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x139b2e8
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x139ae5c
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x139a6f0
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x139a2c4
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x139a208
	void Draw(float DeltaTime);// 0x13336c4
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x139a16c

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c , Size: 1]
	Vector MarkerPosition;//[Offset: 0x370 , Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d , Size: 1]
	HitPerformData HitPerform;//[Offset: 0x380 , Size: 116]
	Texture2D* HUDMainTexture;//[Offset: 0x3f4 , Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x3f8 , Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x3fc , Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400 , Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x404 , Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x410 , Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x428 , Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x42c , Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x490 , Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x4a4 , Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x4b8 , Size: 20]
	CanvasIcon Marker;//[Offset: 0x4e0 , Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x4f4 , Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x4f8 , Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x50c , Size: 4]
	void OnAsyncLoadingFinished();// 0x14e9d34
	void EnableCrosshair(bool bEnable);// 0x14e9cb8

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0 , Size: 12]
	float DefaultSpread;//[Offset: 0xc , Size: 4]
	float SpreadMax;//[Offset: 0x10 , Size: 4]
	float AddSpreadScale;//[Offset: 0x14 , Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x18 , Size: 4]
	float DefaultOffset;//[Offset: 0x1c , Size: 4]
	float DefaultAlpha;//[Offset: 0x20 , Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x24 , Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	enum HitPosition;//[Offset: 0x29 , Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x2c , Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x3c , Size: 16]
	LinearColor HitLimbsDrawColor;//[Offset: 0x4c , Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x5c , Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x60 , Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x64 , Size: 4]
	float CurCrosshairSpread;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0 , Size: 20]
	float Offset;//[Offset: 0x14 , Size: 4]
	Vector2D IconOffset;//[Offset: 0x18 , Size: 8]
	float alpha;//[Offset: 0x20 , Size: 4]
	float Rotate;//[Offset: 0x24 , Size: 4]
	float Scale;//[Offset: 0x28 , Size: 4]
	float IconRotate;//[Offset: 0x2c , Size: 4]
	float LogicRotate;//[Offset: 0x30 , Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0 , Size: 4]
	float U;//[Offset: 0x4 , Size: 4]
	float V;//[Offset: 0x8 , Size: 4]
	float UL;//[Offset: 0xc , Size: 4]
	float VL;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0 , Size: 4]
	float U;//[Offset: 0x4 , Size: 4]
	float V;//[Offset: 0x8 , Size: 4]
	float UL;//[Offset: 0xc , Size: 4]
	float VL;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30 , Size: 4]
	TextureUVs UVs;//[Offset: 0x34 , Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48 , Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55 , Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58 , Size: 8]
	float Rotation;//[Offset: 0x60 , Size: 4]
	Vector2D RotPivot;//[Offset: 0x64 , Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	float RenderPriority;//[Offset: 0x8 , Size: 4]
	Vector2D Position;//[Offset: 0xc , Size: 8]
	Vector2D Size;//[Offset: 0x14 , Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c , Size: 16]
	float RenderOpacity;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0 , Size: 4]
	float V;//[Offset: 0x4 , Size: 4]
	float UL;//[Offset: 0x8 , Size: 4]
	float VL;//[Offset: 0xc , Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38 , Size: 12]
	Font* Font;//[Offset: 0x44 , Size: 4]
	float TextScale;//[Offset: 0x48 , Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50 , Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58 , Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c , Size: 16]
	byte HorzPosition;//[Offset: 0x7c , Size: 1]
	byte VertPosition;//[Offset: 0x7d , Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4 , Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	LinearColor GlowColor;//[Offset: 0x4 , Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14 , Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c , Size: 8]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0xd0 , Size: 24]
	FName LogicSocket;//[Offset: 0xe8 , Size: 8]
	FName AttachSocket;//[Offset: 0xf0 , Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0xf8 , Size: 1]
	float AIMinAttackDist;//[Offset: 0xfc , Size: 4]
	float AIMaxAttackDist;//[Offset: 0x100 , Size: 4]
	float AIAttackDist;//[Offset: 0x104 , Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x1548e44
	int GetAvailableBulletsNumInBackpack();// 0x1548e1c

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0 , Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8 , Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc , Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14 , Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18 , Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c , Size: 4]
	float MaxGunRoot;//[Offset: 0x20 , Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24 , Size: 4]
	float DistMuzzleGun;//[Offset: 0x28 , Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c , Size: 4]
	float AimFlyCD;//[Offset: 0x30 , Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35 , Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0xd0 , Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x10c , Size: 12]
	float PistolCenterDownDis;//[Offset: 0x118 , Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x120 , Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124 , Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x128 , Size: 4]
	float RotateAngle;//[Offset: 0x12c , Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x130 , Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x134 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x138 , Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x13c , Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x140 , Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x144 , Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x148 , Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x14c , Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x150 , Size: 4]
	void UpdateComponentTick();// 0x1344650
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x134458c
	void DrawSpreadEnd();// 0x1344578
	void DrawDebugPointEnd();// 0x1344564

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0 , Size: 12]
	enum SpreadType;//[Offset: 0xc , Size: 1]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x33c , Size: 4]
	float BulletFireSpeed;//[Offset: 0x340 , Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344 , Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x348 , Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x34c , Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x350 , Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x354 , Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x358 , Size: 12]
	float ShootInterval;//[Offset: 0x364 , Size: 4]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368 , Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369 , Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a , Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x36c , Size: 4]
	float BurstShootInterval;//[Offset: 0x370 , Size: 4]
	float BurstShootCD;//[Offset: 0x374 , Size: 4]
	int BulletNumSingleShot;//[Offset: 0x378 , Size: 4]
	FName MuzzleSocketName;//[Offset: 0x380 , Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x388 , Size: 8]
	FName SilencerSocketName;//[Offset: 0x390 , Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x398 , Size: 8]
	FName ShellDropSocketName;//[Offset: 0x3a0 , Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x3a8 , Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x3b0 , Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x3b4 , Size: 4]
	byte shootType;//[Offset: 0x3b8 , Size: 1]
	int ShootTotalType;//[Offset: 0x3bc , Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0 , Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x3c4 , Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x3c8 , Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x3dc , Size: 20]
	float BaseImpactDamage;//[Offset: 0x3f0 , Size: 4]
	float BulletRange;//[Offset: 0x3f4 , Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x3f8 , Size: 4]
	byte ImpactDirType;//[Offset: 0x3fc , Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x400 , Size: 12]
	float RangeModifier;//[Offset: 0x40c , Size: 4]
	float ReferenceDistance;//[Offset: 0x410 , Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x414 , Size: 4]
	class DamageType* DamageType;//[Offset: 0x418 , Size: 4]
	ItemDefineID BulletType;//[Offset: 0x420 , Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x438 , Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450 , Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451 , Size: 1]
	int InitBulletInClip;//[Offset: 0x454 , Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458 , Size: 1]
	float TraceDistance;//[Offset: 0x45c , Size: 4]
	float MaxValidHitTime;//[Offset: 0x460 , Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x464 , Size: 60]
	float MaxDamageRate;//[Offset: 0x4a0 , Size: 4]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4 , Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x4a8 , Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x4ac , Size: 56]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x4e4 , Size: 8]
	float DamageImpulse;//[Offset: 0x4ec , Size: 4]
	byte ReloadType;//[Offset: 0x4f0 , Size: 1]
	float PreFireTime;//[Offset: 0x4f4 , Size: 4]
	float PostFireTime;//[Offset: 0x4f8 , Size: 4]
	float PostReloadTime;//[Offset: 0x4fc , Size: 4]
	float ReloadDurationStart;//[Offset: 0x500 , Size: 4]
	float ReloadDurationLoop;//[Offset: 0x504 , Size: 4]
	float ReloadTime;//[Offset: 0x508 , Size: 4]
	float ReloadTimeTactical;//[Offset: 0x50c , Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x510 , Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x514 , Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x518 , Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x520 , Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528 , Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x52c , Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530 , Size: 1]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x534 , Size: 244]
	AutoAimingConfig[] AutoAimingConfigList;//[Offset: 0x628 , Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638 , Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x63c , Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x6a0 , Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x6a4 , Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x6a8 , Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x6ac , Size: 64]
	float ShotGunVerticalSpread;//[Offset: 0x6ec , Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x6f0 , Size: 4]
	float GameDeviationFactor;//[Offset: 0x6f4 , Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x6f8 , Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x6fc , Size: 4]
	byte CrossHairType;//[Offset: 0x700 , Size: 1]
	float CrossHairInitialSize;//[Offset: 0x704 , Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x708 , Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x70c , Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x710 , Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714 , Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x718 , Size: 8]
	FName DefaultGripSocket;//[Offset: 0x720 , Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x728 , Size: 8]
	FName DefaultMagSocket;//[Offset: 0x730 , Size: 8]
	float WeaponBodyLength;//[Offset: 0x738 , Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x73c , Size: 12]
	float WeaponAimFOV;//[Offset: 0x74c , Size: 4]
	float WeaponAimInTime;//[Offset: 0x750 , Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x754 , Size: 4]
	float WeaponAimYawRate;//[Offset: 0x758 , Size: 4]
	float GameMotionYawRate;//[Offset: 0x75c , Size: 4]
	float GameMotionPitchRate;//[Offset: 0x760 , Size: 4]
	float ForegripParam;//[Offset: 0x764 , Size: 4]
	float MagParam;//[Offset: 0x768 , Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c , Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x770 , Size: 4]
	float SensitiveFirePitchRate;//[Offset: 0x774 , Size: 4]
	byte SightType;//[Offset: 0x778 , Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x780 , Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x798 , Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x79c , Size: 4]
	float RecoilKickADS;//[Offset: 0x7a0 , Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x7a4 , Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x7a8 , Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac , Size: 1]
	enum ReleaseFireType;//[Offset: 0x7ad , Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ae , Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7af , Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x7b0 , Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x7b4 , Size: 4]
	float AnimationKick;//[Offset: 0x7b8 , Size: 4]
	int ReloadAnimSlot;//[Offset: 0x7bc , Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0 , Size: 1]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1 , Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c2 , Size: 1]
	byte[] CoronaEffectCfg;//[Offset: 0x7c4 , Size: 12]
	void ReloadNoEncodeAttr();// 0x1410ba0
	void ReloadEncodeAttr();// 0x1410b8c
	void ReloadCanModifyInGameAttr(FString AttrName, float NewValue);// 0x14109f0
	void ReloadAttr();// 0x14109dc
	ItemDefineID GetBulletType();// 0x1410990
	FString GetAttrReloadTableName();// 0x14108d0
	void EncodeAttr();// 0x14108bc

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2c8 , Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	int MaxNoGravityRange;//[Offset: 0x2d0 , Size: 4]
	float LaunchGravityScale;//[Offset: 0x2d4 , Size: 4]
	int PunctureTimes;//[Offset: 0x2d8 , Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x2dc , Size: 4]
	class DamageType* DamageType;//[Offset: 0x2e0 , Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x2e4 , Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9 , Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x2ec , Size: 4]
	Vector RootScale;//[Offset: 0x2f0 , Size: 12]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	Vector ShootDir;//[Offset: 0x300 , Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	delegate OnResetBullet;//[Offset: 0x400 , Size: 12]
	delegate OnBulletImpact;//[Offset: 0x40c , Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x418 , Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x424 , Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x428 , Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x42c , Size: 4]
	float WeaponFloorHeight;//[Offset: 0x49c , Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x4a0 , Size: 12]
	byte CachedOwnerRole;//[Offset: 0x4ac , Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x4b0 , Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4 , Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5 , Size: 1]
	int MaxTraceTimes;//[Offset: 0x4b8 , Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc , Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x1bf56d0
	void ReloadNoEncodeAttr();// 0x12e4e38
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x13242a0
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x1bf56d0
	void OnImpact(out const HitResult _ImpactResult);// 0x13241fc
	bool NeedCheckBulletFlySound();// 0x14881a4
	void LaunchBulletDelegate__DelegateSignature();// 0x1bf56d0
	float GetMaxBulletFlySpeed();// 0x1409b00
	bool ClientVerifyBlock(out Vector MuzzlePos, out Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x14cd614

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152 , Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153 , Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x158 , Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x1331fa0
	void ResetTickDelay();// 0x1331f84
	void IgnoreBounceReflectOnce();// 0x1331f68
	void ForceStop();// 0x1331f54

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4 , Size: 4]
	float MaxSpeed;//[Offset: 0xf8 , Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc , Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc , Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc , Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc , Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc , Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc , Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc , Size: 1]
	float PreviousHitTime;//[Offset: 0x100 , Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104 , Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110 , Size: 4]
	float Buoyancy;//[Offset: 0x114 , Size: 4]
	float Bounciness;//[Offset: 0x118 , Size: 4]
	float Friction;//[Offset: 0x11c , Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120 , Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124 , Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130 , Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c , Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140 , Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c , Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x2dbefbc
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x2dbef44
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x1bf56d0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x1bf56d0
	Vector LimitVelocity(Vector NewVelocity);// 0x2dbeeb0

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x2cc , Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x2d0 , Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x2d4 , Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x2d8 , Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x2dc , Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x2e0 , Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x2e4 , Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x2e8 , Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x2ec , Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x2f0 , Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x2f4 , Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x2f8 , Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x2fc , Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x300 , Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x304 , Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x308 , Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x30c , Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x310 , Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x314 , Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x318 , Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x31c , Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x320 , Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x324 , Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x328 , Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x32c , Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334 , Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x338 , Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x33c , Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x340 , Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x344 , Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x348 , Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x34c , Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x350 , Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x354 , Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x358 , Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x35c , Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x360 , Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x364 , Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x368 , Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x36c , Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x370 , Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x374 , Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x378 , Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x37c , Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x380 , Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x384 , Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x388 , Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x38c , Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x390 , Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x394 , Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x398 , Size: 4]
	DecalData DefaultDecal;//[Offset: 0x39c , Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x3b8 , Size: 28]
	DecalData DirtDecal;//[Offset: 0x3d4 , Size: 28]
	DecalData WaterDecal;//[Offset: 0x3f0 , Size: 28]
	DecalData MetalDecal;//[Offset: 0x40c , Size: 28]
	DecalData WoodDecal;//[Offset: 0x428 , Size: 28]
	DecalData GrassDecal;//[Offset: 0x444 , Size: 28]
	DecalData GlassDecal;//[Offset: 0x460 , Size: 28]
	DecalData FleshDecal;//[Offset: 0x47c , Size: 28]
	DecalData SteelDecal;//[Offset: 0x498 , Size: 28]
	DecalData SandbagDecal;//[Offset: 0x4b4 , Size: 28]
	DecalData SandDecal;//[Offset: 0x4d0 , Size: 28]
	DecalData ClothDecal;//[Offset: 0x4ec , Size: 28]
	DecalData PlasticDecal;//[Offset: 0x508 , Size: 28]
	DecalData LeatherDecal;//[Offset: 0x524 , Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x540 , Size: 28]
	DecalData PaperDecal;//[Offset: 0x55c , Size: 28]
	DecalData StoneDecal;//[Offset: 0x578 , Size: 28]
	DecalData SnowDecal;//[Offset: 0x594 , Size: 28]
	DecalData PopCanDecal;//[Offset: 0x5b0 , Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x5cc , Size: 28]
	DecalData LeafDecal;//[Offset: 0x5e8 , Size: 28]
	DecalData CarDecal;//[Offset: 0x604 , Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x620 , Size: 28]
	DecalData IceDecal;//[Offset: 0x63c , Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x660 , Size: 240]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750 , Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751 , Size: 1]
	<float,float> DamageScaleMap;//[Offset: 0x754 , Size: 60]
	DecalComponent* ImpactDecalComp;//[Offset: 0x790 , Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x794 , Size: 4]
	SceneComponent* TargetImpactComp;//[Offset: 0x7bc , Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x7fc , Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x800 , Size: 60]
	void TimerHideDecal();// 0x1435b24

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0 , Size: 4]
	float LifeSpan;//[Offset: 0x4 , Size: 4]
	Material* DecalMaterial;//[Offset: 0x8 , Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc , Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10 , Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14 , Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc , Size: 12]
	Vector VictimLocation;//[Offset: 0x18 , Size: 12]
	Vector BulletPos;//[Offset: 0x24 , Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x30 , Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x3c , Size: 8]
	byte SurfaceType;//[Offset: 0x44 , Size: 1]
	uint32 ShootID;//[Offset: 0x48 , Size: 4]
	uint16 CompensationTime;//[Offset: 0x4c , Size: 2]
	Actor* Actor;//[Offset: 0x50 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x58 , Size: 8]
	int TimeStamp;//[Offset: 0x60 , Size: 4]
	int ClientShootTime;//[Offset: 0x64 , Size: 4]
	byte HitBodyType;//[Offset: 0x68 , Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x6c , Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x70 , Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x74 , Size: 12]
	Vector WeaponOwnerHeadPos;//[Offset: 0x80 , Size: 12]
	float DamageRate;//[Offset: 0x8c , Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90 , Size: 1]
	double SystemTimeStamp;//[Offset: 0x98 , Size: 8]
	Vector GunTailPos;//[Offset: 0xa0 , Size: 12]
	FName BoneName;//[Offset: 0xb0 , Size: 8]
	Transform BoneTrans;//[Offset: 0xc0 , Size: 48]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x238 , Size: 4]
	int SortOrder;//[Offset: 0x23c , Size: 4]
	float FadeScreenSize;//[Offset: 0x240 , Size: 4]
	float FadeStartDelay;//[Offset: 0x244 , Size: 4]
	float FadeDuration;//[Offset: 0x248 , Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c , Size: 1]
	Vector DecalSize;//[Offset: 0x250 , Size: 12]
	void SetSortOrder(int Value);// 0x2cdd680
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x2cdd608
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x2cdd500
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2cdd488
	float GetFadeStartDelay();// 0x2cdd460
	float GetFadeDuration();// 0x2cdd438
	MaterialInterface* GetDecalMaterial();// 0x2cdd410
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2cdd3e0

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0 , Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0 , Size: 4]
	float Body;//[Offset: 0x4 , Size: 4]
	float Limbs;//[Offset: 0x8 , Size: 4]
	float Hand;//[Offset: 0xc , Size: 4]
	float Foot;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0 , Size: 4]
	int rangeEnd;//[Offset: 0x4 , Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0 , Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18 , Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0 , Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8 , Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0 , Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c , Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98 , Size: 76]
	float followTimeMax;//[Offset: 0xe4 , Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec , Size: 4]
	float MaxAngle;//[Offset: 0xf0 , Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0 , Size: 4]
	float RangeRate;//[Offset: 0x4 , Size: 4]
	float SpeedRate;//[Offset: 0x8 , Size: 4]
	float RangeRateSight;//[Offset: 0xc , Size: 4]
	float SpeedRateSight;//[Offset: 0x10 , Size: 4]
	float CrouchRate;//[Offset: 0x14 , Size: 4]
	float ProneRate;//[Offset: 0x18 , Size: 4]
	float DyingRate;//[Offset: 0x1c , Size: 4]
	float DriveVehicleRate;//[Offset: 0x20 , Size: 4]
	float InVehicleRate;//[Offset: 0x24 , Size: 4]
	float FreeFallRate;//[Offset: 0x28 , Size: 4]
	float OpeningRate;//[Offset: 0x2c , Size: 4]
	float LandingRate;//[Offset: 0x30 , Size: 4]
	float adsorbMaxRange;//[Offset: 0x34 , Size: 4]
	float adsorbMinRange;//[Offset: 0x38 , Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c , Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40 , Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44 , Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0 , Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4 , Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8 , Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc , Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10 , Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14 , Size: 4]
	float LeftMax;//[Offset: 0x18 , Size: 4]
	float RightMax;//[Offset: 0x1c , Size: 4]
	float HorizontalTendency;//[Offset: 0x20 , Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24 , Size: 4]
	int BulletPerSwitch;//[Offset: 0x28 , Size: 4]
	float TimePerSwitch;//[Offset: 0x2c , Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34 , Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38 , Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c , Size: 4]
	float RecoilValueClimb;//[Offset: 0x40 , Size: 4]
	float RecoilValueFail;//[Offset: 0x44 , Size: 4]
	float RecoilModifierStand;//[Offset: 0x48 , Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c , Size: 4]
	float RecoilModifierProne;//[Offset: 0x50 , Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54 , Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58 , Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0 , Size: 4]
	float DeviationBaseAim;//[Offset: 0x4 , Size: 4]
	float DeviationBaseADS;//[Offset: 0x8 , Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc , Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10 , Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14 , Size: 4]
	float DeviationMax;//[Offset: 0x18 , Size: 4]
	float DeviationMinMove;//[Offset: 0x1c , Size: 4]
	float DeviationMaxMove;//[Offset: 0x20 , Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24 , Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28 , Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c , Size: 4]
	float DeviationStanceStand;//[Offset: 0x30 , Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34 , Size: 4]
	float DeviationStanceProne;//[Offset: 0x38 , Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xd0 , Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xd4 , Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xd8 , Size: 4]
	int UseTss;//[Offset: 0x138 , Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140 , Size: 1]
	void OnWeaponStopFire();// 0x1332780
	void OnWeaponStartFire();// 0x133276c
	void OnWeaponShoot();// 0x1332758
	void GetDataFromWeaponEntity();// 0x1332744
	Vector GetCurRecoilInfo();// 0x13326fc
	float GetCurDeviation();// 0x13326d4
	void CheckComponentTick();// 0x13326c0

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0xd0 , Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5 , Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6 , Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7 , Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9 , Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xdc , Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x138 , Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c , Size: 1]
	void HandleOnWeaponStopFire();// 0x1331b90
	void HandleOnWeaponStartFire();// 0x1331b7c
	bool CheckCloseDSTick();// 0x1331b54
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x13319bc

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4 , Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10 , Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c , Size: 4]
	int BulletDown;//[Offset: 0x20 , Size: 4]
	int8 CurBullet;//[Offset: 0x24 , Size: 1]
	int ShootInterval;//[Offset: 0x28 , Size: 4]
	int BulletFlyTime;//[Offset: 0x2c , Size: 4]
	int BulletShootTime;//[Offset: 0x30 , Size: 4]
	int BulletHitTime;//[Offset: 0x34 , Size: 4]
	int AimFov;//[Offset: 0x38 , Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c , Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40 , Size: 12]
	int64 ClientStartTime;//[Offset: 0x50 , Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58 , Size: 12]
	int AutoAimSpeed;//[Offset: 0x64 , Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68 , Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c , Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xd0 , Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xd8 , Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	float DrawShootLineTime;//[Offset: 0xe4 , Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0xec , Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0xf0 , Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0xf4 , Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0xf8 , Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0xfc , Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x100 , Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x108 , Size: 4]
	delegate OnShoot;//[Offset: 0x10c , Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x118 , Size: 4]
	void VehicleShoot();// 0x14cdec4
	void ShootDelegate__DelegateSignature();// 0x1bf56d0
	void ReInitWeaponOwnerData();// 0x14cdeb0
	void OnWeaponClipMaxBulletChanged();// 0x14cde9c
	void OnWeaponBulletChanged();// 0x14cde88
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x1bf56d0
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x1bf56d0
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x14cddb0
	bool CheckShootState();// 0x13d49b4
	Vector CalcShootTargetLocByStartAndRot(Vector Start, Rotator ShootRot, out HitResult OutHitResult);// 0x14cdc68

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x2ec , Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x2f0 , Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x31c , Size: 12]
	int LastShootTime;//[Offset: 0x32c , Size: 4]
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x1bf56d0
	bool CheckShootState();// 0x13d49b4

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x2e0 , Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0 , Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4 , Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8 , Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc , Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14 , Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20 , Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x114 , Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x118 , Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x11c , Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x120 , Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x124 , Size: 4]
	float CameraShakFalloff;//[Offset: 0x128 , Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c , Size: 1]
	bool bNeedDisableMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d , Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x130 , Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x134 , Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x140 , Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x144 , Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x150 , Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x154 , Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x160 , Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x170 , Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x174 , Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x180 , Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x184 , Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x190 , Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x194 , Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x1a0 , Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1b0 , Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x1b4 , Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1c0 , Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x1c4 , Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1d0 , Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x1d4 , Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x1e0 , Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x1f0 , Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x1f4 , Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x200 , Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x204 , Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x210 , Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x214 , Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220 , Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x224 , Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x228 , Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x234 , Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x238 , Size: 12]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x244 , Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x248 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x24c , Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x250 , Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x254 , Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x260 , Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x26c , Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x270 , Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x274 , Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x288 , Size: 12]
	void ReloadAttr(int WeaponID);// 0x140fbf4
	void OnWeaponUnEquiped();// 0x140fbe0
	void OnWeaponEuiped();// 0x140fbcc
	void HandleWeaponAction(byte Action);// 0x140fb4c
	OBEffectBullet* GetOBEffectBullet();// 0x140fb24
	int GetAvailableOBEffectBulletNum();// 0x140fafc
	void ActiveLocalShellDropFX();// 0x140fae8

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0xd0 , Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x10c , Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x110 , Size: 4]
	void HandleWeaponAction(byte Action);// 0x140fb4c

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0 , Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4 , Size: 4]
	float FXStartScaleValue;//[Offset: 0x8 , Size: 4]
	float FXEndScaleValue;//[Offset: 0xc , Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2c8 , Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2cc , Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2dc , Size: 4]
	float CurMovingTime;//[Offset: 0x308 , Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	delegate OnAttrModified;//[Offset: 0xc0 , Size: 12]
	int AttrGroup;//[Offset: 0xcc , Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0xd0 , Size: 12]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0xdc , Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x1a0 , Size: 4]
	bool[] AttrModifyGroupStateList;//[Offset: 0x1a4 , Size: 12]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x1b0 , Size: 12]
	int AttrModifyStateListNum;//[Offset: 0x1dc , Size: 4]
	AttributeExpand[] AttributeExpands;//[Offset: 0x1e0 , Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x1ec , Size: 124]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x268 , Size: 60]
	void SetAttrModifyStateValue(int Index, bool Value);// 0x15a92f0
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x15a9164
	void OnRep_DynamicModifierList();// 0x15a9150
	void OnRep_AttrModifyStateList();// 0x15a913c
	void OnRep_AttrModifyGroupStateList();// 0x15a9128
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x1bf56d0
	bool IsAttrModifyStateValidIndex(int Index);// 0x15a90a8
	bool GetAttrModifyStateValue(int Index);// 0x15a9028
	int GetAttrModifyStateNum();// 0x15a900c
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x15a8d40
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x15a8be0
	bool EnableAllAttrModifier();// 0x15a8bb8
	bool DisableModifierToActor(Actor* TargetActor);// 0x15a8b38
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x15a89d8
	bool DisableAllAttrModifier();// 0x15a89b0
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x15a885c

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0 , Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc , Size: 12]
	FString AttrName;//[Offset: 0x18 , Size: 12]
	byte AttrId;//[Offset: 0x24 , Size: 1]
	enum ModifierOp;//[Offset: 0x25 , Size: 1]
	float ModifierValue;//[Offset: 0x28 , Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d , Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0 , Size: 8]
	float FinalAddValue;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0 , Size: 12]
	FString AttrDesc;//[Offset: 0xc , Size: 12]
	int RelateTypeId;//[Offset: 0x18 , Size: 4]
	FString RelateGroup;//[Offset: 0x1c , Size: 12]
	float Value;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0 , Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c , Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	FString AttrName;//[Offset: 0x4 , Size: 12]
	FString LimitAttrName;//[Offset: 0x10 , Size: 12]
	FString MaxAttrName;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0 , Size: 12]
	enum AttrVariableType;//[Offset: 0xc , Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0 , Size: 12]
	Actor* AffectedActor;//[Offset: 0xc , Size: 4]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0 , Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc , Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0 , Size: 12]
	enum Op;//[Offset: 0xc , Size: 1]
	float ModifyValue;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector ImpactPoint;//[Offset: 0x0 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc , Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x18 , Size: 12]
	byte SurfaceType;//[Offset: 0x24 , Size: 1]
	Actor* Actor;//[Offset: 0x28 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	float DamageImpulse;//[Offset: 0xbc , Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc , Size: 12]
	HitResult HitInfo;//[Offset: 0x18 , Size: 136]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0 , Size: 12]
	Vector TargetOffset;//[Offset: 0xc , Size: 12]
	float SpringArmLength;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x2c8 , Size: 12]
	Vector LowThrowOffset;//[Offset: 0x2d4 , Size: 12]
	byte ThrowMode;//[Offset: 0x2e0 , Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x2e4 , Size: 4]
	float MaxSimTime;//[Offset: 0x2e8 , Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x2ec , Size: 40]
	float GrenadeRadius;//[Offset: 0x314 , Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x318 , Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x324 , Size: 12]
	Vector LauncheVelocity;//[Offset: 0x330 , Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0 , Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Vector HitActorLocation;//[Offset: 0x10 , Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x1e48 , Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x1e70 , Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x1e7c , Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x1e88 , Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x1e94 , Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x1ea0 , Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x1eac , Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x1eb0 , Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x1eb4 , Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x1eb8 , Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x1ebc , Size: 4]
	float IndoorCheckDistance;//[Offset: 0x1ec0 , Size: 4]
	float IndoorCheckTime;//[Offset: 0x1ec4 , Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x1ec8 , Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x1ecc , Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed0 , Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x1ed4 , Size: 4]
	float mfTickDuration;//[Offset: 0x1ed8 , Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x1ee0 , Size: 24]
	Color DyeingColor;//[Offset: 0x1ef8 , Size: 4]
	int DyeingSlot;//[Offset: 0x1efc , Size: 4]
	byte ParachuteState;//[Offset: 0x1f04 , Size: 1]
	byte LastParachuteState;//[Offset: 0x1f06 , Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x1f08 , Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0c , Size: 1]
	float SwimZDir;//[Offset: 0x1f10 , Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f14 , Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f15 , Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x1f18 , Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x1f1c , Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x1f20 , Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x1f24 , Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x1f28 , Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x1f2c , Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x1f30 , Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x1f34 , Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x1f38 , Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x1f3c , Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x1f40 , Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x1f90 , Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x1fe0 , Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x2048 , Size: 4]
	float VehicleForwardInputRate;//[Offset: 0x204c , Size: 4]
	float VehicleRightInputRate;//[Offset: 0x2050 , Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2054 , Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x2058 , Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x2060 , Size: 4]
	FName FeatureActorName;//[Offset: 0x20b8 , Size: 8]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x20c0 , Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20cc , Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20cd , Size: 1]
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x1494298
	void UpdateParachuteFallingCameraDistance(float alpha);// 0x1494220
	void UpdateIndoorState(bool IsInDoor);// 0x1494158
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x1494090
	void TriggerAutoAimCheck(float DeltaTime);// 0x1494018
	void TouchCancelSkillLock();// 0x1494004
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x14575f0
	void SwitchCameraToParachuteOpening();// 0x1493fe8
	void SwitchCameraToParachuteFalling();// 0x1493fcc
	void SwitchCameraToNormal();// 0x1493fb0
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float alpha);// 0x1493f38
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x1bf56d0
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x1493f24
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x1bf56d0
	void StopCamShake();// 0x1493f08
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x1492a08
	void StartCamShake();// 0x1493eec
	void ShowNightVisionFrame();// 0x145645c
	void ShowConfirmDialogOfMisKill();// 0x1456418
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x1493e6c
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x1493dd4
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x1493d5c
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x1493ca0
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x1493b94
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x1493ad0
	void SetParachuteState(byte State);// 0x1493a50
	void SetFPPDeafultFov(float InFov);// 0x14939d8
	void SetBodyIndoor(bool IsInDoor);// 0x1493958
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x1493864
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x1493708
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x1493640
	void ReleaseTrigger(enum Hand);// 0x14935c0
	void PushTrigger(enum Hand);// 0x1493540
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x14933ec
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x1bf56d0
	void OnStateEnter(enum EnteredState);// 0x149336c
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x1bf56d0
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x1bf56d0
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x1bf56d0
	void OnRep_STPlayerController();// 0x1493358
	void OnRep_ParachuteState(byte State);// 0x14932d8
	void OnRank(int Kills, int Rank);// 0x149321c
	void OnMiniTreeTriggerServerLogicCPP();// 0x1493200
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x1bf56d0
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x1bf56d0
	void OnAvatarEquippedSucc(enum slotType, bool isEquipped, int InItemID);// 0x14930f4
	void OnAllAvatarEquippedSucc();// 0x14930e0
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x1493058
	void MiniTreeTriggerServerLogic();// 0x1492ffc
	bool IsInLaunchSeat();// 0x1492fcc
	bool IsGrenadeEmpty();// 0x1492fa4
	bool IsBodyIndoorFuc();// 0x1492f84
	bool IsBodyIndoorCheck();// 0x1492f5c
	void InitAirAttackLocatorComponent();// 0x1492f48
	void HideNightVisionFrame();// 0x144cccc
	void HandleParachuteStateChanged(byte NewState);// 0x1492ec8
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x1492d50
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x1492bd8
	SpringArmComponent* GetThirdPersonSpringArm();// 0x1bf56d0
	CameraComponent* GetThirdPersonCamera();// 0x1bf56d0
	float GetSwimRotateX_Ex();// 0x1492bb0
	SpringArmComponent* GetScopeSpringArm();// 0x1bf56d0
	CameraComponent* GetScopeCamera();// 0x1bf56d0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x144bbac
	bool GetIsInDoor();// 0x1492b80
	bool GetIsGunADS();// 0x1492b50
	SpringArmComponent* GetFPPSpringArm();// 0x1bf56d0
	float GetFPPDeafultFov();// 0x1492b28
	CameraComponent* GetFPPCamera();// 0x1bf56d0
	SpringArmComponent* GetFirstPersonSpringArm();// 0x1bf56d0
	CameraComponent* GetFirstPersonCamera();// 0x1bf56d0
	Vector GetBonePos(FName BoneName);// 0x1492a94
	void FreeFallShakeCam();// 0x1492a80
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x1492a08
	void EnablePet(bool Enable);// 0x1492980
	void DynamicCreateComponents();// 0x149296c
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x1492868
	void ClearHPUI();// 0x14483bc

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xd4 , Size: 20]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe8 , Size: 20]
	Vector2D AimTargetScreenPos;//[Offset: 0xfc , Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	PlayerController* PlayerController;//[Offset: 0x108 , Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x10c , Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x11c , Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x120 , Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x124 , Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x128 , Size: 4]
	float MIN_FOLLOW_TIME;//[Offset: 0x12c , Size: 4]
	FName[] Bones;//[Offset: 0x228 , Size: 12]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234 , Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235 , Size: 1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236 , Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x238 , Size: 4]
	bool bIsStartScopeAutoAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8 , Size: 1]
	float ScopeAutoAimTime;//[Offset: 0xdbc , Size: 4]
	void TryDoAiming(float DeltaTime);// 0x153bf50
	void SetIsStartScopeAutoAimCheck(bool IsOpenScopeCheck);// 0x153bed0
	void OnUnEquipWeapon();// 0x153bebc
	void OnShoot(STExtraWeapon* Weapon);// 0x153be44
	void OnRefreshAutoAimCfg();// 0x153be30
	void OnEquipWeapon();// 0x153be1c
	bool IsTriggerBeforeFire();// 0x153bdf4
	void Init(Controller* Controller);// 0x153bd7c
	Actor* GetTryRaycastActor(Vector startPoint, STExtraPlayerCharacter* Pawn, byte TraceType);// 0x153bc78
	bool GetIsStartScopeAutoAimCheck();// 0x153bc50
	bool CheckSmoke(Vector startPoint, STExtraPlayerCharacter* Pawn);// 0x153bb84
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x153ba74
	bool CheckBuffStun();// 0x153ba4c
	bool CanEnemeyRaycastReach(Vector startPoint, STExtraPlayerCharacter* Pawn);// 0x153b980

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xc0 , Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xc4 , Size: 12]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0xd0 , Size: 48]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x100 , Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x104 , Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x110 , Size: 12]
	FName ScreenPlane;//[Offset: 0x120 , Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x128 , Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x134 , Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x140 , Size: 4]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x14e71e8
	void StopScreenParticleEffect(byte EffectType);// 0x14e7170
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x14e7068
	void StopAllScreenParticleEffect();// 0x14e7054
	void StopAllScreenAppearance();// 0x14e7040
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x14e6f84
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x14e6e58
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x14e6d88
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x14e6ccc
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x14e6b6c
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x14e698c
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x14e6764
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI);// 0x14e65c8
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x14e6550
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x14e648c
	void HandleEffectLoadFinish(byte EffectType);// 0x14e6414

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0 , Size: 12]
	float LifeSpan;//[Offset: 0xc , Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18 , Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40 , Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0 , Size: 1]
	ParticleSystem* ParticleEffect;//[Offset: 0x8 , Size: 40]
	FName ParticleParamName;//[Offset: 0x30 , Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x38 , Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x44 , Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]
	float CurrentParamValue;//[Offset: 0x4c , Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x50 , Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0 , Size: 12]
	FName AppearanceTag;//[Offset: 0x10 , Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20 , Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50 , Size: 4]
	float MatialAlpha;//[Offset: 0x54 , Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58 , Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c , Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61 , Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62 , Size: 1]
	float GradualFrag;//[Offset: 0x64 , Size: 4]
	float DelayTime;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x5b0 , Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x5e0 , Size: 48]
	void SetActivate(bool _IsActivate);// 0x13d43e8

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x6f8 , Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704 , Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x13497d8

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0 , Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8 , Size: 4]
	FName ParentSocketName;//[Offset: 0x10 , Size: 8]
	float TargetArmALength;//[Offset: 0x18 , Size: 4]
	Vector SocketOffset;//[Offset: 0x1c , Size: 12]
	Vector TargetOffset;//[Offset: 0x28 , Size: 12]
	Vector RelativeLocation;//[Offset: 0x34 , Size: 12]
	float ProbeSize;//[Offset: 0x40 , Size: 4]
	byte ProbeChannel;//[Offset: 0x44 , Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46 , Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47 , Size: 1]
	float CameraLagSpeed;//[Offset: 0x48 , Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0 , Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc , Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0 , Size: 4]
	float OpenAALFOV;//[Offset: 0xc4 , Size: 4]
	int MaxDist;//[Offset: 0xc8 , Size: 4]
	int minDist;//[Offset: 0xcc , Size: 4]
	int DangerDist;//[Offset: 0xd0 , Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8 , Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100 , Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128 , Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c , Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130 , Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138 , Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c , Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140 , Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144 , Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148 , Size: 4]
	float ShortDis;//[Offset: 0x14c , Size: 4]
	byte ChannelType;//[Offset: 0x150 , Size: 1]
	Vector TargetLocation;//[Offset: 0x154 , Size: 12]
	void SetItemExsist(bool bExsist);// 0x12ddda8
	void SetFinalLocation();// 0x12ddd94
	void SetAALFov(bool bOpen);// 0x12ddd14
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x12ddbfc
	void OnFreeArrowLoadFinsh();// 0x12ddbe8
	void OnCalledActorLoadFinsh(Vector Location);// 0x12ddb78
	float GetTargetDistance();// 0x12ddb50
	bool GetAALAvaliable();// 0x12ddb28

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x30c , Size: 4]
	float AirAttackDelayTime;//[Offset: 0x310 , Size: 4]
	int IconID;//[Offset: 0x314 , Size: 4]
	float AttackAreaRadius;//[Offset: 0x318 , Size: 4]

--------------------------------
Class: ActivityActorBase.Actor.Object
	FString actorName;//[Offset: 0x2c8 , Size: 12]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4 , Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5 , Size: 1]
	Character* ClientMainCharacter;//[Offset: 0x2d8 , Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x2e0 , Size: 8]
	MeshComponent* Mesh;//[Offset: 0x2e8 , Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x2ec , Size: 4]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	FString ActivityName;//[Offset: 0x2f4 , Size: 12]
	int SkillIndex;//[Offset: 0x300 , Size: 4]
	enum SkillEntry;//[Offset: 0x304 , Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x308 , Size: 40]
	int ButtonShowTextID;//[Offset: 0x330 , Size: 4]
	Object* ButtonShowPic;//[Offset: 0x338 , Size: 40]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360 , Size: 1]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361 , Size: 1]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x12d56c0
	void TriggerSkillEvent(Character* Character);// 0x12d5640
	void RPC_Client_ShowInteractiveButton(Character* Character, bool bAdd);// 0x12d5574
	void RPC_Client_RefreshButtonInfo(Character* Character, bool bShow);// 0x12d54a8
	void RefreshButtonInfo(Character* Character);// 0x12d5430
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x12d52e8
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x12d50ec
	bool LocalStartActive(Character* Character);// 0x12d5064
	void LocalReset(Character* Character);// 0x12d4fe4
	bool LocalInterruptActive(Character* Character);// 0x12d4f5c
	bool LocalActiveFinished(Character* Character);// 0x12d4ed4
	MeshComponent* GetMesh();// 0x12d4eb8
	Character* GetMainCharacter();// 0x12d4e88
	Character* GetActivedCharacter();// 0x12d4e5c
	bool ClientClickButton(Character* Character, out int OutReason);// 0x12d4d88
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x12d4c64
	void BPReset(Character* Character);// 0x12d4be4
	void BPOnCharacterAttached(Character* InCharacter);// 0x12d4b64
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x12d4a40
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x12d4954
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x1bf56d0
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x12d4830
	bool AllowShowButton(Character* Character, out int Reason);// 0x12d4754
	bool AllowInteractive(Character* Character, out int Reason);// 0x12d4678
	bool AllowClickButton(Character* Character, out int Reason);// 0x12d459c

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x238 , Size: 4]
	Vector SocketOffset;//[Offset: 0x23c , Size: 12]
	Vector TargetOffset;//[Offset: 0x248 , Size: 12]
	float ProbeSize;//[Offset: 0x254 , Size: 4]
	byte ProbeChannel;//[Offset: 0x258 , Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259 , Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259 , Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259 , Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x259 , Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259 , Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259 , Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x259 , Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a , Size: 1]
	float CameraLagSpeed;//[Offset: 0x25c , Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x260 , Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x264 , Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x268 , Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x2c9f828
	Rotator GetTargetRotation();// 0x2de4540

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0 , Size: 4]
	uint32 ClipID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0 , Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0 , Size: 1]
	float HitSelfModifier;//[Offset: 0x2d4 , Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x2d8 , Size: 4]
	float HitOthersModifier;//[Offset: 0x2dc , Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x2e0 , Size: 4]
	float HitCharacterModifier;//[Offset: 0x2e4 , Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0xbc , Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0xc0 , Size: 4]
	float ImpactModifier;//[Offset: 0xc4 , Size: 4]
	float ImpactAbsorption;//[Offset: 0xc8 , Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0xcc , Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0xd0 , Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0xd4 , Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0xd8 , Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0xdc , Size: 4]
	float DamageCharacterCD;//[Offset: 0xe0 , Size: 4]
	float DamageSelfCD;//[Offset: 0xe8 , Size: 4]
	float HitDamageSelfMaxFactor;//[Offset: 0xf0 , Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0xf4 , Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0xfc , Size: 4]
	float DamageReduce;//[Offset: 0x100 , Size: 4]
	float ExplosionBaseDamage;//[Offset: 0x104 , Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x108 , Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x10c , Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x110 , Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x114 , Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x118 , Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x11c , Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120 , Size: 1]
	float HitStoneVelocityDamp;//[Offset: 0x124 , Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x130 , Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170 , Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x174 , Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x178 , Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x180 , Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x188 , Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x18c , Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x190 , Size: 4]
	float DotProductRearThreshold;//[Offset: 0x194 , Size: 4]
	float ImpactModifierFront;//[Offset: 0x198 , Size: 4]
	float ImpactModifierRear;//[Offset: 0x19c , Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x1a0 , Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x1a4 , Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x1a8 , Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x1b0 , Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x1b4 , Size: 4]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x15295c0
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x1529454

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0 , Size: 12]
	Quat Quaternion;//[Offset: 0x10 , Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20 , Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c , Size: 12]
	byte Flags;//[Offset: 0x38 , Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0xbc , Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0xc8 , Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0xd4 , Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	float HPMax;//[Offset: 0xe4 , Size: 4]
	float HP;//[Offset: 0xe8 , Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0xec , Size: 12]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	float FuelMax;//[Offset: 0xfc , Size: 4]
	float Fuel;//[Offset: 0x100 , Size: 4]
	float FuelConsumeFactor;//[Offset: 0x104 , Size: 4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x108 , Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x1528314
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x1528110
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x1527ef4
	void RefreshWheelState();// 0x1527ee0
	void OnRep_WheelsCurrentHP();// 0x1527ecc
	void OnRep_HP();// 0x1527eb8
	void OnRep_Fuel();// 0x1527ea4
	bool NoFuel();// 0x1527e7c
	void Maintenance(float addpercenthp, bool FixTire);// 0x1527db8
	bool IsDontDamage();// 0x1527d9c
	bool IsDontConsumeFuel();// 0x1527d80
	bool IsDestroyed();// 0x1527d58
	int GetWheelsHPNum();// 0x1527d30
	float GetWheelHPMax(int WheelIdx);// 0x1527cb0
	float GetWheelHP(int WheelIdx);// 0x1527c30
	float GetVehicleHPMax();// 0x1527c08
	float GetVehicleHP();// 0x1527be0
	float GetFuelMax();// 0x1527bb8
	float GetFuelConsumeFactor();// 0x1527b90
	float GetFuel();// 0x1527b68

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x238 , Size: 4]
	float MeshDensity;//[Offset: 0x23c , Size: 4]
	float FluidDensity;//[Offset: 0x240 , Size: 4]
	float FluidLinearDamping;//[Offset: 0x244 , Size: 4]
	float FluidAngularDamping;//[Offset: 0x248 , Size: 4]
	Vector VelocityDamper;//[Offset: 0x24c , Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258 , Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x25c , Size: 4]
	float TestPointRadius;//[Offset: 0x260 , Size: 4]
	Vector[] TestPoints;//[Offset: 0x264 , Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271 , Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272 , Size: 1]
	float[] PointDensityOverride;//[Offset: 0x274 , Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x280 , Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c , Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d , Size: 1]
	float StayUprightStiffness;//[Offset: 0x290 , Size: 4]
	float StayUprightDamping;//[Offset: 0x294 , Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x298 , Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4 , Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2a8 , Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2ac , Size: 4]
	byte TickGroup;//[Offset: 0x2b0 , Size: 1]
	bool IsEntirelyUnderWater();// 0x37aa77c
	bool IsContactedWater();// 0x1478018

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	Vector2D GlobalWaveDirection;//[Offset: 0x2cc , Size: 8]
	float GlobalWaveSpeed;//[Offset: 0x2d4 , Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x2d8 , Size: 4]
	float DistanceCheck;//[Offset: 0x2dc , Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x2e0 , Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x2ec , Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x2f8 , Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	float ModulationStartHeight;//[Offset: 0x300 , Size: 4]
	float ModulationMaxHeight;//[Offset: 0x304 , Size: 4]
	float ModulationPower;//[Offset: 0x308 , Size: 4]
	Landscape* Landscape;//[Offset: 0x30c , Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x310 , Size: 4]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x37aba3c
	Vector GetWaveHeightValue(out const Vector Location, const World* World, bool HeightOnly, bool TwoIterations);// 0x37ab8b8
	LinearColor GetHeightmapPixel(float U, float V);// 0x37ab7e8

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0 , Size: 4]
	float Length;//[Offset: 0x4 , Size: 4]
	float Amplitude;//[Offset: 0x8 , Size: 4]
	float Steepness;//[Offset: 0xc , Size: 4]
	float TimeScale;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0 , Size: 20]
	WaveParameter Wave02;//[Offset: 0x14 , Size: 20]
	WaveParameter Wave03;//[Offset: 0x28 , Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c , Size: 20]
	WaveParameter Wave05;//[Offset: 0x50 , Size: 20]
	WaveParameter Wave06;//[Offset: 0x64 , Size: 20]
	WaveParameter Wave07;//[Offset: 0x78 , Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c , Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2c8 , Size: 4]
	Guid LandscapeGuid;//[Offset: 0x2cc , Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2dc , Size: 8]
	int MaxLODLevel;//[Offset: 0x2e4 , Size: 4]
	float LODDistanceFactor;//[Offset: 0x2e8 , Size: 4]
	int ForceLOD;//[Offset: 0x2ec , Size: 4]
	byte LODFalloff;//[Offset: 0x2f0 , Size: 1]
	int OccluderGeometryLOD;//[Offset: 0x2f4 , Size: 4]
	int StaticLightingLOD;//[Offset: 0x2f8 , Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2fc , Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x300 , Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304 , Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x308 , Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x30c , Size: 4]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310 , Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x314 , Size: 12]
	float NegativeZBoundsExtension;//[Offset: 0x320 , Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x324 , Size: 4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x328 , Size: 12]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x334 , Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x340 , Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	float StaticLightingResolution;//[Offset: 0x398 , Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c , Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39c , Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39c , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x39d , Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39e , Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39e , Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x3a0 , Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3a4 , Size: 24]
	int CollisionMipLevel;//[Offset: 0x3bc , Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x3c0 , Size: 4]
	float CollisionThickness;//[Offset: 0x3c4 , Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x3c8 , Size: 328]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510 , Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x510 , Size: 1]
	int ComponentSizeQuads;//[Offset: 0x514 , Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x518 , Size: 4]
	int NumSubsections;//[Offset: 0x51c , Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520 , Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x521 , Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522 , Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x216c974
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x12d4b64

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x500 , Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x50c , Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x518 , Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	float Width;//[Offset: 0x34 , Size: 4]
	float SideFalloff;//[Offset: 0x38 , Size: 4]
	float EndFalloff;//[Offset: 0x3c , Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40 , Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c , Size: 12]
	Box Bounds;//[Offset: 0x58 , Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0 , Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20 , Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40 , Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54 , Size: 12]
	Box Bounds;//[Offset: 0x60 , Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c , Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0 , Size: 4]
	float TangentLen;//[Offset: 0x4 , Size: 4]
	FName SocketName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0 , Size: 12]
	Vector Left;//[Offset: 0xc , Size: 12]
	Vector Right;//[Offset: 0x18 , Size: 12]
	Vector FalloffLeft;//[Offset: 0x24 , Size: 12]
	Vector FalloffRight;//[Offset: 0x30 , Size: 12]
	float StartEndFalloff;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5ac , Size: 88]
	Vector SplineUpDir;//[Offset: 0x604 , Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610 , Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610 , Size: 1]
	byte ForwardAxis;//[Offset: 0x611 , Size: 1]
	float SplineBoundaryMin;//[Offset: 0x614 , Size: 4]
	float SplineBoundaryMax;//[Offset: 0x618 , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x61c , Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x620 , Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x630 , Size: 1]
	void UpdateMesh();// 0x2de337c
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x2de32b8
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x2de31f8
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x2de3134
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x2de3070
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x2de2fb0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x2de2e10
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x2de2d3c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x2de2c78
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x2de2bb4
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x2de2af4
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x2de2a30
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x2de296c
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x2de28ac
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x2de27e8
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x2de2724
	Vector GetStartTangent();// 0x2de26dc
	Vector2D GetStartScale();// 0x2de269c
	float GetStartRoll();// 0x2de2674
	Vector GetStartPosition();// 0x2de262c
	Vector2D GetStartOffset();// 0x2de25ec
	Vector GetSplineUpDir();// 0x2de25a4
	byte GetForwardAxis();// 0x2de257c
	Vector GetEndTangent();// 0x2de2534
	Vector2D GetEndScale();// 0x2de24f4
	float GetEndRoll();// 0x2de24cc
	Vector GetEndPosition();// 0x2de2484
	Vector2D GetEndOffset();// 0x2de2444
	float GetBoundaryMin();// 0x2de241c
	float GetBoundaryMax();// 0x2dd2138

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0 , Size: 12]
	Vector StartTangent;//[Offset: 0xc , Size: 12]
	Vector2D StartScale;//[Offset: 0x18 , Size: 8]
	float StartRoll;//[Offset: 0x20 , Size: 4]
	Vector2D StartOffset;//[Offset: 0x24 , Size: 8]
	Vector EndPos;//[Offset: 0x2c , Size: 12]
	Vector EndTangent;//[Offset: 0x38 , Size: 12]
	Vector2D EndScale;//[Offset: 0x44 , Size: 8]
	float EndRoll;//[Offset: 0x4c , Size: 4]
	Vector2D EndOffset;//[Offset: 0x50 , Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c , Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28 , Size: 4]
	float GrassDensity;//[Offset: 0x2c , Size: 4]
	float PlacementJitter;//[Offset: 0x30 , Size: 4]
	int StartCullDistance;//[Offset: 0x34 , Size: 4]
	int EndCullDistance;//[Offset: 0x38 , Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d , Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0 , Size: 4]
	float GrassDensity;//[Offset: 0x4 , Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	float PlacementJitter;//[Offset: 0xc , Size: 4]
	int StartCullDistance;//[Offset: 0x10 , Size: 4]
	int EndCullDistance;//[Offset: 0x14 , Size: 4]
	int MinLod;//[Offset: 0x18 , Size: 4]
	enum Scaling;//[Offset: 0x1c , Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20 , Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28 , Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30 , Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b , Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0 , Size: 4]
	float Max;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x500 , Size: 4]
	int SectionBaseY;//[Offset: 0x504 , Size: 4]
	int ComponentSizeQuads;//[Offset: 0x508 , Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x50c , Size: 4]
	int NumSubsections;//[Offset: 0x510 , Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x514 , Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x518 , Size: 4]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x51c , Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534 , Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x538 , Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x544 , Size: 12]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x550 , Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x55c , Size: 12]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x568 , Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x570 , Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x580 , Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x590 , Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x5a0 , Size: 4]
	Box CachedLocalBox;//[Offset: 0x5a4 , Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x5c0 , Size: 28]
	Guid MapBuildDataId;//[Offset: 0x5dc , Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x5ec , Size: 12]
	int CollisionMipLevel;//[Offset: 0x5f8 , Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x5fc , Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x600 , Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x604 , Size: 4]
	float StaticLightingResolution;//[Offset: 0x608 , Size: 4]
	int ForcedLOD;//[Offset: 0x60c , Size: 4]
	int LODBias;//[Offset: 0x610 , Size: 4]
	Guid stateID;//[Offset: 0x614 , Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x624 , Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x634 , Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x638 , Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x63c , Size: 4]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x640 , Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x64c , Size: 4]
	uint16[] CachedHeightData;//[Offset: 0x650 , Size: 12]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0 , Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc , Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0 , Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4 , Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5 , Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20 , Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28 , Size: 4]
	float Hardness;//[Offset: 0x2c , Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30 , Size: 16]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x500 , Size: 12]
	int SectionBaseX;//[Offset: 0x50c , Size: 4]
	int SectionBaseY;//[Offset: 0x510 , Size: 4]
	int CollisionSizeQuads;//[Offset: 0x514 , Size: 4]
	float CollisionScale;//[Offset: 0x518 , Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x51c , Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x520 , Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x52c , Size: 16]
	Box CachedLocalBox;//[Offset: 0x53c , Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x558 , Size: 28]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x574 , Size: 24]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x598 , Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x654 , Size: 12]
	int NumBuiltInstances;//[Offset: 0x660 , Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x668 , Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x684 , Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x6a0 , Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x6ac , Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b8 , Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x6d8 , Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x6dc , Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd , Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x700 , Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x2d03958

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x5a8 , Size: 12]
	int InstancingRandomSeed;//[Offset: 0x5b4 , Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x5b8 , Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x5bc , Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x5c0 , Size: 12]
	int[] RemovedInstances;//[Offset: 0x5cc , Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8 , Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9 , Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x638 , Size: 4]
	int NumPendingLightmaps;//[Offset: 0x63c , Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x640 , Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x2d0d8c0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x2d0d804
	bool RemoveInstance(int InstanceIndex);// 0x2d0d77c
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x2d0d5e0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x2d0d420
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x2d0d288
	int GetInstanceCount();// 0x23a79fc
	void ClearInstances();// 0x2d0d26c
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x2d0d160
	int AddInstance(out const Transform InstanceTransform);// 0x2d0d040

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0 , Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x500 , Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x550 , Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x564 , Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x578 , Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x58c , Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0 , Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x5a4 , Size: 4]
	float Duration;//[Offset: 0x5a8 , Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac , Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad , Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ae , Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af , Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0 , Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1 , Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2 , Size: 1]
	float LoopPosition;//[Offset: 0x5b4 , Size: 4]
	Vector DefaultUpVector;//[Offset: 0x5b8 , Size: 12]
	void UpdateSpline();// 0x2de05cc
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x2de04f8
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x2de0398
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x2ddfbf0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x2de01e4
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x2de0084
	void SetSplineWorldPoints(out const Vector[] Points);// 0x2ddffb0
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x2ddfea8
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x2ddfd48
	void SetSplineLocalPoints(out const Vector[] Points);// 0x2ddfc74
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x2ddfbf0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x2ddfa90
	void SetDrawDebug(bool bShow);// 0x2ddfa10
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x2ddf944
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x2ddf830
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x2ddf760
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x2ddf69c
	bool IsClosedLoop();// 0x2ddf674
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x2ddf5e0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x2ddf4fc
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x2ddf468
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x2ddf384
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x2ddf2f0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x2ddf25c
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x2ddf178
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x2ddf0e4
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2ddefc0
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ddeeec
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2ddee18
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x2ddec64
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x2ddeb00
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x2dde99c
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dde878
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ddd67c
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dde7a4
	byte GetSplinePointType(int PointIndex);// 0x2dde724
	float GetSplineLength();// 0x2dde6fc
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x2dde620
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x2dde590
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x2dde500
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dde3dc
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dde308
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dde234
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dde124
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dde060
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dddf9c
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2ddde78
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dddda4
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2dddcd0
	int GetNumberOfSplinePoints();// 0x2dddca8
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2dddb84
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2dddab0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2ddd9dc
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x2ddd874
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x2ddd750
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ddd67c
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x2ddd5fc
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x2ddd57c
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x2ddd458
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ddd384
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x2ddd2b0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x2ddd220
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x2ddd14c
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddd068
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x2ddcef4
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddce10
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x2ddcd74
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddcc90
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddcbbc
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddcad8
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddc9f4
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x2ddc968
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x2ddc884
	void ClearSplinePoints(bool bUpdateSpline);// 0x2ddc804
	void AddSplineWorldPoint(out const Vector Position);// 0x2ddc778
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x2ddc618
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x2ddc500
	void AddSplineLocalPoint(out const Vector Position);// 0x2ddc474
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x2ddc358
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x2ddc250

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0 , Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14 , Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28 , Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c , Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0 , Size: 4]
	Quat OutVal;//[Offset: 0x10 , Size: 16]
	Quat ArriveTangent;//[Offset: 0x20 , Size: 16]
	Quat LeaveTangent;//[Offset: 0x30 , Size: 16]
	byte InterpMode;//[Offset: 0x40 , Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0 , Size: 4]
	float OutVal;//[Offset: 0x4 , Size: 4]
	float ArriveTangent;//[Offset: 0x8 , Size: 4]
	float LeaveTangent;//[Offset: 0xc , Size: 4]
	byte InterpMode;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0 , Size: 4]
	Vector Position;//[Offset: 0x4 , Size: 12]
	Vector ArriveTangent;//[Offset: 0x10 , Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	Vector Scale;//[Offset: 0x34 , Size: 12]
	byte Type;//[Offset: 0x40 , Size: 1]

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0 , Size: 8]
	float Density;//[Offset: 0x8 , Size: 4]
	float TestRadius;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0xbc , Size: 12]
	float MinCorrectionInterval;//[Offset: 0xc8 , Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0xcc , Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd0 , Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd4 , Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0xd8 , Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0xdc , Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0xe0 , Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0xe4 , Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0xe8 , Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0xec , Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0xf0 , Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0xf4 , Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0xf8 , Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0xfc , Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x100 , Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	float StaticFixLocation;//[Offset: 0x108 , Size: 4]
	float StaticFixAngel;//[Offset: 0x10c , Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x110 , Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x114 , Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a , Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b , Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x11c , Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x120 , Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x21c , Size: 60]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x1530b94
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x15309d8
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x15307e0
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x15305e8
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x153038c
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x1530180
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x152ff70
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x152fc9c
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x152f9c8
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x152f860
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x152f6f8
	void OnDriverRide();// 0x152f6e4
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x152f5dc
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x152f444
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x152f33c
	STExtraBaseCharacter*[] GetRiders();// 0x152f27c
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x152f1f0
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x152f110
	void DragUnderGround();// 0x152f0fc
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x152efe4
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x152eeb0
	bool CheckAndLoadLandscape(float DeltaTime);// 0x14cfe0c
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x152ede0
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x152ec5c

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0xd4 , Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0xe0 , Size: 12]
	float fRewindMaxSeconds;//[Offset: 0xec , Size: 4]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2 , Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3 , Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6 , Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7 , Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0xf8 , Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xfc , Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x104 , Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0x108 , Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d , Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e , Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f , Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110 , Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111 , Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112 , Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113 , Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	float TolerateFlyTime;//[Offset: 0x118 , Size: 4]
	float TolerateFlyDis;//[Offset: 0x11c , Size: 4]
	bool bOpenStillLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120 , Size: 1]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x124 , Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x128 , Size: 4]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c , Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x130 , Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x134 , Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x138 , Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x13c , Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x140 , Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x144 , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x148 , Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x14c , Size: 4]
	float TolerateShootRange;//[Offset: 0x150 , Size: 4]
	byte[] traceObjectTypes;//[Offset: 0x154 , Size: 12]
	float ShooterWeaponRange;//[Offset: 0x160 , Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x164 , Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x16c , Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x170 , Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174 , Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175 , Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176 , Size: 1]
	float TolerateLocusSingle;//[Offset: 0x178 , Size: 4]
	float TolerateLocusDist;//[Offset: 0x17c , Size: 4]
	float TolerateLocusSegment;//[Offset: 0x180 , Size: 4]
	float TolerateBoxExpand;//[Offset: 0x184 , Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x188 , Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x18c , Size: 4]
	float LocusSearchBackTime;//[Offset: 0x190 , Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x194 , Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x198 , Size: 4]
	float MaxGunPosLength;//[Offset: 0x19c , Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x1a0 , Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x1ac , Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8 , Size: 1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9 , Size: 1]
	float BonePointTorelate;//[Offset: 0x1bc , Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x1c0 , Size: 12]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x1cc , Size: 4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1 , Size: 1]
	Character* CharacterOwner;//[Offset: 0x1d4 , Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8 , Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9 , Size: 1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x1dc , Size: 4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x1e0 , Size: 4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4 , Size: 1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5 , Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1e8 , Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1ec , Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1f0 , Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1f4 , Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1f8 , Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1fc , Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x200 , Size: 4]
	float TolerateCharacterDis;//[Offset: 0x204 , Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x208 , Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x20c , Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x210 , Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x214 , Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x218 , Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x21c , Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x220 , Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x224 , Size: 4]
	float TolerateNetDelay;//[Offset: 0x228 , Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x22c , Size: 4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230 , Size: 1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x234 , Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x238 , Size: 4]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x23c , Size: 4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x240 , Size: 4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x244 , Size: 4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x248 , Size: 4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x24c , Size: 4]
	float VerifyDownShootCD;//[Offset: 0x250 , Size: 4]
	bool GM_VerifyActorPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c , Size: 1]
	float GrayWeaponAndShootAngle;//[Offset: 0x260 , Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x264 , Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x268 , Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x26c , Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x270 , Size: 24]
	Vector LastImpactPoint;//[Offset: 0x288 , Size: 12]
	byte VertifyMuzzleHeight(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x13a8bf8
	byte VertifyImpactActorPosWithNoLagCompensation(STExtraShootWeapon* ShootWeapon, Pawn* VictmPawn, out const Vector InImpactActorPos);// 0x13a8ae4
	byte VertifyClientAntiCheatResult(uint16 ClientAntiCheatResult, STExtraShootWeapon* ShootWeapon);// 0x13a8a20
	byte VerityOwnerAndGunBlock(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x13a890c
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13a7968
	byte VerifyWeaponOwnerPos(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13a87f0
	byte VerifyWeaponOwnerAndMuzzleDis(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13a86d4
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x13a7808
	float SimulatedCharacterServerTimeHighPrecision();// 0x13a86a4
	float SimulatedCharacterServerTime();// 0x13a77d8
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x13a85c8
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x13a84bc
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x13a83f8
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x13a8334
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x13a8270
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x13a81f0
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x13a812c
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x13a8068
	float GetNearAvgNetDelay(Pawn* TargetPawn, float NearNum);// 0x13a7fa4

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xc0 , Size: 16]
	float TolerateOwnerAndBulletDist;//[Offset: 0xd0 , Size: 4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0 , Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4 , Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8 , Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0 , Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4 , Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10 , Size: 12]
	Vector Offset;//[Offset: 0x1c , Size: 12]
	Vector PitchOffset;//[Offset: 0x28 , Size: 12]
	float ReferenceHSlope;//[Offset: 0x34 , Size: 4]
	float ReferenceVSlope;//[Offset: 0x38 , Size: 4]
	float HMinScale;//[Offset: 0x3c , Size: 4]
	float VMinScale;//[Offset: 0x40 , Size: 4]
	float HMaxScale;//[Offset: 0x44 , Size: 4]
	float VMaxScale;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0 , Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2 , Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4 , Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6 , Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8 , Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa , Size: 2]
	uint16 NetDelay;//[Offset: 0xc , Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10 , Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0 , Size: 12]
	Rotator Rotation;//[Offset: 0xc , Size: 12]
	Box BoundBox;//[Offset: 0x18 , Size: 28]
	Box HeadBoundBox;//[Offset: 0x34 , Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]
	Vector VehicleLocation;//[Offset: 0x54 , Size: 12]
	enum MoveBaseState;//[Offset: 0x60 , Size: 1]

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0 , Size: 4]
	int ItemCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0 , Size: 1]
	byte ViewYaw;//[Offset: 0x1 , Size: 1]
	byte ViewRoll;//[Offset: 0x2 , Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x2e8 , Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x2ec , Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x2f0 , Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	Rotator RelativeToOwnerRotator;//[Offset: 0x2f8 , Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	float MinPitch;//[Offset: 0x31c , Size: 4]
	float MaxPitch;//[Offset: 0x320 , Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x328 , Size: 4]
	float ResultMinPitch;//[Offset: 0x36c , Size: 4]
	float ResultMaxPitch;//[Offset: 0x370 , Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x374 , Size: 4]
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x134be50
	void DelayRotationLagEnabledEnd();// 0x12dedb4
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x152d9a0

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum noiseType;//[Offset: 0x0 , Size: 1]
	float Loudness;//[Offset: 0x4 , Size: 4]
	float StartAttenuationDist;//[Offset: 0x8 , Size: 4]
	float MaxRange;//[Offset: 0xc , Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0xc0 , Size: 12]
	FString OneceBuffTableName;//[Offset: 0xcc , Size: 12]
	FString ConditionBuffTableName;//[Offset: 0xd8 , Size: 12]
	STBuff*[] Buffs;//[Offset: 0xec , Size: 12]
	int SyncBriefNum;//[Offset: 0xf8 , Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0xfc , Size: 24]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x18c , Size: 24]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x21c , Size: 60]
	bool UpdateServerSyncBuff(STBuff* Buff);// 0x15bd748
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID);// 0x15bd600
	void RemoveClientBuff(int InstID);// 0x15bd588
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x15bd438
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x15bd2f0
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x15bd278
	void OnRep_SyncBriefs();// 0x15bd264
	bool HasSkillID(int SkillID);// 0x15bd1e4
	bool HasBuff(int BuffID);// 0x15bd164
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x15bd0a8
	bool HandleBuffTypeMutex(int BuffID);// 0x15bd028
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x15bcf20
	STBuff*[] GetBuffsByID(int BuffID);// 0x15bce18
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x15bccc8
	void CompareBuffPower(STBuff* Buff);// 0x15bcc50
	void ClearBuffs(bool IsClearAll);// 0x15bcbd0
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x15bca80

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x1c , Size: 12]
	FString Desc;//[Offset: 0x28 , Size: 12]
	Texture2D* Icon;//[Offset: 0x34 , Size: 4]
	int LayerMax;//[Offset: 0x38 , Size: 4]
	int InitialLayerCount;//[Offset: 0x3c , Size: 4]
	float Duration;//[Offset: 0x40 , Size: 4]
	float ClientSyncInterval;//[Offset: 0x44 , Size: 4]
	bool IsClientSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	enum TargetType;//[Offset: 0x49 , Size: 1]
	enum TargetSubype;//[Offset: 0x4a , Size: 1]
	enum RefreshType;//[Offset: 0x4b , Size: 1]
	enum ReActionType;//[Offset: 0x4c , Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x4d , Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x4e , Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f , Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x50 , Size: 12]
	int InstID;//[Offset: 0x5c , Size: 4]
	int BuffID;//[Offset: 0x60 , Size: 4]
	int LayerCount;//[Offset: 0x64 , Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	float endTime;//[Offset: 0x6c , Size: 4]
	Actor* Causer;//[Offset: 0x70 , Size: 8]
	Actor* Owner;//[Offset: 0x78 , Size: 8]
	int CauseSkillID;//[Offset: 0x80 , Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0x84 , Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	float PowerValue;//[Offset: 0x90 , Size: 4]
	float LastSyncClientTime;//[Offset: 0x94 , Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	void Tick(float DetalTime, float TimeSeconds);// 0x15ba934
	void ResetActionExecute();// 0x15ba920
	void RefreshEndTime();// 0x15ba90c
	void Initialize();// 0x15ba8f8
	void End();// 0x15ba8e4
	void EnabledRemove();// 0x15ba8d0
	void Destroy();// 0x15ba8bc
	bool CopyActions();// 0x15ba894
	void CheckOnceBuffForClient();// 0x15ba880
	void ChangeNotify();// 0x15ba86c
	void ChangeDuration(float NewDuration);// 0x15ba7f4

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x1c , Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x20 , Size: 8]
	int ArrayIndex;//[Offset: 0x28 , Size: 4]
	void Tick(float DetalTime);// 0x15bb428
	void SetEnabled(bool Enabled);// 0x15bb3a8
	void ResetExecute(bool IgnoreEnd);// 0x15bb328
	void OnTick(float DetalTime);// 0x12e2ab0
	void OnInitialize();// 0x1333500
	void OnExecute();// 0x13dc378
	void OnEnd();// 0x13dc3b0
	void OnDestroy();// 0x12f4c6c
	void OnChangeNotify();// 0x15bb30c
	void Initialize();// 0x15bb2f8
	STBuff* GetOwnerBuff();// 0x15bb2d0
	Actor* GetOwner();// 0x1421534
	bool GetIsExecute();// 0x15bb2b4
	Actor* GetCauser();// 0x15bb28c
	void End();// 0x15bb278
	void Destroy();// 0x15bb264
	STBuffAction* CopyAction(Object* Outer);// 0x15bb1dc
	void ChangeNotify();// 0x15bb1c8

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0 , Size: 4]
	int BuffID;//[Offset: 0x4 , Size: 4]
	int LayerCount;//[Offset: 0x8 , Size: 4]
	int CauseSkillID;//[Offset: 0xc , Size: 4]
	float SyncTime;//[Offset: 0x10 , Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x2b8 , Size: 12]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x2c4 , Size: 12]
	bool bFPPMeshLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0 , Size: 1]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1 , Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x2d4 , Size: 12]
	void PreChangeVehicleFPPMode();// 0x15269a4
	void PreChangeVehicleBrokenMataterial();// 0x1526990
	void PreChangeVehicleAvatar(int InItemID);// 0x1396078
	void PreChangeItemAvatar(int InItemID);// 0x13a231c
	void PostChangeItemAvatar();// 0x139605c
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x152690c
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x1526888
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x1526730
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x15265d8
	FString GetItemAvatarHandlePath(int ItemID);// 0x1bf56d0
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x1bf56d0
	void ExitFPPVehicle();// 0x15265c4
	void EnterFPPVehicle();// 0x15265b0
	bool CheckIsNeedEnterFPPVehicle();// 0x1526588

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1 , Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2 , Size: 1]
	int MasterCompLODLevel;//[Offset: 0x4e4 , Size: 4]
	int VehicleSkinID;//[Offset: 0x4e8 , Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec , Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x4f0 , Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x518 , Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x540 , Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x54c , Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x558 , Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x564 , Size: 12]
	FName FrontMatSlotName;//[Offset: 0x570 , Size: 8]
	FName TailMatSlotName;//[Offset: 0x578 , Size: 8]
	FName FPPMatSlotName;//[Offset: 0x580 , Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x588 , Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x58c , Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x590 , Size: 4]
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x15245b0
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x141b3a4
	void SetVehicleAvatarNormalMode();// 0x152459c
	void SetVehicleAvatarFPPMode();// 0x1524588
	void SetVehicleAvatarBroken();// 0x1524574
	void SetMasterBaseMeshPath(FString InPath);// 0x15244b8
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x15243fc
	void ResetAdvanceVehicleSkinID();// 0x133318c
	void RemoveAllEquippedStyle();// 0x15243e8
	bool ProcessHandleUnequip(enum InSlotType);// 0x1524368
	bool ProcessHandleEquip(enum InSlotType);// 0x15242e8
	void PreProcessBeforeLoadMesh();// 0x1322f10
	void PostProcessAfterLoadMesh();// 0x1322f48
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x1524270
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x15241f8
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x1bf56d0
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x1bf56d0
	void OnRep_BodySlotStateChanged();// 0x1337524
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x1bf56d0
	bool IsValidAvatar();// 0x15241d0
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x15240f4
	bool IsAvatarFPPMode();// 0x15240cc
	bool IsAvatarBroken();// 0x15240a4
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1524024
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x1523fa4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x1523f1c
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x1488204
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x1523e10
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x1523cb8
	void InitMasterComponent();// 0x1523ca4
	void Initialize();// 0x133689c
	void InitialAvatarParam();// 0x12dedb4
	int HasStyleEquipped(int InStyleID);// 0x1523c24
	int HasEquippedSameStyle(int InStyleID);// 0x1523ba4
	bool HandleUnequipStyle(int InStyleID);// 0x1523b24
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x141abdc
	bool HandleEquipStyle(int InStyleID);// 0x1523aa4
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x1523a7c
	MeshComponent* GetVehicleBodyMeshComp();// 0x1523a54
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x13361a0
	bool CanBeMeshMerge(int SlotID);// 0x15239d4

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0 , Size: 4]
	enum slotType;//[Offset: 0x4 , Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0 , Size: 1]
	int StyleValue;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0 , Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4 , Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0 , Size: 4]
	int ColorID;//[Offset: 0x4 , Size: 4]
	int PatternID;//[Offset: 0x8 , Size: 4]
	int ParticleID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4b0 , Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4bc , Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x4c8 , Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x1541bdc
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x1541b64
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x1541adc
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x1541a20
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x15417e0
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x15415cc
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x1541544
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x15414c4
	void OnRep_CurrentWeaponReplicated();// 0x15327b0
	void OnReconnectOnServer();// 0x133caac
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x154144c
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x1541300
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x1541288
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x15411d8
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x154111c
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x15410a4
	void DelayFire(float DelayTime, byte ShootMode);// 0x1540fe0

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0 , Size: 96]
	STExtraWeapon* Weapon;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0 , Size: 4]
	FName WeaponSocket;//[Offset: 0x8 , Size: 8]
	int WeaponSepcificID;//[Offset: 0x10 , Size: 4]
	int WeaponTypeID;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x238 , Size: 4]
	float TriggerInterval;//[Offset: 0x23c , Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x240 , Size: 4]
	void OnTriggered();// 0x1bf56d0

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0x95c , Size: 4]
	int ForceLifePeriodTime;//[Offset: 0x960 , Size: 4]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964 , Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x965 , Size: 1]
	delegate OnDeath;//[Offset: 0x968 , Size: 12]
	float DelayHideDuration;//[Offset: 0x974 , Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0x978 , Size: 4]
	float DelayHideDurationByHeadShoot;//[Offset: 0x97c , Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0x980 , Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0x984 , Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0x988 , Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0x98c , Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0x990 , Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0x994 , Size: 4]
	MonsterSingleDropIds[] DropIds;//[Offset: 0x998 , Size: 12]
	MonsterSingleBulletDropIds[] BulletDropIds;//[Offset: 0x9a4 , Size: 12]
	bool bPumkinAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0 , Size: 1]
	bool IsEnabledDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1 , Size: 1]
	bool IsExiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b2 , Size: 1]
	int MonsterSpawnTime;//[Offset: 0x9b4 , Size: 4]
	int MonsterDeathTime;//[Offset: 0x9b8 , Size: 4]
	float AnimBornLifeSpan;//[Offset: 0x9bc , Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0 , Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0x9c4 , Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0x9c8 , Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0x9cc , Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x9e0 , Size: 76]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xa2c , Size: 4]
	float MinTimeLockTarget;//[Offset: 0xa30 , Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xa34 , Size: 4]
	float SensedRadius;//[Offset: 0xa38 , Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xa3c , Size: 4]
	float HeardRadius;//[Offset: 0xa40 , Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xa44 , Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xa48 , Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xa4c , Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xa50 , Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xa54 , Size: 4]
	int SyncAIState;//[Offset: 0xa68 , Size: 4]
	int AIState;//[Offset: 0xa74 , Size: 4]
	float HurtAnimTime;//[Offset: 0xa78 , Size: 4]
	float BackAnimPerc;//[Offset: 0xa7c , Size: 4]
	delegate OnEnterAIState;//[Offset: 0xa80 , Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xa8c , Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xa98 , Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xaa4 , Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xab0 , Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xabc , Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xac8 , Size: 12]
	float SpeedScale;//[Offset: 0xaf0 , Size: 4]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf4 , Size: 1]
	float SpeedValue;//[Offset: 0xaf8 , Size: 4]
	int MonsterChapterID;//[Offset: 0xafc , Size: 4]
	int MonsterLevelID;//[Offset: 0xb00 , Size: 4]
	int MonsterWaveId;//[Offset: 0xb04 , Size: 4]
	int MonsterID;//[Offset: 0xb08 , Size: 4]
	int BornWeatherPhase;//[Offset: 0xb0c , Size: 4]
	int FlowId;//[Offset: 0xb10 , Size: 4]
	FString MonsterName;//[Offset: 0xb14 , Size: 12]
	FString MonsterNameID;//[Offset: 0xb20 , Size: 12]
	int MonsterSyncID;//[Offset: 0xb2c , Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30 , Size: 1]
	Vector BornPos;//[Offset: 0xb34 , Size: 12]
	RoadPointInfo[] RoadPoints;//[Offset: 0xb40 , Size: 12]
	int BornRandomRadius;//[Offset: 0xb4c , Size: 4]
	int ReBornTimes;//[Offset: 0xb50 , Size: 4]
	int ReBornDelay;//[Offset: 0xb54 , Size: 4]
	int MonsterType;//[Offset: 0xb58 , Size: 4]
	int MonsterFuncType;//[Offset: 0xb5c , Size: 4]
	int Gold;//[Offset: 0xb60 , Size: 4]
	int SuperGold;//[Offset: 0xb64 , Size: 4]
	int[] BornSkill;//[Offset: 0xb68 , Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xb74 , Size: 12]
	int HealthBarCount;//[Offset: 0xb80 , Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84 , Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xb88 , Size: 4]
	Actor* AttackTarget;//[Offset: 0xb8c , Size: 8]
	Pawn* CallPawn;//[Offset: 0xb94 , Size: 8]
	uint32 CallPawnKey;//[Offset: 0xb9c , Size: 4]
	int CallType;//[Offset: 0xba0 , Size: 4]
	byte SourceType;//[Offset: 0xba4 , Size: 1]
	uint32[] DecalIndexArray;//[Offset: 0xba8 , Size: 12]
	byte HitPartJudgment;//[Offset: 0xbb4 , Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xbb8 , Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0xbf4 , Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0xbfc , Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xc00 , Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0xc04 , Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0xc08 , Size: 4]
	float[] CircleDamageRate;//[Offset: 0xc0c , Size: 12]
	int ObjectPoolSize;//[Offset: 0xc18 , Size: 4]
	int LifePeriodTime;//[Offset: 0xc1c , Size: 4]
	float KilledDisCircleEdge;//[Offset: 0xc20 , Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0xc24 , Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28 , Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0xc2c , Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30 , Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38 , Size: 1]
	int RageLevel;//[Offset: 0xc54 , Size: 4]
	float AloneRageTimerRate;//[Offset: 0xc60 , Size: 4]
	float ImpluseScale;//[Offset: 0xc64 , Size: 4]
	float ImpluseZScale;//[Offset: 0xc68 , Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c , Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d , Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0xc70 , Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0xc74 , Size: 4]
	float MinDamageInterval;//[Offset: 0xc78 , Size: 4]
	float MovementTickInterval;//[Offset: 0xc7c , Size: 4]
	float DsActorTickInterval;//[Offset: 0xc80 , Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84 , Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0xc8c , Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0xc90 , Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0xc94 , Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0xc98 , Size: 4]
	float NoPathToTargetTimer;//[Offset: 0xc9c , Size: 4]
	enum AnimGroupMask;//[Offset: 0xca0 , Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8 , Size: 1]
	int ExplodeSkillID;//[Offset: 0xcac , Size: 4]
	float ExplodeSkillDuration;//[Offset: 0xcb0 , Size: 4]
	float LagCompensationRecordInterval;//[Offset: 0xd7c , Size: 4]
	bool TestPathSyncToLocation(Vector Location);// 0x14d303c
	bool TestPathSyncToActor(Actor* Actor);// 0x14d2fbc
	void StopMovementMode();// 0x1490664
	void StartMovementMode();// 0x1321528
	void ShowHeadShootDeadEffect();// 0x14d2fa8
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x14d2f30
	void ResetCharAnimParam();// 0x14d2f1c
	void OnRep_SyncAIState();// 0x14d2f08
	void OnRep_ReplicatedMovement();// 0x12d7a20
	void OnRep_RageLevel();// 0x12dedb4
	void OnRep_MonsterSyncID();// 0x14d2ef4
	void OnRep_MonsterNameID();// 0x14d2ee0
	void NotifyInitial();// 0x14d2ecc
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x14d2e08
	bool IsSameTeam(Pawn* Other);// 0x144d5a4
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x14d2d1c
	bool IsCanCopyBone();// 0x14d2cf4
	bool IsBoss();// 0x14d2ccc
	bool IsBigBoss();// 0x14d2ca4
	void InitHitBox();// 0x14d2c90
	void InitCharAnimParam();// 0x14d2c7c
	bool HasAIState(enum NewState);// 0x14d2bfc
	void HandleHitByBullet(Actor* Causer);// 0x14d2b84
	void GotoEarthAndDie();// 0x14d2b68
	Vector GetServerHeadLocation();// 0x14d2b20
	STExtraPlayerController* GetPlayerControllerSafety();// 0x144bbac
	int GetMonsterType();// 0x14d2b04
	float GetHitBoxRadius();// 0x14d2ae8
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x14d2a54
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x14d2988
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x14d2814
	byte GetCurHitPartJugementType();// 0x14d27ec
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x14d27c4
	SimpleCharAnimParamList GetAnimParam();// 0x14d2748
	int GetAliveTimeSeconds();// 0x14d272c
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x14d2470
	void EnterAIState(enum NewState, bool bIsNotify);// 0x14d23ac
	void DisappearOnDeath();// 0x14496fc
	void DieAfterExplode();// 0x14d2398
	void DelayHidden();// 0x14494a0
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x14d22b8
	bool CheckPlayerNeedUpdateAnimation();// 0x14d2290
	bool CheckHasFunc(enum Func);// 0x14d2208
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x14d20fc
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x14d1f68
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x14d1e58
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x14d1d48
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d1acc
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d17e4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d1568
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d12ec
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d105c
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d0de0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d0b64
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d08e8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d0664
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x14d037c
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x14d01e8
	void BroadcastClientsDebugSpeed(float Speed);// 0x14d0134
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x14d0080
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x1bf56d0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1bf56d0
	void BPNotifyInitial();// 0x1bf56d0
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1bf56d0
	void BPMonsterInitTableDone();// 0x1bf56d0
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x14cff0c
	bool BP_HasAIState(enum NewState);// 0x14cfe8c
	bool AllowAIState(enum NewState);// 0x14cfe0c
	void AddWeaponDamageAddition(byte WeaponType);// 0x14cfd94
	bool AddHealthSafety(float AddVal, Controller* DamageInstigator, out const DamageEvent DamageEvente, Actor* DamageCauser, bool bHeadShot);// 0x14cfbd0

--------------------------------
Class: MonsterSingleDropIds

--------------------------------
Class: MonsterSingleBulletDropIds
	int[] BulletDropIds;//[Offset: 0x0 , Size: 12]
	int[] BulletDropParams;//[Offset: 0xc , Size: 12]

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0 , Size: 12]
	Vector movedir;//[Offset: 0xc , Size: 12]
	byte MovementMode;//[Offset: 0x18 , Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c , Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	Vector HurtDir;//[Offset: 0x2c , Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a , Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b , Size: 1]
	int RandomAnimID;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc , Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4 , Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c , Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130 , Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134 , Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138 , Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c , Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140 , Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x144 , Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218 , Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219 , Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a , Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x21c , Size: 12]
	void TeleportNextSync();// 0x1413368
	void StopPredict();// 0x1413354
	void SetVelocity(out const Vector Velocity);// 0x14132d0
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x14131d0
	void OnRep_Snapshot();// 0x14131bc
	Vector GetVelocity();// 0x1413174

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c , Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28 , Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4 , Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8 , Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc , Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc , Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0 , Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4 , Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8 , Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc , Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0 , Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4 , Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8 , Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc , Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0 , Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xe4 , Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xe8 , Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xec , Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0 , Size: 4]
	float Stride_Duration;//[Offset: 0xf4 , Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8 , Size: 4]
	float Stride_HeightOffset;//[Offset: 0xfc , Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x100 , Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x104 , Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108 , Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c , Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110 , Size: 1]
	int iWallClimbState;//[Offset: 0x114 , Size: 4]
	int iWallJumpState;//[Offset: 0x118 , Size: 4]
	int iStrideState;//[Offset: 0x11c , Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x13bbf48
	void WallJump(Vector DstLocation);// 0x13bbed8
	void WallClimbExit();// 0x13bbec4
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x13bbdbc
	void TickWallJump_Turn(float DeltaTime);// 0x13bbd44
	void TickWallJump(float DeltaTime);// 0x13bbccc
	void TickWallClimb_Turn(float DeltaTime);// 0x13bbc54
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x13bbbdc
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x13bbb64
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x13bbaec
	void TickWallClimb(float DeltaTime);// 0x13bba74
	void TickStride_Turn(float DeltaTime);// 0x13bb9fc
	void TickStride_Stride(float DeltaTime);// 0x13bb984
	void TickStride_MoveToWall(float DeltaTime);// 0x13bb90c
	void TickStride(float DeltaTime);// 0x13bb894
	void StrideJump();// 0x13bb880
	void StrideExit();// 0x13bb86c
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x13bb794
	void OnMobDie();// 0x13bb780
	void NotifyClientsWallClimbSyncState(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x13bb674
	void NotifyClientsWallClimbStartClimbToStand(Vector Pos, Rotator Rotator, int nowWallClimbState);// 0x13bb568
	void NotifyClientsStrideState(Vector Pos, Rotator Rotator, int nowStrideState);// 0x13bb45c
	void NotifyClientsStartStride(Vector Pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x13bb208
	bool IsInAdvancedMovement();// 0x13bb1e0
	int GetWallJumpState();// 0x13bb1b8
	int GetWallClimbState();// 0x13bb190
	int GetStrideState();// 0x13bb168
	void BPWallJump(Vector DstLocation);// 0x13bb0f0
	void BPWallClimb(Vector DstLocation);// 0x13bb078

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc , Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xc0 , Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xcc , Size: 1]
	int NoisePoolSize;//[Offset: 0xd0 , Size: 4]
	float NoiseRememberTime;//[Offset: 0xd4 , Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xd8 , Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x13bdcd0
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x13bdbc0
	void OnMobDie();// 0x13bdbac
	void ClearNoisePool();// 0x13bdbac
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x13bda0c
	float Attenuation(out AIStimulus Stimulus);// 0x13bd874
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x13bd658

--------------------------------
Class: NoiseInfo
	enum noiseType;//[Offset: 0x0 , Size: 1]
	Actor* Instigator;//[Offset: 0x4 , Size: 8]
	Vector NoiseLocation;//[Offset: 0xc , Size: 12]
	float LoudnessAtStart;//[Offset: 0x18 , Size: 4]
	float LoudnessHeard;//[Offset: 0x1c , Size: 4]
	float HeardTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x110 , Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x2509230
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x25091b0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x250909c

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0 , Size: 4]
	AIController* AIOwner;//[Offset: 0xc4 , Size: 4]
	void StopLogic(FString Reason);// 0x250c890
	void RestartLogic();// 0x12d7a20
	bool IsRunning();// 0x1416da8
	bool IsPaused();// 0x1416d78

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc , Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0 , Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xdc , Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x250ae7c
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x250acc8
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x250abf4
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x250ab20
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x250aa4c
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x250a978
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x250a8a4
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x250a7d0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x250a6fc
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x250a620
	bool IsVectorValueSet(out const FName KeyName);// 0x250a58c
	Vector GetValueAsVector(out const FName KeyName);// 0x250a4e8
	FString GetValueAsString(out const FName KeyName);// 0x250a3cc
	Rotator GetValueAsRotator(out const FName KeyName);// 0x250a328
	Object* GetValueAsObject(out const FName KeyName);// 0x250a294
	FName GetValueAsName(out const FName KeyName);// 0x250a1f8
	int GetValueAsInt(out const FName KeyName);// 0x250a164
	float GetValueAsFloat(out const FName KeyName);// 0x250a0d0
	byte GetValueAsEnum(out const FName KeyName);// 0x250a03c
	class Object GetValueAsClass(out const FName KeyName);// 0x2509fa8
	bool GetValueAsBool(out const FName KeyName);// 0x2509f14
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x2509e2c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x2509d44
	void ClearValue(out const FName KeyName);// 0x2509cb8

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20 , Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24 , Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0 , Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8 , Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20 , Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c , Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c , Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20 , Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24 , Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30 , Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c , Size: 12]
	BTService*[] Services;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0 , Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4 , Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8 , Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c , Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c , Size: 4]
	float RandomDeviation;//[Offset: 0x40 , Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c , Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d , Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0 , Size: 1]
	uint16 Number;//[Offset: 0x2 , Size: 2]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338 , Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338 , Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338 , Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338 , Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338 , Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338 , Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x33c , Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x340 , Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x344 , Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x348 , Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x34c , Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x350 , Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x354 , Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x358 , Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365 , Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x250069c
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x2500624
	void SetMoveBlockDetection(bool bEnable);// 0x25005a4
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x250051c
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x1bf56d0
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x1bf56d0
	void OnPossess(Pawn* PossessedPawn);// 0x1bf56d0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x2500458
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x25001b0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x24fff68
	void K2_SetFocus(Actor* NewFocus);// 0x24ffef0
	void K2_SetFocalPoint(Vector FP);// 0x24ffe80
	void K2_ClearFocus();// 0x24ffe6c
	bool HasPartialPath();// 0x24ffe44
	PathFollowingComponent* GetPathFollowingComponent();// 0x21b43a4
	byte GetMoveStatus();// 0x24ffe1c
	Vector GetImmediateMoveDestination();// 0x24ffdd4
	Actor* GetFocusActor();// 0x24ffdac
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x24ffd14
	Vector GetFocalPoint();// 0x24ffccc
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x24ffcb0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x24ffc38

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x100 , Size: 4]
	NavigationData* MyNavData;//[Offset: 0x10c , Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x251d42c
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x251d2bc
	Vector GetPathDestination();// 0x251d274
	byte GetPathActionType();// 0x251d24c

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xbc , Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8 , Size: 4]
	AIController* AIOwner;//[Offset: 0xe0 , Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140 , Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c , Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x25024f8
	void RequestStimuliListenerUpdate();// 0x25024e4
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x2502428
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x250235c
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x250224c
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x250213c
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x250202c
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x2501f04

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c , Size: 4]
	float MaxAge;//[Offset: 0x20 , Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24 , Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c , Size: 4]
	enum NotifyType;//[Offset: 0x20 , Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21 , Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c , Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68 , Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x25034b0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x2503438
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x2503338
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x250327c
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x25030a8

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0 , Size: 4]
	float ExpirationAge;//[Offset: 0x4 , Size: 4]
	float Strength;//[Offset: 0x8 , Size: 4]
	Vector StimulusLocation;//[Offset: 0xc , Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18 , Size: 12]
	FName Tag;//[Offset: 0x28 , Size: 8]
	int iExtraData;//[Offset: 0x40 , Size: 4]
	int iExtraData;//[Offset: 0x44 , Size: 4]
	int iExtraData;//[Offset: 0x48 , Size: 4]
	float fExtraData;//[Offset: 0x4c , Size: 4]
	float fExtraData;//[Offset: 0x50 , Size: 4]
	float fExtraData;//[Offset: 0x54 , Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58 , Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0 , Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4 , Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc , Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0 , Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc , Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8 , Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x251ec5c
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x251eb54
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x251ead4
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x251ea54

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c , Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20 , Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24 , Size: 4]
	Object* Instigator;//[Offset: 0x28 , Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c , Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50 , Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50 , Size: 1]
	byte GetActionPriority();// 0x251db08
	void Finish(byte WithResult);// 0x251da80
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x251d9c4

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0 , Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xcc , Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xe4 , Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf0 , Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100 , Size: 12]
	void OnRep_SimulatedTasks();// 0x2453938
	static enum K2_RunGameplayTask(interface classByteProperty TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x24535c4

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20 , Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a , Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44 , Size: 4]
	void ReadyForActivation();// 0x2451c44
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1bf56d0
	void EndTask();// 0x2451c30

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c , Size: 4]
	int8 AutoResourceID;//[Offset: 0x20 , Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	enum noiseType;//[Offset: 0x1 , Size: 1]
	float LoudnessHeard;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc , Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc0 , Size: 4]
	float StepHeight;//[Offset: 0xc4 , Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xc8 , Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	void AddVelocity(Vector InVelocity);// 0x14d49cc

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc , Size: 1]
	byte Type;//[Offset: 0xbd , Size: 1]
	int TypeID;//[Offset: 0xc0 , Size: 4]
	void SetActorVisible(bool bEnable);// 0x151fc74

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0 , Size: 4]
	int Radius;//[Offset: 0x4 , Size: 4]
	Vector Pos;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0 , Size: 4]
	int DownThreshold;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	byte VerifyShootPoint(STExtraCharacter* Victim, out const Vector MuzzlePos, Pawn* AttackPawn);// 0x13fae2c
	float SimulatedCharacterServerTime();// 0x13a77d8
	byte ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* shooter, out const BulletHitInfoUploadData ShootData);// 0x13facd4
	byte GetHitType(STExtraCharacter* Victim, out const Vector ShootMuzzlePos, out const Vector ImpactPoint);// 0x13faba8

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x2fc , Size: 44]
	int KeepStillMinTime;//[Offset: 0x328 , Size: 4]
	float StillMaxSpeed;//[Offset: 0x32c , Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x330 , Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x33c , Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x348 , Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x354 , Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x360 , Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x36c , Size: 12]
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x13a7968
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x13a7808
	float SimulatedCharacterServerTime();// 0x13a77d8

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0 , Size: 4]
	int MaxContinueTimes;//[Offset: 0x4 , Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8 , Size: 4]
	float MaxCheatTimes;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8 , Size: 20]
	Vector Origin;//[Offset: 0x1c , Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0 , Size: 4]
	float MinimumDamage;//[Offset: 0x4 , Size: 4]
	float InnerRadius;//[Offset: 0x8 , Size: 4]
	float OuterRadius;//[Offset: 0xc , Size: 4]
	float DamageFalloff;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0xd0 , Size: 12]
	float SeekAreaPixelSize;//[Offset: 0xdc , Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0xe0 , Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0xe8 , Size: 8]
	float ScopeInDelayTime;//[Offset: 0xf0 , Size: 4]
	float InitialLockFrameLength;//[Offset: 0xf4 , Size: 4]
	float FinalLockFrameLength;//[Offset: 0xf8 , Size: 4]
	float MaxSeekDeistance;//[Offset: 0xfc , Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x100 , Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x104 , Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x108 , Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x10c , Size: 4]
	float TraceTargetInterval;//[Offset: 0x110 , Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x114 , Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x150 , Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x18c , Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1c8 , Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x1cc , Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x1d0 , Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x1d4 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1d8 , Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc , Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x1e0 , Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x1ec , Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x1f8 , Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x214 , Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x218 , Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x21c , Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220 , Size: 1]
	void ShowEnemyLaunchRocketTips();// 0x140d850
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x140d754
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x140d6a0
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x140d5a4
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x140d4f0
	void RemoveTargetList(Actor*[] TargetList);// 0x140d398
	void RemoveTarget(Actor* Target);// 0x140d320
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x1bf56d0
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x1bf56d0
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x1bf56d0
	void InitComplete();// 0x12dedb4
	void HandleTargetOutOfSeekArea();// 0x140d30c
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x140d294
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x140d294
	enum GetCurrentSeekAndLockStage();// 0x140d26c
	Actor* GetCurrentLockTarget();// 0x140d244
	bool CheckTargetIsVisible(Actor* Target);// 0x140d1c4
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x140d144
	void AddTarget(Actor* Target);// 0x140d0cc

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0 , Size: 4]
	float ShrinkSpeed;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc , Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0 , Size: 4]
	int MaxCheatTimes;//[Offset: 0xc4 , Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xc8 , Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc , Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0 , Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4 , Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8 , Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc , Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe4 , Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xe8 , Size: 4]
	float MaxSkeletonLength;//[Offset: 0xec , Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0 , Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4 , Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8 , Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0xfc , Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x100 , Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x104 , Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x108 , Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x114 , Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x120 , Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x12c , Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x138 , Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x144 , Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x150 , Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x15c , Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x168 , Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x174 , Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x180 , Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x18c , Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x198 , Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1a4 , Size: 12]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x220 , Size: 136]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2a8 , Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x2f8 , Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x330 , Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x400 , Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x460 , Size: 32]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x480 , Size: 1396]
	float MaxJumpHeight;//[Offset: 0x9f8 , Size: 4]
	Character* CharacterOwner;//[Offset: 0x9fc , Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c , Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0xa74 , Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x13cad4c
	void RefreshRealMaxJumpHeight();// 0x13cad38
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x13cabbc
	void Ping2Client(float ServerTime);// 0x13cab44
	void OnPreReconnectOnServer();// 0x13cab30
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x13ca8c4
	void DebugDrawLine(const Vector Start, const Vector End);// 0x13ca818
	void ClearJumpLimit();// 0x13ca804

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0 , Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4 , Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc , Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14 , Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18 , Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c , Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20 , Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24 , Size: 4]
	int MaxClientSpeed;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8 , Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10 , Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14 , Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4 , Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0 , Size: 4]
	float DataSampleInterval;//[Offset: 0x4 , Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8 , Size: 4]
	float CheatLockTime;//[Offset: 0xc , Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10 , Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24 , Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c , Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30 , Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34 , Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8 , Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc , Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10 , Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc , Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0 , Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x131897c

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x135bdd0
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x135bbac
	void S2A_EndEffectGraph(int Uid);// 0x12d79a0
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x135b940

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0xc4 , Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0xd8 , Size: 4]
	float FreeFall_AcceFall;//[Offset: 0xdc , Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0xe0 , Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0xe4 , Size: 4]
	float FreeFall_AcceForward;//[Offset: 0xe8 , Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0xec , Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0xf0 , Size: 4]
	float FreeFall_AcceRight;//[Offset: 0xf4 , Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0xf8 , Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0xfc , Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x100 , Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x104 , Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x108 , Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x10c , Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x110 , Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x114 , Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x118 , Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	float Opened_AcceFall;//[Offset: 0x120 , Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x124 , Size: 4]
	float Opened_AcceForward;//[Offset: 0x128 , Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x12c , Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x130 , Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x134 , Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x138 , Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x13c , Size: 4]
	float Opened_AcceRight;//[Offset: 0x140 , Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x144 , Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x148 , Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x14c , Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x150 , Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x154 , Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x158 , Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x15c , Size: 4]
	float CurrentFallSpeed;//[Offset: 0x160 , Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x164 , Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	float FollowerDist;//[Offset: 0x190 , Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x194 , Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x133bb64
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator CameraRotation);// 0x133b9c8
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator CameraRotation);// 0x133b82c
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x133b72c
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x133b5e0
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x133b48c
	void StopParachute();// 0x133b478
	void StartParachute();// 0x133b464
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x133b3e4
	void ResetVelocity();// 0x133b3d0
	void PostNetReceiveNewState();// 0x133b3bc
	void OnPreReconnectOnServer();// 0x133b3a8
	void InvalidateAdjustFollowerLocation();// 0x133b394
	float GetReplicatedRightInput();// 0x133b36c
	float GetReplicatedForwardInput();// 0x133b344
	Vector GetParachuteVelocity();// 0x133b2fc
	void ClearParachuteStatusCache();// 0x133b2e8
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x133b1cc
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x133b0b0
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x133af60
	void AdjustFollowerLocation();// 0x133af4c

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc , Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0 , Size: 4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]
	int[] AdditionIntData;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0 , Size: 4]
	int upassLevel;//[Offset: 0x4 , Size: 4]
	int upassScore;//[Offset: 0x8 , Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe , Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	FString iconUrl;//[Offset: 0x10 , Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int upassKeepBuy;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0 , Size: 4]
	int PetLevel;//[Offset: 0x4 , Size: 4]
	int PetCfgId;//[Offset: 0x8 , Size: 4]
	int[] PetAvatarList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0 , Size: 4]
	int process;//[Offset: 0x4 , Size: 4]
	FString ext_info;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0 , Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xc8 , Size: 12]
	delegate OnBuffDetached;//[Offset: 0xd4 , Size: 12]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x120 , Size: 12]
	FString ServerBuffString;//[Offset: 0x12c , Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x138 , Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x13c , Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150 , Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x15b80f0
	void ResetForDeath();// 0x15b80dc
	void RepBuffSyncList();// 0x15b80c8
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x15b7fac
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x15b7e50
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15b7d34
	void RefreshAllBuffs();// 0x1344650
	bool IsBufferMutexed(FName NewBuffName);// 0x15b7cb4
	bool HasBuffID(int BuffID);// 0x15b7c34
	bool HasBuff(FName BuffName);// 0x15b7bb4
	Pawn* GetPawnOwner();// 0x15b7b8c
	FName GetBuffName(int BuffID);// 0x15b7b04
	int GetBuffID(FName BuffName);// 0x15b7a84
	float GetBuffExpiry(out const FName BuffName);// 0x15b79f0
	STBaseBuff* GetBuffByName(FName BuffName);// 0x15b7970
	Actor* GetActorOwner();// 0x15b7948
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15b76e8
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x15b77fc
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x15b76e8
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x15b759c
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x15b74d8
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x15b7408
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x15b7334
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x1bf56d0
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x1bf56d0
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x15b7270
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x15b71a4
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x15b704c
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x15b6eb0

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0 , Size: 8]
	Controller* BuffCauser;//[Offset: 0x8 , Size: 4]
	int LayerCount;//[Offset: 0xc , Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x10 , Size: 4]
	float RemainingTime;//[Offset: 0x14 , Size: 4]
	float ExpireTime;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0 , Size: 8]
	int BuffID;//[Offset: 0x8 , Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc , Size: 8]
	int LayerCount;//[Offset: 0x14 , Size: 4]
	Controller* CauserPawnController;//[Offset: 0x18 , Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	float Expiry;//[Offset: 0x20 , Size: 4]
	Actor* Target;//[Offset: 0x24 , Size: 4]
	Actor* BuffApplier;//[Offset: 0x28 , Size: 4]
	int BuffIndex;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x20 , Size: 12]
	FString DisplayName;//[Offset: 0x2c , Size: 12]
	FString Message;//[Offset: 0x38 , Size: 12]
	Texture2D* Icon;//[Offset: 0x44 , Size: 4]
	SoundBase* SoundData;//[Offset: 0x48 , Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d , Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e , Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f , Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51 , Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52 , Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53 , Size: 1]
	int LayerMax;//[Offset: 0x54 , Size: 4]
	int InitialLayerCount;//[Offset: 0x58 , Size: 4]
	int LayerCount;//[Offset: 0x5c , Size: 4]
	float ValidityTime;//[Offset: 0x60 , Size: 4]
	float Internal;//[Offset: 0x64 , Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x68 , Size: 12]
	float Expiry;//[Offset: 0x74 , Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0x78 , Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85 , Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x86 , Size: 1]
	FName[] MutexBuffers;//[Offset: 0x88 , Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0x94 , Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xa0 , Size: 12]
	float fADScale;//[Offset: 0xac , Size: 4]
	float fAPScale;//[Offset: 0xb0 , Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	Controller* CauserPawnController;//[Offset: 0xb8 , Size: 4]
	Actor* CauserPawnActor;//[Offset: 0xbc , Size: 4]
	Actor* BuffApplier;//[Offset: 0xcc , Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xd0 , Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x10c , Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x3787108
	bool IsOK_Internal();// 0x3787094
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x3786fa4

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	FString WidgetDescription;//[Offset: 0xc4 , Size: 12]
	Actor* BuffTargetActor;//[Offset: 0xd0 , Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0xd4 , Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0xdc , Size: 4]
	UAEBlackboard* GetUAEBlackboard();// 0x37877ec
	Actor* GetOwnerPawn();// 0x378777c

--------------------------------
Class: UTSkill.Actor.Object
	Pawn* OwnerPawn;//[Offset: 0x2d0 , Size: 8]
	FString SkillName;//[Offset: 0x2e0 , Size: 12]
	int SkillID;//[Offset: 0x2ec , Size: 4]
	enum SkillTargetType;//[Offset: 0x2f0 , Size: 1]
	FString SkillDescription;//[Offset: 0x2f4 , Size: 12]
	FString SkillDetailDes;//[Offset: 0x300 , Size: 12]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d , Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e , Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x310 , Size: 48]
	Texture2D* SkillIcon;//[Offset: 0x340 , Size: 4]
	Texture2D* SkillVehicleIcon;//[Offset: 0x344 , Size: 4]
	FString SkillVehicleName;//[Offset: 0x348 , Size: 12]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354 , Size: 1]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355 , Size: 1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356 , Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x358 , Size: 12]
	bool IsCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364 , Size: 1]
	bool bAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365 , Size: 1]
	Actor* LastSpawnedActor;//[Offset: 0x368 , Size: 8]
	Pawn* LastSpawnedPawn;//[Offset: 0x370 , Size: 8]
	float PhasePercentage;//[Offset: 0x39c , Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x3a0 , Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x3dc , Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x3e0 , Size: 12]
	int64 LastEditBluePrintTime;//[Offset: 0x3f0 , Size: 8]
	int CurComponentNameIndex;//[Offset: 0x3f8 , Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc , Size: 1]
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x3785384
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x37851b8
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x37850dc
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x3784ff0
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x3784ea0
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x3784dbc
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x3784c38

--------------------------------
Class: UTSkillCreateData
	int SkillGroupIndex;//[Offset: 0x0 , Size: 4]
	float Interval;//[Offset: 0x4 , Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x8 , Size: 4]
	FString CoolDownMessage;//[Offset: 0xc , Size: 12]
	int CoolDownMessageID;//[Offset: 0x18 , Size: 4]
	float Range;//[Offset: 0x1c , Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x20 , Size: 12]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0xc0 , Size: 12]
	FString PhaseDescription;//[Offset: 0xcc , Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0xdc , Size: 8]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x104 , Size: 96]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x178 , Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x378eef4
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x378c6f4
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x378ee10
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x378ed2c
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x378ebd0
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x378ea74
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x378e990
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x378e830
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x378e6d0
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x378e5f4
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x378e504
	bool ClearAttachments();// 0x378e498

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0 , Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4 , Size: 12]
	float AltPhaseDuration;//[Offset: 0x10 , Size: 4]
	float CacheMouseInputTime;//[Offset: 0x14 , Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x1c , Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x28 , Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x2c , Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x38 , Size: 12]
	enum PhaseType;//[Offset: 0x44 , Size: 1]
	FString EnterPhaseTipString;//[Offset: 0x48 , Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x54 , Size: 12]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0xe0 , Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x10c , Size: 12]
	Actor*[] IgnoreTargets;//[Offset: 0x118 , Size: 12]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0 , Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8 , Size: 8]
	enum PickerTargetType;//[Offset: 0x10 , Size: 1]
	int PickerMaxCount;//[Offset: 0x14 , Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a , Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b , Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0 , Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8 , Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	byte HitPos;//[Offset: 0x11 , Size: 1]
	FName BoneName;//[Offset: 0x18 , Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20 , Size: 12]
	byte hitPhysMatType;//[Offset: 0x2c , Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d , Size: 1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0xe0 , Size: 4]
	float fAPScale;//[Offset: 0xe4 , Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0xe8 , Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x3787df4
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3787d10
	void OnAsyncLoadSoftPathDone();// 0x3787cb0
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x3787b60
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3785e38

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0xc4 , Size: 4]
	int[] SkillInitIndices;//[Offset: 0xc8 , Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	class UTSkill[] SkillArchetypes;//[Offset: 0xd8 , Size: 12]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5 , Size: 1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6 , Size: 1]
	UTSkill*[] Skills;//[Offset: 0xe8 , Size: 12]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0xf4 , Size: 60]
	Actor* Target;//[Offset: 0x16c , Size: 4]
	Actor*[] RepTargets;//[Offset: 0x170 , Size: 12]
	UTSkillSynData SkillSynData;//[Offset: 0x17c , Size: 24]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x194 , Size: 12]
	delegate OnSkillHit;//[Offset: 0x1a0 , Size: 12]
	delegate OnSkillCast;//[Offset: 0x1ac , Size: 12]
	float PhasePercentage;//[Offset: 0x1d0 , Size: 4]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x1d8 , Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x200 , Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x228 , Size: 12]
	FString LastESkillTargetDesc;//[Offset: 0x24c , Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x258 , Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x25c , Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x264 , Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x268 , Size: 60]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc , Size: 1]
	<int,int> SkillHandleToIndexMap;//[Offset: 0x2c0 , Size: 60]
	UTAddedSkillSturct[] AddedSkillStructList;//[Offset: 0x2fc , Size: 12]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x308 , Size: 12]
	float ZombieModeUseSkillCD;//[Offset: 0x314 , Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x31c , Size: 4]
	bool TriggerEvent(int SkillID, byte EventType);// 0x378cee8
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x378cbdc
	void SwitchSkill(int SkillID, byte EventType);// 0x378ca88
	void StopSkill(int SkillID, enum StopReason);// 0x378c938
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x378c7d8
	void SetSkillOwner(Actor* tempActor);// 0x378c6f4
	void SetCurSkill(int SkillIndex);// 0x378c624
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x378c48c
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x378c308
	void ServerNotifyRandomSeed(int Seed);// 0x378c1e8
	void RepSkillSynData();// 0x37861bc
	void RepSkillHitInfo();// 0x378c188
	void RepLastCastTime();// 0x378c128
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x378bfe8
	bool PreCheckNewSkill(int SkillID);// 0x378bef8
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x378bdb0
	static bool OnSameTeam(Actor* A, Actor* B);// 0x378bc78
	void OnRep_SkillHitInfo();// 0x378bc10
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x378ba14
	void OnAsyncLoadFinishedByItem(int SkillIndex);// 0x378b944
	bool LoadSyncIfLoadingWithSkillIndex(int SkillIndex);// 0x378b868
	bool LoadSyncIfLoading(class UTSkill SkillClass);// 0x378b698
	bool IsReadyToCastSkill(int SkillID);// 0x3785e38
	bool IsCastingSkill();// 0x378b624
	void InitSkillSystem(bool isDedicateServer);// 0x378b514
	int GetSkillIndexByClass(class Object SkillClass);// 0x378b428
	UTSkill* GetSkillByName(FString SkillName);// 0x378b2b0
	UTSkill* GetSkill(int SkillID);// 0x378b1c4
	UTSkillPhase* GetCurSkillPhase();// 0x378b15c
	int GetCurSkillIndex();// 0x378b0f4
	UTSkill* GetCurSkill();// 0x378b08c
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x378af14
	void ClearSkill();// 0x378aeac
	bool CheckNewSkill(int SkillID);// 0x378adbc
	void CheckAutoSkill();// 0x37863c4
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x378ac88

--------------------------------
Class: UAEBlackboard.Object
	<FName,Object*> ObjectParamMap;//[Offset: 0x1c , Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x58 , Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x94 , Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xd0 , Size: 60]
	<FName,int> IntParamMap;//[Offset: 0x10c , Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x148 , Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x184 , Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1c0 , Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1fc , Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x238 , Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x274 , Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x2b0 , Size: 60]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x3797098
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x3796fc4
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x3796e10
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x3796d3c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x3796c68
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x3796b94
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x3796ac0
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x37969ec
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x3796918
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x3796844
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x3796768
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x37966d4
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x3796640
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x37965ac
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x3796518
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x3796484
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x37963f0
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x379635c
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x37962c8
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x3796234
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x37961a0
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x379610c
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x3796078
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x3795fd4
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x3795eb8
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x3795e14
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x3795d80
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x3795ce4
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x3795c50
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x3795bbc
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x3795b28
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x3795a94
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x3795a00

--------------------------------
Class: UTSkillSynData
	int CurSkillIndex;//[Offset: 0x0 , Size: 4]
	int CurSkillPhase;//[Offset: 0x4 , Size: 4]
	bool ReplicateImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	int CurLoadDynSkillID;//[Offset: 0xc , Size: 4]
	bool ReplicatePhaseIndexImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int Reason;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0 , Size: 4]
	float LastCastTime;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0 , Size: 12]
	Actor* FromPawn;//[Offset: 0xc , Size: 4]
	int SkillID;//[Offset: 0x10 , Size: 4]
	int SkillPhaseID;//[Offset: 0x14 , Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a , Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0 , Size: 12]
	Actor* FromPawn;//[Offset: 0xc , Size: 4]
	int SkillID;//[Offset: 0x10 , Size: 4]
	int SkillPhaseID;//[Offset: 0x14 , Size: 4]
	byte HitSurfaceType;//[Offset: 0x18 , Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0 , Size: 4]
	int Seed;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: UTAddedSkillSturct
	class UTSkill* SkillTemplate;//[Offset: 0x0 , Size: 40]
	FString SkillTemplatePath;//[Offset: 0x28 , Size: 12]
	int SkillIndex;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0xe0 , Size: 1]
	UTSkillEffect* SkillEffect;//[Offset: 0xe4 , Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0xe8 , Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0xf4 , Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0 , Size: 8]
	byte Type;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0 , Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0xf4 , Size: 4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0xf8 , Size: 4]
	Object* EventObj;//[Offset: 0x108 , Size: 4]
	void UpdateAction_Internal(float DeltaSeconds);// 0x3786570
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x378642c
	void UndoAction_Internal();// 0x37863c4
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x37862f4
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3786224
	void Reset_Internal();// 0x37861bc
	void Reset(ActorComponent* SkillManagerComponent);// 0x37860ec
	bool RealDoAction_Internal();// 0x3786078
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3785f9c
	bool JudgeNeedPhaseWait();// 0x3785f28
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x3785e38

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0 , Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc , Size: 12]
	void UpdateAttribute(int TemplateID);// 0x12d7a3c
	void InitializeFollow();// 0x12d7a20
	void Initialize(Actor* Actor);// 0x12d79a0

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc , Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0 , Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	bool bBoxCollionOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6 , Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xc8 , Size: 12]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xd4 , Size: 12]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0xe0 , Size: 12]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0xec , Size: 12]
	byte ClientHitPartJudgment;//[Offset: 0xf8 , Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xf9 , Size: 1]
	FString HitBox_Stand_Tag;//[Offset: 0xfc , Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108 , Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x114 , Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x118 , Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x11c , Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x120 , Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x124 , Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x12c , Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x134 , Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x13c , Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x144 , Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x14c , Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x188 , Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x190 , Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x12e9228
	void UpdateAllInstanceBodyTransform(int Type);// 0x13d7274
	void InitBodyBoneMap(byte PoseState);// 0x1347fcc
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x13d71f4
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x13d7160
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x13d7094
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x13d6f20
	byte GetCurHitPartJugementType();// 0x13d6ef8
	void CloseBodyBulletCollision();// 0x12d7a20
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x13d6d5c

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0 , Size: 12]
	Vector PitchOffset;//[Offset: 0xc , Size: 12]
	Vector FootOffset;//[Offset: 0x18 , Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0 , Size: 1]
	float TotalTime;//[Offset: 0x4 , Size: 4]
	float AttachWeaponTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x238 , Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x23c , Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x248 , Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x24c , Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x250 , Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258 , Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258 , Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258 , Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258 , Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259 , Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a , Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a , Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x25c , Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x260 , Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x264 , Size: 4]
	FString EventName;//[Offset: 0x268 , Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x37267a8
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x3726474
	void Stop();// 0x3726460
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x37261f0
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x3726170
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x3725fd4
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x3725df4
	void SetOutputBusVolume(float BusVolume);// 0x3725d7c
	void SetListeners(out const AkComponent*[] Listeners);// 0x3725cb0
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x3725c38
	void SetAutoDestroy(bool in_AutoDestroy);// 0x3725bbc
	void SetAttenuationScalingFactor(float Value);// 0x3725b44
	void PostTrigger(FString Trigger);// 0x37259ec
	int PostAssociatedAkEvent();// 0x37259c4
	int PostAkEventByName(FString in_EventName);// 0x3725900
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x37257f8
	float GetAttenuationRadius();// 0x37257d0

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0 , Size: 4]
	FString SwitchGroupName;//[Offset: 0x4 , Size: 12]
	FString SwitchValue;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0xc8 , Size: 4]
	float AssistAccountableDuration;//[Offset: 0xcc , Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0xd0 , Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0xd8 , Size: 4]
	int MaxDeathTimes;//[Offset: 0xdc , Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe8 , Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0xec , Size: 4]
	float Breath;//[Offset: 0xf0 , Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0xf4 , Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0xf8 , Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x104 , Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x108 , Size: 4]
	float SetHealthSafety(float AddVal);// 0x1380200
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x1432b10
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x14329fc
	void ResetDataOnRespawn();// 0x14329e8
	void RescueFinishSuccessfully();// 0x14329d4
	void OnRep_BreathChanged();// 0x1432694
	bool IsNearDeathInvincible();// 0x14329ac
	bool IsHealthAlive();// 0x1432984
	bool IsHaveLastBreathStatus();// 0x143295c
	bool IsFinishedLastBreathStatus();// 0x1432934
	void InitializeOwner(Pawn* TempPawn);// 0x14328bc
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x14326f4
	float GetBreathMax();// 0x14326d8
	float GetBreath();// 0x14326bc
	void EnterSwimWhileDying();// 0x14326a8
	void DoFinishLastBreath();// 0x1432694
	void ClearNearDeathTeammate();// 0x1432680
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x14325b4
	void AddDeadBuff();// 0x14325a0

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xbc , Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xc0 , Size: 4]
	anPickerData FanData;//[Offset: 0xc4 , Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0xf0 , Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0xf4 , Size: 4]
	float RestoringDuration;//[Offset: 0x110 , Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x114 , Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x120 , Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x128 , Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x14339f0
	void WaitingConfirmState_ActOnUnsatisfied();// 0x14339dc
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x138c394
	void TickAsHelper(float DeltaTime);// 0x1433964
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x14338b0
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x1433838
	bool RescueingState_IsConditionSatisfied();// 0x1433810
	void RescueingState_ActOnUnsatisfied();// 0x14337fc
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x138c394
	void RescueingProcessFinished();// 0x14337e8
	bool PlayerConfirmToRescueClientSide();// 0x14337c0
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x14336ec
	void OnRep_IsRescueingOtherStatusChange();// 0x14336d8
	bool IsInRescueingStatus();// 0x14336b0
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x14335f4
	float GetRestoringDuration();// 0x14335cc
	void DrawDebugFan();// 0x12dedb4

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0 , Size: 4]
	float Angle;//[Offset: 0x4 , Size: 4]
	float Offset;//[Offset: 0x8 , Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	float LowerTraceRatio;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc , Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0 , Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8 , Size: 4]
	float CanFollowDist;//[Offset: 0xcc , Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0 , Size: 4]
	float QuitFollowDist;//[Offset: 0xd4 , Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8 , Size: 4]
	float DistThrehold;//[Offset: 0xdc , Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4 , Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec , Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x124 , Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130 , Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x142f6f4
	void WaitingConfirmState_ActOnUnsatisfied();// 0x142f6e0
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x138c394
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x142f668
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x142f5f0
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x142f578
	bool PlayerStopFollow();// 0x142f550
	bool PlayerConfirmToFollow();// 0x142f528
	void InitializeOwner(Pawn* _TempPawn);// 0x142f4b0
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x142f438
	bool FollowingState_IsConditionSatisfied();// 0x142f410
	void FollowingState_ActOnUnsatisfied();// 0x142f3fc
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x142f384

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x13dc3b0
	byte Start();// 0x1345f34
	bool IsValidate();// 0x14ea650
	void DebugDraw(Color DebugColor, bool isPersist);// 0x14ea58c
	void Awake();// 0x13dc394

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x74 , Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x78 , Size: 4]
	byte Update(float DeltaTime);// 0x1311720
	FString ToString();// 0x14ea680
	void TaskRemoved();// 0x13dc3b0
	byte Start();// 0x1345f34
	bool IsValidate();// 0x14ea650
	bool IsReachable();// 0x1387a30
	byte Finish();// 0x1387b68
	void DebugDraw(Color DebugColor, bool isPersist);// 0x14ea58c
	void Awake();// 0x13dc394

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x358 , Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x35c , Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x360 , Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x364 , Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368 , Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389 , Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a , Size: 1]
	float ResultMinPitch;//[Offset: 0x38c , Size: 4]
	float ResultMaxPitch;//[Offset: 0x390 , Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x398 , Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x39c , Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x3b8 , Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x3d4 , Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x3f0 , Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x40c , Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x428 , Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x444 , Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x460 , Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x47c , Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x498 , Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x4b4 , Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x4d0 , Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x4ec , Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x508 , Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x524 , Size: 28]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x540 , Size: 28]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c , Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x560 , Size: 28]
	float AdditionalSocketOffetZMax;//[Offset: 0x580 , Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x584 , Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x594 , Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x598 , Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x59c , Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0 , Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1 , Size: 1]
	float OffsetCountTime;//[Offset: 0x5a4 , Size: 4]
	float OffSetDurTime;//[Offset: 0x5a8 , Size: 4]
	float RevertMoveSpeed;//[Offset: 0x5ac , Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x5b0 , Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x5c0 , Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x5f0 , Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x600 , Size: 16]
	void SetSelfieCameraDefRotation();// 0x134c18c
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x134c080
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x134bfbc
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x134be50
	void DelayRotationLagEnabledEnd();// 0x134be3c
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x134bd74

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x2e8 , Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x2ec , Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x2f0 , Size: 4]
	void ClearCameraData();// 0x14d683c

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0 , Size: 4]
	Vector AkLocation;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0 , Size: 4]
	float Time;//[Offset: 0x4 , Size: 4]
	float Damage;//[Offset: 0x8 , Size: 4]
	int StatusChangeMargin;//[Offset: 0xc , Size: 4]
	int DamageType;//[Offset: 0x10 , Size: 4]
	int AdditionalParam;//[Offset: 0x14 , Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648 , Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649 , Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x64c , Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x650 , Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x654 , Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x658 , Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c , Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d , Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674 , Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x678 , Size: 4]
	float EnterShovelCD;//[Offset: 0x67c , Size: 4]
	float DSEnterShovelCD;//[Offset: 0x680 , Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x684 , Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x688 , Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x68c , Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x690 , Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x694 , Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x698 , Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x69c , Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x6a0 , Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x6a4 , Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x6a8 , Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x6ac , Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x6b0 , Size: 4]
	float StopShovelingSpeed;//[Offset: 0x6b8 , Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x6bc , Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x6c0 , Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x6c4 , Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x6c8 , Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x6cc , Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x6d0 , Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x6d4 , Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x6d8 , Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x6dc , Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x6e0 , Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x6e4 , Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x6e8 , Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x6ec , Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x6f0 , Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x6f8 , Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x710 , Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x714 , Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x718 , Size: 4]
	float nowShovelingSpeed;//[Offset: 0x71c , Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x720 , Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c , Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d , Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x72f , Size: 1]
	float PreShovelFov;//[Offset: 0x730 , Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x788 , Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c , Size: 1]
	float TimeSpeedFactor;//[Offset: 0x790 , Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794 , Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795 , Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x796 , Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x798 , Size: 4]
	float JumpOffVelocityFactor;//[Offset: 0x79c , Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0 , Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1 , Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x7a4 , Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8 , Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a8 , Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x7ac , Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x7b0 , Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x7b4 , Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x7b8 , Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x7bc , Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x7c0 , Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x7c4 , Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x7c8 , Size: 4]
	float ProneFloorAngle;//[Offset: 0x7cc , Size: 4]
	float ProneFloorZ;//[Offset: 0x7d0 , Size: 4]
	float JumpFloorAngle;//[Offset: 0x7d4 , Size: 4]
	float JumpFloorZ;//[Offset: 0x7d8 , Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x7dc , Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x7e0 , Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4 , Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7e8 , Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7ec , Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808 , Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809 , Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80a , Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x80c , Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0 , Size: 1]
	float CheckDistanceAhead;//[Offset: 0x8f4 , Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8 , Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x8fc , Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x910 , Size: 4]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92d , Size: 1]
	void ToggleUserCmdDelta(bool Val);// 0x1431880
	void TimeSpeedCheck(bool Val);// 0x14317c8
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x143171c
	void SetProneFloorZ(float InProneFloorZ);// 0x14316a4
	void SetProneFloorAngle(float InProneFloorAngle);// 0x143162c
	void SetJumpFloorZ(float InJumpFloorZ);// 0x14315b4
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x143153c
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x1431410
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x14311c4
	void ServerUserMoveCmd(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x1431004
	void Ping2Server(float ServerTime, float ClientTime);// 0x1430f18
	void Ping2Client(float ServerTime);// 0x1430ea0
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x1430dd8
	void OnRecoverOnServer();// 0x1430dbc
	void OnPreReconnectOnServer();// 0x1430da8
	void OnClientCloseUserCmdDelta();// 0x1430d94
	float K2_GetProneFloorZ();// 0x1430d6c
	float K2_GetProneFloorAngle();// 0x1430d44
	float K2_GetJumpFloorZ();// 0x1430d1c
	float K2_GetJumpFloorAngle();// 0x1430cf4
	bool IsWalkable(out const HitResult Hit);// 0x1430c48
	bool IsProning();// 0x1430c20
	STExtraBaseCharacter* GetSTCharacter();// 0x1430bf8
	float GetLastServerMoveTime();// 0x1430bd0
	bool GetIsOpenShovelingAbility();// 0x1430ba8
	bool DragOnGround(float DeltaTime);// 0x1430b28
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1430880
	void ClientUserMoveCmdAck(int Sequence);// 0x1430808
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1430500
	void ChangePhysxShapeFlag();// 0x12dedb4

--------------------------------
Class: SimViewData
	byte ViewPitch;//[Offset: 0x0 , Size: 1]
	byte ViewYaw;//[Offset: 0x1 , Size: 1]
	byte ViewRoll;//[Offset: 0x2 , Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0 , Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0 , Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8 , Size: 48]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0 , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2c8 , Size: 4]
	float MaxQuadLength;//[Offset: 0x2cc , Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2d0 , Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2d4 , Size: 4]
	float DefaultTrailWidth;//[Offset: 0x2d8 , Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc , Size: 1]
	float DefaultTrailLength;//[Offset: 0x2e0 , Size: 4]
	float TextureLength;//[Offset: 0x2e4 , Size: 4]
	int USegmentNum;//[Offset: 0x2e8 , Size: 4]
	int CoordU;//[Offset: 0x2ec , Size: 4]
	int SlippingCoordU;//[Offset: 0x2f0 , Size: 4]
	int BrokenCoordU;//[Offset: 0x2f4 , Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8 , Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x2fc , Size: 4]
	float AdditionalTextureLength;//[Offset: 0x300 , Size: 4]
	int AdditionalCoordU;//[Offset: 0x304 , Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x308 , Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x30c , Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310 , Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x314 , Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x14f0e74
	void StopUpdate();// 0x14f0e60
	bool IsUpdating();// 0x14341e0

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x520 , Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c , Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d , Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e , Size: 1]
	enum CollisionMode;//[Offset: 0x52f , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x530 , Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x554 , Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x560 , Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x56c , Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x588 , Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x5c4 , Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x3864da0
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x3864c40
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x3864b7c
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x3864ab8
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x38649f4
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x386484c
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x1bf56d0
	bool IsMeshSectionVisible(int SectionIndex);// 0x38647cc
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x386474c
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x38646cc
	int GetNumSections();// 0x38646a4
	int GetLastSectionIndex();// 0x386467c
	int FirstAvailableMeshSectionIndex();// 0x3864654
	void EndBatchUpdates();// 0x3864640
	bool DoesSectionExist(int SectionIndex);// 0x38645c0
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x3863fd0
	void CookCollisionNow();// 0x3863fbc
	void ClearMeshSection(int SectionIndex);// 0x3863f44
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x3863ecc
	void ClearCollisionConvexMeshes();// 0x3863eb8
	void ClearAllMeshSections();// 0x3863ea4
	void ClearAllMeshCollisionSections();// 0x3863e90
	void BeginBatchUpdates();// 0x3863e74
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x3863d18

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0 , Size: 12]
	int[] IndexBuffer;//[Offset: 0xc , Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0 , Size: 12]
	Box BoundingBox;//[Offset: 0xc , Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0 , Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	Transform Trans;//[Offset: 0x10 , Size: 48]
	Vector Normal;//[Offset: 0x40 , Size: 12]
	enum Type;//[Offset: 0x4c , Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d , Size: 1]

--------------------------------
Class: KilledTipsBlock
	byte DamageType;//[Offset: 0x0 , Size: 1]
	FString attackerName;//[Offset: 0x4 , Size: 12]
	FString WeaponName;//[Offset: 0x10 , Size: 12]
	FString DeadName;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc , Size: 4]
	int DetectThreshold;//[Offset: 0xc0 , Size: 4]
	float FoldFactor;//[Offset: 0xc4 , Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8 , Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4 , Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0 , Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec , Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8 , Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104 , Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110 , Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114 , Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120 , Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c , Size: 12]
	int FoldFactorDelt;//[Offset: 0x138 , Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c , Size: 4]
	int TraceDis;//[Offset: 0x140 , Size: 4]
	float TickDeltTime;//[Offset: 0x144 , Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x150 , Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c , Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x13e4b3c
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x13e4a04

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x998 , Size: 4]
	enum LiveState;//[Offset: 0x99c , Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x9a0 , Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x9a8 , Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0x9ac , Size: 4]
	float PlayerHealth;//[Offset: 0x9b0 , Size: 4]
	float PlayerHealthMax;//[Offset: 0x9b4 , Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x9b8 , Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0x9d0 , Size: 24]
	enum EUAVUseType;//[Offset: 0x9e8 , Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9 , Size: 1]
	enum eCurVehicleType;//[Offset: 0x9ea , Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0x9eb , Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0x9ec , Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0x9f8 , Size: 12]
	Vector MapMark;//[Offset: 0xa04 , Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10 , Size: 1]
	Vector RestartLocation;//[Offset: 0xa14 , Size: 12]
	Rotator RestartRotate;//[Offset: 0xa20 , Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xa2c , Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xa68 , Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xaa4 , Size: 1]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xac0 , Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xac4 , Size: 12]
	int TeamMatePlayerStateIndex;//[Offset: 0xad0 , Size: 4]
	int PlayerLayerID;//[Offset: 0xad4 , Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xad8 , Size: 16]
	int Breath;//[Offset: 0xae8 , Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xaec , Size: 12]
	float EnegyBuffStage1;//[Offset: 0xaf8 , Size: 4]
	float EnegyBuffStage2;//[Offset: 0xafc , Size: 4]
	float EnegyBuffStage3;//[Offset: 0xb00 , Size: 4]
	float EnegyBuffStage4;//[Offset: 0xb04 , Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xb08 , Size: 4]
	float CurEnegyBuff;//[Offset: 0xb0c , Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xb10 , Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xb14 , Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xb18 , Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xb1c , Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xb20 , Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xb24 , Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xb28 , Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xb2c , Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xb30 , Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xb3c , Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49 , Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54 , Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb55 , Size: 1]
	int[] TeamMatesExitState;//[Offset: 0xb58 , Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64 , Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb65 , Size: 1]
	int PlayersCountOnPlane;//[Offset: 0xb70 , Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0xb74 , Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xb80 , Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xb8c , Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xb90 , Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0xb94 , Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98 , Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0xb9c , Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0xba8 , Size: 12]
	int MaxDecalCount;//[Offset: 0xbcc , Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0xbd0 , Size: 12]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0xc30 , Size: 12]
	float SignalHP;//[Offset: 0xc3c , Size: 4]
	delegate OnSignalHPChange;//[Offset: 0xc40 , Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0xc4c , Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xc50 , Size: 4]
	HitEnemyData HitedEnemyData;//[Offset: 0xc54 , Size: 20]
	TeammateConveyStatus TeammateConveyStatus;//[Offset: 0xc6c , Size: 40]
	float TeammateConveyStatusReceiveRange;//[Offset: 0xc94 , Size: 4]
	bool bIsInSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98 , Size: 1]
	int RemainingRevivalTime;//[Offset: 0xc9c , Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0 , Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca1 , Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca2 , Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca3 , Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xca8 , Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xcb0 , Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xcbc , Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xcc8 , Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xcd4 , Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xce0 , Size: 12]
	Vector LastVehicleLocation;//[Offset: 0xcfc , Size: 12]
	void SetPlayerGiveUp(bool InGiveUp);// 0x14c5a44
	void SetForceSyncTeammateData(bool IsForCE);// 0x14c59c8
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x14c5824
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x14c571c
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* Param2);// 0x14c561c
	void RefreshRevivalState();// 0x14c5608
	void RefreshFollowMark();// 0x14c55f4
	int PlayersCountOnMyPlane();// 0x14c55cc
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x1bf56d0
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x1bf56d0
	void OnRep_VisualFieldInfo();// 0x14c55b8
	void OnRep_UpdateKillMonsterNum();// 0x14c559c
	void OnRep_TeamMatePlayerStateList();// 0x14c5588
	void OnRep_TeamMatePlayerStateIndex();// 0x14c5574
	void OnRep_SignalHP();// 0x14c5560
	void OnRep_RemainingRevivalTime();// 0x14c554c
	void OnRep_RankNotify();// 0x14c5538
	void OnRep_PlayersCountOnPlane();// 0x14c5524
	void OnRep_PlayerReconnectEvent();// 0x14c5510
	void OnRep_PlayerName();// 0x13323b0
	void OnRep_PlayerLostConnectionEvent();// 0x14c54fc
	void OnRep_PlayerLiveState();// 0x14c54e8
	void OnRep_PlayerKillsChange();// 0x14c54cc
	void OnRep_PlayerIsFollowing();// 0x14c54b8
	void OnRep_PlayerGiveUp();// 0x14c54a4
	void OnRep_PlayerGameOver();// 0x14c5490
	void OnRep_PlayerExitGameEvent();// 0x14c547c
	void OnRep_PlayerAliasShowInfoList();// 0x14c5468
	void OnRep_MarkSyncData();// 0x14c4478
	void OnRep_MapMarkNotify();// 0x14c5454
	void OnRep_LastVehicleLocation();// 0x14c5440
	void OnRep_IsIDCardCaptured();// 0x14c542c
	void OnRep_HPChanged();// 0x12dedb4
	void OnRep_ChangeRevivalState();// 0x14c5418
	void OnRep_ChangeInRevivingState();// 0x14c5404
	void OnRep_BreathChanged();// 0x14c53f0
	void OnRep_BPS();// 0x12dedb4
	void OnRep_bHitted();// 0x14c53dc
	void OnPlayerQuickChat();// 0x14c53c8
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x1bf56d0
	void OnMemberVoice(int VoiceState);// 0x14c5350
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x1bf56d0
	void OnClientTakeDamage(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Attacker);// 0x14c51e4
	void OnCharacterStartFire(STExtraWeapon* Weapon);// 0x14c516c
	bool IsSinglePlayer();// 0x14c5144
	bool IsAlive();// 0x14c511c
	uint32 GetUserIDByMemberID(int memberID);// 0x14c5094
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x14c4f78
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x14c4ef8
	STExtraPlayerState* GetTeamMatePlayerStateByPlayerKey(int Teammatekey);// 0x14c4e78
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x14c4df8
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x14c4d34
	int GetPlayerTeamIndex();// 0x14c4d0c
	float GetPlayerMaxHealth();// 0x14c4ce4
	float GetPlayerHealth();// 0x14c4cbc
	STExtraBaseCharacter* GetPlayerCharacter();// 0x14c4c94
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x14c4be8
	float GetMaxEnegyBuff();// 0x14c4b98
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x14c4a40
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x14c4924
	float GetBreathPercentage();// 0x14c48fc
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x14c4830
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x14c470c
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x14c4660
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x14c448c
	void ForceNotifyAlertUpdate();// 0x14c4478
	void ClientDisplayGameTipWithMsgID(int ID, FString Param1, FString Param2);// 0x14c42b4
	void ChangeFadeMapMarkDist(float NewDist);// 0x14c4238
	bool CanRevivalTeammate();// 0x14c4210
	bool CanBeRevival();// 0x14c41e8
	byte CalculateEnegyStage();// 0x14c41c0
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x14c40fc
	void AddEnegySafety(float AddVal);// 0x14c4084
	void AddDamageAmount(Character* VictimPawn, out const DamageEvent DamageEvent, float FinalDamage, bool bHitHead);// 0x14c3f04

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x330 , Size: 4]
	float Pronetime;//[Offset: 0x334 , Size: 4]
	float marchDistance;//[Offset: 0x340 , Size: 4]
	float travelDistance;//[Offset: 0x344 , Size: 4]
	float DriveDistance;//[Offset: 0x348 , Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x34c , Size: 4]
	int destroyVehicleNum;//[Offset: 0x350 , Size: 4]
	int rescueTimes;//[Offset: 0x354 , Size: 4]
	int NormalItemsNum;//[Offset: 0x358 , Size: 4]
	int SeniorItemsNum;//[Offset: 0x35c , Size: 4]
	int GVMemberID;//[Offset: 0x360 , Size: 4]
	FName PlayerType;//[Offset: 0x368 , Size: 8]
	uint32 PlayerKey;//[Offset: 0x370 , Size: 4]
	FString PlayerUID;//[Offset: 0x374 , Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380 , Size: 1]
	FString iconUrl;//[Offset: 0x384 , Size: 12]
	bool gender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390 , Size: 1]
	int PlayerLevel;//[Offset: 0x394 , Size: 4]
	int SegmentLevel;//[Offset: 0x398 , Size: 4]
	int AvatarBoxId;//[Offset: 0x39c , Size: 4]
	int CampID;//[Offset: 0x3a0 , Size: 4]
	uint64 Uid;//[Offset: 0x3a8 , Size: 8]
	FString Nation;//[Offset: 0x3b0 , Size: 12]
	int TeamID;//[Offset: 0x3bc , Size: 4]
	int PlayerBornPointID;//[Offset: 0x3c0 , Size: 4]
	int Kills;//[Offset: 0x3c4 , Size: 4]
	int KillsBeforeDie;//[Offset: 0x3c8 , Size: 4]
	int Knockouts;//[Offset: 0x3cc , Size: 4]
	int Assists;//[Offset: 0x3d8 , Size: 4]
	byte PlatformGender;//[Offset: 0x3dc , Size: 1]
	int MatchLabel;//[Offset: 0x3e0 , Size: 4]
	uint32 Killer;//[Offset: 0x3e4 , Size: 4]
	FString KillerName;//[Offset: 0x3e8 , Size: 12]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x3f8 , Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x400 , Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x404 , Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x408 , Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x40c , Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x410 , Size: 4]
	int HeadShotNum;//[Offset: 0x414 , Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x418 , Size: 4]
	int KillNumByGrende;//[Offset: 0x41c , Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x420 , Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x424 , Size: 4]
	int MaxKillDistance;//[Offset: 0x428 , Size: 4]
	int HealTimes;//[Offset: 0x42c , Size: 4]
	float DamageAmount;//[Offset: 0x430 , Size: 4]
	float HealAmount;//[Offset: 0x434 , Size: 4]
	FString[] KillFlow;//[Offset: 0x438 , Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x444 , Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x450 , Size: 12]
	float InDamageAmount;//[Offset: 0x45c , Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x46c , Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x478 , Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x4b8 , Size: 72]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x500 , Size: 60]
	UseItemFlow[] UseItemFlow;//[Offset: 0x53c , Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x548 , Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x554 , Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x590 , Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598 , Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x59c , Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x5a0 , Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x5ac , Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x5b0 , Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x5b4 , Size: 4]
	Vector LandLocation;//[Offset: 0x5b8 , Size: 12]
	Vector ParachuteLocation;//[Offset: 0x5c4 , Size: 12]
	int LandTime;//[Offset: 0x5d0 , Size: 4]
	Vector DeadLocation;//[Offset: 0x5d4 , Size: 12]
	FString DeadDamangeType;//[Offset: 0x5e0 , Size: 12]
	int PveDeadAttacker;//[Offset: 0x5ec , Size: 4]
	int PveStageId;//[Offset: 0x5f0 , Size: 4]
	FString DeadTimeStr;//[Offset: 0x5f4 , Size: 12]
	int NearDeathDamageType;//[Offset: 0x600 , Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x604 , Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608 , Size: 1]
	EquipmentData EquipmentData;//[Offset: 0x614 , Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c , Size: 1]
	int GamePlayingTime;//[Offset: 0x670 , Size: 4]
	int ObserverTime;//[Offset: 0x674 , Size: 4]
	int TouchDownAreaID;//[Offset: 0x678 , Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x67c , Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x680 , Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x68c , Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x698 , Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x6a4 , Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x6b0 , Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x6bc , Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x6c8 , Size: 4]
	float InHelicopterTime;//[Offset: 0x6cc , Size: 4]
	int RevivalNum;//[Offset: 0x6d0 , Size: 4]
	int BeRevivedNum;//[Offset: 0x6d4 , Size: 4]
	int KillNumInVehicle;//[Offset: 0x6d8 , Size: 4]
	float TotalSprintDistance;//[Offset: 0x6dc , Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x6e0 , Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x6e4 , Size: 4]
	int ProneTimes;//[Offset: 0x6e8 , Size: 4]
	int CrouchTimes;//[Offset: 0x6ec , Size: 4]
	int JumpTimes;//[Offset: 0x6f0 , Size: 4]
	int KillMonsterNum;//[Offset: 0x6f4 , Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x6f8 , Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x734 , Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x738 , Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x73c , Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x778 , Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0x7b4 , Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x7b8 , Size: 4]
	int LightCandleNum;//[Offset: 0x7bc , Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x7c0 , Size: 60]
	float BattleStateTime;//[Offset: 0x7fc , Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800 , Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0x804 , Size: 4]
	int FistKillingCount;//[Offset: 0x808 , Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0x80c , Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0x848 , Size: 12]
	int UseHelicoperNum;//[Offset: 0x854 , Size: 4]
	float UseHelicoperDistance;//[Offset: 0x858 , Size: 4]
	byte CharmRankIndex;//[Offset: 0x85c , Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0x860 , Size: 60]
	int SnowBoardJumpActionCount;//[Offset: 0x8a0 , Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x8a4 , Size: 4]
	int KillMagicWalkAI;//[Offset: 0x8a8 , Size: 4]
	int SendMagicWalkAI;//[Offset: 0x8ac , Size: 4]
	int KillSnowManCount;//[Offset: 0x8b0 , Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x8b4 , Size: 60]
	int OpenedAirDropBoxNum;//[Offset: 0x8f0 , Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x8f4 , Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x900 , Size: 32]
	int MemberIdInVoiceRoom;//[Offset: 0x920 , Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924 , Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x928 , Size: 36]
	int UpassShow;//[Offset: 0x94c , Size: 4]
	int upassKeepBuy;//[Offset: 0x950 , Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0x988 , Size: 4]
	float ClientToDSFlowLimitTime;//[Offset: 0x98c , Size: 4]
	static void SetOnMessageReceive(delegate OnMessageReceive);// 0x1853620
	static void SetOnDSMessageReceive(delegate OnDSMessageReceive);// 0x1853584
	static void SetOnDSGameMessageReceive(delegate OnDSMessageReceive);// 0x18534e8
	void SetGVMemberIDServerCall(int memberID);// 0x1853434
	void SetGVMemberID(int memberID);// 0x18533bc
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess);// 0x18532f8
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x18531e8
	void RPC_Server_LuaDSToClient(int ID, const byte[] Content);// 0x18530ac
	void RPC_Server_LuaClientToDS(int ID, const byte[] Content);// 0x1852f70
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x1852dd0
	void ReportTaskData(int TaskID, int process);// 0x1852d14
	void ReportSpecialCollection(int ItemID, int count);// 0x1852c58
	void ReportSecretAreaID(int SecretAreaID);// 0x1852be0
	void ReportLandLocType(int TouchDownLocType);// 0x1852b68
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x1852a9c
	void ReportLandArea(int TouchDownArea);// 0x1852a24
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x18529ac
	void OnRep_UpdateKillMonsterNum();// 0x14c559c
	void OnRep_UID();// 0x1852998
	void OnRep_PlayerKillsChange();// 0x14c54cc
	void OnRep_MatchLabel();// 0x12dedb4
	void OnRep_CollectItemRecord();// 0x1852984
	void OnRep_CampID();// 0x1852970
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x18528f0
	bool IsSpecialPickItem(int ItemID);// 0x1852870
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x185278c
	uint32 GetUserIDByMemberID(int memberID);// 0x14c5094
	FString GetUIDString();// 0x18526cc
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x1852660
	uint32 GetPlayerKey();// 0x1852638
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x18525cc
	void ForceUpdateCampCharacterList();// 0x18525b0
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x18524ec

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0 , Size: 12]
	Rotator rot;//[Offset: 0xc , Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0 , Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	int LayerID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0 , Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4 , Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xcf4 , Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xcf8 , Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0xd08 , Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xd18 , Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xd40 , Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xd48 , Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xd50 , Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xd54 , Size: 4]
	bool PreLoadStreamingLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58 , Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0xd5c , Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xd60 , Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xd6c , Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xd70 , Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xd88 , Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xd8c , Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xd90 , Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xd94 , Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0xd98 , Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xd9c , Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xda0 , Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xda4 , Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0xda8 , Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0xdac , Size: 80]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0xdfc , Size: 76]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0xe5c , Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0xe60 , Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0xe88 , Size: 4]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0xe90 , Size: 5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe95 , Size: 1]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x14e3518
	void PostLoadFPPMesh();// 0x14dbee0
	void OnWheelsLanded();// 0x14e3504
	void OnRep_ReplicatedState();// 0x12dedb4
	void OnGearChanged(bool bIsUp);// 0x14e3484
	float GetVehicleSpeed();// 0x14e345c
	float GetVehicleSlip();// 0x14e342c
	Vector GetRotationInputDir();// 0x1437ffc
	void BroadcastClientVehicleWheelDestroyEffect();// 0x14e3410

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0 , Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4 , Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8 , Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc , Size: 4]
	float minSpeed;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x36c , Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x378 , Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390 , Size: 1]
	VehicleWheel*[] WheelHubs;//[Offset: 0x394 , Size: 12]
	void OnExpoldeStopWheel();// 0x14dfe5c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14dfd5c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x14dfbd0
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x14dfad0
	void ForceWheelsRotate(float DriveTorque);// 0x14dfa58
	void ClearDestroyedWheel();// 0x14dfa44

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x260 , Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2cc , Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2e8 , Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x310 , Size: 88]
	float AckermannAccuracy;//[Offset: 0x368 , Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128 , Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c , Size: 12]
	float Mass;//[Offset: 0x138 , Size: 4]
	float DragCoefficient;//[Offset: 0x13c , Size: 4]
	float ChassisWidth;//[Offset: 0x140 , Size: 4]
	float ChassisHeight;//[Offset: 0x144 , Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	float DragArea;//[Offset: 0x14c , Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150 , Size: 4]
	float MaxEngineRPM;//[Offset: 0x154 , Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158 , Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c , Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168 , Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c , Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170 , Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174 , Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178 , Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c , Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180 , Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x184 , Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c , Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0 , Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4 , Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8 , Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac , Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0 , Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4 , Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8 , Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc , Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0 , Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4 , Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8 , Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1d4 , Size: 20]
	float RawSteeringInput;//[Offset: 0x1ec , Size: 4]
	float RawThrottleInput;//[Offset: 0x1f0 , Size: 4]
	float RawBrakeInput;//[Offset: 0x1f4 , Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8 , Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8 , Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8 , Size: 1]
	float SteeringInput;//[Offset: 0x1fc , Size: 4]
	float ThrottleInput;//[Offset: 0x200 , Size: 4]
	float BrakeInput;//[Offset: 0x204 , Size: 4]
	float HandbrakeInput;//[Offset: 0x208 , Size: 4]
	float IdleBrakeInput;//[Offset: 0x20c , Size: 4]
	float StopThreshold;//[Offset: 0x210 , Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x214 , Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x218 , Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x220 , Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x228 , Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x230 , Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238 , Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x39cbc5c
	void SetThrottleInput(float Throttle);// 0x39cbbdc
	void SetTargetGear(int GearNum, bool bImmediate);// 0x39cbb18
	void SetSteeringInput(float Steering);// 0x39cba98
	void SetPhysActive(bool bActive);// 0x39cba18
	void SetHandbrakeInput(bool bNewHandbrake);// 0x39cb990
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x39cb90c
	void SetGroupsToIgnore(int GroupFlags);// 0x39cb894
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x39cb810
	void SetGroupsToAvoid(int GroupFlags);// 0x39cb798
	void SetGearUp(bool bNewGearUp);// 0x39cb718
	void SetGearDown(bool bNewGearDown);// 0x39cb698
	void SetBrakeInput(float Brake);// 0x39cb618
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x39cb594
	void SetAvoidanceGroup(int GroupFlags);// 0x2eb3c4c
	void SetAvoidanceEnabled(bool bEnable);// 0x39cb514
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x39cb330
	bool GetUseAutoGears();// 0x39cb308
	int GetTargetGear();// 0x39cb2e0
	float GetForwardSpeed();// 0x39cb2b8
	float GetEngineRotationSpeed();// 0x39cb290
	float GetEngineMaxRotationSpeed();// 0x39cb268
	int GetCurrentGear();// 0x39cb240

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0 , Size: 88]
	float MaxRPM;//[Offset: 0x58 , Size: 4]
	float MOI;//[Offset: 0x5c , Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60 , Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64 , Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0 , Size: 1]
	float FrontRearSplit;//[Offset: 0x4 , Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8 , Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc , Size: 4]
	float CentreBias;//[Offset: 0x10 , Size: 4]
	float FrontBias;//[Offset: 0x14 , Size: 4]
	float RearBias;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float GearSwitchTime;//[Offset: 0x4 , Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8 , Size: 4]
	float FinalRatio;//[Offset: 0xc , Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10 , Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c , Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20 , Size: 4]
	float ClutchStrength;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0 , Size: 4]
	float DownRatio;//[Offset: 0x4 , Size: 4]
	float UpRatio;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c , Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	Vector Offset;//[Offset: 0x24 , Size: 12]
	float ShapeRadius;//[Offset: 0x30 , Size: 4]
	float ShapeWidth;//[Offset: 0x34 , Size: 4]
	float Mass;//[Offset: 0x38 , Size: 4]
	float DampingRate;//[Offset: 0x3c , Size: 4]
	float SteerAngle;//[Offset: 0x40 , Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]
	TireType* TireType;//[Offset: 0x48 , Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c , Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50 , Size: 4]
	float LatStiffValue;//[Offset: 0x54 , Size: 4]
	float LongStiffValue;//[Offset: 0x58 , Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c , Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60 , Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64 , Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68 , Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c , Size: 4]
	byte SweepType;//[Offset: 0x70 , Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74 , Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78 , Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c , Size: 4]
	int WheelIndex;//[Offset: 0x80 , Size: 4]
	float DebugLongSlip;//[Offset: 0x84 , Size: 4]
	float DebugLatSlip;//[Offset: 0x88 , Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c , Size: 4]
	float DebugWheelTorque;//[Offset: 0x94 , Size: 4]
	float DebugLongForce;//[Offset: 0x98 , Size: 4]
	float DebugLatForce;//[Offset: 0x9c , Size: 4]
	Vector Location;//[Offset: 0xa0 , Size: 12]
	Vector OldLocation;//[Offset: 0xac , Size: 12]
	Vector Velocity;//[Offset: 0xb8 , Size: 12]
	bool IsInAir();// 0x39caab8
	float GetSuspensionOffset();// 0x39caa90
	float GetSteerAngle();// 0x39caa68
	float GetRotationAngle();// 0x39caa40

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20 , Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0 , Size: 4]
	float FrictionScale;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0 , Size: 4]
	float ThrottleInput;//[Offset: 0x4 , Size: 4]
	float BrakeInput;//[Offset: 0x8 , Size: 4]
	float HandbrakeInput;//[Offset: 0xc , Size: 4]
	int CurrentGear;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0 , Size: 4]
	float FallRate;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0 , Size: 4]
	FName TireBoneName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0 , Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4 , Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40 , Size: 4]
	int PostEventID;//[Offset: 0x44 , Size: 4]
	float MinLoopUpdateTime;//[Offset: 0x48 , Size: 4]
	float LoopUpdateTimer;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0 , Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4 , Size: 60]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40 , Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0 , Size: 1]
	int8 ThrottleInput;//[Offset: 0x1 , Size: 1]
	int8 BrakeInput;//[Offset: 0x2 , Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3 , Size: 1]
	int8 CurrentGear;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0 , Size: 8]
	int Times;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]
	Vector Location;//[Offset: 0x8 , Size: 12]
	int SourceType;//[Offset: 0x14 , Size: 4]
	int AdditionalParam;//[Offset: 0x18 , Size: 4]
	FString TimeStr;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0 , Size: 4]
	int ThrowCount;//[Offset: 0x4 , Size: 4]
	int HitOthersCount;//[Offset: 0x8 , Size: 4]
	int HitedByOthersCount;//[Offset: 0xc , Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 Uid;//[Offset: 0x0 , Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8 , Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryTime;//[Offset: 0x0 , Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0 , Size: 4]
	int UseCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0 , Size: 4]
	enum slotType;//[Offset: 0x4 , Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	FString TimeStr;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0 , Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0 , Size: 8]
	int VehicleType;//[Offset: 0x8 , Size: 4]
	int AvatarID;//[Offset: 0xc , Size: 4]
	float DriveDistance;//[Offset: 0x10 , Size: 4]
	float DriveTime;//[Offset: 0x14 , Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18 , Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0 , Size: 4]
	int ArmorID;//[Offset: 0x4 , Size: 4]
	int BackPackID;//[Offset: 0x8 , Size: 4]
	int MainWeapon1ID;//[Offset: 0xc , Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10 , Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c , Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20 , Size: 12]
	int ViceWeaponID;//[Offset: 0x2c , Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30 , Size: 12]
	int CloseWeaponID;//[Offset: 0x3c , Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40 , Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c , Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0 , Size: 4]
	float Damage;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0 , Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0 , Size: 4]
	int AreaID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int aliasID;//[Offset: 0x0 , Size: 4]
	FString aliasTitle;//[Offset: 0x4 , Size: 12]
	FString aliasNation;//[Offset: 0x10 , Size: 12]
	int aliasRank;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0 , Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc , Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponID;//[Offset: 0x0 , Size: 4]
	int FireCount;//[Offset: 0x4 , Size: 4]
	int HitCount;//[Offset: 0x8 , Size: 4]
	int KillCount;//[Offset: 0xc , Size: 4]
	float TotalDamage;//[Offset: 0x10 , Size: 4]
	float TotalMonsterDamage;//[Offset: 0x14 , Size: 4]
	int TotalOwnTime;//[Offset: 0x18 , Size: 4]
	int TotalUseTime;//[Offset: 0x1c , Size: 4]
	int HeadShootCount;//[Offset: 0x20 , Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0 , Size: 4]
	int Distance;//[Offset: 0x4 , Size: 4]
	int IsKill;//[Offset: 0x8 , Size: 4]
	float Damage;//[Offset: 0xc , Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	byte[] PlayerStates;//[Offset: 0x14 , Size: 12]
	byte HitPos;//[Offset: 0x20 , Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0 , Size: 12]
	uint64 Uid;//[Offset: 0x10 , Size: 8]
	int Kill;//[Offset: 0x18 , Size: 4]
	int AIKills;//[Offset: 0x1c , Size: 4]
	FString State;//[Offset: 0x20 , Size: 12]
	float travelDistance;//[Offset: 0x2c , Size: 4]
	float marchDistance;//[Offset: 0x30 , Size: 4]
	float DriveDistance;//[Offset: 0x34 , Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38 , Size: 4]
	float DamageAmount;//[Offset: 0x3c , Size: 4]
	float HealAmount;//[Offset: 0x40 , Size: 4]
	int AssistNum;//[Offset: 0x44 , Size: 4]
	int HeadShotNum;//[Offset: 0x48 , Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x4c , Size: 4]
	float surviveTime;//[Offset: 0x50 , Size: 4]
	int rescueTimes;//[Offset: 0x54 , Size: 4]
	int DestroyVehicles;//[Offset: 0x58 , Size: 4]
	FString[] KillFlow;//[Offset: 0x5c , Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x68 , Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x74 , Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x78 , Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x84 , Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x88 , Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x8c , Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x90 , Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x9c , Size: 4]
	float InDamageAmount;//[Offset: 0xa0 , Size: 4]
	int ProneTimes;//[Offset: 0xa4 , Size: 4]
	int CrouchTimes;//[Offset: 0xa8 , Size: 4]
	int JumpTimes;//[Offset: 0xac , Size: 4]
	int KillMonsterNum;//[Offset: 0xb0 , Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xb4 , Size: 60]
	int LightCandleNum;//[Offset: 0xf0 , Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xf4 , Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x130 , Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x134 , Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x138 , Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x13c , Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140 , Size: 1]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0 , Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc , Size: 4]
	int TotalPlayerCount;//[Offset: 0x10 , Size: 4]
	int RemainingTeamCount;//[Offset: 0x14 , Size: 4]
	int TotalTeamCount;//[Offset: 0x18 , Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	uint64 Killer;//[Offset: 0x20 , Size: 8]
	FString KillerName;//[Offset: 0x28 , Size: 12]
	int ShootWeaponShotNum;//[Offset: 0x34 , Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x38 , Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x3c , Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x40 , Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x44 , Size: 4]
	int HealTimes;//[Offset: 0x48 , Size: 4]
	FString[] KillFlow;//[Offset: 0x4c , Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x58 , Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x64 , Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x70 , Size: 60]
	<int,int> TLog_BulletCount;//[Offset: 0xac , Size: 60]
	UseItemFlow[] UseItemFlow;//[Offset: 0xe8 , Size: 12]
	int destroyVehicleNum;//[Offset: 0xf4 , Size: 4]
	int is_escape;//[Offset: 0xf8 , Size: 4]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0xfc , Size: 12]
	Vector LandLocation;//[Offset: 0x108 , Size: 12]
	int LandTime;//[Offset: 0x114 , Size: 4]
	Vector ParachuteLocation;//[Offset: 0x118 , Size: 12]
	Vector DeadLocation;//[Offset: 0x124 , Size: 12]
	FString DeadDamangeType;//[Offset: 0x130 , Size: 12]
	int PveDeadAttacker;//[Offset: 0x13c , Size: 4]
	int PveStageId;//[Offset: 0x140 , Size: 4]
	FString DeadTimeStr;//[Offset: 0x144 , Size: 12]
	FString logoutime;//[Offset: 0x150 , Size: 12]
	float Pronetime;//[Offset: 0x15c , Size: 4]
	float BeInWaterTime;//[Offset: 0x160 , Size: 4]
	float SwimmingDistance;//[Offset: 0x164 , Size: 4]
	int BeDownTimes;//[Offset: 0x168 , Size: 4]
	int BeSavedTimes;//[Offset: 0x16c , Size: 4]
	int PickUpAirDrops;//[Offset: 0x170 , Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x174 , Size: 80]
	int Rank;//[Offset: 0x1c4 , Size: 4]
	int TotalScore;//[Offset: 0x1c8 , Size: 4]
	int ProneTimes;//[Offset: 0x1cc , Size: 4]
	int CrouchTimes;//[Offset: 0x1d0 , Size: 4]
	int JumpTimes;//[Offset: 0x1d4 , Size: 4]
	int TouchDownAreaID;//[Offset: 0x1d8 , Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x1dc , Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x1e0 , Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x1ec , Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x1f8 , Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x204 , Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x210 , Size: 12]
	int KillNumInVehicle;//[Offset: 0x21c , Size: 4]
	float TotalSprintDistance;//[Offset: 0x220 , Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x224 , Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x228 , Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x22c , Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x238 , Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244 , Size: 1]
	int KillMonsterNum;//[Offset: 0x248 , Size: 4]
	int LightCandleNum;//[Offset: 0x24c , Size: 4]
	float BattleStateTime;//[Offset: 0x250 , Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254 , Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x258 , Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x294 , Size: 8]
	float TotalDamage;//[Offset: 0x29c , Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x2a0 , Size: 4]
	int FollowState;//[Offset: 0x2a4 , Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x2a8 , Size: 12]
	int UseHelicoperNum;//[Offset: 0x2b4 , Size: 4]
	float UseHelicoperDistance;//[Offset: 0x2b8 , Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x2bc , Size: 4]
	int InHelicopterTime;//[Offset: 0x2c0 , Size: 4]
	int NormalItemNum;//[Offset: 0x2c4 , Size: 4]
	int SeniorItemNum;//[Offset: 0x2c8 , Size: 4]
	int KillMagicWalkAI;//[Offset: 0x2cc , Size: 4]
	int SendMagicWalkAI;//[Offset: 0x2d0 , Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0 , Size: 32]
	FString PlayerName;//[Offset: 0x20 , Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0 , Size: 4]
	Vector BoxLocation;//[Offset: 0x4 , Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0 , Size: 4]
	int MatCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2c8 , Size: 4]
	int DecalId;//[Offset: 0x2cc , Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x2d0 , Size: 112]
	STExtraPlayerState* OwnerPS;//[Offset: 0x340 , Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x344 , Size: 8]
	void OnRep_DecalInfo();// 0x12dedb4

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0 , Size: 4]
	Transform Transform;//[Offset: 0x10 , Size: 48]
	enum ParentType;//[Offset: 0x50 , Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x54 , Size: 8]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PlayerOpenID;//[Offset: 0xc , Size: 12]
	FString PicUrl;//[Offset: 0x18 , Size: 12]
	int TeamID;//[Offset: 0x24 , Size: 4]
	uint64 Uid;//[Offset: 0x28 , Size: 8]
	uint32 PlayerKey;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: HitEnemyData
	Vector HitLocation;//[Offset: 0x0 , Size: 12]
	bool bNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	uint32 HittedPlayerID;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: TeammateConveyStatus
	bool bIsInFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float PreFireTime;//[Offset: 0x4 , Size: 4]
	float FireSignContinueTime;//[Offset: 0x8 , Size: 4]
	bool bIsInDamaing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float PreDamageTime;//[Offset: 0x10 , Size: 4]
	float DamageSignContinueTime;//[Offset: 0x14 , Size: 4]
	bool bIsInQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	float PreQuickChatTime;//[Offset: 0x1c , Size: 4]
	float QuickChatSignContinueTime;//[Offset: 0x20 , Size: 4]
	int VoiceState;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0 , Size: 1]
	int TypeID;//[Offset: 0x4 , Size: 4]
	Vector Location;//[Offset: 0x8 , Size: 12]
	Rotator Rotation;//[Offset: 0x14 , Size: 12]
	int InstanceID;//[Offset: 0x20 , Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x24 , Size: 24]
	enum MapAdded;//[Offset: 0x3c , Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d , Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0 , Size: 4]
	int CustomState;//[Offset: 0x4 , Size: 4]
	FString CustomString;//[Offset: 0x8 , Size: 12]
	enum InWhichMap;//[Offset: 0x14 , Size: 1]

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0xc0 , Size: 12]
	float MaxBreathAmount;//[Offset: 0xcc , Size: 4]
	float DrowningHurtHight;//[Offset: 0xd0 , Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0xd4 , Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0xd8 , Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0xdc , Size: 4]
	float BreathDeltaTime;//[Offset: 0xe0 , Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0xe4 , Size: 4]
	float MinSpeedScale;//[Offset: 0xe8 , Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0xec , Size: 4]
	float MaxProneWaterHeight;//[Offset: 0xf0 , Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0xf4 , Size: 4]
	float RollMaxAngle;//[Offset: 0xf8 , Size: 4]
	float DistoVolume;//[Offset: 0xfc , Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x114 , Size: 4]
	float downWaterHeight;//[Offset: 0x11c , Size: 4]
	float nowTickTime;//[Offset: 0x128 , Size: 4]
	Actor* WaterObjectCpp;//[Offset: 0x12c , Size: 4]
	void UpdateSwimCollisionHeightCpp();// 0x13e73a0
	void LeaveWater();// 0x13e738c
	Actor* GetWaterObject();// 0x13e7364
	void EnterWater_BluePrint();// 0x1bf56d0
	void EnterWater(Actor* WaterObject);// 0x13e72ec
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x1bf56d0

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0 , Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4 , Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8 , Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4b0 , Size: 4]
	float AttachCheckDistance;//[Offset: 0x4b4 , Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4b8 , Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4bc , Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4c0 , Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4dc , Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4e8 , Size: 12]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x133caf8
	void UpdateDataWhenBagChangedOnAutonomous();// 0x133cae4
	void OnRecoverOnServer();// 0x133cac8
	void OnReconnectOnServer();// 0x133caac
	void OnReconnectOnClient();// 0x133ca90
	void OnDisconnectToClientOnServer();// 0x133ca7c
	int GetBagLevel();// 0x133ca4c

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101 , Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102 , Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x104 , Size: 12]
	float DestinyThreshold;//[Offset: 0x110 , Size: 4]
	int RoundNum;//[Offset: 0x114 , Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	Actor* ContainActor;//[Offset: 0x138 , Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x1ac , Size: 4]
	void SetGMCicleTime(float CDTime, float LastTime);// 0x13404b4
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x13403bc

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0 , Size: 12]
	FString TimerName;//[Offset: 0xcc , Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0 , Size: 4]
	float DelayTime;//[Offset: 0x4 , Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8 , Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc , Size: 4]
	float[] BlueCirclePreWarning;//[Offset: 0x10 , Size: 12]
	float LastTime;//[Offset: 0x1c , Size: 4]
	float Pain;//[Offset: 0x20 , Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	Vector2D bluepoint;//[Offset: 0x28 , Size: 8]
	float blueradius;//[Offset: 0x30 , Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	Vector2D whitepoint;//[Offset: 0x38 , Size: 8]
	float whiteradius;//[Offset: 0x40 , Size: 4]
	float alpha;//[Offset: 0x44 , Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	float DestinyChance;//[Offset: 0x4c , Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]
	float ScreenSizeFactor;//[Offset: 0x54 , Size: 4]
	float ExtraRadius;//[Offset: 0x58 , Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float DamageMagnifierRange;//[Offset: 0x60 , Size: 4]
	float DamageMagnifier;//[Offset: 0x64 , Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x68 , Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x6c , Size: 12]
	float EdgeDistance;//[Offset: 0x78 , Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4 , Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8 , Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc , Size: 4]
	byte CircleStatus;//[Offset: 0x10 , Size: 1]
	Vector BlueCircle;//[Offset: 0x14 , Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20 , Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c , Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c , Size: 4]
	float ExtraRadius;//[Offset: 0x40 , Size: 4]
	byte AirAttackStatus;//[Offset: 0x44 , Size: 1]
	Vector AirAttackArea;//[Offset: 0x48 , Size: 12]
	int AirAttackWave;//[Offset: 0x54 , Size: 4]
	Vector AirplaneStartLocation;//[Offset: 0x58 , Size: 12]
	Vector AirplaneStopLocation;//[Offset: 0x64 , Size: 12]
	Vector AirplaneCanJumpLocation;//[Offset: 0x70 , Size: 12]
	Vector AirplaneForceJumpLocation;//[Offset: 0x7c , Size: 12]
	int PlayerNumOnPlane;//[Offset: 0x88 , Size: 4]
	int BossCountDown;//[Offset: 0x8c , Size: 4]
	Vector BossBornPos;//[Offset: 0x90 , Size: 12]

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0 , Size: 4]
	float[] Times;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4 , Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc , Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14 , Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x1c , Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x24 , Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x2c , Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x34 , Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x3c , Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x44 , Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x4c , Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x54 , Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x5c , Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x64 , Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x6c , Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x78 , Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0 , Size: 4]
	float Rate;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	Vector Velocity;//[Offset: 0x4 , Size: 12]
	Vector movedir;//[Offset: 0x10 , Size: 12]
	byte MovementMode;//[Offset: 0x1c , Size: 1]
	byte PoseType;//[Offset: 0x1d , Size: 1]
	Rotator ViewRotation;//[Offset: 0x20 , Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c , Size: 12]
	byte WeaponType;//[Offset: 0x38 , Size: 1]
	byte WeaponHoldType;//[Offset: 0x39 , Size: 1]
	byte WeaponState;//[Offset: 0x3a , Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b , Size: 1]
	byte SightType;//[Offset: 0x3c , Size: 1]
	float RecoilKickADS;//[Offset: 0x40 , Size: 4]
	float ForegripParam;//[Offset: 0x44 , Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c , Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58 , Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64 , Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70 , Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c , Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88 , Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94 , Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0 , Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac , Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8 , Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4 , Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0 , Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc , Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd , Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde , Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf , Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1 , Size: 1]
	Vector HurtDir;//[Offset: 0xe4 , Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	byte JumpType;//[Offset: 0xf2 , Size: 1]
	byte ParachuteState;//[Offset: 0xf3 , Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6 , Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7 , Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8 , Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc , Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4 , Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8 , Size: 4]
	AnimationAsset* SpecialIdleAnim;//[Offset: 0xc , Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x10 , Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x14 , Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x18 , Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x1c , Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x20 , Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x24 , Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x28 , Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x2c , Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x30 , Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x34 , Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x38 , Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x3c , Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x40 , Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x44 , Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x48 , Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x4c , Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x50 , Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x54 , Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x58 , Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x5c , Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x60 , Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x64 , Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x68 , Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x6c , Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6 , Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7 , Size: 1]
	float VacateHight;//[Offset: 0x8 , Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10 , Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c , Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28 , Size: 1]
	byte SeatSpecialType;//[Offset: 0x29 , Size: 1]
	enum VehicleType;//[Offset: 0x2a , Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0 , Size: 4]
	float Durability;//[Offset: 0x4 , Size: 4]
	float DamageReduceScale;//[Offset: 0x8 , Size: 4]
	float DurabilityReduceScale;//[Offset: 0xc , Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x10 , Size: 12]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0 , Size: 12]
	float EnergyMax;//[Offset: 0xc , Size: 4]
	float EnergyCurrent;//[Offset: 0x10 , Size: 4]
	float AttenuationPeriod;//[Offset: 0x14 , Size: 4]
	float AttenuationAmount;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0 , Size: 4]
	FString BuffName;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140 , Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0 , Size: 12]
	byte ShowType;//[Offset: 0xc , Size: 1]
	float Value;//[Offset: 0x10 , Size: 4]
	float LimitValue;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	void ReportVerifyInfoFlow();// 0x1408c70
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x1408ba0
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x1408a78
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x1408988
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x14088b8
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x14087e8
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x14086b8
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x1408588
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x1408484
	void ReportGameSetting(const GameSetting GameSetting);// 0x1408394
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x14082c4
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x14081c4
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x14080f4
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x1408024
	void ReportAimFlow(const AimFlow AimFlow);// 0x1407f54
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponID, out int BulletID, out int BulletNum);// 0x1407d90

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	int64 dtEventTime;//[Offset: 0x10 , Size: 8]
	FString GameAppID;//[Offset: 0x18 , Size: 12]
	FString OpenID;//[Offset: 0x24 , Size: 12]
	int8 PlatID;//[Offset: 0x30 , Size: 1]
	uint16 AreaID;//[Offset: 0x32 , Size: 2]
	FString ZoneID;//[Offset: 0x34 , Size: 12]
	uint64 BattleID;//[Offset: 0x40 , Size: 8]
	int64 ClientStartTime;//[Offset: 0x48 , Size: 8]
	uint64 RoleID;//[Offset: 0x50 , Size: 8]
	FString TargetUserName;//[Offset: 0x58 , Size: 12]
	FString TargetOpenID;//[Offset: 0x64 , Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70 , Size: 8]
	FString HitPart;//[Offset: 0x78 , Size: 12]
	int GunID;//[Offset: 0x84 , Size: 4]
	byte PlayerKill;//[Offset: 0x88 , Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90 , Size: 8]
	int KillAICnt;//[Offset: 0x98 , Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c , Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0 , Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8 , Size: 1]
	int GunID;//[Offset: 0xc , Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10 , Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14 , Size: 54]
	int LocationX;//[Offset: 0x4c , Size: 4]
	int LocationY;//[Offset: 0x50 , Size: 4]
	int LocationZ;//[Offset: 0x54 , Size: 4]
	int KilledLocationX;//[Offset: 0x58 , Size: 4]
	int KilledLocationY;//[Offset: 0x5c , Size: 4]
	int KilledLocationZ;//[Offset: 0x60 , Size: 4]
	int TeamID;//[Offset: 0x64 , Size: 4]
	FString GameModeID;//[Offset: 0x68 , Size: 12]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0 , Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2 , Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4 , Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6 , Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8 , Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa , Size: 2]
	int16 LeftMax;//[Offset: 0xc , Size: 2]
	int16 RightMax;//[Offset: 0xe , Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10 , Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12 , Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14 , Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16 , Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18 , Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a , Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c , Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e , Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20 , Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22 , Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24 , Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26 , Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28 , Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a , Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e , Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30 , Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32 , Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34 , Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0 , Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0 , Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8 , Size: 12]
	FString MapName;//[Offset: 0x14 , Size: 12]
	int8 WeatherID;//[Offset: 0x20 , Size: 1]
	int64 GameStartTime;//[Offset: 0x28 , Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30 , Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34 , Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38 , Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c , Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40 , Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x44 , Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x48 , Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x4c , Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x50 , Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x54 , Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x58 , Size: 4]
	int PlayerLandPositionX;//[Offset: 0x5c , Size: 4]
	int PlayerLandPositionY;//[Offset: 0x60 , Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x64 , Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x68 , Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x6c , Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x70 , Size: 4]
	FString GVoiceTeamID;//[Offset: 0x74 , Size: 12]
	FString GVoiceRoomID;//[Offset: 0x80 , Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x8c , Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x90 , Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	int64 dtEventTime;//[Offset: 0x10 , Size: 8]
	FString GameAppID;//[Offset: 0x18 , Size: 12]
	FString OpenID;//[Offset: 0x24 , Size: 12]
	int8 PlatID;//[Offset: 0x30 , Size: 1]
	uint16 AreaID;//[Offset: 0x32 , Size: 2]
	FString ZoneID;//[Offset: 0x34 , Size: 12]
	uint64 BattleID;//[Offset: 0x40 , Size: 8]
	int64 ClientStartTime;//[Offset: 0x48 , Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50 , Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54 , Size: 12]
	FString UserName;//[Offset: 0x60 , Size: 12]
	uint64 RoleID;//[Offset: 0x70 , Size: 8]
	int8 RoleType;//[Offset: 0x78 , Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c , Size: 12]
	FString EnemyUserName;//[Offset: 0x88 , Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98 , Size: 8]
	int EnemyRoleType;//[Offset: 0xa0 , Size: 4]
	uint32 HurtTime;//[Offset: 0xa4 , Size: 4]
	int HurtType;//[Offset: 0xa8 , Size: 4]
	int HitType;//[Offset: 0xac , Size: 4]
	int DamageStart;//[Offset: 0xb0 , Size: 4]
	int DamageReduce;//[Offset: 0xb4 , Size: 4]
	int ArmorDef;//[Offset: 0xb8 , Size: 4]
	int HPstart;//[Offset: 0xbc , Size: 4]
	int HPEnd;//[Offset: 0xc0 , Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4 , Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8 , Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc , Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0 , Size: 4]
	int CarHPStart;//[Offset: 0xd4 , Size: 4]
	int CarHPEnd;//[Offset: 0xd8 , Size: 4]
	int FallHeight;//[Offset: 0xdc , Size: 4]
	int HypoxiaTime;//[Offset: 0xe0 , Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4 , Size: 4]
	int PlayerKilled;//[Offset: 0xe8 , Size: 4]
	int ArmorKill;//[Offset: 0xec , Size: 4]
	int CarKill;//[Offset: 0xf0 , Size: 4]
	int IfIsAI;//[Offset: 0xf4 , Size: 4]
	int CircleIndex;//[Offset: 0xf8 , Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc , Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0 , Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc , Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18 , Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c , Size: 4]
	uint64 Uid;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0 , Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc , Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18 , Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c , Size: 4]
	uint64 Uid;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0 , Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8 , Size: 12]
	FString MapName;//[Offset: 0x14 , Size: 12]
	int8 WeatherID;//[Offset: 0x20 , Size: 1]
	FString ItemList;//[Offset: 0x24 , Size: 12]
	int8 TeamType;//[Offset: 0x30 , Size: 1]
	int TeamID;//[Offset: 0x34 , Size: 4]
	FString TeamPlayer1;//[Offset: 0x38 , Size: 12]
	FString TeamPlayer2;//[Offset: 0x44 , Size: 12]
	FString TeamPlayer3;//[Offset: 0x50 , Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c , Size: 4]
	FString GVoiceTeamID;//[Offset: 0x60 , Size: 12]
	FString GVoiceRoomID;//[Offset: 0x6c , Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x78 , Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0 , Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8 , Size: 40]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x30 , Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x38 , Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x40 , Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x48 , Size: 112]
	GameSetting_PickUp PickUp;//[Offset: 0xb8 , Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0 , Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8 , Size: 4]
	int ShotGunShootMode;//[Offset: 0xc , Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int LRShootMode;//[Offset: 0x14 , Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int LeftHandFire;//[Offset: 0x1c , Size: 4]
	int Gyroscope;//[Offset: 0x20 , Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27 , Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0 , Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0 , Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0 , Size: 4]
	int DrivingViewMode;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0 , Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4 , Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10 , Size: 32]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x30 , Size: 32]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x50 , Size: 32]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0 , Size: 4]
	float ParachuteEye;//[Offset: 0x4 , Size: 4]
	float CamFpFreeEye;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0 , Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4 , Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8 , Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc , Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10 , Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14 , Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18 , Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0 , Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4 , Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8 , Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc , Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10 , Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14 , Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18 , Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0 , Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4 , Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8 , Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc , Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10 , Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14 , Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18 , Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4 , Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c , Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0 , Size: 4]
	int Bandage;//[Offset: 0x4 , Size: 4]
	int PainKiller;//[Offset: 0x8 , Size: 4]
	int Adrenaline;//[Offset: 0xc , Size: 4]
	int EnergyDrink;//[Offset: 0x10 , Size: 4]
	int FirstAidKit;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0 , Size: 4]
	int ShockBomb;//[Offset: 0x4 , Size: 4]
	int SmokeBomb;//[Offset: 0x8 , Size: 4]
	int GrenadeFragmented;//[Offset: 0xc , Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponID;//[Offset: 0x0 , Size: 4]
	int BulletCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0 , Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8 , Size: 12]
	FString ClientVersion;//[Offset: 0x14 , Size: 12]
	uint32 OverTime;//[Offset: 0x20 , Size: 4]
	int8 EndType;//[Offset: 0x24 , Size: 1]
	byte KillCount;//[Offset: 0x25 , Size: 1]
	byte AssistsCount;//[Offset: 0x26 , Size: 1]
	byte DropCount;//[Offset: 0x27 , Size: 1]
	byte SaveCount;//[Offset: 0x28 , Size: 1]
	byte RebornCount;//[Offset: 0x29 , Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a , Size: 1]
	int GoldGet;//[Offset: 0x2c , Size: 4]
	int DiamondGet;//[Offset: 0x30 , Size: 4]
	int ExpGet;//[Offset: 0x34 , Size: 4]
	byte WinRank;//[Offset: 0x38 , Size: 1]
	byte TotalPlayers;//[Offset: 0x39 , Size: 1]
	int PlayerRank;//[Offset: 0x3c , Size: 4]
	int RankEnd;//[Offset: 0x40 , Size: 4]
	int TeamID;//[Offset: 0x44 , Size: 4]
	FString TeamPlayer1;//[Offset: 0x48 , Size: 12]
	FString TeamPlayer2;//[Offset: 0x54 , Size: 12]
	FString TeamPlayer3;//[Offset: 0x60 , Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c , Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c , Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d , Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e , Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f , Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70 , Size: 4]
	byte RoundCircleCount;//[Offset: 0x74 , Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78 , Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84 , Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90 , Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c , Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8 , Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4 , Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0 , Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc , Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8 , Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc , Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0 , Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1 , Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2 , Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3 , Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4 , Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8 , Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec , Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0 , Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4 , Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8 , Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc , Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100 , Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104 , Size: 1]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	FString GameAppID;//[Offset: 0xc , Size: 12]
	FString OpenID;//[Offset: 0x18 , Size: 12]
	uint16 AreaID;//[Offset: 0x24 , Size: 2]
	int8 PlatID;//[Offset: 0x26 , Size: 1]
	FString ZoneID;//[Offset: 0x28 , Size: 12]
	uint64 BattleID;//[Offset: 0x38 , Size: 8]
	FString UserName;//[Offset: 0x40 , Size: 12]
	uint64 RoleID;//[Offset: 0x50 , Size: 8]
	int8 RoleType;//[Offset: 0x58 , Size: 1]
	FString PicUrl;//[Offset: 0x5c , Size: 12]

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0 , Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8 , Size: 12]
	FString PicUrl;//[Offset: 0x14 , Size: 12]
	uint32 GameStartTime;//[Offset: 0x20 , Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24 , Size: 4]
	int NewCirclePositionX;//[Offset: 0x28 , Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c , Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30 , Size: 4]
	int NewCircleCount;//[Offset: 0x34 , Size: 4]
	int PlayerPositionX;//[Offset: 0x38 , Size: 4]
	int PlayerPositionY;//[Offset: 0x3c , Size: 4]
	int PlayerPositionZ;//[Offset: 0x40 , Size: 4]
	int PlayerHP;//[Offset: 0x44 , Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48 , Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c , Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50 , Size: 4]
	int CirclePoisonCount;//[Offset: 0x54 , Size: 4]
	int CirclePoisonMin;//[Offset: 0x58 , Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c , Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60 , Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64 , Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68 , Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c , Size: 4]
	int RecoveryCount;//[Offset: 0x70 , Size: 4]
	int RecoveryMin;//[Offset: 0x74 , Size: 4]
	int RecoveryMax;//[Offset: 0x78 , Size: 4]
	int RecoveryTotal;//[Offset: 0x7c , Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80 , Size: 4]
	int EnergyRecoveryMin;//[Offset: 0x84 , Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x88 , Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x8c , Size: 4]
	int EnergyStartLv;//[Offset: 0x90 , Size: 4]
	int EnergyStartTime;//[Offset: 0x94 , Size: 4]
	FString EnergyItemUse;//[Offset: 0x98 , Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xa4 , Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xa8 , Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb4 , Size: 12]
	int EnergyEndLv;//[Offset: 0xc0 , Size: 4]
	int EnergyEndTime;//[Offset: 0xc4 , Size: 4]
	int PlayerMoveDis;//[Offset: 0xc8 , Size: 4]
	int PlayerSpeedMax;//[Offset: 0xcc , Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xd0 , Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xd4 , Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xd8 , Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xdc , Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xe0 , Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xe4 , Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xe8 , Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xec , Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xf0 , Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0xf4 , Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0xf8 , Size: 4]
	int PlayerCar;//[Offset: 0xfc , Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x100 , Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x104 , Size: 4]
	byte AutoAimType;//[Offset: 0x108 , Size: 1]
	int AutoAimTime;//[Offset: 0x10c , Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x110 , Size: 12]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	int64 dtEventTime;//[Offset: 0x10 , Size: 8]
	FString GameAppID;//[Offset: 0x18 , Size: 12]
	FString OpenID;//[Offset: 0x24 , Size: 12]
	uint16 AreaID;//[Offset: 0x30 , Size: 2]
	int8 PlatID;//[Offset: 0x32 , Size: 1]
	FString ZoneID;//[Offset: 0x34 , Size: 12]
	uint64 BattleID;//[Offset: 0x40 , Size: 8]
	int64 ClientStartTime;//[Offset: 0x48 , Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50 , Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54 , Size: 12]
	FString UserName;//[Offset: 0x60 , Size: 12]
	uint64 RoleID;//[Offset: 0x70 , Size: 8]
	int8 RoleType;//[Offset: 0x78 , Size: 1]
	FString TargetOpenID;//[Offset: 0x7c , Size: 12]
	FString TargetUserName;//[Offset: 0x88 , Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98 , Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0 , Size: 1]
	FString GunName;//[Offset: 0xa4 , Size: 12]
	FString GunPartsType;//[Offset: 0xb0 , Size: 12]
	int8 SightType;//[Offset: 0xbc , Size: 1]
	int BulletSpeed;//[Offset: 0xc0 , Size: 4]
	int8 MagazineMax;//[Offset: 0xc4 , Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5 , Size: 1]
	int ShotFrequency;//[Offset: 0xc8 , Size: 4]
	int BulletDamage;//[Offset: 0xcc , Size: 4]
	int16 BulletDown;//[Offset: 0xd0 , Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2 , Size: 1]
	int Recoil;//[Offset: 0xd4 , Size: 4]
	int ReloadTime;//[Offset: 0xd8 , Size: 4]
	FString PlayerState;//[Offset: 0xdc , Size: 12]
	byte ShotPose;//[Offset: 0xe8 , Size: 1]
	byte FireType;//[Offset: 0xe9 , Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea , Size: 1]
	byte Sideways;//[Offset: 0xeb , Size: 1]
	int ShootingDeviationX;//[Offset: 0xec , Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0 , Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4 , Size: 4]
	uint32 ShotTime;//[Offset: 0xf8 , Size: 4]
	int HitTime;//[Offset: 0xfc , Size: 4]
	int PlayerPositionX;//[Offset: 0x100 , Size: 4]
	int PlayerPositionY;//[Offset: 0x104 , Size: 4]
	int PlayerPositionZ;//[Offset: 0x108 , Size: 4]
	int GunPositionX;//[Offset: 0x10c , Size: 4]
	int GunPositionY;//[Offset: 0x110 , Size: 4]
	int GunPositionZ;//[Offset: 0x114 , Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118 , Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c , Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120 , Size: 4]
	uint32 LastHitTime;//[Offset: 0x124 , Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128 , Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c , Size: 4]
	int HitPositionX;//[Offset: 0x130 , Size: 4]
	int HitPositionY;//[Offset: 0x134 , Size: 4]
	int HitPositionZ;//[Offset: 0x138 , Size: 4]
	byte HitPart;//[Offset: 0x13c , Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d , Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d , Size: 1]
	byte BulletCost;//[Offset: 0x13e , Size: 1]
	int HPstart;//[Offset: 0x140 , Size: 4]
	int HPEnd;//[Offset: 0x144 , Size: 4]
	int ArmorHPStart;//[Offset: 0x148 , Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c , Size: 4]
	int CarHPStart;//[Offset: 0x150 , Size: 4]
	int CarHPEnd;//[Offset: 0x154 , Size: 4]
	byte PlayerKill;//[Offset: 0x158 , Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159 , Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159 , Size: 1]
	int RecoilMoveX;//[Offset: 0x15c , Size: 4]
	int RecoilMoveY;//[Offset: 0x160 , Size: 4]
	int WeaponAimFOV;//[Offset: 0x164 , Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168 , Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c , Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170 , Size: 4]
	int AutoAimSpeed;//[Offset: 0x174 , Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178 , Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c , Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180 , Size: 4]
	int GunID;//[Offset: 0x184 , Size: 4]
	int IfIsOnCar;//[Offset: 0x188 , Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	int KillAICnt;//[Offset: 0x190 , Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x194 , Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	int64 dtEventTime;//[Offset: 0x10 , Size: 8]
	FString GameAppID;//[Offset: 0x18 , Size: 12]
	FString OpenID;//[Offset: 0x24 , Size: 12]
	uint16 AreaID;//[Offset: 0x30 , Size: 2]
	int8 PlatID;//[Offset: 0x32 , Size: 1]
	FString ZoneID;//[Offset: 0x34 , Size: 12]
	uint64 BattleID;//[Offset: 0x40 , Size: 8]
	int64 ClientStartTime;//[Offset: 0x48 , Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50 , Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54 , Size: 12]
	FString UserName;//[Offset: 0x60 , Size: 12]
	uint64 RoleID;//[Offset: 0x70 , Size: 8]
	int8 RoleType;//[Offset: 0x78 , Size: 1]
	int AimTime;//[Offset: 0x7c , Size: 4]
	FString ShotCDTime;//[Offset: 0x80 , Size: 12]
	int ShotCount;//[Offset: 0x8c , Size: 4]
	int ShotHitCount;//[Offset: 0x90 , Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94 , Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98 , Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c , Size: 4]
	FString HitDistance;//[Offset: 0xa0 , Size: 12]
	FString HitEachDistance;//[Offset: 0xac , Size: 12]
	FString HitAngle;//[Offset: 0xb8 , Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4 , Size: 12]
	FString HitPartInfo;//[Offset: 0xd0 , Size: 12]
	FString PlayerState;//[Offset: 0xdc , Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8 , Size: 1]
	int8 SightType;//[Offset: 0xe9 , Size: 1]
	uint32 AimFlowID;//[Offset: 0xec , Size: 4]

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	int HalloweenVampireClothItemID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0 , Size: 1]
	int8 Disabled;//[Offset: 0x1 , Size: 1]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0 , Size: 4]
	float SteerInput;//[Offset: 0x4 , Size: 4]
	int8 State;//[Offset: 0x8 , Size: 1]
	Rotator CameraRotation;//[Offset: 0xc , Size: 12]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0 , Size: 12]
	byte Roll;//[Offset: 0xc , Size: 1]
	uint32 View;//[Offset: 0x10 , Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0 , Size: 1]
	int LeaderIdx;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x154 , Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x160 , Size: 12]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x16c , Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x178 , Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x184 , Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x190 , Size: 4]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x194 , Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1a0 , Size: 12]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac , Size: 1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad , Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae , Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af , Size: 1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x18422dc
	void OnLoadSingleCharacterAnimFinish();// 0x12dedb4
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x1842040
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x1841da4
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x1841c9c
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x1841b14

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0xf8 , Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x134 , Size: 12]
	SoftObjectPath[] AnimationLoadingPendingList;//[Offset: 0x140 , Size: 12]

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0 , Size: 1]
	FName AnimTypeName;//[Offset: 0x8 , Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80 , Size: 56]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0 , Size: 1]
	FName PoseName;//[Offset: 0x8 , Size: 8]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10 , Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0 , Size: 1]
	FName AnimTypeName;//[Offset: 0x8 , Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80 , Size: 56]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0 , Size: 1]
	FName JumpTypeName;//[Offset: 0x8 , Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0 , Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0 , Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0 , Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4 , Size: 1]
	byte AnimType;//[Offset: 0x5 , Size: 1]
	byte PoseType;//[Offset: 0x6 , Size: 1]
	byte JumpType;//[Offset: 0x7 , Size: 1]
	byte JumpPhase;//[Offset: 0x8 , Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10 , Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0 , Size: 1]
	int SeatIdx;//[Offset: 0x4 , Size: 4]
	byte VehicleAnimType;//[Offset: 0x8 , Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10 , Size: 40]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0 , Size: 4]
	AnimationAsset* Animation;//[Offset: 0x8 , Size: 40]
	AnimationAsset* RealAnimationPtr;//[Offset: 0x30 , Size: 4]
	bool AsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0 , Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4 , Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8 , Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc , Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10 , Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0 , Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4 , Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8 , Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc , Size: 4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0 , Size: 4]
	int OtherEmoteId;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1 , Size: 1]
	<byte,VaultAnimData> VaultAnimSoftPtrMap;//[Offset: 0xc4 , Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x100 , Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x104 , Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x10c , Size: 4]
	bool VaultFromCPP();// 0x13f15ec
	void UpdateVault_BluePrint();// 0x13c0654
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x13f156c
	void StartAsyncLoadTeamVaultAnimRes();// 0x13f1558
	FString GetVaultKeyByBlockHeight(float Height);// 0x13f1448
	Rotator GetRelicateRotator();// 0x13f1400
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x13f11bc
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x13f0f78
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x13f0f00

--------------------------------
Class: VaultAnimData
	AnimationAsset* VaultAnimSoftPtr;//[Offset: 0x0 , Size: 40]
	AnimationAsset* TeamVaultAnimSoftPtr;//[Offset: 0x28 , Size: 40]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0 , Size: 1]
	Vector Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0 , Size: 1]
	Transform AttachTransform;//[Offset: 0x10 , Size: 48]
	byte AttachLocationType;//[Offset: 0x40 , Size: 1]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0 , Size: 4]
	Transform DecalTransform;//[Offset: 0x10 , Size: 48]
	int DecalInstanceId;//[Offset: 0x40 , Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0 , Size: 4]
	float MarkTimeLen;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PUBGDoor.UAENetActor.Actor.Object
	int iRegionDoor;//[Offset: 0x314 , Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319 , Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x31c , Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321 , Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x324 , Size: 4]
	float autoOpenAngel;//[Offset: 0x328 , Size: 4]
	float forwardSpeedRatio;//[Offset: 0x32c , Size: 4]
	int doorState;//[Offset: 0x330 , Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334 , Size: 1]
	float DoorOperateTime;//[Offset: 0x338 , Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x33c , Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x340 , Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x344 , Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348 , Size: 1]
	int DoorStateEx;//[Offset: 0x34c , Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350 , Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x354 , Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x358 , Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x35c , Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360 , Size: 1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x364 , Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x370 , Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374 , Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375 , Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376 , Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377 , Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378 , Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379 , Size: 1]
	Character* PlayerCharacter;//[Offset: 0x37c , Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x380 , Size: 4]
	void SetDoorBroken(bool bExtraDoor);// 0x13f75b8
	void RefreshUIOnClient();// 0x13f75a4
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x13f74e0
	void OnRep_RepDoorStateEx();// 0x13f74cc
	void OnRep_RepDoorState();// 0x13f74b8
	void OnRep_RepDoorBrokenEx();// 0x13f74a4
	void OnRep_RepDoorBroken();// 0x13f7490
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x13f7348
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x13f7200
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x13f713c
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x13f6f40
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x13f6d44
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x13f6c80
	bool IsSameDoorState(int ClientState);// 0x13f6c00
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x13f69dc
	enum[] GetDamageableGameObjectType();// 0x13c17f8
	void ForceNetUpdate();// 0x13e0834
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x13f6918
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x13f67b4
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x1bf56d0
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x1bf56d0
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x1bf56d0

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0xcc , Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0xd0 , Size: 8]
	FName FPPSocketName;//[Offset: 0xd8 , Size: 8]
	FName BoltActionCurveName;//[Offset: 0xe0 , Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0xe8 , Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0xf0 , Size: 4]
	float BoltActionFov;//[Offset: 0xf4 , Size: 4]
	float ScopeZoomAlpha;//[Offset: 0xf8 , Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0xfc , Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x138 , Size: 4]
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x13c , Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x178 , Size: 4]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x18c , Size: 60]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8 , Size: 1]
	<FName,float> ScopeZoomMap;//[Offset: 0x1cc , Size: 60]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c , Size: 1]
	bool UpdateScopeCameraOffsets(out float FOV, out float Offset);// 0x131a248
	float SwitchSightConfigMaterial();// 0x1bf56d0
	void SwitchScopeMeshAnim(byte Type);// 0x131a1d0
	void SwitchCameraMode(byte Mode);// 0x131a158
	float SwitchAngledSightConfigMaterial();// 0x1bf56d0
	void StopScopeIn();// 0x1bf56d0
	float ShowReflectorSightTPPMaterial();// 0x1bf56d0
	float ShowAngledSightTPPMaterial();// 0x1bf56d0
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x131a08c
	void SetTagCulling(bool IsUse);// 0x1bf56d0
	void SetScopeCVar();// 0x131a078
	void ScopingChange(bool InValue);// 0x1319ff8
	void Scoping(byte NewType);// 0x1319f80
	void ScopeZoomUpdate(float alpha);// 0x1319f08
	void ScopeZoomTick(float DeltaTime);// 0x1319e90
	void ScopeZoomCalculate(out float FOV, out float SpringArmScaleX);// 0x1319db0
	void ScopeTimelineUpdate(float alpha);// 0x1319d38
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1319c7c
	void ScopeOutLogic();// 0x1319c68
	void ScopeOutEnd();// 0x1bf56d0
	void ScopeOut(byte NewType);// 0x1319bf0
	void ScopeNotHandFold();// 0x1319bdc
	void ScopeInterrupt(byte NewType);// 0x1319b64
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1319aa8
	void ScopeInLogic();// 0x1319a94
	void ScopeInEnd();// 0x1bf56d0
	void ScopeInContinue();// 0x1319a80
	void ScopeInAfterTimeline();// 0x1319a6c
	void ScopeIn(byte NewType);// 0x13199f4
	void ScopeHandFold();// 0x13199e0
	void RevertScopeCVarOnDie(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x13197e4
	void RevertScopeCVar();// 0x13197d0
	void PlayScopeInTimeline();// 0x1bf56d0
	bool IsUseZoomScope();// 0x13197a8
	bool IsRPGScopeIn();// 0x1319780
	bool IsCurWeaponAttachedAngledSight();// 0x13195ec
	bool IsAngledSightBySlot(byte Slot);// 0x1319700
	bool IsAngledSight();// 0x13196d0
	void InitScopeZoom(int WeaponID, int ScopeID);// 0x1319614
	bool HaveAngledSight();// 0x13195ec
	byte GetSightType();// 0x13195c4
	float GetScopeZoomValue(int WeaponID, int ScopeID);// 0x1319500
	FName GetScopeZoomKey(int WeaponID, int ScopeID);// 0x1319434
	float GetScopeFov(STExtraShootWeapon* ShootWeapon);// 0x1bf56d0
	float DetachSightLens();// 0x1bf56d0
	void BoltAction(float DeltaSeconds);// 0x13193bc
	void AttachToSight();// 0x1bf56d0
	float AttachSightLens();// 0x1bf56d0
	void ActiveComponentTickable();// 0x13193a8

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xa0 , Size: 40]
	float blendTime;//[Offset: 0xc8 , Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	AnimationAsset*[] LobbyEnterEmoteAnimAssetList;//[Offset: 0xd0 , Size: 12]
	AnimationAsset*[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0xdc , Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0xe8 , Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0xec , Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0xf4 , Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x100 , Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x12fee58
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x12fea44
	bool HandleDrop(int InCount, enum Reason);// 0x12fe550
	bool HandleDisuse(enum Reason);// 0x12fe4c8
	BackpackComponent* GetBackpackComponent();// 0x1302320
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x130225c

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0 , Size: 12]
	FString CauserNation;//[Offset: 0xc , Size: 12]
	FString VictimName;//[Offset: 0x18 , Size: 12]
	FString VictimNation;//[Offset: 0x24 , Size: 12]
	int DamageType;//[Offset: 0x30 , Size: 4]
	int AdditionalParam;//[Offset: 0x34 , Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x38 , Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	int ResultHealthStatus;//[Offset: 0x40 , Size: 4]
	byte RecordRelationShip;//[Offset: 0x44 , Size: 1]
	int PreviousHealthStatus;//[Offset: 0x48 , Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x4c , Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x50 , Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x54 , Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x58 , Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x5c , Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x60 , Size: 4]
	FString CauserPicURL;//[Offset: 0x64 , Size: 12]
	FString VictimPicURL;//[Offset: 0x70 , Size: 12]
	FString RealKillerName;//[Offset: 0x7c , Size: 12]
	int RealKillNum;//[Offset: 0x88 , Size: 4]
	byte CauserType;//[Offset: 0x8c , Size: 1]
	byte VictimType;//[Offset: 0x8d , Size: 1]

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0 , Size: 12]
	int WeatherID;//[Offset: 0xc , Size: 4]
	float WeatherTime;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0 , Size: 12]
	FString LocalAddr;//[Offset: 0xc , Size: 12]
	float AvgPing;//[Offset: 0x18 , Size: 4]
	float MaxPing;//[Offset: 0x1c , Size: 4]
	float HighPingPercent;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc , Size: 12]
	int PlayerGender;//[Offset: 0x18 , Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20 , Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	uint64 Uid;//[Offset: 0x8 , Size: 8]
	int ZoneID;//[Offset: 0x10 , Size: 4]
	uint32 PlayerKey;//[Offset: 0x14 , Size: 4]
	int BattleMode;//[Offset: 0x18 , Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int GameCount;//[Offset: 0x20 , Size: 4]
	float KDNum;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0 , Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0 , Size: 40]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	int WearIndex;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0 , Size: 4]
	int BagSkin;//[Offset: 0x4 , Size: 4]
	int HelmetSkin;//[Offset: 0x8 , Size: 4]
	int FlySkin;//[Offset: 0xc , Size: 4]
	GameModePlayerItem[] WeaponList;//[Offset: 0x10 , Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0 , Size: 32]
	SensibilityMode FireMode;//[Offset: 0x20 , Size: 32]
	SensibilityMode MotionMode;//[Offset: 0x40 , Size: 32]
	float VehicleEye;//[Offset: 0x60 , Size: 4]
	float ParachuteEye;//[Offset: 0x64 , Size: 4]
	float FPPEye;//[Offset: 0x68 , Size: 4]
	int SideMirrorModeC;//[Offset: 0x6c , Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0x70 , Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0 , Size: 4]
	float Sight1X;//[Offset: 0x4 , Size: 4]
	float Sight2X;//[Offset: 0x8 , Size: 4]
	float Sight3X;//[Offset: 0xc , Size: 4]
	float Sight4X;//[Offset: 0x10 , Size: 4]
	float Sight6X;//[Offset: 0x14 , Size: 4]
	float Sight8X;//[Offset: 0x18 , Size: 4]
	float FPPNoAim;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0 , Size: 4]
	int Type;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0 , Size: 1]
	FString AttackActionName;//[Offset: 0x4 , Size: 12]
	FString AttackName;//[Offset: 0x10 , Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int KillNum;//[Offset: 0x20 , Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	FString FullMsg;//[Offset: 0x28 , Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34 , Size: 4]
	FString VictimPlayerName;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc , Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1 , Size: 1]
	float GuideInterval;//[Offset: 0xc4 , Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8 , Size: 4]
	NewbieGuideItem[] items;//[Offset: 0xcc , Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0xd8 , Size: 4]
	int[] FinishedTips;//[Offset: 0xdc , Size: 12]
	int[] FinishedCounts;//[Offset: 0xe8 , Size: 12]
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x13cf9f8
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte curPlayerCategory, int PlayerLevel);// 0x13cf6b4

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0 , Size: 4]
	FString Name;//[Offset: 0x4 , Size: 12]
	byte Type;//[Offset: 0x10 , Size: 1]
	int MaxGuideCounts;//[Offset: 0x14 , Size: 4]
	int MaxGuideLevel;//[Offset: 0x18 , Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c , Size: 12]
	int Priority;//[Offset: 0x28 , Size: 4]
	int MuteFlag;//[Offset: 0x2c , Size: 4]
	int PreconditionID;//[Offset: 0x30 , Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34 , Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38 , Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44 , Size: 4]
	float Duration;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x1c , Size: 8]
	bool ReconnectRecover();// 0x1345f34
	bool IsOK();// 0x1345f78

--------------------------------
Class: STNewbieGuideSuccessListenerBase.Object
	Controller* OwnerController;//[Offset: 0x1c , Size: 8]
	float DelayTime;//[Offset: 0x24 , Size: 4]
	bool ReconnectRecover();// 0x1345f34
	bool GuideFinishedByPlayer();// 0x1345f78
	bool EnableListener();// 0x13880f8
	bool DisableListener();// 0x1387b68

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x14ef47c
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x14ef368
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x14ef1bc
	void RPC_GetClientTimeRequest(int Index);// 0x14ef108
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x14ef00c
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x14eef4c
	void ReportDebugInfo(int RporetedId);// 0x14eee98
	void OnServerAboutToReconnect();// 0x14eee84
	void GetClientTimeInterval();// 0x14eee70
	void CheckTimeLine();// 0x14eee5c

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	float TimeStartDelay;//[Offset: 0xc0 , Size: 4]
	float SyncInterval;//[Offset: 0xc4 , Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x14f0470
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x12d7a3c
	void OnTimeInspectorColdMove_Vehicle();// 0x14f045c
	void OnTimeInspectorColdMove_Own();// 0x14f0448
	void OnServerAboutToReconnect();// 0x14f0434
	void CheckTimeLine();// 0x14f0420

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x134 , Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x140 , Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x14c , Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x158 , Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x164 , Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x170 , Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x17c , Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x188 , Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x194 , Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1a0 , Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1ac , Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b8 , Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1c4 , Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1d0 , Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1dc , Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1e8 , Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f4 , Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x200 , Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x20c , Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x218 , Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x224 , Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x230 , Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x23c , Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x248 , Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x254 , Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x260 , Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x26c , Size: 12]
	VerifySwitch VsBulletID;//[Offset: 0x278 , Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x284 , Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x290 , Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x29c , Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2a8 , Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2b4 , Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x2c0 , Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2c4 , Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2c8 , Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2cc , Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2d0 , Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2d4 , Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2d8 , Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2dc , Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2e0 , Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2e4 , Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2e8 , Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f4 , Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x300 , Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x30c , Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x318 , Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x324 , Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x330 , Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x33c , Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x348 , Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x354 , Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x360 , Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x36c , Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x378 , Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x384 , Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x390 , Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x39c , Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3a8 , Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3ac , Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3b0 , Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3bc , Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3c8 , Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3d4 , Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3e0 , Size: 12]
	float MaxFuelConsume;//[Offset: 0x3ec , Size: 4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x470 , Size: 12]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x47c , Size: 12]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x488 , Size: 12]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x494 , Size: 12]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x4a0 , Size: 12]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4ac , Size: 12]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x4b8 , Size: 12]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x4c4 , Size: 12]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4d0 , Size: 12]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc , Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd , Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x4e0 , Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x4ec , Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x4f8 , Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x504 , Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x510 , Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x51c , Size: 12]
	VerifySwitch FarJump;//[Offset: 0x528 , Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x534 , Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x540 , Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x54c , Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x558 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x564 , Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x570 , Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x57c , Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x588 , Size: 12]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x594 , Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x5b0 , Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x5b4 , Size: 12]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x5dc , Size: 12]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x5e8 , Size: 12]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x5f4 , Size: 12]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x600 , Size: 12]
	void ReportAntiCheatDetailData();// 0x13e328c
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x13e31f0
	void OnRecoverOnServer();// 0x13e31dc
	void OnPreReconnectOnServer();// 0x13e31dc

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0 , Size: 2]
	int8 PlatID;//[Offset: 0x2 , Size: 1]
	FString ZoneID;//[Offset: 0x4 , Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0 , Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14 , Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18 , Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c , Size: 4]
	float CameraSwitchTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0 , Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4 , Size: 12]
	float SpringArmLength;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0 , Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0 , Size: 4]
	float ViewPitchMax;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0 , Size: 4]
	uint32 EventID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0 , Size: 8]
	FName LastUseNoneMeleeLogicSlot;//[Offset: 0x8 , Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x10 , Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x18 , Size: 12]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0 , Size: 4]
	Vector Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	PUBGDoor* TriggeredDoor;//[Offset: 0xbc , Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc0 , Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x1342684
	void SetAutoOpenDoorEnable(bool bEnable);// 0x1342604
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x1342508
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int doorState);// 0x134240c
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x134238c
	PUBGDoor* GetPriorityDoor();// 0x1342364
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x134220c
	void BP_SimulateUIClick(bool bExtraDoor);// 0x1bf56d0
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x1bf56d0

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xc0 , Size: 4]
	FString Reason;//[Offset: 0xc4 , Size: 12]
	int[] audioChat;//[Offset: 0xd0 , Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xdc , Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0xe8 , Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0xf4 , Size: 12]
	FString TeammateColor;//[Offset: 0x100 , Size: 12]
	FString MyColor;//[Offset: 0x10c , Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x118 , Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x154 , Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x190 , Size: 12]
	float SendMsgCD;//[Offset: 0x19c , Size: 4]
	float lastShowChatTime;//[Offset: 0x1a0 , Size: 4]
	float ShowChatDuration;//[Offset: 0x1a4 , Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x1a8 , Size: 12]
	FString EndChar;//[Offset: 0x1b4 , Size: 12]
	FString ColonChar;//[Offset: 0x1c0 , Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x1cc , Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x208 , Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x214 , Size: 4]
	FString CongregationPlayerName;//[Offset: 0x248 , Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x254 , Size: 12]
	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);// 0x1bf56d0
	void ShowQuickPanel(bool bShow);// 0x133fa90
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x133f954
	void SendDirtyFilterContent(FString Content);// 0x1bf56d0
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x1bf56d0
	void OnInviteNextBattle(FString gid, FString Name);// 0x133f814
	void OnFilterFinish(FString filterText);// 0x1bf56d0
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x1bf56d0
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x1bf56d0
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x1bf56d0
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x133f6d4
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x133f548
	void FindTextIDByAudioID();// 0x1bf56d0
	void CloseChatHistoryList();// 0x1bf56d0
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x133f3f0
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x133f334
	void AddOneMsgToUI1(FString Name, FString Content, int msgID, int audioID, bool isMe, bool playSound);// 0x1bf56d0
	void AddFriendChat(FString gid, FString Name, FString Content, bool isSelf);// 0x133ef5c

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0 , Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0 , Size: 12]
	FString Content;//[Offset: 0xc , Size: 12]
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int MsgType;//[Offset: 0x1c , Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0 , Size: 1]
	int[] chatIDList;//[Offset: 0x4 , Size: 12]
	int AlternateChatID;//[Offset: 0x10 , Size: 4]
	int FlagIndex;//[Offset: 0x14 , Size: 4]
	int traceDist;//[Offset: 0x18 , Size: 4]
	float minDist;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0 , Size: 4]
	int flagID;//[Offset: 0x4 , Size: 4]
	Vector HitPosition;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xc0 , Size: 4]
	float PickUpZLimit;//[Offset: 0xc4 , Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0xcc , Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0xd8 , Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0xdc , Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0xe0 , Size: 4]
	Vector2D RegionXRange;//[Offset: 0xe4 , Size: 8]
	Vector2D RegionYRange;//[Offset: 0xec , Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0xf8 , Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x104 , Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x108 , Size: 4]
	float DrawTime;//[Offset: 0x10c , Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110 , Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x114 , Size: 4]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x118 , Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x124 , Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x13df764
	void ServerPutDownTarget(Actor* Target);// 0x13df6b0
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x13df56c
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x13df4ac
	void PutDownTarget(Actor* Target);// 0x13df434
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x13df334
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x13df2bc
	void NotifyMeetPickupAvailableActor(Actor* Target);// 0x13df244
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold, out bool IsHittedAttachableActor);// 0x13df160
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x13df054
	Actor* GetAttachableActor(Vector Loc);// 0x13defdc
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x13deed8
	void ControlClientPutDownTarget(Actor* Target);// 0x13dee24
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x13ded28
	void ClampWorldLocation(out Vector OutVector);// 0x13deca4

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc , Size: 4]
	FString msgContent;//[Offset: 0x10 , Size: 12]
	int msgID;//[Offset: 0x1c , Size: 4]
	int audioID;//[Offset: 0x20 , Size: 4]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	Vector HitPosition;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc , Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8 , Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x13992c4
	void CreateGuideUI();// 0x1bf56d0

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0 , Size: 4]
	int guildUI;//[Offset: 0x4 , Size: 4]
	Vector2D Offset;//[Offset: 0x8 , Size: 8]
	Vector2D Size;//[Offset: 0x10 , Size: 8]
	int childData;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xbc , Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0xc8 , Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	int TextID_OutRange;//[Offset: 0xd8 , Size: 4]
	FString PreFix_Command;//[Offset: 0xdc , Size: 12]
	FString PreFix_Command_Res;//[Offset: 0xe8 , Size: 12]
	FString PreFix_Mark;//[Offset: 0xf4 , Size: 12]
	int MinTraceDist;//[Offset: 0x100 , Size: 4]
	int MaxTraceDist;//[Offset: 0x104 , Size: 4]
	int ItemTraceDist;//[Offset: 0x108 , Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x10c , Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x110 , Size: 4]
	int MiniMapThingIconID;//[Offset: 0x114 , Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x118 , Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x11c , Size: 60]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x158 , Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x194 , Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x1d0 , Size: 60]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x20c , Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x248 , Size: 60]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x284 , Size: 12]
	FString[] TempIDArray;//[Offset: 0x290 , Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x2e0 , Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x31c , Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x358 , Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x394 , Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x13fed8c
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool isSelf);// 0x1bf56d0
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x13fec48
	void ServerDelMsg(FString msgID);// 0x13feb54
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x1bf56d0
	void RemoveActorMask(int ActorNetGUID);// 0x13feaa0
	void OperMark(FString msgID);// 0x13fe9e4
	void MakeQuickNeed(enum SignSubType);// 0x13fe96c
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x13fe8f4
	void MakeQuickMark();// 0x13fe8e0
	void MakeQuickCommand(byte SignType);// 0x13fe868
	bool IsSelfMark(FString msgID);// 0x13fe7a4
	int GetVoiceAudioID(enum MsgType);// 0x1bf56d0
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x1bf56d0
	void DelMarkFromPool(FString MsgMark);// 0x13fe6e8
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool isSelf, bool ShowChat);// 0x13fe578
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool isSelf);// 0x13fe460
	void ClientDelMsg(FString msgID);// 0x13fe39c
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x13fe25c
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x13fe18c
	void AddActorMask(int ActorNetGUID);// 0x13fe0d8

--------------------------------
Class: QuickSignMark
	FString msgID;//[Offset: 0x0 , Size: 12]
	FString MarkType;//[Offset: 0xc , Size: 12]
	FString IconPath;//[Offset: 0x18 , Size: 12]
	FString IconBGPath;//[Offset: 0x24 , Size: 12]
	FString IconOuterPath;//[Offset: 0x30 , Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c , Size: 12]
	FString ReplyID;//[Offset: 0x48 , Size: 12]
	Vector Loc;//[Offset: 0x54 , Size: 12]
	int MaxNum;//[Offset: 0x60 , Size: 4]
	int LifeSpan;//[Offset: 0x64 , Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: QuickSignMsg
	FString msgID;//[Offset: 0x0 , Size: 12]
	FString PlayerName;//[Offset: 0xc , Size: 12]
	Vector HitPos;//[Offset: 0x18 , Size: 12]
	FString ConfigKey;//[Offset: 0x24 , Size: 12]
	int audioID;//[Offset: 0x30 , Size: 4]
	FString ParamString;//[Offset: 0x34 , Size: 12]
	int BindActorGUID;//[Offset: 0x40 , Size: 4]
	uint32 PlayerKey;//[Offset: 0x44 , Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x48 , Size: 4]
	enum MsgType;//[Offset: 0x4c , Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc , Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0 , Size: 12]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0xcc , Size: 12]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0xd8 , Size: 60]
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x131d4dc
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x131d3d0
	int RetrieveLandLocType(FString TargetName);// 0x131d270
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x131d168
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x131d058
	bool IsTriggerActive(int InTaskID);// 0x131cfd8
	bool IsSpecialPickItem(int InItemID);// 0x131cf58
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x131cb70
	void HandlePlayerPickupItem(int ItemID, int count, STExtraPlayerController* PC);// 0x131ca70
	void HandlePlayerKilling();// 0x131ca5c
	void HandlePlayerDropItem(int ItemID, int count, STExtraPlayerController* PC);// 0x131c95c
	void HandlePlayerDoEmote(int EmoteIndex);// 0x131c8e4
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x131c6fc
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x131c5fc
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x131c4d0
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x131c448
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x1bf56d0
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x1bf56d0
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x131c2d8
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x131c184
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x1bf56d0
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x1bf56d0
	FString GetOwningPlayerName();// 0x131c0c4
	FString GetMapName();// 0x131c004
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x1bf56d0
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x131be18
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x131bd54
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x131bc88
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x131ba48
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x131b940
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x131b87c

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c , Size: 1]
	enum TriggerObjectType;//[Offset: 0x1d , Size: 1]
	int EventDelayTime;//[Offset: 0x20 , Size: 4]
	int ActionDelayTime;//[Offset: 0x24 , Size: 4]
	FString TriggerName;//[Offset: 0x28 , Size: 12]
	Actor* OuterActor;//[Offset: 0x34 , Size: 4]
	class Object[] TriggerEventsClass;//[Offset: 0x38 , Size: 12]
	TriggerAction*[] TriggerActions;//[Offset: 0x44 , Size: 12]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x50 , Size: 12]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x5c , Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0x70 , Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0x78 , Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0x80 , Size: 4]
	FString DelayEventName;//[Offset: 0x84 , Size: 12]
	FString FiredEventName;//[Offset: 0x90 , Size: 12]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x9c , Size: 60]
	<TriggerAction*> CompleteActions;//[Offset: 0xd8 , Size: 60]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x118 , Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128 , Size: 1]
	float TickInterval;//[Offset: 0x12c , Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131 , Size: 1]
	Property*[] EventParams;//[Offset: 0x134 , Size: 12]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c , Size: 4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	enum ExecPolicy;//[Offset: 0x29 , Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x2c , Size: 4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x30 , Size: 4]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58 , Size: 64]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9 , Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca , Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x2cc , Size: 12]
	FString[] ClassPaths;//[Offset: 0x2d8 , Size: 12]
	FString ConfigFilePath;//[Offset: 0x2e4 , Size: 12]
	FString ClientConfigFilePath;//[Offset: 0x2f0 , Size: 12]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x2fc , Size: 16]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x30c , Size: 12]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x318 , Size: 4]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x31c , Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x358 , Size: 4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x35c , Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x360 , Size: 4]
	FString DescData;//[Offset: 0x364 , Size: 12]
	TaskRepData TaskData;//[Offset: 0x378 , Size: 16]
	bool StartLevelDirector();// 0x37e6064
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x37e5ec8
	void SetEnable(bool Enab);// 0x37e5e4c
	void S2Sim_CallExcuteAction();// 0x13323cc
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x37e5d98
	void OnRep_LevelDirectorData();// 0x37e5d84
	bool InitialLevelDirector();// 0x37e5d54
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x37e5adc
	bool GetHasBeenInit();// 0x37e5ab4
	VariableSet* GetDataSet();// 0x37e5a8c
	int GetCurTaskID();// 0x37e5a64
	void ForceExecuteTrigger(FString TriggerName);// 0x13afd9c
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x37e57fc
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x37e5594
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x37e531c
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x37e50b4
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x37e4dfc
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x37e4b8c
	void DeactiveNode(FString NodeName);// 0x37e4a34
	void ClientExecuteAction(FString ActionClassName, int64 Uid, const TriggerParamRepData[] RepParams);// 0x37e48bc
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x37e4720
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x37e457c
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x37e43d8
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x37e4168
	void ActiveNode(FString NodeName);// 0x37e4010

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0 , Size: 8]
	TriggerAction* Action;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0 , Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0 , Size: 12]
	int NodeID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c , Size: 12]
	VariableSet* DataSet;//[Offset: 0x28 , Size: 4]
	Actor* GetLastIteratorActor();// 0x37e7160

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0 , Size: 12]
	FString ClassFullPath;//[Offset: 0xc , Size: 12]
	float RandomRadius;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24 , Size: 4]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x28 , Size: 60]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c , Size: 4]
	UFlowNodeRepData RepData;//[Offset: 0x20 , Size: 16]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x44 , Size: 4]
	enum NodeType;//[Offset: 0x48 , Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28 , Size: 60]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x68 , Size: 60]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x1c , Size: 12]
	Object* EventInstigator;//[Offset: 0x28 , Size: 4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x38 , Size: 60]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c , Size: 12]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x28 , Size: 60]
	<FString> ObjectRelevantEvents;//[Offset: 0x64 , Size: 60]
	Actor* ListenerEntity;//[Offset: 0xa0 , Size: 4]
	Property*[] Params;//[Offset: 0xa4 , Size: 12]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0 , Size: 12]
	int TaskID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0 , Size: 1]
	FString ParamName;//[Offset: 0x4 , Size: 12]
	byte[] ParamData;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c , Size: 4]
	TriggerCondition*[] ChildConditions;//[Offset: 0x20 , Size: 12]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38 , Size: 4]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x37e2ad8

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x144 , Size: 4]
	byte[] TaskEventTypes;//[Offset: 0x148 , Size: 12]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x154 , Size: 12]
	int TaskID;//[Offset: 0x160 , Size: 4]
	byte TaskType;//[Offset: 0x164 , Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x15178f8
	void RedoAction();// 0x15178dc
	void NofityTriggerComplete();// 0x15178c0
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x12f50ac
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x15176dc
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1517610
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x1517588
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x1517508
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x1517480
	TriggerAction* CreateRedoAction(byte ActionType);// 0x15173f8
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x1517298
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x15170f0
	TriggerCondition* CreateKillPlayerCondition();// 0x15170c8
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x1517048
	TriggerAction* CreateDoAction(byte ActionType);// 0x1516fc0
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x1516f40
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x1516e7c
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x1516d1c
	TriggerAction* CreateAction(byte ActionType);// 0x1516c94
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x1516a5c
	byte[] ConstructRedoActions();// 0x1bf56d0
	byte[] ConstructEvents();// 0x1bf56d0
	TriggerCondition* ConstructConditions();// 0x1bf56d0
	byte[] ConstructActions();// 0x1bf56d0
	void AddEventTypes(byte[] EventTypes);// 0x1516904
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1516830

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x3c , Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d , Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e , Size: 1]
	void SetTargetParam(int Value);// 0x12e2ab0
	void SetConditionParam(int Value);// 0x12e29b0
	bool IsSatisfy(const TriggerEvent* Event);// 0x13dc2f0
	bool IsSameCondition(byte InTaskConditionType);// 0x14fba64
	bool FillDataSource(VariableSet* InDataSource);// 0x1311720
	bool DeactiveCondition(VariableSet* InDataSource);// 0x14fb9dc
	bool CompareParam(VariableSet* InDataSource);// 0x14fb954
	bool ActiveCondition(VariableSet* InDataSource);// 0x12f50ac

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	byte gender;//[Offset: 0xc , Size: 1]

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0 , Size: 4]
	int PosY;//[Offset: 0x4 , Size: 4]
	int PosZ;//[Offset: 0x8 , Size: 4]
	int Health;//[Offset: 0xc , Size: 4]
	int HealthMax;//[Offset: 0x10 , Size: 4]
	int LiveState;//[Offset: 0x14 , Size: 4]
	int KillNum;//[Offset: 0x18 , Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c , Size: 4]
	float SignalHP;//[Offset: 0x20 , Size: 4]
	uint32 PlayerKey;//[Offset: 0x24 , Size: 4]
	int GotAirDropNum;//[Offset: 0x28 , Size: 4]
	int MaxKillDistance;//[Offset: 0x2c , Size: 4]
	int Damage;//[Offset: 0x30 , Size: 4]
	int InDamage;//[Offset: 0x34 , Size: 4]
	int Heal;//[Offset: 0x38 , Size: 4]
	int HeadShotNum;//[Offset: 0x3c , Size: 4]
	int KillNumInVehicle;//[Offset: 0x40 , Size: 4]
	int SurvivalTime;//[Offset: 0x44 , Size: 4]
	int DriveDistance;//[Offset: 0x48 , Size: 4]
	int marchDistance;//[Offset: 0x4c , Size: 4]
	int MonsterCatchupDistance;//[Offset: 0x50 , Size: 4]
	int Assists;//[Offset: 0x54 , Size: 4]
	int KillNumByGrenade;//[Offset: 0x58 , Size: 4]
	int Rank;//[Offset: 0x5c , Size: 4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x64 , Size: 4]
	int Knockouts;//[Offset: 0x68 , Size: 4]
	int rescueTimes;//[Offset: 0x6c , Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x70 , Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x74 , Size: 4]
	int CurWeaponID;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	FString PlayerName;//[Offset: 0x7c , Size: 12]
	FString PlayerOpenID;//[Offset: 0x88 , Size: 12]
	FString PicUrl;//[Offset: 0x94 , Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]
	int TeamID;//[Offset: 0xa4 , Size: 4]
	Pawn* Character;//[Offset: 0xa8 , Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0 , Size: 4]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	FString LogoPicUrl;//[Offset: 0x8 , Size: 12]
	int KillNum;//[Offset: 0x14 , Size: 4]
	int LiveMemberNum;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PicUrl;//[Offset: 0xc , Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int TeamID;//[Offset: 0x1c , Size: 4]
	uint64 Uid;//[Offset: 0x20 , Size: 8]
	Vector[] PosList;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0 , Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	Vector Pos;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: ItemDefineWeaponSyncData
	ItemDefineID ItemDfineID;//[Offset: 0x0 , Size: 24]
	byte ForceUpdateFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0 , Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc , Size: 4]
	byte ForceUpdateFlag;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2c8 , Size: 4]
	Actor* ReturnActor;//[Offset: 0x2cc , Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x2ec , Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x2f0 , Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x2f4 , Size: 12]
	float MinMovingSpeed;//[Offset: 0x300 , Size: 4]
	float MaxMovingTime;//[Offset: 0x304 , Size: 4]
	float ObservingTime;//[Offset: 0x308 , Size: 4]
	float TrackingDelay;//[Offset: 0x30c , Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x310 , Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x314 , Size: 4]
	void ForceEnd();// 0x13a745c

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xc0 , Size: 24]
	float LastFinishCD;//[Offset: 0xd8 , Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde , Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0xe0 , Size: 4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xe4 , Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0xe8 , Size: 4]
	enum VehicleUserState;//[Offset: 0xec , Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0xf0 , Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0xf4 , Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0xfc , Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x108 , Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x114 , Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x120 , Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x134 , Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144 , Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x148 , Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x158 , Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x168 , Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x16c , Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x170 , Size: 4]
	float MaxCanAimAngle;//[Offset: 0x174 , Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178 , Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x17c , Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x180 , Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x184 , Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x188 , Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	float UAVSpeedPercent;//[Offset: 0x190 , Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c , Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1a0 , Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1a4 , Size: 4]
	Rotator InputExtraRot;//[Offset: 0x1a8 , Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x1b4 , Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x1c4 , Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd , Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x1f4 , Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x1fc , Size: 4]
	float ControllerYawClampMin;//[Offset: 0x204 , Size: 4]
	float ControllerYawClampMax;//[Offset: 0x208 , Size: 4]
	enum CurrentSeatType;//[Offset: 0x20c , Size: 1]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x210 , Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248 , Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x24c , Size: 4]
	float FastestAllowDistance;//[Offset: 0x250 , Size: 4]
	float NearVehicleTickRate;//[Offset: 0x254 , Size: 4]
	int VehicleIconID;//[Offset: 0x258 , Size: 4]
	void UseVehicleWeaponOrNot();// 0x1533d50
	void UpdateVehWeaponPassengerViewLimit();// 0x1533d3c
	void UpdatePassengerViewPitchLimit();// 0x1533d28
	void TurnVehicle(float Rate);// 0x1533cb0
	void TryUseHorn(bool bUse);// 0x1533c30
	bool TryLeanOutOrIn(bool bAutoLeanOut);// 0x1533ba8
	void TryExitVehicle();// 0x1533b94
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x1533ad8
	void TryChangeVehicleSeat();// 0x1533ac4
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x1533a44
	bool TryChangeFreeFireSeatAndScopeIn();// 0x1533a1c
	bool TryChangeFreeFireSeatAndLeanOut();// 0x15339f4
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x1bf56d0
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x1533930
	void StopFireVehicleWeapon();// 0x153391c
	bool ShowVehicleWeaponUI();// 0x15338f4
	void SetBrake(float Rate);// 0x153387c
	void SetBoosting(bool bEnabled);// 0x15337fc
	void SetAirControlF(float Rate);// 0x1533784
	void SetAirControlB(float Rate);// 0x153370c
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x15335fc
	void ServerStopFireVehicleWeapon();// 0x15335a0
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x15334dc
	void Server_JoystickCenterClickHandler();// 0x1533480
	void SendToServerUnmannedVehicleUse();// 0x1533424
	void SendToServerUnmannedVehicleRecall();// 0x15333c8
	void SendToServerUnmannedVehiclePause();// 0x153336c
	void RspLeanOut(bool bOut);// 0x15332e4
	void RspExitVehicle(bool bSuccess);// 0x153325c
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x1533100
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);// 0x1532f4c
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x1532e50
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x1532d54
	void ReqLeanOut(bool IsLeanOut);// 0x1532c8c
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x1532be0
	void ReqEraseLastDriveVehicle();// 0x1532b84
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x1532a88
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x15329d4
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x153290c
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x1532844
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x14cfd94
	void OnServerReconnected();// 0x1532830
	void OnScopeInAfterChangeSeat();// 0x153281c
	void OnRep_DefineID();// 0x1532808
	void OnRep_BornInVehicle();// 0x15327f4
	void OnPauseUnmannedVehicleCompleted();// 0x1bf56d0
	void OnLeanOutAfterChangeSeat();// 0x15327e0
	void OnInputAxisMoveRight(float Rate);// 0x1bf56d0
	void OnInputAxisMoveForward(float Rate);// 0x1bf56d0
	void OnExitVehicleCompleted();// 0x1bf56d0
	void OnEnterVehicleCompleted(enum SeatType);// 0x1bf56d0
	void OnCurrrentClosestVehicleChanged();// 0x1bf56d0
	void OnClientReconnected();// 0x15327cc
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x1bf56d0
	void NotifyLeaveVehicleFailed();// 0x15327b0
	void MoveVehicleUp(float Rate);// 0x1532738
	void MoveVehicleRight(float Rate);// 0x15326c0
	void MoveVehicleForward(float Rate);// 0x1532648
	void MaintenanceVehicle(float addpercenthp, bool FixTire);// 0x1532584
	bool HasChangeMoveRightRate(float Before, float After);// 0x15324c0
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x1532448
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x1532434
	void HandleLocalBackpackCurrentWeaponFinished();// 0x1532420
	bool HandleClientReconnecting();// 0x15323f8
	enum GetVehicleUserState();// 0x15323dc
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x15323c0
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x1532398
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x153223c
	void FireVehicleWeapon();// 0x1532228
	void Client_UnbindTouchEvents();// 0x15321cc
	void Client_ShouldBindTouchEvents();// 0x1532170
	bool CheckCanLeanOutVehicle();// 0x1532148
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x15320c8
	bool CanUseVehicleHorn();// 0x15320a0
	void AddVehicleFuel(float Amount);// 0x1532028

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xbc , Size: 12]
	enum StartStateType;//[Offset: 0xc8 , Size: 1]
	enum FinishStateType;//[Offset: 0xc9 , Size: 1]
	State* CurrentState;//[Offset: 0xcc , Size: 4]
	enum CurrentStateType;//[Offset: 0xd0 , Size: 1]
	enum LastStateType;//[Offset: 0xd1 , Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x3d8 , Size: 12]
	FString TreasureBoxName;//[Offset: 0x3e4 , Size: 12]
	float TotalHP;//[Offset: 0x3f0 , Size: 4]
	float BrokenHPPropotion;//[Offset: 0x3f4 , Size: 4]
	float TotalTime;//[Offset: 0x3f8 , Size: 4]
	int BoxId;//[Offset: 0x3fc , Size: 4]
	Vector GroupLoc;//[Offset: 0x400 , Size: 12]
	float DestroyTime;//[Offset: 0x40c , Size: 4]
	float OperationalDistance;//[Offset: 0x410 , Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x414 , Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x418 , Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x420 , Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x450 , Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x460 , Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x490 , Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x4a0 , Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x4d0 , Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x4e0 , Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x510 , Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x520 , Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x550 , Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x554 , Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x558 , Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x55c , Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x568 , Size: 12]
	enum PickUpBoxType;//[Offset: 0x574 , Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575 , Size: 1]
	int IconID;//[Offset: 0x578 , Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc , Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ce , Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x5d0 , Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x5d4 , Size: 4]
	int HideLightColumn;//[Offset: 0x5d8 , Size: 4]
	float GoUpAnimationWait;//[Offset: 0x5dc , Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x5e0 , Size: 4]
	float GoUpAnimationHight;//[Offset: 0x5e4 , Size: 4]
	float GoUpAnimationYawSpeed;//[Offset: 0x5ec , Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x5f0 , Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x5f4 , Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x600 , Size: 12]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c , Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x610 , Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x614 , Size: 4]
	float StartedTime;//[Offset: 0x630 , Size: 4]
	enum CurState;//[Offset: 0x634 , Size: 1]
	int StartedTeamId;//[Offset: 0x63c , Size: 4]
	float CountdownTime;//[Offset: 0x640 , Size: 4]
	float StartDestroytime;//[Offset: 0x644 , Size: 4]
	int MonsterBoxId;//[Offset: 0x648 , Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x64c , Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x650 , Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x690 , Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x694 , Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x698 , Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x69c , Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x6a0 , Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x6a4 , Size: 4]
	Object* TriggerActionHost;//[Offset: 0x6d8 , Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x1bf56d0
	void ShowMonsterTreasureBox();// 0x13c1a3c
	void SetClientClientAutoActiveBoxCD(int CD);// 0x13c19c4
	void OnTreasureBoxPicked__DelegateSignature();// 0x1bf56d0
	void OnSomeonePickItem(uint32 InPC);// 0x13c194c
	void OnRep_HideLightColumn();// 0x13c1938
	void OnRep_CurState();// 0x13c1924
	void OnBoxEmpty();// 0x13c1910
	bool IsShowIcon();// 0x13c18e8
	int GetMonsterBoxId();// 0x13c18c0
	enum[] GetDamageableGameObjectType();// 0x13c17f8
	enum GetCurState();// 0x13c17d0
	int GetClientClientAutoActiveBoxCD();// 0x13c17a8
	void DeActiveMonsterTreasureBox();// 0x13c1794
	bool CanBeDamaged();// 0x13c176c
	void BPOnStopMonsterTreasureBox();// 0x1bf56d0
	void BPOnStartMonsterTreasureBox();// 0x1bf56d0
	void BPOnHideLightColumn();// 0x1bf56d0
	void BPOnCountdownEnd();// 0x1bf56d0
	void BPOnBreakMonsterTreasureBox();// 0x1bf56d0
	void BPOnAnimationStop();// 0x1bf56d0
	void BPOnAnimationAkAudioStop();// 0x1bf56d0
	void BPOnAnimationAkAudioStart();// 0x1bf56d0
	FString BPGetTreasureBoxName();// 0x1bf56d0

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	int iRegionHouse;//[Offset: 0x2d4 , Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x2d8 , Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x2dc , Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x2e0 , Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x2e4 , Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x2e8 , Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x2f4 , Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330 , Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384 , Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385 , Size: 1]
	byte[] SerializeData;//[Offset: 0x388 , Size: 12]
	void OnRep_WindowList();// 0x184cb3c
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x184c900

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	FString DropItemCfgTableName;//[Offset: 0xc0 , Size: 12]
	int ProduceID;//[Offset: 0xcc , Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0xd0 , Size: 4]
	int GridStep;//[Offset: 0xd4 , Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0xd8 , Size: 4]
	FString DropItemRuleTableName;//[Offset: 0xdc , Size: 12]
	int[] DropPlanIDList;//[Offset: 0xe8 , Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0xf4 , Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x100 , Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x10c , Size: 4]
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x13f4684
	void SetDropPlanIDList(out int[] IDList);// 0x13f45b8
	void SetDropItemLifeSpan(int ItemTime);// 0x13f4540
	int PickItemByUnionRandom(int WeightCount, out RandomPropData[] WeightMap);// 0x13f4448
	int PickItemByIndependentRandom(int Weight);// 0x13f43c8
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x13f41cc
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, float ZOffset);// 0x13f3fe0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x13a48a4
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x13a480c
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x13f3e84
	void GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x13f3dd8
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x13f3ca4
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset);// 0x13f39f0
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x13f38f4
	void DropToTarget(ItemDefineID DefineID, int count, BackpackComponent* Backpack);// 0x13f37dc
	void DropToGround(out const PickUpItemData PropData, Transform WrapperTrans);// 0x13f3590
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Character* DeadPawn);// 0x13f3450
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x13f3320
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x13f321c

--------------------------------
Class: RandomPropData
	int ItemID;//[Offset: 0x0 , Size: 4]
	int RuleID;//[Offset: 0x4 , Size: 4]
	int ItemCount;//[Offset: 0x8 , Size: 4]
	int Weight;//[Offset: 0xc , Size: 4]
	int DropMode;//[Offset: 0x10 , Size: 4]
	int[] ConcernItemID;//[Offset: 0x14 , Size: 12]
	int[] ConcernItemCount;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0 , Size: 4]
	int ItemDropRuleStartID;//[Offset: 0x4 , Size: 4]
	int ItemDropRuleEndID;//[Offset: 0x8 , Size: 4]
	int ItemDropMode;//[Offset: 0xc , Size: 4]

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0 , Size: 4]
	int ItemCount;//[Offset: 0x4 , Size: 4]
	int DropMode;//[Offset: 0x8 , Size: 4]
	int[] ConcernItemID;//[Offset: 0xc , Size: 12]
	int[] ConcernItemCount;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0 , Size: 48]
	FString PathToLoad;//[Offset: 0x30 , Size: 12]
	int ID;//[Offset: 0x3c , Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x5a8 , Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac , Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x5b0 , Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x5b4 , Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x5b8 , Size: 4]
	void NotifyServerBroken();// 0x1bf56d0
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x18572b8
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x1bf56d0
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x18571e8
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x1857124
	UAEWindowRepData GetRepData();// 0x1856ff8

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2c8 , Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x2cc , Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2d0 , Size: 4]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x2d4 , Size: 60]
	class AnimInstance* animBP;//[Offset: 0x310 , Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x314 , Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x320 , Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	<int,FName> slotToSocket;//[Offset: 0x328 , Size: 60]
	FName OBPlayerName;//[Offset: 0x368 , Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x370 , Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x374 , Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x378 , Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x37c , Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x388 , Size: 12]
	FName[] HideBoneNames;//[Offset: 0x394 , Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x3a0 , Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x3ac , Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x3b8 , Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x3bc , Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0 , Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x12ef620
	void SetEnable(bool IsEnable);// 0x12ef5a0
	void RenderCaptureScene();// 0x12ef58c
	void RefreshAvatar();// 0x12ef578
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x12ef4d0
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x12ef400
	void OnSimulatedWeaponChanged();// 0x12ef3ec
	void OnAvatarEquipped(enum slotType, bool isEquipped, int ItemID);// 0x12ef2e0
	void OnAvatarAllMeshLoaded();// 0x12ef2cc
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x12ef1b0
	int[] GetWeaponSkinIDs();// 0x12ef0f0
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x12ef0c8
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x12eef54
	void EquipWeapon();// 0x12eef40
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x12eeec8
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x12eee00
	void CreateWeapon(bool IsSkeletalMesh);// 0x12eed80
	void BluePrintSetEnable(bool IsEnable);// 0x1bf56d0
	void ApplyAnimation();// 0x12eed6c

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0 , Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8 , Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30 , Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58 , Size: 40]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x29c , Size: 1]
	float FOVAngle;//[Offset: 0x2a0 , Size: 4]
	float OrthoWidth;//[Offset: 0x2a4 , Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2a8 , Size: 4]
	byte CaptureSource;//[Offset: 0x2ac , Size: 1]
	byte CompositeMode;//[Offset: 0x2ad , Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0 , Size: 1232]
	float PostProcessBlendWeight;//[Offset: 0x780 , Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784 , Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x790 , Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0 , Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x7d4 , Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x7e0 , Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ec , Size: 1]
	void CaptureScene();// 0x2dc9820
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x2dc96f0

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x235 , Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x238 , Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x244 , Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x250 , Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x25c , Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268 , Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269 , Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a , Size: 1]
	float LODDistanceFactor;//[Offset: 0x26c , Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x270 , Size: 4]
	int CaptureSortPriority;//[Offset: 0x274 , Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x278 , Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2dc9148
	void ShowOnlyActorComponents(Actor* InActor);// 0x2dc90d0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x2dc9058
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x2dc8fe0
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x2dc8f68
	void HideComponent(PrimitiveComponent* InComponent);// 0x2dc8ef0
	void HideActorComponents(Actor* InActor);// 0x2dc8e78
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x2dc8e00
	void ClearHiddenComponents();// 0x2dc8dec

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0 , Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x325 , Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x328 , Size: 4]
	float OcclusionDepthRange;//[Offset: 0x32c , Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x330 , Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x33c , Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x340 , Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x344 , Size: 4]
	int DynamicShadowCascades;//[Offset: 0x348 , Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x34c , Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x350 , Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x354 , Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358 , Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x35c , Size: 4]
	float FarShadowDistance;//[Offset: 0x360 , Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x364 , Size: 4]
	float LightSourceAngle;//[Offset: 0x368 , Size: 4]
	float TraceDistance;//[Offset: 0x36c , Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x370 , Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380 , Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x384 , Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x388 , Size: 12]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394 , Size: 1]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x2cdff04
	void SetOcclusionMaskDarkness(float NewValue);// 0x2cdfe8c
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x2cdfe1c
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x2cdfd9c
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x2cdfd24
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x2cdfcac
	void SetDynamicShadowCascades(int NewValue);// 0x2cdfc34
	void SetCascadeTransitionFraction(float NewValue);// 0x2cdfbbc
	void SetCascadeDistributionExponent(float NewValue);// 0x2cdfb44

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4 , Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14 , Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20 , Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0 , Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4 , Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0 , Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0 , Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0 , Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x2c8 , Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x304 , Size: 12]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x348 , Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x5f0 , Size: 4]
	void RemoveDecalOnTimer(uint32[] DecalIdArray);// 0x139e464

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0 , Size: 4]
	Texture* DecalTexure;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x9c , Size: 4]
	Texture* DecalTexure;//[Offset: 0xa0 , Size: 4]
	Texture* DecalAlpha;//[Offset: 0xa4 , Size: 4]
	int CoordX;//[Offset: 0xa8 , Size: 4]
	int CoordY;//[Offset: 0xac , Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2c8 , Size: 4]
	int RemainSupplyTimes;//[Offset: 0x2cc , Size: 4]
	int SupplyBulletNum;//[Offset: 0x2d0 , Size: 4]
	float ValidDistance;//[Offset: 0x2d4 , Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x2d8 , Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x12d4b64

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x2c8 , Size: 12]
	int AddMonsterExpNum;//[Offset: 0x2d4 , Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x2d8 , Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x2dc , Size: 4]
	int UseSuccessTipsId;//[Offset: 0x2e0 , Size: 4]
	float ValidDistance;//[Offset: 0x2e4 , Size: 4]
	float SelfResetTime;//[Offset: 0x2e8 , Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec , Size: 1]
	enum EnhancerState;//[Offset: 0x2ed , Size: 1]
	float ReadyTime;//[Offset: 0x2f0 , Size: 4]
	float FixReadyTime;//[Offset: 0x2f4 , Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x2f8 , Size: 12]
	void StateChangeDelegate();// 0x133318c
	void SetReadyTime(float SReadyTime);// 0x135cc4c
	void SetEState(enum EState);// 0x135cbd4
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x135cad8
	void ResetTimes();// 0x135cac4
	void ResetSelf();// 0x135cab0
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x135ca30
	void ReadyTimeChangeDelegate();// 0x12e4e38
	void OpenEffect();// 0x135ca14
	void OnRep_StateChange();// 0x135ca00
	void OnRep_ReadyTimeChange();// 0x135c9ec
	void OnRep_FixReadyTimeChange();// 0x135c9ec
	enum GetSpotState();// 0x135c9d0
	void DelayResetSelf();// 0x135c9bc
	void CloseEffect();// 0x133790c

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0 , Size: 1]
	int SkillID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0xbc , Size: 4]
	int GotoSpectatingTime;//[Offset: 0xc0 , Size: 4]
	int64 FinishRevivalTime;//[Offset: 0xc8 , Size: 8]
	int64 StartObserverTime;//[Offset: 0xd0 , Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0xd8 , Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0xdc , Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe8 , Size: 104]
	DateTime BePickupTime;//[Offset: 0x150 , Size: 8]
	void TryToLeaveRevival();// 0x13e5f70
	void TickRevival(float DeltaSeconds);// 0x13e5ef8
	void SetRemainingRevivalTime(int InValue);// 0x13e5e80
	void SetCaptureIDCardStatus(bool InValue);// 0x13e5e00
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x13e5d88
	void OnPlayerQuitSpectating();// 0x13e5d74
	void OnPlayerGotoSpectating();// 0x13e5d60
	void OnPlayerExitGame();// 0x13e5d4c
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x13e5ccc
	void LeaveRevivalState(uint32 SaviorKey);// 0x13e5c54
	bool IsInWaittingRevivalState();// 0x13e5c2c
	int GetRevivalCountDownTime();// 0x13e5c10
	int GetRemainingRevivalTime();// 0x13e5be8
	bool GetCaptureIDCardStatus();// 0x13e5bc0
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x13e5b40
	void EnterRevivalState();// 0x13e5b2c
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x13e5a30
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x13e5934

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x2c8 , Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x2cc , Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x2d0 , Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x2d4 , Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x2d8 , Size: 4]
	enum CurState;//[Offset: 0x2dc , Size: 1]
	enum PreState;//[Offset: 0x2dd , Size: 1]
	int RevivalTime;//[Offset: 0x2e0 , Size: 4]
	int CurRevivalTime;//[Offset: 0x2e4 , Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	int OperationalDistance;//[Offset: 0x2ec , Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x2f0 , Size: 60]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x32c , Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x368 , Size: 4]
	int SmokingdisappearTime;//[Offset: 0x36c , Size: 4]
	int IconID;//[Offset: 0x370 , Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x374 , Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x380 , Size: 8]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x398 , Size: 8]
	void StartRevival();// 0x1403ca0
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x1403c20
	bool RecheckCurrentRevivingPlayers();// 0x1403bf8
	void OnRep_ShowSmoking();// 0x1403be4
	void OnRep_RevivalPointState(enum LastPreState);// 0x1403b6c
	void OnRep_CurrentRevivingPlayers();// 0x12dedb4
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x1403aec
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x1403a6c
	void DistanceChangedEvent(float Scale);// 0x1bf56d0

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0 , Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4 , Size: 4]
	int64 PickupTime;//[Offset: 0x8 , Size: 8]
	int64 DroperTime;//[Offset: 0x10 , Size: 8]
	FString PickUpName;//[Offset: 0x18 , Size: 12]
	FString DroperPlayerName;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xc0 , Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xd4 , Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xe0 , Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec , Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed , Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x185bcd0
	void SyncWeatherLevelInfo();// 0x185bcbc
	void OnUnLoadStreamLevelCompleted();// 0x185bca8
	void OnRep_WeatherSyncCount();// 0x185bc94
	void OnLoadStreamLevelCompleted();// 0x12dedb4
	void LoadWeatherLevel();// 0x185bc80
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x185bae4
	void LoadDefaultWeatherLevel();// 0x185bad0
	void Init();// 0x135d654

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec , Size: 1]
	int CircleIndex;//[Offset: 0x3f0 , Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x3f4 , Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x410 , Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x430 , Size: 32]
	float TickOBPlayerCD;//[Offset: 0x450 , Size: 4]
	float TickWeatherFogCD;//[Offset: 0x454 , Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x458 , Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x45c , Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x460 , Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464 , Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x468 , Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4b8 , Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x4c4 , Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x13587dc
	void BlendToWeather(bool bDstWeather);// 0x135875c

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2c8 , Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x30c , Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x310 , Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x32c , Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x368 , Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x384 , Size: 28]
	float ServerElapsedTime;//[Offset: 0x3a0 , Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3a9 , Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3ac , Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5 , Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3b8 , Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0 , Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x3d4 , Size: 4]
	enum UICountDownType;//[Offset: 0x3ea , Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb , Size: 1]
	void StartTransition();// 0x13594fc
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x1359484
	void RPCRequireControl();// 0x1359470
	void RPCRequire();// 0x135945c
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x13593dc
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x13323cc
	void ReinitInDemoReplay();// 0x1359170
	void RefreshWeatherPredictionUI();// 0x13593c8
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x135933c
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x13592b0
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x1359224
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x1359198
	void OnRep_NextWeatherCountDownTime();// 0x135915c
	void OnRep_ControllerDataForReplay();// 0x1359184
	void OnRep_ControllerData();// 0x1359170
	void OnRep_bEnableWeatherPredictionUI();// 0x135915c
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x1bf56d0
	void HandleClientHasReactivated();// 0x1359148
	void GotoSpecificWeather(int WeatherIndex);// 0x13590d0
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x1358ff4
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x1358f60
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x1358ee0
	float GetInProgressElapsedTimeSecWithWeather();// 0x1358eb8
	float GetGlobalWeatherSystemTimeOnServer();// 0x1358e90
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x1358e48
	void ForceStopDynamicWeatherChangeOnServer();// 0x1358e34
	void ForceStartNextWeatherChangeOnServer();// 0x1358e20
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x1358d70

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0 , Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	float ElapsedTime;//[Offset: 0x4 , Size: 4]
	float BlendInTime;//[Offset: 0x8 , Size: 4]
	float BlendOutTime;//[Offset: 0xc , Size: 4]
	float SaturateTime;//[Offset: 0x10 , Size: 4]
	float TimeMultiplier;//[Offset: 0x14 , Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a , Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b , Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0 , Size: 4]
	float StartTimeMax;//[Offset: 0x4 , Size: 4]
	float BlendInTime;//[Offset: 0x8 , Size: 4]
	float BlendOutTime;//[Offset: 0xc , Size: 4]
	float DurationTimeMin;//[Offset: 0x10 , Size: 4]
	float DurationTimeMax;//[Offset: 0x14 , Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18 , Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c , Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24 , Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30 , Size: 12]
	float TimeMultiplier;//[Offset: 0x3c , Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0 , Size: 1]
	float Weight;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0 , Size: 1]
	float StartTime;//[Offset: 0x4 , Size: 4]
	float TotalDurationTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4 , Size: 4]
	float ElapsedTime;//[Offset: 0x8 , Size: 4]
	enum NextWeather;//[Offset: 0xc , Size: 1]
	float NextDuration;//[Offset: 0x10 , Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14 , Size: 4]
	float TimelineOffset;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xbc , Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xc8 , Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xd4 , Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe0 , Size: 12]
	delegate WeatherRecover;//[Offset: 0xec , Size: 12]
	enum DynamicWeatherType;//[Offset: 0xf8 , Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0xfc , Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x100 , Size: 4]
	float TargetLightValue;//[Offset: 0x104 , Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108 , Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x10c , Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x110 , Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x114 , Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x118 , Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x11c , Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x120 , Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x124 , Size: 4]
	FString UINotifyModuleName;//[Offset: 0x128 , Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x134 , Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x138 , Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x13c , Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x140 , Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x144 , Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x148 , Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c , Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x150 , Size: 28]
	float RuningDirection;//[Offset: 0x16c , Size: 4]
	float RuningTime;//[Offset: 0x170 , Size: 4]
	float LerpTotalTime;//[Offset: 0x174 , Size: 4]
	FString WeatherName;//[Offset: 0x178 , Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x184 , Size: 4]
	SkyLight* SkyLight;//[Offset: 0x188 , Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x18c , Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x190 , Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x1f8 , Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x264 , Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2cc , Size: 12]
	void UINotifyCallbackOnServer();// 0x1357f9c
	void OnUserQualitySettingChanged(int renderlevel);// 0x12d79a0

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2c8 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	void OnRep_bEnabled();// 0x13323cc

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x238 , Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x23c , Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248 , Size: 1]
	float CustomFogLow_Height;//[Offset: 0x24c , Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x250 , Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x254 , Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x264 , Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x268 , Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x26c , Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x27c , Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x28c , Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x290 , Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x294 , Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2a4 , Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2a8 , Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2ac , Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2b0 , Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2b4 , Size: 16]
	float FogHeightFalloff;//[Offset: 0x2c4 , Size: 4]
	float FogMaxOpacity;//[Offset: 0x2c8 , Size: 4]
	float StartDistance;//[Offset: 0x2cc , Size: 4]
	float FogCutoffDistance;//[Offset: 0x2d0 , Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4 , Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x2d8 , Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x2dc , Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x2e0 , Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x2f0 , Size: 4]
	float VolumetricFogDistance;//[Offset: 0x2f4 , Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x2f8 , Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x2cf1558
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x2cf14e0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x2cf1464
	void SetVolumetricFogDistance(float NewValue);// 0x2cf13ec
	void SetVolumetricFogAlbedo(Color NewValue);// 0x2cf137c
	void SetVolumetricFog(bool bNewValue);// 0x2cf12fc
	void SetStartDistance(float Value);// 0x2cf1284
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x2cf120c
	void SetInscatteringTextureTint(LinearColor Value);// 0x2cf1190
	void SetInscatteringColorCubemapAngle(float Value);// 0x2cf1118
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x2cf10a0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x2cf1028
	void SetFogMaxOpacity(float Value);// 0x2cf0fb0
	void SetFogInscatteringColor(LinearColor Value);// 0x2cf0f34
	void SetFogHeightFalloff(float Value);// 0x2cf0ebc
	void SetFogDensity(float Value);// 0x2cf0e44
	void SetFogCutoffDistance(float Value);// 0x2cf0dcc
	void SetDirectionalInscatteringStartDistance(float Value);// 0x2cf0d54
	void SetDirectionalInscatteringExponent(float Value);// 0x2cf0cdc
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x2cf0c60
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x2cf0ba0
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x2cf0ae4

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0 , Size: 4]
	float DensityCoefficient;//[Offset: 0x4 , Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8 , Size: 16]

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0 , Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4 , Size: 16]
	float MainLight_Temperature;//[Offset: 0x14 , Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18 , Size: 12]
	float SkyLight_Density;//[Offset: 0x24 , Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28 , Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38 , Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c , Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c , Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50 , Size: 16]
	float HeightFallOff;//[Offset: 0x60 , Size: 4]
	float StartDistance;//[Offset: 0x64 , Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0 , Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4 , Size: 4]
	float TotalTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x344 , Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x350 , Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x35c , Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x368 , Size: 12]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374 , Size: 1]
	Vector BlueCircle;//[Offset: 0x378 , Size: 12]
	Vector WhiteCircle;//[Offset: 0x384 , Size: 12]
	float CirclePain;//[Offset: 0x390 , Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x394 , Size: 48]
	Vector AirAttackArea;//[Offset: 0x3c4 , Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x3d0 , Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x3dc , Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x3e8 , Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x3f4 , Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x400 , Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x40c , Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x418 , Size: 12]
	int PlayerNum;//[Offset: 0x430 , Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434 , Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x438 , Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x444 , Size: 12]
	delegate OnGameEnd;//[Offset: 0x450 , Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c , Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d , Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e , Size: 1]
	bool IsInitBPItemTableEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45f , Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460 , Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461 , Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462 , Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463 , Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464 , Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465 , Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x466 , Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x467 , Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468 , Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x46c , Size: 12]
	int BornItemId;//[Offset: 0x478 , Size: 4]
	int BornItemCount;//[Offset: 0x47c , Size: 4]
	int TrainingCountdownTimer;//[Offset: 0x480 , Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484 , Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x488 , Size: 12]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494 , Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495 , Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496 , Size: 1]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497 , Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498 , Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499 , Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a , Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x49c , Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x4a0 , Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x4a4 , Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x4a8 , Size: 4]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac , Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad , Size: 1]
	delegate OnAirAttack;//[Offset: 0x4b0 , Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x4bc , Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x4c8 , Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4 , Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5 , Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x4d8 , Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x4e4 , Size: 12]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x4f0 , Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x4f4 , Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8 , Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x4fc , Size: 36]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x520 , Size: 4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524 , Size: 1]
	int ReadyStateTime;//[Offset: 0x530 , Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x534 , Size: 12]
	FString GameModeDisplayName;//[Offset: 0x540 , Size: 12]
	int CurCircleWave;//[Offset: 0x54c , Size: 4]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x550 , Size: 4]
	FName GameModeState;//[Offset: 0x558 , Size: 8]
	int AlivePlayerNum;//[Offset: 0x5b4 , Size: 4]
	int AliveTeamNum;//[Offset: 0x5b8 , Size: 4]
	int PlayerNumOnPlane;//[Offset: 0x5bc , Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x5c0 , Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x5cc , Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x5d8 , Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x5dc , Size: 12]
	enum GameModeType;//[Offset: 0x5e8 , Size: 1]
	enum GameModeConfigType;//[Offset: 0x5e9 , Size: 1]
	int PlayerNumPerTeam;//[Offset: 0x5ec , Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0x5f0 , Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc , Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd , Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe , Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0x60c , Size: 4]
	float WeatherPhaseIndex;//[Offset: 0x610 , Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0x614 , Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0x620 , Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0x62c , Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0x638 , Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0x63c , Size: 60]
	float InviteCountDownTime;//[Offset: 0x678 , Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0x67c , Size: 12]
	GameDataMining GameDataMining;//[Offset: 0x688 , Size: 48]
	uint64 GameID;//[Offset: 0x6b8 , Size: 8]
	FString GameModeID;//[Offset: 0x6c0 , Size: 12]
	FString[] ModeUIManagerArray;//[Offset: 0x6cc , Size: 12]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x6e4 , Size: 4]
	Actor* StartedPlane;//[Offset: 0x6e8 , Size: 4]
	float StartFlyTime;//[Offset: 0x6ec , Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0x6f0 , Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0x6f8 , Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0x700 , Size: 8]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x719 , Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71a , Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71b , Size: 1]
	int EnableNewStateMachine;//[Offset: 0x71c , Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0x724 , Size: 4]
	float BroadcastClientDistance;//[Offset: 0x728 , Size: 4]
	int[] FinalWinTeams;//[Offset: 0x744 , Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0x750 , Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0x75c , Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760 , Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x761 , Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x762 , Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0x764 , Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0x770 , Size: 12]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c , Size: 1]
	FString GuideImageName;//[Offset: 0x780 , Size: 12]
	FString GuideLuaTableName;//[Offset: 0x78c , Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0x798 , Size: 12]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4 , Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0x7a8 , Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x7ac , Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x7b0 , Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x7bc , Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0x7c8 , Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc , Size: 1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd , Size: 1]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0x7d0 , Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x7d4 , Size: 4]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x1bf56d0
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x1bf56d0
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x1480f34
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x1480d28
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x14809a0
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x14807dc
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x148068c
	void SimulateAirAttackOver();// 0x1480630
	void SetTagCulling(bool IsUse);// 0x14805b0
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x1480464
	void SetCurAirAttackWave(int AirAttackWave);// 0x14803ec
	void SetCurAirAttackType(byte airattacktype);// 0x1480374
	void SetAirplaneStopLoc(Vector StopLoc);// 0x1480304
	void SetAirplaneStartLoc(Vector StarLoc);// 0x1480294
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x1480224
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x14801b4
	void ServerRemoteDestroyActor(int SingleId);// 0x148013c
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x147ffe0
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x147ff60
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x147fdcc
	void OnRep_WeatherStateChanged();// 0x147fcb4
	void OnRep_VisualFieldFeatureParam();// 0x147fdb8
	void OnRep_UpassInfoList();// 0x12dedb4
	void OnRep_StartedPlane();// 0x147fda4
	void OnRep_ResetWeatherPlaySpeed();// 0x147fd90
	void OnRep_ReadyStateTime();// 0x147fd7c
	void OnRep_ReadyStateCountingDown();// 0x12dedb4
	void OnRep_PlayerNumOnPlane();// 0x147fd68
	void OnRep_PlayerNumChange();// 0x12dedb4
	void OnRep_ModeUIManagerArray();// 0x147fd54
	void OnRep_MarkSyncData();// 0x147fd40
	void OnRep_IsTrainingMode();// 0x147fd2c
	void OnRep_IsShowDeadBox();// 0x12dedb4
	void OnRep_IsFPPMode();// 0x147fd18
	void OnRep_IsDark();// 0x147fd04
	void OnRep_GameTerminatorPlayerKey();// 0x147fcf0
	void OnRep_GameModeType();// 0x147fcdc
	void OnRep_GameModeState();// 0x147fcc8
	void OnRep_GameModeFeatureSet();// 0x12dedb4
	void OnRep_FinalWinTeams();// 0x12dedb4
	void OnRep_FinalWinPlayers();// 0x12dedb4
	void OnRep_DynamicWeatherState();// 0x147fcb4
	void OnRep_AliveTeamNum();// 0x147fca0
	void OnRep_AlivePlayerNum();// 0x147fc8c
	void OnRep_AirplaneStopLoc();// 0x12dedb4
	void OnRep_AirplaneStartLoc();// 0x12dedb4
	void OnRep_AirplaneForceJumpLoc();// 0x147fc78
	void OnRep_AirplaneCanJumpLoc();// 0x147fc78
	void OnGameModeDisplayNameChange();// 0x147fc64
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x147fba8
	bool IsRevivalGame();// 0x147fb80
	bool IsPVEMode();// 0x147fb58
	bool IsPlaneValid();// 0x147fb34
	bool IsMapUseTeamPattern();// 0x147fb04
	bool IsInNight();// 0x147fad4
	bool IsFeatureSupported(enum SubSystemType);// 0x147fa54
	float GetRepServerWorldTimeSeconds();// 0x147fa2c
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x147f990
	int GetPVEWeatherPhaseIndex();// 0x147f968
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x147f940
	FName GetGameModeState();// 0x147f900
	Vector GetForceJumpLoc();// 0x147f8dc
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x1430cf4
	enum GetCurWeatherState();// 0x147f8b4
	enum GetCurDynamicWeatherState();// 0x147f88c
	int GetCurCircleWave();// 0x147f870
	byte GetCurCircleState();// 0x147f830
	Vector GetCanJumpLoc();// 0x147f80c
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x147f760
	int GetAlivePlayerNum();// 0x147f738
	Vector GetAirplaneStopLoc();// 0x147f714
	Vector GetAirplaneStartLoc();// 0x147f6f0
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x147f62c
	void CheckInitLuaRemoteEvent();// 0x147f618
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x147f5a0
	void ChangeDynamicWeatherState(enum DayState);// 0x147f528
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x147f420
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x147f20c
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x147f040
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x147ee74
	void BroadcastTemporaryMessage(FString Message);// 0x147edb0
	void BroadcastRoute(Vector StartLoc, Vector StopLoc);// 0x147ece8
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x147ead4
	void BroadcastCircleWaveOver(int Index);// 0x147ea20
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain);// 0x147e768
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex);// 0x147e598
	void BroadcastAirDrop();// 0x147e57c
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex);// 0x147e4c0
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex);// 0x147e344
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x147e280
	void AddPveZombieGrenadeCount(int Value);// 0x147e208
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x147e190

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	FString WeaponAttrReloadTableName;//[Offset: 0x320 , Size: 12]
	FString VehicleAttrReloadTableName;//[Offset: 0x32c , Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338 , Size: 1]
	static void GetWeaponAttrReloadTableRowByRef(int ID, out WeaponAttrReloadTableStruct Result);// 0x184c350
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x184c2ac
	static VehicleAttrReloadTableStruct GetVehicleAttrReloadTableRow(int ID);// 0x184c224

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2f8 , Size: 8]
	FName PreviousMatchState;//[Offset: 0x300 , Size: 8]
	int ElapsedTime;//[Offset: 0x308 , Size: 4]
	void OnRep_MatchState();// 0x2cf5280
	void OnRep_ElapsedTime();// 0x2cf53fc

--------------------------------
Class: WeaponAttrReloadTableStruct
	int KeyID;//[Offset: 0x0 , Size: 4]
	float AutoAimingConfig_Speed;//[Offset: 0x4 , Size: 4]
	float AutoAimingConfig_RangeRate;//[Offset: 0x8 , Size: 4]
	float AutoAimingConfig_SpeedRate;//[Offset: 0xc , Size: 4]
	float AutoAimingConfig_RangeRateSight;//[Offset: 0x10 , Size: 4]
	float AutoAimingConfig_SpeedRateSight;//[Offset: 0x14 , Size: 4]
	float AutoAimingConfig_AdsorbMaxRange;//[Offset: 0x18 , Size: 4]
	float AutoAimingConfig_AdsorbMinRange;//[Offset: 0x1c , Size: 4]
	float AutoAimingConfig_AdsorbMinAttenuationDis;//[Offset: 0x20 , Size: 4]
	float AutoAimingConfig_AdsorbMaxAttenuationDis;//[Offset: 0x24 , Size: 4]
	float AutoAimingConfig_AdsorbActiveMinRange;//[Offset: 0x28 , Size: 4]
	float AccessoriesVRecoilFactor;//[Offset: 0x2c , Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x30 , Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x34 , Size: 4]
	float DeviationBase;//[Offset: 0x38 , Size: 4]
	float DeviationBaseAim;//[Offset: 0x3c , Size: 4]
	float DeviationRecoilGain;//[Offset: 0x40 , Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x44 , Size: 4]
	float DeviationMaxMove;//[Offset: 0x48 , Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x4c , Size: 4]
	float DeviationStanceJump;//[Offset: 0x50 , Size: 4]
	float GameDeviationFactor;//[Offset: 0x54 , Size: 4]
	float HitPartCoffHead;//[Offset: 0x58 , Size: 4]
	float HitPartCoffBody;//[Offset: 0x5c , Size: 4]
	float HitPartCoffLimbs;//[Offset: 0x60 , Size: 4]
	float HitPartCoffHand;//[Offset: 0x64 , Size: 4]
	float HitPartCoffFoot;//[Offset: 0x68 , Size: 4]
	float BaseImpactDamage;//[Offset: 0x6c , Size: 4]
	float RangeModifier;//[Offset: 0x70 , Size: 4]
	float ReferenceDistance;//[Offset: 0x74 , Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x78 , Size: 4]
	float ReloadTime;//[Offset: 0x7c , Size: 4]
	float ReloadTimeTactical;//[Offset: 0x80 , Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x84 , Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x88 , Size: 4]
	float ReloadDurationStart;//[Offset: 0x8c , Size: 4]
	float ReloadDurationLoop;//[Offset: 0x90 , Size: 4]
	float MaxBulletNumInOneClip;//[Offset: 0x94 , Size: 4]
	float InitBulletInClip;//[Offset: 0x98 , Size: 4]
	float BulletFireSpeed;//[Offset: 0x9c , Size: 4]
	int bEnableVehicleShoot;//[Offset: 0xa0 , Size: 4]
	int bEnableLeanOutHolding;//[Offset: 0xa4 , Size: 4]
	float Bullet_RadialDamageParams_BaseDamage;//[Offset: 0xa8 , Size: 4]
	float Bullet_RadialDamageParams_MinimumDamage;//[Offset: 0xac , Size: 4]
	float Bullet_RadialDamageParams_DamageInnerRadius;//[Offset: 0xb0 , Size: 4]
	float Bullet_RadialDamageParams_DamageOuterRadius;//[Offset: 0xb4 , Size: 4]
	float Bullet_RadialDamageParams_DamageFalloff;//[Offset: 0xb8 , Size: 4]
	float Bullet_MaxNoGravityRange;//[Offset: 0xbc , Size: 4]
	float Bullet_LaunchGravityScale;//[Offset: 0xc0 , Size: 4]
	FString Bullet_RadialDamageParams_DamageTypeClass;//[Offset: 0xc4 , Size: 12]
	FString ImpactActorTemplatePath;//[Offset: 0xd0 , Size: 12]
	FString BulletTemplatePath;//[Offset: 0xdc , Size: 12]
	int ReloadWithNoCost;//[Offset: 0xe8 , Size: 4]
	FString MuzzleFX;//[Offset: 0xec , Size: 12]
	FString ScopeMuzzleFX;//[Offset: 0xf8 , Size: 12]
	FString RemoteMuzzleFX;//[Offset: 0x104 , Size: 12]
	FString LocalSilencerMuzzleFX;//[Offset: 0x110 , Size: 12]
	FString ScopeSilencerMuzzleFX;//[Offset: 0x11c , Size: 12]
	FString RemoteSilencerMuzzleFX;//[Offset: 0x128 , Size: 12]
	FString LocalFiringSuppressorMuzzleFX;//[Offset: 0x134 , Size: 12]
	FString ScopeFiringSuppressorMuzzleFX;//[Offset: 0x140 , Size: 12]
	FString RemoteFiringSuppressorMuzzleFX;//[Offset: 0x14c , Size: 12]
	FString LocalCompensatorMuzzleFX;//[Offset: 0x158 , Size: 12]
	FString ScopeCompensatorMuzzleFX;//[Offset: 0x164 , Size: 12]
	FString RemoteCompensatorMuzzleFX;//[Offset: 0x170 , Size: 12]

--------------------------------
Class: VehicleAttrReloadTableStruct
	int KeyID;//[Offset: 0x0 , Size: 4]
	float HealthMax;//[Offset: 0x4 , Size: 4]
	float Health;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0 , Size: 4]
	float FlightHeight;//[Offset: 0x4 , Size: 4]
	float SeaLevelHeight;//[Offset: 0x8 , Size: 4]
	int16[] bombsInterval;//[Offset: 0xc , Size: 12]
	Vector2D[] bombsPosition2D;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0 , Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4 , Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8 , Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14 , Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x40 , Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x48 , Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x84 , Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xc0 , Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0 , Size: 16]
	Actor* VisibleActor;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0 , Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1 , Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	int updateTime;//[Offset: 0xc , Size: 4]
	int upassLevel;//[Offset: 0x10 , Size: 4]
	int upassScore;//[Offset: 0x14 , Size: 4]
	int planeAvatarId;//[Offset: 0x18 , Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e , Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f , Size: 1]
	FString iconUrl;//[Offset: 0x20 , Size: 12]
	FString Nation;//[Offset: 0x2c , Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38 , Size: 32]
	int upassKeepBuy;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0 , Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	int LeftPlayerNum;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0 , Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc , Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18 , Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xbc , Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0xc0 , Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xc4 , Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xd0 , Size: 12]
	int MarkCountProcessed;//[Offset: 0xdc , Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x13b50cc
	int GenerateNewLocalInstanceID();// 0x13b50a8
	int GenerateNewInstanceID();// 0x13b5084
	void DispatchMarkData(MarkDispatchAction Data);// 0x13b4ecc

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0 , Size: 1]
	enum RangeType;//[Offset: 0x1 , Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4 , Size: 76]
	float DispatchDelayTime;//[Offset: 0x50 , Size: 4]
	float RangeRad;//[Offset: 0x54 , Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x58 , Size: 8]
	float DispatchTime;//[Offset: 0x60 , Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x68 , Size: 16]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xbc , Size: 60]
	float EventCDTime;//[Offset: 0xf8 , Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x154c3e0

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c , Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28 , Size: 12]
	void UnRegister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x12e2a30
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x13336c4
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x1378598
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x1378520
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1bf56d0
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1bf56d0

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xbc , Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xc8 , Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xcc , Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1 , Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xd8 , Size: 1]
	bool IsNotificationWorking();// 0x1378158
	static int IsGlobalDebugLineTraceDrawn();// 0x137812c
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x1bf56d0
	enum GetFieldOfViewNotificationStatus();// 0x1378104

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4 , Size: 12]
	byte ParticleType;//[Offset: 0x10 , Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14 , Size: 4]
	FName ShaderName;//[Offset: 0x18 , Size: 8]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0 , Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc , Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10 , Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24 , Size: 12]
	float blendTime;//[Offset: 0x30 , Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float StartDistance;//[Offset: 0x4 , Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc , Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0 , Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4 , Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0 , Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ZombieWaveUIState
	int TypeID;//[Offset: 0x0 , Size: 4]
	int CountdownTime;//[Offset: 0x4 , Size: 4]
	FString ShowString;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0 , Size: 4]
	uint32 CurClipID;//[Offset: 0x4 , Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8 , Size: 4]
	byte ShootMode;//[Offset: 0xc , Size: 1]
	float StartFireTime;//[Offset: 0x10 , Size: 4]
	double StartFireSysTime;//[Offset: 0x18 , Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2c8 , Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2cc , Size: 4]
	float NearToFarDistance;//[Offset: 0x2d0 , Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2d4 , Size: 4]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0 , Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0xc , Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x18 , Size: 12]
	int ShootTimes;//[Offset: 0x24 , Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x28 , Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x34 , Size: 4]
	int NetworkStatus;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0 , Size: 12]
	Vector GunPos;//[Offset: 0xc , Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18 , Size: 12]
	uint32 ShootID;//[Offset: 0x24 , Size: 4]
	uint64 CurrentStates;//[Offset: 0x28 , Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30 , Size: 1]
	float SkeletonLength;//[Offset: 0x34 , Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40 , Size: 64]
	double ShootSystemTime;//[Offset: 0x80 , Size: 8]
	byte ShootTimeConDelta;//[Offset: 0x88 , Size: 1]
	float ShootLevelTime;//[Offset: 0x8c , Size: 4]
	Vector GunTailPos;//[Offset: 0x90 , Size: 12]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0 , Size: 12]
	FString GLVersion;//[Offset: 0xc , Size: 12]
	FString OSVersion;//[Offset: 0x18 , Size: 12]
	FString DeviceMake;//[Offset: 0x24 , Size: 12]
	FString DeviceModel;//[Offset: 0x30 , Size: 12]
	FString VulkanVersion;//[Offset: 0x3c , Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48 , Size: 12]
	FString OpenID;//[Offset: 0x54 , Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0 , Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0 , Size: 12]
	Vector ImpactNormal;//[Offset: 0xc , Size: 12]
	float BulletHitTime;//[Offset: 0x18 , Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c , Size: 4]
	float BulletMovedDistance;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd , Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be , Size: 1]
	Vector ServerShootPos;//[Offset: 0x4c0 , Size: 12]
	float ServerShootTime;//[Offset: 0x4cc , Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x4d0 , Size: 80]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539 , Size: 1]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x1324350
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x13f537c
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x13f5260
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x13242a0
	void OnImpact(out const HitResult _ImpactResult);// 0x13241fc
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x13f5060

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0 , Size: 4]
	Transform Trans;//[Offset: 0x10 , Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40 , Size: 4]
	Actor* Instigator;//[Offset: 0x44 , Size: 4]
	uint32 ShootID;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0 , Size: 4]
	int Score;//[Offset: 0x4 , Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8 , Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc , Size: 4]
	int HighestScore;//[Offset: 0x10 , Size: 4]
	int FollowScore;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0 , Size: 8]
	FString OpenID;//[Offset: 0x8 , Size: 12]
	int8 PlatID;//[Offset: 0x14 , Size: 1]
	uint16 AreaID;//[Offset: 0x16 , Size: 2]
	FString ZoneID;//[Offset: 0x18 , Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0 , Size: 4]
	int8 Type;//[Offset: 0x4 , Size: 1]
	int X;//[Offset: 0x8 , Size: 4]
	int Y;//[Offset: 0xc , Size: 4]
	int Z;//[Offset: 0x10 , Size: 4]
	int Speed;//[Offset: 0x14 , Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18 , Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19 , Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c , Size: 4]
	int TimeStamp;//[Offset: 0x20 , Size: 4]
	int8 RoleType;//[Offset: 0x24 , Size: 1]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0 , Size: 12]
	int CaculateType;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0xe0 , Size: 12]
	FString ReplayServerURL;//[Offset: 0x118 , Size: 12]
	void RequestReplaysFromServer(FString URLString);// 0x13d5e74
	void ClearStreams();// 0x13d5e60

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatar;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0 , Size: 4]
	int HelmetAvatar;//[Offset: 0x4 , Size: 4]
	int ArmorAvatar;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0 , Size: 4]
	int AvatarSpecificID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0 , Size: 4]
	int cur_count;//[Offset: 0x4 , Size: 4]
	int total_count;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskID;//[Offset: 0x0 , Size: 4]
	int State;//[Offset: 0x4 , Size: 4]
	int Progress;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: GameModePlayerParams
	uint64 Uid;//[Offset: 0x0 , Size: 8]
	FName PlayerType;//[Offset: 0x8 , Size: 8]
	FString PlayerName;//[Offset: 0x10 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c , Size: 4]
	int TeamID;//[Offset: 0x20 , Size: 4]
	int PlayerBornPointID;//[Offset: 0x24 , Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	byte gender;//[Offset: 0x2a , Size: 1]
	FString PIC_URL;//[Offset: 0x2c , Size: 12]
	int Level;//[Offset: 0x38 , Size: 4]
	int Segment_Level;//[Offset: 0x3c , Size: 4]
	int AvatarBoxId;//[Offset: 0x40 , Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x48 , Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x54 , Size: 12]
	int[] equip_plating_list;//[Offset: 0x60 , Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x6c , Size: 12]
	int RolewearIndex;//[Offset: 0x78 , Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x7c , Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0x88 , Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0x94 , Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xa0 , Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xac , Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0xb8 , Size: 12]
	GameModePlayerConsumableAvatar ConsumableAvatar;//[Offset: 0xc4 , Size: 4]
	int VehicleSkinInReady;//[Offset: 0xc8 , Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xcc , Size: 32]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xec , Size: 36]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x110 , Size: 24]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x128 , Size: 12]
	int[] CharSkillList;//[Offset: 0x134 , Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x140 , Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x150 , Size: 12]
	int[] audioChat;//[Offset: 0x15c , Size: 12]
	FName CurrentPlayerState;//[Offset: 0x168 , Size: 8]
	FName CurrentCharacterState;//[Offset: 0x170 , Size: 8]
	float SyncedTimestamp;//[Offset: 0x178 , Size: 4]
	float DestinyValue;//[Offset: 0x17c , Size: 4]
	float WarmScore;//[Offset: 0x180 , Size: 4]
	float RatingScore;//[Offset: 0x184 , Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188 , Size: 1]
	uint64 WatchPlayerKey;//[Offset: 0x190 , Size: 8]
	byte PlatformGender;//[Offset: 0x198 , Size: 1]
	int planeAvatarId;//[Offset: 0x19c , Size: 4]
	FString Nation;//[Offset: 0x1a0 , Size: 12]
	int MatchLabel;//[Offset: 0x1ac , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x1b0 , Size: 4]
	int AnchorPlatResID;//[Offset: 0x1b4 , Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8 , Size: 1]
	int64 LastGameResultTime;//[Offset: 0x1c0 , Size: 8]
	int64 CorpsID;//[Offset: 0x1c8 , Size: 8]
	int64 CampID;//[Offset: 0x1d0 , Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8 , Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9 , Size: 1]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da , Size: 1]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0 , Size: 4]
	FString Reason;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ReplayUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	byte DemoType;//[Offset: 0x2ec , Size: 1]
	FString ReplayNameStr;//[Offset: 0x2f0 , Size: 12]
	int ReplayTeamID;//[Offset: 0x2fc , Size: 4]
	ReplayUIManager* pReplayUIManager;//[Offset: 0x300 , Size: 4]
	Vector UIOffsetVec;//[Offset: 0x304 , Size: 12]
	<int,ReplayEnemyUIInfo> CurEnemyUIMapTable;//[Offset: 0x310 , Size: 60]
	void UpdateWeaponUI();// 0x1402474
	void UpdateReplayUI();// 0x133cac8
	void UpdateOneEnemyUI(int _Index, ReplayEnemyUIInfo inUIInfo);// 0x1402384
	void UpdateBulletUI();// 0x1402368
	void OnReplayProgressChange();// 0x140234c
	void InitIngameUI();// 0x1342df0
	void HideUnnecessaryUI();// 0x1342d54
	void HideOneEnemyUI(int _Index);// 0x139fd10
	void ForceUpdateUI();// 0x1342d38
	void ClearLastReplayUI();// 0x1402330
	int AddOneEnemyUI(STExtraPlayerState* InPlayerState);// 0x14022a8

--------------------------------
Class: ReplayEnemyUIInfo
	int UIIndex;//[Offset: 0x0 , Size: 4]
	Vector WordLocation;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ReplayTeammateInfo

--------------------------------
Class: DeathPlayCharacterTrans
	Vector Location;//[Offset: 0x0 , Size: 12]
	Rotator Rotation;//[Offset: 0xc , Size: 12]

--------------------------------
Class: KillInfoRecordData
	FString SafeLabel;//[Offset: 0x28 , Size: 12]
	int SafeParam1;//[Offset: 0x34 , Size: 4]
	int SafeParam2;//[Offset: 0x38 , Size: 4]
	float RecordTimestamp;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0xe0 , Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x108 , Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x10c , Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110 , Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x114 , Size: 12]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120 , Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121 , Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x128 , Size: 12]
	bool PlayDemoWithFilename(FString DemoName);// 0x13438ac
	FString GetDemoPlayTime();// 0x13437ec

--------------------------------
Class: AntiCheatConfig.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c , Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0 , Size: 12]
	int bUseFeatureSet;//[Offset: 0xc , Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10 , Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c , Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28 , Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x20d0 , Size: 4]
	void ClearDecalBakingRTCache(GameStateBase* CallFunc_GetGameState_ReturnValue, DecalBakingActorMgr* CallFunc_GetWorldInstance_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x1bf56d0
	void ShowAngledSightState(bool IsAngled, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x1bf56d0
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void AllowWater(out bool bCanEnter, bool CallFunc_CanEnterWaterArea_ReturnValue);// 0x1bf56d0
	bool ShouldRedBlood(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1bf56d0
	void CheckHasVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* PlayerCharacter, out int InItemID, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1bf56d0
	void ChangeCurVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, BP_StextraBoatBase_C* K2Node_DynamicCast_AsBP_Stextra_Boat_Base, bool K2Node_DynamicCast_bSuccess2, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, int CallFunc_CheckHasVehicleAvatar_inItemID, bool CallFunc_IsValid_ReturnValue3, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsDriver_ReturnValue, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_ChangeVehicleAvatar_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x1bf56d0
	void HandleOnChangedVehicleSeat(STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue);// 0x1bf56d0
	void GetMasterBoneComponent(out MeshComponent* MasterBoneComponent);// 0x1bf56d0
	void InitDefaultAvatarByResID(int AGender, int Head, int hair);// 0x1bf56d0
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x1bf56d0
	BackpackEmoteHandle* GetEmoteHandle(int ItemID, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2, BackpackEmoteHandle* CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x1bf56d0
	FString GetShootWeaponNameByWeapon(int ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	CameraComponent* GetThirdPersonCamera();// 0x1bf56d0
	SpringArmComponent* GetThirdPersonSpringArm();// 0x1bf56d0
	CameraComponent* GetFPPCamera();// 0x1bf56d0
	SpringArmComponent* GetFPPSpringArm();// 0x1bf56d0
	CameraComponent* GetFirstPersonCamera();// 0x1bf56d0
	SpringArmComponent* GetFirstPersonSpringArm();// 0x1bf56d0
	CameraComponent* GetScopeCamera();// 0x1bf56d0
	SpringArmComponent* GetScopeSpringArm();// 0x1bf56d0
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x1bf56d0
	bool ShouldAutoScopeWhenPeek(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	FString GetGrenadeNameByGrenadeType(byte grenadeType, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1bf56d0
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x1bf56d0
	void GetControllerViewCamera(out CameraComponent* Camera, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x1bf56d0
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x1bf56d0
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x1bf56d0
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x1bf56d0
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle);// 0x1bf56d0
	SpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x1bf56d0
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x1bf56d0
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x1bf56d0
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x1bf56d0
	void ResetBPCameraSetting();// 0x1bf56d0
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x1bf56d0
	void isAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void PickUp(PickUpWrapperActor* NewParam);// 0x1bf56d0
	void DoPickUpTarget();// 0x1bf56d0
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x1bf56d0
	void SetAllCollisionEnabled(bool bEnable);// 0x1bf56d0
	void MoveOutScope();// 0x1bf56d0
	void MoveInScope(bool bHasSetMesh);// 0x1bf56d0
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x1bf56d0
	void SwitchCrouch(byte NewParam, byte PreState, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);// 0x1bf56d0
	void UserConstructionScript(CameraComponent* ___object_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6);// 0x1bf56d0
	void ParachuteCamBlend__FinishedFunc();// 0x1bf56d0
	void ParachuteCamBlend__UpdateFunc();// 0x1bf56d0
	void LerpAlpha__FinishedFunc();// 0x1bf56d0
	void LerpAlpha__UpdateFunc();// 0x1bf56d0
	void ScopeTimeline__FinishedFunc();// 0x1bf56d0
	void ScopeTimeline__UpdateFunc();// 0x1bf56d0
	void TurnLerpAlpha__FinishedFunc();// 0x1bf56d0
	void TurnLerpAlpha__UpdateFunc();// 0x1bf56d0
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Vault_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_V_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_C_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_F10_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void OnPetOwnerPossessed();// 0x1bf56d0
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x1bf56d0
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1bf56d0
	void ReloadEvent();// 0x1bf56d0
	void OnEquipWeapon(byte Slot);// 0x1bf56d0
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x1bf56d0
	void OnNotifyHurt();// 0x1bf56d0
	void NotifyPickUp(bool bIsAvailable);// 0x1bf56d0
	void OnLanded(out const HitResult Hit);// 0x1bf56d0
	void OnPoseStateChange(byte LastState, byte CurState);// 0x1bf56d0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1bf56d0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1bf56d0
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	void ParachuteOnWater();// 0x1bf56d0
	void NotifyTombBox(bool bIsAvailable);// 0x1bf56d0
	void DoAutoReloadCurrentWeapon();// 0x1bf56d0
	void OnUnEquipWeapon();// 0x1bf56d0
	void BPResetCharacter();// 0x1bf56d0
	void OnInitGrenadeData();// 0x1bf56d0
	void VaultFailPawnBluePrint(out const FString Content);// 0x1bf56d0
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x1bf56d0
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x1bf56d0
	void ScopeInStop();// 0x1bf56d0
	void PlayScopeInTimeline(float Rate);// 0x1bf56d0
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x1bf56d0
	void ReceivePossessed(Controller* NewController);// 0x1bf56d0
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x1bf56d0
	void OnWeaponEquipmentUpdate();// 0x1bf56d0
	void BindAndExecStateChanged();// 0x1bf56d0
	void StateEnterHandler_Event(enum State);// 0x1bf56d0
	void PawnVaultServerStopCheckBluePrint();// 0x1bf56d0
	void PawnVaultStopBluePrint();// 0x1bf56d0
	void OnMiniTreeTriggerServerLogicCPP();// 0x1bf56d0
	void OnHitByCake();// 0x1bf56d0
	void EnablePet(bool Enable);// 0x1bf56d0
	void OnEnterStateForBp(enum State);// 0x1bf56d0
	void OnLeaveStateForBp(enum State);// 0x1bf56d0
	void ReceiveDestroyed();// 0x1bf56d0
	void StopTurningInPlace();// 0x1bf56d0
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x1bf56d0
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, Key K2Node_InputKeyEvent_Key15, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, bool ___bool_IsClosed_Variable2, delegate K2Node_CreateDelegate_OutputDelegate2, bool ___bool_Has_Been_Initd_Variable2, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Key K2Node_InputKeyEvent_Key14, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, bool CallFunc_HasAuthority_ReturnValue, byte K2Node_Event_slot, Key K2Node_InputActionEvent_Key, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_bIsAvailable2, FString CallFunc_Conv_BoolToString_ReturnValue, HitResult K2Node_Event_Hit, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Controller* CallFunc_GetController_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Less_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, byte K2Node_Event_LastState, byte K2Node_Event_CurState, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Event_DeltaTime, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool CallFunc_IsDedicatedServer_ReturnValue, Key ___struct_Variable, bool CallFunc_Not_PreBool_ReturnValue, Key ___struct_Variable2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, bool K2Node_CustomEvent_bIsAvailable, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Controller* CallFunc_GetController_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, int CallFunc_PostEvent_ReturnValue3, int CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, bool K2Node_SwitchEnum2_CmpSuccess, Controller* CallFunc_GetController_ReturnValue5, int CallFunc_PostEvent_ReturnValue5, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, Key K2Node_InputActionEvent_Key2, CameraComponent* CallFunc_GetControllerViewCamera_Camera, Controller* CallFunc_GetController_ReturnValue6, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess6, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, Key K2Node_InputActionEvent_Key3, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess7, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess8, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, Key K2Node_InputKeyEvent_Key16, Controller* CallFunc_GetController_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, Controller* CallFunc_GetController_ReturnValue8, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess10, FString CallFunc_GetPlayerKey_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate6, bool CallFunc_SetCurrentPersonPerspective_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue2, float K2Node_CustomEvent_Rate, bool CallFunc_IsCharacterSprinting_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue2, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, AkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, Key K2Node_InputKeyEvent_Key, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, bool CallFunc_IsValid_ReturnValue8, Actor* CallFunc_GetOwner_ReturnValue, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess11, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess12, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, int ___int_Array_Index_Variable2, bool CallFunc_IsValid_ReturnValue9, int CallFunc_Array_Get_Item2, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue10, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, bool CallFunc_IsValid_ReturnValue11, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue12, int CallFunc_PostAkEvent_ReturnValue2, Key ___struct_Variable3, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key3, bool CallFunc_IsLocallyControlled_ReturnValue2, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue13, Actor* CallFunc_GetOwner_ReturnValue2, int ___int_Loop_Counter_Variable2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate7, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_ShouldRedBlood_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue7, bool CallFunc_IsValid_ReturnValue14, bool CallFunc_IsValid_ReturnValue15, enum K2Node_CustomEvent_state, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue8, bool CallFunc_AllowWater_bCanEnter, bool CallFunc_IsValid_ReturnValue16, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess14, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue3, CameraComponent* CallFunc_GetControllerViewCamera_Camera2, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue17, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsShowBlood_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue3, bool CallFunc_IsLocalControlorView_ReturnValue, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_IsLocalControlorView_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_IsLocalControlorView_ReturnValue3, bool K2Node_Event_Enable, bool CallFunc_BooleanAND_ReturnValue6, enum K2Node_Event_State2, bool CallFunc_IsValid_ReturnValue18, enum K2Node_Event_State, bool CallFunc_IsValid_ReturnValue19, bool CallFunc_IsValid_ReturnValue20, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_HasAuthority_ReturnValue3, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key5, Key K2Node_InputKeyEvent_Key6, Key ___struct_Variable4, Key K2Node_InputKeyEvent_Key7, Key K2Node_InputKeyEvent_Key8, Key K2Node_InputKeyEvent_Key9, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, Rotator CallFunc_RLerp_ReturnValue, Key K2Node_InputKeyEvent_Key10, Key K2Node_InputKeyEvent_Key11, Key ___struct_Variable5, Key K2Node_InputKeyEvent_Key12, Key K2Node_InputKeyEvent_Key13);// 0x1bf56d0
	void OnCakePlacement__DelegateSignature(bool Success);// 0x1bf56d0
	void UnequipWeaponComplete__DelegateSignature();// 0x1bf56d0
	void EquipWeaponComplete__DelegateSignature();// 0x1bf56d0
	ChildActorComponent* BP_PaintDecalDetectLine1;//[Offset: 0x20d4 , Size: 4]
	BP_CharacterWeaponManager_C* BP_CharacterWeaponManager;//[Offset: 0x20d8 , Size: 4]
	SceneComponent* CameraRoot;//[Offset: 0x20dc , Size: 4]
	BP_CustomSpringArm_C* BP_CustomSpringArm;//[Offset: 0x20e0 , Size: 4]
	BP_UAESkillManager_C* UAESkillManager;//[Offset: 0x20e4 , Size: 4]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x20e8 , Size: 4]
	SplineComponent* PetParachuteSpline;//[Offset: 0x20ec , Size: 4]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x20f0 , Size: 4]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x20f4 , Size: 4]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x20f8 , Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x20fc , Size: 4]
	BP_FloatingText_C* BP_FloatingText;//[Offset: 0x2100 , Size: 4]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x2104 , Size: 4]
	StaticMeshComponent* SM_plane_04;//[Offset: 0x2108 , Size: 4]
	StaticMeshComponent* SM_plane_03;//[Offset: 0x210c , Size: 4]
	StaticMeshComponent* SM_plane_02;//[Offset: 0x2110 , Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x2114 , Size: 4]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x2118 , Size: 4]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x211c , Size: 4]
	HoldComponent_C* AimHoldComp;//[Offset: 0x2120 , Size: 4]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x2124 , Size: 4]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x2128 , Size: 4]
	StaticMeshComponent* SM_plane_01_smoke;//[Offset: 0x212c , Size: 4]
	STScreenAppearanceComponentAdditional* STScreenAppearanceComponentAdditional;//[Offset: 0x2130 , Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x2134 , Size: 4]
	FPPComponent_C* FPPComponent;//[Offset: 0x2138 , Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x213c , Size: 4]
	CameraComponent* ScopingCamera;//[Offset: 0x2140 , Size: 4]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x2144 , Size: 4]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x2148 , Size: 4]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x214c , Size: 4]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x2150 , Size: 4]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x2154 , Size: 4]
	StaticMeshComponent* SM_plane_01;//[Offset: 0x2158 , Size: 4]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x215c , Size: 4]
	PickupManagerComponent* PickupManager;//[Offset: 0x2160 , Size: 4]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x2164 , Size: 4]
	StaticMeshComponent* Scope;//[Offset: 0x2168 , Size: 4]
	CameraComponent* Camera;//[Offset: 0x216c , Size: 4]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x2170 , Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x2174 , Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x2178 , Size: 4]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x217c , Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x2180 , Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x2184 , Size: 4]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x2188 , Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x218c , Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x2190 , Size: 4]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x2194 , Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x2198 , Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x219c , Size: 4]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x21a0 , Size: 4]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a4 , Size: 1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a5 , Size: 1]
	float ReloadingCDMax;//[Offset: 0x21a8 , Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x21ac , Size: 12]
	Vector VelocityVector;//[Offset: 0x21b8 , Size: 12]
	float Speed;//[Offset: 0x21c4 , Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c8 , Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x21cc , Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x21d8 , Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x21e4 , Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x21f0 , Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21fc , Size: 1]
	byte LocomotionState;//[Offset: 0x21fd , Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21fe , Size: 1]
	float ProneCameraHeight;//[Offset: 0x2200 , Size: 4]
	float CameraMoveSpeed;//[Offset: 0x2204 , Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2208 , Size: 1]
	float MeleeAttackRange;//[Offset: 0x220c , Size: 4]
	Vector Melee Attack Location;//[Offset: 0x2210 , Size: 12]
	float MeleeAttackDamage;//[Offset: 0x221c , Size: 4]
	byte CurCameraMode;//[Offset: 0x2220 , Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x2224 , Size: 20]
	Rotator TerreneNormal;//[Offset: 0x2238 , Size: 12]
	Vector Normal;//[Offset: 0x2244 , Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x2250 , Size: 4]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2254 , Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x2258 , Size: 12]
	delegate UnequipWeaponComplete;//[Offset: 0x2264 , Size: 12]
	float CrouchCameraHeight;//[Offset: 0x2270 , Size: 4]
	float PickupDelayTime;//[Offset: 0x2274 , Size: 4]
	float DefaultCapsuleRadius;//[Offset: 0x2278 , Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x227c , Size: 4]
	float SwimCameraHeight;//[Offset: 0x2280 , Size: 4]
	float SwimTargetRoll;//[Offset: 0x2284 , Size: 4]
	float SwimUpRateFix;//[Offset: 0x2288 , Size: 4]
	float SwimRotateSpeed;//[Offset: 0x228c , Size: 4]
	<byte,FString> GrenadeToSlotIndexDict;//[Offset: 0x2290 , Size: 60]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22cc , Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x22d0 , Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x22e8 , Size: 12]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f4 , Size: 1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x22f8 , Size: 12]
	CameraComponent*[] Cameras;//[Offset: 0x2304 , Size: 12]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x2310 , Size: 4]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2314 , Size: 1]
	<int,FName> GrenadeIDToNameDict;//[Offset: 0x2318 , Size: 60]
	int[] GrenadeIDsOrder;//[Offset: 0x2354 , Size: 12]
	float ElapseTime;//[Offset: 0x2360 , Size: 4]
	float SwimRotateX;//[Offset: 0x2364 , Size: 4]
	SpringArmComponent* NewVar;//[Offset: 0x2368 , Size: 4]
	byte CurPoseState;//[Offset: 0x236c , Size: 1]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x2370 , Size: 60]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x23ac , Size: 4]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x23b0 , Size: 4]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x23b4 , Size: 4]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x23b8 , Size: 4]
	enum[] DisallowedWateringStates;//[Offset: 0x23bc , Size: 12]
	delegate OnCakePlacement;//[Offset: 0x23c8 , Size: 12]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x23d4 , Size: 4]
	Actor* PaintDecalDetector;//[Offset: 0x23d8 , Size: 4]

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x308 , Size: 12]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x314 , Size: 12]
	float RTCacheLifeTime;//[Offset: 0x320 , Size: 4]
	int MaxRTCacheCount;//[Offset: 0x324 , Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x328 , Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x32c , Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x330 , Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x1355ac8
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x1355a50
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x1355910
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x1355800
	static DecalBakingActorMgr* GetInstance();// 0x13557d8
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x13556d0
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x13555f4
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x1355530
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x1355430
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x1355300
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x1355160
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x1354f70

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x2c8 , Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x2cc , Size: 12]
	void SetMaxDecalProcessPerFame(int InValue);// 0x1429a88
	int GetMaxDecalProcessPerFame();// 0x139e8dc
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x2cdc9fc
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x2cdc984
	void CancelDecalBakingRequest(int RequestID);// 0x2cdc90c
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x2cdc894
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x2cdc658
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x2cdc41c

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4 , Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc , Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0 , Size: 1]
	FString PlayerUID;//[Offset: 0x4 , Size: 12]
	int WeaponAvatarID;//[Offset: 0x10 , Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14 , Size: 4]
	float LastActiveTime;//[Offset: 0x18 , Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0 , Size: 4]
	LinearColor Color;//[Offset: 0x4 , Size: 16]
	Vector2D Scale;//[Offset: 0x14 , Size: 8]
	Vector2D Offset;//[Offset: 0x1c , Size: 8]
	float Rotation;//[Offset: 0x24 , Size: 4]
	enum Direction;//[Offset: 0x28 , Size: 1]
	LinearColor UVClip;//[Offset: 0x2c , Size: 16]
	LinearColor UVInfo;//[Offset: 0x3c , Size: 16]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x238 , Size: 4]
	Vector DecalSize;//[Offset: 0x23c , Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x250 , Size: 16]
	LinearColor TintColor;//[Offset: 0x260 , Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x270 , Size: 16]
	float CropRotation;//[Offset: 0x280 , Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284 , Size: 1]
	LinearColor GetUVScaleBias();// 0x2cdd198
	BoxSphereBounds GetDecalBounds();// 0x2cdd144
	LinearColor GetCropUVScaleBias();// 0x2cdd124

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x17265bc
	static GameBackendHUD* GetInstance();// 0x1726594
	GameFrontendHUD* GetFirstGameFrontendHUD();// 0x172656c

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c , Size: 4]
	ObjectCollectorManager* CollectorManager;//[Offset: 0x20 , Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x24 , Size: 12]
	BackendUtils* Utils;//[Offset: 0x30 , Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x34 , Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x40 , Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x2eacd40
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x2eaccc0

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x1726278
	UAELoadedClassManager* GetLoadedClassManager();// 0x1726250

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c , Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28 , Size: 12]
	UAEDataTable*[] TableObjList;//[Offset: 0x70 , Size: 12]
	World* CurWorld;//[Offset: 0x7c , Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x80 , Size: 60]
	void ReleaseTable(FName tableName);// 0x15c3e70
	UAEDataTable* GetTablePtr(FName tableName);// 0x15c3df0
	static FString GetStringFromTable(FString Table, FString Row, FString Tag);// 0x15c3bac
	static int GetIntFromTable(FString Table, FString Row, FString Tag);// 0x15c39e8
	static float GetFloatFromTable(FString Table, FString Row, FString Tag);// 0x15c3820
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x15c3764
	static bool GetBoolFromTable(FString Table, FString Row, FString Tag);// 0x15c35a0

--------------------------------
Class: UAELoadedClassManager.Object
	class Object[] m_CachClass;//[Offset: 0x1c , Size: 12]
	<uint32,class Object> m_CookClass;//[Offset: 0x28 , Size: 60]
	<int,UAEResList> m_ResTableData;//[Offset: 0x6c , Size: 60]
	<FString,BPTable*> BPTableMap;//[Offset: 0xa8 , Size: 60]
	FString LoadedClassManagerClassName;//[Offset: 0xe4 , Size: 12]
	bool IsDedicatedServer();// 0x15c1674
	void InitTableData();// 0x13118ec
	void InitBPTableMap();// 0x1bf56d0
	void Init();// 0x15c1660
	FString GetWrapperPath(FString BPTableName, int ID);// 0x15c143c
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x15c1298
	FString GetPath(FString BPTableName, int ID, bool IsLobby);// 0x15c1024
	Object* GetObject(FString BPTableName, int ID, Object* Outer);// 0x15c0e3c
	class Object GetClass(FString BPTableName, int ID, bool IsLobby);// 0x15c0c48
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate, bool AtLeastNextFrame);// 0x15c0a18
	static UAELoadedClassManager* Get();// 0x15c09f0
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x15c0890
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x15c07ec
	void ClearAllData();// 0x15c07d8

--------------------------------
Class: UAEResList
	int ResIndex;//[Offset: 0x0 , Size: 4]
	FString ResPathName;//[Offset: 0x4 , Size: 12]
	bool ServerNeedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool ClientNeedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool iEditorLoadType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	bool BuildClientNeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13 , Size: 1]
	bool BuildServerNeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	bool IsResident;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15 , Size: 1]

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c , Size: 12]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28 , Size: 60]
	FString GetWrapperPath(int ID);// 0x15c0264
	class Object GetWrapperClass(int ID);// 0x15c01e4
	FString GetPath(int ID);// 0x15c00dc
	Object* GetObject(int ID, Object* Outer);// 0x15c0018
	class Object GetClass(int ID);// 0x15bff98

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0 , Size: 4]
	FString Name;//[Offset: 0x4 , Size: 12]
	FString Path;//[Offset: 0x10 , Size: 12]
	FString WrapperPath;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	FString CSVTableRelativeDir;//[Offset: 0x144 , Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0x150 , Size: 60]
	<FString,bool> LanguageMap;//[Offset: 0x18c , Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8 , Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x1cc , Size: 4]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	BugReporter* BugReporter;//[Offset: 0x1d4 , Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x1d8 , Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x1e4 , Size: 4]
	Translator* Translator;//[Offset: 0x1e8 , Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x1ec , Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x1f0 , Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc , Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd , Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe , Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff , Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200 , Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201 , Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202 , Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203 , Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x208 , Size: 4]
	int ODPaksPoolSize;//[Offset: 0x20c , Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x210 , Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x214 , Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218 , Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x240 , Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x258 , Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c , Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x260 , Size: 12]
	float UnrealNetworkConnectingTime;//[Offset: 0x278 , Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x280 , Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x284 , Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x288 , Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x28c , Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x294 , Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x2a0 , Size: 12]
	FString InGameLuaDir;//[Offset: 0x2ac , Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x2b8 , Size: 12]
	FString[] LuaDirList;//[Offset: 0x2c4 , Size: 12]
	FString[] NoGCPackage;//[Offset: 0x2d0 , Size: 12]
	float LuaTickTime;//[Offset: 0x2dc , Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1 , Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x308 , Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x30c , Size: 4]
	TssManager* TssMgr;//[Offset: 0x310 , Size: 4]
	float PingReportInterval;//[Offset: 0x32c , Size: 4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x390 , Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x394 , Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x3a0 , Size: 12]
	FString UserSettingsClassName;//[Offset: 0x3ac , Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x3b8 , Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x3c4 , Size: 12]
	FString CachedSaveGameName;//[Offset: 0x3d0 , Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x3dc , Size: 12]
	class Object* UserSettingsClass;//[Offset: 0x3e8 , Size: 4]
	SaveGame* UserSettings;//[Offset: 0x3ec , Size: 4]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x3f0 , Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x480 , Size: 4]
	int FpsForWindowClient;//[Offset: 0x484 , Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x488 , Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c , Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d , Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e , Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f , Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490 , Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491 , Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492 , Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493 , Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494 , Size: 1]
	int GDPRUserType;//[Offset: 0x498 , Size: 4]
	float fLaggingFPSDiffThreshold;//[Offset: 0x49c , Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x4a0 , Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x4a4 , Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x4a8 , Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x4ac , Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x4b0 , Size: 4]
	float fFPSReportInterval;//[Offset: 0x4b4 , Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4 , Size: 1]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4 , Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5 , Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d7 , Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c , Size: 1]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x560 , Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c , Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d , Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x570 , Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x574 , Size: 4]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x172b3a4
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x172b24c
	void TickUdpCollector(float DeltaTime);// 0x172b1d4
	void StatisVisibilityWidget(Widget* Widget);// 0x138c394
	bool StartGrayUpdate();// 0x172b1ac
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x172b198
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x172b184
	void ShutdownUnrealNetwork();// 0x13dc394
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x172afd8
	void RetryDownload();// 0x172afc4
	void RetryCDNDownload();// 0x172afb0
	void ResetUserSettings();// 0x172af9c
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x172add4
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x172add4
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x172add4
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x172add4
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x172ad30
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x172ab68
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x172aa60
	void OnWebviewActionNotify(FString URL);// 0x172a908
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x172a83c
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x172a64c
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x172a540
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x172a430
	void OnNotUpdateFinished();// 0x172a41c
	void OnNearByPersonInfoNotify();// 0x12dedb4
	void OnLoginFlowNotify(int _Flow, int _Param, FString extraData);// 0x172a234
	void OnLocationInfoNotify(out const LocationInfoWrapper locationInfo);// 0x172a1b0
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x172a0f4
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x172a034
	void OnGetCountryNoNotify(int country);// 0x1729fbc
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x1729e78
	void OnGameMasterEvent(FString EventName, int Ret);// 0x1729cdc
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x1729bd4
	void MakeToSuppotIphoneXNotch(PanelSlot* PanelSlot);// 0x1729b5c
	void LuaDoString(FString LuaString);// 0x1729a98
	bool IsWindowOB();// 0x144d378
	bool IsInstallPlatform(FString platform);// 0x1729938
	void HandleCultureChanged();// 0x12dedb4
	SaveGame* GetUserSettings();// 0x1315088
	GDolphinUpdater* GetUpdater();// 0x172991c
	Translator* GetTranslator();// 0x1729900
	GCPufferDownloader* GetPufferDownloader();// 0x17298e4
	LuaStateWrapper* GetLuaStateWrapper();// 0x17298bc
	LuaEventBridge* GetLuaEventBridge();// 0x1729894
	GVoiceInterface* GetGVoiceInterface();// 0x1729864
	GameStateBase* GetGameState();// 0x172983c
	int GetDetailNetInfoFromGCloud();// 0x1302320
	SaveGame* GetCustomSetting(FString InSlotName);// 0x1729778
	Object* GetClientNetObj();// 0x1729750
	BugReporter* GetBugReporter();// 0x1729728
	FString GetBattleIDHexStr();// 0x1729668
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x1729640
	void FinishModifyUserSettings();// 0x172962c
	void EnableFPSAndMemoryLog(bool bEnable);// 0x17295ac
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x1729524
	void DispatchConfirmMisKill(FString KillerName);// 0x1729468
	void ClearUIElemSettings();// 0x1729454
	void CheckLocalizationLanguage();// 0x1729440
	void CallGlobalScriptFunction(FString InFunctionName);// 0x172937c
	void BeginModifyUserSettings();// 0x1729368
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x1729268

--------------------------------
Class: GVoiceInterface.Object
	FString ServerInfo;//[Offset: 0x64 , Size: 12]
	uint32 openGvoiceLog;//[Offset: 0x70 , Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x80 , Size: 4]
	void UploadRecordFile();// 0x1735d7c
	void TestMic();// 0x1735d68
	bool TeamSpeakerEnable();// 0x1735d4c
	bool TeamMicphoneEnable();// 0x1735d30
	void SwitchMicphoneWhenCorpsMode();// 0x1735d1c
	void StopRecord();// 0x1735d08
	void StopPlayRecordFile();// 0x1735cf4
	void StopInterphone();// 0x1735ce0
	void StartRecord();// 0x1735ccc
	void StartInterphone();// 0x1735cb8
	void SpeechToText();// 0x1735ca4
	void ShowOpenSpeakerAtFirstMsg();// 0x1735c90
	void ShowCorpsModeCannotUseLBSVoice();// 0x1735c7c
	void SetVoiceMode(int Type);// 0x1735c04
	void SetSpeakerVolum(float Value);// 0x1735b8c
	void SetSpeakerStatus(bool Flag);// 0x1735b0c
	void SetMicphoneVolum(float Value);// 0x1735a94
	void SetMicphoneStatus(bool Flag);// 0x1735a14
	void SetLbsVoiceRadius(float Radius);// 0x17359a0
	void SetLbsRoomEnableStatus(bool Flag);// 0x1735920
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x17358a8
	void SetCurrentDownloadFieldID(FString filedId);// 0x173574c
	void SetAllVoiceStatus(bool Flag);// 0x17356cc
	void ResetWhenLogOut();// 0x17356b8
	void ReactiveLbsStatus();// 0x17356a4
	void QuitRoom();// 0x1735690
	void PlayRecordFile();// 0x173567c
	void OpenTeamSpeakerOnly(bool showTips);// 0x17355fc
	int OpenTeamMicphoneOnly(bool showTips);// 0x1735574
	int OpenTeamInterphone();// 0x173554c
	int OpenSpeaker();// 0x1735524
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x1735510
	int OpenMic();// 0x17354e8
	void OpenIngameSpeaker();// 0x17354d4
	int OpenIngameMicphone();// 0x17354ac
	void OpenAllSpeaker(bool showTips);// 0x173542c
	int OpenAllMicphone(bool showTips);// 0x17353a4
	int OpenAllInterphone();// 0x173537c
	void OnRoomTypeChanged(FString itemtext);// 0x13afd9c
	bool LbsSpeakerEnable();// 0x1735360
	bool LbsMicphoneEnable();// 0x1735344
	void JoinRoom(FString room, FString userID);// 0x17350d4
	void JoinLbsRoom(FString lbsRoom, FString userID);// 0x1734e64
	bool IsTeamInterphoneOpenned();// 0x1734e48
	bool IsLbsInterphoneOpenned();// 0x1734e2c
	bool IsInterphoneMode();// 0x1734df0
	void InitGVoiceComponent(FString userID);// 0x1734c98
	bool HaveTeamRoom();// 0x1734c70
	bool HaveLbsRoom();// 0x1734c48
	float GetVoiceLength();// 0x1734c20
	void GetAuthKey();// 0x1734c0c
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x1734b48
	void DownloadRecordFile();// 0x1734b34
	void CloseSpeaker();// 0x1734b20
	void CloseMic();// 0x1734b0c
	void CloseIngameSpeaker();// 0x1734af8
	void CloseIngameMicphone();// 0x1734ae4
	void CloseAllSpeaker(bool showTips);// 0x1734a64
	void CloseAllMicphone(bool showTips);// 0x17349e4
	void CheckAndEnableRoomSpeaker();// 0x17349d0
	void ChatShowAgeRestrictionMsgInLobby();// 0x17349bc
	void ChatShowAgeRestrictionMsgInFighting();// 0x17349a8
	void ChatShowAgeRestrictionMsgInChat();// 0x1734994
	void ChatRequestPrivacyInSetting();// 0x1734980
	void ChatRequestPrivacyInGame();// 0x173496c

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString imagepath, float X, float Y, float Z);// 0x171dd38
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x171d954
	void ReadZipLog(FString Filename);// 0x171d7fc
	byte[] CompressLog(bool pullAllLog);// 0x171d6ec

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x4c , Size: 60]
	FString AppStoreUrl;//[Offset: 0x88 , Size: 12]
	FString GooglePlayUrl;//[Offset: 0x94 , Size: 12]
	FString SamSungPlayUrl;//[Offset: 0xa0 , Size: 12]
	FString AmazonPlayUrl;//[Offset: 0xac , Size: 12]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8 , Size: 1]
	FString UpdateUrl;//[Offset: 0xbc , Size: 12]
	FString VersionUrl;//[Offset: 0xc8 , Size: 12]
	FString CDNVersionUrl;//[Offset: 0xd4 , Size: 12]
	FString PreUpdateUrl;//[Offset: 0xe0 , Size: 12]
	FString PreVersionUrl;//[Offset: 0xec , Size: 12]
	FString PreCDNVersionUrl;//[Offset: 0xf8 , Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106 , Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x108 , Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x10c , Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x110 , Size: 4]
	uint32 UpdateChannel;//[Offset: 0x114 , Size: 4]
	uint32 UpdateChannelIOS;//[Offset: 0x118 , Size: 4]
	uint32 UpdateChannelAndroidGoogle;//[Offset: 0x11c , Size: 4]
	uint32 UpdateChannelAndroidSamSung;//[Offset: 0x120 , Size: 4]
	uint32 UpdateChannelAndroidMultiChannel;//[Offset: 0x124 , Size: 4]
	uint32 UpdateChannelAndroidThirdPartyPayment;//[Offset: 0x128 , Size: 4]
	uint32 UpdateChannelIOS_PVRTC;//[Offset: 0x12c , Size: 4]
	uint32 UpdateChannelIOS_PVRTC_Shipping;//[Offset: 0x130 , Size: 4]
	bool PreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134 , Size: 1]
	FString UpdateInfoPath;//[Offset: 0x138 , Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144 , Size: 1]
	void StartAppUpdate();// 0x172da6c
	void SetEnableCDNGetVersion(bool Enable);// 0x172d9ec
	void OnDolphinBGDownloadDone();// 0x12dedb4
	bool IsUpdating();// 0x172d9c4
	bool IsGrayUpdate();// 0x172d99c
	bool IsExamine();// 0x144d378
	void Install();// 0x172d988
	int GetCurStage(out float Percent, out int GetCurVal, out int GetMaxVal);// 0x172d848
	uint32 GetChannelID();// 0x172d820
	void FinishUpdate();// 0x172d80c
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x133a074
	bool EnableCDNGetVersion();// 0x172d7e4
	void ContinueUpdate();// 0x172d7d0
	void CancelUpdate();// 0x172d7bc

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c , Size: 12]
	FString StoredAccessToken;//[Offset: 0x28 , Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38 , Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48 , Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58 , Size: 16]
	void TranslateV2(int Channel, int ID, FString Text);// 0x1738b34
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x17387f4
	void OnTranslateV2(bool Success, FString Data);// 0x17386e8
	void OnTranslate__DelegateSignature(bool isSuccess, FString LanguageFrom, FString Translation);// 0x1bf56d0
	void OnTranslate(bool Success, FString Data);// 0x17385dc
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x17384d0
	void OnGetAccessToken__DelegateSignature(bool isSuccess, FString Token);// 0x1bf56d0
	void OnGetAccessToken(bool Success, FString Data);// 0x17383c4
	void OnDetectV2(bool Success, FString Data);// 0x17382b8
	void OnDetect__DelegateSignature(bool isSuccess, FString from, FString to);// 0x1bf56d0
	void OnDetect(bool Success, FString Data);// 0x17381ac
	bool HasTranslating();// 0x1738184
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x1737df0
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x1737ab0

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180 , Size: 1]
	bool PreDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181 , Size: 1]
	FString PreServerURL;//[Offset: 0x184 , Size: 12]
	FString ServerURL;//[Offset: 0x190 , Size: 12]
	uint32 ProductID;//[Offset: 0x19c , Size: 4]
	uint32 ProductID_IOS;//[Offset: 0x1a0 , Size: 4]
	uint32 ProductID_IOS_PVRTC;//[Offset: 0x1a4 , Size: 4]
	uint32 ProductID_IOS_PVRTC_Shipping;//[Offset: 0x1a8 , Size: 4]
	uint32 ProductID_Android_Google;//[Offset: 0x1ac , Size: 4]
	uint32 ProductID_Android_SamSung;//[Offset: 0x1b0 , Size: 4]
	uint32 ProductID_Android_MultiChannel;//[Offset: 0x1b4 , Size: 4]
	uint32 ProductID_Android_ThirdPartyPayment;//[Offset: 0x1b8 , Size: 4]
	FString DownloadDir;//[Offset: 0x1bc , Size: 12]
	FString PufferTmpDir;//[Offset: 0x1c8 , Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x1d4 , Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x1d8 , Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4 , Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5 , Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6 , Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x1e8 , Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x1f4 , Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8 , Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x1fc , Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x200 , Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x204 , Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x208 , Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x20c , Size: 12]
	float PreFetchODPaks_StartTime;//[Offset: 0x218 , Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x21c , Size: 12]
	bool StopTask(uint64 TaskID);// 0x1731bc4
	int StopMergeBinDiffPak(int outterTaskID);// 0x1731b44
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x1731ac4
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x17318d0
	static int ReturnLocalFiles_LuaState();// 0x13b109c
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x1731720
	bool RemountPakFiles();// 0x17316f8
	FString ReadFile(FString Filename);// 0x1731518
	bool PreFetchPakFiles();// 0x17314f0
	int PreFetchODPakFilesUpdate();// 0x17314c8
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x1731440
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x17313c0
	bool PreFetchODPakFiles(bool Start);// 0x1731338
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x1731198
	int MoveFileTo(FString Filename, FString from, FString to);// 0x1730e08
	int MoveFile(FString from, FString to);// 0x1730b90
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x1730768
	bool IsODPaks(FString FilePath);// 0x1730608
	bool IsODFileExists(FString Path);// 0x1730544
	bool IsInitSuccess();// 0x173051c
	bool IsFileReady(FString FilePath);// 0x17303bc
	bool IsFileExist(FString Filename, FString extension);// 0x1730144
	bool InitializeODPaks();// 0x173011c
	FString GetTempWorkPath();// 0x173005c
	uint32 GetProductID();// 0x1730034
	FString GetODPakName(FString Path);// 0x172fef0
	uint32 GetInitErrcode();// 0x172fec8
	uint32 GetFileSizeCompressed(FString FilePath);// 0x172fd68
	float GetFileSize(FString Filename);// 0x172fc04
	FString GetDownloadPath();// 0x172fb44
	static bool DeleteFile(FString FullPath);// 0x172f9ec
	bool ConvertPreFetchFiles();// 0x172f9c4
	bool ClearUselessODPaks();// 0x172f99c
	bool ClearPreFetchODPaksFiles();// 0x172f974
	bool ClearPreFetchFiles();// 0x172f94c
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x172f760

--------------------------------
Class: LaggingReporter.Object

--------------------------------
Class: CDNUpdate.Object
	void StartUpdateApp();// 0x17248f8
	void StartAppUpdate(bool StartGrayUpdate);// 0x1724878
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x17247ac
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x17246e0
	bool IsUpdating();// 0x17246b8
	bool IsGrayUpdate();// 0x1724690
	int GetCurStage(out float Percent, out int GetCurVal, out int GetMaxVal);// 0x1724550
	void FinishUpdate();// 0x172453c
	void ContinueUpdate();// 0x1724528
	void CancelUpdate();// 0x1724514

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0 , Size: 1]
	FString FileSavePath;//[Offset: 0x4 , Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int BytesSent;//[Offset: 0x14 , Size: 4]
	int BytesReceived;//[Offset: 0x18 , Size: 4]
	int ContentType;//[Offset: 0x1c , Size: 4]
	int ResponseCode;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c , Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28 , Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64 , Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0 , Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc , Size: 12]
	Property*[] Params;//[Offset: 0xe8 , Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventID, int Number);// 0x15b32c0
	LuaTemBPData*[] GetCurrentParam();// 0x15b3258
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x15b31d0
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventID);// 0x15b3038

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0 , Size: 8]
	FString FunctionName;//[Offset: 0x8 , Size: 12]
	FString EventType;//[Offset: 0x14 , Size: 12]
	FString EventID;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c , Size: 8]
	FString LuaManagerName;//[Offset: 0x24 , Size: 12]
	FString ShowUI;//[Offset: 0x30 , Size: 12]
	FString HideUI;//[Offset: 0x3c , Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c , Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x173d3c8
	void AddSystem(const FString SystemName, const FString BPPath);// 0x173d158

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x20 , Size: 12]
	void Init();// 0x1bf56d0

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c , Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x28 , Size: 12]
	static int SendSkdData_LuaState();// 0x13b109c
	static int SendEigeninfoData_LuaState();// 0x13b109c
	static int OnRecvData_LuaState();// 0x13b109c
	static int GetUserTag4Lua_LuaState();// 0x13b109c
	static int GetDeviceFeature_LuaState();// 0x13b109c
	static int EigenArrayObfuscationVerify_LuaState();// 0x13b109c

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0 , Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c , Size: 12]
	delegate OnFail;//[Offset: 0x28 , Size: 12]
	FString FileURL;//[Offset: 0x34 , Size: 12]
	FString FileSavePath;//[Offset: 0x40 , Size: 12]
	FString UrlHash;//[Offset: 0x4c , Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59 , Size: 1]
	void Start(FString URL);// 0x1739378
	static ImageDownloader* MakeDownloaderInGame();// 0x1739350
	static ImageDownloader* MakeDownloader();// 0x1739328
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x17391c8
	void Cancel();// 0x17391b4

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44 , Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90 , Size: 12]
	void TickUDPPing(float DeltaTime);// 0x176a1d0
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x1769ed4
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x1769cf4
	void OnPingServerResultDelegate__DelegateSignature(FString address, bool isSuccess, float Time);// 0x1bf56d0
	bool IsChooingZoneAccess();// 0x1769ccc
	bool isAllZoneHasPingValue();// 0x1769ca4
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x1769b14
	float GetZoneServerDelay(FString ServerAddress);// 0x17699b0
	int GetMinDealyAddress();// 0x1769988
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x17697e8

--------------------------------
Class: PingServerInfo

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0 , Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4 , Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c , Size: 60]
	void SetMaxTaskNum(int Num);// 0x171b69c
	void RunNextTask();// 0x171b688
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x171b51c
	void ClearOneTask(FString ObjectPath);// 0x171b3c4
	void ClearAllTask();// 0x171b3b0
	void AddTaskSync(FString ObjectPath);// 0x171b258
	void AddTask(FString ObjectPath, int LoadPriority);// 0x171b0bc

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0 , Size: 4]
	FString Reason;//[Offset: 0x4 , Size: 12]
	int Extend;//[Offset: 0x10 , Size: 4]
	int Extend2;//[Offset: 0x14 , Size: 4]
	FString MsgData;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0 , Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4 , Size: 60]

--------------------------------
Class: LocationInfoWrapper
	int ErrorCode;//[Offset: 0x0 , Size: 4]
	double Longitude;//[Offset: 0x8 , Size: 8]
	double Latitude;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0 , Size: 4]
	int Flag;//[Offset: 0x4 , Size: 4]
	int ErrorCode;//[Offset: 0x8 , Size: 4]
	int platform;//[Offset: 0xc , Size: 4]
	FString Desc;//[Offset: 0x10 , Size: 12]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c , Size: 36]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0 , Size: 12]
	FString MemberNum;//[Offset: 0xc , Size: 12]
	FString ChatRoomURL;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0 , Size: 1]
	FString FileSavePath;//[Offset: 0x4 , Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int BytesSent;//[Offset: 0x14 , Size: 4]
	int BytesReceived;//[Offset: 0x18 , Size: 4]
	int ContentType;//[Offset: 0x1c , Size: 4]
	int ResponseCode;//[Offset: 0x20 , Size: 4]
	FString StringContent;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20 , Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28 , Size: 24]
	Font* SmallFont;//[Offset: 0x5c , Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60 , Size: 24]
	Font* MediumFont;//[Offset: 0x78 , Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80 , Size: 24]
	Font* LargeFont;//[Offset: 0x98 , Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0 , Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8 , Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0 , Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8 , Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xe4 , Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf0 , Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0xf8 , Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110 , Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118 , Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130 , Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138 , Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150 , Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158 , Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170 , Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x188 , Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x190 , Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1a8 , Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1ac , Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b0 , Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1c8 , Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e0 , Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1e8 , Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x200 , Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x204 , Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x208 , Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x220 , Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x238 , Size: 24]
	Object* GameSingleton;//[Offset: 0x250 , Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x258 , Size: 24]
	AssetManager* AssetManager;//[Offset: 0x270 , Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x274 , Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x278 , Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x290 , Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x298 , Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b0 , Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2b8 , Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d0 , Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2d8 , Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f0 , Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x2f8 , Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x310 , Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x318 , Size: 24]
	Material* WireframeMaterial;//[Offset: 0x330 , Size: 4]
	FString WireframeMaterialName;//[Offset: 0x334 , Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x340 , Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x348 , Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x360 , Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x364 , Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x370 , Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x374 , Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x380 , Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x384 , Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x390 , Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x394 , Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a0 , Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3a4 , Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b0 , Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3b8 , Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d0 , Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3d4 , Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e0 , Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3e4 , Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f0 , Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3f4 , Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x400 , Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x404 , Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x410 , Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x414 , Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x420 , Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x424 , Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x430 , Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x448 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x44c , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x450 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x454 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x458 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x45c , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x460 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x464 , Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x468 , Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x470 , Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x488 , Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x490 , Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4a8 , Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b0 , Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4c8 , Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d0 , Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x4e8 , Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x4f8 , Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x504 , Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x510 , Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x51c , Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x528 , Size: 12]
	LinearColor[] VertexCountColors;//[Offset: 0x534 , Size: 12]
	LinearColor[] CPUInstancingColors;//[Offset: 0x540 , Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x54c , Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x558 , Size: 12]
	CullingSizeLimitInMaps[] CullingSizeLimitInMaps;//[Offset: 0x564 , Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x570 , Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x574 , Size: 4]
	float MinLightMapDensity;//[Offset: 0x578 , Size: 4]
	float IdealLightMapDensity;//[Offset: 0x57c , Size: 4]
	float MaxLightMapDensity;//[Offset: 0x580 , Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x584 , Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x588 , Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x58c , Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x590 , Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5a0 , Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x5b0 , Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x5bc , Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x5c0 , Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x5d8 , Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x5e4 , Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x5f0 , Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x5fc , Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x608 , Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x610 , Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x628 , Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x630 , Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x648 , Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x650 , Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x668 , Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x670 , Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x68c , Size: 4]
	FString[] DeferredCommands;//[Offset: 0x690 , Size: 12]
	int TickCycles;//[Offset: 0x69c , Size: 4]
	int GameCycles;//[Offset: 0x6a0 , Size: 4]
	int ClientCycles;//[Offset: 0x6a4 , Size: 4]
	float NearClipPlane;//[Offset: 0x6a8 , Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ac , Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ac , Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ac , Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x6b0 , Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b4 , Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b4 , Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b4 , Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6b4 , Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6b4 , Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6b4 , Size: 1]
	float FixedFrameRate;//[Offset: 0x6b8 , Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x6bc , Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6cc , Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x6d0 , Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d4 , Size: 1]
	Color C_WorldBox;//[Offset: 0x6d8 , Size: 4]
	Color C_BrushWire;//[Offset: 0x6dc , Size: 4]
	Color C_AddWire;//[Offset: 0x6e0 , Size: 4]
	Color C_SubtractWire;//[Offset: 0x6e4 , Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x6e8 , Size: 4]
	Color C_NonSolidWire;//[Offset: 0x6ec , Size: 4]
	Color C_WireBackground;//[Offset: 0x6f0 , Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x6f4 , Size: 4]
	Color C_VolumeCollision;//[Offset: 0x6f8 , Size: 4]
	Color C_BSPCollision;//[Offset: 0x6fc , Size: 4]
	Color C_OrthoBackground;//[Offset: 0x700 , Size: 4]
	Color C_Volume;//[Offset: 0x704 , Size: 4]
	Color C_BrushShape;//[Offset: 0x708 , Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x70c , Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x710 , Size: 12]
	byte TransitionType;//[Offset: 0x71c , Size: 1]
	FString TransitionDescription;//[Offset: 0x720 , Size: 12]
	FString TransitionGameMode;//[Offset: 0x72c , Size: 12]
	float MeshLODRange;//[Offset: 0x738 , Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73c , Size: 1]
	float CameraRotationThreshold;//[Offset: 0x740 , Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x744 , Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x748 , Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x74c , Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750 , Size: 1]
	int MaxParticleResize;//[Offset: 0x754 , Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x758 , Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x75c , Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x768 , Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x784 , Size: 4]
	float DisplayGamma;//[Offset: 0x788 , Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x78c , Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x790 , Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x794 , Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x7a4 , Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x7b4 , Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x7c4 , Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x7d4 , Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4 , Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e5 , Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e5 , Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e5 , Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e5 , Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x7e8 , Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x7f0 , Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f4 , Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x7f8 , Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x810 , Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x814 , Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x818 , Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x81c , Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x820 , Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9a4 , Size: 12]
	FString[] ServerActors;//[Offset: 0x9b0 , Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9bc , Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c8 , Size: 1]
	int NextWorldContextHandle;//[Offset: 0x9d8 , Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60 , Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64 , Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68 , Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c , Size: 4]
	int WindowPosX;//[Offset: 0x70 , Size: 4]
	int WindowPosY;//[Offset: 0x74 , Size: 4]
	int FullscreenMode;//[Offset: 0x78 , Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c , Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80 , Size: 4]
	uint32 Version;//[Offset: 0x84 , Size: 4]
	float FrameRateLimit;//[Offset: 0x88 , Size: 4]
	int DesiredScreenWidth;//[Offset: 0x90 , Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94 , Size: 1]
	int DesiredScreenHeight;//[Offset: 0x98 , Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0x9c , Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa0 , Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa4 , Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xa8 , Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xac , Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xb8 , Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc4 , Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xcc , Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd0 , Size: 12]
	void ValidateSettings();// 0x13dc3b0
	bool SupportsHDRDisplayOutput();// 0x2d01c3c
	void SetVSyncEnabled(bool bEnable);// 0x2d01bbc
	void SetVisualEffectQuality(int Value);// 0x1741180
	void SetViewDistanceQuality(int Value);// 0x2d01b44
	void SetToDefaults();// 0x12f53a4
	void SetTextureQuality(int Value);// 0x2d01acc
	void SetShadowQuality(int Value);// 0x2d01a54
	void SetScreenResolution(IntPoint Resolution);// 0x2d019e4
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x2d0196c
	void SetResolutionScaleValue(int NewScaleValue);// 0x2d018f4
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x2d0187c
	void SetPostProcessingQuality(int Value);// 0x2d01804
	void SetOverallScalabilityLevel(int Value);// 0x12e29b0
	void SetFullscreenMode(byte InFullscreenMode);// 0x2d0178c
	void SetFrameRateLimit(float NewLimit);// 0x2d01714
	void SetFoliageQuality(int Value);// 0x2d0169c
	void SetBenchmarkFallbackValues();// 0x2d01688
	void SetAntiAliasingQuality(int Value);// 0x2d01610
	void SaveSettings();// 0x15bb30c
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x2d01508
	void RevertVideoMode();// 0x2d014f4
	void ResetToCurrentSettings();// 0x13861d4
	void LoadSettings(bool bForceReload);// 0x2cc5f84
	bool IsVSyncEnabled();// 0x2d014cc
	bool IsVSyncDirty();// 0x2d014a4
	bool IsScreenResolutionDirty();// 0x2d0147c
	bool IsHDREnabled();// 0x2d01454
	bool IsFullscreenModeDirty();// 0x2d0142c
	bool IsDirty();// 0x13880f8
	int GetVisualEffectQuality();// 0x2d01404
	int GetViewDistanceQuality();// 0x12f4cf8
	int GetTextureQuality();// 0x2d013dc
	int GetShadowQuality();// 0x2d013b4
	IntPoint GetScreenResolution();// 0x2d0136c
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x2d011d8
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x2d01044
	float GetRecommendedResolutionScale();// 0x1315380
	byte GetPreferredFullscreenMode();// 0x2d0101c
	int GetPostProcessingQuality();// 0x2d00ff4
	int GetOverallScalabilityLevel();// 0x2d00fcc
	IntPoint GetLastConfirmedScreenResolution();// 0x2d00f84
	byte GetLastConfirmedFullscreenMode();// 0x2d00f5c
	static GameUserSettings* GetGameUserSettings();// 0x2d00f34
	byte GetFullscreenMode();// 0x2d00f0c
	float GetFrameRateLimit();// 0x2d00ee4
	int GetFoliageQuality();// 0x2d00ebc
	IntPoint GetDesktopResolution();// 0x2d00e74
	static IntPoint GetDefaultWindowPosition();// 0x2d00e34
	static byte GetDefaultWindowMode();// 0x147bbd8
	float GetDefaultResolutionScale();// 0x1315350
	static IntPoint GetDefaultResolution();// 0x2d00df4
	int GetCurrentHDRDisplayNits();// 0x2d00dcc
	int GetAntiAliasingQuality();// 0x2d00da4
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x2d00cdc
	void ConfirmVideoMode();// 0x2d00cc8
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x2d00c40
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x2d00bc0
	void ApplyNonResolutionSettings();// 0x1333500
	void ApplyHardwareBenchmarkResults();// 0x15178dc

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1bc , Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8 , Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9 , Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca , Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb , Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc , Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd , Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce , Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf , Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1 , Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d4 , Size: 4]

--------------------------------
Class: CullingSizeLimitInMaps
	FString MapName;//[Offset: 0x0 , Size: 12]
	CullingSizeLimitItem[] Limits;//[Offset: 0xc , Size: 12]

--------------------------------
Class: CullingSizeLimitItem
	FString LODGroup;//[Offset: 0x0 , Size: 12]
	float MinCullingSize;//[Offset: 0xc , Size: 4]
	float MaxCullingSize;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0 , Size: 12]
	StatColorMapEntry[] ColorMap;//[Offset: 0xc , Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18 , Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0 , Size: 4]
	Color Out;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0 , Size: 8]
	FName NewGameName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0 , Size: 8]
	FName OldClassName;//[Offset: 0x8 , Size: 8]
	FName NewClassName;//[Offset: 0x10 , Size: 8]
	FName OldSubobjName;//[Offset: 0x18 , Size: 8]
	FName NewSubobjName;//[Offset: 0x20 , Size: 8]
	FName NewClassClass;//[Offset: 0x28 , Size: 8]
	FName NewClassPackage;//[Offset: 0x30 , Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0 , Size: 12]
	FString NewPluginName;//[Offset: 0xc , Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0 , Size: 8]
	FName NewStructName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	Rotator Rotation;//[Offset: 0xc , Size: 12]
	FString Comment;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0 , Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4 , Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8 , Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc , Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10 , Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14 , Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0 , Size: 8]
	FName DriverClassName;//[Offset: 0x8 , Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: ObjectCollectorManager.Object
	<class Object,Object*> Collectors;//[Offset: 0x1c , Size: 60]
	void UnRegisterCollector(class Object Class);// 0x2d8c93c
	bool UnRegister(Object* Object);// 0x2d8c8bc
	void Tick(float DeltaSeconds);// 0x2d8c844
	void RegisterCollector(class Object Class, Object* Object);// 0x2d8c788
	bool Register(Object* Object);// 0x2d8c708
	static void Initialize();// 0x2d8c6f4
	static ObjectCollectorManager* GetInstance();// 0x2d8c6cc
	void BeginPlay();// 0x12dedb4

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	int CrossHairColor;//[Offset: 0x20 , Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27 , Size: 1]
	int LeftHandFire;//[Offset: 0x28 , Size: 4]
	int Gyroscope;//[Offset: 0x2c , Size: 4]
	int ArtQuality;//[Offset: 0x30 , Size: 4]
	float ViewPercentage;//[Offset: 0x34 , Size: 4]
	int FireMode;//[Offset: 0x38 , Size: 4]
	int VehicleControlMode;//[Offset: 0x3c , Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]
	int CameraLensSensibility;//[Offset: 0x44 , Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48 , Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c , Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50 , Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54 , Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58 , Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c , Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60 , Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64 , Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68 , Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c , Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70 , Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74 , Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78 , Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c , Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80 , Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84 , Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88 , Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	float MainVolumValue;//[Offset: 0x90 , Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94 , Size: 1]
	float EffectVolumValue;//[Offset: 0x98 , Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]
	float UIVolumValue;//[Offset: 0xa0 , Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float BGMVolumValue;//[Offset: 0xa8 , Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	int VoiceChannel;//[Offset: 0xb0 , Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8 , Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	float SpeakerVolumValue;//[Offset: 0xc0 , Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6 , Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7 , Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9 , Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca , Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb , Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd , Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce , Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf , Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1 , Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3 , Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5 , Size: 1]
	int LimitBandage;//[Offset: 0xd8 , Size: 4]
	int LimitMedical;//[Offset: 0xdc , Size: 4]
	int LimitAnodyne;//[Offset: 0xe0 , Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe4 , Size: 4]
	int LimitAdrenaline;//[Offset: 0xe8 , Size: 4]
	int LimitShouliudan;//[Offset: 0xec , Size: 4]
	int LimitYanwudan;//[Offset: 0xf0 , Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf4 , Size: 4]
	int LimitRanshaodan;//[Offset: 0xf8 , Size: 4]
	int LimitBullet9mm;//[Offset: 0xfc , Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x100 , Size: 4]
	int Limit12koujing;//[Offset: 0x104 , Size: 4]
	int Limit45koujing;//[Offset: 0x108 , Size: 4]
	int Limit300magenandanyao;//[Offset: 0x10c , Size: 4]
	int Limitbolt;//[Offset: 0x110 , Size: 4]
	int LimitBullet5;//[Offset: 0x114 , Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	int FPSLevel;//[Offset: 0x11c , Size: 4]
	int ArtStyle;//[Offset: 0x120 , Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x124 , Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x128 , Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x164 , Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0 , Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1 , Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2 , Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a4 , Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0 , Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1e4 , Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f0 , Size: 12]
	int LRShootMode;//[Offset: 0x1fc , Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200 , Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201 , Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202 , Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x204 , Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x210 , Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c , Size: 1]
	int NewGetActorID;//[Offset: 0x220 , Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224 , Size: 1]
	float 3DTouchValue;//[Offset: 0x228 , Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c , Size: 1]
	int ShotGunShootMode;//[Offset: 0x230 , Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x234 , Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x238 , Size: 4]
	float VehicleEye;//[Offset: 0x23c , Size: 4]
	float ParachuteEye;//[Offset: 0x240 , Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x244 , Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x250 , Size: 4]
	int DrivingViewMode;//[Offset: 0x254 , Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258 , Size: 1]
	int FpViewValue;//[Offset: 0x25c , Size: 4]
	float CamFpFreeEye;//[Offset: 0x260 , Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x264 , Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x268 , Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x26c , Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271 , Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x274 , Size: 4]
	FString currentLanguage;//[Offset: 0x278 , Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284 , Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285 , Size: 1]
	FString lastViewDayTime;//[Offset: 0x288 , Size: 12]
	FString lastViewWeekTime;//[Offset: 0x294 , Size: 12]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0 , Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1 , Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a4 , Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2a8 , Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2ac , Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b0 , Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b4 , Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2b8 , Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc , Size: 1]
	int RedDotCHColor;//[Offset: 0x2c0 , Size: 4]
	int RedDotCHType;//[Offset: 0x2c4 , Size: 4]
	int HolographicCHColor;//[Offset: 0x2c8 , Size: 4]
	int HolographicCHType;//[Offset: 0x2cc , Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d0 , Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d4 , Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2d8 , Size: 4]
	int Sniper3xCHType;//[Offset: 0x2dc , Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1 , Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e4 , Size: 60]
	int LimitFirstAidKit;//[Offset: 0x320 , Size: 4]
	FString XGLanguageTag;//[Offset: 0x324 , Size: 12]
	FString XGTimezoneTag;//[Offset: 0x330 , Size: 12]
	FString XGPushNightTag;//[Offset: 0x33c , Size: 12]
	FString XGPushDayTag;//[Offset: 0x348 , Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354 , Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x358 , Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x35c , Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x360 , Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364 , Size: 1]
	int LimitSniper2X;//[Offset: 0x368 , Size: 4]
	int LimitSniper3X;//[Offset: 0x36c , Size: 4]
	int LimitSniper4X;//[Offset: 0x370 , Size: 4]
	int LimitSniper6X;//[Offset: 0x374 , Size: 4]
	int LimitSniper8X;//[Offset: 0x378 , Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d , Size: 1]
	int SidewaysMode;//[Offset: 0x380 , Size: 4]
	int OpenMirrorMode;//[Offset: 0x384 , Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388 , Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389 , Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a , Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b , Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c , Size: 1]
	int LobbyStyleID;//[Offset: 0x390 , Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395 , Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396 , Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397 , Size: 1]
	float ScreenLightness;//[Offset: 0x398 , Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c , Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d , Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e , Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f , Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a0 , Size: 12]
	FString RechargePosSave;//[Offset: 0x3ac , Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8 , Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9 , Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba , Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb , Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3bc , Size: 60]
	int LimitZombieGrenade;//[Offset: 0x3f8 , Size: 4]
	bool AutoPickupSwitcher_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc , Size: 1]
	bool DisableAutoPickupSwitcher_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd , Size: 1]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe , Size: 1]
	bool AutoPickupPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff , Size: 1]
	int LimitBandage_pve;//[Offset: 0x400 , Size: 4]
	int LimitMedical_pve;//[Offset: 0x404 , Size: 4]
	int LimitAnodyne_pve;//[Offset: 0x408 , Size: 4]
	int LimitEnergyDrinks_pve;//[Offset: 0x40c , Size: 4]
	int LimitAdrenaline_pve;//[Offset: 0x410 , Size: 4]
	int LimitFirstAidKit_pve;//[Offset: 0x414 , Size: 4]
	int LimitShouliudan_pve;//[Offset: 0x418 , Size: 4]
	int LimitYanwudan_pve;//[Offset: 0x41c , Size: 4]
	int LimitZhenbaodan_pve;//[Offset: 0x420 , Size: 4]
	int LimitRanshaodan_pve;//[Offset: 0x424 , Size: 4]
	int LimitSniper2X_pve;//[Offset: 0x428 , Size: 4]
	int LimitSniper3X_pve;//[Offset: 0x42c , Size: 4]
	int LimitSniper4X_pve;//[Offset: 0x430 , Size: 4]
	int LimitSniper6X_pve;//[Offset: 0x434 , Size: 4]
	int LimitSniper8X_pve;//[Offset: 0x438 , Size: 4]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c , Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x440 , Size: 4]
	int SideMirrorMode;//[Offset: 0x444 , Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x448 , Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454 , Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455 , Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x456 , Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x457 , Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x458 , Size: 4]
	int LimitAntidote;//[Offset: 0x45c , Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460 , Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x464 , Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470 , Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x474 , Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478 , Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479 , Size: 1]
	int FPPFireMode;//[Offset: 0x47c , Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x480 , Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x484 , Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x488 , Size: 4]
	byte TurboLastQuality;//[Offset: 0x48c , Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x490 , Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x4cc , Size: 60]
	bool IsEnableFloatingText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508 , Size: 1]
	int AimAssistLevel;//[Offset: 0x50c , Size: 4]
	bool OpenQuickSwitchItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510 , Size: 1]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511 , Size: 1]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512 , Size: 1]
	bool OpenQuickSwitchSubWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x513 , Size: 1]
	int QuickGunBeginTips_GameCount;//[Offset: 0x514 , Size: 4]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518 , Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519 , Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a , Size: 1]
	bool ChangeSeatAccurate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51b , Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c , Size: 1]
	int[] QuickSignIDList;//[Offset: 0x520 , Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x52c , Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538 , Size: 1]

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xea0 , Size: 4]
	void SetDMIParam(FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void UpdateExhaustFx(ParticleSystemComponent* PSCExhaust, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue);// 0x1bf56d0
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x1bf56d0
	void CreateDMI(int CallFunc_GetMaterialIndex_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void OnSetTailLightValue(float LightValue);// 0x1bf56d0
	void OnEngineStart();// 0x1bf56d0
	void OnEngineStop();// 0x1bf56d0
	void OnBoostingChanged();// 0x1bf56d0
	void VehicleMeshChanged();// 0x1bf56d0
	void BPPlayOverlapDamageCameraShake();// 0x1bf56d0
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, float K2Node_Event_LightValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x1bf56d0
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0xea4 , Size: 4]
	ParticleSystemComponent* PSCExhaust;//[Offset: 0xea8 , Size: 4]
	CameraComponent* Camera;//[Offset: 0xeac , Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0xeb0 , Size: 4]
	ParticleSystemComponent* PSCFire;//[Offset: 0xeb4 , Size: 4]
	ParticleSystemComponent* PSCSmoke;//[Offset: 0xeb8 , Size: 4]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc , Size: 1]
	MaterialInstanceDynamic* DMI;//[Offset: 0xec0 , Size: 4]
	MaterialInstance* VehicleMaterial;//[Offset: 0xec4 , Size: 4]
	FName TailLightParamName;//[Offset: 0xec8 , Size: 8]
	FName FrontLightParamName;//[Offset: 0xed0 , Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0xed8 , Size: 8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0 , Size: 1]
	float LastOverlapShakeTime;//[Offset: 0xee4 , Size: 4]
	float OverlapShakeInterval;//[Offset: 0xee8 , Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeec , Size: 1]

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0 , Size: 4]
	FString GetItemAvatarHandlePath(int ItemID, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetIntFromTable_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x1bf56d0
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetIntFromTable_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void VehicleAvatarEquiped();// 0x1bf56d0
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x1bf56d0
	void VehicleFPPMeshLoaded();// 0x1bf56d0
	void LoadedBrokenMat();// 0x1bf56d0
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess2, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x1bf56d0
	ParticleSystem* CurLightEffect;//[Offset: 0x2e8 , Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x310 , Size: 4]

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0xf8 , Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x104 , Size: 12]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x110 , Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x138 , Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x160 , Size: 12]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x170 , Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x198 , Size: 40]

--------------------------------
Class: BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd00 , Size: 4]
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x1bf56d0
	void UpdateEffects(float CallFunc_GetForwardSpeed_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x1bf56d0
	void OnUpdateEffects();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ExecuteUbergraph_BP_StextraBoatBase(int EntryPoint, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate);// 0x1bf56d0
	BoatAvatarComponent_BP_C* BoatAvatarComponent_BP;//[Offset: 0xd04 , Size: 4]
	ParticleSystemComponent* PSCFire;//[Offset: 0xd08 , Size: 4]
	ParticleSystemComponent* PSCSmoke;//[Offset: 0xd0c , Size: 4]
	ParticleSystemComponent* PS_Water;//[Offset: 0xd10 , Size: 4]
	CameraComponent* Camera;//[Offset: 0xd14 , Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0xd18 , Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c , Size: 1]

--------------------------------
Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0xcf4 , Size: 4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0xcf8 , Size: 4]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x143804c
	Vector GetRotationInputDir();// 0x1437ffc

--------------------------------
Class: STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x124 , Size: 4]
	float StartAccelerationRate;//[Offset: 0x128 , Size: 4]
	float StopAccelerationRate;//[Offset: 0x12c , Size: 4]
	float MaxRotationYawAngle;//[Offset: 0x130 , Size: 4]
	float RotationYawRate;//[Offset: 0x134 , Size: 4]
	float BackwardForceScale;//[Offset: 0x138 , Size: 4]
	float Acceleration;//[Offset: 0x13c , Size: 4]
	float RotationYawAngle;//[Offset: 0x140 , Size: 4]
	FName ApplyForceSocketName;//[Offset: 0x148 , Size: 8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x150 , Size: 4]
	float STThrottleInput;//[Offset: 0x15c , Size: 4]
	float STSteeringInput;//[Offset: 0x160 , Size: 4]
	BuoyancyForceComponent* buoyancyForce;//[Offset: 0x168 , Size: 4]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170 , Size: 1]
	float MinTurnOverDegree;//[Offset: 0x174 , Size: 4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x1476424
	float GetThrottleInput();// 0x1476408
	float GetSteeringInput();// 0x14763ec

--------------------------------
Class: BoatAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0 , Size: 4]
	FString GetItemAvatarHandlePath(int ItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x1bf56d0
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void OnLoaded_5D98FAF940B1D039C5FC33AEF60CE902(Object* Loaded);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ReceiveTick(float DeltaSeconds);// 0x1bf56d0
	void BoatAvatarEquiped();// 0x1bf56d0
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x1bf56d0
	void BoatFPPMeshLoaded();// 0x1bf56d0
	void LoadedBrokenMat();// 0x1bf56d0
	void ExecuteUbergraph_BoatAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, float K2Node_Event_DeltaSeconds, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess2, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x1bf56d0
	ParticleSystem* CurLightEffect;//[Offset: 0x2e8 , Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x310 , Size: 4]

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0 , Size: 12]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc , Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10 , Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14 , Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c , Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24 , Size: 12]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30 , Size: 12]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c , Size: 12]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48 , Size: 12]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54 , Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c , Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60 , Size: 12]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c , Size: 4]
	int SellTokenType_17_B410373F45F6C04F12302FB860FB46DC;//[Offset: 0x70 , Size: 4]
	int SellPrice_18_12D0424A4E19AC2E29A301AB474CBFD8;//[Offset: 0x74 , Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x78 , Size: 12]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x84 , Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x88 , Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x8c , Size: 12]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x98 , Size: 12]
	FString JumpUrl_34_A5DE7C2C406E2C16620017929DDEEA4F;//[Offset: 0xa4 , Size: 12]
	int SourceBookEnable_35_80A540DA4CF5C9DEE5E79E9668E6511C;//[Offset: 0xb0 , Size: 4]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0xb4 , Size: 12]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xc0 , Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xc4 , Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	FString JumpExchangeUrl_41_03C710694C2A928C1AF3C6A9A3F23CE6;//[Offset: 0xcc , Size: 12]
	FString ArmorySimpleDesc_42_27A16200667F9D5C22753FAB004E0C93;//[Offset: 0xd8 , Size: 12]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xe4 , Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xe8 , Size: 4]
	FString ArmoryDesc_45_5ADDC7800942285E5EA7A0880964AD23;//[Offset: 0xec , Size: 12]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xf8 , Size: 12]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0x104 , Size: 12]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0x110 , Size: 12]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0x11c , Size: 12]
	FString DescTag1_50_53531C406D7915D37BEE637E04075E81;//[Offset: 0x128 , Size: 12]
	FString DescTag3_51_53551CC06D7915D57BEE637804075E83;//[Offset: 0x134 , Size: 12]
	FString DescTag2_52_53541C806D7915D47BEE637F04075E82;//[Offset: 0x140 , Size: 12]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0x14c , Size: 4]
	FString RedEmotionSoundPath_57_1D0ECC4066CAAAF35D35519A029C0D28;//[Offset: 0x150 , Size: 12]
	int RedEmotionPlayCD_58_4FB3EE0022A2DB4E4F16119706CC2024;//[Offset: 0x15c , Size: 4]
	FString RedEmotionIcon_59_01AF890033431A2479C4BA460D5728FE;//[Offset: 0x160 , Size: 12]
	int RedEmotionId_60_346EF2004F911664698794F60EAD5724;//[Offset: 0x16c , Size: 4]
	int RedEmotionFlag_61_2E8D25401E2A77DF79CB9A7B0D572CD7;//[Offset: 0x170 , Size: 4]
	int RedEmotionFightId_62_3F02EE804F5D9F9C4F294BF001172D84;//[Offset: 0x174 , Size: 4]
	FString JapanKoreaItemBigIcon_66_2E164AC00FFFA7653C8D19BD0C25A0CE;//[Offset: 0x178 , Size: 12]
	FString JapanKoreaItemSmallIcon_67_034B848076AC1078415670770A5658BE;//[Offset: 0x184 , Size: 12]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0x190 , Size: 4]
	bool IsPatchItem_69_349A78005F80430E28984D2C053505CD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	int DefaultBPID_70_565E22406359818D69EDC21605AA41A4;//[Offset: 0x198 , Size: 4]
	FString StoreDetailImage_71_02C21A00264C878869630051096EDE55;//[Offset: 0x19c , Size: 12]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0x1a8 , Size: 12]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x1b4 , Size: 12]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x1c0 , Size: 4]
	FString PreviewDisplay_76_15377740089E1C37746DD63C0B5976C9;//[Offset: 0x1c4 , Size: 12]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x1d0 , Size: 4]
	int character_param_78_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x1d4 , Size: 4]
	FString QualityRate_79_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x1d8 , Size: 12]
	int ItemSoundID_80_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x1e4 , Size: 4]
	int JKBPID_81_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x1e8 , Size: 4]
	int CanIntoBag_82_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x1ec , Size: 4]
	int ResSeprateType_83_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x1f0 , Size: 4]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2430 , Size: 4]
	void GetTouchInterface(out TouchInterface* TouchInterface, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Object* CallFunc_LoadAssetFromPath_ReturnValue, TouchInterface* K2Node_DynamicCast_AsTouch_Interface, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void ReadConfigAutoAimLevel(int NewParam, Pawn* CallFunc_K2_GetPawn_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2);// 0x1bf56d0
	void IsFPP(out bool IsFPP, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void OnRep_InWateringRange();// 0x1bf56d0
	void LoadAllBattleSound(FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, BP_STRUCT_BattleSound_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1bf56d0
	void AsyncLoadBattleSound(Object* Object, int SoundID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void LoadBattleSound(FString BankName, FString EventName, int SoundID, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Map_Contains_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Map_Contains_ReturnValue2);// 0x1bf56d0
	void SetAlwaysHideTouchInterface(bool Hide);// 0x1bf56d0
	void PlayBattleSoundInBP(int SoundID, bool bPlayed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, AkAudioEvent* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_PostEvent_ReturnValue);// 0x1bf56d0
	bool IsReleasePosInAimBtnRange(Vector Loc, bool CallFunc_CaluIsReleasePosInAimBtnRange_ReturnValue);// 0x1bf56d0
	void ReadEmoteDataRowPC(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue2, int ___int_Loop_Counter_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, bool CallFunc_HasAuthority_ReturnValue, FName CallFunc_Array_Get_Item2, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1bf56d0
	void AddTestCompont(Transform ___struct_Variable, Transform ___struct_Variable2, AutoRunTest* CallFunc_AddComponent_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue2, bool CallFunc_IsAutoRunTestGame_ReturnValue);// 0x1bf56d0
	void IsAtaptation(out bool adaptation);// 0x1bf56d0
	void ReadAdaptationTable(bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1bf56d0
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x1bf56d0
	void SetMotionParam(float GravityX, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x1bf56d0
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x1bf56d0
	void ShowFightingUI();// 0x1bf56d0
	void ShowAutoSprintBtn(bool visible, Vector2D showPos_, bool Inside, Vector iPhoneXWidgetOffset, Vector2D touchPos);// 0x1bf56d0
	void ReadConfigCrossHairColor(int NewParam, int ___int_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable2, LinearColor ___struct_Variable3, LinearColor ___struct_Variable4, LinearColor ___struct_Variable5, LinearColor ___struct_Variable6, LinearColor ___struct_Variable7, LinearColor ___struct_Variable8, LinearColor ___struct_Variable9, LinearColor ___struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x1bf56d0
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void ReadConfigFromHUD(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, SensibilityMode K2Node_MakeStruct_SensibilityMode, SensibilityMode K2Node_MakeStruct_SensibilityMode2, SensibilityMode K2Node_MakeStruct_SensibilityMode3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig2, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig4, <int,SightMaterialConfig> K2Node_MakeMap_Map, SensibilityConfig K2Node_MakeStruct_SensibilityConfig);// 0x1bf56d0
	void MakeFireModeEffect(BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSG_UIElemSaveGame, float CallFunc_GetRushTriggerLengthByType_RushTriggerLength);// 0x1bf56d0
	void DebugNotDrawGuideLine();// 0x1bf56d0
	void ShowBackpackTombBox(bool Show);// 0x1bf56d0
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x1bf56d0
	void CreateRank(int Kills, int Rank);// 0x1bf56d0
	void DisableAimIfUnEquipWeapon(byte WeaponType);// 0x1bf56d0
	void SwitchAimMode();// 0x1bf56d0
	void DoInitUI(bool CallFunc_IsInFight_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x1bf56d0
	void HandleJumpBtnPressEvent();// 0x1bf56d0
	void OnRep_bInCar();// 0x1bf56d0
	void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1bf56d0
	void UpdateInputPanel();// 0x1bf56d0
	void ShowBackpackIconSplash(bool bShow);// 0x1bf56d0
	void RefreshWeaponPanel();// 0x1bf56d0
	void SetTouchInputEnabled(bool bEnabled);// 0x1bf56d0
	void ShowMainInputControl(bool bShow);// 0x1bf56d0
	void ShowTouchInterface(bool bShow, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, TouchInterface* CallFunc_GetTouchInterface_TouchInterface, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x1bf56d0
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x1bf56d0
	void SetDeathGrayLerpValue(float Lerp);// 0x1bf56d0
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void GrayToOne__FinishedFunc();// 0x1bf56d0
	void GrayToOne__UpdateFunc();// 0x1bf56d0
	void GrayToZero__FinishedFunc();// 0x1bf56d0
	void GrayToZero__UpdateFunc();// 0x1bf56d0
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent(Key Key);// 0x1bf56d0
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void OnStopFireEventHandle();// 0x1bf56d0
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x1bf56d0
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x1bf56d0
	void OnSwitchWeaponHandle();// 0x1bf56d0
	void ReceiveTick(float DeltaSeconds);// 0x1bf56d0
	void OnUseInventoryitemHandle();// 0x1bf56d0
	void ServerStartBattle();// 0x1bf56d0
	void ServerAfterLand();// 0x1bf56d0
	void ClientAfterLand();// 0x1bf56d0
	void RefreshTopMostUIPanel(byte Type);// 0x1bf56d0
	void gameStart();// 0x1bf56d0
	void RemoveWeaponAim(byte Slot);// 0x1bf56d0
	void SetMoveableAirborne(bool NewParam);// 0x1bf56d0
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x1bf56d0
	void JoystickTriggerSprint(bool bIsSprint);// 0x1bf56d0
	void OnPlane();// 0x1bf56d0
	void SetPanels(out const UAEUserWidget*[] panels);// 0x1bf56d0
	void InitOprate();// 0x1bf56d0
	void OnFiremodeChange(int IntValue);// 0x1bf56d0
	void ChangeToMale();// 0x1bf56d0
	void ChangeToFemale();// 0x1bf56d0
	void DoUITouchMove(Vector Loc);// 0x1bf56d0
	void PressFire(int FingerIndex);// 0x1bf56d0
	void ShowFireBtn(bool bShow);// 0x1bf56d0
	void PressGrenade(bool isThrow);// 0x1bf56d0
	void InitJoyStickAfterActivation();// 0x1bf56d0
	void MemberVoice(int member, int Status);// 0x1bf56d0
	void ReceiveClientRestart();// 0x1bf56d0
	void OnSpectatorCameraChange(bool bDie);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x1bf56d0
	void ResetMissingUIUpdate();// 0x1bf56d0
	void MotionControliOS(Vector AxisValue);// 0x1bf56d0
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x1bf56d0
	void MotionControlAndroidTick();// 0x1bf56d0
	void MotionControlAndroid(Vector AxisValue);// 0x1bf56d0
	void ReceiveBackpackComponent();// 0x1bf56d0
	void InitWallFeedBack();// 0x1bf56d0
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x1bf56d0
	void DebugOpenGuide();// 0x1bf56d0
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x1bf56d0
	void CallShowTouchInterface(bool InShow);// 0x1bf56d0
	void OnGameModeStateChanged();// 0x1bf56d0
	void ReleaseFire();// 0x1bf56d0
	void AddPubgmAutoComp();// 0x1bf56d0
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key3, Key K2Node_InputActionEvent_Key5, Key K2Node_InputActionEvent_Key4, Key ___struct_Variable, Key K2Node_InputActionEvent_Key3, Key K2Node_InputActionEvent_Key2, Key K2Node_InputActionEvent_Key, int ___int_Variable, byte ___byte_Variable, byte ___byte_Variable2, byte ___byte_Variable3, byte ___byte_Variable4, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key, Transform ___struct_Variable2, Transform ___struct_Variable3, PubgmAutoRun* CallFunc_AddComponent_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue2, Transform ___struct_Variable4, Transform ___struct_Variable5, AutoRunTest* CallFunc_AddComponent_ReturnValue3, AutoTestInterface* CallFunc_AddComponent_ReturnValue4, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, BP_PlayerPawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, Pawn* CallFunc_K2_GetPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess2, byte K2Node_Event_Type, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Slot, Pawn* CallFunc_K2_GetPawn_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_NewParam, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess3, delegate K2Node_CreateDelegate_OutputDelegate4, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess4, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess5, Vector K2Node_Event_Loc, int K2Node_Event_fingerIndex, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, delegate K2Node_CreateDelegate_OutputDelegate8, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate9, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, int K2Node_Event_member, int K2Node_Event_status, delegate K2Node_CreateDelegate_OutputDelegate10, bool CallFunc_IsOnVehicle_ReturnValue, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue2, int ___int_Array_Index_Variable, BP_PlayerPawn_C* CallFunc_Array_Get_Item, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, int CallFunc_Divide_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate11, Vector K2Node_CustomEvent_AxisValue2, Vector K2Node_InputVectorAxisEvent_AxisValue, delegate K2Node_CreateDelegate_OutputDelegate12, int ___int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate13, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_AxisValue, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate14, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess6, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, byte K2Node_Select_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsObserver_ReturnValue, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, int CallFunc_PostEventAtLocation_ReturnValue, bool K2Node_Event_InShow, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess7, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsObserver_ReturnValue2, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess8, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess9, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess10, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager2, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_IsInSpectating_ReturnValue, bool CallFunc_IsOnVehicle_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue4, GameStateBase* CallFunc_GetGameState_ReturnValue2, bool CallFunc_IsWindowOB_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_IsFPP_IsFPP, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate16, bool CallFunc_IsServer_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x1bf56d0
	void VaultFailDS__DelegateSignature();// 0x1bf56d0
	void BindEventToBackpackComponent__DelegateSignature();// 0x1bf56d0
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x1bf56d0
	void PlayerEnterWater__DelegateSignature();// 0x1bf56d0
	void AirborneLanded__DelegateSignature();// 0x1bf56d0
	void ReloadingCDEnd__DelegateSignature();// 0x1bf56d0
	void ReloadingCDStart__DelegateSignature(float CD);// 0x1bf56d0
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x2434 , Size: 4]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x2438 , Size: 4]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x243c , Size: 4]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x2440 , Size: 4]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x2444 , Size: 4]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x2448 , Size: 4]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x244c , Size: 4]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x2450 , Size: 4]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x2454 , Size: 4]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x2458 , Size: 4]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x245c , Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x2460 , Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x2464 , Size: 4]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x2468 , Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x246c , Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x2470 , Size: 4]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x2474 , Size: 4]
	byte LastCameraMode;//[Offset: 0x2478 , Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x247c , Size: 4]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2480 , Size: 1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x2484 , Size: 4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x2488 , Size: 4]
	Object* WaitingUI;//[Offset: 0x248c , Size: 4]
	Object* SimulatePlane;//[Offset: 0x2490 , Size: 4]
	float PlaneStartYaw;//[Offset: 0x2494 , Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x2498 , Size: 12]
	delegate ReloadingCDEnd;//[Offset: 0x24a4 , Size: 12]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b0 , Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x24b4 , Size: 4]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x24b8 , Size: 12]
	float CloseDistance;//[Offset: 0x24c4 , Size: 4]
	byte AutoAimDrawType;//[Offset: 0x24c8 , Size: 1]
	delegate AirborneLanded;//[Offset: 0x24cc , Size: 12]
	float MotionRate_Yaw;//[Offset: 0x24d8 , Size: 4]
	float MotionRate_Pitch;//[Offset: 0x24dc , Size: 4]
	float MotionAimRate_Pitch;//[Offset: 0x24e0 , Size: 4]
	float MotionAimRate_Yaw;//[Offset: 0x24e4 , Size: 4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x24e8 , Size: 4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x24ec , Size: 4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x24f0 , Size: 4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x24f4 , Size: 4]
	float MotionTouchRate_Yaw;//[Offset: 0x24f8 , Size: 4]
	float MotionTouchRate_Pitch;//[Offset: 0x24fc , Size: 4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2500 , Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2501 , Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2502 , Size: 1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2503 , Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x2504 , Size: 12]
	delegate PlayerLeaveWater;//[Offset: 0x2510 , Size: 12]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251c , Size: 1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251d , Size: 1]
	float PitchReverce;//[Offset: 0x2520 , Size: 4]
	float Left;//[Offset: 0x2524 , Size: 4]
	float Right;//[Offset: 0x2528 , Size: 4]
	float LastTime;//[Offset: 0x252c , Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x2530 , Size: 12]
	Vector CurMotionData;//[Offset: 0x253c , Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x2548 , Size: 12]
	delegate VaultFailDS;//[Offset: 0x2554 , Size: 12]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x2560 , Size: 60]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x259c , Size: 28]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x25b8 , Size: 28]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d4 , Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d5 , Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d6 , Size: 1]
	FString ActiveDevicProfileName;//[Offset: 0x25d8 , Size: 12]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e4 , Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e5 , Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e6 , Size: 1]
	float UITouchMoveX;//[Offset: 0x25e8 , Size: 4]
	float UITouchMoveY;//[Offset: 0x25ec , Size: 4]
	int PressFireFingerIndex;//[Offset: 0x25f0 , Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f4 , Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f5 , Size: 1]
	int VoiceMemberID;//[Offset: 0x25f8 , Size: 4]
	int VoiceMemberStatus;//[Offset: 0x25fc , Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x2600 , Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x2608 , Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x2620 , Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2628 , Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2629 , Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262a , Size: 1]
	byte UnequipWeaponType;//[Offset: 0x262b , Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262c , Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x2630 , Size: 8]
	int InputTeamID;//[Offset: 0x2638 , Size: 4]
	int EmoteItemType;//[Offset: 0x263c , Size: 4]
	BP_STRUCT_Item_type[] EmoteDataRow;//[Offset: 0x2640 , Size: 12]
	UAEDataTable* EmoteBPTable;//[Offset: 0x264c , Size: 4]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2650 , Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2651 , Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x2654 , Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x265c , Size: 8]
	int PeekMode;//[Offset: 0x2664 , Size: 4]
	int AimMode;//[Offset: 0x2668 , Size: 4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x266c , Size: 60]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x26a8 , Size: 60]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x26e4 , Size: 60]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x2720 , Size: 60]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275c , Size: 1]
	<int,AkAudioEvent*> BattleSoundMap;//[Offset: 0x2760 , Size: 60]
	<int,FString> BattleBankMap;//[Offset: 0x279c , Size: 60]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d8 , Size: 1]
	FString TouchInterfacePathName;//[Offset: 0x27dc , Size: 12]
	TouchInterface* GameTouchInterface;//[Offset: 0x27e8 , Size: 4]

--------------------------------
Class: BP_STRUCT_BattleSound_type
	int ID_0_2A476200426F1DEA2637969B03D982A4;//[Offset: 0x0 , Size: 4]
	int SoundID_1_46DBA4405283EB7B3BA231390F57D0E4;//[Offset: 0x4 , Size: 4]
	FString Event_2_1B79FF4077296A014966EB0F082BF7C4;//[Offset: 0x8 , Size: 12]
	FString Region_3_79F1F7C0268B0C797F1F0D4403F807DE;//[Offset: 0x14 , Size: 12]
	FString Bank_4_184E3DC068C2BF413A229E4A0982F59B;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0 , Size: 12]
	byte ArgumentValueType;//[Offset: 0xc , Size: 1]
	FText ArgumentValue;//[Offset: 0x10 , Size: 12]
	int ArgumentValueInt;//[Offset: 0x1c , Size: 4]
	float ArgumentValueFloat;//[Offset: 0x20 , Size: 4]
	enum ArgumentValueGender;//[Offset: 0x24 , Size: 1]

--------------------------------
Class: BP_STRUCT_EmoteBPTable_type
	FString Path_0_247605C000C1809320361CC70BC26958;//[Offset: 0x0 , Size: 12]
	FString CName_1_20BFF38058E1993E3181765E0C385985;//[Offset: 0xc , Size: 12]
	int ID_2_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StarJumpPlane();// 0x12e8c30

--------------------------------
Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0 , Size: 12]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0xc , Size: 4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x10 , Size: 4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x14 , Size: 4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	void Init();// 0x13323b0

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x20 , Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x5c , Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0x98 , Size: 60]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5 , Size: 1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6 , Size: 1]
	float RushTriggerLength1;//[Offset: 0xd8 , Size: 4]
	float RushTriggerLength2;//[Offset: 0xdc , Size: 4]
	float RushTriggerLength3;//[Offset: 0xe0 , Size: 4]
	FString SaveSlotName;//[Offset: 0xe4 , Size: 12]
	FString LayoutName1;//[Offset: 0xf0 , Size: 12]
	FString LayoutName2;//[Offset: 0xfc , Size: 12]
	FString LayoutName3;//[Offset: 0x108 , Size: 12]
	int TimeTag;//[Offset: 0x114 , Size: 4]
	int[] InvalidArray1;//[Offset: 0x118 , Size: 12]
	int[] InvalidArray2;//[Offset: 0x124 , Size: 12]
	int[] InvalidArray3;//[Offset: 0x130 , Size: 12]

--------------------------------
Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0 , Size: 4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4 , Size: 8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc , Size: 4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10 , Size: 16]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20 , Size: 8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x300 , Size: 1232]
	float Priority;//[Offset: 0x7d0 , Size: 4]
	float BlendRadius;//[Offset: 0x7d4 , Size: 4]
	float BlendWeight;//[Offset: 0x7d8 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc , Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc , Size: 1]
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x2db62e0

--------------------------------
Class: PubgmAutoRun.ActorComponent.Object
	delegate PubgmAutoRunSimulateAction;//[Offset: 0xbc , Size: 12]
	bool bRoutePointInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	XTPoint*[] RoutePoints;//[Offset: 0xcc , Size: 12]
	void VehicleTowardTo(float X, float Y, float Z);// 0x13f8910
	void VehicleMoveTo(float X, float Y, float Z);// 0x13f8810
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float X1, float Y1, float Z1);// 0x13f8638
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);// 0x1bf56d0
	static bool NeedCmdAutoRun();// 0x13f8610
	void NativeSimulateAction(int SimActionType);// 0x13f8598
	void InitRoutePoint();// 0x13f8584
	void GMGotoPosition(int X, int Y, int Z);// 0x13f8484
	Vector[] GetRangeActorsPostions(int ActorType, Vector OriginPos, float RangeRadius);// 0x13f82ec
	Vector GetPoisonCircleLocation();// 0x13f82a4
	static float GetPlayerSpeed(int SpeedIdx);// 0x13f8220
	bool GetNearestXTPointToVehicle(out Transform FirstPoint, out Transform SecendPoint, bool bNext);// 0x13f8030
	float ForceVehiclePosPull(bool bNext);// 0x13f7f9c

--------------------------------
Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x2c8 , Size: 4]
	int GetIntValueTwo();// 0x1409b00
	int GetIntValueThree();// 0x154c074
	int GetIntValueOne();// 0x154c044

--------------------------------
Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x108 , Size: 12]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x1739954
	void HandleUIMessage(FString UIMessage);// 0x1739898
	void HandleDynamicDestroy();// 0x1739884
	void HandleDynamicCreation();// 0x1739870

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xb4 , Size: 12]
	UAEPlayerController* OwningController;//[Offset: 0xfc , Size: 4]
	LuaClassObj* LuaObject;//[Offset: 0x104 , Size: 4]
	UAEUserWidget* GetWidget(int Index);// 0x1726a48
	LuaClassObj* GetLuaObject();// 0x1527b90
	GameFrontendHUD* GetGameFrontendHUD();// 0x1726a20

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0 , Size: 12]
	FString Container;//[Offset: 0xc , Size: 12]
	int ZOrder;//[Offset: 0x18 , Size: 4]
	class Object* WidgetClass;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x2d4 , Size: 4]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da , Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x173e6dc
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x173e5a8
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x173e530
	void SubDefaultChildUI(out const FString[] childList);// 0x173e3fc
	void SubDefaultBaseUI(FString baseUI);// 0x173e340
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x173e188
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x173e0cc
	void RestoreWidgetZorder(const int Index);// 0x173e054
	void RestoreAllWidgetZorder();// 0x173e040
	bool IsTopStackPanel();// 0x173e018
	bool IsPushedPanel();// 0x173dff0
	bool InCombatState();// 0x173dfc8
	void HandleUIMessageNoFetch(FString UIMessage);// 0x173df0c
	void HandleUIMessage(FString UIMessage);// 0x173de50
	void HandleDynamicDestroy();// 0x173de3c
	void HandleDynamicCreation();// 0x173de28
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x173dd6c
	FString GetTopStackPanelSrcTag();// 0x173dcac
	FString GetTopStackPanelDstTag();// 0x173dbec
	FString GetGameStatus();// 0x173db2c
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x173da80
	void AddToTopStackPanel();// 0x173da6c

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x2c8 , Size: 4]
	Object* OwningObject;//[Offset: 0x2cc , Size: 4]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x2d0 , Size: 4]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0xc0 , Size: 4]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x37525f0
	void PushOneScriptPropertyValues(FString ParamName);// 0x3752490
	void PushAllScriptPropertyValues();// 0x1344650
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x37522f4
	void FetchOneScriptPropertyValues(FString ParamName);// 0x3752194
	void FetchAllScriptPropertyValues();// 0x13c0654
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x375203c
	void CallScriptFunction(FString FunctionName);// 0x3751ee4

--------------------------------
Class: QuickSignComponent_BP_C.QuickSignComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d0 , Size: 4]
	void GetAudioEventAndBank(int audioID, int ActorId, out FString OutBankName, out FString OutEventName, FString BankName, FString EventName, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Format_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetActorBankByID_BankName);// 0x1bf56d0
	void GetLocalizeActorID(int AudioKey, out int ActorId, int CallFunc_Divide_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x1bf56d0
	void PlayVoiceAndText(QuickSignMsg msgItem, bool isSelf, int SignType, int TextId, int audioID, int ActorId, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_GetLocalizeActorID_ActorID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, QuickSignMsg K2Node_MakeStruct_QuickSignMsg, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, FString CallFunc_GetAudioEventAndBank_OutBankName, FString CallFunc_GetAudioEventAndBank_OutEventName, int CallFunc_GetQuickSignText_TextID, bool CallFunc_NotEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString);// 0x1bf56d0
	int GetVoiceAudioID(enum MsgType, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetQuickSignAudio_AudioID);// 0x1bf56d0
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, FString CallFunc_GetLocalizeBattleText_Text, FString CallFunc_GetLocalizeBattleText_Text2, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetLocalizeBattleText_Text3, FString CallFunc_GetLocalizeBattleText_Text4, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue5, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue3, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text5, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x1bf56d0
	void OrganizeMsg(int TextId, FString PlayerName, bool isSelf, FString StrParam, out FString MsgString, FString msgContent, bool CallFunc_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_GetLocalizeText_Text, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_SelectString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10);// 0x1bf56d0
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x1bf56d0
	bool GenerateMarkInfo(out QuickSignMsg msgItem, out QuickSignMark MarkInfo, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x1bf56d0
	void LoadConfig(int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_QuickSignTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int CallFunc_Array_Length_ReturnValue2, FName CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, BP_STRUCT_QuickSignCfg_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool isSelf);// 0x1bf56d0
	void PlayVoiceCD(float Duration);// 0x1bf56d0
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x1bf56d0
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, int ___int_Variable, QuickSignMsg K2Node_Event_MsgItem2, bool K2Node_Event_IsSelf, float K2Node_CustomEvent_Duration, QuickSignMsg K2Node_Event_MsgItem, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x1bf56d0
	UAEDataTable* QuickSignDataTable;//[Offset: 0x3d4 , Size: 4]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x3d8 , Size: 60]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x414 , Size: 60]
	FString TeammateColor;//[Offset: 0x450 , Size: 12]
	FString SelfColor;//[Offset: 0x45c , Size: 12]
	FString ColonChar;//[Offset: 0x468 , Size: 12]
	FString EndChar;//[Offset: 0x474 , Size: 12]
	FString SelfName;//[Offset: 0x480 , Size: 12]
	QuickSignMsg currMsg;//[Offset: 0x48c , Size: 80]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc , Size: 1]
	<enum,int> WeaponAttachmentSocketTextIDMap;//[Offset: 0x4e0 , Size: 60]
	<int,int> DefaultAudioMap;//[Offset: 0x51c , Size: 60]

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a8 , Size: 4]
	void LoadSingleAudio(int Chat Text ID, FString CallFunc_Conv_IntToString_ReturnValue, QuickChatOption K2Node_MakeStruct_QuickChatOption, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Add_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);// 0x1bf56d0
	void InitActorIDList(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	void NotifyPlayerVoiceState(FString PlayerName, int ___int_Array_Index_Variable, bool ___bool_True_if_break_was_hit_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void InitChatFlagList(enum ___byte_Variable, enum ___byte_Variable2, enum ___byte_Variable3, int ___int_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_FlagIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item2, enum K2Node_Select_Default, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, QuickChatFlag K2Node_MakeStruct_QuickChatFlag, int CallFunc_Array_AddUnique_ReturnValue2);// 0x1bf56d0
	void SetTurnplateQuickChatList(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Array_Get_Item, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x1bf56d0
	void GetActorBankByID(int ActorId, out FString BankName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	void SwitchActorAudio(int ActorId, FString CallFunc_GetActorBankByID_BankName, Actor* CallFunc_GetOwner_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x1bf56d0
	void LoadAllAudio(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable4, int CallFunc_Add_IntInt_ReturnValue4, int ___int_Array_Index_Variable4, int CallFunc_Array_Get_Item, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue4);// 0x1bf56d0
	void CreateAudio(Object* audio, int resID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetPathName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1bf56d0
	void SetQuickChatList(int chatQuickID, bool bFind, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable2, int CallFunc_Array_Get_Item, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x1bf56d0
	void InitFromSetting(Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x1bf56d0
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void playSound(int msgID, int ActorId, int LocalActorID, FString ___string_Variable, LuaBPVar CallFunc_IntToLVar_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Set_Contains_ReturnValue, LuaBPVar ___struct_Variable, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Set_Contains_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_GetActorBankByID_BankName, FormatArgumentData[] K2Node_MakeArray_Array, LuaBPVar ___struct_Variable2, FText CallFunc_Format_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, LuaBPVar ___struct_Variable3, bool CallFunc_BooleanOR_ReturnValue, LuaBPVar CallFunc_CallLuaWithArgs_OutA, LuaBPVar CallFunc_CallLuaWithArgs_OutB, LuaBPVar CallFunc_CallLuaWithArgs_OutC, LuaBPVar CallFunc_CallLuaWithArgs_OutD, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_LVarToBool_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x1bf56d0
	void AddToArray(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x1bf56d0
	void AddOneMsgToUI1(FString Name, FString Content, int msgID, int audioID, bool isMe, bool playSound);// 0x1bf56d0
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x1bf56d0
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x1bf56d0
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x1bf56d0
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x1bf56d0
	void OnFilterFinish(FString filterText);// 0x1bf56d0
	void CloseChatHistoryList();// 0x1bf56d0
	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_name2, FString K2Node_Event_content2, int K2Node_Event_msgID2, int K2Node_Event_audioID, bool K2Node_Event_isMe2, bool K2Node_Event_playSound, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, FString CallFunc_Concat_StrStr_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue3, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, Actor* CallFunc_GetOwner_ReturnValue4, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_name, FString K2Node_Event_content, bool K2Node_Event_isMe, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString K2Node_Event_filterText, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizeText_Text, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_GetLocalizeText_Text4, FString CallFunc_GetLocalizeText_Text5, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16, FString CallFunc_Concat_StrStr_ReturnValue17, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue18, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess9, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FString CallFunc_GetLocalizeText_Text7, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_Concat_StrStr_ReturnValue19, FString CallFunc_GetLocalizeText_Text9, FString CallFunc_Concat_StrStr_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue21, FString CallFunc_Concat_StrStr_ReturnValue22, FString CallFunc_Concat_StrStr_ReturnValue23, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x1bf56d0
	FString addToUIText;//[Offset: 0x2ac , Size: 12]
	FString[] UITextArray;//[Offset: 0x2b8 , Size: 12]
	int FirstIndex;//[Offset: 0x2c4 , Size: 4]
	FString currContentMsg;//[Offset: 0x2c8 , Size: 12]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4 , Size: 1]
	FString FriendChatStrGid;//[Offset: 0x2d8 , Size: 12]
	FString FriendChatSenderName;//[Offset: 0x2e4 , Size: 12]
	FString FriendChatContent;//[Offset: 0x2f0 , Size: 12]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x300 , Size: 12]
	FString FriendInviteSenderName;//[Offset: 0x30c , Size: 12]
	FString FriendInviteBattleTextValue;//[Offset: 0x318 , Size: 12]
	FString FriendReplyStrGid;//[Offset: 0x324 , Size: 12]
	FString FriendReplySenderName;//[Offset: 0x330 , Size: 12]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c , Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d , Size: 1]
	int UI_MsgID;//[Offset: 0x340 , Size: 4]
	FString UI_ItemName;//[Offset: 0x344 , Size: 12]
	int UI_AlternateMsgID;//[Offset: 0x350 , Size: 4]
	SettingConfig_C* SettingConfig;//[Offset: 0x354 , Size: 4]
	int[] ChatFlagTypeList;//[Offset: 0x358 , Size: 12]
	int[] TmpChatIDList;//[Offset: 0x364 , Size: 12]
	<int> GlobalActorIDList;//[Offset: 0x370 , Size: 60]
	<int> MuteOnGlobal;//[Offset: 0x3ac , Size: 60]

--------------------------------
Class: BP_STRUCT_VoiceActorCfg_type
	int ActorItemID_1_7EA64A805D4CF7C83F9ED7C20956DD34;//[Offset: 0x0 , Size: 4]
	int ActorID_2_66EEA6C00EC097255E83F50D0C7CE884;//[Offset: 0x4 , Size: 4]
	FString ActorName_5_084563C0289004B337AECB5D0CE91C45;//[Offset: 0x8 , Size: 12]
	int IsShow_4_5FD5FC807DD5DDEA1A7B8E0106B58787;//[Offset: 0x14 , Size: 4]
	FString BankName_6_72DF248073CEC0563E7F45210B58A305;//[Offset: 0x18 , Size: 12]
	int IsShowJP_7_264263001934747024EBA4C105878D40;//[Offset: 0x24 , Size: 4]
	int IsShowKR_8_554943C0790E5DDB24EBA4E605878EB2;//[Offset: 0x28 , Size: 4]
	int SortKey_9_023E1980778A370A5BD689D703B81F89;//[Offset: 0x2c , Size: 4]
	bool IsPlayInGlobal_10_14DF9BC04FFBCB15583BB67E0769332C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]

--------------------------------
Class: BP_STRUCT_FlagIDCfg_type
	FString TraceDist_0_58300C000EE7C4781954B3CD040DA8B4;//[Offset: 0x0 , Size: 12]
	FString MinDist_1_0B46994033686B57353ADBF500714494;//[Offset: 0xc , Size: 12]
	FString ChatIDList_2_4EF37580641F954251E0DAFB019B9714;//[Offset: 0x18 , Size: 12]
	int FlagIndex_3_792107C04BF74D1D091F4261042C7A78;//[Offset: 0x24 , Size: 4]
	int FlagType_4_11577240100B60A917DCD1AD0B460365;//[Offset: 0x28 , Size: 4]
	int AlternateChatID_5_30B4D68067E6F79C260EA2C400C3E5D4;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: LuaBPVar

--------------------------------
Class: BP_STRUCT_BattleText_type
	FString BattleTextValue_0_C862B6A74DAE6AFFE016F7A75B08BB2E;//[Offset: 0x0 , Size: 12]
	int BattleTextId_1_B87A149F450B53DA84777BAED491366B;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BP_STRUCT_QuickSignCfg_type
	int TextID_0_7A2819807E81ADFC4845A72A0F22CF64;//[Offset: 0x0 , Size: 4]
	FString IconBGPath_1_5BDF54C04BC63EDF39F3D4B505D210D8;//[Offset: 0x4 , Size: 12]
	FString ScriptParam_2_3C7BC68011D8B81C27E5F03F0C67C40D;//[Offset: 0x10 , Size: 12]
	FString AudioPath_3_542FCCC0273B734F1E867B74099F88F8;//[Offset: 0x1c , Size: 12]
	int LifeSpan_4_0AFEB18006FB71A602526E5601FD19DE;//[Offset: 0x28 , Size: 4]
	FString RespondID_5_0E2787006157EE48655D98DC092FB8F4;//[Offset: 0x2c , Size: 12]
	int MaxNum_6_73CA82807AF1FB3255FB24340FB7020D;//[Offset: 0x38 , Size: 4]
	FString IconPath_7_79023280522DA7F41B3040310874D6D8;//[Offset: 0x3c , Size: 12]
	FString ID_8_3F8DB04004E99B570550F27B0E37BE54;//[Offset: 0x48 , Size: 12]
	int SignSubType_9_6FD8044017325E7F589E0E8C0146BF25;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: ItemRecordData
	int ItemID;//[Offset: 0x0 , Size: 4]
	int ItemType;//[Offset: 0x4 , Size: 4]
	int ItemSubType;//[Offset: 0x8 , Size: 4]
	int BPID;//[Offset: 0xc , Size: 4]
	int WeightforOrder;//[Offset: 0x10 , Size: 4]
	int[] Attach;//[Offset: 0x14 , Size: 12]
	int BulletID;//[Offset: 0x20 , Size: 4]
	int ProposeBulletNum;//[Offset: 0x24 , Size: 4]
	int Durability;//[Offset: 0x28 , Size: 4]
	int ItemPickupRule;//[Offset: 0x2c , Size: 4]
	int AIFullVaule;//[Offset: 0x30 , Size: 4]
	float Weight;//[Offset: 0x34 , Size: 4]
	int MaxCount;//[Offset: 0x38 , Size: 4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d , Size: 1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e , Size: 1]
	FString ItemName;//[Offset: 0x40 , Size: 12]
	FString ItemBigIcon;//[Offset: 0x4c , Size: 12]
	FString ItemDesc;//[Offset: 0x58 , Size: 12]
	FString ItemSmallIcon;//[Offset: 0x64 , Size: 12]
	FString KillWhiteIcon;//[Offset: 0x70 , Size: 12]

--------------------------------
Class: BP_STRUCT_QuickSignTable_type
	int ActorID_0_0D7584803CD8766E275EB40E0304E344;//[Offset: 0x0 , Size: 4]
	int VoiceType_1_5FCEA900026DBDD257C5818D061F4995;//[Offset: 0x4 , Size: 4]
	int SignType_2_5FF28FC0324BCF5509666846055BF8B5;//[Offset: 0x8 , Size: 4]
	int DescID_3_745EC6000764B6F0688F28A909E60F84;//[Offset: 0xc , Size: 4]
	FString VoiceDescription_4_143861807650037E4710F80D0AC5FA9E;//[Offset: 0x10 , Size: 12]
	int ID_5_318A46400CE7791F40E51D350A985994;//[Offset: 0x1c , Size: 4]
	int Key_6_6896AD40175E4F276C3808C30985A569;//[Offset: 0x20 , Size: 4]
	int VoiceID_7_32A883C0154DF9132C2708A709F61C54;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.ActorComponent.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0xc0 , Size: 12]
	MapWidgetBase* m_pMiniMapWidget;//[Offset: 0xcc , Size: 4]
	MapWidgetBase* m_pEntireMapWidget;//[Offset: 0xd0 , Size: 4]
	int[] CurMarkInstList;//[Offset: 0xd4 , Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0xe0 , Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0xec , Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0xf0 , Size: 4]
	float TickRate_Internal;//[Offset: 0x114 , Size: 4]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x13b669c
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x1bf56d0

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0 , Size: 4]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304 , Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305 , Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306 , Size: 1]
	Vector2D LimitedSize;//[Offset: 0x308 , Size: 8]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x13b5ce4
	void UpdateMarkSize(float inScale);// 0x139fd10
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x13b5b94
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x13b5aa4
	void OnUIBPDestroy();// 0x13b5a88
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x13b5950
	void OnEnterEntireMap();// 0x1bf56d0
	Vector GetWidgetCurWorldPos();// 0x13b5908

--------------------------------
Class: MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* m_pMarkRoot;//[Offset: 0x2ec , Size: 4]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x2f0 , Size: 60]
	Vector LandscapeCenterCpp;//[Offset: 0x32c , Size: 12]
	float LevelToMapScaleCpp;//[Offset: 0x338 , Size: 4]
	float RotateAngleCpp;//[Offset: 0x33c , Size: 4]
	float MapScaleCpp;//[Offset: 0x340 , Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x344 , Size: 8]
	byte MapWidgetType;//[Offset: 0x34c , Size: 1]
	bool isMarkScaleAsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d , Size: 1]
	void SetupUIMarkRoot();// 0x133ca90
	void OnUpdateUIMarks();// 0x13b5a88

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x2377d10
	bool GetDontPaintWhenChildEmpty();// 0x2377ce8
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x2377c68

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24 , Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d , Size: 1]
	int ZOrder;//[Offset: 0x50 , Size: 4]
	void SetZOrder(int InZOrder);// 0x2378960
	void SetSupportNotch(bool InSupportNotch);// 0x23788e0
	void SetSize(Vector2D InSize);// 0x2378870
	void SetPosition(Vector2D InPosition);// 0x2378800
	void SetOffsets(Margin InOffset);// 0x2378778
	void SetMinimum(Vector2D InMinimumAnchors);// 0x2378708
	void SetMaximum(Vector2D InMaximumAnchors);// 0x2378698
	void SetLayout(out const AnchorData InLayoutData);// 0x2378600
	void SetAutoSize(bool InbAutoSize);// 0x2378580
	void SetAnchors(Anchors InAnchors);// 0x23784f8
	void SetAlignment(Vector2D InAlignment);// 0x2378488
	int GetZOrder();// 0x2378460
	Vector2D GetSize();// 0x2378420
	Vector2D GetPosition();// 0x23783e0
	Margin GetOffsets();// 0x237839c
	AnchorData GetLayout();// 0x2378348
	bool GetAutoSize();// 0x2378320
	Anchors GetAnchors();// 0x23782dc
	Vector2D GetAlignment();// 0x237829c
	bool GeSupportNotch();// 0x2378274

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0 , Size: 16]
	Anchors Anchors;//[Offset: 0x10 , Size: 16]
	Vector2D Alignment;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: UIBPAsyncParams

--------------------------------
Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0xbc , Size: 4]
	float CoolDownTime;//[Offset: 0xc0 , Size: 4]
	float LastChangeWearTime;//[Offset: 0xc4 , Size: 4]
	void ServerRequestChangeWear(int Index);// 0x1334060
	bool RequestChangeWearInBattle(int Index);// 0x1333fe0
	bool RequestChangeWear(int Index);// 0x1333f60
	void RealChangeWearInBattle(int Index);// 0x1333ee8
	bool IsInCoolDownTime(bool bWithLog);// 0x1333e60
	bool IsInBattleState(bool bWithLog);// 0x1333dd8
	bool IsChangeWearingOpend();// 0x1333db0
	bool IsAllowChangeWearingState(bool bWithLog);// 0x1333d28
	float GetCoolDownTime();// 0x1333d0c
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x1333be0
	bool CheckCanChangeWearing(bool bWithLog);// 0x1333b58

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf8 , Size: 4]
	void SetDefaultNearClipPlane(bool CallFunc_IsIOSPlatform_IsIOS);// 0x1bf56d0
	void IsIOSPlatform(out bool IsIOS, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1bf56d0
	void SetDefaultRendering();// 0x1bf56d0
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void ChangeStreamingLevel(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x1bf56d0
	void InitIncaseReconnect(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void CustomEvent(byte gamePawnEvent);// 0x1bf56d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x1bf56d0
	void UnloadTree();// 0x1bf56d0
	void LoadTree();// 0x1bf56d0
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess3);// 0x1bf56d0

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0xbc , Size: 12]
	float HeightCheck_High;//[Offset: 0xc8 , Size: 4]
	float HeightCheck_Mid;//[Offset: 0xcc , Size: 4]
	float HeightCheck_Low;//[Offset: 0xd0 , Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0xd8 , Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0xdc , Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0xe0 , Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0xe4 , Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0xe8 , Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0xec , Size: 4]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	void StarCalcJump();// 0x137a644
	void ScaleScreenSizeCulling(byte pawnevent);// 0x137a5cc
	void OnChangeViewTarget();// 0x137a5b8
	bool IsPlayerLandFromTheAir();// 0x137a590
	bool IsPlayerLanded();// 0x137a568
	bool IsPlayerFlying();// 0x137a540
	void HeightCheck();// 0x137a52c
	void GameEventReBirth();// 0x137a518
	void GameEventPlane();// 0x137a504
	void GameEventParachute();// 0x137a4f0
	void GameEventLanded();// 0x137a4dc
	void GameEventJump();// 0x137a4c8
	void GameEventFinished();// 0x137a4b4
	void GameEventFighting();// 0x137a4a0
	void GameEventDie(float currentHP, float ratioHP);// 0x137a3e4
	void GameEventBirth();// 0x137a3d0
	void ChangeViewtargetToPlane();// 0x137a3bc

--------------------------------
Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe0 , Size: 4]
	void ShowGuideByStep(int Data, Vector2D Offset, Vector2D focusAbsPos, Vector2D focusAbsSize, Widget* FocusWidget, Image* guideImage, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void AddUIGuide(Widget* widget1, int guildUI1, Vector2D offset1, Vector2D size1, int childData1, GuideInfo K2Node_MakeStruct_GuideInfo, int CallFunc_Array_Add_ReturnValue);// 0x1bf56d0
	void InitUIGuide(Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void CreateGuideUI();// 0x1bf56d0
	void ExecuteUbergraph_GuideComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	int guideStep;//[Offset: 0xe4 , Size: 4]

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x118 , Size: 4]
	void ReceiveBeginPlay();// 0x1bf56d0
	void CustomEvent(bool BoolValue);// 0x1bf56d0
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0xbc , Size: 12]
	delegate OnFPSLowWarning;//[Offset: 0xc8 , Size: 12]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0xd4 , Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0xe8 , Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0xec , Size: 12]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	void RequireConfigRPC();// 0x140e368
	void OnUserQualitySettingChanged(int renderlevel);// 0x140e2f0
	void MakeLowFPSWarningEx();// 0x140e2dc
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x140e220
	void CountingDown();// 0x140e20c
	void CloseFPSCheck();// 0x140e1f8
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x140e144

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float FPSCollectInternal;//[Offset: 0x4 , Size: 4]
	int FPSCollectCountForGroup;//[Offset: 0x8 , Size: 4]
	float FPSThreshold;//[Offset: 0xc , Size: 4]
	int FPSLowActionType;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235 , Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x238 , Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x240 , Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x250 , Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x280 , Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x284 , Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x288 , Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x28c , Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x290 , Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x294 , Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2a0 , Size: 12]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2ac , Size: 4]
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x14d7c24

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc8 , Size: 4]
	void OnChangeOpenDoorMode(int openmode);// 0x1bf56d0
	void UnRegistShowDoorButton();// 0x1bf56d0
	void OnShowDoorButton(byte Type);// 0x1bf56d0
	void RegistShowDoorButton();// 0x1bf56d0
	void ShowDoorButton(bool Show, bool Open, int openmode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x1bf56d0
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x1bf56d0
	void PlayerControllerReconnectedDelegate_Event();// 0x1bf56d0
	void UI_Click(bool bSimulateExtraDoor);// 0x1bf56d0
	void ToogleDoor();// 0x1bf56d0
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x1bf56d0
	void AutoOpenDoor(bool BoolValue);// 0x1bf56d0
	void BP_SimulateUIClick(bool bExtraDoor);// 0x1bf56d0
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAimingExtraDoor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool ___bool_Has_Been_Initd_Variable, bool ___bool_Variable, bool ___bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, bool CallFunc_IsValid_ReturnValue3, BP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue4, BP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue5, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_BoolValue, bool K2Node_Event_bExtraDoor, bool ___bool_Variable2, bool K2Node_Select_Default);// 0x1bf56d0
	int openmode;//[Offset: 0xcc , Size: 4]
	byte BtnType;//[Offset: 0xd0 , Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1 , Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]

--------------------------------
Class: BP_DoorMetallic_C.PUBGDoor.UAENetActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void Timeline_0__FinishedFunc();// 0x1bf56d0
	void Timeline_0__UpdateFunc();// 0x1bf56d0
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x1bf56d0
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1bf56d0
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1bf56d0
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ExecuteUbergraph_BP_DoorMetallic(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor2, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4);// 0x1bf56d0
	BoxComponent* InterForce;//[Offset: 0x394 , Size: 4]
	BoxComponent* Interaction;//[Offset: 0x398 , Size: 4]
	SceneComponent* Scene;//[Offset: 0x39c , Size: 4]
	BoxComponent* Box;//[Offset: 0x3a0 , Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3a4 , Size: 4]
	float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x3a8 , Size: 4]
	byte Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x3ac , Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x3b0 , Size: 4]
	float from;//[Offset: 0x3b4 , Size: 4]
	float to;//[Offset: 0x3b8 , Size: 4]
	int FromState;//[Offset: 0x3bc , Size: 4]
	int ToState;//[Offset: 0x3c0 , Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x3c4 , Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x3c8 , Size: 4]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0 , Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148 , Size: 1]
	void Stop();// 0x2debf24
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x2debe68
	void SetTimelineLengthMode(byte NewLengthMode);// 0x2debdf0
	void SetTimelineLength(float NewLength);// 0x2debd78
	void SetPlayRate(float NewRate);// 0x2debd00
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x2debbec
	void SetNewTime(float NewTime);// 0x2debb74
	void SetLooping(bool bNewLooping);// 0x2debaf4
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x2deba38
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x2deb9b8
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x2deb8fc
	void ReverseFromEnd();// 0x2deb8e8
	void Reverse();// 0x2deb8d4
	void PlayFromStart();// 0x2deb8c0
	void Play();// 0x2deb8ac
	void OnRep_Timeline();// 0x2deb898
	bool IsReversing();// 0x2deb870
	bool IsPlaying();// 0x2deb848
	bool IsLooping();// 0x2deb820
	float GetTimelineLength();// 0x2deb7f8
	float GetPlayRate();// 0x2deb7d0
	float GetPlaybackPosition();// 0x1549438
	bool GetIgnoreTimeDilation();// 0x2deb7a8

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0 , Size: 1]
	float Length;//[Offset: 0x4 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	float PlayRate;//[Offset: 0xc , Size: 4]
	float Position;//[Offset: 0x10 , Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14 , Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20 , Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c , Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38 , Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48 , Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58 , Size: 16]
	Object* PropertySetObject;//[Offset: 0x70 , Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78 , Size: 8]
	Property* DirectionProperty;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0 , Size: 4]
	delegate EventFunc;//[Offset: 0x8 , Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0 , Size: 4]
	delegate InterpFunc;//[Offset: 0x8 , Size: 16]
	FName TrackName;//[Offset: 0x18 , Size: 8]
	FName VectorPropertyName;//[Offset: 0x20 , Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0 , Size: 4]
	delegate InterpFunc;//[Offset: 0x8 , Size: 16]
	FName TrackName;//[Offset: 0x18 , Size: 8]
	FName FloatPropertyName;//[Offset: 0x20 , Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0 , Size: 4]
	delegate InterpFunc;//[Offset: 0x8 , Size: 16]
	FName TrackName;//[Offset: 0x18 , Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20 , Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: BP_DoorNormal_C.PUBGDoor.UAENetActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void ZeroToOne__FinishedFunc();// 0x1bf56d0
	void ZeroToOne__UpdateFunc();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1bf56d0
	void EventTimer();// 0x1bf56d0
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1bf56d0
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1bf56d0
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x1bf56d0
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x1bf56d0
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x1bf56d0
	void ExecuteUbergraph_BP_DoorNormal(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, FString CallFunc_Concat_StrStr_ReturnValue, const BP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_HasState_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, bool K2Node_Event_isBeginPlay, bool K2Node_Event_bExtraDoor2, bool CallFunc_SetStaticMesh_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue5, int CallFunc_PostEventAtLocation_ReturnValue3, bool CallFunc_WasRecentlyRendered_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue5, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult5);// 0x1bf56d0
	BoxComponent* InterForce;//[Offset: 0x394 , Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x398 , Size: 4]
	BoxComponent* Interaction;//[Offset: 0x39c , Size: 4]
	SceneComponent* Scene;//[Offset: 0x3a0 , Size: 4]
	BoxComponent* Box;//[Offset: 0x3a4 , Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3a8 , Size: 4]
	float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x3ac , Size: 4]
	byte ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x3b0 , Size: 1]
	TimelineComponent* ZeroToOne;//[Offset: 0x3b4 , Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x3b8 , Size: 4]
	float HP;//[Offset: 0x3bc , Size: 4]
	float HPTimer;//[Offset: 0x3c0 , Size: 4]
	float to;//[Offset: 0x3c4 , Size: 4]
	float from;//[Offset: 0x3c8 , Size: 4]
	float HPDummy;//[Offset: 0x3cc , Size: 4]
	TimerHandle DummyTimerHandler;//[Offset: 0x3d0 , Size: 8]
	float GrenadeDamageRatio;//[Offset: 0x3d8 , Size: 4]
	int FromState;//[Offset: 0x3dc , Size: 4]
	int ToState;//[Offset: 0x3e0 , Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x3e4 , Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x3e8 , Size: 4]

--------------------------------
Class: BP_GrenadeDamageType_C.DamageType.Object

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278 , Size: 4]
	void GetVehicleGoStraight(out float VehicleGoStraight, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x1bf56d0
	void HandleCharacterUnequipWeapon(STExtraWeapon* NewParam);// 0x1bf56d0
	void HandleCharacterEquipWeapon(STExtraWeapon* NewWeapon, byte Slot);// 0x1bf56d0
	void SwitchToLastWeapon(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void CacheLastUseWeaponSlot(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue);// 0x1bf56d0
	void SetPlayMusic(bool Enabled);// 0x1bf56d0
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x1bf56d0
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x1bf56d0
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void ExitVehicle();// 0x1bf56d0
	void EnterVehicle(bool IsDriver, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void OnEnterVehicleCompleted(enum SeatType);// 0x1bf56d0
	void OnExitVehicleCompleted();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x1bf56d0
	void OnCurrrentClosestVehicleChanged();// 0x1bf56d0
	void EventSetDrivingViewMode(int IntValue);// 0x1bf56d0
	void OnInputAxisMoveForward(float Rate);// 0x1bf56d0
	void OnInputAxisMoveRight(float Rate);// 0x1bf56d0
	void EventSetCarMusicSwitch(bool BoolValue);// 0x1bf56d0
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x1bf56d0
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, enum K2Node_Event_SeatType2, enum K2Node_Event_SeatType, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_IsValid_ReturnValue6, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_IsValid_ReturnValue9, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, bool CallFunc_IsValid_ReturnValue10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, int K2Node_CustomEvent_IntValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, delegate K2Node_CreateDelegate_OutputDelegate7, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, float K2Node_Event_rate2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, float K2Node_Event_rate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, bool CallFunc_IsValid_ReturnValue11, bool K2Node_CustomEvent_BoolValue2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController7, delegate K2Node_CreateDelegate_OutputDelegate8, bool CallFunc_IsValid_ReturnValue12, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate9, bool K2Node_CustomEvent_BoolValue, float CallFunc_GetVehicleGoStraight_VehicleGoStraight, float CallFunc_FixGoStraight_OutMoveRightRate, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasChangeMoveRightRate_ReturnValue);// 0x1bf56d0
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c , Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d , Size: 1]
	float Fuel;//[Offset: 0x280 , Size: 4]
	float FuelMax;//[Offset: 0x284 , Size: 4]
	float HP;//[Offset: 0x288 , Size: 4]
	float HPMax;//[Offset: 0x28c , Size: 4]
	float OutMoveRightRate;//[Offset: 0x290 , Size: 4]
	float RawSpeed;//[Offset: 0x294 , Size: 4]
	enum SeatType;//[Offset: 0x298 , Size: 1]
	byte LastWeaponSlot;//[Offset: 0x299 , Size: 1]
	float LastOutMoveRightRate;//[Offset: 0x29c , Size: 4]

--------------------------------
Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0 , Size: 4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4 , Size: 4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: BP_CharacterWeaponManager_C.CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object

--------------------------------
Class: BP_CustomSpringArm_C.CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_UAESkillManager_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	bool TriggerEvent(int SkillID, byte EventType);// 0x14feef4
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x14fee30
	void SetSkillOwner(Actor* Pawn);// 0x14fedb0

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x36c , Size: 12]
	FString SkillTableName;//[Offset: 0x378 , Size: 12]
	FString SkillBuffTableName;//[Offset: 0x384 , Size: 12]
	FString PropSkillMapTableName;//[Offset: 0x390 , Size: 12]
	bool TriggerEvent(int SkillID, byte EventType);// 0x14feef4
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x14fee30
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x150d8d4
	FString GetSkillIconBySkillID(int SkillID);// 0x150d7cc
	UTSkill* GetSkillByEntry(enum Entry);// 0x150d744
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x150d680
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x150d4a8
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x150d3e4
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x150d2dc

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0 , Size: 1]
	int SkillIndex;//[Offset: 0x4 , Size: 4]
	FString Interrupts;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: PropSkillMapTableRow
	int SkillMapID;//[Offset: 0x0 , Size: 4]
	int PropID;//[Offset: 0x4 , Size: 4]
	int PropSkillLevel;//[Offset: 0x8 , Size: 4]
	int PropSkillID;//[Offset: 0xc , Size: 4]
	int AuxPropSkillID;//[Offset: 0x10 , Size: 4]
	int[] FilterGunIDs;//[Offset: 0x14 , Size: 12]
	FString PropSkillIconPath;//[Offset: 0x20 , Size: 12]
	FString PropSkillUseIconPath;//[Offset: 0x2c , Size: 12]
	FString PropSkillDesc;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240 , Size: 4]
	void IsFppMode(out bool Out, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void GetPetOwnerPlayerPawn(out BP_PlayerPawn_C* Out, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void GetPetPawn(out BasePetCharacter_BP_C* Out, BasePetCharacter_BP_C* K2Node_DynamicCast_AsBase_Pet_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void SetPetPawn(STExtraPetCharacter* InPetPawn, out STExtraPetCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x1bf56d0
	void SetPetOwnerPlayerPawn(STExtraBaseCharacter* InPlayerPawn, out STExtraBaseCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x1bf56d0
	void ResetAttachTrans(BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x1bf56d0
	void SpawnPetWithInfo(GameModePlayerPetInfo Info, bool ___bool_Variable, bool CallFunc_IsFppMode_Out, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Select_Default, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class BasePetCharacter_BP_C K2Node_ClassDynamicCast_AsBase_Pet_Character_BP, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x1bf56d0
	void SpawnPet(class BasePetCharacter_BP_C PetClass);// 0x1bf56d0
	void RemovePet();// 0x1bf56d0
	void PlayerStateChange(enum State, byte changeType);// 0x1bf56d0
	void OnOwnerPlayerPossessed(GameModePlayerPetInfo PetInfo);// 0x1bf56d0
	void OnOwnerDetachedVehicle();// 0x1bf56d0
	void OnRep_PetPawn();// 0x1bf56d0
	void OnRep_PetOwnerPlayerPawn();// 0x1bf56d0
	void ExecuteUbergraph_PetComponent_BP(int EntryPoint, PetLevelInfo K2Node_MakeStruct_PetLevelInfo, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_SetPetOwnerPlayerPawn_out, class BasePetCharacter_BP_C K2Node_CustomEvent_PetClass, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, enum K2Node_Event_State, byte K2Node_Event_changeType, FString CallFunc_Concat_StrStr_ReturnValue, GameModePlayerPetInfo K2Node_CustomEvent_PetInfo, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BasePetCharacter_BP_C* CallFunc_FinishSpawningActor_ReturnValue, STExtraPetCharacter* CallFunc_SetPetPawn_Out, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetClassDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, STExtraPetCharacter* CallFunc_SetPetPawn_Out2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, interface classByteProperty K2Node_DynamicCast_AsPlayer_Event_for_Pet, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out6, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue7, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out7, FString CallFunc_Concat_StrStr_ReturnValue9, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out8, bool CallFunc_IsValid_ReturnValue8, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out9, FString CallFunc_Conv_BoolToString_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out2, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out3, bool CallFunc_IsValid_ReturnValue10, FString CallFunc_Conv_BoolToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue12);// 0x1bf56d0
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x244 , Size: 4]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x248 , Size: 24]

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x238 , Size: 4]
	STExtraPetCharacter* PetPawn;//[Offset: 0x23c , Size: 4]
	void OnRep_PetPawn();// 0x1bf56d0
	void OnRep_PetOwnerPlayerPawn();// 0x1bf56d0

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0x8d4 , Size: 12]
	bool[] ClientDiffPetStateList;//[Offset: 0x8e0 , Size: 12]
	float MovementTickInterval;//[Offset: 0x8ec , Size: 4]
	int PetStateNum;//[Offset: 0x8f0 , Size: 4]
	int RelevantCloseTime;//[Offset: 0x8f4 , Size: 4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0x8f8 , Size: 8]
	PetLevelInfo PetLevelInfo;//[Offset: 0x900 , Size: 8]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908 , Size: 1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0x90c , Size: 4]
	byte PetRelevantType;//[Offset: 0x910 , Size: 1]
	byte CurPetState;//[Offset: 0x911 , Size: 1]
	delegate OnPetStateChangeDelegate;//[Offset: 0x914 , Size: 12]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0x920 , Size: 12]
	delegate OnPetMontageDelegate;//[Offset: 0x92c , Size: 12]
	PetEventItem* CurExecuteEvent;//[Offset: 0x938 , Size: 4]
	PetMontageData PetCurMontage;//[Offset: 0x93c , Size: 8]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x1bf56d0
	void SetPetVisibility(bool visible);// 0x1bf56d0
	void SetPetMontage(out const PetMontageData Data);// 0x1490b18
	void SetCurExecuteEvent(PetEventItem* Event);// 0x1490aa0
	bool PetOwnerIsAutonomous();// 0x1490a78
	void PetOwnerCharacterBecomeValid();// 0x1bf56d0
	void PetLeaveState(byte State);// 0x1490a00
	bool PetHasState(byte State);// 0x1490980
	bool PetEnterState(byte ToState);// 0x1490900
	void OnRep_PetVisibilityInfo();// 0x14908ec
	void OnRep_PetStateList();// 0x14908d8
	void OnRep_PetStateChange();// 0x12dedb4
	void OnRep_PetOwnerCharacter();// 0x14908c4
	void OnRep_PetCurMontageChange();// 0x14908b0
	void OnRep_CurExecuteEvent();// 0x149089c
	void OnRep_AttachmentReplication();// 0x131144c
	void OnOwnerAvatarEquipped(enum slotType, bool isEquipped, int InItemID);// 0x1490788
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x1bf56d0
	bool IsAnimLimited(int AnimId);// 0x1490700
	int[] GetPetUnlockAnimIds();// 0x1bf56d0
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x1bf56d0
	FString GetPetAnimLimitePlayerState(int AnimId);// 0x1bf56d0
	bool ClientPredictEnterState(byte ToState);// 0x1490680
	void BroadcastPetLeaveDisappear();// 0x1490664
	void BindDelegateInCpp();// 0x1490648

--------------------------------
Class: PetVisibilityInfo
	bool visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0 , Size: 4]
	int PetLevel;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x1c , Size: 1]
	int EventPriority;//[Offset: 0x20 , Size: 4]
	float EventExecTime;//[Offset: 0x24 , Size: 4]
	float EventMaxWaitTime;//[Offset: 0x28 , Size: 4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	byte EnterPetState;//[Offset: 0x2d , Size: 1]
	byte LeavePetState;//[Offset: 0x2e , Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x30 , Size: 4]
	int AnimationAssetId;//[Offset: 0x34 , Size: 4]
	PetMontageConfig[] MontageList;//[Offset: 0x38 , Size: 12]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x44 , Size: 12]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x50 , Size: 12]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d , Size: 1]
	delegate OnPetEventStartDelegate;//[Offset: 0x60 , Size: 12]
	delegate OnPetEventEndDelegate;//[Offset: 0x6c , Size: 12]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x78 , Size: 4]
	void UpdateCanPlayMontageList();// 0x13dc3b0
	void SelectRandomMontage();// 0x13dc394
	void OnEventStart(STExtraPetCharacter* Pet);// 0x12e2a30
	void OnEventEnd();// 0x13dc378
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x13dc2f0

--------------------------------
Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0 , Size: 4]
	int Weight;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x1c , Size: 1]
	float EventMaxWaitTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0 , Size: 4]
	float MontageStartTime;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x980 , Size: 4]
	void OnPetOwnerFallingModeChange(bool IsFalling, Vector PlayerLoc, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x1bf56d0
	void StopCurMontage(AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void ChangeToDefaultAttachInfo(PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult);// 0x1bf56d0
	void OnDelayLeaveDisappear();// 0x1bf56d0
	void OnPetLeaveState(byte LeaveState, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPetDefaultFollowType_FollowType, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void OnPetEnterState(byte EnterState, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x1bf56d0
	void OnPetAppearAnimEnd();// 0x1bf56d0
	void OnPetDisappearStateChange(bool IsEnter, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void GetPetParachuteEquipments(out int[] Out);// 0x1bf56d0
	void HandlePetStopParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1bf56d0
	void HandlePetStartParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x1bf56d0
	void DetachFromOwnerPlayer();// 0x1bf56d0
	void InitPetAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x1bf56d0
	void SetPetFollowType(byte Type, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue);// 0x1bf56d0
	void PetHasDisappearState(out bool Out, bool CallFunc_PetHasState_ReturnValue, bool CallFunc_PetHasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x1bf56d0
	void OnPetFlyAroundStateChange(bool IsEnter, bool CallFunc_IsServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1bf56d0
	void OnPetFollowStateChange(bool IsEnter, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1bf56d0
	void UpdateAttachInfoByOwnerDefaultAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, AvatarSlotDesc[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, AvatarSlotDesc CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x1bf56d0
	void ResetAttachInfo(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x1bf56d0
	void GetPetInfo(out GameModePlayerPetInfo PetInfo);// 0x1bf56d0
	void GetPetEntity(out PetEntityComponent_BP_C* PetEntity);// 0x1bf56d0
	void DisableUnuseComponent();// 0x1bf56d0
	void CalcInAirAttackArea(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x1bf56d0
	void OnAirAttackOver();// 0x1bf56d0
	void OnAirAttackWarning(GameStateBase* CallFunc_GetGameState_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void SelfPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue);// 0x1bf56d0
	void OtherPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue);// 0x1bf56d0
	void PetOtherVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void PetSelfVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, bool ___bool_Variable, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_Select_Default, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void GetPetDefaultFollowType(out byte FollowType);// 0x1bf56d0
	void DrawPetDebugInfo(bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x1bf56d0
	void OnRep_AttachToOwner(Transform TempTrans, bool CallFunc_PetEnterState_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_K2_SetActorRotation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Transform CallFunc_GetFollowPos_out);// 0x1bf56d0
	void AttachToOwnerPlayer(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x1bf56d0
	void PetOwnerStopEmote(int EmoteId, int StopReason, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void PetOwnerPlayEmote(int EmoteId, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetEmotionEventInfo* CallFunc_SpawnObject_ReturnValue, bool CallFunc_PetEnterState_ReturnValue, DateTime CallFunc_Now_ReturnValue, int CallFunc_GetSecond_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PetVisibilityInfo K2Node_MakeStruct_PetVisibilityInfo, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AnimIdIsValid_IsValid, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1bf56d0
	void AnimIdIsValid(int AnimId, out bool IsValid, int[] CallFunc_GetPetUnlockAnimIds_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsAnimLimited_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void GetPetRspInfoWithPlayerEmoteId(int PlayerEmoteId, out BP_STRUCT_PetPlayerEmoteTable_type Out Row, out bool Found, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	FString GetPetAnimLimitePlayerState(int AnimId, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetActPlayerStateTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	int[] GetPetUnlockAnimIds(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1bf56d0
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x1bf56d0
	void GetPetAttachInfo(out PetAttachInfo AttachInfo, PetAttachInfo CallFunc_GetCurrentAttachInfo_ReturnValue);// 0x1bf56d0
	void GetPetEventManager(out PetEventManagerComponent* PetEventManager);// 0x1bf56d0
	void SetOwnerCharacterPC(STExtraPlayerController* CallFunc_GetController_ReturnValue);// 0x1bf56d0
	void GetOwnerCharacter(out BP_PlayerPawn_C* OwnerCharacter, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void SetOwnerCharacter(BP_PlayerPawn_C* Owner, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Controller* CallFunc_GetController_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetPetDefaultFollowType_FollowType, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x1bf56d0
	void GetFollowPos(float MinRadius, float MaxRadius, out Transform Out, WaterSwimActor* NewLocalVar, Vector ActorLoc, Rotator ActorRot, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_RandomFloatInRange_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector K2Node_MathExpression_ReturnValue, Vector K2Node_MathExpression_ReturnValue2, Actor*[] ___object_Variable, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, WaterSwimActor* K2Node_DynamicCast_AsWater_Swim_Actor, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_MakeRotFromZY_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void Timeline_0__FinishedFunc();// 0x1bf56d0
	void Timeline_0__UpdateFunc();// 0x1bf56d0
	void BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature(PetWaitEventInfo* EventInfo);// 0x1bf56d0
	void PlayerStateChange(enum State, byte changeType);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void PetOwnerCharacterBecomeValid();// 0x1bf56d0
	void UpdateSplineInfo();// 0x1bf56d0
	void OnPlayerExitParachute();// 0x1bf56d0
	void PetStopParchute();// 0x1bf56d0
	void PetStartParachute();// 0x1bf56d0
	void BindEvent();// 0x1bf56d0
	void OnPetStateChangeEvent(byte State, bool IsEnter);// 0x1bf56d0
	void OnPetMontageEvent(PetMontageData MontageData);// 0x1bf56d0
	void OnAsyncLoadPetAnimRes(Object* LoadObject);// 0x1bf56d0
	void SetPetVisibility(bool visible);// 0x1bf56d0
	void OnOwnerWinEvent();// 0x1bf56d0
	void OnOwnerKillSomeone();// 0x1bf56d0
	void OnOwnerAssistKill();// 0x1bf56d0
	void OnMoveVoiceAround(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x1bf56d0
	void OnShotVoiceAround(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x1bf56d0
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x1bf56d0
	void OnAirAttackEvent(byte airattacktype, int waveindex);// 0x1bf56d0
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x1bf56d0
	void DebugLineTimerEvent();// 0x1bf56d0
	void OnPetOwnerStateInterruptEvent(enum State, enum InterruptedBy);// 0x1bf56d0
	void OnOwnerAvatarEquipped(enum slotType, bool isEquipped, int InItemID);// 0x1bf56d0
	void PetEnterPlane();// 0x1bf56d0
	void OnPetOwnerFallingModeChangeEvent(bool IsFalling);// 0x1bf56d0
	void OnOwnerPerspectiveChanged(bool IsFPP);// 0x1bf56d0
	void ExecuteUbergraph_BasePetCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, PetWaitEventInfo* K2Node_ComponentBoundEvent_EventInfo, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, enum K2Node_Event_State, byte K2Node_Event_changeType, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate8, delegate K2Node_CreateDelegate_OutputDelegate9, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, SplineComponent*[] CallFunc_GetComponentsByTag_ReturnValue, SplineComponent* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate10, byte K2Node_CustomEvent_State2, bool K2Node_CustomEvent_IsEnter, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, PetMontageData K2Node_CustomEvent_MontageData, Object* K2Node_CustomEvent_LoadObject, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool K2Node_Event_Visible, BP_STRUCT_PetActionTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_PetSelfVisibleSetting_out, bool CallFunc_IsServer_ReturnValue2, bool CallFunc_PetOtherVisibleSetting_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue2, Vector CallFunc_GetLocationAtTime_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate13, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager5, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue5, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager6, STExtraBaseCharacter* K2Node_CustomEvent_nowCharacter, Vector K2Node_CustomEvent_posVector2, float K2Node_CustomEvent_showTime2, STExtraShootWeapon* K2Node_CustomEvent_nowWeapon, Vector K2Node_CustomEvent_posVector, float K2Node_CustomEvent_showTime, bool K2Node_CustomEvent_isslience, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager7, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue6, PetWaitEventInfo* K2Node_Event_Event, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager8, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, byte K2Node_CustomEvent_airattacktype, int K2Node_CustomEvent_waveindex, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_IsServer_ReturnValue3, bool K2Node_Event_Draw, bool CallFunc_IsServer_ReturnValue4, enum K2Node_CustomEvent_state, enum K2Node_CustomEvent_InterruptedBy, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager9, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue7, enum K2Node_Event_slotType, bool K2Node_Event_isEquipped, int K2Node_Event_InItemID, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate14, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter3, bool CallFunc_PetHasDisappearState_out, bool CallFunc_IsHiddenByOtherSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter4, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_HasState_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate16, byte CallFunc_GetPetDefaultFollowType_FollowType3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate17, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate18, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, byte CallFunc_GetPetDefaultFollowType_FollowType4, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_IsServer_ReturnValue5, FixPetAttachInfo K2Node_MakeStruct_FixPetAttachInfo, bool CallFunc_PetOwnerIsAutonomous_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager10, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue5, PetEventPlayerStateTypeSt K2Node_MakeStruct_PetEventPlayerStateTypeSt, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager11, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, byte CallFunc_GetPredictPetOwnerState_Enter, byte CallFunc_GetPredictPetOwnerState_Leave, bool CallFunc_GetPredictPetOwnerState_ReturnValue, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_ClientPredictEnterState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue6, bool K2Node_CustomEvent_IsFalling, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_PetEnterState_ReturnValue2, bool CallFunc_PetEnterState_ReturnValue3, bool K2Node_CustomEvent_IsFPP, bool CallFunc_PetSelfVisibleSetting_out2, delegate K2Node_CreateDelegate_OutputDelegate19, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue7);// 0x1bf56d0
	void PetOwnerStateChangeDispatcher__DelegateSignature(enum State, byte changeType);// 0x1bf56d0
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0x984 , Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x988 , Size: 4]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0x98c , Size: 4]
	PetEventManagerComponent* PetEventManager;//[Offset: 0x990 , Size: 4]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x994 , Size: 4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x998 , Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x99c , Size: 4]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0x9a0 , Size: 4]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0x9a4 , Size: 12]
	int[] UnlockAnimIds;//[Offset: 0x9b0 , Size: 12]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc , Size: 1]
	SplineComponent* PetParachuteSpline;//[Offset: 0x9c0 , Size: 4]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0x9c4 , Size: 4]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8 , Size: 1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x9d0 , Size: 8]
	Vector CurAttackArea;//[Offset: 0x9d8 , Size: 12]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4 , Size: 1]
	TimerHandle DebugLineTimer;//[Offset: 0x9e8 , Size: 8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0 , Size: 1]
	float PetAppearTime;//[Offset: 0x9f4 , Size: 4]
	float PetDelayLeaveDisappearTime;//[Offset: 0x9f8 , Size: 4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0xa00 , Size: 8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08 , Size: 1]
	enum TPlayerState;//[Offset: 0xa09 , Size: 1]
	byte TChangeType;//[Offset: 0xa0a , Size: 1]

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954 , Size: 1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955 , Size: 1]
	float DefaultTraceDeltaTime;//[Offset: 0x958 , Size: 4]
	float TraceLength;//[Offset: 0x95c , Size: 4]
	float CurrentTraceDeltaTime;//[Offset: 0x960 , Size: 4]
	byte[] TraceTypeConfig;//[Offset: 0x964 , Size: 12]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0x970 , Size: 4]
	void TraceForward();// 0x147460c
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x14745e4

--------------------------------
Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, FString CallFunc_Array_Get_Item5, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, FString CallFunc_Array_Get_Item6, float CallFunc_Conv_StringToFloat_ReturnValue6, Rotator CallFunc_MakeRotator_ReturnValue, PetAttachInfo K2Node_MakeStruct_PetAttachInfo);// 0x1bf56d0

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0xbc , Size: 4]
	PetAttachInfo AttachInfo;//[Offset: 0xc0 , Size: 32]
	PetAttachInfo FollowAttachInfo;//[Offset: 0xe0 , Size: 32]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x100 , Size: 32]
	PetAttachInfo CurAttachInfo;//[Offset: 0x120 , Size: 32]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x140 , Size: 12]
	byte FollowType;//[Offset: 0x14c , Size: 1]
	int[] ParachuteEquipItems;//[Offset: 0x150 , Size: 12]
	enum[] PredictOwnerStates;//[Offset: 0x15c , Size: 12]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x13dbd28
	void OnPetStateChanged(byte State, bool IsEnter);// 0x13dbc5c
	STExtraPetCharacter* GetPetCharacter();// 0x13dbc34
	PetAttachInfo GetCurrentAttachInfo();// 0x13dbbe8
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x1bf56d0

--------------------------------
Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0 , Size: 8]
	Vector AttachOffset;//[Offset: 0x8 , Size: 12]
	Rotator AttachRotation;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: FixPetAttachInfo
	int ItemID;//[Offset: 0x0 , Size: 4]
	int PetId;//[Offset: 0x4 , Size: 4]
	int Priority;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: BP_STRUCT_PetPlayerOffsetTable_type
	FString RelativeRotation_0_622D21C02715F60B1B6C03BB0A3B34BE;//[Offset: 0x0 , Size: 12]
	int Priority_1_4534D740055E57BF79E04F1E0692B319;//[Offset: 0xc , Size: 4]
	FString RelativeLocation_2_7CA9FC003FA2AAD634B0A8A1090B10DE;//[Offset: 0x10 , Size: 12]
	FString ItemPetId_3_71823800373EB13632B5E93E0D64F5B4;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0xbc , Size: 12]
	PetEventItemIns[] EventConfigs;//[Offset: 0xc8 , Size: 12]
	BehaviorTree* DefaultBT;//[Offset: 0xd4 , Size: 4]
	BehaviorTree* CurrentBT;//[Offset: 0xd8 , Size: 4]
	STExtraPetController* PetController;//[Offset: 0xdc , Size: 4]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xe0 , Size: 4]
	PetEventItem* CurExecuteEvent;//[Offset: 0xe4 , Size: 4]
	int MaxWaitEventNum;//[Offset: 0xe8 , Size: 4]
	delegate OnPetEventDelegate;//[Offset: 0xec , Size: 12]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x13dda64
	void StartEventExecTimer(float ExecTime);// 0x13dd9ec
	void ProcessWaitEvent(float Delta);// 0x13dd974
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x13dd840
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x13dd7c0
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x13dd748
	void DequeueWaitEvent(bool bNeedExec);// 0x13dd6c8
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x13dd648
	bool CanResponseEvent();// 0x13dd620

--------------------------------
Class: PetEventItemIns
	FString Tips;//[Offset: 0x0 , Size: 12]
	PetEventItem* EventItem;//[Offset: 0xc , Size: 4]

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x1491590

--------------------------------
Class: PetEventPlayerStateTypeSt
	enum PawnState;//[Offset: 0x0 , Size: 1]
	byte StateChangeType;//[Offset: 0x1 , Size: 1]

--------------------------------
Class: BP_STRUCT_PetPlayerEmoteTable_type
	FString PlayerEmotePetId_0_6616D2C02A115EB56446D9F30AF4E924;//[Offset: 0x0 , Size: 12]
	int PetResponse_1_315B018079F8B5826BBD3D2B05F09FE5;//[Offset: 0xc , Size: 4]
	int PetAnimID_2_0B8EF24060CA81E759CB86EB0B9DC804;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: BasePetController_BP_C.STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x378 , Size: 4]
	void CalcInAirAttackArea();// 0x1bf56d0
	void OnPlayerStopEmote(int EmoteId, int Reason, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x1bf56d0
	void OnPlayerPlayEmote(int Emote, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void OnAirAttackEvent(byte airattacktype, int waveindex);// 0x1bf56d0
	void ExecuteUbergraph_BasePetController_BP(int EntryPoint, BehaviorTreeComponent* CallFunc_GetComponentByClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_airattacktype, int K2Node_CustomEvent_waveindex, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue2, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue3, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess2);// 0x1bf56d0
	BehaviorTree* CurBT;//[Offset: 0x37c , Size: 4]
	FName PetOwnerEmoteId;//[Offset: 0x380 , Size: 8]
	FName IsAirAttacking;//[Offset: 0x388 , Size: 8]
	FName AirAttackArea;//[Offset: 0x390 , Size: 8]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x398 , Size: 8]
	Vector CurAttackArea;//[Offset: 0x3a0 , Size: 12]

--------------------------------
Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366 , Size: 1]
	float PetBlockDetectionDistance;//[Offset: 0x368 , Size: 4]
	float PetBlockDetectionInterval;//[Offset: 0x36c , Size: 4]
	int PetBlockDetectionSampleCount;//[Offset: 0x370 , Size: 4]

--------------------------------
Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: BP_STRUCT_PetActPlayerStateTable_type
	FString PetLimiteState_3_107B0EC027578F8F39A3C9B002BE9A85;//[Offset: 0x0 , Size: 12]
	int PetID_1_7B9998C012D880D53C70B12C0D2280B4;//[Offset: 0xc , Size: 4]
	int PetActionID_2_26FA70406D0CF0E967A9660B078EE2C4;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: BP_STRUCT_PetLevelTable_type
	int KeyID_0_38C8754040A625D32E969D6F0A59B604;//[Offset: 0x0 , Size: 4]
	int ActionCnt_1_6ED1A8806F6E05482A2429B001406784;//[Offset: 0x4 , Size: 4]
	int PetNeedExp_2_5C9DFC4020A68805594D9EAF091E67B0;//[Offset: 0x8 , Size: 4]
	FString AllAction_3_64FEE580365AA5C6529430360BA1003E;//[Offset: 0xc , Size: 12]
	int ActionID5_4_545A4FC00C46D17D2A240979014062A5;//[Offset: 0x18 , Size: 4]
	int ActionID1_5_54564EC00C46D1792A24097D014062A1;//[Offset: 0x1c , Size: 4]
	FString LobbyPetBP_6_6856D48026D8CEBA5718878204437A40;//[Offset: 0x20 , Size: 12]
	int ActionID4_7_54594F800C46D17C2A24097A014062A4;//[Offset: 0x2c , Size: 4]
	int PetID_8_0C7F3540138C63E52ED3D2E20A5EB304;//[Offset: 0x30 , Size: 4]
	FString PetCharacter_9_0EB0D54006ABD083521623E20D6C9E82;//[Offset: 0x34 , Size: 12]
	int PetLevel_10_0EFEB00033E6898053D6CAD40B4F695C;//[Offset: 0x40 , Size: 4]
	int ActionID2_11_54574F000C46D17A2A24097C014062A2;//[Offset: 0x44 , Size: 4]
	int ActionID3_12_54584F400C46D17B2A24097B014062A3;//[Offset: 0x48 , Size: 4]
	FString PetFPPCharacter_13_2475CEC05F8CAFC156D174270BE8BD92;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x24 , Size: 1]
	byte StateChangeType;//[Offset: 0x25 , Size: 1]

--------------------------------
Class: BP_STRUCT_PetActionTable_type
	FString PetActionDes_0_4DEDCA007AFFDB12510AFD0F0DB194C3;//[Offset: 0x0 , Size: 12]
	int PetLevelSequence_1_620F97C0416DE81971E437D407E050C5;//[Offset: 0xc , Size: 4]
	int PetActionID_2_44C4A640765EB8DD578572F800DB1934;//[Offset: 0x10 , Size: 4]
	int PetActionScale_3_14B83D0078112AE64FD26A6101879B95;//[Offset: 0x14 , Size: 4]
	int MasterLevelSequence_4_7E9F6880389AC7D05D27B6F50E5E3325;//[Offset: 0x18 , Size: 4]
	FString LobbyPetAnimRes_5_14DFB5407421995D3FD421710D4C3683;//[Offset: 0x1c , Size: 12]
	int ShowInLobby_6_19FCF54003CF4A8B499026D50669DDB9;//[Offset: 0x28 , Size: 4]
	int MasterActionID_7_41F257005172E64A6B5508ED0B3D43A4;//[Offset: 0x2c , Size: 4]
	FString PetAnimRes_8_1054B74062846F873F7F61870FE97D73;//[Offset: 0x30 , Size: 12]
	FString PetActionName_9_59EBE3401D89CA4B649608870B1AA8E5;//[Offset: 0x3c , Size: 12]
	int SortKey_10_4284558068BCA7003662F2D30BFA2BB9;//[Offset: 0x48 , Size: 4]
	int PetID_11_6745CEC017101D417C9B58B90A755B44;//[Offset: 0x4c , Size: 4]
	int PetActionQuality_12_0B0B3D40109F72EB3D20AE6206BBA139;//[Offset: 0x50 , Size: 4]
	FString PetActionIcon_13_0E01054077EEE9A96496CC090B191A8E;//[Offset: 0x54 , Size: 12]
	int NeedResetTransform_14_2D3D5000702BED64355585DF0DB7ED2D;//[Offset: 0x60 , Size: 4]
	FString PetActionOffset_15_563A3CC0122E069573D974410ABC02D4;//[Offset: 0x64 , Size: 12]

--------------------------------
Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void PetHasEquippedItem(int ID, out bool Out, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HasLogicEquipped_ReturnValue);// 0x1bf56d0
	void PetUnequipItemById(int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnEquipItem_ReturnValue);// 0x1bf56d0
	void PetEquipItemById(int ID, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x1bf56d0
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x1bf56d0

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void InitMasterComponent();// 0x13d9420
	void Initialize();// 0x133689c
	void InitialAvatarParam();// 0x12dedb4

--------------------------------
Class: BP_STRUCT_PetDressBlueprintTable_type
	int ID_0_688F3A8033A7814C565560B30E5FAEF4;//[Offset: 0x0 , Size: 4]
	FString Path_1_51589A804E9002622E9485530FAF46F8;//[Offset: 0x4 , Size: 12]
	int Slot_2_31125FC006688BBB2E6646B20FAFCD34;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: BP_FloatingText_C.FloatingTextComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd8 , Size: 4]
	void OnSetFloatingTextSetting(bool IsEnable);// 0x1bf56d0
	void InitFloatingTextSetting(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void RecycleWidght(FloatingText_UIBP_C* RecycleWidget, FloatingText_UIBP_C* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x1bf56d0
	void GetWidget(out FloatingText_UIBP_C* Output, FloatingText_UIBP_C* TempWidget, float CallFunc_GetTime_ReturnValue, int CallFunc_Array_Add_ReturnValue, FloatingText_UIBP_C* CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue2, FloatingText_UIBP_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FloatingText_UIBP_C* CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void CreateFloatingText(out const FloatingTextData FloatingTextData);// 0x1bf56d0
	void ExecuteUbergraph_BP_FloatingText(int EntryPoint, FloatingTextData K2Node_Event_FloatingTextData);// 0x1bf56d0
	CurveFloat* OffsetXCurve;//[Offset: 0xdc , Size: 4]
	int MaxWidgetNum;//[Offset: 0xe0 , Size: 4]
	FloatingText_UIBP_C*[] IdleWidgetList;//[Offset: 0xe4 , Size: 12]
	FloatingText_UIBP_C*[] ShowWidgetList;//[Offset: 0xf0 , Size: 12]
	float[] RecycleTimeList;//[Offset: 0xfc , Size: 12]
	float RecycleTime;//[Offset: 0x108 , Size: 4]
	bool IsEnableFloatingText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	CurveFloat* OffsetYCurve;//[Offset: 0x110 , Size: 4]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x13794a8
	void CreateFloatingText(out const FloatingTextData FloatingTextData);// 0x1bf56d0
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x13793b4

--------------------------------
Class: FloatingText_UIBP_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0 , Size: 4]
	void PlayAnim(Vector2D Loc, float count, bool bHeadShot, float Scale, Vector WorldPos, Vector RandOffset, int FontSize, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector2D CallFunc_ProjectWorldToScreen_ScreenPosition, bool CallFunc_ProjectWorldToScreen_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x1bf56d0
	void PreConstruct(bool IsDesignTime);// 0x1bf56d0
	void Construct();// 0x1bf56d0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1bf56d0
	void ExecuteUbergraph_FloatingText_UIBP(int EntryPoint, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector2D CallFunc_ProjectWorldToScreen_ScreenPosition, bool CallFunc_ProjectWorldToScreen_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsVisible_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue);// 0x1bf56d0
	WidgetAnimation* fade;//[Offset: 0x1b4 , Size: 4]
	SizeBox* SizeBox;//[Offset: 0x1b8 , Size: 4]
	TextBlock* Text_floating;//[Offset: 0x1bc , Size: 4]
	Vector2D Loc;//[Offset: 0x1c0 , Size: 8]
	float count;//[Offset: 0x1c8 , Size: 4]
	Vector2D dstLoc;//[Offset: 0x1cc , Size: 8]
	BP_FloatingText_C* CmpMgr;//[Offset: 0x1d4 , Size: 4]
	Vector WorldPos;//[Offset: 0x1d8 , Size: 12]
	Vector RandomOffset;//[Offset: 0x1e4 , Size: 12]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0 , Size: 4]
	Object* FontMaterial;//[Offset: 0x4 , Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8 , Size: 28]
	FName TypefaceFontName;//[Offset: 0x30 , Size: 8]
	int Size;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0 , Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4 , Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8 , Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9 , Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9 , Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd9 , Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd9 , Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd9 , Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd9 , Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd9 , Size: 1]
	float WidthOverride;//[Offset: 0xdc , Size: 4]
	float HeightOverride;//[Offset: 0xe0 , Size: 4]
	float MinDesiredWidth;//[Offset: 0xe4 , Size: 4]
	float MinDesiredHeight;//[Offset: 0xe8 , Size: 4]
	float MaxDesiredWidth;//[Offset: 0xec , Size: 4]
	float MaxDesiredHeight;//[Offset: 0xf0 , Size: 4]
	float MaxAspectRatio;//[Offset: 0xf4 , Size: 4]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x238a61c
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x238a5a4
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x238a52c
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x238a4b4
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x238a43c
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x238a3c4
	void SetHeightOverride(float InHeightOverride);// 0x238a34c
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x238a2cc
	bool GetDontPaintWhenChildEmpty();// 0x238a2a4
	void ClearWidthOverride();// 0x238a290
	void ClearMinDesiredWidth();// 0x238a27c
	void ClearMinDesiredHeight();// 0x238a268
	void ClearMaxDesiredWidth();// 0x238a254
	void ClearMaxDesiredHeight();// 0x238a240
	void ClearMaxAspectRatio();// 0x238a22c
	void ClearHeightOverride();// 0x238a218

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x237af68
	PanelSlot* GetContentSlot();// 0x237af40
	Widget* GetContent();// 0x237af18

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0 , Size: 12]
	delegate TextDelegate;//[Offset: 0x100 , Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110 , Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130 , Size: 16]
	SlateFontInfo Font;//[Offset: 0x140 , Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x180 , Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x188 , Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x198 , Size: 16]
	float MinDesiredWidth;//[Offset: 0x1a8 , Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac , Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad , Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x238fb1c
	void SetText(FText InText);// 0x238f86c
	void SetShadowOffset(Vector2D InShadowOffset);// 0x238f7fc
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x238f780
	void SetOpacity(float InOpacity);// 0x238f708
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x238f690
	void SetJustification(byte InJustification);// 0x238f618
	void SetFont(SlateFontInfo InFontInfo);// 0x238f300
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x238efe0
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x238ef54
	FText GetText();// 0x238edf8

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcc , Size: 4]
	byte Justification;//[Offset: 0xd0 , Size: 1]
	byte VerticalJustification;//[Offset: 0xd1 , Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]
	float WrapTextAt;//[Offset: 0xd4 , Size: 4]
	enum WrappingPolicy;//[Offset: 0xd8 , Size: 1]
	Margin Margin;//[Offset: 0xdc , Size: 16]
	float LineHeightPercentage;//[Offset: 0xec , Size: 4]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	enum TextShapingMethod;//[Offset: 0x1 , Size: 1]
	enum TextFlowDirection;//[Offset: 0x2 , Size: 1]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0 , Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7c0 , Size: 4]
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, bool CallFunc_IsBattleItemHandleExist_ReturnValue, AvatarTableData CallFunc_MakeAvatarTableData_ReturnValue, AvatarTableData CallFunc_MakeAvatarTableData_ReturnValue2, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x1bf56d0
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1bf56d0
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x1bf56d0
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, BattleItemHandle_HeadBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Head_BP, bool K2Node_DynamicCast_bSuccess, int ___int_Variable2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, int ___int_Variable3, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x1bf56d0
	bool BPClientPostProcessViewDataMiddle();// 0x1bf56d0
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, int CallFunc_TypeToInt_ReturnValue4, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, int CallFunc_TypeToInt_ReturnValue15, bool CallFunc_ModifySyncDataByReplace_ReturnValue4);// 0x1bf56d0
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x1bf56d0
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x1bf56d0
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum ___byte_Variable, enum CallFunc_IntToType_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int ___int_Variable7, int ___int_Variable8, int ___int_Variable9, int ___int_Variable10, int ___int_Variable11, int ___int_Variable12, int ___int_Variable13, int ___int_Variable14, int K2Node_Select_Default);// 0x1bf56d0
	void CheckAvatarWhoHideWho(enum slotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x1bf56d0
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x1bf56d0
	void SetEquipmentPattern(enum slotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	void SetEquipmentColor(enum slotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x1bf56d0
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x1bf56d0
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x1bf56d0
	MaterialInterface* GetCharSkinMaterial(enum slotType, ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle, byte TempSlotNameConfig, FString MatSlotName, int ___int_Variable, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, int ___int_Variable2, int CallFunc_Len_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString K2Node_Select_Default, StructAvatarSlotNameConfig CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Map_Find_Value4, bool CallFunc_Map_Find_ReturnValue4, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Map_Find_Value5, bool CallFunc_Map_Find_ReturnValue5, MaterialInterface* CallFunc_GetMaterial_ReturnValue, FString K2Node_Select2_Default, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x1bf56d0
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, BattleItemHandle_HeadBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Head_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, ItemHandleBase* CallFunc_GetAvatarHandleExternal_ReturnValue, int ___int_Array_Index_Variable, BattleItemHandle_HeadBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Head_BP2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, ItemHandleBase* CallFunc_GetAvatarHandleExternal_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, BackpackAvatarHandle* K2Node_DynamicCast_AsBackpack_Avatar_Handle, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_PutOnDefaultEquipment_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1bf56d0
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x1bf56d0
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x1bf56d0
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x1bf56d0
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2);// 0x1bf56d0
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0x7c4 , Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0x7c8 , Size: 4]
	<byte,StructAvatarSlotNameConfig> SlotNameMap;//[Offset: 0x7cc , Size: 60]
	StructAvatarSlotNameConfig DefaultSlotNameMap;//[Offset: 0x808 , Size: 120]

--------------------------------
Class: BattleItemHandle_HeadBP_C.BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	int[] BodyResIDList;//[Offset: 0x76c , Size: 12]

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x1bf56d0
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x1bf56d0
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x1bf56d0
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, ItemDefineID CallFunc_GetDefineID_ReturnValue, bool CallFunc_IsPatchDefineItem_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_GetRandomPutDownLocation_IsHittedAttachableActor, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Actor* CallFunc_GetAttachableActor_ReturnValue, Actor* CallFunc_GetAttachableActor_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x1bf56d0
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x1bf56d0
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_WrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x1bf56d0
	bool HandlePickup(out interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x1bf56d0
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, ItemAssociation K2Node_MakeStruct_ItemAssociation, ItemDefineID CallFunc_GetDefineID_ReturnValue3, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x1bf56d0
	STExtraPlayerController* OwningPlayerController;//[Offset: 0x6e8 , Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x6ec , Size: 4]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0x6f0 , Size: 4]
	Transform SourceWrapperTrans;//[Offset: 0x700 , Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0x730 , Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x760 , Size: 4]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0x764 , Size: 4]
	byte SlotNameConfig;//[Offset: 0x768 , Size: 1]
	byte ForceGender;//[Offset: 0x769 , Size: 1]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xb4 , Size: 12]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xc0 , Size: 60]
	<int,enum> TClipTypeMap;//[Offset: 0xfc , Size: 60]
	<int,ItemRecordData> mapItemRecord;//[Offset: 0x138 , Size: 60]
	<int,int> mapPickupBullet;//[Offset: 0x174 , Size: 60]
	<int,enum> mapAttachPos;//[Offset: 0x1b0 , Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x1ec , Size: 196]
	PickupProposeData proposeData;//[Offset: 0x2b0 , Size: 220]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x38c , Size: 60]
	<FName,TagItemList> ItemTag;//[Offset: 0x3c8 , Size: 60]
	<int,ItemTagList> ItemTagMap;//[Offset: 0x404 , Size: 60]
	enum CurrentGameModeType;//[Offset: 0x44c , Size: 1]
	FString ItemTableName;//[Offset: 0x450 , Size: 12]
	FString ItemTagTableName;//[Offset: 0x45c , Size: 12]
	FString AttachTableName;//[Offset: 0x468 , Size: 12]
	FString SuitEmoteTableName;//[Offset: 0x474 , Size: 12]
	FString OccupationTableName;//[Offset: 0x480 , Size: 12]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c , Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0x490 , Size: 60]
	<int,int> gunMainTypeUseful;//[Offset: 0x4cc , Size: 60]
	<int,int> attachMainTypeUseful;//[Offset: 0x508 , Size: 60]
	<int,int> bulletMainTypeUseful;//[Offset: 0x544 , Size: 60]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x580 , Size: 60]
	<int,int> constructTypeUseful;//[Offset: 0x5bc , Size: 60]
	<int,float> ItemWeight;//[Offset: 0x5f8 , Size: 60]
	<int,int> skillpropsTypeUseful;//[Offset: 0x634 , Size: 60]
	<int,bool> itemPathExist;//[Offset: 0x670 , Size: 60]
	int[] ItemToDownload;//[Offset: 0x6ac , Size: 12]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0x6b8 , Size: 60]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4 , Size: 1]
	int CharacterVirtualItem_Type;//[Offset: 0x6f8 , Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0x6fc , Size: 4]
	<int,FString> BPTableNameMap;//[Offset: 0x700 , Size: 60]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0x73c , Size: 60]
	<int> NoUseVirtualItemIDs;//[Offset: 0x778 , Size: 60]
	void ResetItemToDownload();// 0x1311908
	void OnGameModeTypeChanged();// 0x13118ec
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x1311830
	bool IsPatchItem(int ItemID);// 0x13117a8
	bool IsParachuteItemType(int ItemID);// 0x1311720
	bool IsOpenQuickSwitchSubWeapon();// 0x1bf56d0
	bool IsInPveMode();// 0x1bf56d0
	bool IsGlideItemType(int ItemID);// 0x1311698
	bool IsGhillieSuitItemType(int ItemID);// 0x1311610
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x131154c
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache);// 0x1311468
	bool Is3BackpackID(int ID);// 0x1bf56d0
	void InitialItemTable();// 0x131144c
	bool HasTagSub(int ItemID, out const FName TagName);// 0x1311374
	bool HasTag(int ItemID, out const FName TagName);// 0x131129c
	int GetWeaponSkinWeaponID(int InWeaponSkinID);// 0x1bf56d0
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x1bf56d0
	FString GetRawBattleTextByType(enum Type);// 0x131118c
	FString GetRawBattleTextByRawTextID(int ID);// 0x131107c
	int GetPendantIDByWeaponID(int WeaponID);// 0x1310ff4
	int GetItemSubTypeID(int SpecificID);// 0x1bf56d0
	ItemRecordData GetItemRecord(int ItemID);// 0x1310f48
	bool GetItemOperationSoundAndBankCpp(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x1310d50
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x1bf56d0
	int GetEquipmentLevel(int ItemID);// 0x1310cc8
	int GetEquipmentBagLevel(int ItemID);// 0x1310c40
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x1310b8c
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x1310b04
	FString GetBPTableNameInner(int Type, int TypeSpecificID);// 0x13109b8
	FString GetBPTableNameByItemID(ItemDefineID DefineID);// 0x1310898
	int GetBPIDByResID(int resID);// 0x1310810
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(ItemDefineID DefineID);// 0x1310690
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID);// 0x1310570
	FString GetBattleItemHandlePath(ItemDefineID DefineID);// 0x1310450
	void GetBattleItemFeatureDataByItemIDRef(int ItemID, out BattleItemFeatureData OutData);// 0x131036c
	void GetBattleItemFeatureDataByItemID(int ItemID, out BattleItemFeatureData OutData);// 0x1310288
	void GetBattleItemFeatureDataByDefineIDRef(out const ItemDefineID DefineID, out BattleItemFeatureData OutData);// 0x131018c
	void GetBattleItemFeatureDataByDefineID_CPP(out const ItemDefineID DefineID, out BattleItemFeatureData OutData);// 0x1310090
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x130ffe4
	int[] GetAttachOfWeapon(int WeaponID);// 0x130fedc
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x130fdb0
	TagItemList FindItemTag(out const FName TagName);// 0x130fcd8
	BattleItemHandleBase* CreateVirtualItemHandle(ItemDefineID DefineID, Object* Outer);// 0x130fbfc
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer);// 0x130fb20
	BattleItemHandleBase* CreateBattleItemHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x130f9f4
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x130f940
	BattleItemData ConstructBattleItemDataByDefineID(ItemDefineID DefineID);// 0x130f87c
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x130f7b8

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	Object* Outer;//[Offset: 0x18 , Size: 4]
	FString Path;//[Offset: 0x1c , Size: 12]
	delegate Callback;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0 , Size: 12]
	FString[] PathList;//[Offset: 0xc , Size: 12]
	Object* Outer;//[Offset: 0x18 , Size: 4]
	delegate Callback;//[Offset: 0x20 , Size: 16]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0 , Size: 4]
	int LimitBandage_pve;//[Offset: 0x4 , Size: 4]
	int LimitMedical;//[Offset: 0x8 , Size: 4]
	int LimitMedical_pve;//[Offset: 0xc , Size: 4]
	int LimitFirstAidKit;//[Offset: 0x10 , Size: 4]
	int LimitFirstAidKit_pve;//[Offset: 0x14 , Size: 4]
	int LimitAnodyne;//[Offset: 0x18 , Size: 4]
	int LimitAnodyne_pve;//[Offset: 0x1c , Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x20 , Size: 4]
	int LimitEnergyDrinks_pve;//[Offset: 0x24 , Size: 4]
	int LimitAdrenaline;//[Offset: 0x28 , Size: 4]
	int LimitAdrenaline_pve;//[Offset: 0x2c , Size: 4]
	int LimitShouliudan;//[Offset: 0x30 , Size: 4]
	int LimitShouliudan_pve;//[Offset: 0x34 , Size: 4]
	int LimitYanwudan;//[Offset: 0x38 , Size: 4]
	int LimitYanwudan_pve;//[Offset: 0x3c , Size: 4]
	int LimitZhenbaodan;//[Offset: 0x40 , Size: 4]
	int LimitZhenbaodan_pve;//[Offset: 0x44 , Size: 4]
	int LimitRanshaodan;//[Offset: 0x48 , Size: 4]
	int LimitRanshaodan_pve;//[Offset: 0x4c , Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x50 , Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x54 , Size: 4]
	int LimitAntidote;//[Offset: 0x58 , Size: 4]
	int LimitBatteryChip;//[Offset: 0x5c , Size: 4]
	int LimitBullet9mm;//[Offset: 0x60 , Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x64 , Size: 4]
	int Limit12koujing;//[Offset: 0x68 , Size: 4]
	int Limit45koujing;//[Offset: 0x6c , Size: 4]
	int Limit300magenandanyao;//[Offset: 0x70 , Size: 4]
	int Limitbolt;//[Offset: 0x74 , Size: 4]
	int LimitBullet5;//[Offset: 0x78 , Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]
	bool AutoPickupPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d , Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e , Size: 1]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f , Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	int LimitSniper2X;//[Offset: 0x84 , Size: 4]
	int LimitSniper2X_pve;//[Offset: 0x88 , Size: 4]
	int LimitSniper3X;//[Offset: 0x8c , Size: 4]
	int LimitSniper3X_pve;//[Offset: 0x90 , Size: 4]
	int LimitSniper4X;//[Offset: 0x94 , Size: 4]
	int LimitSniper4X_pve;//[Offset: 0x98 , Size: 4]
	int LimitSniper6X;//[Offset: 0x9c , Size: 4]
	int LimitSniper6X_pve;//[Offset: 0xa0 , Size: 4]
	int LimitSniper8X;//[Offset: 0xa4 , Size: 4]
	int LimitSniper8X_pve;//[Offset: 0xa8 , Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	int LimitSkillProps;//[Offset: 0xb0 , Size: 4]
	bool AutoPickupSkillProps_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	int LimitSkillProps_pve;//[Offset: 0xb8 , Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	int AutoPickClipType;//[Offset: 0xc0 , Size: 4]

--------------------------------
Class: PickupProposeData
	int[] pickFirst;//[Offset: 0x0 , Size: 12]
	int closeSubType;//[Offset: 0xc , Size: 4]
	int crossbowSubType;//[Offset: 0x10 , Size: 4]
	int panID;//[Offset: 0x14 , Size: 4]
	int pistolSubType;//[Offset: 0x18 , Size: 4]
	int gunType;//[Offset: 0x1c , Size: 4]
	int specialType;//[Offset: 0x20 , Size: 4]
	int specialType2;//[Offset: 0x24 , Size: 4]
	int lens2ID;//[Offset: 0x28 , Size: 4]
	int lens3ID;//[Offset: 0x2c , Size: 4]
	int lens4ID;//[Offset: 0x30 , Size: 4]
	int lens6ID;//[Offset: 0x34 , Size: 4]
	int lens8ID;//[Offset: 0x38 , Size: 4]
	int ID2Type;//[Offset: 0x3c , Size: 4]
	int pistolClipSubType;//[Offset: 0x40 , Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x44 , Size: 4]
	int SniperClipSubType;//[Offset: 0x48 , Size: 4]
	int RifleClipSubType;//[Offset: 0x4c , Size: 4]
	int gasSubID;//[Offset: 0x50 , Size: 4]
	int backSubType;//[Offset: 0x54 , Size: 4]
	int back3ID;//[Offset: 0x58 , Size: 4]
	int BandageID;//[Offset: 0x5c , Size: 4]
	int EnergyDrinksID;//[Offset: 0x60 , Size: 4]
	int AdrenalineID;//[Offset: 0x64 , Size: 4]
	int AnodyneID;//[Offset: 0x68 , Size: 4]
	int Medical1ID;//[Offset: 0x6c , Size: 4]
	int Medical2ID;//[Offset: 0x70 , Size: 4]
	int AntidoteID;//[Offset: 0x74 , Size: 4]
	int BatteryChipID;//[Offset: 0x78 , Size: 4]
	int ZhenBaoDan;//[Offset: 0x7c , Size: 4]
	int YanWuDan;//[Offset: 0x80 , Size: 4]
	int RanShaoPing;//[Offset: 0x84 , Size: 4]
	int ShouLei;//[Offset: 0x88 , Size: 4]
	int[] SideMirrorList;//[Offset: 0x8c , Size: 12]
	int[] MirrorList;//[Offset: 0x98 , Size: 12]
	int GrenadeZombie;//[Offset: 0xa4 , Size: 4]
	int GrenadeYedan;//[Offset: 0xa8 , Size: 4]
	int DefaultMedicineNum;//[Offset: 0xac , Size: 4]
	int helmetSubType;//[Offset: 0xb0 , Size: 4]
	int armorSubType;//[Offset: 0xb4 , Size: 4]
	int ScoreItemSubType;//[Offset: 0xb8 , Size: 4]
	int[] carryOnPlane;//[Offset: 0xbc , Size: 12]
	int CapacityThreshold;//[Offset: 0xc8 , Size: 4]
	int GlideSubType;//[Offset: 0xcc , Size: 4]
	int ParachuteItemSubType;//[Offset: 0xd0 , Size: 4]
	int revivalCardID;//[Offset: 0xd4 , Size: 4]
	float revivalCardValidTime;//[Offset: 0xd8 , Size: 4]

--------------------------------
Class: TagItemList
	int[] tagList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: ItemTagList
	<FName,int> TagValueMap;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: EquipmentBrief
	int ItemID;//[Offset: 0x0 , Size: 4]
	int ItemSubType;//[Offset: 0x4 , Size: 4]
	int BPID;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0 , Size: 12]
	FString WhiteIconPath;//[Offset: 0xc , Size: 12]

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7b8 , Size: 4]
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	bool IsOpenQuickSwitchSubWeapon(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	bool IsGlideItemType(int ItemID, BP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	bool IsGhillieSuitItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x1bf56d0
	int GetEquipmentBagLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1bf56d0
	int GetEquipmentLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x1bf56d0
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x1bf56d0
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1bf56d0
	bool IsPatchItem(int ItemID, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetBoolFromTable_ReturnValue);// 0x1bf56d0
	void CreateBattleItemHandle_DefaultBPID(int Type, int TypeSpecificID, Object* Outer, out BattleItemHandleBase* BattleItemHandle, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetBPTableName_BPTableName, int CallFunc_GetIntFromTable_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, int ___int_Variable, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, int ___int_Variable2, int K2Node_Select_Default, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int K2Node_Select2_Default, int ___int_Variable6, int K2Node_Select3_Default, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x1bf56d0
	void ModifySetting();// 0x1bf56d0
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x1bf56d0
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsPveMode_out, bool ___bool_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FName CallFunc_Array_Get_Item, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_Length_ReturnValue, <int,int> K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1bf56d0
	int GetBPIDByResID(int resID, BP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x1bf56d0
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1bf56d0
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x1bf56d0
	FString GetBattleItemHandlePath(ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_BPTableName, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetIntFromTable_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x1bf56d0
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	FString GetRawBattleTextByType(enum Type, FName RowName, bool K2Node_SwitchEnum_CmpSuccess, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	int GetItemSubTypeID(int SpecificID, ItemRecordData CallFunc_GetItemRecord_ReturnValue);// 0x1bf56d0
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(ItemDefineID DefineID, FString Local_ItemWhiteIcon, FString Local_ItemName, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAETableRow CallFunc_GetTableDataRowStruct_ReturnValue, FString CallFunc_GetRowString_ReturnValue, FString CallFunc_GetRowString_ReturnValue2, FString CallFunc_GetLocalizationString_ReturnValue, FString CallFunc_GetLocalizationString_ReturnValue2, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x1bf56d0
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, BP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x1bf56d0
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1bf56d0
	void GetBPTableName(int Type, int TypeSpecificID, out FString BPTableName, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface classByteProperty CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, out BattleItemHandleBase* BattleItemHandle, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetBPTableName_BPTableName, int CallFunc_GetIntFromTable_ReturnValue, int CallFunc_GetIntFromTable_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_DefaultBPID_BattleItemHandle, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x1bf56d0
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, BattleItemFeatureData BattleItemFeatureData, BattleItemFeatureData CallFunc_GetBattleItemFeatureDataByDefineIDRef_Outdata);// 0x1bf56d0
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureDataByDefineIDRef_Outdata);// 0x1bf56d0
	BattleItemHandleBase* CreateBattleItemHandle(ItemDefineID DefineID, Object* Outer, bool bLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, BattleItemFeatureData CallFunc_GetBattleItemFeatureDataByDefineIDRef_Outdata, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1bf56d0
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x1bf56d0
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, BP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureDataByDefineIDRef_Outdata, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x1bf56d0
	BattleItemData ConstructBattleItemDataByDefineID(ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureDataByDefineIDRef_Outdata, BP_STRUCT_Item_type CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x1bf56d0
	void GetItemTableRowByItemTableID(int ID, out BP_STRUCT_Item_type ItemTableRow, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x1bf56d0
	void InitialItemTable();// 0x1bf56d0
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x1bf56d0
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0x7bc , Size: 12]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0x7c8 , Size: 60]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0x804 , Size: 12]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0x810 , Size: 60]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0x84c , Size: 60]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0x888 , Size: 60]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0x8c4 , Size: 60]
	int[] GhillieSuitItem;//[Offset: 0x900 , Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0 , Size: 12]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0xc , Size: 4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x10 , Size: 4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x14 , Size: 12]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: BP_STRUCT_ItemSoundTable_type
	FString DropBank_0_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x0 , Size: 12]
	int ID_1_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0xc , Size: 4]
	FString PickUpSound_2_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x10 , Size: 12]
	FString DropSound_3_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0x1c , Size: 12]
	FString EquipSound_4_068B68C066212493052EBF3305D63E14;//[Offset: 0x28 , Size: 12]
	FString UnEquipBank_5_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x34 , Size: 12]
	FString PickUpBank_6_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x40 , Size: 12]
	FString EquipBank_7_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x4c , Size: 12]
	FString UnEquipSound_8_0376B980772F43423C77A2D80D665704;//[Offset: 0x58 , Size: 12]

--------------------------------
Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0 , Size: 4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4 , Size: 4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8 , Size: 4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc , Size: 4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10 , Size: 4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14 , Size: 4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18 , Size: 4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x1bf56d0

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: StructAvatarSlotNameConfig
	<enum,FString> MaleSlotName_18_7FE1681B41EEB7EBCDE882913B2F14FA;//[Offset: 0x0 , Size: 60]
	<enum,FString> FemaleSlotName_19_D3A83E3D4F5ACA7D24D195B573FB01B1;//[Offset: 0x3c , Size: 60]

--------------------------------
Class: HoldComponent_C.ReusableActorComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc0 , Size: 4]
	void HoldTime(out float Time, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x1bf56d0
	void Release(byte FingerIndex, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_HoldTime_Time, PlayerController* CallFunc_GetPlayerController_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x1bf56d0
	void Push(int FingerIndex, float CallFunc_GetTimeSeconds_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void OnReturnToPool();// 0x1bf56d0
	void ExecuteUbergraph_HoldComponent(int EntryPoint);// 0x1bf56d0
	void HoldAndRelease__DelegateSignature(int FingeerIndex);// 0x1bf56d0
	delegate HoldAndRelease;//[Offset: 0xc4 , Size: 12]
	float HoldTimeThreshold;//[Offset: 0xd0 , Size: 4]
	int HoldFingerIndex;//[Offset: 0xd4 , Size: 4]
	byte HoldMode;//[Offset: 0xd8 , Size: 1]
	float PushTime;//[Offset: 0xdc , Size: 4]
	bool isPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]

--------------------------------
Class: ReusableActorComponentBase.ActorComponent.Object
	void OnReturnToPool();// 0x1bf56d0
	void OnGetFromPool();// 0x1bf56d0

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x780 , Size: 4]
	float FreeCameraOffsetRadius;//[Offset: 0x7a0 , Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x7a4 , Size: 60]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0 , Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x7e4 , Size: 12]
	float ProbeRadius;//[Offset: 0x7f0 , Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x7f4 , Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x7f8 , Size: 4]
	float DefaultFieldOfView;//[Offset: 0x7fc , Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x800 , Size: 4]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x13d57b0

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x358 , Size: 28]
	Transform InVehicleCameraTrans;//[Offset: 0x380 , Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x3b0 , Size: 28]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1379e1c

--------------------------------
Class: STScreenAppearanceComponentAdditional.STScreenAppearanceComponent.ActorComponent.Object
	FName ShaderUniformName;//[Offset: 0x150 , Size: 8]
	MaterialInstanceDynamic* currentMatInstanceDynamic;//[Offset: 0x194 , Size: 4]
	void StopScreenAppearanceWithTag(FString AppearanceName, FString TagString);// 0x14e7b38
	MaterialInstanceDynamic* PlayCustomScreenAppearanceWithTag(FString AppearanceName, FString TagString, FName paramShaderUniformName, MaterialInterface* MatToPlay, float LifeSpan);// 0x14e7918

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x240 , Size: 1232]
	float Priority;//[Offset: 0x710 , Size: 4]
	float BlendRadius;//[Offset: 0x714 , Size: 4]
	float BlendWeight;//[Offset: 0x718 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c , Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c , Size: 1]
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x2db5f0c

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x210 , Size: 4]
	float AttachSightLens(STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetScopeID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1bf56d0
	float DetachSightLens();// 0x1bf56d0
	float SwitchSightConfigMaterial(bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_GetScopeID_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x1bf56d0
	float ShowReflectorSightTPPMaterial(bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, byte CallFunc_GetCurSightType_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void GetScopeCameraAttachTarget(out MeshComponent* NewParam, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x1bf56d0
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, int CallFunc_GetPlatformInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue);// 0x1bf56d0
	void SetTagCulling(bool IsUse);// 0x1bf56d0
	void PlayScopeInTimeline();// 0x1bf56d0
	void StopScopeIn();// 0x1bf56d0
	void AttachToSight();// 0x1bf56d0
	void AttachTo(SceneComponent* NewParam);// 0x1bf56d0
	void Detach(SceneComponent* NewParam);// 0x1bf56d0
	void ReloadEvent();// 0x1bf56d0
	void ScopeInEnd();// 0x1bf56d0
	void ScopeOutEnd();// 0x1bf56d0
	void AutoReloadEvent(STExtraShootWeapon* ShootWeapon);// 0x1bf56d0
	void ExecuteUbergraph_FPPComponent(int EntryPoint, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, bool K2Node_Event_IsUse, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, SceneComponent* K2Node_CustomEvent_NewParam2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_NewParam, SceneComponent* K2Node_CustomEvent_NewParam, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_K2_AttachToComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue3);// 0x1bf56d0
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x214 , Size: 4]
	float DeltaTime;//[Offset: 0x218 , Size: 4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x21c , Size: 4]
	StaticMesh* SightLens;//[Offset: 0x220 , Size: 4]

--------------------------------
Class: BP_STRUCT_WeaponScopeMaterial_type
	FString ScopeGroupID_0_289E4F406E35B6A1337959050F04DD14;//[Offset: 0x0 , Size: 12]
	FString ScopeMaterial_1_4BEFD48030177D8A6925FD700F8D124C;//[Offset: 0xc , Size: 12]
	FString ScopeMaterialSocket_2_63700EC07064DCC960E067A00E289394;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponScopeFOV_type
	FString ScopeGroupID_6_49CF3E400C41B18D667A9238018BF244;//[Offset: 0x0 , Size: 12]
	float ScopeFov_f_7_6553D3C0033D7BFF701FD78D06949766;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Vault_Controller_C.PlayerVaultComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x128 , Size: 4]
	void JumpVaultCheck(out bool Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x1bf56d0
	void SetShouldAdjustHeight(int CallFunc_FindSubstring_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1bf56d0
	void SetNowUseFpsVault(STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1bf56d0
	void ServerCrossingBlockCheck(Vector StartPos, float distoblock, float blockheight, Rotator movedir, out bool Result, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, Actor*[] K2Node_MakeArray_Array, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x1bf56d0
	void UpdateMoveMode(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1bf56d0
	FString GetVaultKeyByBlockHeight(float Height, float CallFunc_GetJumpLengthByHeight_length);// 0x1bf56d0
	void fpsVaultGetRotaion(out Rotator rotion, Rotator CallFunc_GetRelicateRotator_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void SetFpsVaultSpeed(float nowDataHeight, float nowfpsBlockheight, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x1bf56d0
	void FpsVaultGetTppAnimationInfo(out FString animationname, out float animationTime, out float PlayRate, float animationrate, float nowfpsBlockheight, float nowDataHeight, float nowTime, FString nowAnimationName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x1bf56d0
	void FpsGetTotalTime(out float TotalTime, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue2, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue2);// 0x1bf56d0
	void FpsTestLimitPostion(Vector nowpostion, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x1bf56d0
	void FpsVaultTrigger(Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2);// 0x1bf56d0
	void FpsVaultServerCheating(Vector playerpos, Vector topPos, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1bf56d0
	void FpsVaultStart(Vector StartPos, Vector topPos, float offsetMaxX, float offsetMaxY, bool isjump, Rotator palyerRtion, float blocklength, Vector toblockHitVec, float CallFunc_VSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_FpsVaultGetTppAnimationInfo_animationname, float CallFunc_FpsVaultGetTppAnimationInfo_animationTime, float CallFunc_FpsVaultGetTppAnimationInfo_playrate, FName CallFunc_Conv_StringToName_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_FpsGetTotalTime_totalTime, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Normal_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_PlayAnimMontage_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue2, float CallFunc_PlayAnimMontage_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_EnterState_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_HasState_ReturnValue);// 0x1bf56d0
	void FpsVaultGetNowPostion(float nowPastTime, out Vector nowpostion, out bool isGet, float OnBlockTime, float DownTotalTime, float UpTotalTime, float PastTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_VLerp_ReturnValue2, float CallFunc_VSize_ReturnValue2, bool CallFunc_FpsTestLimitPostion_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue5, Vector CallFunc_VLerp_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue6);// 0x1bf56d0
	void FpsVualtUpdate(Vector NowTargetPostion, float nowPastTime, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_FpsVaultGetNowPostion_nowPostion, bool CallFunc_FpsVaultGetNowPostion_isGet, Rotator CallFunc_fpsVaultGetRotaion_rotion, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, Actor*[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x1bf56d0
	void SetStopForwardDis(float shoulddis, out float Result, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void DealBrokenWindows(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable2, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable2, ByteProperty* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, ByteProperty* CallFunc_Array_Get_Item2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x1bf56d0
	bool VaultFromCPP(bool CallFunc_CheckCanVault_isActive);// 0x1bf56d0
	void CheckVaultWindows(Vector CheckStart, Vector CheckEnd, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_SphereTraceMultiForObjects_OutHits, bool CallFunc_SphereTraceMultiForObjects_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, ByteProperty* K2Node_DynamicCast_AsBP_Window_Comp_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x1bf56d0
	void EnableCulling(bool bEnable, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void GetCliblastCheckDis(out float Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x1bf56d0
	void NowStateCheck(bool sprint, bool Walk, bool stand, out bool Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x1bf56d0
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation, float nowtestHeight, float nowSelectThickLength, FString nowkey, float nowThcklength, float nowheight, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4);// 0x1bf56d0
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool isVaild, float nowChckDis, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, vaultCheckRule CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x1bf56d0
	void IsValidVault(out bool IsValid, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2);// 0x1bf56d0
	void GetTestObjectChannels(out byte[] channels, byte[] K2Node_MakeArray_Array);// 0x1bf56d0
	void UpdateMontageSpeed(bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3);// 0x1bf56d0
	void ServerCheckBlockDis(Vector HitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float blocklength, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_VSize_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Abs_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_LessEqual_FloatFloat_ReturnValue5);// 0x1bf56d0
	void GetNowOppSideDis(out float Result, float totalLength, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x1bf56d0
	void CheckUpLengthBlock(out bool Result, float nowHeightTestHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue);// 0x1bf56d0
	void GetCrossMaxBlockDisOffsset(out bool Result, float TestCrossBlockMaxDis, float NowTestHalfHeight, Actor*[] ___object_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetNowOppSideDis_result, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue4, float CallFunc_VSize_ReturnValue);// 0x1bf56d0
	void SetLimitPostion(float XValue, float ZVaule, Vector realPos, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x1bf56d0
	void CheckForward(out bool IsActive, float nowCheckDis, Vector nowNormal, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, byte[] CallFunc_GetTestObjectChannels_channels2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, float CallFunc_Divide_FloatFloat_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue4, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit2, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_NotEqual_ObjectObject_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_ForwardTestObjectType_result, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_Normal_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_GetForwardVector_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector2D CallFunc_MakeVector2D_ReturnValue2, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x1bf56d0
	void CheckHeight(float Height, out bool IsActive, out Vector Point, float nowminheight, float testCapsuleRadius, Vector nowHitPoint, float nowCheckHeight, float nowHeightTestHeight, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor*[] K2Node_MakeArray_Array, float CallFunc_Add_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, byte[] CallFunc_GetTestObjectChannels_channels2, byte[] CallFunc_GetTestObjectChannels_channels3, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Actor*[] K2Node_MakeArray_Array3, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, int ___int_Loop_Counter_Variable, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, float CallFunc_BreakVector_X7, float CallFunc_BreakVector_Y7, float CallFunc_BreakVector_Z7, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, float CallFunc_BreakVector_X8, float CallFunc_BreakVector_Y8, float CallFunc_BreakVector_Z8, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x1bf56d0
	void GetJumpLengthByHeight(float Height, out float Length, float TestHeight, float nowheight, FString nowkey, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x1bf56d0
	void printReason(FString Result);// 0x1bf56d0
	void PrintEnable(PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_BoolToText_ReturnValue);// 0x1bf56d0
	void CacultLimitData(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue3);// 0x1bf56d0
	void GetCrossMaxBlockDisForward(out bool Result, float NowTestHalfHeight, float CallFunc_GetNowOppSideDis_result, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetParentActor_ReturnValue, Actor*[] K2Node_MakeArray_Array, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x1bf56d0
	void GetPlayerStartZ(out float Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x1bf56d0
	void GetCrossBlockMaxFallingHeight(float capsuleTestLefHeight, Actor*[] ___object_Variable, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_GetPlayerStartZ_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x1bf56d0
	void ForwardTestObjectType(Actor* Actor, out bool Result, Actor* NewLocalVar, LandscapeStreamingProxy* K2Node_DynamicCast_AsLandscape_Streaming_Proxy, bool K2Node_DynamicCast_bSuccess, Landscape* K2Node_DynamicCast_AsLandscape, bool K2Node_DynamicCast_bSuccess2, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess3);// 0x1bf56d0
	void SetEnd(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValidVault_isvalid, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir, bool CallFunc_IsValid_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue);// 0x1bf56d0
	void UpdatePostion2(float testhalfHeight, float ZOffset, Vector nowmoveOffset, float preTime, bool isUping, float shouldheight, float nowheight, float shoulddis, float nowdis, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_SetStopForwardDis_result, float CallFunc_GetAnimMontagePlayRate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, Actor*[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, float CallFunc_GetTimeSeconds_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetFloatValue_ReturnValue, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue4, float CallFunc_GetFloatValue_ReturnValue2, float CallFunc_GetFloatValue_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue5, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, HitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue6, float CallFunc_Subtract_FloatFloat_ReturnValue7, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x1bf56d0
	void GetNowData(bool IsInFalling, out bool isGet, float nowtestHeight, float nowSelectThickLength, float TestHeight, bool IsGetData, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, FString CallFunc_Array_Get_Item, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_EqualEqual_BoolBool_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x1bf56d0
	void CheckCanVault(out bool IsActive, bool IsInFalling, float nowHeightTestHeight, Vector nowHeightHitPoint, bool nowResult, Actor*[] ___object_Variable, int ___int_Array_Index_Variable, bool CallFunc_JumpVaultCheck_result, bool CallFunc_GetNowData_IsGet, bool CallFunc_CheckHeight_isActive, Vector CallFunc_CheckHeight_point, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_CheckHeight_isActive2, Vector CallFunc_CheckHeight_point2, float CallFunc_GetCliblastCheckDis_result, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_CheckNowisJumpAnimation_result, bool CallFunc_CheckNowisJumpAnimation_ishasAnimation, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_CheckIsValidByHeightCheckDis_isVaild, byte[] CallFunc_GetTestObjectChannels_channels2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] ___object_Variable2, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_CheckUpLengthBlock_result, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, bool CallFunc_GetCrossMaxBlockDisOffsset_result, bool CallFunc_CheckHeight_isActive3, Vector CallFunc_CheckHeight_point3, bool CallFunc_CheckForward_isActive, bool CallFunc_CheckHeight_isActive4, Vector CallFunc_CheckHeight_point4, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GetCrossMaxBlockDisForward_result, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue2, int ___int_Loop_Counter_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_AllowState_ReturnValue, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x1bf56d0
	void StartVault();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void JumpVault();// 0x1bf56d0
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x1bf56d0
	void vaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir);// 0x1bf56d0
	void jumpfromUI();// 0x1bf56d0
	void VaultFail(FString Reason);// 0x1bf56d0
	void UpdateVault_BluePrint();// 0x1bf56d0
	void interrupted(enum State, enum InterruptedBy);// 0x1bf56d0
	void vaultLeave(enum State);// 0x1bf56d0
	void DsCheckStopVault();// 0x1bf56d0
	void StopVault();// 0x1bf56d0
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1bf56d0
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1bf56d0
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_AllowState_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, bool CallFunc_EnterState_ReturnValue, bool CallFunc_HasState_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_HitPoint, Rotator K2Node_CustomEvent_movedir, bool CallFunc_ServerCrossingBlockCheck_result, bool CallFunc_ServerCheckBlockDis_Result, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess2, UAEGameMode* K2Node_DynamicCast_AsUAEGame_Mode, bool K2Node_DynamicCast_bSuccess3, Controller* CallFunc_GetController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess4, FString K2Node_CustomEvent_reason, bool CallFunc_CheckAcknowledgedPawn_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_PlayAnimMontage_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_EnterState_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_HasAuthority_ReturnValue4, float CallFunc_GetAnimMontagePlayRate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, Vector K2Node_Event_startPos2, Vector K2Node_Event_topPos2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, bool K2Node_Event_isjump2, Rotator K2Node_Event_movedir2, float K2Node_Event_blobkthick2, Vector K2Node_Event_startPos, Vector K2Node_Event_topPos, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, bool K2Node_Event_isjump, Rotator K2Node_Event_movedir, float K2Node_Event_blobkthick, Vector CallFunc_Subtract_VectorVector_ReturnValue2, bool CallFunc_FpsVaultServerCheating_result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue3, float CallFunc_VSize2D_ReturnValue, bool CallFunc_ServerCrossingBlockCheck_result2, bool CallFunc_BooleanAND_ReturnValue4);// 0x1bf56d0
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x12c , Size: 4]
	float DeltaTime;//[Offset: 0x130 , Size: 4]
	float NowBlockDis;//[Offset: 0x134 , Size: 4]
	float NowBlockHeight;//[Offset: 0x138 , Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x13c , Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x140 , Size: 4]
	float NowBlockLength;//[Offset: 0x144 , Size: 4]
	float maxCheckDis;//[Offset: 0x148 , Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x14c , Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x150 , Size: 4]
	float MaxCheckHeight;//[Offset: 0x154 , Size: 4]
	Actor* checkActor;//[Offset: 0x158 , Size: 4]
	Vector PlayerStartPostion;//[Offset: 0x15c , Size: 12]
	Rotator PlayerRotation;//[Offset: 0x168 , Size: 12]
	Vector HitPoint;//[Offset: 0x174 , Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x180 , Size: 4]
	float CapsuleRadius;//[Offset: 0x184 , Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x188 , Size: 4]
	Vector blockDir;//[Offset: 0x18c , Size: 12]
	VaultData NowVaultData;//[Offset: 0x198 , Size: 80]
	float MaxJumpLength;//[Offset: 0x1e8 , Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec , Size: 1]
	float CountTime;//[Offset: 0x1f0 , Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4 , Size: 1]
	byte NowDrawDebugType;//[Offset: 0x1f5 , Size: 1]
	float realStartTime;//[Offset: 0x1f8 , Size: 4]
	Vector DataStartpos;//[Offset: 0x1fc , Size: 12]
	FString nowVaultKey;//[Offset: 0x208 , Size: 12]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x214 , Size: 60]
	bool isEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250 , Size: 1]
	float nowMaxX;//[Offset: 0x254 , Size: 4]
	float nowMinFallingY;//[Offset: 0x258 , Size: 4]
	float realStartZ;//[Offset: 0x25c , Size: 4]
	float offsetSpeed;//[Offset: 0x260 , Size: 4]
	byte gunSlot;//[Offset: 0x264 , Size: 1]
	Vector oppsiteHitPoint;//[Offset: 0x268 , Size: 12]
	Vector uphitPoint;//[Offset: 0x274 , Size: 12]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280 , Size: 1]
	float heightoffsetcheck;//[Offset: 0x284 , Size: 4]
	float HeightFowardCheck;//[Offset: 0x288 , Size: 4]
	float minVaultHeight;//[Offset: 0x28c , Size: 4]
	float nowAnimSpeed;//[Offset: 0x290 , Size: 4]
	float animSpeedChangeTime;//[Offset: 0x294 , Size: 4]
	float animChangegSpeedRate;//[Offset: 0x298 , Size: 4]
	bool ischangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c , Size: 1]
	vaultCheckRule[] checkRuleList;//[Offset: 0x2a0 , Size: 12]
	float laststandDis;//[Offset: 0x2ac , Size: 4]
	float lastwalkDis;//[Offset: 0x2b0 , Size: 4]
	float lastsprintDis;//[Offset: 0x2b4 , Size: 4]
	ByteProperty*[] VaultWindows;//[Offset: 0x2b8 , Size: 12]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x2c8 , Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	Vector PlayerStartDir;//[Offset: 0x2d0 , Size: 12]
	bool waitStopvaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc , Size: 1]
	float stopVaultOppDis;//[Offset: 0x2e0 , Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x2e4 , Size: 4]
	float FpsVaultSpeed;//[Offset: 0x2e8 , Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x2ec , Size: 12]
	Vector FpsvVaultTopoffsetPostion;//[Offset: 0x2f8 , Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x304 , Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x310 , Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	float FpsVaultMontangeTotalTime;//[Offset: 0x320 , Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x324 , Size: 12]
	float FpsVaultMontageTopTime;//[Offset: 0x330 , Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x334 , Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x338 , Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x33c , Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340 , Size: 1]
	float FpsCheatingVaule;//[Offset: 0x344 , Size: 4]
	float FpsMinHtight;//[Offset: 0x348 , Size: 4]
	FpsVaultData[] FpsVaultAnimationList;//[Offset: 0x34c , Size: 12]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358 , Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x35c , Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x360 , Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x364 , Size: 4]
	float blockledgeZ;//[Offset: 0x368 , Size: 4]

--------------------------------
Class: VaultData
	FString montageSectionName_7_0E6EFDD2441CFF562A032DAC952922CF;//[Offset: 0x0 , Size: 12]
	CurveFloat* upCurve_69_EB26D4B04E0BF112150F9DAEBC25B4F7;//[Offset: 0xc , Size: 4]
	CurveFloat* fowardCurve_31_D55B5E974DFC24E74019D6A31F141C7C;//[Offset: 0x10 , Size: 4]
	float blockdis_28_FAA34AE04D5F621CD5FA08B1C4D4B37E;//[Offset: 0x14 , Size: 4]
	float blockheight_27_6E4FCDFF4446BA2250C19BB28913EBD8;//[Offset: 0x18 , Size: 4]
	float blokcThicklength_70_9688AE2B4F2BEF79873A64A463F93E21;//[Offset: 0x1c , Size: 4]
	bool IsJump_18_602D0B664C933E0434EF71A8DFFDBD7F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool forceStartSync_39_921F70144A2C12C3A5C929BEE107315F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	float CountTime_44_F467486040D210D7A55E3A93FD62BD77;//[Offset: 0x24 , Size: 4]
	float playSpeed_50_D2F6C3D243B8799B4E0FE88E44823E6D;//[Offset: 0x28 , Size: 4]
	float speedChangeTime_58_14BE38BF403A2B6F8E94E387CB638965;//[Offset: 0x2c , Size: 4]
	float changeSpeedRate_61_5D150C9C4C80B4F16BD0EF8309AC2BEA;//[Offset: 0x30 , Size: 4]
	bool standState_63_6706D1D149B7C65CE7BCB0B80179A054;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	bool walkState_65_CABF0046484F703B4F0E4BA3AC9869C4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35 , Size: 1]
	bool SprintState_67_661945074C9AB243C7C7B98121DC76CC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36 , Size: 1]
	bool isPutUpGun_73_29CDC65141670209C60AC7B5423932FF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37 , Size: 1]
	float BreakWindowDelayTime_76_9869354F4F44910A229A82B65F612FF6;//[Offset: 0x38 , Size: 4]
	bool IsCancelable_78_298DE56E46F42A44C1EC8F9E8BA27BD0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	float MinCancelVTimer_84_5B6F3A36470D81814354F49C1D1C7B1B;//[Offset: 0x40 , Size: 4]
	float MaxCancelVTimer_85_94626C4447005BBF447CAE8AC5AEE74F;//[Offset: 0x44 , Size: 4]
	bool fallingVault_88_3046B4B14EF3BA7227B5539D7C499A1A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	float fallingvaultMinHeight_90_25148B5C4D1A78FCE3A2BF9FD6B3E882;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: FpsVaultData
	float height_2_6778DFBB410A85EE91BEA6B781695021;//[Offset: 0x0 , Size: 4]
	FString montageName_7_CA242A584BEEC1452642F38AA6D6DBDC;//[Offset: 0x4 , Size: 12]
	float TimeLength_6_7FB8643042854CAE734259ADA01E6C94;//[Offset: 0x10 , Size: 4]
	bool isJunp_9_ACBB864A4F8D9AC4532F6A813ABF2CA8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float movespeed_12_E5EBE4EE4240C619828D8BAC783C265D;//[Offset: 0x18 , Size: 4]
	float speedrate_15_62D9B9D84072A09B660969889D7617FC;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: vaultCheckRule
	float checkHeight_2_1D446F924C9CBEF38F85E98E23C9A735;//[Offset: 0x0 , Size: 4]
	float standCheckDis_4_6FA8D6F44D0D081ED0F3788E1A234DF9;//[Offset: 0x4 , Size: 4]
	float walkCheckDis_6_A9F1514E4E30403EBE914D903334720A;//[Offset: 0x8 , Size: 4]
	float sprintCheckDis_8_FF31D1CF4AEB4B77FA132F9E1414F0B4;//[Offset: 0xc , Size: 4]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x59c , Size: 28]

--------------------------------
Class: CH_Base_AnimBP_C.STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa70 , Size: 4]
	void PlayMontageAnim(AnimMontage* NewParam, bool IsPlay, FName SectionName, float PlayRate, bool CallFunc_IsValid_ReturnValue, float CallFunc_Montage_Play_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue);// 0x1bf56d0
	void PlayPostReloadAnim(PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue);// 0x1bf56d0
	void PlayBoltAnim(bool IsPreFirew, PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue);// 0x1bf56d0
	void InitAnimVarDefaultValue();// 0x1bf56d0
	void PlayDeadAnim(bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_RandomBool_ReturnValue, float CallFunc_Montage_Play_ReturnValue, float CallFunc_Montage_Play_ReturnValue2, float CallFunc_Montage_Play_ReturnValue3, float CallFunc_Montage_Play_ReturnValue4);// 0x1bf56d0
	void HandlePlayerAnimEvent(FName Msg, bool K2Node_SwitchName_CmpSuccess);// 0x1bf56d0
	void PlayFireAnim(bool IsPreFirew, PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue);// 0x1bf56d0
	void PlayReloadAnim(PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue);// 0x1bf56d0
	void HandleWeaponStateChanged(byte NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Montage_IsPlaying_ReturnValue);// 0x1bf56d0
	void PlaySwitchWeaponAnim(bool IsEquip, bool CallFunc_IsValid_ReturnValue, PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, float CallFunc_Montage_Play_ReturnValue, float CallFunc_GetPlayLength_ReturnValue, float CallFunc_Montage_Play_ReturnValue2);// 0x1bf56d0
	void PlayPickUpAnim(Actor* CallFunc_GetOwningActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Montage_Play_ReturnValue);// 0x1bf56d0
	void PlayPoseChangeAnim(byte LastPose, byte NewPose, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwningActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PlayerAnimData CallFunc_GetPlayerAnimationByEventType_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Montage_Play_ReturnValue);// 0x1bf56d0
	void OnLoaded_57E72B06462D8E44BDA2869D6B305519(Object* Loaded);// 0x1bf56d0
	void OnLoaded_384BBAAD4F23C5275EB4E0AF79B7317F(Object* Loaded);// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_61811E3945F();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_D3FF8E7446C5();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_107DCDB048B3();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_8480EDF3497();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E83DA1B342D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_9A49CF0A4032();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_11C970124838();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_832AC16C42B();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4341DB34403();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3615C2C84A9();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_5E0B947941();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_F0ABA5D749();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5BED08174A4();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6A38D54E434();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B21C791E4F6();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByInt_0EE19D1F4FA5();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6FF139464B0();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_5C0AF0884C49();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9C71DC8F4C33B19();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_BE306CE54DE7();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_CB2F9008436();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_FE3EA2AE4D8();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_BA65E3F3499();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_EE();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_BEE19CD84044();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EF353B2E461();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C5AF90604A0();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D4C61AC745B();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_99A0D43B46();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E7214DC04C82();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5D730D2D4ED();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_9AA3C81A4813();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B59343664AC();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_30EBA2CF48();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3C1C448E4BF();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_970235034B3();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_71504472478();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_6E46129C4B61CAA4();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F645305E417();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EBA89DFF4E8();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_0923836A4A1();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_9E98E94647();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F7();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5BC93D324FE();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_CB4E3CD2403();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_618C7B784C8();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_F034CE2B40();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_7FF39F494AA();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0A3738E649();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_AF7A57D443();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_DAC68D834D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA5DE6F9455();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_59FA3FD140F();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E5D2926F471();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D9EA1E284D0();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6904FBD042F();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C3774AAD495();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_A31FF8354E0DC();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_CD3004EB4A12();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_4C();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_5CA471594F();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D87B9FFF40B();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_AnimDynamics_B24FC8AA42B8AD();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_94723F30492();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_48F9D2164A0();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_B7();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_839E288E459();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4DBD0FB34AC9AE0D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_CopyBone_1F1A7FFD4436DA20E2();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_CopyBone_C4BA145E4DC4ACE6C8();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_65FA32D4404595CF();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_F4AEAD384AF11F56();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5573156E41C();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6049A279493();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6BD0BE14425();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_A14268BB4435D0D5();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_7CEBFB4F4DF();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_0C44AFF744B7FB12();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_6D0039F746();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_C75D43F847();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA0526D343();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2206D95943();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_E97E9C5C45();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_072677AC41();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0D5DE5104B();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_26BE08234F();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotateRootBone_3379463249DB();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_6BCD08EB410E0();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C489CE0542F6();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EC58EF22440();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_06F8D9E54D6A();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_665225D3426();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_437A1FA2477();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_7873AC9F4D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F2A9F84DD();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_9718FEB841();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_78C7AFFE461E9736();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_5DD0B0D24ED8();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FFF262E84F13();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6AE6DAEC4BF();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_C9E5C2DD4EE03();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_43D12E0C4B();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_6EC9AC294C();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DCA0AEF54F2();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_506C44CC40();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4CB09782415();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5728823B46D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_FFBFF4D34DF();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B682FC3D408();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_8919B31E42985B72();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_DCFFAEA6498F4FAD();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_5556764F492E2C6D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_9E88F58F4A();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6585C49F4E4();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_31DAF3FB48F3FEDE();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_C85B89004FD20DB2();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C042155F4FE();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4546C2E14396773A();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_5D86B57B40F();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F4();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1873132544();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1CA6B8D549();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA59500540C();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_B5E3D5F54B();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FE06234541();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_895296D24A();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_80DFA2864D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4B9202814E();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA8D769941();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_613B68EF42();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_76B99DC840();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_73F3E7F249();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_8E329B0A47();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2223AA0840();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_0E34DB824E();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_61316C7E46();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AFABCF7848();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6DBDD079430();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9629294C46AC6A26();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_8CCABF8A43();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F88A7F4A4();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_201A359C4C0();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_51F2F2CE4F9();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_923ECC9946();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_EA8583CF48();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_ACDC5F0141();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1B8C2144F2();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0A72F9B446();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B50C1AE84D();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_82D7333F47();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FD5B9C494E();// 0x1bf56d0
	void BlueprintInitializeAnimation();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_70C7519648();// 0x1bf56d0
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x1bf56d0
	void AnimNotify_TakeOutPhone();// 0x1bf56d0
	void AnimNotify_DestroyPhone();// 0x1bf56d0
	void DelayLeaveCallingState();// 0x1bf56d0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_A39C00F94B();// 0x1bf56d0
	void AnimNotify_SpawnRFootprint();// 0x1bf56d0
	void AnimNotify_SpawnLFootprint();// 0x1bf56d0
	void AnimNotify_PlayFallSound();// 0x1bf56d0
	void AnimNotify_PlayShellDropFX();// 0x1bf56d0
	void AnimNotify_PlayMagOUTSound();// 0x1bf56d0
	void AnimNotify_PlayMagINSound();// 0x1bf56d0
	void AnimNotify_PlayBoltSound();// 0x1bf56d0
	void AnimNotify_PlayChangeMagazineSound();// 0x1bf56d0
	void AnimNotify_PlayLoadBulletSound();// 0x1bf56d0
	void AnimNotify_PlayCrawlSound();// 0x1bf56d0
	void AnimNotify_PlaySquatSound();// 0x1bf56d0
	void AnimNotify_PlayRunSound();// 0x1bf56d0
	void AnimNotify_PlayWalkSound();// 0x1bf56d0
	void AnimNotify_LandHardCameraShake();// 0x1bf56d0
	void AnimNotify_LandCameraShake();// 0x1bf56d0
	void ExecuteUbergraph_CH_Base_AnimBP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_EqualEqual_BoolBool_ReturnValue, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_MapRangeClamped_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, bool CallFunc_BooleanOR_ReturnValue2, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue4, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, bool CallFunc_Not_PreBool_ReturnValue4, float CallFunc_BreakRotator_Roll5, float CallFunc_BreakRotator_Pitch5, float CallFunc_BreakRotator_Yaw5, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue5, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, bool CallFunc_Greater_FloatFloat_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue5, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, delegate K2Node_CreateDelegate_OutputDelegate2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Object* ___object_Variable, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess2, Object* K2Node_CustomEvent_Loaded, bool CallFunc_IsValid_ReturnValue, Object* ___object_Variable2, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess3, bool K2Node_Event_bBeginCalling, Object* K2Node_CustomEvent_Loaded2, Actor* CallFunc_GetOwningActor_ReturnValue, SkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_RevivalPhone_C* CallFunc_FinishSpawningActor_ReturnValue, SkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue2, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue3, float CallFunc_Montage_Play_ReturnValue, bool CallFunc_IsValid_ReturnValue4, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess5, Pawn* CallFunc_TryGetPawnOwner_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess6, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character4, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_HasState_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character5, bool K2Node_DynamicCast_bSuccess8, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character6, bool K2Node_DynamicCast_bSuccess9, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character7, bool K2Node_DynamicCast_bSuccess10, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character8, bool K2Node_DynamicCast_bSuccess11, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character9, bool K2Node_DynamicCast_bSuccess12, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character10, bool K2Node_DynamicCast_bSuccess13, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character11, bool K2Node_DynamicCast_bSuccess14, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character12, bool K2Node_DynamicCast_bSuccess15, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character13, bool K2Node_DynamicCast_bSuccess16, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character14, bool K2Node_DynamicCast_bSuccess17, delegate K2Node_CreateDelegate_OutputDelegate3, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue6, bool CallFunc_BooleanAND_ReturnValue);// 0x1bf56d0
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_7F8BF32A483C05C104D27D84BDDB8047;//[Offset: 0xa78 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1B8C2144F2B644B0EDF5890856C8E8F;//[Offset: 0xad0 , Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6E2A7352482A91283D96DEA609E8844D;//[Offset: 0xb68 , Size: 128]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_ACDC5F01413E6CDDD5E26290FB0D2A28;//[Offset: 0xbe8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_EA8583CF48558D8742D60989B755AECF;//[Offset: 0xc20 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_923ECC9946F87BD9304658A4C6C371E1;//[Offset: 0xc58 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_7D4B6F6A41970A5756B8039B8D969461;//[Offset: 0xd48 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8CCABF8A4335407291BE5F82A4F2DF4C;//[Offset: 0xd80 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_E36EB3AF45864D643ACA079211777C8E;//[Offset: 0xe70 , Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_BD0EC74E47B535EF6B18C4A8DED838DD;//[Offset: 0xea8 , Size: 168]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_61316C7E46619171838C3F963F405D2A;//[Offset: 0xf50 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_73F3E7F2496DAAE3A9468BA610F07723;//[Offset: 0xf88 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_76B99DC84072BA3C0786C29E9E29BB65;//[Offset: 0xfc0 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3;//[Offset: 0xff8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69;//[Offset: 0x1030 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2;//[Offset: 0x1068 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1CA6B8D5497E74E6F43CAEB6DDEFBBC5;//[Offset: 0x10a0 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781;//[Offset: 0x10d8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_9E88F58F4AB6EE52BA9A69BFC886550A;//[Offset: 0x1110 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5728823B46DD91085913488705443014;//[Offset: 0x1148 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A7D241414814F8E5A09B52966CE404BD;//[Offset: 0x11e0 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9F72D4B94021E469192C2CBDEFA3A310;//[Offset: 0x1240 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4CB09782415875D7C20612AB985BF542;//[Offset: 0x12a0 , Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E863709E496990EBB00A21AAF576AFA8;//[Offset: 0x1338 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8D7C844E4C2FC5B9D1C4E6BDF1AA520A;//[Offset: 0x13e8 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_6EE4B10C4F3719B4949ABCA78FCDF831;//[Offset: 0x1428 , Size: 176]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_506C44CC40D48CDDB51D41AD425CF6AD;//[Offset: 0x14d8 , Size: 240]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DCA0AEF54F2D744F5E49D4BD5D4E8A18;//[Offset: 0x15c8 , Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6EC9AC294CDBB6CEEDC18296B5CAB9B0;//[Offset: 0x1660 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_4F9BC4314BE4DA84F20AD4A27AAC395A;//[Offset: 0x1750 , Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696;//[Offset: 0x1788 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_9D9D8FCC441A7F05532D81BE6C797E4A;//[Offset: 0x17e8 , Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5DD0B0D24ED85ACF9D4CB39EE7DC6F51;//[Offset: 0x1820 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_6E1D113D4A61E2CDD8D86989D7072B12;//[Offset: 0x1880 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_437A1FA247704E25D96300A58FFE1BEA;//[Offset: 0x18b8 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3DD0E8F5448E61732836FBAFB99C3779;//[Offset: 0x1950 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_665225D34261C82C7467159E69A783C4;//[Offset: 0x19b0 , Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_908E083B49E7626C7EEE2792B56CF70A;//[Offset: 0x1a48 , Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_DD3620824CBA4C8FF8D92F862EBF2307;//[Offset: 0x1af8 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_06F8D9E54D6A670C97160781AAC21798;//[Offset: 0x1b58 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_A5BBC01C4E35430A5EA3F7B595589567;//[Offset: 0x1bb8 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_8B4769E84BC18303BE91C2930EC7A00D;//[Offset: 0x1bf0 , Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_185F5566469D3BE1086751A7E0CA2596;//[Offset: 0x1c28 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36577154A84E9638340B19CB439624A;//[Offset: 0x1c60 , Size: 64]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1CF150234CC2C8D35D381F9C7E447C27;//[Offset: 0x1ca0 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B;//[Offset: 0x1d00 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28;//[Offset: 0x1d98 , Size: 96]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228;//[Offset: 0x1df8 , Size: 88]
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE;//[Offset: 0x1e50 , Size: 80]
	AnimNode_Root AnimGraphNode_StateResult_B02F45DC49034869CCF72E8A45EDDEDA;//[Offset: 0x1ea0 , Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_58F3F41C45E674D0FEBB6DAE55DA0751;//[Offset: 0x1ed8 , Size: 168]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA0526D343FA015B28DF25921C724329;//[Offset: 0x1f80 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_6D0039F746DBFEE3FB7C8793D9CC4D70;//[Offset: 0x1fb8 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3C1C448E4BFC14F4DF9541BD7B686D80;//[Offset: 0x1ff0 , Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_5E984FB544A69AFB45E68B8479EA9A9D;//[Offset: 0x2088 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B370B18543B80658FC331D8359BDA455;//[Offset: 0x20e0 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8886315C46DC93464C7004BEE2E45D9B;//[Offset: 0x2120 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2F713306402D4EB35FA74BA217F872DE;//[Offset: 0x2160 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3E7F3743411A3726D8BD919415CBB1AE;//[Offset: 0x2210 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A7754639472ADB097643B9B30CBCBC66;//[Offset: 0x2250 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_528D52F7443BB34F0313688FCBD2C6F0;//[Offset: 0x2290 , Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_60E3C51F409D1CB237D47FADD6617FFD;//[Offset: 0x2340 , Size: 88]
	AnimNode_Root AnimGraphNode_StateResult_D4B28F76445E4C2A222EAD9D1E15415D;//[Offset: 0x2398 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C5AF90604A024A24AEA2B1BDFBE04E5D;//[Offset: 0x23d0 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3100A1FF49C8C6A9B779DA84848A80ED;//[Offset: 0x2468 , Size: 96]
	AnimNode_Slot AnimGraphNode_Slot_A016D1F0444AC60FDAEED59F8D4D46BC;//[Offset: 0x24c8 , Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_FFD677B7443DDFA529C14681BF721EAB;//[Offset: 0x2520 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_64D1B05B4ACF96B2FBDCFFA2E4CCF35E;//[Offset: 0x25d0 , Size: 64]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_EE443AF342736D59487D55A50F1B155D;//[Offset: 0x2610 , Size: 272]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9C71DC8F4C33B198444F7C860CA9B2D8;//[Offset: 0x2720 , Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_B05C2817432BE401F7B2AA8B35E660D7;//[Offset: 0x2778 , Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_ADFECE884DDFA760BE194D95CF505B1B;//[Offset: 0x2828 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9C97AC3A4768C65F9848A6B45C8A2CE8;//[Offset: 0x2880 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F76A1B564C0AB0CDC902FDADE5EB1D8E;//[Offset: 0x28c0 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_621247A0484FCFD01F297BB0395CB22C;//[Offset: 0x2900 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6FF139464B00144F23F55998D70D7E1C;//[Offset: 0x2940 , Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_C38330AC46F4FC63A1076BBA42F95A8F;//[Offset: 0x29d8 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8DCD1B664029019AAAC154833EBBBF51;//[Offset: 0x2a30 , Size: 64]
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt_0EE19D1F4FA55EE1D1B16C98C0B0100C;//[Offset: 0x2a70 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6EA8DDAA431D79F20387029260BDEF69;//[Offset: 0x2b08 , Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_523A3E6E4683C51F1E5CC4AF6807DE0F;//[Offset: 0x2b48 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_392FC0DA47DC7390C0A0749B48807A2A;//[Offset: 0x2ba0 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E7271F7D49FEFD1AEED08FB827CB3FC5;//[Offset: 0x2be0 , Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B21C791E4F6507EE4B837EA53759AC45;//[Offset: 0x2c90 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_35D89A8B46E713CE1BA82A841A699365;//[Offset: 0x2d28 , Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_3CF398DD455CB914F5F554A6ED9CDF19;//[Offset: 0x2d68 , Size: 88]
	AnimNode_Root AnimGraphNode_StateResult_D7000B504F670B39E309E4AA59C5664A;//[Offset: 0x2dc0 , Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_49DA45D64C0BEAD52ED89AA2C5B48025;//[Offset: 0x2df8 , Size: 168]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0D5DE5104BA2B987043F35BB5E86F0F4;//[Offset: 0x2ea0 , Size: 240]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F2A9F84DD9DFF0A114D6921E50F2C3;//[Offset: 0x2f90 , Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_174894E5463498BD5CE2C58529C87F63;//[Offset: 0x3028 , Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_458080404F9C55B75C14EF80F4847606;//[Offset: 0x3080 , Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_319716464D13C4ECDD98CB9595742352;//[Offset: 0x3130 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA59500540C87D28E005F0BD7F172675;//[Offset: 0x3188 , Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_43A9039E41EF41FC5803878ECCF2115F;//[Offset: 0x3220 , Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_98F2602F4DC5A49F702075A17D51FF69;//[Offset: 0x32a0 , Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C52841094FE8E562E2A56D8B627DB87F;//[Offset: 0x32f8 , Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_E94CE6A24C14A812C27178A06F48CDC2;//[Offset: 0x3378 , Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_669C6C0C4F1D960F8CF708B30A34DE05;//[Offset: 0x33d0 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DE00E31C423EDB53B1E7F4A812674E66;//[Offset: 0x3480 , Size: 64]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_80DFA2864DFC581215F60B95F7DC9380;//[Offset: 0x34c0 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_8E329B0A47E416418324F99CE29A2401;//[Offset: 0x34f8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_B50C1AE84D9436FFBC33709F6F0EB106;//[Offset: 0x3530 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FD5B9C494EBA47F8974327B3D99915E2;//[Offset: 0x3568 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_A39C00F94B8B17F3DF23A99C3DDB2E88;//[Offset: 0x35a0 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_70C75196485F1D5760DEEA95ED192B22;//[Offset: 0x35d8 , Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_AA9AA59A413FD2E4529A19A07184E4FA;//[Offset: 0x3610 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_04DFCD6146926108DD38F59F6296BDC1;//[Offset: 0x3670 , Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C96DE772492B98DB0DE80BB734C2116E;//[Offset: 0x36a8 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_32A4049D45BACC2F0CF64A83AC96F015;//[Offset: 0x3708 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_82D7333F471BE3862A2B8DA6A09047DF;//[Offset: 0x3740 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_E61FA9B94E955F50CF334983A7D033E8;//[Offset: 0x3830 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0A72F9B446B5F08D52514C9B023F198F;//[Offset: 0x3868 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_3DD95A6A4389DA801A52ADA435C84617;//[Offset: 0x3958 , Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_D405617F41B462783757E3BD69CB5422;//[Offset: 0x3990 , Size: 168]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_51F2F2CE4F9082CAD0AD7189F7934CB0;//[Offset: 0x3a38 , Size: 168]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4B788175470581A209B76B973D807262;//[Offset: 0x3ae0 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_FF22DAD4497C34327A559AA3DCF2AE45;//[Offset: 0x3b18 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_201A359C4C06F74821DF918ED7086E55;//[Offset: 0x3b50 , Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_E1876D99465C1BE509443BAE29D33409;//[Offset: 0x3be8 , Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_3C5A5896446BC6123B3769AAE4322641;//[Offset: 0x3c68 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F88A7F4A4C63B386ED5BBFAFF8ABCE;//[Offset: 0x3cc0 , Size: 152]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_9629294C46AC6A26181183837695EE4C;//[Offset: 0x3d58 , Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2A1F872D45E5392E9F1F09A1B323C944;//[Offset: 0x3df8 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E6B21B0C4937DF1281AB46ACB479F1A8;//[Offset: 0x3e30 , Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3CF2A8814FF520521F709DB0D580B2AA;//[Offset: 0x3e68 , Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6DBDD07943048BB8FB1AB1872A66392C;//[Offset: 0x3ee8 , Size: 152]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AFABCF7848AD1903BD064AA242AF9E4F;//[Offset: 0x3f80 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_0E34DB824EFF3ABFE5A086B6B6631475;//[Offset: 0x3fb8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_2223AA0840552DE31079948F03279486;//[Offset: 0x3ff0 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_613B68EF425D2703703F949AFD400692;//[Offset: 0x4028 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA8D769941A6176D083567B1DEC7F88E;//[Offset: 0x4060 , Size: 56]
	AnimNode_Root AnimGraphNode_StateResult_2D0E9935487AC2B8048629B6F4680D07;//[Offset: 0x4098 , Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5591C71F4B499957FC9875869010AFBD;//[Offset: 0x40d0 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_06C18A774D8A7CAF0CEA61B5AAF8FE06;//[Offset: 0x4130 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_B5E3D5F54BF49B7FEA2836B43904823D;//[Offset: 0x4168 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_FD74DAEC46FC936302EAC2AA96FE5A26;//[Offset: 0x4258 , Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_5E1D47794DDE33EFBAA0658413060407;//[Offset: 0x4290 , Size: 168]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_334079BF4A13B2F29708F5AD7E43BC4C;//[Offset: 0x4338 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7797FEE34831097BF63BF69B63F59DA9;//[Offset: 0x4378 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3719DDAD40D1FF3394A7D0B80B9261EB;//[Offset: 0x43f8 , Size: 64]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F4294E2340D99B17779EAAB0ED7F1A6D;//[Offset: 0x4438 , Size: 272]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5D86B57B40F785D5CBDD7FAFDEB10D85;//[Offset: 0x4548 , Size: 168]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_4546C2E14396773A08760F87EC7A5030;//[Offset: 0x45f0 , Size: 160]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DF0B9A3F4A87F2F63283E3B7F893A693;//[Offset: 0x4690 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D45B3A8B440B8F75AC62669D80085DEC;//[Offset: 0x4710 , Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_EE180C9B4A80C7B3A22DAEA399479C78;//[Offset: 0x4750 , Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C22296634B3329DCD18642899124C07B;//[Offset: 0x4788 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9078DB934183E6FE05BE3281437127A2;//[Offset: 0x4808 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_71F7B5004EAE8C9FAD7F5EB7EAB7B2B7;//[Offset: 0x4848 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C042155F4FEE0D669BE9538048391AEC;//[Offset: 0x4888 , Size: 152]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_C85B89004FD20DB22B7620BCA4F74F9B;//[Offset: 0x4920 , Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7CF1CF344753662A1160AE885528C832;//[Offset: 0x49c0 , Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_31DAF3FB48F3FEDEE067079557EEB502;//[Offset: 0x49f8 , Size: 160]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_329338674411ED2637246E918B0C8247;//[Offset: 0x4a98 , Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_A208C4634FF28D66ADBE8894952EBF91;//[Offset: 0x4ad8 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6A4D4BB543581CEA78717FAE00540633;//[Offset: 0x4b10 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7598CC394959662FCA78AC8C45BFA981;//[Offset: 0x4b50 , Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_AB1D4C514AD9020A44FE8E99D5E88556;//[Offset: 0x4b90 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4E98CC1C42BDBE0649258FB8F995D839;//[Offset: 0x4bc8 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_622244D444EE7EE65F88C8957C185EEF;//[Offset: 0x4c00 , Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8EB0E4584E691BA977D67E8623780010;//[Offset: 0x4c40 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_433E01AA46322548F90AAC9A54AA867B;//[Offset: 0x4cd0 , Size: 144]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0DEEA3AF4E997C82A08BD2BB8D58B653;//[Offset: 0x4d60 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6585C49F4E4165EE151CC2B97C7B2F66;//[Offset: 0x4d98 , Size: 152]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_13AC8CA44937FBA30AB9C392D3298681;//[Offset: 0x4e30 , Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_5556764F492E2C6DA3D2878EEAC0F256;//[Offset: 0x4e68 , Size: 160]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_DCFFAEA6498F4FADF4518C97538818ED;//[Offset: 0x4f08 , Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_457372C34A3A70E9726335ABBA036702;//[Offset: 0x4fa8 , Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_93C780F94070F509C4F343B8D8068090;//[Offset: 0x4fe0 , Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_8919B31E42985B72D0E33C8776686E74;//[Offset: 0x5018 , Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1112DC0A47EE06CCC0FB99A6D56C5D7E;//[Offset: 0x50b8 , Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_97A57B76440F2547804DE8B65E588D67;//[Offset: 0x50f0 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3BEDDAF74266DACAD9913192AC0BB255;//[Offset: 0x5170 , Size: 64]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2E8B4E54AF4690FC6B;//[Offset: 0x51b0 , Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_8E1711044635813E18A35BABACA19DF6;//[Offset: 0x5208 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C99F2028434D0DBD74153089B2D6D5D3;//[Offset: 0x5260 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B682FC3D408904703D3DECB95804E4C6;//[Offset: 0x52a0 , Size: 152]
	bool __SUBINSTANCE_IsFPPVehicleAnimInstace_B6EA793741EF081F1D4B18BE9B29A9E8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5338 , Size: 1]
	AnimNode_SubInstance AnimGraphNode_SubInstance_B6EA793741EF081F1D4B18BE9B29A9E8;//[Offset: 0x5340 , Size: 144]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_16B201EE496A66D027E50CB55A8ABD62;//[Offset: 0x53d0 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F75C21C84EB4D615E9FC2F9A9D8853F5;//[Offset: 0x5450 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9101E8B941BCBB1C76031A872C91A3FC;//[Offset: 0x5490 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_FFBFF4D34DF5B64FD6C889BE58395DC3;//[Offset: 0x54d0 , Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_43D12E0C4B649EFEFCAA0AAD51F83A9F;//[Offset: 0x5568 , Size: 240]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_C9E5C2DD4EE0358504AB258E8E111BFB;//[Offset: 0x5658 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6AE6DAEC4BF6E0703556299166FEC2E0;//[Offset: 0x56b0 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A143725F42DD4467D41CA0BFB906A522;//[Offset: 0x5748 , Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_0712F5734AC37790D9A12F8096EE9C4E;//[Offset: 0x5788 , Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_0F051A204E1F9A9172B92E86CB305A1E;//[Offset: 0x57e0 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D9BDED8D4B7DE338450804B21CB65D90;//[Offset: 0x5890 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1DB39F3145453030AB0728B31A1B2049;//[Offset: 0x58d0 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F70F6EE744718CA0AA76638976CD41C5;//[Offset: 0x5910 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A31BBF2D4CD8CE0BDF9AEB9FDDF8B096;//[Offset: 0x5990 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45E193384DE39BDB8BF5949428D8CDC4;//[Offset: 0x59d0 , Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_78C7AFFE461E973613B6EB970B5A2AB8;//[Offset: 0x5a10 , Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_115F73CC4F4EB99D57153CA9C0B25298;//[Offset: 0x5ab0 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5E08C82C430E1441B11FF599B3529D1D;//[Offset: 0x5ae8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_9718FEB8415EA45987D5DFB0D359D775;//[Offset: 0x5b20 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_7873AC9F4DA17D603F54FB9C36275EAD;//[Offset: 0x5b58 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_26BE08234F2E166A4BEB81847E3F548F;//[Offset: 0x5b90 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_072677AC41CA4240D324B3930D3EA4DB;//[Offset: 0x5bc8 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_E97E9C5C453D7E2D5224B79D96888C4B;//[Offset: 0x5c00 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_2206D959438B4BEE00C4CEAEB75AAAE1;//[Offset: 0x5c38 , Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_C75D43F847AFA40178B03F82F11F86AF;//[Offset: 0x5c70 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_970235034B3B88983E8AE9AE68FB9479;//[Offset: 0x5ca8 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E7214DC04C82EE4A9B2A14BA64F68B70;//[Offset: 0x5d40 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D4C61AC745BA5AC14BE79FA5B0A22E95;//[Offset: 0x5da0 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EF353B2E46136BBF4DD30BAC0B7D38DB;//[Offset: 0x5e38 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_BEE19CD840449CC679E4FBA3027A5C3C;//[Offset: 0x5ed0 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_BE306CE54DE7C6F40663768CC200474F;//[Offset: 0x5f30 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5C0AF0884C49A04D1A755A971498F3D9;//[Offset: 0x5f90 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6A38D54E434132F62AAE208D4E05FBA3;//[Offset: 0x5ff0 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_11C97012483875D741504A8685185FEA;//[Offset: 0x6088 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9A49CF0A4032454B32FA53A100E0CAE1;//[Offset: 0x60e8 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E83DA1B342D88E00E6170D8CDDCA3F2D;//[Offset: 0x6148 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8480EDF34971EB4EA8EC82BA3A8378A5;//[Offset: 0x61e0 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_107DCDB048B31AE4C45C34BA727087A1;//[Offset: 0x6278 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_61811E3945FEEF384A84EBB6F0049706;//[Offset: 0x62d8 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D3FF8E7446C5CE6F1B5EDB86AD6B52CF;//[Offset: 0x6370 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_13DE69C946749348DBAC41B7EA269D9E;//[Offset: 0x63d0 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_832AC16C42B01CF510DE52AA431BA139;//[Offset: 0x6408 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D68BE2D94D4A3129463ABE861654065D;//[Offset: 0x64a0 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D5EBE76D48893F69B2B759B45AEEEF58;//[Offset: 0x6500 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_B52EE394400680E00ACF91B2ECF35CC1;//[Offset: 0x6560 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4341DB34403C78C3411D0F969323D31F;//[Offset: 0x65c0 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3615C2C84A940F202AF5FB8B6D711FFE;//[Offset: 0x6658 , Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_0323FB8945B4638606D51884BFC6BC3E;//[Offset: 0x66f0 , Size: 176]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_5E0B9479418DD40362BF35BB098348BF;//[Offset: 0x67a0 , Size: 240]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_F0ABA5D749A81636181C6A97EFABA0FF;//[Offset: 0x6890 , Size: 240]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_60B0139C48392BFA899C4182ABE9FEB1;//[Offset: 0x6980 , Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5BED08174A4EB6AE59BF8A92B3BBAA2D;//[Offset: 0x6a30 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1D5AD53E4A5539A900B9C9AAC7372A42;//[Offset: 0x6ac8 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D06B75E94FE0CB3CFF92B2989B3A2B30;//[Offset: 0x6b28 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_8CDDC5D841B10708F7816CB424B4022D;//[Offset: 0x6b88 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_CB2F900843679035D81380BA8FAB7E0E;//[Offset: 0x6bc0 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_FE3EA2AE4D85F909698A2ABEFE670EA1;//[Offset: 0x6c58 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E3CD1126462896C6EF182890A0330A2E;//[Offset: 0x6cf0 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_09B1EE4940199FC722799786E3BE10C2;//[Offset: 0x6d50 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5184F1E440C57609C8C8A4974CADC9DA;//[Offset: 0x6db0 , Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C5B8172246ED1D29019339B08057EF92;//[Offset: 0x6e10 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_81DC2261430DEC394CD593A88202D448;//[Offset: 0x6e70 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_BA65E3F34990C8F8D837B39CAD263601;//[Offset: 0x6f08 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6293A69D42B595C2860B1C84C9ACFA4B;//[Offset: 0x6fa0 , Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_B67831BD44D6260B81E46B85370E6B2C;//[Offset: 0x7000 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_99A0D43B4625DB28C707B296F897BFAD;//[Offset: 0x7038 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_A7C94BC84D1B4DE1402B89BCA46090CB;//[Offset: 0x7128 , Size: 56]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_0F8D596F47555CC144FC028F17052B3E;//[Offset: 0x7160 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5D730D2D4EDF6AE6A4ED68A9B5C35841;//[Offset: 0x71b8 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_366D910649DD3FA9AFBA1E838ACAEE57;//[Offset: 0x7250 , Size: 96]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_A1B0C8DB44D08E3A56A862AFD62E57B5;//[Offset: 0x72b0 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_05C8C04348DBEA25A5E920B02D29A8A4;//[Offset: 0x7308 , Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9AA3C81A481374C893DB60AC7BD47D37;//[Offset: 0x73a0 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B59343664AC4B234A509C6A416B8827B;//[Offset: 0x7400 , Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_30EBA2CF48AAECAA27E497B8E46DB4AA;//[Offset: 0x7498 , Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_5FA6ECDD4695357A89E7C290FB015914;//[Offset: 0x7588 , Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_27FA876E4F2C51AB4FBB54A4314A9AF1;//[Offset: 0x75c0 , Size: 168]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6B33B0BF4CFBDF576C90BD8B97298239;//[Offset: 0x7668 , Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_220F99A04986C25E9539B2A92C64D7A8;//[Offset: 0x76e8 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0DA5260C449DE23EFBC503A7C77F7E00;//[Offset: 0x7768 , Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_7A8F51D9413B323BAE44DE93B45D3E3F;//[Offset: 0x77b0 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_FF7C88124B1026BF8DCDC88396D68D5B;//[Offset: 0x7910 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_50B56FAC4284F32E25CFCEB28B6C5E3A;//[Offset: 0x79a0 , Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_E5E672DB4B056FA5A45612B8931A18B6;//[Offset: 0x7a30 , Size: 352]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8D15414541B3EB717FE0CF94A60DBD3B;//[Offset: 0x7b90 , Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_71504472478A09FF13DFE68B69DFEF98;//[Offset: 0x7c40 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E1808C9D43A40CE46EB8F6A534DC1ABC;//[Offset: 0x7cd8 , Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_6E46129C4B61CAA43CEB07ADE4C3FD59;//[Offset: 0x7d18 , Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F95908034B8D9CFB2B155BB5933D94A9;//[Offset: 0x7db8 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0AFC812147DFC014CDE3A3825EA3CBE5;//[Offset: 0x7df0 , Size: 56]
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_8CF51CA948DE444C840E599C64AC2CEE;//[Offset: 0x7e28 , Size: 88]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8DBC60DEB297EA85BE;//[Offset: 0x7e80 , Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_DDA68583465674C7C37912B7D4A4E50F;//[Offset: 0x7ed8 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F645305E41722890FC22B391480ADEBD;//[Offset: 0x7f30 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EBA89DFF4E86CAD0DB7051A88EA338B1;//[Offset: 0x7fc8 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_53CF4F3440A9C4343DF7A9AEE6CEAADC;//[Offset: 0x8060 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_0923836A4A1516BEF39634B6DCB6E5B2;//[Offset: 0x80a0 , Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_66CC0D1349829696746E958E9ACAFC19;//[Offset: 0x8138 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8B02E1854C22FFA0A02A53B3DC679824;//[Offset: 0x81b8 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6BFA14514C88A4E80BBF529D327F9E58;//[Offset: 0x81f8 , Size: 64]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_9E98E946479BB6F25CF86B8F6C0246AD;//[Offset: 0x8238 , Size: 240]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F73C783C46F301367C465EAFEBA8559A;//[Offset: 0x8328 , Size: 272]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DCFADC264F289627ED48DF95EF386452;//[Offset: 0x8438 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B070AF83456F0A61C74614987FAE7C80;//[Offset: 0x84b8 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_500C364647FAF281EAF7EEB643A787BE;//[Offset: 0x84f8 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5BC93D324FE71B76644074976E6CC454;//[Offset: 0x8538 , Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C5A628AA4F9EFD70D6EA9BBA06098B5C;//[Offset: 0x85d0 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F1AEDBA24520120F9AAA378FB7CD4DA9;//[Offset: 0x8650 , Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_8BC235B84F01BD46AFCB7E8A2C2DCBF0;//[Offset: 0x8690 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_CB4E3CD2403BE017D2C5D89D248B5649;//[Offset: 0x86e8 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E4815A17400837DC67A56FBF630677D7;//[Offset: 0x8780 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_94FCE2534A41922F6EE0ADA29204CE8A;//[Offset: 0x87c0 , Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_7B2D93424224E2D8E11889A1FEEFC604;//[Offset: 0x8870 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8C883397463C220B272CCABCB5D4D97B;//[Offset: 0x89d0 , Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_99AA80B74BFC6E1FE4D50E87F3928EE6;//[Offset: 0x8a60 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_0FC7D45C43128D12BE8455A82451691C;//[Offset: 0x8bc0 , Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_B87ABCF942126AAD092D9CB6CD312ABE;//[Offset: 0x8c50 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_F4E64E8C460933CD02F14487E409ECDE;//[Offset: 0x8c88 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_618C7B784C8FE43D3670018E65458BAA;//[Offset: 0x8cc0 , Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_F034CE2B40AD3A98AA00AB94BA8C47A0;//[Offset: 0x8d58 , Size: 240]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0D4679C242F79898D029EBB785DC10B3;//[Offset: 0x8e48 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C4F7B15F4B32CBCC8519998F035B4536;//[Offset: 0x8e88 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F4FF06B9462B60471B5E3393887C9E40;//[Offset: 0x8ec8 , Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_9FE09B1343F08E378CD23D91CD58C223;//[Offset: 0x8f10 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_732A767340B20CBF50397390E4CEDBA3;//[Offset: 0x9070 , Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_1671B2AE4B1E0D2F8E9B769F78DAEA52;//[Offset: 0x9100 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4C4DC3E64381363E5EB6DC83B485A653;//[Offset: 0x9260 , Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_45B840D54A0CF19F97483E8C8401F0F4;//[Offset: 0x92f0 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D5C6F74A469FBCDA23ED1A86EF582F78;//[Offset: 0x9328 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7FF39F494AAC7A8DAF913B9B553FA09E;//[Offset: 0x9360 , Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0A3738E649065C63DAA33B871C8BF5F4;//[Offset: 0x93f8 , Size: 240]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F5AB53FE422F92A928203CA78734E9FD;//[Offset: 0x94e8 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0F0A9BAD4E606ACC202A4DB1099E3308;//[Offset: 0x9568 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5E6F01C2463734AFD033FAA526A4C777;//[Offset: 0x95a8 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_0855A2E34D22984F160B23AF245637C9;//[Offset: 0x95e8 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_195026BB4D191A5BA75F678ED0E00504;//[Offset: 0x9668 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_860DABD84F12647CE8D454BD09849965;//[Offset: 0x96a8 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8D5A1C1D46D889D39B5C94B51A8DEDBC;//[Offset: 0x96e8 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7FABE8F146269258F98D4DB2127E44F5;//[Offset: 0x9728 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_AF7A57D443A79482DEF1D6ACDD5C6523;//[Offset: 0x9768 , Size: 176]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_ACF67F1E415D08A812090AB622DCCD30;//[Offset: 0x9818 , Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_48F0801842A1711B2F754F9B57EB1D49;//[Offset: 0x98c8 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_99EE1C4C462B5FAF5497CC8797147246;//[Offset: 0x9900 , Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_66D65871430ED6892C1881A104B0E942;//[Offset: 0x9938 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E1359FE7442EFE77E9A20CA77B1E7F9C;//[Offset: 0x99c8 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_F8FEDE8E49559DF8564C41AC8B4D4EA7;//[Offset: 0x9a58 , Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_7559E28148D5A1854B4449AFE35775A4;//[Offset: 0x9ae8 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_31EC7AC7485DA0182DF0B6BDAA97518B;//[Offset: 0x9b20 , Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8F1F12BC4AC3516664F4FA94842EB52B;//[Offset: 0x9b58 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_40675A604F741DE7D23CDCB96236DFDE;//[Offset: 0x9be8 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_224B6CE84DED53427C30A5B097637DC3;//[Offset: 0x9c78 , Size: 144]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_A1C2F7C94638F977D5756296C143FD33;//[Offset: 0x9d08 , Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_2E172EDF47AD035573128B9FD045F96D;//[Offset: 0x9dc0 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_D20A990341B6273527E362A8003BAD4B;//[Offset: 0x9f20 , Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_E87DE78A49CA468213C3F39A2BC45209;//[Offset: 0x9fb0 , Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_DAC68D834DE4C43D88EE82BD65EE333D;//[Offset: 0x9fe8 , Size: 240]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1C330930432AD1BE3D174BA53AEBB464;//[Offset: 0xa0d8 , Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_EAE8A28B4FAA1B286FE8D082AFE9C15D;//[Offset: 0xa110 , Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E41F37504D764B67A0181BAEA80B1467;//[Offset: 0xa148 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E6DB53504F13AB2A5A80CCBB5D8730E8;//[Offset: 0xa1d8 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4DD8DC06479B8335789C08914DFAD26C;//[Offset: 0xa268 , Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_87C9E41347749FE2FC4E23A0FA1BA51A;//[Offset: 0xa300 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_FB9B34734FB8B82EAE8AE3B24B7B289F;//[Offset: 0xa460 , Size: 144]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_44DA701B440A2261258F17B3DE55970B;//[Offset: 0xa4f0 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA5DE6F9455753B758D53EA53E0A6DE8;//[Offset: 0xa528 , Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_C090D630420677578B2503A4E2194A6E;//[Offset: 0xa5c0 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12CEB9124449465AF873EC9C930C2384;//[Offset: 0xa618 , Size: 64]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_81B7406A4DB3C66810974698CE096CB7;//[Offset: 0xa658 , Size: 96]
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_3BC5777744E78472F0CFDC86099EBC4A;//[Offset: 0xa6b8 , Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_69EE9A0448E1F9BF4DA327809542DE2A;//[Offset: 0xa710 , Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_68FDCC6744F4FA2465AC5E8899EBEB74;//[Offset: 0xa790 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_64F01EC84D64FFCA245AA69D6B25BC20;//[Offset: 0xa810 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E5A32E2F4A834F3E591E16BAA9B687C5;//[Offset: 0xa850 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0750FAD645DF45DCE778BD8D2FF74FCD;//[Offset: 0xa890 , Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E96936184419968456EAF08AA37E47CD;//[Offset: 0xa8d0 , Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_777AB74C446D5144FF93159CB523BE1E;//[Offset: 0xa980 , Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_59FA3FD140FC92E48DC88B84BC476BF9;//[Offset: 0xa9e0 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C2CE9AD3498C3538A6EE53B91B22A2A2;//[Offset: 0xaa78 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F32ADA954F63A00AFD64EC946F11CBDF;//[Offset: 0xaab8 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E5D2926F471A9EFFAAA308A0F6E4EC6C;//[Offset: 0xaaf8 , Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_FB6CC4D741D5FDCBC54FA2A5A47A7363;//[Offset: 0xab90 , Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D9EA1E284D09B9B6E286988290F65187;//[Offset: 0xabe8 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6B3D2423482F7E30EE4DB883F5218900;//[Offset: 0xac80 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6904FBD042F55B5E17696E9EFB800E69;//[Offset: 0xacc0 , Size: 152]
	AnimNode_Root AnimGraphNode_Root_54C1F0ED422F557A3D58A1B8B79F8C7E;//[Offset: 0xad58 , Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C444C4FD4729985BDCCDED9E316E8717;//[Offset: 0xad90 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_62837EB942922DA14A60FB885FE8903E;//[Offset: 0xae10 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D4154717432C4F79E3AD4A9D4CB7023A;//[Offset: 0xae50 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9EE7DC224B48B5460FE2C39B9BF71043;//[Offset: 0xaed0 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_94656FBC478E9C84F652EF9CF4358064;//[Offset: 0xaf10 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7C8105A245E522BB023434A9626A1857;//[Offset: 0xaf50 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B811170549581ECAF70A6AB4EDF14F79;//[Offset: 0xaf90 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C3774AAD49537B5E5580C8AD7B82845A;//[Offset: 0xafd0 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8678E8794F2ADC6611F61EB69D756B81;//[Offset: 0xb068 , Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_1E2AC0854DB34634B8628FA06761103D;//[Offset: 0xb0a8 , Size: 88]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_A31FF8354E0DC5059C9C33B62B4D4F1B;//[Offset: 0xb100 , Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_CD3004EB4A125CB9EEC433BBFA524E89;//[Offset: 0xb158 , Size: 96]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_4C594B0E4880E2C129748CAC58560FFD;//[Offset: 0xb1b8 , Size: 272]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_5CA471594F3A8BB0245EF49A205E4E14;//[Offset: 0xb2c8 , Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D44F342947C2575963AB5CB6AD4F3E03;//[Offset: 0xb378 , Size: 96]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4A1B031341D802FD273D66A0FE2D12E4;//[Offset: 0xb3d8 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_FA9D1FF8475F807E37176089F0E37413;//[Offset: 0xb488 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EFA5139944DB2CCA9CF74F9D66E75FBA;//[Offset: 0xb4c8 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D87B9FFF40BE0E4CA6C92F8D7E97DD44;//[Offset: 0xb508 , Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_A0EFD9664DD84B310B99C984DD6A4AAA;//[Offset: 0xb5a0 , Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45D324AB4849DA27CD476BB1276165C7;//[Offset: 0xb5f8 , Size: 64]
	AnimNode_AnimDynamics AnimGraphNode_AnimDynamics_B24FC8AA42B8ADDB9CEA3B85CCF3783A;//[Offset: 0xb638 , Size: 616]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_39BC5C5244C7C0702026B984069F9592;//[Offset: 0xb8a0 , Size: 128]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_7517B75048FFBB6AF0EFE6BBF40B008E;//[Offset: 0xb920 , Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_1484B1BF4561229759BC4591C997673F;//[Offset: 0xb9d0 , Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_1F8EEC8D4046BCC5598106B3F45CF06D;//[Offset: 0xba28 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C6C90C5D464FD0A38F2B69A4744AE086;//[Offset: 0xbaa8 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A930BC944D56D9E49F368FBACB3C47CB;//[Offset: 0xbae8 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2BD588374099005EAEDF26833F93BB85;//[Offset: 0xbb28 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_858FC7BB46C4EEE973537F842BB8D43A;//[Offset: 0xbba8 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_94723F3049227328EB601682845C07E6;//[Offset: 0xbbe8 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E340BD354BE2DE050CCBDD859EEDD74B;//[Offset: 0xbc80 , Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_5697A2704506EC1D37930782F5E89BA1;//[Offset: 0xbcc0 , Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_142C4AFB42245BCB34C928AF4E1E45A9;//[Offset: 0xbd18 , Size: 96]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_04984E4D4F3C30CF30CAF792C054BE5B;//[Offset: 0xbd78 , Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E601DF6741CF7C3CF12C739C05B0606C;//[Offset: 0xbe28 , Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_F77B751A43E602B81F3D04BEFF0CE731;//[Offset: 0xbe70 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E518F09D4602077F30BFE39254041671;//[Offset: 0xbfd0 , Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_46D5A9EA4C1CDC66134D089C80FDAFC2;//[Offset: 0xc060 , Size: 352]
	AnimNode_CopyBone AnimGraphNode_CopyBone_9F139F6C4C558D3A1E6AE1A6B6463A78;//[Offset: 0xc1c0 , Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_40D4ED794CEBF824F7E90895F02C15A3;//[Offset: 0xc250 , Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6677BDA045FF9B2BDFAD97B5A7020449;//[Offset: 0xc288 , Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_48F9D2164A0C89EA4899B2833EC5E91C;//[Offset: 0xc308 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C48B4F5540F59FEA77ABCA91A94ACDB0;//[Offset: 0xc3a0 , Size: 64]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_B7DCB1F545BBA03C6F70009ECBE46581;//[Offset: 0xc3e0 , Size: 272]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_BA6CBBAC4A94CB17AFD44CAF9033BAC2;//[Offset: 0xc4f0 , Size: 128]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D168967647B889BED6C4A193DBCAA5C7;//[Offset: 0xc570 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_366EE6DE4B8C3E772CD8A5B06B7C4016;//[Offset: 0xc5a8 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_839E288E459F37C0A34590A3ABC589A6;//[Offset: 0xc5e8 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2C6839A2476C41A5BC7041A4922C0BE8;//[Offset: 0xc680 , Size: 64]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2A8BCC054AC3D281CAA6A4BFCCAF87B7;//[Offset: 0xc6c0 , Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_4DBD0FB34AC9AE0D9F7FCA85FC9441E4;//[Offset: 0xc6f8 , Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5C66128947FE3D52CD27B8A88E67845A;//[Offset: 0xc798 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B8DDB48247B9D99582285799A6065950;//[Offset: 0xc7d0 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_866C9DE74ECB92FB2890369644C0F642;//[Offset: 0xc810 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EBADCBDF4A69491C77469FB34974ADEC;//[Offset: 0xc850 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_44DFDE8D470A517B52C6B386662E0FE8;//[Offset: 0xc890 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5B41CD394E15933CC2B93E84F85859CE;//[Offset: 0xc910 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D55BADD744107EEFD6387E96310F553A;//[Offset: 0xc950 , Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_72A4A7894E234479B2E6D5A835D302F4;//[Offset: 0xc9d0 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_07C4529D4CA3F2473FEF8AB06DD3C672;//[Offset: 0xca50 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F5490B6042F791766F79608C0C916C9F;//[Offset: 0xca90 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_9CEF7C4F422C35E8CBA17197CFFCE062;//[Offset: 0xcad0 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_47F5E8B740E6125B1C5BB2B657D51286;//[Offset: 0xcb50 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F122FFAF47B7AB324070E687EE3295EA;//[Offset: 0xcb90 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_B2F5526743D81C1EA005C2B0D35B5BA3;//[Offset: 0xcbd0 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DD2F1D7B4E912E680D078795D5161F4E;//[Offset: 0xcc50 , Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_1F1A7FFD4436DA20E26672AEFD579C4A;//[Offset: 0xcc90 , Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_C4BA145E4DC4ACE6C892259348091355;//[Offset: 0xcd20 , Size: 144]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9C28ED25440F0CA694235F92AD6D2523;//[Offset: 0xcdb0 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3401536B4197C7B9B32EF79B911498A3;//[Offset: 0xcdf0 , Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1E23CE4A46F7297BC1701D98E0160712;//[Offset: 0xce30 , Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_65FA32D4404595CF6060529DF6B30D6D;//[Offset: 0xce68 , Size: 160]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_F4AEAD384AF11F5616219DA7087CC5F0;//[Offset: 0xcf08 , Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_FE6154D0480A4CB01F3C10B1089E948C;//[Offset: 0xcfa8 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5573156E41C49D41EDEBDF99EA4AEB8E;//[Offset: 0xcfe0 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B5892F124176CFCBC20C86A4C58E092E;//[Offset: 0xd078 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_1CA4F45345A1AE5273BD20B30FAC9E6D;//[Offset: 0xd0b8 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_32E98FE3460B562DAD1698BEE5A240CF;//[Offset: 0xd138 , Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2DD846914A378F55B450969D3CD5A365;//[Offset: 0xd178 , Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F3D71C7146D9A443D584559DCF95C296;//[Offset: 0xd1f8 , Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C7797636459EE0AB516899A78ED848FF;//[Offset: 0xd238 , Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6049A279493704997636659255189FCF;//[Offset: 0xd278 , Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6BD0BE1442599F894823E3A87CEE5189;//[Offset: 0xd310 , Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_4718FE6A4D1EDAAF5E24F0B57888F701;//[Offset: 0xd3a8 , Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_A14268BB4435D0D570EA2EA0B7A440B9;//[Offset: 0xd3e8 , Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_79DE278948BDE38CB0975D87F635D89A;//[Offset: 0xd488 , Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7CEBFB4F4DF3A10FCB30B08B387F7F0C;//[Offset: 0xd4c0 , Size: 152]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_666EC711455C029D5C51D1A2A55CD773;//[Offset: 0xd558 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7A4D50264F8A5DF2B358A1853F964720;//[Offset: 0xd590 , Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_0C44AFF744B7FB1257B514B58C7F1EFB;//[Offset: 0xd5d0 , Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_9A7256894139F8D84DE502BBA05F1F51;//[Offset: 0xd670 , Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_CFD264AB46BB1E56E96C78BA80E877CF;//[Offset: 0xd6a8 , Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9E63110440E075AFF29E4CB39A529926;//[Offset: 0xd6e0 , Size: 64]
	float MoveRight;//[Offset: 0xd720 , Size: 4]
	float MoveForward;//[Offset: 0xd724 , Size: 4]
	float AnimRate;//[Offset: 0xd728 , Size: 4]
	float HandFavoring;//[Offset: 0xd72c , Size: 4]
	float HandIKWeight;//[Offset: 0xd730 , Size: 4]
	float FallingVelocityZFactor;//[Offset: 0xd734 , Size: 4]
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0xd738 , Size: 12]
	Vector FirstAimSpine_Prone;//[Offset: 0xd744 , Size: 12]
	float LeaveShovel_Rate;//[Offset: 0xd750 , Size: 4]
	Object* SpecialRescueMontageAsset;//[Offset: 0xd758 , Size: 40]
	Object* PhoneMeshAsset;//[Offset: 0xd780 , Size: 40]
	StaticMesh* PhoneMesh;//[Offset: 0xd7a8 , Size: 4]
	BP_RevivalPhone_C* PhoneActor;//[Offset: 0xd7ac , Size: 4]
	TimerHandle TimerHandle_DelayLeaveCallingState;//[Offset: 0xd7b0 , Size: 8]
	bool RevivalPhoneCanDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7b8 , Size: 1]

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x530 , Size: 1008]
	Rotator OwnerAimRotation;//[Offset: 0x924 , Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0x930 , Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c , Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93d , Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93e , Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93f , Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940 , Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941 , Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x942 , Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x943 , Size: 1]
	Rotator SwimRotate;//[Offset: 0x944 , Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950 , Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951 , Size: 1]
	float C_SwimSpeed;//[Offset: 0x954 , Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0x958 , Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c , Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0x960 , Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964 , Size: 1]
	byte C_SeatSpecialType;//[Offset: 0x965 , Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0x968 , Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c , Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96d , Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0x970 , Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0x974 , Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0x978 , Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0x97c , Size: 4]
	float NeckNotTurnAngle;//[Offset: 0x980 , Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0x984 , Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0x988 , Size: 4]
	float NeckMapAngleLeft;//[Offset: 0x98c , Size: 4]
	float NeckMapAngleRight;//[Offset: 0x990 , Size: 4]
	float NeckMapAngleUp;//[Offset: 0x994 , Size: 4]
	float NeckMapAngleDown;//[Offset: 0x998 , Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0x99c , Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0x9a0 , Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0x9a4 , Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0x9a8 , Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0x9ac , Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0x9b0 , Size: 4]
	float NeckTurnSpeed;//[Offset: 0x9b4 , Size: 4]
	byte C_ParachuteState;//[Offset: 0x9b8 , Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0x9bc , Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8 , Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c9 , Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ca , Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cb , Size: 1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc , Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0x9d0 , Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0x9d4 , Size: 4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0x9d8 , Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0x9dc , Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0x9e0 , Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4 , Size: 1]
	Vector C_MoveDirExt;//[Offset: 0x9e8 , Size: 12]
	int C_DebugAnimBPBranch;//[Offset: 0x9f4 , Size: 4]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0x9f8 , Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xa04 , Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10 , Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11 , Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12 , Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa13 , Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14 , Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa15 , Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa16 , Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa17 , Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18 , Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19 , Size: 1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1a , Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1b , Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xa1c , Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xa20 , Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24 , Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xa28 , Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xa34 , Size: 4]
	bool C_IsReloadingWhilePoseChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38 , Size: 1]
	float LeanOutL_AimAngle;//[Offset: 0xa40 , Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xa44 , Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48 , Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60 , Size: 1]
	void TryToFireFlareGun();// 0x14388c8
	void SetVelocityZFactor(float NewFactor);// 0x1438850
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x143878c
	void PostCacheParamList(float DeltaSeconds);// 0x1bf56d0
	void DumpAllProperties();// 0x12dedb4
	void DumpAllAnimInstancesInThisWorld();// 0x12dedb4
	AnimParamList CacheParamList(float DeltaSeconds);// 0x143865c
	PlayerAnimList CacheAnimVarList();// 0x143858c

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1 , Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2 , Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3 , Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5 , Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6 , Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7 , Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8 , Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9 , Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa , Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb , Size: 1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd , Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe , Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff , Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300 , Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301 , Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302 , Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303 , Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304 , Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305 , Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306 , Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307 , Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309 , Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a , Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b , Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d , Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e , Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f , Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310 , Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311 , Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312 , Size: 1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x313 , Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314 , Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315 , Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316 , Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317 , Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	bool C_Reload_Or_PickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319 , Size: 1]
	bool C_TurningBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a , Size: 1]
	bool C_SightSlowMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b , Size: 1]
	bool C_SightSlowMoveAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	bool C_AWTNoneWeaponType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d , Size: 1]
	bool C_ScopingAndAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e , Size: 1]
	bool C_Walk2RiflejumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f , Size: 1]
	byte C_LODLevel;//[Offset: 0x320 , Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x324 , Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x32c , Size: 12]
	byte C_PoseType;//[Offset: 0x338 , Size: 1]
	byte C_LastMovementMode;//[Offset: 0x339 , Size: 1]
	byte C_WeaponType;//[Offset: 0x33a , Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x33b , Size: 1]
	byte C_WeaponState;//[Offset: 0x33c , Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d , Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x340 , Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344 , Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345 , Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346 , Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x348 , Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x34c , Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x350 , Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x354 , Size: 4]
	float C_FireAlpha;//[Offset: 0x358 , Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x35c , Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x360 , Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x364 , Size: 4]
	float PeekFrameRate;//[Offset: 0x368 , Size: 4]
	float PeekSpeed;//[Offset: 0x36c , Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x370 , Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x374 , Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x378 , Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x37c , Size: 12]
	Vector C_MoveDir;//[Offset: 0x388 , Size: 12]
	Vector C_HurtDir;//[Offset: 0x394 , Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x3a0 , Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x3ac , Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x3b8 , Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x3c4 , Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x3d0 , Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x3dc , Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x3e8 , Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x3f4 , Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x400 , Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x40c , Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x418 , Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x424 , Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x430 , Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x43c , Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x448 , Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x454 , Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x460 , Size: 12]
	Rotator C_UpShpvelingRotationAddZOnly;//[Offset: 0x46c , Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x478 , Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x484 , Size: 4]
	Rotator OwnerRotation;//[Offset: 0x488 , Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494 , Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x498 , Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x4a4 , Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x4a8 , Size: 12]
	Rotator FloorRotation;//[Offset: 0x4b4 , Size: 12]
	byte Role;//[Offset: 0x4c0 , Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1 , Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2 , Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3 , Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4 , Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x4c8 , Size: 4]
	BlendSpace* C_MovementBSCache;//[Offset: 0x4cc , Size: 4]
	BlendSpace* C_MovementBSCache_Dest;//[Offset: 0x4d0 , Size: 4]
	AnimSequence* C_IdleAddtive;//[Offset: 0x4d4 , Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x4d8 , Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x4dc , Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x4e0 , Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x4e4 , Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x4e8 , Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x4ec , Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x4f0 , Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x4f4 , Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x4f8 , Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x4fc , Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x500 , Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x504 , Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x508 , Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x50c , Size: 4]
	enum AnimInstanceType;//[Offset: 0x510 , Size: 1]
	void RefreshPeekState();// 0x1439d3c
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x1439cbc
	void PlayPostReloadWeaponAnimation();// 0x1439ca8
	void PlayPlayerDeadAnimation();// 0x1439c94
	void PlayAnimationByEventType(byte Type);// 0x1439c1c
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x1439b9c
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x1439ad8
	void HandlePlayerPickUp();// 0x1439abc
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x1439a34
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x1bf56d0
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x143988c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x143980c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x1439660
	byte GetRole();// 0x1439638
	void EnableAnimFlag(enum PlayFlag);// 0x14395c0
	void DisableAnimFlag(enum PlayFlag);// 0x1439548

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x2ec , Size: 4]
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x143988c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x143980c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x1439660

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8 , Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	float AnimLength;//[Offset: 0x64 , Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68 , Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80 , Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84 , Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88 , Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94 , Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98 , Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4 , Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0 , Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0 , Size: 4]
	byte InterpolationType;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0 , Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0 , Size: 4]
	Vector SampleValue;//[Offset: 0x4 , Size: 12]
	float RateScale;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0 , Size: 4]
	float Weights;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0 , Size: 12]
	float Min;//[Offset: 0xc , Size: 4]
	float Max;//[Offset: 0x10 , Size: 4]
	int GridNum;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]

--------------------------------
Class: BP_RevivalPhone_C.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* StaticMesh;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x2c , Size: 12]
	PoseLink Additive;//[Offset: 0x38 , Size: 12]
	float alpha;//[Offset: 0x44 , Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48 , Size: 8]
	int LODThreshold;//[Offset: 0x50 , Size: 4]
	float ActualAlpha;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: AnimNode_Base
	ExposedValueHandler EvaluateGraphExposedInputs;//[Offset: 0x8 , Size: 32]

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0 , Size: 4]
	float Bias;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0 , Size: 8]
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: ExposedValueCopyRecord
	Property* SourceProperty;//[Offset: 0x0 , Size: 4]
	FName SourcePropertyName;//[Offset: 0x8 , Size: 8]
	FName SourceSubPropertyName;//[Offset: 0x10 , Size: 8]
	int SourceArrayIndex;//[Offset: 0x18 , Size: 4]
	Property* DestProperty;//[Offset: 0x1c , Size: 4]
	int DestArrayIndex;//[Offset: 0x20 , Size: 4]
	int Size;//[Offset: 0x24 , Size: 4]
	bool bInstanceIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	enum PostCopyOperation;//[Offset: 0x29 , Size: 1]
	enum CopyType;//[Offset: 0x2a , Size: 1]
	Property* CachedSourceProperty;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91 , Size: 1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x2c , Size: 12]
	float[] blendTime;//[Offset: 0x38 , Size: 12]
	enum BlendType;//[Offset: 0x44 , Size: 1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x48 , Size: 4]
	BlendProfile* BlendProfile;//[Offset: 0x4c , Size: 4]
	AlphaBlend[] Blends;//[Offset: 0x50 , Size: 12]
	float[] BlendWeights;//[Offset: 0x5c , Size: 12]
	float[] RemainingBlendTimes;//[Offset: 0x68 , Size: 12]
	int LastActiveChildIndex;//[Offset: 0x74 , Size: 4]
	BlendSampleData[] PerBoneSampleData;//[Offset: 0x78 , Size: 12]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90 , Size: 1]

--------------------------------
Class: BlendSampleData
	int SampleDataIndex;//[Offset: 0x0 , Size: 4]
	AnimSequence* Animation;//[Offset: 0x4 , Size: 4]
	float TotalWeight;//[Offset: 0x8 , Size: 4]
	float Time;//[Offset: 0xc , Size: 4]
	float PreviousTime;//[Offset: 0x10 , Size: 4]
	float SamplePlayRate;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: AnimNode_SaveCachedPose.AnimNode_Base
	PoseLink Pose;//[Offset: 0x2c , Size: 12]
	FName CachePoseName;//[Offset: 0x38 , Size: 8]
	float GlobalWeight;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a , Size: 1]

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x50 , Size: 4]
	float Y;//[Offset: 0x54 , Size: 4]
	float Z;//[Offset: 0x58 , Size: 4]
	float PlayRate;//[Offset: 0x5c , Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	float StartPosition;//[Offset: 0x64 , Size: 4]
	BlendSpaceBase* BlendSpace;//[Offset: 0x68 , Size: 4]
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	BlendFilter BlendFilter;//[Offset: 0x70 , Size: 108]
	BlendSampleData[] BlendSampleDataCache;//[Offset: 0xdc , Size: 12]
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0xe8 , Size: 4]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a , Size: 1]
	int GroupIndex;//[Offset: 0x2c , Size: 4]
	byte GroupRole;//[Offset: 0x30 , Size: 1]
	float BlendWeight;//[Offset: 0x34 , Size: 4]
	float InternalTimeAccumulator;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: BlendFilter

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x2c , Size: 4]
	int MaxTransitionsPerFrame;//[Offset: 0x30 , Size: 4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35 , Size: 1]
	int CurrentState;//[Offset: 0x3c , Size: 4]
	float ElapsedTime;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x50 , Size: 4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	float PlayRate;//[Offset: 0x58 , Size: 4]
	float StartPosition;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: AnimNode_LayeredBoneBlend.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x2c , Size: 12]
	PoseLink[] BlendPoses;//[Offset: 0x38 , Size: 12]
	InputBlendPose[] LayerSetup;//[Offset: 0x44 , Size: 12]
	float[] BlendWeights;//[Offset: 0x50 , Size: 12]
	bool bMeshSpaceRotationBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	byte CurveBlendOption;//[Offset: 0x5d , Size: 1]
	bool bBlendRootMotionBasedOnRootBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e , Size: 1]
	bool bHasRelevantPoses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f , Size: 1]
	PerBoneBlendWeight[] PerBoneBlendWeights;//[Offset: 0x60 , Size: 12]
	Guid SkeletonGuid;//[Offset: 0x6c , Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0x7c , Size: 16]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0 , Size: 8]
	int BlendDepth;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: PerBoneBlendWeight
	int SourceIndex;//[Offset: 0x0 , Size: 4]
	float BlendWeight;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AnimNode_UseCachedPose.AnimNode_Base
	PoseLink LinkToCachingNode;//[Offset: 0x2c , Size: 12]
	FName CachePoseName;//[Offset: 0x38 , Size: 8]

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: AnimNode_RotateRootBone.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x2c , Size: 12]
	float Pitch;//[Offset: 0x38 , Size: 4]
	float Yaw;//[Offset: 0x3c , Size: 4]
	Rotator MeshToComponent;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x2c , Size: 12]
	FName SlotName;//[Offset: 0x38 , Size: 8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]

--------------------------------
Class: AnimNode_RotationOffsetBlendSpace.AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	PoseLink BasePose;//[Offset: 0xec , Size: 12]
	int LODThreshold;//[Offset: 0xf8 , Size: 4]
	bool bIsLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	float alpha;//[Offset: 0x100 , Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x104 , Size: 8]
	float ActualAlpha;//[Offset: 0x10c , Size: 4]

--------------------------------
Class: AnimNode_TwoWayBlend.AnimNode_Base
	PoseLink A;//[Offset: 0x2c , Size: 12]
	PoseLink B;//[Offset: 0x38 , Size: 12]
	float alpha;//[Offset: 0x44 , Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48 , Size: 8]
	float InternalBlendAlpha;//[Offset: 0x50 , Size: 4]
	bool bAIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	bool bBIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55 , Size: 1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56 , Size: 1]

--------------------------------
Class: AnimNode_BlendListByInt.AnimNode_BlendListBase.AnimNode_Base
	int ActiveChildIndex;//[Offset: 0x94 , Size: 4]

--------------------------------
Class: AnimNode_BlendListByEnum.AnimNode_BlendListBase.AnimNode_Base
	int[] EnumToPoseIndex;//[Offset: 0x94 , Size: 12]
	byte ActiveEnumValue;//[Offset: 0xa0 , Size: 1]

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0x58 , Size: 24]
	Vector Translation;//[Offset: 0x70 , Size: 12]
	Rotator Rotation;//[Offset: 0x7c , Size: 12]
	Vector Scale;//[Offset: 0x88 , Size: 12]
	byte TranslationMode;//[Offset: 0x94 , Size: 1]
	byte RotationMode;//[Offset: 0x95 , Size: 1]
	byte ScaleMode;//[Offset: 0x96 , Size: 1]
	byte TranslationSpace;//[Offset: 0x97 , Size: 1]
	byte RotationSpace;//[Offset: 0x98 , Size: 1]
	byte ScaleSpace;//[Offset: 0x99 , Size: 1]

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x2c , Size: 12]
	float alpha;//[Offset: 0x38 , Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x3c , Size: 8]
	int LODThreshold;//[Offset: 0x44 , Size: 4]
	float ActualAlpha;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: AnimNode_CopyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference SourceBone;//[Offset: 0x58 , Size: 24]
	BoneReference TargetBone;//[Offset: 0x70 , Size: 24]
	bool bCopyTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]
	bool bCopyRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89 , Size: 1]
	bool bCopyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a , Size: 1]
	byte ControlSpace;//[Offset: 0x8b , Size: 1]

--------------------------------
Class: AnimNode_SubInstance.AnimNode_Base
	PoseLink InPose;//[Offset: 0x2c , Size: 12]
	class AnimInstance* InstanceClass;//[Offset: 0x38 , Size: 4]
	AnimInstance* InstanceToRun;//[Offset: 0x3c , Size: 4]
	Property*[] InstanceProperties;//[Offset: 0x40 , Size: 12]
	Property*[] SubInstanceProperties;//[Offset: 0x4c , Size: 12]
	FName[] SourcePropertyNames;//[Offset: 0x58 , Size: 12]
	FName[] DestPropertyNames;//[Offset: 0x64 , Size: 12]

--------------------------------
Class: AnimNode_Fabrik.AnimNode_SkeletalControlBase.AnimNode_Base
	Transform EffectorTransform;//[Offset: 0x60 , Size: 48]
	byte EffectorTransformSpace;//[Offset: 0x90 , Size: 1]
	BoneReference EffectorTransformBone;//[Offset: 0x98 , Size: 24]
	BoneSocketTarget EffectorTarget;//[Offset: 0xb0 , Size: 96]
	byte EffectorRotationSource;//[Offset: 0x110 , Size: 1]
	BoneReference TipBone;//[Offset: 0x118 , Size: 24]
	BoneReference RootBone;//[Offset: 0x130 , Size: 24]
	float Precision;//[Offset: 0x148 , Size: 4]
	int MaxIterations;//[Offset: 0x14c , Size: 4]
	bool bEnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150 , Size: 1]

--------------------------------
Class: BoneSocketTarget
	bool bUseSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	BoneReference BoneReference;//[Offset: 0x8 , Size: 24]
	SocketReference SocketReference;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: SocketReference
	FName SocketName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: AnimNode_ApplyMeshSpaceAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x2c , Size: 12]
	PoseLink Additive;//[Offset: 0x38 , Size: 12]
	float alpha;//[Offset: 0x44 , Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48 , Size: 8]
	int LODThreshold;//[Offset: 0x50 , Size: 4]
	float ActualAlpha;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: AnimNode_AnimDynamics.AnimNode_SkeletalControlBase.AnimNode_Base
	enum SimulationSpace;//[Offset: 0x58 , Size: 1]
	BoneReference RelativeSpaceBone;//[Offset: 0x60 , Size: 24]
	bool bChain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	BoneReference BoundBone;//[Offset: 0x80 , Size: 24]
	BoneReference ChainEnd;//[Offset: 0x98 , Size: 24]
	Vector BoxExtents;//[Offset: 0xb0 , Size: 12]
	Vector LocalJointOffset;//[Offset: 0xbc , Size: 12]
	Vector OldLocalJointOffset;//[Offset: 0xc8 , Size: 12]
	float GravityScale;//[Offset: 0xd4 , Size: 4]
	bool bLinearSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	bool bAngularSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9 , Size: 1]
	float LinearSpringConstant;//[Offset: 0xdc , Size: 4]
	float AngularSpringConstant;//[Offset: 0xe0 , Size: 4]
	bool bEnableWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]
	bool bWindWasEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5 , Size: 1]
	float WindScale;//[Offset: 0xe8 , Size: 4]
	bool bOverrideLinearDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec , Size: 1]
	float LinearDampingOverride;//[Offset: 0xf0 , Size: 4]
	bool bOverrideAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	float AngularDampingOverride;//[Offset: 0xf8 , Size: 4]
	bool bOverrideAngularBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	float AngularBiasOverride;//[Offset: 0x100 , Size: 4]
	bool bDoUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool bDoEval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	int NumSolverIterationsPreUpdate;//[Offset: 0x108 , Size: 4]
	int NumSolverIterationsPostUpdate;//[Offset: 0x10c , Size: 4]
	AnimPhysConstraintSetup ConstraintSetup;//[Offset: 0x110 , Size: 92]
	bool bUseDynamicAngularLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c , Size: 1]
	Vector Dynamic_AngularLimitsMin;//[Offset: 0x170 , Size: 12]
	Vector Dynamic_AngularLimitsMax;//[Offset: 0x17c , Size: 12]
	bool bUsePlanarLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188 , Size: 1]
	AnimPhysPlanarLimit[] PlanarLimits;//[Offset: 0x18c , Size: 12]
	bool bUseSphericalLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198 , Size: 1]
	AnimPhysSphericalLimit[] SphericalLimits;//[Offset: 0x19c , Size: 12]
	enum CollisionType;//[Offset: 0x1a8 , Size: 1]
	float SphereCollisionRadius;//[Offset: 0x1ac , Size: 4]
	int NonEvaluateFrameNum;//[Offset: 0x1b0 , Size: 4]
	Vector ExternalForce;//[Offset: 0x1b8 , Size: 12]

--------------------------------
Class: AnimPhysConstraintSetup
	enum LinearXLimitType;//[Offset: 0x0 , Size: 1]
	enum LinearYLimitType;//[Offset: 0x1 , Size: 1]
	enum LinearZLimitType;//[Offset: 0x2 , Size: 1]
	Vector LinearAxesMin;//[Offset: 0x4 , Size: 12]
	Vector LinearAxesMax;//[Offset: 0x10 , Size: 12]
	enum AngularConstraintType;//[Offset: 0x1c , Size: 1]
	enum TwistAxis;//[Offset: 0x1d , Size: 1]
	float ConeAngle;//[Offset: 0x20 , Size: 4]
	float AngularXAngle;//[Offset: 0x24 , Size: 4]
	float AngularYAngle;//[Offset: 0x28 , Size: 4]
	float AngularZAngle;//[Offset: 0x2c , Size: 4]
	Vector AngularLimitsMin;//[Offset: 0x30 , Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x3c , Size: 12]
	enum AngularTargetAxis;//[Offset: 0x48 , Size: 1]
	Vector AngularTarget;//[Offset: 0x4c , Size: 12]
	bool bLinearFullyLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]

--------------------------------
Class: AnimPhysPlanarLimit
	BoneReference DrivingBone;//[Offset: 0x0 , Size: 24]
	Transform PlaneTransform;//[Offset: 0x20 , Size: 48]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]

--------------------------------
Class: AnimPhysSphericalLimit
	BoneReference DrivingBone;//[Offset: 0x0 , Size: 24]
	Vector SphereLocalOffset;//[Offset: 0x18 , Size: 12]
	float LimitRadius;//[Offset: 0x24 , Size: 4]
	enum LimitType;//[Offset: 0x28 , Size: 1]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x3d8 , Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x3dc , Size: 4]

--------------------------------
Class: AnimInstanceProxy

--------------------------------
Class: UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	GameModePatchTableData PatchTableData;//[Offset: 0x350 , Size: 240]
	float GridCheckSize;//[Offset: 0x440 , Size: 4]
	float DeepCheckSize;//[Offset: 0x444 , Size: 4]
	int MaxPlayerLimit;//[Offset: 0x448 , Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c , Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d , Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44e , Size: 1]
	int AntiDataCD;//[Offset: 0x450 , Size: 4]
	int WeatherID;//[Offset: 0x454 , Size: 4]
	FString WeatherName;//[Offset: 0x458 , Size: 12]
	int RoomMode;//[Offset: 0x464 , Size: 4]
	int SeasonIdx;//[Offset: 0x468 , Size: 4]
	float MeteorShowerRatio;//[Offset: 0x46c , Size: 4]
	FString ItemTableName;//[Offset: 0x470 , Size: 12]
	FString ItemClassPath;//[Offset: 0x47c , Size: 12]
	FString ReplayPushURL;//[Offset: 0x488 , Size: 12]
	int ReplayType;//[Offset: 0x494 , Size: 4]
	FString ReplayTitle;//[Offset: 0x498 , Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x4a4 , Size: 1]
	FString[] IgnoreItemClassPathList;//[Offset: 0x4a8 , Size: 12]
	int[] DsSwitch;//[Offset: 0x4b4 , Size: 12]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0 , Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1 , Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x4c4 , Size: 12]
	FString PickupBoxConfigDataTableName;//[Offset: 0x4d0 , Size: 12]
	FString VehicleTableName;//[Offset: 0x4dc , Size: 12]
	FString VehicleClassPath;//[Offset: 0x4e8 , Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4 , Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5 , Size: 1]
	Vector RegionCenter;//[Offset: 0x4f8 , Size: 12]
	float RegionRadius;//[Offset: 0x504 , Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x508 , Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x544 , Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x548 , Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x54c , Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550 , Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x554 , Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x558 , Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x55c , Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x560 , Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x564 , Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568 , Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569 , Size: 1]
	bool bEnableDSGameTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a , Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x56c , Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x578 , Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x57c , Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x588 , Size: 12]
	int IsGameModeFpp;//[Offset: 0x594 , Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598 , Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x59c , Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x5a8 , Size: 60]
	int BornItemId;//[Offset: 0x5e4 , Size: 4]
	int BornItemCount;//[Offset: 0x5e8 , Size: 4]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec , Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed , Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x5f0 , Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x5fc , Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608 , Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609 , Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60a , Size: 1]
	int nClientType;//[Offset: 0x60c , Size: 4]
	int nBattleType;//[Offset: 0x610 , Size: 4]
	int ItemSpawnInfoReportProb;//[Offset: 0x614 , Size: 4]
	<int,ItemSpawnStatData> ItemSpawnStatData;//[Offset: 0x618 , Size: 60]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848 , Size: 1]
	float OBInfoTimeStep;//[Offset: 0x8e0 , Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0x900 , Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0x90c , Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x918 , Size: 12]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0x9b8 , Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0x9c4 , Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0 , Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x9d4 , Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x9e0 , Size: 12]
	FString GrenadeEffectPath;//[Offset: 0x9ec , Size: 12]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8 , Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9 , Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa , Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x9fc , Size: 12]
	float FestivalAirDropProb;//[Offset: 0xa08 , Size: 4]
	float MonsterDropPar;//[Offset: 0xa0c , Size: 4]
	float SceneDropParam;//[Offset: 0xa10 , Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xa14 , Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xa18 , Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1c , Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xa20 , Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xa2c , Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xa38 , Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xa44 , Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xa50 , Size: 84]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xaa4 , Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0 , Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xae4 , Size: 12]
	void SyncPlayerNames();// 0x184aac8
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x184a98c
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x184a810
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x184a704
	void SetGameEndReportData();// 0x1321528
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x184a650
	void RetrieveBattleData(out BattleData OutBattleData);// 0x184a5bc
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x184a4f8
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x184a434
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x184a370
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x184a2f0
	void RefreshWorldActiveRange();// 0x184a2d4
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x184a210
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 Uid);// 0x1849f80
	int RecoardAlivePlayerNum();// 0x1849f50
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x1849ec8
	void OnPlayerFiring(uint32 InPlayerKey);// 0x1849e50
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1321350
	void OnObserverLogout(UAEPlayerController* InController);// 0x1849dd8
	void OnObserverLogin(UAEPlayerController* InController);// 0x1849d60
	void OnMsg(FString Msg);// 0x1849c9c
	void OnAirDropBoxLanded(int BoxId, out const Vector Pos);// 0x1849bcc
	void OnAirDropBoxEmpty(int BoxId);// 0x1849b4c
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x1849850
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x184978c
	void NotifyGameModeInit();// 0x154d624
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x184970c
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x1849548
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x18493f8
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x184936c
	void InitWorldActiveRange();// 0x1849350
	void InitSeasonStatue();// 0x1849334
	bool InitPatchTableData();// 0x1849304
	void InitGenerator();// 0x144f328
	void InitGameParamsFromGameMode();// 0x18492e8
	void InitDynamicTriggers();// 0x18492cc
	void InitDynamicBuildingGroups();// 0x144f0cc
	void InitBornWithApple();// 0x18492b0
	void InitAdvertisement();// 0x1490664
	void Heartbeat();// 0x184929c
	bool HasDynamicBuildingGroup();// 0x1849274
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int count);// 0x18490d8
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x1849014
	int GetSurvivingTeamCount();// 0x1848fe4
	int GetSurvivingCharacterCount();// 0x1848fb4
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x1848e60
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x1848d0c
	void GetPlayerAndRealAiNum(out int OutPlayerNum, out int OutRealAiNum, out int OutPlayerNumExcludeExit, out int OutPlayerNumExcludeExitAndLost);// 0x1848b70
	UAEPlayerController*[] GetObserverControllerList();// 0x1848ab0
	void GetMonsterNum(out int MonsterNum);// 0x1848a20
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x184895c
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x1848898
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x18487b4
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x1848734
	void DestroyAllPickUpObjs();// 0x12dedb4
	void DeleteSeasonStatue();// 0x14494a0
	void DeleteDynamicLoadItem();// 0x1470ea4
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x18486b4
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x18485e8
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x1848494
	void AddAirDropBox(int BoxId, out const Vector Pos);// 0x18483c4

--------------------------------
Class: GameModePatchTableData
	<int,ItemTableStruct> Item;//[Offset: 0x0 , Size: 60]
	<int,PickUpCountSettingTableStruct> PickUpCountSetting;//[Offset: 0x3c , Size: 60]
	<int,BackpackMappingTableStruct> BackpackMapping;//[Offset: 0x78 , Size: 60]
	<int,WeaponAttachmentsTableStruct> WeaponAttachments;//[Offset: 0xb4 , Size: 60]

--------------------------------
Class: ItemTableStruct
	int ItemID;//[Offset: 0x0 , Size: 4]
	int ItemType;//[Offset: 0x4 , Size: 4]
	int ItemSubType;//[Offset: 0x8 , Size: 4]
	int BPID;//[Offset: 0xc , Size: 4]
	int DefaultBPID;//[Offset: 0x10 , Size: 4]
	int Durability;//[Offset: 0x14 , Size: 4]
	int AIFullVaule;//[Offset: 0x18 , Size: 4]
	bool Equippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e , Size: 1]
	int MaxCount;//[Offset: 0x20 , Size: 4]
	int WeightforOrder;//[Offset: 0x24 , Size: 4]
	int UnitWeight_f;//[Offset: 0x28 , Size: 4]
	int RedEmotionFightId;//[Offset: 0x2c , Size: 4]
	FString PickupSound;//[Offset: 0x30 , Size: 12]
	FString DropSound;//[Offset: 0x3c , Size: 12]
	FString EquipSound;//[Offset: 0x48 , Size: 12]
	FString UnEquipSound;//[Offset: 0x54 , Size: 12]
	FString PickUpBank;//[Offset: 0x60 , Size: 12]
	FString DropBank;//[Offset: 0x6c , Size: 12]
	FString EquipBank;//[Offset: 0x78 , Size: 12]
	FString UnEquipBank;//[Offset: 0x84 , Size: 12]
	bool IsPatchItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90 , Size: 1]

--------------------------------
Class: PickUpCountSettingTableStruct
	int ItemID;//[Offset: 0x0 , Size: 4]
	int PickUpMaxCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: BackpackMappingTableStruct
	int SkinID;//[Offset: 0x0 , Size: 4]
	int ItemIDLv1;//[Offset: 0x4 , Size: 4]
	int ItemIDLv2;//[Offset: 0x8 , Size: 4]
	int ItemIDLv3;//[Offset: 0xc , Size: 4]
	int SkinItemIDLv1;//[Offset: 0x10 , Size: 4]
	int SkinItemIDLv2;//[Offset: 0x14 , Size: 4]
	int SkinItemIDLv3;//[Offset: 0x18 , Size: 4]
	int LobbyShowItemID;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: WeaponAttachmentsTableStruct
	int KeyID;//[Offset: 0x0 , Size: 4]
	int Muzzle1ID;//[Offset: 0x4 , Size: 4]
	int Muzzle2ID;//[Offset: 0x8 , Size: 4]
	int Muzzle3ID;//[Offset: 0xc , Size: 4]
	int Muzzle4ID;//[Offset: 0x10 , Size: 4]
	int Muzzle5ID;//[Offset: 0x14 , Size: 4]
	int Muzzle6ID;//[Offset: 0x18 , Size: 4]
	int Upper1ID;//[Offset: 0x1c , Size: 4]
	int Upper2ID;//[Offset: 0x20 , Size: 4]
	int Upper3ID;//[Offset: 0x24 , Size: 4]
	int Upper4ID;//[Offset: 0x28 , Size: 4]
	int Upper5ID;//[Offset: 0x2c , Size: 4]
	int Upper6ID;//[Offset: 0x30 , Size: 4]
	int Upper7ID;//[Offset: 0x34 , Size: 4]
	int Stock1ID;//[Offset: 0x38 , Size: 4]
	int Stock2ID;//[Offset: 0x3c , Size: 4]
	int Magazine1ID;//[Offset: 0x40 , Size: 4]
	int Magazine2ID;//[Offset: 0x44 , Size: 4]
	int Magazine3ID;//[Offset: 0x48 , Size: 4]
	int Magazine4ID;//[Offset: 0x4c , Size: 4]
	int Magazine5ID;//[Offset: 0x50 , Size: 4]
	int Magazine6ID;//[Offset: 0x54 , Size: 4]
	int Lower1ID;//[Offset: 0x58 , Size: 4]
	int Lower2ID;//[Offset: 0x5c , Size: 4]
	int Lower3ID;//[Offset: 0x60 , Size: 4]
	int Lower4ID;//[Offset: 0x64 , Size: 4]
	int Lower5ID;//[Offset: 0x68 , Size: 4]
	int BulletID;//[Offset: 0x6c , Size: 4]
	int ProposeBulletNum;//[Offset: 0x70 , Size: 4]
	int AIMinAttackDist;//[Offset: 0x74 , Size: 4]
	int AIMaxAttackDist;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0 , Size: 12]
	FString TriggerClassPath;//[Offset: 0xc , Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0 , Size: 12]
	Rotator rot;//[Offset: 0xc , Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0 , Size: 12]
	int ActID;//[Offset: 0xc , Size: 4]
	FString Path;//[Offset: 0x10 , Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	int[] PosIdxList;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float locX;//[Offset: 0x0 , Size: 4]
	float locY;//[Offset: 0x4 , Size: 4]
	float LocZ;//[Offset: 0x8 , Size: 4]
	float RotX;//[Offset: 0xc , Size: 4]
	float RotY;//[Offset: 0x10 , Size: 4]
	float RotZ;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: ItemSpawnStatData

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0 , Size: 12]
	FString HttpImgPath;//[Offset: 0xc , Size: 12]
	Vector Loc;//[Offset: 0x18 , Size: 12]
	Rotator rot;//[Offset: 0x24 , Size: 12]
	Vector Scale;//[Offset: 0x30 , Size: 12]
	int ID;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x2d0 , Size: 4]
	FString StaticMeshPath;//[Offset: 0x2d4 , Size: 12]
	FString PicUrl;//[Offset: 0x2e0 , Size: 12]
	int ID;//[Offset: 0x2ec , Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x2f0 , Size: 4]
	float NetCullDistance;//[Offset: 0x2f8 , Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x18401dc
	void OnRep_PicURL();// 0x18401b4
	void OnRep_MeshPath();// 0x18401c8
	void OnRep_Id();// 0x18401b4

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c8 , Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2cd , Size: 1]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x16c , Size: 12]
	byte RegionType;//[Offset: 0x178 , Size: 1]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x17c , Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x188 , Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195 , Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x198 , Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x1d4 , Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x210 , Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x24c , Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x294 , Size: 4]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x12dedb4
	void WriteVehicleSpotStatisticsDatas();// 0x12dedb4
	void WriteVehicleClassStatisticsDatas_V15();// 0x12dedb4
	void WriteVehicleClassStatisticsDatas();// 0x12dedb4
	void WriteAllVehicleStatisticsDatasToLog();// 0x12dedb4
	void WriteAllVehicleStatisticsDatas_V15();// 0x12dedb4
	void WriteAllVehicleStatisticsDatas();// 0x12dedb4
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x1859148
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x134fe04
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x1858f74
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x1858da0
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x1858bcc
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x18589f8
	void RandomGroups();// 0x12d7a20
	void LoadVehicleGenerateTable();// 0x1bf56d0
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x1858868
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x1858620
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x18583d8
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x185816c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x181e7c8
	void GenerateSpotOnTick(float DeltaTime);// 0x13aaa5c
	void DeleteGroups();// 0x1858158
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x1857ee0
	void AddVehicleClassCount(FString Path, bool IsValid, int count);// 0x1857cf4

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x250 , Size: 1]
	byte RegionType;//[Offset: 0x251 , Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252 , Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253 , Size: 1]
	float RandomRotationMin;//[Offset: 0x254 , Size: 4]
	float RandomRotationMax;//[Offset: 0x258 , Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x25c , Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c , Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x280 , Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x185b15c
	bool GenerateSpot();// 0x1833798

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0 , Size: 12]
	FString VehiclePath;//[Offset: 0xc , Size: 12]
	float FuelPercent;//[Offset: 0x18 , Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0 , Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4 , Size: 12]
	int FuelPercentMin;//[Offset: 0x10 , Size: 4]
	int FuelPercentMax;//[Offset: 0x14 , Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	byte RandomType;//[Offset: 0x19 , Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c , Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20 , Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24 , Size: 4]
	float ProbabilityPersent;//[Offset: 0x28 , Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0 , Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4 , Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10 , Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0 , Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0 , Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc , Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0 , Size: 4]
	FString VehicleType;//[Offset: 0x4 , Size: 12]
	FString VehiclePath;//[Offset: 0x10 , Size: 12]
	int VehicleWeight;//[Offset: 0x1c , Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0 , Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc , Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4 , Size: 1]
	FString VehiclePath;//[Offset: 0x8 , Size: 12]
	float VehicleLocationX;//[Offset: 0x14 , Size: 4]
	float VehicleLocationY;//[Offset: 0x18 , Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4 , Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int AllVehicleCount;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0 , Size: 12]
	Vector Loc;//[Offset: 0xc , Size: 12]
	Rotator rot;//[Offset: 0x18 , Size: 12]
	Vector Scale;//[Offset: 0x24 , Size: 12]
	FString Nation;//[Offset: 0x30 , Size: 12]
	int AGender;//[Offset: 0x3c , Size: 4]
	int Head;//[Offset: 0x40 , Size: 4]
	int hair;//[Offset: 0x44 , Size: 4]
	int WeaponID;//[Offset: 0x48 , Size: 4]
	int[] AvatarList;//[Offset: 0x4c , Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58 , Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0 , Size: 12]
	FString MatPath;//[Offset: 0xc , Size: 12]
	FString TeamFlag;//[Offset: 0x18 , Size: 12]
	FString TeamName;//[Offset: 0x24 , Size: 12]
	Vector Loc;//[Offset: 0x30 , Size: 12]
	Rotator rot;//[Offset: 0x3c , Size: 12]
	Vector Scale;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0 , Size: 12]
	float AttrValue;//[Offset: 0xc , Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0 , Size: 8]
	FString CorpsName;//[Offset: 0x8 , Size: 12]
	int Icon;//[Offset: 0x14 , Size: 4]
	int SegmentLevel;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0 , Size: 12]
	int RemainTeamCount;//[Offset: 0xc , Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10 , Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x14 , Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x50 , Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0 , Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc , Size: 4]
	int KilledNum;//[Offset: 0x10 , Size: 4]
	int SegmentLevel;//[Offset: 0x14 , Size: 4]
	int RealtimeRank;//[Offset: 0x18 , Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c , Size: 4]
	float TotalDamage;//[Offset: 0x20 , Size: 4]
	float SurvivalTime;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0 , Size: 4]
	int CircleNum;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130 , Size: 4]
	void EnterWater_BluePrint();// 0x1bf56d0
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x1bf56d0
	void ExecuteUbergraph_BP_SwimController(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool ___bool_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkAudioEvent* ___object_Variable, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AkAudioEvent* ___object_Variable2, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_Event_bEnterWater, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2);// 0x1bf56d0

--------------------------------
Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	bool CheckSmoke(Vector startPoint, STExtraPlayerCharacter* Pawn, Actor* CallFunc_GetTryRaycastActor_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1bf56d0
	bool CanEnemeyRaycastReach(Vector startPoint, STExtraPlayerCharacter* Pawn, Actor* CallFunc_GetTryRaycastActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraFloatingVehicle* K2Node_DynamicCast_AsSTExtra_Floating_Vehicle, bool K2Node_DynamicCast_bSuccess, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1bf56d0
	byte DrawDebugType;//[Offset: 0x1138 , Size: 1]

--------------------------------
Class: CameraSettingComponent_C.ReusableActorComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc0 , Size: 4]
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x1bf56d0
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x1bf56d0
	void OnReturnToPool();// 0x1bf56d0
	void ExecuteUbergraph_CameraSettingComponent(int EntryPoint);// 0x1bf56d0
	float Current Target Arm Length;//[Offset: 0xc4 , Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0xc8 , Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0xcc , Size: 12]

--------------------------------
Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8 , Size: 4]
	void OnAreaOverlapEnd(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);// 0x1bf56d0
	void OnAreaOverlapBegin(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllowWater_bCanEnter, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_Contains_ReturnValue);// 0x1bf56d0
	void StartDrop(Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, WaitDropData K2Node_MakeStruct_WaitDropData, bool CallFunc_IsValid_ReturnValue, ItemDropMgrComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1bf56d0
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1bf56d0
	void ShowAnimationButton(BP_PlayerPawn_C* PlayerPawn, bool IsShow);// 0x1bf56d0
	void ServerDoWaterLogic(out const PlayerController* PlayerController);// 0x1bf56d0
	void OnWateringUIChanged(bool Show);// 0x1bf56d0
	void DelayResetParticleCD();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void SpawnTreeParticle();// 0x1bf56d0
	void CustomEvent();// 0x1bf56d0
	void ExecuteUbergraph_BP_WateringArea(int EntryPoint, BP_WateringArea_C* ___object_Variable, int ___int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString ___string_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_CustomEvent_PlayerPawn, bool K2Node_CustomEvent_IsShow, const PlayerController* K2Node_CustomEvent_PlayerController, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_CustomEvent_Show, FString ___string_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue4, FString K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool ___bool_Variable2, BP_WateringArea_C* K2Node_Select2_Default, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, int CallFunc_PostAkEvent_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2);// 0x1bf56d0
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x2cc , Size: 4]
	StaticMeshComponent* FormerMesh;//[Offset: 0x2d0 , Size: 4]
	SceneComponent* LoopParticlePoint;//[Offset: 0x2d4 , Size: 4]
	AkComponent* Ak;//[Offset: 0x2d8 , Size: 4]
	BP_ProduceDropItemComponent_C* BP_ProduceDropItemComponent;//[Offset: 0x2dc , Size: 4]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x2e0 , Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2e4 , Size: 4]
	SphereComponent* Sphere;//[Offset: 0x2e8 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2ec , Size: 4]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x2f0 , Size: 4]
	PlayerController*[] WaterDoneList;//[Offset: 0x2f4 , Size: 12]
	TimerHandle TimerHandle;//[Offset: 0x300 , Size: 8]
	int[] DropPlanIDList;//[Offset: 0x308 , Size: 12]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314 , Size: 1]
	FString ShowButtonTextID;//[Offset: 0x318 , Size: 12]
	PaperSprite* ShowButtonPic;//[Offset: 0x324 , Size: 4]
	ParticleSystem* ParticleTrigger;//[Offset: 0x328 , Size: 4]
	Vector ParticleTriggerPos;//[Offset: 0x32c , Size: 12]
	ParticleSystem* ParticleLoop;//[Offset: 0x338 , Size: 4]
	Vector ParticleLoopPos;//[Offset: 0x33c , Size: 12]
	float ParticleLoopWait;//[Offset: 0x348 , Size: 4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x34c , Size: 4]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x350 , Size: 4]
	AkAudioEvent* AudioLoop;//[Offset: 0x354 , Size: 4]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358 , Size: 1]
	int ActivityButtonId;//[Offset: 0x35c , Size: 4]

--------------------------------
Class: WaitDropData
	STExtraBaseCharacter* KillerPawn;//[Offset: 0x0 , Size: 4]
	FString DeadPawnDesc;//[Offset: 0x4 , Size: 12]
	Vector DropGroundPoint;//[Offset: 0x10 , Size: 12]
	class PlayerTombBox* DropTomb;//[Offset: 0x1c , Size: 4]
	int[] DropPlanIDList;//[Offset: 0x20 , Size: 12]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]

--------------------------------
Class: ItemDropMgrComponent.ActorComponent.Object
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	int GM_SpawnItemFrame;//[Offset: 0xc0 , Size: 4]
	class PlayerTombBox* DefaultTomb;//[Offset: 0xc4 , Size: 4]
	FString DropItemRuleTableName;//[Offset: 0xc8 , Size: 12]
	int GridStep;//[Offset: 0xd4 , Size: 4]
	WaitDropData[] WaitDropList;//[Offset: 0xd8 , Size: 12]
	int MaxRandomWeight;//[Offset: 0xe4 , Size: 4]
	float RadiusStep;//[Offset: 0xe8 , Size: 4]
	float ZBias;//[Offset: 0xec , Size: 4]
	float LookUpDistance;//[Offset: 0xf0 , Size: 4]
	UAEDataTable* DropRuleTable;//[Offset: 0xf4 , Size: 4]
	Property*[] DropRuleTablePropertys;//[Offset: 0xf8 , Size: 12]
	int CurSpawnItemFrame;//[Offset: 0x104 , Size: 4]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x13a4de4
	int PickItemByUnionRandom(int WeightCount, out RandomDropData[] WeightMap);// 0x13a4cec
	int PickItemByIndependentRandom(int Weight);// 0x13a4c6c
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x13a4a80
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x13a49c4
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x13a48a4
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x13a480c
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x13a45f0
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIds);// 0x13a434c
	void GetBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x13a40f4
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x13a3f6c
	void DropToTarget(ItemDefineID DefineID, int count, BackpackComponent* Backpack);// 0x13a3e5c
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer);// 0x13a3bc0
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x13a3a34
	void CheckNeedDropItem();// 0x13a3a20
	void CheckAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x13a38cc
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x13a37d8
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x13a3414
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x13a326c
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x13a315c

--------------------------------
Class: RandomDropData
	int[] ItemIdList;//[Offset: 0x0 , Size: 12]
	int RuleID;//[Offset: 0xc , Size: 4]
	int[] ItemCountList;//[Offset: 0x10 , Size: 12]
	int Weight;//[Offset: 0x1c , Size: 4]
	int DropMode;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: DropToGroundData
	PickUpItemData PickUpItemData;//[Offset: 0x0 , Size: 48]
	int ItemID;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: BP_ProduceDropItemComponent_C.ProduceDropItemComponent.ActorComponent.Object
	class Object GetWrapperActorClass(ItemDefineID DefineID, class Object CallFunc_GetWrapperActorClass_ReturnValue);// 0x1bf56d0
	FString GetWrapperTable(ItemDefineID DefineID, FName BPID, BP_STRUCT_ConsumableBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_AvatarBPTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, BP_STRUCT_WeaponBPTable_type CallFunc_GetDataTableRowFromName_OutRow3, bool CallFunc_GetDataTableRowFromName_ReturnValue3, int CallFunc_Divide_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1bf56d0
	FString GetWrapperActorPath(ItemDefineID DefineID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, UAEDataTable* CallFunc_GetDataTableFromCurentGI_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_Item_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_GetWrapperTable_ReturnValue);// 0x1bf56d0
	UAEDataTable* DataTableRef;//[Offset: 0x118 , Size: 4]

--------------------------------
Class: BP_STRUCT_ConsumableBPTable_type
	FString CName_0_3A46A7E346B57C4E5F45619DF5906006;//[Offset: 0x0 , Size: 12]
	FString Path_1_81463AA644426E53AF3240A311C1D4E0;//[Offset: 0xc , Size: 12]
	int ID_2_AD337FD040A1235FE67F55BBA677262B;//[Offset: 0x18 , Size: 4]
	FString Wrapper_3_66935E806EA99C4E6B9844A505FF3052;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: BP_STRUCT_AvatarBPTable_type
	FString CName_0_A4052DC94E7BDAA9FAD3B19A7B988D48;//[Offset: 0x0 , Size: 12]
	FString AvatarBPPath_1_891FA0534B751701E31560B16F286D8B;//[Offset: 0xc , Size: 12]
	int ItemID_2_5414CFBB435533293B561394BF4A770E;//[Offset: 0x18 , Size: 4]
	FString BaseMaterial_3_CF8E62E64F77A71FBA663394520BD34E;//[Offset: 0x1c , Size: 12]
	int IsPackage_4_4347B95845DB19587DE29887A52E05D7;//[Offset: 0x28 , Size: 4]
	FString Wrapper_5_663E34007B103FC200DAC514020BE042;//[Offset: 0x2c , Size: 12]
	int TemplateID_7_2887AE005383C2E84A80675E0040CD54;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: BP_STRUCT_WeaponBPTable_type
	FString CName_0_CD600C314161E84152102388BAC2C6E5;//[Offset: 0x0 , Size: 12]
	FString Path_1_4B3A115440CA4D3ED6BB1CAE5312F1D0;//[Offset: 0xc , Size: 12]
	int ID_2_CE3ED80D47C51A8880AD2CBC79F2E6D0;//[Offset: 0x18 , Size: 4]
	FString Wrapper_3_1417B6C029873FAD0DDBA26505064332;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x24 , Size: 8]
	Vector2D SourceDimension;//[Offset: 0x2c , Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x34 , Size: 4]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38 , Size: 12]
	Vector2D BakedSourceUV;//[Offset: 0x44 , Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x4c , Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x54 , Size: 4]
	MaterialInterface* DefaultMaterial;//[Offset: 0x58 , Size: 4]
	bool UseDefaultMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	MaterialInterface* AlternateMaterial;//[Offset: 0x60 , Size: 4]
	PaperSpriteSocket[] Sockets;//[Offset: 0x64 , Size: 12]
	byte SpriteCollisionDomain;//[Offset: 0x70 , Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x74 , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x78 , Size: 4]
	int AlternateMaterialSplitIndex;//[Offset: 0x7c , Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0x80 , Size: 12]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0 , Size: 48]
	FName SocketName;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f0 , Size: 4]

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x2c8 , Size: 4]
	float EachTileExtent;//[Offset: 0x2cc , Size: 4]
	FString LevelName;//[Offset: 0x2d0 , Size: 12]
	float FakeEdgeExtent;//[Offset: 0x2dc , Size: 4]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x2e0 , Size: 12]

--------------------------------
Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0 , Size: 4]
	float LayerRoofHeight;//[Offset: 0x4 , Size: 4]
	int LayerID;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: Water_C.OceanManager.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x338 , Size: 4]

--------------------------------
Class: BP_radiation_C.RadiationCircle.Actor.Object
	void UserConstructionScript(float OriginalRadius);// 0x1bf56d0
	StaticMeshComponent* Cylinder_Base;//[Offset: 0x2f0 , Size: 4]
	StaticMeshComponent* Cylinder;//[Offset: 0x2f4 , Size: 4]
	SceneComponent* Scene;//[Offset: 0x2f8 , Size: 4]

--------------------------------
Class: RadiationCircle.Actor.Object
	StaticMeshComponent* CylinderMesh;//[Offset: 0x2c8 , Size: 4]
	StaticMeshComponent* CylinderMeshBase;//[Offset: 0x2cc , Size: 4]
	STExtraGameStateBase* SGameStatNew;//[Offset: 0x2d0 , Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x2e4 , Size: 4]
	MaterialInstanceDynamic* DynamicMatBase;//[Offset: 0x2e8 , Size: 4]
	void InitRadiationCircle();// 0x140121c
	void HandleOnSafeZoneTips(float Val);// 0x14011a4

--------------------------------
Class: BP_STPlayerStart_C.STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x2ec , Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	int PlayerBornPointID;//[Offset: 0x2f4 , Size: 4]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8 , Size: 1]
	int TeamID;//[Offset: 0x2fc , Size: 4]
	void SetMarkOccupied();// 0x14c33dc
	bool IsMarkOccupied();// 0x14c33b4

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2e0 , Size: 8]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x2f8 , Size: 12]
	FString HousePathFilePath;//[Offset: 0x304 , Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310 , Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x34c , Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x388 , Size: 4]

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x2f0 , Size: 4]

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x2c8 , Size: 4]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x2cc , Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d8 , Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x2dc , Size: 4]

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0 , Size: 4]
	WayPointLink[] Links;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0 , Size: 4]
	int Weight;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x2f0 , Size: 12]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc , Size: 1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc , Size: 1]
	float VeryLowScale;//[Offset: 0x300 , Size: 4]
	float LowScale;//[Offset: 0x304 , Size: 4]
	float MidScale;//[Offset: 0x308 , Size: 4]
	float HighScale;//[Offset: 0x30c , Size: 4]
	bool bEnableStaticMeshMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310 , Size: 1]
	bool bEnableCullDistanceOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311 , Size: 1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0 , Size: 4]
	float CullDistance;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: ActorComponentPoolManager.Actor.Object
	<class Object,ClassActorComponentPoolCollect*> ActorComponentPoolCollectMaps;//[Offset: 0x2c8 , Size: 60]
	<class Object,ClassAnimInstancePoolCollect*> AnimInstancePoolCollectMaps;//[Offset: 0x304 , Size: 60]
	<class Object,PreloadComponentGroup> PreloadComponentGroups;//[Offset: 0x3d8 , Size: 60]
	static ActorComponentPoolManager* GetInstance();// 0x12d8a6c
	ActorComponentPool* GetAutoComponentPool(class Object Class, FString ComponentName);// 0x12d8964
	AnimInstancePool* GetAutoAnimInstancePool(class Object Class, FString ComponentName, class AnimInstance AnimClass);// 0x12d8818

--------------------------------
Class: ClassActorComponentPoolCollect.Object
	<FString,ActorComponentPool*> PoolMaps;//[Offset: 0x1c , Size: 60]

--------------------------------
Class: ActorComponentPool.Object
	ActorComponent*[] Pool;//[Offset: 0x1c , Size: 12]
	ActorComponent* Template;//[Offset: 0x28 , Size: 4]
	class Object* ActorClass;//[Offset: 0x2c , Size: 4]
	FString ComponentName;//[Offset: 0x30 , Size: 12]
	Actor* Outer;//[Offset: 0x3c , Size: 4]
	bool PreLoadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	void Return(ActorComponent* Component);// 0x12e2a30
	ActorComponent* Get();// 0x1545e9c

--------------------------------
Class: ClassAnimInstancePoolCollect.Object
	<FString,AnimInstancePool*> PoolMaps;//[Offset: 0x1c , Size: 60]

--------------------------------
Class: AnimInstancePool.Object
	AnimInstance*[] Pool;//[Offset: 0x1c , Size: 12]
	void Return(AnimInstance* Instance);// 0x12e2a30
	AnimInstance* Get();// 0x1545e9c

--------------------------------
Class: PreloadComponentGroup
	PreloadComponentItem[] PreloadComponentItems;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: PreloadComponentItem
	FString ComponentName;//[Offset: 0x0 , Size: 12]
	int PreloadComponentCount;//[Offset: 0xc , Size: 4]
	bool AutoPreConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]

--------------------------------
Class: ObjectPool_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a0 , Size: 4]

--------------------------------
Class: AObjectPoolManager.Actor.Object
	<class Object,PoolPreloadObjectItem> PreloadsMap;//[Offset: 0x2c8 , Size: 60]
	void PreSpawnToPool(class Object ActorClass, out const PoolPreloadObjectItem Item);// 0x12e4a74
	void PreLoadObjectsFinish();// 0x12e4a60

--------------------------------
Class: PoolPreloadObjectItem
	int PreloadNum;//[Offset: 0x0 , Size: 4]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: DynamicLoader_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void CustomEvent(class Object LoadObject);// 0x1bf56d0
	void ExecuteUbergraph_DynamicLoader(int EntryPoint, bool CallFunc_IsVeryLowMemoryDevice_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, class Object K2Node_CustomEvent_LoadObject, SoftObjectPath CallFunc_Array_Get_Item, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2cc , Size: 4]
	SoftObjectPath[] LoadObjectClasses;//[Offset: 0x2d0 , Size: 12]

--------------------------------
Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	BP_WeatherConfig_C* BP_WeatherConfig;//[Offset: 0x2d0 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2d4 , Size: 4]

--------------------------------
Class: BP_WeatherConfig_C.WeatherConfigComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf0 , Size: 4]
	void ReceiveBeginPlay();// 0x1bf56d0
	void DelaySyncWeatherLevelInfo();// 0x1bf56d0
	void ExecuteUbergraph_BP_WeatherConfig(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, STExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameMode* K2Node_DynamicCast_AsBattle_Royale_Game_Mode, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0

--------------------------------
Class: STExtraDelegateMgr.BlueprintFunctionLibrary.Object
	delegate OnPlayerStateNameChange;//[Offset: 0x1c , Size: 12]
	delegate OnHPChange;//[Offset: 0x28 , Size: 12]
	delegate OnCanRescueOtherChange;//[Offset: 0x34 , Size: 12]
	delegate OnRescueingStatusChangeChange;//[Offset: 0x40 , Size: 12]
	delegate OnBreathChange;//[Offset: 0x4c , Size: 12]
	delegate OnKilledTips;//[Offset: 0x58 , Size: 12]
	delegate OnVehicleHPChange;//[Offset: 0x64 , Size: 12]
	delegate OnCharacterStateChangeDelegate;//[Offset: 0x70 , Size: 12]
	delegate OnEnterBornIsland;//[Offset: 0x7c , Size: 12]
	delegate OnCorpsOutGame;//[Offset: 0x88 , Size: 12]
	delegate OnCorpsJoinGame;//[Offset: 0x94 , Size: 12]
	static STExtraDelegateMgr* STExtraDelegateMgrInstance();// 0x1472bfc

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1024 , Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x1030 , Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1048 , Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1049 , Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104a , Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104b , Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x104c , Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050 , Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x1054 , Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x1058 , Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x105c , Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x1060 , Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064 , Size: 1]
	class ChallengeLevelRules* ChallengeLevelRulesClass;//[Offset: 0x1068 , Size: 4]
	ChallengeLevelRules* ChallengeLevelRules;//[Offset: 0x106c , Size: 4]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x1070 , Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074 , Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x1078 , Size: 12]
	ChallengeLevelRules* GetChallengeLevelRules();// 0x132081c

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb24 , Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb25 , Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb26 , Size: 1]
	bool bConfigEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb27 , Size: 1]
	enum GameModeType;//[Offset: 0xb28 , Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0xb2c , Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xb30 , Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xb34 , Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38 , Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xb3c , Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xb40 , Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xb44 , Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48 , Size: 1]
	bool IsMapRotateMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49 , Size: 1]
	float MapRotation;//[Offset: 0xb4c , Size: 4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0xb50 , Size: 4]
	class AIController* AIControllerClass;//[Offset: 0xb54 , Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0xb58 , Size: 4]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0xb5c , Size: 4]
	UAELevelDirector* LevelDirector;//[Offset: 0xb60 , Size: 4]
	byte WorldLoadedType;//[Offset: 0xb64 , Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0xb68 , Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xb6c , Size: 4]
	int PlayerNumPerTeam;//[Offset: 0xb70 , Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb74 , Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75 , Size: 1]
	FString GameModeDisplayName;//[Offset: 0xb78 , Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0xb84 , Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88 , Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89 , Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8a , Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8b , Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c , Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8d , Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8e , Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8f , Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90 , Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91 , Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92 , Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0xb94 , Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0xba0 , Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4 , Size: 1]
	FString GameModeConfigPath;//[Offset: 0xba8 , Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4 , Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb5 , Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb6 , Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb7 , Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8 , Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0xbbc , Size: 80]
	Vector BornLocation;//[Offset: 0xc0c , Size: 12]
	Vector AIBornLocation;//[Offset: 0xc18 , Size: 12]
	float BornRadius;//[Offset: 0xc24 , Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0xc28 , Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0xc29 , Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0xc2c , Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0xc30 , Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0xc34 , Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38 , Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0xc50 , Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0xc54 , Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58 , Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0xc5c , Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60 , Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61 , Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0xc64 , Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0xc68 , Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0xc6c , Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0xc70 , Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74 , Size: 1]
	bool IsEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c , Size: 1]
	FString GameScriptPath;//[Offset: 0xca0 , Size: 12]
	FString LuaFileEntryFile;//[Offset: 0xcac , Size: 12]
	FString PreloadLuaFile;//[Offset: 0xcb8 , Size: 12]
	FString LuaTriggersPath;//[Offset: 0xcc4 , Size: 12]
	FString LuaModName;//[Offset: 0xcd0 , Size: 12]
	FString LuaTriggersFile;//[Offset: 0xcdc , Size: 12]
	double StepGCTimeLimit;//[Offset: 0xce8 , Size: 8]
	GameModeLuaEnv* LuaEnv;//[Offset: 0xcf0 , Size: 4]
	FString[] CustomWidgets;//[Offset: 0xcf4 , Size: 12]
	FString CustomUIName;//[Offset: 0xd00 , Size: 12]
	GameModeState* CurrentState;//[Offset: 0xd0c , Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0xd10 , Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0xd1c , Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0xd20 , Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0xd24 , Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0xd28 , Size: 4]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44 , Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0xd48 , Size: 4]
	Actor* PlanePawn;//[Offset: 0xd4c , Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50 , Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0xd54 , Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0xd60 , Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0xd64 , Size: 4]
	float OutBoundDamage;//[Offset: 0xd68 , Size: 4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0xdec , Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0xe28 , Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0xe2c , Size: 4]
	PlaneTypes[] SeasonPlanes;//[Offset: 0xec8 , Size: 12]
	int MatchGoal;//[Offset: 0xf18 , Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1c , Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0xf3c , Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0xf74 , Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80 , Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0xf84 , Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0xf90 , Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0xf94 , Size: 4]
	float DelaySpawnVehicleTime;//[Offset: 0xf98 , Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0xf9c , Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0xfa0 , Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4 , Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0xfa8 , Size: 60]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0xfe4 , Size: 60]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020 , Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x132181c
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x13216c0
	void StopAllFakePlayerAIBehaviorTree();// 0x13216ac
	void SpawnAI(int Num);// 0x1321634
	void SetStateLeftTime(int LeftTime);// 0x13215bc
	void SetGameModeType(enum NewGameModeType);// 0x1321544
	void SetGameEndReportData();// 0x1321528
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x132146c
	void RestartPlayer(Controller* NewPlayer);// 0x13213ec
	void ResetGameMode();// 0x13213d0
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1321350
	void OnGameModeStateChange();// 0x1321334
	void OnGameEnterFinish();// 0x1321320
	void OnGameEnterFight();// 0x132130c
	bool IsRevivalGameMode();// 0x13212dc
	bool IsCanJump(PlayerController* PC);// 0x1321254
	void InitlializeRespawnItemConfig();// 0x1321240
	void InitialGameModeState();// 0x132122c
	void HandleGameEnd();// 0x1321210
	void GotoReadyState();// 0x13211fc
	void GotoFinishedState();// 0x13211e0
	void GotoFightingState();// 0x13211c4
	void GotoActiveState();// 0x13211b0
	byte GetDefaultAIType(uint32 PlayerKey);// 0x1321130
	int GetCurWeatherPhaseIndex();// 0x1321100
	FName GetCurGameModeState();// 0x13210dc
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x13210b4
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x1320fe8
	void GenerateRespawnItemsForAllPlayers();// 0x1320fd4
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x1320f54
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x1320ecc
	bool CheckNoHumanExist();// 0x1320e9c
	bool CheckMatchGoalAchieved();// 0x1320e6c
	bool CheckGameEnd();// 0x1320e3c
	void ChangeStateGM(FName TargetGameModeState);// 0x1320dc4
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x1320d00

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x20 , Size: 12]
	float RandomStartJumpTime;//[Offset: 0x2c , Size: 4]
	float RandomEndJumpTime;//[Offset: 0x30 , Size: 4]
	float JumpRadius;//[Offset: 0x34 , Size: 4]
	float JumpHeight;//[Offset: 0x38 , Size: 4]
	float RandomAccelerateStart;//[Offset: 0x3c , Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x40 , Size: 4]
	float OpenParachuteHeight;//[Offset: 0x44 , Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x48 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x4c , Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x50 , Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x54 , Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x58 , Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x5c , Size: 4]
	float StopdeliverTime;//[Offset: 0x60 , Size: 4]
	float NoCirlceRadius;//[Offset: 0x64 , Size: 4]
	float TraceHeight;//[Offset: 0x68 , Size: 4]
	float RangeMin;//[Offset: 0x6c , Size: 4]
	float RangeMax;//[Offset: 0x70 , Size: 4]
	float OriginCheckSquare;//[Offset: 0x74 , Size: 4]
	float DestCheckSquare;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0 , Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AIEquipSpawnItem
	enum ItemType;//[Offset: 0x0 , Size: 1]
	int ItemSpecificID;//[Offset: 0x4 , Size: 4]
	int count;//[Offset: 0x8 , Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0xc , Size: 8]

--------------------------------
Class: ChallengeLevelRules.Object
	UAELevelDirector* LevelDirector;//[Offset: 0x1c , Size: 4]
	void SpawnLevelDirector(class UAELevelDirector LevelDirectorClass);// 0x13336c4
	void OnReceiveTriggerMsg(TriggerAction* TriggerAction, FString Msg);// 0x133351c
	void InitLevel();// 0x1333500

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc , Size: 4]
	float AvoidanceWeight;//[Offset: 0xc0 , Size: 4]
	float CohesionWeight;//[Offset: 0xc4 , Size: 4]
	float AlignmentWeight;//[Offset: 0xc8 , Size: 4]
	float ArriveWeight;//[Offset: 0xcc , Size: 4]
	float PushedWeight;//[Offset: 0xd0 , Size: 4]
	float SeparationWeight;//[Offset: 0xd4 , Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9 , Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda , Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb , Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xdc , Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe0 , Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4 , Size: 4]
	void SetQueryInterfaceBlueprint(AIWorldVolume* query);// 0x1345348
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x13452d0
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x13451c0
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float segmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x1344f58

--------------------------------
Class: AIActingComponent.ActorComponent.Object
	AIActingCandidateData[] CandidateAIList;//[Offset: 0xd0 , Size: 12]
	int MaxActiveAI;//[Offset: 0x154 , Size: 4]
	int ActiveAI_n;//[Offset: 0x158 , Size: 4]
	int ActiveAI_m;//[Offset: 0x15c , Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x160 , Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x164 , Size: 4]
	float SelectActionPeriod;//[Offset: 0x168 , Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x16c , Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x170 , Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x174 , Size: 12]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x180 , Size: 12]
	int FullFeedLimit;//[Offset: 0x18c , Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x190 , Size: 12]
	float DeliveryBeginTime;//[Offset: 0x19c , Size: 4]
	float DeliveryFreq;//[Offset: 0x1a0 , Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x1a4 , Size: 4]
	float MinimumWarmScore;//[Offset: 0x1a8 , Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x1ac , Size: 12]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x1b8 , Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x1c4 , Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x1d0 , Size: 12]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x1dc , Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x1e0 , Size: 4]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x270 , Size: 4]
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponID, FString KillerNation, FString KilledNation);// 0x12da79c

--------------------------------
Class: AIActingCandidateData
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: FakePlayerAIController.BaseAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0x600 , Size: 4]
	delegate OnEnterJumping;//[Offset: 0x604 , Size: 12]
	NewPathFollowingComponent* newFollowingComponent;//[Offset: 0x61c , Size: 4]
	int PlayerTeamId;//[Offset: 0x620 , Size: 4]
	uint32 PlayerKey;//[Offset: 0x624 , Size: 4]
	FString PlayerName;//[Offset: 0x628 , Size: 12]
	byte AIType;//[Offset: 0x634 , Size: 1]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635 , Size: 1]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0x638 , Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d , Size: 1]

--------------------------------
Class: BaseAIController.AIController.Controller.Actor.Object
	BehaviorTree*[] BehaviorTree;//[Offset: 0x368 , Size: 12]
	float CheckPeriod;//[Offset: 0x374 , Size: 4]
	float RandomDeviation;//[Offset: 0x378 , Size: 4]
	float ProtectCountdownTime;//[Offset: 0x37c , Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x380 , Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x384 , Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x388 , Size: 8]
	float TurnVelocity;//[Offset: 0x390 , Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x394 , Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x39c , Size: 60]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x5c0 , Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x5c4 , Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x5c8 , Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x5cc , Size: 40]
	void Respawn();// 0x13186d8

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float maxCheckDis;//[Offset: 0x258 , Size: 4]
	float maxCheckDisTime;//[Offset: 0x25c , Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264 , Size: 1]
	float PlayerHalfHeight;//[Offset: 0x268 , Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x26c , Size: 4]
	float MaxTransferDis;//[Offset: 0x270 , Size: 4]

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0 , Size: 4]
	float EndSeconds;//[Offset: 0x4 , Size: 4]
	float DeadPercent;//[Offset: 0x8 , Size: 4]
	int PlayerNumScale;//[Offset: 0xc , Size: 4]
	int[] WeaponIdList;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0 , Size: 4]
	float RightRatingSection;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0 , Size: 4]
	float RightRatingSection;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0 , Size: 12]
	Vector BottomRightVec;//[Offset: 0xc , Size: 12]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0 , Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4 , Size: 4]
	int AIFeedLimit;//[Offset: 0x8 , Size: 4]
	float SectionRightValue;//[Offset: 0xc , Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0 , Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4 , Size: 4]
	float SectionRightValue;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0 , Size: 12]
	float RightRatingSection;//[Offset: 0xc , Size: 4]

--------------------------------
Class: DeliveryItem
	int Percent;//[Offset: 0x0 , Size: 4]
	int DeliveryNum;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20 , Size: 4]
	FString TablePath;//[Offset: 0x24 , Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30 , Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c , Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48 , Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x13a5f30
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x13a5d50
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x13a5c90
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x13a5bd0

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0 , Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc , Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0 , Size: 4]
	FString CategoryFilter;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0 , Size: 4]
	float Radius1;//[Offset: 0x4 , Size: 4]
	float Radius3;//[Offset: 0x8 , Size: 4]
	bool UsingNewPlaneRoute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float InnerRadius;//[Offset: 0x10 , Size: 4]
	float InnerProbablity;//[Offset: 0x14 , Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	float Radius2;//[Offset: 0x1c , Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x20 , Size: 12]
	float BlueCircleRadius;//[Offset: 0x2c , Size: 4]
	Vector MapCenter;//[Offset: 0x30 , Size: 12]
	float PlaneSpeed;//[Offset: 0x3c , Size: 4]
	float PlaneHeight;//[Offset: 0x40 , Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x44 , Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x48 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20 , Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc , Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc0 , Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xcc , Size: 60]
	void InitialItemTable();// 0x13c0654

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0 , Size: 4]
	int PawnID;//[Offset: 0x4 , Size: 4]
	int PawnPercent;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0 , Size: 4]
	FString PathName;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xbc , Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0xf8 , Size: 12]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x104 , Size: 8]
	void OnProjectileExplode(Actor* Projectile);// 0x12e2414

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0 , Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x1404e60

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0 , Size: 12]
	FString TeamFlag;//[Offset: 0xc , Size: 12]
	FString TeamName;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: GameModeLuaEnv.Object
	FString GameScriptPath;//[Offset: 0x1c , Size: 12]
	FString LuaFileEntryFile;//[Offset: 0x28 , Size: 12]
	FString PreloadLuaFile;//[Offset: 0x34 , Size: 12]
	FString LuaTriggersPath;//[Offset: 0x40 , Size: 12]
	FString LuaModName;//[Offset: 0x4c , Size: 12]
	FString LuaTriggersFile;//[Offset: 0x58 , Size: 12]
	bool bEnableDSGameTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x6c , Size: 4]
	LuaTimerManager* LuaTimerMgr;//[Offset: 0x74 , Size: 4]
	LuaTriggerManager* LuaTriggerMgr;//[Offset: 0x78 , Size: 4]
	GameLuaAPI* GameLuaAPI;//[Offset: 0x7c , Size: 4]
	void TickEnv(float tickTime);// 0x1385850
	void SetStepGCLimitTime(double GCLimitTime);// 0x13857d0
	void PullLevelActors(FString LevelName);// 0x1385678
	void InitLuaGlobalVariable();// 0x1385664
	void InitLuaGlobalTools();// 0x1385650
	void InitLuaFile();// 0x138563c
	void InitLuaEnv();// 0x1385628
	FString GetLuaModPath();// 0x1385568
	void CreateSluaState();// 0x1385554
	void CallLuaWaitGlobalScriptFunction(FString InFunctionName);// 0x1385498
	void CallLuaGlobalScriptFunction(FString InFunctionName);// 0x13853dc

--------------------------------
Class: LuaTimerManager.Object
	STExtraGameInstance* GameInstance;//[Offset: 0x1c , Size: 4]
	<int,TimerHandle> _timers;//[Offset: 0x24 , Size: 60]

--------------------------------
Class: LuaTriggerManager.Object
	<FString,int> EventListenMap;//[Offset: 0x1c , Size: 60]
	bool SetEventListen(FString EventString, int EventNum);// 0x13b43b8
	bool RemoveEventListen(FString EventString, int EventNum);// 0x13b4214
	void Init();// 0x12dedb4
	bool AddEventListen(FString EventString, int EventNum);// 0x13b4070

--------------------------------
Class: GameLuaAPI.Object
	void UIShowTips(FString FunctionName, uint32 PlayerKey, int TipType, FString Params1, FString Params2, bool IsToAll);// 0x138309c
	void UISetWidgetVisibility(uint32 PlayerKey, FString WidgetTag, int Visibility, bool IsToAll);// 0x1382e68
	void UISetWidgetText(uint32 PlayerKey, FString WidgetTag, FString SText, int TextId, FString Params, bool IsToAll);// 0x1382a00
	void UIOperateWidget(uint32 PlayerKey, FString WidgetTag, FString SOperation, FString Params, bool IsToAll);// 0x13825e0
	void UICustomBehavior(uint32 PlayerKey, FString UIBehavior, int TipType, FString Params, bool IsToAll);// 0x1382290
	bool TeleportPlayerToVehicle(STExtraBaseCharacter* Player, STExtraVehicleBase* Vehicle, int SeatIdx);// 0x1382188
	void TeleportPawn(STExtraBaseCharacter* Player, Vector Position, Rotator Rotation);// 0x138207c
	void TaskModifyTask(uint32 PlayerKey, int TaskID, int Progress, int State);// 0x1381f34
	void TaskDeleteTask(uint32 PlayerKey, int TaskID);// 0x1381e78
	void TaskAddTask(uint32 PlayerKey, int TaskID, int Aim);// 0x1381d78
	void StopPlayerJoin();// 0x1381d64
	STExtraVehicleBase* SpawnVehicle(int resID, Vector Position, Rotator Rotation);// 0x1381c50
	void ShowMessage(FString Message);// 0x1381af8
	void SetTeamID(Actor* TActor, int TeamID);// 0x1381a3c
	void RevivePlayerAtPosition(uint32 PlayerKey, Vector Position, Rotator Rotation);// 0x1381930
	void RevivePlayer(uint32 PlayerKey);// 0x13818b8
	bool RemoveBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x13817b0
	bool RemoveActor(Actor* TActor);// 0x1381730
	void RemoteDestroyActor(uint32 PlayerKey, int SingleId, bool IsToAll);// 0x1381628
	int RemoteCreateActor(uint32 PlayerKey, int TeamID, int resID, Vector Position, Rotator Rotation, bool IsToAll);// 0x1381444
	bool IsVehicle(Actor* TActor);// 0x13813c4
	bool IsValid(Object* TObject);// 0x1381344
	bool IsPlayerAlive(uint32 PlayerKey);// 0x13812c4
	bool IsPlayer(Actor* TActor);// 0x1381244
	bool IsInArea(Vector Position, int AreaID);// 0x1381184
	static bool IsClassOf(const Object* Object, const class Object Class);// 0x13810c8
	bool HasBuff(int ID, Pawn* TargetPawn);// 0x1381004
	int GetWeaponBulletResId(STExtraWeapon* TWeapon);// 0x1380f84
	STExtraPlayerCharacter*[] GetPlayersOnVehicle(STExtraVehicleBase* Vehicle);// 0x1380e7c
	STExtraPlayerController* GetPlayerControllerByPlayerKey(uint32 PlayerKey);// 0x1380dfc
	STExtraBaseCharacter* GetPlayerByPlayerKey(uint32 PlayerKey);// 0x1380d7c
	STExtraBaseCharacter* GetOneRealPlayer();// 0x1380d54
	STExtraBaseCharacter* GetOnePlayerBase();// 0x1380d2c
	STExtraPlayerCharacter* GetOnePlayer();// 0x1380d04
	UAENetConnection* GetNetConnection(STExtraPlayerController* PlayerController);// 0x1380c84
	FString GetLevelPath(Level* Level);// 0x1380b7c
	int GetItemNumByResID(STExtraBaseCharacter* Player, int resID);// 0x1380ab8
	int[] GetEquipWeaponList(STExtraBaseCharacter* Pawn);// 0x13809b0
	STExtraWeapon* GetCurrentUseWeapon(STExtraBaseCharacter* Pawn);// 0x1380930
	STExtraVehicleBase*[] GetAllVehicles();// 0x1380870
	STExtraPlayerState*[] GetAllPlayerStates();// 0x13807b0
	STExtraPlayerCharacter*[] GetAllPlayerPawns();// 0x13806f0
	STExtraPlayerController*[] GetAllPlayerControllers();// 0x1380630
	Actor*[] GetActorsInSphere(const Vector SpherePos, float SphereRadius, class Object ActorClass);// 0x1380494
	Actor*[] GetActorsByTag(FName Tag);// 0x1380388
	Actor*[] GetActorsByClass(class Object TargetClass);// 0x1380280
	int GetActorResId(Actor* TActor);// 0x1380200
	STExtraBaseCharacter* FindFakePlayer();// 0x13801d8
	void EndMatch(int TeamID, int Reason);// 0x138011c
	void DamageTarget(Actor* SourceActor, Actor* TargetActor, float Damage, int TypeID);// 0x137ffd4
	PickUpWrapperActor* CreatePickup(int TeamID, int resID, Vector Position, Rotator Rotation, int Num);// 0x137fe2c
	STExtraCharacter* CreatePawn(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x137fcd0
	STExtraBaseCharacter* CreateFakePlayer(int TeamID, int resID, Vector Posi, Rotator Rota);// 0x137fb74
	AreaVolume* CreateAreaVolume(Vector Posi, Rotator Rota, Vector Volume);// 0x137fa5c
	AreaSphere* CreateAreaSphere(Vector Posi, float Radius);// 0x137f998
	Actor* CreateActor(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x137f83c
	bool CheckDSSwitchOpen(int SwitchId);// 0x137f7bc
	STExtraVehicleBase* CastToVehicle(Actor* TActor);// 0x137f73c
	STExtraPlayerState* CastToPlayerState(Actor* TActor);// 0x137f6bc
	STExtraPlayerCharacter* CastToPlayer(Actor* TActor);// 0x137f63c
	bool AddItemByResID(STExtraBaseCharacter* Player, int resID, int Num);// 0x137f534
	int AddHealth(STExtraBaseCharacter* Player, float AddHealth);// 0x137f470
	bool AddBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x137f368

--------------------------------
Class: UAENetConnection.IpConnection.NetConnection.Player.Object
	int InitialHandshakeTimeoutNumThreshold;//[Offset: 0x29668 , Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Server_Global;//[Offset: 0x29670 , Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_Global;//[Offset: 0x29674 , Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_PerActor;//[Offset: 0x29678 , Size: 4]
	bool bEnableHTTPDNS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296b8 , Size: 1]
	FString HTTPDNSServerAddr;//[Offset: 0x296bc , Size: 12]
	float HTTPDNSResponseTimeout;//[Offset: 0x296c8 , Size: 4]
	NetRelevancyGroup* RelevancyGroup;//[Offset: 0x296d8 , Size: 4]
	PendingRegionNetworkObject[] PendingRegionNetworkObjects;//[Offset: 0x29774 , Size: 12]
	float MinRegionActorTickDelta;//[Offset: 0x29780 , Size: 4]
	float MaxRegionActorTickDelta;//[Offset: 0x29784 , Size: 4]
	bool EnableWeakNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29794 , Size: 1]
	float MinWeakNetUpdateDelay;//[Offset: 0x29798 , Size: 4]
	float MaxWeakNetUpdateDelay;//[Offset: 0x2979c , Size: 4]
	float SquareSegmentSize;//[Offset: 0x297a0 , Size: 4]
	float MaxSegmentDistance;//[Offset: 0x297a4 , Size: 4]
	int MaxObjectNumInSegments;//[Offset: 0x297a8 , Size: 4]
	bool bRecreateSocketOnLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297b9 , Size: 1]

--------------------------------
Class: IpConnection.NetConnection.Player.Object

--------------------------------
Class: NetRelevancyGroup.Object
	NetRelevancyGroupID GroupID;//[Offset: 0x1c , Size: 4]
	UAENetConnection*[] Connections;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: NetRelevancyGroupID

--------------------------------
Class: PendingRegionNetworkObject
	Object* RegionObject;//[Offset: 0x0 , Size: 4]
	RegionID OldRegionID;//[Offset: 0x4 , Size: 12]
	RegionID NewRegionID;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: RegionID

--------------------------------
Class: AreaVolume.AreaBase.Object
	Vector Position;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	Vector Volume;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: AreaBase.Object

--------------------------------
Class: AreaSphere.AreaBase.Object
	Vector Position;//[Offset: 0x1c , Size: 12]
	float Radius;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x30 , Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x34 , Size: 4]
	void GotoNextState();// 0x13861d4

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	PlaneData CurPlaneData;//[Offset: 0xbc , Size: 116]
	class Pawn* PlaneClass;//[Offset: 0x130 , Size: 4]
	BehaviorTree* PlaneBT;//[Offset: 0x134 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138 , Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x13c , Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x148 , Size: 12]

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0 , Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	Actor* ThePlane;//[Offset: 0x8 , Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10 , Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c , Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28 , Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34 , Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c , Size: 8]
	int TotalPlayerNum;//[Offset: 0x44 , Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x48 , Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x54 , Size: 12]
	int TotalAINum;//[Offset: 0x60 , Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x64 , Size: 12]
	int CurAINum;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	float DefaultPlayerRespawnTime;//[Offset: 0xbc , Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc0 , Size: 4]
	enum RespawnPointType;//[Offset: 0xc4 , Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xc8 , Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xd4 , Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe0 , Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xec , Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x128 , Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x140 , Size: 12]
	float bRestoreDataDelay;//[Offset: 0x14c , Size: 4]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150 , Size: 1]
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x13e54b8
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x13e53fc

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: ReplaceWeaponData
	int WeaponID;//[Offset: 0x0 , Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8 , Size: 128]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0x88 , Size: 12]

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0 , Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc , Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x14 , Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0 , Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0 , Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0 , Size: 4]
	int AddItemNum;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0 , Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0 , Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0 , Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc , Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xc8 , Size: 60]
	void InitRowDataMap();// 0x1376940
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x1376850
	FString GetControllerPath(int resID);// 0x1376748

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0 , Size: 4]
	FString ControllerPath;//[Offset: 0x4 , Size: 12]
	FString Name;//[Offset: 0x10 , Size: 12]
	int gender;//[Offset: 0x1c , Size: 4]
	FString ItemStr;//[Offset: 0x20 , Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x1db , Size: 1]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0 , Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6 , Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7 , Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc , Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14 , Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18 , Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c , Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0 , Size: 4]
	int DelayTime;//[Offset: 0x4 , Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8 , Size: 4]
	int LastTime;//[Offset: 0xc , Size: 4]
	int CircleDamage;//[Offset: 0x10 , Size: 4]
	int BlueCircleRadius;//[Offset: 0x14 , Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: PUBG_Rcity_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0 , Size: 4]
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void ExecuteUbergraph_PUBG_Rcity(int EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key2, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess3, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x1bf56d0
	FString MatPath;//[Offset: 0x2d4 , Size: 12]
	FString GeoPath;//[Offset: 0x2e0 , Size: 12]
	<enum,FString> VehicleLevelNameByGameMode;//[Offset: 0x2ec , Size: 60]
	<int,FString> VehicleLevelNameByGameModeID;//[Offset: 0x328 , Size: 60]
	FString VehicleLevelName;//[Offset: 0x364 , Size: 12]

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x18e8 , Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x18ec , Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x18f0 , Size: 4]

--------------------------------
Class: BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void HitFeedBackChanged(bool BoolValue);// 0x1bf56d0
	void ExecuteUbergraph_BP_BattleRoyaleHUD(int EntryPoint, bool K2Node_CustomEvent_BoolValue, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x544 , Size: 4]

--------------------------------
Class: BP_PlayerPawn_Heavy_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x23dc , Size: 4]

--------------------------------
Class: BP_PaintDecalDetectLine1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8 , Size: 4]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0x1bf56d0
	void UserConstructionScript();// 0x1bf56d0
	void ReceiveTick(float DeltaSeconds);// 0x1bf56d0
	void StopDetecting();// 0x1bf56d0
	void StartDetecting();// 0x1bf56d0
	void ReceiveBeginPlay();// 0x1bf56d0
	void StartDetectingWithoutItems();// 0x1bf56d0
	void ExecuteUbergraph_BP_PaintDecalDetectLine1(int EntryPoint, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x1bf56d0
	StaticMeshComponent* StaticMesh;//[Offset: 0x2cc , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2d0 , Size: 4]
	Vector CachePos;//[Offset: 0x2d4 , Size: 12]

--------------------------------
Class: Skill_Grenade_Frag_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c , Size: 1]
	enum PawnState;//[Offset: 0x40d , Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40e , Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f , Size: 1]
	int CastFailTipsID;//[Offset: 0x410 , Size: 4]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414 , Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415 , Size: 1]
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x1501078

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x400 , Size: 12]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x14fea64

--------------------------------
Class: Skill_Grenade_Stun_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Grenade_Smoke_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Grenade_Molotov_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_GasCan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: Skill_Melee_Dagger_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x430 , Size: 4]

--------------------------------
Class: BP_PlayerState_C.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0xd10 , Size: 4]

--------------------------------
Class: GameState_HeavyWeapon_C.SurviveGameState_C.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: SurviveGameState_C.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	AirAttackCS* AirAttackCS;//[Offset: 0x7d8 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x7dc , Size: 4]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x104 , Size: 4]
	void OnAirAttack(byte airattacktype, int waveindex);// 0x12dd4d4
	void DoBombHarmAtLocation(out Vector bombLocation);// 0x12dd450
	void AirAttackThrowBomb(int Index);// 0x12dd3d8

--------------------------------
Class: VH_UAZ01_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xef0 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void OnBoostingChanged();// 0x1bf56d0
	void ExecuteUbergraph_VH_UAZ01(int EntryPoint);// 0x1bf56d0
	UAZ_UAEChaVehAnimList_PassenerL_C* UAZ_UAEChaVehAnimList_PassenerL;//[Offset: 0xef4 , Size: 4]
	UAZ_UAEChaVehAnimList_Driver_C* UAZ_UAEChaVehAnimList_Driver;//[Offset: 0xef8 , Size: 4]
	UAZ_UAEChaVehAnimList_PassenerR_C* UAZ_UAEChaVehAnimList_PassenerR;//[Offset: 0xefc , Size: 4]
	ParticleSystemComponent* PSCExhaust1;//[Offset: 0xf00 , Size: 4]

--------------------------------
Class: UAZ_UAEChaVehAnimList_PassenerL_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool DefaultLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x158 , Size: 12]
	void OnIdleAnimListAsyncLoadingFinished();// 0x1847f9c
	void OnAnimListAsyncLoadingFinished(AsyncLoadCharVehAnimParams LoadingParam);// 0x1847d38

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0 , Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: AsyncLoadCharVehAnimParams

--------------------------------
Class: UAZ_UAEChaVehAnimList_Driver_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAZ_UAEChaVehAnimList_PassenerR_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	Buggy_UAEChaVehAnimList_Driver_C* Buggy_UAEChaVehAnimList_Driver;//[Offset: 0xef0 , Size: 4]
	Buggy_UAEChaVehAnimList_Passenger_C* Buggy_UAEChaVehAnimList_Passenger;//[Offset: 0xef4 , Size: 4]

--------------------------------
Class: Buggy_UAEChaVehAnimList_Driver_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: Buggy_UAEChaVehAnimList_Passenger_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: Mirado_open_4_C.Mirado_open_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf08 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void OnBoostingChanged();// 0x1bf56d0
	void ExecuteUbergraph_Mirado_open(int EntryPoint);// 0x1bf56d0
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBR;//[Offset: 0xf0c , Size: 4]
	ParticleSystemComponent* PSCExhaust1;//[Offset: 0xf10 , Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBL;//[Offset: 0xf14 , Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0xf18 , Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0xf1c , Size: 4]

--------------------------------
Class: Mirado_open_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xef0 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void OnBoostingChanged();// 0x1bf56d0
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleAvatarEquiped__DelegateSignatu();// 0x1bf56d0
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_1_VehicleLoadedBrokenMat__DelegateSigna();// 0x1bf56d0
	void ExecuteUbergraph_Mirado_open(int EntryPoint, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2);// 0x1bf56d0
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBR;//[Offset: 0xef4 , Size: 4]
	ParticleSystemComponent* PSCExhaust1;//[Offset: 0xef8 , Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBL;//[Offset: 0xefc , Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0xf00 , Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0xf04 , Size: 4]

--------------------------------
Class: BP_VH_Tuk_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xef0 , Size: 4]
	void UserConstructionScript();// 0x1bf56d0
	void ReceiveTick(float DeltaSeconds);// 0x1bf56d0
	void ExecuteUbergraph_BP_VH_Tuk(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x1bf56d0
	Tuk_UAEChaVehAnimList_PassengerL_C* Tuk_UAEChaVehAnimList_PassengerL;//[Offset: 0xef4 , Size: 4]
	Tuk_UAEChaVehAnimList_Driver_C* Tuk_UAEChaVehAnimList_Driver;//[Offset: 0xef8 , Size: 4]
	Tuk_UAEChaVehAnimList_PassengerR_C* Tuk_UAEChaVehAnimList_PassengerR;//[Offset: 0xefc , Size: 4]
	VehicleMotorbikeComponent* VehicleMotorbike;//[Offset: 0xf00 , Size: 4]

--------------------------------
Class: Tuk_UAEChaVehAnimList_PassengerL_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: Tuk_UAEChaVehAnimList_Driver_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: Tuk_UAEChaVehAnimList_PassengerR_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0xbc , Size: 12]
	CurveFloat* Curve_Roll;//[Offset: 0xc8 , Size: 4]
	CurveFloat* Curve_ReturnClamp;//[Offset: 0xcc , Size: 4]
	CurveFloat* Curve_Steer;//[Offset: 0xd0 , Size: 4]
	CurveFloat* Curve_Yaw;//[Offset: 0xd4 , Size: 4]
	CurveFloat* Curve_TorqueStab;//[Offset: 0xd8 , Size: 4]
	CurveFloat* Curve_Roll_Cart;//[Offset: 0xdc , Size: 4]
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0xe0 , Size: 4]
	CurveFloat* Curve_Steer_Cart;//[Offset: 0xe4 , Size: 4]
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0xe8 , Size: 4]
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0xec , Size: 4]
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	FName LowStabBoneName;//[Offset: 0xf8 , Size: 8]
	FName HighStabBoneName;//[Offset: 0x100 , Size: 8]
	Vector SideCartHighStabCOM;//[Offset: 0x108 , Size: 12]
	float MinSuspensionOffsetForContact;//[Offset: 0x114 , Size: 4]
	Vector StabStaticVector;//[Offset: 0x118 , Size: 12]
	Vector2D StabXVelocityIn;//[Offset: 0x124 , Size: 8]
	Vector2D StabXVelocityOut;//[Offset: 0x12c , Size: 8]
	Vector2D StabXPitchIn;//[Offset: 0x134 , Size: 8]
	Vector2D StabXPitchOut;//[Offset: 0x13c , Size: 8]
	Vector2D StabZVelocityIn;//[Offset: 0x144 , Size: 8]
	Vector2D StabZVelocityOut;//[Offset: 0x14c , Size: 8]
	Vector2D StabZRollIn;//[Offset: 0x154 , Size: 8]
	Vector2D StabZRollOut;//[Offset: 0x15c , Size: 8]
	Vector2D StabZPitchIn;//[Offset: 0x164 , Size: 8]
	Vector2D StabZPitchOut;//[Offset: 0x16c , Size: 8]
	Vector2D StabTorqueIn;//[Offset: 0x174 , Size: 8]
	Vector2D StabTorqueOut;//[Offset: 0x17c , Size: 8]
	float StabTorqueForceScalar;//[Offset: 0x184 , Size: 4]
	Vector2D StabTorquePitchIn;//[Offset: 0x188 , Size: 8]
	Vector2D StabTorquePitchOut;//[Offset: 0x190 , Size: 8]
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198 , Size: 1]
	float ScaleTorque;//[Offset: 0x19c , Size: 4]
	float ScaleCenterOfMass;//[Offset: 0x1a0 , Size: 4]
	Vector CurrentTorque;//[Offset: 0x1a4 , Size: 12]
	Vector CurrentCenterOfMass;//[Offset: 0x1b0 , Size: 12]
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc , Size: 1]
	float KickstandAngularDamping;//[Offset: 0x1c0 , Size: 4]
	float KickstandMaxAngVelocity;//[Offset: 0x1c4 , Size: 4]
	float KickstandEnableMaxSpeed;//[Offset: 0x1c8 , Size: 4]
	Vector2D AirControlFVelMap;//[Offset: 0x1cc , Size: 8]
	Vector2D AirControlBVelMap;//[Offset: 0x1d4 , Size: 8]
	float AirControlFBTorque;//[Offset: 0x1dc , Size: 4]
	bool bShouldResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0 , Size: 1]
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1 , Size: 1]
	float COMOffsetSteer;//[Offset: 0x1ec , Size: 4]
	float RotSteeringFinal;//[Offset: 0x1f0 , Size: 4]
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x152ac90

--------------------------------
Class: BP_HeavyWeaponLevelDirector_C.UAELevelDirector.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x388 , Size: 4]

--------------------------------
Class: BP_DJ_Large_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Large_EQ;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Large_E_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Large_Q_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Large_Q;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Sniper_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Sniper_EQ;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Sniper_E_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Sniper_Q_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Sniper_Q;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Mid_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Mid_EQ;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Mid_E_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Mid_E;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_DJ_Mid_Q_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DJ_Mid_Q;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ZDD_Crossbow_Q_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_ZDD_Crossbow_Q;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Ammo_45ACP_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Ammo_45ACP;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Ammo_9mm_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Ammo_9mm;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Ammo_12Guage_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Ammo_12Guage;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Ammo_556mm_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Ammo_556mm;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Ammo_762mm_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Ammo_762mm;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Sniper_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Sniper_Compensator;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Sniper_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Sniper_FlashHider;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Sniper_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Sniper_Suppressor;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Large_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Large_Suppressor;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Choke_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Choke;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Mid_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Mid_Compensator;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Mid_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Mid_FlashHider;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Small_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Small_Suppressor;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Large_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Large_Compensator;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Large_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Large_FlashHider;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QK_Mid_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QK_Mid_Suppressor;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv1_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv2_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv3_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MZJ_QX_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_MZJ_QX;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MZJ_6X_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_MZJ_6X;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MZJ_2X_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_MZJ_2X;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MZJ_3X_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_MZJ_3X;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MZJ_HD_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_MZJ_HD;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MZJ_4X_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_MZJ_4X;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QT_A_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QT_A;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QT_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QT_A;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ZDD_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_ZDD_Sniper;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ZDD_Shotgun_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_ZDD_Shotgun;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_WB_Vertical_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_WB_Vertical;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_WB_Angled_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_QT_UZI_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_QT_UZI;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv1_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv2_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv3_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: Bandage_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* StaticMesh;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: Drink_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv2_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv3_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv1_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: Firstaid_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: GasCan_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: FirstAidbox_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: Pills_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Grenade_Shoulei_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* M18;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Grenade_Burn_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* M18;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Grenade_Stun_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* M18;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Grenade_Smoke_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* M18;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Rifle_AKM_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_AKM;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_Rifle_SCAR_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_SCAR-L;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_Rifle_M762_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_M762;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_Rifle_Mk47_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* ADS;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* Mag;//[Offset: 0x454 , Size: 4]
	StaticMeshComponent* SM_M762;//[Offset: 0x458 , Size: 4]

--------------------------------
Class: BP_Rifle_M16A4_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x454 , Size: 4]
	StaticMeshComponent* SM_M16A4;//[Offset: 0x458 , Size: 4]

--------------------------------
Class: BP_Rifle_M416_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* ST_WEP_M416_Lod;//[Offset: 0x454 , Size: 4]
	StaticMeshComponent* SM_M416;//[Offset: 0x458 , Size: 4]

--------------------------------
Class: BP_Other_CrossBow_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_CrossBow;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Other_DP28_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DP28;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_WEP_Pan_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_M4A1;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_WEP_Cowbar_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_M4A1;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_WEP_Machete_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_M4A1;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_WEP_Sickle_Pickup_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_M4A1;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Pistol_P92_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_P92;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Pistol_P1911_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_P1911;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Pistol_Vz61_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_Vz61;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_Pistol_P18C_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_P18C;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ShotGun_SawedOff_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_SawedOff;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Pistol_R1895_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_R1895;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ShotGun_S1897_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_S1897;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ShotGun_S12K_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_S12K;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_ShotGun_S686_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_S686;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MachineGun_Vector_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* StaticMesh;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_Vector;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_MachineGun_UMP9_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_UMP9;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_MachineGun_TommyGun_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Grip;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x454 , Size: 4]
	StaticMeshComponent* SM_TommyGun;//[Offset: 0x458 , Size: 4]

--------------------------------
Class: BP_MachineGun_Uzi_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Uzi;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_MachineGun_PP19_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* StaticMesh;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_TommyGun;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_MachineGun_MP5K_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* Mag;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_MP5K;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_Sniper_M24_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_M24;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Sniper_Kar98k_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Sniper_Mini14_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Mini14;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Sniper_SKS_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_SKS;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Sniper_VSS_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* StaticMesh;//[Offset: 0x450 , Size: 4]
	StaticMeshComponent* SM_VSS;//[Offset: 0x454 , Size: 4]

--------------------------------
Class: BP_Pistol_Flaregun_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_Flaregun;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Pistol_R45_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_P1911;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: BP_Pistol_DesertEagle_Wrapper_C.PickUpWrapperActor.UAENetActor.Actor.Object
	void UserConstructionScript();// 0x1bf56d0
	StaticMeshComponent* SM_DesertEagle;//[Offset: 0x450 , Size: 4]

--------------------------------
