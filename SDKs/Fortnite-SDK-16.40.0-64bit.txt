Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 16]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 16]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 16]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 40]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 16]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 8]
	GameStateBase* GameState;//[Offset: 0x120, Size: 8]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 8]
	Level*[] Levels;//[Offset: 0x138, Size: 16]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 16]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 16]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 8]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x218, Size: 8]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x220, Size: 80]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x270, Size: 16]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x280, Size: 16]
	WorldComposition* WorldComposition;//[Offset: 0x600, Size: 8]
	WorldPSCPool PSCPool;//[Offset: 0x698, Size: 88]
	WorldSettings* K2_GetWorldSettings();// 0xd90b3a0
	void HandleTimelineScrubbed();// 0xd90b38c

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xbbc0600

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 8]
	float WorldToMeters;//[Offset: 0x240, Size: 4]
	float KillZ;//[Offset: 0x244, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 8]
	float WorldGravityZ;//[Offset: 0x250, Size: 4]
	float GlobalGravityZ;//[Offset: 0x254, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 4]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 32]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 36]
	float MonoCullingDistance;//[Offset: 0x2dc, Size: 4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 8]
	float TimeDilation;//[Offset: 0x2e8, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 64]
	PlayerState* Pauser;//[Offset: 0x348, Size: 8]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 16]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 8]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 16]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 8]
	void OnRep_WorldGravityZ();// 0xd90a6f4

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 48]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 1]
	byte RemoteRole;//[Offset: 0x5f, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 52]
	float InitialLifeSpan;//[Offset: 0x94, Size: 4]
	float CustomTimeDilation;//[Offset: 0x98, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 64]
	Actor* Owner;//[Offset: 0xe0, Size: 8]
	FName NetDriverName;//[Offset: 0xe8, Size: 8]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 4]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 8]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 4]
	int NetTag;//[Offset: 0x104, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 4]
	float NetPriority;//[Offset: 0x110, Size: 4]
	Pawn* Instigator;//[Offset: 0x118, Size: 8]
	Actor*[] Children;//[Offset: 0x120, Size: 16]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 16]
	FName[] Layers;//[Offset: 0x150, Size: 16]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 8]
	FName[] Tags;//[Offset: 0x170, Size: 16]
	MulticastSparseDelegateProperty OnTakeAnyDamage;//[Size: 1]
	MulticastSparseDelegateProperty OnTakePointDamage;//[Size: 1]
	MulticastSparseDelegateProperty OnTakeRadialDamage;//[Size: 1]
	MulticastSparseDelegateProperty OnActorBeginOverlap;//[Size: 1]
	MulticastSparseDelegateProperty OnActorEndOverlap;//[Size: 1]
	MulticastSparseDelegateProperty OnBeginCursorOver;//[Size: 1]
	MulticastSparseDelegateProperty OnEndCursorOver;//[Size: 1]
	MulticastSparseDelegateProperty OnClicked;//[Size: 1]
	MulticastSparseDelegateProperty OnReleased;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchBegin;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchEnd;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchEnter;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchLeave;//[Size: 1]
	MulticastSparseDelegateProperty OnActorHit;//[Size: 1]
	MulticastSparseDelegateProperty OnDestroyed;//[Size: 1]
	MulticastSparseDelegateProperty OnEndPlay;//[Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 16]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 16]
	bool WasRecentlyRendered(float Tolerance);// 0xb9e59cc
	void UserConstructionScript();// 0xbbc0600
	void TearOff();// 0xd7cbdf4
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0xd7cbd10
	void SetTickGroup(byte NewTickGroup);// 0xd7cbc68
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xd7cbbb8
	void SetReplicates(bool bInReplicates);// 0xd7cbb08
	void SetReplicateMovement(bool bInReplicateMovement);// 0xd7cba50
	void SetOwner(Actor* NewOwner);// 0xd7cb9a0
	void SetNetDormancy(byte NewDormancy);// 0xd7cb8f8
	void SetLifeSpan(float InLifespan);// 0xb9e591c
	void SetAutoDestroyWhenFinished(bool bVal);// 0xd7cb848
	void SetActorTickInterval(float TickInterval);// 0xd7cb7a0
	void SetActorTickEnabled(bool bEnabled);// 0xb9e586c
	void SetActorScale3D(Vector NewScale3D);// 0xb9e57c4
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0xd7cb6f8
	void SetActorHiddenInGame(bool bNewHidden);// 0xb9e570c
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0xb9e565c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xd7cb648
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xd7cb598
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0xbbc0600
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0xbbc0600
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ReceiveDestroyed();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0xbbc0600
	void ReceiveActorOnReleased(Key ButtonReleased);// 0xbbc0600
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0xbbc0600
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0xbbc0600
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0xbbc0600
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0xbbc0600
	void ReceiveActorOnClicked(Key ButtonPressed);// 0xbbc0600
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0xbbc0600
	void ReceiveActorEndCursorOver();// 0xbbc0600
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0xbbc0600
	void ReceiveActorBeginCursorOver();// 0xbbc0600
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0xd7cb460
	void OnRep_ReplicateMovement();// 0xb9e5640
	void OnRep_ReplicatedMovement();// 0xbcf8114
	void OnRep_Owner();// 0xb9e5624
	void OnRep_Instigator();// 0xb9e5608
	void OnRep_AttachmentReplication();// 0xb9e55ec
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0xd7cb2b8
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0xd7cb208
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0xd7cb114
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb9e5400
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0xb9e5304
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7caf34
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7cad84
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7cabd4
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb9e5100
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xb9e4f44
	void K2_OnReset();// 0xbbc0600
	void K2_OnEndViewTarget(PlayerController* PC);// 0xbbc0600
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xbbc0600
	SceneComponent* K2_GetRootComponent();// 0xb9e4f28
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0xb9e4e3c
	Rotator K2_GetActorRotation();// 0xb9e4d7c
	Vector K2_GetActorLocation();// 0xb9e4d3c
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0xd7caaac
	void K2_DestroyComponent(ActorComponent* Component);// 0xd7caa04
	void K2_DestroyActor();// 0xb9e4d20
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xb9e4b34
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xb9e4948
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xd7ca898
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0xd7ca72c
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7ca54c
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7ca36c
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7ca1bc
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7ca00c
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7c9e2c
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7c9c7c
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd7c9acc
	bool IsOverlappingActor(const Actor* Other);// 0xd7c9a18
	bool IsChildActor();// 0xd7c99e0
	bool IsActorTickEnabled();// 0xd7c99a8
	bool IsActorBeingDestroyed();// 0xd7c9988
	bool HasAuthority();// 0xb9e4924
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0xd7c98d8
	Vector GetVelocity();// 0xb9e48e4
	Transform GetTransform();// 0xb9e48a0
	bool GetTickableWhenPaused();// 0xd7c98a0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0xd7c97f0
	byte GetRemoteRole();// 0xd7c97d4
	ChildActorComponent* GetParentComponent();// 0xd7c97a0
	Actor* GetParentActor();// 0xd7c976c
	Actor* GetOwner();// 0xb9e4884
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0xd7c96ac
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xd7c95a8
	byte GetLocalRole();// 0xd7c958c
	float GetLifeSpan();// 0xd7c9550
	Controller* GetInstigatorController();// 0xb9e4850
	Pawn* GetInstigator();// 0xb9e481c
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0xd7c93c0
	float GetInputAxisValue(const FName InputAxisName);// 0xd7c9310
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0xd7c9184
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0xd7c90d4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0xd7c9024
	float GetGameTimeSinceCreation();// 0xd7c8ff0
	float GetDotProductTo(const Actor* OtherActor);// 0xd7c8f40
	float GetDistanceTo(const Actor* OtherActor);// 0xd7c8e90
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0xd7c8d68
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0xd7c8c7c
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0xb9e476c
	FName GetAttachParentSocketName();// 0xd7c8c48
	Actor* GetAttachParentActor();// 0xb9e4738
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0xb9e4628
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0xd7c8b3c
	Vector GetActorUpVector();// 0xb9e45d4
	float GetActorTimeDilation();// 0xd7c8b08
	float GetActorTickInterval();// 0xd7c8ad4
	Vector GetActorScale3D();// 0xb9e459c
	Vector GetActorRightVector();// 0xb9e4548
	Vector GetActorRelativeScale3D();// 0xd7c8a9c
	Vector GetActorForwardVector();// 0xb9e44f4
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0xd7c8998
	bool GetActorEnableCollision();// 0xd7c8978
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0xb9e435c
	void ForceNetUpdate();// 0xd7c895c
	void FlushNetDormancy();// 0xd7c8948
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0xd7c87f0
	void EnableInput(PlayerController* PlayerController);// 0xd7c8740
	void DisableInput(PlayerController* PlayerController);// 0xd7c8690
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0xd7c85e0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xd7c8530
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xd7c8480
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0xd7c82cc
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0xb9e4168
	bool ActorHasTag(FName Tag);// 0xd7c8218

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 12]
	Rotator RotationOffset;//[Offset: 0x20, Size: 12]
	FName AttachSocket;//[Offset: 0x2c, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 16]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 16]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	MulticastSparseDelegateProperty PhysicsVolumeChangedDelegate;//[Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0xd8d97cc
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0xd8d96dc
	void SetWorldScale3D(Vector NewScale);// 0xba2fb40
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xba2fa44
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xd8d962c
	void SetRelativeScale3D(Vector NewScale3D);// 0xba2f99c
	void SetMobility(byte NewMobility);// 0xd8d957c
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xba2f8a0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xd8d9434
	void ResetRelativeTransform();// 0xd8d9420
	void OnRep_Visibility(bool OldValue);// 0xd8d9370
	void OnRep_Transform();// 0xba2f88c
	void OnRep_AttachSocketName();// 0xd8d935c
	void OnRep_AttachParent();// 0xd8d9348
	void OnRep_AttachChildren();// 0xd8d9334
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2f6ac
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2f4fc
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2f30c
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2f15c
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2ef7c
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2edcc
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2ebdc
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xba2ea2c
	Transform K2_GetComponentToWorld();// 0xba2e9f4
	Vector K2_GetComponentScale();// 0xba2e9bc
	Rotator K2_GetComponentRotation();// 0xba2e984
	Vector K2_GetComponentLocation();// 0xba2e94c
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xba2e7dc
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xba2e5e4
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xd8d91bc
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d8fdc
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d8dfc
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d8c4c
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d8a9c
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d88ec
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d873c
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d855c
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d83ac
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xd8d81fc
	bool IsVisible();// 0xba2e5a4
	bool IsSimulatingPhysics(FName BoneName);// 0xd8d8140
	bool IsAnySimulatingPhysics();// 0xd8d8100
	Vector GetUpVector();// 0xd8d80c8
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xbcfac3c
	Rotator GetSocketRotation(FName InSocketName);// 0xba2e4e8
	Quat GetSocketQuaternion(FName InSocketName);// 0xd8d800c
	Vector GetSocketLocation(FName InSocketName);// 0xba2e42c
	bool GetShouldUpdatePhysicsVolume();// 0xd8d7fec
	Vector GetRightVector();// 0xba2e3f4
	Transform GetRelativeTransform();// 0xd8d7fb4
	PhysicsVolume* GetPhysicsVolume();// 0xd8d7f80
	void GetParentComponents(out SceneComponent*[] Parents);// 0xba2e330
	int GetNumChildrenComponents();// 0xd8d7f4c
	Vector GetForwardVector();// 0xd8d7f14
	Vector GetComponentVelocity();// 0xd8d7ed4
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xba2e224
	SceneComponent* GetChildComponent(int ChildIndex);// 0xd8d7e24
	FName GetAttachSocketName();// 0xd8d7e08
	SceneComponent* GetAttachParent();// 0xbcfac20
	FName[] GetAllSocketNames();// 0xd8d7d68
	bool DoesSocketExist(FName InSocketName);// 0xd8d7cac
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xd8d7bac

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 48]
	FName[] ComponentTags;//[Offset: 0x60, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 16]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	MulticastSparseDelegateProperty OnComponentActivated;//[Size: 1]
	MulticastSparseDelegateProperty OnComponentDeactivated;//[Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 16]
	void ToggleActive();// 0xd7cf754
	void SetTickGroup(byte NewTickGroup);// 0xd7cf6ac
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xd7cf5fc
	void SetIsReplicated(bool ShouldReplicate);// 0xd7cf54c
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xd7cf4a4
	void SetComponentTickInterval(float TickInterval);// 0xd7cf3fc
	void SetComponentTickEnabled(bool bEnabled);// 0xb9e6848
	void SetAutoActivate(bool bNewAutoActivate);// 0xb9e6790
	void SetActive(bool bNewActive, bool bReset);// 0xb9e6690
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xd7cf34c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xd7cf29c
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void OnRep_IsActive();// 0xb9e6674
	void K2_DestroyComponent(Object* Object);// 0xb9e65cc
	bool IsComponentTickEnabled();// 0xd7cf25c
	bool IsBeingDestroyed();// 0xd7cf23c
	bool IsActive();// 0xb9e65ac
	Actor* GetOwner();// 0xb9e6590
	float GetComponentTickInterval();// 0xd7cf208
	void Deactivate();// 0xb9e6574
	bool ComponentHasTag(FName Tag);// 0xb9e64c0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xd7cf158
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xd7cf0a8
	void Activate(bool bReset);// 0xb9e6408

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	byte ElementIndex;//[Offset: 0x5c, Size: 1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 8]
	Actor* Actor;//[Offset: 0x68, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	FName MyBoneName;//[Offset: 0x80, Size: 8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 4]
	float StaticFriction;//[Offset: 0x2c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	float Restitution;//[Offset: 0x34, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float Density;//[Offset: 0x3c, Size: 4]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 4]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 4]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 4]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 8]
	byte SurfaceType;//[Offset: 0x60, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 1]
	enum LightmapType;//[Offset: 0x20f, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x217, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x219, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x21a, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x21b, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x21c, Size: 4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x220, Size: 16]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x230, Size: 16]
	int TranslucencySortPriority;//[Offset: 0x248, Size: 4]
	float TranslucencySortDistanceOffset;//[Offset: 0x24c, Size: 4]
	int VisibilityId;//[Offset: 0x250, Size: 4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x258, Size: 16]
	int8 VirtualTextureLodBias;//[Offset: 0x268, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x269, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x26a, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x26b, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x270, Size: 4]
	float BoundsScale;//[Offset: 0x27c, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x290, Size: 16]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a0, Size: 16]
	BodyInstance BodyInstance;//[Offset: 0x2c0, Size: 336]
	MulticastSparseDelegateProperty OnComponentHit;//[Size: 1]
	MulticastSparseDelegateProperty OnComponentBeginOverlap;//[Size: 1]
	MulticastSparseDelegateProperty OnComponentEndOverlap;//[Size: 1]
	MulticastSparseDelegateProperty OnComponentWake;//[Size: 1]
	MulticastSparseDelegateProperty OnComponentSleep;//[Size: 1]
	MulticastSparseDelegateProperty OnBeginCursorOver;//[Size: 1]
	MulticastSparseDelegateProperty OnEndCursorOver;//[Size: 1]
	MulticastSparseDelegateProperty OnClicked;//[Size: 1]
	MulticastSparseDelegateProperty OnReleased;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchBegin;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchEnd;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchEnter;//[Size: 1]
	MulticastSparseDelegateProperty OnInputTouchLeave;//[Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x438, Size: 8]
	bool WasRecentlyRendered(float Tolerance);// 0xd8ce1ec
	void WakeRigidBody(FName BoneName);// 0xd8ce13c
	void WakeAllRigidBodies();// 0xd8ce120
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xd8ce058
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xd8cdf60
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xba2b4e0
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0xd8cdeb8
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xd8cde08
	void SetSimulatePhysics(bool bSimulate);// 0xd8cdd50
	void SetRenderInMainPass(bool bValue);// 0xd8cdca0
	void SetRenderCustomDepth(bool bValue);// 0xba2b430
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xd8cdbf0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xd8cdb40
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xd8cda10
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xd8cd8d0
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xd8cd790
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xd8cd658
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xd8cd520
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xd8cd3d0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xd8cd280
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xd8cd1d0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xd8cd120
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xd8cd068
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xd8ccf7c
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xba2b340
	void SetMassScale(FName BoneName, float InMassScale);// 0xd8cce8c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xd8ccd54
	void SetLinearDamping(float InDamping);// 0xd8ccca4
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xd8ccb5c
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0xd8ccaac
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xba2b290
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0xd8cc9fc
	void SetEnableGravity(bool bGravityEnabled);// 0xd8cc944
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xd8cc850
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xd8cc768
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xd8cc684
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xd8cc59c
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xd8cc4a8
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xd8cc3c0
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xd8cc2dc
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xba2b1a8
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xd8cc234
	void SetCustomDepthStencilValue(int Value);// 0xba2b100
	void SetCullDistance(float NewCullDistance);// 0xba2b058
	void SetConstraintMode(byte ConstraintMode);// 0xd8cc184
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xba2af68
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xd8cc0d4
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0xd8cbfdc
	void SetCollisionObjectType(byte Channel);// 0xd8cbf2c
	void SetCollisionEnabled(byte NewType);// 0xba2aeb8
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xd8cbe44
	void SetCastShadow(bool NewCastShadow);// 0xba2ae08
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0xd8cbd94
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0xba2ad58
	void SetBoundsScale(float NewBoundsScale);// 0xba2acb0
	void SetAngularDamping(float InDamping);// 0xd8cbce4
	void SetAllUseCCD(bool InUseCCD);// 0xd8cbc2c
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xd8cbb34
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xd8cba30
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xd8cb904
	void SetAllMassScale(float InMassScale);// 0xd8cb854
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xd8cb758
	void PutRigidBodyToSleep(FName BoneName);// 0xd8cb6b0
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xd8cb33c
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xd8cb008
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xd8cacd4
	bool K2_IsQueryCollisionEnabled();// 0xd8cac8c
	bool K2_IsPhysicsCollisionEnabled();// 0xd8cac44
	bool K2_IsCollisionEnabled();// 0xd8cac00
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xd8ca8b4
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xd8ca800
	bool IsOverlappingActor(const Actor* Other);// 0xd8ca74c
	bool IsGravityEnabled();// 0xd8ca70c
	bool IsAnyRigidBodyAwake();// 0xd8ca6cc
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xd8ca5dc
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xd8ca4ec
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xd8ca4b4
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xd8ca3c0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xd8ca30c
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xd8ca258
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xd8ca18c
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0xd8ca0c0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xd8ca000
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xd8c9efc
	int GetNumMaterials();// 0xba2ac74
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xd8c9df8
	MaterialInterface* GetMaterial(int ElementIndex);// 0xba2abbc
	float GetMassScale(FName BoneName);// 0xd8c9d40
	float GetMass();// 0xd8c9d04
	float GetLinearDamping();// 0xd8c9cc8
	Vector GetInertiaTensor(FName BoneName);// 0xd8c9c0c
	bool GetGenerateOverlapEvents();// 0xd8c9bec
	byte GetCollisionResponseToChannel(byte Channel);// 0xba2ab04
	FName GetCollisionProfileName();// 0xd8c9bb8
	byte GetCollisionObjectType();// 0xd8c9b7c
	byte GetCollisionEnabled();// 0xd8c9b40
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xd8c99f0
	Vector GetCenterOfMass(FName BoneName);// 0xba2aa50
	float GetAngularDamping();// 0xd8c99b4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xba2a91c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xd8c98bc
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xd8c9804
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xd8c9764
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xd8c96c4
	void ClearMoveIgnoreComponents();// 0xd8c9698
	void ClearMoveIgnoreActors();// 0xd8c9684
	bool CanCharacterStepUp(Pawn* Pawn);// 0xd8c95c8
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xd8c9490
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xd8c9340
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0xd8c9208
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xd8c9054
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xd8c8ea0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xd8c8d70
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xd8c8c38
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xd8c8b08
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xd8c89d8
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xd8c88a0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xd8c8768
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xd8c8618
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xd8c84e0

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 16]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 16]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0xd89bae0
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0xd89baa4
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0xd89b9ec
	PhysicalMaterial* GetPhysicalMaterial();// 0xd89b9b0
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0xd89b884
	Material* GetBaseMaterial();// 0xba1b9d0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 4]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: MaterialFunctionInterface.Object
	GUID StateId;//[Offset: 0x28, Size: 16]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GUID
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 8]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 12]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 12]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 12]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 12]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 12]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 12]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 12]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 12]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 16]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 12]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 12]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 1]
	byte ShadingRate;//[Offset: 0x1ff, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 1]
	byte BlendableLocation;//[Offset: 0x202, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 1]
	byte StencilCompare;//[Offset: 0x204, Size: 1]
	byte StencilRefValue;//[Offset: 0x205, Size: 1]
	byte RefractionMode;//[Offset: 0x206, Size: 1]
	int BlendablePriority;//[Offset: 0x208, Size: 4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x210, Size: 4]
	float RefractionDepthBias;//[Offset: 0x214, Size: 4]
	GUID StateId;//[Offset: 0x218, Size: 16]
	float MaxDisplacement;//[Offset: 0x228, Size: 4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x260, Size: 552]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FName ExpressionName;//[Offset: 0x4, Size: 8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FName ExpressionName;//[Offset: 0x4, Size: 8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 416]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 16]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 16]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 16]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 16]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 16]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 16]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 16]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 16]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 64]
	float[] ScalarValues;//[Offset: 0x140, Size: 16]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 16]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 16]
	Font*[] FontValues;//[Offset: 0x170, Size: 16]
	int[] FontPageValues;//[Offset: 0x180, Size: 16]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 16]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 16]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 16]
	GUID[] ExpressionGuids;//[Offset: 0x20, Size: 16]
	bool[] Overrides;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	GUID LightingGuid;//[Offset: 0x68, Size: 16]
	int LODBias;//[Offset: 0x78, Size: 4]
	byte CompressionSettings;//[Offset: 0x7c, Size: 1]
	byte Filter;//[Offset: 0x7d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 1]
	byte LODGroup;//[Offset: 0x7f, Size: 1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 4]
	enum DownscaleOptions;//[Offset: 0x84, Size: 1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 16]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 4]
	int StreamingIndex;//[Offset: 0x4c, Size: 4]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 16]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 16]
	int IsRemapped;//[Offset: 0x58, Size: 4]
	float EmScale;//[Offset: 0x5c, Size: 4]
	float Ascent;//[Offset: 0x60, Size: 4]
	float Descent;//[Offset: 0x64, Size: 4]
	float Leading;//[Offset: 0x68, Size: 4]
	int Kerning;//[Offset: 0x6c, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 168]
	int NumCharacters;//[Offset: 0x118, Size: 4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 16]
	float ScalingFactor;//[Offset: 0x130, Size: 4]
	int LegacyFontSize;//[Offset: 0x134, Size: 4]
	FName LegacyFontName;//[Offset: 0x138, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 56]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xd8, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xdc, Size: 4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	byte AddressX;//[Offset: 0xe1, Size: 1]
	byte AddressY;//[Offset: 0xe2, Size: 1]
	IntPoint ImportedSize;//[Offset: 0xe4, Size: 8]
	int Blueprint_GetSizeY();// 0xd900b28
	int Blueprint_GetSizeX();// 0xd900af4

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 16]
	float Height;//[Offset: 0x10, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x15, Size: 1]
	FString Chars;//[Offset: 0x18, Size: 16]
	FString UnicodeRange;//[Offset: 0x28, Size: 16]
	FString CharsFilePath;//[Offset: 0x38, Size: 16]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 16]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	int TexturePageWidth;//[Offset: 0x70, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 4]
	int XPadding;//[Offset: 0x78, Size: 4]
	int YPadding;//[Offset: 0x7c, Size: 4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	int Kerning;//[Offset: 0x94, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 16]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 24]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 16]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 16]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 16]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 16]
	float ScalingFactor;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 16]
	FString Cultures;//[Offset: 0x28, Size: 16]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 4]
	int TileSize;//[Offset: 0x2c, Size: 4]
	int TileBorderSize;//[Offset: 0x30, Size: 4]
	enum MaterialType;//[Offset: 0x34, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 4]
	byte LODGroup;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x44, Size: 4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 8]
	int GetTileSize();// 0xd8d3d10
	int GetTileCount();// 0xd8d3cbc
	int GetTileBorderSize();// 0xd8d3c8c
	int GetSize();// 0xd8d3c0c
	int GetPageTableSize();// 0xd8d3bd8

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialFunctionInfo
	GUID StateId;//[Offset: 0x0, Size: 16]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MaterialParameterCollectionInfo
	GUID StateId;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MaterialParameterCollection.Object
	GUID StateId;//[Offset: 0x28, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 16]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 16]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	GUID ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 16]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 8]
	float GrassDensity;//[Offset: 0x48, Size: 4]
	float PlacementJitter;//[Offset: 0x4c, Size: 4]
	int StartCullDistance;//[Offset: 0x50, Size: 4]
	int EndCullDistance;//[Offset: 0x54, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 16]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float PlacementJitter;//[Offset: 0x20, Size: 4]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 4]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 4]
	int MinLOD;//[Offset: 0x2c, Size: 4]
	enum Scaling;//[Offset: 0x30, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 4]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 16]
	float LightmapUVDensity;//[Offset: 0x98, Size: 4]
	int LightMapResolution;//[Offset: 0x9c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 8]
	int LODForCollision;//[Offset: 0xb0, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 16]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 28]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 16]
	Object* EditableMesh;//[Offset: 0x140, Size: 8]
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 8]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0xd8fd0c8
	void RemoveSocket(StaticMeshSocket* Socket);// 0xd8fd020
	StaticMaterial[] GetStaticMaterials();// 0xd8fcfe4
	int GetNumSections(int InLOD);// 0xd8fcf34
	int GetNumLODs();// 0xd8fcf00
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0xd8fce38
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0xd8fcd94
	int GetMaterialIndex(FName MaterialSlotName);// 0xd8fcce4
	MaterialInterface* GetMaterial(int MaterialIndex);// 0xd8fcc34
	BoxSphereBounds GetBounds();// 0xd8fcbc8
	Box GetBoundingBox();// 0xd8fcb5c
	StaticMeshSocket* FindSocket(FName InSocketName);// 0xd8fcaac
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0xd8fca04
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0xd8fc8f8
	void AddSocket(StaticMeshSocket* Socket);// 0xd8fc850
	FName AddMaterial(MaterialInterface* Material);// 0xd8fc7a0

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 20]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x38, Size: 88]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa0, Size: 16]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 336]
	Vector BuildScale3D;//[Offset: 0x280, Size: 12]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 8]
	byte PhysicsType;//[Offset: 0x30, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 1]
	byte CollisionReponse;//[Offset: 0x32, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 16]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 16]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 16]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 16]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 16]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 12]
	float Radius;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 4]
	FName Name;//[Offset: 0xc, Size: 8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 12]
	Rotator Rotation;//[Offset: 0x3c, Size: 12]
	float X;//[Offset: 0x48, Size: 4]
	float Y;//[Offset: 0x4c, Size: 4]
	float Z;//[Offset: 0x50, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 12]
	Rotator Rotation;//[Offset: 0x3c, Size: 12]
	float Radius;//[Offset: 0x48, Size: 4]
	float Length;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 16]
	int[] IndexData;//[Offset: 0x40, Size: 16]
	Box ElemBox;//[Offset: 0x50, Size: 28]
	Transform Transform;//[Offset: 0x70, Size: 48]

--------------------------------
Class: Box
	Vector min;//[Offset: 0x0, Size: 12]
	Vector max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 12]
	Rotator Rotation;//[Offset: 0x3c, Size: 12]
	float Radius0;//[Offset: 0x48, Size: 4]
	float Radius1;//[Offset: 0x4c, Size: 4]
	float Length;//[Offset: 0x50, Size: 4]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1c, Size: 1]
	enum SleepFamily;//[Offset: 0x51, Size: 1]
	byte DOFMode;//[Offset: 0x52, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	FName CollisionProfileName;//[Offset: 0x64, Size: 8]
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 48]
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 4]
	float MassInKgOverride;//[Offset: 0xa4, Size: 4]
	float LinearDamping;//[Offset: 0xb0, Size: 4]
	float AngularDamping;//[Offset: 0xb4, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 12]
	Vector COMNudge;//[Offset: 0xc4, Size: 12]
	float MassScale;//[Offset: 0xd0, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 12]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 8]
	float MaxAngularVelocity;//[Offset: 0x108, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 4]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 16]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	FString Tag;//[Offset: 0x58, Size: 16]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0xa9ba600
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0xa9ba1b4
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0xa9ba744
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0xa9ba2c0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0xa98b868
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0xa989700
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0xa989608
	void ReversePolygonFacing(PolygonID PolygonID);// 0xa989554
	void ReserveNewVertices(int NumberOfNewVertices);// 0xa98dfac
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0xa98dca8
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0xa98d3b0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0xa98cd34
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0xa98c6b8
	void ReserveNewEdges(int NumberOfNewEdges);// 0xa98d874
	bool IsVertexValid(VertexID VertexID);// 0xa98dd50
	bool IsVertexOrphaned(VertexID VertexID);// 0xa98c39c
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0xa98d91c
	bool IsTriangleValid(const TriangleID TriangleID);// 0xa98cddc
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0xa98a934
	bool IsPolygonValid(PolygonID PolygonID);// 0xa98c760
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0xa98c45c
	bool IsEmpty();// 0xa98e054
	bool IsEdgeValid(EdgeID EdgeID);// 0xa98d458
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0xa98b130
	bool IsEdgeInternal(EdgeID EdgeID);// 0xa98b23c
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xa98bfa8
	Vector GetVertexPosition(VertexID VertexID);// 0xa98b96c
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0xa98c294
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0xa98b7ac
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0xa98b6a4
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0xa98a2c8
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0xa989840
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0xa98b58c
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0xa98b3b8
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0xa98bdd4
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0xa98bc00
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0xa98c17c
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0xa98ba2c
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0xa98a600
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xa98a81c
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0xa98a718
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0xa98a9f4
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0xa98aab0
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0xa98a4e8
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0xa98a3d0
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0xa989e08
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0xa989fdc
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0xa98a1b0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0xa989948
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xa989cf0
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0xa989bd8
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0xa989388
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0xa989a04
	int GetNumVertexVertexInstances(VertexID VertexID);// 0xa98beec
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0xa98b4d0
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0xa98b2fc
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0xa98bd18
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0xa98bb44
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0xa98c0c0
	int GetNumPolygonVertices(PolygonID PolygonID);// 0xa989f20
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0xa98a0f4
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0xa989b1c
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0xa9892cc
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0xa98af5c
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0xa98ad88
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0xa98ab6c
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0xa98ac84
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0xa98b018
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0xa98ae44
	void Empty();// 0xa98e08c
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0xa98d9dc
	void DeleteVertex(VertexID VertexID);// 0xa98de10
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0xa98ce9c
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0xa98c51c
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0xa98c820
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0xa98d518
	void CreateVertexWithID(VertexID VertexID);// 0xa98dec4
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0xa98daf4
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0xa98dbec
	VertexID CreateVertex();// 0xa98df78
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa98d074
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa98d22c
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa98c9f8
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0xa98c5d0
	PolygonGroupID CreatePolygonGroup();// 0xa98c684
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0xa98cbb0
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0xa98d630
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0xa98d76c
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0xa9894a0

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float min;//[Offset: 0x0, Size: 4]
	float max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 140]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 16]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 16]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 4]
	float WorldUnitScale;//[Offset: 0x24, Size: 4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 16]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 16]
	float ExtinctionScale;//[Offset: 0x60, Size: 4]
	float NormalScale;//[Offset: 0x64, Size: 4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 4]
	float IOR;//[Offset: 0x6c, Size: 4]
	float Roughness0;//[Offset: 0x70, Size: 4]
	float Roughness1;//[Offset: 0x74, Size: 4]
	float LobeMix;//[Offset: 0x78, Size: 4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 4]
	float DiffuseBoost;//[Offset: 0x4, Size: 4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0xd89c5f4
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0xba1bd34
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0xd89c4ec
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0xba1bc50
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0xd89c3e4
	void SetScalarParameterValue(FName ParameterName, float Value);// 0xba1bb68
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0xd89c2c0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xd89c1f0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xba1bab4
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xd89c124
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xd89c074
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0xd89bfa8
	float K2_GetScalarParameterValue(FName ParameterName);// 0xba1ba04
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0xd89beb8
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0xd89be10
	void CopyInterpParameters(MaterialInstance* Source);// 0xd89bd68

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 16]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 16]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 16]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 16]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 16]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 64]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 416]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 16]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 16]
	float ParameterValue;//[Offset: 0x10, Size: 4]
	GUID ExpressionGUID;//[Offset: 0x14, Size: 16]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 16]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 16]
	GUID ExpressionGUID;//[Offset: 0x20, Size: 16]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 16]
	Texture* ParameterValue;//[Offset: 0x10, Size: 8]
	GUID ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 16]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 8]
	GUID ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 16]
	Font* FontValue;//[Offset: 0x10, Size: 8]
	int FontPage;//[Offset: 0x18, Size: 4]
	GUID ExpressionGUID;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 16]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 16]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 16]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 16]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 16]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	GUID ExpressionGUID;//[Offset: 0x14, Size: 16]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 64]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 16]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 16]
	bool[] LayerStates;//[Offset: 0x20, Size: 16]
	FString KeyString;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 8]
	Controller* LastHitBy;//[Offset: 0x250, Size: 8]
	Controller* Controller;//[Offset: 0x258, Size: 8]
	Vector ControlInputVector;//[Offset: 0x264, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 12]
	void SpawnDefaultController();// 0xd8af2dc
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0xd8af1e4
	void ReceiveUnpossessed(Controller* OldController);// 0xbbc0600
	void ReceivePossessed(Controller* NewController);// 0xbbc0600
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0xd8af078
	void OnRep_PlayerState();// 0xba27148
	void OnRep_Controller();// 0xd8af05c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xd8aef24
	Vector K2_GetMovementInputVector();// 0xd8aeeec
	bool IsPlayerControlled();// 0xba27108
	bool IsPawnControlled();// 0xd8aeeb4
	bool IsMoveInputIgnored();// 0xd8aee74
	bool IsLocallyControlled();// 0xba270c8
	bool IsControlled();// 0xd8aee3c
	bool IsBotControlled();// 0xd8aedfc
	Vector GetPendingMovementInputVector();// 0xd8aedc4
	Vector GetNavAgentLocation();// 0xd8aed84
	PawnMovementComponent* GetMovementComponent();// 0xd8aed48
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0xd8aeca0
	Vector GetLastMovementInputVector();// 0xd8aec68
	Rotator GetControlRotation();// 0xd8aec30
	Controller* GetController();// 0xba270ac
	Rotator GetBaseAimRotation();// 0xba2706c
	void DetachFromControllerPendingDestroy();// 0xd8aec14
	Vector ConsumeMovementInputVector();// 0xd8aebd4
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0xd8aea9c
	void AddControllerYawInput(float Val);// 0xd8ae9ec
	void AddControllerRollInput(float Val);// 0xd8ae93c
	void AddControllerPitchInput(float Val);// 0xd8ae88c

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 8]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 16]
	FName StateName;//[Offset: 0x248, Size: 8]
	Pawn* Pawn;//[Offset: 0x250, Size: 8]
	Character* Character;//[Offset: 0x260, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 8]
	Rotator ControlRotation;//[Offset: 0x288, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	void UnPossess();// 0xd801808
	void StopMovement();// 0xd8017ec
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0xd8016e8
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0xd801630
	void SetIgnoreLookInput(bool bNewLookInput);// 0xd801578
	void SetControlRotation(out const Rotator NewRotation);// 0xd8014c0
	void ResetIgnoreMoveInput();// 0xd8014a4
	void ResetIgnoreLookInput();// 0xd801488
	void ResetIgnoreInputFlags();// 0xd80146c
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0xbbc0600
	void ReceivePossess(Pawn* PossessedPawn);// 0xbbc0600
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0xbbc0600
	void Possess(Pawn* InPawn);// 0xd8013c4
	void OnRep_PlayerState();// 0xd8013a8
	void OnRep_Pawn();// 0xd80138c
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0xd801248
	Pawn* K2_GetPawn();// 0xd801214
	bool IsPlayerController();// 0xd8011f4
	bool IsMoveInputIgnored();// 0xd8011b4
	bool IsLookInputIgnored();// 0xd801174
	bool IsLocalPlayerController();// 0xd801124
	bool IsLocalController();// 0xd8010e4
	Actor* GetViewTarget();// 0xb9f2d70
	Rotator GetDesiredRotation();// 0xd8010a4
	Rotator GetControlRotation();// 0xd801064
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0xd800f38
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0xd800e14
	PlayerController* CastToPlayerController();// 0xd800de0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 4]
	int PlayerID;//[Offset: 0x224, Size: 4]
	byte Ping;//[Offset: 0x228, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 1]
	int StartTime;//[Offset: 0x22c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 8]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 16]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 40]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 8]
	FString PlayerNamePrivate;//[Offset: 0x2f8, Size: 16]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0xbbc0600
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0xbbc0600
	void OnRep_UniqueId();// 0xba299b4
	void OnRep_Score();// 0xd8c56fc
	void OnRep_PlayerName();// 0xba29998
	void OnRep_PlayerId();// 0xba2997c
	void OnRep_bIsInactive();// 0xd8c56e0
	FString GetPlayerName();// 0xd8c5640

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 16]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 8]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 4]
	int JumpMaxCount;//[Offset: 0x344, Size: 4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 4]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 4]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 16]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 16]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 56]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 16]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 152]
	void UnCrouch(bool bClientSimulation);// 0xd7f78fc
	void StopJumping();// 0xd7f78e0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0xd7f7830
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0xd7f7744
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0xd7f75f8
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xd7f7390
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0xd7f7014
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xd7f6c08
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xd7f67fc
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0xd7f6514
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0xd7f6458
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0xb9f1260
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0xd7f62bc
	void OnRep_RootMotion();// 0xb9f124c
	void OnRep_ReplicatedBasedMovement();// 0xb9f1230
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0xbcf8bd0
	void OnRep_IsCrouched();// 0xb9f1214
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xbbc0600
	void OnLanded(out const HitResult Hit);// 0xbbc0600
	void OnJumped();// 0xd7f62a0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xd7f6160
	void K2_UpdateCustomMovement(float DeltaTime);// 0xbbc0600
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xbbc0600
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xbbc0600
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xbbc0600
	void Jump();// 0xd7f6144
	bool IsPlayingRootMotion();// 0xd7f610c
	bool IsPlayingNetworkedRootMotionMontage();// 0xd7f60d4
	bool IsJumpProvidingForce();// 0xb9f11d4
	bool HasAnyRootMotion();// 0xd7f609c
	AnimMontage* GetCurrentMontage();// 0xd7f6068
	Vector GetBaseTranslationOffset();// 0xd7f6040
	Rotator GetBaseRotationOffsetRotator();// 0xd7f5fe8
	float GetAnimRootMotionTranslationScale();// 0xd7f5fb4
	void Crouch(bool bClientSimulation);// 0xd7f5efc
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xd7f5cc4
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0xd7f5bd8
	void ClientCheatWalk();// 0xd7f5bbc
	void ClientCheatGhost();// 0xd7f5ba0
	void ClientCheatFly();// 0xd7f5b84
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xd7f56b4
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xd7f53b8
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0xd7f513c
	void ClientAckGoodMove(float Timestamp);// 0xd7f5094
	bool CanJumpInternal();// 0xd7f5054
	bool CanJump();// 0xd7f501c
	bool CanCrouch();// 0xd7f4fdc
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0xd7f4eec

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x690, Size: 8]
	class AnimInstance* AnimClass;//[Offset: 0x698, Size: 8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6a0, Size: 8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6a8, Size: 8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6b0, Size: 24]
	Vector RootBoneTranslation;//[Offset: 0x6d8, Size: 12]
	Vector LineCheckBoundsScale;//[Offset: 0x6e4, Size: 12]
	AnimInstance*[] LinkedInstances;//[Offset: 0x720, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x730, Size: 16]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x740, Size: 16]
	float GlobalAnimRateScale;//[Offset: 0x8a0, Size: 4]
	byte KinematicBonesUpdateType;//[Offset: 0x8a4, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8a5, Size: 1]
	byte AnimationMode;//[Offset: 0x8a7, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a9, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a9, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a9, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a9, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a9, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8a9, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8aa, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b0, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b0, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b0, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b0, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b0, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b1, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b1, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b1, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b1, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b1, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b1, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b1, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b2, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b2, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b2, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b2, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b2, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b2, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b2, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b2, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b3, Size: 1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b3, Size: 1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b3, Size: 1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b3, Size: 1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b3, Size: 1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b3, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b3, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b3, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b4, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b4, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8b6, Size: 2]
	enum MassMode;//[Offset: 0x8b8, Size: 1]
	float UniformMass;//[Offset: 0x8bc, Size: 4]
	float TotalMass;//[Offset: 0x8c0, Size: 4]
	float Density;//[Offset: 0x8c4, Size: 4]
	float MinPerParticleMass;//[Offset: 0x8c8, Size: 4]
	float ClothBlendWeight;//[Offset: 0x8cc, Size: 4]
	float EdgeStiffness;//[Offset: 0x8d0, Size: 4]
	float BendingStiffness;//[Offset: 0x8d4, Size: 4]
	float AreaStiffness;//[Offset: 0x8d8, Size: 4]
	float VolumeStiffness;//[Offset: 0x8dc, Size: 4]
	float StrainLimitingStiffness;//[Offset: 0x8e0, Size: 4]
	float ShapeTargetStiffness;//[Offset: 0x8e4, Size: 4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x8f0, Size: 16]
	BodySetup* BodySetup;//[Offset: 0x900, Size: 8]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 16]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x920, Size: 8]
	float TeleportDistanceThreshold;//[Offset: 0x9f8, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x9fc, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xa08, Size: 4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa60, Size: 8]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 16]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xba31138
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0xd8e4074
	void ToggleDisablePostProcessBlueprint();// 0xd8e4060
	void TermBodiesBelow(FName ParentBoneName);// 0xd8e3fb8
	void SuspendClothingSimulation();// 0xd8e3fa4
	void Stop();// 0xd8e3f90
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xd8e3eb8
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0xd8e3e08
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0xd8e3d58
	void SetTeleportRotationThreshold(float Threshold);// 0xd8e3cb0
	void SetTeleportDistanceThreshold(float Threshold);// 0xd8e3c08
	void SetPosition(float InPos, bool bFireNotifies);// 0xd8e3b18
	void SetPlayRate(float Rate);// 0xba31090
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0xd8e3a70
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0xd8e3930
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0xd8e3800
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0xd8e3750
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0xd8e3618
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0xd8e3528
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0xd8e3478
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0xd8e33c8
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0xd8e32d8
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0xd8e31ac
	void SetClothMaxDistanceScale(float Scale);// 0xd8e3104
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0xd8e300c
	void SetAnimClass(class Object NewClass);// 0xba30fe0
	void SetAnimationMode(byte InAnimationMode);// 0xd8e2f64
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0xd8e2ebc
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0xd8e2d58
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0xd8e2c60
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0xd8e2b54
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0xd8e2aa4
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xd8e295c
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0xd8e2814
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0xd8e26a8
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0xd8e25f8
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xd8e2508
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0xd8e23b8
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0xd8e2228
	void ResumeClothingSimulation();// 0xd8e2214
	void ResetClothTeleportMode();// 0xd8e2200
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0xd8e2158
	void ResetAllowedAnimCurveEvaluation();// 0xd8e2144
	void ResetAllBodiesSimulatePhysics();// 0xd8e2130
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0xba30ef0
	void Play(bool bLooping);// 0xd8e2080
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0xd8e1ec4
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xd8e1de0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xba30e48
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0xd8e1bdc
	bool IsPlaying();// 0xd8e1ba4
	bool IsClothingSimulationSuspended();// 0xd8e1b6c
	bool IsBodyGravityEnabled(FName BoneName);// 0xd8e1ab8
	bool HasValidAnimationInstance();// 0xd8e1a80
	float GetTeleportRotationThreshold();// 0xd8e1a4c
	float GetTeleportDistanceThreshold();// 0xd8e1a18
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0xd8e1858
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0xd8e1604
	Vector GetSkeletalCenterOfMass();// 0xd8e15cc
	AnimInstance* GetPostProcessInstance();// 0xd8e1598
	float GetPosition();// 0xd8e1564
	float GetPlayRate();// 0xd8e1530
	float GetMorphTarget(FName MorphTargetName);// 0xd8e1480
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xd8e13d0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xd8e1320
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xd8e1220
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xd8e1170
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0xd8e0fbc
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0xd8e0dc8
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0xd8e0c14
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0xd8e0a20
	bool GetDisablePostProcessBlueprint();// 0xd8e09e8
	bool GetDisableAnimCurves();// 0xd8e09c4
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0xd8e0828
	float GetClothMaxDistanceScale();// 0xd8e07f4
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0xd8e07c0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0xd8e06c8
	AnimInstance* GetAnimInstance();// 0xba30e14
	class Object GetAnimClass();// 0xd8e0694
	byte GetAnimationMode();// 0xd8e0660
	bool GetAllowRigidBodyAnimNode();// 0xd8e063c
	bool GetAllowedAnimCurveEvaluate();// 0xd8e061c
	void ForceClothNextUpdateTeleportAndReset();// 0xd8e0608
	void ForceClothNextUpdateTeleport();// 0xd8e05f4
	FName FindConstraintBoneName(int ConstraintIndex);// 0xd8e0544
	void ClearMorphTargets();// 0xd8e0530
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0xd8e0408
	void BindClothToMasterPoseComponent();// 0xd8e03f4
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0xd8e0304
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0xd8e0184
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0xd8e0004
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0xd8dfec4

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x470, Size: 8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x478, Size: 8]
	enum[] SkinCacheUsage;//[Offset: 0x480, Size: 16]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x490, Size: 16]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x598, Size: 8]
	int ForcedLodModel;//[Offset: 0x5a0, Size: 4]
	int MinLodModel;//[Offset: 0x5a4, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b0, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5c0, Size: 16]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5f4, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f6, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f6, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f6, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f6, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5f6, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f7, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f7, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f7, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f7, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f7, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f7, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5f7, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5f7, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f8, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f8, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f8, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f8, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f8, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f9, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f9, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5fc, Size: 4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x610, Size: 28]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x630, Size: 64]
	void UnloadSkinWeightProfile(FName InProfileName);// 0xd8e8dc8
	void UnHideBoneByName(FName BoneName);// 0xba32260
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xd8e8c0c
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0xd8e8a50
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0xd8e88e4
	void ShowAllMaterialSections(int LODIndex);// 0xd8e883c
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0xd8e8758
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0xd8e8658
	bool SetSkinWeightProfile(FName InProfileName);// 0xd8e85a4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0xd8e84a4
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0xba32168
	void SetRenderStatic(bool bNewValue);// 0xba320b8
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xd8e8384
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0xd8e8264
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0xd8e816c
	void SetMinLOD(int InNewMinLOD);// 0xd8e80c4
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0xd8e7fd4
	void SetForcedLOD(int InNewForcedLOD);// 0xd8e7f2c
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0xd8e7e7c
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0xd8e7dcc
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0xba32010
	bool IsUsingSkinWeightProfile();// 0xd8e7dac
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0xd8e7cbc
	bool IsBoneHiddenByName(FName BoneName);// 0xd8e7c08
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0xba31f28
	int GetVertexOffsetUsage(int LODIndex);// 0xd8e7b58
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0xba31dd0
	FName GetSocketBoneName(FName InSocketName);// 0xd8e7aa8
	Vector GetRefPosePosition(int BoneIndex);// 0xd8e79f4
	FName GetParentBone(FName BoneName);// 0xd8e7944
	int GetNumLODs();// 0xd8e7910
	int GetNumBones();// 0xd8e78dc
	int GetForcedLOD();// 0xd8e78a8
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0xbcfaef8
	FName GetCurrentSkinWeightProfileName();// 0xd8e788c
	FName GetBoneName(int BoneIndex);// 0xd8e77dc
	int GetBoneIndex(FName BoneName);// 0xd8e772c
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0xd8e75a0
	void ClearVertexColorOverride(int LODIndex);// 0xd8e74f8
	void ClearSkinWeightProfile();// 0xd8e74e4
	void ClearSkinWeightOverride(int LODIndex);// 0xd8e743c
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0xd8e734c

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x440, Size: 16]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xba1cb24
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xba1ca3c
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xd89e550
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xd89e494
	FName[] GetMaterialSlotNames();// 0xba1c994
	MaterialInterface*[] GetMaterials();// 0xba1c8ec
	int GetMaterialIndex(FName MaterialSlotName);// 0xba1c834

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 8]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 16]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 16]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 16]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 112]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 16]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0xd7d6768
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0xd7d66c0
	Pawn* TryGetPawnOwner();// 0xb9e8bd4
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0xd7d65d8
	void SnapshotPose(out PoseSnapshot Snapshot);// 0xd7d64f8
	void SetRootMotionMode(byte Value);// 0xd7d6450
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0xd7d6398
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0xd7d62e0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0xd7d61f8
	void SavePoseSnapshot(FName SnapshotName);// 0xd7d6148
	void ResetDynamics(enum InTeleportType);// 0xb9e8b2c
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0xd7d5ee4
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0xd7d5cfc
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0xd7d5c14
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0xd7d5b2c
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0xd7d5a44
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0xd7d595c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0xd7d5838
	void Montage_Resume(const AnimMontage* Montage);// 0xd7d5790
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0xd7d55d8
	void Montage_Pause(const AnimMontage* Montage);// 0xd7d5530
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0xd7d544c
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0xd7d5368
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0xb9e8a78
	bool Montage_IsActive(const AnimMontage* Montage);// 0xd7d52b4
	float Montage_GetPosition(const AnimMontage* Montage);// 0xd7d5204
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0xd7d5154
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0xd7d50a0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0xd7d4ff0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0xd7d4f40
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0xd7d4e48
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0xd7d4d64
	void LinkAnimClassLayers(class AnimInstance InClass);// 0xd7d4cbc
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0xd7d4b44
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0xd7d4a54
	bool IsAnyMontagePlaying();// 0xd7d4a1c
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0xd7d492c
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0xd7d47f0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0xd7d4730
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0xd7d4644
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0xb9e898c
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0xd7d4558
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0xb9e88a0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0xd7d446c
	bool GetReceiveNotifiesFromLinkedInstances();// 0xd7d444c
	bool GetPropagateNotifiesToLinkedInstances();// 0xd7d442c
	SkeletalMeshComponent* GetOwningComponent();// 0xb9e886c
	Actor* GetOwningActor();// 0xb9e8838
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0xd7d432c
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0xd7d4240
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0xd7d4190
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0xb9e8788
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0xd7d4090
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0xd7d3fe0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0xd7d3ef4
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0xd7d3e08
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0xd7d3d1c
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0xd7d3c30
	float GetInstanceMachineWeight(int MachineIndex);// 0xd7d3b80
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0xd7d3ad0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0xd7d3a20
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0xb9e86d8
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0xd7d3970
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0xd7d38c0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0xd7d3810
	float GetCurveValue(FName CurveName);// 0xb9e8628
	FName GetCurrentStateName(int MachineIndex);// 0xd7d3760
	AnimMontage* GetCurrentActiveMontage();// 0xd7d372c
	void GetAllCurveNames(out FName[] OutNames);// 0xd7d366c
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0xd7d356c
	void ClearMorphTargets();// 0xd7d3558
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0xd7d344c
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0xbbc0600
	void BlueprintPostEvaluateAnimation();// 0xbbc0600
	void BlueprintLinkedAnimationLayersInitialized();// 0xbbc0600
	void BlueprintInitializeAnimation();// 0xbbc0600
	void BlueprintBeginPlay();// 0xbbc0600

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 16]
	FName[] BoneNames;//[Offset: 0x10, Size: 16]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 8]
	FName SnapshotName;//[Offset: 0x28, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 16]
	float SequenceLength;//[Offset: 0x90, Size: 4]
	float RateScale;//[Offset: 0x94, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 16]
	float GetPlayLength();// 0xb9e9898

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 16]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 4]
	FName NotifyName;//[Offset: 0x40, Size: 8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 8]
	float Duration;//[Offset: 0x58, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 48]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 8]
	int SlotIndex;//[Offset: 0x10, Size: 4]
	int SegmentIndex;//[Offset: 0x14, Size: 4]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 4]
	float SegmentLength;//[Offset: 0x20, Size: 4]
	float LinkValue;//[Offset: 0x24, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xbbc0600
	FString GetNotifyName();// 0xd7dc65c

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0xbbc0600
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0xbbc0600
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0xbbc0600
	FString GetNotifyName();// 0xd7dc58c

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 48]
	float BlendInTime;//[Offset: 0xd8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 48]
	float BlendOutTime;//[Offset: 0x110, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 4]
	FName SyncGroup;//[Offset: 0x118, Size: 8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 32]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 16]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 16]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 16]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 16]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 16]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 40]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 8]
	float GetDefaultBlendOutTime();// 0xd7d86cc

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 8]
	float BlendTime;//[Offset: 0x8, Size: 4]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 128]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0xb9f3244

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0xd801b2c
	void GetTimeRange(out float MinTime, out float MaxTime);// 0xd801a28

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 16]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 96]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 8]
	float StartTime;//[Offset: 0x38, Size: 4]
	FName NextSectionName;//[Offset: 0x3c, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 16]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 8]
	float StartPos;//[Offset: 0x8, Size: 4]
	float AnimStartTime;//[Offset: 0xc, Size: 4]
	float AnimEndTime;//[Offset: 0x10, Size: 4]
	float AnimPlayRate;//[Offset: 0x14, Size: 4]
	int LoopingCount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 8]
	float DisplayTime;//[Offset: 0x38, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 16]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 128]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 12]
	int CurveTypeFlags;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 16]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 16]
	GUID VirtualBoneGuid;//[Offset: 0x170, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 16]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 80]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 16]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 16]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	FName BoneName;//[Offset: 0x30, Size: 8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 12]
	Vector RelativeScale;//[Offset: 0x50, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0xd8e6d90
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0xd8e6cdc

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 16]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 16]
	float BlendScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 16]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 80]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 4]
	float SavedPlayRate;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 80]
	void SetNumSubsteps(int NumSubsteps);// 0xa9ca9a4
	void SetNumIterations(int NumIterations);// 0xa9caa54
	void SetAnimDriveSpringStiffness(float InStiffness);// 0xa9cabd8
	void PhysicsAssetUpdated();// 0xa9caca4
	float GetSimulationTime();// 0xa9ca8fc
	int GetNumSubsteps();// 0xa9ca918
	int GetNumKinematicParticles();// 0xa9ca96c
	int GetNumIterations();// 0xa9ca934
	int GetNumDynamicParticles();// 0xa9ca950
	int GetNumCloths();// 0xa9ca988
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0xa9ca840
	void EnableGravityOverride(out const Vector InVector);// 0xa9cab20
	void DisableGravityOverride();// 0xa9cab04
	void ClothConfigUpdated();// 0xa9cac88

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 16]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 16]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 16]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x160, Size: 8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 16]
	MorphTarget*[] MorphTargets;//[Offset: 0x188, Size: 16]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x310, Size: 8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x318, Size: 16]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x328, Size: 48]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x368, Size: 16]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x388, Size: 16]
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0xd8ddae4
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0xd8dda00
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0xd8dd91c
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0xd8dd874
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0xd8dd750
	int NumSockets();// 0xd8dd71c
	FString[] K2_GetAllMorphTargetNames();// 0xd8dd648
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0xd8dd550
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0xd8dd4a0
	Skeleton* GetSkeleton();// 0xd8dd484
	PhysicsAsset* GetShadowPhysicsAsset();// 0xd8dd468
	PhysicsAsset* GetPhysicsAsset();// 0xd8dd44c
	NodeMappingContainer*[] GetNodeMappingData();// 0xd8dd410
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0xd8dd360
	MorphTarget*[] GetMorphTargets();// 0xd8dd324
	ClothingAssetBase*[] GetMeshClothingAssets();// 0xd8dd2e8
	SkeletalMaterial[] GetMaterials();// 0xd8dd2ac
	SkeletalMeshLODSettings* GetLODSettings();// 0xd8dd294
	BoxSphereBounds GetImportedBounds();// 0xd8dd248
	Object* GetDefaultAnimatingRig();// 0xd8dd16c
	BoxSphereBounds GetBounds();// 0xd8dd120
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0xd8dcf60
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0xd8dce64
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0xd8dcdb4

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 16]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 20]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 60]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 16]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 16]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 16]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 4]
	float ThresholdUV;//[Offset: 0xc, Size: 4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 4]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 4]
	float NormalsThreshold;//[Offset: 0x24, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 16]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 8]
	int RefFrameIndex;//[Offset: 0x160, Size: 4]
	FName RetargetSource;//[Offset: 0x164, Size: 8]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 16]
	enum Interpolation;//[Offset: 0x180, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 16]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 16]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 16]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 16]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 16]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 16]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 8]
	StringCurve StringCurve;//[Offset: 0x8, Size: 136]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 16]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 16]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 4]
	FString Value;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 8]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 128]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 16]
	int DefaultValue;//[Offset: 0x78, Size: 4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 4]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 8]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 128]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 1]
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 16]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 4]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 16]
	GUID AssetGuid;//[Offset: 0x38, Size: 16]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 16]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 16]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 16]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 28]
	enum SolverType;//[Offset: 0x7c, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 16]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x290, Size: 16]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 36]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 448]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e8, Size: 16]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f8, Size: 268]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 8]
	Vector Pos1;//[Offset: 0x30, Size: 12]
	Vector PriAxis1;//[Offset: 0x3c, Size: 12]
	Vector SecAxis1;//[Offset: 0x48, Size: 12]
	Vector Pos2;//[Offset: 0x54, Size: 12]
	Vector PriAxis2;//[Offset: 0x60, Size: 12]
	Vector SecAxis2;//[Offset: 0x6c, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 268]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 4]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 4]
	float AngularBreakThreshold;//[Offset: 0x14, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x18, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x34, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x54, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x70, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xbc, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 268]
	FName ProfileName;//[Offset: 0x10c, Size: 8]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 4]
	int SolverIterations;//[Offset: 0x4, Size: 4]
	int JointIterations;//[Offset: 0x8, Size: 4]
	int CollisionIterations;//[Offset: 0xc, Size: 4]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 4]
	int JointPushOutIterations;//[Offset: 0x14, Size: 4]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 80]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 80]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 80]
	Object* SourceAsset;//[Offset: 0x118, Size: 40]
	Object* TargetAsset;//[Offset: 0x140, Size: 40]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 8]
	Transform Transform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 16]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 32]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 8]
	int LODIndex;//[Offset: 0x8, Size: 4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 16]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 16]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 16]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 16]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 8]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 16]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 16]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 60]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 8]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 8]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 16]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 16]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 16]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	GUID BlueprintGuid;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 16]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 16]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 72]
	FName AttachToName;//[Offset: 0x80, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 16]
	GUID VariableGuid;//[Offset: 0xc0, Size: 16]
	FName InternalVariableName;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 16]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 4]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 16]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 16]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 16]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 16]
	GUID TimelineGuid;//[Offset: 0x80, Size: 16]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 1]
	FName VariableName;//[Offset: 0x94, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 8]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 8]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 128]
	Vector GetVectorValue(float InTime);// 0xd803184

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 128]
	float AdjustHue;//[Offset: 0x230, Size: 4]
	float AdjustSaturation;//[Offset: 0x234, Size: 4]
	float AdjustBrightness;//[Offset: 0x238, Size: 4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 4]
	float AdjustVibrance;//[Offset: 0x240, Size: 4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 4]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0xd802aac
	LinearColor GetLinearColorValue(float InTime);// 0xd8029f0
	LinearColor GetClampedLinearColorValue(float InTime);// 0xd802934

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 16]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 16]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 72]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 8]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	GUID AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 16]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 8]
	float GravityScale;//[Offset: 0x150, Size: 4]
	float MaxStepHeight;//[Offset: 0x154, Size: 4]
	float JumpZVelocity;//[Offset: 0x158, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 4]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 4]
	float AirControl;//[Offset: 0x1c4, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 4]
	float Buoyancy;//[Offset: 0x1d8, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 12]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 4]
	float OutofWaterZ;//[Offset: 0x204, Size: 4]
	float Mass;//[Offset: 0x208, Size: 4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 4]
	float PushForceFactor;//[Offset: 0x214, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 4]
	float MinTouchForce;//[Offset: 0x220, Size: 4]
	float MaxTouchForce;//[Offset: 0x224, Size: 4]
	float RepulsionForce;//[Offset: 0x228, Size: 4]
	Vector Acceleration;//[Offset: 0x22c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 16]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 12]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 12]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 4]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 148]
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 1]
	byte GroundMovementMode;//[Offset: 0x386, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 12]
	int AvoidanceUID;//[Offset: 0x3ac, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 48]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 56]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 56]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 12]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0xd7fc8e0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0xd7fc838
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0xd7fc748
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xd7fc694
	void SetGroupsToIgnore(int GroupFlags);// 0xd7fc5ec
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xd7fc538
	void SetGroupsToAvoid(int GroupFlags);// 0xd7fc490
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xd7fc3dc
	void SetAvoidanceGroup(int GroupFlags);// 0xd7fc334
	void SetAvoidanceEnabled(bool bEnable);// 0xd7fc284
	float K2_GetWalkableFloorZ();// 0xd7fc250
	float K2_GetWalkableFloorAngle();// 0xd7fc21c
	float K2_GetModifiedMaxAcceleration();// 0xd7fc1e0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0xd7fc0d0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0xd7fbf04
	bool IsWalking();// 0xd7fbec4
	bool IsWalkable(out const HitResult Hit);// 0xd7fbde0
	float GetValidPerchRadius();// 0xd7fbdac
	float GetPerchRadiusThreshold();// 0xd7fbd78
	PrimitiveComponent* GetMovementBase();// 0xd7fbd44
	float GetMinAnalogSpeed();// 0xd7fbd08
	float GetMaxJumpHeightWithJumpTime();// 0xd7fbccc
	float GetMaxJumpHeight();// 0xd7fbc90
	float GetMaxBrakingDeceleration();// 0xd7fbc54
	float GetMaxAcceleration();// 0xd7fbc18
	Vector GetLastUpdateVelocity();// 0xd7fbbf0
	Rotator GetLastUpdateRotation();// 0xd7fbbb4
	Vector GetLastUpdateLocation();// 0xd7fbb90
	Vector GetImpartedMovementBaseVelocity();// 0xd7fbb50
	Vector GetCurrentAcceleration();// 0xd7fbb18
	Character* GetCharacterOwner();// 0xd7fbafc
	float GetAnalogInputModifier();// 0xd7fbac8
	void DisableMovement();// 0xd7fbaac
	void ClearAccumulatedForces();// 0xd7fba90
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xd7fb874
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0xd7fb700
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0xd7fb608
	void AddForce(Vector Force);// 0xd7fb558

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 8]
	Vector K2_GetInputVector();// 0xd8ae794
	bool IsMoveInputIgnored();// 0xd8ae754
	Vector GetPendingInputVector();// 0xd8ae71c
	Pawn* GetPawnOwner();// 0xd8ae6e8
	Vector GetLastInputVector();// 0xd8ae6b0
	Vector ConsumeInputVector();// 0xd8ae670
	void AddInputVector(Vector WorldVector, bool bForce);// 0xd8ae578

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 48]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 8]
	void StopMovementKeepPathing();// 0xd8a1948
	void StopActiveMovement();// 0xd8a192c
	bool IsSwimming();// 0xd8a18ec
	bool IsMovingOnGround();// 0xba1df68
	bool IsFlying();// 0xd8a18ac
	bool IsFalling();// 0xba1df28
	bool IsCrouching();// 0xd8a186c

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 8]
	Vector Velocity;//[Offset: 0xc4, Size: 12]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0xba1d494
	void SnapUpdatedComponentToPlane();// 0xd8a06d0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xba1d3e4
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xd8a0620
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xd8a0570
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xd8a0480
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xd8a03c8
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xd8a0318
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xd8a0268
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xd8a0070
	float K2_GetModifiedMaxSpeed();// 0xd8a0034
	float K2_GetMaxSpeedModifier();// 0xd89fff8
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xd89ff3c
	Vector GetPlaneConstraintOrigin();// 0xd89fefc
	Vector GetPlaneConstraintNormal();// 0xd89febc
	enum GetPlaneConstraintAxisSetting();// 0xd89fea0
	PhysicsVolume* GetPhysicsVolume();// 0xd89fe64
	float GetMaxSpeed();// 0xd89fe28
	float GetGravityZ();// 0xd89fdec
	Vector ConstrainNormalToPlane(Vector Normal);// 0xd89fd30
	Vector ConstrainLocationToPlane(Vector Location);// 0xd89fc74
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xd89fbb8

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0xc, Size: 136]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 24]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 4]
	int Priority;//[Offset: 0x25c, Size: 4]
	float FluidFriction;//[Offset: 0x260, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 1]
	Color BrushColor;//[Offset: 0x224, Size: 4]
	int PolyFlags;//[Offset: 0x228, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	Model* Brush;//[Offset: 0x230, Size: 8]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 16]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x440, Size: 8]
	BodySetup* BrushBodySetup;//[Offset: 0x448, Size: 8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x458, Size: 4]
	float CapsuleRadius;//[Offset: 0x45c, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0xb9f1610
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0xd7f82a0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0xd7f81ac
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xd7f809c
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xd7f7f94
	float GetUnscaledCapsuleRadius();// 0xd7f7f78
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0xd7f7f54
	float GetUnscaledCapsuleHalfHeight();// 0xd7f7f38
	float GetShapeScale();// 0xd7f7efc
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0xd7f7dc0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0xd7f7c98
	float GetScaledCapsuleRadius();// 0xd7f7c68
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0xd7f7c2c
	float GetScaledCapsuleHalfHeight();// 0xd7f7c08

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x440, Size: 8]
	class NavAreaBase* AreaClass;//[Offset: 0x448, Size: 8]
	Color ShapeColor;//[Offset: 0x450, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x454, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x454, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x454, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 152]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 8]
	float Position;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 56]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 12]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 4]
	float DamageFalloff;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 8]
	HUD* MyHUD;//[Offset: 0x2b0, Size: 8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 16]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 16]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 12]
	int ClientCap;//[Offset: 0x330, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 8]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 8]
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 16]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3d1, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 8]
	NetConnection* NetConnection;//[Offset: 0x418, Size: 8]
	float InputYawScale;//[Offset: 0x42c, Size: 4]
	float InputPitchScale;//[Offset: 0x430, Size: 4]
	float InputRollScale;//[Offset: 0x434, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 16]
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x454, Size: 4]
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	Vector SpawnLocation;//[Offset: 0x558, Size: 12]
	bool WasInputKeyJustReleased(Key Key);// 0xd8bd6d0
	bool WasInputKeyJustPressed(Key Key);// 0xd8bd540
	void ToggleSpeaking(bool bInSpeaking);// 0xd8bd488
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0xd8bd3a4
	void SwitchLevel(FString URL);// 0xd8bd2e8
	void StopHapticEffect(enum Hand);// 0xd8bd240
	void StartFire(byte FireModeNum);// 0xd8bd190
	void SetVirtualJoystickVisibility(bool bVisible);// 0xd8bd0d8
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0xd8bcf20
	void SetName(FString S);// 0xd8bce64
	void SetMouseLocation(const int X, const int Y);// 0xd8bcd80
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0xd8bcc98
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0xd8bcb74
	void SetDisableHaptics(bool bNewDisabled);// 0xd8bcabc
	void SetControllerLightColor(Color Color);// 0xd8bca18
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xd8bc830
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0xd8bc708
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0xd8bc620
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0xd8bc534
	void ServerViewPrevPlayer();// 0xd8bc4d8
	void ServerViewNextPlayer();// 0xd8bc47c
	void ServerVerifyViewTarget();// 0xd8bc420
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0xd8bc344
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0xba29010
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0xd8bc224
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0xd8bbf60
	void ServerToggleAILogging();// 0xd8bbf04
	void ServerShortTimeout();// 0xba28fb4
	void ServerSetSpectatorWaiting(bool bWaiting);// 0xd8bbe20
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0xd8bbcfc
	void ServerRestartPlayer();// 0xd8bbca0
	void ServerRecvClientInputFrame(int RecvClientInputFrame, const byte[] Data);// 0xd8bbba4
	void ServerPause();// 0xd8bbb48
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0xd8bba80
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0xd8bb7bc
	void ServerExecRPC(FString Msg);// 0xd8bb6d0
	void ServerExec(FString Msg);// 0xd8bb61c
	void ServerCheckClientPossessionReliable();// 0xd8bb5c0
	void ServerCheckClientPossession();// 0xd8bb564
	void ServerChangeName(FString S);// 0xd8bb478
	void ServerCamera(FName NewMode);// 0xd8bb3a0
	void ServerAcknowledgePossession(Pawn* P);// 0xd8bb2c8
	void SendToConsole(FString Command);// 0xd8bb20c
	void RestartLevel();// 0xd8bb1f0
	void ResetControllerLightColor();// 0xd8bb1dc
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0xd8bb08c
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0xd8baf1c
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0xd8bac6c
	void Pause();// 0xd8bac50
	void OnServerStartedVisualLogger(bool bIsLogging);// 0xd8bab98
	void LocalTravel(FString URL);// 0xd8baadc
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0xd8ba918
	bool IsInputKeyDown(Key Key);// 0xd8ba788
	void GetViewportSize(out int SizeX, out int SizeY);// 0xd8ba684
	SpectatorPawn* GetSpectatorPawn();// 0xd8ba668
	bool GetMousePosition(out float LocationX, out float LocationY);// 0xd8ba550
	Vector GetInputVectorKeyState(Key Key);// 0xd8ba3c0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0xd8ba224
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0xd8ba120
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0xd8b9f84
	float GetInputKeyTimeDown(Key Key);// 0xd8b9df8
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xd8b9cb4
	float GetInputAnalogKeyState(Key Key);// 0xd8b9b28
	HUD* GetHUD();// 0xd8b9af4
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xd8b992c
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xd8b9780
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xd8b95d4
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0xd8b944c
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xd8b92e0
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0xd8b9174
	Vector GetFocalLocation();// 0xd8b9134
	void FOV(float NewFOV);// 0xd8b9084
	void EnableCheats();// 0xd8b9068
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0xd8b8edc
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0xd8b8dcc
	void ConsoleKey(Key Key);// 0xd8b8c40
	void ClientWasKicked(const FText KickReason);// 0xd8b8b34
	void ClientVoiceHandshakeComplete();// 0xba28f98
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0xd8b8a78
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0xd8b88a8
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0xd8b86c4
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, GUID MapPackageGuid);// 0xd8b8540
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, GUID MapPackageGuid);// 0xd8b83c4
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0xd8b8248
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xba28eac
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xd8b8158
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0xd8b8060
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0xd8b7fb0
	void ClientStartOnlineSession();// 0xd8b7f94
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0xd8b7eb0
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum Playspace, Rotator UserPlaySpaceRot);// 0xba28d3c
	void ClientSpawnGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0xd8b7e00
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xd8b7d50
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0xd8b7c44
	void ClientSetSpectatorWaiting(bool bWaiting);// 0xd8b7b8c
	void ClientSetHUD(class HUD NewHUDClass);// 0xd8b7adc
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0xd8b79ac
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0xd8b7814
	void ClientSetCameraMode(FName NewCamMode);// 0xd8b7764
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0xd8b755c
	void ClientSetBlockOnAsyncLoading();// 0xd8b7540
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0xd8b7434
	void ClientReturnToMainMenu(FString ReturnReason);// 0xd8b7378
	void ClientRetryClientRestart(Pawn* NewPawn);// 0xd8b72c8
	void ClientRestart(Pawn* NewPawn);// 0xd8b7218
	void ClientReset();// 0xd8b71fc
	void ClientRepObjRef(Object* Object);// 0xd8b714c
	void ClientRecvServerAckFrame(int RecvClientInputFrame, int RecvServerFrameNumber);// 0xd8b7060
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0xd8b6eb4
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0xd8b6d3c
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0xd8b6bfc
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xd8b6a90
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xd8b6964
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0xba28c44
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0xd8b66a4
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0xd8b64c0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0xd8b6384
	void ClientIgnoreMoveInput(bool bIgnore);// 0xd8b62cc
	void ClientIgnoreLookInput(bool bIgnore);// 0xd8b6214
	void ClientGotoState(FName NewState);// 0xd8b6164
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0xd8b606c
	void ClientForceGarbageCollection();// 0xd8b6050
	void ClientFlushLevelStreaming();// 0xd8b603c
	void ClientEndOnlineSession();// 0xd8b6020
	void ClientEnableNetworkVoice(bool bEnable);// 0xd8b5f68
	void ClientCommitMapChange();// 0xd8b5f4c
	void ClientClearCameraLensEffects();// 0xd8b5f30
	void ClientCapBandwidth(int Cap);// 0xd8b5e80
	void ClientCancelPendingMapChange();// 0xd8b5e64
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0xd8b5d34
	void ClearAudioListenerOverride();// 0xd8b5d20
	void ClearAudioListenerAttenuationOverride();// 0xd8b5d0c
	bool CanRestartPlayer();// 0xd8b5ccc
	void Camera(FName NewMode);// 0xd8b5c1c
	void AddYawInput(float Val);// 0xd8b5b6c
	void AddRollInput(float Val);// 0xd8b5abc
	void AddPitchInput(float Val);// 0xd8b5a0c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0xd8b595c

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 40]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 16]
	MulticastInlineDelegateProperty OnVisibilityChanged;//[Size: 16]
	Margin Padding;//[Offset: 0x190, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 16]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 8]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 16]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 8]
	int Priority;//[Offset: 0x1e0, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 16]
	void UnregisterInputComponent();// 0xa7d2758
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xa7d3b30
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xa7d0c5c
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0xa7d3a88
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0xa7d39e0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xbbc0600
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0xa7d2794
	void StopListeningForAllInputActions();// 0xa7d2780
	void StopAnimationsAndLatentActions();// 0xa7d3d20
	void StopAnimation(const WidgetAnimation* InAnimation);// 0xa7d06d0
	void StopAllAnimations();// 0xa7d3184
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0xa7d4128
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0xa7d2c5c
	void SetPadding(Margin InPadding);// 0xa7d3564
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0xa7d3db0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0xa7d2d50
	void SetInputActionPriority(int NewPriority);// 0xa7d0628
	void SetInputActionBlocking(bool bShouldBlock);// 0xa7d25f4
	void SetForegroundColor(SlateColor InForegroundColor);// 0xa7d3610
	void SetDesiredSizeInViewport(Vector2D Size);// 0xa7d4084
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0xa7d37a8
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0xa7d2f30
	void SetAnchorsInViewport(Anchors Anchors);// 0xa7d3fd8
	void SetAlignmentInViewport(Vector2D Alignment);// 0xa7d3f34
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0xa7d2bb4
	void RemoveFromViewport();// 0xa7d4220
	void RegisterInputComponent();// 0xa7d276c
	void PreConstruct(bool IsDesignTime);// 0xbbc0600
	void PlaySound(SoundBase* SoundToPlay);// 0xa7d2a44
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xa7d32e8
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xa7d3198
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0xa7d0778
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0xa7d08c8
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0xa7d30d4
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xbbc0600
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xbbc0600
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0xbbc0600
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xbbc0600
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0xbbc0600
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0xbbc0600
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xbbc0600
	void OnPaint(out PaintContext Context);// 0xbbc0600
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0xbbc0600
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	void OnMouseCaptureLost();// 0xbbc0600
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0xbbc0600
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0xbbc0600
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xbbc0600
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0xbbc0600
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0xbbc0600
	void OnInitialized();// 0xbbc0600
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0xbbc0600
	void OnFocusLost(FocusEvent InFocusEvent);// 0xbbc0600
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xbbc0600
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xbbc0600
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0xbbc0600
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0xbbc0600
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0xbbc0600
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0xbbc0600
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xa7d0bac
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xa7d0afc
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0xbbc0600
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0xbbc0600
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0xa7d2888
	bool IsPlayingAnimation();// 0xa7d2a20
	bool IsListeningForInputAction(FName ActionName);// 0xa7d26a4
	bool IsInViewport();// 0xa7d3e58
	bool IsInteractable();// 0xbbc0600
	bool IsAnyAnimationPlaying();// 0xa7d2e44
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0xa7d2b00
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0xa7d2e7c
	Pawn* GetOwningPlayerPawn();// 0xa7d3d7c
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0xa7d3d48
	bool GetIsVisible();// 0xa7d3e90
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0xa7d3024
	Anchors GetAnchorsInViewport();// 0xa7d3efc
	Vector2D GetAlignmentInViewport();// 0xa7d3ec8
	void FlushAnimations();// 0xa7d2aec
	void Destruct();// 0xbbc0600
	void Construct();// 0xbbc0600
	void CancelLatentActions();// 0xa7d3d34
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0xa7d3c28
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0xa7d0d54
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0xa7d3850
	void AddToViewport(int ZOrder);// 0xa7d42e8
	bool AddToPlayerScreen(int ZOrder);// 0xa7d4234

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 16]
	FText ToolTipText;//[Offset: 0x40, Size: 24]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte Cursor;//[Offset: 0xc1, Size: 1]
	enum Clipping;//[Offset: 0xc2, Size: 1]
	enum Visibility;//[Offset: 0xc3, Size: 1]
	float RenderOpacity;//[Offset: 0xc4, Size: 4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 16]
	void SetVisibility(enum InVisibility);// 0xa7dbe90
	void SetUserFocus(PlayerController* PlayerController);// 0xa7dda74
	void SetToolTipText(out const FText InToolTipText);// 0xa7de220
	void SetToolTip(Widget* Widget);// 0xa7de178
	void SetRenderTranslation(Vector2D Translation);// 0xa7de4c4
	void SetRenderTransformPivot(Vector2D Pivot);// 0xa7de420
	void SetRenderTransformAngle(float Angle);// 0xa7de59c
	void SetRenderTransform(WidgetTransform InTransform);// 0xa7de6e8
	void SetRenderShear(Vector2D Shear);// 0xa7dbf78
	void SetRenderScale(Vector2D Scale);// 0xa7de644
	void SetRenderOpacity(float InOpacity);// 0xa7dbde8
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0xa7dd5fc
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0xa7dd40c
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0xa7dd504
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0xa7dd6f0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0xa7dd7e4
	void SetKeyboardFocus();// 0xa7ddd08
	void SetIsEnabled(bool bInIsEnabled);// 0xa7de330
	void SetFocus();// 0xa7ddb1c
	void SetCursor(byte InCursor);// 0xa7de0d0
	void SetClipping(enum InClipping);// 0xa7ddf78
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0xa7dd924
	void ResetCursor();// 0xa7de0bc
	void RemoveFromParent();// 0xa7dd3bc
	EventReply OnReply__DelegateSignature();// 0xbbc0600
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0xbbc0600
	bool IsVisible();// 0xa7dbf40
	bool IsHovered();// 0xa7dde88
	void InvalidateLayoutAndVolatility();// 0xa7dda4c
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0xa7ddb30
	bool HasUserFocus(PlayerController* PlayerController);// 0xa7ddc54
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0xa7ddd1c
	bool HasMouseCapture();// 0xa7dde18
	bool HasKeyboardFocus();// 0xa7dde50
	bool HasFocusedDescendants();// 0xa7ddbe4
	bool HasAnyUserFocus();// 0xa7ddc1c
	Widget* GetWidget__DelegateSignature();// 0xbbc0600
	enum GetVisibility();// 0xa7de088
	Geometry GetTickSpaceGeometry();// 0xa7dd34c
	FText GetText__DelegateSignature();// 0xbbc0600
	enum GetSlateVisibility__DelegateSignature();// 0xbbc0600
	SlateColor GetSlateColor__DelegateSignature();// 0xbbc0600
	SlateBrush GetSlateBrush__DelegateSignature();// 0xbbc0600
	float GetRenderTransformAngle();// 0xa7de568
	float GetRenderOpacity();// 0xa7de054
	PanelWidget* GetParent();// 0xa7dd3d8
	Geometry GetPaintSpaceGeometry();// 0xa7dd314
	PlayerController* GetOwningPlayer();// 0xa7dd2a4
	LocalPlayer* GetOwningLocalPlayer();// 0xa7dd268
	byte GetMouseCursor__DelegateSignature();// 0xbbc0600
	LinearColor GetLinearColor__DelegateSignature();// 0xbbc0600
	bool GetIsEnabled();// 0xa7de3e8
	int GetInt32__DelegateSignature();// 0xbbc0600
	GameInstance* GetGameInstance();// 0xa7dd2e0
	float GetFloat__DelegateSignature();// 0xbbc0600
	Vector2D GetDesiredSize();// 0xa7dda18
	enum GetClipping();// 0xa7de020
	enum GetCheckBoxState__DelegateSignature();// 0xbbc0600
	Geometry GetCachedGeometry();// 0xa7dd384
	bool GetBool__DelegateSignature();// 0xbbc0600
	FText GetAccessibleText();// 0xa7dd198
	FText GetAccessibleSummaryText();// 0xa7dd0c8
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0xbbc0600
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0xbbc0600
	void ForceVolatile(bool bForce);// 0xa7ddec8
	void ForceLayoutPrepass();// 0xa7dda60

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 8]
	Widget* Content;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 16]
	bool RemoveChildAt(int Index);// 0xa7bf5b4
	bool RemoveChild(Widget* Content);// 0xa7bf450
	bool HasChild(Widget* Content);// 0xa7bf668
	bool HasAnyChildren();// 0xa7bf418
	int GetChildrenCount();// 0xa7bf928
	int GetChildIndex(const Widget* Content);// 0xa7bf71c
	Widget* GetChildAt(int Index);// 0xa7bf878
	Widget*[] GetAllChildren();// 0xa7bf7cc
	void ClearChildren();// 0xa7bf3fc
	PanelSlot* AddChild(Widget* Content);// 0xa7bf504

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: EventReply

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 8]
	Margin Margin;//[Offset: 0x10, Size: 16]
	SlateColor TintColor;//[Offset: 0x20, Size: 40]
	Object* ResourceObject;//[Offset: 0x48, Size: 8]
	FName ResourceName;//[Offset: 0x50, Size: 8]
	Box2D UVRegion;//[Offset: 0x58, Size: 20]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]

--------------------------------
Class: Box2D
	Vector2D min;//[Offset: 0x0, Size: 8]
	Vector2D max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 16]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 4]
	World* World;//[Offset: 0x70, Size: 8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 8]
	void SSSwapControllers();// 0xd8285c8
	void ShowTitleSafeArea();// 0xd8285ac
	void SetConsoleTarget(int PlayerIndex);// 0xd8284fc

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 16]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 8]
	class Object* WithinClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 16]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 16]
	MulticastInlineDelegateProperty OnPawnControllerChangedDelegates;//[Size: 16]
	void ReceiveShutdown();// 0xbbc0600
	void ReceiveInit();// 0xbbc0600
	void HandleTravelError(byte FailureType);// 0xbbc0600
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xbbc0600
	void DebugRemovePlayer(int ControllerId);// 0xd811bf8
	void DebugCreatePlayer(int ControllerId);// 0xd811b48

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 24]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 16]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 24]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 16]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x418, Size: 8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x428, Size: 232]
	void SetUserTag(FName InUserTag);// 0xa7d16fc
	FName GetUserTag();// 0xa7d17a4

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 16]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString DisplayLabel;//[Offset: 0x80, Size: 16]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xa7df810
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xa7dc128
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0xa7df768
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0xa7df6c0
	float GetStartTime();// 0xa7dfa34
	float GetEndTime();// 0xa7dfa00
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0xa7df908
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0xa7dc220

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 8]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0xa4506d8
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0xa4507b4

--------------------------------
Class: MovieSceneSignedObject.Object
	GUID Signature;//[Offset: 0x28, Size: 16]

--------------------------------
Class: MovieSceneObjectBindingID
	GUID GUID;//[Offset: 0x0, Size: 16]
	int SequenceID;//[Offset: 0x10, Size: 4]
	int ResolveParentIndex;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 16]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 16]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 16]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 80]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 16]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 16]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 16]
	FrameRate TickResolution;//[Offset: 0x108, Size: 8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 8]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 24]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 16]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 48]
	FName[] Tags;//[Offset: 0x30, Size: 16]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	GUID GUID;//[Offset: 0x44, Size: 16]
	FString Name;//[Offset: 0x58, Size: 16]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 8]
	GUID[] ChildPossessables;//[Offset: 0x70, Size: 16]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 16]
	GUID GUID;//[Offset: 0x10, Size: 16]
	FString Name;//[Offset: 0x20, Size: 16]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 8]
	GUID ParentGuid;//[Offset: 0x38, Size: 16]

--------------------------------
Class: MovieSceneBinding
	GUID ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 16]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	GUID EvaluationFieldGuid;//[Offset: 0x58, Size: 16]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x68, Size: 16]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 16]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 4]
	enum Flags;//[Offset: 0x1c, Size: 1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 2]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 56]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 16]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 4]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 4]
	int RowIndex;//[Offset: 0xa8, Size: 4]
	int OverlapPriority;//[Offset: 0xac, Size: 4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	float StartTime;//[Offset: 0xb4, Size: 4]
	float EndTime;//[Offset: 0xb8, Size: 4]
	float PrerollTime;//[Offset: 0xbc, Size: 4]
	float PostrollTime;//[Offset: 0xc0, Size: 4]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 2]
	void SetRowIndex(int NewRowIndex);// 0xa44fc2c
	void SetPreRollFrames(int InPreRollFrames);// 0xa44f8ec
	void SetPostRollFrames(int InPostRollFrames);// 0xa44f81c
	void SetOverlapPriority(int NewPriority);// 0xa44fb6c
	void SetIsLocked(bool bInIsLocked);// 0xa44f9c0
	void SetIsActive(bool bInIsActive);// 0xa44fa98
	void SetCompletionMode(enum InCompletionMode);// 0xa44fd9c
	void SetBlendType(enum InBlendType);// 0xa44fcd0
	bool IsLocked();// 0xa44f9a0
	bool IsActive();// 0xa44fa78
	int GetRowIndex();// 0xa44fc10
	int GetPreRollFrames();// 0xa44f8d0
	int GetPostRollFrames();// 0xa44f800
	int GetOverlapPriority();// 0xa44fb50
	enum GetCompletionMode();// 0xa44fe40
	OptionalMovieSceneBlendType GetBlendType();// 0xa44fd80

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CompletionMode;//[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 4]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 4]
	interface class * EaseIn;//[Offset: 0x8, Size: 16]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 4]
	interface class * EaseOut;//[Offset: 0x20, Size: 16]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	FrameNumber Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 4]
	int Denominator;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 4]
	FString Label;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	GUID AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 352]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 280]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 240]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 48]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 16]
	GUID CompiledSignature;//[Offset: 0x3d0, Size: 16]
	GUID CompilerVersion;//[Offset: 0x3e0, Size: 16]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 80]
	GUID SequenceSignature;//[Offset: 0xa0, Size: 16]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 168]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationTrack
	GUID ObjectBindingID;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 8]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 16]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<GUID,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 80]
	<GUID,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 80]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 24]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 96]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 80]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 80]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 24]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 32]
	FrameRate TickResolution;//[Offset: 0x38, Size: 8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 16]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 16]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 16]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 16]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 16]
	int16 HierarchicalBias;//[Offset: 0x94, Size: 2]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 24]
	GUID SubSectionSignature;//[Offset: 0xb8, Size: 16]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 32]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 12]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	FrameTime Offset;//[Offset: 0x4, Size: 8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 4]
	float SubFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 12]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 4]
	FrameNumber End;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 96]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 96]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 16]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 16]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 16]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 12]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 8]
	uint32 EntityID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 16]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 4]
	enum Flags;//[Offset: 0x18, Size: 1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	GUID ObjectBindingID;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 16]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 16]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 16]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 16]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 4]
	int NumEvalPtrs;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 8]
	uint16 NumChildren;//[Offset: 0x8, Size: 2]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 2]
	enum Flags;//[Offset: 0x2, Size: 1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 16]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint16 SetupIndex;//[Offset: 0xc, Size: 2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 8]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 8]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 8]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 80]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 80]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 80]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 80]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 80]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x238, Size: 312]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 56]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 80]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 8]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 80]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 36]
	float Duration;//[Offset: 0x104, Size: 4]
	float MaxDistance;//[Offset: 0x108, Size: 4]
	float TotalSamples;//[Offset: 0x10c, Size: 4]
	float Priority;//[Offset: 0x110, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 8]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 16]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 16]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 16]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 128]
	SoundClass*[] ChildClasses;//[Offset: 0xa8, Size: 16]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb8, Size: 16]
	SoundClass* ParentClass;//[Offset: 0xc8, Size: 8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 4]
	float StereoBleed;//[Offset: 0x10, Size: 4]
	float LFEBleed;//[Offset: 0x14, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x30, Size: 64]
	byte OutputTarget;//[Offset: 0x70, Size: 1]
	enum LoadingBehavior;//[Offset: 0x71, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x78, Size: 8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 16]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 16]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 16]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 16]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 4]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 16]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 4]
	enum GainMode;//[Offset: 0x68, Size: 1]
	float OutputVolume;//[Offset: 0x6c, Size: 4]
	float WetLevel;//[Offset: 0x70, Size: 4]
	float DryLevel;//[Offset: 0x74, Size: 4]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 16]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0xd8f044c
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0xd8f0234
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0xd8f018c
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0xd8effa4
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0xd8efebc
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0xd8efe14
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0xd8efd2c
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0xd8efc1c
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0xd8ef918
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0xd8ef808

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 4]
	int StreamingPriority;//[Offset: 0x174, Size: 4]
	enum SampleRateQuality;//[Offset: 0x178, Size: 1]
	byte SoundGroup;//[Offset: 0x17a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x17c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 72]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 16]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 16]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 16]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 4]
	FString SpokenText;//[Offset: 0x240, Size: 16]
	float SubtitlePriority;//[Offset: 0x250, Size: 4]
	float Volume;//[Offset: 0x254, Size: 4]
	float Pitch;//[Offset: 0x258, Size: 4]
	int NumChannels;//[Offset: 0x25c, Size: 4]
	int SampleRate;//[Offset: 0x260, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 16]
	CurveTable* Curves;//[Offset: 0x280, Size: 8]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 8]

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 1]
	enum PitchRouting;//[Offset: 0x41, Size: 1]
	enum HighpassRouting;//[Offset: 0x42, Size: 1]
	enum LowpassRouting;//[Offset: 0x43, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 16]
	float TimeSec;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 4]
	float TimeSec;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 24]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 4]
	float QFactor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 64]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 16]
	float InitialDelay;//[Offset: 0x80, Size: 4]
	float FadeInTime;//[Offset: 0x84, Size: 4]
	float Duration;//[Offset: 0x88, Size: 4]
	float FadeOutTime;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 4]
	float Gain0;//[Offset: 0x14, Size: 4]
	float Bandwidth0;//[Offset: 0x18, Size: 4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 4]
	float Gain1;//[Offset: 0x20, Size: 4]
	float Bandwidth1;//[Offset: 0x24, Size: 4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 4]
	float Gain2;//[Offset: 0x2c, Size: 4]
	float Bandwidth2;//[Offset: 0x30, Size: 4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 4]
	float Gain3;//[Offset: 0x38, Size: 4]
	float Bandwidth3;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 4]
	float PitchAdjuster;//[Offset: 0xc, Size: 4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 36]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float RetriggerTime;//[Offset: 0x8, Size: 4]
	float VolumeScale;//[Offset: 0xc, Size: 4]
	enum VolumeScaleMode;//[Offset: 0x10, Size: 4]
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 4]
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 928]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 4]
	float StereoSpread;//[Offset: 0xc0, Size: 4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 136]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 136]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 136]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 16]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 136]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 48]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 4]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 12]
	float ConeOffset;//[Offset: 0x20, Size: 4]
	float FalloffDistance;//[Offset: 0x24, Size: 4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 136]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 128]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 136]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 16]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 16]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 16]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	enum SendStage;//[Offset: 0x1, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 8]
	float SendLevel;//[Offset: 0x10, Size: 4]
	float MinSendLevel;//[Offset: 0x14, Size: 4]
	float MaxSendLevel;//[Offset: 0x18, Size: 4]
	float MinSendDistance;//[Offset: 0x1c, Size: 4]
	float MaxSendDistance;//[Offset: 0x20, Size: 4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 136]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 16]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 8]
	float SendLevel;//[Offset: 0x18, Size: 4]
	float MinSendLevel;//[Offset: 0x1c, Size: 4]
	float MaxSendLevel;//[Offset: 0x20, Size: 4]
	float MinSendDistance;//[Offset: 0x24, Size: 4]
	float MaxSendDistance;//[Offset: 0x28, Size: 4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 136]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x374, Size: 1]
	float SourceBusDuration;//[Offset: 0x378, Size: 4]
	AudioBus* AudioBus;//[Offset: 0x380, Size: 8]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 1]
	bool bIsAutomatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 16]
	Object* Payload;//[Offset: 0x38, Size: 8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 8]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 8]
	MulticastInlineDelegateProperty OnDrop;//[Size: 16]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 16]
	MulticastInlineDelegateProperty OnDragged;//[Size: 16]
	void Drop(out const PointerEvent PointerEvent);// 0xa7b0820
	void Dragged(out const PointerEvent PointerEvent);// 0xa7b0558
	void DragCancelled(out const PointerEvent PointerEvent);// 0xa7b06bc

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 36]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 36]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 36]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 36]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 36]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 36]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 8]
	Widget* Widget;//[Offset: 0xc, Size: 8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 16]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 40]
	FName DestinationProperty;//[Offset: 0x58, Size: 8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 16]
	Function* CachedFunction;//[Offset: 0x18, Size: 8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0x10, Size: 8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 8]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 16]
	bool WasControllerKeyJustReleased(Key Key);// 0xd82a05c
	bool WasControllerKeyJustPressed(Key Key);// 0xd829ecc
	bool IsControllerKeyDown(Key Key);// 0xd829d3c
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0xd829ba0
	Vector GetControllerVectorKeyState(Key Key);// 0xd829a10
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0xd82990c
	float GetControllerKeyTimeDown(Key Key);// 0xd829780
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0xd82963c
	float GetControllerAnalogKeyState(Key Key);// 0xd8294b0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 16]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 16]
	void SetMouseSensitivity(const float Sensitivity);// 0xd8c7bb8
	void SetBind(FName BindName, FString Command);// 0xd8c7ac4
	void InvertAxisKey(const Key AxisKey);// 0xd8c7940
	void InvertAxis(const FName AxisName);// 0xd8c7898
	void ClearSmoothing();// 0xd8c7884

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 24]
	FString Command;//[Offset: 0x18, Size: 16]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 8]
	delegate Delegate;//[Offset: 0x8, Size: 16]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 8]
	float DefaultFOV;//[Offset: 0x238, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 1520]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x880, Size: 1520]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1536]
	TViewTarget PendingViewTarget;//[Offset: 0x1470, Size: 1536]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1aa0, Size: 1520]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2090, Size: 1520]
	CameraModifier*[] ModifierList;//[Offset: 0x2680, Size: 16]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2690, Size: 16]
	float FreeCamDistance;//[Offset: 0x26a0, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x26a4, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x26b0, Size: 12]
	MulticastInlineDelegateProperty OnAudioFadeChangeEvent;//[Size: 16]
	interface class[] CameraLensEffects;//[Offset: 0x26e0, Size: 16]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x26f0, Size: 8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x26f8, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2738, Size: 16]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2758, Size: 16]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2768, Size: 16]
	CameraActor* AnimCameraActor;//[Offset: 0x2778, Size: 8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2780, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2780, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2780, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2780, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2781, Size: 1]
	float ViewPitchMin;//[Offset: 0x2784, Size: 4]
	float ViewPitchMax;//[Offset: 0x2788, Size: 4]
	float ViewYawMin;//[Offset: 0x278c, Size: 4]
	float ViewYawMax;//[Offset: 0x2790, Size: 4]
	float ViewRollMin;//[Offset: 0x2794, Size: 4]
	float ViewRollMax;//[Offset: 0x2798, Size: 4]
	float ServerUpdateCameraTimeout;//[Offset: 0x27a0, Size: 4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0xd8bfb6c
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0xd8bfa74
	void StopCameraFade();// 0xd8bfa58
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0xd8bf960
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xd8bf82c
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0xd8bf734
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0xd8bf63c
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0xd8bf544
	void StopAllCameraShakes(bool bImmediately);// 0xd8bf48c
	void StopAllCameraAnims(bool bImmediate);// 0xd8bf3d4
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum Playspace, Rotator UserPlaySpaceRot);// 0xd8bf220
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum Playspace, Rotator UserPlaySpaceRot);// 0xd8bf0a8
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0xd8beeac
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0xd8bed74
	void SetGameCameraCutThisFrame();// 0xd8bed50
	void RemoveGenericCameraLensEffect(interface class Emitter);// 0xd8bec80
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0xd8bebc4
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0xd8beb14
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum Playspace, Rotator UserPlaySpaceRot);// 0xd8be80c
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0xd8be68c
	void OnPhotographySessionStart();// 0xd8be670
	void OnPhotographySessionEnd();// 0xd8be654
	void OnPhotographyMultiPartCaptureStart();// 0xd8be638
	void OnPhotographyMultiPartCaptureEnd();// 0xd8be61c
	PlayerController* GetOwningPlayerController();// 0xd8be5e0
	float GetFOVAngle();// 0xd8be5a4
	Rotator GetCameraRotation();// 0xba29218
	Vector GetCameraLocation();// 0xba291d8
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0xd8be4ec
	void ClearCameraLensEffects();// 0xd8be4d0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0xbbc0600
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0xd8be418
	interface class AddGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0xd8be358
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xd8be2a0

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1504]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	float FOV;//[Offset: 0x18, Size: 4]
	float DesiredFOV;//[Offset: 0x1c, Size: 4]
	float OrthoWidth;//[Offset: 0x20, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 4]
	float AspectRatio;//[Offset: 0x2c, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	byte ProjectionMode;//[Offset: 0x31, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1360]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	byte BloomMethod;//[Offset: 0x17, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x18, Size: 1]
	float WhiteTemp;//[Offset: 0x1c, Size: 4]
	float WhiteTint;//[Offset: 0x20, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 16]
	Vector4 ColorGain;//[Offset: 0x60, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 16]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 4]
	float BlueCorrection;//[Offset: 0x178, Size: 4]
	float ExpandGamut;//[Offset: 0x17c, Size: 4]
	float ToneCurveAmount;//[Offset: 0x180, Size: 4]
	float FilmSlope;//[Offset: 0x184, Size: 4]
	float FilmToe;//[Offset: 0x188, Size: 4]
	float FilmShoulder;//[Offset: 0x18c, Size: 4]
	float FilmBlackClip;//[Offset: 0x190, Size: 4]
	float FilmWhiteClip;//[Offset: 0x194, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 4]
	float FilmSaturation;//[Offset: 0x1c0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 16]
	float FilmContrast;//[Offset: 0x1f4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 4]
	float FilmDynamicRange;//[Offset: 0x200, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 4]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 4]
	float BloomIntensity;//[Offset: 0x21c, Size: 4]
	float BloomThreshold;//[Offset: 0x220, Size: 4]
	float BloomSizeScale;//[Offset: 0x224, Size: 4]
	float Bloom1Size;//[Offset: 0x228, Size: 4]
	float Bloom2Size;//[Offset: 0x22c, Size: 4]
	float Bloom3Size;//[Offset: 0x230, Size: 4]
	float Bloom4Size;//[Offset: 0x234, Size: 4]
	float Bloom5Size;//[Offset: 0x238, Size: 4]
	float Bloom6Size;//[Offset: 0x23c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 16]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 8]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 16]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 8]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 4]
	float CameraISO;//[Offset: 0x304, Size: 4]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 4]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 4]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 4]
	float AutoExposureBias;//[Offset: 0x314, Size: 4]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 8]
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 8]
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 4]
	float HistogramLogMin;//[Offset: 0x348, Size: 4]
	float HistogramLogMax;//[Offset: 0x34c, Size: 4]
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 4]
	float LensFlareIntensity;//[Offset: 0x354, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x368, Size: 4]
	float LensFlareThreshold;//[Offset: 0x36c, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 8]
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 16]
	float VignetteIntensity;//[Offset: 0x3f8, Size: 4]
	float GrainJitter;//[Offset: 0x3fc, Size: 4]
	float GrainIntensity;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x440, Size: 4]
	float RayTracingAOIntensity;//[Offset: 0x444, Size: 4]
	float RayTracingAORadius;//[Offset: 0x448, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x44c, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x45c, Size: 4]
	enum RayTracingGIType;//[Offset: 0x460, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x464, Size: 4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x468, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x46c, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x470, Size: 8]
	float DepthOfFieldSensorWidth;//[Offset: 0x478, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x480, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x484, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x488, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x490, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x494, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x498, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4a8, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4ac, Size: 4]
	float MotionBlurMax;//[Offset: 0x4b0, Size: 4]
	int MotionBlurTargetFPS;//[Offset: 0x4b4, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 4]
	float LPVSize;//[Offset: 0x4c4, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 4]
	enum ReflectionsType;//[Offset: 0x4f0, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f4, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f8, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4fc, Size: 4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x500, Size: 4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x504, Size: 4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x508, Size: 4]
	enum RayTracingReflectionsShadows;//[Offset: 0x50c, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50d, Size: 1]
	enum TranslucencyType;//[Offset: 0x50e, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x510, Size: 4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x514, Size: 4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x518, Size: 4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x51c, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x520, Size: 4]
	int PathTracingSamplesPerPixel;//[Offset: 0x524, Size: 4]
	float LPVFadeRange;//[Offset: 0x528, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x52c, Size: 4]
	float ScreenPercentage;//[Offset: 0x530, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x538, Size: 16]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 16]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1504]
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 8]

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ShakeScale;//[Offset: 0x2c, Size: 4]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 8]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 8]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0xd7f0fe0
	CameraShakePattern* GetRootShakePattern();// 0xd7f0fc4

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x29, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 8]
	float AlphaInTime;//[Offset: 0x38, Size: 4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 4]
	float Alpha;//[Offset: 0x40, Size: 4]
	bool IsDisabled();// 0xd7f227c
	Actor* GetViewTarget();// 0xd7f2240
	void EnableModifier();// 0xd7f2224
	void DisableModifier(bool bImmediate);// 0xd7f216c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0xbbc0600
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0xbbc0600

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 8]
	float PlayRate;//[Offset: 0x50, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 8]
	enum Playspace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0xd7f0298
	void SetScale(float NewDuration);// 0xd7f01f0
	void SetDuration(float NewDuration);// 0xd7f0148

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 8]
	float AnimLength;//[Offset: 0x30, Size: 4]
	Box BoundingBox;//[Offset: 0x34, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1360]
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 16]
	FName GroupName;//[Offset: 0x40, Size: 8]
	Color GroupColor;//[Offset: 0x48, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 16]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 8]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 16]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 8]
	Actor* GroupActor;//[Offset: 0x30, Size: 8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 16]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 24]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 24]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 16]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 8]
	float LinCurveTension;//[Offset: 0xb8, Size: 4]
	float AngCurveTension;//[Offset: 0xbc, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc1, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 16]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 12]
	Rotator ResetRotation;//[Offset: 0x34, Size: 12]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f1, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x1f4, Size: 4]
	float OuterAttenuationRadius;//[Offset: 0x1f8, Size: 4]
	class CameraShakeBase* CameraShake;//[Offset: 0x200, Size: 8]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0xd7f138c
	void StopAllCameraShakes(bool bImmediately);// 0xd7f12dc
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum Playspace, Rotator UserPlaySpaceRot);// 0xd7f1174
	void Start();// 0xd7f1160
	float GetAttenuationFactor(out const Vector Location);// 0xd7f10a8

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 48]
	float BaseFOV;//[Offset: 0x2c0, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class Actor[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 16]
	float DistFromCamera;//[Offset: 0x2d8, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 16]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 16]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 16]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 16]
	void ToggleActive();// 0xd808634
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xd80854c
	void SetTemplate(ParticleSystem* NewTemplate);// 0xd80849c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xd8083b8
	void SetFloatParameter(FName ParameterName, float Param);// 0xd8082d0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xd8081e8
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xd808104
	void OnRep_bCurrentlyActive();// 0xd8080e8
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0xb9f7330
	bool IsActive();// 0xd8080b0
	void Deactivate();// 0xd80809c
	void Activate();// 0xd808088

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 4]
	float WarmupTime;//[Offset: 0x38, Size: 4]
	float WarmupTickRate;//[Offset: 0x3c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 16]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 4]
	float MacroUVRadius;//[Offset: 0x64, Size: 4]
	float[] LODDistances;//[Offset: 0x68, Size: 16]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 16]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 4]
	float Delay;//[Offset: 0xa8, Size: 4]
	float DelayLow;//[Offset: 0xac, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 12]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 16]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 16]
	bool ContainsEmitterType(class Object TypeData);// 0xd8ac520

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 4]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 16]
	int PeakActiveParticles;//[Offset: 0x50, Size: 4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 16]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 16]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 16]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 16]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 16]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 12]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 48]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 16]
	float EmitterDelay;//[Offset: 0xa0, Size: 4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 4]
	float RandomImageTime;//[Offset: 0xb8, Size: 4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 12]
	float MacroUVRadius;//[Offset: 0xcc, Size: 4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 12]
	float AlphaThreshold;//[Offset: 0xe0, Size: 4]
	int EmitterLoops;//[Offset: 0xe4, Size: 4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 12]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 16]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 4]
	float MaxValue;//[Offset: 0x24, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 32]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 4]
	float TimeBias;//[Offset: 0x4, Size: 4]
	float[] Values;//[Offset: 0x8, Size: 16]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 48]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 48]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 16]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 48]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 16]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 72]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 72]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 72]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 4]
	float MaxValue;//[Offset: 0x24, Size: 4]
	Vector MinValueVec;//[Offset: 0x28, Size: 12]
	Vector MaxValueVec;//[Offset: 0x34, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 1]
	FName EventName;//[Offset: 0x2c, Size: 8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x440, Size: 8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x448, Size: 16]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x458, Size: 16]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x469, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x469, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x469, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x46a, Size: 1]
	byte LODMethod;//[Offset: 0x475, Size: 1]
	enum RequiredSignificance;//[Offset: 0x476, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x478, Size: 16]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 16]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 16]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 16]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 16]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	Vector OldPosition;//[Offset: 0x4cc, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x4d8, Size: 12]
	float WarmupTime;//[Offset: 0x4e4, Size: 4]
	float WarmupTickRate;//[Offset: 0x4e8, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x4f0, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4f8, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x518, Size: 16]
	float CustomTimeDilation;//[Offset: 0x530, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x588, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x590, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x598, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x599, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x59a, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 16]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xd8abfb0
	void SetTemplate(ParticleSystem* NewTemplate);// 0xba269f4
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0xd8abecc
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0xd8abd9c
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0xd8abc6c
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0xd8abb3c
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0xd8aba0c
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0xd8ab8dc
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0xd8ab7ac
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0xd8ab6bc
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0xd8ab580
	int GetNumActiveParticles();// 0xd8ab54c
	MaterialInterface* GetNamedMaterial(FName InName);// 0xd8ab494
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0xd8ab354
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0xd8ab210
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0xd8ab0d0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0xd8aaf90
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0xd8aae4c
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0xd8aad0c
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0xd8aac08
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0xd8aaa58
	void EndTrails();// 0xba269e0
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0xd8aa964
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0xba2687c

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0xba2678c
	void SetUseAutoManageAttachment(bool bAutoManage);// 0xba266d4
	void SetIntParameter(FName ParameterName, int Param);// 0xba265e4
	void SetFloatParameter(FName ParameterName, float Param);// 0xba264f4
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0xba263fc
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0xba2630c
	void SetBoolParameter(FName ParameterName, bool Param);// 0xba26214
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0xd8aa7b8
	void SetActorParameter(FName ParameterName, Actor* Param);// 0xd8aa6cc
	void ReleaseToPool();// 0xd8aa6b0
	FXSystemAsset* GetFXSystemAsset();// 0xd8aa674

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 16]
	int ActiveTab;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 16]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 16]
	float ViewStartInput;//[Offset: 0x20, Size: 4]
	float ViewEndInput;//[Offset: 0x24, Size: 4]
	float ViewStartOutput;//[Offset: 0x28, Size: 4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 8]
	Color CurveColor;//[Offset: 0x8, Size: 4]
	FString CurveName;//[Offset: 0x10, Size: 16]
	int bHideCurve;//[Offset: 0x20, Size: 4]
	int bColorCurve;//[Offset: 0x24, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 4]
	int bClamp;//[Offset: 0x2c, Size: 4]
	float ClampLow;//[Offset: 0x30, Size: 4]
	float ClampHigh;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 16]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 80]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 8]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float AspectRatio;//[Offset: 0x244, Size: 4]
	float FOVAngle;//[Offset: 0x248, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 1360]
	int GetAutoActivatePlayerIndex();// 0xd7f237c

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f4, Size: 4]
	float OrthoWidth;//[Offset: 0x1f8, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x1fc, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x200, Size: 4]
	float AspectRatio;//[Offset: 0x204, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 1]
	byte ProjectionMode;//[Offset: 0x209, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 1360]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0xd7eff34
	void SetProjectionMode(byte InProjectionMode);// 0xd7efe90
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0xd7efdec
	void SetOrthoWidth(float InOrthoWidth);// 0xd7efd48
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0xd7efca4
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0xd7efc00
	void SetFieldOfView(float InFieldOfView);// 0xd7efb50
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0xd7efa98
	void SetAspectRatio(float InAspectRatio);// 0xd7ef9f4
	void RemoveBlendable(interface class InBlendableObject);// 0xd7ef930
	void OnCameraMeshHiddenChanged();// 0xd7ef91c
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0xd7ef7ac
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0xd7ef6a8

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 8]
	FName Filename;//[Offset: 0x8, Size: 8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 16]
	float Duration;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 136]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x27c, Size: 4]
	float BaseLookUpRate;//[Offset: 0x280, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 8]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	void TurnAtRate(float Rate);// 0xd805dac
	void MoveUp_World(float Val);// 0xd805cfc
	void MoveRight(float Val);// 0xd805c4c
	void MoveForward(float Val);// 0xd805b9c
	void LookUpAtRate(float Rate);// 0xd805aec

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x458, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0xba36170
	float GetUnscaledSphereRadius();// 0xd8f9db4
	float GetShapeScale();// 0xd8f9d78
	float GetScaledSphereRadius();// 0xd8f9d34

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x464, Size: 4]
	int PreviousLODLevel;//[Offset: 0x468, Size: 4]
	int MinLOD;//[Offset: 0x46c, Size: 4]
	int SubDivisionStepSize;//[Offset: 0x470, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x478, Size: 8]
	Color WireframeColorOverride;//[Offset: 0x480, Size: 4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x484, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x484, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x484, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x484, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x484, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x485, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x485, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x485, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x485, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x488, Size: 4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x48c, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x490, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x494, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x498, Size: 16]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4a8, Size: 16]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4b8, Size: 24]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0xba36c68
	void SetReverseCulling(bool ReverseCulling);// 0xd8fe17c
	void SetForcedLodModel(int NewForcedLodModel);// 0xd8fe0d4
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0xd8fe024
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0xd8fdf7c
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0xd8fded4
	void GetLocalBounds(out Vector min, out Vector max);// 0xd8fddd8

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 16]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 16]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 16]
	Canvas* Canvas;//[Offset: 0x270, Size: 8]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 16]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 8]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 8]
	void ShowHUD();// 0xd828380
	void ShowDebugToggleSubCategory(FName Category);// 0xd8282d8
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0xd828230
	void ShowDebug(FName DebugType);// 0xd828180
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0xd828090
	void RemoveAllDebugStrings();// 0xd82807c
	void ReceiveHitBoxRelease(const FName BoxName);// 0xbbc0600
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xbbc0600
	void ReceiveHitBoxClick(const FName BoxName);// 0xbbc0600
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0xbbc0600
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0xbbc0600
	Vector Project(Vector Location);// 0xd827fc8
	void PreviousDebugTarget();// 0xd827fac
	void NextDebugTarget();// 0xd827f90
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0xd827db4
	PlayerController* GetOwningPlayerController();// 0xd827d80
	Pawn* GetOwningPawn();// 0xd827d4c
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0xd827b10
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0xd827964
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xd827530
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0xd8272f8
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0xd827158
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0xd826e60
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0xd826c38
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0xd826890
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0xd8266a8
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0xd826530
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0xd826388
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0xd825ff0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 4]
	float OrgY;//[Offset: 0x2c, Size: 4]
	float ClipX;//[Offset: 0x30, Size: 4]
	float ClipY;//[Offset: 0x34, Size: 4]
	Color DrawColor;//[Offset: 0x38, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 4]
	int SizeY;//[Offset: 0x44, Size: 4]
	Plane ColorModulate;//[Offset: 0x50, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0xd7f4538
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0xd7f443c
	Vector K2_Project(Vector WorldLocation);// 0xd7f4388
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0xd7f4268
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0xd7f3fc0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0xd7f3c14
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0xd7f3a74
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0xd7f3954
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0xd7f3738
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0xd7f35c8
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0xd7f3458
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0xd7f3000
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0xd7f2ec8

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 12]
	FString DebugText;//[Offset: 0x20, Size: 16]
	float TimeRemaining;//[Offset: 0x30, Size: 4]
	float Duration;//[Offset: 0x34, Size: 4]
	Color TextColor;//[Offset: 0x38, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 12]
	Font* Font;//[Offset: 0x50, Size: 8]
	float FontScale;//[Offset: 0x58, Size: 4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 8]
	int LODIndex;//[Offset: 0x8, Size: 4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 8]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 8]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 16]
	void Walk();// 0xd7ffb94
	void ViewSelf();// 0xd7ffb78
	void ViewPlayer(FString S);// 0xd7ffabc
	void ViewClass(class Actor DesiredClass);// 0xd7ffa0c
	void ViewActor(FName ActorName);// 0xd7ff95c
	void UpdateSafeArea();// 0xd7ff948
	void ToggleServerStatReplicatorUpdateStatNet();// 0xd7ff934
	void ToggleServerStatReplicatorClientOverwrite();// 0xd7ff920
	void ToggleDebugCamera();// 0xd7ff904
	void ToggleAILogging();// 0xd7ff8e8
	void TestCollisionDistance();// 0xd7ff8cc
	void Teleport();// 0xd7ff8b0
	void Summon(FString ClassName);// 0xd7ff7f4
	void StreamLevelOut(FName PackageName);// 0xd7ff744
	void StreamLevelIn(FName PackageName);// 0xd7ff694
	void SpawnServerStatReplicator();// 0xd7ff680
	void Slomo(float NewTimeDilation);// 0xd7ff5d0
	void SetWorldOrigin();// 0xd7ff5bc
	void SetMouseSensitivityToDefault();// 0xd7ff5a0
	void ServerToggleAILogging();// 0xd7ff544
	void ReceiveInitCheatManager();// 0xbbc0600
	void ReceiveEndPlay();// 0xbbc0600
	void PlayersOnly();// 0xd7ff528
	void OnlyLoadLevel(FName PackageName);// 0xd7ff478
	void LogLoc();// 0xd7ff45c
	void InvertMouse();// 0xd7ff440
	void God();// 0xd7ff424
	void Ghost();// 0xd7ff408
	void FreezeFrame(float Delay);// 0xd7ff358
	void Fly();// 0xd7ff33c
	void FlushLog();// 0xd7ff320
	void EnableDebugCamera();// 0xd7ff304
	void DumpVoiceMutingState();// 0xd7ff2e8
	void DumpPartyState();// 0xd7ff2cc
	void DumpOnlineSessionState();// 0xd7ff2b0
	void DumpChatState();// 0xd7ff294
	void DisableDebugCamera();// 0xd7ff278
	void DestroyTarget();// 0xd7ff25c
	void DestroyServerStatReplicator();// 0xd7ff248
	void DestroyPawns(class Pawn aClass);// 0xd7ff198
	void DestroyAllPawnsExceptTarget();// 0xd7ff17c
	void DestroyAll(class Actor aClass);// 0xd7ff0cc
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0xd7fefe0
	void DebugCapsuleSweepPawn();// 0xd7fefc4
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0xd7fef0c
	void DebugCapsuleSweepClear();// 0xd7feef0
	void DebugCapsuleSweepChannel(byte Channel);// 0xd7fee40
	void DebugCapsuleSweepCapture();// 0xd7fee24
	void DebugCapsuleSweep();// 0xd7fee08
	void DamageTarget(float DamageAmount);// 0xd7fed58
	void CheatScript(FString ScriptName);// 0xd7fec5c
	void ChangeSize(float F);// 0xd7febac
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0xd7fea08
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0xd7fe824
	void BugIt(FString ScreenShotDescription);// 0xd7fe768

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x694, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x694, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x694, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x694, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x694, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x694, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x694, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x698, Size: 8]
	Actor* SelectedActor;//[Offset: 0x6a0, Size: 8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x6a8, Size: 8]
	HitResult SelectedHitPoint;//[Offset: 0x6b0, Size: 136]
	PlayerController* OriginalControllerRef;//[Offset: 0x738, Size: 8]
	Player* OriginalPlayer;//[Offset: 0x740, Size: 8]
	float SpeedScale;//[Offset: 0x748, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x74c, Size: 4]
	float InitialAccel;//[Offset: 0x750, Size: 4]
	float InitialDecel;//[Offset: 0x754, Size: 4]
	void ToggleDisplay();// 0xd804374
	void ShowDebugSelectedInfo();// 0xd804358
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0xd8042b0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0xbbc0600
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0xbbc0600
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0xbbc0600
	Actor* GetSelectedActor();// 0xd80427c

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x440, Size: 4]
	float FrustumAngle;//[Offset: 0x444, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x448, Size: 4]
	float FrustumStartDist;//[Offset: 0x44c, Size: 4]
	float FrustumEndDist;//[Offset: 0x450, Size: 4]
	Texture* Texture;//[Offset: 0x458, Size: 8]

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 16]
	NetDriver* Driver;//[Offset: 0x58, Size: 8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 16]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 16]
	Actor* ViewTarget;//[Offset: 0x90, Size: 8]
	Actor* OwningActor;//[Offset: 0x98, Size: 8]
	int MaxPacket;//[Offset: 0xa0, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x160, Size: 40]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 8]
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 16]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x2f90, Size: 8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 16]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 16]
	int MaxDownloadSize;//[Offset: 0x50, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 4]
	int MaxClientRate;//[Offset: 0x64, Size: 4]
	float ServerTravelPause;//[Offset: 0x68, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 4]
	float RelevantTimeout;//[Offset: 0x70, Size: 4]
	float KeepAliveTime;//[Offset: 0x74, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 16]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 4]
	World* World;//[Offset: 0x140, Size: 8]
	Package* WorldPackage;//[Offset: 0x148, Size: 8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 8]
	FName NetDriverName;//[Offset: 0x190, Size: 8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 16]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 80]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 16]
	float Time;//[Offset: 0x210, Size: 4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 8]
	FName ClassName;//[Offset: 0x8, Size: 8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 16]
	float ActiveOpacity;//[Offset: 0x38, Size: 4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 4]
	float TimeUntilReset;//[Offset: 0x44, Size: 4]
	float ActivationDelay;//[Offset: 0x48, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 8]
	Texture2D* Image2;//[Offset: 0x8, Size: 8]
	Vector2D Center;//[Offset: 0x10, Size: 8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 8]
	Vector2D InputScale;//[Offset: 0x30, Size: 8]
	Key MainInputKey;//[Offset: 0x38, Size: 24]
	Key AltInputKey;//[Offset: 0x50, Size: 24]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 8]
	FName MemberName;//[Offset: 0x8, Size: 8]
	GUID MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 24]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 8]
	Actor* ChildActor;//[Offset: 0x200, Size: 8]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 8]
	void SetChildActorClass(class Actor InClass);// 0xb9f28cc

--------------------------------
Class: Interface.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 8]
	FName MatineeControllerName;//[Offset: 0x228, Size: 8]
	float PlayRate;//[Offset: 0x230, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	float ForceStartPosition;//[Offset: 0x238, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bHideHUD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 16]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 16]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 16]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	float InterpPosition;//[Offset: 0x284, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 16]
	MulticastInlineDelegateProperty OnStop;//[Size: 16]
	MulticastInlineDelegateProperty OnPause;//[Size: 16]
	void Stop();// 0xd89d230
	void SetPosition(float NewPosition, bool bJump);// 0xd89d140
	void SetLoopingState(bool bNewLooping);// 0xd89d088
	void Reverse();// 0xd89d06c
	void Play();// 0xd89d050
	void Pause();// 0xd89d034
	void EnableGroupByName(FString GroupName, bool bEnable);// 0xd89cee8
	void ChangePlaybackDirection();// 0xd89cecc

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 4]
	float PathBuildTime;//[Offset: 0x2c, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 16]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 8]
	float EdSectionStart;//[Offset: 0x48, Size: 4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 16]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float Timestamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 16]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 8]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 8]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 8]
	class HUD* HUDClass;//[Offset: 0x250, Size: 8]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 8]
	GameSession* GameSession;//[Offset: 0x278, Size: 8]
	GameStateBase* GameState;//[Offset: 0x280, Size: 8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 8]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 24]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	void StartPlay();// 0xd81695c
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0xd816868
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xd816748
	bool ShouldReset(Actor* ActorToReset);// 0xd81668c
	void ReturnToMainMenuHost();// 0xd816670
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0xd816558
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0xd81646c
	void RestartPlayer(Controller* NewPlayer);// 0xd8163bc
	void ResetLevel();// 0xd8163a0
	bool PlayerCanRestart(PlayerController* Player);// 0xd8162e4
	bool MustSpectate(PlayerController* NewPlayerController);// 0xb9faa00
	void K2_PostLogin(PlayerController* NewPlayer);// 0xbbc0600
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0xbbc0600
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0xbbc0600
	void K2_OnLogout(Controller* ExitingController);// 0xbbc0600
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0xbbc0600
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0xd8161e8
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0xd8160fc
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0xd81604c
	bool HasMatchStarted();// 0xd81600c
	bool HasMatchEnded();// 0xd815fcc
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0xd815f1c
	int GetNumSpectators();// 0xd815ee0
	int GetNumPlayers();// 0xd815ea4
	class Object GetDefaultPawnClassForController(Controller* InController);// 0xd815dec
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0xd815ce4
	Actor* ChoosePlayerStart(Controller* Player);// 0xd815c2c
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0xd815ae8
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0xd8159f0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 4]
	int MaxPlayers;//[Offset: 0x224, Size: 4]
	int MaxPartySize;//[Offset: 0x228, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	FName SessionName;//[Offset: 0x230, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 8]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 16]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 4]
	void OnRep_SpectatorClass();// 0xd8209a4
	void OnRep_ReplicatedWorldTimeSeconds();// 0xb9fdf48
	void OnRep_ReplicatedHasBegunPlay();// 0xd820988
	void OnRep_GameModeClass();// 0xd82096c
	bool HasMatchStarted();// 0xd82092c
	bool HasMatchEnded();// 0xd8208ec
	bool HasBegunPlay();// 0xd8208ac
	float GetServerWorldTimeSeconds();// 0xb9fdf0c
	float GetPlayerStartTime(Controller* Controller);// 0xd8207f4
	float GetPlayerRespawnDelay(Controller* Controller);// 0xd82073c

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 Channels;//[Offset: 0x224, Size: 4]
	uint32 InRate;//[Offset: 0x228, Size: 4]
	uint32 OutRate;//[Offset: 0x22c, Size: 4]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 4]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 4]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 4]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 4]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 4]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 4]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 4]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 4]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 4]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 4]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 4]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 4]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 4]
	uint32 NetNumClients;//[Offset: 0x268, Size: 4]
	uint32 InPackets;//[Offset: 0x26c, Size: 4]
	uint32 OutPackets;//[Offset: 0x270, Size: 4]
	uint32 InBunches;//[Offset: 0x274, Size: 4]
	uint32 OutBunches;//[Offset: 0x278, Size: 4]
	uint32 OutLoss;//[Offset: 0x27c, Size: 4]
	uint32 InLoss;//[Offset: 0x280, Size: 4]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 4]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 4]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 4]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 4]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 4]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 4]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 4]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 4]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 4]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 4]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 4]
	uint32 NumActors;//[Offset: 0x2b8, Size: 4]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 4]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 4]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 4]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 4]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 4]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 4]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 4]
	int BadPingThreshold;//[Offset: 0x228, Size: 4]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 4]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 4]
	float PercentForBadPing;//[Offset: 0x258, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 4]
	float MoveRepSize;//[Offset: 0x260, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 8]
	float Volume;//[Offset: 0x18, Size: 4]
	float FadeTime;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 4]
	float GainHF;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float LateDelay;//[Offset: 0x3c, Size: 4]
	float DecayTime;//[Offset: 0x40, Size: 4]
	float Density;//[Offset: 0x44, Size: 4]
	float Diffusion;//[Offset: 0x48, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 4]
	float DecayHFRatio;//[Offset: 0x50, Size: 4]
	float LateGain;//[Offset: 0x54, Size: 4]
	float Gain;//[Offset: 0x58, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 28]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 28]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 8]
	Actor* InViewer;//[Offset: 0x8, Size: 8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 8]
	Vector ViewLocation;//[Offset: 0x18, Size: 12]
	Vector ViewDir;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 8]
	Model* Model;//[Offset: 0xc0, Size: 8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 16]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 16]
	float LightmapTotalSize;//[Offset: 0x110, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 16]
	GUID[] StreamingTextureGuids;//[Offset: 0x128, Size: 16]
	GUID LevelBuildDataId;//[Offset: 0x1d0, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 8]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 16]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 16]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x458, Size: 8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0xbbc0600
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xd88c9bc
	bool RemoteEvent(FName EventName);// 0xd88c900
	void LevelReset();// 0xbbc0600

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 8]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 8]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x440, Size: 8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	float ScreenSize;//[Offset: 0x44c, Size: 4]
	float U;//[Offset: 0x450, Size: 4]
	float UL;//[Offset: 0x454, Size: 4]
	float V;//[Offset: 0x458, Size: 4]
	float vL;//[Offset: 0x45c, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0xd7e45d8
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0xd7e4430
	void SetSprite(Texture2D* NewSprite);// 0xd7e4380

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 16]
	Transform LevelTransform;//[Offset: 0x80, Size: 48]
	int LevelLODIndex;//[Offset: 0xb0, Size: 4]
	int StreamingPriority;//[Offset: 0xb4, Size: 4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 16]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 4]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 16]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 16]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 16]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 16]
	Level* LoadedLevel;//[Offset: 0x128, Size: 8]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 8]
	bool ShouldBeLoaded();// 0xd88c444
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0xd88c394
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0xd88c2dc
	void SetPriority(int NewPriority);// 0xd88c234
	void SetLevelLODIndex(int LODIndex);// 0xd88c18c
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0xd88c0dc
	bool IsStreamingStatePending();// 0xd88c0a4
	bool IsLevelVisible();// 0xd88c06c
	bool IsLevelLoaded();// 0xd88c048
	FName GetWorldAssetPackageFName();// 0xd88c014
	Level* GetLoadedLevel();// 0xd88bff8
	LevelScriptActor* GetLevelScriptActor();// 0xd88bfc4
	bool GetIsRequestingUnloadAndRemoval();// 0xd88bfa4
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0xd88bee8

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 16]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	byte StreamingUsage;//[Offset: 0x269, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 16]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 80]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 16]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 16]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 8]
	Level* Level;//[Offset: 0x38, Size: 8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 16]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 24]
	FName AISystemModuleName;//[Offset: 0x40, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 4]
	float TestHeightDifference;//[Offset: 0x44, Size: 4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0xd7e5240
	int GetObjectCount();// 0xd7e520c
	int GetNewAvoidanceUID();// 0xd7e51d8
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0xd7e5124

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 8]
	<Level*> Levels;//[Offset: 0x28, Size: 80]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 16]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 80]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortWorldSettings.WorldSettings.Info.Actor.Object
	Actor*[] ActorsNeedingWorldReady;//[Offset: 0x3a0, Size: 16]
	int[] WorldCells;//[Offset: 0x3b0, Size: 16]
	Vector WorldCellsOrigin;//[Offset: 0x3c0, Size: 12]
	int WorldCellsFlags;//[Offset: 0x3cc, Size: 4]
	bool bGenerateTestLevelSaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	bool bDisableCullDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	bool bUseWorldSpecificCullDistanceOverride;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 1]
	bool bPvPUseWidgetRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d0, Size: 1]
	bool bOverrideMainMapSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	bool bValidateNavGraphConnectivity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d0, Size: 1]
	bool bLimitNavGraphSkyCells;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d0, Size: 1]
	bool bUseProceduralFoliage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d0, Size: 1]
	bool bUseConditionalBuildingFoundations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d1, Size: 1]
	bool bAllowBuildingStreamingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d1, Size: 1]
	int SplineHLODIndex;//[Offset: 0x3d4, Size: 4]
	bool bShowTimeOfDayManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	float MinCullObjectSize;//[Offset: 0x3dc, Size: 4]
	float MinCullDistance;//[Offset: 0x3e0, Size: 4]
	float MaxCullObjectSize;//[Offset: 0x3e4, Size: 4]
	float MaxCullDistance;//[Offset: 0x3e8, Size: 4]
	MaterialInterface* OverrideMinimapMaterial;//[Offset: 0x3f0, Size: 8]
	Vector2D PvPMapWorldCenter;//[Offset: 0x3f8, Size: 8]
	float MapZOffset;//[Offset: 0x400, Size: 4]
	Rotator MapRotation;//[Offset: 0x404, Size: 12]
	Texture2D* MapInitialMask;//[Offset: 0x410, Size: 8]
	bool bSpawnVehicleManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	bool bSpawnPhysicsObjectManager;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 1]
	float MapWorldScale;//[Offset: 0x41c, Size: 4]
	float MiniMapZoom;//[Offset: 0x420, Size: 4]
	SlateBrush AircraftPathBrush;//[Offset: 0x428, Size: 136]
	SlateBrush AircraftMidlinePathBrush;//[Offset: 0x4b0, Size: 136]
	SlateBrush AircraftPathTeamIndicatorBrush;//[Offset: 0x538, Size: 136]
	SlateBrush SafeZoneFinalPosBrush;//[Offset: 0x5c0, Size: 136]
	IntPoint[] NavGraphSkyCells;//[Offset: 0x648, Size: 16]
	CurveTable* SearchSpeedOverride;//[Offset: 0x658, Size: 8]
	CurveTable* ResourceRateOverride;//[Offset: 0x660, Size: 8]
	SoundBase* SoundBodyHeadshotRequired;//[Offset: 0x668, Size: 8]
	bool bSpawnTimeOfDayManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x670, Size: 1]
	class FortTimeOfDayManager* WorldTimeOfDayManager;//[Offset: 0x678, Size: 40]
	class FortMusicManager* WorldMusicManager;//[Offset: 0x6a0, Size: 40]
	FortMusicManagerBank* WorldMusicManagerBank;//[Offset: 0x6c8, Size: 8]
	class FortTimeOfDayManager* DefaultWorldTimeOfDayManager;//[Offset: 0x6d0, Size: 40]
	class FortTimeOfDayManager* ZoneThemeTimeOfDayManager;//[Offset: 0x6f8, Size: 40]
	class FortTimeOfDayManager* MissionTimeOfDayManager;//[Offset: 0x720, Size: 40]
	class FortMusicManager* ZoneThemeMusicManager;//[Offset: 0x748, Size: 40]
	FortMusicManagerBank* ZoneThemeMusicManagerBank;//[Offset: 0x770, Size: 8]
	BuildingFoundationStreamingData[] BuildingFoundationStreamingData;//[Offset: 0x778, Size: 16]
	FortTimeOfDayManager* TimeOfDayManager;//[Offset: 0x788, Size: 8]
	FortVehicleManager* VehicleManager;//[Offset: 0x790, Size: 8]
	FortPhysicsObjectManager* PhysicsObjectManager;//[Offset: 0x798, Size: 8]
	FortLevelOverlayManager* LevelOverlayManager;//[Offset: 0x7a0, Size: 8]
	FortExternalContentManager* ExternalContentManager;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: FortTimeOfDayManager.Info.Actor.Object
	float TimeOfDay;//[Offset: 0x228, Size: 4]
	float TimeOfDayReplicated;//[Offset: 0x22c, Size: 4]
	byte CurrentDayNightPhase;//[Offset: 0x230, Size: 1]
	byte TransitionFromPhase;//[Offset: 0x231, Size: 1]
	byte TransitionToPhase;//[Offset: 0x232, Size: 1]
	float TransitionBlendPercent;//[Offset: 0x234, Size: 4]
	float DefaultTimeOfDaySpeed;//[Offset: 0x238, Size: 4]
	float StartTimeOfDayInGame;//[Offset: 0x23c, Size: 4]
	float TimeOfDaySpeed;//[Offset: 0x240, Size: 4]
	float MaxTimeOfDayAccumulationFactor;//[Offset: 0x244, Size: 4]
	float TimeOfDayAccumulator;//[Offset: 0x248, Size: 4]
	MaterialInterface* BasePostProcessMaterial;//[Offset: 0x250, Size: 8]
	MaterialInstanceDynamic* PostProcessMaterialMID;//[Offset: 0x258, Size: 8]
	uint32 bHasClonedPPVs;//[Offset: 0x260, Size: 4]
	bool bSkipNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bUsePerDayPhaseSkylightCubemaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]
	bool bTimeStarted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 1]
	bool bHeightFogEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 1]
	bool bBaseHeightFogOnAltitude;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264, Size: 1]
	float HeightFogZOffset;//[Offset: 0x268, Size: 4]
	CameraAltitudeAdjustments[] AltitudeAdjustments;//[Offset: 0x270, Size: 16]
	CameraAltitudeAdjustments[] AltitudeAdjustmentsForSecondFog;//[Offset: 0x280, Size: 16]
	Rotator SunriseDirectionalLightRotation;//[Offset: 0x290, Size: 12]
	Rotator SunsetDirectionalLightRotation;//[Offset: 0x29c, Size: 12]
	Quat DirectionalLightQuat;//[Offset: 0x2b0, Size: 16]
	Rotator SunriseSunObjectRotation;//[Offset: 0x2d4, Size: 12]
	Rotator SunsetSunObjectRotation;//[Offset: 0x2e0, Size: 12]
	float SunObjectDivergencePower;//[Offset: 0x2ec, Size: 4]
	bool bUseSkyAtmosphereRotationAndDivergence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	Rotator SunriseSkyAtmosphereRotation;//[Offset: 0x2f4, Size: 12]
	Rotator SunsetSkyAtmosphereRotation;//[Offset: 0x300, Size: 12]
	float SkyAtmosphereRotationDivergencePower;//[Offset: 0x30c, Size: 4]
	float DistanceToSunOrMoon;//[Offset: 0x310, Size: 4]
	bool bStartInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	DirectionalLightComponent* DirectionalLightComponent;//[Offset: 0x318, Size: 8]
	ExponentialHeightFogComponent* ActiveHeightFogComponent;//[Offset: 0x320, Size: 8]
	FortDayPhaseChangeParams* DayPhaseChangeEventParams;//[Offset: 0x328, Size: 8]
	DayPhaseInfo LightAndFogPhaseSettings;//[Offset: 0x330, Size: 528]
	FortDayPhaseInfoOverride* LightAndFogPhaseSettingOverrides;//[Offset: 0xb70, Size: 8]
	bool bBlendingInLightAndFogOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb90, Size: 1]
	bool bBlendingOutLightAndFogOverrides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb90, Size: 1]
	byte BlendingOutLightAndFogOverridesDayPhase;//[Offset: 0xb91, Size: 1]
	float LightAndFogOverridesFadeTime;//[Offset: 0xb94, Size: 4]
	float CurrentLightAndFogBlendValue;//[Offset: 0xb98, Size: 4]
	TimeOfDayDirectOverrides DirectOverrides;//[Offset: 0xba0, Size: 80]
	PostProcessComponent* MorningPostProcessComponent;//[Offset: 0xbf0, Size: 8]
	PostProcessComponent* DayPostProcessComponent;//[Offset: 0xbf8, Size: 8]
	PostProcessComponent* EveningPostProcessComponent;//[Offset: 0xc00, Size: 8]
	PostProcessComponent* NightPostProcessComponent;//[Offset: 0xc08, Size: 8]
	PostProcessComponent* DayPhasePostProcessComponent;//[Offset: 0xc10, Size: 8]
	PostProcessComponent* OverridePostProcessComponent;//[Offset: 0xc30, Size: 8]
	ExponentialHeightFogValues CurrentTimeOfDayFogValues;//[Offset: 0xc38, Size: 96]
	LinearColor CurrentTimeOfDayDirectionalLightColor;//[Offset: 0xc98, Size: 16]
	MaterialParameterCollection* MaterialParameterCollection;//[Offset: 0xca8, Size: 8]
	MaterialParameterCollectionInstance* MaterialParameterCollectionInstance;//[Offset: 0xcb0, Size: 8]
	Vector RainParticleSystemRelativeOffset;//[Offset: 0xcb8, Size: 12]
	StaticMesh* SunMesh;//[Offset: 0xcc8, Size: 8]
	StaticMesh* MoonMesh;//[Offset: 0xcd0, Size: 8]
	MaterialInterface*[] SunMaterialOverrides;//[Offset: 0xcd8, Size: 16]
	MaterialInterface*[] MoonMaterialOverrides;//[Offset: 0xce8, Size: 16]
	float SunScale;//[Offset: 0xcf8, Size: 4]
	float MoonScale;//[Offset: 0xcfc, Size: 4]
	MaterialInterface* SkyDomeMaterial;//[Offset: 0xd00, Size: 8]
	MaterialInterface* StarMapMaterial;//[Offset: 0xd08, Size: 8]
	Texture2D* CloudMaskTexture;//[Offset: 0xd10, Size: 8]
	bool bUseStormValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	LinearColor StormLightColor;//[Offset: 0xd1c, Size: 16]
	MaterialInstance* StormMaterialInst;//[Offset: 0xd30, Size: 8]
	ExponentialHeightFogValues StormFogValues;//[Offset: 0xd38, Size: 96]
	MulticastInlineDelegateProperty OnDayPhaseChangeEvent;//[Size: 16]
	DelegatesQueuedForProcessingDayPhaseChange(MulticastInlineDelegateProperty)[] DelegatesQueuedForProcessingDayPhaseChange;//[Offset: 0xdf8, Size: 16]
	SkyLightComponent* SkyLightComp;//[Offset: 0xe08, Size: 8]
	ParticleSystemComponent* RainParticleSystemComp;//[Offset: 0xe10, Size: 8]
	StaticMeshComponent* SunOrMoonMeshComp;//[Offset: 0xe18, Size: 8]
	StaticMeshComponent* SkyDomeMeshComp;//[Offset: 0xe20, Size: 8]
	StaticMeshComponent* StarMapMeshComp;//[Offset: 0xe28, Size: 8]
	MaterialInstanceDynamic* ActiveSkyBoxMat;//[Offset: 0xe30, Size: 8]
	MaterialInstanceDynamic* StarMapMID;//[Offset: 0xe38, Size: 8]
	float StormStrength;//[Offset: 0xe40, Size: 4]
	FortTimeOfDayWeatherComponent* WeatherComponent;//[Offset: 0xe78, Size: 8]
	void UnregisterForDayPhaseChangedEvent(Object* EventReceiver);// 0xd1e9da0
	void ToggleSkipNight();// 0xd1e9d8c
	void ToggleDebugForceStormEffects();// 0xd1e9d78
	void SetUseSpecificTimeOfDayEditing(bool bShouldUseSpecificTimeOfDay);// 0xd1e9cc8
	void SetTimeOfDaySpeedFloat(float InTimeOfDaySpeed);// 0xd1e9c20
	void SetTimeOfDaySpeed(float TimeOfDaySpeedFactor);// 0xd1e9b78
	void SetTimeOfDayManagerVisibility(bool bVisible);// 0xd1e9ac8
	void SetTimeOfDayInHours(float TimeOfDayInHours);// 0xd1e9a20
	void SetTimeOfDayFloat(float TimeOfDayInHours);// 0xd1e9978
	void SetTimeOfDayAbsoluteSpeed(float NewTimeOfDaySpeed);// 0xd1e98d0
	void SetTimeOfDay(FString NewTimeOfDay);// 0xd1e97d4
	void SetStormStrength(float NewStormStrength);// 0xd1e972c
	void SetSpecificTimeOfDayInEditor(float NewTimeOfDayInEditor);// 0xd1e9684
	void SetPostProcessMaterialMIDEnabled(const bool bPostProcessEnabled);// 0xd1e95d4
	void SetFogDirectionalInscatteringMultiplier(float NewFogDirectionalInscatteringMultiplier);// 0xd1e952c
	void SetDirectionalLightColorMultiplier(float NewDirectionalLightColorMultiplier);// 0xd1e9484
	void SetDayPhase(FString DayPhase);// 0xd1e9388
	void RemoveLightAndFogPhaseSettingOverrideMulticast(byte DayPhase, float BlendOutLength);// 0xd1e9298
	void RemoveLightAndFogPhaseSettingOverride(byte DayPhase, float BlendOutLength);// 0xd1e91b0
	void RegisterForDayPhaseChangedEvent(delegate DelegateSignature);// 0xd1e90f8
	void OnWeatherStart(int WeatherEventIndex);// 0xbbc0600
	void OnWeatherEnd(int WeatherEventIndex);// 0xbbc0600
	void OnUpdateDirectionalLightForTimeOfDay(out const LinearColor AboutToApplyDirectionalLightColor);// 0xbbc0600
	void OnStormStart();// 0xbbc0600
	void OnStormEnd();// 0xbbc0600
	void OnRep_TimeOfDayInit();// 0xd1e90dc
	void OnRep_TimeOfDay();// 0xb6c9c88
	void OnRep_HeightFogEnabled();// 0xd1e90c0
	void OnRep_DirectOverrides();// 0xd1e90ac
	void OnDayPhaseChange();// 0xbbc0600
	void OnDataDrivenCVarChangedEditorOnly(FString CVarName);// 0xbbc0600
	static ExponentialHeightFogValues MakeExponentialHeightFogValues(float FogDensity, float FogHeightFalloff, float FogMaxOpacity, float StartDistance, float DirectionalInscatteringExponent, float DirectionalInscatteringStartDistance, LinearColor DirectionalInscatteringColor, LinearColor FogInscatteringColor, float VolumetricFogScatteringDistribution, float VolumetricFogExtinctionScale, float VolumetricFogDistance);// 0xd1e8d60
	static FortTimeOfDayManager* GetTimeOfDayManagerFromContext(Object* WorldContextObject);// 0xb6c9be0
	ThreatLocationInfo[] GetThreatClouds();// 0xd1e8cf0
	float GetStormStrength();// 0xd1e8cbc
	float GetSafeZoneGamePhaseTimeRemaining();// 0xd1e8c88
	byte GetPreviousDayPhase();// 0xd1e8c4c
	void FFToTimeOfDay(float FastForwardTime, float FastForwardSpeed);// 0xd1e8b68
	void FastForwardToTime_ByDuration(float FastForwardTimeOfDay, float FastForwardDuration, float RestoreSpeed);// 0xd1e8a44
	void FastForwardToTime(float FastForwardTimeOfDay, float FastForwardSpeed, float RestoreSpeed);// 0xd1e8920
	void EndBlendLightAndFogPhaseSettingOverride();// 0xd1e890c
	static void BreakExponentialHeightFogValues(ExponentialHeightFogValues HeightFogValues, out float FogDensity, out float FogHeightFalloff, out float FogMaxOpacity, out float StartDistance, out float DirectionalInscatteringExponent, out float DirectionalInscatteringStartDistance, out LinearColor DirectionalInscatteringColor, out LinearColor FogInscatteringColor, out float VolumetricFogScatteringDistribution, out float VolumetricFogExtinctionScale, out float VolumetricFogDistance);// 0xd1e84cc
	void BlendLightAndFogPhaseSettingOverride(float Alpha);// 0xd1e8424
	void ApplyDirectOverrides(out const TimeOfDayDirectOverrides NewDirectOverrides);// 0xd1e8348
	void AddLightAndFogPhaseSettingOverrideMulticast(byte DayPhase, class FortDayPhaseInfoOverride DayPhaseInfoOverride, float BlendInLength);// 0xd1e8218
	void AddLightAndFogPhaseSettingOverride(byte DayPhase, class FortDayPhaseInfoOverride DayPhaseInfoOverride, float BlendInLength);// 0xd1e80f0

--------------------------------
Class: ExponentialHeightFogValues
	float FogDensity;//[Offset: 0x0, Size: 4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 4]
	float FogMaxOpacity;//[Offset: 0x8, Size: 4]
	float StartDistance;//[Offset: 0xc, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x10, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x14, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x18, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x28, Size: 16]
	float VolumetricFogScatteringDistribution;//[Offset: 0x38, Size: 4]
	LinearColor VolumetricFogAlbedo;//[Offset: 0x3c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x4c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x50, Size: 4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x54, Size: 12]

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 4]
	float FogHeightOffset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ThreatLocationInfo.FastArraySerializerItem
	Vector CloudLocation;//[Offset: 0xc, Size: 12]
	Box ThreatVolume;//[Offset: 0x18, Size: 28]
	FortThreatVisualsManager* ThreatVisualsManager;//[Offset: 0x38, Size: 8]
	ThreatCloud* CloudActor;//[Offset: 0x40, Size: 8]
	bool bThreatActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	enum DeactivationType;//[Offset: 0x4a, Size: 1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 4]
	int ReplicationKey;//[Offset: 0x4, Size: 4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortThreatVisualsManager.Actor.Object
	class ThreatCloud* CloudBlueprint;//[Offset: 0x228, Size: 8]
	float CloudRadius;//[Offset: 0x230, Size: 4]
	float ThreatBoxVolumeTopPadding;//[Offset: 0x234, Size: 4]
	float ThreatBoxVolumeBottomPadding;//[Offset: 0x238, Size: 4]
	bool bUseLocalPlayersOnlyForCloudMinimumHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bHideClouds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	float CloudMinimumHeightAbovePlayers;//[Offset: 0x240, Size: 4]
	float CloudMinimumHeightAboveGround;//[Offset: 0x244, Size: 4]
	float CloudMinimumAltitude;//[Offset: 0x248, Size: 4]
	float CloudMaxVerticalDelta;//[Offset: 0x24c, Size: 4]
	float CloudMinSpeed;//[Offset: 0x250, Size: 4]
	float CloudMaxSpeed;//[Offset: 0x254, Size: 4]
	float StormWindCloudRadius;//[Offset: 0x258, Size: 4]
	float StormWindGoalRadius;//[Offset: 0x25c, Size: 4]
	float StormWindFalloffRadius;//[Offset: 0x260, Size: 4]
	float StormWindInactiveMagnitude;//[Offset: 0x264, Size: 4]
	float StormWindActiveMagnitude;//[Offset: 0x268, Size: 4]
	float StormWindDesiredDeltaBlendTime;//[Offset: 0x26c, Size: 4]
	float StormWindDirectionAdditionalAngle;//[Offset: 0x270, Size: 4]
	ThreatLocationArray ThreatLocations;//[Offset: 0x278, Size: 280]
	StormWindArray StormWindArray;//[Offset: 0x390, Size: 280]
	Vector[] GoalActorLocations;//[Offset: 0x4a8, Size: 16]
	bool StormsExist();// 0xd1e7240
	void SetMinimumCloudAltitude(float NewMinimumAltitude);// 0xd1e719c
	void SetCloudsAreHidden(bool bHide);// 0xd1e70ec
	void ResetMinimumCloudAltitude();// 0xd1e70d0
	void OnWorldReady();// 0xbbc0600
	void OnThreatCloudsChanged(out const ThreatLocationInfo[] ThreatLocationInfo);// 0xbbc0600
	void OnRep_ThreatLocations();// 0xd1e70b4
	void OnRep_StormWinds();// 0xd1e7098
	void OnRep_HideClouds();// 0xd1e707c
	void OnRep_GoalActorLocations();// 0xd1e7060
	void OnBeginThreatVisualsPrecursor(Actor* SourceActor, out const Vector EndLocation);// 0xbbc0600
	ThreatLocationInfo[] GetThreatClouds();// 0xd1e6ff0
	ThreatCloud* GetThreatCloud(out const ThreatLocationInfo ThreatLocInfo);// 0xd1e6ed0
	bool GetCloudsAreHidden();// 0xd1e6eb4
	void BeginThreatVisualsPrecursor(Actor* SourceActor, Vector ThreatLocation);// 0xd1e6dc4

--------------------------------
Class: ThreatCloud.Actor.Object
	BoxComponent*[] LightningSourceAreas;//[Offset: 0x220, Size: 16]
	SlateBrush MiniMapIconBrush;//[Offset: 0x230, Size: 136]
	float MiniMapIconPercent;//[Offset: 0x2b8, Size: 4]
	SlateBrush MiniMapFarOffIconBrush;//[Offset: 0x2c0, Size: 136]
	LinearColor ActiveTint;//[Offset: 0x348, Size: 16]
	LinearColor InActiveTint;//[Offset: 0x358, Size: 16]
	float ActiveTransitionTime;//[Offset: 0x368, Size: 4]
	float DeathTimerDuration;//[Offset: 0x36c, Size: 4]
	float CloudMiniMapTickInterval;//[Offset: 0x370, Size: 4]
	float MiniMapFarOffIconDegreesOfArc;//[Offset: 0x388, Size: 4]
	Box ThreatBoxVolume;//[Offset: 0x398, Size: 28]
	float GroundLevelUnderCloud;//[Offset: 0x3b4, Size: 4]
	Vector[] GoalActorLocations;//[Offset: 0x3c0, Size: 16]
	void OnThreatVolumeChanged();// 0xbbc0600
	void OnLightningStrike(out const Vector StartLocation, out const Vector EndLocation, BuildingRift* Rift, bool bLightningStruckRift);// 0xbbc0600
	void OnCloudStart();// 0xbbc0600
	void OnCloudHiddenChange(bool bCloudsAreHidden);// 0xbbc0600
	void OnCloudDeactivated(enum DeactivationType);// 0xbbc0600
	void OnCloudActivated();// 0xbbc0600
	void OnBeginDeath();// 0xbbc0600
	void ManualLightningFlash();// 0xbbc0600
	Box GetThreatVolume();// 0xd2543cc

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x458, Size: 12]
	float LineThickness;//[Offset: 0x464, Size: 4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0xd7ee2f4
	Vector GetUnscaledBoxExtent();// 0xd7ee2d0
	Vector GetScaledBoxExtent();// 0xd7ee2a0

--------------------------------
Class: BuildingRift.BuildingActor.Actor.Object
	FortDamageSet* DamageSet;//[Offset: 0x5b8, Size: 8]
	float DistToTarget;//[Offset: 0x5c0, Size: 4]
	bool bSendMissionEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool bDelayDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	enum SlotSelectionMode;//[Offset: 0x5cb, Size: 1]
	float MinSpawnDelay;//[Offset: 0x5cc, Size: 4]
	float MaxSpawnDelay;//[Offset: 0x5d0, Size: 4]
	float CosmeticStateIdleDelay;//[Offset: 0x5d4, Size: 4]
	float IntroToBeginSpawningDelay;//[Offset: 0x5d8, Size: 4]
	EnvQuery* EnvironmentQuery;//[Offset: 0x5e0, Size: 8]
	EnvNamedValue[] QueryParams;//[Offset: 0x5e8, Size: 16]
	float QueryRadius;//[Offset: 0x5f8, Size: 4]
	float QueryMinDistance;//[Offset: 0x5fc, Size: 4]
	bool bOverrideQueryMinDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	bool bRegisterAsASpecialActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	GameplayTag SpecialActorTag;//[Offset: 0x604, Size: 8]
	SlateBrush SpecialActorMinimapIconBrush;//[Offset: 0x610, Size: 136]
	Vector2D SpecialActorMinimapIconScale;//[Offset: 0x698, Size: 8]
	SlateBrush SpecialActorCompassIconBrush;//[Offset: 0x6a0, Size: 136]
	Vector2D SpecialActorCompassIconScale;//[Offset: 0x728, Size: 8]
	bool bShouldDrawCompassIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	bool bSpawnUsingRiftRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 1]
	float SpawnPointRadius;//[Offset: 0x734, Size: 4]
	FName SpecialActorID;//[Offset: 0x738, Size: 8]
	Vector[] FreeSpawnSlots;//[Offset: 0x740, Size: 16]
	FortSpawnSlotData[] UsedSpawnSlots;//[Offset: 0x750, Size: 16]
	bool bRiftIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bRiftIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool bIsReadyToSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	bool bHasBeenInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x773, Size: 1]
	bool bHasBadRiftSlots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	bool bRecalculateSpawnPointsPeriodically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	float SpawnPointEvaluationInterval;//[Offset: 0x77c, Size: 4]
	MulticastInlineDelegateProperty OnBuildingRiftSpawnedAI;//[Size: 16]
	bool bCreateOverlapSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	ScalableFloat OverlapSphereRadius;//[Offset: 0x808, Size: 40]
	SphereComponent* OverlapSphereComponent;//[Offset: 0x830, Size: 8]
	FName DestructionLootTierGroup;//[Offset: 0x838, Size: 8]
	Rotator LootDropTossDirection;//[Offset: 0x840, Size: 12]
	float LootDropConeHalfAngle;//[Offset: 0x84c, Size: 4]
	float LootDropSpeed;//[Offset: 0x850, Size: 4]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0x858, Size: 104]
	bool bCanBeMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c0, Size: 1]
	bool bBlockMarking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 1]
	Vector MarkerPositionOffset;//[Offset: 0x8c4, Size: 12]
	FortRiftReservation[] RiftReservations;//[Offset: 0x8d0, Size: 16]
	enum CosmeticState;//[Offset: 0x8e0, Size: 1]
	FortSpectateClickableMapIcon* SpectatorMapIcon;//[Offset: 0x8e8, Size: 8]
	void StartEnvironmentQuery();// 0xce69ac8
	void SetNewEQSData(EnvQuery* NewEnvironmentQuery, EnvNamedValue[] NewQueryParams);// 0xce699a8
	void OnStartedEncounterSpawn(FortAIPawn* SpawnedAI);// 0xbbc0600
	void OnSpawnAI();// 0xbbc0600
	void OnRep_RiftIsVisible();// 0xce69994
	void OnRep_RiftIsActive();// 0xce69980
	void OnRep_CosmeticState();// 0xce6996c
	void OnRemoved();// 0xbbc0600
	void OnPlaced();// 0xbbc0600
	void OnGameDifficultyChanged();// 0xce69958
	void OnFinishedEncounterSpawn(FortAIPawn* SpawnedAI);// 0xbbc0600
	void OnDeactivated();// 0xbbc0600
	void OnActivated();// 0xbbc0600
	void BroadcastRiftSpawningAI();// 0xce6993c
	void BP_Cosmetic_ShouldDie();// 0xbbc0600
	void BP_Cosmetic_RampUp();// 0xbbc0600
	void BP_Cosmetic_Intro();// 0xbbc0600
	void BP_Cosmetic_Idle();// 0xbbc0600
	void BlueprintHideVFX();// 0xbbc0600
	void BlueprintHideRift();// 0xbbc0600

--------------------------------
Class: BuildingActor.Actor.Object
	GUID MyGuid;//[Offset: 0x2a0, Size: 16]
	float SavedHealthPct;//[Offset: 0x2b0, Size: 4]
	int16 OwnerPersistentID;//[Offset: 0x2b4, Size: 2]
	bool bUseMinLifeSpan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b6, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x2b8, Size: 40]
	class NavLinkDefinition* NavigationLinksClass;//[Offset: 0x2e0, Size: 8]
	FortAthenaVehicle*[] InitialOverlappingVehicles;//[Offset: 0x2f0, Size: 16]
	int CurrentBuildingLevel;//[Offset: 0x300, Size: 4]
	int MaximumBuildingLevel;//[Offset: 0x304, Size: 4]
	class FortBuildingActorSet* BuildingAttributeSetClass;//[Offset: 0x308, Size: 8]
	FortBuildingActorSet* BuildingAttributeSet;//[Offset: 0x310, Size: 8]
	FortBuildingActorSet* ReplicatedBuildingAttributeSet;//[Offset: 0x318, Size: 8]
	float MaxHealthInitializationValue;//[Offset: 0x320, Size: 4]
	FortAttributeInitializationKey AttributeInitKeys;//[Offset: 0x324, Size: 16]
	enum AttributeInitLevelSource;//[Offset: 0x344, Size: 1]
	enum AbilitySystemComponentCreationPolicy;//[Offset: 0x345, Size: 1]
	byte PrimarySurfaceType;//[Offset: 0x346, Size: 1]
	byte WeaponResponseType;//[Offset: 0x347, Size: 1]
	FortAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x348, Size: 8]
	FortAbilitySystemComponent* ReplicatedAbilitySystemComponent;//[Offset: 0x350, Size: 8]
	GameplayCueParameters[] PendingDamageImpactCues;//[Offset: 0x358, Size: 16]
	float HealthBarIndicatorWidth;//[Offset: 0x368, Size: 4]
	float HealthBarIndicatorVerticalOffset;//[Offset: 0x36c, Size: 4]
	FName HealthBarIndicatorSocketName;//[Offset: 0x370, Size: 8]
	FortHealthBarIndicator* HealthBarIndicator;//[Offset: 0x378, Size: 8]
	int HealthBarIndicatorDifficultyRating;//[Offset: 0x380, Size: 4]
	byte ForceMetadataRelevant;//[Offset: 0x384, Size: 1]
	byte LastMetadataRelevant;//[Offset: 0x385, Size: 1]
	byte DynamicBuildingPlacementType;//[Offset: 0x386, Size: 1]
	enum NavigationObstacleOverride;//[Offset: 0x387, Size: 1]
	GameplayTagQuery IncomingDamageFilterQuery;//[Offset: 0x388, Size: 72]
	bool bIsInvulnerable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	bool bPreviewBuildingActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 1]
	bool bPlayedDying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d0, Size: 1]
	bool bHasRegisteredActorStateAtLeastOnce;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	bool bDirtyForLevelRecordSave;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d0, Size: 1]
	bool bSavedMetaPropertiesProcessed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d0, Size: 1]
	bool bUpgradeUsesSameClass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d0, Size: 1]
	bool bDisplayLevelInInfoWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d1, Size: 1]
	bool bAllowUpgradeRegardlessOfPlayerBuildLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d1, Size: 1]
	bool bDisplayDamageNumbersInAthena;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d1, Size: 1]
	bool bUseFortHealthBarIndicator;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d1, Size: 1]
	bool bSurpressHealthBar;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d1, Size: 1]
	bool bCreateVerboseHealthLogs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d1, Size: 1]
	bool bIsIndestructibleForTargetSelection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d1, Size: 1]
	bool bPropagateDrawDistanceOnAdditionalComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d1, Size: 1]
	bool bDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d2, Size: 1]
	bool bPersistToWorld;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d2, Size: 1]
	bool bRefreshFullSaveDataBeforeZoneSave;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d2, Size: 1]
	bool bBeingDragged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d2, Size: 1]
	bool bRotateInPlaceGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d2, Size: 1]
	bool bBeingOneHitDisassembled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d2, Size: 1]
	bool bBoundsAreInvalidForMelee;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d2, Size: 1]
	bool bIsNavigationModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d3, Size: 1]
	bool bBlockNavigationLinks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d3, Size: 1]
	bool bCanExportNavigationCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d3, Size: 1]
	bool bCanExportNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d3, Size: 1]
	bool bMirrorNavLinksX;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d3, Size: 1]
	bool bMirrorNavLinksY;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d3, Size: 1]
	bool bIgnoreMoveGoalCollisionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d3, Size: 1]
	bool bForceDisableRootNavigationRelevance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d3, Size: 1]
	bool bForceAutomationPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	bool bForceAutomationPass_NavmeshOnTop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4, Size: 1]
	bool bForceAutomationPass_SmashableFlat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d4, Size: 1]
	bool bCanBeSavedInCreativeVolume;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d4, Size: 1]
	bool bIsNavigationRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d4, Size: 1]
	bool bIsNavigationIndestructible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d4, Size: 1]
	bool bBlockNavLinksInCell;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d4, Size: 1]
	bool bUseHotSpotAsMoveGoalReplacement;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d4, Size: 1]
	bool bHasCustomAttackLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d5, Size: 1]
	bool bWorldReadyCalled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d5, Size: 1]
	bool bBeingRotatedOrScaled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d5, Size: 1]
	bool bBeingTranslated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d5, Size: 1]
	bool bRotateInPlaceEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d5, Size: 1]
	bool bEditorPlaced;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d5, Size: 1]
	bool bPlayerPlaced;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d5, Size: 1]
	bool bShouldTick;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d5, Size: 1]
	bool bUsesDayPhaseChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d6, Size: 1]
	bool bIsDynamic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d6, Size: 1]
	bool bIsDynamicOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d6, Size: 1]
	bool bIsDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d6, Size: 1]
	bool bUseTickManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d6, Size: 1]
	bool bIsMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d6, Size: 1]
	bool bRegisteredForDayPhaseChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d6, Size: 1]
	bool bForceDamagePing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d6, Size: 1]
	bool bDestroyFoliageWhenPlaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d7, Size: 1]
	bool bObstructTrapTargeting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d7, Size: 1]
	bool bInstantDeath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d7, Size: 1]
	bool bDoNotBlockBuildings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d7, Size: 1]
	bool bForceBlockBuildings;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d7, Size: 1]
	bool bDestroyOnPlayerBuildingPlacement;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d7, Size: 1]
	bool bUseCentroidForBlockBuildingsCheck;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d7, Size: 1]
	bool bPredictedBuildingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 1]
	bool bIgnoreCollisionWithCriticalActors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d8, Size: 1]
	bool bIsPlayerBuildable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d8, Size: 1]
	bool bFireBuiltAndDestroyedEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d8, Size: 1]
	bool bStructurallySupportOverlappingActors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d8, Size: 1]
	bool bAllowInteract;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d8, Size: 1]
	bool bShowFirstInteractPrompt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d8, Size: 1]
	bool bShowSecondInteractPrompt;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d8, Size: 1]
	bool bAllowHostileBlueprintInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d9, Size: 1]
	bool bEndAbilitiesOnDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d9, Size: 1]
	bool bAlwaysUseNetCullDistanceSquaredForRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d9, Size: 1]
	bool bHighlightDirty;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d9, Size: 1]
	bool bCollisionBlockedByPawns;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d9, Size: 1]
	bool bAllowTeamDamage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d9, Size: 1]
	bool bIgnoreAffiliationInteractHighlight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d9, Size: 1]
	bool bSuppressInteractionWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3da, Size: 1]
	byte BuildingType;//[Offset: 0x3db, Size: 1]
	byte Team;//[Offset: 0x3dc, Size: 1]
	byte TeamIndex;//[Offset: 0x3dd, Size: 1]
	GameplayTagContainer ConstTags;//[Offset: 0x3e0, Size: 32]
	GameplayTagContainer StaticGameplayTags;//[Offset: 0x400, Size: 32]
	FText InteractionText;//[Offset: 0x420, Size: 24]
	GameplayTag CanInteractPerformNativeActionTag;//[Offset: 0x438, Size: 8]
	MulticastInlineDelegateProperty OnDied;//[Size: 16]
	MulticastInlineDelegateProperty OnDamaged;//[Size: 16]
	FortMission* AssociatedMissionParam;//[Offset: 0x460, Size: 8]
	FortPlacementActor* OriginatingPlacementActor;//[Offset: 0x468, Size: 8]
	float BRMinDrawDistance;//[Offset: 0x470, Size: 4]
	float BRMaxDrawDistance;//[Offset: 0x474, Size: 4]
	float StWMinDrawDistance;//[Offset: 0x478, Size: 4]
	float StWMaxDrawDistance;//[Offset: 0x47c, Size: 4]
	MulticastInlineDelegateProperty OnInteract;//[Size: 16]
	CurveTableRowHandle InteractionSpeed;//[Offset: 0x490, Size: 16]
	bool bShouldClearMarkerOnInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	int DataVersion;//[Offset: 0x4f0, Size: 4]
	float LastTakeHitTimeTimeout;//[Offset: 0x4f4, Size: 4]
	SoundBase* PlayHitSound;//[Offset: 0x4f8, Size: 8]
	float CullDistance;//[Offset: 0x500, Size: 4]
	float SnapGridSize;//[Offset: 0x504, Size: 4]
	float VertSnapGridSize;//[Offset: 0x508, Size: 4]
	Vector SnapOffset;//[Offset: 0x50c, Size: 12]
	Vector CentroidOffset;//[Offset: 0x518, Size: 12]
	Vector BaseLocToPivotOffset;//[Offset: 0x524, Size: 12]
	FString CustomState;//[Offset: 0x530, Size: 16]
	class ActorComponent[] ComponentTypesWhitelistedForReplication;//[Offset: 0x540, Size: 16]
	PrimitiveComponent*[] OverridePrimitivesToExcludeFoliage;//[Offset: 0x550, Size: 16]
	BuildingActorHotSpotConfig* HotSpotConfig;//[Offset: 0x560, Size: 8]
	MulticastInlineDelegateProperty OnBuildingHealthChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnActorHealthChanged;//[Size: 16]
	GUID SavedActorGuid;//[Offset: 0x588, Size: 16]
	float BaselineScale;//[Offset: 0x598, Size: 4]
	float AccumulatedDeltaSinceLastVisualsTick;//[Offset: 0x59c, Size: 4]
	ProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x5a0, Size: 8]
	float LifespanAfterDeath;//[Offset: 0x5a8, Size: 4]
	bool UseDefaultHealthBar();// 0xce43ce4
	void SnapDmgVisualsToCurrentHealth();// 0xce43cc8
	void SilentDie(const bool bPropagateSilentDeath);// 0xce43c10
	bool ShouldDisplayMobileInteractPrompt();// 0xce43bd0
	bool ShouldDisplayDamageNumbers();// 0xb5ee794
	bool ShouldDie(float Damage, Controller* EventInstigator, Actor* DamageCauser);// 0xce43a98
	void SetUsesDayPhaseChange(bool bUseDayPhase);// 0xce439e8
	void SetTeam(byte InTeam);// 0xb5ee6e4
	void SetSuppressHealthBar(bool bNewValue);// 0xce43930
	void SetQuestHighlight(bool Enabled);// 0xce43880
	void SetNavigationModifier(bool bEnableModifier);// 0xce437d0
	void SetNavigationIndestructible(const bool bNavIndestructible);// 0xce4371c
	void SetHealthBarIndicatorDifficultyRating(int InDisplayLevel);// 0xce43674
	void SetHealth(float NewHealth);// 0xce435cc
	void SetCustomState(FString NewState);// 0xce434c8
	void SetCanExportNavigationObstacle(bool InCanExportNavigationObstacle);// 0xce43418
	void SetCanBeSavedToCreativeVolume(bool bCanBeSaved);// 0xce43364
	void SetBRDrawDistances(float NewBRMinDrawDistance, float NewBRMaxDrawDistance);// 0xce43280
	void Resave();// 0xb5ee6d0
	void RemoveEditorOnlyInstanceGameplayTags(out const GameplayTagContainer TagsToRemove);// 0xce431b0
	void RemoveAbilitySystemComponentAfterAutoBuildIfFullHealth();// 0xce4319c
	void RefreshRemovedFoliageAroundBounds(bool bUseNonCollidingBounds);// 0xce430ec
	void PlacedByPlayer(const FortPlayerStateZone* PlayerState);// 0xbbc0600
	void PlacedByPlacementTool();// 0xce430d0
	void OnWorldReady();// 0xbbc0600
	void OnSetCustomDepthStencilValue(out const PrimitiveComponent*[] PrimComponents, bool bUseCustomDepth, int StencilValue, out bool bOutConsume);// 0xbbc0600
	void OnRep_Team();// 0xb5ee6b4
	void OnRep_InstantDeath();// 0xb5ee6a0
	void OnRep_InitialOverlappingVehicles();// 0xb5ee684
	void OnRep_CustomState();// 0xce430b4
	void OnRep_CurrentBuildingLevel();// 0xce43098
	void OnRep_BuildingAttributeSet();// 0xce43084
	void OnRep_bCollisionBlockedByPawns();// 0xb5ee668
	void OnRep_AbilitySystemComponent();// 0xce43070
	void OnMatchStarted();// 0xbbc0600
	void OnDeathServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDeathPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xb5ee530
	void OnDamageServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDamagePlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnBuildingActorInitialized(byte InitializationReason, byte BuildingPersistentState);// 0xce42f80
	static BuildingActor* K2_SpawnBuildingActor(const Object* WorldContextObject, class BuildingActor Class, out const Transform Transform);// 0xce42e30
	bool IsPlayerBuilt();// 0xce42df8
	bool IsDamaged();// 0xce42dc0
	bool IsAcceptablePositionForPlacement(out const Vector InLocation, out const Rotator InRotation, FortDecoTool* DecoTool, bool bIsCDO, out FText OutFailureReason);// 0xce42b6c
	void InitializeKismetSpawnedBuildingActor(BuildingActor* BuildingOwner, FortPlayerController* SpawningController, bool bUsePlayerBuildAnimations);// 0xce42a38
	bool HasHealthLeft();// 0xb5ee4f8
	void HandleDestroyed();// 0xb5ee4dc
	float GetShieldPercent();// 0xce429fc
	float GetShieldOrHealthPercent();// 0xce429c8
	float GetShield();// 0xce4298c
	static FortPhysicsObjectComponent* GetPhysicsObjectComponent(BuildingActor* Building);// 0xce428e4
	FortPlayerState* GetOwningPlayerState();// 0xce428b0
	Controller* GetOwningController();// 0xce4287c
	float GetMissingHealth();// 0xce42848
	float GetMaxShield();// 0xce4280c
	float GetMaxHealth();// 0xce427d0
	FName GetLootTierGroupOverride();// 0xce4279c
	float GetHealthPercent();// 0xb5ee4a0
	float GetHealth();// 0xce42760
	void GetEditorTestTags(out GameplayTagContainer TagContainer);// 0xce42690
	FString GetCustomState();// 0xce425e8
	int GetCurrentBuildingLevel();// 0xce425ac
	Vector GetCentroid();// 0xce4256c
	void GameplayCue_InstantDeath(byte EventType, GameplayCueParameters Parameters);// 0xb5ee16c
	void GameplayCue_Healing(byte EventType, GameplayCueParameters Parameters);// 0xce4227c
	void GameplayCue_Damage(byte EventType, GameplayCueParameters Parameters);// 0xbb5d1b8
	void ForceBuildingHealth(float NewHealth);// 0xce421d4
	void CustomStateChanged();// 0xbbc0600
	void ClearPlayedDying();// 0xce421b4
	bool BlueprintOnLocalInteract(FortPlayerPawn* InteractingPawn);// 0xbbc0600
	void BlueprintOnInterruptInteract();// 0xbbc0600
	void BlueprintOnInteract(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted);// 0xbbc0600
	void BlueprintOnBeginInteract(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted, const byte InteractionType);// 0xbbc0600
	bool BlueprintGetInteractionTime(const FortPawn* InteractingPawn, out float OutInteractionTime, const byte InteractionBeingAttempted);// 0xb5ee018
	FText BlueprintGetInteractionString(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted);// 0xbbc0600
	FText BlueprintGetFailedInteractionString(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted);// 0xbbc0600
	void BlueprintDie(GameplayTag DeathReason, Controller* Killer, Actor* DamageCauser);// 0xce42090
	bool BlueprintCanInteract(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted, const byte InteractionType);// 0xbbc0600
	void AddEditorOnlyInstanceGameplayTags(out const GameplayTagContainer NewTags);// 0xce41fc0

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 16]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 16]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 4]
	Color DrawColor;//[Offset: 0x34, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 1]

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 16]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 16]

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 12]
	Vector Right;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 4]
	float SnapRadius;//[Offset: 0xc, Size: 4]
	float SnapHeight;//[Offset: 0x10, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 1]
	byte Direction;//[Offset: 0x1c, Size: 1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 8]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 12]
	Vector LeftEnd;//[Offset: 0x3c, Size: 12]
	Vector RightStart;//[Offset: 0x48, Size: 12]
	Vector RightEnd;//[Offset: 0x54, Size: 12]

--------------------------------
Class: FortAthenaVehicle.FortPhysicsPawn.Pawn.Actor.Object
	PredictionReplicationProxy_AP NetPredictionProxy_AP;//[Offset: 0x3c8, Size: 24]
	PredictionReplicationProxy_SP NetPredictionProxy_SP;//[Offset: 0x3e0, Size: 24]
	AthenaItemWrapDefinition* SoftOverrideItemWrap;//[Offset: 0x3f8, Size: 40]
	AthenaItemWrapDefinition* OverrideItemWrap;//[Offset: 0x420, Size: 8]
	MulticastInlineDelegateProperty OnSleepStateChangedDelegate;//[Size: 16]
	SplineComponent* BoundsXYSplineComponent;//[Offset: 0x460, Size: 8]
	bool bDisableUpdateForcedDebugInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x478, Size: 1]
	bool bDisableUpdateAutoRun;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x478, Size: 1]
	bool bDisableUpdateHonk;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x478, Size: 1]
	bool bDisableUpdateIgnoredBuildingActors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x478, Size: 1]
	bool bDisableUpdateIngoredPawnsForDamage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x478, Size: 1]
	bool bDisableUpdateSafeTeleport;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x478, Size: 1]
	bool bUseForceHeading;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x478, Size: 1]
	bool IndicatorEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 1]
	bool bDestroyOnLastExit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x479, Size: 1]
	bool bShowDamageNumbers;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x479, Size: 1]
	bool bShowDamageNumbersAtImpactLocation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x479, Size: 1]
	bool bPlayDamageAudio;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x479, Size: 1]
	bool bShowVehicleHealthBarOnPlayerHUD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x479, Size: 1]
	bool bDestroyBuildingSMActorOnForceExit;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x479, Size: 1]
	bool bIgnoreAllFallingDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x479, Size: 1]
	bool bIgnoreNextFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47a, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47a, Size: 1]
	bool bPlayedDying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47a, Size: 1]
	bool bPendingDeath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47a, Size: 1]
	bool bForceDeath;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47a, Size: 1]
	bool bHasDriver;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47a, Size: 1]
	bool bHasPassengers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47a, Size: 1]
	bool bIsTouchingAnything;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47a, Size: 1]
	bool bIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47b, Size: 1]
	bool bIsInWaterBody;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47b, Size: 1]
	bool bIsOverlappingWaterBody;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47b, Size: 1]
	bool bIsFullyInWaterBody;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47b, Size: 1]
	bool bCanDriveOnIncline;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47b, Size: 1]
	bool bCanCoastOnIncline;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47b, Size: 1]
	bool bWheelsOnGround;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47b, Size: 1]
	bool bAnyWheelsOnGround;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47b, Size: 1]
	bool bIsTouchingDrivableGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 1]
	bool bIsTouchingGroundWithoutWheels;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47c, Size: 1]
	bool bAllowInteractBetweenFortVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47f, Size: 1]
	bool bCanPassengerPawnsTakeDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47f, Size: 1]
	bool bOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 1]
	bool bLeakingFuel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x480, Size: 1]
	bool bEnableCurieMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x480, Size: 1]
	bool bEnforceTeamRestriction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x480, Size: 1]
	MulticastInlineDelegateProperty OnPawnEnteredVehicleAtSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnEnteredVehicleSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnExitedVehicleSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnExitedVehicleFromSeat;//[Size: 16]
	bool bWaitingForSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c8, Size: 1]
	bool bAttemptAsyncOrientationCorrection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c8, Size: 1]
	bool bIsAsyncCorrectingOrientation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c8, Size: 1]
	bool bAlwaysCreateNavComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c9, Size: 1]
	bool bAllowInteractBetweenFortVolumes_Runtime;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c9, Size: 1]
	bool bTricksEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c9, Size: 1]
	float FireDamageTickTimer;//[Offset: 0x4cc, Size: 4]
	float CurrentFOV;//[Offset: 0x4d0, Size: 4]
	GameplayTagContainer FireEnvDamageTags;//[Offset: 0x4d8, Size: 32]
	SlateBrushAsset* DriverReticleBrush;//[Offset: 0x4f8, Size: 8]
	float IndicatorAudibleDistance;//[Offset: 0x508, Size: 4]
	Texture* IndicatorIcon;//[Offset: 0x510, Size: 8]
	LinearColor IndicatorTint;//[Offset: 0x518, Size: 16]
	float WaterEffectsVehicleMaxSpeedKmh;//[Offset: 0x528, Size: 4]
	NiagaraSystem* WaterEffectsAsset;//[Offset: 0x530, Size: 8]
	NiagaraComponent* WaterEffectsComponent;//[Offset: 0x538, Size: 8]
	GameplayTagContainer GameplayTags;//[Offset: 0x548, Size: 32]
	IgnoredPawn[] PawnsToIgnoreForDamge;//[Offset: 0x568, Size: 16]
	FortPawn*[] PawnsToIgnoreForCollision;//[Offset: 0x578, Size: 16]
	FortPawn*[] IgnoredPawnsPendingTeleport;//[Offset: 0x588, Size: 16]
	float LastPropImpactImpulseTime;//[Offset: 0x598, Size: 4]
	PredictedDestroyedBuilding[] PredictedDestroyedBuildings;//[Offset: 0x5a0, Size: 16]
	BuildingEditModeMetadata*[] WallsVehicleCanDestroy;//[Offset: 0x5b0, Size: 16]
	BuildingEditModeMetadata*[] WallsVehicleCannotDestroyWhenBoosting;//[Offset: 0x5c0, Size: 16]
	class BuildingActor[] BuildingPropClassesVehicleCanDestroy;//[Offset: 0x5d0, Size: 16]
	class BuildingActor[] BuildingPropClassesVehicleCannotDestroyWhenBoosting;//[Offset: 0x5e0, Size: 16]
	interface class[] SeatInputProviders;//[Offset: 0x5f0, Size: 16]
	FortAthenaVehicleInputState EmptyDriverInputState;//[Offset: 0x600, Size: 44]
	Vector AverageSpringNormal;//[Offset: 0x62c, Size: 12]
	float TopSpeedCurrentMultiplier;//[Offset: 0x638, Size: 4]
	float PushForceCurrentMultiplier;//[Offset: 0x63c, Size: 4]
	float SteeringAngle;//[Offset: 0x650, Size: 4]
	float FrontLateralFrictionRuntimeMultiplier;//[Offset: 0x678, Size: 4]
	float RearLateralFrictionRuntimeMultiplier;//[Offset: 0x67c, Size: 4]
	Vector LocalRearFrictionPt;//[Offset: 0x680, Size: 12]
	Vector LocalFrontFrictionPt;//[Offset: 0x68c, Size: 12]
	float FrontMassRatio;//[Offset: 0x698, Size: 4]
	float RearMassRatio;//[Offset: 0x69c, Size: 4]
	byte PrimarySurfaceType;//[Offset: 0x726, Size: 1]
	byte WeaponResponseType;//[Offset: 0x727, Size: 1]
	byte VTDMode;//[Offset: 0x728, Size: 1]
	byte SurfaceTypeVehicleOn;//[Offset: 0x72c, Size: 1]
	int ForcedMaterialVariantIndex;//[Offset: 0x730, Size: 4]
	FortRechargingActionTimer FuelCharge;//[Offset: 0x738, Size: 216]
	MulticastInlineDelegateProperty OnRechargeableFuelAboveThreshold;//[Size: 16]
	MulticastInlineDelegateProperty OnRechargeableFuelBelowThreshold;//[Size: 16]
	MulticastInlineDelegateProperty OnOutOfRechargeableFuel;//[Size: 16]
	MulticastInlineDelegateProperty OnNotOutOfRechargeableFuel;//[Size: 16]
	FortPhysicsVehicleConfigs* FortPhysicsVehicleConfigs;//[Offset: 0x850, Size: 8]
	MulticastInlineDelegateProperty OnMountedWeaponFiredEvent;//[Size: 16]
	float SeatSwitchCooldown;//[Offset: 0x86c, Size: 4]
	GameplayTagContainer VehicleTags;//[Offset: 0x880, Size: 32]
	VehicleSpringInfo[] Springs;//[Offset: 0x8a0, Size: 16]
	SpringGroundTriangle GroundTriangle;//[Offset: 0x8b0, Size: 24]
	SMVehicleGear[] Gears;//[Offset: 0x8c8, Size: 16]
	SMVehicleGear[] SprintGears;//[Offset: 0x8d8, Size: 16]
	SMVehicleGear[] ReverseGears;//[Offset: 0x8e8, Size: 16]
	float ForwardDrivingAntiGravityScaler;//[Offset: 0x8f8, Size: 4]
	float CameraSpaceForwardDistanceOffset;//[Offset: 0x8fc, Size: 4]
	float CameraAssistStrength;//[Offset: 0x904, Size: 4]
	float CameraAssistRampUp;//[Offset: 0x908, Size: 4]
	bool bAllowAutoCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 1]
	float TimeToAutoCamera;//[Offset: 0x910, Size: 4]
	float MinSpeedForAutoCamera;//[Offset: 0x914, Size: 4]
	float CameraAssistBaseHeight;//[Offset: 0x918, Size: 4]
	float CameraAssistUpHillScaler;//[Offset: 0x91c, Size: 4]
	float CameraAssistSteerScaler;//[Offset: 0x920, Size: 4]
	float CameraAssistForwardScale;//[Offset: 0x924, Size: 4]
	float AngleDegreesThresholdFromCurrentCameraToTarget;//[Offset: 0x928, Size: 4]
	float CameraFOVOffset;//[Offset: 0x92c, Size: 4]
	class FortCameraMode* TetheredCamera;//[Offset: 0x930, Size: 8]
	class GameplayEffect* PlayerCollisionGameplayEffect;//[Offset: 0x968, Size: 8]
	PrimitiveComponent* OverlapComponent;//[Offset: 0x970, Size: 8]
	PrimitiveComponent* WaterOverlapComponent;//[Offset: 0x978, Size: 8]
	float WaterLevel;//[Offset: 0x984, Size: 4]
	float VehicleMinHorSpeedToDamage;//[Offset: 0x98c, Size: 4]
	float VehicleMaxHorSpeedToDamage;//[Offset: 0x990, Size: 4]
	float VehicleMinHorSpeedDamage;//[Offset: 0x994, Size: 4]
	float VehicleMaxHorSpeedDamage;//[Offset: 0x998, Size: 4]
	float ImpulseResponseMultiplier;//[Offset: 0x99c, Size: 4]
	float ImpulseResponseZBias;//[Offset: 0x9a0, Size: 4]
	float BrakeAboveTopSpeedDelta;//[Offset: 0x9a4, Size: 4]
	float TimeToIdleBrake;//[Offset: 0x9a8, Size: 4]
	float DragCoefficient;//[Offset: 0x9ac, Size: 4]
	float PrimaryCameraPitchConstraint;//[Offset: 0x9b0, Size: 4]
	float PrimaryCameraYawConstraint;//[Offset: 0x9b4, Size: 4]
	float CachedSpeed;//[Offset: 0x9b8, Size: 4]
	FName MainBodyCollision;//[Offset: 0x9bc, Size: 8]
	Vector TestInitialLinearVelocity;//[Offset: 0x9c4, Size: 12]
	Vector TestInitialAngularVelocity;//[Offset: 0x9d0, Size: 12]
	HitResult LookAheadHit;//[Offset: 0x9dc, Size: 136]
	FortVehicleTrickSet* TrickSet;//[Offset: 0xa68, Size: 8]
	FName PushForceSocket;//[Offset: 0xa70, Size: 8]
	FName FrontWheelsSocket;//[Offset: 0xa78, Size: 8]
	FName RearWheelSockets;//[Offset: 0xa80, Size: 8]
	PrimitiveComponent* WaterBodyOverlapComponent;//[Offset: 0xa88, Size: 8]
	WeaponHitNotifyAudioBank* DefaultHitNotifyAudioBank;//[Offset: 0xa90, Size: 8]
	MulticastInlineDelegateProperty OnHandleOutOfHealthDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnHealthChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnDamageablePartHealthChanged;//[Size: 16]
	FName BulletCollisionComponentTag;//[Offset: 0xac8, Size: 8]
	class GameplayEffect* GEDamagePassengersOnDeath;//[Offset: 0xad0, Size: 8]
	MulticastInlineDelegateProperty OnVehicleSquadChanged;//[Size: 16]
	float LifespanAfterDeath;//[Offset: 0xae8, Size: 4]
	float LastDamagedTime;//[Offset: 0xaec, Size: 4]
	SeatTransitionMontage[] SeatTransitions;//[Offset: 0xaf0, Size: 16]
	VehicleRuntimeModifiers RuntimeModifiedProperties;//[Offset: 0xb60, Size: 2]
	BuildingActor*[] LocallyIgnoredBuildingActors;//[Offset: 0xb68, Size: 16]
	Vector PreviousBuildingQueryPosition;//[Offset: 0xb78, Size: 12]
	SoundEffectSourcePresetChain* EmoteAudioSourcePresetChain;//[Offset: 0xbc0, Size: 8]
	SoundAttenuation* EmoteAudioAttenuation;//[Offset: 0xbc8, Size: 8]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0xbd0, Size: 104]
	MulticastInlineDelegateProperty OnSurfaceTypeVehicleIsOnChangedDelegate;//[Size: 16]
	FortAbilitySet* StartupAbilitySet;//[Offset: 0xc48, Size: 8]
	FortVehicleSeatComponent* VehicleSeatComponent;//[Offset: 0xc50, Size: 8]
	FortVehicleInteractionOverrideComponent* VehicleInteractionOverrideComponent;//[Offset: 0xc58, Size: 8]
	FortSkyTubePhysicsComponent* SkyTubePhysicsComponent;//[Offset: 0xc60, Size: 8]
	FortVehiclePontoonsComponent* PontoonsComponent;//[Offset: 0xc68, Size: 8]
	FortAthenaTrackableAIObjectComponent* TrackableAIObjectComponent;//[Offset: 0xc70, Size: 8]
	AthenaCarPlayerSlot[] PlayerSlots;//[Offset: 0xc78, Size: 16]
	AthenaCarPlayerSlot[] PlayerSlotsBackup;//[Offset: 0xc88, Size: 16]
	AthenaCarPlayerSlotUnreplicated[] PlayerSlotsUnreplicated;//[Offset: 0xc98, Size: 16]
	FortVehicleMovementSet* VehicleMovementSet;//[Offset: 0xca8, Size: 8]
	ReplicatedAthenaVehicleAttributes VehicleAttributes;//[Offset: 0xcb0, Size: 28]
	FortVehicleImminentCollisionComponent* ImminentCollisionComponent;//[Offset: 0xcd0, Size: 8]
	BuildingActor*[] IgnoredBuildingActors;//[Offset: 0xcd8, Size: 16]
	VehicleDamageablePart[] DamageableParts;//[Offset: 0xce8, Size: 16]
	VehicleTargetOrientation CorrectTargetOrientation;//[Offset: 0xcfc, Size: 36]
	class FortCameraMode_AthenaVehicle* CameraModeClass;//[Offset: 0xd20, Size: 8]
	class AnimInstance* DrivingAnimClass;//[Offset: 0xd28, Size: 8]
	class AnimInstance* DriverAnimLayerOverlayClass;//[Offset: 0xd30, Size: 8]
	class AnimInstance* PassengerAnimLayerOverlayClass;//[Offset: 0xd38, Size: 8]
	FortVehicleAnimSet* AnimSet;//[Offset: 0xd40, Size: 8]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x1088, Size: 16]
	FortAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x1098, Size: 8]
	FortHealthSet* HealthSet;//[Offset: 0x10a0, Size: 8]
	FortAthenaImpulseResponseSet* ImpulseResponseSet;//[Offset: 0x10a8, Size: 8]
	FortDamageSet* DamageSet;//[Offset: 0x10b0, Size: 8]
	FortHealthBarIndicator* HealthBarIndicator;//[Offset: 0x10b8, Size: 8]
	VehicleCosmeticInfo VehicleCosmeticInfo;//[Offset: 0x10c0, Size: 56]
	FortVehicleNavModifierComponent* NavModifierComponent;//[Offset: 0x1110, Size: 8]
	bool bShouldSleepAtSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1118, Size: 1]
	bool WheelsOnGround();// 0xcf27648
	void WeaponFired(FortVehicleSeatWeaponComponent* WeaponComponent, float Overheat);// 0xbbc0600
	void WakeUpOnGroundDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcf273e8
	void WakeUp();// 0xcf273cc
	bool VehicleIsInSkyTube();// 0xcf2738c
	void UseOrExitReleasedFromSeat(const int FromSeatIndex);// 0xcf272dc
	void UseOrExitPressedFromSeat(const int FromSeatIndex);// 0xcf2722c
	void UpdateClientWithVehicleTestInput(Vector LinearVelocity, Vector AngularVelocity);// 0xcf2713c
	bool ShouldShowSoundIndicator();// 0xb637fec
	void SetUnoccupiedAutoDestroy(float UnoccupiedTime);// 0xcf27094
	void SetTeamID(const byte NewTeamID);// 0xcf26fec
	void SetSupportCosmeticWrap(const bool bNewSupportCosmeticWrap);// 0xcf26f34
	void SetStaticPhysics(const bool bStatic);// 0xcf26e84
	void SetSpringEnabled(const int SpringIndex, const bool bEnabled);// 0xcf26d90
	void SetShootingCone(const int SeatIdx, AthenaVehicleShootingCone InCone);// 0xcf26c98
	void SetPropDestructionParams(class BuildingActor[] InBuildingPropClassesVehicleCanDestroy, class BuildingActor[] InBuildingPropClassesVehicleCannotDestroyWhenBoosting, BuildingEditModeMetadata*[] InWallsVehicleCanDestroy, BuildingEditModeMetadata*[] InWallsVehicleCannotDestroyWhenBoosting);// 0xb637d74
	void SetImpulseResponseZBias(const float ZBias);// 0xcf26bf0
	void SetImpulseResponseMultiplier(const float Multiplier);// 0xcf26b48
	void SetIgnoreNextFallingDamage(bool bInIgnoreNextFallingDamage);// 0xcf26a90
	void SetIgnoreAllFallingDamage(bool InIgnoreAllFallingDamage);// 0xcf269d8
	void SetHealthPercent(float Percent);// 0xcf26928
	void SetForceInfiniteFuel(const bool bNewForceInfiniteFuel);// 0xcf26870
	void SetEnforceTeamRestriction(const bool bNewEnforceTeamRestriction);// 0xcf267c0
	void SetDyingPhysics();// 0xcf267a4
	void SetCurrentFocusedSocketLocation(const int SeatIndex);// 0xcf266f4
	void SetAllowInteractionBetweenFortVolumes(bool bInteractBetweenVolumes);// 0xcf2663c
	void SetActorBase(Actor* InActorBase, const int SeatIndex);// 0xcf2654c
	void ServerUsingRiftPortal(Actor* RiftPortal);// 0xcf2649c
	void ServerStartFire(byte FireModeNum);// 0xcf263ec
	void ServerSetIgnoreNextFallingDamage(bool InIgnoreNextFallingDamage);// 0xcf26334
	void ServerSetIgnoreAllFallingDamage(bool InIgnoreAllFallingDamage);// 0xcf2627c
	void ServerReceiveInputCmd(int ClientFrameNumber, const byte[] Data);// 0xcf26180
	bool ServerOnAttemptInteract(out const InteractionType InteractType);// 0xcf260b4
	bool SeatIsTurret(const int SeatIndex);// 0xcf25ff8
	void ResetTrick();// 0xcf25fdc
	void RepairDamageablePart(out const FName ShapeName);// 0xcf25f28
	void RepairAllDamageableParts();// 0xcf25f0c
	bool RearLateralFrictionHasReachedMax();// 0xcf25ed4
	bool PlayerIsTryingToReverse();// 0xb637d34
	bool PlayerIsTryingToMoveForward();// 0xb637cf4
	void PawnHitByVehicle(FortPawn* Pawn, out const Vector ImpactPoint, out const Vector ImpactNormal, const Vector LaunchVector);// 0xbbc0600
	void OverridePontoonRadiusOnServer(int PontoonIndex, float NewRadius);// 0xcf25dec
	void OverrideCurrentWrap(const AthenaItemWrapDefinition* LoadedWrap);// 0xcf25d3c
	void OnSurfaceTypeVehicleIsOnChanged(byte SurfaceTypeVehicleIsOn);// 0xbbc0600
	void OnStopTick();// 0xbbc0600
	void OnStartTick();// 0xbbc0600
	void OnStartFire(byte FireModeNum);// 0xbbc0600
	void OnSleepStateChanged(const bool bAwake);// 0xbbc0600
	void OnRep_VehicleAttributes();// 0xcf25d28
	void OnRep_SurfaceTypeVehicleOn(byte PreviousSurfaceOn);// 0xb637c4c
	void OnRep_PendingDeath();// 0xcf25d0c
	void OnRep_OverrideWrap();// 0xb637c38
	void OnRep_OnFire();// 0xb637c1c
	void OnRep_NetPrediction_SP();// 0xcf25cf8
	void OnRep_NetPrediction_AP();// 0xcf25ce4
	void OnRep_LeakingFuel();// 0xcf25cc8
	void OnRep_IgnoredBuildingActors();// 0xb637c08
	void OnRep_HealthSet();// 0xcf25cb4
	void OnRep_DamageableParts(out const VehicleDamageablePart[] PrevDamageableParts);// 0xb637b44
	void OnRep_CorrectTargetOrientation();// 0xcf25ca0
	void OnRep_AbilitySystemComponent();// 0xcf25c8c
	void OnPxComponentWake(PrimitiveComponent* WakingComponent, FName BoneName);// 0xb637a60
	void OnPawnExitVehicle(FortPlayerPawn* PlayerPawn, FName ExitSocketName);// 0xcf25ba0
	void OnPawnEnterVehicle(FortPlayerPawn* PlayerPawn, const int SeatIdx);// 0xbbc0600
	void OnIsSprintingChanged();// 0xbbc0600
	void OnImpactDamageApplied(const float Damage, const Vector ImpactNormal);// 0xbbc0600
	void OnHonk();// 0xbbc0600
	void OnHoldExitStopped(FortPawn* ExitingPawn);// 0xbbc0600
	void OnHoldExitStarted(FortPawn* ExitingPawn, const float ExitDuration);// 0xbbc0600
	void OnHitBuildingActor(out const HitResult HitResult, const float ModifiedDamageToApply);// 0xbbc0600
	void OnHealed(float Heal, out const GameplayTagContainer HealTags, out const GameplayEffectContextHandle EffectContext, Controller* EventInstigator, Actor* HealCauser);// 0xbbc0600
	void OnFuelTouchedFire(Actor* SourceActor);// 0xbbc0600
	void OnExitOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xb6378fc
	void OnExitedWaterVolume(out const Vector WaterSurfacePoint);// 0xbbc0600
	void OnExitedWaterBody(FortWaterBodyActor* WaterBody);// 0xbbc0600
	void OnEnterOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xb6376e8
	void OnEnteredWaterVolume(out const Vector WaterSurfacePoint);// 0xbbc0600
	void OnEnteredWaterBody(FortWaterBodyActor* WaterBody);// 0xbbc0600
	void OnDeathPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDamagePlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDamaged(float Damage, out const GameplayTagContainer DamageTags, out const GameplayEffectContextHandle EffectContext, Controller* EventInstigator, Actor* DamageCauser);// 0xbbc0600
	void OnCollisionHitEffects(out const Vector HitLocation, out const Vector HitNormalImpulse, out const Vector HitFrictionImpulse, out const Vector HitNormal, Actor* HitActor, byte HitSurfaceType);// 0xbbc0600
	void OnCollisionHitDamageEffects(float DamageTaken);// 0xbbc0600
	float ModifyIncomingDamage(float Damage, out const GameplayTagContainer InTags, out const GameplayEffectContextHandle EffectContext, Controller* EventInstigator, Actor* DamageCauser);// 0xcf25938
	void K2_ApplyCosmeticWrap(const AthenaItemWrapDefinition* LoadedWrap);// 0xbbc0600
	bool IsSprinting();// 0xcf258f8
	bool IsSlowEnoughToInteract();// 0xcf258b8
	bool IsScrapingSidesOrTop();// 0xcf25878
	bool IsRechargeableFuelBelowThreshold();// 0xcf25830
	bool IsOverlappingWaterBody();// 0xb6376a8
	bool IsOutOfRechargeableFuel();// 0xcf257e0
	bool IsMagnetizedForSkyTubes();// 0xcf257a0
	bool IsJumping();// 0xcf25768
	bool IsInWaterBody();// 0xb637668
	bool IsInWater();// 0xb637628
	bool IsInSkyTube();// 0xcf25728
	bool IsInReverseGear();// 0xcf256e8
	bool IsInAir();// 0xcf256a8
	bool IsHonking();// 0xcf25668
	bool IsEnforcingTeamRestriction();// 0xcf25630
	bool IsCorrectingOrientation();// 0xcf255f0
	bool IsCameraControlledRotation();// 0xcf255b8
	bool IsBraking();// 0xcf25578
	bool IsAsleep();// 0xcf25538
	bool IsAirControlling();// 0xcf254f8
	bool HasEverContainedPlayers();// 0xcf254b8
	bool HasDriver();// 0xb6375e8
	bool HasConstraints();// 0xcf25480
	void GunOverheat(FortVehicleSeatWeaponComponent* WeaponComponent);// 0xbbc0600
	Vector GetVehicleVelocity();// 0xcf25440
	float GetTotalSpeedKmh();// 0xb6375ac
	byte GetTeamID();// 0xcf2540c
	float GetSteeringAngle();// 0xcf253d8
	Vector GetStandingFiringOffsetForSeat(const int SeatIdx);// 0xcf2531c
	float GetSpringLengthRatio(int SpringIdx);// 0xcf2526c
	bool GetShootingCone(const int SeatIdx, out Transform OutConeTM, out AthenaVehicleShootingCone OutCone);// 0xcf250e8
	FortVehicleSeatWeaponComponent* GetSeatWeaponComponent(const int SeatIndex);// 0xcf25030
	float GetSeatSwitchCooldown(const int SeatIndex);// 0xcf24f78
	Vector GetPreviousLinearVelocity();// 0xcf24f54
	Vector GetPreviousLinearAcceleration();// 0xcf24f30
	float GetPreviousForwardSpeedKmh();// 0xcf24ef4
	FortPlayerPawn* GetPawnAtSeat(const int SeatIdx);// 0xcf24e3c
	float GetMaxHealth();// 0xb637570
	Vector GetIndicatorRelativeOffset();// 0xcf24dfc
	float GetHealth();// 0xb637534
	float GetForwardSpeedKmh();// 0xcf24dc0
	FortPlayerPawn* GetDriver();// 0xcf24d84
	FString GetDisplayName();// 0xcf24cdc
	float GetDesiredForwardVelocityDelta();// 0xcf24ca0
	float GetDesiredForwardVelocity();// 0xcf24c64
	float GetDesiredForwardSpeedKmh();// 0xcf24c28
	float GetCurrentSignificance();// 0xcf24bf4
	VehicleRuntimeModifiers GetCurrentRuntimeProperties();// 0xcf24bbc
	int GetCurrentGear();// 0xcf24b88
	float GetCurrentFOV();// 0xcf24b4c
	float GetCurrentForwardVelocity();// 0xcf24b10
	int GetCurrentBudget();// 0xcf24adc
	float GetCurrentBrakeForce(float ForwardSpeedKmH);// 0xcf24a24
	Vector GetCrouchingFiringOffsetForSeat(const int SeatIdx);// 0xcf24968
	float GetBrakingDelta();// 0xcf2492c
	FortPlayerPawn*[] GetAllPassengers();// 0xb63748c
	void GameplayCue_Damage(byte EventType, GameplayCueParameters Parameters);// 0xb637158
	void GamepadUseOrExitReleasedFromSeat(const int FromSeatIndex);// 0xcf2487c
	void GamepadUseOrExitPressedFromSeat(const int FromSeatIndex);// 0xcf247cc
	bool ForceSeatSinglePawn(FortPlayerPawn* PawnToSeat, int SeatIndex);// 0xcf246d0
	void ForceSeatPawns(FortPlayerPawn*[] PawnsToSeat);// 0xcf245ec
	int FindSeatIndex(const FortPlayerPawn* PlayerPawn);// 0xcf24534
	bool EjectSeat(const int SeatIndex);// 0xcf24478
	bool EjectPlayerPawn(const FortPlayerPawn* InPlayerPawn);// 0xcf243bc
	void EjectAllPlayers();// 0xcf243a0
	void DisableTrickCredit(float Duration);// 0xcf242f0
	void DestroyVehicle();// 0xcf242d4
	void DestroyAllDamageableParts();// 0xcf242c0
	void DemagnetizeFromSkyTube();// 0xcf242a4
	void DebugDrawImpactBucket(Vector Location, Vector ImpactVector, Color Color);// 0xcf24178
	bool ContainsPlayers();// 0xcf24138
	bool ClientIsDriver();// 0xcf240f8
	void ClientBroadcastAbilityImpactAtLocation(Object* WorldContextObject, SoundBase* InSound, Object* InInstigator, const Vector Position, float Radius, FName Tag, const bool bSubtractLocalNoise);// 0xcf23ec8
	bool CanTeleport();// 0xcf23e88
	bool CanShootFromSeat(const int SeatIndex);// 0xcf23dcc
	bool CanForcePawnToSeat(FortPlayerPawn* PawnToSeat, const int SeatIndex);// 0xcf23cd0
	bool CanDriveOnIncline();// 0xcf23cb0
	bool CanCorrectOrientation(FortPawn* FP);// 0xcf23bf4
	bool CanContainPlayers();// 0xcf23bb4
	bool CanAntigravityOnIncline();// 0xcf23b94
	void BroadcastResetWaterIdleTimeEmpty();// 0xb63713c
	bool BP_CanInteract(FortPlayerController* FortPC);// 0xb637080
	bool BlocksBuilding();// 0xcf23b54
	MaterialInstanceDynamic* ApplyMaterialAndUseWrapIfPossible(MaterialInterface* MaterialToUse, int SlotIndex, bool bAlwaysCreateMID);// 0xb636f44
	bool AnyWheelsOnGround();// 0xcf23b14
	bool AllowInteractionBetweenFortVolume();// 0xcf23ad4

--------------------------------
Class: FortPhysicsPawn.Pawn.Actor.Object
	VehicleSafeTeleportInfo SafeTeleportInfo;//[Offset: 0x27c, Size: 24]
	float GravityMultiplier;//[Offset: 0x294, Size: 4]
	bool bUseNetPrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	void ServerUpdateStateSync(const byte[] StateSyncData);// 0xd11ace0
	void ServerMove(ReplicatedPhysicsPawnState InState);// 0xd11ac14
	void OnRep_SafeTeleportInfo();// 0xd11ac00
	void OnRep_GravityMultiplier();// 0xd11abec
	void ClientBroadcastHitDetection(Pawn* ImpulseInstigator, float Radius, float Relevancy, const Vector HalfPoints, const Vector DoublePoints);// 0xb6a1dfc
	void ClientAckGoodMove(uint32 MoveId);// 0xd11ab3c

--------------------------------
Class: ReplicatedPhysicsPawnState
	Vector_NetQuantize100 Translation;//[Offset: 0x0, Size: 12]
	Quat Rotation;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize10 AngularVelocity;//[Offset: 0x2c, Size: 12]
	uint16 SyncKey;//[Offset: 0x38, Size: 2]

--------------------------------
Class: PredictionReplicationProxy_AP
	int ClientFrameNumber;//[Offset: 0x0, Size: 4]
	int ServerFrameNumber;//[Offset: 0x4, Size: 4]
	byte[] Data;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PredictionReplicationProxy_SP
	int ServerFrameNumber;//[Offset: 0x0, Size: 4]
	byte[] Data;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleSafeTeleportInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AthenaItemWrapDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class CustomItemWrapModifier* ItemWrapModifierBlueprint;//[Offset: 0x6d0, Size: 40]
	MaterialInterface* ItemWrapMaterial;//[Offset: 0x6f8, Size: 40]

--------------------------------
Class: AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bIsShuffleTile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 1]
	bool bIsOwnedByCampaignHero;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c0, Size: 1]
	bool bHasMoreThanOneCharacterPartVariant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c0, Size: 1]
	bool bHideIfNotOwned;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c0, Size: 1]
	bool bInitializedConfiguredDynamicInstallBundles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c2, Size: 1]
	bool bDynamicInstallBundlesError;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c2, Size: 1]
	bool bDynamicInstallBundlesCancelled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c2, Size: 1]
	bool bDynamicInstallBundlesComplete;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c2, Size: 1]
	double DynamicInstallBundlesUpdateStartTime;//[Offset: 0x3c8, Size: 8]
	uint32 DynamicInstallBundleRequestRefCount;//[Offset: 0x3d0, Size: 4]
	int DynamicInstallBundleRequestRetryCount;//[Offset: 0x3d4, Size: 4]
	enum VariantUnlockType;//[Offset: 0x3dc, Size: 1]
	Rotator PreviewPawnRotationOffset;//[Offset: 0x3e0, Size: 12]
	class SoundLibrary[] FoleyLibraries;//[Offset: 0x3f0, Size: 16]
	GameplayTagContainer DisallowedCosmeticTags;//[Offset: 0x400, Size: 32]
	GameplayTagContainer MetaTags;//[Offset: 0x420, Size: 32]
	GameplayTag[] VariantChannelsToNeverSendToMCP;//[Offset: 0x440, Size: 16]
	<CosmeticVariantInfo,class FortCosmeticReactivePreview> ReactivePreviewDrivers;//[Offset: 0x450, Size: 80]
	AthenaCosmeticMaterialOverride[] MaterialOverrides;//[Offset: 0x4a0, Size: 16]
	GameplayTagContainer ObservedPlayerStats;//[Offset: 0x4b0, Size: 32]
	FortMontageItemDefinitionBase*[] BuiltInEmotes;//[Offset: 0x4d0, Size: 16]
	FortCosmeticVariant*[] ItemVariants;//[Offset: 0x4e0, Size: 16]
	GameplayTag VariantChannelToUseForThumbnails;//[Offset: 0x4f0, Size: 8]
	FortCosmeticVariantPreview[] ItemVariantPreviews;//[Offset: 0x4f8, Size: 16]
	FText DirectAquisitionStyleDisclaimerOverride;//[Offset: 0x508, Size: 24]
	FortCosmeticAdaptiveStatPreview[] ItemObservedStatPreviews;//[Offset: 0x520, Size: 16]
	FText UnlockRequirements;//[Offset: 0x530, Size: 24]
	FortAccountItemDefinition* UnlockingItemDef;//[Offset: 0x548, Size: 40]
	class FortItemPreviewActor* ItemPreviewActorClass;//[Offset: 0x570, Size: 40]
	FXSystemAsset* ItemPreviewParticleSystem;//[Offset: 0x598, Size: 40]
	AnimMontage* ItemPreviewMontage_Male;//[Offset: 0x5c0, Size: 40]
	AnimMontage* ItemPreviewMontage_Female;//[Offset: 0x5e8, Size: 40]
	AthenaCharacterItemDefinition* ItemPreviewHero;//[Offset: 0x610, Size: 40]
	FName[] ConfiguredDynamicInstallBundles;//[Offset: 0x638, Size: 16]
	FName[] PendingDynamicInstallBundles;//[Offset: 0x648, Size: 16]
	GameplayTagContainer ExclusiveRequiresOutfitTags;//[Offset: 0x658, Size: 32]
	FText CustomExclusiveCallout;//[Offset: 0x678, Size: 24]
	FText ExclusiveDesciption;//[Offset: 0x690, Size: 24]
	Texture2D* ExclusiveIcon;//[Offset: 0x6a8, Size: 40]
	bool IsOwnedByCampaignHero();// 0xce31cb8
	bool IsEnabledInSTW();// 0xce31c78
	bool HasVariants();// 0xce31c40
	bool HasModifiableVariants(FortItem* InItem);// 0xce31b8c
	enum GetVariantUnlockType();// 0xce31b70
	FortCosmeticVariant* GetVariantChannel(GameplayTag InVariantChannelTag);// 0xce31ac0
	Rotator GetPreviewPawnRotationOffset();// 0xce31a9c
	FortCosmeticVariantPreview[] GetItemVariantPreviews();// 0xce31a7c
	FortCosmeticAdaptiveStatPreview[] GetItemAdaptiveStatPreviews();// 0xce31a5c
	void GetDefaultVariantChannels(out McpVariantChannelInfo[] OutDefaultVariantData);// 0xce319a0
	GameplayTagContainer GetAdaptivePlayerStatsList();// 0xce31980
	void GatherVariantAssets(Actor* InActor, out const FortAthenaLoadout Loadout, out SoftObjectPath[] VariantAssetsNeeded, FortPlayerPawn* InPlayerPawn);// 0xce316f4
	void ApplyVariantsToComponent(PrimitiveComponent* InComponent, out const FortAthenaLoadout Loadout, out const ApplyVariantsAdditionalParams Params);// 0xce314d4
	void ApplyVariants(Actor* InActor, out const FortAthenaLoadout Loadout, out const ApplyVariantsAdditionalParams Params);// 0xce312b4

--------------------------------
Class: FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	CurveTableRowHandle LevelToXpHandle;//[Offset: 0x348, Size: 16]
	CurveTableRowHandle LevelToSacrificeXpHandle;//[Offset: 0x358, Size: 16]
	DataTableRowHandle SacrificeRecipe;//[Offset: 0x368, Size: 16]
	DataTableRowHandle TransmogSacrificeRow;//[Offset: 0x378, Size: 16]
	DataTableRowHandle[] ConversionRecipes;//[Offset: 0x388, Size: 16]
	DataTableRowHandle UpgradeRarityRecipeHandle;//[Offset: 0x398, Size: 16]
	int MinLevel;//[Offset: 0x3a8, Size: 4]
	int MaxLevel;//[Offset: 0x3ac, Size: 4]
	FString GrantToProfileType;//[Offset: 0x3b0, Size: 16]

--------------------------------
Class: FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	MulticastInlineDelegateProperty OnItemCountChanged;//[Size: 16]
	enum Rarity;//[Offset: 0x68, Size: 1]
	enum ItemType;//[Offset: 0x69, Size: 1]
	enum PrimaryAssetIdItemTypeOverride;//[Offset: 0x6a, Size: 1]
	enum FilterOverride;//[Offset: 0x6b, Size: 1]
	enum Tier;//[Offset: 0x6c, Size: 1]
	enum MaxTier;//[Offset: 0x6d, Size: 1]
	enum Access;//[Offset: 0x6e, Size: 1]
	bool bIsAccountItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f, Size: 1]
	bool bNeverPersisted;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f, Size: 1]
	bool bAllowMultipleStacks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f, Size: 1]
	bool bAutoBalanceStacks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f, Size: 1]
	bool bForceAutoPickup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f, Size: 1]
	bool bInventorySizeLimited;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f, Size: 1]
	FText ItemTypeNameOverride;//[Offset: 0x70, Size: 24]
	FText DisplayName;//[Offset: 0x88, Size: 24]
	FText ShortDescription;//[Offset: 0xa0, Size: 24]
	FText Description;//[Offset: 0xb8, Size: 24]
	FText DisplayNamePrefix;//[Offset: 0xd0, Size: 24]
	FText SearchTags;//[Offset: 0xe8, Size: 24]
	GameplayTagContainer GameplayTags;//[Offset: 0x100, Size: 32]
	GameplayTagContainer AutomationTags;//[Offset: 0x120, Size: 32]
	GameplayTagContainer SecondaryCategoryOverrideTags;//[Offset: 0x140, Size: 32]
	GameplayTagContainer TertiaryCategoryOverrideTags;//[Offset: 0x160, Size: 32]
	ScalableFloat MaxStackSize;//[Offset: 0x180, Size: 40]
	ScalableFloat PurchaseItemLimit;//[Offset: 0x1a8, Size: 40]
	float FrontendPreviewScale;//[Offset: 0x1d0, Size: 4]
	class FortTooltip* TooltipClass;//[Offset: 0x1d8, Size: 40]
	FortTooltipDisplayStatsList* StatList;//[Offset: 0x200, Size: 40]
	CurveTableRowHandle RatingLookup;//[Offset: 0x228, Size: 16]
	Texture2D* WidePreviewImage;//[Offset: 0x238, Size: 40]
	Texture2D* SmallPreviewImage;//[Offset: 0x260, Size: 40]
	Texture2D* LargePreviewImage;//[Offset: 0x288, Size: 40]
	SoftObjectPath DisplayAssetPath;//[Offset: 0x2b0, Size: 24]
	DataTableRowHandle PopupDetailsTag;//[Offset: 0x2c8, Size: 16]
	FortItemSeriesDefinition* Series;//[Offset: 0x2d8, Size: 8]
	Vector FrontendPreviewPivotOffset;//[Offset: 0x2e0, Size: 12]
	Rotator FrontendPreviewInitialRotation;//[Offset: 0x2ec, Size: 12]
	StaticMesh* FrontendPreviewMeshOverride;//[Offset: 0x2f8, Size: 40]
	SkeletalMesh* FrontendPreviewSkeletalMeshOverride;//[Offset: 0x320, Size: 40]
	bool ShouldShowPreviewOnCurrentHero(const int InSubSlot);// 0xd04a78c
	bool IsStackable();// 0xd04a74c
	bool IsInventorySizeLimited();// 0xd04a72c
	Texture2D* GetWidePreviewImage();// 0xd04a648
	class FortTooltip GetTooltip(bool bSummaryTooltip);// 0xd04a588
	SlateBrush GetSmallPreviewImageBrush();// 0xd04a444
	Texture2D* GetSmallPreviewImage();// 0xd04a360
	FText GetSingleLineDescription();// 0xd04a288
	FText GetShortDescription();// 0xd04a1b0
	FText GetRichDescription();// 0xd04a0d8
	FortColorPalette GetRarityOrSeriesColors();// 0xd04a05c
	enum GetRarity();// 0xd04a020
	bool GetPreviewStaticMeshAsset(out StaticMesh* Asset);// 0xd049f3c
	bool GetPreviewSkeletalMeshAsset(out SkeletalMesh* Asset);// 0xd049e58
	bool GetPreviewPrefabAssetAtSubSlot(out class Actor Asset, const int InSubSlot);// 0xd049d28
	bool GetPreviewPrefabAsset(out class Actor Asset);// 0xd049c44
	Transform GetPreviewMeshOffset();// 0xd049c0c
	void GetPreviewAssets(out Object*[] Assets);// 0xd049b48
	FString GetPersistentName();// 0xd049aa0
	Texture2D* GetLargePreviewImage();// 0xd0499bc
	FText GetItemTypeName(bool bUsePlural);// 0xd049898
	enum GetItemType();// 0xd04985c
	Texture2D* GetInactivePreviewImage();// 0xd049778
	SoftObjectPath GetHiResDisplayAssetPath();// 0xd0496c8
	FortTooltipDisplayStatsList* GetDisplayStats();// 0xd04968c
	FText GetDisplayName(bool bBaseName);// 0xd049560
	SoftObjectPath GetDisplayAssetPath();// 0xd0494b0
	FText[] GetDescription();// 0xd049438
	void CustomizePreviewPrefab(Actor* PrefabInstance);// 0xd049388
	void CustomizePreviewMesh(MeshComponent* Mesh);// 0xd0492d8
	FortItem* CreateTemporaryItemInstanceBP(int Count, int Level);// 0xb67e7e8
	FortItem* CreateTemporaryInstanceFromExistingItemBP(FortItem* ExistingItem, int Count, int Level);// 0xd0491ac
	void CopyTemplateIdToClipboard();// 0xd049198

--------------------------------
Class: McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 16]
	DataRegistryType RegistryType;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 8]
	FName RowName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DataRegistryType
	FName Name;//[Offset: 0x0, Size: 8]

--------------------------------
Class: DataTableRowHandle
	DataTable* DataTable;//[Offset: 0x0, Size: 8]
	FName RowName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 16]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: SoundLibrary.Object
	<GameplayTag,SoundBase*> Sounds;//[Offset: 0x28, Size: 80]
	SoundBase*[] LoadedSoundObjects;//[Offset: 0x78, Size: 16]

--------------------------------
Class: CosmeticVariantInfo
	GameplayTag VariantChannelTag;//[Offset: 0x0, Size: 8]
	GameplayTag ActiveVariantTag;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortItem.Object
	MulticastInlineDelegateProperty OnItemChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnItemDestroyed;//[Size: 16]
	bool bLoadedFromSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bTemporaryItemOwningController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool UsesPhantomReserveAmmo();// 0xd046830
	bool TryGetCategory(enum Ordinal, out FText OutCategoryDisplayName, out bool OutHasIcon, out FortMultiSizeBrush OutCategoryIconBrush);// 0xd045fb4
	void SetOwningControllerForTemporaryItem(FortPlayerController* InController);// 0xd045f0c
	bool IsVisible();// 0xd045ecc
	bool IsTemporaryItem();// 0xd045e8c
	bool IsSlotted();// 0xd045e4c
	bool IsSchematicOrCraftedWeapon();// 0xd045e14
	bool IsSchematic();// 0xd045dd4
	bool IsInventoryOverflowItem();// 0xd045d94
	bool IsInStorageVault();// 0xd045d54
	bool IsEquipped();// 0xd045d14
	bool IsEquipable(const FortPlayerController* EquippingPC, bool bGamepadSwitchingForHeroAbilities);// 0xd045c10
	bool IsDroppedItem();// 0xd045bd0
	bool IsActivatable(const FortPlayerController* FortPC, out GameplayTagContainer FailureReason);// 0xd045aac
	bool HasRarityUpgrade();// 0xd045a6c
	bool HasEvolutions();// 0xd045a2c
	bool HasDurability();// 0xd0459ec
	Texture2D* GetWidePreviewImage();// 0xd045908
	static FText GetUpgradeRestrictionReasonText(const enum Reason);// 0xd0457f4
	FortPersistentResourceItemDefinition* GetUpgradeResourceItemDefinition();// 0xd0457b8
	int GetUpgradeCostToLevel(int TargetLevel);// 0xd045700
	int GetUpgradeCost();// 0xd0456c4
	enum GetType();// 0xd045688
	GUID GetTrackerGuid();// 0xd04564c
	enum GetTier();// 0xd045618
	bool GetTertiaryCategory(out FText ItemCategoryText, out SlateBrush ItemCategoryBrush, byte BrushSize);// 0xd045328
	Texture2D* GetSmallPreviewImage();// 0xd045244
	bool GetSecondaryCategory(out FText ItemCategoryText, out SlateBrush ItemCategoryBrush, byte BrushSize);// 0xd044f54
	FText GetSearchTags();// 0xd044e7c
	enum GetSchematicResultType();// 0xd044e40
	FortWeaponItemDefinition* GetSchematicCraftingResultOrCraftedWeaponBP();// 0xd044e0c
	FortItemDefinition* GetSchematicCraftingResultBP();// 0xd044dd0
	int GetRemainingAmmo();// 0xd044d94
	int GetRecycleValue();// 0xd044d58
	int GetRating();// 0xd044d1c
	LinearColor GetRaritySecondaryColor();// 0xd044ce4
	LinearColor GetRarityColor();// 0xd044ca4
	enum GetRarity();// 0xd044c68
	int GetPromotionTier();// 0xd044c2c
	bool GetPrimaryCategory(out FText ItemCategoryText);// 0xd044b08
	Object*[] GetPreviewAssets();// 0xd044a90
	int GetPhantomReserveAmmo();// 0xd044a54
	FortPlayerController* GetOwningController();// 0xd044a18
	int GetNumInStack();// 0xd0449dc
	byte GetNumberOfSlotsTaken();// 0xd0449a0
	float GetNormalizedDurability();// 0xd044964
	enum GetMaxTier();// 0xd044930
	int GetMaxStackSize(AbilitySystemComponent* AbilityComp);// 0xd044878
	int GetMaxLevel();// 0xd04483c
	int GetLoadedAmmo();// 0xd044800
	int GetLevelRelativeCostForRarityUpgrade();// 0xd0447c4
	int GetLevel();// 0xd044788
	Texture2D* GetLargePreviewImage();// 0xd0446a4
	FText GetItemTypeName(bool bUsePlural);// 0xd044578
	GUID GetItemGuid();// 0xd04453c
	FortItemDefinition* GetItemDefinitionBP();// 0xd044500
	Texture2D* GetInactivePreviewImage();// 0xd04441c
	enum GetFilterCategory();// 0xd0443e0
	static FText GetEvolveRestrictionReasonText(const enum Reason);// 0xd0442cc
	float GetDurability();// 0xd044290
	FText GetDisplayNameWithoutPrefix();// 0xd0441c0
	FText GetDisplayName();// 0xd0440e8
	FText GetDescription();// 0xd044010
	float GetCooldownTimeRemaining(const FortPlayerController* FortPC, out float CooldownDuration);// 0xd043f0c
	FortAlterationSlotStatus[] GetAlterationSlots();// 0xd043e64
	FortAlterationItemDefinition*[] GetActiveAlterations(int PretendLevel);// 0xd043d78
	bool DoesMatchSearchString(FString SearchString);// 0xd043c68
	bool CanUpgradeItemRarity(out enum[] OutRestrictionReasons);// 0xd043b94
	bool CanEvolve(out enum[] OutRestrictionReasons);// 0xd043ac0
	bool CanBeUpgraded(out enum[] OutRestrictionReasons);// 0xd0439ec
	bool CanBeUnslotted();// 0xd0439ac
	bool CanBeDropped();// 0xd04396c
	bool CanAffordPromotion();// 0xd04392c
	void BroadcastOnItemChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged, bool bLogBroadcasts);// 0xd04379c
	bool AllowedToBeLockedInInventory();// 0xd04375c

--------------------------------
Class: FortMultiSizeBrush
	SlateBrush Brush_XXS;//[Offset: 0x0, Size: 136]
	SlateBrush Brush_XS;//[Offset: 0x88, Size: 136]
	SlateBrush Brush_S;//[Offset: 0x110, Size: 136]
	SlateBrush Brush_M;//[Offset: 0x198, Size: 136]
	SlateBrush Brush_L;//[Offset: 0x220, Size: 136]
	SlateBrush Brush_XL;//[Offset: 0x2a8, Size: 136]

--------------------------------
Class: FortPlayerController.PlayspacePlayerController.PlayerController.Controller.Actor.Object
	MulticastInlineDelegateProperty OnPlayerPawnPossessed;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupCreated;//[Size: 16]
	MulticastInlineDelegateProperty OnInputFiltered;//[Size: 16]
	bool bAllowPcbBenefits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	bool bInPossession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 1]
	InputComponent* AircraftInputComponent;//[Offset: 0x858, Size: 8]
	FortMiniMapInputComponent* MiniMapInputComponent;//[Offset: 0x860, Size: 8]
	AudioComponent* SkydiveMusicAudioComp;//[Offset: 0x868, Size: 8]
	bool bFailedToRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x870, Size: 1]
	bool bIsDisconnecting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x870, Size: 1]
	bool bIsBeingKicked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x870, Size: 1]
	bool bHasInitiallySpawned;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x870, Size: 1]
	bool bAssignedStartSpawn;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x870, Size: 1]
	bool bReadyToStartMatch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x870, Size: 1]
	bool bClientPawnIsLoaded;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x870, Size: 1]
	Vector SpawnLoc;//[Offset: 0x874, Size: 12]
	int NumPreviousSpawns;//[Offset: 0x880, Size: 4]
	bool bCanSpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	MulticastInlineDelegateProperty OnBlueprintReadyCheckCompleted;//[Size: 16]
	SoundMix* SimpleLoadingScreenSoundMix;//[Offset: 0x8b8, Size: 8]
	FString RegisteredPartnerId;//[Offset: 0x8d0, Size: 16]
	GameplayTag RegisteredPartnerTag;//[Offset: 0x8e0, Size: 8]
	FortAIPawn*[] ManagedAIs;//[Offset: 0x8e8, Size: 16]
	FortPlayerPawn* MyFortPawn;//[Offset: 0x8f8, Size: 8]
	FortPlayerPawn* MyFortPawnBeforeTakeoverOfScriptedPawn;//[Offset: 0x900, Size: 8]
	Controller* ScriptedPawnControllerBeforeTakeover;//[Offset: 0x908, Size: 8]
	bool bHasClientFinishedLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool bHasServerFinishedLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	float TimeStartedWaiting;//[Offset: 0x914, Size: 4]
	float TimeFinishedNavigationBuild;//[Offset: 0x918, Size: 4]
	MaterialParameterCollection* MaterialParameterCollection;//[Offset: 0x920, Size: 8]
	bool bLoadingScreenDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x931, Size: 1]
	Vector PendingSpectatorLocation;//[Offset: 0x934, Size: 12]
	Actor* ActorUnderReticle;//[Offset: 0x940, Size: 8]
	Actor* AutoFireReticleTarget;//[Offset: 0x948, Size: 8]
	TimerHandle AutofireTimerHandle;//[Offset: 0x950, Size: 8]
	BuildingWeakSpot* WeakspotUnderReticle;//[Offset: 0x960, Size: 8]
	BuildingWeakSpotData[] ActiveWeakSpots;//[Offset: 0x968, Size: 16]
	float LastActiveTime;//[Offset: 0x978, Size: 4]
	bool bRevertPlayerListenerChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	InputComponent* VehicleInputComponent;//[Offset: 0x9b8, Size: 8]
	bool bHoldingPrimaryFireFromTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 1]
	bool bSupportNextPieceAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c1, Size: 1]
	bool bAutoBuildForTrapPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c2, Size: 1]
	bool bAutoBuildForFloorTrapPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c3, Size: 1]
	bool bAutoBuildForWallTrapPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c4, Size: 1]
	bool bAutoBuildForCeilingTrapPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c5, Size: 1]
	bool bNoControllerLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c6, Size: 1]
	float ReturnToMainMenuTimeoutDelay;//[Offset: 0x9c8, Size: 4]
	MulticastInlineDelegateProperty OnQuestObjectiveStateChanged;//[Size: 16]
	FortPlayerController* LastDamager;//[Offset: 0x9f8, Size: 8]
	FortPlayerController* LastFallInstigator;//[Offset: 0xa08, Size: 8]
	float LastDamagerCreditThresholdDropElim;//[Offset: 0xa14, Size: 4]
	float LastDamagerCreditThresholdSelfElim;//[Offset: 0xa18, Size: 4]
	float LastDamagerCreditThresholdStormElim;//[Offset: 0xa1c, Size: 4]
	bool bGiveLastDamagerElimCreditOnDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	bool bGiveLastDamagerElimCreditOnSelfDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 1]
	bool bGiveLastDamagerElimCreditOnStormDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa22, Size: 1]
	MulticastInlineDelegateProperty OnMcpProfilesInitializedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnEnterVehicleDriver;//[Size: 16]
	MulticastInlineDelegateProperty OnEnterVehiclePassenger;//[Size: 16]
	MulticastInlineDelegateProperty OnExitVehicle;//[Size: 16]
	MulticastInlineDelegateProperty OnFullyExitVehicle;//[Size: 16]
	MulticastInlineDelegateProperty OnVehicleAbilitiesRemoved;//[Size: 16]
	MulticastInlineDelegateProperty OnTetherChanged;//[Size: 16]
	bool bHoldingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xca8, Size: 1]
	InputComponent* DBNOCarryInputComponent;//[Offset: 0xcb0, Size: 8]
	InputComponent* HeldObjectsInputComponent;//[Offset: 0xcb8, Size: 8]
	bool bWantsToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd08, Size: 1]
	bool bHoldingSprint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd08, Size: 1]
	bool bSprintToggleable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd08, Size: 1]
	bool bSprintByDefault;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd08, Size: 1]
	bool bSprintCancelsReload;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd08, Size: 1]
	bool bSprintWasCancelledByReload;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd08, Size: 1]
	bool bAutoRunOn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd08, Size: 1]
	bool bUseHoldToSwapPickup;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd08, Size: 1]
	bool bTargetingToggleable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd09, Size: 1]
	bool bTargetingToggleableWithTouch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd09, Size: 1]
	bool bMovementDisabledDueToCancellableAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd09, Size: 1]
	bool bIsPlayerActivelyMoving;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd09, Size: 1]
	bool bPlaceHeldObjectPressed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd09, Size: 1]
	int InMovementCancellableAction;//[Offset: 0xd0c, Size: 4]
	bool bAllowHoldForAmmoCrafting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd10, Size: 1]
	bool bIsClientTimingOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd11, Size: 1]
	float ClientTimeoutBlockInputTime;//[Offset: 0xd14, Size: 4]
	uint64 LastMoveInputFrame;//[Offset: 0xd20, Size: 8]
	float LastPressGamepadSprintTime;//[Offset: 0xd28, Size: 4]
	bool bAutoRunWasHoldingForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2c, Size: 1]
	bool bAtNameBaseScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2d, Size: 1]
	MulticastInlineDelegateProperty OnSetFirstPersonCamera;//[Size: 16]
	class FortCinematicCamera* CinematicCameraClassOverride;//[Offset: 0xdb0, Size: 8]
	bool bOnPressExecuteJetpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	bool bShowHitMarkersForFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	bool bServerSideHitMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd9, Size: 1]
	MulticastInlineDelegateProperty OnUiChoiceCompleted;//[Size: 16]
	MulticastInlineDelegateProperty OnRegainedFocus;//[Size: 16]
	MulticastInlineDelegateProperty OnOpenVoteDialog;//[Size: 16]
	bool bGamepadAbilityPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	bool bForceAllowCursorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b5, Size: 1]
	bool bForceAllowCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b6, Size: 1]
	bool bSuppressEventNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	float LastSpotTime;//[Offset: 0x1128, Size: 4]
	FortMarkActor*[] CurrentMarks;//[Offset: 0x1138, Size: 16]
	<FName,AudioComponent*> LoopingUIFeedbackComponents;//[Offset: 0x1148, Size: 80]
	FortGameplayAbility* PreviewAbility;//[Offset: 0x1198, Size: 8]
	AIDirectorDebugInfo IntensityGraphInfo;//[Offset: 0x11b8, Size: 40]
	AIDirectorDebugInfo PIDValuesGraphInfo;//[Offset: 0x11e0, Size: 40]
	AIDirectorDebugInfo PIDContributionsGraphInfo;//[Offset: 0x1208, Size: 40]
	FortAIDirectorDataManager* AIDirectorDataManager;//[Offset: 0x1230, Size: 8]
	FortMusicManager* MusicManager;//[Offset: 0x1238, Size: 8]
	MulticastInlineDelegateProperty OnBuildPreviewMarkerVisibilityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnWeakSpotReset;//[Size: 16]
	bool bUsePredictedBuildingActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 1]
	bool bRegisterPredictedBuildingActorsWithGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1271, Size: 1]
	bool bPredictedBuildingWallsHaveNoCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1272, Size: 1]
	float PredictedActorLifespan;//[Offset: 0x1274, Size: 4]
	BuildingSMActor*[] PredictedBuildingSMActors;//[Offset: 0x1278, Size: 16]
	InputComponent* BuildPreviewModeInputComponent;//[Offset: 0x1408, Size: 8]
	BuildingPlayerPrimitivePreview* BuildPreviewMarker;//[Offset: 0x1410, Size: 8]
	BuildingPlayerPrimitivePreview* BuildPreviewMarkerExtraPiece;//[Offset: 0x1418, Size: 8]
	bool bAllowBuildingPreviewAutoRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1450, Size: 1]
	bool bRequireTraceToExistingBuildingToSetContext;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1451, Size: 1]
	bool bAllowTraceToExistingBuildingToSetContextToRedirectToBlockingBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1452, Size: 1]
	bool bRequireTraceToExistingBuildingToSetContextExcludeCurrentContext;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1453, Size: 1]
	BuildingActor* TargetedBuilding;//[Offset: 0x1518, Size: 8]
	Actor* TargetedVehicle;//[Offset: 0x1520, Size: 8]
	class BuildingSMActor* ContextualConversionClass;//[Offset: 0x1528, Size: 8]
	SoundBase* StartUpgradeSound;//[Offset: 0x1530, Size: 40]
	BuildingActor*[] HighlightedPrimaryBuildings;//[Offset: 0x1558, Size: 16]
	BuildingActor*[] HighlightedInteractionBuildings;//[Offset: 0x1568, Size: 16]
	BuildingActor* HighlightedPrimaryBuilding;//[Offset: 0x1578, Size: 8]
	MaterialInterface* BuildPreviewMarkerParentMaterial;//[Offset: 0x1580, Size: 40]
	MaterialInstanceDynamic*[] BuildPreviewMarkerMIDs;//[Offset: 0x15a8, Size: 16]
	byte BuildPreviewRotationIterations;//[Offset: 0x15b8, Size: 1]
	bool bBuildPreviewMirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15b9, Size: 1]
	enum BuildPreviewMarkerOptionalAdjustment;//[Offset: 0x15ba, Size: 1]
	bool bBuildFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15bb, Size: 1]
	bool bCraftFree;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15bb, Size: 1]
	byte CurrentCostInfoType;//[Offset: 0x15bc, Size: 1]
	class BuildingSMActor* CurrentBuildableClass;//[Offset: 0x15c0, Size: 8]
	class BuildingSMActor* PreviousBuildableClass;//[Offset: 0x15c8, Size: 8]
	byte CurrentResourceLevel;//[Offset: 0x15d0, Size: 1]
	byte CurrentResourceType;//[Offset: 0x15d1, Size: 1]
	LastBuildableState LastBuildableStateData;//[Offset: 0x15d8, Size: 16]
	FortDamageNumberInfo[] QueuedDamageNumbers;//[Offset: 0x16a8, Size: 16]
	FortDamageNumbersActor* DamageNumbersActor;//[Offset: 0x16b8, Size: 8]
	InputComponent* EditModeInputComponent;//[Offset: 0x16c0, Size: 8]
	BuildingSMActor* EditBuildingActor;//[Offset: 0x16c8, Size: 8]
	float EditModeDistance;//[Offset: 0x16d0, Size: 4]
	Vector LastBuildPreviewGridSnapLoc;//[Offset: 0x16d4, Size: 12]
	Rotator LastBuildPreviewGridSnapRot;//[Offset: 0x16e0, Size: 12]
	Vector LastBuildPreviewGridSnapCentroid;//[Offset: 0x16ec, Size: 12]
	InputComponent* PickerInputComponent;//[Offset: 0x16f8, Size: 8]
	FortDecoHelper* TrapPickerDecoHelper;//[Offset: 0x1700, Size: 8]
	HitResult[] TouchEditResults;//[Offset: 0x1708, Size: 16]
	bool bBuildingPlacementTraceSkipInitialPenetrationOfBuildingSMActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1719, Size: 1]
	bool bBuildingPlacementTraceSkipInitialPenetrationOfStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171a, Size: 1]
	FortQuickBars* ClientQuickBars;//[Offset: 0x1758, Size: 8]
	RecentlyRemovedQuickbarInfo[] RecentlyRemovedQuickbarInfo;//[Offset: 0x1768, Size: 16]
	DelayedQuickBarActionContainer DelayedQuickBarActions;//[Offset: 0x17c8, Size: 288]
	<uint32> ClientProcessedQuickBarActions;//[Offset: 0x18e8, Size: 80]
	bool bShouldForceDeleteDroppedItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1938, Size: 1]
	QueuedItemsToDropViaPickup QueuedItemsToDrop;//[Offset: 0x1960, Size: 32]
	bool bAutoEquipBetterItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a08, Size: 1]
	FortInventory* WorldInventory;//[Offset: 0x1a10, Size: 8]
	FortInventory* OutpostInventory;//[Offset: 0x1a18, Size: 8]
	FortInventory* ViewTargetInventory;//[Offset: 0x1a20, Size: 8]
	bool bHasInitializedWorldInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a74, Size: 1]
	bool bHasInitializedHeroInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a75, Size: 1]
	bool bAccountInventoryWasUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a76, Size: 1]
	bool bForceWorldInventoryUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a77, Size: 1]
	bool bIsSavingGadgetLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a78, Size: 1]
	FortClientPilot_Base* BotPilot;//[Offset: 0x1b00, Size: 8]
	FortClientBotManager* BotManager;//[Offset: 0x1b20, Size: 8]
	class FortClientBotManager* ClientBotManagerClass;//[Offset: 0x1b30, Size: 8]
	FortAthenaLoadout CosmeticLoadoutPC;//[Offset: 0x1b38, Size: 240]
	FortCustomizationAssetLoader* LocalPawnCustomizationAssetLoader;//[Offset: 0x1c28, Size: 8]
	bool bDropWeaponsDuringAllMissionStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c48, Size: 1]
	FortRewardReport LatestRewardReport;//[Offset: 0x1c68, Size: 112]
	FortRegisteredPlayerInfo* MyPlayerInfo;//[Offset: 0x1cd8, Size: 8]
	FortUpdatedObjectiveStat[] UpdatedObjectiveStats;//[Offset: 0x1ce0, Size: 16]
	bool bHasUnsavedPrimaryMissionProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf0, Size: 1]
	StatManager* StatManager;//[Offset: 0x1d30, Size: 8]
	HeartbeatManager* HeartbeatManager;//[Offset: 0x1d38, Size: 8]
	FortStatEventManager* StatEventManager;//[Offset: 0x1d40, Size: 8]
	FortPersistentGameplayStatContainer CachedPersistentGameplayStats;//[Offset: 0x1d48, Size: 16]
	FortMontageItemDefinitionBase* LastEmotePlayed;//[Offset: 0x1d68, Size: 8]
	<FortMontageItemDefinitionBase*,int> EmoteUsageCounts;//[Offset: 0x1d70, Size: 80]
	Vector[] AnalyticsBuildingWallTooLowLocations;//[Offset: 0x1dc0, Size: 16]
	<FortPlayerPawn*> NearbyEmotingPawns;//[Offset: 0x1dd0, Size: 80]
	<FName,int> NearbyEmotingPawnCount;//[Offset: 0x1e20, Size: 80]
	McpProfileGroup* McpProfileGroup;//[Offset: 0x1e70, Size: 8]
	FortMcpProfileCommonPublic* CommonPublicMcpProfile;//[Offset: 0x1e78, Size: 8]
	FortMcpProfileCommonCore* CommonCoreMcpProfile;//[Offset: 0x1e80, Size: 8]
	FortMcpProfileCampaign* MainMcpProfile;//[Offset: 0x1e88, Size: 8]
	FortMcpProfileAthena* AthenaProfile;//[Offset: 0x1e90, Size: 8]
	FortMcpProfileMetadata* MetadataProfile;//[Offset: 0x1e98, Size: 8]
	FortMcpProfileCreative* CreativeModeProfile;//[Offset: 0x1ea0, Size: 8]
	enum TutorialCompletedState;//[Offset: 0x1ea8, Size: 1]
	bool bShouldReceiveCriticalMatchBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee0, Size: 1]
	MulticastInlineDelegateProperty OnPlayerChangedBuildMode;//[Size: 16]
	MulticastInlineDelegateProperty OnAutoRunEnabled;//[Size: 16]
	SoundEffectSourcePresetChain* VoiceInputSourceEffectPresetChain;//[Offset: 0x2078, Size: 8]
	Vector LocationUnderReticle;//[Offset: 0x2080, Size: 12]
	bool bEnableVoiceChatPTT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208c, Size: 1]
	bool bVoiceChatPTTTransmit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208c, Size: 1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208c, Size: 1]
	bool bInfiniteMagazine;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208c, Size: 1]
	bool bNoCoolDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x208c, Size: 1]
	bool bInfiniteDurability;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x208c, Size: 1]
	bool bUsePickers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x208c, Size: 1]
	bool bPickerOpen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x208c, Size: 1]
	bool bPickerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208d, Size: 1]
	bool bCheatGhost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208d, Size: 1]
	bool bCheatFly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208d, Size: 1]
	bool bEnableShotLogging;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x208d, Size: 1]
	bool bIsNearActiveEncounters;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x208d, Size: 1]
	int OverriddenBackpackSize;//[Offset: 0x2090, Size: 4]
	FortReplayMovableSpotLight* CurrentReplaySpotLight;//[Offset: 0x2098, Size: 8]
	uint32 AimHelpMode;//[Offset: 0x20a0, Size: 4]
	byte JumpStaminaCost;//[Offset: 0x20a4, Size: 1]
	FName CameraPrototypeName;//[Offset: 0x20a8, Size: 8]
	bool bHideHudEnglishText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d8, Size: 1]
	bool bAutoChangeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d9, Size: 1]
	bool bServerAutoChangeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20da, Size: 1]
	bool bPeripheralLightingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20db, Size: 1]
	bool bRudderControlEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20dc, Size: 1]
	float RudderDeadZone;//[Offset: 0x20e0, Size: 4]
	float RudderMaxThrottle;//[Offset: 0x20e4, Size: 4]
	FortSprayDecalInstance*[] ActiveSprayInstances;//[Offset: 0x20e8, Size: 16]
	Actor*[] ActiveToyInstances;//[Offset: 0x20f8, Size: 16]
	<class Object,int> ToySummonCounts;//[Offset: 0x2108, Size: 80]
	bool bSyncPeripheralLightingWithEmoteMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2158, Size: 1]
	bool bPushEmoteAudioDataToCosmeticMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2159, Size: 1]
	float LastEmoteMusicFFT100hz;//[Offset: 0x215c, Size: 4]
	float LastEmoteMusicFFT2000hz;//[Offset: 0x2160, Size: 4]
	float EmoteMusicBeatThreshold;//[Offset: 0x2164, Size: 4]
	float EmoteMusicEnvelopeBeatCount;//[Offset: 0x2168, Size: 4]
	bool bZeroingCameraRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c0, Size: 1]
	bool bTryPickupSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c1, Size: 1]
	bool bClientSideEditPrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c2, Size: 1]
	float ClientSideEditPredictionTimeout;//[Offset: 0x22c4, Size: 4]
	BuildingSMActor* PendingEnterEditModeActor;//[Offset: 0x22d0, Size: 8]
	int RandomCharacterIndex;//[Offset: 0x22d8, Size: 4]
	float AntiAddictionPlayTimeMultiplier;//[Offset: 0x22dc, Size: 4]
	bool bSupportQuickEdit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e0, Size: 1]
	bool bQuickEditEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e1, Size: 1]
	bool bUsesWidgetForFPSDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e2, Size: 1]
	bool bShowFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e3, Size: 1]
	MulticastInlineDelegateProperty OnShowFPSChange;//[Size: 16]
	bool bShowTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f8, Size: 1]
	MulticastInlineDelegateProperty OnShowTemperatureChange;//[Size: 16]
	LockOnInfo LockOnInfo;//[Offset: 0x2344, Size: 56]
	bool bLockPrimaryInputMethodToMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237c, Size: 1]
	FortIndicatorManager* IndicatorManager;//[Offset: 0x2390, Size: 8]
	bool bFinalXPUpdateFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a8, Size: 1]
	UserWidget* TestUserWidget;//[Offset: 0x23b0, Size: 8]
	enum PreviousStasisMode;//[Offset: 0x23b8, Size: 1]
	class BattleMapPawnLive* BattleMapSpectatorClass;//[Offset: 0x23c0, Size: 8]
	bool bReleaseBuildingContextOnPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e5, Size: 1]
	float TurboPlaceFirstInterval;//[Offset: 0x23e8, Size: 4]
	float TurboPlaceInterval;//[Offset: 0x23ec, Size: 4]
	bool bCreativeTurboDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f0, Size: 1]
	float TurboDeleteFirstInterval;//[Offset: 0x23f4, Size: 4]
	float TurboDeleteInterval;//[Offset: 0x23f8, Size: 4]
	bool bTurboBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23fd, Size: 1]
	float TurboBuildFirstInterval;//[Offset: 0x2400, Size: 4]
	float TurboBuildRequestFailedInterval;//[Offset: 0x2404, Size: 4]
	float TurboBuildInterval;//[Offset: 0x2408, Size: 4]
	FortControllerComponent_Telemetry* FortControllerComponent_Telemetry;//[Offset: 0x2418, Size: 8]
	FortControllerComponent_InventoryNetworkManagement* InventoryNetworkManagementComponent;//[Offset: 0x2420, Size: 8]
	FortControllerComponent_Interaction* InteractionComponent;//[Offset: 0x2428, Size: 8]
	FortControllerComponent_Collections* CollectionsComponent;//[Offset: 0x2430, Size: 8]
	FortItemDefinition* PendingExecuteInventoryItemDefinition;//[Offset: 0x2438, Size: 8]
	class QuickHealItemPicker* QuickHealItemPickerClass;//[Offset: 0x2458, Size: 8]
	FString[] MeshParentIds;//[Offset: 0x2478, Size: 16]
	MulticastInlineDelegateProperty OnToggleFullscreenMap;//[Size: 16]
	bool WantsToSecondaryInteract();// 0xd139f94
	bool WantsToDBNOCarry();// 0xd139f5c
	void UpdateClientCollection(FString CollectionType, FString Category, const FortMcpCollectedItemProperties Properties, enum UpdateKind);// 0xd139cf0
	void UnMutePlayer(out const UniqueNetIdRepl UniqueNetId);// 0xd139bb0
	void TossSpecificItem(const FortItemDefinition* DropItemDef, out const FortPickupTossOverrideData TossOverrideData);// 0xd139aa8
	void TogglePersonalVehicle(bool bOn);// 0xd1399c4
	void ToggleInventory();// 0xd1399b0
	void ToggleFullScreenMap();// 0xd139994
	void ToggleClientBot();// 0xd139980
	void ToggleBattleMapSpectator();// 0xd13996c
	void TestStreamedVideo(FString URLInQuotes);// 0xd1398b8
	void SuppressEventNotifications(bool bSuppress);// 0xd139808
	void Suicide();// 0xd1397ec
	bool StopBattleMapSpectator();// 0xd1397b4
	void StartZeroingCameraRoll();// 0xd1397a0
	bool StartReadyCheck(FText QueryText, FText YesText, FText NoText, float PercentageToPass);// 0xd139388
	Actor* SpawnToyInstance(class Actor ToyClass, Transform SpawnPosition);// 0xd139278
	BattleMapPawnLive* SpawnBattleMapSpectator();// 0xd139244
	bool ShouldShowInfoIndicator(const Actor* TestActor);// 0xd139188
	void SetVoiceInputEffectChain(SoundEffectSourcePresetChain* InSourceEffectPresetChain);// 0xd1390e0
	void SetRotatePawnToCamera(bool bNewRotatePawnToCamera);// 0xd139028
	void SetPickerEnabled(bool bEnabled);// 0xd138f78
	void SetLockOnTargetStickCoords(out const Vector2D Coords);// 0xd138ec8
	void SetInputYawScale(float InInputYawScale);// 0xd138e20
	void SetInputPitchScale(float InInputPitchScale);// 0xd138d78
	void SetFullscreenMapVisible(bool Visible);// 0xd138cc0
	void SetFirstPersonCamera(bool bNewUseFirstPersonCamera);// 0xd138c08
	bool SetCompHiddenOtherLocalControllersOnly(SceneComponent* SceneComp, const bool bNewHiddenGame, const bool bPropagateToChildren);// 0xd138abc
	bool SetCompHiddenControllerOnly(SceneComponent* SceneComp, const bool bNewHiddenGame, const bool bPropagateToChildren);// 0xd138970
	void SetClientPawnNewRotation(out const Rotator NewRotation);// 0xd1388c0
	void SetCinematicOverrideClass(class FortCinematicCamera OverrideCameraClass);// 0xd138818
	void SetCinematicModeWithWeapon(bool bInCinematicMode, bool bHidePlayer, bool bHideWeapon, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0xd1385e8
	void SetBuildingHighlight(out const BuildingActor*[] TargetedBuildings, byte HighlightType, bool bValidHighlight);// 0xd138494
	void SetAtNameHomeBaseScreen(bool AtScreen);// 0xd1383e8
	bool SetActorHiddenControllerOnly(Actor* TargetActor, const bool bNewHidden);// 0xd1382ec
	void ServerUpgradeBuildingActor(BuildingActor* BuildingActorToUpgrade, int NewUpgradeLevel);// 0xd1381d0
	void ServerUpdateMessageComponents(const FortGameplayMessageComponentBase*[] ModifiedComponents, const GameplayTagContainer[] NewChannelIds);// 0xd1380a0
	void ServerUpdateItemListOptions(FortMinigameItemContainerComponent* ItemContainerComponent, int ItemIndex, const FString[] OptionsKeys, const FString[] OptionsValues);// 0xd137e34
	void ServerUpdateGameplayOptions(const FString[] UserOptionsKeys, const FString[] UserOptionsValues);// 0xd137c50
	void ServerUpdateGameDescriptionData(Actor* DataTarget, const FText GameName, const FText[] GameDescriptionText);// 0xd137a8c
	void ServerUpdateActorOptions(Actor* OptionsTarget, const FString[] OptionsKeys, const FString[] OptionsValues);// 0xd137864
	void ServerUIChoiceCompleted(int ChosenItem, int MenuIdentifier);// 0xd137750
	void ServerTriggerGenericObjectiveEvent(FortObjectiveBase* Objective);// 0xd137678
	void ServerTouchActiveTime();// 0xd13761c
	void ServerTeleportToReticle(Vector TeleportLocation);// 0xd137540
	void ServerTeamChatRoomReady(FString ChatRoomId);// 0xd137454
	void ServerSuicide();// 0xd1373f8
	void ServerStartPIDValueGraphing();// 0xd13739c
	void ServerStartPIDContributionsGraphing();// 0xd137340
	void ServerStartIntensityGraphing();// 0xd1372e4
	void ServerSpotActor(Actor* NewlySpottedActor);// 0xd13720c
	void ServerSpawnMark(Actor* ActorToAttachTo, Vector AttachOffset, const FText PreapprovedText);// 0xd137044
	void ServerSetShouldUsePilotComponent(bool InValue);// 0xd136f60
	void ServerSetShouldUseBotManager(bool InValue);// 0xd136e7c
	void ServerSetReplaySpotLightGroupMoveLocked(uint32 Number, bool bLocked);// 0xd136d88
	void ServerSetReadyToContinue(bool bReady, byte RequestedState, bool bTryStartTimer);// 0xd136c08
	void ServerSetPartyOwner(const UniqueNetIdRepl PartyOwnerUniqueId);// 0xd136aa4
	void ServerSetMarkText(FortMarkActor* MarkActor, FString MarkText);// 0xd136974
	void ServerSetInventoryStateValue(GUID ItemGuid, FortItemEntryStateValue StateValue);// 0xd136850
	void ServerSetHero(FString NewHeroID);// 0xd136764
	void ServerSetCurrentReplaySpotLightDebugDraw(bool bEnabled);// 0xd1366ac
	void ServerSetCurrentReplaySpotLightColor(int R, int G, int B);// 0xd136580
	void ServerSetCurrentReplaySpotLight(FortReplayMovableSpotLight* NewReplaySpotLight);// 0xd1364d0
	void ServerSetClientHasFinishedLoading(bool bInHasFinishedLoading);// 0xd1363ec
	void ServerSetAutoEquipBetterItems(bool bAutoEquip);// 0xd136308
	void ServerSetAntiAddictionPlayTimeMultiplier(float NewPlayTimeRewardRate);// 0xd136230
	void ServerSendClientProgressUpdate(int ClientProgressState, const uint64[] ClientProgressUpdate);// 0xd136100
	void ServerReturnToMainMenu();// 0xd1360a4
	void ServerRequestGameplayAction(byte RequestedAction);// 0xd135fcc
	void ServerRequestAttributeSources(GameplayAttribute Attribute, FortAbilitySystemComponent* AbilitySystemComponent);// 0xd135e14
	void ServerRequestAIDebug();// 0xd135db8
	void ServerReportClientFPS(float ClientAvgFPS, byte ClientAvgFrameScore, byte ClientMaxFrameScore);// 0xd135c58
	void ServerReplyToReadyCheck(bool bReady);// 0xd135b74
	void ServerRepairBuildingActor(BuildingSMActor* BuildingActorToRepair);// 0xd135a9c
	void ServerRemoveInventoryStateValue(GUID ItemGuid, byte StateValueType);// 0xd135980
	void ServerRemoveInventoryItem(GUID ItemGuid, int Count, bool bForceRemoveFromQuickBars, bool bForceRemoval, bool bForcePersistWhenEmpty);// 0xd13576c
	void ServerRemoveDefender(BuildingTrapDefender* DefenderTrap);// 0xd135694
	void ServerReleaseInventoryItemKey(GUID ItemGuid);// 0xd1355bc
	void ServerReAimCurrentReplaySpotLight(Vector NewLocation, Rotator NewRotation);// 0xd1354cc
	void ServerReAimAllReplaySpotLights(Vector NewLocation, Rotator NewRotation);// 0xd1353dc
	void ServerReadyToStartMatch();// 0xd135380
	void ServerPlayerRequestClearIslandData();// 0xd135324
	void ServerPlayEmoteItem(const FortMontageItemDefinitionBase* EmoteAsset, float EmoteRandomNumber);// 0xd135208
	void ServerPingMinimap(Vector WorldLocation, LinearColor PingColor, byte RequiredTeam);// 0xd1350a0
	void ServerOnMaterialSelection(byte NewResourceType, byte NewResourceLevel);// 0xd134f84
	void ServerNotifyMeshNetPlayer(FName Tag);// 0xd134eac
	void ServerModifyStat(FName StatName, int Amount, enum ModType, bool bForceStatSave);// 0xd134cfc
	void ServerLoadingScreenDropped();// 0xb6a5390
	void ServerKillAllAIPawnsAroundPlayer();// 0xd134ca0
	void ServerKickPlayer(const UniqueNetIdRepl PlayerToKick, const FText Reason);// 0xd134a94
	void ServerItemWillBeDestroyed(GUID DestroyedItemGuid, int Count);// 0xd134978
	void ServerHandleMissionEvent_ToggledEditMode(BuildingSMActor* EditableActor, bool bOpened);// 0xd134850
	void ServerHandleMissionEvent_ToggledCursorMode(bool bOpened);// 0xd13476c
	void ServerHandleMissionEvent_StartLeavingZone();// 0xd134710
	void ServerGiftInventoryItemToOtherPlayer(GUID ItemGuid, UniqueNetIdRepl PlayerID, int Quantity);// 0xd1343d8
	void ServerExecutePresetTeamChat(const FText ChatText, UniqueNetIdRepl SenderID);// 0xd134080
	void ServerExecuteInventoryItem(GUID ItemGuid);// 0xd133fa8
	void ServerEndEditingBuildingActor(BuildingSMActor* BuildingActorToStopEditing);// 0xd133ed0
	void ServerEmote(const FName AssetName);// 0xd133df8
	void ServerEditBuildingActor(BuildingSMActor* BuildingActorToEdit, class BuildingSMActor NewBuildingClass, byte RotationIterations, bool bMirrored);// 0xd133c50
	void ServerDropCarriedObject();// 0xd133bf4
	void ServerDropAllItems(const FortItemDefinition* IgnoreItemDef);// 0xd133b1c
	void ServerDisassembleInventoryItems(const GUID[] ItemGuids, const int[] ItemCounts);// 0xd1339e0
	void ServerDeveloper_GetConsoleVariable(FString ConsoleVariable);// 0xd133924
	void ServerDeployDefender(BuildingTrapDefender* DefenderTrap, FString SelectedItemInstanceId, const FName DefenderSquadId, const GUID WeaponToGiveGuid, const int AmmoQuantity);// 0xd133728
	void ServerCreateBuildingActor(CreateBuildingActorData CreateBuildingData);// 0xd1335d8
	void ServerCraftSchematic(FString ItemId, int PostCraftSlot, int CraftAmount, enum RequestedTier, bool bIsQuickCrafted);// 0xd1333d8
	void ServerCombineInventoryItems(GUID TargetItemGuid, GUID SourceItemGuid);// 0xd1332bc
	void ServerClientPawnLoaded(bool bIsPawnLoaded);// 0xd1331d8
	void ServerClearItemList(FortMinigameItemContainerComponent* ItemContainerComponent);// 0xd133100
	void ServerCheatAll(FString Msg);// 0xd133014
	void ServerCheat(FString Msg);// 0xd132f28
	void ServerBroadcastUIFeedbackEvent(FName EventName);// 0xd132e50
	void ServerBroadcastPlayerChangedBuildMode(bool bIsInBuildMode);// 0xd132d6c
	void ServerBeginEditingBuildingActor(BuildingSMActor* BuildingActorToEdit);// 0xd132c94
	void ServerAttemptInventoryDrop(GUID ItemGuid, int Count, bool bTrash);// 0xd132b2c
	void ServerAnnouncementStoppedOnClient(GUID AnnouncementID);// 0xd132a54
	void ServerAddPawnMovementInput(FortPawn* InChar, Vector WorldDirection, float ScaleValue, bool bForce);// 0xd1328a0
	void ServerAcknowledgeDelayedQuickBarAction(const uint32[] ProcessedActionIds);// 0xd1327b4
	void SendStreamingAnalytics(MediaPlayer* MediaPlayer);// 0xd13270c
	void SendMessage(out const FText Message);// 0xd1325f4
	void ReturnToMainMenu();// 0xd1325d8
	void ReturnToAthenaItemShop();// 0xd1325bc
	void ResetInputRotationScale();// 0xd1325a8
	void ReportVideoStreamingError(MediaPlayer* MediaPlayer, bool bLocalContentFallback, FString LastError);// 0xd13246c
	void RemoveItemFromQuickBars(FortItemDefinition* ItemDefinition);// 0xd1323c4
	void RefreshHUDElementVisibilitiesToSettings();// 0xd1323a8
	void ProcessMcpProfileUpdate(const ProfileUpdateSingle Update);// 0xd1322b8
	void PrintEventInfo();// 0xd1322a4
	void PrintDebugInfo();// 0xd132288
	void PreparePlayerForDisplay();// 0xd13226c
	void PostHeroStatSkillPointsEarned(int NumSkillPoints);// 0xd1321c4
	void PostHeroStatMissionCompleted(int DifficultyRating);// 0xd13211c
	void PostHeroStatCollectionBookProgressMade(int LevelReached);// 0xd132074
	void PlaySpatialSound(SoundBase* Sound, Vector Location);// 0xd131f8c
	void PlayerRequestClearIslandData();// 0xd131f70
	void PlayEmoteItem(const FortMontageItemDefinitionBase* EmoteAsset, enum PlayMode);// 0xd131e80
	bool OwnsIslandVolume(FortVolume* Volume);// 0xd131dcc
	bool OwnsCurrentIslandVolume();// 0xd131d94
	void OpenVoteDialog();// 0xd131d80
	void OpenInventory(const FName InventoryTabId);// 0xd131cd8
	void OpenChoiceUI(ChoiceData ChoiceData);// 0xd131afc
	void OnRep_UpdatedUnsavedPrimaryMissionProgress();// 0xd131ae8
	void OnRep_UpdatedObjectiveStats();// 0xd131ad4
	void OnRep_PIDValuesGraphInfo();// 0xd131ac0
	void OnRep_PIDContributionsGraphInfo();// 0xd131aac
	void OnRep_MeshParentIds();// 0xd131a98
	void OnRep_LatestRewardReport();// 0xd131a84
	void OnRep_IntensityGraphInfo();// 0xd131a70
	void OnRep_HoldingObject();// 0xd131a5c
	void OnRep_DelayedQuickBarActions();// 0xd131a48
	void OnRep_CheatMovement();// 0xd131a34
	void OnRep_bHasServerFinishedLoading();// 0xd131a20
	void OnMinigameVolumeStateChanged(enum NewState, FortVolume* Volume);// 0xd131930
	void OnLocalInteraction(Actor* ReceivingActor);// 0xbbc0600
	void OnDisplayHitMarker(out const GameplayTagContainer HitTags, byte Zone);// 0xbbc0600
	void NotifyMeshNetPlayer(FName Tag);// 0xd131888
	void MutePlayer(out const UniqueNetIdRepl UniqueNetId);// 0xd131748
	void MulticastClearWeakSpotData(Object* ParentBuilding);// 0xd131698
	void ModifyStat(FName StatName, int Amount, enum ModType, bool bForceStatSave);// 0xd131528
	void MarkCollectionItemSeen(FString CollectionType, FString Category, FString Variant);// 0xd1313d4
	void LocalStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0xd1312f0
	void LocalPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, FName Tag);// 0xd1311c0
	void LocalOverrideBuildMode(bool bVisible, class BuildingSMActor InBuildingClass, Vector BuildingOverrideDistance, MaterialInterface* PreviewMaterial, Vector NewScale, Rotator NewRotation);// 0xd130fc8
	void LocalOnUiChoiceCompleted(int ChosenItem, int MenuIdentifier);// 0xd130edc
	void LocalOnBlueprintEdit(BuildingSMActor* EditedActor);// 0xd130e34
	void K2_OnLeaveVolume(FortVolume* Volume);// 0xbbc0600
	void K2_OnEnterVolume(FortVolume* Volume);// 0xbbc0600
	bool IsUsingTouch();// 0xd130dfc
	bool IsUsingHarvestingTool();// 0xd130dc4
	bool IsUsingGamepad();// 0xd130d8c
	bool IsUsingFirstPersonCamera();// 0xd130d54
	void IsUsingCosmeticsOwnedByStWHero(out bool bIsUsingOutfitOwnedByHero, out bool bIsUsingBackblingOwnedByHero);// 0xd130c50
	bool IsRequirementsMet(out const FortRequirementsInfo InRequirements, bool bUsePhoenixStats);// 0xd130b08
	bool IsPlayingEmote();// 0xd130ac8
	bool IsPersonalVehicleAvailable();// 0xd130a88
	bool IsPersonalVehicleActive();// 0xd130a48
	bool IsPartyLeader();// 0xd130a08
	bool IsNearActiveEncounters();// 0xd1309e4
	bool IsInRespawnCountdown();// 0xd1309ac
	bool IsInBuildMode();// 0xd130974
	bool IsInAircraft();// 0xd130934
	bool IsHiddenControllerOnly(Actor* TargetActor);// 0xd130880
	bool IsFullscreenMapVisible();// 0xd130840
	bool IsClientTimingOut();// 0xd130824
	bool IsClientBot();// 0xd1307e8
	bool IsBuildToolOverridden();// 0xd1307c8
	bool IsAutoChangeMaterialOn();// 0xd130790
	bool IsActionInputIgnored();// 0xd130758
	void InitializeZeroingCameraRoll();// 0xd130744
	void HideFullScreenMap();// 0xd130730
	bool HasPermissionToEditWorld(const BuildingActor* Building, out const Vector Location, out const Rotator Rotation);// 0xd1305d8
	bool HasLockOnTarget();// 0xd1305a0
	void HandleWorldInventoryLocalUpdate();// 0xd130584
	void HandleWinnerAnnounced(FString WinnerPlayerName);// 0xd130488
	void HandleViewTargetInventoryLocalUpdate();// 0xd130474
	void HandleOutpostInventoryLocalUpdate();// 0xd130460
	void HandleNonZeroRollSetOnCamera();// 0xd13044c
	void HandleDifferentHeroLoadoutActivated(const FortMcpProfileCampaign* Profile);// 0xd13039c
	void HandleBattleMapSpectatorEndPlay(Actor* Actor, byte EndPlayReason);// 0xd1302b4
	void GivePlayerAmmo(int AmmoCount);// 0xd13020c
	bool GetUseHoldToSwapPickupSetting();// 0xd1301ec
	float GetTimeRemainingForRespawnBP();// 0xd1301b0
	int GetTeamPerkProgressiveActivationLevel();// 0xd13017c
	BuildingActor* GetTargetedBuilding();// 0xd130148
	int GetStatValue(FName StatName, enum Period);// 0xd130058
	bool GetRotatePawnToCamera();// 0xd130018
	bool GetRevertPlayerListenerChangeFlag();// 0xd12ffe0
	FortRegisteredPlayerInfo* GetRegisteredPlayerInfo();// 0xd12ffc4
	AthenaCharacterItemDefinition* GetRandomDefaultAthenaCharacterDefinition(FortMcpProfileAthena* McpAthenaProfile);// 0xd12ff14
	FortQuestManager* GetQuestManager(enum SubGame);// 0xd12fe5c
	FortPlayerPawn* GetPlayerPawnOrVehicleDriver();// 0xd12fe28
	FortPlayerPawn* GetPlayerPawn();// 0xd12fdec
	int GetNumQuickbarSlots(enum QuickBarType);// 0xd12fd3c
	FortMinigameManager* GetMinigameManager(enum SubGame);// 0xd12fc84
	FortMcpProfileCampaign* GetMcpCampaignProfile();// 0xd12fc68
	AthenaMarkerComponent* GetMarkerComponent();// 0xb6a5354
	enum GetLockOnState();// 0xd12fc34
	int GetItemNumInStackByGuid(GUID ItemGuid);// 0xd12fb84
	FortItem* GetItemInQuickbarSlot(enum QuickBarType, int SlotIndex);// 0xd12fa94
	bool GetItemDefinitionOwnershipState(const FortItemDefinition* ItemDefinition, out bool bIsOwned);// 0xd12f98c
	FText GetGliderDisplayName();// 0xd12f8bc
	UniqueNetIdRepl GetGameAccountId();// 0xd12f708
	int GetFPSForHUD();// 0xd12f6d4
	bool GetForceAllowCameraMode();// 0xd12f6b4
	FortCollectionBookManager* GetCollectionBookManager();// 0xd12f680
	BuildingPlayerPrimitivePreview* GetBuildPreviewMarker();// 0xd12f64c
	FortAwardManager* GetAwardManager(enum SubGame);// 0xd12f594
	bool GetAtNameHomeBaseScreen();// 0xd12f578
	FortControllerComponent_Aircraft* GetAircraftComponent();// 0xd12f544
	FortAIDirectorDataManager* GetAIDirectorDataManager();// 0xd12f510
	Actor* GetActorUnderReticle();// 0xd12f4dc
	int GetAccountLevel();// 0xd12f4a8
	FortAccountItem* GetAccountItem(FString ID);// 0xd12f39c
	void ForwardActiveVariantChangeRequest(FName ItemTemplateToChange, GameplayTag VariantChannelToChange, GameplayTag DesiredActiveVariant, FortPlayerPawn* PreviewPawn);// 0xd12f208
	void FortClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0xd12f09c
	void FortClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xd12ef70
	void ForceCancelBuildingTool();// 0xd12ef5c
	void FixupInteractionWidgetsOnUnzoom();// 0xd12ef48
	bool FindItem(const FortItem* Item, out enum OutQuickBar, out int OutSlot);// 0xd12ede8
	void ExecuteInventoryItemDefinition(FortItemDefinition* ItemDefinition, float Delay, bool bForceExecute, bool bActivateSlotAfterSettingFocused);// 0xd12ec68
	void Emote(out const FName AssetName);// 0xd12ebac
	void DumpHomebaseRatingInfo();// 0xd12eb98
	void DropSpecificItem(const FortItemDefinition* DropItemDef);// 0xd12eaf0
	void DropAllItems(const FortItemDefinition* IgnoreItemDef, const FortItemDefinition* AdditionalIgnoreItemDef, bool bIgnoreBuildingMaterials, bool bSpawnPickups);// 0xd12e97c
	void DeployDefender(BuildingTrapDefender* DefenderTrap, const FortDefenderItem* DefenderItem, out const FName DefenderSquadId, const FortItem* WeaponItem, const int AmmoQuantity);// 0xd12e7c8
	bool DBNOTryStartCarry();// 0xd12e790
	void DBNOCarryThrow();// 0xd12e77c
	void DBNOCarryHoist();// 0xd12e768
	void DBNOCarryDrop();// 0xd12e754
	int CountInventoryOverflowFromAddingItem(out const FortItemEntry ItemDescription, bool bIsClassItem, bool bFromPickup);// 0xd12e5e0
	void ClientUpdateServerOnPlayerChangedBuildMode();// 0xd12e5c4
	void ClientUpdateRichPresence(enum RichPresenceChange, bool bImportant);// 0xd12e4cc
	void ClientUpdatePlayerList();// 0xd12e4b0
	void ClientTriggerUIFeedbackEvent(FName EventName);// 0xd12e400
	void ClientSwapQuickBarFocus(enum InQuickBar, int SlotOverride, bool bForceExecution);// 0xd12e2cc
	void ClientStopUIFeedbackEvent(FName EventName);// 0xd12e21c
	void ClientStopAutoRun();// 0xd12e200
	void ClientSpawnWeakSpotOnBuildingActor(BuildingWeakSpotData ReplicatedWeakSpotData);// 0xd12e118
	void ClientSideEditPredictionTimedOut();// 0xd12e104
	void ClientSetSpectatorCamera(Vector CameraLocation, Rotator CameraRotation);// 0xd12e014
	void ClientSetInviteFlags(const JoinabilitySettings Settings);// 0xd12df60
	void ClientSetActionMappingEnabled(FName ActionName, bool bEnabled);// 0xd12de68
	void ClientSendMessage(const FText Message, SoundBase* StartSound);// 0xd12dd1c
	void ClientSendConfirmationMessage(const FText ConfirmationMessage, bool bClientQuitAfterMessage);// 0xd12dbc8
	void ClientRequestReadyCheck(const FText QueryText, const FText YesText, const FText NoText);// 0xd12d94c
	void ClientReportGotResourceFromVehicle(Actor* Vehicle, int ResourceCount);// 0xd12d85c
	void ClientReportDamagedResourceBuilding(BuildingSMActor* BuildingSMActor, byte PotentialResourceType, int PotentialResourceCount, bool bDestroyed, bool bJustHitWeakspot);// 0xd12d69c
	void ClientRegisterWithParty();// 0xd12d680
	void ClientRefreshPlayerList();// 0xd12d664
	void ClientReceivePresetTeamChat(const FText ChatText, UniqueNetIdRepl SenderID);// 0xd12d3dc
	void ClientReceivedAttributeSources(GameplayAttribute Attribute, FortAbilitySystemComponent* AbilitySystemComponent, const AttributeModifierInfo[] Sources);// 0xd12d24c
	void ClientReadyCheckComplete(bool bPassed);// 0xd12d168
	void ClientPrecacheMediaSource(MediaPlayer* InMediaPlayer, MediaSource* InMediaSource);// 0xd12d07c
	void ClientPingMinimap(Vector WorldLocation, LinearColor PingColor);// 0xd12cf8c
	void ClientOpenChoiceUI(ChoiceData ChoiceItems);// 0xd12cda8
	void ClientOnGenericPlayerInitialization();// 0xd12cd8c
	void ClientLogDebugString(FString Msg);// 0xd12ccd0
	void ClientJoinConsoleSession(FString ConsoleSession);// 0xd12cbe4
	void ClientGivePlayerLocalAccountItem(FortAccountItemDefinition* ItemDefinition, int Count);// 0xd12caf4
	void ClientForceWorldInventoryUpdate();// 0xd12cad8
	void ClientForceUpdateQuickbar(enum QuickbarToRefresh);// 0xd12ca28
	void ClientForceProfileQuery();// 0xd12ca0c
	void ClientForceCancelBuildingTool();// 0xd12c9f0
	void ClientFinishedInteractionInZone();// 0xd12c9d4
	void ClientFailedToBeginEditingBuildingActor(BuildingSMActor* BuildingActorToStopEditing);// 0xd12c924
	void ClientExecuteInventoryItem(GUID ItemGuid, float Delay, bool bForceExecute, bool bActivateSlotAfterSettingFocused);// 0xd12c7a4
	void ClientEquipItem(const GUID ItemGuid, bool bForceExecution);// 0xd12c6ac
	void ClientEndGameKick();// 0xd12c690
	void ClientDeveloper_GetConsoleVariable(FString ConsoleVariable, FString Value);// 0xd12c588
	void ClientCreateOrJoinChatRoom(FString ChatRoomId);// 0xd12c4cc
	void ClientConfirmTargetData(uint16 UniqueId, bool bSuccess, const byte[] HitReplaces);// 0xd12c388
	void ClientCancelCrafting();// 0xd12c36c
	void ClientBotSetModuleToUse(FString PilotCategory, FString NewModule, bool bResetNow);// 0xd12c21c
	void ClientBotEnqueueCommand(FString CommandToEnqueue);// 0xd12c160
	void ClientAddScoreNumber(int Score, enum ScoreCategory, const Vector_NetQuantize ScoreLocation, bool bDisplayScoreOnPlayer);// 0xd12bfec
	void ClientActivateSlot(enum InQuickBar, int Slot, float ActivateDelay, bool bUpdatePreviousFocusedSlot, bool bForceExecution);// 0xd12be2c
	bool CheckPossessionOfAmountOfItems(enum Type, int AmountToCheck);// 0xd12bd38
	void CheatAll(FString Msg);// 0xd12bc84
	void Cheat_StopObjectiveServer(FortObjectiveBase* Objective, const enum Status);// 0xd12bb68
	void Cheat_ForcePlayEmoteItem(const FortMontageItemDefinitionBase* EmoteAsset);// 0xd12ba90
	void Cheat_ForceCosmeticVariantChannels(const McpVariantChannelInfo[] CosmeticVariantChannels);// 0xd12b9b0
	void Cheat_ForceAthenaCosmeticItemInSlot(const AthenaCosmeticItemDefinition* CosmeticItem, enum Slot, int Index);// 0xd12b850
	void Cheat_ClearForcedCosmeticVariantChannels();// 0xd12b7f4
	void Cheat_ClearForcedCosmeticItems();// 0xd12b798
	void Cheat(FString Msg);// 0xd12b6e4
	void ChangeActiveVariantForCosmeticItem(FName ItemTemplateToChange, GameplayTag VariantChannelToChange, GameplayTag DesiredActiveVariant, FortPlayerPawn* PreviewPawn);// 0xd12b57c
	bool CanEnableBattleMapSpectator();// 0xd12b544
	bool CanAlterHostileWalls();// 0xd12b504
	void BroadcastOnPickupCreated(FortPickup* Pickup);// 0xd12b454
	FortItem* BP_GetInventoryItemWithGuid(GUID ItemGuid);// 0xd12b3a4
	void BP_FindItemInstancesFromDefinition(const FortItemDefinition* ItemDefinition, out FortItem*[] ItemArray);// 0xd12b2a4
	FortItem* BP_FindExistingItemForDefinition(const FortItemDefinition* ItemDefinition, bool bInStorageVault);// 0xd12b1ac
	bool AreActionsBoundToSameKey(FName FirstActionName, FName SecondActionName, const byte InputEvent);// 0xd12b07c
	void AlternateInteractCarryHoldStopped(FName InputActionName, bool bCompletedSuccessfully);// 0xd12af8c
	void AddItemToQuickBars(FortItemDefinition* ItemDefinition, enum QuickBarType, int SlotIndex);// 0xd12ae64
	void AddInventoryItemWithAnimation(out const FortItemEntry ItemDescription);// 0xd12ad9c
	void AddInventoryItemWithAlterationBasedOnLootLevel(FortItemEntry ItemDescription);// 0xd12accc

--------------------------------
Class: PlayspacePlayerController.PlayerController.Controller.Actor.Object
	bool bUsePlayerSpawningComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	class PlayspaceControllerComponent_PlayerSpawning* ControllerSpawningComponent;//[Offset: 0x6b8, Size: 8]

--------------------------------
Class: FortMcpCollectedItemProperties
	FString VariantTag;//[Offset: 0x0, Size: 16]
	FString[] ContextTags;//[Offset: 0x10, Size: 16]
	JsonObjectWrapper Properties;//[Offset: 0x20, Size: 32]
	enum SeenState;//[Offset: 0x40, Size: 1]
	int Count;//[Offset: 0x44, Size: 4]

--------------------------------
Class: JsonObjectWrapper
	FString JsonString;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PlayspaceControllerComponent_PlayerSpawning.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnPlayerQueuedToSpawn;//[Size: 16]
	CameraActor* SpawnCameraActor;//[Offset: 0xc0, Size: 8]
	bool bClientReadyForSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	ReplicatedSpawnInfo ReplicatedSpawnInfo;//[Offset: 0xcc, Size: 44]
	void ServerMarkReadyForSpawning();// 0x7eba5c8
	void OnRep_ReplicatedSpawnInfo();// 0x7eba574
	ReplicatedSpawnInfo GetSpawnInfo();// 0x7eba588

--------------------------------
Class: ControllerComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: ReplicatedSpawnInfo
	Vector SpawnLocation;//[Offset: 0x0, Size: 12]
	Rotator SpawnRotation;//[Offset: 0xc, Size: 12]
	float ServerSpawnTime;//[Offset: 0x18, Size: 4]
	Vector LastLocation;//[Offset: 0x1c, Size: 12]
	float MinTimeForCameraFadeTransition;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortPickupTossOverrideData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float MinTossDist;//[Offset: 0x4, Size: 4]
	float MaxTossDist;//[Offset: 0x8, Size: 4]
	float SpawnDirectionConeHalfAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BattleMapPawnLive.FortReplaySpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	class BattleMapNode* GroundMoveNodeClass;//[Offset: 0x500, Size: 8]
	class BattleMapNode* AirMoveNodeClass;//[Offset: 0x508, Size: 8]
	class BattleMapNode* GotKillNodeClass;//[Offset: 0x510, Size: 8]
	class BattleMapNode* ZoneNodeClass;//[Offset: 0x518, Size: 8]
	class BattleMapNode* TeamFlightNodeClass;//[Offset: 0x520, Size: 8]
	class BattleMapTimeIndicator* TimeIndicatorClass;//[Offset: 0x528, Size: 8]
	SoundBase* SelectedNodeSound;//[Offset: 0x530, Size: 8]
	SoundBase* HoveredNodeSound;//[Offset: 0x538, Size: 8]
	void ZoomIn(const float Val);// 0xce41190
	void HandleTimeIndicatorUpdatedSegment(const BattleMapNode* StartNode, const BattleMapEdge* Edge, const BattleMapNode* EndNode);// 0xce4106c
	bool HandleClickReleased(Key ButtonReleased);// 0xce40edc
	bool HandleClickPressed(Key ButtonPressed);// 0xce40d4c
	bool BP_SetTimelineMode(bool bEnabled);// 0xce40c90
	bool BP_IsOnTimelineMode();// 0xce40c74

--------------------------------
Class: FortReplaySpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	FortSpectatorCameraComponent* SpectatorCameraComponent;//[Offset: 0x2a8, Size: 8]
	SlateBrush MiniMapIconBrush;//[Offset: 0x2b0, Size: 136]

--------------------------------
Class: BattleMapNode.Actor.Object
	class BattleMapEdge* EdgeClass;//[Offset: 0x220, Size: 8]
	class BattleMapNode* ChildrenNodeClass;//[Offset: 0x228, Size: 8]
	bool bEnableAutomaticResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bSupportSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool bSupportScrubbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	MaterialInterface*[] CustomMaterialsPerPlayerIndex;//[Offset: 0x238, Size: 16]
	BattleMapEdge*[] NextEdges;//[Offset: 0x280, Size: 16]
	<BattleMapNode*,BattleMapEdge*> ChildrenNodes;//[Offset: 0x2c0, Size: 80]

--------------------------------
Class: BattleMapEdge.Actor.Object
	MaterialInterface*[] CustomMaterialsPerPlayerIndex;//[Offset: 0x220, Size: 16]
	void OnNextNextSet(const BattleMapNode* NextNextNode);// 0xce40924
	void HandeResizedBattleNode(float NewScaling, const BattleMapNode* Node);// 0xce4083c

--------------------------------
Class: BattleMapTimeIndicator.Actor.Object

--------------------------------
Class: FortSpectatorCameraComponent.CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	FortPlayerControllerSpectating* SpectatorController;//[Offset: 0x8b8, Size: 8]
	Actor* IntendedViewTarget;//[Offset: 0x8c0, Size: 8]
	FortSpectateBlend* CurrentBlend;//[Offset: 0x8c8, Size: 8]
	CurveVector* ScreenFringeFOVCurve;//[Offset: 0x8d8, Size: 8]
	float ZoomRate;//[Offset: 0x8e0, Size: 4]
	float FocalLengthInterpSpeed;//[Offset: 0x8e4, Size: 4]
	void OnFocalLengthSettingChanged(float NewFocalLength);// 0xd1d890c
	void OnApertureSettingChanged(float NewAperture);// 0xd1d8864
	float GetAutoCameraCutDistanceThreshold();// 0xd1d8830

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7c0, Size: 12]
	CameraFilmbackSettings Filmback;//[Offset: 0x7cc, Size: 12]
	CameraLensSettings LensSettings;//[Offset: 0x7d8, Size: 24]
	CameraFocusSettings FocusSettings;//[Offset: 0x7f0, Size: 88]
	float CurrentFocalLength;//[Offset: 0x848, Size: 4]
	float CurrentAperture;//[Offset: 0x84c, Size: 4]
	float CurrentFocusDistance;//[Offset: 0x850, Size: 4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x860, Size: 16]
	NamedLensPreset[] LensPresets;//[Offset: 0x870, Size: 16]
	FString DefaultFilmbackPresetName;//[Offset: 0x880, Size: 16]
	FString DefaultFilmbackPreset;//[Offset: 0x890, Size: 16]
	FString DefaultLensPresetName;//[Offset: 0x8a0, Size: 16]
	float DefaultLensFocalLength;//[Offset: 0x8b0, Size: 4]
	float DefaultLensFStop;//[Offset: 0x8b4, Size: 4]
	void SetLensPresetByName(FString InPresetName);// 0xa7f3f48
	void SetFilmbackPresetByName(FString InPresetName);// 0xa7f40a8
	void SetCurrentFocalLength(float InFocalLength);// 0xa7f4358
	float GetVerticalFieldOfView();// 0xa7f42f0
	static NamedLensPreset[] GetLensPresetsCopy();// 0xa7f3e68
	FString GetLensPresetName();// 0xa7f3ffc
	float GetHorizontalFieldOfView();// 0xa7f4324
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0xa7f3ed8
	FString GetFilmbackPresetName();// 0xa7f4244
	FString GetDefaultFilmbackPresetName();// 0xa7f415c

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 4]
	float SensorHeight;//[Offset: 0x4, Size: 4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 4]
	float MaxFocalLength;//[Offset: 0x4, Size: 4]
	float MinFStop;//[Offset: 0x8, Size: 4]
	float MaxFStop;//[Offset: 0xc, Size: 4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 56]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 4]
	float FocusOffset;//[Offset: 0x50, Size: 4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 40]
	Vector RelativeOffset;//[Offset: 0x28, Size: 12]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 16]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 24]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 16]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FortPlayerControllerSpectating.FortPlayerControllerGameplay.FortPlayerController.PlayspacePlayerController.PlayerController.Controller.Actor.Object
	enum CurrentCameraType;//[Offset: 0x2c08, Size: 1]
	enum[] CameraModeCycle;//[Offset: 0x2c10, Size: 16]
	LinearColor MinimapPlayerIconColorBase;//[Offset: 0x2c50, Size: 16]
	LinearColor MinimapPlayerIconColorHovered;//[Offset: 0x2c60, Size: 16]
	float ZoomThresholdForPlayerNames;//[Offset: 0x2c70, Size: 4]
	QuickBarData QuickBarDefinitions;//[Offset: 0x2c78, Size: 16]
	MulticastInlineDelegateProperty OnFollowedPlayerChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnCameraTypeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerBecameRelevant;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerBecameIrrelevant;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerStateAdded;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerDied;//[Size: 16]
	MulticastInlineDelegateProperty OnTimelineScrubbed;//[Size: 16]
	MulticastInlineDelegateProperty OnZoomChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnShowNotification;//[Size: 16]
	MulticastInlineDelegateProperty OnShowNotificationsEnabledChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnFollowedPlayerChangedTeam;//[Size: 16]
	MaterialInterface* SpectatorPostProcessMaterial;//[Offset: 0x2d70, Size: 8]
	class FortReplaySpectatorPawnBase* SpectatorPawnBaseClass;//[Offset: 0x2d88, Size: 8]
	class FortSpectatorThirdPersonPawn* ThirdPersonPawnBaseClass;//[Offset: 0x2d90, Size: 8]
	class HoverDronePawn* HoverDronePawnClass;//[Offset: 0x2d98, Size: 8]
	class BattleMapPawnReplay* BattleMapPawnClass;//[Offset: 0x2da0, Size: 8]
	class HoverDronePawn* ARDronePawnClass;//[Offset: 0x2da8, Size: 8]
	class FortMiniMapTeamIndicators* MinimapIndicatorClass;//[Offset: 0x2db0, Size: 8]
	SavedPlayerSpectatorCameraData[] SavedCameraStates;//[Offset: 0x2db8, Size: 16]
	<PlayerState*,bool> PlayerRelevancyTrackingMap;//[Offset: 0x2f50, Size: 80]
	<UniqueNetIdRepl,FortPlayerStateAthena*> AddedPlayersMap;//[Offset: 0x2fa0, Size: 80]
	<UniqueNetIdRepl,AthenaPlayerMatchReport*> PlayerMatchReports;//[Offset: 0x2ff0, Size: 80]
	Vector ChaseCamOffset;//[Offset: 0x3040, Size: 12]
	FortPlayerState* LastDamagerOfViewTarget;//[Offset: 0x3050, Size: 8]
	Actor* HoveredActor;//[Offset: 0x3058, Size: 8]
	InputComponent* FullScreenMapInputComponent;//[Offset: 0x3060, Size: 8]
	SavedSpectatorCameras HotkeyCameras;//[Offset: 0x3088, Size: 16]
	Actor* LastKnownViewTarget;//[Offset: 0x30d8, Size: 8]
	RemoteViewRotSnapshotManager RemoteViewRotSnapshotManager;//[Offset: 0x3198, Size: 72]
	Volume* CameraBoundsVolume;//[Offset: 0x31f8, Size: 8]
	bool ClampDroneToCameraBoundsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3200, Size: 1]
	class FortRelevancyZoneIndicator* RelevancyZoneIndicatorClass;//[Offset: 0x3278, Size: 8]
	FortRelevancyZoneIndicator* RelevancyZoneIndicator;//[Offset: 0x3280, Size: 8]
	FortReplayContext* ReplayContext;//[Offset: 0x3288, Size: 8]
	AthenaMarkerComponent* MarkerComponent;//[Offset: 0x3308, Size: 8]
	FortPlayerStateAthena*[] SquadMembers;//[Offset: 0x3310, Size: 16]
	FortBroadcastRemoteClientInfo* FollowedPlayerRemoteClientInfo;//[Offset: 0x3340, Size: 8]
	void ZoomIn(const float Val);// 0xd168ccc
	void UpdateReplayEvents(enum Type);// 0xd168c1c
	void ToggleSpectatorHUD();// 0xd168c08
	void SpectatorSpecialAction();// 0xd168bf4
	void SpectatorClearSavedCameraShots();// 0xd168be0
	void SetShowVehiclesOnMap(bool bInShowVehiclesOnMap);// 0xd168b30
	void SetShowPlayersOnMap(bool bInShowPlayersOnMap);// 0xd168a80
	void SetShowBusPathsOnMap(bool bInShowBusPathsOnMap);// 0xd1689d0
	void SetNotificationsEnabled(bool bNewState);// 0xd168920
	void SetNewCameraType(enum NewCameraType, bool bReset);// 0xd168828
	void SetMapWeaponTracersEnabled(bool bEnable);// 0xd168778
	void SetFollowedPlayer(FortPlayerState* NewPlayerToFollow);// 0xd1686c8
	void SetBlendType(enum NewBlendType);// 0xd168620
	void ResetCameraBoundsVolume();// 0xd16860c
	void ResetCamera();// 0xd1685f0
	void ResetAllCameras();// 0xd1685dc
	void PlayerBecameRelevant(FortPlayerState* FPS);// 0xd16852c
	void OnRep_FollowedPlayerRemoteClientInfo();// 0xd168510
	void OnNextCameraMode();// 0xd1684fc
	bool JumpToHoveredActor();// 0xd1684c4
	bool IsValidToFollow(FortPlayerState* FPS);// 0xd168408
	bool IsPlayerInRelevancy(const FortPlayerState* FPS);// 0xd16834c
	bool IsFollowedPlayerInBus();// 0xd168314
	bool IsCameraBlending();// 0xd1682dc
	bool IsAllowedChangeCamera();// 0xd16829c
	bool HasBroadcasterToken();// 0xd168264
	void HandleTimelineScrubbed(World* InWorld);// 0xd1681bc
	void HandleSquadIdModeChanged(enum SquadIdMode);// 0xd168114
	void HandleNewNotificationRequest(out const FText NotificationText, out const NotificationUISettings NotificationSettings);// 0xd167fac
	bool GetShowVehiclesOnMap();// 0xd167f74
	bool GetShowPlayersOnMap();// 0xd167f3c
	bool GetShowBusPathsOnMap();// 0xd167f04
	bool GetMapWeaponTracersEnabled();// 0xd167ed0
	FortPlayerState* GetFollowedPlayer();// 0xd167e94
	FortSpectatorCameraComponent* GetCurrentSpectatorCameraComponent();// 0xd167e60
	enum GetBlendType();// 0xd167e48
	<UniqueNetIdRepl,FortPlayerStateAthena*> GetAddedPlayersMap();// 0xd167e24
	void FullscreenMapZoom(float Value);// 0xd167d7c
	void FullScreenMapCursorStopDrag();// 0xd167d68
	void FullScreenMapCursorStartDrag();// 0xd167d54
	void FullScreenMapCursorMoved(out const Vector2D CursorWidgetLocation, out const Vector2D CursorDelta);// 0xd167c58
	void FollowPrevTeamMember();// 0xd167c44
	void FollowPrevSquadMember();// 0xd167c30
	void FollowPlayerByName(FString PlayerName);// 0xd167b34
	void FollowNextTeamMember();// 0xd167b20
	void FollowNextSquadMember();// 0xd167b0c
	void FollowLastDamagerOfViewTarget();// 0xd167af8
	bool FollowHoveredPlayer();// 0xd167ac0
	FortPlayerState* FindPlayerStateByUID(out const UniqueNetIdRepl UID);// 0xd167970
	bool CanRespawnAfterDeath();// 0xd167938
	void BlendCameraPlacement(const Transform InTransform, const Transform InTargetTransform, const float BlendDuration, const enum InEasing);// 0xd16779c
	bool AreNotificationsEnabled();// 0xd167778
	void AdjustNormalizedDistanceToPlayer(const float Val);// 0xd1676d0

--------------------------------
Class: FortPlayerControllerGameplay.FortPlayerController.PlayspacePlayerController.PlayerController.Controller.Actor.Object
	FortAmbientAudioController* FortAmbientAudioController;//[Offset: 0x2550, Size: 8]
	int16 PoiTagContainerTableID;//[Offset: 0x2558, Size: 2]
	MulticastInlineDelegateProperty TriggerSetupVehicleFuelWidget;//[Size: 16]
	MulticastInlineDelegateProperty OnAddFuel;//[Size: 16]
	TimerHandle VerifyAllowedToFlyTimerHandle;//[Offset: 0x2598, Size: 8]
	MulticastInlineDelegateProperty OnCreativeGhostEnabledDelegate;//[Size: 16]
	TimerHandle VerifyAllowModeratorModeTimerHandle;//[Offset: 0x25b8, Size: 8]
	TimerHandle VerifyAllowedToBeInvulnerableTimerHandle;//[Offset: 0x25c0, Size: 8]
	MulticastInlineDelegateProperty OnCreativeInvulnerableEnabledDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeHeatmapToggledDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeSwapPhoneAndHarvestHoldChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeFlyingSpeedChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeUIMetricsDisplayChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnShowCreativeGlobalOptions;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeQuickbarEnabledChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeQuickbarComponentLoaded;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeQuickmenuEnabledChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeModeEnabledChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativePreviewScreenshotActiveChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativePreviewScreenshotReset;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativePreviewScreenshotAccepted;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativePreviewScreenshotCancelled;//[Size: 16]
	MulticastInlineDelegateProperty OnBalloonMovementChanged;//[Size: 16]
	FortWorldItemDefinition* CreativeMoveToolItemDefinition;//[Offset: 0x2760, Size: 40]
	class CreativeQuickbarComponent* CreativeQuickbarClass;//[Offset: 0x2788, Size: 40]
	class Object* CreativeCameraPreviewScreenshotClass;//[Offset: 0x27c0, Size: 8]
	CreativeQuickbarComponent* CreativeQuickbarComponent;//[Offset: 0x27c8, Size: 8]
	VehicleTrickInfo VehicleTrickInfo;//[Offset: 0x27d0, Size: 320]
	GhostModeRepData GhostModeRepData;//[Offset: 0x2910, Size: 24]
	MulticastInlineDelegateProperty OnGhostModeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnDBNOCarryPlayerChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnWorldInventoryChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeFlyChangedDelegate;//[Size: 16]
	uint16 ServerNumNPCs;//[Offset: 0x2976, Size: 2]
	uint16 ServerMaxNumNPCs;//[Offset: 0x2978, Size: 2]
	TimerHandle AmbientControllerInitializeTimer;//[Offset: 0x2980, Size: 8]
	bool bDisplayNPCNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2988, Size: 1]
	bool bHasSetInitialPoiTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b0, Size: 1]
	InputComponent* CreativeModeFlyingInputComponent;//[Offset: 0x29b8, Size: 8]
	InputComponent* CreativeModeInputComponent;//[Offset: 0x29c0, Size: 8]
	InputComponent* CreativeGlobalOptionsInputComponent;//[Offset: 0x29c8, Size: 8]
	InputComponent* CreativeModePreviewScreenshotInputComponent;//[Offset: 0x29d0, Size: 8]
	InputComponent* CreativeModeInGameReadyCheckInputComponent;//[Offset: 0x29d8, Size: 8]
	InputComponent* CreativeModeratorModeInputComponent;//[Offset: 0x29e0, Size: 8]
	float[] FlyingModifiers;//[Offset: 0x29e8, Size: 16]
	int FlyingModifierIndex;//[Offset: 0x29f8, Size: 4]
	int UIMetricsDisplayIndex;//[Offset: 0x29fc, Size: 4]
	int FlightSpeedWhenEnteredSprint;//[Offset: 0x2a00, Size: 4]
	bool bIsFlightSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a08, Size: 1]
	bool bIsCreativeModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a09, Size: 1]
	bool bIsCreativeQuickbarEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a09, Size: 1]
	bool bIsCreativeQuickmenuEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a09, Size: 1]
	bool bCreativeMCPProfileIsMatchamkingEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a09, Size: 1]
	bool bIsCreativeThermometer2Enabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a0a, Size: 1]
	bool bIsCreativeThermometerNewUIEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a0a, Size: 1]
	bool bIsCreativeIslandExporterEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a0a, Size: 1]
	bool bIsCreativeModeratorModeEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a0a, Size: 1]
	bool bIsCreativeModeratorModeActive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a0a, Size: 1]
	class CameraModifier[] DefaultCameraModifierClasses;//[Offset: 0x2a28, Size: 16]
	FortCreativeOptionsBundle* CreativeOptions;//[Offset: 0x2a50, Size: 40]
	FortCreativeOptionsBundle* CreativeOptionsInternal;//[Offset: 0x2a78, Size: 8]
	CreativeOptionVariableBase WantsToGhostMode;//[Offset: 0x2a80, Size: 12]
	CreativeOptionVariableBase WantsToBeInvulnerable;//[Offset: 0x2a8c, Size: 12]
	CreativeOptionVariableBase WantedFlightSpeed;//[Offset: 0x2a98, Size: 12]
	CreativeOptionVariableBase WantsToSwapPhoneAndHarvestHold;//[Offset: 0x2aa4, Size: 12]
	CreativeOptionVariableBase WantedUIMetricsDisplay;//[Offset: 0x2ab0, Size: 12]
	<GUID,FortAbilitySetHandle> AppliedInGameModifierAbilitySetHandles;//[Offset: 0x2ac0, Size: 80]
	<GUID,InputComponent*> AbilityActivatedByInputInputComponentMap;//[Offset: 0x2b10, Size: 80]
	<GameplayTag,GameplayAbilitySpecHandle> AbilityActivatedByInputSpecHandleMap;//[Offset: 0x2bb0, Size: 80]
	FortControllerComponent_SpawnedVehicle* SpawnedVehicleComponent;//[Offset: 0x2c00, Size: 8]
	bool Validation_IsFlyingPossible();// 0xd162164
	void StartGhostMode(FortWorldItemDefinition* ItemProvidingGhostMode);// 0xd1620bc
	FortAthenaVehicle* SpawnVehicleAndEnter(class FortAthenaVehicle VehicleClass, const bool bHidePawn, const bool bSetPawnAsVehicleOwner);// 0xd161f74
	void SimulatedSetCreativeModeratorModeActive(bool bActive);// 0xd161ec4
	void ShowQuicktimeEventWidget(float Duration, float SweetSpot, float PerfectTolerance, float GreatTolerance, float GoodTolerance);// 0xd161d1c
	void SetLastUsedCreativePropetyFilter(int PropertyFilterIndex);// 0xd161c74
	void SetHUDElementVisibility(out const GameplayTagContainer HUDElementTags, bool bHideElements, FName ReasonName);// 0xd161b08
	void ServerSetCreativeModeratorModeActive(bool bActive);// 0xd161a24
	void ServerRPCSetDisplayNPCNumbers(bool bEnable);// 0xd161940
	void ServerCreativeToggleFly(const bool bEnableOnly);// 0xd16185c
	void ServerCreativeStopInvulnerable();// 0xd161800
	void ServerCreativeStopGhost();// 0xd1617a4
	void ServerCreativeStopFlyUp();// 0xd161748
	void ServerCreativeStopFlyDown();// 0xd1616ec
	void ServerCreativeStopFly();// 0xd161690
	void ServerCreativeStartInvulnerable();// 0xd161634
	void ServerCreativeStartFlyUp();// 0xd1615d8
	void ServerCreativeStartFlyDown();// 0xd16157c
	void ServerCreativeSetGhost(bool bWantsToGhost);// 0xd161498
	void ServerCreativeSetFlightSprint(bool bSprint);// 0xd1613b4
	void ServerCreativeSetFlightSpeedIndex(int Index);// 0xd1612dc
	void ServerAwardVehicleTrickPoints(int InPoints, int InAirTimeX1000);// 0xd1611c8
	void ResetTrick(Actor* VehicleActor);// 0xd161120
	void ResetHUDElementVisibilityToSettings(out const GameplayTagContainer HUDElementTags);// 0xd161050
	void QuickTimeEventFeedbackWidget(enum Result);// 0xd160fa0
	void PushCreativeReadyCheckInputMode();// 0xd160f8c
	void PopCreativeReadyCheckInputMode();// 0xd160f78
	void OnWantsToGhostModeChanged(FortCreativeOption* CreativeOption, byte IndexValue);// 0xd160e90
	void OnWantsToBeInvulnerableChanged(FortCreativeOption* CreativeOption, byte IndexValue);// 0xd160da8
	void OnWantedUIMetricsDisplayChanged(FortCreativeOption* CreativeOption, byte IndexValue);// 0xd160cc0
	void OnWantedToSwapPhoneAndHarvestHoldChanged(FortCreativeOption* CreativeOption, byte IndexValue);// 0xd160bd8
	void OnWantedFlightSpeedChanged(FortCreativeOption* CreativeOption, byte IndexValue);// 0xd160af0
	void OnVerifyAllowModeratorMode();// 0xd160adc
	void OnVerifyAllowedToFly();// 0xd160ac8
	void OnVerifyAllowedToBeInvulnerable();// 0xd160ab4
	void OnRep_UIMetricsDisplayIndex();// 0xd160aa0
	void OnRep_PoiTagContainerTableID(int16 PreviousPoiTagContainerTableID);// 0xd1609f8
	void OnRep_IsFlightSprinting();// 0xd1609e4
	void OnRep_IsCreativeQuickbarEnabled(bool bPrevIsEnabled);// 0xd160934
	void OnRep_IsCreativeModeratorModeActive();// 0xd160920
	void OnRep_IsCreativeModeEnabled();// 0xd16090c
	void OnRep_GhostModeRepData();// 0xd1608f8
	void OnRep_FlyingModifierIndex();// 0xd1608e4
	void OnRep_CreativeQuickbarComponent();// 0xd1608d0
	bool IsUsingHideOtherPlayerNames();// 0xd160898
	bool IsInGhostMode();// 0xd160878
	bool IsCreativeThermometerNewUIEnabled();// 0xd160840
	bool IsCreativeQuickmenuEnabled();// 0xd160808
	bool IsCreativeQuickbarEnabled();// 0xd1607d0
	bool IsCreativeQuickbarActive();// 0xd160798
	bool IsCreativePreviewScreenshotAvailable();// 0xd160760
	bool IsCreativePhoneAndHarvestHoldSwapped();// 0xd160728
	bool IsCreativeModeratorModeEnabled();// 0xd1606f0
	bool IsCreativeModeratorModeActive();// 0xd1606b8
	bool IsCreativeModeEnabled();// 0xd160680
	bool IsCreativeIslandExporterEnabled();// 0xd160648
	bool IsAllowedToFly();// 0xd160610
	void InitializeAmbientAudioController();// 0xd1605fc
	void HideQuicktimeEventWidget();// 0xd1605e0
	void HandlePoiTagContainerTableFinishedReplicating(FortPoiManager* PoiManager);// 0xd160538
	void GrantCreativePhoneItemDefLoadedCallback();// 0xd160524
	VehicleTrickInfo GetVehicleTrickInfo();// 0xd1604f8
	FString GetSpectatingPlayerName();// 0xd160450
	FString GetSettingsFilteredPlayerName(const FortPlayerState* OtherPlayerState);// 0xd160364
	int GetLastUsedCreativePropetyFilter();// 0xd160330
	FortAmbientAudioController* GetAmbientAudioController();// 0xd160314
	bool FollowPlayer(const enum Follow);// 0xd160258
	void ExitSpawnedVehicle();// 0xd160244
	void EndGhostMode();// 0xd160230
	void DisplayNPCNumbers(bool bDisplay);// 0xd160180
	void DisplayHUDElementVisibility();// 0xd16016c
	void DisableTrickCredit(float Duration);// 0xd1600c4
	void CreativeToggleFly(const bool bEnableOnly);// 0xd160014
	void ClientRemoveItemAbilitySet(FortAbilitySet* AbilitySet, GUID GUID);// 0xd15ff24
	void ClientCreativeStopFly();// 0xd15ff08
	void ClientCreativeSetUIMetricsDisplayIndex(int Index);// 0xd15fe58
	void ClientCreativePhoneCreated();// 0xd15fe3c
	void ClientApplyItemAbilitySet(FortAbilitySet* AbilitySet, GUID GUID);// 0xd15fd4c
	void CheckGhostModeItemReplicated();// 0xd15fd38
	void CheckGhostModeItemRemoved(FortWorldItemDefinition* GhostModeItemDef);// 0xd15fc90
	bool CanFollowAPlayer(const bool bOnlyCheckTeammates);// 0xd15fbcc
	bool AreHUDElementsVisible(out const GameplayTagContainer HUDElementTags);// 0xd15faf0
	void ActivateCreativePreviewScreenshot(bool bActivate);// 0xd15fa40

--------------------------------
Class: QuickBarData
	QuickBarSlotData[] QuickbarSlots;//[Offset: 0x0, Size: 16]

--------------------------------
Class: QuickBarSlotData
	enum[] AcceptedItemTypes;//[Offset: 0x0, Size: 16]
	bool bStaticSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FortWorldItemDefinition* DefaultItem;//[Offset: 0x18, Size: 40]

--------------------------------
Class: FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	GameplayTagContainer RequiredEquipTags;//[Offset: 0x348, Size: 32]
	FortPickupRestrictionLists[] PickupRestrictionListEntry;//[Offset: 0x368, Size: 16]
	enum DropBehavior;//[Offset: 0x378, Size: 1]
	bool bIgnoreRespawningForDroppingAsPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x379, Size: 1]
	bool bCanAutoEquipByClass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x379, Size: 1]
	bool bPersistInInventoryWhenFinalStackEmpty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x379, Size: 1]
	bool bSupportsQuickbarFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x379, Size: 1]
	bool bSupportsQuickbarFocusForGamepadOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x379, Size: 1]
	bool bShouldActivateWhenFocused;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x379, Size: 1]
	bool bForceFocusWhenAdded;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x379, Size: 1]
	bool bForceIntoOverflow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x379, Size: 1]
	bool bForceStayInOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37a, Size: 1]
	bool bDropCurrentItemOnOverflow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37a, Size: 1]
	bool bShouldShowItemToast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37a, Size: 1]
	bool bShowDirectionalArrowWhenFarOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37a, Size: 1]
	bool bCanBeDropped;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37a, Size: 1]
	bool bCanBeReplacedByPickup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37a, Size: 1]
	bool bItemCanBeStolen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37a, Size: 1]
	bool bCanBeDepositedInStorageVault;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37a, Size: 1]
	bool bItemHasDurability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37b, Size: 1]
	bool bAllowedToBeLockedInInventory;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37b, Size: 1]
	bool bOverridePickupMeshTransform;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37b, Size: 1]
	bool bAlwaysCountForCollectionQuest;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37b, Size: 1]
	bool bCountForCollectionQuestDroppedByAI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37b, Size: 1]
	bool bDropOnDeath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37b, Size: 1]
	bool bDropOnLogout;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37b, Size: 1]
	bool bDropOnDBNO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37b, Size: 1]
	bool bDoesNotNeedSourceSchematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 1]
	bool bUsesGoverningTags;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 1]
	int DropCount;//[Offset: 0x380, Size: 4]
	float MiniMapViewableDistance;//[Offset: 0x384, Size: 4]
	SlateBrush MiniMapIconBrush;//[Offset: 0x388, Size: 136]
	FText OwnerPickupText;//[Offset: 0x410, Size: 24]
	DataTableCategoryHandle LootLevelData;//[Offset: 0x428, Size: 24]
	Transform PickupMeshTransform;//[Offset: 0x440, Size: 48]
	bool bIsPickupASpecialActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	GameplayTag SpecialActorPickupTag;//[Offset: 0x474, Size: 8]
	SpecialActorSingleStatData[] SpecialActorPickupStatList;//[Offset: 0x480, Size: 16]
	FName PickupSpecialActorUniqueID;//[Offset: 0x490, Size: 8]
	SlateBrush PickupMinimapIconBrush;//[Offset: 0x498, Size: 136]
	Vector2D PickupMinimapIconScale;//[Offset: 0x520, Size: 8]
	SlateBrush PickupCompassIconBrush;//[Offset: 0x528, Size: 136]
	Vector2D PickupCompassIconScale;//[Offset: 0x5b0, Size: 8]
	ScalableFloat PickupDespawnTime;//[Offset: 0x5b8, Size: 40]
	ScalableFloat InStormPickupDespawnTime;//[Offset: 0x5e0, Size: 40]
	ScalableFloat NetworkCullDistanceOverride;//[Offset: 0x608, Size: 40]
	StaticMesh* PickupStaticMesh;//[Offset: 0x630, Size: 40]
	SkeletalMesh* PickupSkeletalMesh;//[Offset: 0x658, Size: 40]
	class FortPickupEffect* PickupEffectOverride;//[Offset: 0x680, Size: 40]
	SoundBase* PickupSound;//[Offset: 0x6a8, Size: 40]
	SoundBase* PickupByNearbyPawnSound;//[Offset: 0x6d0, Size: 40]
	SoundBase* DropSound;//[Offset: 0x6f8, Size: 40]
	SoundBase* DroppedLoopSound;//[Offset: 0x720, Size: 40]
	SoundBase* LandedSound;//[Offset: 0x748, Size: 40]
	DataTableRowHandle DisassembleRecipe;//[Offset: 0x770, Size: 16]
	float DisassembleDurabilityDegradeMinLootPercent;//[Offset: 0x780, Size: 4]
	float DisassembleDurabilityDegradeMaxLootPercent;//[Offset: 0x784, Size: 4]
	int PreferredQuickbarSlot;//[Offset: 0x788, Size: 4]
	int MinLevel;//[Offset: 0x78c, Size: 4]
	int MaxLevel;//[Offset: 0x790, Size: 4]
	byte NumberOfSlotsToTake;//[Offset: 0x794, Size: 1]
	float GetMaxDurability(int ItemLevel);// 0xd22b184
	int GetInitialAmmo(const int ItemLevel);// 0xd22b0cc
	float GetDPSAtLevel(int ItemLevel);// 0xd22b014
	float GetDamageAtLevel(int ItemLevel);// 0xd22af5c
	FortWorldItemDefinition* GetAmmoWorldItemDefinition_BP();// 0xd22af28
	bool CanBeDisassembled();// 0xd22aef0

--------------------------------
Class: FortPickupRestrictionLists
	FortPickupTagTestContainer WhiteList;//[Offset: 0x0, Size: 56]
	FortPickupTagTestContainer Blacklist;//[Offset: 0x38, Size: 56]

--------------------------------
Class: FortPickupTagTestContainer
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	FText FailReason;//[Offset: 0x20, Size: 24]

--------------------------------
Class: DataTableCategoryHandle
	DataTable* DataTable;//[Offset: 0x0, Size: 8]
	FName ColumnName;//[Offset: 0x8, Size: 8]
	FName RowContents;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SpecialActorSingleStatData
	enum StatType;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]
	float StatLogicValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortPickupEffect.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x220, Size: 8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x228, Size: 8]
	FortPickup* ParentPickupActor;//[Offset: 0x230, Size: 8]
	FortAlterationItemDefinition*[] ActiveAlterations;//[Offset: 0x238, Size: 16]
	FortWorldItemDefinition* ItemDefinition;//[Offset: 0x248, Size: 8]
	bool bDoNotShowSpawnParticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bDoNotTickSkeletalMeshComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	Vector PickupColor;//[Offset: 0x254, Size: 12]
	LinearColor BackpackWorldPosition;//[Offset: 0x260, Size: 16]
	bool bOwnedByALocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 1]
	bool bOwnedByPlayer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	SoundBase* PickupByNearbyPawnSound;//[Offset: 0x278, Size: 8]
	void OnTossed();// 0xbbc0600
	void OnPickedUp(FortPawn* PickupTarget);// 0xbbc0600
	void OnAttached();// 0xbbc0600
	void OnAboutToEnterBackpack(FortPawn* PickupTarget);// 0xbbc0600
	FortItem* GetPickupDummyItem();// 0xd11ee88
	void EnableBacchusHighlight();// 0xbbc0600
	void DisableBacchusHighlight();// 0xbbc0600
	MaterialInstanceDynamic* ApplyCosmeticOverridesToMaterial(MeshComponent* MeshComponent, int MatIndex);// 0xd11ed98

--------------------------------
Class: FortPawn.Character.Pawn.Actor.Object
	bool bUseBaseChanged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x540, Size: 1]
	bool bIgnoreNextFallingDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x540, Size: 1]
	bool bIsDying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x540, Size: 1]
	bool bPlayedDying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x540, Size: 1]
	bool bIsHiddenForDeath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x540, Size: 1]
	bool bIsKnockedback;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x540, Size: 1]
	bool bIsStaggered;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x540, Size: 1]
	bool bCanCapsuleBeUsedForTargeting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x541, Size: 1]
	bool bUseLineTestForDamageZoneBoneDetection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x541, Size: 1]
	bool bMovingEmote;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x541, Size: 1]
	bool bMovingEmoteForwardOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x541, Size: 1]
	bool bMovingEmoteFollowingOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x541, Size: 1]
	bool bMovingEmoteSkipLandingFX;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x541, Size: 1]
	bool bIsInvulnerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x542, Size: 1]
	bool bSpotted;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x542, Size: 1]
	bool bRegisterWithAISight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x542, Size: 1]
	bool bRegisterWithAimAssist;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x542, Size: 1]
	bool bPrimaryInputHeld;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x542, Size: 1]
	bool bSecondaryInputHeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x542, Size: 1]
	bool bPrimaryInputQueued;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x542, Size: 1]
	bool bWeaponActivated;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x542, Size: 1]
	bool bIsInGoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x543, Size: 1]
	bool bReplicatedIsInGoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x543, Size: 1]
	bool bSkipAnalogJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x543, Size: 1]
	byte FootstepTraceTypeQuery;//[Offset: 0x544, Size: 1]
	byte FootstepSurfaceType;//[Offset: 0x545, Size: 1]
	Texture* FootstepIconOverride;//[Offset: 0x548, Size: 8]
	LinearColor SoundIndicatorTintOverride;//[Offset: 0x550, Size: 16]
	float SoundIndicatorMaxDistance;//[Offset: 0x560, Size: 4]
	enum UroShiftBucket;//[Offset: 0x56c, Size: 1]
	bool bUpdateMeshComponentUpdateFlagOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 1]
	bool bUROCanTieToLODs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 1]
	bool bPostProcessNavLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56d, Size: 1]
	bool bHealthSynced;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 1]
	bool bWeaponHolstered;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 1]
	bool bSkipReticleColorTrace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56d, Size: 1]
	bool bTreatAsPawnForHitMarkers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 1]
	bool bDisplayPawnHitMarkersForChildActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56e, Size: 1]
	bool bUsesStats;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56e, Size: 1]
	bool bAllowBuildingActorTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56e, Size: 1]
	bool bIsDBNO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56e, Size: 1]
	bool bWasDBNOOnDeath;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56e, Size: 1]
	bool bCachedIsInAthena;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56e, Size: 1]
	bool bShouldUseCharacterMovementIdleFastPath;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56e, Size: 1]
	bool bIsLocalViewTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56e, Size: 1]
	byte CurrentMovementStyle;//[Offset: 0x56f, Size: 1]
	enum ControlRecoveryBehavior;//[Offset: 0x570, Size: 1]
	byte TeleportCounter;//[Offset: 0x571, Size: 1]
	DataTableRowHandle PawnStatHandle;//[Offset: 0x578, Size: 16]
	float SlidingFriction;//[Offset: 0x588, Size: 4]
	float SlidingBrakingDeceleration;//[Offset: 0x58c, Size: 4]
	FortStormShieldComponent* StormShieldComponent;//[Offset: 0x590, Size: 8]
	MulticastInlineDelegateProperty OnStormShieldComponentCreated;//[Size: 16]
	enum PushSize;//[Offset: 0x5a8, Size: 1]
	float LastSurfaceTraceTime;//[Offset: 0x5b4, Size: 4]
	Vector LastSurfaceTraceLocation;//[Offset: 0x5b8, Size: 12]
	int PawnUniqueID;//[Offset: 0x5e8, Size: 4]
	FortWeapon* CurrentWeapon;//[Offset: 0x5f0, Size: 8]
	FortWeapon* PreviousWeapon;//[Offset: 0x5f8, Size: 8]
	FortWeapon*[] CurrentWeaponList;//[Offset: 0x600, Size: 16]
	FString PreviousAbilityWeaponNameForTelemetry;//[Offset: 0x610, Size: 16]
	FName WeaponHandSocketName;//[Offset: 0x620, Size: 8]
	FName LeftHandWeaponHandSocketName;//[Offset: 0x628, Size: 8]
	Actor* SpawnSpot;//[Offset: 0x630, Size: 8]
	GameplayTagContainer DeathTags;//[Offset: 0x638, Size: 32]
	float SpawnImmunityTime;//[Offset: 0x658, Size: 4]
	FortWaterBodyActor* CurrentWaterBody;//[Offset: 0x660, Size: 8]
	bool bShouldSupportSurfaceSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	FortWaterBodyActor* ReplicatedWaterBody;//[Offset: 0x670, Size: 8]
	FortPickup*[] IncomingPickups;//[Offset: 0x678, Size: 16]
	FortPickupEntryData[] PickupDirectionData;//[Offset: 0x688, Size: 16]
	bool bIsStunned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	int AdditiveCringeCount;//[Offset: 0x69c, Size: 4]
	float AdditiveCringeDuration;//[Offset: 0x6a0, Size: 4]
	bool bSupportsDamageNumbersAtHitLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 1]
	Vector_NetQuantize PushMomentum;//[Offset: 0x6a8, Size: 12]
	float LocalSpin;//[Offset: 0x6b8, Size: 4]
	GameplayCueTag DeathCueTag;//[Offset: 0x718, Size: 8]
	SkeletalMeshSocket* DeathHitSocket;//[Offset: 0x720, Size: 8]
	MulticastInlineDelegateProperty OnPlayerStartDBNO;//[Size: 16]
	MulticastInlineDelegateProperty OnDBNOStateChanged;//[Size: 16]
	float TeamBeaconMaxDist;//[Offset: 0x748, Size: 4]
	Color TeamBeaconTextColor;//[Offset: 0x74c, Size: 4]
	float LastTakeHitTimeTimeout;//[Offset: 0x750, Size: 4]
	float LastDamagedTime;//[Offset: 0x754, Size: 4]
	FortWeapon* CurrentlyAttachedWeapon;//[Offset: 0x758, Size: 8]
	PrimitiveComponent* CachedNavFloor;//[Offset: 0x760, Size: 8]
	float MaxFootstepDistance;//[Offset: 0x768, Size: 4]
	SoundBase* DBNOLandingSound;//[Offset: 0x770, Size: 8]
	SoundBase* DefaultFootstepSound;//[Offset: 0x778, Size: 8]
	SoundBase* DefaultFastFootstepSound;//[Offset: 0x780, Size: 8]
	SoundBase* DefaultLandingSound;//[Offset: 0x788, Size: 8]
	SoundBase* DefaultHardLandingSound;//[Offset: 0x790, Size: 8]
	SoundBase* DefaultJumpSound;//[Offset: 0x798, Size: 8]
	WeaponHitNotifyAudioBank* DefaultHitNotifyAudioBank;//[Offset: 0x7a0, Size: 8]
	FortSwimmingAudioBank* DefaultSwimmingAudioBank;//[Offset: 0x7a8, Size: 8]
	float LineTestForDamageZoneBoneDetectionRadius;//[Offset: 0x7b0, Size: 4]
	PawnDamageZones DamageZones;//[Offset: 0x7b8, Size: 24]
	byte DamageZoneActiveBitMask;//[Offset: 0x818, Size: 1]
	float TargettingZOffset;//[Offset: 0x81c, Size: 4]
	byte JumpFlashCountPacked;//[Offset: 0x820, Size: 1]
	byte LandingFlashCountPacked;//[Offset: 0x821, Size: 1]
	<FName,AudioComponent*> EmoteAudioComps;//[Offset: 0x828, Size: 80]
	SoundAttenuation* FrontEndEmoteAudioAttenuation;//[Offset: 0x878, Size: 8]
	SoundAttenuation* InGameEmoteAudioAttenuation;//[Offset: 0x880, Size: 8]
	SoundEffectSourcePresetChain* InGameEmoteSoundEffectSoundPresetChain;//[Offset: 0x888, Size: 8]
	<int,MeshComponent*> EmoteMeshComps;//[Offset: 0x890, Size: 80]
	<int,Actor*> EmotePropActors;//[Offset: 0x8e0, Size: 80]
	<int,ParticleSystemComponent*> EmoteParticleSystemComps;//[Offset: 0x930, Size: 80]
	int EmoteCount;//[Offset: 0x980, Size: 4]
	float LastEmoteTime;//[Offset: 0x984, Size: 4]
	float LastEmoteEndTime;//[Offset: 0x988, Size: 4]
	FortItemDefinition* LastEmoteItemDef;//[Offset: 0x990, Size: 8]
	FortItemDefinition* LastReplicatedEmoteExecuted;//[Offset: 0x998, Size: 8]
	bool bFireBlockedByEmoteCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	float EmoteToFireCooldownTime;//[Offset: 0x9a4, Size: 4]
	float EmoteWalkSpeed;//[Offset: 0x9a8, Size: 4]
	FortGameplayModifierItemDefinition*[] AdditionalModifierDefinitions;//[Offset: 0x9b0, Size: 16]
	MulticastInlineDelegateProperty OnPawnTeleported;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnLanded;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnStartedEmote;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnStoppedEmote;//[Size: 16]
	MulticastInlineDelegateProperty OnHitPawn;//[Size: 16]
	MulticastInlineDelegateProperty OnDied;//[Size: 16]
	MulticastInlineDelegateProperty OnDeathEffects;//[Size: 16]
	MulticastInlineDelegateProperty OnDamaged;//[Size: 16]
	MulticastInlineDelegateProperty OnDidDamage;//[Size: 16]
	FortFootstepAudioBank* FootstepBank;//[Offset: 0xa80, Size: 8]
	FortFoleyFootstepContext* FoleyFootstepContext;//[Offset: 0xa98, Size: 8]
	FortFoleyHitContext* FoleyHitContext;//[Offset: 0xaa0, Size: 8]
	MulticastInlineDelegateProperty OnWeaponEquippedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnWeaponUnEquippedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnWeaponAttachmentChangedDelegate;//[Size: 16]
	class GameplayEffect* HealthRegenDelayGameplayEffect;//[Offset: 0xad8, Size: 8]
	class GameplayEffect* HealthRegenGameplayEffect;//[Offset: 0xae0, Size: 8]
	class GameplayEffect* ShieldRegenDelayGameplayEffect;//[Offset: 0xae8, Size: 8]
	class GameplayEffect* ShieldRegenGameplayEffect;//[Offset: 0xaf0, Size: 8]
	class AnimInstance* CurrentWeaponAnimLayerOverlayClass;//[Offset: 0xaf8, Size: 8]
	MulticastInlineDelegateProperty OnHolsteredEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnUnholsteredEvent;//[Size: 16]
	int WeaponHolsterCounter;//[Offset: 0xb38, Size: 4]
	FName[] WeaponHolsterIds;//[Offset: 0xb40, Size: 16]
	float StaySpottedTime;//[Offset: 0xb50, Size: 4]
	FName SpottedEvent;//[Offset: 0xb54, Size: 8]
	FortFeedbackBank* DefaultFeedback;//[Offset: 0xb60, Size: 8]
	FortEmitterCameraLensEffectDirectional*[] ActiveSoundIndicators;//[Offset: 0xb68, Size: 16]
	class FortEmitterCameraLensEffectDirectional* DefaultSoundTrackingVisual;//[Offset: 0xb78, Size: 8]
	GameplayTagContainer SoundTrackingVisibilityTags;//[Offset: 0xb80, Size: 32]
	<enum,float> PriorityModifiers;//[Offset: 0xba0, Size: 80]
	FortPawnVocalChord[] VocalChords;//[Offset: 0xbf0, Size: 16]
	bool bIsDisconnectedPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	ActiveGameplayEffectHandle MaxHealthApplicationHandle;//[Offset: 0xc5c, Size: 8]
	class GameplayEffect* MaxHealthApplicationGameplayEffect;//[Offset: 0xc68, Size: 8]
	FortHealthSet* HealthSet;//[Offset: 0xc70, Size: 8]
	FortControlResistanceSet* ControlResistanceSet;//[Offset: 0xc78, Size: 8]
	FortDamageSet* DamageSet;//[Offset: 0xc80, Size: 8]
	FortMovementSet* MovementSet;//[Offset: 0xc88, Size: 8]
	FortAdvancedMovementSet* AdvancedMovementSet;//[Offset: 0xc90, Size: 8]
	MulticastInlineDelegateProperty OnAbilityDecisionWindowStackUpdated;//[Size: 16]
	FortAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0xcb0, Size: 8]
	FortActiveMontageDecisionWindow[] DecisionWindowStack;//[Offset: 0xcb8, Size: 16]
	GameplayTagContainer GameplayTags;//[Offset: 0xcc8, Size: 32]
	FText DisplayName;//[Offset: 0xce8, Size: 24]
	DamagerInfo[] Damagers;//[Offset: 0xd00, Size: 16]
	DamageDoneInfo[] DamageDone;//[Offset: 0xd10, Size: 16]
	DamageDoneSourceInfo[] TotalDamageDoneTrackers;//[Offset: 0xd20, Size: 16]
	DamageDoneTargetInfo[] TargetDamageDoneTrackers;//[Offset: 0xd30, Size: 16]
	float DamageDoneLastAtTime;//[Offset: 0xd40, Size: 4]
	float TotalPlayerDamageDealt;//[Offset: 0xd44, Size: 4]
	FortHealthBarIndicator* HealthBarIndicator;//[Offset: 0xd48, Size: 8]
	GameplayTag CurrentCalloutTag;//[Offset: 0xd50, Size: 8]
	CalloutEntry[] CalloutEntries;//[Offset: 0xd58, Size: 16]
	float HealthBarWidth;//[Offset: 0xd68, Size: 4]
	float HealthBarHeightMultiplier;//[Offset: 0xd6c, Size: 4]
	SlateBrush SpottedBrush;//[Offset: 0xd78, Size: 136]
	Vector SpottedIconOffset;//[Offset: 0xe00, Size: 12]
	int ClientNonRenderedAnimUpdateRate;//[Offset: 0xe0c, Size: 4]
	int MaxEvalRateForInterpolation;//[Offset: 0xe10, Size: 4]
	float[] AnimUpdateRateVisibleMaxDistanceFactor;//[Offset: 0xe18, Size: 16]
	<int,int> LODToFrameSkipMap;//[Offset: 0xe28, Size: 80]
	FortConversationSentence CurrentSentence;//[Offset: 0xe88, Size: 200]
	MulticastInlineDelegateProperty OnPawnHealthChanged;//[Size: 16]
	AthenaBatchedDamageGameplayCues_Shared AccumulatedBatchData_Shared;//[Offset: 0xf78, Size: 68]
	AthenaBatchedDamageGameplayCues_NonShared AccumulatedBatchData_NonShared;//[Offset: 0xfc0, Size: 16]
	GameplayCueParameters BatchedGameplayCueParameters;//[Offset: 0xfd8, Size: 192]
	GameplayTagContainer ReplayItemActions;//[Offset: 0x1098, Size: 32]
	GameplayTagContainer HidingVisibilityTags;//[Offset: 0x10c8, Size: 32]
	GameplayTagContainer HidingTransitionVisibilityTags;//[Offset: 0x10e8, Size: 32]
	PegasusGameEventCollector* PegasusTimelineCollector;//[Offset: 0x1108, Size: 8]
	FortAthenaAILODComponent* AILODComponent;//[Offset: 0x1110, Size: 8]
	ClientAILODSettings ClientAILODSettings;//[Offset: 0x1138, Size: 136]
	GameplayTag FallbackTag;//[Offset: 0x11c0, Size: 8]
	FString DebugType;//[Offset: 0x11c8, Size: 16]
	<uint32,RecordedGunshot> RecordedGunshots;//[Offset: 0x11d8, Size: 80]
	bool WillFallFromHeightCauseDamage(float FallDistance);// 0xd108ec0
	bool WasDBNOOnDeath();// 0xb69da9c
	void UnlinkAnimLayer(class AnimInstance AnimLayer);// 0xd108e18
	void TriggerFeedbackEvent(FName EventName, FortPawn* InstigatorPawn, FortPawn* Recipient, float OverriddenDelay);// 0xd108cb4
	void TriggerAnimInputEvent(const FortAnimInputEvent* AnimInputEvent);// 0xd108c0c
	void StopSpinning();// 0xd108bf8
	void StopPushMomentum();// 0xd108be4
	void StopBatchedLoopingWeaponActivation();// 0xd108bd0
	void StartSpinning(float Value, bool bFallingOnly, bool bAdjustForInputYawScale);// 0xd108a98
	void StartPushMomentum(Vector NewPushMomentum, float Duration);// 0xd1089b0
	FortSoundCameraLensEffect* SpawnSoundLensEffectDirectional(Actor* TrackedActor, Vector HitInfo, float MaxAudibleDistance, enum IndicatorType, const Actor* InstigatingActor, LinearColor Tint, Texture* OverrideIcon);// 0xd108780
	interface class SpawnPooledGenericCameraLensEffectDirectional(class Actor LensEffectEmitterClass, Actor* DamageDealer, out const HitResult HitInfo, bool bShouldActivate);// 0xd1085d0
	FortEmitterCameraLensEffectDirectional* SpawnPooledCameraLensEffectDirectional(class FortEmitterCameraLensEffectDirectional LensEffectEmitterClass, Actor* DamageDealer, out const HitResult HitInfo, bool bShouldActivate);// 0xd108424
	interface class SpawnGenericCameraLensEffectDirectional(class Actor LensEffectEmitterClass, Actor* DamageDealer, out const HitResult HitInfo, bool bDeferSpawn);// 0xd108274
	interface class SpawnGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0xd1081bc
	FortEmitterCameraLensEffectDirectional* SpawnCameraLensEffectDirectional(class FortEmitterCameraLensEffectDirectional LensEffectEmitterClass, Actor* DamageDealer, out const HitResult HitInfo, bool bDeferSpawn);// 0xd108010
	EmitterCameraLensEffectBase* SpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0xd107f60
	bool ShouldDie(float Damage, Controller* EventInstigator, Actor* DamageCauser);// 0xd107e28
	void SetSpawnSpot(Actor* InSpawnSpot);// 0xd107d78
	void SetSignalInStorm(float NewSignalInStormValue);// 0xd107cd0
	void SetShield(float NewShieldValue);// 0xd107c28
	void SetPawnVisibilityControllerOnly(const bool bNewHidden, const bool bPropagateToWeapon);// 0xd107b28
	void SetPawnVisibility(const bool bNewHidden, const bool bPropagateToWeapon);// 0xd107a28
	void SetPawnAndControlRotation(Rotator NewRotation);// 0xd107980
	void SetMovementSpeedMultiplier(float NewMovementSpeedVal);// 0xd1078d8
	void SetMaxSignalInStorm(float NewValue);// 0xd107830
	void SetMaxShield(float NewValue);// 0xd107788
	void SetMaxHealth(float NewHealthVal);// 0xd1076e0
	void SetIsKnockedBack(bool bKnockback);// 0xd107630
	void SetIsInGoop(const bool bNewValue);// 0xd107580
	void SetHolsterWeapon(bool bHolster, bool bPlayEquipAnim, FName HolsterId, bool bForce);// 0xd1073f0
	void SetHealth(float NewHealthVal);// 0xd107348
	void SetGravityMultiplier(float NewGravityVal);// 0xd1072a0
	void SetGravityJumpMultipliers(float NewGravityVal, float NewVehicleGravityVal, float NewJumpZ, float NewJumpHorizontalAcceleration, float NewJumpHorizontalVelocity);// 0xd107100
	void SetFNameBasedOnHitDirection(out const Vector HitDirection, out FName NameResult, FName NameFront, FName NameBack, FName NameLeft, FName NameRight);// 0xd106efc
	void SetFallingHeight(float FromHeight);// 0xd106e54
	void SetControlRecoveryBehavior(enum NewBehavior);// 0xd106dac
	bool SetCommonWaterFXParams(FXSystemComponent* FXComponent, const bool bUpdateWaveData, const bool bUpdatePlaneData, const bool bUpdateSurfaceData);// 0xd106c18
	void SetCallout(out const GameplayTag CalloutTagToSet, float Duration);// 0xd106b20
	void SetAimAssistTargetOverride(const SceneComponent* InOverride);// 0xd106a78
	void ServerTeleportNearLocation(Vector ActorLocation);// 0xd10699c
	void ServerInternalEquipWeapon(FortWeapon* Weap);// 0xd1068c4
	void SafeHolsterWeapon(bool bHolster, bool bPlayEquipAnim, FName HolsterId, bool bForce);// 0xb69d90c
	void ResetFallingHeight();// 0xd1068b0
	void RemoveWeaponTraceIgnoreActor(Actor* ActorToRemove);// 0xd106808
	void RemoveNonReplicatedTagToPawn(out const GameplayTag Tag);// 0xd106754
	void RemoveCallout(out const GameplayTag CalloutTagToRemove);// 0xd1066a0
	void RegisterAdditionalGameplayModifiers(out const FortGameplayModifierItemDefinition*[] ModifierDefinitions);// 0xd1065e0
	void PrototypeCharacterMovement(byte MovementMode, Vector LaunchVelocity);// 0xd1064f8
	void PooledNiagaraCameraLensEffectCompleted(NiagaraComponent* FinishedComponent);// 0xd106450
	void PooledCascadeCameraLensEffectCompleted(ParticleSystemComponent* FinishedComponent);// 0xd1063a8
	void PlaySwimmingSound(byte SoundType);// 0xd106300
	void PlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0xd1061d4
	float PlayLocalAnimMontage(AnimMontage* NewAnimMontage, float InPlayRate, FName StartSectionName, bool bNoBlend);// 0xb69d794
	void PlayFootStepSound(int FootDown);// 0xb69d6e4
	bool PickUpActor(Actor* PickupTarget, const FortDecoItemDefinition* PlacementDecoItemDefinition);// 0xd1060dc
	void PawnUniqueIDSet();// 0xbbc0600
	void PawnStopFire(byte FireModeNum);// 0xd10602c
	void PawnStartFire(byte FireModeNum);// 0xd105f7c
	void OnWeaponEquipped(FortWeapon* NewWeapon, FortWeapon* PrevWeapon);// 0xbbc0600
	void OnTeleported();// 0xbbc0600
	void OnStunned();// 0xbbc0600
	void OnRep_WeaponActivated();// 0xb69d6d0
	void OnRep_VocalChords();// 0xd105f60
	void OnRep_TeleportCounter();// 0xb69d6b4
	void OnRep_StormShieldComponent();// 0xd105f4c
	void OnRep_Sentence();// 0xd105f38
	void OnRep_ReplicatedWaterBody();// 0xb69d6a0
	void OnRep_ReplicatedIsInGoop();// 0xd105f24
	void OnRep_PushMomentum();// 0xd105f10
	void OnRep_PawnUniqueID();// 0xb69d68c
	void OnRep_MovingEmoteFollowingOnly();// 0xd105ef4
	void OnRep_MovingEmote();// 0xb69d670
	void OnRep_LastReplicatedEmoteExecuted(const FortItemDefinition* PreviousValue);// 0xb69d5c0
	void OnRep_LandingFlashCount();// 0xb69d5a4
	void OnRep_JumpFlashCount();// 0xb69d588
	void OnRep_IsKnockedBack();// 0xd105ee0
	void OnRep_IsDBNO();// 0xb69d56c
	void OnRep_EmoteWalkSpeed();// 0xb69d550
	void OnRep_DamageZoneActiveBitMask();// 0xd105ecc
	void OnRep_CurrentWeapon(FortWeapon* OldWeapon);// 0xb69d4a0
	void OnRep_ClientAILODSettings();// 0xb69d48c
	void OnRep_bWeaponHolstered();// 0xb69d478
	void OnRep_bIsInvulnerable();// 0xb69d45c
	void OnOutOfControlResistanceServer(float ImpactDamageDone, out const GameplayTagContainer SourceTags, out const GameplayEffectContextHandle EffectContext, Controller* EffectInstigator, Actor* EffectCauser);// 0xbbc0600
	void OnMontageStarted(AnimMontage* Montage);// 0xb69d3ac
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0xb69d2b4
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0xb69d1bc
	bool OnlySpinWhenFalling();// 0xd105eb0
	void OnExitedWaterBody(FortWaterBodyActor* WaterBody, bool bIsLastBody);// 0xbbc0600
	void OnEnteredWaterBody(FortWaterBodyActor* WaterBody, bool bIsFirstBody);// 0xbbc0600
	void OnEndWaterInteraction(Vector PreviousWaterSurfaceLocation, float WaterDepth);// 0xbbc0600
	void OnDisplaySentence(out const FText SpeechText);// 0xbbc0600
	void OnDeathServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDeathPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xb69ce24
	void OnDamageZoneStatusChanged(byte Zone, bool bStatus);// 0xbbc0600
	void OnDamageServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDamagePlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnClearSentence();// 0xbbc0600
	void OnBumpPushedPawn(FortPawn* InstigatedBy, float PushTimeLeft);// 0xbbc0600
	void OnBuildingHitPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, GameplayEffectContextHandle EffectContext, bool bPlayerPlaced);// 0xbbc0600
	void OnBeginWaterInteraction(Vector WaterSurfaceLocation, float WaterDepth);// 0xbbc0600
	void OnBaseChanged(Actor* NewBase);// 0xbbc0600
	void OnAnimInputEvent(const FortAnimInputEvent* AnimInputEvent);// 0xbbc0600
	void OnAllMontageInstancesEnded();// 0xb69ce10
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xd105b38
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xd1058d4
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xd10555c
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xb69ca9c
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0xb69c7dc
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xd105340
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xd105010
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0xd104e78
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0xb69c468
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xd104c5c
	void NetMulticast_Athena_BatchedDamageCues(AthenaBatchedDamageGameplayCues_Shared SharedData, AthenaBatchedDamageGameplayCues_NonShared NonSharedData);// 0xb69c344
	void MulticastUnlinkAnimLayer(class AnimInstance AnimLayer);// 0xd104bac
	void MulticastLinkAnimLayer(class AnimInstance AnimLayer);// 0xd104afc
	void MovingEmoteStopped();// 0xd104ae8
	void MaxHealthStateChanged(bool bIsMaxHealth);// 0xb69c28c
	void LogChugSplashEvent();// 0xd104ad4
	void LinkAnimLayer(class AnimInstance AnimLayer);// 0xd104a2c
	void LaunchCharacterJump(Vector LaunchVelocity, bool bXYOverride, bool bZOverride, bool bIgnoreFallDamage, bool bPlayFeedbackEvent);// 0xd104854
	void KillDisconnectedPawn();// 0xd104840
	bool IsWeaponHolstered();// 0xd104808
	bool IsSurfaceSwimming();// 0xb69c254
	bool IsStaggered();// 0xd1047d0
	bool IsSpinning();// 0xd1047ac
	bool IsInsideHidingProp(const bool bIncludeTransition);// 0xd1046f0
	bool IsInGoop();// 0xd1046d0
	bool IsFrontalHit(out const Vector HitDirection);// 0xd104614
	bool IsDead();// 0xb69c21c
	bool IsDBNO();// 0xd1045f0
	bool IsAllowChainStun();// 0xd1045cc
	bool IsActionInputIgnored();// 0xd10458c
	void InitializeDeathHitSocket(Vector WorldLocation, Vector WorldNormal);// 0xd1044a4
	void HideBodyOnDeath(bool bDeathAnimationPlayed);// 0xd1043ec
	bool HasCurrentMontage();// 0xd1043b0
	void HandleIsHiddenForDeath();// 0xb69c200
	void HandleIsDying();// 0xb69c1e4
	float GetWaterImmersionDepth();// 0xb69c1b0
	Transform GetTargetingTransform(enum Source, FortGameplayAbility* SourceAbility);// 0xd1042b4
	void GetSphericalHitDirection(out const Vector HitDirection, out float Azimuth, out float Elevation);// 0xd10415c
	float GetSignalInStorm();// 0xd104120
	float GetShieldPercent();// 0xd1040e4
	float GetShieldOrHealthPercent();// 0xd1040b0
	float GetShield();// 0xd104074
	MaterialInstanceDynamic* GetPawnMID(int ElementIndex);// 0xd103fc4
	Actor* GetMyMovementBaseActor();// 0xd103f90
	Vector GetMovementPredictionPosition(float PredictionDeltaTime);// 0xd103edc
	float GetMeleeReticleStrikeAngle(bool bPrimaryInput);// 0xd103e24
	int GetMeleeComboCounter();// 0xd103df0
	float GetMaxSignalInStorm();// 0xd103db4
	float GetMaxShield();// 0xd103d78
	float GetMaxHealth();// 0xd103d3c
	float GetMaxDistanceWithoutFallDamage();// 0xd103d08
	float GetMaxControlResistance();// 0xd103cd4
	PlayerController* GetLocalViewingPlayerController();// 0xb69c17c
	float GetLocalSpin();// 0xd103cb8
	float GetKnockbackThreshold();// 0xd103c84
	float GetKnockbackMultiplier();// 0xd103c50
	FName GetIgnoreFallDamageComponentTag();// 0xd103c1c
	float GetHealthPercent();// 0xd103be0
	float GetHealth();// 0xd103ba4
	AudioComponent* GetFirstValidEmoteAudioComponent();// 0xd103b68
	FortAIEncounterInfo* GetEncounterInfo();// 0xd103b2c
	SkeletalMeshComponent* GetEmotePropAttachMesh();// 0xd103af0
	AudioComponent* GetEmoteAudioComponent(FName SoundId);// 0xd103a38
	Rotator GetDefaultTargetingRotation();// 0xd1039f8
	Vector GetDefaultTargetingOrigin();// 0xd1039b8
	byte GetDamageZone(out const HitResult InHitResult);// 0xd1038d8
	FortWaterBodyActor* GetCurrentWaterBody();// 0xb69c160
	FText GetCurrentSentenceSpeechText();// 0xd103808
	float GetCurrentMontageSectionTimeLeft();// 0xd1037d4
	float GetControlResistance();// 0xd1037a0
	enum GetControlRecoveryBehavior();// 0xd103784
	SkeletalMeshComponent* GetAssetSkeletalMeshComponentAttachment(FName SocketName);// 0xd1036d4
	void GameplayCue_InstantDeath(byte EventType, GameplayCueParameters Parameters);// 0xd1033e4
	void GameplayCue_Damage(byte EventType, out const GameplayCueParameters Parameters);// 0xb69bf64
	void GameplayCue(byte EventType, GameplayCueParameters Parameters);// 0xbb5ef00
	void ForceKill(GameplayTag DeathReason, Controller* KillerController, Actor* KillerActor);// 0xd1032c0
	FortWeapon* EquipWeaponDefinition(const FortWeaponItemDefinition* WeaponData, GUID ItemEntryGuid, GUID TrackerGuid, bool bDisableEquipAnimation);// 0xd103148
	bool EquipBestWeapon();// 0xd103108
	void EmoteStopped(FortItemDefinition* MontageItemDef);// 0xd103058
	void EmoteStarted(FortItemDefinition* MontageItemDef);// 0xd102fa8
	void DoFatalDamage(AbilitySystemComponent* KillerAbilitySystemComponent);// 0xd102f00
	void DetachAssetFromSocket(FName SocketName);// 0xb69bebc
	void ClientInternalEquipWeapon(FortWeapon* Weap);// 0xd102e50
	bool CanSpawnSoundVisuals();// 0xd102e18
	void BroadcastUnlinkAnimLayer(class AnimInstance AnimLayer);// 0xd102d68
	void BroadcastLinkAnimLayer(class AnimInstance AnimLayer);// 0xd102cb8
	void AttachAssetToSocket(out const AssetAttachment InAttachment);// 0xb69bdf8
	void ApplyKnockback(float KnockbackMagnitude, float KnockbackZAngle, Vector ImpulseDir);// 0xd102b94
	void AnimMontage_LocalSetNextSectionName(AnimMontage* AnimMontage, FName SectionName, FName NextSectionName);// 0xd102a70
	bool AnimMontage_LocalJumpToSectionName(FName SectionName);// 0xd1029bc
	int AnimMontage_LocalJumpToRandomSection();// 0xd102988
	void AlignRotationToHitDirection(out const Vector HitDirection);// 0xd1028d8
	void AddWeaponTraceIgnoreActor(Actor* ActorToIgnore);// 0xd102830
	void AddNonReplicatedTagToPawn(out const GameplayTag Tag);// 0xd10277c

--------------------------------
Class: FortAnimInputEvent.Object
	FName EventName;//[Offset: 0x28, Size: 8]
	bool IsNamed(FName InEventName);// 0xb6109d8
	static FortAnimInputEvent* CreateAnimInputEvent(FName InEventName);// 0xcebd478

--------------------------------
Class: FortSoundCameraLensEffect.FortEmitterCameraLensEffectDirectional.EmitterCameraLensEffectBase.Emitter.Actor.Object
	enum IndicatorType;//[Offset: 0x30c, Size: 1]
	int SnapToSections;//[Offset: 0x310, Size: 4]
	float MaxAudibleDistanceOnSpawn;//[Offset: 0x314, Size: 4]
	Actor* InstigatingActor;//[Offset: 0x318, Size: 8]
	Texture* IconOverride;//[Offset: 0x320, Size: 8]
	LinearColor TintOverride;//[Offset: 0x328, Size: 16]
	<enum,SoundIndicatorInitializationData> EmitterDataMap;//[Offset: 0x338, Size: 80]
	void SetType(enum NewType);// 0xd1d2fa8
	void SetTintOverride(LinearColor Color);// 0xd1d2f00
	void SetStrengthCurve(out const RuntimeFloatCurve Curve);// 0xd1d2d84
	void SetInstigatingActor(const Actor* NewInstigator);// 0xd1d2ce0
	void SetIconOverride(Texture* NewIcon);// 0xd1d2c38
	void SetIcon(Texture* NewIcon);// 0xd1d2b90
	RuntimeFloatCurve GetStrengthCurveForActiveType();// 0xbbc0600
	LinearColor GetDefaultTint();// 0xbbc0600
	Texture* GetDefaultIcon();// 0xbbc0600

--------------------------------
Class: FortEmitterCameraLensEffectDirectional.EmitterCameraLensEffectBase.Emitter.Actor.Object
	Actor* DamageDealer;//[Offset: 0x2e8, Size: 8]
	Vector DamageDealerLocation;//[Offset: 0x2f0, Size: 12]
	FName RotationParameterName;//[Offset: 0x2fc, Size: 8]
	bool bRotateActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	float Strength;//[Offset: 0x308, Size: 4]

--------------------------------
Class: SoundIndicatorInitializationData
	FName EmitterName;//[Offset: 0x0, Size: 8]
	Vector Offset;//[Offset: 0x8, Size: 12]
	float LifeTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortStormShieldComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnStormShieldStatusChanged;//[Size: 16]
	bool bCareAboutEdgeOfStorm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 1]
	float DistanceFromEdgeOfStormShield;//[Offset: 0x20c, Size: 4]
	void StormShieldDestroyed(Actor* DestroyedActor);// 0xd1dd138
	void StormShieldCreated(FortMissionStormShield* Shield);// 0xd1dd090
	void OwnerDestroyed(Actor* InOwner);// 0xd1dcfe8

--------------------------------
Class: FortMissionStormShield.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 8]
	StaticMeshComponent* ShieldRing;//[Offset: 0x230, Size: 8]
	class GameplayEffect[] SafeFromStormPlayerEffects;//[Offset: 0x238, Size: 16]
	class GameplayEffect[] InStormPlayerEffects;//[Offset: 0x248, Size: 16]
	class GameplayEffect[] SafeFromStormEnemyEffects;//[Offset: 0x258, Size: 16]
	class GameplayEffect[] InStormEnemyEffects;//[Offset: 0x268, Size: 16]
	float MapWorldScale;//[Offset: 0x278, Size: 4]
	float ReplicatedRadius;//[Offset: 0x27c, Size: 4]
	StormShieldRadiusGrowthData RadiusGrowthData;//[Offset: 0x280, Size: 24]
	StormShieldMoveData MoveData;//[Offset: 0x298, Size: 36]
	bool UseGrowthRateDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	bool bAntiStormShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	float RadiusToWorldScaleConversion;//[Offset: 0x2c0, Size: 4]
	MulticastInlineDelegateProperty OnStormShieldReachedRadius;//[Size: 16]
	MulticastInlineDelegateProperty OnStormShieldReachedLocation;//[Size: 16]
	class FortMissionStormSafeZone* SafeAreaTemplate;//[Offset: 0x2e8, Size: 8]
	EnvQuery* StormShieldQuery;//[Offset: 0x2f0, Size: 8]
	float CurrentLocalRadius;//[Offset: 0x2f8, Size: 4]
	MaterialInterface* StormMiniMapMaterial;//[Offset: 0x300, Size: 8]
	MaterialInstanceDynamic* StormMiniMapMaterialMID;//[Offset: 0x308, Size: 8]
	SlateBrush StormMiniMapMaterialBrush;//[Offset: 0x310, Size: 136]
	MaterialInterface* StormMainMapMaterial;//[Offset: 0x398, Size: 8]
	MaterialInstanceDynamic* StormMainMapMaterialMID;//[Offset: 0x3a0, Size: 8]
	SlateBrush StormMainMapMaterialBrush;//[Offset: 0x3a8, Size: 136]
	FortMissionStormSafeZone*[] SafeAreas;//[Offset: 0x438, Size: 16]
	FortStormShieldComponent*[] StormShieldComponents;//[Offset: 0x448, Size: 16]
	bool bRegisterWithGameState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	int Level;//[Offset: 0x464, Size: 4]
	float AutoHideRadius;//[Offset: 0x468, Size: 4]
	void UpdateRadiusVisuals();// 0xd0e158c
	FortMissionStormSafeZone* SpawnSafeAreaAtLocation(out const Vector InLocation, const float InRadius);// 0xd0e1488
	void SetTargetRadiusSizeChangeOverGrowthRate(const float InTargetRadius, const float InGrowthRate, bool bUseGrowthRateDirectly);// 0xd0e135c
	void SetTargetLocationToMoveTo(const Vector InTargetLocation, const float InMoveRate);// 0xd0e1274
	void SetRadiusOfShield(const float InRadius);// 0xd0e11cc
	bool RemoveAndDestroySafeArea(FortMissionStormSafeZone* AreaToRemove);// 0xd0e1118
	void PauseStormShield();// 0xd0e10fc
	void OnRep_ReplicatedRadius();// 0xd0e10e8
	void OnRep_RadiusGrowthData();// 0xd0e10d4
	bool IsInStormShield(Vector TestLocation);// 0xd0e1018
	void InitializeRadiusValue(const float InRadius);// 0xd0e0f70
	void GetSafeZones(out FortMissionStormSafeZone*[] OutSafeZones);// 0xd0e0e98
	void DestroyStormShield();// 0xd0e0e84

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 480]
	ScalableFloat Period;//[Offset: 0x218, Size: 40]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x241, Size: 1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x248, Size: 16]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x258, Size: 16]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x268, Size: 40]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x290, Size: 16]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x2a0, Size: 16]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x2b0, Size: 16]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x2c0, Size: 16]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x2d8, Size: 16]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2e8, Size: 16]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x300, Size: 16]
	GameplayEffectUIData* UIData;//[Offset: 0x310, Size: 8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x318, Size: 96]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x378, Size: 96]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x3d8, Size: 64]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x418, Size: 64]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x458, Size: 64]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x498, Size: 96]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x4f8, Size: 64]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x538, Size: 336]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x690, Size: 336]
	enum StackingType;//[Offset: 0x7e1, Size: 1]
	int StackLimitCount;//[Offset: 0x7e4, Size: 4]
	enum StackDurationRefreshPolicy;//[Offset: 0x7e8, Size: 1]
	enum StackPeriodResetPolicy;//[Offset: 0x7e9, Size: 1]
	enum StackExpirationPolicy;//[Offset: 0x7ea, Size: 1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x7f0, Size: 16]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 40]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x30, Size: 272]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x140, Size: 144]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x1d0, Size: 16]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 40]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 40]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x50, Size: 40]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x78, Size: 64]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xb8, Size: 16]
	enum AttributeCalculationType;//[Offset: 0xc8, Size: 1]
	enum FinalChannel;//[Offset: 0xc9, Size: 1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xd0, Size: 32]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xf0, Size: 32]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 56]
	enum AttributeSource;//[Offset: 0x38, Size: 1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 16]
	FieldPathProperty Attribute;//[Size: 32]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 8]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 40]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x30, Size: 40]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x58, Size: 40]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x80, Size: 16]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x7341348

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 16]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 16]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 40]
	float Duration;//[Offset: 0x50, Size: 4]
	float Period;//[Offset: 0x54, Size: 4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 136]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 136]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 32]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 32]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 16]
	int StackCount;//[Offset: 0x1c0, Size: 4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 16]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 24]
	float Level;//[Offset: 0x290, Size: 4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 56]
	float TotalMagnitude;//[Offset: 0x38, Size: 4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 16]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 16]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 64]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 32]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 32]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 40]
	int InputID;//[Offset: 0x30, Size: 4]
	enum RemovalPolicy;//[Offset: 0x34, Size: 1]
	Object* SourceObject;//[Offset: 0x38, Size: 8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x90, Size: 4]

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 32]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 24]
	GameplayEventData CurrentEventData;//[Offset: 0xf0, Size: 176]
	byte NetExecutionPolicy;//[Offset: 0x1a0, Size: 1]
	byte NetSecurityPolicy;//[Offset: 0x1a1, Size: 1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1a8, Size: 8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b0, Size: 16]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c0, Size: 8]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x1c8, Size: 32]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x1e8, Size: 32]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x208, Size: 32]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x228, Size: 32]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x248, Size: 32]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x268, Size: 32]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x288, Size: 32]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2a8, Size: 32]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x2c8, Size: 32]
	GameplayTask*[] ActiveTasks;//[Offset: 0x308, Size: 16]
	AnimMontage* CurrentMontage;//[Offset: 0x328, Size: 8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bIsAbilityEnding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x731fa00
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x731f934
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x731f094
	void RemoveGrantedByEffect();// 0x731f390
	void MontageStop(float OverrideBlendOutTime);// 0x731d7b4
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x731d85c
	void MontageJumpToSection(FName SectionName);// 0x731d94c
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x731d648
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x731d728
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x731fb5c
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0xbbc0600
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x731dce8
	void K2_OnEndAbility(bool bWasCancelled);// 0xbbc0600
	bool K2_HasAuthority();// 0x731faec
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x731e1ec
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x731e3c8
	void K2_EndAbility();// 0x731f078
	void K2_CommitExecute();// 0xbbc0600
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x731f71c
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x731f7e0
	bool K2_CommitAbility();// 0x731f8f4
	bool K2_CheckAbilityCost();// 0x731f69c
	bool K2_CheckAbilityCooldown();// 0x731f6dc
	void K2_CancelAbility();// 0x731f9ec
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, const GameplayAbilitySpecHandle Handle, out GameplayTagContainer RelevantTags);// 0xbbc0600
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x731e914
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x731eda0
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x731dd98
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x731dfc0
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0xbbc0600
	void K2_ActivateAbility();// 0xbbc0600
	bool IsLocallyControlled();// 0x731fb24
	void InvalidateClientPredictionKey();// 0x731f3ac
	Object* GetSourceObject_BP(GameplayAbilitySpecHandle Handle, out const GameplayAbilityActorInfo ActorInfo);// 0x731f3c0
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x73200b4
	Actor* GetOwningActorFromActorInfo();// 0x732011c
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x731ff34
	Object* GetCurrentSourceObject();// 0x731f4e0
	AnimMontage* GetCurrentMontage();// 0x731f668
	float GetCooldownTimeRemaining();// 0x731fab8
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x731fd34
	Actor* GetAvatarActorFromActorInfo();// 0x73200e8
	GameplayAbilityActorInfo GetActorInfo();// 0x7320150
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x7320080
	int GetAbilityLevel_BP(GameplayAbilitySpecHandle Handle, out const GameplayAbilityActorInfo ActorInfo);// 0x731f514
	int GetAbilityLevel();// 0x731f634
	void EndTaskByInstanceName(FName InstanceName);// 0x731db44
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x731d9f4
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x731dbec
	void CancelTaskByInstanceName(FName InstanceName);// 0x731da9c
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x731e5a0
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x731e69c
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x731e7d8
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x731eb74
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x731ef2c

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 8]
	Actor* Instigator;//[Offset: 0x8, Size: 8]
	Actor* Target;//[Offset: 0x10, Size: 8]
	Object* OptionalObject;//[Offset: 0x18, Size: 8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 24]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 32]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 32]
	float EventMagnitude;//[Offset: 0x80, Size: 4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 40]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PredictionKey
	PackageMap* PredictiveConnection;//[Offset: 0x0, Size: 8]
	int16 Current;//[Offset: 0x8, Size: 2]
	int16 Base;//[Offset: 0xa, Size: 2]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 48]
	Actor* SourceActor;//[Offset: 0x40, Size: 8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 8]
	FName SourceSocketName;//[Offset: 0x58, Size: 8]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 8]
	byte TriggerSource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 8]
	void ReadyForActivation();// 0xae8450c
	void GenericGameplayTaskDelegate__DelegateSignature();// 0xbbc0600
	void EndTask();// 0xae844f8

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 8]

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 16]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 16]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 8]
	float OutgoingDuration;//[Offset: 0x2f0, Size: 4]
	float IncomingDuration;//[Offset: 0x2f4, Size: 4]
	FString[] ClientDebugStrings;//[Offset: 0x318, Size: 16]
	FString[] ServerDebugStrings;//[Offset: 0x328, Size: 16]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x398, Size: 16]
	Actor* OwnerActor;//[Offset: 0x3d0, Size: 8]
	Actor* AvatarActor;//[Offset: 0x3d8, Size: 8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x3f0, Size: 288]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x540, Size: 16]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x750, Size: 48]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x788, Size: 40]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x850, Size: 1144]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc8, Size: 296]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xdf0, Size: 296]
	byte[] BlockedAbilityBindings;//[Offset: 0x1040, Size: 16]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1178, Size: 96]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11f0, Size: 280]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x7302420
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x7302528
	void TargetConfirm();// 0x7301df8
	void TargetCancel();// 0x7301ddc
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x7301e14
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x7304360
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x730447c
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x7300c84
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x73011d4
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x730153c
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x73016b8
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x7301a0c
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x7301c1c
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x7301364
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x7301450
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x730227c
	void ServerPrintDebug_Request();// 0x73023c4
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x7300a24
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x72ffcec
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x72fff54
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x72ffe24
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x73007a8
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x7301f04
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x7304b30
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x7304c74
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x7303c50
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x7303b58
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x7303968
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x7303a60
	void OnRep_ServerDebugString();// 0x73020e4
	void OnRep_ReplicatedAnimMontage();// 0x7300124
	void OnRep_OwningActor();// 0x72fec7c
	void OnRep_ClientDebugString();// 0x7302100
	void OnRep_ActivateAbilities();// 0x72fec60
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7303170
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x73034e8
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7302714
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x72ff028
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x72ff3bc
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x730374c
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x7302a8c
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x7302dbc
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x72fec90
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x7302f54
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x7304820
	GameplayEffectContextHandle MakeEffectContext();// 0x73046cc
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x7305010
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x7302658
	bool GetUserAbilityActivationInhibited();// 0x7301ecc
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x730420c
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x7304580
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x7303d48
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x7303e84
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x7300bd0
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x73018d4
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x730211c
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x730090c
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x7300690
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x7300140
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x7300498
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x7300590
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x7303f90
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x72ff67c
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x7304ea4
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x7304d84
	void AbilityConfirmOrCancel__DelegateSignature();// 0xbbc0600
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0xbbc0600

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 16]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 16]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 16]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 16]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 16]
	void OnRep_SimulatedTasks();// 0xae841e8
	static enum K2_RunGameplayTask(interface class TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0xae853c0

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 16]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 72]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 72]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 72]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 56]
	Object* EffectSource;//[Offset: 0x130, Size: 8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 16]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 16]
	FString UserDescription;//[Offset: 0x28, Size: 16]
	FString AutoDescription;//[Offset: 0x38, Size: 16]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 96]
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 8]
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	Actor* SourceActor;//[Offset: 0x2d8, Size: 8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 12]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 16]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x320, Size: 8]
	void ConfirmTargeting();// 0x732ad78
	void CancelTargeting();// 0x732ad5c

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x220, Size: 12]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 1]
	PlayerController* MasterPC;//[Offset: 0x230, Size: 8]
	Actor* TargetingActor;//[Offset: 0x238, Size: 8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0xbbc0600
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0xbbc0600
	void OnValidTargetChanged(bool bNewValue);// 0xbbc0600
	void OnTargetingAnActor(bool bNewValue);// 0xbbc0600
	void OnParametersInitialized();// 0xbbc0600
	void FaceTowardSource(bool bFaceIn2D);// 0x732c538

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 16]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 4]
	enum DeltaFlags;//[Offset: 0x100, Size: 1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 8]
	int Level;//[Offset: 0x18, Size: 4]
	int InputID;//[Offset: 0x1c, Size: 4]
	Object* SourceObject;//[Offset: 0x20, Size: 8]
	byte ActiveCount;//[Offset: 0x28, Size: 1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 24]
	GameplayTagContainer DynamicAbilityTags;//[Offset: 0x48, Size: 32]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x68, Size: 16]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x78, Size: 16]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x88, Size: 8]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 8]
	float PlayRate;//[Offset: 0x8, Size: 4]
	float Position;//[Offset: 0xc, Size: 4]
	float BlendTime;//[Offset: 0x10, Size: 4]
	byte NextSectionID;//[Offset: 0x14, Size: 1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 16]
	byte SectionIdToPlay;//[Offset: 0x28, Size: 1]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 16]
	GameplayAbility* AnimatingAbility;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x130, Size: 16]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x450, Size: 16]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 664]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 16]
	float StartServerWorldTime;//[Offset: 0x2c0, Size: 4]
	float CachedStartServerWorldTime;//[Offset: 0x2c4, Size: 4]
	float StartWorldTime;//[Offset: 0x2c8, Size: 4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 16]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 16]
	GameplayCueParameters Parameters;//[Offset: 0x28, Size: 192]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 4]
	float RawMagnitude;//[Offset: 0x4, Size: 4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 24]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 32]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 32]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 12]
	Actor* Instigator;//[Offset: 0x88, Size: 8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 8]
	Object* SourceObject;//[Offset: 0x98, Size: 8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 4]
	int AbilityLevel;//[Offset: 0xac, Size: 4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 8]
	bool bReplicateLocationWhenUsingMinimalRepProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 16]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 16]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x18, Size: 40]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 16]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 24]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 32]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 32]
	float Level;//[Offset: 0x70, Size: 4]
	float AbilityLevel;//[Offset: 0x74, Size: 4]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 56]
	byte ModifierOp;//[Offset: 0x38, Size: 1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 40]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x68, Size: 480]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x248, Size: 1]
	GameplayTagRequirements SourceTags;//[Offset: 0x250, Size: 64]
	GameplayTagRequirements TargetTags;//[Offset: 0x290, Size: 64]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTagRequirements
	GameplayTagContainer RequireTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer IgnoreTags;//[Offset: 0x20, Size: 32]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 32]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 16]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 16]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 16]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x7340294

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 16]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 56]
	byte ModifierOp;//[Offset: 0x38, Size: 1]
	float Magnitude;//[Offset: 0x3c, Size: 4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 64]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 8]
	enum AggregatorType;//[Offset: 0x48, Size: 1]
	byte ModifierOp;//[Offset: 0x49, Size: 1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 480]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x230, Size: 1]
	GameplayTagRequirements SourceTags;//[Offset: 0x238, Size: 64]
	GameplayTagRequirements TargetTags;//[Offset: 0x278, Size: 64]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 32]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x733fe70

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 56]
	float MinLevel;//[Offset: 0x38, Size: 4]
	float MaxLevel;//[Offset: 0x3c, Size: 4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 32]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 32]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 32]

--------------------------------
Class: StormShieldRadiusGrowthData
	float TargetRadius;//[Offset: 0x0, Size: 4]
	float StartingRadius;//[Offset: 0x4, Size: 4]
	float GrowthRate;//[Offset: 0x8, Size: 4]
	float SafeAreaStartRadiusChangeTime;//[Offset: 0xc, Size: 4]
	float SafeAreaFinishRadiusChangeTime;//[Offset: 0x10, Size: 4]
	enum State;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StormShieldMoveData
	float MoveRate;//[Offset: 0x0, Size: 4]
	Vector TargetLocation;//[Offset: 0x4, Size: 12]
	Vector StartingLocation;//[Offset: 0x10, Size: 12]
	float SafeAreaStartLocationChangeTime;//[Offset: 0x1c, Size: 4]
	float SafeAreaFinishLocationChangeTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortMissionStormSafeZone.Actor.Object
	StaticMeshComponent* SafeZoneMesh;//[Offset: 0x228, Size: 8]
	bool bScaleUniformly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnSafeZoneInStormStateChanged;//[Size: 16]
	class FortGameplayAbility[] Abilities;//[Offset: 0x248, Size: 16]
	bool bSafeZoneInStormStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	float SafeZoneRadius;//[Offset: 0x25c, Size: 4]
	AbilitySystemComponent* AbilityComponent;//[Offset: 0x268, Size: 8]
	void SetSafeZoneRadius(const float InRadius);// 0xd0df700
	void OnSafeZoneRadiusChanged(const float NewRadius, const float NewConvertedRadius);// 0xbbc0600
	void OnRep_ZoneRadius();// 0xd0df6ec
	void OnRep_SafeZoneInStormStateChanged();// 0xd0df6d8
	void OnPlayerPlacedBuildingActorInRadius(const BuildingActor* BuildingPlaced, const FortPlayerPawn* ByPlayer);// 0xbbc0600
	float GetSafeZoneRadius();// 0xd0df6bc
	float GetConvertedSafeZoneRadius();// 0xd0df698

--------------------------------
Class: FortGameplayAbility.GameplayAbility.Object
	enum ActivationType;//[Offset: 0x3c8, Size: 1]
	FortGameplayEffectContainer EffectContainers;//[Offset: 0x3d0, Size: 184]
	FortGameplayEffectContainer[] GameplayEffectContainers;//[Offset: 0x768, Size: 16]
	<GameplayTag,FortGameplayEffectContainer> DynamicGameplayEffectContainers;//[Offset: 0x778, Size: 80]
	GameplayTagContainer OwnerPreviewImageOverrideTags;//[Offset: 0x7c8, Size: 32]
	class FortProjectileBase* ProjectileClass;//[Offset: 0x7e8, Size: 8]
	DataTableRowHandle DamageStatHandle;//[Offset: 0x7f0, Size: 16]
	FortAbilityCost[] AbilityCosts;//[Offset: 0x800, Size: 16]
	bool bShowWidgetForCosts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x810, Size: 1]
	bool bApplyingCostsEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x810, Size: 1]
	ScalableFloat ExplicitCooldownDuration;//[Offset: 0x818, Size: 40]
	GameplayTagContainer ExplicitCooldownTags;//[Offset: 0x840, Size: 32]
	bool bStartWithCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 1]
	bool bPersistOnDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x860, Size: 1]
	bool bDisableMoveCombining;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x860, Size: 1]
	bool bIgnoreClientActivationAttempts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x860, Size: 1]
	bool bStopsAIBehaviorLogic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x860, Size: 1]
	bool bStopsAIMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x860, Size: 1]
	bool bStopsRVOAvoidance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x860, Size: 1]
	bool bForceNormalAILOD;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x860, Size: 1]
	enum MinimumRequiredAILODLevel;//[Offset: 0x861, Size: 1]
	bool bRelevantForAIDespawning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x862, Size: 1]
	bool bUseTetheredPawnAsInstigator;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x862, Size: 1]
	bool bAcceptTargetActorVehicleForCanHitTests;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x862, Size: 1]
	bool bUseAIFireLocationAndRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x862, Size: 1]
	enum AIWeaponUsage;//[Offset: 0x863, Size: 1]
	GameplayTag WeaponTestApplicationTag;//[Offset: 0x864, Size: 8]
	bool bVerifyFireOffsetIsNotObstructedByWorldGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 1]
	bool bCanHitBallisticTestsOnlyTestIndesructiblesWhileFalling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 1]
	Vector FireOffset;//[Offset: 0x870, Size: 12]
	float ActivationNoiseRange;//[Offset: 0x87c, Size: 4]
	float ImpactNoiseRange;//[Offset: 0x880, Size: 4]
	float ActivationNoiseLoudness;//[Offset: 0x884, Size: 4]
	float ImpactNoiseLoudness;//[Offset: 0x888, Size: 4]
	GameplayTagContainer ProhibitedTargetTags;//[Offset: 0x890, Size: 32]
	bool bLeadPawnTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
	float DesiredThrowAngle;//[Offset: 0x8b4, Size: 4]
	float MaxYawAngleToFire;//[Offset: 0x8b8, Size: 4]
	bool bClampMaxYawAngleToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	bool bUseTargetActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 1]
	float InitialAccuracyMax;//[Offset: 0x8c0, Size: 4]
	float InitialAccuracyMin;//[Offset: 0x8c4, Size: 4]
	float TargetAccuracyMax;//[Offset: 0x8c8, Size: 4]
	float TargetAccuracyMin;//[Offset: 0x8cc, Size: 4]
	float MinAccuracyDistance;//[Offset: 0x8d0, Size: 4]
	float MaxAccuracyDistance;//[Offset: 0x8d4, Size: 4]
	float AccuracyDistanceMultiplier;//[Offset: 0x8d8, Size: 4]
	int NumUsesToReachTargetAccuracy;//[Offset: 0x8dc, Size: 4]
	int UseCount;//[Offset: 0x8e0, Size: 4]
	bool bIsMobileToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	FortGameplayAbilityBehaviorDistanceData[] GameplayAbilityBehaviorDistanceData;//[Offset: 0x8e8, Size: 16]
	FortGameplayAbilityMontageInfo MontageInfo;//[Offset: 0x918, Size: 88]
	FortWeaponItemDefinition* AbilityWeapon;//[Offset: 0x970, Size: 8]
	FText DisplayName;//[Offset: 0x978, Size: 24]
	FText Description;//[Offset: 0x990, Size: 24]
	Texture2D* SmallPreviewImageOverride;//[Offset: 0x9b0, Size: 8]
	float ChargeStartTime;//[Offset: 0x9c8, Size: 4]
	enum ChargeState;//[Offset: 0x9d0, Size: 1]
	class FortTooltip* ToolTip;//[Offset: 0x9f8, Size: 8]
	FortTooltipDisplayStatsList* StatList;//[Offset: 0xa00, Size: 8]
	AbilityTrackedActorSettings ActorTrackingSettings;//[Offset: 0xa10, Size: 40]
	class FortCameraMode* CurrentAbilityCameraModeClass;//[Offset: 0xa38, Size: 8]
	GameplayTagContainer AnalyticsTags;//[Offset: 0xa40, Size: 32]
	void TrackGroupedActor(Actor* ActorToTrack, GameplayTag GroupTag);// 0xcff0b5c
	void TrackActor(Actor* ActorToTrack);// 0xcff0ab4
	bool ShouldPlayFailedMontage(out const GameplayTagContainer FailedReason);// 0xcff09d0
	bool SetupPreviewImageOverride();// 0xcff0990
	void SetCameraMode(class FortCameraMode CameraModeClass);// 0xcff08e8
	void SetAIFocalPoint(Actor* FocusTarget, Vector FocalPoint, bool bUseAttackingPriority);// 0xcff07b8
	void QueryGameplayEffectContainerTargetExecutionModifiers(GameplayAbilityTargetDataHandle TargetData, const FortAbilitySystemComponent* SrcAbilitySystem, GameplayTag ApplicationTag, int GameplayEffectLevel, const Object* SourceObject, out const GameplayEffectExecutionScopedModifierInfo[] InScopedMods, ActiveGameplayEffectHandle[] InIgnoreHandles, out GameplayModifierEvaluatedData[] OutOutputModifiers, bool bTooltipRequest);// 0xcff03f4
	void OnReachedZeroCharge();// 0xbbc0600
	void OnReachedMinCharge();// 0xbbc0600
	void OnReachedMaxCharge();// 0xbbc0600
	void OnGenericNotifyFromAnimation(GameplayTag NotifyTag);// 0xcff0344
	void OnDischarge();// 0xbbc0600
	void OnChargeStateChanged(enum OldChargeState, enum NewChargeState);// 0xbbc0600
	void OnAbilityInputReleased();// 0xbbc0600
	void OnAbilityInputPressed();// 0xbbc0600
	void MakeGameplayEffectContainerSpecs(GameplayTag ApplicationTag, int GameplayEffectLevel, out FortGameplayEffectContainerSpec[] OutSpecContainers);// 0xcff01d0
	FortGameplayEffectContainerSpec MakeGameplayEffectContainerSpec(GameplayTag ApplicationTag, int GameplayEffectLevel);// 0xcff0058
	void K2_TriggerFromAnimation(GameplayTag ApplicationTag);// 0xbbc0600
	bool K2_ShouldUseDecoTool(GameplayAbilityActorInfo ActorInfo);// 0xbbc0600
	void K2_OverrideFailedReason(out const GameplayTagContainer FailedReason, out GameplayTagContainer OverridenFailedReason);// 0xcfeff14
	void K2_AbilityCompleted();// 0xcfefef8
	bool IsTargetOutsideOfMaxYawRotation();// 0xcfefec0
	bool IsChargeUpAbility();// 0xcfefe88
	Actor*[] GetTrackedGroupedActors(GameplayTag GroupTag);// 0xcfefd9c
	Actor*[] GetTrackedActors();// 0xcfefcfc
	class FortTooltip GetTooltip(bool bSummaryTooltip);// 0xcfefc3c
	void GetProjectileInitialValues(out float outProjectileSpeed, out Rotator outSpawnDirection, out float outProjectileGravity, out Actor* HomingTarget, bool bApplyInaccuracy, bool bApplyClampedMaxYawAngleToFire, bool bApplyLeading);// 0xcfef9a8
	int GetOwningPlayerTeamPerkProgressiveActivationLevel();// 0xcfef974
	int GetMaxNumTrackedActors();// 0xcfef940
	Rotator GetFireRotation(bool bApplyLeading, bool bApplyInaccuracy, bool bApplyClampedMaxYawAngleToFire);// 0xcfef7ec
	Vector GetFireLocation();// 0xcfef7b4
	FortTooltipDisplayStatsList* GetDisplayStats();// 0xcfef778
	Transform GetCustomAbilitySourceTransform();// 0xbbc0600
	FortWeapon* GetCurrentSourceWeapon();// 0xcfef744
	FortWorldItemDefinition* GetCurrentSourceItemDefinition();// 0xcfef710
	void GetCurrentAbilitySourceLevel(out float OutSourceLevel);// 0xcfef65c
	float GetChargeTime();// 0xcfef628
	enum GetChargeState();// 0xcfef60c
	float GetChargePercent();// 0xcfef5d8
	void GetAvatarAsValidFortPlayerPawn(out enum OutExec, out FortPlayerPawn* OutFortPlayerPawn);// 0xcfef4d4
	FortPlayerPawn* GetAvatarAsFortPlayerPawn();// 0xcfef4a0
	Vector GetAimLocationNearestPawn(FortPawn* Instigator);// 0xcfef3ec
	Actor* GetAIAbilityTarget();// 0xcfef3b8
	FortPawn* GetActivatingPawn();// 0xcfef384
	FortAbilitySystemComponent* GetActivatingAbilityComponent();// 0xcfef350
	float GetAbilityTargetingLevel();// 0xcfef314
	GameplayTagContainer GetAbilityTags();// 0xcfef284
	void ForceCameraLookDown(PlayerController* PC);// 0xcfef1dc
	void FailedToActivatePassiveAbility();// 0xbbc0600
	void EquipVehicleWeapon(FortWeaponItemDefinition* WeaponDefinition, const int SeatIndex, const int ItemLevel);// 0xcfef0b8
	void EquipAbilityWeapon(FortWeaponItemDefinition* WeaponDefinition, int ItemLevel);// 0xcfeefd0
	bool DoesTargetHaveTags(const Actor* Target, out const GameplayTagContainer Tags);// 0xcfeeeb4
	bool DoesTargetHaveProhibitedTagsForAI(const Actor* Target);// 0xcfeee00
	void ClearTrackedGroupedActors(GameplayTag GroupTag, bool bDestroyActors);// 0xcfeed10
	void ClearTrackedActors(bool bDestroyActors);// 0xcfeec60
	void ClearCameraMode();// 0xcfeec4c
	void ClearAIFocalPoint(bool bUseAttackingPriority);// 0xcfeeb9c
	static void CalculateProjectileTrajectorySplineWithHitProfile(out HitResult OutHitResult, out Vector[] OutSplinePoints, out Vector[] OutSplineTangents, const Actor* Instigator, Vector InitialLocation, Vector InitialVelocity, float MaxSpeed, float Gravity, float Friction, float Bounciness, float TimeStep, float TraceExtent, FName CollisionProfile, int MaxBounces, int MaxSteps, float MaxDistanceBetweenSplinePoints, float InitialDistance);// 0xcfee684
	static void CalculateProjectileTrajectorySplineWithHit(out HitResult OutHitResult, out Vector[] OutSplinePoints, out Vector[] OutSplineTangents, const Actor* Instigator, Vector InitialLocation, Vector InitialVelocity, float MaxSpeed, float Gravity, float Friction, float Bounciness, float TimeStep, float TraceExtent, byte TraceChannel, int MaxBounces, int MaxSteps, float MaxDistanceBetweenSplinePoints, float InitialDistance);// 0xcfee16c
	static void CalculateProjectileTrajectorySplineProfile(out Vector[] OutSplinePoints, out Vector[] OutSplineTangents, const Actor* Instigator, Vector InitialLocation, Vector InitialVelocity, float MaxSpeed, float Gravity, float Friction, float Bounciness, float TimeStep, float TraceExtent, FName CollisionProfile, int MaxBounces, int MaxSteps, float MaxDistanceBetweenSplinePoints, float InitialDistance);// 0xcfedcd0
	static void CalculateProjectileTrajectorySpline(out Vector[] OutSplinePoints, out Vector[] OutSplineTangents, const Actor* Instigator, Vector InitialLocation, Vector InitialVelocity, float MaxSpeed, float Gravity, float Friction, float Bounciness, float TimeStep, float TraceExtent, byte TraceChannel, int MaxBounces, int MaxSteps, float MaxDistanceBetweenSplinePoints, float InitialDistance);// 0xcfed834
	void BP_GetGameplayEffectContainers(GameplayTag ApplicationTag, out FortGameplayEffectContainer[] OutContainers);// 0xcfed700
	FortGameplayEffectContainer BP_GetGameplayEffectContainer(GameplayTag ApplicationTag);// 0xcfed634
	GameplayTagContainer BP_GetCooldownTags();// 0xcfed5b4
	bool ApplySourcePropertyOverrides(out FName[] OverriddenPropertyNames);// 0xcfed4e8
	ActiveGameplayEffectHandle[] ApplyGameplayEffectContainerWithCSVStats(GameplayAbilityTargetDataHandle TargetData, GameplayTag ApplicationTag, int GameplayEffectLevel, FString StatName);// 0xcfed2dc
	ActiveGameplayEffectHandle[] ApplyGameplayEffectContainer(GameplayAbilityTargetDataHandle TargetData, GameplayTag ApplicationTag, int GameplayEffectLevel);// 0xcfed114
	Vector ApplyAccuracyToTargetLocation(out const Vector SourceLocation, out const Vector TargetLocation, float inDesiredThrowAngle);// 0xcfecfc0
	void AddDynamicGameplayEffectContainer(out GameplayTag ApplicationTag, out FortGameplayEffectContainer Container);// 0xcfece5c

--------------------------------
Class: FortGameplayEffectContainer
	GameplayTag ApplicationTag;//[Offset: 0x0, Size: 8]
	FortAbilityTargetSelectionList TargetSelection;//[Offset: 0x8, Size: 72]
	class GameplayEffect[] TargetGameplayEffectClasses;//[Offset: 0x50, Size: 16]
	class GameplayEffect[] OwnerGameplayEffectClasses;//[Offset: 0x60, Size: 16]
	GameplayTagContainer ActivationCues;//[Offset: 0x70, Size: 32]
	GameplayTagContainer ImpactCues;//[Offset: 0x90, Size: 32]
	bool bUseCalculationInTooltips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bOverrideChargeMagnitude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	float ChargeMagnitudeOverrideValue;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: FortAbilityTargetSelectionList
	FortAbilityTargetSelection[] List;//[Offset: 0x0, Size: 16]
	bool bStopAtFirstSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bKeepCheckingListOnIndestructibleHit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	GameplayTagContainer AbilityTargetBlockedGameplayTags;//[Offset: 0x18, Size: 32]
	bool bUseWeaponRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseMaxYawAngleToTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	float MaxYawAngleToTarget;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: FortAbilityTargetSelection
	byte Shape;//[Offset: 0x0, Size: 1]
	FString CustomShapeComponentName;//[Offset: 0x8, Size: 16]
	enum TestType;//[Offset: 0x18, Size: 1]
	enum PrimarySource;//[Offset: 0x19, Size: 1]
	enum SecondarySource;//[Offset: 0x1a, Size: 1]
	ScalableFloat Range;//[Offset: 0x20, Size: 40]
	Vector HalfExtents;//[Offset: 0x48, Size: 12]
	bool bAlignShapeEdgeToSourceLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	ScalableFloat ConeYawAngle;//[Offset: 0x58, Size: 40]
	ScalableFloat ConePitchAngle;//[Offset: 0x80, Size: 40]
	ScalableFloat ConeMinRadius;//[Offset: 0xa8, Size: 40]
	FortTargetFilter TargetFilter;//[Offset: 0xd0, Size: 56]
	bool bExcludeObstructedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bShouldAttachedActorsObstructTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	bool bCreateHitResultWhenNoTargetsFound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 1]
	bool bUseProjectileRotationForDamageZones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 1]
	enum TargetSelectionUsage;//[Offset: 0x10c, Size: 1]
	int MaxTargets;//[Offset: 0x110, Size: 4]

--------------------------------
Class: FortTargetFilter
	byte ActorTypeFilter;//[Offset: 0x0, Size: 1]
	class Object* ActorClassFilter;//[Offset: 0x8, Size: 8]
	bool bExcludeInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bUseTrapsOwningPawnAsInstigator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bExcludeRequester;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bExcludeAllAttachedToInstigator;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bExcludeAthenaVehicleOfInstigator;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bExcludeAllAttachedToRequester;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bExcludePawnFriends;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bExcludeFriendlyAI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bExcludeAllAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bExcludePawnNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bExcludePawnEnemies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bExcludeNonPawnFriends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bExcludeNonPawnEnemies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bConsiderFriendlyFireWhenExcludingFriends;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bExcludeDBNOPawns;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bExcludeWaterVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bExcludeWaterBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bExcludeAthenaVehicleOccupiedBySource;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bExcludeAthenaVehicleUnoccupied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bExcludeAthenaVehicleOccupied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bExcludeAthenaVehicleFromObstructionChecks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bExcludeWithoutNavigationCorridor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bExcludeNonPlayerBuiltPieces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bExcludePlayerBuiltPieces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bExcludeNonBGABuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bExcludeNonBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bExcludeProjectiles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bTraceComplexCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bExcludeLandscape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bConsiderPhysicsPawnsAsNonPlayerPawns;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	GameplayTagContainer ExclusionGameplayTags;//[Offset: 0x18, Size: 32]

--------------------------------
Class: FortCameraMode.Object
	FortPlayerCameraBase* PlayerCamera;//[Offset: 0x28, Size: 8]
	float TransitionTime;//[Offset: 0x30, Size: 4]
	float TransitionOutTime;//[Offset: 0x34, Size: 4]
	bool bOverrideTransitionOutTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	ViewTargetTransitionParams TransitionParams;//[Offset: 0x3c, Size: 16]
	bool bResetInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bShouldAllowBlendingWhenActive;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bShouldAllowBlendingWhenInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]
	bool bShouldPassViewTargetCheckOnTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c, Size: 1]

--------------------------------
Class: FortPlayerCameraBase.PlayerCameraManager.Actor.Object
	ActiveFortCamera[] CameraBlendStack;//[Offset: 0x27b0, Size: 16]
	FortCameraInstanceEntry[] CameraInstances;//[Offset: 0x27c0, Size: 16]
	class FortCameraMode* CurrentAbilitySpecifiedCameraClass;//[Offset: 0x27d0, Size: 8]
	GameplayAbilitySpecHandle AbilitySpecForCameraClassRequest;//[Offset: 0x27d8, Size: 4]
	FortUICameraManagerComponent* UICamera;//[Offset: 0x27e0, Size: 8]
	class FortCameraMode* Base3PClass;//[Offset: 0x27e8, Size: 8]
	class FortCameraMode* Targeting3PClass;//[Offset: 0x27f0, Size: 8]
	class FortCameraMode* OverrideCameraClass;//[Offset: 0x27f8, Size: 8]
	class FortCinematicCamera* CinematicCameraClass;//[Offset: 0x2800, Size: 8]
	class FortCameraMode* DBNOCameraClass;//[Offset: 0x2808, Size: 8]
	class FortCameraMode* DBNOCarriedCameraClass;//[Offset: 0x2810, Size: 8]
	class FortCameraMode* DeathCameraClass;//[Offset: 0x2818, Size: 8]
	class FortCameraMode* RespawnedInAirCameraClass;//[Offset: 0x2820, Size: 8]
	class FortCameraMode* SkydiveGlideCameraClass;//[Offset: 0x2828, Size: 8]
	class FortCameraMode* SkydiveDiveCameraClass;//[Offset: 0x2830, Size: 8]
	class FortCameraMode* SkydiveParachuteCameraClass;//[Offset: 0x2838, Size: 8]
	class FortCameraMode* HoverboardCameraClass;//[Offset: 0x2840, Size: 8]
	class FortCameraMode* WaterSprintBoostCameraClass;//[Offset: 0x2848, Size: 8]
	class FortCameraMode* FocalPointCameraClass;//[Offset: 0x2850, Size: 8]
	class FortCameraMode* TetheredTargeting3PClass;//[Offset: 0x2858, Size: 8]
	class FortCameraMode* RCActorCameraClass;//[Offset: 0x2860, Size: 8]
	FortCameraPrototype[] CameraPrototypes;//[Offset: 0x2868, Size: 16]
	PostProcessVolume* ZoomPostProcessVolume;//[Offset: 0x2878, Size: 8]

--------------------------------
Class: ActiveFortCamera
	FortCameraMode* Camera;//[Offset: 0x0, Size: 8]
	Actor* ViewTarget;//[Offset: 0x8, Size: 8]
	float TransitionAlpha;//[Offset: 0x10, Size: 4]
	float TransitionUpdateRate;//[Offset: 0x14, Size: 4]
	float BlendWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortCameraInstanceEntry
	class FortCameraMode* CameraClass;//[Offset: 0x0, Size: 8]
	Actor* ViewTarget;//[Offset: 0x8, Size: 8]
	FortCameraMode* Camera;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortUICameraManagerComponent.ActorComponent.Object
	Actor* ViewTarget;//[Offset: 0xb0, Size: 8]
	bool bUpdatingViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	enum CurrentCamera;//[Offset: 0xba, Size: 1]
	<enum,FortCameraBase*> CameraMapping;//[Offset: 0xc0, Size: 80]
	void SetZoomLevel(const float ZoomLevel);// 0xd1fd760
	void SetFrameTarget(out const interface class FrameTarget);// 0xd1fd6ac
	void SetCustomCameraRotationOffset(const Rotator Offset);// 0xd1fd604
	void SetCameraFrame(const interface class NewFrame);// 0xd1fd53c
	void SetCamera(enum NewCamera);// 0xd1fd494
	void HandleCameraFrameTargetSettingsChanged(interface class FrameTarget);// 0xd1fd3cc
	float GetZoomLevel();// 0xd1fd3b0
	FortCameraBase* GetCameraActor();// 0xd1fd37c
	enum GetCamera();// 0xd1fd348

--------------------------------
Class: FortCameraBase.CameraActor.Actor.Object
	float MinDistanceToDrag;//[Offset: 0x7a0, Size: 4]
	float DefaultFieldOfView;//[Offset: 0x7a4, Size: 4]
	Rotator DefaultRotation;//[Offset: 0x7a8, Size: 12]
	Vector DefaultLocation;//[Offset: 0x7b4, Size: 12]
	FortExhibitActor* ExhibitActor;//[Offset: 0x7c0, Size: 8]
	bool bExhibitActorChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool CheckForDragBegin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	Vector2D DownDelta;//[Offset: 0x7cc, Size: 8]
	void OnDragEnd();// 0xbbc0600
	void OnDragBegin();// 0xbbc0600
	void OnDeactivated(FortPlayerController* PlayerController);// 0xbbc0600
	void OnActivated(FortPlayerController* PlayerController);// 0xbbc0600
	void Exhibit(FortExhibitActor* TargetActor);// 0xcf4194c

--------------------------------
Class: FortExhibitActor.Actor.Object
	Transform CameraOffset;//[Offset: 0x220, Size: 48]
	float CameraFOV;//[Offset: 0x250, Size: 4]

--------------------------------
Class: FortCinematicCamera.FortCameraMode.Object
	FortPlayerControllerSpectating* SpectatorPC;//[Offset: 0x58, Size: 8]

--------------------------------
Class: FortCameraPrototype
	FName PrototypeName;//[Offset: 0x0, Size: 8]
	FString PrototypeDescription;//[Offset: 0x8, Size: 16]
	FortCameraModeOverride[] ModeOverrides;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortCameraModeOverride
	class FortCameraMode* OriginalClass;//[Offset: 0x0, Size: 8]
	class FortCameraMode* ClassOverride;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 1360]
	float Priority;//[Offset: 0x7b0, Size: 4]
	float BlendRadius;//[Offset: 0x7b4, Size: 4]
	float BlendWeight;//[Offset: 0x7b8, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7bc, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7bc, Size: 1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0xd8c6f7c

--------------------------------
Class: FortAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnClientVehicleBlockingChanged;//[Size: 16]
	ReplicatedMontagePair LandingMontagePair;//[Offset: 0x14d0, Size: 40]
	GameplayAbilityRepSharedAnim RepSharedAnimInfo;//[Offset: 0x1500, Size: 16]
	void StopOverrideReplicateMontageAnimPosition();// 0xce92fa4
	void StartOverrideReplicateMontageAnimPosition();// 0xce92f90
	void SetSharedAnimStateWithMontage(enum State, AnimMontage* Montage);// 0xce92ea8
	void SetSharedAnimState(enum State);// 0xce92e00
	void SetLandingMontageReplication(AnimMontage* Montage1, FName Section1, AnimMontage* Montage2, FName Section2);// 0xce92ca0
	int RemoveActiveEffectsWithTagsAndSource(GameplayTagContainer Tags, Object* Source);// 0xce92b68
	void OnRep_SharedAnim();// 0xce92b54
	void NetMulticast_RefreshActiveGameplayEffectCueEvents();// 0xb605bac
	GameplayEffectContextHandle MakeFortEffectContext(Object* SourceObject, Actor* EffectCauser, Actor* DamageSource, const int GameplayEffectLevel);// 0xce92900
	bool HasActiveAbilityWithAnyMatchingTag(GameplayTagContainer Tags);// 0xce92804
	float GetAttributeMagnitude(const AttributeInfo Info);// 0xce92754
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTagsAndSource(GameplayTagContainer Tags, Object* Source);// 0xce925d8
	AttributeInfo FindAttributeInformation(const FString AttributeName);// 0xce924cc
	bool CanActivateAbilityWithMatchingTag(GameplayTagContainer GameplayAbilityTags);// 0xce923d0
	void BP_UnBlockAbilitiesWithTags(out const GameplayTagContainer Tags);// 0xce92300
	ActiveGameplayEffectHandle BP_FortApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* TargetOfEffect, Object* OptionalSourceObject, Actor* OptionalEffectCauser, Actor* OptionalDamageSource, float Level, GameplayEffectContextHandle EffectContext);// 0xb605884
	ActiveGameplayEffectHandle BP_FortApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, Object* OptionalSourceObject, Actor* OptionalEffectCauser, Actor* OptionalDamageSource, float Level, GameplayEffectContextHandle EffectContext);// 0xce9201c
	void BP_CancelAbilitiesWithTags(out const GameplayTagContainer Tags);// 0xce91f4c
	void BP_BlockAbilitiesWithTags(out const GameplayTagContainer Tags);// 0xce91e7c

--------------------------------
Class: ReplicatedMontagePair
	AnimMontage* Montage1;//[Offset: 0x0, Size: 8]
	AnimMontage* Montage2;//[Offset: 0x8, Size: 8]
	FName Section1;//[Offset: 0x10, Size: 8]
	FName Section2;//[Offset: 0x18, Size: 8]
	int8 RepIndex;//[Offset: 0x20, Size: 1]

--------------------------------
Class: GameplayAbilityRepSharedAnim.GameplayAbilityRepSharedAnim_Base
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameplayAbilityRepSharedAnim_Base
	enum AnimState;//[Offset: 0x0, Size: 1]
	byte MontageSectionToPlay;//[Offset: 0x1, Size: 1]

--------------------------------
Class: AttributeInfo

--------------------------------
Class: FortGameplayEffectContainerSpec
	FortAbilityTargetSelectionList TargetSelection;//[Offset: 0x0, Size: 72]
	GameplayEffectSpecHandle[] TargetGameplayEffectSpecs;//[Offset: 0x48, Size: 16]
	GameplayEffectSpecHandle[] OwnerGameplayEffectSpecs;//[Offset: 0x58, Size: 16]
	GameplayTagContainer ActivationCues;//[Offset: 0x68, Size: 32]
	GameplayTagContainer ImpactCues;//[Offset: 0x88, Size: 32]
	float ImpactNoiseRange;//[Offset: 0xa8, Size: 4]
	float FlyByNoiseRange;//[Offset: 0xac, Size: 4]
	bool bOverrideChargeMagnitude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float ChargeMagnitudeOverrideValue;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: FortTooltip.Object
	FText Description;//[Offset: 0x28, Size: 24]
	void SetLocalizationText(FString Name, FText Value);// 0xd1eea18
	void SetLocalizationInt(FString Name, int Value);// 0xd1ee924
	void SetLocalizationFloat(FString Name, float Value);// 0xd1ee830
	bool GetValueData(const Object* ObjectToDescribe, const FortTooltipContext* Context, out const GameplayTag Token, out FortTooltipValueData OutData);// 0xd1ee54c
	bool GetTokenizedDescriptionText(const Object* ObjectToDescribe, out const GameplayTag Tag, const FortTooltipContext* Context, out FText[] OutDescription);// 0xd1ee3a4
	bool GetTextForToken(const Object* ObjectToDescribe, out const GameplayTag Tag, const FortTooltipContext* Context, out const GameplayTag Token, out FText OutText);// 0xd1ee158
	bool GetNumericValue(const Object* ObjectToDescribe, out const GameplayTag Tag, const FortTooltipContext* Context, out const GameplayTag Token, out float OutVal);// 0xd1edf68
	bool BP_GetValueData(const Object* ObjectToDescribe, const FortTooltipContext* Context, out const GameplayTag Token, out FortTooltipValueData OutData);// 0xd1edc84
	bool BP_GetTokenizedDescriptionText(const Object* ObjectToDescribe, out const GameplayTag Tag, const FortTooltipContext* Context, out FText[] OutDescription);// 0xd1edadc
	bool BP_GetTextForToken(const Object* ObjectToDescribe, out const GameplayTag Tag, const FortTooltipContext* Context, out const GameplayTag Token, out FText OutText);// 0xd1ed890
	bool BP_GetNumericValue(const Object* ObjectToDescribe, out const GameplayTag Tag, const FortTooltipContext* Context, out const GameplayTag Token, out float OutVal);// 0xd1ed6a0

--------------------------------
Class: FortTooltipContext.Object
	AbilitySystemComponent* SourceAbilitySystem;//[Offset: 0x28, Size: 8]
	AbilitySystemComponent* DestAbilitySystem;//[Offset: 0x30, Size: 8]
	int TreatAsLevel;//[Offset: 0x38, Size: 4]
	GameplayTagContainer TagContainer;//[Offset: 0x40, Size: 32]
	Object* ComparisonObject;//[Offset: 0x60, Size: 8]
	FortRegisteredPlayerInfo* PlayerInfo;//[Offset: 0x68, Size: 8]
	static FortTooltipContext* SpawnTooltipContextWithSource_Advanced(out const class FortTooltipContext TooltipContextClass, PlayerController* SourcePlayerController);// 0xd1f0748
	static FortTooltipContext* SpawnTooltipContextWithSource(PlayerController* SourcePlayerController);// 0xd1f06a0
	static FortTooltipContext* SpawnTooltipContextWithNetID_Advanced(out const class FortTooltipContext TooltipContextClass, Object* WorldContextObject, out const UniqueNetIdRepl UniqueId);// 0xd1f04c8
	static FortTooltipContext* SpawnTooltipContextWithNetID(Object* WorldContextObject, out const UniqueNetIdRepl UniqueId);// 0xd1f0348
	static FortTooltipContext* SpawnTooltipContext_Advanced(out const class FortTooltipContext TooltipContextClass);// 0xd1f0294
	static FortTooltipContext* SpawnTooltipContext();// 0xd1f0260

--------------------------------
Class: FortRegisteredPlayerInfo.Object
	MulticastInlineDelegateProperty OnAbilitySystemActorChangedChangedDelegate;//[Size: 16]
	UniqueNetIdRepl PlayerID;//[Offset: 0x38, Size: 40]
	FString PlayerName;//[Offset: 0x60, Size: 16]
	UniqueNetIdRepl PartyLeaderId;//[Offset: 0x70, Size: 40]
	FString Platform;//[Offset: 0x98, Size: 16]
	byte TeamAssignment;//[Offset: 0xa8, Size: 1]
	int PlayerIndex;//[Offset: 0xac, Size: 4]
	bool bIsInitialPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bShouldLockProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool bFailedToLockProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	GUID UnregistrationSaveGUID;//[Offset: 0xb4, Size: 16]
	enum UnregistrationStatus;//[Offset: 0xc4, Size: 1]
	TimerHandle UnregisterFailsafeTimerHandle;//[Offset: 0xc8, Size: 8]
	TimerHandle PollForDedicatedServerReadyToShutdownTimerHandle;//[Offset: 0xd0, Size: 8]
	FortMcpProfileCommonPublic* CommonPublicProfile;//[Offset: 0xd8, Size: 8]
	FortMcpProfileCommonCore* CommonCoreProfile;//[Offset: 0xe0, Size: 8]
	FortMcpProfileCampaign* AccountProfile;//[Offset: 0xe8, Size: 8]
	FortMcpProfileWorld* WorldProfile;//[Offset: 0xf0, Size: 8]
	FortMcpProfileWorld* OutpostProfile;//[Offset: 0xf8, Size: 8]
	FortMcpProfileMetadata* MetadataProfile;//[Offset: 0x100, Size: 8]
	FortMcpProfileCreative* CreativeModeProfile;//[Offset: 0x108, Size: 8]
	FortMcpProfileCollections* CollectionsProfile;//[Offset: 0x110, Size: 8]
	FortMcpProfileAthena* AthenaProfile;//[Offset: 0x118, Size: 8]
	FortQuestManager* QuestManagers;//[Offset: 0x120, Size: 8]
	<enum,FortAwardManager*> AwardManagers;//[Offset: 0x130, Size: 80]
	<enum,FortMinigameManager*> MinigameManagers;//[Offset: 0x180, Size: 80]
	FortCollectionBookManager* CollectionBookManager;//[Offset: 0x1d0, Size: 8]
	FortExpeditionManager* ExpeditionManager;//[Offset: 0x1d8, Size: 8]
	FortLinkedAccountManager* LinkedAccountManager;//[Offset: 0x1e0, Size: 8]
	FortHero* TempAthenaMenuHeroInstance;//[Offset: 0x300, Size: 8]
	bool bAthenaMenuHeroDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	FortCustomizationAssetLoader* CustomizationAssetLoader;//[Offset: 0x310, Size: 8]
	EndZoneScoreAndAwards EndZoneScoreAndAwards;//[Offset: 0x318, Size: 112]
	void HandleDifferentHeroLoadoutActivated(const FortMcpProfileCampaign* Profile);// 0xd1b9ea4
	FString GetPlayerName();// 0xd1b9e20
	AbilitySystemComponent* GetAbilitySystemComponent();// 0xd1b9dec

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortMcpProfileCampaign.FortMcpProfileSubgame.FortMcpProfile.McpProfile.Object
	MulticastInlineDelegateProperty OnDifferentHeroLoadoutActivated;//[Size: 16]
	bool bEnableHeroLoadoutMocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	float HeroLoadoutCommandDelaySeconds;//[Offset: 0x464, Size: 4]
	void UpgradeItemRarity(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UpgradeItemBulk(FString TargetItemId, int DesiredLevel, FString DesiredTier, int ConversionRecipeIndexChoice, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UpgradeItem(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UpgradeAlteration(FString TargetItemId, int AlterationSlot, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UpdateBuildingLevelAndRating(FString BuildingId, int LastBuildingLevel, int LastBuildingRating, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UnslotItemFromCollectionBook(FString ItemId, FString Specific, FString TemplateId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UnslotAllWorkers(const FString[] BuildingIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UnloadWarehouse(const FString[] ResourceTypes, out ClientUrlContext Context);// 0xffffff8d0733b000
	void UnassignAllSquads(const FString[] SquadIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void TransmogItem(FString TransmogKeyTemplateId, const FString[] SacrificeItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void StartPrimaryMission(const FortQuestObjectiveCompletion[] Advance, FString MatchmakingSessionId, FString MissionName, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void StartExpedition(FString ExpeditionId, FString SquadId, const FString[] ItemIds, const int[] SlotIndices, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SlotItemInCollectionBook(FString ItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SkipTutorial(out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetLoadoutName(FString LoadoutName, FString LoadoutId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetHeroCosmeticVariants(FString HeroItem, const McpVariantReader[] OutfitVariants, const McpVariantReader[] BackblingVariants, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetGameplayStats(const FortPersistentGameplayStatValue[] GameplayStats, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetActiveHeroLoadout(FString SelectedLoadout, out ClientUrlContext Context);// 0xffffff8d0733b000
	void RespecUpgrades(out ClientUrlContext Context);// 0xffffff8d0733b000
	void RespecResearch(out ClientUrlContext Context);// 0xffffff8d0733b000
	void RespecAlteration(FString TargetItemId, int AlterationSlot, FString AlterationId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ResearchItemFromCollectionBook(FString TemplateId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void RefundItem(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void RefreshExpeditions(out ClientUrlContext Context);// 0xffffff8d0733b000
	void RecycleItemBatch(const FString[] TargetItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void RecycleItem(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void PurchaseResearchStatUpgrade(FString StatId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void PurchaseOrUpgradeHomebaseNode(FString NodeId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void PromoteItem(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void PopulatePrerolledOffers(out ClientUrlContext Context);// 0xffffff8d0733b000
	void OverrideMissionRewardLootTierGroup(FString MatchmakingSessionId, FString OverrideRewardTag, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void OverrideMissionRewardLootLevel(FString MatchmakingSessionId, int OverrideLootLevel, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void OpenCardPackBatch(const FString[] CardPackItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void OpenCardPack(FString CardPackItemId, int SelectionIdx, out ClientUrlContext Context);// 0xffffff8d0733b000
	void OnDifferentHeroLoadoutActivated__DelegateSignature(FortMcpProfileCampaign* Profile);// 0xbbc0600
	void ModifyMission(FString MatchmakingSessionId, FString Difficulty, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	FortCampaignHeroLoadoutItem*[] GetOrderedHeroLoadoutItems();// 0xd08c618
	void GetCurrentHeroLoadoutItem(out FortCampaignHeroLoadoutItem* OutCampaignHeroLoadoutItem);// 0xd08c564
	void FailsafeSaveMissionResults(const EndZoneScoreAndAwards PlayerScoreData, FString MatchmakingSessionId, FString MissionName, FString MissionStatus, int DifficultyIncreaseTier, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void EquipCampaignCustomization(enum SlotName, FString ItemToSlot, int IndexWithinSlot, out ClientUrlContext Context);// 0xffffff8d0733b000
	void EndPrimaryMission(const FortQuestObjectiveCompletion[] Advance, FString MatchmakingSessionId, FString MissionName, FString MissionStatus, const FortQuestEarnedBadgeData[] EarnedBadgeData, const FString[] EarnedItemCaches, int DifficultyIncreaseTier, int NumMissionPoints, bool bCriticalMatchBonus, const FString[] ShuffledLoadoutUsed, int ShuffledLockerUsedIndex, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void EndMatch(const AccountIdAndMatchEndData[] PlayersAndMatchEndData, FString MatchmakingSessionId, FString MissionName, FString MissionStatus, int DifficultyIncreaseTier, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void EarnScore(const AccountIdAndScore[] PlayersAndScores, FString MatchmakingSessionId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void ConvertLegacyAlterations(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ConvertItem(FString TargetItemId, int ConversionIndex, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ConsumeItems(const FString[] ItemsToConsumeIds, const int[] ItemCountsToConsume, FString ConsumeReason, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void CollectExpedition(FString ExpeditionTemplate, FString ExpeditionId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClearHeroLoadout(FString LoadoutId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimMissionAlertRewards(out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimLoginReward(out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimDifficultyIncreaseRewards(out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimCollectionBookRewards(int RequiredXp, int SelectedRewardIndex, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimCollectedResources(const FString[] CollectorsToClaim, out ClientUrlContext Context);// 0xffffff8d0733b000
	void AssignWorkerToSquadBatch(const FString[] CharacterIds, const FString[] SquadIds, const int[] SlotIndices, out ClientUrlContext Context);// 0xffffff8d0733b000
	void AssignWorkerToSquad(FString CharacterId, FString SquadId, int SlotIndex, out ClientUrlContext Context);// 0xffffff8d0733b000
	void AssignTeamPerkToLoadout(FString TeamPerkId, FString LoadoutId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void AssignHeroToLoadout(FString HeroId, FString LoadoutId, FString SlotName, out ClientUrlContext Context);// 0xffffff8d0733b000
	void AssignGadgetToLoadout(FString GadgetId, FString LoadoutId, int SlotIndex, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ApplyAlteration(FString TargetItemId, FString AlterationItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ActivateConsumable(FString TargetItemId, FString TargetAccountId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void AbandonExpedition(FString ExpeditionId, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpProfileSubgame.FortMcpProfile.McpProfile.Object
	FortCosmeticLockerItem*[] LoadoutLockerItems;//[Offset: 0x2b8, Size: 16]
	FortCosmeticLockerItem* LastAppliedLoadout;//[Offset: 0x2c8, Size: 8]
	FortSubgameClientSettings CachedClientSettings;//[Offset: 0x2d0, Size: 16]
	void UpdateQuests(const FortQuestObjectiveCompletion[] Advance, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void UpdateQuestClientObjectives(const FortQuestObjectiveCompletion[] Advance, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetRandomCosmeticLoadoutFlag(bool Random, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetPinnedQuests(const FString[] PinnedQuestIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetItemFavoriteStatusBatch(const FString[] ItemIds, const bool[] itemFavStatus, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetItemFavoriteStatus(FString TargetItemId, bool bFavorite, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetCosmeticLockerSlots(FString LockerItem, const FortAthenaLoadoutData[] LoadoutData, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetCosmeticLockerSlot(FString LockerItem, enum Category, FString ItemToSlot, int SlotIndex, const McpVariantReader[] VariantUpdates, int OptLockerUseCountOverride, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetCosmeticLockerName(FString LockerItem, FString Name, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetCosmeticLockerBanner(FString LockerItem, FString BannerIconTemplateName, FString BannerColorTemplateName, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ServerQuestLogin(FString MatchmakingSessionId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void MarkNewQuestNotificationSent(const FString[] ItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void FortRerollDailyQuest(FString QuestId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void DeleteCosmeticLoadout(int Index, int FallbackLoadoutIndex, bool leaveNullSlot, out ClientUrlContext Context);// 0xffffff8d0733b000
	void CopyCosmeticLoadout(int SourceIndex, int TargetIndex, FString OptNewNameForTarget, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClientQuestLogin(out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimQuestReward(FString QuestId, int SelectedRewardIndex, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpProfile.McpProfile.Object
	void RemoveGiftBox(const FString[] GiftBoxItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void MarkItemSeen(const FString[] ItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: McpProfile.Object
	bool AllowSubscriptionToNotificationsService;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString DebugName;//[Offset: 0x80, Size: 16]
	bool bProfileLockOperationPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool bProfileUnlockOperationPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]
	bool bEnableMocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 1]
	McpProfileGroup* ProfileGroup;//[Offset: 0xa8, Size: 8]
	FString ProfileId;//[Offset: 0xb0, Size: 16]
	int64 ProfileRevision;//[Offset: 0xc0, Size: 8]
	int FullProfileQueryQueued;//[Offset: 0xc8, Size: 4]
	bool bProfileWriteLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	DateTime ProfileWriteLockExpireTime;//[Offset: 0xd0, Size: 8]
	void UnlockProfileForWrite(FString Code, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void QueryPublicProfile(out BaseUrlContext Context);// 0xffffff8d0733b000
	void QueryProfile(out BaseUrlContext Context);// 0xffffff8d0733b000
	void LockProfileForWrite(FString Code, int Timeout, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void DeleteProfile(out ClientUrlContext Context);// 0xffffff8d0733b000
	void DeleteAllProfiles(out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: ClientUrlContext.BaseUrlContext

--------------------------------
Class: BaseUrlContext

--------------------------------
Class: DedicatedServerUrlContext.BaseUrlContext

--------------------------------
Class: FortQuestObjectiveCompletion
	FString StatName;//[Offset: 0x0, Size: 16]
	int Count;//[Offset: 0x10, Size: 4]
	int TimestampOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: McpVariantReader
	FString Channel;//[Offset: 0x0, Size: 16]
	FString Active;//[Offset: 0x10, Size: 16]
	FString[] Owned;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortPersistentGameplayStatValue
	FString StatName;//[Offset: 0x0, Size: 16]
	int StatValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortAthenaLoadoutData
	enum SlotName;//[Offset: 0x0, Size: 1]
	FString ItemToSlot;//[Offset: 0x8, Size: 16]
	int IndexWithinSlot;//[Offset: 0x18, Size: 4]

--------------------------------
Class: McpProfileGroup.Object
	int DelayMcpResults;//[Offset: 0xdc, Size: 4]
	int WeeklyIntervalStartDay;//[Offset: 0xe0, Size: 4]
	ProfileEntry[] ProfileList;//[Offset: 0xe8, Size: 16]
	FString PlayerName;//[Offset: 0x100, Size: 16]
	bool bIsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	FString ProfileNotificationsStompTopic;//[Offset: 0x118, Size: 16]
	FString LastMcpVersion;//[Offset: 0x168, Size: 16]
	FString LastContentVersion;//[Offset: 0x178, Size: 16]
	FString LastMinBuild;//[Offset: 0x188, Size: 16]
	Timespan LocalTimeOffset;//[Offset: 0x198, Size: 8]
	FString LockCode;//[Offset: 0x1a8, Size: 16]
	McpProfile*[] LockedProfiles;//[Offset: 0x1b8, Size: 16]
	FString LockedProfilesString;//[Offset: 0x1c8, Size: 16]
	int ProfileWriteLockTimeoutSecs;//[Offset: 0x1d8, Size: 4]
	bool bSubscribedToNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	FString ApplyStashEndPoint;//[Offset: 0x1e0, Size: 16]
	bool bSendProfileCommandRevisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bAsyncParseProfileUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	int MaxChangesToForwardInUpdate;//[Offset: 0x250, Size: 4]
	int NewItemLogThreshold;//[Offset: 0x254, Size: 4]

--------------------------------
Class: ProfileEntry
	FString ProfileId;//[Offset: 0x0, Size: 16]
	McpProfile* ProfileObject;//[Offset: 0x10, Size: 8]
	bool bWaitingForRefreshAllProfilesResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bForwardUpdatesToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]

--------------------------------
Class: Timespan

--------------------------------
Class: DateTime

--------------------------------
Class: FortCosmeticLockerItem.FortProfileItem.FortPersistableItem.FortItem.Object
	FString locker_name;//[Offset: 0xb8, Size: 16]
	FString banner_icon_template;//[Offset: 0xc8, Size: 16]
	FString banner_color_template;//[Offset: 0xd8, Size: 16]
	int use_count;//[Offset: 0xe8, Size: 4]
	FortCosmeticLockerSlotData locker_slots_data;//[Offset: 0xf0, Size: 80]
	static bool IsValidLockerName(World* ContextWorld, FString Candidate);// 0xcfa6790

--------------------------------
Class: FortProfileItem.FortPersistableItem.FortItem.Object
	bool item_seen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 1]
	bool favorite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb5, Size: 1]
	void MarkItemAsSeen();// 0xd1a49fc

--------------------------------
Class: FortPersistableItem.FortItem.Object
	FortPersistableItemDefinition* ItemDefinition;//[Offset: 0x88, Size: 8]
	FString InstanceID;//[Offset: 0x90, Size: 16]
	FString TemplateId;//[Offset: 0xa0, Size: 16]
	int Quantity;//[Offset: 0xb0, Size: 4]
	bool bIsLocalOnlyItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]

--------------------------------
Class: FortCosmeticLockerSlotData
	<enum,FortCosmeticLockerSlots> Slots;//[Offset: 0x0, Size: 80]

--------------------------------
Class: FortCosmeticLockerSlots
	FString[] Items;//[Offset: 0x0, Size: 16]
	FortCosmeticLockerSlotsActiveVariants[] ActiveVariants;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortCosmeticLockerSlotsActiveVariants
	McpVariantReader[] Variants;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortSubgameClientSettings
	FString[] PinnedQuestInstances;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortCampaignHeroLoadoutItem.FortProfileItem.FortPersistableItem.FortItem.Object
	FString loadout_name;//[Offset: 0xb8, Size: 16]
	int loadout_index;//[Offset: 0xc8, Size: 4]
	<FString,FString> crew_members;//[Offset: 0xd0, Size: 80]
	FilledGadgetSlot[] Gadgets;//[Offset: 0x120, Size: 16]
	FString team_perk;//[Offset: 0x130, Size: 16]
	<FName,FString> CrewMembers;//[Offset: 0x140, Size: 80]
	bool IsTeamPerkProgressive();// 0xcf449a8
	bool IsTeamPerkActive();// 0xcf44970
	int GetTeamPerkMaxActivationLevel();// 0xcf4493c
	FortTeamPerkItemDefinition* GetTeamPerkItemDefinition();// 0xcf44908
	int GetTeamPerkActivationLevelAndSatisfyingSlotIndices(out int[] OutSatisfyingSlotIndices);// 0xcf44840
	int GetTeamPerkActivationLevel();// 0xcf4480c
	FortTeamPerkItem* GetTeamPerk();// 0xcf447d8
	void GetSupportHeroesAndSupportSlotIndices(out FortHero*[] OutHeroes, out int[] OutSupportSlotIndices);// 0xcf446bc
	void GetSupportHeroes(out FortHero*[] OutHeroes);// 0xcf445fc
	FName GetSlotNameByHero(const FortHero* Hero);// 0xcf4454c
	int GetLoadoutOrdinal();// 0xcf4452c
	void GetHeroesBySlotTag(out const GameplayTagQuery TagQuery, out FortHero*[] OutHeroes);// 0xcf443e8
	void GetHeroes(out FortHero*[] OutHeroes);// 0xcf44328
	FortHero* GetHeroBySlotName(out const FName SlotName);// 0xcf4426c
	FortGadgetItemDefinition* GetGadgetDefinitionBySlotIndex(const int SlotIndex);// 0xcf441bc
	FortHero* GetCommanderHero();// 0xcf44188

--------------------------------
Class: FilledGadgetSlot
	FString Gadget;//[Offset: 0x0, Size: 16]
	int slot_index;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortTeamPerkItemDefinition.FortProfileItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortAbilityKit* GrantedAbilityKit;//[Offset: 0x360, Size: 40]
	bool bProgressiveBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	GameplayTagQuery RequiredCommanderTagQuery;//[Offset: 0x390, Size: 72]
	FText CommanderRequirementsText;//[Offset: 0x3d8, Size: 24]
	FortTeamPerkLoadoutCondition[] TeamPerkLoadoutConditions;//[Offset: 0x3f0, Size: 16]
	bool HasProgressiveBonus();// 0xd1e2250
	FortAbilityKit* GetAbilityKitBP();// 0xd1e2210

--------------------------------
Class: FortProfileItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bCanBeFavorite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bCanBeMarkedSeen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	FString GrantToProfileType;//[Offset: 0x350, Size: 16]

--------------------------------
Class: FortAbilityKit.FortAbilitySet.PrimaryDataAsset.DataAsset.Object
	FText DisplayName;//[Offset: 0xd0, Size: 24]
	FText[] Description;//[Offset: 0xe8, Size: 16]
	FText TooltipDescription;//[Offset: 0xf8, Size: 24]
	SlateBrush IconBrush;//[Offset: 0x110, Size: 136]
	SlateBrush PrimaryTraitIconBrushOverride;//[Offset: 0x198, Size: 136]
	FortGadgetItemDefinition*[] Gadgets;//[Offset: 0x220, Size: 16]
	AbilityKitItem[] Items;//[Offset: 0x230, Size: 16]
	FortSchematicItemDefinition*[] AddedSchematics;//[Offset: 0x240, Size: 16]
	FortSchematicItemDefinition*[] RemovedSchematics;//[Offset: 0x250, Size: 16]
	class FortTooltip* ToolTip;//[Offset: 0x260, Size: 8]
	class FortTooltip* SummaryTooltip;//[Offset: 0x268, Size: 8]
	FortTooltipDisplayStatsList* StatList;//[Offset: 0x270, Size: 8]
	FText[] GetDescription(const Object* WorldContextObject, bool bFindSummaryTooltip);// 0xce91908
	void BP_GetGadgets(out FortGadgetItemDefinition*[] GadgetItemDefinitions);// 0xce91848

--------------------------------
Class: FortAbilitySet.PrimaryDataAsset.DataAsset.Object
	class FortGameplayAbility[] GameplayAbilities;//[Offset: 0x38, Size: 16]
	GameplayEffectApplicationInfoHard[] GrantedGameplayEffects;//[Offset: 0x48, Size: 16]
	bool bUsePrimaryInputComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bShouldHotbarKeysForceExitBuildMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	GameplayTag AbilityActivatedByInputKeyTag;//[Offset: 0x5c, Size: 8]
	GameplayTag AbilityActivatedByInputTag;//[Offset: 0x64, Size: 8]
	GameplayTag AbilityActivatedByInputCooldownTag;//[Offset: 0x6c, Size: 8]
	AbilityActivatedByInputData[] AbilitiesActivatedByInput;//[Offset: 0x78, Size: 16]
	FortItemDefinition*[] AdditionalItemsToAdd;//[Offset: 0x88, Size: 16]
	GameplayEffectApplicationInfo[] PassiveGameplayEffects;//[Offset: 0x98, Size: 16]
	GameplayTagContainer AnalyticsTags;//[Offset: 0xa8, Size: 32]

--------------------------------
Class: GameplayEffectApplicationInfoHard
	class GameplayEffect* GameplayEffect;//[Offset: 0x0, Size: 8]
	float Level;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AbilityActivatedByInputData
	class FortGameplayAbility* Ability;//[Offset: 0x0, Size: 8]
	GameplayTagQuery ActivationTagQuery;//[Offset: 0x8, Size: 72]

--------------------------------
Class: GameplayEffectApplicationInfo
	class GameplayEffect* GameplayEffect;//[Offset: 0x0, Size: 40]
	float Level;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortGadgetItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	int GadgetPriority;//[Offset: 0x7a8, Size: 4]
	bool bDestroyGadgetWhenTrackedAttributesIsZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ac, Size: 1]
	bool bHasChargeUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ac, Size: 1]
	bool bDropAllOnEquip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ac, Size: 1]
	bool bCanChangePreviewImageDuringGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ac, Size: 1]
	CustomCharacterPart*[] CharacterParts;//[Offset: 0x7b0, Size: 16]
	GameplayTagContainer SkinMetaTagsToSkip;//[Offset: 0x7c0, Size: 32]
	GameplayTag PartSwapTag;//[Offset: 0x7e0, Size: 8]
	CharacterPartsExtraSpecial[] CharacterPartsExtraSpecial;//[Offset: 0x7e8, Size: 16]
	class FortAnimInstance* AnimBPOverride;//[Offset: 0x7f8, Size: 40]
	FortFootstepAudioBank* FootstepBankOverride;//[Offset: 0x820, Size: 40]
	FortAbilitySet* AbilitySet;//[Offset: 0x848, Size: 40]
	class AttributeSet* AttributeSet;//[Offset: 0x870, Size: 40]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x898, Size: 16]
	GameplayAttribute[] TrackedAttributes;//[Offset: 0x8a8, Size: 16]
	ParticleSystem* OnDestroyParticleSystem;//[Offset: 0x8b8, Size: 40]
	SoundBase* OnDestroySound;//[Offset: 0x8e0, Size: 40]
	FName OnDestroyAttachToSocketName;//[Offset: 0x908, Size: 8]
	class FortGameplayAbility* GameplayAbility;//[Offset: 0x910, Size: 40]
	GameplayTagContainer HUDVisibilityTags;//[Offset: 0x938, Size: 32]
	FortWeaponItemDefinition* WeaponItemDefinition;//[Offset: 0x958, Size: 40]
	FortItemDefinition*[] AdditionalItemsToLoadWhenEquipped;//[Offset: 0x980, Size: 16]
	bool bValidForLastEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	GameplayAttribute LevelAttribute;//[Offset: 0x998, Size: 56]
	DataTableRowHandle DamageStatHandle;//[Offset: 0x9d0, Size: 16]
	FString NodeId;//[Offset: 0x9e0, Size: 16]
	bool HasTrackedAttributes();// 0xcfe1674
	bool HasChargeUp();// 0xcfe163c
	FortWeaponItemDefinition* GetWeaponItemDefinition();// 0xcfe1608
	GameplayAttribute GetLevelAttribute();// 0xcfe1588
	class FortGameplayAbility GetGameplayAbility();// 0xcfe1554

--------------------------------
Class: CustomCharacterPart.PrimaryDataAsset.DataAsset.Object
	byte GenderPermitted;//[Offset: 0x38, Size: 1]
	byte BodyTypesPermitted;//[Offset: 0x39, Size: 1]
	byte CharacterPartType;//[Offset: 0x3a, Size: 1]
	GameplayTagContainer BoneSetsToHide;//[Offset: 0x40, Size: 32]
	bool bShouldHideBonesForThisPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	GameplayTagContainer GameplayTags;//[Offset: 0x68, Size: 32]
	GameplayTagContainer DisallowedCosmeticTags;//[Offset: 0x88, Size: 32]
	bool bGameplayRelevantCosmeticPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bAttachToSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	bool bIgnorePart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 1]
	class Actor* PartModifierBlueprint;//[Offset: 0xb0, Size: 40]
	CustomCharacterPartData* AdditionalData;//[Offset: 0xd8, Size: 8]
	FortMontageLookupTable* DefaultMontageLookupTable;//[Offset: 0xe0, Size: 40]
	FortMontageLookupTable* OverrideMontageLookupTable;//[Offset: 0x108, Size: 40]
	AnimMontage* FrontendAnimMontageIdleOverride;//[Offset: 0x130, Size: 40]
	float FrontEndBackPreviewRotationOffset;//[Offset: 0x158, Size: 4]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x160, Size: 40]
	SkeletalMesh*[] MasterSkeletalMeshes;//[Offset: 0x188, Size: 16]
	bool bSinglePieceMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bSupportsColorSwatches;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool bAllowStaticRenderPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	CustomPartMaterialOverrideData[] MaterialOverrides;//[Offset: 0x1a0, Size: 16]
	CustomPartTextureParameter[] TextureParameters;//[Offset: 0x1b0, Size: 16]
	CustomPartScalarParameter[] ScalarParameters;//[Offset: 0x1c0, Size: 16]
	CustomPartVectorParameter[] VectorParameters;//[Offset: 0x1d0, Size: 16]
	int[] IgnoredMaterialOverrideIndices;//[Offset: 0x1e0, Size: 16]
	class SoundLibrary[] FoleyLibraries;//[Offset: 0x1f0, Size: 16]
	int MaterialOverrideFlags;//[Offset: 0x200, Size: 4]
	int IgnoredMaterialOverrideFlags;//[Offset: 0x204, Size: 4]
	ParticleSystem* IdleEffect;//[Offset: 0x208, Size: 40]
	NiagaraSystem* IdleEffectNiagara;//[Offset: 0x230, Size: 40]
	FName IdleFXSocketName;//[Offset: 0x258, Size: 8]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	MarshalledVFX_AuthoredDataConfig* AuthoredData;//[Offset: 0x268, Size: 8]
	SkeletalMesh* GetSkeletalMesh();// 0xce8399c
	<int,MaterialInterface*> GetMaterialOverridesByIndex();// 0xce8391c

--------------------------------
Class: CustomCharacterPartData.Object

--------------------------------
Class: FortMontageLookupTable.PrimaryDataAsset.DataAsset.Object
	MontageLookupData[] MontageLookupDataArray;//[Offset: 0x30, Size: 16]

--------------------------------
Class: MontageLookupData
	GameplayTagContainer GameplayTags;//[Offset: 0x0, Size: 32]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 40]

--------------------------------
Class: CustomPartMaterialOverrideData
	int MaterialOverrideIndex;//[Offset: 0x0, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CustomPartTextureParameter
	int MaterialIndexForTextureParameter;//[Offset: 0x0, Size: 4]
	FName TextureParameterNameForMaterial;//[Offset: 0x4, Size: 8]
	Texture* TextureOverride;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CustomPartScalarParameter
	int MaterialIndexForScalarParameter;//[Offset: 0x0, Size: 4]
	FName ScalarParameterNameForMaterial;//[Offset: 0x4, Size: 8]
	float ScalarOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CustomPartVectorParameter
	int MaterialIndexForVectorParameter;//[Offset: 0x0, Size: 4]
	FName VectorParameterNameForMaterial;//[Offset: 0x4, Size: 8]
	LinearColor VectorOverride;//[Offset: 0xc, Size: 16]

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33, Size: 1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 8]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 16]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 16]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 16]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 16]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 8]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 8]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 536]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 200]
	Box FixedBounds;//[Offset: 0x388, Size: 28]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float WarmupTime;//[Offset: 0x3a8, Size: 4]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 4]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 4]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 16]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 4]
	enum CullReaction;//[Offset: 0x2c, Size: 4]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 8]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 16]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 16]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 16]
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x70, Size: 8]
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x78, Size: 16]
	GUID PerfBaselineVersion;//[Offset: 0x88, Size: 16]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 48]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	float MaxDistance;//[Offset: 0x34, Size: 4]
	int MaxInstances;//[Offset: 0x38, Size: 4]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 4]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 4]
	float MaxGlobalBudgetUsage;//[Offset: 0x44, Size: 4]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 4]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 16]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 16]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 8]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 4]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 4]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 8]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int MinInt;//[Offset: 0xc, Size: 4]
	int MaxInt;//[Offset: 0x10, Size: 4]
	float MinFloat;//[Offset: 0x14, Size: 4]
	float MaxFloat;//[Offset: 0x18, Size: 4]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 48]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float SpawnCountScale;//[Offset: 0x34, Size: 4]

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 4]
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 8]
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 8]
	NiagaraSystem* System;//[Offset: 0x40, Size: 40]
	bool OnTickTest();// 0x7a912a0
	void OnOwnerTick(float DeltaTime);// 0x7a9113c
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0x7a911ec
	void OnBeginTest();// 0x7a912e0
	NiagaraSystem* GetSystem();// 0x7a91108

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 4]
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 4]
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 4]
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 4]

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x220, Size: 8]
	TextRenderComponent* Label;//[Offset: 0x228, Size: 8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x440, Size: 24]
	MaterialInterface* TextMaterial;//[Offset: 0x458, Size: 8]
	Font* Font;//[Offset: 0x460, Size: 8]
	byte HorizontalAlignment;//[Offset: 0x468, Size: 1]
	byte VerticalAlignment;//[Offset: 0x469, Size: 1]
	Color TextRenderColor;//[Offset: 0x46c, Size: 4]
	float XScale;//[Offset: 0x470, Size: 4]
	float YScale;//[Offset: 0x474, Size: 4]
	float WorldSize;//[Offset: 0x478, Size: 4]
	float InvDefaultSize;//[Offset: 0x47c, Size: 4]
	float HorizSpacingAdjust;//[Offset: 0x480, Size: 4]
	float VertSpacingAdjust;//[Offset: 0x484, Size: 4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 1]
	void SetYScale(float Value);// 0xd90145c
	void SetXScale(float Value);// 0xd9013b4
	void SetWorldSize(float Value);// 0xd90130c
	void SetVertSpacingAdjust(float Value);// 0xd901264
	void SetVerticalAlignment(byte Value);// 0xd9011bc
	void SetTextRenderColor(Color Value);// 0xd901118
	void SetTextMaterial(MaterialInterface* Material);// 0xd901070
	void SetText(FString Value);// 0xd900fbc
	void SetHorizSpacingAdjust(float Value);// 0xd900f14
	void SetHorizontalAlignment(byte Value);// 0xd900e6c
	void SetFont(Font* Value);// 0xd900dc4
	void K2_SetText(out const FText Value);// 0xd900cb4
	Vector GetTextWorldSize();// 0xd900c7c
	Vector GetTextLocalSize();// 0xd900c44

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool bOverrideGlobalBudgetCullingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NiagaraEmitterHandle
	GUID ID;//[Offset: 0x0, Size: 16]
	FName IdName;//[Offset: 0x10, Size: 8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FName Name;//[Offset: 0x1c, Size: 8]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 8]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	int RandomSeed;//[Offset: 0x2c, Size: 4]
	enum AllocationMode;//[Offset: 0x30, Size: 1]
	int PreAllocationCount;//[Offset: 0x34, Size: 4]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 40]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 40]
	enum SimTarget;//[Offset: 0x88, Size: 1]
	Box FixedBounds;//[Offset: 0x8c, Size: 28]
	int MinDetailLevel;//[Offset: 0xa8, Size: 4]
	int MaxDetailLevel;//[Offset: 0xac, Size: 4]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 20]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 48]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 16]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 4]
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 4]
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 4]
	<uint32> SpawnStages;//[Offset: 0x118, Size: 80]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 16]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 16]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 16]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 16]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 8]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 16]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 8]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 16]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 16]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 1]
	GUID UsageId;//[Offset: 0x2c, Size: 16]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 120]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 152]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 16]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 88]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1c8, Size: 240]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x2b8, Size: 16]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2c8, Size: 16]
	void RaiseOnGPUCompilationComplete();// 0x7a9774c

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 8]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 16]
	byte[] ParameterData;//[Offset: 0x20, Size: 16]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 16]
	Object*[] UObjects;//[Offset: 0x40, Size: 16]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 4]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 8]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 4]
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 4]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 16]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 2]
	uint16 DestOffset;//[Offset: 0x2, Size: 2]
	uint16 SrcSize;//[Offset: 0x4, Size: 2]
	uint16 DestSize;//[Offset: 0x6, Size: 2]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 32]
	int SrcOffset;//[Offset: 0x20, Size: 4]
	int DestOffset;//[Offset: 0x24, Size: 4]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 16]

--------------------------------
Class: NiagaraVMExecutableDataId
	GUID CompilerVersionID;//[Offset: 0x0, Size: 16]
	enum ScriptUsageType;//[Offset: 0x10, Size: 1]
	GUID ScriptUsageTypeID;//[Offset: 0x14, Size: 16]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	GUID BaseScriptID;//[Offset: 0x28, Size: 16]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 16]
	GUID ScriptVersionID;//[Offset: 0x48, Size: 16]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 16]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 16]
	int NumTempRegisters;//[Offset: 0x20, Size: 4]
	int NumUserPtrs;//[Offset: 0x24, Size: 4]
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x28, Size: 16]
	byte[] ScriptLiterals;//[Offset: 0x38, Size: 16]
	NiagaraVariable[] Attributes;//[Offset: 0x48, Size: 16]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x58, Size: 1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x60, Size: 16]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x70, Size: 16]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x90, Size: 16]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xa0, Size: 16]
	NiagaraStatScope[] StatScopes;//[Offset: 0xb0, Size: 16]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xc0, Size: 16]
	enum LastCompileStatus;//[Offset: 0xd0, Size: 1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xd8, Size: 16]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 32]
	FString StringValue;//[Offset: 0x20, Size: 16]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	int UserPtrIdx;//[Offset: 0x8, Size: 4]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 16]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 8]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 8]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 8]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 2]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 8]
	FName OwnerName;//[Offset: 0x8, Size: 8]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 16]
	int NumOutputs;//[Offset: 0x20, Size: 4]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 16]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 8]
	FName Value;//[Offset: 0x8, Size: 8]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 8]
	enum Type;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 12]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 16]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 8]
	FName FriendlyName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 16]
	FString DIClassName;//[Offset: 0x10, Size: 16]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 16]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 8]
	FName IterationSource;//[Offset: 0x8, Size: 8]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 16]
	int MinStage;//[Offset: 0x28, Size: 4]
	int MaxStage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 8]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 16]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 8]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 8]
	GUID CompileId;//[Offset: 0x50, Size: 16]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 8]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 16]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 120]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x7a8fdec
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x7a8fce4
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x7a8fee8
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x7a8fae4
	void SetIntParameter(FString InVariableName, int InValue);// 0x7a8ffe0
	void SetFloatParameter(FString InVariableName, float InValue);// 0x7a900e0
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x7a8fbe8
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x7a901e0
	Vector GetVectorParameter(FString InVariableName);// 0x7a90528
	Vector4 GetVector4Parameter(FString InVariableName);// 0x7a90468
	Vector2D GetVector2DParameter(FString InVariableName);// 0x7a905e8
	Quat GetQuatParameter(FString InVariableName);// 0x7a903a8
	int GetIntParameter(FString InVariableName);// 0x7a906a4
	float GetFloatParameter(FString InVariableName);// 0x7a90760
	LinearColor GetColorParameter(FString InVariableName);// 0x7a902e8
	bool GetBoolParameter(FString InVariableName);// 0x7a9081c

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 8]
	FName Name;//[Offset: 0x8, Size: 8]
	int UserPtrIdx;//[Offset: 0x10, Size: 4]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 16]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 8]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 8]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 8]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 8]
	FName SourceEmitter;//[Offset: 0x10, Size: 8]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 4]
	FName ID;//[Offset: 0x4, Size: 8]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 64]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 16]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 16]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 12]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 4]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 4]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 4]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	enum SimTarget;//[Offset: 0x39, Size: 1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 4]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 4]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 4]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 96]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 16]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 16]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 16]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 16]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 16]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 16]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 4]
	float Medium;//[Offset: 0x4, Size: 4]
	float High;//[Offset: 0x8, Size: 4]
	float Epic;//[Offset: 0xc, Size: 4]
	float Cine;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 48]
	int SortOrderHint;//[Offset: 0x58, Size: 4]
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 4]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 4]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 4]
	GUID SourceEmitterID;//[Offset: 0x34, Size: 16]
	FName SourceEventName;//[Offset: 0x44, Size: 8]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 4]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 8]
	FName SimulationStageName;//[Offset: 0x30, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 120]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 64]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 64]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 64]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 32]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 32]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 32]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 16]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 32]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 32]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 32]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 16]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 16]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 16]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 4]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 80]

--------------------------------
Class: MarshalledVFX_AuthoredDataConfig.Object
	MarshalledVFXAuthoredData Data;//[Offset: 0x28, Size: 112]

--------------------------------
Class: MarshalledVFXAuthoredData
	MarshalledVFXData[] NiagaraVFX;//[Offset: 0x0, Size: 16]
	MarshalledVFXData[] CascadeVFX;//[Offset: 0x10, Size: 16]
	<FName,ParameterNameMapping> NameReplacements;//[Offset: 0x20, Size: 80]

--------------------------------
Class: MarshalledVFXData
	GameplayTagContainer ParameterGroups;//[Offset: 0x0, Size: 32]
	enum Type;//[Offset: 0x20, Size: 1]
	FXSystemAsset* Asset;//[Offset: 0x28, Size: 40]
	FName AttachAtBone;//[Offset: 0x50, Size: 8]
	Transform RelativeOffset;//[Offset: 0x60, Size: 48]
	GameplayTag EffectIdTag;//[Offset: 0x90, Size: 8]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: ParameterNameMapping
	FName CascadeName;//[Offset: 0x0, Size: 8]
	FName NiagaraName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CharacterPartsExtraSpecial
	CustomCharacterPart*[] CharacterPartsForExtraSpecial;//[Offset: 0x0, Size: 16]
	GameplayTagContainer SkinMetaTagsForExtraSpecial;//[Offset: 0x10, Size: 32]

--------------------------------
Class: FortAnimInstance.FortBaseAnimInstance.AnimInstance.Object
	bool bUpdateAllPawnProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float VelocityLerpAlpha;//[Offset: 0x354, Size: 4]
	Vector PawnVelocity;//[Offset: 0x358, Size: 12]
	float MinSpeed2DThreshold;//[Offset: 0x364, Size: 4]
	float PawnSpeed2D;//[Offset: 0x368, Size: 4]
	float PawnVelocityZ;//[Offset: 0x36c, Size: 4]
	float PawnMovementDirectionAzimuth;//[Offset: 0x370, Size: 4]
	float PawnMovementDirectionElevation;//[Offset: 0x374, Size: 4]
	Rotator PawnRotationRate;//[Offset: 0x378, Size: 12]
	Rotator PawnDeltaRotation;//[Offset: 0x384, Size: 12]
	Rotator PawnLastRotation;//[Offset: 0x390, Size: 12]
	Vector PawnLastLocation;//[Offset: 0x39c, Size: 12]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool bShouldPredictLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool bLandingPredicted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	float PredictedFallTimeLeft;//[Offset: 0x3ac, Size: 4]
	float FallLookAheadSubStepping;//[Offset: 0x3b0, Size: 4]
	int FallLookAheadMaxIterations;//[Offset: 0x3b4, Size: 4]
	bool bDebugLandPrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool bRecordJumpPositions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	bool bIsRecordingJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	int RecordJumpFrameCount;//[Offset: 0x3bc, Size: 4]
	Vector RecordJumpInitialJumpLocation;//[Offset: 0x3c0, Size: 12]
	float AimPitch;//[Offset: 0x3cc, Size: 4]
	float AimYaw;//[Offset: 0x3d0, Size: 4]
	float TimeForRecentlyFired;//[Offset: 0x3d4, Size: 4]
	float TimeToReachRelaxedLevel1;//[Offset: 0x3d8, Size: 4]
	float TimeToReachRelaxedLevel2;//[Offset: 0x3dc, Size: 4]
	float MinTimeAfterFiredBeforeWallRelaxed;//[Offset: 0x3e0, Size: 4]
	bool bRecentlyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bIsRelaxedLevel1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	bool bIsRelaxedLevel2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6, Size: 1]
	bool bIsWeaponLoweredNearWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e7, Size: 1]
	bool bExitedRelaxedThisUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool bLowerWeaponNearWallDuringTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	float RelaxedLevelTimeCounter;//[Offset: 0x3ec, Size: 4]
	float SavedWeaponLastFireTime;//[Offset: 0x3f0, Size: 4]
	enum RequestedRelaxedState;//[Offset: 0x3fc, Size: 1]
	bool bClothEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fd, Size: 1]
	bool bAnimDynamicsEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fd, Size: 1]
	bool bRigidBodyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3fd, Size: 1]
	bool bEnableAdditiveLayer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3fd, Size: 1]
	FortAIPawn* TryGetFortAIPawn();// 0xcec1220
	void StopMontageIncludingInactive(float InBlendOutTime, const AnimMontage* Montage);// 0xcec1138
	void GetPreviousFrameAimPitchAndYaw(out float OutPitch, out float OutYaw);// 0xcec1034
	enum GetCardinalDirectionFromAngle(float Angle, float DeadZoneAngle);// 0xcec0f48
	void AnimNotify_RightFootStep(const AnimNotify* Notify);// 0xb6122c4
	void AnimNotify_LeftFootStep(const AnimNotify* Notify);// 0xb61221c

--------------------------------
Class: FortBaseAnimInstance.AnimInstance.Object
	FortAnimInputEvent*[] AnimInputEventList;//[Offset: 0x2c0, Size: 16]
	<GameplayTag,BoneSet> BoneSets;//[Offset: 0x2d0, Size: 80]
	AnimTagProperty[] AnimPropertyGameplayTagBindings;//[Offset: 0x320, Size: 16]
	MulticastInlineDelegateProperty OnGameplayTagNotifyBegin;//[Size: 16]
	MulticastInlineDelegateProperty OnGameplayTagNotifyEnd;//[Size: 16]
	FortPawn* TryGetFortPawn();// 0xb63ce44
	void BlueprintProcessAnimInputEvent(const FortAnimInputEvent* AnimInputEvent);// 0xbbc0600

--------------------------------
Class: FortAIPawn.FortPawn.Character.Pawn.Actor.Object
	GameplayCueParameters DeimosBatchedGameplayCueParameters;//[Offset: 0x12b0, Size: 192]
	FortAIAttributeReplicationProxy AttributeReplicationProxy;//[Offset: 0x1370, Size: 8]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x1378, Size: 48]
	GameplayAbilityRepSharedAnim RepSharedAnimInfo;//[Offset: 0x13a8, Size: 16]
	MinimalGameplayCueReplicationProxy SimulatedProxyGameplayCues;//[Offset: 0x13c0, Size: 656]
	bool bAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1650, Size: 1]
	bool bDied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1650, Size: 1]
	bool bHitReact;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1650, Size: 1]
	bool bFullBodyHitReact;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1650, Size: 1]
	bool bDancing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1650, Size: 1]
	bool bRangedAttacking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1650, Size: 1]
	bool bHasGoalActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1650, Size: 1]
	bool bFrozen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1650, Size: 1]
	bool bUseSharedAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1651, Size: 1]
	bool bNeedsDeathNotification;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1651, Size: 1]
	bool bKilledOrDowned;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1651, Size: 1]
	bool bDespawnedDueToInactivity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1651, Size: 1]
	bool bNotifySpawnRift;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1651, Size: 1]
	bool bUsesDBNO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1651, Size: 1]
	bool bHasInventory;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1651, Size: 1]
	bool bShouldTossInventoryOnDeath;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1651, Size: 1]
	bool bUseDefenderInventoryManagement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1652, Size: 1]
	bool bIgnoreDefender;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1652, Size: 1]
	bool bTrackNearbyPickups;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1652, Size: 1]
	bool bIsCharging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1652, Size: 1]
	bool bIsCowering;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1652, Size: 1]
	bool bCanShowMinimapIndicator;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1652, Size: 1]
	bool bShowMinimapFarOffDirectionArrow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1652, Size: 1]
	bool bHasEngaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1652, Size: 1]
	bool bIsAlwaysGameplayRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1653, Size: 1]
	bool bIsDebugSpawnedAI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1653, Size: 1]
	bool bEncounterExpectedLifespanExpired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1653, Size: 1]
	bool bEnableBlockingCollisionWithOtherAI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1653, Size: 1]
	bool bSetMiniMapIconRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1653, Size: 1]
	bool bHasDroppedLoot;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1653, Size: 1]
	bool bUseFastAbilityReplication;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1653, Size: 1]
	bool bUseAIGoalComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1654, Size: 1]
	MinimalReplicationTagCountMap FastReplicationMinimalReplicationTags;//[Offset: 0x1658, Size: 96]
	MinimalGameplayCueReplicationProxy FastReplicationMinimalGameplayCueProxy;//[Offset: 0x16c0, Size: 656]
	MulticastInlineDelegateProperty OnInventoryInitialized;//[Size: 16]
	MulticastInlineDelegateProperty OnInventoryUpdated;//[Size: 16]
	float AIDifficultyLevel;//[Offset: 0x19a0, Size: 4]
	enum LevelRatingDisplayType;//[Offset: 0x19a4, Size: 1]
	FortAIEncounterInfo* EncounterInfo;//[Offset: 0x19a8, Size: 8]
	int SpawnSetIndex;//[Offset: 0x19b0, Size: 4]
	GUID SpawnGroupGuid;//[Offset: 0x19b4, Size: 16]
	int EnemyIndexInSpawnGroup;//[Offset: 0x19c4, Size: 4]
	float FinishEncounterSpawnFallbackTime;//[Offset: 0x19c8, Size: 4]
	float EncounterSpawnDisableRangedAttackingTime;//[Offset: 0x19cc, Size: 4]
	float EncounterSpawnDisableMeleeAttackingTime;//[Offset: 0x19d0, Size: 4]
	TimerHandle EncounterExpectedLifespanTimerHandle;//[Offset: 0x19d8, Size: 8]
	Actor* SpawnRift;//[Offset: 0x19e0, Size: 8]
	Vector SpawnRiftLocation;//[Offset: 0x19e8, Size: 12]
	Actor* SpawnSourceActor;//[Offset: 0x19f8, Size: 8]
	class AIGoalComponent* AIGoalComponentClass;//[Offset: 0x1a00, Size: 8]
	float MaxTimeAllowedOutsideTether;//[Offset: 0x1a08, Size: 4]
	BehaviorTree* BehaviorTree;//[Offset: 0x1a10, Size: 8]
	class NavigationQueryFilter* DefaultNavFilter;//[Offset: 0x1a18, Size: 8]
	class NavigationQueryFilter* HuntingNavFilter;//[Offset: 0x1a20, Size: 8]
	float DBNOInteractionDuration;//[Offset: 0x1a30, Size: 4]
	MulticastInlineDelegateProperty OnDowned;//[Size: 16]
	byte DBNOInteractionType;//[Offset: 0x1a48, Size: 1]
	byte MovementStyles;//[Offset: 0x1a49, Size: 1]
	float UpdateNearbyPickupFrequency;//[Offset: 0x1a50, Size: 4]
	GameplayTag RequiredWeaponPickupTag;//[Offset: 0x1a54, Size: 8]
	GameplayTagQuery RequiredWeaponPickupTagQuery;//[Offset: 0x1a60, Size: 72]
	bool bUsePickupDirectionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa8, Size: 1]
	Vector PickupDirectionOverride;//[Offset: 0x1aac, Size: 12]
	FName NoWeaponInCombatEventName;//[Offset: 0x1ab8, Size: 8]
	FName NoWeaponOutOfCombatEventName;//[Offset: 0x1ac0, Size: 8]
	Vector CachedHitLocation;//[Offset: 0x1ac8, Size: 12]
	GameplayTagContainer TurnTransitionGameplayAbilityTag;//[Offset: 0x1ad8, Size: 32]
	ParticleSystem* DeathParticles;//[Offset: 0x1af8, Size: 40]
	int NumRunVariations;//[Offset: 0x1b20, Size: 4]
	int CurrentRunVariationIndex;//[Offset: 0x1b24, Size: 4]
	float RunVariationRadius;//[Offset: 0x1b28, Size: 4]
	int EyeIndex;//[Offset: 0x1b2c, Size: 4]
	int SkinIndex;//[Offset: 0x1b30, Size: 4]
	LinearColor DefaultEyeColor;//[Offset: 0x1b34, Size: 16]
	float DefaultEyeBrightness;//[Offset: 0x1b44, Size: 4]
	LinearColor DefaultSkinColor;//[Offset: 0x1b48, Size: 16]
	float DefaultSkinGlow;//[Offset: 0x1b58, Size: 4]
	LinearColor MinimapDefaultIconColor;//[Offset: 0x1b5c, Size: 16]
	LinearColor PlayerManagerMinimapColor;//[Offset: 0x1b6c, Size: 16]
	SlateBrush MiniMapIconBrush;//[Offset: 0x1b90, Size: 136]
	SlateBrush MiniMapAboveBelowIconBrush;//[Offset: 0x1c18, Size: 136]
	MinimapGoalByTagColorsData[] MinimapGoalByTagColors;//[Offset: 0x1ca0, Size: 16]
	int8 MinimapGoalByTagColorIndex;//[Offset: 0x1cb0, Size: 1]
	FName AppearanceOverrideName;//[Offset: 0x1cb4, Size: 8]
	enum AppearanceOverrideGender;//[Offset: 0x1cbc, Size: 1]
	byte FollowPlayerEvent;//[Offset: 0x1cbd, Size: 1]
	byte InCombatNearPlayerEvent;//[Offset: 0x1cbe, Size: 1]
	byte InteractionType;//[Offset: 0x1cbf, Size: 1]
	float FollowPlayerRange;//[Offset: 0x1cc0, Size: 4]
	float InteractionDuration;//[Offset: 0x1cc4, Size: 4]
	FText InteractionText;//[Offset: 0x1cc8, Size: 24]
	byte SecondInteractionType;//[Offset: 0x1ce0, Size: 1]
	float SecondInteractionDuration;//[Offset: 0x1ce4, Size: 4]
	FText SecondInteractionText;//[Offset: 0x1ce8, Size: 24]
	MulticastInlineDelegateProperty OnInteraction;//[Size: 16]
	SoundBase* InteractionSound;//[Offset: 0x1d10, Size: 8]
	BuildingTrapDefender* DefenderTrap;//[Offset: 0x1d18, Size: 8]
	MulticastInlineDelegateProperty OnActorBeginCrowdOverlap;//[Size: 16]
	float DeepWaterImmersionDepth;//[Offset: 0x1d30, Size: 4]
	bool bDebugAI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d34, Size: 1]
	bool bDebugAIAnim;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d34, Size: 1]
	bool bUseBuildingAttackingHotspots;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d34, Size: 1]
	bool bCanBeLaunched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d34, Size: 1]
	bool bCanMoveThroughWalls;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d34, Size: 1]
	bool bCanUseNavWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d34, Size: 1]
	bool bCanUseSimpleCollisions;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d34, Size: 1]
	bool bCanUseStepAside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d35, Size: 1]
	bool bCanUseDoors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d35, Size: 1]
	bool bCanUseOpenedDoors;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d35, Size: 1]
	bool bCanUseShootingHotspots;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d35, Size: 1]
	bool bCanSleep;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d35, Size: 1]
	bool bIsSleeping;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d35, Size: 1]
	bool bShouldStartSleeping;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d35, Size: 1]
	bool bCanLookAtGoal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d35, Size: 1]
	bool bAllowServerCosmeticComponentOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d36, Size: 1]
	bool bAllowCapsuleComponentsOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d36, Size: 1]
	bool bRootComponentIgnoreQueryPawnCapsule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d36, Size: 1]
	bool bCanUseMeshPooling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d36, Size: 1]
	bool bUseCrowdSimulation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d36, Size: 1]
	bool bControlWalkingOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d36, Size: 1]
	bool bUseAppearanceOverride;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d37, Size: 1]
	bool bCanInteract;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d37, Size: 1]
	bool bHideHealthBar;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d37, Size: 1]
	bool bHasBuildingHitEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d38, Size: 1]
	bool bReplicateGrantedTagsWithFastAbilityReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d38, Size: 1]
	bool bReplicateGameplayCuesWithFastAbilityReplication;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d38, Size: 1]
	bool bOnlySkipAbilitySystemComponentWithFastAbilityReplication;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d38, Size: 1]
	byte MovementUrgency;//[Offset: 0x1d39, Size: 1]
	enum AIType;//[Offset: 0x1d3a, Size: 1]
	byte Team;//[Offset: 0x1d3b, Size: 1]
	FName SimpleCollisionsProfileName;//[Offset: 0x1d3c, Size: 8]
	FortAISpawnGroupUpgradeUIData UpgradeUIData;//[Offset: 0x1d48, Size: 128]
	SlateBrush CachedUpgradeUIDataUpgradeIconBrush;//[Offset: 0x1dc8, Size: 136]
	float ScoreMultiplier;//[Offset: 0x1e50, Size: 4]
	int OverriddenScore;//[Offset: 0x1e54, Size: 4]
	enum OverriddenScoreDistribution;//[Offset: 0x1e58, Size: 1]
	float LootDropConeHalfAngle;//[Offset: 0x1e5c, Size: 4]
	float LootDropSpeed;//[Offset: 0x1e60, Size: 4]
	float MinItemTossDist;//[Offset: 0x1e64, Size: 4]
	float MaxItemTossDist;//[Offset: 0x1e68, Size: 4]
	float ItemTossDirectionConeHalfAngle;//[Offset: 0x1e6c, Size: 4]
	enum HotspotType;//[Offset: 0x1e70, Size: 1]
	enum PartialPathUsage;//[Offset: 0x1e71, Size: 1]
	FortPlayerStateZone* PlayerManager;//[Offset: 0x1e78, Size: 8]
	FString DefenderItemInstanceId;//[Offset: 0x1e80, Size: 16]
	FName DefenderSquadId;//[Offset: 0x1e90, Size: 8]
	float DefenderPlacedTime;//[Offset: 0x1e98, Size: 4]
	float RecentlySeenInterval;//[Offset: 0x1e9c, Size: 4]
	Rotator CurrentAIRotationRate;//[Offset: 0x1ea0, Size: 12]
	float MoveSoundStimulusBroadcastInterval;//[Offset: 0x1eac, Size: 4]
	float MoveSoundStimulusMaxRange;//[Offset: 0x1eb0, Size: 4]
	bool bGenerateMoveSoundInAllMovementModes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb4, Size: 1]
	ShapeComponent* WeaponCollisionComponent;//[Offset: 0x1ec0, Size: 8]
	FortInventory* Inventory;//[Offset: 0x1ec8, Size: 8]
	FortPickup*[] NearbyPickups;//[Offset: 0x1ed0, Size: 16]
	<FortPickup*,float> UnreachablePickups;//[Offset: 0x1ee0, Size: 80]
	FortAIAppearanceOverrideEntry[] AppearanceOverrideEntries;//[Offset: 0x1f40, Size: 16]
	int AppearanceOverrideEntryIndex;//[Offset: 0x1f50, Size: 4]
	Vector SpawnLocation;//[Offset: 0x1f54, Size: 12]
	Rotator SpawnRotation;//[Offset: 0x1f60, Size: 12]
	BuildingActor* SleepingFloor;//[Offset: 0x1f6c, Size: 8]
	FName PelvisBoneName;//[Offset: 0x1f74, Size: 8]
	FName HeadBoneName;//[Offset: 0x1f7c, Size: 8]
	float MinimapIndicatorUpdateFrequency;//[Offset: 0x1f90, Size: 4]
	float MiniMapViewableDistance;//[Offset: 0x1fa0, Size: 4]
	float DistanceToPlayerManagerToShowHealthBar;//[Offset: 0x1fa4, Size: 4]
	float DistanceToOtherPlayersToShowHealthBar;//[Offset: 0x1fa8, Size: 4]
	FortAIAttributesSet* AttributesSet;//[Offset: 0x1fb8, Size: 8]
	FortCharacterAttrSet* CharacterAttrSet;//[Offset: 0x1fc0, Size: 8]
	FortWeaponAttrSet* WeaponAttrSet;//[Offset: 0x1fc8, Size: 8]
	SoundBase* ImpactPhysicalSurfaceSounds;//[Offset: 0x1fd0, Size: 8]
	ParticleSystem* ImpactPhysicalSurfaceEffects;//[Offset: 0x20a8, Size: 8]
	ScalableFloat AthenaRVOWeightOverride;//[Offset: 0x2180, Size: 40]
	FortSimpleMiniMapIndicator* MinimapIndicator;//[Offset: 0x21a8, Size: 8]
	Vector2D MinimapScale;//[Offset: 0x21b0, Size: 8]
	FortAbilitySet*[] DefaultGameplayAbilitySets;//[Offset: 0x21b8, Size: 16]
	FortAbilitySet*[] SpawnInheritedCharacterAbilitySets;//[Offset: 0x21c8, Size: 16]
	FortGameplayModifierItemDefinition*[] SpawnModifierDefinitions;//[Offset: 0x21d8, Size: 16]
	FortAbilitySystemComponent* AIPawnAbilitySystemComponent;//[Offset: 0x21e8, Size: 8]
	GameplayTagContainer WallAttackGameplayAbilityTags;//[Offset: 0x21f0, Size: 32]
	GameplayTagContainer WallRangedAttackGameplayAbilityTags;//[Offset: 0x2210, Size: 32]
	GameplayTagContainer CeilingAttackGameplayAbilityTags;//[Offset: 0x2230, Size: 32]
	GameplayTagContainer FloorAttackGameplayAbilityTags;//[Offset: 0x2250, Size: 32]
	GameplayTagContainer[] FailedAbilityQueryTags;//[Offset: 0x2270, Size: 16]
	Actor* CurrentAimTarget;//[Offset: 0x2280, Size: 8]
	FortNavObstacleComponent* NavObstacleComponent;//[Offset: 0x2288, Size: 8]
	float BuildingHitMaxDistanceToPlayer;//[Offset: 0x22a0, Size: 4]
	float BuildingHitMaxDistanceToHitLocation;//[Offset: 0x22a4, Size: 4]
	float HeadHeightPercent;//[Offset: 0x22a8, Size: 4]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0x22b0, Size: 104]
	bool bCanBeMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2318, Size: 1]
	FortAccountItem* DefenderItem;//[Offset: 0x2478, Size: 8]
	FortPawn* TetheredFollower;//[Offset: 0x2500, Size: 8]
	class FortCameraMode* TetheredCamera;//[Offset: 0x2518, Size: 8]
	class FortCameraMode* TetheredTargetingCamera;//[Offset: 0x2520, Size: 8]
	bool bIsTetheredBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2528, Size: 1]
	float TetherBoostMultiplier;//[Offset: 0x252c, Size: 4]
	float TetherJumpServerCorrectionIgnoreTime;//[Offset: 0x2530, Size: 4]
	float TetherJumpLastTime;//[Offset: 0x2534, Size: 4]
	class Actor* TetherBoundsXYSplineClass;//[Offset: 0x2538, Size: 8]
	SplineComponent* TetherBoundsXYSplineComponent;//[Offset: 0x2540, Size: 8]
	MulticastInlineDelegateProperty OnUpdateFromVehicleInput;//[Size: 16]
	FortAIPawnCustomizationDefinition* CustomizationsToLoad;//[Offset: 0x2560, Size: 8]
	bool bCanUnloadCustomization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2568, Size: 1]
	FortAIPawnCustomizationDefinition* UsedCustomization;//[Offset: 0x2570, Size: 8]
	MulticastInlineDelegateProperty OnCustomizationsLoadedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnCustomizationsUnloadedEvent;//[Size: 16]
	FortAIAssetLoader* AIAssetLoader;//[Offset: 0x2598, Size: 8]
	float UpdateMovementSoundIndicatorFrequency;//[Offset: 0x25a4, Size: 4]
	void TurnOnSleepingOptimizations();// 0xceb1f14
	void TriggerNoWeaponSpeech();// 0xceb1f00
	void ShowMapMarker();// 0xceb1eec
	bool ShouldUseFiringCapsuleCollision();// 0xceb1eac
	bool ShouldUpdateSkeletalMesh();// 0xceb1e6c
	bool ShouldApplyBuildingHitEffect(float Damage, Vector Location, HitResult HitInfo, bool bPlayerPlaced);// 0xceb1ca4
	void SetWeaponCollisionComponent(ShapeComponent* InWeaponCollisionComponent);// 0xb60c674
	void SetUsesDBNO(bool bInUsesDBNO);// 0xceb1bf4
	void SetSkinColor(LinearColor NewSkinColor, float NewSkinBrightness);// 0xceb1b04
	void SetShouldStartSleeping(bool bHintStartSleeping);// 0xceb1a54
	void SetOverridenScoreDistribution(const enum InOverriddenScoreDistribution);// 0xceb19ac
	void SetOverridenScore(int InOverriddenScore);// 0xceb1908
	void SetMovementUrgency(byte Urgency);// 0xceb1858
	void SetMinSignificanceForAnimationCurves(float MinSignificance);// 0xceb17b0
	void SetMinimumAILOD(enum MinimumAILOD);// 0xceb1708
	void SetMiniMapViewableDistance(float NewMinimapViewableDistance);// 0xceb1660
	void SetIsCharging(bool bNewIsCharging);// 0xceb15a8
	void SetForceBossSignificance(bool bEnabled);// 0xceb14f8
	void SetEyeColor(LinearColor NewEyeColor, float NewEyeBrightness);// 0xceb1408
	void SetEncounterInfo(FortAIEncounterInfo* InEncounterInfo);// 0xceb1360
	void SetDisplayName(out const FText Name);// 0xceb1250
	void SetDefenderTrap(BuildingTrapDefender* InDefenderTrap);// 0xceb11a8
	void SetCurrentAimTarget(Actor* AimTarget);// 0xceb1100
	void SetCollisionProfileName(FName InCollisionProfileName);// 0xceb1050
	void SetCanSleep(bool InCanSleep);// 0xceb0f8c
	void SetCanInteract(bool CanInteract);// 0xceb0ed4
	void SetBlockCollisionWithOtherAI(bool bInEnableBlockingCollisionWithOtherAI);// 0xceb0e24
	void SetAIType(enum InAIType);// 0xceb0d7c
	void SetAIRotationRate(out const Rotator AIRotationRate);// 0xceb0ccc
	void SetAIFocalPoint(Actor* FocusTarget, Vector FocalPoint, bool bUseAttackingPriority);// 0xceb0b9c
	void ReviveFromDBNO();// 0xceb0b88
	void ResetAIRotationRateToDefault();// 0xceb0b74
	void PlayAdditiveHitReactsNative(out const Vector HitDirection, AnimMontage* NewAnimMontage);// 0xceb0a80
	void OnWaterNavMeshExit();// 0xbbc0600
	void OnWaterNavMeshEnter();// 0xbbc0600
	void OnUpdateTetheredFollower(FortPawn* InTetheredFollower);// 0xbbc0600
	void OnUpdateFromVehicleInputEvent(float DeltaSeconds, out const FortAthenaVehicleInputState VehicleInputState);// 0xbbc0600
	void OnTetherRequestJump();// 0xbbc0600
	void OnTeamChanged();// 0xbbc0600
	void OnStartedEncounterSpawn();// 0xbbc0600
	void OnSleepingAIsFloorBuildingActorDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xceb0820
	void OnRep_UpgradeUIData();// 0xceb080c
	void OnRep_TetheredFollower();// 0xceb07f8
	void OnRep_SharedAnim();// 0xceb07e4
	void OnRep_ReplicatedAnimMontage();// 0xb60c660
	void OnRep_MinimapViewableDistance();// 0xceb07d0
	void OnRep_Inventory();// 0xceb07bc
	void OnRep_EnableBlockingCollisionWithOtherAI();// 0xceb07a8
	void OnRep_CustomizationsToLoad();// 0xceb0794
	void OnRep_CurrentAIRotationRate();// 0xceb0780
	void OnRep_CanInteract(bool bOldCanInteract);// 0xb60c5a8
	void OnRep_bIsSleeping();// 0xceb076c
	void OnRep_AttributeProxy();// 0xb60c594
	void OnRep_AppearanceOverrideEntryIndex();// 0xceb0758
	bool OnOutsideOfTetherBeyondMaxTimeAllowed();// 0xbbc0600
	Vector OnLaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xceb0604
	void OnFinishedEncounterSpawn();// 0xbbc0600
	void OnEndSleepEffects();// 0xbbc0600
	void OnEndDeepWaterInteraction(Vector PreviousWaterSurfaceLocation, float WaterDepth);// 0xbbc0600
	void OnEncounterSpawnEnableRangedAttacking();// 0xceb05f0
	void OnEncounterSpawnEnableMeleeAttacking();// 0xceb05dc
	void OnDefenderTrapSet(BuildingTrapDefender* OldDefenderTrap);// 0xbbc0600
	void OnCustomizationsUnloaded_BP();// 0xbbc0600
	void OnCustomizationsLoaded_BP();// 0xbbc0600
	void OnCheatUpdateSpecialEventGE(bool bShouldUseSpecialEventGE);// 0xbbc0600
	void OnBeginSleepEffects();// 0xbbc0600
	void OnBeginDeepWaterInteraction(Vector WaterSurfaceLocation, float WaterDepth);// 0xbbc0600
	void OnAppearanceOverridden();// 0xbbc0600
	void NetMulticast_OnTurn(float TurnAngle, float TurnRate);// 0xb60c4a8
	void NetMulticast_BatchedDamageCues(FortAIBatchedDamageCues Data);// 0xceb0510
	FortItem* K2_GetDefenderItem();// 0xceb04f4
	FortItem* K2_FindExistingItemForDefinition(const FortItemDefinition* ItemDefinition, bool bInStorageVault);// 0xceb03fc
	bool IsInsideTetherBounds(bool bUseRelaxedTetherBounds);// 0xceb0340
	bool IsInCombat();// 0xceb0308
	bool IsDefender();// 0xceb02b8
	void HideMapMarker();// 0xceb02a4
	bool HasTether();// 0xceb026c
	void GrabPickupCustomized(FortPickup* Pickup, float FlyTime);// 0xceb0184
	void GrabPickup(FortPickup* Pickup);// 0xceb00dc
	void GiveAmmo(const int AmmoQuantity);// 0xceb0034
	bool GetUsesDBNO();// 0xceafffc
	Rotator GetSpawnRotation();// 0xceaffd8
	int GetSpawnPointValue();// 0xceaffa4
	Vector GetSpawnLocation();// 0xceaff7c
	int GetScoreWithoutMutliplierValue();// 0xceaff48
	int GetScoreValue();// 0xceaff14
	enum GetScoreDistribution();// 0xceafee0
	static byte GetMovementUrgency(FortAIPawn* FortAIPawn);// 0xceafe38
	static byte GetMovementStyle(const FortAIPawn* FortAIPawn);// 0xceafd90
	FortItem* GetInventoryItem(GUID ItemGuid);// 0xceafce0
	SoundBase* GetImpactPhysicalSurfaceSound(out const HitResult Impact);// 0xceafc08
	static float GetGroundSpeedForUrgency(FortAIPawn* FortAIPawn, byte Urgency);// 0xceafb20
	float GetDifficultyRating();// 0xceafaec
	float GetDifficultyLevel();// 0xceafab8
	FString GetDefenderItemInstanceId();// 0xceaf9e4
	Actor* GetCurrentAimTarget();// 0xceaf9c8
	byte GetCharacterGender();// 0xceaf994
	void ForceKillNoDBNO();// 0xceaf980
	void FinishedEncounterSpawn();// 0xceaf96c
	void FastSharedReplication(const FortAISharedRepMovement SharedRepMovement);// 0xb60c3f4
	void DropAllItems(bool bSpawnPickups);// 0xceaf8bc
	void ClearAIFocalPoint(bool bUseAttackingPriority);// 0xceaf80c
	bool CanTetherJump();// 0xbbc0600
	bool CanHitTargetWithAbility(GameplayTagContainer GameplayAbilityTag, Actor* CanHitTarget, bool bUseIdealYawRotationToTarget);// 0xceaf67c
	bool BlueprintCanInteract(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted);// 0xceaf580
	void AddUnreachablePickup(FortPickup* Pickup);// 0xceaf4d8
	void AddFortAbilitySet(FortAbilitySet* FortAbilitySet);// 0xceaf430

--------------------------------
Class: FortAIAttributeReplicationProxy
	uint32 Health;//[Offset: 0x0, Size: 4]
	uint32 MaxHealth;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MinimalGameplayCueReplicationProxy
	AbilitySystemComponent* Owner;//[Offset: 0x280, Size: 8]

--------------------------------
Class: FortAIEncounterInfo.Object
	FortAISpawnGroupProgressionInfo* SpawnGroupProgressionInfo;//[Offset: 0x38, Size: 8]
	FortSpawnPointsPercentageCurveSequenceInstanceInfo SpawnPointsPercentageCurveSequence;//[Offset: 0x40, Size: 16]
	FortIntensityCurveSequenceInstanceInfo IntensityCurveSequence;//[Offset: 0x50, Size: 16]
	float BurstSpawnPointsPercentage;//[Offset: 0x60, Size: 4]
	float SpawnPointsMultiplier;//[Offset: 0x64, Size: 4]
	bool bUseBreathers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	CurveTableRowHandle LowPlayerPerformanceBreatherTimeSecondsCurve;//[Offset: 0x70, Size: 16]
	CurveTableRowHandle NormalPlayerPerformanceBreatherTimeSecondsCurve;//[Offset: 0x80, Size: 16]
	CurveTableRowHandle HighPlayerPerformanceBreatherTimeSecondsCurve;//[Offset: 0x90, Size: 16]
	float EncounterTimeSeconds;//[Offset: 0xa0, Size: 4]
	UtilityTypeFloatPair[] LockedUtilityValues;//[Offset: 0xa8, Size: 16]
	int NumFreeUtilities;//[Offset: 0xb8, Size: 4]
	float UtilityAdjustmentPeriodSeconds;//[Offset: 0xbc, Size: 4]
	float MinSpawnDistance;//[Offset: 0xc0, Size: 4]
	float MaxSpawnDistance;//[Offset: 0xc4, Size: 4]
	int NumDirections;//[Offset: 0xc8, Size: 4]
	bool bChangeDirectionsOnRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	float SpawnPointsPercentageLimit;//[Offset: 0xd0, Size: 4]
	int PawnNumberLimit;//[Offset: 0xd4, Size: 4]
	FortEncounterPawnNumberCaps PawnNumberCaps;//[Offset: 0xd8, Size: 24]
	float SpawningIntervalSeconds;//[Offset: 0xf0, Size: 4]
	float PreSpawnRequeryTime;//[Offset: 0xf4, Size: 4]
	FortEncounterSettingsFixedPace EncounterSettingsFixed;//[Offset: 0xf8, Size: 20]
	MulticastInlineDelegateProperty OnEncounterSpawnDirectionsChosen;//[Size: 16]
	float NextRiftReplacementTime;//[Offset: 0x120, Size: 4]
	float NextSpawningTime;//[Offset: 0x124, Size: 4]
	FortAIEncounterSpawnGroupCapsProfile EncounterSpawnGroupCapsProfile;//[Offset: 0x128, Size: 48]
	FortAIEncounterSpawnGroupCapsCategory[] AdditionalSpawnGroupCapsCategories;//[Offset: 0x158, Size: 16]
	FortAIEncounterSpawnPointsProfile EncounterSpawnPointsProfile;//[Offset: 0x168, Size: 64]
	FortAISpawnGroupUpgradeData[] AvailableUpgrades;//[Offset: 0x1a8, Size: 16]
	CurveTableRowHandle[] PawnDifficultyLevelModifiers;//[Offset: 0x1b8, Size: 16]
	FortAIBaseLootDropRow[] BaseLootDropRows;//[Offset: 0x1c8, Size: 16]
	FortAILootDropModifierRow[] LootDropModifierRows;//[Offset: 0x1d8, Size: 16]
	bool bRequiresReinitializationFromProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	CurveTableRowHandle DesiredHostilityCurve;//[Offset: 0x1f0, Size: 16]
	FortIntensityCurveSequenceProgression* IntensitySequenceProgression;//[Offset: 0x200, Size: 8]
	float AliveMultiplier;//[Offset: 0x278, Size: 4]
	byte SpawnLimitType;//[Offset: 0x27c, Size: 1]
	int SpawnLimit;//[Offset: 0x280, Size: 4]
	int PawnNumberLimitProgress;//[Offset: 0x284, Size: 4]
	int SpawnPointsLimitProgress;//[Offset: 0x288, Size: 4]
	bool bSpawnLimitReached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	bool bHasSpawnedAllBurstSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	bool bOverrideAliveCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 1]
	int MinAliveOverride;//[Offset: 0x290, Size: 4]
	int MaxAliveOverride;//[Offset: 0x294, Size: 4]
	float HostilityThreshold;//[Offset: 0x298, Size: 4]
	float PeakTimeSeconds;//[Offset: 0x29c, Size: 4]
	float BreatherTimeSeconds;//[Offset: 0x2a0, Size: 4]
	float MaxRampTimeSeconds;//[Offset: 0x2a4, Size: 4]
	float MinTimeBetweenBreathesSeconds;//[Offset: 0x2a8, Size: 4]
	float MaxFadeTimeSeconds;//[Offset: 0x2ac, Size: 4]
	float FadeEndIntensity;//[Offset: 0x2b0, Size: 4]
	float FadeEndRemainingSpawnPointsPercentage;//[Offset: 0x2b4, Size: 4]
	float CompletionPercentageToDisableBreathers;//[Offset: 0x2b8, Size: 4]
	MulticastInlineDelegateProperty OnEncounterAllEnemiesKilled;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterEnemySpawned;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterEnemySpawnFailed;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterAllBurstEnemiesSpawned;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterCompleted;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterPawnDied;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterSpawnedFinalEnemy;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterRiftSpawned;//[Size: 16]
	MulticastInlineDelegateProperty OnBuildingRiftBlockedShouldDie;//[Size: 16]
	bool bDisplayThreatVisuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 1]
	float BaseDesiredUtilities;//[Offset: 0x354, Size: 4]
	GameplayTagContainer UtilitiesRequiredTags;//[Offset: 0x398, Size: 32]
	GameplayTagContainer InjectedTagForUtilityCheck;//[Offset: 0x598, Size: 32]
	float MaxLargeSpawnGroupDiscountInterval;//[Offset: 0x5bc, Size: 4]
	float MaxSelectionToSpawningDelay;//[Offset: 0x5c0, Size: 4]
	UtilityTypeFloatPair[] CurrentDesiredUtilities;//[Offset: 0x618, Size: 16]
	float UtilityRecentSelectionPenalties;//[Offset: 0x628, Size: 4]
	float UtilityEffectivenessMeasurements;//[Offset: 0x668, Size: 4]
	CurveTableRowHandle UtilityEffectivenessMultiplierCurve;//[Offset: 0x6a8, Size: 16]
	float UtilityEffectivenessInfluenceCap;//[Offset: 0x6b8, Size: 4]
	UtilityTypeFloatPair[] CurrentTopUtilityPercentages;//[Offset: 0x6c0, Size: 16]
	byte[] UsedTopUtilities;//[Offset: 0x6d0, Size: 16]
	byte[] CurrentlySelectedFreeUtilities;//[Offset: 0x6e0, Size: 16]
	int NumUtilitiesConsidered;//[Offset: 0x6f0, Size: 4]
	float ReactivityPercentage;//[Offset: 0x6f4, Size: 4]
	bool bAdjustUtilitiesDuringRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	bool bDespawnAIsDuringRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	float LastPlayerCombatFactorUpdateTime;//[Offset: 0x6fc, Size: 4]
	float LastUtilityAdjustTime;//[Offset: 0x700, Size: 4]
	float LastSpawnPointAdjustmentTime;//[Offset: 0x704, Size: 4]
	float LastLargeGroupSpawnTime;//[Offset: 0x708, Size: 4]
	AIEncounterSpawnGroupWeights[] EnemySpawnData;//[Offset: 0x710, Size: 16]
	FortAIEncounterPIDController EncounterPIDController;//[Offset: 0x720, Size: 104]
	int CurrentSpawnPointsCap;//[Offset: 0x788, Size: 4]
	int CurrentSpawnPointsUsed;//[Offset: 0x78c, Size: 4]
	int FailSafeMinSpawnPoints;//[Offset: 0x798, Size: 4]
	SpawnGroupInstanceInfo[] ActiveSpawnGroups;//[Offset: 0x7a0, Size: 16]
	float EncounterEngagementDistance;//[Offset: 0x7b0, Size: 4]
	float MinRelevantBuildingDamagedDistance;//[Offset: 0x7b4, Size: 4]
	float MaxRelevantBuildingDamagedDistance;//[Offset: 0x7b8, Size: 4]
	Actor* CurrentGroupSpawnPoint;//[Offset: 0x7d0, Size: 8]
	byte EncounterState;//[Offset: 0x7d8, Size: 1]
	byte PacingState;//[Offset: 0x7d9, Size: 1]
	float LastPacingStateTransitionTime;//[Offset: 0x7dc, Size: 4]
	FortAIEncounterWaveProgressEstimation WaveProgressEstimate;//[Offset: 0x7e0, Size: 28]
	float DesiredDifficultyLevel;//[Offset: 0x7fc, Size: 4]
	float DifficultyLevelOverride;//[Offset: 0x800, Size: 4]
	FortAIDirector* MyAIDirector;//[Offset: 0x808, Size: 8]
	FortGoalActorEncounterDataManagerPair[] DataManagers;//[Offset: 0x810, Size: 16]
	Actor* TargetObjective;//[Offset: 0x820, Size: 8]
	bool bOnlyActiveAtNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	int NumRiftsToUse;//[Offset: 0x82c, Size: 4]
	int MinRiftsToUse;//[Offset: 0x830, Size: 4]
	int NumRiftsUsed;//[Offset: 0x834, Size: 4]
	FortEncounterSettings EncounterSettings;//[Offset: 0x838, Size: 184]
	float EncounterStartTime;//[Offset: 0x8f0, Size: 4]
	float HostilityCurveStartTime;//[Offset: 0x8f4, Size: 4]
	EncounterEnvironmentQueryInfo DefaultEnvironmentQueryInfo;//[Offset: 0x8f8, Size: 40]
	EncounterEnvironmentQueryInfo FallbackEnvironmentQueryInfo;//[Offset: 0x920, Size: 40]
	EncounterEnvironmentQueryInfo OverrideEnvironmentQueryInfo;//[Offset: 0x948, Size: 40]
	EncounterEnvironmentQueryInfo CurrentEnvironmentQueryInfo;//[Offset: 0x970, Size: 40]
	bool bNukeWavesAtDaybreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	bool bNukeWavesAtEncounterEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x999, Size: 1]
	bool bNukeWavesAtEncounterDeactivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99a, Size: 1]
	int ActiveEnemyCap;//[Offset: 0x99c, Size: 4]
	float CurrentHostilityLevel;//[Offset: 0x9a8, Size: 4]
	MulticastInlineDelegateProperty OnEncounterRampStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterPeakStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterFadeStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterRestStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterCombatParticipation;//[Size: 16]
	MulticastInlineDelegateProperty OnEncounterOptionsChanged;//[Size: 16]
	class BuildingRift* RiftClassTemplate;//[Offset: 0xa10, Size: 8]
	<Actor*,FortAISpawnerData> ExternalAISpawners;//[Offset: 0xa38, Size: 80]
	FortAIEncounterQueryData EncounterQueryData;//[Offset: 0xa88, Size: 32]
	FortAIEncounterRiftManager* RiftManager;//[Offset: 0xaa8, Size: 8]
	FString AssociatedMissionName;//[Offset: 0xab0, Size: 16]
	byte AssociatedMissionType;//[Offset: 0xac0, Size: 1]
	bool bCanBeActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac1, Size: 1]
	FortAIAssignment*[] EncounterAssignments;//[Offset: 0xac8, Size: 16]
	FortAIAssignmentSettings* DefaultEncounterAssignmentSettings;//[Offset: 0xad8, Size: 8]
	int MaxActiveAlive;//[Offset: 0xb10, Size: 4]
	int MaxSpawnPointsUsed;//[Offset: 0xb14, Size: 4]
	CurveFloat* OverrideSpawnPointsCurve;//[Offset: 0xb18, Size: 8]
	bool bSendFullAnalyticsReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	bool bUseAILifespans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd19, Size: 1]
	bool bTrackCombatParticipation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1a, Size: 1]
	GameplayTagContainer ModifierTags;//[Offset: 0xd20, Size: 32]
	FortAIEncounterTimedModifierTags[] TimedModifierTags;//[Offset: 0xd40, Size: 16]
	GameplayTagContainer GameContextTags;//[Offset: 0xd50, Size: 32]
	FortGameplayMutator_AILevelVariance* AILevelMutator;//[Offset: 0xd70, Size: 8]
	FortGameplayMutator_AIEncounterModifierTags*[] EncounterModifierTagsMutators;//[Offset: 0xd78, Size: 16]
	void UnRegisterAISpawner(Actor* InAISpawner);// 0xcea9530
	void SpawnTestAIGroup(const FortAISpawnGroup* SpawnGroupToSpawn, Vector SpawnLocation, Rotator SpawnRotation, Actor* SpawnSource, const FortAbilitySet*[] AbilitySetsToGrantOnSpawn, FortAISpawnGroupUpgradeData UpgradeData, bool bAllowAssigningToExternalSpawners, float SecondsBetweenSpawns);// 0xcea91ac
	FortAIPawn* SpawnAIPawnReservedForEnemySpawner(Actor* EnemySpawner, Vector SpawnLocation, Rotator SpawnRotation);// 0xcea907c
	void SetPawnNumberLimit(int InPawnNumberLimit);// 0xcea8fd8
	void SetNukeWavesAtEncounterEnd(bool bNuke);// 0xcea8f28
	void SetEncounterActivationState(bool bEncounterActivityState);// 0xcea8e78
	void RequestActivation(int ActivationDelay);// 0xcea8dd0
	void RegisterAISpawner(Actor* InAISpawner);// 0xcea8d28
	void OnRestStarted();// 0xbbc0600
	void OnRampStarted();// 0xbbc0600
	void OnPeakStarted();// 0xbbc0600
	void OnGoalTakeDamage(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcea8ac8
	void OnGameDifficultyChanged();// 0xcea8ab4
	void OnFadeStarted();// 0xbbc0600
	void OnEncounterPawnDamaged(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcea8854
	void NotifyRiftDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcea85f4
	bool GroupHasAIRemainingToSpawn(out const FortAISpawnerData FortAISpawnerData);// 0xcea8504
	int GetPawnNumberLimit();// 0xcea84d0
	float GetEncounterTimeSeconds();// 0xcea84b4
	void GetEncounterRifts(out BuildingRift*[] OutRifts);// 0xcea83f4
	Actor* GetEncounterQueryActor();// 0xcea83c0
	void GetEncounterGameplayTags(out GameplayTagContainer OutEncounterTags);// 0xcea82f0
	FortAIDirectorDataManager* GetEncounterDataManager();// 0xcea82bc
	void GetEncounterAssignmentGoalActors(out Actor*[] OutGoalActors);// 0xcea81fc
	bool GetCurrentSpawnAreaDirections(out byte[] OutDirections);// 0xcea8130
	bool EncounterHasReservedSpawnRequestForEnemySpawner(Actor* EnemySpawner);// 0xcea807c
	FortAIAssignment* CreateEncounterAssignment(FortAIAssignmentSettings* AssignmentSettings, Actor* GoalActor);// 0xcea7f90

--------------------------------
Class: FortAISpawnGroup.PrimaryDataAsset.DataAsset.Object
	float EnemyUtilities;//[Offset: 0x30, Size: 4]
	SpawnGroupEnemy[] EnemiesToSpawn;//[Offset: 0x70, Size: 16]
	bool bIsPrototype;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bIsValidForEnemySpawners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool bIsLargeSpawnGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	float MaxDiscountRatio;//[Offset: 0x84, Size: 4]
	bool bUseWeightSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	ScalableFloat Weight;//[Offset: 0x90, Size: 40]
	ScalableFloat MinNumber;//[Offset: 0xb8, Size: 40]
	ScalableFloat MaxNumber;//[Offset: 0xe0, Size: 40]
	CurveTableRowHandle MaxGroupCategoryPopulationDensityCurve;//[Offset: 0x108, Size: 16]
	FortSpawnGroupEncounterTypeData[] EncounterTypeData;//[Offset: 0x118, Size: 16]
	GameplayTagContainer SpawnGroupGameplayTags;//[Offset: 0x128, Size: 32]
	GameplayTagQuery RequiredTagQuery;//[Offset: 0x148, Size: 72]
	bool IsValidForEnemySpawners();// 0xceb8214
	bool IsPrototype();// 0xceb81dc
	bool IsLargeSpawnGroup();// 0xceb81a4
	int GetNumberOfEnemies();// 0xceb8170
	class FortAIPawnVariant GetEnemy(int EnemyIndex);// 0xceb80c0

--------------------------------
Class: SpawnGroupEnemy
	class FortAIPawnVariant* EnemyVariantClass;//[Offset: 0x0, Size: 8]
	bool bOverrideVariantSpawnPointValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int SpawnValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortAIPawnVariant.Object
	class FortAIPawn[] PawnClasses;//[Offset: 0x28, Size: 16]
	FortAIPawnVariantDefinition[] PawnVariantDefinitions;//[Offset: 0x38, Size: 16]
	int MinPlayersToSpawnVariant;//[Offset: 0x48, Size: 4]
	DataTableRowHandle SpawnPointValueHandle;//[Offset: 0x50, Size: 16]
	int CachedSpawnPointValue;//[Offset: 0x60, Size: 4]
	float EncounterExpectedLifespan;//[Offset: 0x64, Size: 4]
	int VersionNum;//[Offset: 0x68, Size: 4]

--------------------------------
Class: FortAIPawnVariantDefinition
	class FortAIPawn* PawnClass;//[Offset: 0x0, Size: 8]
	CurveTableRowHandle VariantWeightCurve;//[Offset: 0x8, Size: 16]
	float CurrentWeight;//[Offset: 0x18, Size: 4]
	GameplayTagQuery RequiredTagsQuery;//[Offset: 0x20, Size: 72]

--------------------------------
Class: FortSpawnGroupEncounterTypeData
	GameplayTagContainer EncounterTypeTags;//[Offset: 0x0, Size: 32]
	CurveTableRowHandle MaxGroupCategoryPopulationDensityCurve;//[Offset: 0x20, Size: 16]
	CurveTableRowHandle RespawnDelayCurve;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortAISpawnGroupUpgradeData
	class FortAISpawnGroupUpgrade* SpawnGroupUpgrade;//[Offset: 0x0, Size: 8]
	class FortAISpawnGroupUpgradeProbabilities* UpgradeProbabilities;//[Offset: 0x8, Size: 8]
	class FortAISpawnGroupCapsCategorySet* SpawnGroupCapsCategories;//[Offset: 0x10, Size: 8]
	GameplayTagQuery EncounterTagRequirementsQuery;//[Offset: 0x18, Size: 72]

--------------------------------
Class: FortAISpawnGroupUpgrade.Object
	GameplayTagContainer UpgradeTags;//[Offset: 0x28, Size: 32]
	GameplayTagQuery GroupRequiredTagQuery;//[Offset: 0x48, Size: 72]
	FortAIPawnUpgrade[] BasePawnUpgrades;//[Offset: 0x90, Size: 16]
	FName AdditionalModifiersLootTierGroup;//[Offset: 0xa0, Size: 8]
	bool bInvalidForEnemySpawners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	float SpawnGroupDiscountPercentage;//[Offset: 0xac, Size: 4]
	FortAISpawnGroupUpgradeUIData UIData;//[Offset: 0xb0, Size: 128]

--------------------------------
Class: FortAIPawnUpgrade
	GameplayTagQuery TagQuery;//[Offset: 0x0, Size: 72]
	FortAIPawnUpgradeData[] PawnUpgradeDataPerPlayerCount;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortAIPawnUpgradeData
	CurveTableRowHandle SpawnPointsMultiplierCurve;//[Offset: 0x0, Size: 16]
	CurveTableRowHandle LifespanMultiplierCurve;//[Offset: 0x10, Size: 16]
	CurveTableRowHandle ScoreMultiplierCurve;//[Offset: 0x20, Size: 16]
	FortGameplayModifierItemDefinition* ModifierDefinition;//[Offset: 0x30, Size: 8]
	FortGameplayModifierItemDefinition*[] AdditionalModifiers;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortGameplayModifierItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortGameplayEffectDeliveryInfo[] PersistentGameplayEffects;//[Offset: 0x3c0, Size: 16]
	FortAbilitySetDeliveryInfo[] PersistentAbilitySets;//[Offset: 0x3d0, Size: 16]
	class FortGameplayMutator[] Mutators;//[Offset: 0x3e0, Size: 16]
	bool bHiddenInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	GameplayTagContainer DisallowedPlaylistNameTags;//[Offset: 0x3f8, Size: 32]
	GameplayTagContainer DynamicPlaylistNameTags;//[Offset: 0x418, Size: 32]
	bool IsHiddenInUI();// 0xcfff524

--------------------------------
Class: FortGameplayEffectDeliveryInfo
	FortDeliveryInfoRequirementsFilter DeliveryRequirements;//[Offset: 0x0, Size: 136]
	GameplayEffectApplicationInfo[] GameplayEffects;//[Offset: 0x88, Size: 16]

--------------------------------
Class: FortDeliveryInfoRequirementsFilter
	GameplayTagRequirements SourceTagRequirements;//[Offset: 0x0, Size: 64]
	GameplayTagRequirements TargetTagRequirements;//[Offset: 0x40, Size: 64]
	byte ApplicableTeamAffiliation;//[Offset: 0x80, Size: 1]
	bool bConsiderTeamAffiliationToInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 1]
	byte ApplicableTeam;//[Offset: 0x82, Size: 1]
	bool bConsiderTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 1]
	bool bApplyToPlayerPawns;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 1]
	bool bApplyToAIPawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 1]
	bool bApplyToBuildingActors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x83, Size: 1]
	enum BuildingActorSpecification;//[Offset: 0x84, Size: 1]
	bool bApplyToGlobalEnvironmentAbilityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 1]

--------------------------------
Class: FortAbilitySetDeliveryInfo
	FortDeliveryInfoRequirementsFilter DeliveryRequirements;//[Offset: 0x0, Size: 136]
	FortAbilitySet*[] AbilitySets;//[Offset: 0x88, Size: 16]

--------------------------------
Class: FortGameplayMutator.Info.Actor.Object
	bool bMutatorActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bNetworkDormantWhenDeactivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	GameplayTagContainer GameplayTagContainer;//[Offset: 0x230, Size: 32]
	void SetMutatorActive(bool bEnable);// 0xcfff414
	void OnRep_bMutatorActive();// 0xcfff3f8
	bool IsMutatorActive();// 0xcfff3c0
	void BP_OnMutatorListPropertiesApplied(FortMutatorListComponent* MutatorList);// 0xbbc0600

--------------------------------
Class: FortMutatorListComponent.ActorComponent.Object
	bool bShouldMakeMutatorsDormant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum InitState;//[Offset: 0xc4, Size: 4]
	class FortGameplayMutator[] MutatorDefs;//[Offset: 0xc8, Size: 16]
	PlaylistUserOptions* UserOptions;//[Offset: 0xd8, Size: 8]
	FortGameplayMutator*[] Mutators;//[Offset: 0xe0, Size: 16]
	MulticastInlineDelegateProperty OnSettingsInitialized;//[Size: 16]
	MulticastInlineDelegateProperty OnSettingsChanged;//[Size: 16]
	PropertyOverrideData PropertyOverrideArray;//[Offset: 0x110, Size: 80]
	void UnregisterMinigameMutators();// 0xd0e9f84
	void SetPropertyOverrides(out const <FString,FString> Properties);// 0xd0e9e98
	void SetMutatorsActive(bool bActive);// 0xd0e9de8
	void ResolvePendingRepOverrides();// 0xd0e9dd4
	bool RemovePropertyOverride(FString Property);// 0xd0e9d14
	void RegisterMinigameMutators();// 0xd0e9d00
	void OnRep_PropertyOverrideArray();// 0xd0e9cec
	void OnClientExitVolume(PlayerState* InPlayerState, FortVolume* InVolume);// 0xd0e9c08
	void OnClientEnterVolume(PlayerState* InPlayerState, FortVolume* InVolume);// 0xd0e9b24
	<FString,FString> GetPropertyOverridesAsStrings();// 0xd0e9aa4
	FortGameplayMutator* GetMutatorByClass(class FortGameplayMutator MutatorClass);// 0xd0e99f4
	void AddOrUpdatePropertyOverrides(out const <FString,FString> Properties);// 0xd0e9908

--------------------------------
Class: PlaylistUserOptions.DataAsset.Object
	bool bSupportNoOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	PlaylistUserOptionBase*[] Options;//[Offset: 0x38, Size: 16]
	class PlaylistUserOptionsFilter[] OptionFilters;//[Offset: 0x48, Size: 16]

--------------------------------
Class: PlaylistUserOptionBase.DataAsset.Object
	class Object* OptionScope;//[Offset: 0x48, Size: 40]
	FString OptionKey;//[Offset: 0x70, Size: 16]
	FText OptionDisplayName;//[Offset: 0x80, Size: 24]
	FText OptionDescription;//[Offset: 0x98, Size: 24]
	GameplayTagContainer Tags;//[Offset: 0xb0, Size: 32]
	Material* OptionMaterial;//[Offset: 0xd0, Size: 8]
	bool bCanHaveNoOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	byte MenuListType;//[Offset: 0xd9, Size: 1]
	PlaylistUserOptionBase* OverridenBy;//[Offset: 0xe0, Size: 8]
	int WeightOffset;//[Offset: 0xe8, Size: 4]
	class UserWidget* EditWidget;//[Offset: 0xf0, Size: 8]
	FString GetOptionValueNameFromValue(FString OptionValue, bool bAllowNoOverride, const PlaylistUserOptionsFilter* Filter);// 0xd19d498
	FString GetOptionKey(bool bWithScoping, const PlaylistUserOptionsFilter* Filter);// 0xd19d35c

--------------------------------
Class: PlaylistUserOptionsFilter.Object
	PlaylistUserOptionBase* KnobThatWeAreBeingApplied;//[Offset: 0x28, Size: 8]
	FString[] ValuesToIgnore;//[Offset: 0x30, Size: 16]
	FString OverridenOptionKey;//[Offset: 0x40, Size: 16]
	FText OverridenOptionDisplayName;//[Offset: 0x50, Size: 24]
	FText OverridenOptionDescription;//[Offset: 0x68, Size: 24]
	FString OverridenDefaultValue;//[Offset: 0x80, Size: 16]
	bool bInvertIgnoredValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool IsValueFiltered(FString Value);// 0xd19d274

--------------------------------
Class: PropertyOverrideData
	PropertyOverrideMk2[] PropertyOverrides;//[Offset: 0x0, Size: 16]
	PropertyOverrideId[] SharedPropertyIds;//[Offset: 0x10, Size: 16]
	PropertyOverrideId[] PendingPropertyIds;//[Offset: 0x20, Size: 16]
	enum OverrideMode;//[Offset: 0x38, Size: 1]
	Object* BaseObject;//[Offset: 0x40, Size: 8]
	Object* MutableObject;//[Offset: 0x48, Size: 8]

--------------------------------
Class: PropertyOverrideMk2
	FString PropertyScope;//[Offset: 0x0, Size: 16]
	FString PropertyName;//[Offset: 0x10, Size: 16]
	FString PropertyData;//[Offset: 0x20, Size: 16]
	FString DefaultPropertyData;//[Offset: 0x30, Size: 16]

--------------------------------
Class: PropertyOverrideId
	uint64 PropertyHashes;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortVolume.GameplayVolume.Actor.Object
	StaticMeshComponent* BlockingCubeFaceOne;//[Offset: 0x300, Size: 8]
	StaticMeshComponent* BlockingCubeFaceTwo;//[Offset: 0x308, Size: 8]
	StaticMeshComponent* BlockingCubeFaceThree;//[Offset: 0x310, Size: 8]
	StaticMeshComponent* BlockingCubeFaceFour;//[Offset: 0x318, Size: 8]
	FortVolumeObjectTrackingComponent* ObjectTrackingComponent;//[Offset: 0x320, Size: 8]
	DevicesDataTrackingComponent* DevicesDataTrackingComponent;//[Offset: 0x328, Size: 8]
	FortPlaysetItemDefinition* OverridePlayset;//[Offset: 0x330, Size: 8]
	bool bNeverAllowSaving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	bool bShowPublishWatermark;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 1]
	bool bDestroyingActors;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 1]
	bool bForceBoundsToBlock;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 1]
	MulticastInlineDelegateProperty OnFinishVolumeClear;//[Size: 16]
	ScalableFloat IsHotfixablyEnabled;//[Offset: 0x350, Size: 40]
	FortPlaysetItemDefinition* CurrentPlayset;//[Offset: 0x378, Size: 8]
	VolumeActorStats ActorStats;//[Offset: 0x3d0, Size: 80]
	FortAthenaCreativePortal*[] LinkedPortals;//[Offset: 0x430, Size: 16]
	Actor*[] DeferredDestroyActors;//[Offset: 0x448, Size: 16]
	enum VolumeState;//[Offset: 0x470, Size: 1]
	AsyncTaskQueue* TaskQueue;//[Offset: 0x478, Size: 8]
	MulticastInlineDelegateProperty OnVolumePerformanceMetricsUpdatedEvent;//[Size: 16]
	int AIGroupEncounterID;//[Offset: 0x550, Size: 4]
	int MaxActiveAI;//[Offset: 0x554, Size: 4]
	class AthenaNavInvokerBox* NavInvokerClass;//[Offset: 0x558, Size: 8]
	AthenaNavInvokerBox* NavigationInvokerBox;//[Offset: 0x560, Size: 8]
	FortMissionStormShield*[] StormShields;//[Offset: 0x570, Size: 16]
	FortCreativeTimerObjective*[] TimerObjectives;//[Offset: 0x590, Size: 16]
	MulticastInlineDelegateProperty OnActorEnter;//[Size: 16]
	MulticastInlineDelegateProperty OnActorExit;//[Size: 16]
	MulticastInlineDelegateProperty OnShowHUDMessage;//[Size: 16]
	MulticastInlineDelegateProperty OnShowPublishWatermarkChanged;//[Size: 16]
	enum BoundsShape;//[Offset: 0x5e0, Size: 1]
	byte BoundsCollisionSetting;//[Offset: 0x5e1, Size: 1]
	MulticastInlineDelegateProperty OnUserGeneratedContentRestrictionChanged;//[Size: 16]
	bool bUserGeneratedContentRestricted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	CreativeIslandResourceManagerComponent* IslandResourceManagerComponent;//[Offset: 0x600, Size: 8]
	FortPlayerSaveComponent* PlayerSaveComponent;//[Offset: 0x608, Size: 8]
	FortVolumePersistenceOptions* FortVolumePersistenceOptions;//[Offset: 0x610, Size: 8]
	void SetCurrentPlayset(FortPlaysetItemDefinition* NewPlayset);// 0xd20c33c
	void SetBlockingVolumeCollision(const byte CollisionSetting);// 0xd20c294
	void ServerClearVolume();// 0xd20c238
	void RemoveAthenaPawnWhenDied(FortPlayerPawnAthena* FortPlayerPawnAthena);// 0xd20c190
	void RemoveActorWhenEndPlay(Actor* Actor, const byte EndPlayReason);// 0xd20c0a8
	void RemoveActorWhenDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd20be48
	void RemoveActorFromEndOverlap(Actor* MyActor, Actor* ActorToRemove);// 0xd20bd64
	void OnRep_VolumeState();// 0xd20bd50
	void OnRep_UserGeneratedContentRestrictions();// 0xd20bd3c
	void OnRep_ObjectTrackingComponent();// 0xd20bd28
	void OnRep_CurrentPlayset();// 0xd20bd14
	void OnRep_bShowPublishWatermark();// 0xd20bd00
	void OnRep_BoundsCollisionSetting();// 0xd20bcec
	void OnApplySaveToWorld__DelegateSignature();// 0xbbc0600
	bool IsReady();// 0xd20bcc8
	bool IsReadOnly();// 0xd20bc9c
	bool IsPlayerAllowedInVolume(FortPlayerController* NewUser);// 0xd20bbe8
	bool HasVolumeBoundsBlocked();// 0xd20bbb0
	bool GetUserGeneratedContentRestricted();// 0xd20bb78
	StaticMeshComponent* GetStaticMesh();// 0xd20bb44
	FortVolumeObjectTrackingComponent* GetObjectTrackingComponent();// 0xd20bb28
	int GetNumPlayersInVolume();// 0xd20baf4
	enum GetFortVolumeType();// 0xd20bac0
	FortVolumePersistenceOptions* GetFortVolumePersistenceOptions();// 0xd20baa4
	FortPlaysetItemDefinition* GetCurrentPlayset();// 0xd20ba70
	Actor*[] GetActorsWithinVolumeByClass(class Actor ActorClass);// 0xd20b984
	FString GetAccountIdOwnerOfIsland();// 0xd20b8e4
	void DestroyVolume();// 0xd20b8d0
	void DeferredDestroy_Helper();// 0xd20b8bc
	void BroadcastOnFinishClear_Internal();// 0xd20b8a8
	void AddSelfToVolumeManager();// 0xd20b894
	void AddOrRemovePawnAfterVehicleChange(FortPlayerPawn* FortPawn, Actor* NewVehicle, Actor* OldVehicle);// 0xd20b770
	void AddActorFromBeginOverlap(Actor* MyActor, Actor* ActorToAdd);// 0xd20b68c
	void AddActor(Actor* ActorToAdd);// 0xd20b5e4

--------------------------------
Class: GameplayVolume.Actor.Object
	class Playspace* PlayspaceClassTemplate;//[Offset: 0x220, Size: 40]
	class Playspace* PlayspaceClass;//[Offset: 0x248, Size: 8]
	Playspace* Playspace;//[Offset: 0x250, Size: 8]
	GameplayTagContainer VolumeTags;//[Offset: 0x258, Size: 32]
	OverlapComponent* BoundsComponent;//[Offset: 0x278, Size: 8]
	void UpdateSize(out const Vector NewScale);// 0x7eb98ac

--------------------------------
Class: Playspace.Info.Actor.Object
	MulticastInlineDelegateProperty NotifyPlayspaceUserAdded;//[Size: 16]
	MulticastInlineDelegateProperty NotifyPlayspaceUserRemoved;//[Size: 16]
	MulticastInlineDelegateProperty NotifyPlayspaceInitialized;//[Size: 16]
	MulticastInlineDelegateProperty NotifyStartMatch;//[Size: 16]
	MulticastInlineDelegateProperty NotifyEndMatch;//[Size: 16]
	GameplayTagContainer GameplayTags;//[Offset: 0x2e8, Size: 32]
	GameplayTag RequestedPlayspaceParentTag;//[Offset: 0x308, Size: 8]
	class Playspace[] ChildPlayspaceClasses;//[Offset: 0x310, Size: 16]
	PlayspaceUserList PlayspaceUsers;//[Offset: 0x320, Size: 296]
	Playspace*[] ChildPlayspaces;//[Offset: 0x448, Size: 16]
	UniqueNetIdRepl[] PendingUsers;//[Offset: 0x458, Size: 16]
	bool bAutoStartMatchOnServerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	PlayspaceManagerComponent* PlayspaceManagerCached;//[Offset: 0x470, Size: 8]
	GameplayVolume* BoundGameplayVolume;//[Offset: 0x478, Size: 8]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bMatchHasEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 1]
	float MatchStartTime;//[Offset: 0x484, Size: 4]
	void OnRep_PlayspaceUsers();// 0x7eba008
	void OnRep_MatchStartTime();// 0x7eb9fc4
	void OnRep_bMatchHasEnded();// 0x7eb9fe0
	void OnRep_bIsInitialized();// 0x7eb9ff4

--------------------------------
Class: PlayspaceUserList.FastArraySerializer
	PlayspaceUser[] PlayspaceUsers;//[Offset: 0x108, Size: 16]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	Playspace* Playspace;//[Offset: 0x120, Size: 8]

--------------------------------
Class: PlayspaceUser.FastArraySerializerItem
	UniqueNetIdRepl UserId;//[Offset: 0x10, Size: 40]
	Playspace* LeafPlayspace;//[Offset: 0x38, Size: 8]
	PlayerState* PlayerStateCached;//[Offset: 0x40, Size: 8]
	Controller* ControllerCached;//[Offset: 0x48, Size: 8]

--------------------------------
Class: PlayspaceManagerComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	Playspace* RootPlayspace;//[Offset: 0xc8, Size: 8]
	ActorOverlapEvent[] UnhandledEnterEvents;//[Offset: 0xd8, Size: 16]
	ActorOverlapEvent[] UnhandledExitEvents;//[Offset: 0xe8, Size: 16]
	bool ProcessOverlapEvents(float DeltaTime);// 0x7ebae64
	void OnRep_RootPlayspace();// 0x7ebae50
	void OnPlayerEndOverlapGameplayVolume(PlayerState* PlayerState, GameplayVolume* Volume);// 0x7ebaf18
	void OnPlayerBeginOverlapGameplayVolume(PlayerState* PlayerState, GameplayVolume* Volume);// 0x7ebb008

--------------------------------
Class: GameStateComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: ActorOverlapEvent

--------------------------------
Class: OverlapComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void OnEndActorOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x7eb9a6c
	void OnBeginActorOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x7eb9bfc

--------------------------------
Class: FortPlaysetItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	World* PlaysetToSpawn;//[Offset: 0x3d0, Size: 40]
	FString OptionFullSavePath;//[Offset: 0x3f8, Size: 16]
	int SizeX;//[Offset: 0x408, Size: 4]
	int SizeY;//[Offset: 0x40c, Size: 4]
	int SizeZ;//[Offset: 0x410, Size: 4]
	float ZSnapTolerance;//[Offset: 0x414, Size: 4]
	enum OffsetType;//[Offset: 0x418, Size: 1]
	bool bUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	Vector LocationOffset;//[Offset: 0x41c, Size: 12]
	Rotator DefaultRotation;//[Offset: 0x428, Size: 12]
	FText UIDisplayName;//[Offset: 0x438, Size: 24]
	class FortMinigame* MinigameClass;//[Offset: 0x450, Size: 40]
	bool bAdjustForWorldCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x478, Size: 1]
	bool bUsePlaysetProps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x478, Size: 1]
	FortCreativeTagsHelper CreativeTagsHelper;//[Offset: 0x480, Size: 16]
	LevelSaveRecord* LevelSaveRecord;//[Offset: 0x490, Size: 8]
	LevelSaveRecordCollection* PlaysetPropLevelSaveRecordCollection;//[Offset: 0x498, Size: 8]
	<class Actor,int> ActorClassCount;//[Offset: 0x4a0, Size: 80]
	FortPlaysetPropItemDefinition*[] AssociatedPlaysetProps;//[Offset: 0x4f0, Size: 16]
	float PreviewInfluenceDistance;//[Offset: 0x500, Size: 4]
	float PreviewInfluenceDistanceMultiplier;//[Offset: 0x504, Size: 4]
	bool bUsesPreviewInfluenceDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	FName PlaysetName;//[Offset: 0x50c, Size: 8]
	static LevelStreamingDynamic* SpawnPlaysetFromStruct(Actor* WorldContextObject, out const FortPlaysetStreamingData LevelData);// 0xd19f08c
	static LevelStreamingDynamic* SpawnPlayset(Actor* WorldContextObject, FortPlaysetItemDefinition* Playset, Vector Location, Rotator Rotation, out FortPlaysetStreamingData OutLevelData);// 0xd19eea0
	static void SpawnActorsInPlayset(Actor* WorldContextObject, FortPlaysetItemDefinition* Playset);// 0xd19edcc
	FName GetPlaysetName();// 0xd19ed98
	static Vector AdjustToFinalLocation(Object* WorldContextObject, FortPlaysetItemDefinition* Playset, Vector BaseLocation, Rotator Rotation);// 0xd19ec30

--------------------------------
Class: FortPlaysetStreamingData
	FName PackageName;//[Offset: 0x0, Size: 8]
	FName UniquePackageName;//[Offset: 0x8, Size: 8]
	Vector Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: FortMinigame.Info.Actor.Object
	<UniqueNetIdRepl> PendingPlayers;//[Offset: 0x288, Size: 80]
	MulticastInlineDelegateProperty StateChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty MinigameHideHUDDelegate;//[Size: 16]
	MulticastInlineDelegateProperty StatChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty FullStatChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnMinigamePlayerSpawned;//[Size: 16]
	MulticastInlineDelegateProperty MinigameEndGameDelegate;//[Size: 16]
	MulticastInlineDelegateProperty PlayerAddedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty PlayerRemovedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty PlayerChangedTeamDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerClassApplied;//[Size: 16]
	MulticastInlineDelegateProperty OnRefreshIndicatorPlayersCache;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerClassRemoved;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerJoinInProgress;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativePlayerIndicatorRulesChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeBossInfoRulesChanged;//[Size: 16]
	MulticastInlineDelegateProperty MinigameStartedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty MinigameEndedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty MinigameTeamConfigUpdated;//[Size: 16]
	MulticastInlineDelegateProperty MinigameClassConfigUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnTeleportedForMinigame;//[Size: 16]
	MulticastInlineDelegateProperty OnUIExtensionsChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayModeChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnCurrentRoundChangedDelegate;//[Size: 16]
	UIExtension[] UIExtensions;//[Offset: 0x450, Size: 16]
	GameplayTagContainer UIExtensionTags;//[Offset: 0x460, Size: 32]
	float TimeLimit;//[Offset: 0x480, Size: 4]
	int CurrentRound;//[Offset: 0x484, Size: 4]
	int TotalRounds;//[Offset: 0x488, Size: 4]
	MinigamePlayers PlayerArray;//[Offset: 0x490, Size: 288]
	MinigamePlayers SpectatingPlayerArray;//[Offset: 0x5b0, Size: 288]
	MinigameEndCondition[] EndConditionArray;//[Offset: 0x6d0, Size: 16]
	bool bRemovePawnOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	class FortMinigameStatFilter* PlayerDeathsStatFilter;//[Offset: 0x6e8, Size: 8]
	bool bKeepItemsBetweenRounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	float PercentageOfResourcesKeptBetweenRounds;//[Offset: 0x74c, Size: 4]
	bool bReloadAndRestockWeaponsEachRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	<FortWorldItemDefinition*,int> RestockAmmoAmounts;//[Offset: 0x758, Size: 80]
	int DefaultRestockAmmoAmount;//[Offset: 0x7a8, Size: 4]
	bool bLastTeamStandingWins;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	bool bAllowStandardEndGameConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ad, Size: 1]
	bool bEndGameOnMatchPointWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ae, Size: 1]
	MulticastInlineDelegateProperty ServerTimeReplicatedDelegate;//[Size: 16]
	FText DisplayName;//[Offset: 0x7d0, Size: 24]
	int AutoStartDelay;//[Offset: 0x7e8, Size: 4]
	enum SpawnLocationSetting;//[Offset: 0x7ec, Size: 1]
	enum PostGameSpawnLocationSetting;//[Offset: 0x7ed, Size: 1]
	float WarmupDuration;//[Offset: 0x7f0, Size: 4]
	float PostGameResetDelay;//[Offset: 0x7f4, Size: 4]
	float GameWinnerDisplayTime;//[Offset: 0x7f8, Size: 4]
	float GameScoreDisplayTime;//[Offset: 0x7fc, Size: 4]
	float RoundWinnerDisplayTime;//[Offset: 0x800, Size: 4]
	float RoundScoreDisplayTime;//[Offset: 0x804, Size: 4]
	float ServerEndgameDelay;//[Offset: 0x808, Size: 4]
	bool bTimerCountsDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 1]
	MinigameTeam[] TeamArray;//[Offset: 0x810, Size: 16]
	MinigameClassSlot[] ClassSlotArray;//[Offset: 0x820, Size: 16]
	FortMinigameStatQuery[] BaseEndConditionArray;//[Offset: 0x830, Size: 16]
	class FortMinigameStatFilter[] TrackedStats;//[Offset: 0x840, Size: 16]
	class FortMinigameStatFilter[] ScoreboardStats;//[Offset: 0x850, Size: 16]
	FortMinigameStatCollection RoundStats;//[Offset: 0x860, Size: 48]
	FortMinigameStatCollection GameStats;//[Offset: 0x890, Size: 48]
	enum CurrentState;//[Offset: 0x8c0, Size: 1]
	enum PreviousState;//[Offset: 0x8c1, Size: 1]
	class FortMinigameStatFilter* CompletionTimeStatFilter;//[Offset: 0x8c8, Size: 8]
	class FortMinigameStatFilter* ScoreStatFilter;//[Offset: 0x8d0, Size: 8]
	class FortMinigameStatFilter* LapTimeStatFilter;//[Offset: 0x8d8, Size: 8]
	class FortMinigameStatFilter* TimeAliveStatFilter;//[Offset: 0x8e0, Size: 8]
	byte DefaultClassSlot;//[Offset: 0x8e8, Size: 1]
	enum ClassResetType;//[Offset: 0x8e9, Size: 1]
	int MaxLivesForPlayer;//[Offset: 0x8ec, Size: 4]
	byte TeamToSwapToWhenOutOfSpawns;//[Offset: 0x8f0, Size: 1]
	int AutoEndTeamThreshold;//[Offset: 0x8f4, Size: 4]
	FortMinigameTimes ServerTime;//[Offset: 0x8f8, Size: 20]
	FortMinigameTimes CachedTime;//[Offset: 0x90c, Size: 20]
	bool bStopwatchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	float LastRoundDuration;//[Offset: 0x924, Size: 4]
	FortMinigameLogicComponent*[] MinigameComponents;//[Offset: 0x928, Size: 16]
	FortMinigamePlayerStartComponent*[] PlayerStartComponents;//[Offset: 0x938, Size: 16]
	FortMinigamePlayerStartComponent*[] CheckpointPlayerStartComponent;//[Offset: 0x948, Size: 16]
	FortCreativeCreatureManagerComponent* CreatureManagerComponent;//[Offset: 0x958, Size: 8]
	FortCreativeTeleporterManagerComponent* TeleporterManagerComponent;//[Offset: 0x960, Size: 8]
	CreativePlayerHealthInfoComponent* CreativePlayerHealthComponent;//[Offset: 0x968, Size: 8]
	FortVolume* Volume;//[Offset: 0x970, Size: 8]
	bool bSortScoreboardEntries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x979, Size: 1]
	bool bTeamMinigame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97a, Size: 1]
	bool bTeamsAreStable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97b, Size: 1]
	int NumTeams;//[Offset: 0x97c, Size: 4]
	bool bAllowJoinInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 1]
	enum PlayerPersistence;//[Offset: 0x981, Size: 1]
	FortPlayerState* MinigameStarter;//[Offset: 0x988, Size: 8]
	int TeamRotationSetting;//[Offset: 0x994, Size: 4]
	int TeamRotationCount;//[Offset: 0x998, Size: 4]
	bool bStableTeamCosmetics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 1]
	enum MinigameMapWidget;//[Offset: 0x99d, Size: 1]
	enum WinCondition;//[Offset: 0x99e, Size: 1]
	bool bAllTeamsMustMatchEndConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99f, Size: 1]
	bool bOnlyAllowRespawningIfPlayerStartPadsFound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	enum GameEndCallout;//[Offset: 0x9a1, Size: 1]
	int VictoryAudioIndex;//[Offset: 0x9a4, Size: 4]
	int DrawAudioIndex;//[Offset: 0x9a8, Size: 4]
	int DefeatAudioIndex;//[Offset: 0x9ac, Size: 4]
	bool bShowCumulativeScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	FName MinigameStartCameraBehavior;//[Offset: 0xa84, Size: 8]
	FText ClientMinigameStartedText;//[Offset: 0xa90, Size: 24]
	FName MinigameEndCameraBehavior;//[Offset: 0xaa8, Size: 8]
	FText ClientMinigameEndedText;//[Offset: 0xab0, Size: 24]
	<GameplayTag,UIExtension> AllowedUIExtensions;//[Offset: 0xac8, Size: 80]
	<enum> MinigameEditModeStates;//[Offset: 0xb20, Size: 80]
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb72, Size: 1]
	int NumMinigameComponentsServer;//[Offset: 0xb74, Size: 4]
	bool bVolumeNavigationHasBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	int[] RoundWinHistory;//[Offset: 0xb98, Size: 16]
	MinigamePlayerBucket[] PlayerBuckets;//[Offset: 0xba8, Size: 16]
	GameplayTagContainer OldUIExtensionTags;//[Offset: 0xbb8, Size: 32]
	MinigamePlayerPersistentStartPoint[] PlayerPersistentStartPoints;//[Offset: 0xc68, Size: 16]
	int PersistenceRequiredDevices;//[Offset: 0xc78, Size: 4]
	bool WasInProgress();// 0xd0bbcf4
	bool UseTeamScoring();// 0xd0bbcd0
	void UpdateAutoStartByMatchmakingPortalIslandOwner(FString IslandOwnerId);// 0xd0bbc1c
	void UnregisterVolumeAsNavigationObserver(SceneComponent* RegisteredComponent);// 0xd0bbb74
	void ToggleAutoRestartMinigame();// 0xd0bbb60
	void StartMinigame(FortPlayerController* InstigatorPC);// 0xd0bbab0
	bool ShouldRotateTeams();// 0xd0bba78
	bool ShouldDropOrDestroyItem(out bool bShouldDrop, out bool bShouldDestroy, FortPlayerController* PC, const FortWorldItemDefinition* ItemDef);// 0xd0bb8d8
	void SetWinningTeamIndex(const byte InWinningTeamIndex);// 0xd0bb834
	void SetupTeams();// 0xbbc0600
	void SetTimeAliveStat(FortPlayerController* PlayerController, const float TimeAliveSeconds);// 0xd0bb74c
	void SetTeamNameForTeam(byte TeamIndex, FString TeamName);// 0xd0bb658
	bool SetTeamForPlayer(FortPlayerState* PlayerState, byte NewTeam, bool bTemporary, bool bChangeTeamWithoutRespawn);// 0xd0bb4cc
	void SetTeamColorIndexForTeam(byte TeamIndex, int TeamColorIndex);// 0xd0bb3e4
	void SetStatForPlayerId(out const UniqueNetIdRepl InPlayerID, class FortMinigameStatFilter InFilter, int InValue);// 0xd0bb218
	void SetStatForPlayerBucket(int BucketIndex, class FortMinigameStatFilter InFilter, int InValue);// 0xd0bb0f0
	void SetStatForPlayer(const FortPlayerState* InPlayer, class FortMinigameStatFilter InFilter, int InValue);// 0xd0bafcc
	void SetStatForGroup(class FortMinigameStatFilter InFilter, int InValue);// 0xd0baee4
	bool SetPvPTeamForPlayer(FortPlayerState* PlayerState, int Team, bool bTemporary);// 0xd0badac
	void SetMinigameNumTeams(int InNumTeams);// 0xd0bad04
	void SetMaxInitTeamSizeForTeam(byte TeamIndex, int TeamSize);// 0xd0bac1c
	void SetLapTimeStat(FortPlayerController* PlayerController, const float LapTimeSeconds);// 0xd0bab34
	void SetInitTeamSizeWeightForTeam(byte TeamIndex, int TeamSizeWeight);// 0xd0baa4c
	void SetClassSlotName(byte ClassSlotIndex, FString ClassName);// 0xd0ba958
	void SetClassSlotInventory(byte ClassSlotIndex, out const ItemAndCount[] InventoryItems);// 0xd0ba858
	bool SetClassSlotForPlayer(FortPlayerState* PlayerState, byte NewClassSlot, delegate OnComplete, bool bRespawnPlayer, bool bResetCurrentVitals, bool bClearAllItems, float ClassSwitchDelay);// 0xd0ba5ec
	void ServerEventLogScoreChanged(enum Type, Object* TargetObject, FortPlayerController* PlayerController, out const GameplayTagContainer TargetTags, out const GameplayTagContainer SourceTags, out const GameplayTagContainer ContextTags, int Count);// 0xd0ba33c
	void ServerEventLogRoundEnded(FortPlayerController* InstigatorPC, enum EndMethod, enum NextState);// 0xd0ba214
	void ServerEventLogMinigameState(enum NewState, int Duration);// 0xd0ba12c
	void RestartMinigame(FortPlayerController* InstigatorPC);// 0xd0ba07c
	void ResetStats();// 0xd0ba068
	void RemovePersistenceRequirement();// 0xd0ba054
	void RemoveMinigamePlayer(FortPlayerState* PlayerState);// 0xd0b9fac
	void RemoveMinigameComponent(FortMinigameLogicComponent* MinigameComponent);// 0xd0b9f04
	void RemoveMinigameActor(Actor* Actor);// 0xd0b9e5c
	void RemoveEndConditionForTeam(byte TeamIndex, out const FortMinigameStatQuery StatQuery);// 0xd0b9d44
	void RemoveEndCondition(out const FortMinigameStatQuery StatQuery);// 0xd0b9c78
	void RegisterVolumeAsNavigationObserver();// 0xd0b9c64
	void RefreshVoiceForPlayers();// 0xd0b9c50
	void RefreshVoiceForPlayer(FortPlayerState* PlayerState);// 0xd0b9ba8
	void RefreshGameRulesPreview();// 0xd0b9b94
	void RecheckInventory(Pawn* PlayerPawn);// 0xd0b9aec
	void QueueAllAIForDespawn();// 0xd0b9ad8
	void PutPlayerIntoStasis(Pawn* PlayerPawn);// 0xd0b9a30
	void PutPlayerControllerIntoStasis(FortPlayerController* PlayerController);// 0xd0b9988
	void PostGameResetPlayers();// 0xd0b9974
	bool OverridePlayerSpawnLocation(Pawn* PlayerPawn, FortPlayerStateAthena* PlayerState, out Vector OutLocation, out Rotator OutRotation, out bool bOutRespawningOnGround);// 0xd0b9790
	void OnVolumeStateChanged(enum NewState, FortVolume* ChangedVolume);// 0xd0b96a8
	void OnTimeLimitElapsed();// 0xd0b9694
	void OnSpawningFromSaveFinish();// 0xd0b9680
	void OnRep_Volume();// 0xd0b966c
	void OnRep_TeamArray();// 0xd0b9658
	void OnRep_StatsChanged();// 0xd0b9644
	void OnRep_ServerTime();// 0xd0b9630
	void OnRep_PlayerBuckets();// 0xd0b961c
	void OnRep_MinigamePlayer();// 0xd0b9608
	void OnRep_CurrentState();// 0xd0b95f4
	void OnRep_CurrentRound();// 0xd0b95e0
	void OnRep_ClassSlotArray();// 0xd0b95cc
	void OnPlayerStateTeamIndexChanged();// 0xd0b95b8
	void OnPlayerPawnPossessedDuringTransition(Pawn* PlayerPawn);// 0xd0b9510
	void OnPlayerPawnPossessedDuringMinigame(Pawn* PlayerPawn);// 0xd0b9468
	void OnMinigameStatChanged(const FortPlayerController* InStatOwner, out const class FortMinigameStatFilter TrackedStatClass, int Count);// 0xd0b9330
	void OnInGameLoadScreenChanged(FortPlayerControllerAthena* PlayerController, bool bEnableLoadScreen, FText HUDReasonText);// 0xd0b9124
	void OnGamePhaseChanged(enum GamePhase);// 0xd0b907c
	void OnFortPlayerDied(FortPlayerPawnAthena* FortPlayerPawnAthena);// 0xd0b8fd4
	void OnEndGameReturnPlayersFromMatchmaking();// 0xd0b8fc0
	void OnClientFinishTeleportingForMinigame(FortPlayerPawn* InPawn);// 0xd0b8f18
	bool OnCheckIfClientIsSafeToRespawn(FortPlayerControllerAthena* PlayerController);// 0xd0b8e64
	void OnBeginSpectating(FortPlayerStateZone* FPSZ);// 0xd0b8dbc
	void NotifyStatEvent(enum Type, Object* TargetObject, FortPlayerController* PlayerController, out const GameplayTagContainer TargetTags, out const GameplayTagContainer SourceTags, out const GameplayTagContainer ContextTags, int Count);// 0xd0b8b0c
	void NativeExitedVolumeEvent(FortPlayerState* LeftPlayerState);// 0xd0b8a64
	void NativeEnteredVolumeEvent(FortPlayerState* PlayerState);// 0xd0b89bc
	void MoveMinigamePlayerToSpectate(FortPlayerState* PlayerState);// 0xd0b8914
	void LTMFlowDisableMatchmakingBackfillAndJoinInProgress(bool bDisableBeaconRequests);// 0xd0b8864
	void K2_RecordPostGameStatsForPlayer(out MinigamePlayer PlayerEntry);// 0xbbc0600
	void K2_IsInProgress(out enum OutExec);// 0xd0b879c
	void K2_HasStarted(out enum OutExec);// 0xd0b86e0
	void K2_ExitedVolumeEvent(FortPlayerState* LeftPlayerState);// 0xd0b8630
	void K2_EnteredVolumeEvent(FortPlayerState* PlayerState);// 0xd0b8580
	bool IsWinningPlayerState(const PlayerState* PlayerState);// 0xd0b84ac
	bool IsWinningPlayerId(out const UniqueNetIdRepl PlayerID);// 0xd0b8340
	bool IsWaitingForCameras();// 0xd0b831c
	bool IsTransitioning();// 0xd0b82f8
	bool IsTeamMinigame();// 0xd0b82d4
	bool IsPregame();// 0xd0b82b0
	bool IsPostGame();// 0xd0b828c
	bool IsPlayerUsingClassSlot(FortPlayerState* PlayerState, byte ClassSlot);// 0xd0b8198
	bool IsPlayerTeleportingOrRespawningForGameplay(FortPlayerStateAthena* PlayerToCheck);// 0xd0b80e4
	bool IsPlayerSpectatingMinigame(const FortPlayerState* PlayerState);// 0xd0b8030
	bool IsPlayerOutOfLives(const FortPlayerState* InPlayerState, const bool bOnlyMinigamePlayers);// 0xd0b7f34
	bool IsPlayerOnRoundWinningTeam(FortPlayerState* PlayerState);// 0xd0b7e80
	bool IsPlayerOnGameWinningTeam(FortPlayerState* PlayerState);// 0xd0b7dcc
	bool IsPlayerLocationBlockedForTeleport(FortPlayerPawnAthena* PlayerPawn);// 0xd0b7d18
	bool IsPlayerInOurVolume(FortPlayerState* PlayerState);// 0xd0b7c64
	bool IsPlayerInMinigameByNetId(out const UniqueNetIdRepl UniqueNetId, bool bCheckSpectatingPlayers);// 0xd0b7ac4
	bool IsPlayerInMinigame(const FortPlayerState* PlayerState, bool bCheckSpectatingPlayers);// 0xd0b79c8
	bool IsMinigameStarting();// 0xd0b79a4
	bool IsMinigameStarter(FortPlayerController* PlayerController);// 0xd0b78f0
	bool IsMinigameComponent(FortMinigameLogicComponent* MinigameComponent);// 0xd0b783c
	bool IsMinigameActor(Actor* Actor);// 0xd0b7788
	bool IsLocationInsideTerrain(Vector Location, out HitResult OutHit);// 0xd0b766c
	bool IsLocationBlockedForTeleport(FortPlayerState* PlayerState, Vector LocationToCheck, Rotator RotationToCheck);// 0xd0b7538
	bool IsLastRound();// 0xd0b7500
	bool IsInWarmup();// 0xd0b74dc
	bool IsInSetup();// 0xd0b74b8
	bool IsInProgress();// 0xd0b7490
	bool IsInPlayMode();// 0xd0b7460
	bool IsGameWinnerShown();// 0xd0b742c
	bool IsCuratedHub();// 0xd0b73f4
	bool IsAnyPlayerSpawnLimited();// 0xd0b73bc
	bool IsActorPositionInsideTerrain(Actor* Actor, out HitResult OutHit);// 0xd0b72a0
	static void HighlightTopStats(out MinigameScoreboardBucketRow[] InOutScoreboardRows);// 0xd0b71f4
	bool HasTimeLimit();// 0xd0b71a4
	bool HasStarted();// 0xd0b7180
	bool HasPlayerStartPads(const FortPlayerState* InPlayerState);// 0xd0b70c4
	bool HasMinigameStarter();// 0xd0b708c
	void HandleVolumeEditModeChange(bool bInEditMode);// 0xd0b6fd4
	void HandleReplicationComplete(FortPlayerControllerAthena* PlayerController);// 0xd0b6f2c
	void HandleMinigameWarmup();// 0xd0b6f10
	void HandleMinigameStarted();// 0xd0b6ef4
	void HandleMinigameEnded();// 0xd0b6ed8
	void HandleMinigameComponentRemoved(FortMinigameLogicComponent* MinigameComponent);// 0xd0b6e28
	void HandleMinigameComponentInPlayChanged(FortMinigameLogicComponent* MinigameComponent);// 0xd0b6d78
	void HandleMinigameComponentAdded(FortMinigameLogicComponent* MinigameComponent);// 0xd0b6cc8
	byte GetWinningTeamIndexFromTeamIndex(const byte InTeamIndex);// 0xd0b6c18
	float GetWarmupTimeRemaining();// 0xd0b6b9c
	float GetTimeRemainingUntilAutoStart();// 0xd0b6b20
	float GetTimeRemaining();// 0xd0b6aa0
	FortCreativeTeleporterManagerComponent* GetTeleporterManagerComponent();// 0xd0b6a84
	byte GetTeamToSwapToWhenOutOfSpawns(const FortPlayerState* PlayerState);// 0xd0b69d4
	FText GetTeamName(byte TeamIndex);// 0xd0b68b8
	byte GetTeamIndexForCosmeticDetails(byte TeamIndex);// 0xd0b6808
	int GetTeamColorIndex(byte TeamIndex);// 0xd0b6758
	int GetStatForPlayerId(out const UniqueNetIdRepl PlayerID, class FortMinigameStatFilter InFilter, bool bGameTotal);// 0xd0b657c
	int GetStatForPlayerBucket(int BucketIndex, class FortMinigameStatFilter InFilter, bool bGameTotal);// 0xd0b6444
	int GetStatForPlayer(const FortPlayerState* InPlayer, class FortMinigameStatFilter InFilter, bool bGameTotal);// 0xd0b6310
	int GetStatForGroup(class FortMinigameStatFilter InFilter, bool bGameTotal);// 0xd0b6218
	GameplayTagQuery GetStartQueryForPlayer(PlayerState* Player);// 0xd0b6124
	int GetStandingsForPlayer(const FortPlayerState* InPlayerState, class FortMinigameStatFilter InFilter, out MinigameStatRow[] OutStatRows, int RowsReturned);// 0xd0b5f98
	enum GetSpawnLocationSetting(const FortPlayerState* PlayerState);// 0xd0b5ee8
	void GetScoreboardStateTimes(out float[] outStateTimes);// 0xd0b5e28
	void GetScoreboardRows(out MinigameScoreboardBucketRow[] OutScoreboardRows, out const class FortMinigameStatFilter[] SortOrder, bool bGameTotal, bool bHighlighting, bool bCountWins, enum ScoreboardState);// 0xd0b5be4
	bool GetScoreboardRowForPlayerBucket(int BucketIndex, out MinigameScoreboardBucketRow OutScoreboardRow, out const class FortMinigameStatFilter[] SortOrder, bool bGameTotal, bool bHighlighting, bool bCountWins, enum ScoreboardState);// 0xd0b58c4
	bool GetScoreboardRowForPlayer(FortPlayerState* PlayerState, out MinigameScoreboardPlayerRow OutScoreboardRow, out const class FortMinigameStatFilter[] SortOrder, bool bGameTotal, bool bHighlighting, bool bCountWins, enum ScoreboardState);// 0xd0b55b8
	float GetRuntime();// 0xd0b5538
	int GetRoundWinner(int Round);// 0xd0b5488
	int GetRoundBasedGameWinnerNameOrTeam(out FText OutName);// 0xd0b5370
	int GetRoundBasedGameWinnerName(out FText OutName);// 0xd0b5258
	float GetPostGameTimeRemaining();// 0xd0b51dc
	float GetPostGameResetDelay(enum EndMethod);// 0xd0b512c
	void GetPlayerStartComponentsByTagQuery(out FortMinigamePlayerStartComponent*[] OutPlayerStartComponents, out const GameplayTagQuery TagQuery);// 0xd0b4fe8
	int GetPlayerPlacement(const PlayerState* PlayerState);// 0xd0b4f38
	int GetPlayerCount(bool bIncludeSpectators);// 0xd0b4e80
	void GetParticipatingPlayers(out FortPlayerState*[] OutPlayers);// 0xd0b4dc0
	bool GetOrderedMinigameStatsRows(out MinigameStatRow[] OutStats);// 0xd0b4cf8
	int GetMinigameNumTeams();// 0xd0b4cc4
	enum GetMinigameMapPanelDisplayType();// 0xd0b4c90
	void GetMinigameComponentsByTagQuery(out FortMinigameLogicComponent*[] OutComponents, out const GameplayTagQuery TagQuery);// 0xd0b4b4c
	int GetMaxLivesForPlayer(const FortPlayerState* PlayerState);// 0xd0b4a9c
	int GetMaxInitTeamSize(byte TeamIndex);// 0xd0b49ec
	int GetInitTeamSizeWeight(byte TeamIndex);// 0xd0b493c
	bool GetEndConditionValueForStatIfAny(const byte TeamNumber, out const class FortMinigameStatFilter InStat, out int OutValue);// 0xd0b47e4
	bool GetEndConditionForStatIfAny(const byte TeamNumber, out const class FortMinigameStatFilter InStat, out MinigameEndCondition OutEndCondition);// 0xd0b4654
	byte GetDefaultClassSlot(const FortPlayerState* PlayerState);// 0xd0b45a4
	bool GetCurrentRoundWinnerName(out FText OutName);// 0xd0b4488
	int GetCurrentRoundWinner();// 0xd0b4450
	FText GetClassSlotName(byte ClassSlotIndex);// 0xd0b4334
	bool GetClassSlotInventory(byte ClassSlotIndex, out ItemAndCount[] InventoryItems);// 0xd0b4228
	byte GetClassSlotForPlayer(FortPlayerState* PlayerState, const bool bUseDeathInfo);// 0xd0b4130
	bool GetBucketWinCount(out int WinCount, const int BucketIndex);// 0xd0b4024
	int GetBucketForPlayerState(const PlayerState* PlayerState);// 0xd0b3f74
	int GetBucketForPlayerId(out const UniqueNetIdRepl PlayerID);// 0xd0b3e24
	bool GetAirSpawnLocation(FortPlayerStateAthena* PlayerState, out Vector OutLocation, out Rotator OutRotation);// 0xd0b3cd4
	static FText FormatStat(class FortMinigameStatFilter InStat, int InValue);// 0xd0b3b80
	bool ForceRespawn(FortPlayerState* PlayerState, out GameplayTagContainer RespawnReasons);// 0xd0b3a64
	bool EvaluateStatQuery(out const MinigameEndCondition InEndCondition, const int PlayerBucketIndex);// 0xd0b392c
	void EndGame(FortPlayerController* InstigatorPC, enum EndMethod);// 0xd0b3844
	void DoRep_UIExtensionTags();// 0xd0b3830
	bool DoesTimerCountDown();// 0xd0b3814
	bool DoAllPlayersHaveSpawnLocation(enum SpawnLocation);// 0xd0b3760
	bool DetermineSpawnLocation(FortPlayerStateAthena* PlayerState, out Vector OutLocation, out Rotator OutRotation, out bool bOutRespawningOnGround);// 0xd0b35c0
	void DeclareWinnerImmediately(int WinningBucket);// 0xd0b3518
	void ClearTeleportForMinigame(FortPlayerPawn* InPawn);// 0xd0b3470
	void ClearPlayerInventory(FortPlayerControllerAthena* PlayerController);// 0xd0b33c8
	Actor* ChoosePlayerStart(Controller* Player);// 0xd0b3318
	bool CheckRemainingLivingPlayersForEndCondition();// 0xd0b32e0
	void CheckEndConditionsInternal();// 0xd0b32cc
	void CheckEndConditions();// 0xd0b32b8
	bool CanPlayerRespawn(const FortPlayerState* InPlayerState);// 0xd0b3204
	void CancelPendingClassSlotChange(FortPlayerState* PlayerState, byte PendingClassSlot);// 0xd0b311c
	void BroadcastStatsChangedDelegate();// 0xd0b3108
	bool AreTeamsAsymmetrical();// 0xd0b30d0
	bool AreEnoughPlayersLeftToContinueMatch();// 0xd0b3098
	void ApplyMutatorsToPlayer(FortPlayerState* PlayerState, bool bResetCurrentVitals);// 0xd0b2fa8
	void AdvanceState();// 0xd0b2f94
	void AddStatToPlayerBucket(int BucketIndex, class FortMinigameStatFilter InFilter, int InValue);// 0xd0b2e6c
	void AddStatToPlayer(FortPlayerState* InPlayer, class FortMinigameStatFilter InFilter, int InValue);// 0xd0b2d48
	void AddStatToGroup(class FortMinigameStatFilter InFilter, int InValue);// 0xd0b2c60
	void AddPersistenceRequirement();// 0xd0b2c4c
	void AddOrOverrideEndConditionForTeam(byte TeamIndex, out const FortMinigameStatQuery StatQuery);// 0xd0b2b34
	void AddOrOverrideEndCondition(out const FortMinigameStatQuery StatQuery);// 0xd0b2a68
	void AddMinigamePlayer(FortPlayerState* PlayerState, bool bForceSpawn);// 0xd0b2978
	void AddMinigameComponent(FortMinigameLogicComponent* MinigameComponent);// 0xd0b28d0
	void AddMinigameActor(Actor* Actor);// 0xd0b2828

--------------------------------
Class: UIExtension
	enum Slot;//[Offset: 0x0, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: MinigamePlayers.FastArraySerializer
	MinigamePlayer[] Players;//[Offset: 0x108, Size: 16]
	FortMinigame* Owner;//[Offset: 0x118, Size: 8]

--------------------------------
Class: MinigamePlayer.FastArraySerializerItem
	UniqueNetIdRepl UniquePlayerId;//[Offset: 0x10, Size: 40]
	bool bHasValidResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	byte ClassSlotIndex;//[Offset: 0x39, Size: 1]
	float LastClassSwitchTime;//[Offset: 0x3c, Size: 4]
	byte TeamBeforeMinigameStarted;//[Offset: 0x40, Size: 1]
	Vector LocationBeforeMinigameStarted;//[Offset: 0x44, Size: 12]
	Rotator RotationBeforeMinigameStarted;//[Offset: 0x50, Size: 12]
	bool bIsLocationBeforeGameStartedBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bWasSkydivingBeforeMinigameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bWasFlyingBeforeMinigameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bIsTeleportingOrRespawningForGameplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bPreparingForRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	FortPlayerStartCreative* ClaimedPlayerStart;//[Offset: 0x68, Size: 8]
	bool bIsWaitingForPersistence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: FortPlayerStartCreative.PlayerStart.NavigationObjectBase.Actor.Object
	GameplayTagContainer PlayerStartTags;//[Offset: 0x250, Size: 32]
	int PortalIndex;//[Offset: 0x270, Size: 4]
	byte ApplicableTeam;//[Offset: 0x274, Size: 1]
	bool bUseAsIslandStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int PriorityGroup;//[Offset: 0x278, Size: 4]
	FString LockedPlayerNameSubstring;//[Offset: 0x280, Size: 16]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	FortCreativeVolumeLinkComponent* CreativeLinkComponent;//[Offset: 0x298, Size: 8]
	bool IsClaimedByPlayer(UniqueNetIdRepl UniqueId);// 0xd18bc00

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x244, Size: 8]

--------------------------------
Class: FortCreativeVolumeLinkComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnLinkedVolumeSet;//[Size: 16]
	FortVolume* LinkedVolume;//[Offset: 0xc8, Size: 8]
	bool bShouldFindVolumeAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	PropertyOverrideData LinkedVolumeProperties;//[Offset: 0xd8, Size: 80]
	void OnRep_LinkedVolume();// 0xcfbe594
	void OnLinkedVolumeSettingsChanged(out const PropertyOverrideData OverrideData);// 0xcfbe4a4
	FortVolume* GetLinkedVolume();// 0xcfbe488

--------------------------------
Class: MinigameEndCondition
	FortMinigameStatQuery StatQuery;//[Offset: 0x0, Size: 24]
	enum TeamListType;//[Offset: 0x18, Size: 1]
	byte[] TeamList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortMinigameStatQuery
	class FortMinigameStatFilter* Stat;//[Offset: 0x0, Size: 8]
	enum Scope;//[Offset: 0x8, Size: 1]
	bool bAnyMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	enum Operation;//[Offset: 0xa, Size: 1]
	int Value;//[Offset: 0xc, Size: 4]
	bool bStaticCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: FortMinigameStatFilter.Object
	enum StatEvent;//[Offset: 0x28, Size: 1]
	enum ItemEvent;//[Offset: 0x29, Size: 1]
	FortItemDefinition* ItemDefinition;//[Offset: 0x30, Size: 40]
	GameplayTagQuery TargetTagsQuery;//[Offset: 0x58, Size: 72]
	GameplayTagQuery SourceTagsQuery;//[Offset: 0xa0, Size: 72]
	GameplayTagQuery ContextTagsQuery;//[Offset: 0xe8, Size: 72]
	bool bAccumulates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	FText Description;//[Offset: 0x138, Size: 24]
	FText HudShortDescription;//[Offset: 0x150, Size: 24]
	Texture2D* HudIcon;//[Offset: 0x168, Size: 40]
	bool Matches(enum InStatEvent, Object* InTargetObject, FortPlayerController* InPlayerController, out const GameplayTagContainer InTargetTags, out const GameplayTagContainer InSourceTags, out const GameplayTagContainer InContextTags);// 0xd0c8438
	FText FormatStat(int InCount);// 0xd0c8314
	int Compare(int FirstScore, int SecondScore);// 0xd0c8220
	int Accumulate(int A, int B);// 0xd0c812c

--------------------------------
Class: MinigameTeam
	byte TeamIndex;//[Offset: 0x0, Size: 1]
	FString TeamName;//[Offset: 0x8, Size: 16]
	int TeamColorIndex;//[Offset: 0x18, Size: 4]
	int MaxInitTeamSize;//[Offset: 0x1c, Size: 4]
	int InitTeamSizeWeight;//[Offset: 0x20, Size: 4]
	bool bHasBucketAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	byte EliminatedCount;//[Offset: 0x25, Size: 1]
	byte TeamSize;//[Offset: 0x26, Size: 1]

--------------------------------
Class: MinigameClassSlot
	byte ClassSlotIndex;//[Offset: 0x0, Size: 1]
	FString ClassName;//[Offset: 0x8, Size: 16]
	ItemAndCount[] InventoryItems;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ItemAndCount
	int Count;//[Offset: 0x0, Size: 4]
	FortItemDefinition* Item;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortMinigameStatCollection
	FortMinigameGroupStats GroupStats;//[Offset: 0x0, Size: 16]
	FortMinigamePlayerStats[] PlayerStats;//[Offset: 0x10, Size: 16]
	FortMinigamePlayerBucketStats[] PlayerBucketStats;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortMinigameGroupStats
	FortMinigameStat[] Stats;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortMinigameStat
	class FortMinigameStatFilter* Filter;//[Offset: 0x0, Size: 8]
	int Count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortMinigamePlayerStats.FortMinigameGroupStats
	UniqueNetIdRepl Player;//[Offset: 0x10, Size: 40]

--------------------------------
Class: FortMinigamePlayerBucketStats.FortMinigameGroupStats
	int BucketIndex;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortMinigameTimes
	float SetupTime;//[Offset: 0x0, Size: 4]
	float WarmupTime;//[Offset: 0x4, Size: 4]
	float StartTime;//[Offset: 0x8, Size: 4]
	float EndTime;//[Offset: 0xc, Size: 4]
	float ResetTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortMinigameLogicComponent.ActorComponent.Object
	MulticastInlineDelegateProperty MinigameStateChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty MinigameStartedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty MinigameEndedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayspaceEditModeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnAddedToMinigame;//[Size: 16]
	MulticastInlineDelegateProperty OnRemovedFromMinigame;//[Size: 16]
	GameplayTagContainer MinigameTags;//[Offset: 0x118, Size: 32]
	class FortMinigameStatFilter[] DesiredStats;//[Offset: 0x138, Size: 16]
	bool bIsRelevantForMinigameInitialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bAlwaysTryHandleDelayedStateChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	FortMinigame* CurrentMinigame;//[Offset: 0x150, Size: 8]
	FortMinigame* CachedMinigame;//[Offset: 0x158, Size: 8]
	bool TryAttachToMinigame();// 0xd0c40cc
	void RemoveMinigameTag(out const GameplayTag Tag);// 0xd0c4018
	void HandlePlayspaceEditModeChange(bool bInEditMode);// 0xd0c3f60
	void HandleMinigameStateChanged(FortMinigame* Minigame, enum NewMinigameState);// 0xd0c3e70
	void HandleMinigameStarted();// 0xd0c3e54
	void HandleMinigameSet();// 0xd0c3e38
	void HandleMinigameEnded();// 0xd0c3e1c
	void AddMinigameTag(out const GameplayTag Tag);// 0xd0c3d68

--------------------------------
Class: FortMinigamePlayerStartComponent.FortMinigameLogicComponent.ActorComponent.Object
	bool bIsCheckpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x161, Size: 1]
	FortPlayerStartCreative*[] PlayerStarts;//[Offset: 0x168, Size: 16]
	void StorePlayerCheckpoint(PlayerState* Player);// 0xd0c5ab0
	bool HasAnyCheckpointValue();// 0xd0c5a78
	bool GetPlayerCheckpointLastUsedTime(PlayerState* Player, out DateTime OutTime);// 0xd0c597c

--------------------------------
Class: FortCreativeCreatureManagerComponent.ActorComponent.Object
	FortCreativeCreatureManagerInfoComponent*[] CreatureManagerInfos;//[Offset: 0x100, Size: 16]
	void OnInfoComponentRemoved(FortCreativeCreatureManagerInfoComponent* CreatureManagerInfoComponent);// 0xcfab944
	void OnInfoComponentAdded(FortCreativeCreatureManagerInfoComponent* CreatureManagerInfoComponent);// 0xcfab89c

--------------------------------
Class: FortCreativeCreatureManagerInfoComponent.FortMinigameLogicComponent.ActorComponent.Object
	class FortAIPawn* CreatureBlueprintClass;//[Offset: 0x168, Size: 40]
	int MaxHealth;//[Offset: 0x190, Size: 4]
	float HearingAggroRange;//[Offset: 0x194, Size: 4]
	int ScorePoints;//[Offset: 0x198, Size: 4]
	float DamageCaused;//[Offset: 0x19c, Size: 4]
	float EnvironmentalDamageOverride;//[Offset: 0x1a0, Size: 4]
	float MovementSpeedMultiplier;//[Offset: 0x1a4, Size: 4]
	FortCreativeCreatureManagerComponent* CreatureManagerComponent;//[Offset: 0x1a8, Size: 8]
	class GameplayEffect* DamageOverrideEffect;//[Offset: 0x1b0, Size: 8]
	class GameplayEffect* EnvironmentalDamageOverrideEffect;//[Offset: 0x1b8, Size: 8]
	class GameplayEffect* MovementSpeedOverrideEffect;//[Offset: 0x1c0, Size: 8]
	enum ScoreDistribution;//[Offset: 0x1c8, Size: 1]
	void SetScorePoints(int InScorePoints);// 0xcfacd4c
	void SetScoreDistribution(const enum InScoreDistribution);// 0xcfacca8
	void SetOverrideDamage(float InOverrideDamage);// 0xcfacc04
	void SetMovementSpeedOverrideEffect(class GameplayEffect Effect);// 0xcfacb60
	void SetMovementSpeedMultiplier(float InOverrideMovementSpeedMultiplier);// 0xcfacabc
	void SetMovementOverrideTag(GameplayTag Tag);// 0xcfaca18
	void SetMaxHealth(int InMaxHealth);// 0xcfac974
	void SetHearingAggroRange(float InHearingAggroRange);// 0xcfac8d0
	void SetEnvironmentalDamageOverrideEffect(class GameplayEffect Effect);// 0xcfac82c
	void SetEnvironmentalDamageOverride(float InOverrideDamage);// 0xcfac788
	void SetDamageOverrideTag(GameplayTag Tag);// 0xcfac6e4
	void SetDamageOverrideEffect(class GameplayEffect Effect);// 0xcfac640
	void SetCreatureManagerComponent(FortCreativeCreatureManagerComponent* InCreatureManagerComponent);// 0xcfac59c
	void SetCreatureBlueprintClass(class FortAIPawn InCreatureBlueprintClass);// 0xcfac40c
	void ResetScorePoints();// 0xcfac3f0
	void ResetScoreDistribution();// 0xcfac3dc
	void ResetOverrideDamage();// 0xcfac3c0
	void ResetMovementSpeedMultiplier();// 0xcfac3a0
	void ResetMaxHealth();// 0xcfac384
	void ResetHearingAggroRange();// 0xcfac364
	void ResetEnvironmentalDamageOverride();// 0xcfac348
	int GetScorePoints();// 0xcfac32c
	enum GetScoreDistribution();// 0xcfac310
	float GetOverrideDamage();// 0xcfac2f4
	float GetMovementSpeedMultiplier();// 0xcfac2d8
	int GetMaxHealth();// 0xcfac2bc
	float GetHearingAggroRange();// 0xcfac2a0
	float GetEnvironmentalDamageOverride();// 0xcfac284
	FortCreativeCreatureManagerComponent* GetCreatureManagerComponent();// 0xcfac268
	class FortAIPawn GetCreatureBlueprintClass();// 0xcfac18c

--------------------------------
Class: FortCreativeTeleporterManagerComponent.ActorComponent.Object
	TeleporterGroup[] TeleporterGroupList;//[Offset: 0xb0, Size: 16]
	<FName,TeleporterGroup> TeleporterListedByTeleportToWhenReceived;//[Offset: 0xc0, Size: 80]
	void UnregisterTeleporterFromGroup(FortCreativeTeleporter* TeleporterToUnregister, const enum GroupToUnregisterOn);// 0xcfbde58
	bool RequestPermissionToTeleportPawn(const FortPlayerPawn* PlayerPawn, const FortCreativeTeleporter* RequestingTeleporter, const GameplayTagContainer ChannelIdContainer);// 0xcfbdccc
	void RegisterTeleporterWithGroup(FortCreativeTeleporter* TeleporterToRegister, const enum GroupToRegisterOn);// 0xcfbdbe4
	<FortCreativeTeleporter*> GetTeleportersInGroup(const enum Group);// 0xcfbdb10

--------------------------------
Class: TeleporterGroup
	<FortCreativeTeleporter*> Teleporters;//[Offset: 0x0, Size: 80]

--------------------------------
Class: FortCreativeTeleporter.BuildingProp.BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	class GameplayAbility* TeleporterAbility;//[Offset: 0xbc0, Size: 8]
	enum Knob_TeleporterGroup;//[Offset: 0xbc8, Size: 1]
	enum Knob_TargetTeleporterGroup;//[Offset: 0xbc9, Size: 1]
	FortGameplayReceiverMessageComponent* TeleportToWhenReceived;//[Offset: 0xbd0, Size: 8]
	bool IsTeleporterBlocked(const Actor* ActorToTeleport, out const Rotator InPawnTeleportedRotation);// 0xcfbd8b8
	bool IsPortalDebuggingEnabled();// 0xcfbd880

--------------------------------
Class: BuildingProp.BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	GameplayTagContainer AnalyticsTags;//[Offset: 0xb20, Size: 32]
	bool bSuppressSimpleInteractionWidgetForTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb40, Size: 1]
	bool bCanBeMarked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb40, Size: 1]
	bool bBlockMarking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb40, Size: 1]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0xb48, Size: 104]
	Vector MarkerPositionOffset;//[Offset: 0xbb0, Size: 12]
	bool bDoNotBlockMarkerTraceWhenOverlappingPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbbc, Size: 1]
	void BP_GetEyesViewpoint(out Vector OutLocation, out Rotator OutRotation);// 0xce59094
	float BlueprintModifyIncomingDamage(float Damage, out const GameplayTagContainer InTags, out const GameplayEffectContextHandle EffectContext, Controller* EventInstigator, Actor* DamageCauser);// 0xce58e2c

--------------------------------
Class: BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	bool bUseTimeOfDayControlledLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 1]
	LightComponent*[] TimeOfDayControlledLights;//[Offset: 0xae8, Size: 16]
	Vector[] TimeOfDayControlledLightsPositions;//[Offset: 0xaf8, Size: 16]
	float[] TimeOfDayControlledLightsInitalIntensities;//[Offset: 0xb08, Size: 16]
	void GetTimeOfDayBlueprintDefaultVariables(out TimeOfDayBlueprintDefaultVariables OutVariables);// 0xb5f7bd0

--------------------------------
Class: BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	bool bAutoAssignNavProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae0, Size: 1]

--------------------------------
Class: BuildingSMActor.BuildingActor.Actor.Object
	BuildingTextureData* TextureData;//[Offset: 0x5c8, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x5e8, Size: 8]
	TierMeshSets[] AlternateMeshes;//[Offset: 0x5f0, Size: 16]
	bool bForceReplicateSubObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 1]
	bool bNoPhysicsCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x600, Size: 1]
	bool bNoCameraCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x600, Size: 1]
	bool bNoPawnCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x600, Size: 1]
	bool bNoAIPawnCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x600, Size: 1]
	bool bBlocksCeilingPlacement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x600, Size: 1]
	bool bBlocksAttachmentPlacement;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x600, Size: 1]
	bool bUsePhysicalSurfaceForFootstep;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x600, Size: 1]
	bool bRandomYawOnPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x601, Size: 1]
	bool bRandomScaleOnPlacement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x601, Size: 1]
	bool bClearMIDWhenReturningToUndamagedState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x601, Size: 1]
	byte NumFrameSubObjects;//[Offset: 0x602, Size: 1]
	byte ResourceType;//[Offset: 0x603, Size: 1]
	Vector2D RandomScaleRange;//[Offset: 0x604, Size: 8]
	FName DestructionLootTierGroup;//[Offset: 0x60c, Size: 8]
	CurveLinearColor* WindSpeedCurve;//[Offset: 0x618, Size: 40]
	CurveLinearColor* WindPannerSpeedCurve;//[Offset: 0x640, Size: 40]
	SoundBase* WindAudio;//[Offset: 0x668, Size: 40]
	float ShieldBuffMaterialParamValue1;//[Offset: 0x690, Size: 4]
	float ShieldBuffMaterialParamValue2;//[Offset: 0x694, Size: 4]
	float AnimatingDistanceFieldSelfShadowBias;//[Offset: 0x698, Size: 4]
	float AnimatingSubObjects;//[Offset: 0x69c, Size: 4]
	float PlayerGridSnapSize;//[Offset: 0x6a0, Size: 4]
	int AltMeshIdx;//[Offset: 0x6a4, Size: 4]
	bool bAllowBuildingCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 1]
	bool bMirrored;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f8, Size: 1]
	bool bNoCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f8, Size: 1]
	bool bSupportsRepairing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f8, Size: 1]
	bool bHiddenDueToTrapPlacement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f8, Size: 1]
	bool bAttachmentPlacementBlockedFront;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f8, Size: 1]
	bool bAttachmentPlacementBlockedBack;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f8, Size: 1]
	bool bIsForPreviewing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f8, Size: 1]
	bool bUnderConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f9, Size: 1]
	bool bUnderRepair;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f9, Size: 1]
	bool bIsInitiallyBuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f9, Size: 1]
	bool bCameraOnlyCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f9, Size: 1]
	bool bNoWeaponCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f9, Size: 1]
	bool bNoRangedWeaponCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f9, Size: 1]
	bool bNoProjectileCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f9, Size: 1]
	bool bDoNotBlockInteract;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f9, Size: 1]
	bool bNeedsMIDsForCreative;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6fa, Size: 1]
	bool bAllowResourceDrop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6fa, Size: 1]
	bool bHideOnDeath;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6fa, Size: 1]
	bool bPlayDestructionEffects;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6fa, Size: 1]
	bool bSkipConstructionSounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6fa, Size: 1]
	bool bSupportedDirectly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6fa, Size: 1]
	bool bForciblyStructurallySupported;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6fb, Size: 1]
	bool bRegisterWithStructuralGrid;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6fb, Size: 1]
	bool bCurrentlyBeingEdited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6fb, Size: 1]
	bool bAllowWeakSpots;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6fb, Size: 1]
	bool bUseComplexForWeakSpots;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6fb, Size: 1]
	bool bCanSpawnAtLowerQuotaLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6fb, Size: 1]
	bool bNeedsWindMaterialParameters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6fc, Size: 1]
	bool bPlayBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6fc, Size: 1]
	bool bPropagateBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6fc, Size: 1]
	bool bPropagatesBounceEffects;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6fc, Size: 1]
	bool bNeedsDamageOverlay;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6fc, Size: 1]
	bool bDeriveCurieIdentifierFromResourceType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6fc, Size: 1]
	bool bAllowCustomMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6fc, Size: 1]
	bool bUseSingleMeshCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6fd, Size: 1]
	enum SavedDirectlySupportedStatus;//[Offset: 0x6fe, Size: 1]
	byte MaximumQuotaLevelBound;//[Offset: 0x6ff, Size: 1]
	enum BuildingAnimation;//[Offset: 0x700, Size: 1]
	byte CurAnimSubObjectNum;//[Offset: 0x701, Size: 1]
	byte CurAnimSubObjectTargetNum;//[Offset: 0x702, Size: 1]
	uint16 ActorIndexInFoundation;//[Offset: 0x704, Size: 2]
	FortBounceData BounceData;//[Offset: 0x708, Size: 48]
	float DestroyedTime;//[Offset: 0x738, Size: 4]
	float InfluenceMapWeight;//[Offset: 0x73c, Size: 4]
	StaticMeshComponent* BASEEffectMeshComponent;//[Offset: 0x748, Size: 8]
	BuildingNavObstacle[] NavObstacles;//[Offset: 0x750, Size: 16]
	Vector BuildingPlacementDistance;//[Offset: 0x770, Size: 12]
	Vector_NetQuantize100 ReplicatedDrawScale3D;//[Offset: 0x77c, Size: 12]
	EditorOnlyBuildingInstanceMaterialParameters EditorOnlyInstanceMaterialParameters;//[Offset: 0x788, Size: 48]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x7b8, Size: 8]
	FortWeakPointComponent* WeakPointComponent;//[Offset: 0x7c0, Size: 8]
	MaterialInterface* BaseMaterial;//[Offset: 0x7c8, Size: 8]
	MulticastInlineDelegateProperty OnConstructionComplete;//[Size: 16]
	BuildingActorMinimalReplicationProxy MinimalReplicationProxy;//[Offset: 0x7e0, Size: 4]
	ChosenQuotaInfo DestructionLootTierChosenQuotaInfo;//[Offset: 0x7e4, Size: 12]
	FName DestructionLootTierKey;//[Offset: 0x7f0, Size: 8]
	CurveTableRowHandle BuildingResourceAmountOverride;//[Offset: 0x7f8, Size: 16]
	int MaxResourcesToSpawn;//[Offset: 0x808, Size: 4]
	MaterialInterface*[] IntenseWindMaterials;//[Offset: 0x820, Size: 16]
	ParticleSystem* BreakEffect;//[Offset: 0x830, Size: 8]
	ParticleSystem* DeathParticles;//[Offset: 0x838, Size: 40]
	ParticleSystem* DeathParticlesInst;//[Offset: 0x860, Size: 8]
	FName DeathParticleSocketName;//[Offset: 0x868, Size: 8]
	SoundBase* DeathSound;//[Offset: 0x870, Size: 8]
	ParticleSystem* ConstructedEffect;//[Offset: 0x878, Size: 8]
	RandomDayphaseFX[] RandomDayphaseFXList;//[Offset: 0x880, Size: 16]
	AudioComponent* ConstructionAudioComponent;//[Offset: 0x890, Size: 8]
	FortPawn* CachedDestructionInstigator;//[Offset: 0x898, Size: 8]
	StaticMeshComponent* DamageOverlayComponent;//[Offset: 0x8a0, Size: 8]
	float DamageAmountStart;//[Offset: 0x8a8, Size: 4]
	float LastDamageAmount;//[Offset: 0x8ac, Size: 4]
	Vector LastDamageHitImpulseDir;//[Offset: 0x8b0, Size: 12]
	StaticMeshComponent*[] CachedAnimatingStaticMeshes;//[Offset: 0x8c0, Size: 16]
	MulticastInlineDelegateProperty OnRepairBuildingStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnRepairBuildingFinished;//[Size: 16]
	BuildingEditModeMetadata* EditModePatternData;//[Offset: 0x950, Size: 8]
	int UndermineGroup;//[Offset: 0x958, Size: 4]
	int LogicalBuildingIdx;//[Offset: 0x95c, Size: 4]
	AnimatingMaterialPair[] AnimatingMaterialMappings;//[Offset: 0x960, Size: 16]
	AnimatingMaterialPair[] DamagedButNotAnimatingMaterialMappings;//[Offset: 0x970, Size: 16]
	class BuildingEditModeSupport* EditModeSupportClass;//[Offset: 0x980, Size: 8]
	BuildingEditModeSupport* EditModeSupport;//[Offset: 0x988, Size: 8]
	float HealthToAutoBuild;//[Offset: 0x990, Size: 4]
	float AccumulatedAutoBuildTime;//[Offset: 0x994, Size: 4]
	byte BuildingReplacementType;//[Offset: 0x998, Size: 1]
	byte ReplacementDestructionReason;//[Offset: 0x999, Size: 1]
	enum CurBuildingAnimType;//[Offset: 0x99a, Size: 1]
	enum DamageVisualsState;//[Offset: 0x99b, Size: 1]
	float CurBuildProgress;//[Offset: 0x99c, Size: 4]
	float OutwardMotionMagnitude;//[Offset: 0x9a0, Size: 4]
	float CurBuildingAnimStartTime;//[Offset: 0x9a4, Size: 4]
	MaterialInstanceConstant*[] BlueprintMICs;//[Offset: 0x9a8, Size: 16]
	MaterialInstanceDynamic*[] BlueprintMIDs;//[Offset: 0x9b8, Size: 16]
	StaticMeshComponent* BlueprintMeshComp;//[Offset: 0x9c8, Size: 8]
	FortPlayerStateZone* EditingPlayer;//[Offset: 0x9d0, Size: 8]
	Vector BuildingAttachmentPointOffset;//[Offset: 0x9f8, Size: 12]
	float BuildingAttachmentRadius;//[Offset: 0xa04, Size: 4]
	byte BuildingAttachmentSlot;//[Offset: 0xa08, Size: 1]
	byte BuildingAttachmentType;//[Offset: 0xa09, Size: 1]
	byte BuildingPlacementType;//[Offset: 0xa0a, Size: 1]
	enum LastStructuralCheck;//[Offset: 0xa0b, Size: 1]
	BuildingSMActor* ParentActorToAttachTo;//[Offset: 0xa10, Size: 8]
	BuildingActor*[] AttachedBuildingActors;//[Offset: 0xa18, Size: 16]
	BuildingActor*[] BuildingActorsAttachedTo;//[Offset: 0xa28, Size: 16]
	MulticastInlineDelegateProperty OnTrapPlacementChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplacementDestruction;//[Size: 16]
	BuildingActor* AttachmentPlacementBlockingActors;//[Offset: 0xa58, Size: 8]
	BuildingFoundation* Foundation;//[Offset: 0xa68, Size: 8]
	BuildingSMActor* DamagerOwner;//[Offset: 0xa88, Size: 8]
	FortConstructorBASE* RelevantBASE;//[Offset: 0xa90, Size: 8]
	FortConstructorBASE* LastRelevantBASE;//[Offset: 0xaa0, Size: 8]
	ProxyGameplayCueDamage ProxyGameplayCueDamage;//[Offset: 0xac0, Size: 32]
	bool WillRegisterWithStructuralGrid();// 0xce66e08
	void UpdateRepairMaterialAnim(float CurveValue);// 0xb5f6a3c
	void UpdateLODOverrideEffect(float CurveValue);// 0xce66d58
	void UpdateDynamicShrinkAndDestroyEffect(float CurveValue);// 0xce66ca8
	void UpdateComponentCollisionModes();// 0xce66c94
	void TransferFromDuplicationData(BuildingDuplicationData SourceData);// 0xce66bd4
	void TransferBuildingData(BuildingSMActor* SourceDataActor);// 0xce66b2c
	void StartBounceAnimation(const float StartTime, const float Radius, out const Vector Normal, out const Vector Center, byte InBounceType, const bool bLocalInstigator);// 0xb5f6828
	void SetTextureData(out const Texture2D*[] InTextures);// 0xce66a6c
	void SetParentActorToAttachTo(BuildingSMActor* InParentActorToAttachTo);// 0xce669c4
	void SetMirrored(bool bIsMirrored);// 0xce6690c
	void SetDeathParticles(ParticleSystem* InPS);// 0xce66868
	void SetBuildingTextureData(const int Index, BuildingTextureData* NewBuildingTextureData);// 0xce66780
	void RepairBuilding(FortPlayerController* RepairingController, int ResourcesSpent);// 0xce66690
	Texture2D*[] ReadTextureData();// 0xce665f0
	void PreForceMove(Controller* EventInstigator);// 0xce66540
	void PostForceMove();// 0xce66524
	void PlayFullHealthEffects();// 0xce66508
	void PlayDestructionEffects();// 0xce664ec
	void PlayConstructionBounce();// 0xce664d0
	void PlayBreakEffects();// 0xce664b4
	void OnRepairStarted();// 0xbbc0600
	void OnRep_ResourceType(byte OldType);// 0xb5f6778
	void OnRep_ReplicationProxy();// 0xb5f6764
	void OnRep_ReplicatedDrawScale3D();// 0xb5f6748
	void OnRep_RelevantBASE();// 0xce66498
	void OnRep_ProxyGameplayCueDamage();// 0xb5f6734
	void OnRep_NoCollision();// 0xce66484
	void OnRep_NoCameraCollision();// 0xce66470
	void OnRep_MetaData();// 0xb5f6718
	void OnRep_HiddenDueToTrapPlacement();// 0xce66454
	void OnRep_EditingPlayer();// 0xb5f66fc
	void OnRep_bUnderRepair();// 0xb5f66e0
	void OnRep_bUnderConstruction();// 0xb5f66c4
	void OnRep_BuildingAnimation();// 0xb5f66b0
	void OnLODOverrideEffectFinished();// 0xce66438
	void OnIsForPreviewingChangedBP(const bool bNewIsForPreviewing);// 0xbbc0600
	void OnDynamicShrinkAndDestroyEffectFinished();// 0xce6641c
	void OnDetachFromBuilding(BuildingActor* AttachedToBuilding, bool bBeingDestroyed);// 0xbbc0600
	void OnBounceAnimationUpdate(out const FortBounceData Data);// 0xbbc0600
	void OnAttachToBuilding(BuildingActor* AttachedToBuilding);// 0xbbc0600
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xce660a4
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xce65e40
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xce65ac8
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xb5f633c
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0xb5f607c
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xce658ac
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0xce6557c
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0xce653e4
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0xce650b4
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0xce64e98
	void MulticastPlayFullHealthEffects();// 0xce64e7c
	void MarkConnectedBuildingsForStructuralIntegrityCheck();// 0xce64e68
	bool IsUnderConstruction();// 0xce64e48
	bool IsSupportedByWorld();// 0xce64e08
	bool IsStructurallySupported();// 0xce64dc8
	bool HasDestructionLoot();// 0xb5f6044
	CurveLinearColor* GetWindSpeedCurveForPreview();// 0xce64d94
	CurveLinearColor* GetWindPannerSpeedCurveForPreview();// 0xce64d60
	float GetWeakSpotEnabledTimeout(FortPlayerController* Controller);// 0xce64ca8
	byte GetReplacementDestructionReason();// 0xce64c6c
	MaterialInterface* GetOverrideMeshMaterial(StaticMeshComponent* MeshComp, int MatIdx);// 0xbbc0600
	MaterialInstanceDynamic* GetOrCreateMIDOnDefaultMesh(int ElementIndex);// 0xb5f5f94
	int GetLogicalBuildingIndex();// 0xce64c30
	bool GetIntenseWindMaterialsForPreview(out MaterialInterface*[] Materials);// 0xce64b64
	BuildingDuplicationData GetDuplicationData();// 0xce64af8
	FName GetDestructionLootTierGroup();// 0xce64ad8
	ParticleSystem* GetDeathParticles();// 0xce64abc
	void GetBuildingTextureData(out BuildingTextureData*[] OutTextureDataArray);// 0xce649fc
	StaticMeshComponent* GetBuildingMeshComponent();// 0xb5f5f60
	BuildingSMActor*[] GetAttachedBuildingSMActors();// 0xce6495c
	BuildingActor*[] GetAttachedBuildingActors();// 0xce648a4
	void GameplayCue_Abilities_Activation_Generic_BannerWallBuff2(byte EventType, GameplayCueParameters Parameters);// 0xce645b4
	void GameplayCue_Abilities_Activation_Generic_BannerWallBuff1(byte EventType, GameplayCueParameters Parameters);// 0xce642c4
	void ForceVisualState(enum VisualState);// 0xce64214
	void ForceIntoStructuralGridDuringRuntime();// 0xce641f8
	int FindDestructionLootTier();// 0xce641c4
	void EditorOnlySetInstanceMaterialVectorParameter(FName ParamName, LinearColor Value);// 0xce640dc
	void EditorOnlySetInstanceMaterialTextureParameter(FName ParamName, Texture* Value);// 0xce63ff8
	void EditorOnlySetInstanceMaterialScalarParameter(FName ParamName, float Value);// 0xce63f10
	void EditorOnlyRemoveInstanceMaterialVectorParameter(FName ParamName);// 0xce63e68
	void EditorOnlyRemoveInstanceMaterialTextureParameter(FName ParamName);// 0xce63dc0
	void EditorOnlyRemoveInstanceMaterialScalarParameter(FName ParamName);// 0xce63d18
	void DetachBuildingActorFromMe(BuildingActor* ActorToAttach, bool bBeingDestroyed, Controller* Killer);// 0xce63be0
	void ClearRequestedBuildingAnimation();// 0xce63bcc
	bool CanDoBuildingAnimations();// 0xce63b8c
	void CancelAutoBuild();// 0xce63b70
	void BlueprintOnStructurallyUnstable();// 0xce63b54
	void BlueprintOnStructurallyStable();// 0xce63b38
	bool BlueprintCanAttemptGenerateResources(out const GameplayTagContainer InTags, Controller* InstigatorController);// 0xce63a08
	void AttachBuildingActorToMe(BuildingActor* ActorToAttach, bool bForceAttachment);// 0xce63910
	void AddToGrid();// 0xce638fc

--------------------------------
Class: MarkedActorDisplayInfo
	FText DisplayName;//[Offset: 0x0, Size: 24]
	Texture2D* Icon;//[Offset: 0x18, Size: 40]
	class UserWidget* CustomIndicatorClass;//[Offset: 0x40, Size: 8]
	LinearColor PrimaryColor;//[Offset: 0x48, Size: 16]
	SoundBase* Sound;//[Offset: 0x58, Size: 8]
	enum ScreenClamping;//[Offset: 0x60, Size: 1]

--------------------------------
Class: BuildingDuplicationData
	class Object* ClassData;//[Offset: 0x0, Size: 8]
	BuildingTextureData* TextureData;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuildingTextureData.DataAsset.Object
	Texture2D* Diffuse;//[Offset: 0x30, Size: 8]
	Texture2D* Normal;//[Offset: 0x38, Size: 8]
	Texture2D* Specular;//[Offset: 0x40, Size: 8]
	MaterialInterface* OverrideMaterial;//[Offset: 0x48, Size: 8]
	byte Type;//[Offset: 0x50, Size: 1]
	byte ResourceType;//[Offset: 0x51, Size: 1]
	float ResourceCost;//[Offset: 0x54, Size: 4]

--------------------------------
Class: TimeOfDayBlueprintDefaultVariables
	StaticMesh* AlternateShadowStaticMesh;//[Offset: 0x0, Size: 8]
	float VolumetricLightScatteringIntensity;//[Offset: 0x8, Size: 4]
	bool bDisableTODLightsAndMaterialEmissiveValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bDisableStaticMeshShadowCastingWhenLightsAreActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bUseAnAlternateShadowMeshWhenTheLightIsOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bCastVolumetricShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]

--------------------------------
Class: FortGameplayReceiverMessageComponent.FortGameplayMessageComponentBase.ActorComponent.Object
	MulticastInlineDelegateProperty OnGameplayMessageReceived;//[Size: 16]

--------------------------------
Class: FortGameplayMessageComponentBase.ActorComponent.Object
	MulticastInlineDelegateProperty OnChannelIdsReplicated;//[Size: 16]
	GameplayTagContainer FilterTags;//[Offset: 0xe8, Size: 32]
	FText MessageName;//[Offset: 0x108, Size: 24]
	FText MessageDescription;//[Offset: 0x120, Size: 24]
	GameplayTagContainer ChannelIds;//[Offset: 0x138, Size: 32]
	int WeightOffset;//[Offset: 0x158, Size: 4]
	class UserWidget* EditWidget;//[Offset: 0x160, Size: 8]
	GameplayTagContainer Tags;//[Offset: 0x168, Size: 32]
	void SetChannelId(out const GameplayTagContainer NewChannelIds);// 0xcffef5c
	void OnRep_ChannelIds();// 0xcffef48
	bool IsEnabled();// 0xcffef10
	bool IsChannelIdSet();// 0xcffeed8
	FText GetMessageName();// 0xcffee28
	FText GetMessageDescription();// 0xcffed78
	int GetMessageChannelIndex();// 0xcffed44
	FText GetDisabledReason();// 0xcffec74
	GameplayTagContainer GetChannelId();// 0xcffebe4

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x224, Size: 4]
	float MaxDrawDistance;//[Offset: 0x228, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x22c, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	int ShadowMapChannel;//[Offset: 0x234, Size: 4]
	float MinRoughness;//[Offset: 0x23c, Size: 4]
	float SpecularScale;//[Offset: 0x240, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x244, Size: 4]
	float ShadowBias;//[Offset: 0x248, Size: 4]
	float ShadowSlopeBias;//[Offset: 0x24c, Size: 4]
	float ShadowSharpen;//[Offset: 0x250, Size: 4]
	float ContactShadowLength;//[Offset: 0x254, Size: 4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x259, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x260, Size: 8]
	Vector LightFunctionScale;//[Offset: 0x268, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x278, Size: 8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	float IESBrightnessScale;//[Offset: 0x284, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x288, Size: 4]
	float DisabledBrightness;//[Offset: 0x28c, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 1]
	float BloomScale;//[Offset: 0x294, Size: 4]
	float BloomThreshold;//[Offset: 0x298, Size: 4]
	float BloomMaxBrightness;//[Offset: 0x29c, Size: 4]
	Color BloomTint;//[Offset: 0x2a0, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2a8, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xd88e678
	void SetUseIESBrightness(bool bNewValue);// 0xd88e5c8
	void SetTransmission(bool bNewValue);// 0xd88e518
	void SetTemperature(float NewTemperature);// 0xd88e470
	void SetSpecularScale(float NewValue);// 0xd88e3c8
	void SetShadowSlopeBias(float NewValue);// 0xd88e320
	void SetShadowBias(float NewValue);// 0xd88e278
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xd88e130
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0xd88e088
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0xd88dfe0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0xd88df38
	void SetLightFunctionDisabledBrightness(float NewValue);// 0xd88de90
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0xd88dda0
	void SetIntensity(float NewIntensity);// 0xba100f8
	void SetIndirectLightingIntensity(float NewIntensity);// 0xd88dcf8
	void SetIESTexture(TextureLightProfile* NewValue);// 0xd88dc50
	void SetIESBrightnessScale(float NewValue);// 0xd88dba8
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0xba10048
	void SetEnableLightShaftBloom(bool bNewValue);// 0xd88daf8
	void SetBloomTint(Color NewValue);// 0xd88da54
	void SetBloomThreshold(float NewValue);// 0xd88d9ac
	void SetBloomScale(float NewValue);// 0xd88d904
	void SetBloomMaxBrightness(float NewValue);// 0xd88d85c
	void SetAffectTranslucentLighting(bool bNewValue);// 0xd88d7ac
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0xd88d6fc

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	GUID LightGuid;//[Offset: 0x1f4, Size: 16]
	float Brightness;//[Offset: 0x204, Size: 4]
	float Intensity;//[Offset: 0x208, Size: 4]
	Color LightColor;//[Offset: 0x20c, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 1]
	float DeepShadowLayerDistribution;//[Offset: 0x214, Size: 4]
	float IndirectLightingIntensity;//[Offset: 0x218, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x21c, Size: 4]
	int SamplesPerPixel;//[Offset: 0x220, Size: 4]
	void SetSamplesPerPixel(int NewValue);// 0xd88d654
	void SetCastVolumetricShadow(bool bNewValue);// 0xd88d5a4
	void SetCastShadows(bool bNewValue);// 0xd88d4f4
	void SetCastRaytracedShadow(bool bNewValue);// 0xd88d444
	void SetCastDeepShadow(bool bNewValue);// 0xd88d394
	void SetAffectReflection(bool bNewValue);// 0xd88d2e4
	void SetAffectGlobalIllumination(bool bNewValue);// 0xd88d234
	LinearColor GetLightColor();// 0xd88d1fc

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x100, Size: 4]
	float TextureMultiplier;//[Offset: 0x104, Size: 4]

--------------------------------
Class: FortBounceData
	float StartTime;//[Offset: 0x0, Size: 4]
	float BounceValue;//[Offset: 0x4, Size: 4]
	float Radius;//[Offset: 0x8, Size: 4]
	LinearColor DeformationVector;//[Offset: 0xc, Size: 16]
	LinearColor DeformationCenter;//[Offset: 0x1c, Size: 16]
	byte BounceType;//[Offset: 0x2c, Size: 1]
	bool bLocalInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]

--------------------------------
Class: TierMeshSets
	int Tier;//[Offset: 0x0, Size: 4]
	MeshSet[] MeshSets;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MeshSet
	float Weight;//[Offset: 0x0, Size: 4]
	byte ResourceType;//[Offset: 0x4, Size: 1]
	bool bDoNotBlockBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bDestroyOnPlayerBuildingPlacement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bNeedsDamageOverlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	StaticMesh* BaseMesh;//[Offset: 0x8, Size: 8]
	ParticleSystem* BreakEffect;//[Offset: 0x10, Size: 8]
	ParticleSystem* DeathParticles;//[Offset: 0x18, Size: 8]
	FName DeathParticleSocketName;//[Offset: 0x20, Size: 8]
	SoundBase* DeathSound;//[Offset: 0x28, Size: 8]
	ParticleSystem* ConstructedEffect;//[Offset: 0x30, Size: 8]
	TaggedParticleSubstitution[] SwapInParticles;//[Offset: 0x38, Size: 16]
	TaggedSoundSubstitution[] SwapInSounds;//[Offset: 0x48, Size: 16]
	TaggedStaticMeshSubstitution[] SwapInMeshes;//[Offset: 0x58, Size: 16]
	TaggedInLightProperties[] SwapInLightProperties;//[Offset: 0x68, Size: 16]
	AddOrRemoveGameplayTags BuildingOwnedTagDelta;//[Offset: 0x78, Size: 64]
	StaticMesh* SearchedMesh;//[Offset: 0xb8, Size: 8]
	CurveTableRowHandle SearchSpeed;//[Offset: 0xc0, Size: 16]
	float LootNoiseRange;//[Offset: 0xd0, Size: 4]
	Vector LootSpawnLocation;//[Offset: 0xd4, Size: 12]

--------------------------------
Class: TaggedParticleSubstitution
	FName Tag;//[Offset: 0x0, Size: 8]
	ParticleSystem* Substitute;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TaggedSoundSubstitution
	FName Tag;//[Offset: 0x0, Size: 8]
	SoundBase* Substitute;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TaggedStaticMeshSubstitution
	FName Tag;//[Offset: 0x0, Size: 8]
	StaticMesh* Substitute;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TaggedInLightProperties
	FName Tag;//[Offset: 0x0, Size: 8]
	LightProperty_Color ColorSubstitute;//[Offset: 0x8, Size: 24]

--------------------------------
Class: LightProperty_Color
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	LinearColor Color;//[Offset: 0x4, Size: 16]
	bool bUsingSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: AddOrRemoveGameplayTags
	GameplayTagContainer Added;//[Offset: 0x0, Size: 32]
	GameplayTagContainer Removed;//[Offset: 0x20, Size: 32]

--------------------------------
Class: BuildingNavObstacle
	Box LocalBounds;//[Offset: 0x0, Size: 28]
	enum ObstacleType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: EditorOnlyBuildingInstanceMaterialParameters
	ScalarParameterValue[] ScalarParams;//[Offset: 0x0, Size: 16]
	VectorParameterValue[] VectorParams;//[Offset: 0x10, Size: 16]
	TextureParameterValue[] TextureParams;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortWeakPointComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnWeakpointHit;//[Size: 16]
	delegate ShouldKillWeakSpotDynamic;//[Offset: 0x210, Size: 16]
	byte PrimarySurfaceType;//[Offset: 0x238, Size: 1]
	bool bUseComplexForWeakSpots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bWeakPointsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	void SetWeakPointsEnabled(bool bEnabled);// 0xd214dac
	void NetMulticast_HandleOwnerDamaged(GameplayTag MatchingTag, const GameplayEventData Payload);// 0xd214ab0

--------------------------------
Class: BuildingActorMinimalReplicationProxy
	int16 Health;//[Offset: 0x0, Size: 2]
	int16 MaxHealth;//[Offset: 0x2, Size: 2]

--------------------------------
Class: ChosenQuotaInfo
	int LootTier;//[Offset: 0x0, Size: 4]
	FName LootTierKey;//[Offset: 0x4, Size: 8]

--------------------------------
Class: RandomDayphaseFX
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 8]
	ParticleSystem*[] AltParticleSystems;//[Offset: 0x8, Size: 16]
	byte[] RequiredDayphases;//[Offset: 0x18, Size: 16]
	float ChanceToSpawnFX;//[Offset: 0x28, Size: 4]
	byte DetailMode;//[Offset: 0x2c, Size: 1]
	float MaxDrawDistance;//[Offset: 0x30, Size: 4]
	bool bRandomSelectionAlreadyHappened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x38, Size: 8]

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 8]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 16]
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 1]
	FName AudioComponentUserID;//[Offset: 0x220, Size: 8]
	float PitchModulationMin;//[Offset: 0x228, Size: 4]
	float PitchModulationMax;//[Offset: 0x22c, Size: 4]
	float VolumeModulationMin;//[Offset: 0x230, Size: 4]
	float VolumeModulationMax;//[Offset: 0x234, Size: 4]
	float VolumeMultiplier;//[Offset: 0x238, Size: 4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 4]
	float Priority;//[Offset: 0x244, Size: 4]
	float SubtitlePriority;//[Offset: 0x248, Size: 4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 8]
	float PitchMultiplier;//[Offset: 0x258, Size: 4]
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 928]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 80]
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 72]
	MulticastInlineDelegateProperty OnAudioPlayStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnAudioVirtualizationChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnAudioFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnAudioPlaybackPercent;//[Size: 16]
	MulticastInlineDelegateProperty OnAudioSingleEnvelopeValue;//[Size: 16]
	MulticastInlineDelegateProperty OnAudioMultiEnvelopeValue;//[Size: 16]
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 16]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 8]
	void StopDelayed(float DelayTime);// 0xd7e2c08
	void Stop();// 0xb9ece18
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0xb9ecd34
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0xb9ecc8c
	void SetUISound(bool bInUISound);// 0xd7e2b58
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xd7e2a70
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0xd7e2988
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0xd7e28a0
	void SetSound(SoundBase* NewSound);// 0xb9ecbe4
	void SetPitchMultiplier(float NewPitchMultiplier);// 0xd7e27f8
	void SetPaused(bool bPause);// 0xd7e2748
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0xd7e2698
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xd7e25f0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xd7e2540
	void SetIntParameter(FName InName, int inInt);// 0xb9ecafc
	void SetFloatParameter(FName InName, float InFloat);// 0xb9eca14
	void SetBoolParameter(FName InName, bool InBool);// 0xd7e2450
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0xd7e2368
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0xd7e2280
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0xd7e1fb4
	void Play(float StartTime);// 0xb9ec964
	bool IsVirtualized();// 0xd7e1f7c
	bool IsPlaying();// 0xb9ec924
	bool HasCookedFFTData();// 0xd7e1f44
	bool HasCookedAmplitudeEnvelopeData();// 0xd7e1f0c
	enum GetPlayState();// 0xd7e1ed8
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0xd7e1e10
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0xd7e1ce0
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0xd7e1c14
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0xd7e1b54
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0xb9ec7f8
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0xb9ec68c
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xd7e1a80
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0xd7e195c
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0xd7e189c

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 8]
	float FloatParam;//[Offset: 0x8, Size: 4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int IntParam;//[Offset: 0x10, Size: 4]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 8]

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary);// 0xa8adb4c
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject);// 0xa8adaa4
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent);// 0xa8add50
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent);// 0xa8adc40
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float TicksPerSecond);// 0xa8ad734
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float ThirtySecondsNotesPerMinute);// 0xa8ad3c4
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float SecondsPerTick);// 0xa8ad57c
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float MillisecondsPerTick);// 0xa8ad8ec
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float BeatsPerMinute);// 0xa8ad20c
	void ResumeClock(const Object* WorldContextObject);// 0xa8adfbc
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0xa8adeac
	void PauseClock(const Object* WorldContextObject);// 0xa8ae064
	float GetTicksPerSecond(const Object* WorldContextObject);// 0xa8ad0ac
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0xa8acf4c
	float GetSecondsPerTick(const Object* WorldContextObject);// 0xa8acffc
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0xa8ad15c
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0xa8ace9c

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 1]
	float Multiplier;//[Offset: 0x4, Size: 4]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 16]
	float PlaybackTime;//[Offset: 0x10, Size: 4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 8]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 4]
	float Magnitude;//[Offset: 0x4, Size: 4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 4]
	float PlaybackTime;//[Offset: 0x4, Size: 4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuildingEditModeMetadata.DataAsset.Object
	bool bSupportNextPieceAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bHasNavigableOpening;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bHasCustomAttackLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	BuildingActorHotSpotConfig* DefaultHotspotConfig;//[Offset: 0x38, Size: 8]
	AIHotSpotConfig* ShootingHotSpotConfig;//[Offset: 0x40, Size: 8]
	ConnectivityCube ConnectivityCubeData;//[Offset: 0x50, Size: 192]

--------------------------------
Class: BuildingActorHotSpotConfig.DataAsset.Object
	BuildingActorHotSpotDirection DirectionSetup;//[Offset: 0x30, Size: 24]
	BuildingActorHotSpotDirection DefaultSetup;//[Offset: 0xc0, Size: 24]
	AIHotSpotConfig* ExtraTypeConfig;//[Offset: 0xd8, Size: 8]
	bool bHasDirectionalSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: BuildingActorHotSpotDirection
	AIHotSpotConfig* HotSpotConfig;//[Offset: 0x0, Size: 8]
	Vector Offset;//[Offset: 0x8, Size: 12]
	bool bMirrorX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bMirrorY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	enum Direction;//[Offset: 0x15, Size: 1]
	enum TypeConfigUsage;//[Offset: 0x16, Size: 1]

--------------------------------
Class: AIHotSpotConfig.DataAsset.Object
	AIHotSpotSlotConfig[] Slots;//[Offset: 0x30, Size: 16]
	bool bDetectUnreachableSlots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	AIHotSpotSlotGenerator* SlotGenerator;//[Offset: 0x48, Size: 8]

--------------------------------
Class: AIHotSpotSlotConfig
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Direction;//[Offset: 0xc, Size: 12]
	enum SlotType;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIHotSpotSlotGenerator.Object
	AIHotSpot* GetHotSpot();// 0xce25e38
	void GenerateSlots();// 0xce25e1c
	AIHotSpotSlot* AddSlot(out const Vector RelativeLocation, out const Rotator RelativeRotation, class AIHotSpotSlot CustomSlotClass, bool bEnabled);// 0xce25c84

--------------------------------
Class: AIHotSpot.Actor.Object
	AIHotSpotSlot*[] UserSlots;//[Offset: 0x228, Size: 16]
	AIHotSpotSlotGenerator* SlotGenerator;//[Offset: 0x238, Size: 8]
	AIHotSpotSlot*[] Slots;//[Offset: 0x240, Size: 16]
	Actor* FocusActor;//[Offset: 0x250, Size: 8]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x258, Size: 8]
	Vector CustomNavmeshSearchExtent;//[Offset: 0x260, Size: 12]
	bool bStartEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 1]
	bool bAllowSlotlessAssignment;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 1]
	bool bAllowClaimingMultipleSlots;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 1]
	bool bTrackOverlappingSlots;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 1]
	bool bProjectSlotsOnNavmesh;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26c, Size: 1]
	bool bCustomNavmeshSearchExtent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26c, Size: 1]
	AIController*[] NoSlotAssignees;//[Offset: 0x270, Size: 16]
	PrimitiveComponent* RenderingComponent;//[Offset: 0x390, Size: 8]
	BillboardComponent* SpriteComponent;//[Offset: 0x398, Size: 8]
	void SetEnabled(bool bEnabled);// 0xce28b60
	int RemoveGroupFromHotspot(AIController*[] GroupOfAI);// 0xce28a74
	bool RemoveFromHotspot(AIController* AI, bool bAssignFromWaitingList);// 0xce28970
	void OnSlotOccupied(AIController* AI, int Index, int UserId);// 0xce28844
	void OnSlotFreed(AIController* AI, int Index, int UserId);// 0xce28718
	void OnSlotEnabled(int Index, int UserId);// 0xce2862c
	void OnSlotDisabled(int Index, int UserId);// 0xce28540
	void OnSlotClaimed(AIController* AI, int Index, int UserId);// 0xce28414
	void OnSlotBlocked(AIController* AI, int Index, int UserId);// 0xce282e8
	void OnRemovedSlotlessBehavior(AIController* AI, bool bIsClamingSlot);// 0xce281f0
	void OnRemovedBehavior(AIController* AI, int Index, int UserId, enum PrevState, bool bWasOnWaitingList);// 0xce2803c
	void OnMoveToSlotFinished(AIController* AI, int Index, int UserId, bool bResult);// 0xce27ec8
	void OnHotSpotEnabled();// 0xce27eac
	void OnHotSpotDisabled();// 0xce27e90
	bool OnAssignedSlotlessBehavior(AIController* AI);// 0xce27dd4
	bool OnAssignedOccupiedBehavior(AIController* AI, int Index, int UserId);// 0xce27c9c
	bool OnAssignedClaimedBehavior(AIController* AI, int Index, int UserId, bool bWasOnWaitingList);// 0xce27b1c
	bool OccupySlotByIndex(int Index);// 0xce27a60
	bool IsSlotlessAssignmentAllowed();// 0xce27a28
	bool IsEnabled();// 0xce279f0
	bool IsAIAllowed(const AIController* AI);// 0xce27934
	bool HasEnabledSlots();// 0xce278fc
	bool HasAssignedAI(const AIController* AI, enum Filter);// 0xce27808
	int GetSlotUserIdByIndex(int Index);// 0xce27758
	enum GetSlotStateByOwner(const AIController* AIOwner);// 0xce276a8
	enum GetSlotStateByIndex(int Index);// 0xce275f8
	Rotator GetSlotRotationByIndex(int Index);// 0xce27544
	AIController* GetSlotOwnerByIndex(int Index);// 0xce27494
	Vector GetSlotLocationByIndex(int Index);// 0xce273e0
	int GetSlotIndexByOwner(const AIController* AIOwner);// 0xce27330
	int GetSlotCount(enum Filter);// 0xce27280
	AIHotSpotSlot* GetSlotByOwner(const AIController* AIOwner);// 0xce271d0
	AIHotSpotSlot* GetSlotByIndex(int Index);// 0xce27120
	int GetAssignedAICount(enum Filter);// 0xce27070
	AIController*[] GetAssignedAI(enum Filter);// 0xce26f84
	int[] FindBestSlotIndices(AIController*[] AI);// 0xce26e54
	int FindBestSlotIndex(AIController* AI);// 0xce26d9c
	bool CanUseSlotByIndex(const AIController* AI, int Index);// 0xce26ca8
	bool AssignToSlotByIndex(AIController* AI, int Index);// 0xce26bac
	bool AssignToHotspot(AIController* AI);// 0xce26af0
	int AssignGroupToHotspot(AIController*[] GroupOfAI);// 0xce26a04
	void AssignFromWaitingList();// 0xce269f0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 8]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 8]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 8]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 16]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0xaf46940
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0xaf467f0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0xaf46388
	void SetMoveBlockDetection(bool bEnable);// 0xaf46b08
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0xaf46a4c
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0xbbc0600
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0xaf46468
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xaf46c5c
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0xaf46f30
	void K2_SetFocus(Actor* NewFocus);// 0xaf465ac
	void K2_SetFocalPoint(Vector FP);// 0xaf46654
	void K2_ClearFocus();// 0xaf46564
	bool HasPartialPath();// 0xaf46bf0
	PathFollowingComponent* GetPathFollowingComponent();// 0xaf4644c
	byte GetMoveStatus();// 0xaf46c28
	Vector GetImmediateMoveDestination();// 0xaf46bb8
	Actor* GetFocusActor();// 0xaf46578
	Vector GetFocalPointOnActor(const Actor* Actor);// 0xaf466fc
	Vector GetFocalPoint();// 0xaf467b8
	AIPerceptionComponent* GetAIPerceptionComponent();// 0xaf46430
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0xaf46898

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 16]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 16]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0xaf55b28
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0xaf55d18
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0xaf55a30
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0xaf5634c
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0xaf55c20
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0xaf56064
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0xaf55f6c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0xaf5615c
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0xaf56254
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0xaf55e6c
	bool IsVectorValueSet(out const FName KeyName);// 0xaf55970
	Vector GetValueAsVector(out const FName KeyName);// 0xaf56504
	FString GetValueAsString(out const FName KeyName);// 0xaf56680
	Rotator GetValueAsRotator(out const FName KeyName);// 0xaf56444
	Object* GetValueAsObject(out const FName KeyName);// 0xaf56b34
	FName GetValueAsName(out const FName KeyName);// 0xaf565c4
	int GetValueAsInt(out const FName KeyName);// 0xaf56900
	float GetValueAsFloat(out const FName KeyName);// 0xaf56844
	byte GetValueAsEnum(out const FName KeyName);// 0xaf569bc
	class Object GetValueAsClass(out const FName KeyName);// 0xaf56a78
	bool GetValueAsBool(out const FName KeyName);// 0xaf56784
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0xaf55748
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0xaf5585c
	void ClearValue(out const FName KeyName);// 0xaf55694

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 8]
	void StopLogic(FString Reason);// 0xaf57cd8
	void StartLogic();// 0xaf57db0
	void RestartLogic();// 0xaf57d94
	bool IsRunning();// 0xaf57c98
	bool IsPaused();// 0xaf57c58

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 8]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 8]
	void OnNavDataRegistered(NavigationData* NavData);// 0xaf717ac
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xaf718c0
	Vector GetPathDestination();// 0xaf71854
	byte GetPathActionType();// 0xaf7188c

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 8]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 120]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2a9, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2ac, Size: 4]
	uint32 DataVersion;//[Offset: 0x2b0, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 16]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 8]
	Color Color;//[Offset: 0x38, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 12]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 40]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 16]
	int AreaID;//[Offset: 0x10, Size: 4]
	class Object* AreaClass;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 16]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 8]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnTargetPerceptionInfoUpdated;//[Size: 16]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0xaf48098
	void RequestStimuliListenerUpdate();// 0xaf487b4
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0xaf487c8
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0xaf485d4
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0xaf486e0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xaf482b0
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xaf483bc
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0xaf484c8
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0xaf48194
	void ForgetAll();// 0xaf487a0

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 4]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 16]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0xaf4cca8
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0xaf4cd88
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0xaf4cb68
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0xaf4c930
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0xaf4ca24

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 8]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x24, Size: 8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 24]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 24]
	float AcceptanceRadius;//[Offset: 0x88, Size: 4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 16]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 8]
	void AILoggingVerbose();// 0xaf4f16c
	void AIIgnorePlayers();// 0xaf4f188

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 16]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 16]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 16]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 16]
	BTService*[] Services;//[Offset: 0x68, Size: 16]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 16]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 16]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 16]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 16]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 4]
	float RandomDeviation;//[Offset: 0x5c, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 16]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0xaf54e6c
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0xaf550ac
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0xaf54f64

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 16]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 16]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 16]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 8]
	double ExecutionTimeWarningSeconds;//[Offset: 0x140, Size: 8]
	double HandlingResultTimeWarningSeconds;//[Offset: 0x148, Size: 8]
	double GenerationTimeWarningSeconds;//[Offset: 0x150, Size: 8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0xaf6a130

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 16]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 16]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 4]
	byte TestPurpose;//[Offset: 0x30, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 16]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 56]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 56]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 56]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 56]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 56]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 56]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 56]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 8]
	FName DataField;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 8]
	int OptionIndex;//[Offset: 0x60, Size: 4]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 16]
	void SetNamedParam(FName ParamName, float Value);// 0xaf69734
	Vector[] GetResultsAsLocations();// 0xaf69828
	Actor*[] GetResultsAsActors();// 0xaf698d4
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0xaf69980
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0xaf69a4c
	float GetItemScore(int ItemIndex);// 0xaf69b18
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0xbbc0600

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 16]
	MulticastInlineDelegateProperty OnFail;//[Size: 16]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0xaf44d3c

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0xaf711bc
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0xaf707dc
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0xaf70630
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0xaf70df0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0xaf70fe0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0xaf70910
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0xaf70b80

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 16]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 4]
	float MaxAge;//[Offset: 0x2c, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 16]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 8]
	float TravelCostOverride;//[Offset: 0x8, Size: 4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 16]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 16]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0xaf72a78
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0xaf72bc4
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0xaf72918
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0xaf729c8

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 8]
	Object* Instigator;//[Offset: 0x40, Size: 8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0xaf71f2c
	void Finish(byte WithResult);// 0xaf71d8c
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0xaf71e3c

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AIHotSpotSlot.Object
	Transform LocalTransform;//[Offset: 0x30, Size: 48]
	float Height;//[Offset: 0x60, Size: 4]
	float Radius;//[Offset: 0x64, Size: 4]
	float DistanceToFocusActor;//[Offset: 0x68, Size: 4]
	int UserId;//[Offset: 0x6c, Size: 4]
	bool bStartEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bHasCachedAgentData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bHasOverlappingSlots;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	bool bHasDistanceToFocusActor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x70, Size: 1]
	bool bIsBlockingOthers;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x70, Size: 1]
	AIController* Owner;//[Offset: 0x78, Size: 8]
	int SlotIndex;//[Offset: 0x80, Size: 4]
	enum SlotState;//[Offset: 0x84, Size: 1]
	void SetSlotState(enum NewState);// 0xce25bb4
	void SetSlotOwnerAndState(AIController* NewOwner, enum NewState);// 0xce25ac4
	void SetSlotEnabled(bool bNewEnabled);// 0xce25a0c
	void OnStateChanged(AIController* SlotOwner, enum NewState);// 0xbbc0600
	bool IsEnabled();// 0xce259d4
	bool IsAIAllowed(const AIController* AI);// 0xce25918
	bool HasUserId();// 0xce258e0
	int GetSlotUserId();// 0xce258ac
	enum GetSlotState();// 0xce25878
	Rotator GetSlotRotation();// 0xce25840
	float GetSlotRadius();// 0xce2580c
	AIController* GetSlotOwner();// 0xce257d8
	Vector GetSlotLocation();// 0xce257a0
	int GetSlotIndex();// 0xce2576c
	float GetSlotHeight();// 0xce25738
	Box GetSlotBounds();// 0xce256cc
	AIHotSpot* GetHotSpot();// 0xce25698
	void ClearSlot();// 0xce2567c

--------------------------------
Class: ConnectivityCube

--------------------------------
Class: AnimatingMaterialPair
	MaterialInterface* Original;//[Offset: 0x0, Size: 8]
	MaterialInterface* Override;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuildingEditModeSupport.Object
	BuildingSMActor* OwnerBuilding;//[Offset: 0x28, Size: 8]
	FortPlayerController* EditingController;//[Offset: 0x30, Size: 8]
	BuildingEditModeMetadata* PreviewMetadata;//[Offset: 0x38, Size: 8]
	BuildingEditModeMetadata* ScratchpadMetadata;//[Offset: 0x40, Size: 8]
	class BuildingEditModeMetadata* ExpectedMetadataClass;//[Offset: 0x48, Size: 8]
	class BuildingSMActor[] PossibleEditClasses;//[Offset: 0x50, Size: 16]
	StaticMesh* EditTileMesh;//[Offset: 0x60, Size: 40]
	StaticMeshComponent*[] EditTileMeshComponents;//[Offset: 0x88, Size: 16]
	MaterialInterface* TileMaterialParent;//[Offset: 0x98, Size: 40]
	MaterialInterface* AlternateTileMaterialParent;//[Offset: 0xc0, Size: 40]
	Texture2D* ActiveTileTexture;//[Offset: 0xe8, Size: 40]
	Texture2D* InactiveTileTexture;//[Offset: 0x110, Size: 40]
	StaticMeshComponent* LastInteractedComp;//[Offset: 0x138, Size: 8]
	StaticMeshComponent* LastHighlightedComp;//[Offset: 0x140, Size: 8]
	StaticMeshComponent* PreviewComponent;//[Offset: 0x148, Size: 8]
	MaterialInterface* PreviewMaterial;//[Offset: 0x150, Size: 40]
	MaterialInterface* AlternatePreviewMaterial;//[Offset: 0x178, Size: 40]
	EditModeState PreviewEditModeState;//[Offset: 0x1a0, Size: 16]
	CurveFloat* SuccessfulPatternMatchCurve;//[Offset: 0x1b0, Size: 40]
	Timeline SuccessfulMatchInteractTimeline;//[Offset: 0x1d8, Size: 152]
	bool bCanMirrorMetadataToMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 1]
	bool bCanRotateMetadataToMatch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 1]
	bool bEditActionInProgress;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x270, Size: 1]
	bool bInitializedTimelines;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x270, Size: 1]
	bool bUseAlternateMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x270, Size: 1]
	void OnSuccessfulMatchInteractParamUpdate(float NewInteractParamVal);// 0xce497d4
	void OnSuccessfulMatchInteractComplete();// 0xce497b8

--------------------------------
Class: EditModeState
	class BuildingSMActor* EditClass;//[Offset: 0x0, Size: 8]
	int RotationIterations;//[Offset: 0x8, Size: 4]
	bool bMirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bCurrentlyValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	float PlayRate;//[Offset: 0x8, Size: 4]
	float Position;//[Offset: 0xc, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 16]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 16]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 16]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 16]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x4, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 8]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 8]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 8]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x360, Size: 8]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0xd89b374
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0xd89b2c4
	float K2_GetScalarParameterValue(FName ParameterName);// 0xd89b214

--------------------------------
Class: FortPlayerStateZone.FortPlayerState.PlayerState.Info.Actor.Object
	MulticastInlineDelegateProperty OnCurrentPawnChanged;//[Size: 16]
	FortPlayerStateZone* SpectatingTarget;//[Offset: 0xa30, Size: 8]
	FortSpectatorZoneArray Spectators;//[Offset: 0xa38, Size: 288]
	MulticastInlineDelegateProperty OnSpectatorsRemovedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnSpectatorCountChangedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnSpectatingTargetChangedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnBeginSpectatingEvent;//[Size: 16]
	enum KickedFromSessionReason;//[Offset: 0xbb0, Size: 1]
	ReplicatedStatValues RS_Zone_Old;//[Offset: 0xbb4, Size: 8]
	FortCarriedObject* CarriedObject;//[Offset: 0xcd0, Size: 8]
	int NumRejoins;//[Offset: 0xcd8, Size: 4]
	int OldTotalScoreStat;//[Offset: 0xcdc, Size: 4]
	bool bInvincibleDueToUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	float CurrentHealth;//[Offset: 0xcfc, Size: 4]
	float MaxHealth;//[Offset: 0xd00, Size: 4]
	float CurrentShield;//[Offset: 0xd04, Size: 4]
	float MaxShield;//[Offset: 0xd08, Size: 4]
	float CurrentSignalInStorm;//[Offset: 0xd0c, Size: 4]
	float MaxSignalInStorm;//[Offset: 0xd10, Size: 4]
	AccumulatedItemEntry[] AccumulatedItems;//[Offset: 0xd18, Size: 16]
	MulticastInlineDelegateProperty OnAccumulatedItemsChanged;//[Size: 16]
	SimulatedAttributeEntry[] SimulatedAttributes;//[Offset: 0xd38, Size: 16]
	FortGadgetItemDefinition* PendingDestroyedGadgetItemDefinition;//[Offset: 0xd48, Size: 8]
	bool bInAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd50, Size: 1]
	bool bHasEverSkydivedFromBus;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd50, Size: 1]
	bool bHasEverSkydivedFromBusAndLanded;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd50, Size: 1]
	FortItemDefinition*[] QuickbarEquippedItems;//[Offset: 0xd58, Size: 16]
	void ServerSetInAircraft(bool bNewInAircraft);// 0xd1956e4
	void OnRep_SpectatingTarget();// 0xd1956c8
	void OnRep_QuickbarEquippedItems();// 0xd1956ac
	void OnRep_NumRejoins();// 0xd195698
	void OnRep_AccumulatedItems();// 0xd195684
	void MulticastTriggerOnGadgetTrackedAttributeDestroyedFX(const FortGadgetItemDefinition* GadgetItemDefinition);// 0xd1955d4
	bool IsPlayerDead();// 0xd195594
	bool HasEverSkydivedFromBusAndLanded();// 0xd195574
	bool HasEverSkydivedFromBus();// 0xd195554
	int GetSpectatorCount();// 0xd195538
	float GetSimulatedAttributeValue(out const GameplayAttribute Attribute, const float DefaultValue);// 0xd1953fc
	FString GetPlayerNameForStreaming();// 0xd195354
	int GetNumOfAccumulatedItem(const FortWorldItemDefinition* ItemDefinition);// 0xd1952a4
	int GetNumOfAccumulatedBluGlo();// 0xd195270
	void GetHealthAndShields(out float Health, out float HealthMax, out float Shield, out float ShieldMax);// 0xd1950c4

--------------------------------
Class: FortPlayerState.PlayerState.Info.Actor.Object
	bool bIsWorldDataOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bIsGameSessionOwner;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bIsGameSessionAdmin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bIsReadyToContinue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bHasFinishedLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bHasStartedPlaying;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bMeshNetPlayer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bRepFlag1;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	enum PlayerRole;//[Offset: 0x331, Size: 1]
	int16 WorldPlayerId;//[Offset: 0x332, Size: 2]
	UniqueNetIdRepl PartyOwnerUniqueId;//[Offset: 0x338, Size: 40]
	FString HeroId;//[Offset: 0x360, Size: 16]
	FortHeroType* HeroType;//[Offset: 0x370, Size: 8]
	int CurrentCharXP;//[Offset: 0x378, Size: 4]
	FortPickup* MyBackpackPickup;//[Offset: 0x37c, Size: 8]
	int InitialExperienceLevel;//[Offset: 0x384, Size: 4]
	int InitialExperienceAmount;//[Offset: 0x388, Size: 4]
	FortExperienceDelta[] ExperienceDeltas;//[Offset: 0x390, Size: 16]
	FString Platform;//[Offset: 0x3a0, Size: 16]
	PlayerBannerInfo Banner;//[Offset: 0x3b0, Size: 40]
	bool bIsSimulatingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	FortAwardItemDefinition*[] Awards;//[Offset: 0x488, Size: 16]
	byte CharacterGender;//[Offset: 0x4e0, Size: 1]
	byte CharacterBodyType;//[Offset: 0x4e1, Size: 1]
	CustomCharacterData CharacterData;//[Offset: 0x4e8, Size: 120]
	CustomColorSwatch* CharacterColorSwatches;//[Offset: 0x560, Size: 8]
	byte LocalCharacterGender;//[Offset: 0x570, Size: 1]
	byte LocalCharacterBodyType;//[Offset: 0x571, Size: 1]
	CustomCharacterPart* LocalCharacterParts;//[Offset: 0x578, Size: 8]
	AthenaCharmItemDefinition* LocalCharacterCharms;//[Offset: 0x5b0, Size: 8]
	CustomCharacterPart*[] LocalVariantPartsToLoad;//[Offset: 0x5d0, Size: 16]
	McpVariantChannelInfo[] ActiveVariantOverrides;//[Offset: 0x5e0, Size: 16]
	FortAppliedSwapItemAndVariantData[] ActiveCosmeticItemSwaps;//[Offset: 0x5f0, Size: 16]
	CustomColorSwatch* LocalCharacterColorSwatches;//[Offset: 0x600, Size: 8]
	CustomPlayerComponent* CustomPRIComponent;//[Offset: 0x610, Size: 8]
	CustomColorSwatch* CharacterPartColorSwatches;//[Offset: 0x618, Size: 8]
	CustomColorSwatch* LocalCharacterPartColorSwatches;//[Offset: 0x650, Size: 8]
	FortTeamInfo* PlayerTeam;//[Offset: 0x688, Size: 8]
	FortTeamPrivateInfo* PlayerTeamPrivate;//[Offset: 0x690, Size: 8]
	bool bSkipReplicatedStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	ReplicatedStatValues ReplicatedStats_Campaign;//[Offset: 0x6b4, Size: 8]
	ReplicatedStatValues ReplicatedStats_Zone;//[Offset: 0x7cc, Size: 8]
	bool bAreZoneStatsFinalized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	enum ReadyCheckState;//[Offset: 0x8e6, Size: 1]
	Actor* HomeActor;//[Offset: 0x8e8, Size: 8]
	FortPlayerAttributeSets AttributeSets;//[Offset: 0x8f0, Size: 80]
	FortAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x940, Size: 8]
	FName PlayerOSSName;//[Offset: 0x948, Size: 8]
	enum TrustedPlatformType;//[Offset: 0x950, Size: 1]
	UniqueNetIdRepl PlatformUniqueNetId;//[Offset: 0x958, Size: 40]
	bool bInvitedToConsoleSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	bool bInitializedPlayerCustomizationOptionsFromClientSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 1]
	Vector PawnDeathLocation;//[Offset: 0x9c0, Size: 12]
	int CachedPreviousWorldPlayerId;//[Offset: 0x9cc, Size: 4]
	bool bInGhostMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	MulticastInlineDelegateProperty OnPawnDiedDelegate;//[Size: 16]
	void UpdateScoreStatChanged();// 0xd18ec3c
	void ServerChangeActiveVariantForCosmeticItem(FName ItemTemplateToChange, GameplayTag VariantChannelToChange, GameplayTag DesiredActiveVariant, FortPlayerPawn* PreviewPawn);// 0xd18eaa8
	void OnRep_SessionOwner();// 0xd18ea94
	void OnRep_ScoreStatChanged();// 0xd18ea80
	void OnRep_PlayerTeamPrivate();// 0xb6ac428
	void OnRep_PlayerTeam();// 0xd18ea64
	void OnRep_PlatformUniqueNetId();// 0xb6ac40c
	void OnRep_Platform();// 0xb6ac3f0
	void OnRep_PartyOwner();// 0xb6ac3d4
	void OnRep_InGhostMode();// 0xd18ea50
	void OnRep_HomeActor(Actor* OldHomeActor);// 0xd18e9a0
	void OnRep_HeroType();// 0xb6ac3b8
	void OnRep_HeroId();// 0xd18e98c
	void OnRep_CurrentCharXP();// 0xd18e978
	void OnRep_CharacterGender();// 0xb6ac3a4
	void OnRep_CharacterData();// 0xb6ac388
	void OnRep_CharacterColorSwatches();// 0xd18e964
	void OnRep_CharacterBodyType();// 0xb6ac374
	void OnRep_bHasStartedPlaying();// 0xb6ac360
	void OnRep_BannerInfo();// 0xb6ac34c
	void OnRep_AccessoryColorSwatches();// 0xd18e950
	bool IsMeshNetPlayer();// 0xd18e930
	bool HasStartedPlaying();// 0xd18e910
	UniqueNetIdRepl GetUniqueID();// 0xd18e75c
	UniqueNetIdRepl GetPlayerUniqueNetID();// 0xd18e5a0
	FortPlayerPawn* GetPlayerPawnOrVehicleDriver();// 0xd18e56c
	FName GetPlayerOSSName();// 0xd18e538
	UniqueNetIdRepl GetPlatformUniqueNetId();// 0xd18e384
	FString GetPlatform();// 0xd18e300
	FortPlayerPawn* GetCurrentPawn();// 0xd18e2cc
	void ClientNotifyAwardGranted(FortAwardItemDefinition* AwardDefinition);// 0xd18e21c
	void ChangeActiveVariantForCosmeticItem(FName ItemTemplateToChange, GameplayTag VariantChannelToChange, GameplayTag DesiredActiveVariant, FortPlayerPawn* PreviewPawn);// 0xd18e0b4
	static bool AreUniqueIDsIdentical(out const UniqueNetIdRepl A, out const UniqueNetIdRepl B);// 0xd18de40

--------------------------------
Class: FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	FortAthenaVehicleInputStateReliable VehicleInputStateReliable;//[Offset: 0x12a8, Size: 1]
	bool bIsNearSafeZoneEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12a9, Size: 1]
	bool bPlayingSafeZoneEffects;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12a9, Size: 1]
	bool bDoSafeZoneCleanup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12a9, Size: 1]
	bool bIsSwimmingAnimLayerLinked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12a9, Size: 1]
	bool bIsSprintJump;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12a9, Size: 1]
	bool bHasDisableSprintTag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12a9, Size: 1]
	bool bDisableSwimSprintCancel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12a9, Size: 1]
	bool bIsWaterJump;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12a9, Size: 1]
	bool bIsWaterSprintBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12aa, Size: 1]
	bool bIsWaterSprintBoostPending;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12aa, Size: 1]
	bool bPlayingPassengerToPassengerAnimation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12aa, Size: 1]
	bool bPlayingDriverToPassengerAnimation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12aa, Size: 1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12aa, Size: 1]
	bool bIsTargetingConsumableThrow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12aa, Size: 1]
	bool bIsSwappingCharacterParts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12ab, Size: 1]
	bool bBalloonMovementActivated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12ab, Size: 1]
	bool bIsScriptedBot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12ab, Size: 1]
	bool bBuildHotfix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12ab, Size: 1]
	LightingChannels FortPlayerPawnLightingChannels;//[Offset: 0x12ac, Size: 1]
	enum StasisMode;//[Offset: 0x12ae, Size: 1]
	byte BuildingState;//[Offset: 0x12b0, Size: 1]
	int8 AccelerationZPack;//[Offset: 0x12b1, Size: 1]
	CurveFloat* ParachuteDirectionalSpeedMultiplierCurve;//[Offset: 0x12c8, Size: 8]
	CurveFloat* SkydivingDirectionalSpeedMultiplierCurve;//[Offset: 0x12d0, Size: 8]
	CurveFloat* BallooningDirectionalSpeedMultiplierCurve;//[Offset: 0x12d8, Size: 8]
	CurveFloat* DirectionalSpeedMultiplierCurve;//[Offset: 0x12e0, Size: 8]
	float MinimumTimeBetweenSteps;//[Offset: 0x12e8, Size: 4]
	float LastStepTime;//[Offset: 0x12ec, Size: 4]
	MulticastInlineDelegateProperty OnFootstepEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnEnterWater;//[Size: 16]
	bool bIsInWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	bool bNotifyBlueprintWhenLandscapeTeleporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1329, Size: 1]
	byte CachedTeamControllingRC;//[Offset: 0x132a, Size: 1]
	byte BalloonActiveCount;//[Offset: 0x132b, Size: 1]
	bool bParachuteDeployFixedVerticalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x132c, Size: 1]
	bool bIsSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132d, Size: 1]
	bool bIsParachuteOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132e, Size: 1]
	bool bLocalIsSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x132f, Size: 1]
	bool bLocalIsParachuteForcedOpen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x132f, Size: 1]
	bool bIsParachuteForcedOpen;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x132f, Size: 1]
	bool bIsSkydivingFromBus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x132f, Size: 1]
	bool bIsSkydivingFromLaunchPad;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x132f, Size: 1]
	bool bPendingSkydiveLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x132f, Size: 1]
	bool bIsInVortex;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x132f, Size: 1]
	bool bReplicatedIsInVortex;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x132f, Size: 1]
	bool bIsInSlipperyMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1330, Size: 1]
	bool bReplicatedIsInSlipperyMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1330, Size: 1]
	bool bIsBelowAutoDeployTestHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1330, Size: 1]
	bool bIsSlopeSliding;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1330, Size: 1]
	bool bIsProxySimulationTimedOut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1330, Size: 1]
	bool bIsPedestalHero;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1330, Size: 1]
	bool bInGliderRedeploy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1330, Size: 1]
	bool bLocalInGliderRedeploy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1330, Size: 1]
	bool bBeingRepossessed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1331, Size: 1]
	bool bInitAbilitySystemComponentFromPlayerState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1331, Size: 1]
	bool bStartedInteractSearch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1331, Size: 1]
	bool bPawnLODDirty;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1331, Size: 1]
	bool bIsUsingJetpack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1331, Size: 1]
	bool bIsPlayingEmote;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1331, Size: 1]
	bool bShowingOverdriveEffect;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1331, Size: 1]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1332, Size: 1]
	bool bIsRespawningInAir;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1332, Size: 1]
	bool bInitializedPostRepPlayerState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1332, Size: 1]
	bool bEnableCharacterPartRigidBodyNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1332, Size: 1]
	bool bInitializedCharacterPartRBANSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1332, Size: 1]
	bool bHasWaterParticleSystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1332, Size: 1]
	bool bCanShowDefaultSkin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1332, Size: 1]
	bool bDisabledTetheringSupport;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1332, Size: 1]
	bool bIsInFrontEndHologram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1333, Size: 1]
	Actor* HeldObject;//[Offset: 0x1378, Size: 8]
	bool bForceMoveRelativeToCameraRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1394, Size: 1]
	bool bIsWaitingForEmoteInteraction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1394, Size: 1]
	bool bIsEmoteLeader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1394, Size: 1]
	bool bShouldSyncAnimationWithEmoteLeader;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1394, Size: 1]
	bool bShouldJitterAnimationSyncWithEmoteLeader;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1394, Size: 1]
	bool bDoubleFileEmoteSecondLine;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1394, Size: 1]
	bool bEmoteUsesSecondaryFire;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1394, Size: 1]
	bool bLockGroupEmoteLeaderRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1394, Size: 1]
	FortPlayerPawn* GroupEmoteLookTarget;//[Offset: 0x13a0, Size: 8]
	FortPlayerPawn*[] GroupEmoteFollowers;//[Offset: 0x13a8, Size: 16]
	float GroupEmoteAnimOffset;//[Offset: 0x13f0, Size: 4]
	float GroupEmoteLeaderRotationYawOffset;//[Offset: 0x13f4, Size: 4]
	Rotator GroupEmoteLookTargetRotationLeader;//[Offset: 0x13fc, Size: 12]
	float GroupEmoteMaximumZDifference;//[Offset: 0x1414, Size: 4]
	MulticastInlineDelegateProperty OnGroupEmoteSyncValueChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnGroupEmoteFollowerLeft;//[Size: 16]
	MulticastInlineDelegateProperty OnGroupEmoteSecondaryFirePressed;//[Size: 16]
	byte GroupEmoteSyncValue;//[Offset: 0x1448, Size: 1]
	byte GroupEmoteSoundValue;//[Offset: 0x1449, Size: 1]
	byte GroupEmoteParticleValue;//[Offset: 0x144a, Size: 1]
	AnimMontage* TransformationMontage;//[Offset: 0x1450, Size: 8]
	float TransformationMontageStartTime;//[Offset: 0x1458, Size: 4]
	AnimMontage* CurrentMontagerLeader;//[Offset: 0x1460, Size: 8]
	AnimMontage* CurrentSyncedMontage;//[Offset: 0x1468, Size: 8]
	bool bCharacterPartsCastIndirectShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1470, Size: 1]
	byte CharacterGender;//[Offset: 0x1472, Size: 1]
	byte CharacterBodyType;//[Offset: 0x1473, Size: 1]
	float JumpLastActivatedTime;//[Offset: 0x1474, Size: 4]
	Vector PreviousPosition;//[Offset: 0x1478, Size: 12]
	Vector PreviousVelocity;//[Offset: 0x1484, Size: 12]
	uint16 ReplicatedCustomMeshHeightAdjustTarget;//[Offset: 0x14a8, Size: 2]
	float UnburrowLaunchXYSpeed;//[Offset: 0x14ac, Size: 4]
	float UnburrowLaunchZSpeed;//[Offset: 0x14b0, Size: 4]
	FortAthenaVehicleInputStateUnreliable VehicleInputStateUnreliable;//[Offset: 0x14e0, Size: 40]
	bool bIsInAnyStorm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1540, Size: 1]
	bool bIsInsideSafeZone;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1540, Size: 1]
	class GameplayEffect* SafeZoneAppliedGE;//[Offset: 0x1550, Size: 8]
	class GameplayEffect* SelfReviveGameplayEffect;//[Offset: 0x1570, Size: 8]
	class GameplayEffect* TeammateReviveGameplayEffect;//[Offset: 0x1578, Size: 8]
	ScalableFloat SetByCallerReviveHealth;//[Offset: 0x1580, Size: 40]
	FName DBNOInteractionCollisionProfile;//[Offset: 0x15a8, Size: 8]
	Vector DBNOInteractionBoxExtent;//[Offset: 0x15b0, Size: 12]
	float DBNODeferTime;//[Offset: 0x15bc, Size: 4]
	BoxComponent* DBNOInteractCollisionComponent;//[Offset: 0x15c0, Size: 8]
	GameplayTag EventReviveTag;//[Offset: 0x15c8, Size: 8]
	float AggroRangeOverride;//[Offset: 0x15d0, Size: 4]
	float SetByCallerReviveSignalInStorm;//[Offset: 0x15d4, Size: 4]
	interface class * ArmoredInterface;//[Offset: 0x15d8, Size: 16]
	BuildingEditModeMetadata* LastBuildingMetadata;//[Offset: 0x15e8, Size: 8]
	float SprintCancelTime;//[Offset: 0x15f8, Size: 4]
	float WaterSprintBoostAllowedTimer;//[Offset: 0x1600, Size: 4]
	bool bHasStartedFloating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1648, Size: 1]
	ZiplinePawnState ZiplineState;//[Offset: 0x1650, Size: 40]
	CurveTableRowHandle ZiplineJumpDampening;//[Offset: 0x1678, Size: 16]
	CurveTableRowHandle ZiplineJumpStrength;//[Offset: 0x1688, Size: 16]
	ScalableFloat ZiplineJumpActivateDelay;//[Offset: 0x1698, Size: 40]
	ScalableFloat ZiplineRentryProtectionDelay;//[Offset: 0x16c0, Size: 40]
	float ZiplineSocketZOffset;//[Offset: 0x16e8, Size: 4]
	MulticastInlineDelegateProperty ZiplineStateChanged;//[Size: 16]
	float ZiplineSpeedFactorTarget;//[Offset: 0x1700, Size: 4]
	float ZiplineSpeedFactor;//[Offset: 0x1704, Size: 4]
	ScalableFloat EnableSwimSprintDiveCooldown;//[Offset: 0x1710, Size: 40]
	ScalableFloat SwimSprintDiveCooldown;//[Offset: 0x1738, Size: 40]
	ScalableFloat SwimDiveBoostTimeThreshold;//[Offset: 0x1760, Size: 40]
	float ClientSwimDiveInputTime;//[Offset: 0x1788, Size: 4]
	bool bCanPredictJumpApex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178c, Size: 1]
	FortAIPawn*[] AbilityAITargets;//[Offset: 0x1798, Size: 16]
	AnimMontage* UnableToPerformActionMontage;//[Offset: 0x17c0, Size: 8]
	SoundBase* UnableToPerformActionSound;//[Offset: 0x17c8, Size: 8]
	float MoveSoundStimulusBroadcastInterval;//[Offset: 0x17d0, Size: 4]
	float EmoteStartTime;//[Offset: 0x18bc, Size: 4]
	float EmoteRandomNum;//[Offset: 0x18c0, Size: 4]
	bool bPlayingPassengerToDriverAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d8, Size: 1]
	float VehicleSpeedAtTimeOfJump;//[Offset: 0x18f0, Size: 4]
	VehiclePawnState VehicleStateRep;//[Offset: 0x18f8, Size: 32]
	FortPlayerControllerGameplay* InteractingPCRep;//[Offset: 0x1918, Size: 8]
	VehiclePawnState VehicleStateLocal;//[Offset: 0x1920, Size: 32]
	Actor* VehicleLastTick;//[Offset: 0x1940, Size: 8]
	FortPawnComponent_Tether* TetherComponent;//[Offset: 0x1960, Size: 8]
	float PendingTetherLaunch;//[Offset: 0x1968, Size: 4]
	float TetherJumpLastTime;//[Offset: 0x19a8, Size: 4]
	bool bSupportsTetheredMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ac, Size: 1]
	BuildingGameplayActor* BalloonRope;//[Offset: 0x19b0, Size: 8]
	MulticastInlineDelegateProperty OnPossessedProp;//[Size: 16]
	BuildingGameplayActorPlayerPropAttachment* PossessedProp;//[Offset: 0x19c8, Size: 8]
	int64 SlopeCameraOffsetFrameCounter;//[Offset: 0x1a00, Size: 8]
	VectorRK4SpringInterpolator SlopeCameraOffsetInterpolator;//[Offset: 0x1a08, Size: 8]
	Vector LargeBodyTypeTargetingOffset;//[Offset: 0x1a44, Size: 12]
	InputComponent* VehicleInputComponent;//[Offset: 0x1a88, Size: 8]
	AnimMontage* BluePrintPlaceAnimation;//[Offset: 0x1a98, Size: 8]
	AnimMontage* BluePrintEditAnimation;//[Offset: 0x1aa0, Size: 8]
	MulticastInlineDelegateProperty OnStartedInteractSearch;//[Size: 16]
	MulticastInlineDelegateProperty OnEndedInteractSearch;//[Size: 16]
	MulticastInlineDelegateProperty OnAttemptedInstantInteractSearch;//[Size: 16]
	FName EmoteInteractionCollisionProfile;//[Offset: 0x1ae0, Size: 8]
	Vector EmoteInteractionBoxExtent;//[Offset: 0x1ae8, Size: 12]
	BoxComponent* EmoteInteractCollisionComponent;//[Offset: 0x1af8, Size: 8]
	MulticastInlineDelegateProperty OnPartChanged;//[Size: 16]
	MaterialInstanceDynamic* BlueprintPaperMID;//[Offset: 0x1b28, Size: 8]
	Timeline BlueprintPaperPulseTimeline;//[Offset: 0x1b30, Size: 152]
	CustomColorComponent* AccessoryColorSwatchHandler;//[Offset: 0x1bc8, Size: 8]
	FortHero* Hero;//[Offset: 0x1c00, Size: 8]
	FortHeroType* OvrHeroType;//[Offset: 0x1c08, Size: 8]
	enum DisplayContext;//[Offset: 0x1c10, Size: 1]
	CustomPlayerComponent* HACK_CustomPRIComponent;//[Offset: 0x1c18, Size: 8]
	CustomCharacterPart* CharacterParts;//[Offset: 0x1c20, Size: 8]
	CustomColorSwatch* CharacterColorSwatches;//[Offset: 0x1c58, Size: 8]
	CustomColorSwatch* CharacterPartColorSwatches;//[Offset: 0x1c68, Size: 8]
	AthenaCharmItemDefinition* CharacterCharms;//[Offset: 0x1ca0, Size: 8]
	CustomCharacterPart*[] RequiredVariantParts;//[Offset: 0x1cc0, Size: 16]
	SkeletalMeshComponentBudgeted* CharacterPartSkeletalMeshComponents;//[Offset: 0x1cd8, Size: 8]
	FortPlayerCharm*[] CharacterCharmActors;//[Offset: 0x1d10, Size: 16]
	int8 CharacterPartSMHiddenRefCount;//[Offset: 0x1d20, Size: 1]
	FortAthenaLoadout BaseCosmeticLoadout;//[Offset: 0x1d28, Size: 240]
	FortAthenaLoadout AppliedCosmeticLoadout;//[Offset: 0x1e18, Size: 240]
	FortAppliedSwapItemAndVariantData[] AppliedSwaps;//[Offset: 0x1f08, Size: 16]
	FortAthenaLoadout CosmeticLoadout;//[Offset: 0x1f68, Size: 240]
	uint32 ServerLoadoutChangeSync;//[Offset: 0x2058, Size: 4]
	bool bAllowClientLoadoutChangeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2060, Size: 1]
	MulticastInlineDelegateProperty OnMaterialOverrideApplied;//[Size: 16]
	MulticastInlineDelegateProperty OnMaterialOverrideCleared;//[Size: 16]
	FortPawnMaterialOverride[] MaterialOverrides;//[Offset: 0x2128, Size: 16]
	FortPawnMaterialOverride[] LocalMaterialOverrides;//[Offset: 0x2138, Size: 16]
	<SceneComponent*,FortPawnMaterialOverrideState> MaterialOverrideStateMap;//[Offset: 0x2148, Size: 80]
	CustomCharacterPart* PreviousCharacterParts;//[Offset: 0x2198, Size: 8]
	CustomCharacterPartModifier* CharacterPartModifiers;//[Offset: 0x21d0, Size: 8]
	FortCharacterPartsRepMontageInfo RepCharPartAnimMontageInfo;//[Offset: 0x2208, Size: 32]
	FortClientObservedStatArray ClientObservedStats;//[Offset: 0x2228, Size: 312]
	class AnimInstance* AnimBPOverride;//[Offset: 0x2378, Size: 8]
	class AnimInstance* OriginalAnimBP;//[Offset: 0x2380, Size: 8]
	SoundBase* OnCrouchStartSound;//[Offset: 0x2388, Size: 8]
	SoundBase* OnCrouchEndSound;//[Offset: 0x2390, Size: 8]
	FortFootstepAudioBank* FootstepBankOverride;//[Offset: 0x2398, Size: 8]
	FortFootstepAudioBank* OriginalFootstepBank;//[Offset: 0x23a0, Size: 8]
	FortWeaponAnimSet* AnimSetOverride;//[Offset: 0x23a8, Size: 8]
	class AnimInstance[] AnimLayersOverride;//[Offset: 0x23b0, Size: 16]
	class AnimInstance[] PreviousAnimLayersOverride;//[Offset: 0x23c0, Size: 16]
	FortPickup*[] QueuedAutoPickups;//[Offset: 0x23d0, Size: 16]
	IgnoreCollisionActor[] IgnoreActors;//[Offset: 0x23e0, Size: 16]
	ScalableFloat AutoPickupDropRepickupDelay;//[Offset: 0x23f8, Size: 40]
	FName CarriedObjectAttachmentSocket;//[Offset: 0x2430, Size: 8]
	float PickupSpeedMultiplier;//[Offset: 0x2438, Size: 4]
	SlateBrush MiniMapIconBrush;//[Offset: 0x2440, Size: 136]
	SlateBrush AboveBelowMiniMapIconBrush;//[Offset: 0x24c8, Size: 136]
	SlateBrush FarOffMiniMapIconBrush;//[Offset: 0x2550, Size: 136]
	SlateBrush DBNOMiniMapIconBrush;//[Offset: 0x25d8, Size: 136]
	LinearColor MinimapIconColorSelf;//[Offset: 0x2660, Size: 16]
	LinearColor MinimapIconColorTeammate;//[Offset: 0x2670, Size: 16]
	LinearColor MinimapIconColorEnemy;//[Offset: 0x2680, Size: 16]
	float MaxIndicatorVisibilityDistForEnemies;//[Offset: 0x2690, Size: 4]
	float MaxIndicatorVisibilityDistForAllies;//[Offset: 0x2694, Size: 4]
	FortDBNOCarryHoisterData DBNOHoisterData;//[Offset: 0x26c0, Size: 16]
	FortPlayerPawn* DBNOHoistee;//[Offset: 0x26d0, Size: 8]
	FortWeaponAnimSet* DBNOHoisterAnimSet;//[Offset: 0x26d8, Size: 8]
	class AnimInstance* DBNOHoisteeAnimClass;//[Offset: 0x26e0, Size: 8]
	float ThrowCarriedPlayerStrengthXY;//[Offset: 0x26e8, Size: 4]
	float ThrowCarriedPlayerStrengthZ;//[Offset: 0x26ec, Size: 4]
	float DropCarriedPlayerForwardOffset;//[Offset: 0x26f0, Size: 4]
	float DropCarriedPlayerHeightOffset;//[Offset: 0x26f4, Size: 4]
	float DropCarriedPlayerTraceHeight;//[Offset: 0x26f8, Size: 4]
	bool bAllowDBNOCarry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26fc, Size: 1]
	bool bAllowDBNOCarryEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26fd, Size: 1]
	bool bIsBeingDBNOCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26fe, Size: 1]
	bool bIsDBNOCarrying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ff, Size: 1]
	bool bRequestedThrowCarriedPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2700, Size: 1]
	uint16 PackedReplicatedSlopeAngles;//[Offset: 0x2710, Size: 2]
	MulticastInlineDelegateProperty OnNewPlayerState;//[Size: 16]
	MulticastInlineDelegateProperty OnAbilitySystemComponentInitialized;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedCharacterCustomization;//[Size: 16]
	FortCustomizationAssetLoader* CustomizationAssetLoader;//[Offset: 0x2768, Size: 8]
	ParticleSystem* SpawnParticles;//[Offset: 0x2790, Size: 8]
	SoundBase* SpawnSound;//[Offset: 0x2798, Size: 8]
	bool bIsLocalPlayer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27a4, Size: 1]
	bool bDamagedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27a6, Size: 1]
	MulticastInlineDelegateProperty OnDamageComboIncrement;//[Size: 16]
	MulticastInlineDelegateProperty OnDamageComboReset;//[Size: 16]
	uint32 PlayerStatus;//[Offset: 0x27e8, Size: 4]
	uint16 AccelerationPack;//[Offset: 0x27ec, Size: 2]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x27f0, Size: 48]
	int RepAnimMontageStartSection;//[Offset: 0x2820, Size: 4]
	bool bNetMovementPrioritized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2824, Size: 1]
	ReplicatedMontagePair LandingMontagePair;//[Offset: 0x2828, Size: 40]
	PreviouslyAppliedVariantData PriorVariantData;//[Offset: 0x2850, Size: 136]
	FortWorldItemDefinition*[] TempWeaponsStack;//[Offset: 0x28d8, Size: 16]
	FortAnimNotifyState_RootMotionInterrupt*[] RootMotionInterruptNotifyStack;//[Offset: 0x28e8, Size: 16]
	AnimMontage*[] RootMotionInterruptMontageStack;//[Offset: 0x28f8, Size: 16]
	FortVisibilityComponent* VisibilityComponent;//[Offset: 0x2938, Size: 8]
	PostProcessComponent* BlendablesPostProcessComp;//[Offset: 0x2940, Size: 8]
	bool bUseControllerRotationYawToRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294c, Size: 1]
	MulticastInlineDelegateProperty OnBeginSkydivingEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnEndSkydivingEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnBeginParachuteMovementEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnEndParachuteMovementEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnBallooningGravityCeilingChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnEnteredAircraft;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnPossessed;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnUnpossessed;//[Size: 16]
	MulticastInlineDelegateProperty OnEmoteInteracted;//[Size: 16]
	MulticastInlineDelegateProperty OnSafeZoneOccupancyChangedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectPickedUp;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectDropped;//[Size: 16]
	<byte,Texture*> CustomMovementIndicators;//[Offset: 0x2a10, Size: 80]
	SoundBase* CurrentGliderOpenSound;//[Offset: 0x2a78, Size: 8]
	AudioComponent* CurrentGliderOpenAudioComponent;//[Offset: 0x2a80, Size: 8]
	SoundBase* CurrentGliderCloseSound;//[Offset: 0x2a88, Size: 8]
	AudioComponent* CurrentGliderCloseAudioComponent;//[Offset: 0x2a90, Size: 8]
	bool bParachuteLockedOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa4, Size: 1]
	bool bLocalParachuteLockedOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa5, Size: 1]
	RepFortMeshAttachment AttachmentMesh;//[Offset: 0x2aa8, Size: 16]
	SkeletalMeshComponentBudgeted* AttachmentMeshComponent;//[Offset: 0x2ab8, Size: 8]
	FortPawnScriptedBehavior* BotScriptedBehavior;//[Offset: 0x2ac0, Size: 8]
	VortexParams VortexParams;//[Offset: 0x2ae0, Size: 16]
	FortSkyTube* ReplicatedSkyTube;//[Offset: 0x2af0, Size: 8]
	FortSkyTube* CurrentSkyTube;//[Offset: 0x2af8, Size: 8]
	FortWaterBodyActor*[] IgnoredWaterBodies;//[Offset: 0x2b00, Size: 16]
	FortUnderwaterDamageComponent* UnderwaterDamageComponent;//[Offset: 0x2b10, Size: 8]
	SlipperySlopeParams SlipperySlopeParams;//[Offset: 0x2b18, Size: 440]
	AthenaGliderItemDefinition* GliderClass;//[Offset: 0x2cd0, Size: 8]
	FortPlayerPetRepState* PetState;//[Offset: 0x2ce8, Size: 8]
	FortPlayerPet* CosmeticPetInstance;//[Offset: 0x2cf0, Size: 8]
	FortPlayerParachute* ParachuteAttachment;//[Offset: 0x2d08, Size: 8]
	AthenaGliderItemDefinition*[] GliderOverrideStack;//[Offset: 0x2d18, Size: 16]
	bool bResetGliderOverrideOnLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d38, Size: 1]
	ScalableFloat ParachuteDeployTraceForGroundDistance;//[Offset: 0x2d40, Size: 40]
	ScalableFloat LaunchPadParachuteDeployTraceForGroundDistance;//[Offset: 0x2d68, Size: 40]
	ScalableFloat LaunchPadParachuteDeployTraceForDownwardSpeed;//[Offset: 0x2d90, Size: 40]
	ScalableFloat ParachuteDeployVelocityBlend;//[Offset: 0x2db8, Size: 40]
	float ParachuteCooldownToOpen;//[Offset: 0x2de0, Size: 4]
	float ParachuteCooldownToClose;//[Offset: 0x2de4, Size: 4]
	ScalableFloat GliderRedeployAllowedRow;//[Offset: 0x2de8, Size: 40]
	ScalableFloat GliderRedeployLateralVelocityMultiplierRow;//[Offset: 0x2e10, Size: 40]
	ScalableFloat GliderRedeployHeighLimitRow;//[Offset: 0x2e38, Size: 40]
	ScalableFloat BalloonFallDamageThresholdVelocityZ;//[Offset: 0x2e60, Size: 40]
	class AnimInstance* PreDrivingAnimBP;//[Offset: 0x2e88, Size: 8]
	class AnimInstance* CurrentVehicleAnimLayerOverlayClass;//[Offset: 0x2e90, Size: 8]
	class AnimInstance* CurrentSwimmingAnimLayerOverlayClass;//[Offset: 0x2e98, Size: 8]
	class AnimInstance* DefaultSwimmingAnimLayerOverlayClass;//[Offset: 0x2ea0, Size: 8]
	float TimeBeforeSwimmingLayerDeactivated;//[Offset: 0x2eb0, Size: 4]
	AudioComponent* ParachuteAudioLoop;//[Offset: 0x2eb8, Size: 8]
	float ParachuteAndSkydiveAudioFadeInTime;//[Offset: 0x2ec0, Size: 4]
	float ParachuteAndSkydiveAudioFadeOutTime;//[Offset: 0x2ec4, Size: 4]
	AudioComponent* SkydiveAudioLoop;//[Offset: 0x2ec8, Size: 8]
	SoundBase* SoundOnParachuteForcedOpen;//[Offset: 0x2ed0, Size: 8]
	SoundBase* SkydivingLoop1P;//[Offset: 0x2ed8, Size: 8]
	SoundBase* SkydivingLoop3P;//[Offset: 0x2ee0, Size: 8]
	SoundBase* ParachuteOpenLoop1P;//[Offset: 0x2ee8, Size: 8]
	SoundBase* ParachuteOpenLoop3P;//[Offset: 0x2ef0, Size: 8]
	AudioComponent* SwimmingAudioLoop;//[Offset: 0x2ef8, Size: 8]
	float SwimmingAudioFadeOutTime;//[Offset: 0x2f00, Size: 4]
	float SwimmingAudioInterpSpeed;//[Offset: 0x2f04, Size: 4]
	SoundBase* SoundOnSwimmingLoop;//[Offset: 0x2f08, Size: 8]
	uint32 RemoteViewData32;//[Offset: 0x2f40, Size: 4]
	float LastQuickBarSwitchRequestTime;//[Offset: 0x2f58, Size: 4]
	float CrouchStartTime;//[Offset: 0x2f5c, Size: 4]
	float CrouchEndTime;//[Offset: 0x2f60, Size: 4]
	float CrouchLerpTime;//[Offset: 0x2f64, Size: 4]
	float MeleeAbilityCooldown;//[Offset: 0x2f68, Size: 4]
	bool bDisallowInterrogation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6c, Size: 1]
	bool bDisallowInterrogationOnNPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6d, Size: 1]
	bool bHideBodyOnDeathRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f6e, Size: 1]
	FortRemoteControlledPawnAthena* ControlledRCPawn;//[Offset: 0x2f70, Size: 8]
	Rotator StoredControlRotation;//[Offset: 0x2f78, Size: 12]
	enum FacialTypeOverride;//[Offset: 0x2f84, Size: 1]
	float GhostModeExitStartTime;//[Offset: 0x2f88, Size: 4]
	float GhostModeExitDuration;//[Offset: 0x2f8c, Size: 4]
	ParticleSystemComponent* PSC_PlayerInWater;//[Offset: 0x3088, Size: 8]
	ParticleSystemComponent* PSC_PlayerInWaterSurfaceSwimming;//[Offset: 0x3090, Size: 8]
	NiagaraSystem* NiagaraPlayerInWaterBasicAsset;//[Offset: 0x3098, Size: 8]
	NiagaraSystem* NiagaraPlayerInWaterSwimmingAsset;//[Offset: 0x30a0, Size: 8]
	NiagaraSystem* NiagaraPlayerWaterHandSplashAsset;//[Offset: 0x30a8, Size: 8]
	NiagaraSystem* NiagaraPlayerWaterFootSplashAsset;//[Offset: 0x30b0, Size: 8]
	NiagaraSystem* NiagaraPlayerWaterLargePlayerSplashAsset;//[Offset: 0x30b8, Size: 8]
	NiagaraSystem* NiagaraPlayerWaterBoostAsset;//[Offset: 0x30c0, Size: 8]
	FName FootSplashLeftSocketName;//[Offset: 0x30c8, Size: 8]
	FName FootSplashRightSocketName;//[Offset: 0x30d0, Size: 8]
	FXSystemComponent* NiagaraPlayerStandingInWater;//[Offset: 0x30d8, Size: 8]
	FXSystemComponent* NiagaraPlayerSwimmingInWater;//[Offset: 0x30e0, Size: 8]
	FXSystemComponent* NiagaraPlayerHandSplashInWater;//[Offset: 0x30e8, Size: 8]
	FXSystemComponent* NiagaraPlayerFootSplashInWaterLeft;//[Offset: 0x30f0, Size: 8]
	FXSystemComponent* NiagaraPlayerFootSplashInWaterRight;//[Offset: 0x30f8, Size: 8]
	FXSystemComponent* NiagaraPlayerJumpSplashInWater;//[Offset: 0x3100, Size: 8]
	FXSystemComponent* NiagaraPlayerWaterBoost;//[Offset: 0x3108, Size: 8]
	bool bWaterFootSplashActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3110, Size: 1]
	bool bEnableWaterInteractionEffects;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3110, Size: 1]
	MulticastInlineDelegateProperty OnActivateAbility;//[Size: 16]
	MulticastInlineDelegateProperty OnFiringRangedWeapon;//[Size: 16]
	ScalableFloat ConsecutiveWeakSpotResourceBonus;//[Offset: 0x3138, Size: 40]
	ScalableFloat LastHitWeakSpotResourceBonus;//[Offset: 0x3160, Size: 40]
	Widget* CustomInteractionWidget;//[Offset: 0x3190, Size: 8]
	void VerifySkydivingMatchesServer();// 0xd1798d8
	void UpdatePreviousPositionAndVelocity(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0xb6a9888
	void UpdateGameStateModifiedGravity(float GravityMultiplier);// 0xd179830
	void UpdateAimbotDetectionStatus();// 0xd17981c
	void UnableToPerformAction(bool bPlayMontage, out const GameplayTagContainer FailedReason);// 0xd179704
	void ToggleGender();// 0xd1796f0
	void ToggleBodyType();// 0xd1796dc
	float TimeFromJumpApex();// 0xd1796a8
	void SwitchToPreviousPart(FString PartName);// 0xd1795f4
	void SwitchToNextPart(FString PartName);// 0xd179540
	void SwapPawnCosmeticItemAndVariant(out const GUID SwapId, out const FortSwapItemAndVariantData[] SwapData, bool bAllowActiveHotswap, enum ForcedSwapState);// 0xd179370
	bool SupportsTetheredMovement();// 0xd179350
	void StopItemInteractionAbility(const enum ItemInteractionStatus);// 0xd1792a0
	void StopFacialAnimationStream();// 0xd17928c
	void StopCarryingPlayer(bool bFromAbilityCancel);// 0xd1791dc
	void StartGhostModeExit(const float InGhostModeExitDuration);// 0xd179134
	void StartFloating();// 0xd179120
	void StartedInteractSearch();// 0xd17910c
	void ShowTestingPredictiveInput();// 0xd1790f8
	bool ShouldPlayDeathAnimation();// 0xd1790c0
	bool ShouldDriverHaveReticle();// 0xd179088
	bool ShouldAllowShadowStanceMaterialsForPartType(byte PartType);// 0xd178fd4
	void SetWeaponOverrideAnimSet(FortWeaponAnimSet* WeaponOverrideAnimSet);// 0xd178f2c
	void SetVehicleOverrideExit(bool bIgnoreLaunch);// 0xd178e7c
	void SetVectorParamOnOverriddenMaterials(const FName ParamName, out const LinearColor Value);// 0xd178d8c
	void SetThrownItemTrajectoryHitResult(out const HitResult InHitResult);// 0xd178c8c
	void SetTextureParamOnOverriddenMaterials(const FName ParamName, Texture* Value);// 0xd178ba8
	void SetTetherPawn(Pawn* InTetherPawn);// 0xd178b00
	void SetStasisMode(enum InStasisMode);// 0xd178a58
	void SetScalarParamOnOverriddenMaterials(const FName ParamName, float Value);// 0xd178970
	void SetPreviousVelocity(Vector OldVelocity);// 0xd1788c4
	void SetPreviousPosition(Vector OldPosition);// 0xd17881c
	void SetPossessedProp(BuildingGameplayActorPlayerPropAttachment* InPossessedProp);// 0xd178774
	void SetPetType(const AthenaPetItemDefinition* PetToCreate);// 0xd1786cc
	void SetPendingTetherLaunch(float Amount);// 0xd178624
	void SetPendingSkydiveLaunch(bool bPending);// 0xd178574
	void SetNumActiveBalloons(int NewBalloonCount);// 0xd1784cc
	void SetIsInFrontEndHologram(bool bInFrontEndHologram);// 0xd178414
	void SetInVortex(bool bNewValue, float UpwardLaunchVelocity, float GravityFloorAltitude, float GravityFloorWidth, float GravityFloorGravityScalar, float GravityFloorTerminalVelocity);// 0xd178224
	void SetInSlipperyMovement(bool bIsSlippery);// 0xd178174
	void SetHomeActor(Actor* NewActor);// 0xd1780cc
	void SetFortPlayerPawnLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xd177f84
	void SetFirstPersonCamera(bool bNewUseFirstPersonCamera);// 0xbbc0600
	void SetFacialTypeOverride(enum NewType);// 0xd177edc
	void SetEquippedArmoredInterface(interface class InInterface);// 0xd177e14
	void SetCustomMeshHeightAdjustTarget(int HeightAdjust, int LerpSpeed);// 0xd177d30
	void SetClientObservedStatsFromAnotherPawn(FortPlayerPawn* OtherPawn);// 0xd177c88
	void SetBalloonRope(BuildingGameplayActor* InBalloonRope);// 0xd177be0
	void SetActorHiddenInGameWithGameplayEffect(bool bNewHidden, out const class GameplayEffect HidePawnGameplayEffectClass, bool bRemoveAllOfThisTag);// 0xd177a88
	void ServerUpdateVehicleInputStateUnreliable(FortAthenaVehicleInputStateUnreliable ReliableInput, float Timestamp);// 0xd177948
	void ServerUpdateVehicleInputStateReliable(FortAthenaVehicleInputStateReliable ReliableInput);// 0xd17786c
	void ServerUnmarkRespawned();// 0xd177810
	void ServerToggleGender();// 0xd1777b4
	void ServerToggleBodyType();// 0xd177758
	void ServerThrowCarriedPlayer();// 0xd17773c
	void ServerSetAttachment(RepFortMeshAttachment Attachment);// 0xd177664
	void ServerSetAimbotDetection(bool bEnableDetection);// 0xd177580
	void ServerSendZiplineState(const ZiplinePawnState InZiplineState);// 0xd17747c
	void ServerSendAimbotDetectionStatus(const byte[] Payload);// 0xd177390
	void ServerRootMotionInterruptNotifyStopMontage(AnimMontage* MontageToStop);// 0xd1772b8
	void ServerReviveFromDBNO(Controller* EventInstigator);// 0xd1771e0
	void ServerRespawnFromDBNO();// 0xd177184
	void ServerResetAbilitySystemComponent();// 0xd177168
	void ServerPlayUnableToPerformActionMontage();// 0xd17710c
	FortAthenaVehicle* ServerOnExitVehicle(enum ExitForceBehavior);// 0xd17705c
	void ServerInterrogateDBNOPlayer(FortPlayerPawn* InDBNOHoistee);// 0xd176fac
	void ServerHoistDBNOPlayer(FortPlayerPawn* InDBNOHoistee);// 0xd176efc
	void ServerHandlePickupInfo(FortPickup* Pickup, FortPickupRequestInfo Params);// 0xd176da0
	void ServerHandlePickup(FortPickup* Pickup, float InFlyTime, const Vector InStartDirection, bool bPlayPickupSound);// 0xd176c34
	void ServerEquipLastWeaponOrGadget(bool bForce);// 0xd176b50
	void ServerEmoteSecondaryFirePressed();// 0xd176b34
	void ServerDropCarriedPlayer();// 0xd176b18
	void ServerCyclePart(byte Part, bool bNextPart);// 0xd1769f0
	void ServerCycleColorSwatch(byte SwatchType, bool bNext);// 0xd1768c8
	void ServerCycleAccessoryColorSwatch(byte Part, bool bNext);// 0xd1767a0
	void ServerChoosePart(byte Part, CustomCharacterPart* ChosenCharacterPart);// 0xd176684
	void ServerChooseGender(byte Gender);// 0xd1765ac
	void SafeZoneStatusChanged();// 0xbbc0600
	void ReviveFromDBNO(Controller* EventInstigator);// 0xd176504
	void RestoreDBNOCollisionAfterDrop();// 0xd1764f0
	void ResetGameplayAttributes(const bool bIgnoreStatClamp);// 0xd176438
	void ResetClothAndDynamics();// 0xd176424
	bool RemoveMaterialOverrideLocal(out const GUID MaterialOverrideId);// 0xd176364
	bool RemoveMaterialOverride(out const GUID MaterialOverrideId);// 0xd1762a4
	void RemoveExpiredIgnoredActorsAndCheckForNextTimer();// 0xd176290
	void RemoveCosmeticSwap(out const GUID SwapId);// 0xd1761dc
	void RemoveAttachment();// 0xd1761c8
	void RemoveAbilityAITarget(FortAIPawn* InTarget);// 0xd176120
	void RandomizeCharacter(FString GenderString);// 0xd17606c
	void PushFootstepBankOverride(int Priority, FortFootstepAudioBank* InFootstepBankOverride);// 0xd175f84
	void PushAnimSetOverride(int Priority, FortWeaponAnimSet* InAnimSetOverride);// 0xd175e9c
	void PushAnimLayersOverride(int Priority, out const class AnimInstance[] InAnimLayersOverride);// 0xd175d9c
	void PushAnimBPOverride(int Priority, class AnimInstance InAnimBPOverride);// 0xd175cb4
	void PostResIn();// 0xb6a9874
	void PopFootstepBankOverride(int Priority, FortFootstepAudioBank* InFootstepBankOverride);// 0xd175bcc
	void PopAnimSetOverride(int Priority, FortWeaponAnimSet* InAnimSetOverride);// 0xd175ae4
	void PopAnimLayersOverride(int Priority, out const class AnimInstance[] InAnimLayersOverride);// 0xd1759e4
	void PopAnimBPOverride(int Priority, class AnimInstance InAnimBPOverride);// 0xd1758fc
	void PlayGroupEmote(const FortMontageItemDefinitionBase* EmoteAsset);// 0xd175854
	void PerformSupplementalKillVolumeSweep();// 0xd175838
	void PassengerToPassengerAnimationStopped();// 0xd175824
	void PassengerToDriverAnimationStopped();// 0xd175810
	void OnWeaponEquippedNative(FortWeapon* NewWeapon, FortWeapon* OldWeapon);// 0xb6a9788
	void OnTetherStarted(Pawn* LastTetherPawn);// 0xbbc0600
	void OnTetherEnded(Pawn* LastTetherPawn);// 0xbbc0600
	void OnTetheredExitReleased();// 0xbbc0600
	void OnTetheredExitPressed();// 0xbbc0600
	void OnStartLongInteract(Actor* ReceivingActor, out bool Out_bConsumeEvent, out bool Out_bSkipSetInteractDuration, out bool Out_bSkipStartAnimation, out enum Out_ItemInteractionType);// 0xbbc0600
	void OnSlidingStateChanged(bool bNewSlidingState);// 0xbbc0600
	void OnRep_WaitingForEmoteInteraction();// 0xd1757fc
	void OnRep_VehicleInputStateUnreliable();// 0xb6a9774
	void OnRep_VehicleInputStateReliableForReplay();// 0xd1757e8
	void OnRep_UpdateContextTracker();// 0xd1757d4
	void OnRep_StoredControlRotation();// 0xd1757b8
	void OnRep_StartedInteractSearch();// 0xb6a9760
	void OnRep_ReplicatedSkyTube();// 0xd1757a4
	void OnRep_ReplicatedIsInVortex();// 0xd175790
	void OnRep_ReplicatedIsInSlipperyMovement();// 0xd17577c
	void OnRep_ReplicatedInGliderRedeploy();// 0xd175768
	void OnRep_ReplicatedAnimMontage();// 0xb6a974c
	void OnRep_RepAnimMontageStartSection();// 0xb6a9738
	void OnRep_PossessedProp(BuildingGameplayActorPlayerPropAttachment* OldProp);// 0xd1756b8
	void OnRep_ParachuteLockedOpen();// 0xd1756a4
	void OnRep_NetMovementPrioritized(bool bOldNetMovementPrioritized);// 0xb6a9688
	void OnRep_MaterialOverrides();// 0xd175690
	void OnRep_LockGroupEmoteLeaderRotation();// 0xd17567c
	void OnRep_IsTargeting();// 0xb6a9674
	void OnRep_IsSlopeSliding();// 0xb6a9658
	void OnRep_IsSkydivingFromBus();// 0xb6a9644
	void OnRep_IsSkydiving(bool bPreviousState);// 0xb6a9594
	void OnRep_IsParachuteOpen(bool bPreviousState);// 0xb6a94dc
	void OnRep_IsParachuteForcedOpen();// 0xb6a94c8
	void OnRep_IsInWaterVolume();// 0xd175668
	void OnRep_IsInsideSafeZone();// 0xb6a94b4
	void OnRep_IsInAnyStorm();// 0xb6a94a0
	void OnRep_IsEmoteLeader();// 0xd175654
	void OnRep_InVehicle();// 0xb6a948c
	void OnRep_GroupEmoteSyncValue();// 0xd175640
	void OnRep_GroupEmoteLookTarget();// 0xd17562c
	void OnRep_GliderOverride();// 0xd175618
	void OnRep_FootstepBankOverride();// 0xd175604
	void OnRep_FacialTypeOverride();// 0xd1755f0
	void OnRep_DBNOHoisterData(out const FortDBNOCarryHoisterData PreviousDBNOHoisterData);// 0xb6a93d4
	void OnRep_DBNOHoistee();// 0xd1755dc
	void OnRep_CustomMeshHeightAdjustTarget();// 0xd1755c8
	void OnRep_ControlledRCPawn();// 0xd1755ac
	void OnRep_CharPartAnimMontageInfo();// 0xb6a93c0
	void OnRep_bHasStartedFloating();// 0xd175598
	void OnRep_bDisabledTetheringSupport();// 0xb6a93ac
	void OnRep_BaseCosmeticLoadout();// 0xb6a9398
	void OnRep_AttachmentMesh();// 0xd175584
	void OnRep_AppliedSwaps();// 0xd175570
	void OnRep_AnimLayersOverride();// 0xd17555c
	void OnRep_AnimBPOverride();// 0xd175548
	void OnRep_AccelerationZPack();// 0xb6a9384
	void OnRep_AccelerationPack();// 0xb6a9370
	void OnOpenParachute(out bool bConsumeEvent);// 0xbbc0600
	void OnLockOnSearchCompleted(out bool bConsumeEvent);// 0xbbc0600
	void OnLocalItemInteractionComplete(Actor* ReceivingActor);// 0xbbc0600
	void OnLandscapeCheckFailedAndTeleported();// 0xbbc0600
	void OnExitedWaterVolume();// 0xbbc0600
	void OnExitedVehicle();// 0xbbc0600
	void OnEnteredWaterVolume();// 0xbbc0600
	void OnEnteredVehicle();// 0xbbc0600
	void OnEndWaterSprintBoost();// 0xbbc0600
	void OnEndParachuteMovement();// 0xb6a9354
	void OnCharacterPartsReinitialized();// 0xbbc0600
	void OnCapsuleBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xb6a9140
	void OnBeginWaterSprintBoost();// 0xbbc0600
	void OnBeginParachuteMovement();// 0xb6a9124
	void NotifyTeammateSkydivedFromBus();// 0xbbc0600
	void MulticastUpdateVehicleInputStateReliable(FortAthenaVehicleInputStateReliable ReliableInput);// 0xb6a9070
	void MulticastSetWeaponOverrideAnimSet(FortWeaponAnimSet* WeaponOverrideAnimSet);// 0xd175498
	void MulticastClearWeaponOverrideAnimSet();// 0xd17547c
	void MarkSafe(class GameplayEffect GEtoApply);// 0xd1753d4
	void ManualReviveFromDBNO(class GameplayEffect ReviveGameplayEffectsOverride);// 0xd17532c
	void LocalThrowCarriedPlayer();// 0xd175318
	bool LocalIsTryingToGetPickup();// 0xd1752d8
	void ListCharacterParts(FString GenderAndOrPartString);// 0xd175224
	bool IsZiplining();// 0xd1751ec
	bool IsWaterSprintBoosting();// 0xd1751c8
	bool IsUsingUmbrella();// 0xd175188
	bool IsUsingPersonalVehicle();// 0xd175150
	bool IsTethered();// 0xd175118
	bool IsSprinting();// 0xd1750e0
	bool IsSkydivingFromLaunchPad();// 0xd1750a8
	bool IsSkydivingFromBus();// 0xd175078
	bool IsSkydiving();// 0xb6a904c
	bool IsPassivelySkydiving();// 0xd175040
	bool IsPassengerInVehicle();// 0xd175008
	bool IsParachuteOpen();// 0xb6a902c
	bool IsParachuteLockedOpen();// 0xd174fe8
	bool IsParachuteForcedOpen();// 0xd174fb0
	bool IsOperatingTurret();// 0xd174f78
	bool IsNiagaraSimpleWaterSim();// 0xd174f40
	bool IsNiagaraProceduralWaterSim();// 0xd174f08
	bool IsMaterialOverrideApplied(out const GUID MaterialOverrideId, out bool bOutIsCurrentOverride);// 0xd174df0
	bool IsItemAndVariantSwapActiveById(out const GUID SwapId);// 0xd174d30
	bool IsInVortex();// 0xd174d0c
	bool IsInVehicle();// 0xb6a8ff4
	bool IsInSlipperyMovement();// 0xd174ce8
	bool IsInSkyTube();// 0xd174cc4
	bool IsInInteractBlockingVehicle();// 0xd174c84
	bool IsInFrontEndHologram();// 0xd174c60
	bool IsInFloatingMovement();// 0xd174c28
	bool IsInCharacterCustomization();// 0xd174c04
	bool IsEmoteBlockedByMovement();// 0xd174bcc
	bool IsDrivingVehicle();// 0xd174b94
	bool IsDrivingInteractBlockingVehicle();// 0xd174b5c
	bool IsCharacterCustomizationLoadingCompleted();// 0xd174b24
	bool IsActivelyStrafingInAir();// 0xd174aec
	bool IsActivelySkydivingUpInVortex();// 0xd174ab4
	bool IsActivelySkydiving();// 0xd174a74
	void InvokeWaterJumpSplash(out const Vector SplashPosition, float SplashScale);// 0xb6a8f00
	void InvokeWaterHandSplashAttached(SceneComponent* AttachParent, FName AttachSocketName);// 0xb6a8e1c
	void InvokeWaterHandSplash(out const Vector SplashPosition);// 0xd1749c4
	bool HasStartedFloating();// 0xd1749a4
	bool HasRespawnedInAir();// 0xd174978
	bool HasRecentlyExitedZiplineFromJumping();// 0xd174940
	bool HasControlledRCPawn();// 0xd174900
	void HandleInStasis();// 0xd1748ec
	float GetZiplineSpeedFactorTarget();// 0xd1748d0
	float GetZiplineSpeedFactor();// 0xd1748b4
	interface class GetVehicleUInterface();// 0xb6a8db0
	byte GetVehicleSeatIndex();// 0xd174880
	bool GetVehicleOverrideExit();// 0xd174848
	Actor* GetVehicleActor();// 0xd174814
	FortAthenaVehicle* GetVehicle();// 0xd1747e0
	FortControllerComponent_TransientQuests* GetTransientQuestsComponent();// 0xd1747ac
	HitResult GetThrownItemTrajectoryHitResult();// 0xd174774
	Pawn* GetTetherPawn();// 0xd174740
	enum GetStasisMode();// 0xd174720
	float GetStamina();// 0xd1746ec
	Vector GetSlopeSlidingNormal();// 0xd1746b4
	void GetSlopeSlidingAngles(out float LocalPitch, out float LocalRoll);// 0xd1745b0
	SkeletalMeshComponent* GetSkeletalMeshForPartType(byte PartType);// 0xb6a8cf8
	SkeletalMeshComponent* GetSkeletalMeshForCharmType(byte CharmType);// 0xd1744f8
	SkeletalMeshComponent*[] GetSkeletalMeshesForAllParts();// 0xb6a8c50
	float GetSimulatedAttributeValue(out const GameplayAttribute Attribute, const float DefaultValue);// 0xd1743bc
	Vector GetPreviousVelocity();// 0xd174394
	Vector GetPreviousPosition();// 0xd174370
	BuildingGameplayActorPlayerPropAttachment* GetPossessedProp();// 0xd174354
	FortPlayerStateComponent_Quests* GetPlayerStateQuestsComponent();// 0xd174320
	bool GetPendingSkydiveLaunch();// 0xd1742e8
	float GetPawnSignificance();// 0xd1742cc
	int GetPawnLOD();// 0xd1742b0
	FortAthenaLoadout GetPawnCosmeticLoadout(const bool bGetBaseLoadout, const bool bWarn);// 0xd1741a0
	int GetNumActiveBalloons();// 0xd17416c
	float GetMaxStamina();// 0xd174138
	void GetLastWaterSurfaceInfo(out Vector OutWaterSurfacePosition, out Vector OutWaterSurfaceNormal);// 0xb6a8b54
	bool GetIsSlopeSliding();// 0xd174114
	bool GetIsHoldingObject();// 0xd1740dc
	Actor* GetHomeActor();// 0xd1740a8
	FText GetGliderDisplayName();// 0xd173fd8
	void GetGender(out bool IsMale, out bool IsFemale);// 0xb6a8a50
	AnimMontage* GetFrontendAnimMontageIdleOverride();// 0xd173f9c
	int GetExtraLives();// 0xd173f68
	enum GetDisplayContext();// 0xd173f48
	FortPlayerPawn* GetDBNOHoister();// 0xd173f2c
	FortPlayerPawn* GetDBNOHoistee();// 0xd173f10
	FortSkyTube* GetCurrentSkyTube();// 0xd173ef4
	FortPlayerPawn* GetControllingPawn();// 0xd173eb8
	FXSystemAsset* GetContrailParticleSystemSoftRef();// 0xd173dd4
	ActorComponent*[] GetComponentsByClassOnAllPartModifiers(class ActorComponent ComponentClass);// 0xd173ce8
	ActorComponent*[] GetComponentsByClassForPartType(class ActorComponent ComponentClass, byte PartType);// 0xd173bbc
	int GetClientObservedStatValue(out const FName StatName, int DefaultValue);// 0xd173ab0
	byte GetCharacterGender();// 0xd173a7c
	FortPlayerCharm* GetCharacterCharmActorForCharmType(byte CharmType);// 0xd1739c4
	byte GetCharacterBodyType();// 0xd173990
	float GetBuildSpeedModifier();// 0xd17395c
	float GetBuildCostModifier();// 0xd173928
	float GetBaseAimPitchQuantized();// 0xd1738f4
	FXSystemComponent* GetActivePlayerWaterBoostComponent();// 0xd1738d8
	FXSystemComponent* GetActivePlayerSwimmingComponent();// 0xd1738a4
	FXSystemComponent* GetActivePlayerJumpSplashInWaterComponent();// 0xd173888
	FXSystemComponent* GetActivePlayerInWaterComponent();// 0xd173854
	FXSystemComponent* GetActivePlayerHandSplashInWaterComponent();// 0xb6a8a34
	GameplayTagContainer GatherMetaTags(const AthenaCosmeticItemDefinition* CosmeticItem);// 0xd173780
	void ForceOpenParachuteAndOverrideGlider(const AthenaGliderItemDefinition* InGliderOverride, bool bResetGliderOverrideOnLanding, bool bForceIntoGliderRedeploy);// 0xd173648
	void ForceDetachFromRemoteControlledPawn();// 0xd173634
	void ExitSkyTube(FortSkyTube* SkyTube, out bool bIsLastTube);// 0xd173538
	void EnterSkyTube(FortSkyTube* SkyTube, out bool bIsFirstTube);// 0xd17343c
	void EndZiplining(bool bFromJump, bool bReachedEnd);// 0xd173344
	void EndSkydiving();// 0xd173328
	void EndHovering();// 0xd173314
	void EndGhostModeExit();// 0xd173300
	void EndFloating();// 0xd1732ec
	void EndedInteractSearch();// 0xd1732d8
	void DriverToPassengerAnimationStopped();// 0xd1732c4
	bool DontHandsOnHips();// 0xd173284
	bool DontCrossArms();// 0xd173244
	void DisableFaceRotation(float DurationInSeconds, bool bSetStasis);// 0xd173154
	void DestroyBalloonRope();// 0xd173140
	void DebugDestroyVehicle();// 0xd17312c
	void ConstructItemSwapClonedFromLoadout(out const FortAthenaLoadout Loadout, const AthenaCosmeticItemDefinition* Item, out FortSwapItemAndVariantData SwapData);// 0xd172f4c
	void ClientUnequipCurrentWeaponById(GUID WeaponItemGuid, bool bSetWeaponAttachment);// 0xd172e54
	void ClientResetAbilitySystemComponent();// 0xd172e38
	void ClientNotifyAbilityFailed(const GameplayAbility* FailedAbility, const GameplayTagContainer FailedReason);// 0xd172d2c
	void ClientExecuteGameplayCueOnSpecificPlayer(const GameplayTag GameplayCueTag);// 0xd172c7c
	void ClientAcknowledgeVehicleInputState(float Timestamp);// 0xd172bcc
	void ClearWeaponOverrideAnimSet();// 0xd172bb8
	void ClearExistingCosmeticPetInstance();// 0xd172ba4
	void CheckForUnburrowTeleport();// 0xd172b90
	bool CanUseInventoryAsDriver();// 0xd172b58
	bool CanShootFromVehicle();// 0xd172b20
	bool CanPredictJumpApex();// 0xd172ae8
	bool CanInterrogateFromDBNO(Controller* EventInstigator);// 0xd172a2c
	void CancelJumpAbility();// 0xd172a18
	void BroadcastSetWeaponOverrideAnimSet(FortWeaponAnimSet* WeaponOverrideAnimSet);// 0xd172968
	void BroadcastClearWeaponOverrideAnimSet();// 0xd17294c
	void BP_ForceOpenParachute();// 0xd172938
	void BP_ForceLockParachuteOpen(bool bLocked);// 0xd172888
	void BlindTestPredictiveInput();// 0xd172874
	void BeginZiplining(const FortAthenaZipline* Zipline, SceneComponent* SocketComponent);// 0xd172790
	void BeginSkydiving(bool bFromBus);// 0xd1726e0
	void BeginHovering();// 0xd1726cc
	void AttemptInstantInteractSearch();// 0xd1726b8
	void ApplyWrapToSaveTheWorldHoverboard();// 0xd1726a4
	GUID ApplyMaterialOverrideLocal(out const MaterialInterface* Material, out const FortPawnMaterialOverrideCopiedParameters MaterialParamsToCopy, float Priority, bool bHideParticleSystems, bool bApplyToWeapon);// 0xd17246c
	GUID ApplyMaterialOverride(out const MaterialInterface* Material, out const FortPawnMaterialOverrideCopiedParameters MaterialParamsToCopy, float Priority, bool bHideParticleSystems, bool bApplyToWeapon);// 0xd172234
	void ApplyCosmeticLoadout();// 0xd172220
	void AnimTrailsSetup(ParticleSystem* ParticleSystemReference, NiagaraSystem* NiagaraSystemReference, FName FirstSocketName, FName SecondSocketName, float Width, FXSystemComponent* OverrideParticleComp, FName OverideFirstSocketName, FName OverideSecondSocketName);// 0xbbc0600
	void AnimTrailsNotify(bool bActive);// 0xbbc0600
	void AnimTrailsDisable();// 0xbbc0600
	void AITargetDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd171fc0
	void AddIgnoredActor(Actor* InActorToIgnore, const float InIgnoreDuration);// 0xd171ed8
	void AddAttachment(SkeletalMesh* Attachment, class AnimInstance InAnimBP);// 0xd171df4
	void AddAbilityAITarget(FortAIPawn* InTarget);// 0xd171d4c

--------------------------------
Class: FortSwapItemAndVariantData
	FortItemDefinition* Item;//[Offset: 0x0, Size: 8]
	McpVariantChannelInfo[] ChannelInfoList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: McpVariantChannelInfo.CosmeticVariantInfo
	GameplayTagContainer OwnedVariantTags;//[Offset: 0x10, Size: 32]
	FortItemDefinition* ItemVariantIsUsedFor;//[Offset: 0x30, Size: 8]
	FString CustomData;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortAthenaVehicleInputStateReliable
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bIsHonking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bIgnoreForwardInAir;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bMovementModifier0;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bMovementModifier1;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bMovementModifier2;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortWeaponAnimSet.DataAsset.Object
	float DelayBetweenFireAndFullBodySprint;//[Offset: 0x30, Size: 4]
	FortAnimInput_PlayerAnimAsset MaleAnimAsset;//[Offset: 0x38, Size: 704]
	FortAnimInput_PlayerAnimAsset FemaleAnimAsset;//[Offset: 0x2f8, Size: 704]

--------------------------------
Class: FortAnimInput_PlayerAnimAsset.FortAnimInput_StandingPawnAnimAsset
	bool bPlayUpperBodySlotOnFullBodyInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bDisableFullBodyAimOffsetDuringMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bShouldApplyAimOffsetFullBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float FullBodyAimOffsetAlpha;//[Offset: 0x2c, Size: 4]
	float UpperBodyAimOffsetAlpha;//[Offset: 0x30, Size: 4]
	bool bOverrideDisableArmsHeadAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	float DisableArmsHeadAdditiveOverride;//[Offset: 0x38, Size: 4]
	FortAnimPlayrateRange SprintPlayrateClampRange;//[Offset: 0x3c, Size: 8]
	FortAnimPlayrateRange SprintTargetingPlayrateClampRange;//[Offset: 0x44, Size: 8]
	FortAnimPlayrateRange CrouchSprintPlayrateClampRange;//[Offset: 0x4c, Size: 8]
	FortAnimPlayrateRange CrouchSprintTargetingPlayrateClampRange;//[Offset: 0x54, Size: 8]
	AimOffsetBlendSpace* TargetingAimOffset;//[Offset: 0x60, Size: 8]
	AimOffsetBlendSpace* NonTargetingAimOffset;//[Offset: 0x68, Size: 8]
	AnimSequence* RelaxedPose;//[Offset: 0x70, Size: 8]
	AnimSequence* RelaxedPoseLevel2;//[Offset: 0x78, Size: 8]
	AimOffsetBlendSpace* RelaxedAimOffset;//[Offset: 0x80, Size: 8]
	BlendSpaceBase* JogAdditiveBlendSpace;//[Offset: 0x88, Size: 8]
	BlendSpaceBase* JogAdditiveBlendSpaceRelaxed;//[Offset: 0x90, Size: 8]
	BlendSpaceBase* JogAdditiveBlendSpaceRelaxedLevel2;//[Offset: 0x98, Size: 8]
	BlendSpaceBase* JogAdditiveBlendSpaceMeleeGuarding;//[Offset: 0xa0, Size: 8]
	AnimSequence* JogAdditive_N;//[Offset: 0xa8, Size: 8]
	AnimSequence* JogAdditive_E;//[Offset: 0xb0, Size: 8]
	AnimSequence* JogAdditive_S;//[Offset: 0xb8, Size: 8]
	AnimSequence* JogAdditive_W;//[Offset: 0xc0, Size: 8]
	AnimSequence* JogAdditiveRelaxed_N;//[Offset: 0xc8, Size: 8]
	AnimSequence* JogAdditiveRelaxed_E;//[Offset: 0xd0, Size: 8]
	AnimSequence* JogAdditiveRelaxed_S;//[Offset: 0xd8, Size: 8]
	AnimSequence* JogAdditiveRelaxed_W;//[Offset: 0xe0, Size: 8]
	AnimSequence* JogAdditiveRelaxedLevel2_N;//[Offset: 0xe8, Size: 8]
	AnimSequence* JogAdditiveRelaxedLevel2_E;//[Offset: 0xf0, Size: 8]
	AnimSequence* JogAdditiveRelaxedLevel2_S;//[Offset: 0xf8, Size: 8]
	AnimSequence* JogAdditiveRelaxedLevel2_W;//[Offset: 0x100, Size: 8]
	AnimSequence* SprintAnimation;//[Offset: 0x108, Size: 8]
	AnimSequence* SprintTargetingAnimation;//[Offset: 0x110, Size: 8]
	AnimSequence* CrouchTargetingPose;//[Offset: 0x118, Size: 8]
	AnimSequence* CrouchNonTargetingPose;//[Offset: 0x120, Size: 8]
	AnimSequence* CrouchRelaxedPose;//[Offset: 0x128, Size: 8]
	BlendSpaceBase* CrouchCoreTargetingBlendSpace;//[Offset: 0x130, Size: 8]
	BlendSpaceBase* CrouchCoreNonTargetingBlendSpace;//[Offset: 0x138, Size: 8]
	BlendSpaceBase* CrouchWalkAdditiveBlendSpace;//[Offset: 0x140, Size: 8]
	BlendSpaceBase* CrouchJogAdditiveBlendSpace;//[Offset: 0x148, Size: 8]
	BlendSpaceBase* CrouchJogAdditiveBlendSpaceRelaxed;//[Offset: 0x150, Size: 8]
	AnimSequence* CrouchWalkAdditive_N;//[Offset: 0x158, Size: 8]
	AnimSequence* CrouchWalkAdditive_E;//[Offset: 0x160, Size: 8]
	AnimSequence* CrouchWalkAdditive_S;//[Offset: 0x168, Size: 8]
	AnimSequence* CrouchWalkAdditive_W;//[Offset: 0x170, Size: 8]
	AnimSequence* CrouchJogAdditive_N;//[Offset: 0x178, Size: 8]
	AnimSequence* CrouchJogAdditive_E;//[Offset: 0x180, Size: 8]
	AnimSequence* CrouchJogAdditive_S;//[Offset: 0x188, Size: 8]
	AnimSequence* CrouchJogAdditive_W;//[Offset: 0x190, Size: 8]
	AnimSequence* CrouchJogAdditiveRelaxed_N;//[Offset: 0x198, Size: 8]
	AnimSequence* CrouchJogAdditiveRelaxed_E;//[Offset: 0x1a0, Size: 8]
	AnimSequence* CrouchJogAdditiveRelaxed_S;//[Offset: 0x1a8, Size: 8]
	AnimSequence* CrouchJogAdditiveRelaxed_W;//[Offset: 0x1b0, Size: 8]
	AnimSequence* CrouchSprintAnimation;//[Offset: 0x1b8, Size: 8]
	AnimSequence* CrouchSprintTargetingAnimation;//[Offset: 0x1c0, Size: 8]
	AnimSequence* SwimRelaxedPose;//[Offset: 0x1c8, Size: 8]
	AnimSequence* SwimTargetingPose;//[Offset: 0x1d0, Size: 8]
	AnimSequence* SwimNonTargetingPose;//[Offset: 0x1d8, Size: 8]
	BlendSpaceBase* SwimJogAdditiveBlendSpace;//[Offset: 0x1e0, Size: 8]
	BlendSpaceBase* SwimJogAdditiveBlendSpaceRelaxed;//[Offset: 0x1e8, Size: 8]
	AnimSequence* SwimSprintAnimation;//[Offset: 0x1f0, Size: 8]
	AimOffsetBlendSpace* SwimTargetingAimOffset;//[Offset: 0x1f8, Size: 8]
	AnimSequence* SwimIdleNoise;//[Offset: 0x200, Size: 8]
	AnimSequence* IdleNoise_AR_DownSights;//[Offset: 0x208, Size: 8]
	AnimSequence* SwimJumpSurfaceEndAdditve;//[Offset: 0x210, Size: 8]
	AnimSequence* SwimJumpSurfaceLoopAdditve;//[Offset: 0x218, Size: 8]
	AnimSequence* SwimJumpFallLoopAdditve;//[Offset: 0x220, Size: 8]
	AnimSequence* SwimJumpStartLoopAdditve;//[Offset: 0x228, Size: 8]
	AnimSequence* SwimJumpStartAdditve;//[Offset: 0x230, Size: 8]
	AnimSequence* FlyModeLoopAdditive;//[Offset: 0x238, Size: 8]
	AnimSequence* FlyModeStartAdditive;//[Offset: 0x240, Size: 8]
	AnimSequence* ZipLineStartAdditve;//[Offset: 0x248, Size: 8]
	AnimSequence* JetPackJumpAdditve;//[Offset: 0x250, Size: 8]
	AnimSequence* JetPackStartAdditve;//[Offset: 0x258, Size: 8]
	AnimSequence* FallAdditive;//[Offset: 0x260, Size: 8]
	AnimSequence* JumpLoopAdditive;//[Offset: 0x268, Size: 8]
	AnimSequence* JumpUpAdditive;//[Offset: 0x270, Size: 8]
	AnimSequence* WeaponChargeLoop;//[Offset: 0x278, Size: 8]
	AnimSequence* SwimUpperBodyAdditivePoseOffset;//[Offset: 0x280, Size: 8]
	AnimSequence* WeaponInspectAnimation;//[Offset: 0x288, Size: 8]
	bool bOverridePitchAndYawOffsets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	FortAnimInput_AdjustedAimOffset AnimSetOffsets;//[Offset: 0x294, Size: 16]
	FName[] BonesToHide;//[Offset: 0x2a8, Size: 16]
	bool bOverrideHandIKRetargetingWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	float HandIKRetargetingWeight;//[Offset: 0x2bc, Size: 4]

--------------------------------
Class: FortAnimInput_StandingPawnAnimAsset
	AnimSequence* UpperBodyAdditivePoseOffset;//[Offset: 0x8, Size: 8]
	AnimSequence* IdleNoise;//[Offset: 0x10, Size: 8]
	AnimSequence* TargetingPose;//[Offset: 0x18, Size: 8]
	AnimSequence* NonTargetingPose;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortAnimPlayrateRange
	float MinPlayRate;//[Offset: 0x0, Size: 4]
	float MaxPlayRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float AnimLength;//[Offset: 0x8c, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 16]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 16]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 16]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 32]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 16]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 8]
	Vector SampleValue;//[Offset: 0x8, Size: 12]
	float RateScale;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 16]
	float min;//[Offset: 0x10, Size: 4]
	float max;//[Offset: 0x14, Size: 4]
	int GridNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortAnimInput_AdjustedAimOffset
	float YawOffset;//[Offset: 0x0, Size: 4]
	float PitchOffset;//[Offset: 0x4, Size: 4]
	float TargetingYawOffset;//[Offset: 0x8, Size: 4]
	float TargetingPitchOffset;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BuildingGameplayActorPlayerPropAttachment.BuildingGameplayActor.BuildingActor.Actor.Object
	bool bClientAttachmentErrorCorrectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 1]
	void LogState(FString CallingContext);// 0xce51438
	void InitProp(Actor* PropActorToAttach);// 0xce51390
	bool DoesMeshComponentHaveVisibleMaterial(const StaticMeshComponent* StaticMeshComponent);// 0xce512dc
	void CalcWorldSpaceBounds(Actor* PropActor, out Vector Origin, out Vector Extent);// 0xce511a0
	void AttachProp(Actor* PropActorToAttach);// 0xce510f8

--------------------------------
Class: BuildingGameplayActor.BuildingActor.Actor.Object
	FortAbilitySet* AbilitySet;//[Offset: 0x5d8, Size: 8]
	FortAbilitySet* InherentAbilitySets;//[Offset: 0x5e0, Size: 8]
	FortDamageSet* DamageSet;//[Offset: 0x608, Size: 8]
	DataTableRowHandle DamageStatHandle;//[Offset: 0x610, Size: 16]
	bool bAllowRidingOnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	MulticastInlineDelegateProperty OnProximityPulseDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnProximityPrePulseDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnProximityEffectsAppliedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnDeliverableAbilityInfoAppliedToTouchingActor;//[Size: 16]
	MulticastInlineDelegateProperty OnDeliverableAbilityInfoChangedForExitingTouchActor;//[Size: 16]
	bool bIgnoreInstigatorCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool bAddOwnerVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	int AbilitySourceLevel;//[Offset: 0x67c, Size: 4]
	BuildingGameplayActorAbilityDeliveryInfo DeliverableAbilityInfo;//[Offset: 0x680, Size: 160]
	bool bApplyDefaultEnabledAbilityBucketsOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x720, Size: 1]
	bool bUseSimpleActorTouchSetupForAbilityBuckets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x720, Size: 1]
	bool bCanBeMarked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x720, Size: 1]
	bool bBlockMarking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x720, Size: 1]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0x728, Size: 104]
	Vector MarkerPositionOffset;//[Offset: 0x790, Size: 12]
	bool bShowInteractKeybind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 1]
	PrimitiveComponent* RegisteredTouchComponent;//[Offset: 0x7a0, Size: 8]
	GameplayTagContainer AnalyticsTags;//[Offset: 0x7b0, Size: 32]
	float PostProcessOverlapBlendWeight;//[Offset: 0x7d0, Size: 4]
	Widget* CustomInteractionWidget;//[Offset: 0x7d8, Size: 8]
	void SetTouchComponentForAbilityDeliveryInfo(PrimitiveComponent* PrimitiveComponent);// 0xce4c07c
	void SetInitialVelocity(out const Vector InitialVelocity);// 0xce4bfcc
	void SetIgnoreInstigatorCollision(bool bShouldIgnore);// 0xce4bf1c
	void SetAbilitySourceLevel(int NewAbilitySourceLevel);// 0xce4be78
	void OverrideMarkerDisplayInfo(out const MarkedActorDisplayInfo NewDisplayInfo);// 0xce4bd30
	void OnReplicatedVelocityStartOrStop(bool bStart);// 0xbbc0600
	void OnRegisteredTouchComponentEndOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xce4bbc4
	void OnRegisteredTouchComponentBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xce4b9a8
	void OnDropped(bool bValidLocation, bool bPassesPlacementRestrictions, bool bWasIntentionallyPlaced);// 0xbbc0600
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0xb5f1150
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0xb5f0f50
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0xce4b7d0
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0xb5f0d6c
	Transform GetTargetingSourceTransform(enum Source);// 0xce4b714
	void ForceChangeOwnerInstigator(FortPlayerController* NewInstigator);// 0xce4b66c
	void EnableAbilityDeliveryInfo(GameplayTag BucketTag);// 0xce4b5c4
	void DisableAbilityDeliveryInfo(GameplayTag BucketTag);// 0xce4b51c
	bool AcceptsEmoteSprays();// 0xce4b4dc

--------------------------------
Class: FortDamageSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData OutgoingBaseDamage;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData OutgoingBaseEnvironmentalDamage;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData OutgoingBaseImpactDamage;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData OutgoingAbilityDamage;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData OutgoingBaseAbilityDamageMultiplier;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData ZoneCritMultiplier;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData DiceCritChance;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData DiceCritMultiplier;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData KnockbackMagnitude;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData KnockbackZAngle;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData StunTime;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData WeaponSkill;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData CritRating;//[Offset: 0x210, Size: 40]
	FortGameplayAttributeData MaxMeleeComboLevel;//[Offset: 0x238, Size: 40]
	FortGameplayAttributeData ShieldDamageScale;//[Offset: 0x260, Size: 40]
	FortGameplayAttributeData HealthDamageScale;//[Offset: 0x288, Size: 40]
	void OnRep_ZoneCritMultiplier(out const FortGameplayAttributeData OldValue);// 0xcfcb830
	void OnRep_WeaponSkill(out const FortGameplayAttributeData OldValue);// 0xcfcb75c
	void OnRep_StunTime(out const FortGameplayAttributeData OldValue);// 0xcfcb688
	void OnRep_ShieldDamageScale(out const FortGameplayAttributeData OldValue);// 0xcfcb5b4
	void OnRep_OutgoingBaseImpactDamage(out const FortGameplayAttributeData OldValue);// 0xcfcb4e0
	void OnRep_OutgoingBaseEnvironmentalDamage(out const FortGameplayAttributeData OldValue);// 0xcfcb40c
	void OnRep_OutgoingBaseDamage(out const FortGameplayAttributeData OldValue);// 0xcfcb338
	void OnRep_OutgoingBaseAbilityDamageMultiplier(out const FortGameplayAttributeData OldValue);// 0xcfcb264
	void OnRep_OutgoingAbilityDamage(out const FortGameplayAttributeData OldValue);// 0xcfcb190
	void OnRep_KnockbackZAngle(out const FortGameplayAttributeData OldValue);// 0xcfcb0bc
	void OnRep_KnockbackMagnitude(out const FortGameplayAttributeData OldValue);// 0xcfcafe8
	void OnRep_HealthDamageScale(out const FortGameplayAttributeData OldValue);// 0xcfcaf14
	void OnRep_DiceCritMultiplier(out const FortGameplayAttributeData OldValue);// 0xcfcae40
	void OnRep_DiceCritChance(out const FortGameplayAttributeData OldValue);// 0xcfcad6c

--------------------------------
Class: FortAttributeSet.AttributeSet.Object

--------------------------------
Class: FortGameplayAttributeData.GameplayAttributeData
	float Minimum;//[Offset: 0x10, Size: 4]
	float Maximum;//[Offset: 0x14, Size: 4]
	bool bIsCurrentClamped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsBaseClamped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bShouldClampBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	float UnclampedBaseValue;//[Offset: 0x1c, Size: 4]
	float UnclampedCurrentValue;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 4]
	float CurrentValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BuildingGameplayActorAbilityDeliveryInfo
	BuildingGameplayActorAbilityDeliveryBucket[] DeliveryBuckets;//[Offset: 0x0, Size: 16]
	ScalableFloat ProximityPulseInterval;//[Offset: 0x10, Size: 40]
	ScalableFloat ProximityPrePulseTime;//[Offset: 0x38, Size: 40]
	bool bHasGEsToApplyOnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bHasGEsToApplyOnExit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bHasGEsToApplyOnPulseTimer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bHasPersistentEffects;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	BuildingGameplayActor* OwningActor;//[Offset: 0x68, Size: 8]
	Actor*[] DeferredTouchActorsToProcess;//[Offset: 0x70, Size: 16]

--------------------------------
Class: BuildingGameplayActorAbilityDeliveryBucket
	GameplayTag Tag;//[Offset: 0x0, Size: 8]
	ProximityBasedGEDeliveryInfoHard[] ProximityEffectBuckets;//[Offset: 0x8, Size: 16]
	FortAbilitySetDeliveryInfo[] PawnPersistentAbilitySetBuckets;//[Offset: 0x18, Size: 16]
	FortAbilitySetHandle[] PersistentlyAppliedAbilitySets;//[Offset: 0x28, Size: 16]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bEnabledByDefault;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bHasGEsToApplyOnTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bHasGEsToApplyOnExit;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bHasGEsToApplyOnPulseTimer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bHasPersistentEffects;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]

--------------------------------
Class: ProximityBasedGEDeliveryInfoHard.ProximityBasedGEDeliveryInfoBase
	GameplayEffectApplicationInfoHard[] EffectsToApply;//[Offset: 0x98, Size: 16]

--------------------------------
Class: ProximityBasedGEDeliveryInfoBase
	FortDeliveryInfoRequirementsFilter DeliveryRequirements;//[Offset: 0x8, Size: 136]
	enum ProximityApplicationType;//[Offset: 0x90, Size: 1]

--------------------------------
Class: FortAbilitySetHandle
	AbilitySystemComponent* TargetAbilitySystemComponent;//[Offset: 0x0, Size: 8]
	GameplayAbilitySpecHandle[] GrantedAbilityHandles;//[Offset: 0x8, Size: 16]
	ActiveGameplayEffectHandle[] AppliedEffectHandles;//[Offset: 0x18, Size: 16]
	GUID[] ItemGuidsForAdditionalItems;//[Offset: 0x28, Size: 16]

--------------------------------
Class: AthenaPetItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum PetAttachRule;//[Offset: 0x6d0, Size: 1]
	Vector PetAttachOffset;//[Offset: 0x6d4, Size: 12]
	FName PetAttachSocket;//[Offset: 0x6e0, Size: 8]
	FortPetStimuliBank*[] StimuliBanks;//[Offset: 0x6e8, Size: 16]
	class FortPlayerPet* PetPrefabClass;//[Offset: 0x6f8, Size: 40]
	FortTaggedSoundBank* PetSoundBank;//[Offset: 0x720, Size: 40]
	class FortPlayerPet GetPetPrefabClass();// 0xce3800c

--------------------------------
Class: FortPetStimuliBank.DataAsset.Object
	PetResponseFromQuestSystem[] QuestTriggers;//[Offset: 0x30, Size: 16]

--------------------------------
Class: PetResponseFromQuestSystem
	DataTableRowHandle ObjectiveStatHandle;//[Offset: 0x0, Size: 16]
	GameplayTag ResponseTag;//[Offset: 0x10, Size: 8]
	float ResponseDuration;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortPlayerPet.Actor.Object
	AthenaPetItemDefinition* PetItemDef;//[Offset: 0x228, Size: 8]
	AudioComponent* PetAudioComponent;//[Offset: 0x230, Size: 8]
	bool bIsFrontEndPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	SkeletalMeshComponentBudgeted* PetMesh;//[Offset: 0x248, Size: 8]
	SphereComponent* InteractionCollisionSphere;//[Offset: 0x250, Size: 8]
	bool bSuppressInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	MaterialInterface*[] SavedMaterials;//[Offset: 0x260, Size: 16]
	FortTaggedSoundBank* SoundBank;//[Offset: 0x290, Size: 8]
	void ResetPetMaterials();// 0xd18a444
	void ReInitPetDisplay();// 0xd18a430
	void PetMaterialsOverride();// 0xbbc0600
	void OnRequestedCustomizationComplete(FortPlayerPawn* Pawn);// 0xd18a388
	void InitalizeFromItemDef(const AthenaPetItemDefinition* InPetItemDef);// 0xd18a2e0
	FortPlayerPawn* GetFortPlayerPawn();// 0xd18a2ac

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xef0, Size: 1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xef0, Size: 1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xef0, Size: 1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x8083354

--------------------------------
Class: FortTaggedSoundBank.DataAsset.Object
	<GameplayTag,TaggedSoundBankResponseList> FlattenedResponseMap;//[Offset: 0x30, Size: 80]
	SoundBase* GetSoundToPlayByExactMatch(out const GameplayTag Tag, out const GameplayTagContainer Context);// 0xd1e0164
	SoundBase* GetSoundToPlay(out const GameplayTag Tag, out const GameplayTagContainer Context);// 0xb6c6110

--------------------------------
Class: TaggedSoundBankResponseList
	FortTaggedSoundCue[] CueList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortTaggedSoundCue
	GameplayTagQuery Requirements;//[Offset: 0x0, Size: 72]
	SoundBase* Sound;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortAthenaVehicleInputStateUnreliable
	float ForwardAlpha;//[Offset: 0x0, Size: 4]
	float RightAlpha;//[Offset: 0x4, Size: 4]
	float PitchAlpha;//[Offset: 0x8, Size: 4]
	float LookUpDelta;//[Offset: 0xc, Size: 4]
	float TurnDelta;//[Offset: 0x10, Size: 4]
	float SteerAlpha;//[Offset: 0x14, Size: 4]
	float GravityOffset;//[Offset: 0x18, Size: 4]
	Vector_NetQuantize100 MovementDir;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: ZiplinePawnState
	FortAthenaZiplineBase* Zipline;//[Offset: 0x0, Size: 8]
	bool bIsZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bJumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bReachedEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	int AuthoritativeValue;//[Offset: 0xc, Size: 4]
	Vector SocketOffset;//[Offset: 0x10, Size: 12]
	float TimeZipliningBegan;//[Offset: 0x1c, Size: 4]
	float TimeZipliningEndedFromJump;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortAthenaZiplineBase.BuildingGameplayActor.BuildingActor.Actor.Object
	FortPlayerPawn* CurrentInteractingPawn;//[Offset: 0x7e0, Size: 8]
	bool UseInteractToEnterZipline();// 0xcf2db70

--------------------------------
Class: VehiclePawnState
	Actor* Vehicle;//[Offset: 0x0, Size: 8]
	float VehicleApexZ;//[Offset: 0x8, Size: 4]
	byte SeatIndex;//[Offset: 0xc, Size: 1]
	byte ExitSocketIndex;//[Offset: 0xd, Size: 1]
	bool bOverrideVehicleExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	Vector SeatTransitionVector;//[Offset: 0x10, Size: 12]
	float EntryTime;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FortPawnComponent_Tether.FortPawnComponent.PawnComponent.GameFrameworkComponent.ActorComponent.Object
	Pawn* TetherPawn;//[Offset: 0xb0, Size: 8]
	float TetherPawnSavedCullDistanceSquared;//[Offset: 0xb8, Size: 4]
	bool bTetheredWithoutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool bPressedTetheredBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool bAllowVehicleTether;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	Vector2D TetherSweetSpotRange;//[Offset: 0xe0, Size: 8]
	Vector2D TetherAccelerationRange;//[Offset: 0xe8, Size: 8]
	float TetherSlackLength;//[Offset: 0xf0, Size: 4]
	float TetherCatchupLength;//[Offset: 0xf4, Size: 4]
	float TetherViewPlayerLength;//[Offset: 0xf8, Size: 4]
	float TetherBreakLength;//[Offset: 0xfc, Size: 4]
	float TetheredSpeedToBackOff;//[Offset: 0x100, Size: 4]
	float TetheredMaxSpeed;//[Offset: 0x104, Size: 4]
	float TetheredMovementAccelBackOff;//[Offset: 0x108, Size: 4]
	float TetheredMovementAccelNudge;//[Offset: 0x10c, Size: 4]
	float TetheredMovementGroundFrictionMultiplier;//[Offset: 0x110, Size: 4]
	float TetheredMovementWaterFrictionMultiplier;//[Offset: 0x114, Size: 4]
	float TetheredMovementMaxAccel;//[Offset: 0x118, Size: 4]
	float SetViewTargetToTetherPawnDelayTime;//[Offset: 0x11c, Size: 4]
	float SetViewTargetToTetherPawnBlendTime;//[Offset: 0x120, Size: 4]
	float TetherJumpServerCorrectionExpansionTime;//[Offset: 0x124, Size: 4]
	float TetherInitialYankLaunchZ;//[Offset: 0x128, Size: 4]
	StaticMesh* TetherRopeMesh;//[Offset: 0x130, Size: 8]
	MaterialInterface* TetherRopeMaterial;//[Offset: 0x138, Size: 8]
	StaticMeshComponent* TetherRopeComp;//[Offset: 0x140, Size: 8]
	SkeletalMesh* TetherRopeRodMesh;//[Offset: 0x148, Size: 8]
	SkeletalMeshComponent* TetherRopeRodComp;//[Offset: 0x150, Size: 8]
	float TetherRightInput;//[Offset: 0x158, Size: 4]
	InputComponent* TetheredInputComponent;//[Offset: 0x160, Size: 8]
	float TetheredExitHoldTime;//[Offset: 0x170, Size: 4]
	void TetheredExitReleased();// 0xd1128c8
	void TetheredExitPressed();// 0xd1128b4
	void TetheredBoostReleased();// 0xd11289c
	void TetheredBoostPressed();// 0xd112880
	void SetViewTargetToTetherPawn();// 0xd11286c
	void ServerRequestTetherJump();// 0xd112850
	void ServerReleaseTether();// 0xd112834
	void OnRep_TetherPawn(Pawn* OldTetherPawn);// 0xd11278c
	void OnRep_TetheredWithoutWeapon();// 0xd112778
	void GamepadTetheredExitAndReloadReleased();// 0xd112764
	void DelayedSetViewTargetToTetherPawn();// 0xd112750

--------------------------------
Class: FortPawnComponent.PawnComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: PawnComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: VectorRK4SpringInterpolator
	float StiffnessConstant;//[Offset: 0x0, Size: 4]
	float DampeningRatio;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CustomColorComponent.Object

--------------------------------
Class: FortHero.FortWorker.FortCharacter.FortAccountItem.FortPersistableItem.FortItem.Object
	FString hero_name;//[Offset: 0x1b8, Size: 16]
	FortSavedModeLoadout[] mode_loadouts;//[Offset: 0x1c8, Size: 16]
	bool Refundable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	McpVariantReader[] OutfitVariants;//[Offset: 0x1e0, Size: 16]
	McpVariantReader[] BackblingVariants;//[Offset: 0x1f0, Size: 16]
	FortHeroSpecialization*[] Specializations;//[Offset: 0x200, Size: 16]
	FortAbilityKit*[] SpecializationAbilityKits;//[Offset: 0x210, Size: 16]
	CustomCharacterPart*[] CharacterParts;//[Offset: 0x220, Size: 16]
	McpVariantChannelInfo[] OutfitVariantChannels;//[Offset: 0x238, Size: 16]
	McpVariantChannelInfo[] BackblingVariantChannels;//[Offset: 0x248, Size: 16]
	bool IsLevelClamped();// 0xd02a388
	bool IsInExpeditionSquad();// 0xd02a350
	int GetUnclampedLevel();// 0xd02a31c
	FortHeroType* GetHeroTypeBP();// 0xd02a2e8

--------------------------------
Class: FortWorker.FortCharacter.FortAccountItem.FortPersistableItem.FortItem.Object
	FString slotted_building_id;//[Offset: 0x108, Size: 16]
	int building_slot_used;//[Offset: 0x118, Size: 4]
	int Gender;//[Offset: 0x11c, Size: 4]
	FString personality;//[Offset: 0x120, Size: 16]
	FString set_bonus;//[Offset: 0x130, Size: 16]
	FString Portrait;//[Offset: 0x140, Size: 16]
	GameplayTagContainer PersonalityTag;//[Offset: 0x150, Size: 32]
	GameplayTagContainer SetBonusTag;//[Offset: 0x170, Size: 32]
	FortItemIconDefinition* IconDefinition;//[Offset: 0x190, Size: 40]
	FortWorkerType* GetWorkerTypeBP();// 0xd22b7c4

--------------------------------
Class: FortCharacter.FortAccountItem.FortPersistableItem.FortItem.Object
	FString squad_id;//[Offset: 0xf0, Size: 16]
	int squad_slot_idx;//[Offset: 0x100, Size: 4]

--------------------------------
Class: FortAccountItem.FortPersistableItem.FortItem.Object
	int Level;//[Offset: 0xb8, Size: 4]
	int XP;//[Offset: 0xbc, Size: 4]
	int item_seen;//[Offset: 0xc0, Size: 4]
	int favorite;//[Offset: 0xc4, Size: 4]
	int max_level_bonus;//[Offset: 0xc8, Size: 4]
	FString inventory_overflow_date;//[Offset: 0xd0, Size: 16]
	DateTime creation_time;//[Offset: 0xe0, Size: 8]
	bool bIsPendingBeingMarkedAsSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bNeedsResolveMarkedAsSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	void MarkItemAsSeenBP();// 0xce9ee84
	bool IsRefundable();// 0xce9ee44
	bool IsFavorite();// 0xce9ee04
	bool HasBeenSeenLocally();// 0xce9edcc
	FortItemQuantityPair[] GetRefundResults();// 0xce9ed24
	FortItemQuantityPair[] GetRecyclingRefunds();// 0xce9ec84
	DateTime GetCreationTime();// 0xce9ec48

--------------------------------
Class: FortItemQuantityPair
	PrimaryAssetId ItemPrimaryAssetId;//[Offset: 0x0, Size: 16]
	int Quantity;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 8]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortSavedModeLoadout
	FString LoadoutName;//[Offset: 0x0, Size: 16]
	FString[] SelectedGadgets;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortHeroSpecialization.PrimaryDataAsset.DataAsset.Object
	FortSpecializationSlot[] SpecializationSlots;//[Offset: 0x30, Size: 16]
	CustomCharacterPart*[] CharacterParts;//[Offset: 0x40, Size: 16]
	byte AlterationType;//[Offset: 0x50, Size: 1]
	HeroSpecializationAttributeRequirement[] AttributeRequirements;//[Offset: 0x58, Size: 16]
	GameplayTagContainer RequiredTags;//[Offset: 0x68, Size: 32]
	bool bForceShowHeadAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bForceShowBackpack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	SlateBrush CardIconBrush;//[Offset: 0x90, Size: 136]

--------------------------------
Class: FortSpecializationSlot
	FortAbilityKit* GrantedAbilityKit;//[Offset: 0x0, Size: 40]
	FortAbilityKit* RemovedAbilityKit;//[Offset: 0x28, Size: 40]
	HeroSpecializationAttributeRequirement[] AttributeRequirements;//[Offset: 0x50, Size: 16]
	GameplayTagContainer RequiredTags;//[Offset: 0x60, Size: 32]
	int MinimumHeroLevel;//[Offset: 0x80, Size: 4]

--------------------------------
Class: HeroSpecializationAttributeRequirement
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 56]
	float MinimumValue;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FortHeroType.FortWorkerType.FortCharacterType.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bForceShowHeadAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 1]
	bool bForceShowBackpack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 1]
	FortHeroSpecialization*[] Specializations;//[Offset: 0x470, Size: 16]
	FortMontageLookupTable* DefaultMontageLookupTable;//[Offset: 0x480, Size: 40]
	FortMontageLookupTable* OverrideMontageLookupTable;//[Offset: 0x4a8, Size: 40]
	GameplayEffectApplicationInfo[] CombinedStatGEs;//[Offset: 0x4d0, Size: 16]
	GameplayTagContainer RequiredGPTags;//[Offset: 0x4e0, Size: 32]
	FortFeedbackBank* MaleOverrideFeedback;//[Offset: 0x500, Size: 40]
	FortFeedbackBank* FemaleOverrideFeedback;//[Offset: 0x528, Size: 40]
	class FortPlayerPawn* OverridePawnClass;//[Offset: 0x550, Size: 40]
	FortHeroGameplayDefinition* HeroGameplayDefinition;//[Offset: 0x578, Size: 8]
	AthenaCharacterItemDefinition* HeroCosmeticOutfitDefinition;//[Offset: 0x580, Size: 8]
	AthenaBackpackItemDefinition* HeroCosmeticBackblingDefinition;//[Offset: 0x588, Size: 8]
	class FrontendAnimInstance* FrontEndAnimClass;//[Offset: 0x590, Size: 40]
	AnimMontage* FrontendAnimMontageIdleOverride;//[Offset: 0x5b8, Size: 40]
	float FrontEndBackPreviewRotationOffset;//[Offset: 0x5e0, Size: 4]
	FText Subtype;//[Offset: 0x5e8, Size: 24]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x600, Size: 16]
	DataTableRowHandle LegacyStatHandle;//[Offset: 0x610, Size: 16]
	AnimMontage* ItemPreviewMontage_Male;//[Offset: 0x620, Size: 40]
	AnimMontage* ItemPreviewMontage_Female;//[Offset: 0x648, Size: 40]
	FText GetSubType();// 0xd02a0d0
	FortHeroGameplayDefinition* GetHeroGameplayDefinition();// 0xd02a09c
	AnimMontage* GetFrontendAnimMontageIdleOverride();// 0xd02a068
	class FrontendAnimInstance GetFrontendAnimClass();// 0xd02a034

--------------------------------
Class: FortWorkerType.FortCharacterType.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	byte Gender;//[Offset: 0x3c0, Size: 1]
	FortItemIconDefinition* FixedPortrait;//[Offset: 0x3c8, Size: 40]
	bool bIsManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	GameplayTagContainer ManagerSynergyTag;//[Offset: 0x3f8, Size: 32]
	GameplayTagContainer FixedPersonalityTag;//[Offset: 0x418, Size: 32]
	GameplayTagContainer FixedSetBonusTag;//[Offset: 0x438, Size: 32]
	int MatchingPersonalityBonus;//[Offset: 0x458, Size: 4]
	int MismatchingPersonalityPenalty;//[Offset: 0x45c, Size: 4]

--------------------------------
Class: FortCharacterType.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: FortHeroGameplayDefinition.DataAsset.Object
	FortHeroClassGameplayDefinition* HeroClassGameplayDefinition;//[Offset: 0x30, Size: 8]
	GameplayTagContainer HeroBaseStatlineTags;//[Offset: 0x38, Size: 32]
	GameplayTagContainer HeroTags;//[Offset: 0x58, Size: 32]
	FortHeroTierAbilityKit[] TierAbilityKits;//[Offset: 0x78, Size: 16]
	FortHeroGameplayPiece HeroPerk;//[Offset: 0x88, Size: 152]
	FortHeroGameplayPiece CommanderPerk;//[Offset: 0x120, Size: 152]
	static bool IsTeamPerkValidForCommander(const FortTeamPerkItem* TeamPerk, const FortCampaignHeroLoadoutItem* HeroLoadout, out FText OutReason);// 0xd02b964
	static bool IsSlottedHeroAbilityDuplicated(const FortHero* PotentiallySlottedHero, const FortCampaignHeroLoadoutItem* HeroLoadout, out const FName SupportHeroSlotName, bool bIsSlotting);// 0xd02b7e4
	static bool IsHeroPerkValidForCommander(const FortHero* SlottedHero, const FortCampaignHeroLoadoutItem* HeroLoadout, out const FName SupportHeroSlotName, bool bIsSlotting, out FText OutReason);// 0xd02b5b4
	static bool IsHeroPerkUnlockedForHero(FortHero* FortHero);// 0xd02b508
	static bool IsCommanderPerkUnlockedForHero(FortHero* FortHero);// 0xd02b45c
	static bool IsAbilityKitUnlockedForHero(const FortHero* FortHero, FortAbilityKit* AbilityKit);// 0xd02b374
	static FText[] GetKeywordDisplayNames(FortHeroType* HeroType);// 0xd02b2b8
	static enum GetCommanderTierRequiredForTeamPerkToApplyToCommander(const FortTeamPerkItem* TeamPerk, const FortHero* CommanderHero);// 0xd02b1d4
	static enum GetCommanderTierRequiredForHeroPerkToApplyToCommander(FortHero* FortHero, FortHero* CommanderHero);// 0xd02b0f0
	static enum GetAbilityKitUnlockTierForHero(const FortHero* FortHero, FortAbilityKit* AbilityKit);// 0xd02b00c
	static FortAbilityKit*[] GetAbilityKitsForActiveAbilityPerks(const FortHeroType* HeroDefinition);// 0xd02af28
	static FortAbilityKit* GetAbilityKitForHeroPerk(const FortHeroType* HeroDefinition);// 0xd02ae80
	static FortAbilityKit* GetAbilityKitForCommanderPerk(const FortHeroType* HeroDefinition);// 0xd02add8
	static bool DoesTeamPerkApplyToCommander(const FortTeamPerkItem* TeamPerk, const FortHero* CommanderHero);// 0xd02acf0
	static bool DoesHeroSatisfyTeamPerkCondition(const FortTeamPerkItemDefinition* TeamPerk, FortHero* SupportHero);// 0xd02ac08
	static bool DoesHeroPerkApplyToCommander(FortHero* FortHero, FortHero* CommanderHero);// 0xd02ab20

--------------------------------
Class: FortHeroClassGameplayDefinition.DataAsset.Object
	class FortPlayerPawn* OverridePawnClass;//[Offset: 0x30, Size: 40]
	GameplayTagContainer HeroClassTags;//[Offset: 0x58, Size: 32]
	DataTableRowHandle LegacyStatHandle;//[Offset: 0x78, Size: 16]
	FortAbilityKit*[] ClassAbilityKits;//[Offset: 0x88, Size: 16]
	static FortAbilityKit*[] GetAbilityKitsForClassPerks(const FortHeroType* HeroDefinition);// 0xd02a420

--------------------------------
Class: FortHeroTierAbilityKit
	FortAbilityKit* GrantedAbilityKit;//[Offset: 0x0, Size: 40]
	enum MinimumHeroRarity;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FortHeroGameplayPiece
	FortAbilityKit* GrantedAbilityKit;//[Offset: 0x0, Size: 40]
	GameplayTagQuery RequiredCommanderTagQuery;//[Offset: 0x28, Size: 72]
	FText CommanderRequirementsText;//[Offset: 0x70, Size: 24]
	bool bUseGlobalDefaultMinima;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	enum MinimumHeroTier;//[Offset: 0x89, Size: 1]
	int MinimumHeroLevel;//[Offset: 0x8c, Size: 4]
	enum MinimumHeroRarity;//[Offset: 0x90, Size: 1]

--------------------------------
Class: FortTeamPerkItem.FortProfileItem.FortPersistableItem.FortItem.Object

--------------------------------
Class: FortItemIconDefinition.PrimaryDataAsset.DataAsset.Object
	Texture2D* SmallImage;//[Offset: 0x30, Size: 40]
	Texture2D* LargeImage;//[Offset: 0x58, Size: 40]

--------------------------------
Class: FortFeedbackBank.PrimaryDataAsset.DataAsset.Object
	FortFeedbackActionBankDefined[] BankDefinedFeedbackEvents;//[Offset: 0x30, Size: 16]
	FortFeedbackAction[] FeedbackEvents;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortFeedbackActionBankDefined.FortFeedbackAction
	float MinReplayTime;//[Offset: 0x30, Size: 4]
	float MinReplayTimeForSpeaker;//[Offset: 0x34, Size: 4]

--------------------------------
Class: FortFeedbackAction
	FortFeedbackHandle Handle;//[Offset: 0x8, Size: 24]
	FortFeedbackLine[] Lines;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortFeedbackHandle
	FortFeedbackBank* FeedbackBank;//[Offset: 0x0, Size: 8]
	FName EventName;//[Offset: 0x8, Size: 8]
	bool bReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bBankDefined;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	byte BroadcastFilterOverride;//[Offset: 0x12, Size: 1]

--------------------------------
Class: FortFeedbackLine
	SoundBase* Audio;//[Offset: 0x0, Size: 40]
	AnimSequence* AnimSequence;//[Offset: 0x28, Size: 40]
	AnimMontage* AnimMontage;//[Offset: 0x50, Size: 40]
	byte Addressee;//[Offset: 0x78, Size: 1]
	byte Context;//[Offset: 0x79, Size: 1]
	FortFeedbackResponse[] ResponseEvents;//[Offset: 0x80, Size: 16]
	bool bInterruptCurrentLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool bCanBeInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]
	bool bCanQue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 1]

--------------------------------
Class: FortFeedbackResponse
	FortFeedbackHandle Handle;//[Offset: 0x0, Size: 24]
	byte Context;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AthenaCharacterItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	<FName,class Object> RequestedDataStores;//[Offset: 0x6d0, Size: 80]
	<byte,MarshalledVFX_AuthoredDataConfig*> AuthoredVFXData_ByPart;//[Offset: 0x720, Size: 80]
	FortHeroType* HeroDefinition;//[Offset: 0x770, Size: 8]
	AthenaBackpackItemDefinition* DefaultBackpack;//[Offset: 0x778, Size: 8]
	AthenaCosmeticItemDefinition*[] RequiredCosmeticItems;//[Offset: 0x780, Size: 16]
	float PreviewPawnScale;//[Offset: 0x790, Size: 4]
	byte Gender;//[Offset: 0x794, Size: 1]
	FortFeedbackBank* FeedbackBank;//[Offset: 0x798, Size: 40]
	<GameplayTag,AthenaCharacterTaggedPartsList> TaggedPartsOverride;//[Offset: 0x7c0, Size: 80]

--------------------------------
Class: AthenaBackpackItemDefinition.AthenaCharacterPartItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AthenaCharacterPartItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	CustomCharacterPart*[] CharacterParts;//[Offset: 0x6d0, Size: 16]
	CustomCharacterPart*[] GetCharacterParts();// 0xce33198

--------------------------------
Class: AthenaCharacterTaggedPartsList
	CustomCharacterPart*[] Parts;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FrontendAnimInstance.FortBaseAnimInstance.AnimInstance.Object
	bool bIsSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	bool bIsPlayingEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 1]
	bool bIsBodyTypeManuallySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b, Size: 1]
	bool bIsCharacterCustomizationLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool bLookingAtBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35d, Size: 1]
	bool bIsRebirth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35d, Size: 1]
	FortAnimInput_PelvisAdjustment PelvisAdjustmentInput;//[Offset: 0x360, Size: 64]
	FortAnimInput_HandIK HandIKInput;//[Offset: 0x3a0, Size: 28]
	enum AnimBodyType;//[Offset: 0x3bc, Size: 1]
	FortAnimInput_Facial FacialInput;//[Offset: 0x3c0, Size: 12]
	FortAnimInput_RandomizeMontageSection RandomizeMontageSectionInput;//[Offset: 0x3d0, Size: 24]
	float HandIKRetargetingWeight;//[Offset: 0x3e8, Size: 4]
	float RightHandIKAlpha;//[Offset: 0x3ec, Size: 4]
	float LeftHandIKAlpha;//[Offset: 0x3f0, Size: 4]
	float IdlePelvisOffsetAlpha;//[Offset: 0x3f4, Size: 4]
	Vector IdlePelvisOffset;//[Offset: 0x3f8, Size: 12]
	float EmoteHipOffsetAlpha;//[Offset: 0x404, Size: 4]
	float EmoteHipOffsetInterpSpeed;//[Offset: 0x408, Size: 4]
	FortPlayerPawn* FortPlayerPawn;//[Offset: 0x410, Size: 8]
	byte Gender;//[Offset: 0x418, Size: 1]
	AnimMontage* IntroAnimation_Female;//[Offset: 0x420, Size: 8]
	AnimMontage* IntroAnimation_Male;//[Offset: 0x428, Size: 8]
	AnimMontage* OutroAnimation_Female;//[Offset: 0x430, Size: 8]
	AnimMontage* OutroAnimation_Male;//[Offset: 0x438, Size: 8]
	AnimMontage* SelectedAnimation_Female;//[Offset: 0x440, Size: 8]
	AnimMontage* SelectedAnimation_Male;//[Offset: 0x448, Size: 8]
	bool bCanPlayCustomAnimations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 1]
	bool bDontCrossArms;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 1]
	bool bNoHandsOnHips;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x450, Size: 1]
	GameplayTagAnimations GameplayTagAnimations;//[Offset: 0x458, Size: 16]
	GameplayTagAnimations FemaleGameplayTagAnimations;//[Offset: 0x468, Size: 16]
	GameplayTagAnimations MaleGameplayTagAnimations;//[Offset: 0x478, Size: 16]
	FortAnimInput_StandingPawnAnimAsset CurrentAnimSet;//[Offset: 0x498, Size: 40]
	FortAnimInput_StandingPawnAnimAsset DefaultAnimSetMale;//[Offset: 0x4c0, Size: 40]
	FortAnimInput_StandingPawnAnimAsset DefaultAnimSetFemale;//[Offset: 0x4e8, Size: 40]
	FortAnimInput_PlayerGliderAnimAsset CurrentGliderAnimSet;//[Offset: 0x510, Size: 576]
	FortAnimInput_Skydiving Skydiving;//[Offset: 0x750, Size: 96]
	bool ShouldHidePropsDuringBlend(AnimMontage* Montage);// 0xd22eda8
	void PlaySelected();// 0xd22ed94
	void PlayOutro();// 0xd22ed80
	void PlayIntro();// 0xd22ed6c
	void OnPlayMontageFromGameplayTagQuery(out const GameplayTagQuery MatchingQuery, AnimMontage* MontagePlaying);// 0xbbc0600
	void OnFocusedItemChanged(const FortItemDefinition* FocusedItem, const FortWeapon* EquippedWeapon, const FortPlayerParachute* CurrentParachute);// 0xbbc0600
	bool IsInLobby();// 0xd22ed34
	void AnimNotify_PlayFireFX(const AnimNotify* Notify);// 0xd22ec8c

--------------------------------
Class: FortAnimInput_PelvisAdjustment
	SkeletalMeshComponent* PawnMesh;//[Offset: 0x0, Size: 8]
	float DistanceToFeet;//[Offset: 0x8, Size: 4]
	float LegLength;//[Offset: 0xc, Size: 4]
	float DesiredLegLengthTreshold;//[Offset: 0x10, Size: 4]
	float DotProductBetweenUpVectorsTreshold;//[Offset: 0x14, Size: 4]
	float PelvisInterpSpeed;//[Offset: 0x18, Size: 4]
	float EmotePelvisOffsetInterpSpeed;//[Offset: 0x1c, Size: 4]
	float EmotePelvisOffsetAlpha;//[Offset: 0x20, Size: 4]
	Vector CurrentEmotePelvisOffset;//[Offset: 0x24, Size: 12]
	int PelvisBoneIndex;//[Offset: 0x30, Size: 4]
	int FootLeftBoneIndex;//[Offset: 0x34, Size: 4]
	int FootRightBoneIndex;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FortAnimInput_HandIK
	float IKAlphaOverrideInterpSpeed;//[Offset: 0x0, Size: 4]
	float IKSpaceSwitchOverrideInterpSpeed;//[Offset: 0x4, Size: 4]
	float HandIKRetargetingWeight;//[Offset: 0x8, Size: 4]
	float HandsInRootSpaceAlpha;//[Offset: 0xc, Size: 4]
	float LeftHandIKAlpha;//[Offset: 0x10, Size: 4]
	float RightHandIKAlpha;//[Offset: 0x14, Size: 4]
	enum LeftHandIKOverrideType;//[Offset: 0x18, Size: 1]
	enum RightHandIKOverrideType;//[Offset: 0x19, Size: 1]

--------------------------------
Class: FortAnimInput_Facial
	LiveLinkSubjectName SubjectName;//[Offset: 0x0, Size: 8]
	enum CurrentAnimType;//[Offset: 0x8, Size: 1]
	bool bCurvesOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: LiveLinkSubjectName
	FName Name;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortAnimInput_RandomizeMontageSection
	AnimSequenceBase* CurrentAnimation;//[Offset: 0x0, Size: 8]
	FName MontageSectionName;//[Offset: 0x8, Size: 8]
	float TimeUntilNextSectionChange;//[Offset: 0x10, Size: 4]
	int CurrentSectionParamIndex;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameplayTagAnimations
	GameplayTagAnimationData[] GameplayTagAnimData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: GameplayTagAnimationData
	GameplayTagContainer GameplayTags;//[Offset: 0x0, Size: 32]
	byte ValidGenders;//[Offset: 0x20, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortAnimInput_PlayerGliderAnimAsset
	BlendSpaceBase* Default_Base_BS;//[Offset: 0x0, Size: 8]
	BlendSpaceBase* Default_BodyAdditive_MaleMedium_BS;//[Offset: 0x8, Size: 8]
	BlendSpaceBase* Default_BodyAdditive_MaleLarge_BS;//[Offset: 0x10, Size: 8]
	BlendSpaceBase* Default_BodyAdditive_FemaleSmall_BS;//[Offset: 0x18, Size: 8]
	BlendSpaceBase* Default_BodyAdditive_FemaleMedium_BS;//[Offset: 0x20, Size: 8]
	BlendSpaceBase* Default_BodyAdditive_FemaleLarge_BS;//[Offset: 0x28, Size: 8]
	BlendSpaceBase* Default_TurnAdditive_MaleMedium_BS;//[Offset: 0x30, Size: 8]
	BlendSpaceBase* Default_TurnAdditive_MaleLarge_BS;//[Offset: 0x38, Size: 8]
	BlendSpaceBase* Default_TurnAdditive_FemaleSmall_BS;//[Offset: 0x40, Size: 8]
	BlendSpaceBase* Default_TurnAdditive_FemaleMedium_BS;//[Offset: 0x48, Size: 8]
	BlendSpaceBase* Default_TurnAdditive_FemaleLarge_BS;//[Offset: 0x50, Size: 8]
	BlendSpaceBase* Into_Base_BS;//[Offset: 0x58, Size: 8]
	BlendSpaceBase* Into_BodyAdditive_MaleMedium_BS;//[Offset: 0x60, Size: 8]
	BlendSpaceBase* Into_BodyAdditive_MaleLarge_BS;//[Offset: 0x68, Size: 8]
	BlendSpaceBase* Into_BodyAdditive_FemaleSmall_BS;//[Offset: 0x70, Size: 8]
	BlendSpaceBase* Into_BodyAdditive_FemaleMedium_BS;//[Offset: 0x78, Size: 8]
	BlendSpaceBase* Into_BodyAdditive_FemaleLarge_BS;//[Offset: 0x80, Size: 8]
	BlendSpaceBase* Into_TurnAdditive_MaleMedium_BS;//[Offset: 0x88, Size: 8]
	BlendSpaceBase* Into_TurnAdditive_MaleLarge_BS;//[Offset: 0x90, Size: 8]
	BlendSpaceBase* Into_TurnAdditive_FemaleSmall_BS;//[Offset: 0x98, Size: 8]
	BlendSpaceBase* Into_TurnAdditive_FemaleMedium_BS;//[Offset: 0xa0, Size: 8]
	BlendSpaceBase* Into_TurnAdditive_FemaleLarge_BS;//[Offset: 0xa8, Size: 8]
	BlendSpaceBase* Lean_MaleMedium_BS;//[Offset: 0xb0, Size: 8]
	BlendSpaceBase* Lean_MaleLarge_BS;//[Offset: 0xb8, Size: 8]
	BlendSpaceBase* Lean_FemaleSmall_BS;//[Offset: 0xc0, Size: 8]
	BlendSpaceBase* Lean_FemaleMedium_BS;//[Offset: 0xc8, Size: 8]
	BlendSpaceBase* Lean_FemaleLarge_BS;//[Offset: 0xd0, Size: 8]
	AnimSequence* LeanAdditive_Center_MaleMedium_Pose;//[Offset: 0xd8, Size: 8]
	AnimSequence* LeanAdditive_Center_MaleLarge_Pose;//[Offset: 0xe0, Size: 8]
	AnimSequence* LeanAdditive_Center_FemaleSmall_Pose;//[Offset: 0xe8, Size: 8]
	AnimSequence* LeanAdditive_Center_FemaleMedium_Pose;//[Offset: 0xf0, Size: 8]
	AnimSequence* LeanAdditive_Center_FemaleLarge_Pose;//[Offset: 0xf8, Size: 8]
	BlendSpaceBase* LeanAdditive_Into_BS;//[Offset: 0x100, Size: 8]
	AnimSequence* LeanAdditive_ForwardInto_Anim;//[Offset: 0x108, Size: 8]
	AnimSequence* LeanAdditive_ForwardInto_FromDeploy_Anim;//[Offset: 0x110, Size: 8]
	AnimSequence* LeanAdditive_BackInto_Anim;//[Offset: 0x118, Size: 8]
	AnimSequence* LeanAdditive_LeftInto_Anim;//[Offset: 0x120, Size: 8]
	AnimSequence* LeanAdditive_RightInto_Anim;//[Offset: 0x128, Size: 8]
	AnimSequence* LeanAdditive_ForwardOut_Anim;//[Offset: 0x130, Size: 8]
	AnimSequence* LeanAdditive_BackOut_Anim;//[Offset: 0x138, Size: 8]
	AnimSequence* LeanAdditive_LeftOut_Anim;//[Offset: 0x140, Size: 8]
	AnimSequence* LeanAdditive_RightOut_Anim;//[Offset: 0x148, Size: 8]
	BlendSpaceBase* ToGlide_BS;//[Offset: 0x150, Size: 8]
	BlendSpaceBase* ToGlide_Lean_BS;//[Offset: 0x158, Size: 8]
	BlendSpaceBase* ToDive_BS;//[Offset: 0x160, Size: 8]
	BlendSpaceBase* ToDive_Lean_BS;//[Offset: 0x168, Size: 8]
	BlendSpaceBase* Dive_WeaponR_Additive_BS;//[Offset: 0x170, Size: 8]
	AnimSequence* Glide_WeaponR_Additive_Anim;//[Offset: 0x178, Size: 8]
	BlendSpaceBase* GenericAdditive_Male_BS;//[Offset: 0x180, Size: 8]
	BlendSpaceBase* GenericAdditive_Female_BS;//[Offset: 0x188, Size: 8]
	float RootModPitchMin;//[Offset: 0x190, Size: 4]
	float RootModPitchMax;//[Offset: 0x194, Size: 4]
	float RootModYOffsetMin;//[Offset: 0x198, Size: 4]
	float RootModYOffsetMax;//[Offset: 0x19c, Size: 4]
	PelvisMod_VerticalInput_Spring PelvisModVertical;//[Offset: 0x1a0, Size: 20]
	PelvisMod_LateralInput_Spring PelvisModLateral;//[Offset: 0x1b4, Size: 28]
	PelvisMod_BankAngleInput_Spring PelvisModBankAngle;//[Offset: 0x1d0, Size: 36]
	ThighMod_LegAngleInput ThighModLegAngle;//[Offset: 0x1f4, Size: 24]
	ThighMod_LegPitchSpring ThighModLegPitch;//[Offset: 0x20c, Size: 20]
	ThighMod_LegBankSpring ThighModLegBank;//[Offset: 0x220, Size: 20]
	ThighMod_LeftLegDrag ThighModLeftLegDrag;//[Offset: 0x234, Size: 8]
	enum PlayerGliderType;//[Offset: 0x23c, Size: 1]
	bool bEnableSpringMods;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool bAllowPlayerDeployRootMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	bool bUseSurfStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 1]

--------------------------------
Class: PelvisMod_VerticalInput_Spring
	float VerticalLeanForwardA;//[Offset: 0x0, Size: 4]
	float VerticalLeanForwardB;//[Offset: 0x4, Size: 4]
	float VerticalLeanForwardStiffness;//[Offset: 0x8, Size: 4]
	float VerticalLeanForwardDamping;//[Offset: 0xc, Size: 4]
	float VerticalLeanForwardMass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PelvisMod_LateralInput_Spring
	float LateralLeanStrafeA;//[Offset: 0x0, Size: 4]
	float LateralLeanStrafeB;//[Offset: 0x4, Size: 4]
	float LateralTurnA;//[Offset: 0x8, Size: 4]
	float LateralTurnB;//[Offset: 0xc, Size: 4]
	float LateralStiffness;//[Offset: 0x10, Size: 4]
	float LateralDamping;//[Offset: 0x14, Size: 4]
	float LateralMass;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PelvisMod_BankAngleInput_Spring
	float BankLeanStrafeA;//[Offset: 0x0, Size: 4]
	float BankLeanStrafeB;//[Offset: 0x4, Size: 4]
	float BankTurnA;//[Offset: 0x8, Size: 4]
	float BankTurnB;//[Offset: 0xc, Size: 4]
	float BankStiffness;//[Offset: 0x10, Size: 4]
	float BankDampening;//[Offset: 0x14, Size: 4]
	float BankMass;//[Offset: 0x18, Size: 4]
	float BankClampMin;//[Offset: 0x1c, Size: 4]
	float BankClampMax;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ThighMod_LegAngleInput
	float LegBankPitchForwardA;//[Offset: 0x0, Size: 4]
	float LegBankPitchForwardB;//[Offset: 0x4, Size: 4]
	float LegBankPitchLeanStrafeA;//[Offset: 0x8, Size: 4]
	float LegBankPitchLeanStrafeB;//[Offset: 0xc, Size: 4]
	float LegBankPitchTurnA;//[Offset: 0x10, Size: 4]
	float LegBankPitchTurnB;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ThighMod_LegPitchSpring
	float LegPitchStiffness;//[Offset: 0x0, Size: 4]
	float LegPitchDampening;//[Offset: 0x4, Size: 4]
	float LegPitchMass;//[Offset: 0x8, Size: 4]
	float LegPitchClampMin;//[Offset: 0xc, Size: 4]
	float LegPitchClampMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ThighMod_LegBankSpring
	float LegBankStiffness;//[Offset: 0x0, Size: 4]
	float LegBankDampening;//[Offset: 0x4, Size: 4]
	float LegBankMass;//[Offset: 0x8, Size: 4]
	float LegBankClampMin;//[Offset: 0xc, Size: 4]
	float LegBankClampMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ThighMod_LeftLegDrag
	float LeftLegBankSpeed;//[Offset: 0x0, Size: 4]
	float LeftLegPitchSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortAnimInput_Skydiving
	Vector ParaGilderRootOffset;//[Offset: 0x0, Size: 12]
	Rotator ParaGliderRootRotationOverride;//[Offset: 0xc, Size: 12]
	bool bUseParaGlideRootModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bIsSkydivingFromLaunchPad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bIsSkydivingFromBus;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bIsInVortex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bIsUsingUmbrella;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bIsActivelyStrafingInAir;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bIsDiving;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bIsDivingUpInVortex;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bIsParachuteOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bIsSkydiving;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bIsParachuteLeaning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bIsSkydiveLeaning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bIsLeaning;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bIsSkydiveDiveMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 1]
	bool bParachuteLeanTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 1]
	bool bPlayedParachuteLeanTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 1]
	bool bPlaySkydiveDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 1]
	bool bSkydiveDriftDelayActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 1]
	bool bSkydiveDriftAnimAllowed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 1]
	bool bIsGliderRight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a, Size: 1]
	bool bIsGliderCenter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a, Size: 1]
	bool bIsGliderLeft;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a, Size: 1]
	bool bIsGliderForward;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a, Size: 1]
	bool bIsGliderBack;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a, Size: 1]
	float LocalAccelForward;//[Offset: 0x1c, Size: 4]
	float LocalAccelRight;//[Offset: 0x20, Size: 4]
	float LocalVelocityRight;//[Offset: 0x24, Size: 4]
	float SkydiveAimPitch;//[Offset: 0x28, Size: 4]
	float SkydiveAimPitchInterpSpeed;//[Offset: 0x2c, Size: 4]
	float SkydiveAimYaw;//[Offset: 0x30, Size: 4]
	float DeployChuteAnimRate;//[Offset: 0x34, Size: 4]
	float SkydiveDriftAnimRate;//[Offset: 0x38, Size: 4]
	float SkydiveDriftAnimRateCurrent;//[Offset: 0x3c, Size: 4]
	float SkydiveFidgetAnimRate;//[Offset: 0x40, Size: 4]
	float SkydiveFidgetAnimRateCurrent;//[Offset: 0x44, Size: 4]
	float SkydiveAdditiveAlpha;//[Offset: 0x48, Size: 4]
	float SkydiveDriftDelay;//[Offset: 0x4c, Size: 4]
	int SkydiveDriftAnim;//[Offset: 0x50, Size: 4]
	int SkydiveDriftAnimMax;//[Offset: 0x54, Size: 4]
	int LaunchpadAnim;//[Offset: 0x58, Size: 4]
	byte LocalAccelDir;//[Offset: 0x5c, Size: 1]
	byte DirectionLast;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: FortWeapon.Actor.Object
	MulticastInlineDelegateProperty OnWeaponRateOfFireChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPressTrigger;//[Size: 16]
	MulticastInlineDelegateProperty OnReleaseTrigger;//[Size: 16]
	bool bIsEquippingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool bIsReloadingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	bool bIsChargingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 1]
	bool bDisableEquipAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 1]
	bool bIsAimingConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	MulticastInlineDelegateProperty OnLocalAmmoChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalReloadStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalReloadCancelled;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalTargetingChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnSecondaryAbilityToggled;//[Size: 16]
	MulticastInlineDelegateProperty OnWeaponFireAudioVisuals;//[Size: 16]
	MulticastInlineDelegateProperty OnReticleColorChanged;//[Size: 16]
	bool bUseAttributeCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	FortWeaponItemDefinition* WeaponData;//[Offset: 0x378, Size: 8]
	FortWeaponItemDefinition* CosmeticOverrideWeaponData;//[Offset: 0x380, Size: 8]
	bool bImpactFXAttachedToHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	FortGameplayAbilityBehaviorDistanceData[] GameplayAbilityBehaviorDistanceData;//[Offset: 0x390, Size: 16]
	WeaponHitNotifyAudioBank* HitNotifyAudioBank;//[Offset: 0x3a0, Size: 8]
	bool bRemoveAbilitiesWhenRemovedFromInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	enum GrantedAbilityRemovalPolicy;//[Offset: 0x3c1, Size: 1]
	byte EquippedWeaponDestroyWrapperRepCounter;//[Offset: 0x408, Size: 1]
	float PersistentFXStartTime;//[Offset: 0x478, Size: 4]
	float MinimumTimeForPersistentFX;//[Offset: 0x47c, Size: 4]
	AthenaItemWrapDefinition* OverrideItemWrapSoftPtr;//[Offset: 0x480, Size: 40]
	enum WeaponReduceMeshWorkSetting;//[Offset: 0x4b8, Size: 1]
	bool bShouldDrawNativeReticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 1]
	Texture2D* ReticleImage;//[Offset: 0x4c0, Size: 8]
	Texture2D* AutoFireReticleImage;//[Offset: 0x4c8, Size: 8]
	Color ReticleDefaultColor;//[Offset: 0x4d0, Size: 4]
	Color ReticleEnemyColor;//[Offset: 0x4d4, Size: 4]
	Color ReticleBuildingColor;//[Offset: 0x4d8, Size: 4]
	Color ReticleNoTargetColor;//[Offset: 0x4dc, Size: 4]
	Texture2D* HitNotifyReticleImage;//[Offset: 0x4e0, Size: 8]
	Texture2D* HitNotifyLocationReticleImage;//[Offset: 0x4e8, Size: 8]
	float HitNotifyDisplayDuration;//[Offset: 0x4f0, Size: 4]
	Texture2D* ReticleCenterImage;//[Offset: 0x4f8, Size: 8]
	Texture2D* ReticleCenterPerfectAimImage;//[Offset: 0x500, Size: 8]
	Texture2D* ReticleInvalidTargetImage;//[Offset: 0x508, Size: 8]
	Texture2D* MuzzleBlockedReticleImage;//[Offset: 0x510, Size: 8]
	Texture2D* ReticleAltCenterImage;//[Offset: 0x518, Size: 8]
	Texture2D* ReticleOuterImage;//[Offset: 0x520, Size: 8]
	Texture2D* ReticleAltOuterImage;//[Offset: 0x528, Size: 8]
	float ReticleDefaultPrimaryStrikeAngle;//[Offset: 0x530, Size: 4]
	float ReticleDefaultSecondaryStrikeAngle;//[Offset: 0x534, Size: 4]
	bool bSupportsAutofireAtReticleTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	class FortCameraMode* CameraBase3PClass;//[Offset: 0x540, Size: 8]
	class FortCameraMode* CameraTargeting3PClass;//[Offset: 0x548, Size: 8]
	class FortCameraMode* CameraBase1PClass;//[Offset: 0x550, Size: 8]
	class FortCameraMode* CameraTargeting1PClass;//[Offset: 0x558, Size: 8]
	SoundBase* DestroyedSound;//[Offset: 0x560, Size: 8]
	SoundBase* OutOfAmmoSound;//[Offset: 0x568, Size: 8]
	SoundBase* ReloadSounds;//[Offset: 0x570, Size: 8]
	SoundBase* PrimaryFireSound1P;//[Offset: 0x588, Size: 8]
	SoundBase* PrimaryFireSound;//[Offset: 0x590, Size: 8]
	SoundBase* PrimaryFireStopSound1P;//[Offset: 0x5a8, Size: 8]
	SoundBase* PrimaryFireStopSound;//[Offset: 0x5b0, Size: 8]
	SoundBase* SecondaryFireSound;//[Offset: 0x5c8, Size: 8]
	SoundBase* SecondaryFireStopSound;//[Offset: 0x5e0, Size: 8]
	SoundBase* ChargeFireSound1P;//[Offset: 0x5f8, Size: 8]
	SoundBase* ChargeFireSound;//[Offset: 0x610, Size: 8]
	SoundBase* TargetingStartSound;//[Offset: 0x628, Size: 8]
	SoundBase* TargetingEndSound;//[Offset: 0x630, Size: 8]
	float PrimaryFireSoundFadeOutTime;//[Offset: 0x638, Size: 4]
	SoundBase* ImpactPhysicalSurfaceSounds;//[Offset: 0x640, Size: 8]
	ParticleSystem* ImpactPhysicalSurfaceEffects;//[Offset: 0x720, Size: 8]
	NiagaraSystem*[] ImpactNiagaraPhysicalSurfaceEffectAssets;//[Offset: 0x7f8, Size: 16]
	class MatineeCameraShake* ImpactCameraShake;//[Offset: 0x808, Size: 8]
	ForceFeedbackEffect* PrimaryForceFeedbackEffect;//[Offset: 0x810, Size: 8]
	ForceFeedbackEffect* SecondaryForceFeedbackEffect;//[Offset: 0x818, Size: 8]
	ForceFeedbackEffect* PrimaryImpactForceFeedbackEffect;//[Offset: 0x820, Size: 8]
	ForceFeedbackEffect* SecondaryImpactForceFeedbackEffect;//[Offset: 0x828, Size: 8]
	NiagaraSystem*[] ImpactNiagaraPhysicalSurfaceEffectInstances;//[Offset: 0x830, Size: 16]
	FortGenericDataStoreManagerComponent* DataStoreManager;//[Offset: 0x840, Size: 8]
	AudioComponent* FireAudioChannels;//[Offset: 0x848, Size: 8]
	AudioComponent* ReloadAudioChannels;//[Offset: 0x868, Size: 8]
	AudioComponent* TargetingAudioChannels;//[Offset: 0x880, Size: 8]
	int CurrentGunFireIndex;//[Offset: 0x890, Size: 4]
	SkeletalMeshComponentBudgeted* WeaponMesh;//[Offset: 0x898, Size: 8]
	SkeletalMeshComponentBudgeted*[] AllWeaponMeshes;//[Offset: 0x8a0, Size: 16]
	MaterialInterface*[] DefaultWeaponMaterials;//[Offset: 0x8b0, Size: 16]
	<SkeletalMeshComponentBudgeted*,MaterialInterfaceArray> OriginalMaterialMap;//[Offset: 0x8c0, Size: 80]
	int FireAudioChannelWantsToPlay;//[Offset: 0x910, Size: 4]
	int WrapSectionMask;//[Offset: 0x920, Size: 4]
	bool bUsingSecondaryFireAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	bool bHasCachedAdditionalMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x925, Size: 1]
	Color CurrentReticleColor;//[Offset: 0x928, Size: 4]
	Vector CurrentDamageStartLocation;//[Offset: 0x92c, Size: 12]
	Vector CurrentAdjustedAimDirection;//[Offset: 0x938, Size: 12]
	FortEffectDistanceQuality FireFXSignificance;//[Offset: 0x944, Size: 24]
	float LastFireTime;//[Offset: 0x95c, Size: 4]
	float LastFireTimeVerified;//[Offset: 0x960, Size: 4]
	bool bIsPlayingFireFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 1]
	bool bFireFXTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x965, Size: 1]
	float TimerIntervalAdjustment;//[Offset: 0x968, Size: 4]
	float InputQueueTimePercent;//[Offset: 0x96c, Size: 4]
	bool bAllowTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x971, Size: 1]
	float LastTargetingTransitionTime;//[Offset: 0x974, Size: 4]
	Vector TargetSourceOffset;//[Offset: 0x978, Size: 12]
	Vector TargetSourceOffsetWhileCrouched;//[Offset: 0x984, Size: 12]
	Vector TargetSourceOffsetWhileTargeting;//[Offset: 0x990, Size: 12]
	bool bTraceThroughPawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 1]
	bool bTraceThroughWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99d, Size: 1]
	int TraceThroughPawnsLimit;//[Offset: 0x9a0, Size: 4]
	int TraceThroughBuildingsLimit;//[Offset: 0x9a4, Size: 4]
	bool bUseProjectileTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	bool bUseWeaponTraceForReticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 1]
	float ProjectilePitchOffset;//[Offset: 0x9ac, Size: 4]
	float LastReloadTime;//[Offset: 0x9b0, Size: 4]
	float LastSuccessfulReloadTime;//[Offset: 0x9b4, Size: 4]
	float CurrentReloadDuration;//[Offset: 0x9b8, Size: 4]
	GUID ItemEntryGuid;//[Offset: 0x9c0, Size: 16]
	GUID TrackerGuid;//[Offset: 0x9d0, Size: 16]
	int WeaponLevel;//[Offset: 0x9e0, Size: 4]
	int AmmoCount;//[Offset: 0x9e4, Size: 4]
	int PhantomReserveAmmo;//[Offset: 0x9e8, Size: 4]
	int BurstFireCounter;//[Offset: 0x9f4, Size: 4]
	float ChargeTime;//[Offset: 0x9f8, Size: 4]
	float AccumulatedChargeTime;//[Offset: 0x9fc, Size: 4]
	GameplayTag StartChargeGameplayCue;//[Offset: 0xa00, Size: 8]
	GameplayTag MaxChargeGameplayCue;//[Offset: 0xa08, Size: 8]
	GameplayTag OutOfAmmoTextOverrideFailTag;//[Offset: 0xa10, Size: 8]
	GameplayTag NoSpareAmmoToReloadTextOverrideFailTag;//[Offset: 0xa18, Size: 8]
	int CurrentShotLogIndex;//[Offset: 0xa20, Size: 4]
	uint32[] ShotLogFlags;//[Offset: 0xa28, Size: 16]
	bool bInitializedWeaponItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa38, Size: 1]
	bool bPendingDestroyDueToDurabilityOrStackCount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa38, Size: 1]
	bool bCompletedAppliedAlterationsLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa39, Size: 1]
	bool bCompletedWeaponLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa39, Size: 1]
	bool bIsCosmeticLimited;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa39, Size: 1]
	bool bReplicatedAppliedAlterationsWithNoInstigator;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa39, Size: 1]
	bool bShouldFullyApplyVariantsOnEquip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa39, Size: 1]
	bool bSecondaryFireAlwaysCancelSwimSprint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa39, Size: 1]
	int16 ChargeStatusPack;//[Offset: 0xa3a, Size: 2]
	FortProjectileTrajectory* AttachedTrajectoryIndicator;//[Offset: 0xa48, Size: 8]
	FortGameplayAbility* ActiveAbility;//[Offset: 0xa50, Size: 8]
	GameplayAbilitySpecHandle PrimaryAbilitySpecHandle;//[Offset: 0xa58, Size: 4]
	GameplayAbilitySpecHandle SecondaryAbilitySpecHandle;//[Offset: 0xa5c, Size: 4]
	GameplayAbilitySpecHandle ReloadAbilitySpecHandle;//[Offset: 0xa60, Size: 4]
	GameplayAbilitySpecHandle ImpactAbilitySpecHandle;//[Offset: 0xa64, Size: 4]
	GameplayAbilitySpecHandle ReticleTraceOverrideSpecHandle;//[Offset: 0xa68, Size: 4]
	GameplayAbilitySpecHandle[] EquippedAbilityHandles;//[Offset: 0xa70, Size: 16]
	FortAbilitySetHandle[] EquippedAbilitySetHandles;//[Offset: 0xa80, Size: 16]
	FortAlterationItemDefinition*[] AppliedAlterations;//[Offset: 0xa90, Size: 16]
	FortWeaponModSlot[] WeaponModSlots;//[Offset: 0xaa0, Size: 16]
	FortEquippedWeaponModSlot[] EquippedWeaponModSlots;//[Offset: 0xab0, Size: 16]
	CosmeticVariantCache PreviousWeaponVariants;//[Offset: 0xac0, Size: 24]
	AthenaItemWrapDefinition* AppliedItemWrap;//[Offset: 0xae0, Size: 8]
	FortFXManager* CachedFXManager;//[Offset: 0xae8, Size: 8]
	FortSignificanceManager* CachedSignificanceManager;//[Offset: 0xaf0, Size: 8]
	FName MuzzleSocketName;//[Offset: 0xaf8, Size: 8]
	FName MuzzleFalloffSocketName;//[Offset: 0xb00, Size: 8]
	FName WeaponHandSocketNameOverride;//[Offset: 0xb08, Size: 8]
	FName LeftHandWeaponHandSocketNameOverride;//[Offset: 0xb10, Size: 8]
	bool bForceOverrideGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb20, Size: 1]
	float MaxWeaponSwitchNetworkWaitTime;//[Offset: 0xb9c, Size: 4]
	float LastFireAbilityTime;//[Offset: 0xba0, Size: 4]
	AnimMontage* EquipAnimation;//[Offset: 0xbc8, Size: 8]
	AnimMontage* ReloadAnimation;//[Offset: 0xbd0, Size: 8]
	AnimMontage*[] CustomReloadAnimationPerAmmoToFill;//[Offset: 0xbd8, Size: 16]
	AnimMontage* PrimaryAbilityAnimation;//[Offset: 0xbe8, Size: 8]
	AnimMontage* SecondaryAbilityAnimation;//[Offset: 0xbf0, Size: 8]
	AnimMontage* WeaponEquipMontage;//[Offset: 0xbf8, Size: 8]
	AnimMontage* WeaponReloadMontage;//[Offset: 0xc00, Size: 8]
	AnimMontage*[] CustomWeaponReloadMontagePerAmmoToFill;//[Offset: 0xc08, Size: 16]
	AnimMontage* WeaponPrimaryAbilityMontage;//[Offset: 0xc18, Size: 8]
	AnimMontage* WeaponSecondaryAbilityMontage;//[Offset: 0xc20, Size: 8]
	AnimSequence* PoseOffsetAnimSequence;//[Offset: 0xc28, Size: 8]
	AnimSequence* PoseOffsetAnimSequenceFemaleOverride;//[Offset: 0xc30, Size: 8]
	byte WeaponCoreAnimation;//[Offset: 0xc38, Size: 1]
	FortWeaponAnimSet* WeaponPawnAnimSet;//[Offset: 0xc40, Size: 8]
	class AnimInstance* WeaponPawnAnimLayerOverlayClass;//[Offset: 0xc48, Size: 8]
	FortWeaponAdditiveAnimSet* WeaponAdditiveAnimSet;//[Offset: 0xc50, Size: 8]
	FortWeaponAnimSet* WeaponPawnAnimsetOverride;//[Offset: 0xc58, Size: 8]
	AnimMontage* UnableToPerformActionMontageOverride;//[Offset: 0xca0, Size: 8]
	FortWeaponFireModeData* ActiveFireMode;//[Offset: 0xca8, Size: 40]
	FortWeaponFireModeData* FireModeData_HipFire;//[Offset: 0xcd0, Size: 40]
	FortWeaponFireModeData* FireModeData_AimDownSight;//[Offset: 0xcf8, Size: 40]
	CustomItemWrapModifier* ItemWrapModifier;//[Offset: 0xd30, Size: 8]
	Actor* LockOnTargetCandidate;//[Offset: 0xd50, Size: 8]
	bool bIgnoreTryToFireSlotCooldownRestriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd59, Size: 1]
	bool bFireConsumableAnalyticEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5b, Size: 1]
	MulticastInlineDelegateProperty OnWeaponHudKeyActionUpdated;//[Size: 16]
	WeaponHudData[] HudKeyActionData;//[Offset: 0xd70, Size: 16]
	bool WeaponDataIsValid();// 0xd218740
	bool WeaponDataHasMatchingGameplayTag(const GameplayTag TagToCheck);// 0xd21868c
	bool WeaponDataHasAnyMatchingGameplayTags(const GameplayTagContainer TagContainer);// 0xd218590
	void UseWeaponDurability(float DurabilityScale);// 0xd2184e8
	void UpdateDamageStartLocation();// 0xd2184cc
	bool TryReloadAmmoFromAbility();// 0xd218494
	void StopWeaponFireFX();// 0xd218478
	void StopForceFeedback();// 0xb6d6f80
	void SetWeaponVisibilityControllerOnly(const bool bDesiredVisibility, const bool bForceUpdate);// 0xd218380
	void SetWeaponVisibility(const bool bDesiredVisibility, const bool bForceUpdate);// 0xd218288
	void SetWeaponPawnAnimsetOverride(FortWeaponAnimSet* WeaponPawnAnimsetOverride);// 0xb6d6ed8
	void SetWeaponData(FortWeaponItemDefinition* InWeaponData);// 0xd2181e4
	void SetTrajectoryVisibilityControllerOnly(FortPlayerController* FortPlayerController, const bool bNewVisible);// 0xd2180f4
	void SetTrajectoryVisibility(const bool bNewVisible);// 0xd218044
	void SetTraceThroughPawnsLimit(int NewTraceThroughPawnsLimit);// 0xd217fa0
	void SetTraceThroughPawns(bool bNewTraceThroughPawns);// 0xd217ef4
	void SetTraceThroughBuildingsLimit(int NewTraceThroughBuildingsLimit);// 0xd217e50
	void SetShouldDrawNativeReticle(bool bInShouldDrawReticle);// 0xd217da0
	bool SetHudKeyActionVisibilityByID(FString KeyActionId, bool bVisible);// 0xd217c48
	bool SetHudKeyActionVisibility(int Index, bool bVisible);// 0xd217b50
	void SetHudKeyActionsVisibility(out const WeaponHudKeyActionVisibility[] IndexVisibilityArray);// 0xb6d6e18
	bool SetHudKeyActionDescriptionByID(FString KeyActionId, FText InActionDescription);// 0xd217924
	bool SetHudKeyActionDescription(int Index, FText InActionDescription);// 0xd217754
	bool SetHiddenInGameOtherLocalControllersOnly(SceneComponent* SceneComp, const bool NewHidden, const bool bPropagateToChildren);// 0xd217608
	bool SetHiddenInGameControllerOnly(SceneComponent* SceneComp, const bool NewHidden, const bool bPropagateToChildren);// 0xd2174bc
	void SetFireSoundPitchMultiplier(const float NewPitch);// 0xd217414
	void ServerSetChargeState(byte NewState);// 0xd21733c
	void ServerResetShotReport();// 0xd2172e0
	void ServerReleaseWeaponAbility(const GameplayAbilitySpecHandle SpecHandle);// 0xd217204
	void RestoreOriginalMaterials();// 0xd2171f0
	void ResetTempWeaponMaterialOverride();// 0xd2171dc
	void Reload();// 0xd2171c0
	void PlayWeaponFireFX(bool bSecondaryFire);// 0xd217108
	void PlayReloadFX(byte ReloadStage);// 0xb6d6d68
	void PlayNativeImpactFX(out const HitResult HitResult, out const GameplayCueParameters GameplayCueParameters);// 0xd216f0c
	void PlayForceFeedback(bool bSecondaryFire, bool bPersistentFire, bool bImpact);// 0xb6d6c20
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnWeaponMontageStarted(AnimMontage* WeaponMontage);// 0xb6d6b70
	void OnWeaponMontageBlendingOut(AnimMontage* WeaponMontage, bool bInterrupted);// 0xb6d6a78
	void OnWeaponDetached();// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void OnTetherDetached();// 0xbbc0600
	void OnStopWeaponFireFX();// 0xbbc0600
	void OnStartCharge();// 0xbbc0600
	void OnSetTargeting(bool bNewIsTargeting);// 0xbbc0600
	void OnRep_ReplicatedWeaponModSlots();// 0xd216ef0
	void OnRep_ReplicatedWeaponData();// 0xb6d6a5c
	void OnRep_ReplicatedCosmeticOverrideWeaponData();// 0xd216ed4
	void OnRep_ReplicatedAppliedAlterations();// 0xb6d6a40
	void OnRep_PrimaryAbilitySpecHandle();// 0xd216ec0
	void OnRep_PhantomReserveAmmo();// 0xd216ea4
	void OnRep_LastFireTimeVerified();// 0xb6d6a2c
	void OnRep_EquippedWeaponDestroyWrapper();// 0xd216e90
	void OnRep_ChargeStatusPack();// 0xb6d6a18
	void OnRep_AmmoCount(int OldAmmoCount);// 0xb6d6968
	void OnRemoteClientReachedMinCharge();// 0xbbc0600
	void OnRemoteClientReachedMaxCharge();// 0xbbc0600
	void OnReachedMinCharge();// 0xbbc0600
	void OnReachedMaxChargeForCurAmmo();// 0xbbc0600
	void OnReachedMaxCharge();// 0xbbc0600
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void OnPlayReloadFX(byte ReloadStage);// 0xbbc0600
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void OnPawnMontageStarted(AnimMontage* PawnMontage);// 0xb6d68b8
	void OnPawnMontageBlendingOut(AnimMontage* PawnMontage, bool bInterrupted);// 0xb6d67c0
	void OnOutOfAmmoFire();// 0xbbc0600
	void OnInstigatorSet();// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void OnInitCosmeticAlterations(FortCosmeticModification CosmeticMod);// 0xbbc0600
	void OnInitAlteration(FortAlterationItemDefinition* NewAlteration);// 0xbbc0600
	void OnEquippedWeaponDestory();// 0xbbc0600
	void OnEndCharge();// 0xbbc0600
	void OnChargeUp();// 0xbbc0600
	void OnChargeDown();// 0xbbc0600
	void OnApplyFireModeData(FortWeaponFireModeData* FireModeData);// 0xbbc0600
	void OnAmmoCountChanged();// 0xbbc0600
	void ModAmmo(int AmountToUse);// 0xd216de0
	void K2_OnUnEquip();// 0xbbc0600
	void K2_ConsumeAmmo(int Quantity);// 0xb6d6718
	bool IsSuppressed();// 0xd216da8
	bool IsReloading();// 0xd216d68
	bool IsProjectileWeapon();// 0xd216d28
	bool IsGauntlet();// 0xd216cf0
	bool IsFiring();// 0xd216cb0
	bool IsEquipped();// 0xd216c70
	bool InventoryOwnerHasInfiniteAmmo();// 0xd216c38
	bool HasInfiniteAmmo();// 0xb6d66e0
	void HandleBlueprintProbablyCosmeticStomp();// 0xd216c24
	float GetWeaponRateOfFireModifier();// 0xd216bf0
	FortWeaponAnimSet* GetWeaponPawnAnimSet();// 0xd216bbc
	void GetWeaponMeshes(out SkeletalMeshComponentBudgeted*[] WeaponMeshes);// 0xd216afc
	SkeletalMeshComponentBudgeted* GetWeaponMesh();// 0xd216ae0
	DataTableRowHandle GetWeaponDataWeaponStatHandle();// 0xd216aac
	byte GetWeaponDataTriggerType();// 0xd216a78
	SlateBrush GetWeaponDataSmallPreviewImageBrush();// 0xd21693c
	Texture2D* GetWeaponDataSmallPreviewImage();// 0xd216860
	enum GetWeaponDataRarity();// 0xd21682c
	void GetWeaponDataPlayerGrantedGameplayTags(out GameplayTagContainer GameplayTags);// 0xd21675c
	enum GetWeaponDataItemType();// 0xd216728
	void GetWeaponDataGameplayTags(out GameplayTagContainer GameplayTags);// 0xd216658
	FortWorldItemDefinition* GetWeaponDataAmmoWorldItemDefinition();// 0xd216624
	FortWeaponItemDefinition* GetWeaponData();// 0xd2165f0
	enum GetWeaponChargeStateForFireFX();// 0xd2165b4
	FortWeaponAdditiveAnimSet* GetWeaponAdditiveAnimSet();// 0xd216580
	GUID GetTrackerGuid();// 0xd216564
	int GetTraceThroughPawnsLimit();// 0xd216548
	bool GetTraceThroughPawns();// 0xd21652c
	int GetTraceThroughBuildingsLimit();// 0xd216510
	float GetTimeToNextFire();// 0xd2164d4
	bool GetSupportsAutoFireAtReticleTargetMode();// 0xd21649c
	Color GetReticleColor();// 0xd216460
	int GetRemainingAmmo();// 0xd216424
	float GetReloadTime();// 0xd2163e8
	float GetReloadProgress();// 0xd2163ac
	AnimMontage* GetReloadAnimation();// 0xd216390
	float GetRange();// 0xd216354
	float GetProjectileSpeed(float ChargePercent);// 0xd21629c
	float GetProjectilePitchOffset();// 0xd216280
	void GetPlayerActiveGrantedGameplayTags(out GameplayTagContainer GameplayTags);// 0xd2161b0
	bool GetPickupInstigatorData(out int InstigatorHandle, out PickupInstigatorData InstigatorData);// 0xd216048
	Transform GetMuzzleSocketTransform(int PatternIndex);// 0xd215f8c
	FName GetMuzzleSocketName(int PatternIndex);// 0xb6d6628
	Vector GetMuzzleLocation(int PatternIndex);// 0xb6d656c
	float GetMeleeAttackPlayRate();// 0xd215f58
	int GetMagazineAmmoCount();// 0xb6d6530
	int GetLocalRemainingAmmo();// 0xb6d64f4
	int GetLocalMagazineAmmoCount();// 0xb6d64b8
	bool GetIsTargeting();// 0xd215f3c
	bool GetIsChargingWeapon();// 0xd215f20
	GUID GetInventoryGUID();// 0xd215f04
	WeaponHudData[] GetHudKeyActionData();// 0xd215ec4
	float GetFiringRate();// 0xd215e88
	Vector GetDamageStartLocation(out Vector AimDir, int PatternIndex);// 0xd215d78
	float GetCurrentMaxChargePercent();// 0xd215d44
	byte GetCoreAnimation();// 0xb6d6484
	float GetChargeToMinPercent();// 0xd215d10
	float GetChargeTime();// 0xd215cf4
	float GetChargePercent();// 0xb6d6450
	SoundBase* GetChargedWeaponFireSound(byte Channel, const bool bSecondaryFire);// 0xd215bf4
	int GetBulletsPerClip();// 0xb6d641c
	int GetAmmoCostPerFire(float ChargePercentage);// 0xd215b44
	FortAlterationItemDefinition*[] GetAlterations();// 0xd215a9c
	float GetAccumulatedChargeTime();// 0xd215a80
	void GameplayCue_Weapons_Activation(byte EventType, GameplayCueParameters Parameters);// 0xbb60694
	void GameplayCue_Impact(byte EventType, GameplayCueParameters Parameters);// 0xbb60360
	bool DoesHaveOverrideWrap();// 0xd215a48
	Color DetermineReticleColor();// 0xd215a0c
	void ClientReportShotFlags(uint32 ShotFlags, int ShotIndex);// 0xd215920
	void ClientGivenTo(Pawn* P);// 0xd215870
	void CheckPendingFire();// 0xd215854
	void CancelActiveAbility();// 0xd215838
	void AttemptApplyOverrideWrapToActor(Actor* Actor);// 0xd215790

--------------------------------
Class: FortWeaponItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class FortWeapon* WeaponActorClass;//[Offset: 0x7a8, Size: 40]
	SkeletalMesh* WeaponMeshOverride;//[Offset: 0x7d0, Size: 40]
	AthenaItemWrapDefinition* IntrinsicOverrideWrap;//[Offset: 0x7f8, Size: 40]
	DataTableRowHandle WeaponStatHandle;//[Offset: 0x820, Size: 16]
	bool bRechargeAmmoToClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	ScalableFloat WeaponRechargeAmmoRate;//[Offset: 0x838, Size: 40]
	ScalableFloat WeaponRechargeAmmoQuantity;//[Offset: 0x860, Size: 40]
	FortAbilitySet* AbilitySet;//[Offset: 0x888, Size: 40]
	FName AlterationSlotsLoadoutRow;//[Offset: 0x8b0, Size: 8]
	FName BaselineAlterationSlotsLoadoutRow;//[Offset: 0x8b8, Size: 8]
	FortAlterationItemDefinition* BaseAlteration;//[Offset: 0x8c0, Size: 40]
	FortAlterationItemDefinition* BaseCosmeticAlteration;//[Offset: 0x8e8, Size: 40]
	FortWeaponModSlot[] WeaponModSlots;//[Offset: 0x910, Size: 16]
	class FortGameplayAbility* PrimaryFireAbility;//[Offset: 0x920, Size: 40]
	class FortGameplayAbility* SecondaryFireAbility;//[Offset: 0x948, Size: 40]
	class FortGameplayAbility* ReloadAbility;//[Offset: 0x970, Size: 40]
	class FortGameplayAbility* OnHitAbility;//[Offset: 0x998, Size: 40]
	class FortGameplayAbility[] EquippedAbilities;//[Offset: 0x9c0, Size: 16]
	FortAbilitySet* EquippedAbilitySet;//[Offset: 0x9d0, Size: 40]
	CustomCharacterPart*[] EquippedCharacterParts;//[Offset: 0x9f8, Size: 16]
	FortWorldItemDefinition* AmmoData;//[Offset: 0xa08, Size: 40]
	FortWeaponAdditionalData*[] AdditionalDataFields;//[Offset: 0xa30, Size: 16]
	float LowAmmoPercentage;//[Offset: 0xa40, Size: 4]
	byte TriggerType;//[Offset: 0xa44, Size: 1]
	byte SecondaryTriggerType;//[Offset: 0xa45, Size: 1]
	enum DisplayTier;//[Offset: 0xa46, Size: 1]
	bool bUsesPhantomReserveAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa47, Size: 1]
	bool bUsesCustomAmmoType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa47, Size: 1]
	bool bAllowSecondaryFireToInterruptPrimary;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa47, Size: 1]
	bool bAllowTargetingDuringReload;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa47, Size: 1]
	bool bTargetingPreventsReload;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa47, Size: 1]
	bool bCanFireWhileInstigatorTethered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa47, Size: 1]
	bool bCanFireWhileNotTargetedInVehicle;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa47, Size: 1]
	bool bAlwaysChargeUpToMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa47, Size: 1]
	bool bNoFireOnReleaseBeforeMinChargeTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa48, Size: 1]
	bool bReticleCornerOutsideSpreadRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa48, Size: 1]
	bool bValidForLastEquipped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa48, Size: 1]
	bool bPreventDefaultPreload;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa48, Size: 1]
	bool bRequestClientPreload;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa48, Size: 1]
	float HitNotifyDuration;//[Offset: 0xa4c, Size: 4]
	Texture2D* ReticleImage;//[Offset: 0xa50, Size: 40]
	float[] ReticleCornerAngles;//[Offset: 0xa78, Size: 16]
	Texture2D* ReticleCenterImage;//[Offset: 0xa88, Size: 40]
	Texture2D* ReticleCenterPerfectAimImage;//[Offset: 0xab0, Size: 40]
	Vector2D ReticleCenterImageOffset;//[Offset: 0xad8, Size: 8]
	Texture2D* ReticleInvalidTargetImage;//[Offset: 0xae0, Size: 40]
	GameplayTagContainer AnalyticTags;//[Offset: 0xb08, Size: 32]
	GameplayTagContainer PlayerGrantedGameplayTags;//[Offset: 0xb28, Size: 32]
	FName[] ActualAnalyticFNames;//[Offset: 0xb48, Size: 16]
	AthenaCosmeticItemDefinition* RequiredWeaponParent;//[Offset: 0xb58, Size: 40]
	FortCreativeTagsHelper CreativeTagsHelper;//[Offset: 0xb80, Size: 16]
	FortWeaponAdditionalData* AdditionalData;//[Offset: 0xb90, Size: 8]
	bool UsesPhantomReserveAmmo();// 0xd220514
	bool TargetingPreventsReload();// 0xd2204dc
	bool ShouldAllowTargetingDuringReload();// 0xd2204a4
	bool NoFireOnReleaseBeforeMinChargeTime();// 0xd220484
	static void InitializeAlterationsBasedOnLootLevel(out FortItemEntry ItemEntry);// 0xd2203cc
	bool HasUniqueAmmo();// 0xd220380
	DataTableRowHandle GetWeaponStatHandle();// 0xd22034c
	float GetWeaponRechargeAmmoRate(const int InLevel);// 0xd220294
	float GetWeaponRechargeAmmoQuantity(const int InLevel);// 0xd2201dc
	SkeletalMesh* GetWeaponMeshOverride();// 0xd2201a8
	class FortWeapon GetWeaponActorClass();// 0xd220174
	bool GetUsesCustomAmmoType();// 0xd22013c
	byte GetTriggerType();// 0xd220108
	FText GetShortDisplayName();// 0xd220038
	byte GetSecondaryTriggerType();// 0xd220004
	class FortGameplayAbility GetSecondaryFireAbility();// 0xd21ffd0
	Texture2D* GetReticleInvalidTargetImage();// 0xd21ff9c
	Texture2D* GetReticleImage();// 0xd21ff68
	float[] GetReticleCornerAngles();// 0xd21fee4
	Texture2D* GetReticleCenterPerfectAimImage();// 0xd21feb0
	Vector2D GetReticleCenterImageOffset();// 0xd21fe7c
	Texture2D* GetReticleCenterImage();// 0xd21fe48
	class FortGameplayAbility GetReloadAbility();// 0xd21fe14
	class FortGameplayAbility GetPrimaryFireAbility();// 0xd21fde0
	class FortGameplayAbility GetOnHitAbility();// 0xd21fdac
	float GetLowAmmoPercentage();// 0xd21fd78
	float GetHitNotifyDuration();// 0xd21fd44
	class FortGameplayAbility[] GetEquippedAbilities();// 0xd21fca4
	static FText GetDisplayTierAsText(const enum DisplayTier);// 0xd21fb90
	enum GetDisplayTier();// 0xd21fb74
	float GetDegradedPercentage();// 0xd21fb40
	FortAlterationItemDefinition* GetBaseCosmeticAlteration();// 0xd21fb0c
	FortAlterationItemDefinition* GetBaseAlteration();// 0xd21fad8
	FName[] GetAnalyticTags();// 0xd21fa40
	bool AlwaysChargeUpToMin();// 0xd21fa20
	bool AllowSecondaryFireToInterruptPrimary();// 0xd21f9e8

--------------------------------
Class: FortItemEntry.FastArraySerializerItem
	int Count;//[Offset: 0xc, Size: 4]
	int PreviousCount;//[Offset: 0x10, Size: 4]
	FortItemDefinition* ItemDefinition;//[Offset: 0x18, Size: 8]
	int16 OrderIndex;//[Offset: 0x20, Size: 2]
	float Durability;//[Offset: 0x24, Size: 4]
	int Level;//[Offset: 0x28, Size: 4]
	int LoadedAmmo;//[Offset: 0x2c, Size: 4]
	int PhantomReserveAmmo;//[Offset: 0x30, Size: 4]
	FString[] AlterationDefinitions;//[Offset: 0x38, Size: 16]
	FortSavedWeaponModSlot[] SavedWeaponModSlots;//[Offset: 0x48, Size: 16]
	FString ItemSource;//[Offset: 0x58, Size: 16]
	GUID ItemGuid;//[Offset: 0x68, Size: 16]
	GUID TrackerGuid;//[Offset: 0x78, Size: 16]
	int ControlOverride;//[Offset: 0x88, Size: 4]
	bool inventory_overflow_date;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool bWasGifted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]
	bool bIsReplicatedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 1]
	bool bUpdateStatsOnCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	FortGiftingInfo GiftingInfo;//[Offset: 0x98, Size: 40]
	FortItemEntryStateValue[] StateValues;//[Offset: 0xc0, Size: 16]
	FortInventory* ParentInventory;//[Offset: 0xd0, Size: 8]
	GameplayAbilitySpecHandle GameplayAbilitySpecHandle;//[Offset: 0xd8, Size: 4]
	FortAlterationItemDefinition*[] AlterationInstances;//[Offset: 0xe0, Size: 16]
	FortWeaponModSlot[] WeaponModSlots;//[Offset: 0xf0, Size: 16]
	AthenaItemWrapDefinition* WrapOverride;//[Offset: 0x100, Size: 40]
	float[] GenericAttributeValues;//[Offset: 0x128, Size: 16]
	int PickupVariantIndex;//[Offset: 0x188, Size: 4]
	int ItemVariantDataMappingIndex;//[Offset: 0x18c, Size: 4]

--------------------------------
Class: FortSavedWeaponModSlot
	FString WeaponModTemplateID;//[Offset: 0x0, Size: 16]
	bool bIsDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: FortGiftingInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FortHeroType* HeroType;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortItemEntryStateValue
	int IntValue;//[Offset: 0x0, Size: 4]
	FName NameValue;//[Offset: 0x4, Size: 8]
	byte StateType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: FortInventory.Actor.Object
	byte InventoryType;//[Offset: 0x229, Size: 1]
	FortItemList Inventory;//[Offset: 0x230, Size: 456]
	FortPawn* ReplayPawn;//[Offset: 0x3f8, Size: 8]
	bool bRequiresLocalUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bRequiresSaving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool bIsShuttingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	FortWorldItem*[] PendingInstances;//[Offset: 0x418, Size: 16]
	FortItem*[] RecentlyAdded;//[Offset: 0x428, Size: 16]
	FortItem*[] RecentlyRemoved;//[Offset: 0x438, Size: 16]
	FortItem*[] RecentlyChanged;//[Offset: 0x448, Size: 16]
	void HandleInventoryLocalUpdate();// 0xb67dcb8

--------------------------------
Class: FortItemList.FastArraySerializer
	FortItemEntry[] ReplicatedEntries;//[Offset: 0x108, Size: 16]
	FortWorldItem*[] ItemInstances;//[Offset: 0x168, Size: 16]

--------------------------------
Class: FortWorldItem.FortItem.Object
	bool bIsTemporaryItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bNeedsPersistentUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bPendingPersistentDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	FortInventory* OwnerInventory;//[Offset: 0xd8, Size: 8]
	FortItemEntry ItemEntry;//[Offset: 0xe0, Size: 400]
	float BaseRegenCooldown;//[Offset: 0x278, Size: 4]
	bool SeenInFrontend();// 0xd22b784
	void MarkItemAsSeenInFrontend();// 0xd22b768
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0xd22b690
	int GetFuelChargeValue();// 0xd22b65c

--------------------------------
Class: FortAlterationItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	byte AlterationType;//[Offset: 0x3c8, Size: 1]
	FortCosmeticModification DefaultCosmetic;//[Offset: 0x3d0, Size: 1504]
	FortConditionalCosmeticModification[] ConditionalCosmetics;//[Offset: 0x9b0, Size: 16]
	FortConditionalIncludeTags[] AdditionalGameplayTags;//[Offset: 0x9c0, Size: 16]
	FortAbilitySet* AlterationAbilitySet;//[Offset: 0x9d0, Size: 40]
	FortItemQuantityPair[] AdditionalRespecCosts;//[Offset: 0x9f8, Size: 16]
	byte GetAlterationType();// 0xceba798

--------------------------------
Class: FortCosmeticModification
	MaterialInterface* CosmeticMaterial;//[Offset: 0x0, Size: 40]
	ParticleSystem* AmbientParticleSystem;//[Offset: 0x28, Size: 40]
	ParticleSystem* MuzzleParticleSystem;//[Offset: 0x50, Size: 40]
	NiagaraSystem* MuzzleNiagaraSystem;//[Offset: 0x78, Size: 40]
	ParticleSystem* ReloadParticleSystem;//[Offset: 0xa0, Size: 40]
	ParticleSystem* BeamParticleSystem;//[Offset: 0xc8, Size: 40]
	NiagaraSystem* BeamNiagaraSystem;//[Offset: 0xf0, Size: 40]
	ParticleSystem* ImpactPhysicalSurfaceEffects;//[Offset: 0x118, Size: 40]
	NiagaraSystem*[] ImpactNiagaraPhysicalSurfaceEffects;//[Offset: 0x550, Size: 16]
	class FortTracerBase* TracerTemplate;//[Offset: 0x560, Size: 40]
	bool bModifyColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	LinearColor ColorAlteration;//[Offset: 0x58c, Size: 16]
	FName ColorParameterName;//[Offset: 0x59c, Size: 8]
	bool bModifyDecalColour;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	LinearColor DecalColourAlterationStart;//[Offset: 0x5a8, Size: 16]
	LinearColor DecalColourAlterationEnd;//[Offset: 0x5b8, Size: 16]
	bool bModifyShellColour;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	LinearColor ShellColourAlteration;//[Offset: 0x5cc, Size: 16]

--------------------------------
Class: FortTracerBase.FortClientOnlyActor.Actor.Object
	MovementComp_Tracer* TracerMovementComponent;//[Offset: 0x228, Size: 8]
	StaticMeshComponent* TracerMesh;//[Offset: 0x230, Size: 8]
	BulletWhipTrackerComponentBase* BulletWhipTrackerComponent;//[Offset: 0x238, Size: 8]
	CurveTableRowHandle Speed;//[Offset: 0x240, Size: 16]
	float SpeedScaleMinRange;//[Offset: 0x250, Size: 4]
	float SpeedScaleMaxRange;//[Offset: 0x254, Size: 4]
	float SpeedScaleMinMultiplier;//[Offset: 0x258, Size: 4]
	float SpeedScaleMaxMultiplier;//[Offset: 0x25c, Size: 4]
	Vector MeshScaleMult;//[Offset: 0x260, Size: 12]
	float MeshScaleTime;//[Offset: 0x26c, Size: 4]
	class BulletWhipTrackerComponentBase* BulletWhipTrackerComponentClass;//[Offset: 0x270, Size: 8]
	bool bScaleOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	bool bScaleSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 1]
	bool bScaledUp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x278, Size: 1]
	bool bDead;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x278, Size: 1]
	bool bOwnedByPool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x278, Size: 1]
	float currentScale;//[Offset: 0x2ac, Size: 4]
	void Init(out const Vector Start, out const Vector End);// 0xd1f1764

--------------------------------
Class: FortClientOnlyActor.Actor.Object

--------------------------------
Class: MovementComp_Tracer.MovementComponent.ActorComponent.Object
	float Speed;//[Offset: 0xec, Size: 4]

--------------------------------
Class: BulletWhipTrackerComponentBase.ActorComponent.Object
	BulletWhipTrackerData[] WhipTrackerData;//[Offset: 0xb0, Size: 16]
	bool bEnableGravityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	float FadeTimeOnProjectileStop;//[Offset: 0xc4, Size: 4]
	SceneComponent* CachedPassByPawn;//[Offset: 0xe0, Size: 8]
	void UpdateVelocity(Vector CurrentVelocity);// 0xce77d24
	void Reset(Vector StartLocationIn);// 0xce77c7c
	void Disable();// 0xce77c68

--------------------------------
Class: BulletWhipTrackerData
	bool bAttachSoundToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float PassByRadiusMax;//[Offset: 0x4, Size: 4]
	float PassByRadiusMin;//[Offset: 0x8, Size: 4]
	SoundBase* PassByFarSound;//[Offset: 0x10, Size: 8]
	SoundBase* PassByCloseSound;//[Offset: 0x18, Size: 8]
	float MinimumTriggerDistance;//[Offset: 0x20, Size: 4]
	float TriggerAheadDistance;//[Offset: 0x24, Size: 4]
	AudioComponent* CurrentAudioComp;//[Offset: 0x28, Size: 8]
	float PreviousPlaneDotProd;//[Offset: 0x30, Size: 4]
	float CachedPassDistance;//[Offset: 0x34, Size: 4]
	Vector CachedPassLocation;//[Offset: 0x38, Size: 12]
	float PassByClosenessIntensity;//[Offset: 0x44, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: FortConditionalCosmeticModification
	FortCosmeticModification CosmeticModification;//[Offset: 0x0, Size: 1504]
	GameplayTagContainer ConditionalTags;//[Offset: 0x5e0, Size: 32]

--------------------------------
Class: FortConditionalIncludeTags
	GameplayTagContainer ConditionTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer IncludeTags;//[Offset: 0x20, Size: 32]

--------------------------------
Class: FortWeaponModSlot
	FortWeaponModItemDefinition* WeaponMod;//[Offset: 0x0, Size: 8]
	bool bIsDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: FortWeaponModItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortConditionalIncludeTags[] AdditionalGameplayTags;//[Offset: 0x7a0, Size: 16]
	FortAbilitySet* AbilitySet;//[Offset: 0x7b0, Size: 40]

--------------------------------
Class: FortWeaponAdditionalData.Object

--------------------------------
Class: FortCreativeTagsHelper
	FName[] CreativeTags;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortGameplayAbilityBehaviorDistanceData
	GameplayTagContainer DistanceDataTag;//[Offset: 0x0, Size: 32]
	float Distance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: WeaponHudKeyActionVisibility
	int Index;//[Offset: 0x0, Size: 4]
	bool bVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: WeaponHitNotifyAudioBank.DataAsset.Object
	SoundBase* SoundBody;//[Offset: 0x30, Size: 8]
	SoundBase* SoundCrit;//[Offset: 0x38, Size: 8]
	SoundBase* SoundShield;//[Offset: 0x40, Size: 8]
	SoundBase* SoundDeath;//[Offset: 0x48, Size: 8]
	SoundBase* SoundDeathCrit;//[Offset: 0x50, Size: 8]
	SoundBase* SoundBodyReceive;//[Offset: 0x58, Size: 8]
	SoundBase* SoundCritReceive;//[Offset: 0x60, Size: 8]
	SoundBase* SoundDeathReceive;//[Offset: 0x68, Size: 8]
	SoundBase* SoundDeathCritReceive;//[Offset: 0x70, Size: 8]
	SoundBase* SoundFallReceive;//[Offset: 0x78, Size: 8]
	SoundBase* SoundFallDeathReceive;//[Offset: 0x80, Size: 8]

--------------------------------
Class: FortWeaponFireModeData.DataAsset.Object
	float FireModeDataDelay;//[Offset: 0x30, Size: 4]
	class FortTracerBase* TracerTemplate;//[Offset: 0x38, Size: 8]
	bool bOverrideImpactSurfaceEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	ParticleSystem* ImpactPhysicalSurfaceEffects;//[Offset: 0x48, Size: 8]
	NiagaraSystem*[] ImpactNiagaraPhysicalSurfaceEffectAssets;//[Offset: 0x120, Size: 16]
	ParticleSystem* BeamParticleSystem;//[Offset: 0x130, Size: 8]
	NiagaraSystem* BeamNiagaraSystemAsset;//[Offset: 0x138, Size: 8]
	bool bOverrideImpactSurfaceSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	SoundBase* ImpactPhysicalSurfaceSounds;//[Offset: 0x148, Size: 8]
	ParticleSystem* MuzzleParticleSystem;//[Offset: 0x220, Size: 8]
	NiagaraSystem* MuzzleNiagaraSystem;//[Offset: 0x228, Size: 8]
	SoundBase* PrimaryFireSound1P;//[Offset: 0x230, Size: 8]
	bool bOverridePrimaryFireSoundArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	SoundBase* PrimaryFireSound;//[Offset: 0x240, Size: 8]

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xa8, Size: 4]
	float OscillationBlendInTime;//[Offset: 0xac, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0xb0, Size: 4]
	ROscillator RotOscillation;//[Offset: 0xb4, Size: 36]
	VOscillator LocOscillation;//[Offset: 0xd8, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0xfc, Size: 12]
	float AnimPlayRate;//[Offset: 0x108, Size: 4]
	float AnimScale;//[Offset: 0x10c, Size: 4]
	float AnimBlendInTime;//[Offset: 0x110, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x114, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x118, Size: 4]
	CameraAnim* Anim;//[Offset: 0x120, Size: 8]
	CameraAnimationSequence* AnimSequence;//[Offset: 0x128, Size: 8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float OscillatorTimeRemaining;//[Offset: 0x134, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x138, Size: 8]
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x180, Size: 8]
	static MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum Playspace, Rotator UserPlaySpaceRot);// 0x7e304f8
	static MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum Playspace, Rotator UserPlaySpaceRot);// 0x7e30714
	void ReceiveStopShake(bool bImmediately);// 0xbbc0600
	void ReceivePlayShake(float Scale);// 0xbbc0600
	bool ReceiveIsFinished();// 0x7e308e4
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0xbbc0600

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]
	enum Waveform;//[Offset: 0x9, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 8]
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 40]
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 40]
	<GUID,FName> BoundActorComponents;//[Offset: 0xb8, Size: 80]

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 8]
	float PlayRate;//[Offset: 0x30, Size: 4]
	float Scale;//[Offset: 0x34, Size: 4]
	float BlendInTime;//[Offset: 0x38, Size: 4]
	float BlendOutTime;//[Offset: 0x3c, Size: 4]
	float RandomSegmentDuration;//[Offset: 0x40, Size: 4]
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0x48, Size: 8]
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 8]

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x488, Size: 8]
	MovieSceneSequence* Sequence;//[Offset: 0x490, Size: 8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x498, Size: 232]

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	float AspectRatio;//[Offset: 0x38, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1360]
	float PostProcessBlendWeight;//[Offset: 0x590, Size: 4]
	CameraFilmbackSettings Filmback;//[Offset: 0x594, Size: 12]
	CameraLensSettings LensSettings;//[Offset: 0x5a0, Size: 24]
	CameraFocusSettings FocusSettings;//[Offset: 0x5b8, Size: 88]
	float CurrentFocalLength;//[Offset: 0x610, Size: 4]
	float CurrentAperture;//[Offset: 0x614, Size: 4]
	float CurrentFocusDistance;//[Offset: 0x618, Size: 4]

--------------------------------
Class: FortWeaponAdditiveAnimSet.DataAsset.Object
	FortAnimInput_WeaponAdditiveAnimAsset MaleBodyType_AnimAsset;//[Offset: 0x30, Size: 48]
	FortAnimInput_WeaponAdditiveAnimAsset FemaleBodyType_AnimAsset;//[Offset: 0x60, Size: 48]

--------------------------------
Class: FortAnimInput_WeaponAdditiveAnimAsset
	AnimSequence* TargetingAdditivePoseOffset;//[Offset: 0x8, Size: 8]
	AnimSequence* NonTargetedAdditivePoseOffset;//[Offset: 0x10, Size: 8]
	AnimSequence* RelaxedAdditivePoseOffset;//[Offset: 0x18, Size: 8]
	AnimSequence* RelaxedWhileSprintingAdditiveAnim;//[Offset: 0x20, Size: 8]
	AnimSequence* RelaxedWhileCrouchSprintingAdditiveAnim;//[Offset: 0x28, Size: 8]

--------------------------------
Class: PickupInstigatorData
	byte TeamIndex;//[Offset: 0x0, Size: 1]
	byte TargetAttitude;//[Offset: 0x1, Size: 1]
	float AccentColorParam;//[Offset: 0x4, Size: 4]
	int ScoreValue;//[Offset: 0x8, Size: 4]
	PropertyOverrideData ItemOptionData;//[Offset: 0x10, Size: 80]
	class FortPickup* OverridePickupClass;//[Offset: 0x60, Size: 8]

--------------------------------
Class: FortPickup.Actor.Object
	bool bUsePickupWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bSuppressInteractionWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool bWeaponsCanBeAutoPickups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	bool bAutoUpgradeWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233, Size: 1]
	bool bDoServerHandlePickupTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	float SimulatingTooLongLength;//[Offset: 0x238, Size: 4]
	MulticastInlineDelegateProperty OnPickup;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupAttempted;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupDespawned;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupDestroyed;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupCombined;//[Size: 16]
	MulticastInlineDelegateProperty OnSetPawnWhoDroppedPickup;//[Size: 16]
	FortItemEntry PrimaryPickupItemEntry;//[Offset: 0x2a8, Size: 400]
	FortItemEntry[] MultiItemPickupEntries;//[Offset: 0x438, Size: 16]
	FortPickupLocationData PickupLocationData;//[Offset: 0x448, Size: 96]
	enum PickupSourceTypeFlags;//[Offset: 0x4a8, Size: 1]
	enum PickupSpawnSource;//[Offset: 0x4a9, Size: 1]
	int16 OptionalOwnerID;//[Offset: 0x4aa, Size: 2]
	GUID OptionalMissionGuid;//[Offset: 0x4ac, Size: 16]
	FortItem* PrimaryPickupDummyItem;//[Offset: 0x4c0, Size: 8]
	FortPickupEffect* PickupEffectBlueprint;//[Offset: 0x4c8, Size: 8]
	CapsuleComponent* TouchCapsule;//[Offset: 0x4d0, Size: 8]
	ProjectileMovementComponent* MovementComponent;//[Offset: 0x4d8, Size: 8]
	FortWaterInteractionComponent* WaterInteractionComponent;//[Offset: 0x4e0, Size: 8]
	FortLinkToActorComponent* LinkToActorComponent;//[Offset: 0x4e8, Size: 8]
	bool bPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	bool bSplitOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 1]
	bool bTossedFromContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f2, Size: 1]
	bool bForceHideMinimapIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f3, Size: 1]
	bool bCombinePickupsWhenTossCompletes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool bServerStoppedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	bool bClientUseInterpolationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f6, Size: 1]
	byte ServerImpactSoundFlash;//[Offset: 0x4f7, Size: 1]
	float LastLandedSoundPlayTime;//[Offset: 0x4f8, Size: 4]
	float OverrideInteractAimRadius;//[Offset: 0x4fc, Size: 4]
	float LandSoundZForceThreshold;//[Offset: 0x500, Size: 4]
	float DefaultFlyTime;//[Offset: 0x504, Size: 4]
	bool bForceDefaultFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	AudioComponent* DroppedLoopingSoundComp;//[Offset: 0x510, Size: 8]
	SoundBase* LandedSoundOverride;//[Offset: 0x518, Size: 8]
	FortPawn* PawnWhoDroppedPickup;//[Offset: 0x520, Size: 8]
	int CachedSpecialActorIdx;//[Offset: 0x528, Size: 4]
	FName SpecialActorID;//[Offset: 0x52c, Size: 8]
	FortSimpleMiniMapIndicator* MinimapIndicator;//[Offset: 0x538, Size: 8]
	FortSlateHUDIndicator* HUDLabel;//[Offset: 0x540, Size: 8]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	float DespawnTime;//[Offset: 0x628, Size: 4]
	float StormDespawnTime;//[Offset: 0x62c, Size: 4]
	float StartSimulatingTime;//[Offset: 0x630, Size: 4]
	void TossPickup(const Vector FinalLocation, FortPawn* ItemOwner, int OverrideMaxStackCount, bool bToss, bool bShouldCombinePickupsWhenTossCompletes, const enum InPickupSourceTypeFlags, const enum InPickupSpawnSource);// 0xd11e9e8
	void SetPickedUp(const bool bInPickedUp);// 0xd11e93c
	void SetOverrideInteractRadius(float NewRadius);// 0xd11e894
	void SetDespawnTime(float InDespawnTime);// 0xd11e7ec
	void SetCombinePickupsWhenTossCompletes(const bool CombinePickupsWhenTossCompletes);// 0xd11e740
	bool PickedUp();// 0xd11e724
	void OnServerStopCallback(out const HitResult Hit);// 0xd11e64c
	void OnServerBounceCallback(out const HitResult Hit, out const Vector OldVelocity);// 0xd11e528
	void OnRep_TossedFromContainer();// 0xb6a2864
	void OnRep_ServerStoppedSimulation();// 0xb6a2848
	void OnRep_ServerImpactSoundFlash();// 0xb6a282c
	void OnRep_PrimaryPickupItemEntry();// 0xb6a2810
	void OnRep_PickupOwnerData();// 0xb6a27f4
	void OnRep_PickupLocationData();// 0xb6a27d8
	void OnRep_ForceHideMinimapIndicator();// 0xd11e50c
	void OnRep_bPickedUp();// 0xb6a27bc
	void HandleConnectedActorDestroyed();// 0xd11e4f8
	GUID GetTrackerGuid();// 0xd11e4c4
	FortItemEntry GetPrimaryItemEntry();// 0xd11e4a4
	FortPawn* GetPawnWhoDroppedPickup();// 0xd11e488
	FortPlayerController* GetOwnerPlayerController();// 0xd11e454
	float GetMovementCapsuleRadius();// 0xd11e434
	float GetMovementCapsuleHalfHeight();// 0xb6a279c
	int GetItemEntryNum();// 0xd11e400
	FortItemEntry GetItemEntry(int ItemIndex);// 0xb6a26e4
	bool GetInteractText(out FText InteractText);// 0xd11e2dc
	bool GetInteractErrorText(out FText InteractErrorText);// 0xd11e1b8
	FText GetDisplayName();// 0xd11e0e8
	void BlueprintSetPickupTarget(FortPawn* PickupTarget, bool bPlayPickupSound);// 0xd11dff8
	bool BlueprintGetInteractErrorText(out FText OverrideInteractErrorText);// 0xd11ded4
	bool BlueprintCanInteract(const FortPlayerPawn* FortPawn, out bool bCanInteractOverride);// 0xb6a25dc
	bool AllowLongRangeAutoPickup(const FortPlayerPawn* FortPawn);// 0xd11de18

--------------------------------
Class: FortPickupLocationData
	FortPawn* PickupTarget;//[Offset: 0x0, Size: 8]
	FortPickup* CombineTarget;//[Offset: 0x8, Size: 8]
	FortPawn* ItemOwner;//[Offset: 0x10, Size: 8]
	Vector_NetQuantize10 LootInitialPosition;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 LootFinalPosition;//[Offset: 0x24, Size: 12]
	float FlyTime;//[Offset: 0x30, Size: 4]
	Vector_NetQuantizeNormal StartDirection;//[Offset: 0x34, Size: 12]
	Vector_NetQuantize10 FinalTossRestLocation;//[Offset: 0x40, Size: 12]
	enum TossState;//[Offset: 0x4c, Size: 1]
	bool bPlayPickupSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	GUID PickupGuid;//[Offset: 0x50, Size: 16]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 4]
	float MaxSpeed;//[Offset: 0xf0, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 4]
	float Buoyancy;//[Offset: 0x10c, Size: 4]
	float Bounciness;//[Offset: 0x110, Size: 4]
	float Friction;//[Offset: 0x114, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 4]
	MulticastInlineDelegateProperty OnProjectileBounce;//[Size: 16]
	MulticastInlineDelegateProperty OnProjectileStop;//[Size: 16]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 4]
	float InterpLocationTime;//[Offset: 0x158, Size: 4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0xba2c890
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xd8d2af0
	void SetInterpolatedComponent(SceneComponent* Component);// 0xd8d2a40
	void ResetInterpolation();// 0xd8d2a24
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xbbc0600
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xbbc0600
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xd8d2920
	Vector LimitVelocity(Vector NewVelocity);// 0xd8d286c
	bool IsVelocityUnderSimulationThreshold();// 0xd8d2828
	bool IsInterpolationComplete();// 0xd8d27fc

--------------------------------
Class: FortWaterInteractionComponent.ActorComponent.Object
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bTickComponentForces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bIncludeWaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bAllowCachedDataInLargeBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	float WaterVelocityForceMultiplier;//[Offset: 0xb4, Size: 4]
	float WaterVelocityShallowDepth;//[Offset: 0xb8, Size: 4]
	float WaterVelocityShallowMultiplier;//[Offset: 0xbc, Size: 4]
	float WaterVelocityShoreBias;//[Offset: 0xc0, Size: 4]
	float BuoyancyFactor;//[Offset: 0xc4, Size: 4]
	float UpBuoyancyDrag;//[Offset: 0xc8, Size: 4]
	float UpBuoyancyDrag2;//[Offset: 0xcc, Size: 4]
	float DownBuoyancyDrag;//[Offset: 0xd0, Size: 4]
	float DownBuoyancyDrag2;//[Offset: 0xd4, Size: 4]
	float HorizontalDrag;//[Offset: 0xd8, Size: 4]
	float HorizontalDrag2;//[Offset: 0xdc, Size: 4]
	MulticastInlineDelegateProperty OnEnterWaterEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnExitWaterEvent;//[Size: 16]
	void OnExitedWaterBody(FortWaterBodyActor* WaterBody, bool bIsLastBody);// 0xbbc0600
	void OnEnteredWaterBody(FortWaterBodyActor* WaterBody, bool bIsFirstBody);// 0xbbc0600
	bool IsInWater();// 0xb6d580c
	bool IsEnabled();// 0xd213180
	void GetLastWaterSurfaceInfo(out Vector WaterPlaneLocation, out Vector WaterPlaneNormal, out Vector WaterSurfacePosition, out float WaterDepth, out int WaterBodyIdx, out Vector WaterVelocity);// 0xb6d55c8
	FortWaterBodyActor* GetCurrentWaterBody();// 0xd213164

--------------------------------
Class: FortWaterBodyActor.WaterBody.Actor.Object
	WaterBodyGenerator* Generator;//[Offset: 0xdd0, Size: 8]
	MaterialInterface* RiverToLakeTransitionMat;//[Offset: 0xdd8, Size: 8]
	MaterialInstanceDynamic* RiverToLakeTransitionMID;//[Offset: 0xde0, Size: 8]
	MaterialInterface* RiverToOceanTransitionMat;//[Offset: 0xde8, Size: 8]
	MaterialInstanceDynamic* RiverToOceanTransitionMID;//[Offset: 0xdf0, Size: 8]
	Vector OceanCollisionExtents;//[Offset: 0xdf8, Size: 12]
	float OceanHeightOffset;//[Offset: 0xe04, Size: 4]
	ScalableFloat WaterVelocityRemapInputRange;//[Offset: 0xe08, Size: 40]
	ScalableFloat WaterVelocityRemapOutputRange;//[Offset: 0xe30, Size: 40]
	ScalableFloat WaterVelocityPerpendicularBias;//[Offset: 0xe58, Size: 40]
	ScalableFloat WaterOverrideMaxCharacterForce;//[Offset: 0xe80, Size: 40]
	int WaterPriority;//[Offset: 0xea8, Size: 4]
	bool bIsSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeac, Size: 1]
	void SetSwampLocationAndRadius(out const Vector InPosition, float InRadius);// 0xb6d51c8
	void OnReceivedBulletImpact(out const HitResult Hit);// 0xbbc0600
	void OnPlayerExitedWaterBody(FortPlayerPawn* Player, bool bIsLastBody);// 0xbbc0600
	void OnPlayerEnteredWaterBody(FortPlayerPawn* Player, bool bIsFirstBody);// 0xbbc0600
	float GetWaterVelocityAtSplineInputKey(float InKey);// 0xd212e04
	void GetWaterSurfaceInfo(Vector QueryLocation, out Vector WaterPlaneLocation, out Vector WaterPlaneNormal, out Vector WaterSurfacePosition, out float WaterDepth, out int WaterBodyIdx, out Vector WaterVelocity, bool bIncludeDepth, bool bIncludeWaves);// 0xb6d4ea4

--------------------------------
Class: WaterBody.Actor.Object
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x230, Size: 8]
	float TargetWaveMaskDepth;//[Offset: 0x238, Size: 4]
	float MaxWaveHeightOffset;//[Offset: 0x23c, Size: 4]
	int WaterBodyIndex;//[Offset: 0x240, Size: 4]
	bool bFillCollisionUnderWaterBodiesForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	UnderwaterPostProcessSettings UnderwaterPostProcessSettings;//[Offset: 0x250, Size: 1392]
	enum WaterBodyType;//[Offset: 0x7c0, Size: 1]
	WaterCurveSettings CurveSettings;//[Offset: 0x7c8, Size: 32]
	MaterialInterface* WaterMaterial;//[Offset: 0x7e8, Size: 8]
	MaterialInterface* UnderwaterPostProcessMaterial;//[Offset: 0x7f0, Size: 8]
	bool bAffectsLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	bool bGenerateCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 1]
	bool bOverrideWaterMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa, Size: 1]
	StaticMesh* WaterMeshOverride;//[Offset: 0x800, Size: 8]
	int OverlapMaterialPriority;//[Offset: 0x808, Size: 4]
	FName CollisionProfileName;//[Offset: 0x80c, Size: 8]
	WaterSplineComponent* SplineComp;//[Offset: 0x818, Size: 8]
	WaterSplineMetadata* WaterSplineMetadata;//[Offset: 0x820, Size: 8]
	MaterialInstanceDynamic* WaterMID;//[Offset: 0x828, Size: 8]
	MaterialInstanceDynamic* UnderwaterPostProcessMID;//[Offset: 0x830, Size: 8]
	WaterBodyIsland*[] Islands;//[Offset: 0x838, Size: 16]
	WaterBodyExclusionVolume*[] ExclusionVolumes;//[Offset: 0x848, Size: 16]
	LandscapeProxy* Landscape;//[Offset: 0x858, Size: 8]
	PostProcessSettings CurrentPostProcessSettings;//[Offset: 0x860, Size: 1360]
	bool bCanAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	class NavAreaBase* WaterNavAreaClass;//[Offset: 0xdb8, Size: 8]
	WaterWavesBase* WaterWaves;//[Offset: 0xdc0, Size: 8]
	void SetWaterWaves(WaterWavesBase* InWaterWaves);// 0x7b32f20
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);// 0x7b32e28
	WaterSplineComponent* GetWaterSpline();// 0x7b331a4
	MaterialInstanceDynamic* GetWaterMaterialInstance();// 0x7b33154
	MaterialInterface* GetWaterMaterial();// 0x7b33188
	MaterialInstanceDynamic* GetUnderwaterPostProcessMaterialInstance();// 0x7b33120
	MaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();// 0x7b331c0
	MaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();// 0x7b331fc
	float GetMaxWaveHeight();// 0x7b32df4
	WaterBodyIsland*[] GetIslands();// 0x7b33074
	WaterBodyExclusionVolume*[] GetExclusionVolumes();// 0x7b32fc8

--------------------------------
Class: WaterWavesBase.Object

--------------------------------
Class: WaterBodyGenerator.Object

--------------------------------
Class: WaterSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	WaterSplineCurveDefaults WaterSplineDefaults;//[Offset: 0x534, Size: 16]
	WaterSplineCurveDefaults PreviousWaterSplineDefaults;//[Offset: 0x544, Size: 16]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x440, Size: 112]
	InterpCurveVector SplineInfo;//[Offset: 0x4b0, Size: 24]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4c8, Size: 24]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4e0, Size: 24]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x4f8, Size: 24]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x514, Size: 4]
	float Duration;//[Offset: 0x518, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51f, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522, Size: 1]
	float LoopPosition;//[Offset: 0x524, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x528, Size: 12]
	void UpdateSpline();// 0xd8f99d0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0xd8f98d8
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f975c
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xd8f96ac
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f94dc
	void SetTangentColor(out const LinearColor TangentColor);// 0xd8f942c
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f92b0
	void SetSplineWorldPoints(out const Vector[] Points);// 0xd8f91e8
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0xd8f90b8
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f8f6c
	void SetSplineLocalPoints(out const Vector[] Points);// 0xd8f8ea4
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0xd8f8df4
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0xd8f8cb8
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f8b3c
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f89c0
	void SetDrawDebug(bool bShow);// 0xd8f8910
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0xd8f881c
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0xd8f86e4
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0xd8f85ec
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0xd8f8500
	bool IsClosedLoop();// 0xd8f84c8
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0xd8f8410
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0xd8f8310
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0xd8f8258
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0xd8f8158
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0xd8f80a0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0xd8f7fe8
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0xd8f7ee8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0xd8f7e30
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0xd8f7d3c
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xd8f7c48
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f7b0c
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f7a18
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f7924
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f7830
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0xd8f76a4
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0xd8f7568
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0xd8f742c
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0xd8f72f0
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f71b4
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f70c0
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f6fcc
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f6ed8
	byte GetSplinePointType(int PointIndex);// 0xd8f6e28
	float GetSplineLength();// 0xd8f6df4
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0xd8f6cf8
	Vector GetScaleAtSplinePoint(int PointIndex);// 0xd8f6c44
	Vector GetScaleAtSplineInputKey(float InKey);// 0xd8f6b90
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0xd8f6adc
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f69a0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f68ac
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f67b8
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f66c4
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f658c
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f649c
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f63ac
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f62bc
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f6180
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f608c
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f5f98
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f5ea4
	int GetNumberOfSplineSegments();// 0xd8f5e70
	int GetNumberOfSplinePoints();// 0xba35f08
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f5d34
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xba35e14
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f5c40
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f5b4c
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0xd8f59c4
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0xd8f5884
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f5790
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0xd8f56e0
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0xd8f55f0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0xd8f5500
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0xd8f5450
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0xd8f53a0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0xd8f5264
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f5170
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0xd8f507c
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0xd8f4f88
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0xd8f4ed4
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0xd8f4de0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f4cd8
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0xd8f4b88
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f4a80
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0xd8f49c4
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f48bc
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f47b8
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f46b0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f45a8
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0xd8f44f0
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0xd8f43e8
	void ClearSplinePoints(bool bUpdateSpline);// 0xd8f4338
	void AddSplineWorldPoint(out const Vector Position);// 0xd8f4280
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f4104
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0xd8f3fc8
	void AddSplineLocalPoint(out const Vector Position);// 0xd8f3f10
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0xd8f3e04
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0xd8f3ce0

--------------------------------
Class: WaterSplineCurveDefaults
	float DefaultDepth;//[Offset: 0x0, Size: 4]
	float DefaultWidth;//[Offset: 0x4, Size: 4]
	float DefaultVelocity;//[Offset: 0x8, Size: 4]
	float DefaultAudioIntensity;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 24]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 24]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 24]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 24]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 8]
	uint32 Version;//[Offset: 0x68, Size: 4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: UnderwaterPostProcessSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Priority;//[Offset: 0x4, Size: 4]
	float BlendRadius;//[Offset: 0x8, Size: 4]
	float BlendWeight;//[Offset: 0xc, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x10, Size: 1360]
	MaterialInterface* UnderwaterPostProcessMaterial;//[Offset: 0x560, Size: 8]

--------------------------------
Class: WaterCurveSettings
	bool bUseCurveChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	CurveFloat* ElevationCurveAsset;//[Offset: 0x8, Size: 8]
	float ChannelEdgeOffset;//[Offset: 0x10, Size: 4]
	float ChannelDepth;//[Offset: 0x14, Size: 4]
	float CurveRampWidth;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WaterBodyIsland.Actor.Object
	WaterSplineComponent* SplineComp;//[Offset: 0x228, Size: 8]
	WaterSplineComponent* GetWaterSpline();// 0x7b33930

--------------------------------
Class: WaterBodyExclusionVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bIgnoreAllOverlappingWaterBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	WaterBody*[] WaterBodiesToIgnore;//[Offset: 0x268, Size: 16]

--------------------------------
Class: WaterSplineMetadata.SplineMetadata.Object
	InterpCurveFloat Depth;//[Offset: 0x28, Size: 24]
	InterpCurveFloat WaterVelocityScalar;//[Offset: 0x40, Size: 24]
	InterpCurveFloat RiverWidth;//[Offset: 0x58, Size: 24]
	InterpCurveFloat AudioIntensity;//[Offset: 0x70, Size: 24]
	InterpCurveVector WaterVelocity;//[Offset: 0x88, Size: 24]

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x220, Size: 8]
	GUID LandscapeGuid;//[Offset: 0x228, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x238, Size: 8]
	int MaxLODLevel;//[Offset: 0x240, Size: 4]
	float LODDistanceFactor;//[Offset: 0x244, Size: 4]
	byte LODFalloff;//[Offset: 0x248, Size: 1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x24c, Size: 4]
	float Lod0ScreenSize;//[Offset: 0x250, Size: 4]
	float LOD0DistributionSetting;//[Offset: 0x254, Size: 4]
	float LODDistributionSetting;//[Offset: 0x258, Size: 4]
	float TessellationComponentScreenSize;//[Offset: 0x25c, Size: 4]
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x264, Size: 4]
	int OccluderGeometryLOD;//[Offset: 0x268, Size: 4]
	int StaticLightingLOD;//[Offset: 0x26c, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x270, Size: 8]
	float StreamingDistanceMultiplier;//[Offset: 0x278, Size: 4]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x280, Size: 8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2a8, Size: 8]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2b0, Size: 16]
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	byte MeshHolesMaxLod;//[Offset: 0x2c1, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2c8, Size: 16]
	int VirtualTextureNumLods;//[Offset: 0x2d8, Size: 4]
	int VirtualTextureLodBias;//[Offset: 0x2dc, Size: 4]
	enum VirtualTextureRenderPassType;//[Offset: 0x2e0, Size: 1]
	float NegativeZBoundsExtension;//[Offset: 0x2e4, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x2e8, Size: 4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x2f0, Size: 16]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x300, Size: 16]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x310, Size: 16]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float StaticLightingResolution;//[Offset: 0x388, Size: 4]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x38d, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x38f, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x390, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x394, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x398, Size: 24]
	int CollisionMipLevel;//[Offset: 0x3b0, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x3b4, Size: 4]
	float CollisionThickness;//[Offset: 0x3b8, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x3c0, Size: 336]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x510, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x514, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x518, Size: 4]
	int NumSubsections;//[Offset: 0x51c, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 1]
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 1]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x522, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x523, Size: 1]
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x528, Size: 80]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0xa331ab8
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0xa331ba8
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0xa3319c4
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0xa33186c
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0xa332074
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0xa331c98
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0xa3321cc
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0xa33211c
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0xa332334
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0xa3323e4
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0xa332284

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x440, Size: 16]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x450, Size: 16]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x460, Size: 16]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0xa335518

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	float Width;//[Offset: 0x40, Size: 4]
	float LayerWidthRatio;//[Offset: 0x44, Size: 4]
	float SideFalloff;//[Offset: 0x48, Size: 4]
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 4]
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 4]
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 4]
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 4]
	float EndFalloff;//[Offset: 0x5c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 16]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 16]
	Box Bounds;//[Offset: 0x80, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 24]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 24]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 16]
	Box Bounds;//[Offset: 0x80, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 8]
	float TangentLen;//[Offset: 0x8, Size: 4]
	FName SocketName;//[Offset: 0xc, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	Vector LayerLeft;//[Offset: 0x3c, Size: 12]
	Vector LayerRight;//[Offset: 0x48, Size: 12]
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 12]
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 12]
	float StartEndFalloff;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4d8, Size: 88]
	Vector SplineUpDir;//[Offset: 0x530, Size: 12]
	float SplineBoundaryMin;//[Offset: 0x53c, Size: 4]
	GUID CachedMeshBodySetupGuid;//[Offset: 0x540, Size: 16]
	BodySetup* BodySetup;//[Offset: 0x550, Size: 8]
	float SplineBoundaryMax;//[Offset: 0x558, Size: 4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55c, Size: 1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55c, Size: 1]
	byte ForwardAxis;//[Offset: 0x55d, Size: 1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x560, Size: 4]
	void UpdateMesh();// 0xd8fb3bc
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0xd8fb2cc
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0xd8fb1e0
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0xd8fb0f0
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0xd8fb000
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0xd8faf14
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0xd8fad54
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0xd8fac58
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0xd8fab68
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0xd8faa78
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0xd8fa98c
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0xd8fa89c
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0xd8fa7ac
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0xd8fa6c0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0xd8fa5d0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0xd8fa4e0
	Vector GetStartTangent();// 0xd8fa4a8
	Vector2D GetStartScale();// 0xd8fa474
	float GetStartRoll();// 0xd8fa440
	Vector GetStartPosition();// 0xd8fa408
	Vector2D GetStartOffset();// 0xd8fa3d4
	Vector GetSplineUpDir();// 0xd8fa39c
	byte GetForwardAxis();// 0xd8fa368
	Vector GetEndTangent();// 0xd8fa330
	Vector2D GetEndScale();// 0xd8fa2fc
	float GetEndRoll();// 0xd8fa2c8
	Vector GetEndPosition();// 0xd8fa290
	Vector2D GetEndOffset();// 0xd8fa25c
	float GetBoundaryMin();// 0xd8fa228
	float GetBoundaryMax();// 0xd8fa1f4

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector2D EndScale;//[Offset: 0x38, Size: 8]
	Vector EndTangent;//[Offset: 0x40, Size: 12]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x4d0, Size: 4]

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xe0, Size: 4]
	int SizeY;//[Offset: 0xe4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xe8, Size: 16]
	byte AddressX;//[Offset: 0xf8, Size: 1]
	byte AddressY;//[Offset: 0xf9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xfb, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	byte MipsSamplerFilter;//[Offset: 0xfd, Size: 1]
	byte MipsAddressU;//[Offset: 0xfe, Size: 1]
	byte MipsAddressV;//[Offset: 0xff, Size: 1]
	byte OverrideFormat;//[Offset: 0x100, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xd8, Size: 4]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 8]
	float Hardness;//[Offset: 0x38, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x440, Size: 4]
	int SectionBaseY;//[Offset: 0x444, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x448, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x44c, Size: 4]
	int NumSubsections;//[Offset: 0x450, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x458, Size: 8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x460, Size: 8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x468, Size: 16]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x478, Size: 16]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x488, Size: 16]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x498, Size: 16]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x4a8, Size: 16]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x4b8, Size: 8]
	Vector4 WeightmapScaleBias;//[Offset: 0x4c0, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x4d0, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x4e0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x4f0, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x50c, Size: 28]
	Texture2D* HeightmapTexture;//[Offset: 0x528, Size: 8]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x530, Size: 16]
	Texture2D*[] WeightmapTextures;//[Offset: 0x540, Size: 16]
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x550, Size: 8]
	GUID MapBuildDataId;//[Offset: 0x558, Size: 16]
	GUID[] IrrelevantLights;//[Offset: 0x568, Size: 16]
	int CollisionMipLevel;//[Offset: 0x578, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x57c, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x580, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x584, Size: 4]
	float StaticLightingResolution;//[Offset: 0x588, Size: 4]
	int ForcedLOD;//[Offset: 0x58c, Size: 4]
	int LODBias;//[Offset: 0x590, Size: 4]
	GUID StateId;//[Offset: 0x594, Size: 16]
	GUID BakedTextureMaterialGuid;//[Offset: 0x5a4, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x5b8, Size: 8]
	byte MobileBlendableLayerMask;//[Offset: 0x5c0, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5c8, Size: 8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x5d0, Size: 16]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x5e0, Size: 16]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0xa32cf20
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0xa32cd18
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0xa32ce1c

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x440, Size: 16]
	int SectionBaseX;//[Offset: 0x450, Size: 4]
	int SectionBaseY;//[Offset: 0x454, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x458, Size: 4]
	float CollisionScale;//[Offset: 0x45c, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x460, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x468, Size: 16]
	GUID HeightfieldGuid;//[Offset: 0x478, Size: 16]
	Box CachedLocalBox;//[Offset: 0x488, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x4a4, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x4d0, Size: 16]
	LandscapeComponent* GetRenderComponent();// 0xa32d6dc

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 1]

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x588, Size: 16]
	int NumBuiltInstances;//[Offset: 0x598, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x5a0, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x5bc, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x5d8, Size: 16]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x5f0, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x5f4, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	int InstanceCountToRender;//[Offset: 0x614, Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0xd8241ac

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4d0, Size: 16]
	int NumCustomDataFloats;//[Offset: 0x4e0, Size: 4]
	float[] PerInstanceSMCustomData;//[Offset: 0x4e8, Size: 16]
	int InstancingRandomSeed;//[Offset: 0x4f8, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x4fc, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x500, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x508, Size: 16]
	int NumPendingLightmaps;//[Offset: 0x560, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x568, Size: 16]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xd82d0bc
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0xd82cf3c
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0xd82ce58
	bool RemoveInstance(int InstanceIndex);// 0xd82cd9c
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xd82cc2c
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0xd82ca9c
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0xd82c94c
	int GetInstanceCount();// 0xd82c918
	void ClearInstances();// 0xd82c8fc
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xd82c6fc
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xd82c4b0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0xd82c3dc
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0xd82c274
	int AddInstance(out const Transform InstanceTransform);// 0xd82c198

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 8]
	GUID LayerGuid;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortLinkToActorComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnLinkedActorDestroyed;//[Size: 16]
	MulticastInlineDelegateProperty OnLinkedActorDisconnected;//[Size: 16]
	bool bPerformLinkingCheckOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 1]
	bool bRegisterWithOwnerMovementComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 1]
	bool bUseActorRotationForDirectionVectors;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 1]
	bool bMonitorLinkedActorForChanges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd0, Size: 1]
	enum DirectionForLink;//[Offset: 0xd1, Size: 1]
	float DirectionTraceLength;//[Offset: 0xd4, Size: 4]
	FName ActorTag;//[Offset: 0xd8, Size: 8]
	Actor* ActorLinkedTo;//[Offset: 0xe0, Size: 8]
	void SetUseActorRotationForDirectionVectors(const bool InbUseActorRotationForDirectionVectors);// 0xd071998
	void SetRegisterWithOwnerMovementComponent(const bool bRegisterWithMovementComp);// 0xd0718e0
	void SetPerformLinkingCheckOnBeginPlay(const bool bCheckOnBeginPlay);// 0xd071828
	void RegisterWithOwnersProjectileMovementComponent();// 0xd071814
	bool PerformLinkingCheck(const enum InDirection, out Actor* OutActorLinkedTo);// 0xd071714
	void OnMonitorLinkedActor();// 0xd071700
	void OnLinkedActorDisconnected__DelegateSignature();// 0xbbc0600
	void OnLinkedActorDestroyed__DelegateSignature();// 0xbbc0600
	void HandleMovementStopped(out const HitResult Hit);// 0xd071630
	void HandleLinkedActorDestroyed(Actor* DestroyedActor);// 0xd071588
	void HandleBuildingActorDestroyed(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd071328
	Actor* GetActorLinkedTo();// 0xd0712f0

--------------------------------
Class: FortSimpleMiniMapIndicator.FortMiniMapIndicator.FortIndicator.Object
	SlateBrush NormalBrush;//[Offset: 0x118, Size: 136]
	SlateBrush AboveBelowBrush;//[Offset: 0x1a0, Size: 136]

--------------------------------
Class: FortMiniMapIndicator.FortIndicator.Object

--------------------------------
Class: FortIndicator.Object
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	float MaxDistance;//[Offset: 0x34, Size: 4]
	bool bMoveWithPawnState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	FName AttachedSocketName;//[Offset: 0x3c, Size: 8]
	void OnParentActorEndPlay(Actor* Actor, byte EndPlayReason);// 0xb67b5ec

--------------------------------
Class: FortSlateHUDIndicator.FortIndicator.Object
	bool bClampToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bShowClampToScreenArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]

--------------------------------
Class: WeaponHudData
	FName KeyActionName;//[Offset: 0x0, Size: 8]
	FName GamepadActionName;//[Offset: 0x8, Size: 8]
	FText ActionDescription;//[Offset: 0x10, Size: 24]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString KeyActionId;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortGenericDataStoreManagerComponent.ActorComponent.Object
	<class Object,FortGenericDataStoreMapWrapper> ClassToNameMapping;//[Offset: 0xb0, Size: 80]
	bool RemoveNamedStoreByType(out const FName StoreName, out const class Object ClassType);// 0xd020714
	Object* GetNamedStoreByType(out const FName StoreName, out const class Object ClassType);// 0xd020600
	Object* AddNamedStoreByType(out const FName StoreName, out const class Object ClassType);// 0xd0204ec

--------------------------------
Class: FortGenericDataStoreMapWrapper
	<FName,Object*> NamedStoreMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: MaterialInterfaceArray
	MaterialInterface*[] Materials;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortEffectDistanceQuality
	float MinDistanceCinematic;//[Offset: 0x0, Size: 4]
	float MinDistanceEpic;//[Offset: 0x4, Size: 4]
	float MinDistanceHigh;//[Offset: 0x8, Size: 4]
	float MinDistanceMedium;//[Offset: 0xc, Size: 4]
	float MinDistanceLow;//[Offset: 0x10, Size: 4]
	bool bAllowCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bAllowEpic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bAllowHigh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bAllowMedium;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAllowLow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]

--------------------------------
Class: FortProjectileTrajectory.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x220, Size: 8]
	SplineMeshComponent*[] SplineMeshComponents;//[Offset: 0x228, Size: 16]
	void SetTrajectorySpline(out const Vector[] SplinePoints, out const Vector[] SplineTangents);// 0xd1a8648

--------------------------------
Class: FortEquippedWeaponModSlot
	FortAbilitySetHandle EquippedAbilitySetHandle;//[Offset: 0x0, Size: 56]
	FortWeaponModItemDefinition* EquippedWeaponMod;//[Offset: 0x38, Size: 8]

--------------------------------
Class: CosmeticVariantCache
	FortItemDefinition* ItemDefFor;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortFXManager.FortClientOnlyActor.Actor.Object
	FortSplineMeshAnimSet[] SplineAnimSets;//[Offset: 0x228, Size: 16]
	FortMIDAnimSet[] MIDAnimSets;//[Offset: 0x238, Size: 16]
	FortParticleAnimSet[] ParticleAnimSets;//[Offset: 0x248, Size: 16]
	FortLightAnimSet[] LightAnimSets;//[Offset: 0x258, Size: 16]
	FortWeaponRanged*[] PendingWeaponFX;//[Offset: 0x268, Size: 16]
	static Actor* SpawnPooledFXActor(Object* WorldContextObject, class Actor FXActorClass, out const Transform SpawnTransform);// 0xcfdec98
	static void ShrinkGenericMIDPoolToSize(Object* WorldContextObject, MaterialInterface* Material, int DesiredNewSize);// 0xcfdeb84
	static void ReturnPickupStretchMIDToPool(FortPickupEffect* PickupObject, PrimitiveComponent* Component, int ElementIndex);// 0xcfdea70
	static void ReturnGenericPooledMID(Object* WorldContextObject, MaterialInterface* Material, MaterialInstanceDynamic* UsedMID);// 0xcfde95c
	static void ReturnFXActorToPool(Object* WorldContextObject, Actor* FXActor);// 0xcfde888
	static void RemoveSplineMeshAnimations(Object* WorldContextObject, SplineMeshComponent* SplineMesh);// 0xcfde7b4
	static void RemoveParticleAnimations(Object* WorldContextObject, ParticleSystemComponent* ParticleSystemComp);// 0xcfde6e0
	static void RemoveMIDAnimations(Object* WorldContextObject, MaterialInstanceDynamic* Mid);// 0xcfde60c
	static void RemoveLightAnimations(Object* WorldContextObject, LightComponent* LightComp);// 0xcfde538
	static MaterialInstanceDynamic* GetPickupStretchMIDFromPool(FortPickupEffect* PickupObject, MaterialInterface* SourceMaterial, PrimitiveComponent* Component, int ElementIndex, out bool bNeedsToBeInitialized);// 0xcfde388
	static MaterialInstanceDynamic* GetPickupRarityMID(FortPickupEffect* PickupObject, PrimitiveComponent* Component, int ElementIndex, int Rarity, out bool bNeedsToBeInitialized);// 0xb6665a8
	static MaterialInstanceDynamic* GetGenericPooledMID_AssumeParametersUnitialized(Object* WorldContextObject, MaterialInterface* Material, int DesiredBatchCreateSize);// 0xcfde264
	static void AddSplineMeshSnapAnimation(Object* WorldContextObject, out const SplineMeshComponent*[] SplineMeshes, SplineComponent* TargetSpline, CurveFloat* GrowthCurve, float Duration, bool bPlayGrowthReverse);// 0xcfde064
	static void AddSplineMeshScaleAnimation(Object* WorldContextObject, SplineMeshComponent* SplineMesh, float StartScaleStart, float StartScaleEnd, float EndScaleStart, float EndScaleEnd, CurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse);// 0xcfddd80
	static void AddParticleAnimationFloat(Object* WorldContextObject, ParticleSystemComponent* ParticleSystemComp, FName ParamName, float StartValue, float EndValue, CurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse);// 0xcfddad8
	static void AddMIDAnimationFloat(Object* WorldContextObject, MaterialInstanceDynamic* Mid, FName ParamName, float StartValue, float EndValue, CurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse);// 0xb666300
	static void AddMIDAnimationColorCurve(Object* WorldContextObject, MaterialInstanceDynamic* Mid, FName ParamName, CurveLinearColor* ColorCurve, float Duration, bool bPlayReverse);// 0xcfdd900
	static void AddMIDAnimationColor(Object* WorldContextObject, MaterialInstanceDynamic* Mid, FName ParamName, out const LinearColor StartValue, out const LinearColor EndValue, CurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse);// 0xb666034
	static void AddLightAnimationIntensity(Object* WorldContextObject, LightComponent* LightComp, float StartValue, float EndValue, CurveFloat* LerpCurve, bool bOneMinusLerpValue, float Duration, bool bPlayReverse);// 0xb665dcc

--------------------------------
Class: FortSplineMeshAnimSet
	SplineMeshComponent* SplineMesh;//[Offset: 0x0, Size: 8]
	FortSplineMeshScaleAnimationInfo[] ScaleAnims;//[Offset: 0x8, Size: 16]
	FortSplineMeshSnapAnimationInfo[] SnapAnims;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortSplineMeshScaleAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortFXAnimationInfoBase
	CurveFloat* LerpCurve;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortSplineMeshSnapAnimationInfo.FortFXAnimationInfoBase
	SplineComponent* TargetSpline;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FortMIDAnimSet
	MaterialInstanceDynamic* Mid;//[Offset: 0x0, Size: 8]
	FortFloatParamAnimationInfo[] FloatParamAnims;//[Offset: 0x8, Size: 16]
	FortLinearColorParamAnimationInfo[] ColorParamAnims;//[Offset: 0x18, Size: 16]
	FortLinearColorCurveParamAnimationInfo[] ColorCurveParamAnims;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortFloatParamAnimationInfo.FortFloatAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortFloatAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortLinearColorParamAnimationInfo.FortLinearColorAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortLinearColorAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortLinearColorCurveParamAnimationInfo.FortLinearColorCurveAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortLinearColorCurveAnimationInfo.FortFXAnimationInfoBase

--------------------------------
Class: FortParticleAnimSet
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 8]
	FortFloatParamAnimationInfo[] ParamAnims;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortLightAnimSet
	LightComponent* LightComp;//[Offset: 0x0, Size: 8]
	FortFloatAnimationInfo[] IntensityAnims;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortWeaponRanged.FortWeapon.Actor.Object
	MulticastInlineDelegateProperty OnProjectileSpawned;//[Size: 16]
	class FortTracerBase* TracerTemplate;//[Offset: 0xda8, Size: 8]
	bool bAllowAutomaticWeaponCatchup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	int CurrentNumBullets;//[Offset: 0xdb8, Size: 4]
	Vector ScopeTargetingMuzzleOffset;//[Offset: 0xdbc, Size: 12]
	Vector CurrentMuzzleBlockedLocation;//[Offset: 0xdc8, Size: 12]
	enum CurrentDamageStart;//[Offset: 0xdd4, Size: 1]
	Rotator MaxTargetingAimAdjustment;//[Offset: 0xdd8, Size: 12]
	bool bShouldDisplayAmmoCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde4, Size: 1]
	bool bShouldDisplayAmmoCounterDuringSecondaryFire;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde4, Size: 1]
	bool bShouldHideReserveAmmo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde4, Size: 1]
	bool bShouldAimFromMuzzleAtCloseRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xde4, Size: 1]
	bool bAlwaysAimFromMuzzle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xde4, Size: 1]
	bool bMaintainAimLocationDuringTargeting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xde4, Size: 1]
	bool bUseScopeTargeting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xde4, Size: 1]
	bool bUseFirstPersonTargeting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xde4, Size: 1]
	bool bPersistentFireFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde5, Size: 1]
	bool bUseBeamParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde5, Size: 1]
	bool bActivateRangeAbilityPerBurstShot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde5, Size: 1]
	bool bUseImpactFXForProjectiles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xde5, Size: 1]
	bool bUseImpactFXForProjectileOverlaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xde5, Size: 1]
	bool bUseImpactDecals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xde5, Size: 1]
	bool bUsePersistentBeam;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xde5, Size: 1]
	bool bIsMuzzleTraceNearWall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde6, Size: 1]
	float MuzzleTraceNearWallThreshold;//[Offset: 0xde8, Size: 4]
	FortEffectDistanceQuality BeamSignificance;//[Offset: 0xdf8, Size: 24]
	FortEffectDistanceQuality ImpactSignificance;//[Offset: 0xe10, Size: 24]
	FortEffectDistanceQuality DecalSignificance;//[Offset: 0xe28, Size: 24]
	float ScopeImpactEffectDistanceOffset;//[Offset: 0xe40, Size: 4]
	ParticleSystem* BeamParticleSystem;//[Offset: 0xe48, Size: 8]
	NiagaraSystem* BeamNiagaraSystemAsset;//[Offset: 0xe50, Size: 40]
	FName BeamSourceSocketName;//[Offset: 0xe78, Size: 8]
	SkeletalMesh* FortSpawnPropOverride;//[Offset: 0xe80, Size: 8]
	AnimationAsset* FortSpawnPropAnimOverride;//[Offset: 0xe88, Size: 8]
	Vector DecalSizeMin;//[Offset: 0xe90, Size: 12]
	Vector DecalSizeMax;//[Offset: 0xe9c, Size: 12]
	float DecalLifespanMin;//[Offset: 0xea8, Size: 4]
	float DecalLifespanMax;//[Offset: 0xeac, Size: 4]
	LinearColor DecalColorStart;//[Offset: 0xeb0, Size: 16]
	LinearColor DecalColorEnd;//[Offset: 0xec0, Size: 16]
	MaterialInterface* DecalMaterial;//[Offset: 0xed0, Size: 8]
	Texture2D* DecalTexture;//[Offset: 0xed8, Size: 8]
	byte[] SurfaceAcceptingDecals;//[Offset: 0xee0, Size: 16]
	int ShellReloadCounter;//[Offset: 0xef4, Size: 4]
	Rotator TargetingRotAdjustmentTotal;//[Offset: 0xefc, Size: 12]
	float LastTargetingRotAdjustmentWeight;//[Offset: 0xf08, Size: 4]
	bool ScopePostProcessEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	float ScopePostProcessBlendWeight;//[Offset: 0xf5c, Size: 4]
	WeightedBlendable[] ScopePostProcessMaterial;//[Offset: 0xf60, Size: 16]
	FortBulletPatternEntry[] BulletPattern;//[Offset: 0xf78, Size: 16]
	NiagaraSystem* BeamNiagaraSystemInstance;//[Offset: 0xfb8, Size: 8]
	bool bUseAthenaRecoil;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1008, Size: 1]
	bool bUseAthenaPerfectADSAim;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1008, Size: 1]
	bool bFirstShotAccuracyCheckVehicleMovement;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1008, Size: 1]
	float FirstShotAccuracyMinWaitTime;//[Offset: 0x100c, Size: 4]
	AnimMontage* FireAnimation;//[Offset: 0x1048, Size: 8]
	AnimMontage* FireDownsightsAnimation;//[Offset: 0x1050, Size: 8]
	AnimMontage* FireFromCrouchWalkAnimation;//[Offset: 0x1058, Size: 8]
	AnimMontage* CockingAnimation;//[Offset: 0x1060, Size: 8]
	AnimMontage* WeaponFireMontage;//[Offset: 0x1068, Size: 8]
	AnimMontage* WeaponFireDownsightsMontage;//[Offset: 0x1070, Size: 8]
	AnimMontage* WeaponFireFromCrouchWalkMontage;//[Offset: 0x1078, Size: 8]
	AnimMontage* WeaponCockingMontage;//[Offset: 0x1080, Size: 8]
	FXSystemComponent* BeamPSC;//[Offset: 0x1088, Size: 8]
	float CrouchWalkSpeedThreshold;//[Offset: 0x1090, Size: 4]
	bool bEnableRecoilDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 1]
	MulticastInlineDelegateProperty OnOverheatValueChanged;//[Size: 16]
	enum OverheatState;//[Offset: 0x10b8, Size: 1]
	AnimMontage* OverheatedAnimation;//[Offset: 0x10c0, Size: 8]
	AnimMontage* WeaponOverheatedAnimation;//[Offset: 0x10c8, Size: 8]
	bool bCooldownWhileOverheated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	float OverheatValue;//[Offset: 0x10d4, Size: 4]
	float TimeHeatWasLastAdded;//[Offset: 0x10dc, Size: 4]
	float TimeOverheatedBegan;//[Offset: 0x10e0, Size: 4]
	bool bCacheAimPointOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	Vector CachedAimPoint;//[Offset: 0x10e8, Size: 12]
	interface class * CachedLODSettingsManager;//[Offset: 0x1108, Size: 16]
	bool UseScopeTargeting();// 0xb6d99a0
	bool UseFirstPersonTargeting();// 0xd224e48
	void TempHack_PlayOverheatedAnimation();// 0xd224e34
	bool ShouldSpawnBulletShellFX();// 0xd224dfc
	bool ShouldPlayShellFX();// 0xb6d9968
	bool ShouldPlayReloadFX();// 0xb6d9930
	bool ShouldPlayPersistentFireFX();// 0xb6d98f0
	bool ShouldDisplayAmmoCounterDuringSecondaryFire();// 0xd224dc4
	bool ShouldDisplayAmmoCounter();// 0xd224d8c
	void SetShellReloadCounter(int InputShellReloadCounter);// 0xd224ce8
	void SetHomingTarget(FortPawn* PlayerPawn);// 0xd224c40
	void SetDecalColorStart(LinearColor InputDecalColorStart);// 0xd224ba0
	void SetDecalColorEnd(LinearColor InputDecalColorEnd);// 0xd224b00
	ParticleSystem* SetBeamParticleSystem(ParticleSystem* InputBeamParticleSystem);// 0xd224a50
	NiagaraSystem* SetBeamNiagaraSystem(NiagaraSystem* InputBeamNiagaraSystem);// 0xd2249a0
	void ServerSetMuzzleTraceNearWall(bool bIsNearWall);// 0xd2248bc
	void OnStartOverheated();// 0xbbc0600
	void OnStartHeating();// 0xbbc0600
	void OnStartCooling();// 0xbbc0600
	void OnSpawnProjectile(FortProjectileBase* SpawnProjectile);// 0xbbc0600
	void OnRep_OverheatState(enum PreviousOverheatState);// 0xd224814
	void OnLocalFailedToFireWhenOverheated();// 0xbbc0600
	void OnFinishedCooling();// 0xbbc0600
	bool IsUsingScopeOrFirstPersonCamera();// 0xd2247dc
	bool IsUsingScope();// 0xb6d98b8
	bool IsUsingFirstPersonCamera();// 0xd2247a4
	bool IsOverheated();// 0xd22476c
	bool IsCachedIsProjectileWeapon();// 0xb6d9878
	void InitializeBeamFX(FXSystemComponent* InBeamPSC);// 0xd2246c4
	bool GetUseBeamParticles();// 0xb6d9858
	void GetUniqueMuzzleSocketNames(out FName[] Names);// 0xb6d9794
	class FortTracerBase GetTracerTemplate();// 0xd2246a8
	int GetShellReloadCounter();// 0xd22468c
	WeightedBlendable[] GetScopePostProcessMaterial();// 0xd224604
	void GetScopeParameters(out StaticMeshComponent* ScopeComponent, out Vector2D DepthOfFieldVignetteRange, out float WeaponSightsCameraOffset);// 0xbbc0600
	enum GetOverheatState();// 0xd2245d0
	float GetOverheatingMaxValue();// 0xd22459c
	float GetCurrentOverheatValue();// 0xd224580
	ParticleSystemComponent* GetBeamPSC();// 0xd224514
	ParticleSystem* GetBeamParticleSystem();// 0xd2244f8
	NiagaraSystem* GetBeamNiagaraSystem();// 0xd2244dc
	NiagaraComponent* GetBeamNiagaraComponent();// 0xd224470
	float GetADSTransitionOutTime();// 0xd22443c
	float GetADSTransitionInTime();// 0xd224408
	void ForceScopeFX();// 0xbbc0600
	void EnableCornersReticle(bool bNewEnabled);// 0xd224358
	void EnableAltOuterReticle(bool bNewEnabled);// 0xd2242a8
	void EnableAltCenterReticle(bool bNewEnabled);// 0xd2241f8
	bool DoesWeaponOverheat();// 0xd2241c0
	void DeactivateBeamFX();// 0xb6d9780
	void ClientFixupOverheatValue(const float InOverheatValue);// 0xd224110
	void ClearHomingTarget();// 0xd2240fc
	void AbortScopeFX();// 0xbbc0600

--------------------------------
Class: FortProjectileBase.FortGameplayEffectDeliveryActor.Actor.Object
	CurveTableRowHandle VerticleFireOffset;//[Offset: 0x5c0, Size: 16]
	CurveTableRowHandle InitialSpeed;//[Offset: 0x5d0, Size: 16]
	CurveTableRowHandle ChargeUpInitialSpeed;//[Offset: 0x5e0, Size: 16]
	CurveTableRowHandle MaxSpeed;//[Offset: 0x5f0, Size: 16]
	CurveTableRowHandle InitialGravityScaleOverride;//[Offset: 0x600, Size: 16]
	float ReplicatedMaxSpeed;//[Offset: 0x610, Size: 4]
	float GravityScale;//[Offset: 0x614, Size: 4]
	Actor* OriginalTarget;//[Offset: 0x618, Size: 8]
	float ChargePercent;//[Offset: 0x620, Size: 4]
	float MomentumTransfer;//[Offset: 0x624, Size: 4]
	bool bAddOwnerVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	bool bSpawnPointCanBeUsedByOtherPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 1]
	float PlayerSpawnOffset;//[Offset: 0x62c, Size: 4]
	bool bRegisterInPerceptionSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	bool bCanBePickedUpWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x638, Size: 8]
	FortProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x640, Size: 8]
	FortWaterInteractionComponent* WaterInteractionComponent;//[Offset: 0x648, Size: 8]
	bool bDummyProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	bool bStopSimulatingOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 1]
	enum TouchWaterBehavior;//[Offset: 0x652, Size: 1]
	bool bDisableCollisionOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x653, Size: 1]
	bool bStoppedSimulatingDueToHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 1]
	bool bReplicateStopSimulationLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x655, Size: 1]
	bool bReplicateStopSimulationLocationOptimized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x656, Size: 1]
	bool bClientInterpMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x657, Size: 1]
	bool bClientInterpRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bUseClientsidePrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	bool bIsPredictedProjectile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65a, Size: 1]
	bool bAutoSelectAttachedForInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65b, Size: 1]
	HitResult SimulationStoppingHit;//[Offset: 0x65c, Size: 136]
	bool bFiredWhileTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e5, Size: 1]
	int ResumeSimulationCount;//[Offset: 0x6e8, Size: 4]
	uint16 SyncId;//[Offset: 0x6ee, Size: 2]
	byte WeaponResponseType;//[Offset: 0x6f0, Size: 1]
	GameplayTagContainer DefaultTags;//[Offset: 0x728, Size: 32]
	FortProjectileCues ProjectileGameplayCues;//[Offset: 0x748, Size: 64]
	SceneComponent* CachedPassByPawn;//[Offset: 0x798, Size: 8]
	float SkyTubeForceMultiplier;//[Offset: 0x7ac, Size: 4]
	FortSkyTube* CurrentSkyTube;//[Offset: 0x7b0, Size: 8]
	HitResult CachedImpactResult;//[Offset: 0x7b8, Size: 136]
	class BulletWhipTrackerComponentBase* BulletWhipTrackerComponentClass;//[Offset: 0x840, Size: 8]
	bool bResetOverlapRestrictionsOnBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	float MaxLifespanOnStop;//[Offset: 0x84c, Size: 4]
	BulletWhipTrackerComponentBase* BulletWhipTrackerComponent;//[Offset: 0x850, Size: 8]
	FName[] ProjectileThrownStatCategoryNames;//[Offset: 0x868, Size: 16]
	void SetGravityScale(float InitialGravityScale);// 0xd1a3ea4
	void ResumeSimulation();// 0xd1a3e90
	void OnStoppedOnServer();// 0xbbc0600
	void OnStopCallback(out const HitResult Hit);// 0xb6b2a98
	void OnStop(out const HitResult Hit);// 0xbbc0600
	void OnShot(out const HitResult Hit);// 0xbbc0600
	void OnResumeSimulation();// 0xbbc0600
	void OnRep_SimulationStoppingHit();// 0xb6b2a84
	void OnRep_ResumeSimulationCount();// 0xd1a3e7c
	void OnRep_ReplicatedMaxSpeed();// 0xb6b2a70
	void OnRep_GravityScale();// 0xb6b2a5c
	void OnRep_CurrentSkyTube();// 0xd1a3e68
	void OnHitByMelee(out const HitResult Hit);// 0xbbc0600
	void OnBounceCallback(out const HitResult Hit, out const Vector ImpactVelocity);// 0xb6b2938
	void OnBounce(out const HitResult Hit);// 0xbbc0600
	FortSkyTube* GetSkyTube();// 0xd1a3e4c
	FortWeapon* GetOwnerWeapon();// 0xd1a3e18
	FortPlayerController* GetOwnerPlayerController();// 0xd1a3de4
	float GetGravityScale();// 0xd1a3db0
	float GetDefaultSpeed(float InChargePercent);// 0xd1a3d00
	float GetDefaultGravityScale();// 0xd1a3ccc
	void ExitSkyTube(FortSkyTube* SkyTube, out bool bIsLastTube);// 0xd1a3bd8
	void EnterSkyTube(FortSkyTube* SkyTube, out bool bIsFirstTube);// 0xd1a3ae4
	void AddTagToDefaultTags(GameplayTag TagToAddToProjectileDefaultTags);// 0xd1a3a3c

--------------------------------
Class: FortGameplayEffectDeliveryActor.Actor.Object
	FortGameplayEffectContainerSpec EffectContainerSpecToApplyOnTouch;//[Offset: 0x250, Size: 184]
	bool bKillOnExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bSetHiddenOnKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	bool bKillOnMaxTargetsTouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 1]
	bool bSkipRecaptureSourceActorTagsOnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 1]
	FortGameplayEffectContainerSpec EffectContainerSpecToApplyOnExplode;//[Offset: 0x310, Size: 184]
	FortGameplayEffectContainerSpec[] AdditionalExplodeEffectContainers;//[Offset: 0x3c8, Size: 16]
	float LifespanAfterKill;//[Offset: 0x3d8, Size: 4]
	float TouchingActorsEffectApplicationUpdateTime;//[Offset: 0x3dc, Size: 4]
	OverlapRestrictions[] OverlapRestrictions;//[Offset: 0x3e0, Size: 16]
	bool bIsBeingKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	bool bHasExploded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	bool bIgnoreInstigatorCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 1]
	bool bIgnoreVehicleAndAttachedActors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 1]
	bool bDisableClientOverlapEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 1]
	bool bAddHitResultToTouchApplication;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f0, Size: 1]
	bool bExplosionTransformIgnoresRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f0, Size: 1]
	bool bCanExplodeMultipleTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f1, Size: 1]
	bool bRegisterForEndOverlaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f1, Size: 1]
	bool bSpawnNavAreaModifierOverTargetSelectionShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f1, Size: 1]
	class NavArea* NavAreaClass;//[Offset: 0x3f8, Size: 8]
	GameplayTag CurieIdentifier;//[Offset: 0x400, Size: 8]
	PrimitiveComponent* CollisionComponent;//[Offset: 0x408, Size: 8]
	FortSpawnContext SpawnContext;//[Offset: 0x410, Size: 40]
	bool bDoExplosionReentrancyGuard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 1]
	Actor*[] InstigatorActorsAdded;//[Offset: 0x550, Size: 16]
	GameplayTagContainer AnalyticsTags;//[Offset: 0x580, Size: 32]
	void SetNoiseMakingInstigatorOverride(Actor* NewActor);// 0xcffdbc4
	void SetIgnoreInstigatorCollision(bool bShouldIgnore);// 0xcffdb14
	void SetCollisionComponent(PrimitiveComponent* NewCollisionComponent);// 0xcffda6c
	void OnTouched(Actor* OtherActor, PrimitiveComponent* OtherComp, out const HitResult HitResult, bool bIsOverlap);// 0xbbc0600
	void OnRep_IsBeingKilled();// 0xb6706e8
	void OnRep_HasExplodedReplay();// 0xb6706cc
	void OnExploded(out const Actor*[] HitActors, out const HitResult[] HitResults);// 0xbbc0600
	void OnComponentTouch(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xb6704f8
	void OnComponentOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xb6702dc
	void OnComponentEndOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xcffd900
	void KillTimerExpired();// 0xcffd8e4
	void Kill();// 0xcffd8c8
	bool IsBeingKilled();// 0xcffd888
	PrimitiveComponent* GetCollisionComponent();// 0xcffd854
	void DoSingleActorHit(out const HitResult Hit, const bool bBroadcastHit);// 0xcffd72c
	void DoExplosionAtLocation(out const Vector ExplosionLocation);// 0xcffd674
	void DoExplosion();// 0xcffd658
	void ChangeInstigator(Pawn* NewInstigator);// 0xcffd5b0
	void BroadcastExplosion(const Actor*[] HitActors, const HitResult[] HitResults);// 0xb6701c8
	void AddAdditionalExplodeEffectContainer(out const FortGameplayEffectContainerSpec ExplodeContainer);// 0xcffd4b4

--------------------------------
Class: OverlapRestrictions
	int OverlapsPerActor;//[Offset: 0x0, Size: 4]
	GameplayTag OverlapActorTagRestrictions;//[Offset: 0x4, Size: 8]

--------------------------------
Class: FortSpawnContext
	byte Team;//[Offset: 0x0, Size: 1]
	GameplayTagContainer Tags;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FortProjectileMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	ProjectileHomingData HomingData;//[Offset: 0x1cc, Size: 60]
	enum InitialHomingStyle;//[Offset: 0x208, Size: 1]
	bool bHasHomedTowardTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 1]
	bool bSetInitialLocAndDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 1]
	bool bReplicatedAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20b, Size: 1]
	bool bReplicateStopSimulating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20b, Size: 1]
	float HomingLaserTargetDistance;//[Offset: 0x20c, Size: 4]
	float HomingTravelTime;//[Offset: 0x210, Size: 4]
	float HomingOverrideSpeed;//[Offset: 0x214, Size: 4]
	FortPawn* LockedOnTarget;//[Offset: 0x218, Size: 8]
	Vector DesiredDirection;//[Offset: 0x220, Size: 12]
	Vector PreviousHomingTargetPosition;//[Offset: 0x22c, Size: 12]
	Vector LaunchPosition;//[Offset: 0x238, Size: 12]
	Vector InitialDirection;//[Offset: 0x244, Size: 12]
	float AccelerationMagnitude;//[Offset: 0x250, Size: 4]
	FortReplicatedVelocityData ReplicatedVelocityData;//[Offset: 0x254, Size: 16]
	FortStopSimulatingRepData FortStopSimulatingRepData;//[Offset: 0x264, Size: 16]
	FortWaterInteractionComponent* WaterInteractionComponent;//[Offset: 0x278, Size: 8]
	MulticastInlineDelegateProperty OnProjectileVelocityReplicated;//[Size: 16]
	void SetWaterInteractionComponent(FortWaterInteractionComponent* WaterComponent);// 0xd1a6e68
	void SetVelocity(out const Vector InReplicatedVelocity);// 0xd1a6db8
	void SetReplicatedAutoRegisterUpdatedComponent(const bool bInReplicatedAutoRegisterUpdatedComponent);// 0xd1a6d08
	void SetHomingTurnSpeedMin(float NewHomingTurnSpeedMin);// 0xd1a6c60
	void SetHomingTurnSpeedMax(float NewHomingTurnSpeedMax);// 0xd1a6bb8
	void SetHomingTimeUntilMaxTurnSpeed(float NewTimeUntilMax);// 0xd1a6b10
	void SetHomingTargetPosition(out const Vector HomingTargetPosition);// 0xd1a6a60
	void SetHomingTargetOffset(out const Vector NewHomingOffset);// 0xd1a69b0
	void SetHomingTarget(Actor* HomingTarget);// 0xd1a6908
	void SetHomingStyle(enum NewHomingStyle, bool ResetHomingTurnSpeedTimer);// 0xd1a6818
	void SetHomingLockTargetDistanceThreshold(float NewDistanceThreshold);// 0xd1a6770
	void SetHomingLaserTargetDistance(float NewDistance);// 0xd1a66c8
	void SetHomingData(out const ProjectileHomingData NewHomingData);// 0xd1a65d0
	void SetDesiredDirection(out const Vector Direction);// 0xd1a6520
	void SetAccelerationMagnitude(const float InAccelerationMagnitude);// 0xd1a6478
	void OnRep_ReplicatedVelocity();// 0xb6b3404
	void OnRep_ReplicatedAutoRegisterUpdatedComponent();// 0xd1a6464
	void OnRep_HomingData();// 0xb6b33f0
	void OnRep_FortStopSimulatingRepData();// 0xb6b33dc
	void OnProjectileVelocityReplicated__DelegateSignature(out const Vector ReplicatedVelocity);// 0xbbc0600
	enum GetInitalHomingStyle();// 0xd1a6448

--------------------------------
Class: ProjectileHomingData
	enum HomingStyle;//[Offset: 0x0, Size: 1]
	float MinTurnSpeed;//[Offset: 0x4, Size: 4]
	float MaxTurnSpeed;//[Offset: 0x8, Size: 4]
	float RampTimeFromMinToMaxTurnSpeed;//[Offset: 0xc, Size: 4]
	float LockTargetDistanceThreshold;//[Offset: 0x10, Size: 4]
	int RandomSeed;//[Offset: 0x14, Size: 4]
	Actor* LockedOnTarget;//[Offset: 0x18, Size: 8]
	Vector LockedOnTargetPosition;//[Offset: 0x20, Size: 12]
	Vector TargetOffset;//[Offset: 0x2c, Size: 12]
	bool ResetTurnSpeedTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: FortReplicatedVelocityData
	byte RepIncrement;//[Offset: 0x0, Size: 1]
	Vector ReplicatedVelocity;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FortStopSimulatingRepData
	byte RepIncrement;//[Offset: 0x0, Size: 1]
	Vector StopLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FortSkyTube.Actor.Object
	bool bExemptFromShutdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	SplineComponent* Spline;//[Offset: 0x228, Size: 8]
	ScalableFloat ExitAcceleration;//[Offset: 0x230, Size: 40]
	ScalableFloat ExitGravity;//[Offset: 0x258, Size: 40]
	ScalableFloat TangentialAcceleration;//[Offset: 0x280, Size: 40]
	ScalableFloat TangentialMaxSpeed;//[Offset: 0x2a8, Size: 40]
	ScalableFloat MaxEntrySpeed;//[Offset: 0x2d0, Size: 40]
	ScalableFloat MaxPerpendicularEntrySpeed;//[Offset: 0x2f8, Size: 40]
	ScalableFloat EntryBiasTowardTangent;//[Offset: 0x320, Size: 40]
	ScalableFloat EntryVelocityAngleRequired;//[Offset: 0x348, Size: 40]
	ScalableFloat ActiveForwardSteeringAngle;//[Offset: 0x378, Size: 40]
	ScalableFloat InnerMagnetRadius;//[Offset: 0x3a8, Size: 40]
	ScalableFloat OuterMagnetAccel;//[Offset: 0x3d0, Size: 40]
	ScalableFloat InnerMagnetDecel;//[Offset: 0x3f8, Size: 40]
	ScalableFloat OuterMagnetSpeedThreshold;//[Offset: 0x420, Size: 40]
	ScalableFloat InnerMagnetSpeedThreshold;//[Offset: 0x448, Size: 40]
	ScalableFloat ProjectileTangentialMinSpeed;//[Offset: 0x470, Size: 40]
	ScalableFloat ProjectileTangentialMaxSpeed;//[Offset: 0x498, Size: 40]
	ScalableFloat SpiralAccelerationProjectiles;//[Offset: 0x4c0, Size: 40]
	ScalableFloat ProjectileForceMultiplier;//[Offset: 0x4e8, Size: 40]
	ScalableFloat ProjectileEntryMultiplier;//[Offset: 0x510, Size: 40]
	ScalableFloat SpiralAccelerationPhysics;//[Offset: 0x538, Size: 40]
	ScalableFloat PhysicsForceMultiplier;//[Offset: 0x560, Size: 40]
	ScalableFloat PhysicsEntryMultiplier;//[Offset: 0x588, Size: 40]
	ScalableFloat MagnetMaxMultiplierWhenSteering;//[Offset: 0x5b0, Size: 40]
	ScalableFloat SteeringMagnetMaxSteerAngle;//[Offset: 0x5d8, Size: 40]
	ScalableFloat MagnetLowVelocityThreshold;//[Offset: 0x608, Size: 40]
	ScalableFloat MagnetLowVelocityMinValue;//[Offset: 0x630, Size: 40]
	ScalableFloat SteeringReduceAccelerationPower;//[Offset: 0x658, Size: 40]
	ScalableFloat SteeringReduceDecelerationPower;//[Offset: 0x680, Size: 40]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool bShuttingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	void OnStartShuttingDown();// 0xbbc0600
	void OnEnabledChanged();// 0xbbc0600
	bool IsSkyTubeEnabled();// 0xd1d0c00
	bool IsShuttingDown();// 0xd1d0be4
	bool IsExemptFromShutdown();// 0xd1d0bc8
	float GetDelayUntilDisabled();// 0xd1d0b94
	void DeferredEnableOverlaps();// 0xd1d0b78

--------------------------------
Class: FortProjectileCues
	GameplayCueTag Spawn;//[Offset: 0x0, Size: 8]
	GameplayCueTag HitPawn;//[Offset: 0x8, Size: 8]
	GameplayCueTag HitWorld;//[Offset: 0x10, Size: 8]
	GameplayCueTag HitWater;//[Offset: 0x18, Size: 8]
	bool bOrientHitGCsToProjectileVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	float MaxSurfaceNormalDeviationAngle;//[Offset: 0x24, Size: 4]
	GameplayCueTag Bounce;//[Offset: 0x28, Size: 8]
	GameplayCueTag Explosion;//[Offset: 0x30, Size: 8]
	GameplayCueTag UnderwaterExplosion;//[Offset: 0x38, Size: 8]

--------------------------------
Class: GameplayCueTag
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 8]

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x440, Size: 8]
	enum TickBehavior;//[Offset: 0x448, Size: 1]
	int RandomSeedOffset;//[Offset: 0x44c, Size: 4]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x450, Size: 200]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54d, Size: 1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54d, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54d, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54d, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x550, Size: 4]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 16]
	SceneComponent* AutoAttachParent;//[Offset: 0x568, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x570, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x578, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x579, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x57a, Size: 1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x7a71c1c
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x7a6f650
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x7a71740
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x7a70e78
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x7a71a20
	void SetVariableObject(FName InVariableName, Object* Object);// 0x7a71058
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x7a70f68
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x7a6f740
	void SetVariableInt(FName InVariableName, int InValue);// 0x7a6f468
	void SetVariableFloat(FName InVariableName, float InValue);// 0x7a6f55c
	void SetVariableBool(FName InVariableName, bool InValue);// 0x7a6f36c
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x7a71248
	void SetTickBehavior(enum NewTickBehavior);// 0x7a72004
	void SetSeekDelta(float InSeekDelta);// 0x7a72320
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x7a709f0
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0x7a71f40
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0x7a70578
	void SetPaused(bool bInPaused);// 0x7a7075c
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x7a71d18
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x7a71924
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x7a7182c
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x7a71b18
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x7a71148
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x7a71e20
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x7a71540
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x7a71640
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x7a71438
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x7a71338
	void SetMaxSimTime(float InMaxTime);// 0x7a7215c
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0x7a72238
	void SetGpuComputeDebug(bool bEnableDebug);// 0x7a7270c
	void SetForceSolo(bool bInForceSolo);// 0x7a727dc
	void SetDesiredAge(float InDesiredAge);// 0x7a72554
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x7a723fc
	void SetAutoDestroy(bool bInAutoDestroy);// 0x7a720ac
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0x7a6f838
	void SetAllowScalability(bool bAllow);// 0x7a70484
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x7a72630
	void SeekToDesiredAge(float InDesiredAge);// 0x7a724ac
	void ResetSystem();// 0x7a70ab4
	void ReinitializeSystem();// 0x7a70aa0
	bool IsPaused();// 0x7a70724
	void InitForPerformanceBaseline();// 0x7a70534
	enum GetTickBehavior();// 0x7a71fe8
	float GetSeekDelta();// 0x7a723c8
	int GetRandomSeedOffset();// 0x7a71f24
	bool GetPreviewLODDistanceEnabled();// 0x7a70560
	float GetPreviewLODDistance();// 0x7a70548
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x7a70ac8
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x7a70c20
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x7a70d78
	float GetMaxSimTime();// 0x7a72204
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0x7a722e8
	bool GetForceSolo();// 0x7a727bc
	float GetDesiredAge();// 0x7a725fc
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x7a70668
	NiagaraSystem* GetAsset();// 0x7a7288c
	enum GetAgeUpdateMode();// 0x7a726d8
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x7a7080c
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x7a708fc

--------------------------------
Class: FortBulletPatternEntry
	FName SocketName;//[Offset: 0x0, Size: 8]
	Rotator RelativeRotation;//[Offset: 0x8, Size: 12]

--------------------------------
Class: FortSignificanceManager.SignificanceManager.Object

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 24]

--------------------------------
Class: CustomItemWrapModifier.CustomCosmeticModifierBase.Actor.Object
	Actor* VehiclePtr;//[Offset: 0x358, Size: 8]
	FortWeapon* WeaponPtr;//[Offset: 0x360, Size: 8]
	MeshComponent* MeshPtr;//[Offset: 0x368, Size: 8]
	void NotifyAudioComponentVehicleTriggered(AudioComponent* AudioComponent, int Priority);// 0xbbc0600
	void NotifyAudioComponentAdded(AudioComponent* AudioComponent);// 0xbbc0600
	MeshComponent*[] GetWrappedMeshComponents();// 0xb6037b8
	MeshComponent* GetWrappedMeshComponent();// 0xce8e168
	FortWeapon* GetWeapon();// 0xce8e134
	Actor* GetVehicle();// 0xce8e100

--------------------------------
Class: CustomCosmeticModifierBase.Actor.Object
	GameplayTagContainer CurieElementsToCareAbout;//[Offset: 0x220, Size: 32]
	enum EnteredVehicleSeatsToCareAbout;//[Offset: 0x240, Size: 1]
	FortPlayerPawn* FortPlayerPawnPtr;//[Offset: 0x244, Size: 8]
	bool bUsesDayPhaseChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 1]
	bool bUsesWeaponChangeDelegate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 1]
	bool bUsesWeaponFire;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 1]
	bool bUsesNewWeapon;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 1]
	bool bUsesWeaponChange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x260, Size: 1]
	bool bUsesCurieWhatsoever;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x260, Size: 1]
	bool bUsesCurieAttach;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x260, Size: 1]
	bool bUsesCurieDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x260, Size: 1]
	bool bUsesEnteredVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 1]
	bool bUsesExitVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x261, Size: 1]
	bool bUsesTargetingOrFirstPersonCameraChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x261, Size: 1]
	bool bUsesOnHitPawn;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x261, Size: 1]
	bool bRegisteredForDayPhaseChange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x261, Size: 1]
	bool bRegisteredForSkydiving;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x261, Size: 1]
	bool bRegisteredForTargetingOrFirstPersonCamera;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x261, Size: 1]
	bool bRegisteredForWeaponChanges;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x261, Size: 1]
	bool bRegisteredForCurieChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x262, Size: 1]
	bool bRegisteredForNewWeapons;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x262, Size: 1]
	bool bRegisteredForEnterVehicle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x262, Size: 1]
	bool bRegisteredForExitVehicle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x262, Size: 1]
	bool bRegisteredOnHitPawn;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x262, Size: 1]
	void SetCosmeticActiveVariant(AthenaCosmeticItemDefinition* SoftCosmetic, out const GameplayTag ChannelTag, out const GameplayTag VariantTag);// 0xce8c664
	void PreDestruction();// 0xbbc0600
	void OnWeaponFired();// 0xbbc0600
	void OnWeaponChanged(FortWeapon* NewWeapon, FortWeapon* OldWeapon);// 0xbbc0600
	void OnTargetingOrFirstPersonCameraChanged();// 0xbbc0600
	void OnPostResIn();// 0xb602864
	void OnPlayerWeaponChanged(FortWeapon* NewWeapon, FortWeapon* OldWeapon);// 0xb602780
	void OnPawnSet();// 0xbbc0600
	void OnNewWeapons(out const FortItem*[] WeaponsAsItems);// 0xbbc0600
	void OnNewPlayerWeaponType(enum NewType, enum OldType);// 0xbbc0600
	void OnNativeCurieDetached(Object* CurieOwner, CurieContainerHandle ContainerHandle, out const GameplayTag Tag);// 0xce8c530
	void OnNativeCurieAttached(Object* CurieOwner, CurieContainerHandle ContainerHandle, out const GameplayTag Tag);// 0xce8c3fc
	void OnHitPawn(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xbbc0600
	void OnExitVehicle();// 0xbbc0600
	void OnEnterVehicle(out const interface class VehicleEntered);// 0xbbc0600
	void OnEndSkydiving();// 0xbbc0600
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	void OnCurieStateDetached(out const GameplayTag Tag);// 0xbbc0600
	void OnCurieStateAttached(out const GameplayTag Tag);// 0xbbc0600
	void OnBeginSkydiving();// 0xbbc0600
	void NativeWeaponFired(FortWeapon* FiringWeapon);// 0xb6026d8
	void NativeOnHitPawn(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xce8c270
	void NativeExitedVehicle();// 0xce8c25c
	void NativeEnteredVehicle();// 0xce8c248
	bool IsInFrontEnd();// 0xb6026a0
	void HandleSetFirstPersonCameraOrPawnTargetingChanged(bool bChanged);// 0xce8c198
	FortAthenaLoadout GetLoadout();// 0xb6025c8
	FortPlayerPawn* GetAssociatedPlayerPawn();// 0xb60258c

--------------------------------
Class: CurieContainerHandle

--------------------------------
Class: FortAthenaLoadout
	FString BannerIconId;//[Offset: 0x0, Size: 16]
	FString BannerColorId;//[Offset: 0x10, Size: 16]
	AthenaSkyDiveContrailItemDefinition* SkyDiveContrail;//[Offset: 0x20, Size: 8]
	AthenaGliderItemDefinition* Glider;//[Offset: 0x28, Size: 8]
	AthenaPickaxeItemDefinition* Pickaxe;//[Offset: 0x30, Size: 8]
	bool bIsDefaultCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	AthenaCharacterItemDefinition* Character;//[Offset: 0x40, Size: 8]
	McpVariantChannelInfo[] CharacterVariantChannels;//[Offset: 0x48, Size: 16]
	bool bForceUpdateVariants;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	AthenaHatItemDefinition* Hat;//[Offset: 0x60, Size: 8]
	AthenaBackpackItemDefinition* Backpack;//[Offset: 0x68, Size: 8]
	AthenaLoadingScreenItemDefinition* LoadingScreen;//[Offset: 0x70, Size: 8]
	AthenaBattleBusItemDefinition* BattleBus;//[Offset: 0x78, Size: 8]
	AthenaVehicleCosmeticItemDefinition* VehicleDecoration;//[Offset: 0x80, Size: 8]
	AthenaCallingCardItemDefinition* CallingCard;//[Offset: 0x88, Size: 8]
	AthenaMapMarkerItemDefinition* MapMarker;//[Offset: 0x90, Size: 8]
	AthenaDanceItemDefinition*[] Dances;//[Offset: 0x98, Size: 16]
	AthenaVictoryPoseItemDefinition* VictoryPose;//[Offset: 0xa8, Size: 8]
	AthenaMusicPackItemDefinition* MusicPack;//[Offset: 0xb0, Size: 8]
	AthenaItemWrapDefinition* ItemWrapOverride;//[Offset: 0xb8, Size: 8]
	AthenaItemWrapDefinition*[] ItemWraps;//[Offset: 0xc0, Size: 16]
	AthenaCharmItemDefinition* CharmOverride;//[Offset: 0xd0, Size: 8]
	AthenaCharmItemDefinition*[] Charms;//[Offset: 0xd8, Size: 16]
	AthenaPetItemDefinition* PetSkin;//[Offset: 0xe8, Size: 8]

--------------------------------
Class: AthenaSkyDiveContrailItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	ParticleSystem* ContrailEffect;//[Offset: 0x6d0, Size: 40]
	ParticleSystem* FrontEndContrailEffect;//[Offset: 0x6f8, Size: 40]
	NiagaraSystem* NiagaraContrailEffect;//[Offset: 0x720, Size: 40]
	Vector DefaultVelocityVector;//[Offset: 0x748, Size: 12]
	FName VelocityVectorParameterName;//[Offset: 0x754, Size: 8]
	FName ParaGlideLeanParameterName;//[Offset: 0x75c, Size: 8]
	VectorParticleParameter[] VectorParameters;//[Offset: 0x768, Size: 16]
	FloatParticleParameter[] FloatParameters;//[Offset: 0x778, Size: 16]
	bool bWaitForFrontendSceneTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	FXSystemAsset* GetContrailSoftPath();// 0xce3c4a0

--------------------------------
Class: VectorParticleParameter
	Vector Value;//[Offset: 0x0, Size: 12]
	FName ParameterName;//[Offset: 0xc, Size: 8]

--------------------------------
Class: FloatParticleParameter
	float Value;//[Offset: 0x0, Size: 4]
	FName ParameterName;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AthenaGliderItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum GliderType;//[Offset: 0x6d0, Size: 1]
	Vector CameraFramingBoundsCenterOffset;//[Offset: 0x6d4, Size: 12]
	bool bActivateTrailsOnRotationalMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	class FortPlayerParachute* ParachutePrefabClass;//[Offset: 0x6e8, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x710, Size: 40]
	class AnimInstance* AnimClass;//[Offset: 0x738, Size: 40]
	class FortCameraMode* CameraClass;//[Offset: 0x760, Size: 40]
	FortPlayerGliderAnimSet* PlayerAnimSet;//[Offset: 0x788, Size: 40]
	Transform GliderMeshTransform;//[Offset: 0x7b0, Size: 48]
	ParticleSystem* TrailParticles;//[Offset: 0x7e0, Size: 40]
	ParticleSystem* OwnerTrailParticles;//[Offset: 0x808, Size: 40]
	FName TrailParamName;//[Offset: 0x830, Size: 8]
	FName AttachSocket;//[Offset: 0x838, Size: 8]
	ParticleSystem* TrailEffect;//[Offset: 0x840, Size: 40]
	NiagaraSystem* TrailEffectNiagara;//[Offset: 0x868, Size: 40]
	ParticleSystem* TrailEffect2;//[Offset: 0x890, Size: 40]
	NiagaraSystem* TrailEffectNiagara2;//[Offset: 0x8b8, Size: 40]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	FName DeployEffectTagName;//[Offset: 0x8e4, Size: 8]
	bool CleanUpDeployEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	bool bAttachNiagaraEffectToPlayerPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 1]
	FName UserSkeletonParameterName;//[Offset: 0x8f0, Size: 8]
	SoundBase* OpenSound;//[Offset: 0x8f8, Size: 40]
	SoundBase* CloseSound;//[Offset: 0x920, Size: 40]
	SoundBase* ThrustLoopSound;//[Offset: 0x948, Size: 40]
	<enum,FortGliderLayeredAudioFloatParam> ThrustSoundParams;//[Offset: 0x970, Size: 80]
	MarshalledVFX_AuthoredDataConfig* AuthoredData;//[Offset: 0x9c0, Size: 8]
	MarshalledVFXAuthoredData AuthoredParticleData;//[Offset: 0x9c8, Size: 112]
	FName GetUserSkeletonParameterName();// 0xb5e8a40
	FortPlayerGliderAnimSet* GetPlayerAnimSetPtr();// 0xce347b8
	class FortPlayerParachute GetParachutePrefabClass();// 0xce34784
	SkeletalMesh* GetOverrideSkelMeshPtr();// 0xce34648
	class AnimInstance GetOverrideAnimSetPtr();// 0xce3450c
	bool GetAttachNiagaraEffectToPlayerPawn();// 0xb5e8a24

--------------------------------
Class: FortPlayerGliderAnimSet.DataAsset.Object
	FortAnimInput_PlayerGliderAnimAsset AnimAsset;//[Offset: 0x30, Size: 576]
	FortTagToGliderAnimSetPair[] OverrideAnimAssets;//[Offset: 0x270, Size: 16]

--------------------------------
Class: FortTagToGliderAnimSetPair
	GameplayTag MatchingTag;//[Offset: 0x0, Size: 8]
	FortAnimInput_PlayerGliderAnimAsset OverrideAnimAsset;//[Offset: 0x8, Size: 576]

--------------------------------
Class: FortPlayerParachute.Actor.Object
	SoundBase* GliderOpenSoundFromDef;//[Offset: 0x238, Size: 40]
	SoundBase* CurrentGliderOpenSound;//[Offset: 0x260, Size: 8]
	AudioComponent* CurrentGliderOpenAudioComponent;//[Offset: 0x268, Size: 8]
	SoundBase* GliderCloseSoundFromDef;//[Offset: 0x270, Size: 40]
	SoundBase* CurrentGliderCloseSound;//[Offset: 0x298, Size: 8]
	AudioComponent* CurrentGliderCloseAudioComponent;//[Offset: 0x2a0, Size: 8]
	FortGliderAudioComponent* FortLayeredAudioComponentGlider;//[Offset: 0x2a8, Size: 8]
	FortPlayerPawn* PlayerPawn;//[Offset: 0x2c0, Size: 8]
	AthenaGliderItemDefinition* ParachuteItemDef;//[Offset: 0x2c8, Size: 8]
	float ParachuteHiddenAnimFinishTime;//[Offset: 0x2d0, Size: 4]
	bool bGliderFullyDeployed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 1]
	bool bChuteOpened;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 1]
	bool bIsFrontEndPreview;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 1]
	bool bParachuteVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	bool bActivateTrailOnRationalMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 1]
	MarshalledVFXRuntimeData GliderRuntimeVFXData;//[Offset: 0x2d8, Size: 104]
	Rotator LastRotationalMovement;//[Offset: 0x340, Size: 12]
	FName ParachuteTrailParameterName;//[Offset: 0x34c, Size: 8]
	bool IsCosmeticPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool bIsEtherealBackgroundPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	FXSystemComponent* TrailVFX;//[Offset: 0x370, Size: 8]
	FXSystemComponent* TrailVFX2;//[Offset: 0x378, Size: 8]
	SkeletalMeshComponentBudgeted* ParachuteMesh;//[Offset: 0x380, Size: 8]
	ParticleSystemComponent* TrailParticles;//[Offset: 0x388, Size: 8]
	FortPlayerGliderAnimSet* CurrentGliderPlayerAnimSet;//[Offset: 0x3a0, Size: 8]
	bool bUsesDayPhaseChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 1]
	void SetChuteMeshVisibility(bool bParachuteVisiblity);// 0xd17a03c
	void OnRep_PlayerPawn();// 0xb6a9b30
	void OnRep_ParachuteItemDef();// 0xb6a9b1c
	void OnReceiveParachuteItemdef();// 0xbbc0600
	void OnPlayerPawnSet();// 0xbbc0600
	void OnParachuteTrailUpdated(float MovementLengthSquared, float ForwardDot, float RightDot, float RotationalMovementAcceleration);// 0xd179ed4
	void OnGliderFullyDeployed();// 0xbbc0600
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	void K2_SetChuteMeshVisibility(bool bParachuteVisibility);// 0xbbc0600
	bool IsGliderFullyDeployedAccordingToAnim();// 0xb6a9afc
	void InitalizeFromItemDef(const AthenaGliderItemDefinition* InParachuteItemDef, bool bSynchronousLoad);// 0xd179de4
	FXSystemComponent* GetTrailVFXComponent();// 0xb6a9ac8
	FXSystemComponent* GetTrailVFX2Component();// 0xb6a9a94
	SkeletalMeshComponent* GetParachuteRootMesh();// 0xd179db0
	FortPlayerPawn* GetFortPlayerPawn();// 0xb6a9a60
	void DisableTrailParticles();// 0xd179d9c
	void ApplyVariants();// 0xd179d88

--------------------------------
Class: FortGliderAudioComponent.FortLayeredAudioComponent.AudioComponent.SceneComponent.ActorComponent.Object
	bool bDebugIgnoreFullyDeployed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	FortPlayerParachute* PlayerParachute;//[Offset: 0x890, Size: 8]
	void UpdateGliderAudio(float ForwardDot, float RightDot);// 0xb676860
	bool IsParachuteFullyDeployed();// 0xd021924

--------------------------------
Class: FortLayeredAudioComponent.AudioComponent.SceneComponent.ActorComponent.Object
	bool bFadeWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	float FadeTimeWhenOwnerDestroyed;//[Offset: 0x864, Size: 4]
	FortLayeredAudioFloatParam[] FloatParameters;//[Offset: 0x868, Size: 16]
	MulticastInlineDelegateProperty OnOneshotEvent;//[Size: 16]
	void StopAllAudio();// 0xd06cf94
	void SetFloatParameterExt(FName Name, float Value);// 0xb682cdc

--------------------------------
Class: FortLayeredAudioFloatParam
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName Name;//[Offset: 0x4, Size: 8]
	float Value;//[Offset: 0xc, Size: 4]
	enum InterpType;//[Offset: 0x10, Size: 1]
	CurveFloat* Curve;//[Offset: 0x18, Size: 8]
	float AttackSpeed;//[Offset: 0x20, Size: 4]
	float ReleaseSpeed;//[Offset: 0x24, Size: 4]
	Vector2D ParamRange;//[Offset: 0x28, Size: 8]
	FortLayeredAudioOneshotGate[] Oneshots;//[Offset: 0x30, Size: 16]
	FortLayeredAudioComponent* Owner;//[Offset: 0x40, Size: 8]

--------------------------------
Class: FortLayeredAudioOneshotGate
	SoundBase* Sound;//[Offset: 0x0, Size: 8]
	float GateValue;//[Offset: 0x8, Size: 4]
	enum Direction;//[Offset: 0xc, Size: 1]
	bool FadeWhenOutsideGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float MinTimeSinceTrigger;//[Offset: 0x10, Size: 4]
	float InterruptFadeTime;//[Offset: 0x14, Size: 4]
	AudioComponent* AudioComp;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MarshalledVFXRuntimeData
	FXSystemComponent*[] DynamicSystems;//[Offset: 0x50, Size: 16]
	SceneComponent* BasedOn;//[Offset: 0x60, Size: 8]

--------------------------------
Class: FortGliderLayeredAudioFloatParam
	enum InterpType;//[Offset: 0x0, Size: 1]
	CurveFloat* Curve;//[Offset: 0x8, Size: 8]
	float AttackSpeed;//[Offset: 0x10, Size: 4]
	float ReleaseSpeed;//[Offset: 0x14, Size: 4]
	FortGliderLayeredAudioOneshotGate[] Oneshots;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortGliderLayeredAudioOneshotGate
	SoundBase* SoundRef;//[Offset: 0x0, Size: 40]
	float GateValue;//[Offset: 0x28, Size: 4]
	enum Direction;//[Offset: 0x2c, Size: 1]
	bool FadeWhenOutsideGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float MinTimeSinceTrigger;//[Offset: 0x30, Size: 4]
	float InterruptFadeTime;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AthenaPickaxeItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortWeaponMeleeItemDefinition* WeaponDefinition;//[Offset: 0x6d8, Size: 8]
	FName MainMeshAttachmentSocketName;//[Offset: 0x6e0, Size: 8]
	FName OffhandMeshAttachmentSocketName;//[Offset: 0x6e8, Size: 8]
	Transform MainMeshRelativeTransform;//[Offset: 0x6f0, Size: 48]
	Transform OffhandMeshRelativeTransform;//[Offset: 0x720, Size: 48]
	Vector PickaxeImpactFXPreviewOffset;//[Offset: 0x750, Size: 12]
	Vector PickaxeDualWieldPreviewOffset;//[Offset: 0x75c, Size: 12]
	Rotator PickaxeDualWieldPreviewRotation;//[Offset: 0x768, Size: 12]
	AnimMontage* PreviewIdleMontage;//[Offset: 0x778, Size: 40]
	AnimMontage* PreviewSwingMontage;//[Offset: 0x7a0, Size: 40]
	FortUICameraFrameTargetBounds CameraFramingBounds;//[Offset: 0x7c8, Size: 20]
	Vector CameraFramingBoundsCenterOffset;//[Offset: 0x7dc, Size: 12]

--------------------------------
Class: FortWeaponMeleeItemDefinition.FortWeaponItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	MarshalledVFX_AuthoredDataConfig* ManagedVFX_Defaults;//[Offset: 0xb98, Size: 8]
	ParticleSystem* IdleEffect;//[Offset: 0xba0, Size: 40]
	NiagaraSystem* IdleEffectNiagara;//[Offset: 0xbc8, Size: 40]
	FName IdleFXSocketName;//[Offset: 0xbf0, Size: 8]
	ParticleSystem* SwingEffect;//[Offset: 0xbf8, Size: 40]
	NiagaraSystem* SwingEffectNiagara;//[Offset: 0xc20, Size: 40]
	FName SwingFXSocketName;//[Offset: 0xc48, Size: 8]
	ParticleSystem* AnimTrails;//[Offset: 0xc50, Size: 40]
	NiagaraSystem* AnimTrailsNiagara;//[Offset: 0xc78, Size: 40]
	FName NiagaraSkeletonDIVariableName;//[Offset: 0xca0, Size: 8]
	FName AnimTrailsFirstSocketName;//[Offset: 0xca8, Size: 8]
	FName AnimTrailsSecondSocketName;//[Offset: 0xcb0, Size: 8]
	float AnimTrailsWidth;//[Offset: 0xcb8, Size: 4]
	bool bUseAnimTrails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 1]
	bool bAttachAnimTrailsToWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbd, Size: 1]
	<byte,ParticleSystem*> ImpactPhysicalSurfaceEffectsMap;//[Offset: 0xcc0, Size: 80]
	NiagaraSystem*[] ImpactNiagaraPhysicalSurfaceEffects;//[Offset: 0xd10, Size: 16]
	<byte,NiagaraSystem*> ImpactNiagaraPhysicalSurfaceEffectsMap;//[Offset: 0xd20, Size: 80]
	AttachedParticleComponentDef[] ParticleComponentsDefs;//[Offset: 0xd70, Size: 16]
	MaterialInterface*[] WeaponMaterialOverrides;//[Offset: 0xd80, Size: 16]
	class AnimInstance* AnimClass;//[Offset: 0xd90, Size: 40]
	AnimationAsset* SingleAnimationToPlay;//[Offset: 0xdb8, Size: 40]
	<byte,SoundBase*> ImpactPhysicalSurfaceSoundsMap;//[Offset: 0xde0, Size: 80]
	<byte,SoundBase*> ReloadSoundsMap;//[Offset: 0xe30, Size: 80]
	<byte,SoundBase*> PrimaryFireSoundMap;//[Offset: 0xe80, Size: 80]
	SoundBase* GenericImpactSound;//[Offset: 0xed0, Size: 40]
	bool bNeedsMaterial0MID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	bool bWatchKills;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 1]
	bool bCandyCaneKillReaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefa, Size: 1]

--------------------------------
Class: AttachedParticleComponentDef
	Transform Transform;//[Offset: 0x0, Size: 48]
	FName ParentSocket;//[Offset: 0x30, Size: 8]
	ParticleSystem* Template;//[Offset: 0x38, Size: 40]
	byte DetailMode;//[Offset: 0x60, Size: 1]

--------------------------------
Class: FortUICameraFrameTargetBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	float CylinderHalfHeight;//[Offset: 0xc, Size: 4]
	float CylinderRadius;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AthenaHatItemDefinition.AthenaCharacterPartItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AthenaLoadingScreenItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	Texture2D* BackgroundImage;//[Offset: 0x6d0, Size: 40]
	Object* BackgroundMaterialOrTexture;//[Offset: 0x6f8, Size: 40]
	class UserWidget* BackgroundWidget;//[Offset: 0x720, Size: 40]
	Vector2D BackgroundDesiredSize;//[Offset: 0x748, Size: 8]
	LinearColor BackgroundColor;//[Offset: 0x750, Size: 16]

--------------------------------
Class: AthenaBattleBusItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	SoundBase* IgnitionSound;//[Offset: 0x6d0, Size: 40]
	SoundBase* LobbyLoopingMusic;//[Offset: 0x6f8, Size: 40]
	SoundBase* LobbyLoopingSound;//[Offset: 0x720, Size: 40]
	SoundBase* FlightLoopingMusic;//[Offset: 0x748, Size: 40]
	SoundBase* FlightLoopingSound;//[Offset: 0x770, Size: 40]
	class BattleBusCosmeticInstanceBase* BusPrefabClass;//[Offset: 0x798, Size: 40]
	SoundBase* GetLobbyLoopingSound();// 0xce2e0c0
	SoundBase* GetLobbyLoopingMusic();// 0xce2e08c
	SoundBase* GetIgnitionSound();// 0xce2e058
	SoundBase* GetFlightLoopingSound();// 0xce2e024
	SoundBase* GetFlightLoopingMusic();// 0xce2dff0
	class BattleBusCosmeticInstanceBase GetBusPrefabClass();// 0xce2df14

--------------------------------
Class: BattleBusCosmeticInstanceBase.Actor.Object
	AthenaBattleBusItemDefinition* ActiveSkin;//[Offset: 0x228, Size: 8]

--------------------------------
Class: AthenaVehicleCosmeticItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum DecoType;//[Offset: 0x6d0, Size: 1]
	Transform DecoSocketTransform;//[Offset: 0x6e0, Size: 48]
	StaticMesh* TestDecoMesh;//[Offset: 0x710, Size: 40]
	FName DecoSocketName;//[Offset: 0x738, Size: 8]

--------------------------------
Class: AthenaCallingCardItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AthenaMapMarkerItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class FortMapMarkerTopperActor* TopperActorClass;//[Offset: 0x6d0, Size: 40]

--------------------------------
Class: FortMapMarkerTopperActor.Actor.Object
	void SetLiveMapMarker(const AthenaMapMarkerItemDefinition* Marker);// 0xbbc0600
	void PreviewMapMarker(const AthenaMapMarkerItemDefinition* Marker);// 0xbbc0600
	void OnMarkerMoved();// 0xbbc0600

--------------------------------
Class: AthenaDanceItemDefinition.FortMontageItemDefinitionBase.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bUsesSecondaryFireInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e8, Size: 1]
	bool bMovingEmote;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e8, Size: 1]
	bool bMovingEmoteSkipLandingFX;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e8, Size: 1]
	bool bMoveForwardOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e8, Size: 1]
	bool bMoveFollowingOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e8, Size: 1]
	bool bGroupEmote;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e8, Size: 1]
	bool bUseHighPreviewCamera;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e8, Size: 1]
	bool bGroupAnimationSync;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e8, Size: 1]
	float WalkForwardSpeed;//[Offset: 0x7ec, Size: 4]
	float GroupSyncAnimOffset;//[Offset: 0x7f0, Size: 4]
	AthenaDanceItemDefinition* GroupEmoteToStartLeader;//[Offset: 0x7f8, Size: 8]
	AthenaDanceItemDefinition* GroupEmoteToStartFollower;//[Offset: 0x800, Size: 8]
	AthenaDanceItemDefinition* GroupEmoteToStartLeaderIfBothOwn;//[Offset: 0x808, Size: 8]
	AthenaDanceItemDefinition* GroupEmoteToStartFollowerIfBothOwn;//[Offset: 0x810, Size: 8]
	VariantSwapMontageData[] MotageSelectionGroups;//[Offset: 0x818, Size: 16]
	Vector GroupEmotePositionOffset;//[Offset: 0x828, Size: 12]
	float GroupEmotePositionOffsetTolerance;//[Offset: 0x834, Size: 4]
	float GroupEmoteFollowDistance;//[Offset: 0x838, Size: 4]
	bool bLockGroupEmoteLeaderRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 1]
	float GroupEmoteLeaderRotationYawOffset;//[Offset: 0x840, Size: 4]
	float GroupEmoteFollowerRotationYawOffset;//[Offset: 0x844, Size: 4]
	AnimMontage* FrontEndAnimation;//[Offset: 0x848, Size: 40]
	AnimMontage* FrontEndAnimationFemaleOverride;//[Offset: 0x870, Size: 40]
	class FortGameplayAbility* CustomDanceAbility;//[Offset: 0x898, Size: 40]
	FText ChatTriggerCommandName;//[Offset: 0x8c0, Size: 24]
	FText GetChatTriggerCommandName();// 0xce33ed8

--------------------------------
Class: FortMontageItemDefinitionBase.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	AnimMontage* Animation;//[Offset: 0x6d0, Size: 40]
	AnimMontage* AnimationFemaleOverride;//[Offset: 0x6f8, Size: 40]
	FortEmoteMapping[] AnimationOverrides;//[Offset: 0x720, Size: 16]
	int PreviewLoops;//[Offset: 0x730, Size: 4]
	float PreviewLength;//[Offset: 0x734, Size: 4]
	bool bIncludeAudioWithAnimDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	float EmoteCooldownSecs;//[Offset: 0x73c, Size: 4]
	bool bMontageContainsFacialAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool bPlayRandomSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 1]
	SectionNameAndWeight[] PlayRandomSectionByName;//[Offset: 0x748, Size: 16]
	bool bSwitchToHarvestingToolOnUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	bool bHolsterWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 1]
	bool bHolsterWeaponIfDualWieldPickaxe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a, Size: 1]
	MontageItemAccessData[] AccessData;//[Offset: 0x760, Size: 16]
	MontageVisibilityData[] VisibilityData;//[Offset: 0x770, Size: 16]
	GameplayTagContainer EmoteWheelExclusiveTags;//[Offset: 0x780, Size: 32]
	AthenaCosmeticItemDefinition* RequiredEmoteParent;//[Offset: 0x7a0, Size: 40]
	GameplayTagContainer TagsWhichIndicateEmoteParent;//[Offset: 0x7c8, Size: 32]
	bool ShouldPlayRandomSectionByName();// 0xd0e4f08
	bool ShouldHolsterWeapon(FortPawn* FortPawn);// 0xd0e4e54
	void PreviewInPIE();// 0xd0e4e40
	FName PickRandomSectionByName(float RandomNumber);// 0xd0e4d90
	FName PickMontageSection(const AnimMontage* Montage, FortPawn* FortPawn);// 0xd0e4ca4
	FName PickCosmeticDrivenSectionByName(FortPawn* PawnPlayingMotage);// 0xd0e4bec
	bool IsMontageItemEmoteWheelExclusive(const FortPlayerController* FortPC);// 0xd0e4b38
	bool HasCosmeticDrivenMotageSection();// 0xd0e4af8
	AnimMontage* GetFrontendPreviewAnimationHardReference(byte BodyType, byte Gender, FortPlayerPawn* PawnContext);// 0xd0e49c8
	AnimMontage* GetFrontendPreviewAnimation(byte BodyType, FortPlayerPawn* PreviewPawn, byte Gender);// 0xd0e4818
	AnimMontage* GetAnimationHardReference(byte BodyType, byte Gender, FortPlayerPawn* PawnContext);// 0xd0e46e8
	AnimMontage* GetAnimation(byte BodyType, byte Gender, FortPlayerPawn* PawnContext);// 0xd0e4540
	bool CanShowMontageItem(const FortPlayerController* FortPC);// 0xd0e448c
	bool CanActivateMontageItem(const FortPlayerController* FortPC, out GameplayTagContainer OutFailureTags);// 0xd0e4370
	bool CanAccessMontageItem(const FortPlayerController* FortPC);// 0xd0e42bc

--------------------------------
Class: VariantSwapMontageData
	GameplayTag VariantMetaTagRequired;//[Offset: 0x0, Size: 8]
	FName MontageSectionName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortEmoteMapping
	byte BodyType;//[Offset: 0x0, Size: 1]
	byte Gender;//[Offset: 0x1, Size: 1]
	AnimMontage* EmoteMontage;//[Offset: 0x8, Size: 40]

--------------------------------
Class: SectionNameAndWeight
	FName SectionName;//[Offset: 0x0, Size: 8]
	float SectionWeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MontageItemAccessData
	GameplayTag AccessTag;//[Offset: 0x0, Size: 8]
	FortItemAccessTokenType* AccessToken;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortItemAccessTokenType.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum ProfileType;//[Offset: 0x3c0, Size: 1]
	FortItemDefinition* access_item;//[Offset: 0x3c8, Size: 8]
	FText UnlockDescription;//[Offset: 0x3d0, Size: 24]
	FText GetUnlockDescription();// 0xd04a91c
	FortItemDefinition* GetAccessItem();// 0xd04a8e8

--------------------------------
Class: MontageVisibilityData
	enum Rule;//[Offset: 0x0, Size: 1]
	FortItemDefinition* Item;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AthenaVictoryPoseItemDefinition.FortMontageItemDefinitionBase.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: AthenaMusicPackItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	SoundBase* FrontEndLobbyMusic;//[Offset: 0x6d0, Size: 40]
	Texture2D* CoverArtImage;//[Offset: 0x6f8, Size: 40]
	bool bIsDefaultMusicPack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	float MusicPreviewStartTime;//[Offset: 0x724, Size: 4]
	Texture2D* GetCoverArt();// 0xce37598

--------------------------------
Class: AthenaCharmItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class CustomCosmeticCharmModifier* CharmModifierBlueprint;//[Offset: 0x6d0, Size: 40]
	class FortPlayerCharm* CharmPrefabClass;//[Offset: 0x6f8, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x720, Size: 40]
	class AnimInstance* AnimClass;//[Offset: 0x748, Size: 40]
	class AnimInstance* WeaponAnimClass;//[Offset: 0x770, Size: 40]
	CharmSoundAssetEntry[] CharmSounds;//[Offset: 0x798, Size: 16]
	class AnimInstance GetOverrideWeaponAnimSetPtr();// 0xce32754
	SkeletalMesh* GetOverrideSkelMeshPtr();// 0xce32618
	class AnimInstance GetOverrideAnimSetPtrForCharmSlot(const int CharmSlotIn);// 0xce324f0
	class AnimInstance GetOverrideAnimSetPtr();// 0xce323b4
	class FortPlayerCharm GetCharmPrefabClass();// 0xce32380

--------------------------------
Class: CustomCosmeticCharmModifier.CustomCosmeticModifierBase.Actor.Object
	byte CharmType;//[Offset: 0x358, Size: 1]
	FortPlayerCharm* MyCharmOwner;//[Offset: 0x360, Size: 8]
	void OnPawnAndCharmChanged();// 0xbbc0600
	void OnCharmVisibilityChanged(bool bVisible);// 0xbbc0600
	MeshComponent* GetSkeletalMeshForAssociatedPlayerPawnCharmType();// 0xce8ced4
	FortPlayerCharm* GetCharmOwner();// 0xce8ceb8
	byte GetCharacterCharmType();// 0xce8ce7c
	void ForceResetParticleSystems();// 0xce8ce68

--------------------------------
Class: FortPlayerCharm.Actor.Object
	AthenaCharmItemDefinition* CharmItemDef;//[Offset: 0x220, Size: 8]
	SkeletalMeshComponentBudgeted* CharmMesh;//[Offset: 0x228, Size: 8]
	bool bIsFrontEndPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	SceneComponent* CharmAttachedTo;//[Offset: 0x238, Size: 8]
	FName CharmAttachedToSocket;//[Offset: 0x240, Size: 8]
	CustomCosmeticCharmModifier* CharmModifier;//[Offset: 0x248, Size: 8]
	void PreDestruction();// 0xbbc0600
	void OnCharmVisibilityChanged(bool bVisible);// 0xbbc0600
	SoundBase* GetCharmSoundAssetByIndex(const int IndexIn, out bool bValidOut);// 0xd12aaec
	SoundBase* GetCharmSoundAssetByDescName(const FName DescNameIn, out bool bValidOut);// 0xd12a9f0
	SkeletalMeshComponentBudgeted* GetCharmMeshComponent();// 0xd12a9d4
	FName GetCharmAttachedToSocket();// 0xd12a9b8
	SceneComponent* GetCharmAttachedToComponent();// 0xd12a99c

--------------------------------
Class: CharmSoundAssetEntry
	SoundBase* Sound;//[Offset: 0x0, Size: 40]
	FName Desc;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortAttributeInitializationKey
	FName AttributeInitCategory;//[Offset: 0x0, Size: 8]
	FName AttributeInitSubCategory;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CustomPlayerComponent.Object

--------------------------------
Class: CustomColorSwatch.PrimaryDataAsset.DataAsset.Object
	byte GenderPermitted;//[Offset: 0x30, Size: 1]
	byte ColorSwatchType;//[Offset: 0x31, Size: 1]

--------------------------------
Class: FortAppliedSwapItemAndVariantData
	GUID SwapId;//[Offset: 0x0, Size: 16]
	enum SwapState;//[Offset: 0x10, Size: 1]
	FortSwapItemAndVariantData[] SwapData;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortPawnMaterialOverride
	GUID OverrideId;//[Offset: 0x0, Size: 16]
	MaterialInterface* Material;//[Offset: 0x10, Size: 40]
	FortPawnMaterialOverrideCopiedParameters MaterialParamsToCopy;//[Offset: 0x38, Size: 48]
	float Priority;//[Offset: 0x68, Size: 4]
	bool bHideParticleSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bApplyToWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 1]

--------------------------------
Class: FortPawnMaterialOverrideCopiedParameters
	FName[] ScalarParamNames;//[Offset: 0x0, Size: 16]
	FName[] VectorParamNames;//[Offset: 0x10, Size: 16]
	FName[] TextureParamNames;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortPawnMaterialOverrideState
	SceneComponent* SceneComp;//[Offset: 0x0, Size: 8]
	MaterialInterface*[] OriginalMaterials;//[Offset: 0x8, Size: 16]
	MaterialInterface*[] AppliedMaterials;//[Offset: 0x18, Size: 16]
	FXSystemComponent*[] FXComps;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	FName ChildComponentTag;//[Offset: 0x360, Size: 8]
	FXSystemComponent* IdleVFX;//[Offset: 0x368, Size: 8]
	byte PartType;//[Offset: 0x370, Size: 1]
	MarshalledVFXRuntimeData[] RuntimeParticleData;//[Offset: 0x378, Size: 16]
	void SetChildParticleComponentsVisible(bool bVisible);// 0xb602a54
	void SetChildMeshComponentsHidden(bool bHideChildComponents);// 0xb6029a4
	void SetCharacterActiveVariant(out const GameplayTag ChannelTag, out const GameplayTag VariantTag);// 0xce8c8cc
	void OnPawnAndPartChanged();// 0xbbc0600
	MeshComponent* GetSkeletalMeshForAssociatedPlayerPawnPartType();// 0xb602970
	FXSystemComponent* GetIdleVFXComponent();// 0xce8c898
	FName GetIdleFXSocketName();// 0xce8c864
	byte GetCharacterPartType();// 0xb602934
	void ForceResetParticleSystems();// 0xce8c850

--------------------------------
Class: FortCharacterPartsRepMontageInfo
	FortCharacterPartMontageInfo[] CharPartMontages;//[Offset: 0x0, Size: 16]
	AnimMontage* PawnMontage;//[Offset: 0x10, Size: 8]
	bool bPlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: FortCharacterPartMontageInfo
	byte CharacterPart;//[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortClientObservedStatArray.FastArraySerializer
	StatManager* MyStatManager;//[Offset: 0x108, Size: 8]
	FortClientObservedStat[] ObservedStats;//[Offset: 0x110, Size: 16]

--------------------------------
Class: StatManager.BaseStatManager.Object

--------------------------------
Class: BaseStatManager.Object
	Stat*[] Stats;//[Offset: 0x28, Size: 16]
	FString StatPrefix;//[Offset: 0x38, Size: 16]
	Controller* Controller;//[Offset: 0x48, Size: 8]

--------------------------------
Class: Stat.Object
	FName StatName;//[Offset: 0x28, Size: 8]
	enum HighestPeriodToTrack;//[Offset: 0x30, Size: 1]
	int AbsoluteMaxValue;//[Offset: 0x34, Size: 4]

--------------------------------
Class: FortClientObservedStat.FastArraySerializerItem
	FName StatName;//[Offset: 0xc, Size: 8]
	int StatValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortFootstepAudioBank.DataAsset.Object
	byte PhysicalSurfaceMappings;//[Offset: 0x30, Size: 1]
	float TeammateVolumeMultiplier;//[Offset: 0x4c, Size: 4]
	float MaxFootstepDistance;//[Offset: 0x50, Size: 4]
	float VerticalPitchMaxBelow;//[Offset: 0x54, Size: 4]
	float VerticalPitchMaxAbove;//[Offset: 0x58, Size: 4]
	float VerticalPitchTileRange;//[Offset: 0x5c, Size: 4]
	FortFootstepSurfaceAudioData SurfaceData1P;//[Offset: 0x60, Size: 168]
	FortFootstepSurfaceAudioData SurfaceData3P;//[Offset: 0x798, Size: 168]
	FortFootstepAttenuationData AttenuationData1P;//[Offset: 0xed0, Size: 40]
	FortFootstepAttenuationData AttenuationData3P;//[Offset: 0xfe8, Size: 40]
	int VersionNumber;//[Offset: 0x1100, Size: 4]
	void GetSurfaceInfo(out FortFootstepSurfaceInfo OutInfo, byte InSurfaceType, bool bUse1PFootsteps);// 0xcfdcf30
	SoundBase* GetSoundAsset(bool bIsLocal, byte StepType, byte SurfaceType, byte StepPosition);// 0xcfdcdb0
	float GetFootstepVolumeMultiplier(bool bIsLocal, bool bApplyTeammateVolume, byte StepType);// 0xcfdcc68
	SoundAttenuation* GetAttenuationAsset(bool bIsLocal, byte StepType, byte StepPosition);// 0xcfdcb28

--------------------------------
Class: FortFootstepSurfaceInfo

--------------------------------
Class: FortFootstepSurfaceAudioData
	SoundBase* SoundAssets;//[Offset: 0x0, Size: 8]
	SoundBase* SoundAssetsAbove;//[Offset: 0x38, Size: 8]
	SoundBase* SoundAssetsBelow;//[Offset: 0x70, Size: 8]

--------------------------------
Class: FortFootstepAttenuationData
	SoundAttenuation* SoundAttenuation;//[Offset: 0x0, Size: 8]
	SoundAttenuation* SoundAttenuationAbove;//[Offset: 0x8, Size: 8]
	SoundAttenuation* SoundAttenuationBelow;//[Offset: 0x10, Size: 8]
	SoundAttenuation* SoundAttenuationAboveOrBelowAndVisible;//[Offset: 0x18, Size: 8]
	float VolumeMultiplier;//[Offset: 0x20, Size: 4]

--------------------------------
Class: IgnoreCollisionActor
	Actor* IgnoreActor;//[Offset: 0x0, Size: 8]
	float TimeIgnoreStarted;//[Offset: 0x8, Size: 4]
	float IgnoreDuration;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortDBNOCarryHoisterData
	FortPlayerPawn* DBNOHoister;//[Offset: 0x0, Size: 8]
	enum DBNOCarryEvent;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FortCustomizationAssetLoader.Object
	FortCustomizationAssetsToLoad CurrentAssetsToLoad;//[Offset: 0x28, Size: 64]
	FortCustomizationAssetsToLoad PendingAssetsToLoad;//[Offset: 0x68, Size: 64]
	FortItemDefinition*[] CurrentContentOnDemandItemDefs;//[Offset: 0xa8, Size: 16]
	Object*[] AllLoadedAssets;//[Offset: 0xd0, Size: 16]
	FortPlayerPawn* PawnForOnDemandContentRelevance;//[Offset: 0xe0, Size: 8]

--------------------------------
Class: FortCustomizationAssetsToLoad
	FortHeroType*[] HeroTypes;//[Offset: 0x0, Size: 16]
	CustomCharacterPart*[] CharacterParts;//[Offset: 0x10, Size: 16]
	FortItemDefinition*[] ItemDefs;//[Offset: 0x20, Size: 16]
	SoftObjectPath[] VariantAssets;//[Offset: 0x30, Size: 16]

--------------------------------
Class: PreviouslyAppliedVariantData
	AthenaCharacterItemDefinition* Character;//[Offset: 0x8, Size: 8]
	AthenaSkyDiveContrailItemDefinition* Contrail;//[Offset: 0x10, Size: 8]
	AthenaPickaxeItemDefinition* Pickaxe;//[Offset: 0x18, Size: 8]
	AthenaBackpackItemDefinition* Backpack;//[Offset: 0x20, Size: 8]
	McpVariantChannelInfo[] Variants;//[Offset: 0x78, Size: 16]

--------------------------------
Class: FortAnimNotifyState_RootMotionInterrupt.AnimNotifyState.Object
	byte MontageInterrupt;//[Offset: 0x29, Size: 1]
	bool bAllowMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]

--------------------------------
Class: FortVisibilityComponent.ActorComponent.Object
	bool bRegisterWithVisibilityManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bObserver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bDistanceCheck2D;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bCheckFacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bCheckLOS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bRevealWithMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	enum VisibilityBehavior;//[Offset: 0xb1, Size: 1]
	MulticastInlineDelegateProperty OnVisibilityChangedEvent;//[Size: 16]
	float Radius;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 1360]
	float Priority;//[Offset: 0x750, Size: 4]
	float BlendRadius;//[Offset: 0x754, Size: 4]
	float BlendWeight;//[Offset: 0x758, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75c, Size: 1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0xd8c6dec

--------------------------------
Class: RepFortMeshAttachment
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 8]
	class AnimInstance* AnimBP;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortPawnScriptedBehavior.Object
	ScriptedAction[] ActionTemplates;//[Offset: 0x48, Size: 16]
	ScriptedBehavior[] ScriptedBehaviors;//[Offset: 0x58, Size: 16]
	ScriptedBehavior CurrentBehavior;//[Offset: 0x68, Size: 32]
	ScriptedAction CurrentCommand;//[Offset: 0x88, Size: 112]
	MulticastInlineDelegateProperty ScriptComplete;//[Size: 16]
	void PlaceStructure();// 0xd11299c

--------------------------------
Class: ScriptedAction
	FString Template;//[Offset: 0x0, Size: 16]
	FString[] Params;//[Offset: 0x10, Size: 16]
	<FString,FString> ParamMap;//[Offset: 0x20, Size: 80]

--------------------------------
Class: ScriptedBehavior
	FString ScriptName;//[Offset: 0x0, Size: 16]
	ScriptedAction[] Actions;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VortexParams
	float GravityFloorAltitude;//[Offset: 0x0, Size: 4]
	float GravityFloorWidth;//[Offset: 0x4, Size: 4]
	float GravityFloorGravityScalar;//[Offset: 0x8, Size: 4]
	float GravityFloorTerminalVelocity;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortUnderwaterDamageComponent.ActorComponent.Object
	class GameplayEffect* GE_UnderwaterDamage;//[Offset: 0xb0, Size: 8]
	ScalableFloat DamageDelay;//[Offset: 0xb8, Size: 40]
	ScalableFloat LevelDuration;//[Offset: 0xe0, Size: 40]
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float UnderWaterStartTime;//[Offset: 0x10c, Size: 4]
	int CurrentLevel;//[Offset: 0x110, Size: 4]
	bool bResetFromDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	ActiveGameplayEffectHandle GE_UnderWaterDamage_Handle;//[Offset: 0x118, Size: 8]
	AbilitySystemComponent* OwnerAbilityComp;//[Offset: 0x120, Size: 8]
	void SetUnderWater(bool bNewUnderWater);// 0xd1fe968

--------------------------------
Class: SlipperySlopeParams
	ScalableFloat SlopeForceAcceleration;//[Offset: 0x0, Size: 40]
	ScalableFloat MaxLateralSpeed;//[Offset: 0x28, Size: 40]
	ScalableFloat MaxLateralSpeedMultiplierInWater;//[Offset: 0x50, Size: 40]
	ScalableFloat BrakingDecelerationInWater;//[Offset: 0x78, Size: 40]
	ScalableFloat MaxVerticalLaunchSpeed;//[Offset: 0xa0, Size: 40]
	ScalableFloat SlopeLandingForceScalar;//[Offset: 0xc8, Size: 40]
	ScalableFloat SlopeLandingMaxHorizontalForce;//[Offset: 0xf0, Size: 40]
	ScalableFloat SlopeLaunchMinRequiredSpeed;//[Offset: 0x118, Size: 40]
	ScalableFloat SlopeLaunchMinRequiredAngleChange;//[Offset: 0x140, Size: 40]
	ScalableFloat SlopeLaunchVerticalVelocityBoost;//[Offset: 0x168, Size: 40]
	ScalableFloat SlopeLaunchVerticalVelocityBoostMultiplierJumping;//[Offset: 0x190, Size: 40]

--------------------------------
Class: FortPlayerPetRepState.Actor.Object
	Actor* LookAtTarget;//[Offset: 0x228, Size: 8]
	AthenaPetItemDefinition* PetItemDef;//[Offset: 0x230, Size: 8]
	PetStimuliRepData StimuliTag;//[Offset: 0x238, Size: 12]
	void OnRep_StimuliTag();// 0xd18a604
	void OnRep_PetItemDef();// 0xd18a5f0
	void OnRep_LookAtTarget();// 0xd18a5dc
	FortPlayerPawn* GetFortPlayerPawn();// 0xd18a5a8

--------------------------------
Class: PetStimuliRepData
	GameplayTag Stimuli;//[Offset: 0x0, Size: 8]
	float GameTimeEnd;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortRemoteControlledPawnAthena.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	bool bCurrentlyDelayingLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cf8, Size: 1]
	float ServerFuseStartTime;//[Offset: 0x3cfc, Size: 4]
	byte RCTeam;//[Offset: 0x3d00, Size: 1]
	FortPlayerPawnAthena* ControllingPlayerPawn;//[Offset: 0x3d04, Size: 8]
	FortPlayerPawnAthena* SpectateReturnPlayerPawn;//[Offset: 0x3d0c, Size: 8]
	FortAbilitySystemComponent* OverrideAbilitySystemComponent;//[Offset: 0x3d18, Size: 8]
	float TriggeredHealthThreshold;//[Offset: 0x3d20, Size: 4]
	FortGameplayEffectContainerSpec[] EffectContainerSpecToApplyOnKills;//[Offset: 0x3d28, Size: 16]
	FortRemoteControlPawnSet* RemoteControlPawnSet;//[Offset: 0x3d38, Size: 8]
	bool bTriggeredForDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d40, Size: 1]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x3d44, Size: 16]
	class FortCameraMode* RemoteControlledPawnDefaultCameraClass;//[Offset: 0x3d58, Size: 8]
	class FortCameraMode* RemoteControlledPawnTriggeredCameraClass;//[Offset: 0x3d60, Size: 8]
	class GameplayEffect* ControllingPlayerEffect;//[Offset: 0x3d68, Size: 8]
	ActiveGameplayEffectHandle ControllingPlayerEffectHandle;//[Offset: 0x3d70, Size: 8]
	bool bIsKeyboardTurnPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d78, Size: 1]
	bool bIsKeyboardLookPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d79, Size: 1]
	void TriggerDestroyRemoteControlPawn();// 0xd1bc20c
	void SetupRemoteControlPawn(FortPlayerControllerAthena* InFortPC, FortPlayerPawnAthena* InControllingPawn, byte CustomMovementType, out const FortGameplayEffectContainerSpec[] EffectContainerSpecOnKill);// 0xd1bc064
	void OnTriggeredHealthThreshold(float PreviousTriggeredHealthThreshold, float CurrentTriggeredHealthThreshold);// 0xd1bbf78
	void OnRep_TriggeredHealthThreshold(float PreviousTriggeredHealthThreshold);// 0xd1bbed0
	void OnRep_TriggeredForDestroy();// 0xd1bbebc
	void OnRep_OverrideAbilitySystemComponent();// 0xd1bbea8
	void OnRep_ControllingPlayerPawn();// 0xd1bbe94
	void OnDoKill();// 0xd1bbe78
	void OnClientSetupRemoteControlPawn();// 0xd1bbe5c
	void OnCapsuleTouch(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xd1bbc90
	bool IsCurrentlyDelayingLaunch();// 0xd1bbc70
	void HandleControllingPlayerOutOfHealth();// 0xd1bbc5c
	float GetOutOfHealthExplodeDelay();// 0xd1bbc28
	float GetLaunchDelay();// 0xd1bbbf4
	float GetFuseLength();// 0xd1bbbc0
	void BeginCapsuleOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xd1bb9ac

--------------------------------
Class: FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	MulticastInlineDelegateProperty OnInteractionFailedCallback;//[Size: 16]
	Actor* ItemInteractionActor;//[Offset: 0x31b8, Size: 8]
	float CurrentPawnSquaredSpeed;//[Offset: 0x31d0, Size: 4]
	float CurrentPawnSquaredSpeedXY;//[Offset: 0x31d4, Size: 4]
	Rotator CurrentPawnVelXYRot;//[Offset: 0x31d8, Size: 12]
	Vector PreviousVelocityXY;//[Offset: 0x31e4, Size: 12]
	SoundBase* OnReviveSound;//[Offset: 0x31f0, Size: 8]
	float ReviveFromDBNOTime;//[Offset: 0x31f8, Size: 4]
	float DBNOStartTime;//[Offset: 0x31fc, Size: 4]
	float DBNOInvulnerableTime;//[Offset: 0x3200, Size: 4]
	float ConvertFromDBNOTime;//[Offset: 0x3204, Size: 4]
	byte DBNORevivalStacking;//[Offset: 0x3208, Size: 1]
	float ServerWorldTimeRevivalTime;//[Offset: 0x320c, Size: 4]
	bool bWasCrouchedBeforeDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3218, Size: 1]
	FName ItemSpecialActorID;//[Offset: 0x321c, Size: 8]
	GameplayTag ItemSpecialActorCategoryTag;//[Offset: 0x3224, Size: 8]
	float BecameSpecialActorTime;//[Offset: 0x3230, Size: 4]
	MulticastInlineDelegateProperty OnUIGameplayCue;//[Size: 16]
	bool bPlaytestWithNoMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3248, Size: 1]
	float CapsuleRadiusAthena;//[Offset: 0x3250, Size: 4]
	float CapsuleHalfHeightAthena;//[Offset: 0x3254, Size: 4]
	float MeshHeightAdjustAthena;//[Offset: 0x3258, Size: 4]
	bool bShouldPawnInstantDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325c, Size: 1]
	bool bShouldPawnDBNODisplayOnKillFeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325d, Size: 1]
	bool bShouldPawnDeathDisplayOnKillFeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325e, Size: 1]
	bool bShouldPawnLeaveEliminationIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325f, Size: 1]
	bool bShouldPawnAwardPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3260, Size: 1]
	bool bShouldTriggerDeathAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3261, Size: 1]
	bool bShouldDropItemsOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3262, Size: 1]
	bool bShouldSkipMovementFullSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3263, Size: 1]
	bool bEnableRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3264, Size: 1]
	bool bEnableGroundInteractionEffects;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3264, Size: 1]
	FortPlayerAthenaAttributeReplicationProxy AttributeReplicationProxy;//[Offset: 0x3268, Size: 24]
	GameplayAbilityRepAnimMontage ReplayRepAnimMontageInfo;//[Offset: 0x3280, Size: 48]
	MinimalGameplayCueReplicationProxy SimulatedProxyActiveGameplayCues;//[Offset: 0x32b0, Size: 656]
	MinimalGameplayCueReplicationProxy SimulatedProxyMinimalReplicationGameplayCues;//[Offset: 0x3540, Size: 656]
	MinimalReplicationTagCountMap FastReplicationMinimalReplicationTags;//[Offset: 0x37d0, Size: 96]
	Texture2D* CurrentQuickChatIcon;//[Offset: 0x3838, Size: 8]
	bool bADSWhileNotOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d1, Size: 1]
	SoundBase* DefaultCrouchedFootstepSound;//[Offset: 0x38d8, Size: 8]
	SoundBase* DefaultCrouchSprintFootstepSound;//[Offset: 0x38e0, Size: 8]
	MulticastInlineDelegateProperty OnFortPlayerDied;//[Size: 16]
	Pawn* KillerForSpectatorRotation;//[Offset: 0x38f8, Size: 8]
	bool bDelaySimProxyCollisionInAircraftPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3901, Size: 1]
	float TimeToDelaySkydiveCollision;//[Offset: 0x3904, Size: 4]
	float PositionCaptureIntervalForDistanceTraveledAccumulation;//[Offset: 0x3908, Size: 4]
	float SkydiveAudioMovementVolumeInterpSpeed;//[Offset: 0x3920, Size: 4]
	float SkydiveAudioForwardDotInterpSpeed;//[Offset: 0x3930, Size: 4]
	float SkydiveAudioRightDotInterpSpeed;//[Offset: 0x3934, Size: 4]
	FortEffectDistanceQuality DamageFXSignificance;//[Offset: 0x393c, Size: 24]
	class FortEmitterCameraLensEffectDirectional* ScreenEffectHealthDamage;//[Offset: 0x3960, Size: 8]
	class FortEmitterCameraLensEffectDirectional* ScreenEffectShieldDamage;//[Offset: 0x3968, Size: 8]
	AnimMontage* AdditiveHitReactsMontage;//[Offset: 0x3970, Size: 8]
	GameplayTagContainer DamageTagsToNotDisplayDirectionDamage;//[Offset: 0x3978, Size: 32]
	GameplayTagContainer DamageTagsToNotAddCameraShake;//[Offset: 0x3998, Size: 32]
	GameplayTagContainer WeaponTagsToNotPlayCircleAndStreakFX;//[Offset: 0x39b8, Size: 32]
	bool bIsPlayerPawnReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f8, Size: 1]
	Vector LastFiredLocation;//[Offset: 0x39fc, Size: 12]
	Vector LastFiredDirection;//[Offset: 0x3a08, Size: 12]
	float LastFiredTime;//[Offset: 0x3a14, Size: 4]
	DataTable* PrototypeShootingModel;//[Offset: 0x3a28, Size: 8]
	Controller* FallInstigator;//[Offset: 0x3a30, Size: 8]
	GameplayTagContainer FallDamageTags;//[Offset: 0x3a38, Size: 32]
	BuildingSMActor* LastFloorBeforeFalling;//[Offset: 0x3a58, Size: 8]
	float LastFallDistance;//[Offset: 0x3a60, Size: 4]
	float SkydiveDebugTimer;//[Offset: 0x3a64, Size: 4]
	float MeleeCombatSlowSpeedMultiplier;//[Offset: 0x3a68, Size: 4]
	float MeleeCombatSlowDuration;//[Offset: 0x3a6c, Size: 4]
	AthenaPawnReplayData EncryptedPawnReplayData;//[Offset: 0x3a70, Size: 48]
	AudioComponent* InAirAudioComp;//[Offset: 0x3aa0, Size: 8]
	ParticleSystemComponent* PSC_PlayerWalkLand;//[Offset: 0x3aa8, Size: 8]
	ParticleSystemComponent* PSC_PlayerRunLand;//[Offset: 0x3ab0, Size: 8]
	ParticleSystemComponent* PSC_PlayerSlideLand;//[Offset: 0x3ab8, Size: 8]
	ParticleSystemComponent* PSC_HitDamage;//[Offset: 0x3ac0, Size: 8]
	AudioComponent* SlidingAudioComp;//[Offset: 0x3ac8, Size: 8]
	FortMobileInteractionComponent*[] MobileInteractionComponents;//[Offset: 0x3ad0, Size: 16]
	LinearColor MinimapIconColorFiftyFiftyPlayer;//[Offset: 0x3ae0, Size: 16]
	float MaxIndicatorVisibilityDistForReplays;//[Offset: 0x3af0, Size: 4]
	AudioComponent* ConsumableUseAudio;//[Offset: 0x3af8, Size: 8]
	float InAirAudioParameterValue;//[Offset: 0x3b00, Size: 4]
	float InAirAudioFallDistanceThreshold;//[Offset: 0x3b04, Size: 4]
	bool bFXPlayDustOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b09, Size: 1]
	float WalkDustActivateSpeed;//[Offset: 0x3b0c, Size: 4]
	float WalkDustResetSpeed;//[Offset: 0x3b14, Size: 4]
	float RunParticleActivateSpeed;//[Offset: 0x3b1c, Size: 4]
	SoundBase* SlidingIntensitySound3P;//[Offset: 0x3b30, Size: 8]
	SoundBase* SlidingIntensitySound1P;//[Offset: 0x3b38, Size: 8]
	float SlideAudioIntensity;//[Offset: 0x3b40, Size: 4]
	float LastHealthPostProcessWeight;//[Offset: 0x3b44, Size: 4]
	float HealthPostProcessStartTime;//[Offset: 0x3b48, Size: 4]
	float HealthPostProcessMuteTime;//[Offset: 0x3b4c, Size: 4]
	bool bIsCreativeGhostModeActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3baf, Size: 1]
	bool bIsCreativeModeratorModeActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb0, Size: 1]
	FortSkinWeightOverrideManager* SkinWeightManager;//[Offset: 0x3bd0, Size: 8]
	GameplayTagContainer InvulnerabilityTags;//[Offset: 0x3c10, Size: 32]
	UnicornAthenaPawnSampler* UnicornPawnSampler;//[Offset: 0x3c30, Size: 8]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0x3c38, Size: 104]
	ForceFeedbackEffect* DamageForceFeedback;//[Offset: 0x3ca0, Size: 8]
	class MatineeCameraShake* DamageCameraShakeClass;//[Offset: 0x3ca8, Size: 8]
	GameplayTagContainer DamageTagsExcludedFromCameraShake;//[Offset: 0x3cb0, Size: 32]
	FortPawnComponent_Convert* ConvertComponent;//[Offset: 0x3cd0, Size: 8]
	FortActorComponent_Affiliation* AffiliationComponent;//[Offset: 0x3cd8, Size: 8]
	void TurnOnCollisionAfterSkydiveDelay();// 0xd187a6c
	void TeleportToSkyDive(float HeightAboveGround);// 0xd1879c4
	void StopConsumableUseAudio();// 0xd1879b0
	void StartConsumableUseAudio(SoundBase* Sound);// 0xd187908
	void SetShouldSkipMovementFullSimulation(bool bInShouldSkipMovementFullSimulation);// 0xd187858
	void SetShouldDropItemsOnDeath(bool bInShouldDropItemsOnDeath);// 0xd1877a8
	void SetMeshHeightAdjustAthena(float HeightAdjust);// 0xd187700
	void SetFallInstigator(Controller* NewFallInstigator, GameplayTagContainer NewFallingDamageTags);// 0xd1875cc
	void SetDamageCameraShakeClass(class MatineeCameraShake NewValue);// 0xd187528
	bool SetCharacterBodyVisibilityForPossession(bool bVisible);// 0xd18746c
	void SetCapsuleRadiusAthena(float Radius);// 0xd1873c4
	void SetCapsuleHalfHeightAthena(float HalfHeight);// 0xd18731c
	void SetBushEnabled(bool bEnableBush);// 0xd18726c
	void ServerSuicide(bool bSuppressResurrectionChip, int MatchPlacement);// 0xd187144
	void ServerSetInteractingItem(Actor* InteractingItem, bool bClearInteraction);// 0xd18701c
	void ServerCreativeToggleInvulnerable();// 0xd186fc0
	void ServerCreativeToggleGhost(const bool bEnableOnly);// 0xd186edc
	void OnSuccessfulBuildingEdit();// 0xbbc0600
	void OnSpawnImmunityTimeReset();// 0xbbc0600
	void OnSignificantTick(float Significance);// 0xbbc0600
	void OnResInDuringWarmup();// 0xbbc0600
	void OnRep_ReplayRepAnimMontageInfo();// 0xb6aafec
	void OnRep_MeshHeightAdjustAthena();// 0xd186ec8
	void OnRep_CapsuleRadiusAthena();// 0xd186eb4
	void OnRep_CapsuleHalfHeightAthena();// 0xd186ea0
	void OnRep_bIsCreativeModeratorModeActivated();// 0xd186e8c
	void OnRep_bIsCreativeGhostModeActivated();// 0xd186e78
	void OnRep_bEnableRenderCustomDepth();// 0xb6aafd8
	void OnRep_AttributeProxy();// 0xb6aafc4
	void OnReceivedStormSurgeDamage();// 0xbbc0600
	void OnPawnLODChanged(int NewLOD);// 0xbbc0600
	void OnOutsideSafeZonePhaseChanged(int SafeZonePhase);// 0xbbc0600
	void OnLeftReplayRelevancy();// 0xbbc0600
	void OnEnteredReplayRelevancy();// 0xbbc0600
	void OnCreativeStopInvulnerable();// 0xbbc0600
	void OnCreativeStopGhost();// 0xbbc0600
	void OnCreativeStartInvulnerable();// 0xbbc0600
	void OnCreativeStartGhost();// 0xbbc0600
	void OnCreativeModeratorModeDeactivate();// 0xbbc0600
	void OnCreativeModeratorModeActivate();// 0xbbc0600
	void NetMulticast_SuccessfulBuildingEdit();// 0xb6aafa8
	void MeleeCombatBlocked();// 0xd186e64
	void MeleeCombatActivated();// 0xd186e50
	bool LocalIsTryingToEnterVehicle();// 0xd186e10
	void LandscapeCheck();// 0xd186dfc
	bool IsPlayingMinigame();// 0xd186dc4
	bool IsBackpackEquipped(enum BackpackType);// 0xd186d10
	float GetDefaultReviveFromDBNOTime();// 0xd186cdc
	float GetCurrentVoiceAmplitude();// 0xd186ca8
	AnimMontage* GetAdditiveHitReactsMontage();// 0xb6aaf6c
	void GameplayCue_PinkOatmeal_MeatPizza_PossessProp(byte EventType, GameplayCueParameters Parameters);// 0xd1869c0
	void GameplayCue_Creative_PossessProp(byte EventType, GameplayCueParameters Parameters);// 0xd1866d8
	void GamePhaseStepChanged(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xb6aae74
	void ForceReviveFromDBNO(Controller* EventInstigator);// 0xd186630
	void FastSharedReplication(const SharedRepMovement SharedRepMovement);// 0xb6aadc0
	void CreativeToggleInvulnerable();// 0xd18661c
	void CreativeToggleGhost(const bool bEnableOnly);// 0xd18656c
	bool CanPlayerCreateInCurrentVolume(out FortVolume* OutCurrentVolume);// 0xd1864ac
	void CancelMeleeCombatSlow();// 0xd186498
	void BushStateChanged(bool bNewBushState);// 0xbbc0600

--------------------------------
Class: FortPlayerAthenaAttributeReplicationProxy
	float WalkSpeed;//[Offset: 0x0, Size: 4]
	float RunSpeed;//[Offset: 0x4, Size: 4]
	float SprintSpeed;//[Offset: 0x8, Size: 4]
	float FlySpeed;//[Offset: 0xc, Size: 4]
	float CrouchedRunSpeed;//[Offset: 0x10, Size: 4]
	float CrouchedSprintSpeed;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortPlayerControllerAthena.FortPlayerControllerZone.FortPlayerControllerGameplay.FortPlayerController.PlayspacePlayerController.PlayerController.Controller.Actor.Object
	float FireAbilityToWeaponSwitchTime;//[Offset: 0x30c8, Size: 4]
	MulticastInlineDelegateProperty OnAircraftStateChange;//[Size: 16]
	MulticastInlineDelegateProperty OnItemDropSpawnedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnItemDroppedDueToOverflow;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativePermissionsChanged;//[Size: 16]
	FortWorldItemDefinition* SwappingItemDefinition;//[Offset: 0x3118, Size: 8]
	float WinScreenDelayTime;//[Offset: 0x3120, Size: 4]
	bool bSkipPlayWinEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3124, Size: 1]
	bool bAllowPlayersCreditOnLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3125, Size: 1]
	Actor* FocalPoint;//[Offset: 0x3128, Size: 8]
	Vector_NetQuantize FocalPointOffset;//[Offset: 0x3130, Size: 12]
	float FocalPointFOV;//[Offset: 0x313c, Size: 4]
	float FocalPointDuration;//[Offset: 0x3140, Size: 4]
	MulticastInlineDelegateProperty OnUsingFocalPointChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnFocalPointActorChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnSkydiveLeaderChanged;//[Size: 16]
	float SkydiveLeaderManualCameraTime;//[Offset: 0x31a4, Size: 4]
	Rotator InterpolatedSkydiveFollowerViewRotation;//[Offset: 0x31ac, Size: 12]
	FortPlayerState* SkydiveLeader;//[Offset: 0x31c8, Size: 8]
	MulticastInlineDelegateProperty OnPickupProjectileCreatedDelegate;//[Size: 16]
	FortPlayerStateAthena* LastDownedVictim;//[Offset: 0x31e8, Size: 8]
	FortPlayerStateAthena* LastElimVictim;//[Offset: 0x31f0, Size: 8]
	MulticastInlineDelegateProperty OnCameraInStormWallChangeDelegate;//[Size: 16]
	bool bLeaveDisconnectedPawnsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3228, Size: 1]
	FortPlayerPawn* DisconnectedPawn;//[Offset: 0x3230, Size: 8]
	FortPlayerPawn* PreviousPawn;//[Offset: 0x3238, Size: 8]
	bool bUseDeferredFireInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3250, Size: 1]
	bool bReplicateViewTargetInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3251, Size: 1]
	bool bHasHadValidPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3252, Size: 1]
	bool bClientNotifiedOfWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3253, Size: 1]
	bool bClientNotifiedOfTeamWin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3254, Size: 1]
	bool bClientNotifiedOfLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3255, Size: 1]
	FString[] PlayersTalking;//[Offset: 0x3278, Size: 16]
	MulticastInlineDelegateProperty TalkingPlayersChanged;//[Size: 16]
	bool bHighlightRecordingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3298, Size: 1]
	bool bPlaceDangerMarkerWhenTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3299, Size: 1]
	bool bDeferringStartRecordingHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329a, Size: 1]
	FString HighlightGroupId;//[Offset: 0x32a0, Size: 16]
	int CachedHighlightCount;//[Offset: 0x32b0, Size: 4]
	float HighlightFirstKillTime;//[Offset: 0x32b4, Size: 4]
	int HighlightKillMultiple;//[Offset: 0x32b8, Size: 4]
	int HighlightDownMultiple;//[Offset: 0x32bc, Size: 4]
	float HighlightKillCooldown;//[Offset: 0x32c0, Size: 4]
	float HighlightKillRewindTime;//[Offset: 0x32c4, Size: 4]
	float RespawnCamera_Time;//[Offset: 0x32c8, Size: 4]
	float RespawnCamera_HoldPositionTime;//[Offset: 0x32cc, Size: 4]
	Vector RespawnCamera_InitialLocOffset_InAir;//[Offset: 0x32d0, Size: 12]
	Vector RespawnCamera_InitialLocOffset_OnGround;//[Offset: 0x32dc, Size: 12]
	Rotator RespawnCamera_InitialRotOffset_InAir;//[Offset: 0x32e8, Size: 12]
	Rotator RespawnCamera_InitialRotOffset_OnGround;//[Offset: 0x32f4, Size: 12]
	float RespawnCamera_OffsetFromHit;//[Offset: 0x3300, Size: 4]
	bool bNextRespawnInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3304, Size: 1]
	FName RespawnCameraBehavior;//[Offset: 0x3308, Size: 8]
	int MaximumNumberOfPawnsToSearchForEmoteMusic;//[Offset: 0x3338, Size: 4]
	float PickupSwapHoldTime;//[Offset: 0x3348, Size: 4]
	bool bUseNewPickupSwapLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334c, Size: 1]
	float SpectatorLevelStreamDistance;//[Offset: 0x3350, Size: 4]
	float RespawnLevelStreamDistance;//[Offset: 0x3354, Size: 4]
	MulticastInlineDelegateProperty SpectatorStreamingChanged;//[Size: 16]
	MulticastInlineDelegateProperty InGameLoadScreenChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerChangedTeams;//[Size: 16]
	LevelStreamRequestHandshakeState LevelStreamRequestHandshakeState;//[Offset: 0x33a8, Size: 1]
	MulticastInlineDelegateProperty OnCreativePlotLinkedVolumeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnClientLeaveIsland;//[Size: 16]
	MulticastInlineDelegateProperty OnMakeNewCreativePlotFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnDestroyCreativePlotFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnRestoreCreativePlotFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnDuplicateCreativePlotFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnIslandEntriesChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnUpdateCreativePlotName;//[Size: 16]
	MulticastInlineDelegateProperty OnUpdateCreativeDescriptionTags;//[Size: 16]
	CameraActor* RespawnCameraActor;//[Offset: 0x3498, Size: 8]
	bool bDelayedTeleporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a0, Size: 1]
	bool bBlockTeleporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a1, Size: 1]
	int MaxPlotCount;//[Offset: 0x34a4, Size: 4]
	MulticastInlineDelegateProperty InGameMatchmakingReadyCheckStarted;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingReadyCheckComplete;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingReadyCheckCanceled;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingStarted;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingComplete;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingQueuedStatusUpdated;//[Size: 16]
	MulticastInlineDelegateProperty InGameMatchmakingError;//[Size: 16]
	MulticastInlineDelegateProperty OnInGameMatchmakingCanceled;//[Size: 16]
	MulticastInlineDelegateProperty OnInGameMatchmakingUpdateCheckFailed;//[Size: 16]
	MulticastInlineDelegateProperty OnInGameContentDownloadStarted;//[Size: 16]
	bool bNoInGameMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b8, Size: 1]
	SoundBase* AudioOnExitAircraft;//[Offset: 0x35e8, Size: 8]
	SoundBase* AudioOnExitAircraftHornDoppler;//[Offset: 0x35f0, Size: 8]
	float MinQuickChatCooldown;//[Offset: 0x35f8, Size: 4]
	float QuickChatOffCooldownTime;//[Offset: 0x35fc, Size: 4]
	bool bMarkedAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3600, Size: 1]
	CreativeIslandData[] CreativeIslands;//[Offset: 0x3608, Size: 16]
	FString LastUsedSavePlot;//[Offset: 0x3618, Size: 16]
	bool bIsAllowedToPublish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3628, Size: 1]
	FortGamepadSettings* GamepadSettingsAssetPtr;//[Offset: 0x3630, Size: 40]
	LinearColor TeamMemberIndicatorColor;//[Offset: 0x3670, Size: 16]
	bool bMatchStatsForPlayerSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a0, Size: 1]
	bool bAddedBookProgressStatsToGamemode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a1, Size: 1]
	bool bHasSentMatchEndedQuestProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a2, Size: 1]
	QuickBarData QuickBarDefinitions;//[Offset: 0x36a8, Size: 16]
	bool bEnableBroadcastRemoteClientInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e8, Size: 1]
	FortBroadcastRemoteClientInfo* BroadcastRemoteClientInfo;//[Offset: 0x36f0, Size: 8]
	FortHero* StrongMyHero;//[Offset: 0x3700, Size: 8]
	Object*[] ClientGameWorldHolds;//[Offset: 0x3708, Size: 16]
	float EndMatchHeartbeatTimerDelay;//[Offset: 0x3740, Size: 4]
	double EndMatchHeartbeatTimestamp;//[Offset: 0x3748, Size: 8]
	FortPlayerStartWarmup* WarmupPlayerStart;//[Offset: 0x3750, Size: 8]
	InputComponent* FullScreenScoreboardInputComponent;//[Offset: 0x3758, Size: 8]
	InputComponent* CurrentFullscreenInputComponent;//[Offset: 0x3760, Size: 8]
	InputComponent* GameChannelRecommendationInputComponent;//[Offset: 0x3768, Size: 8]
	InputComponent* SubscriptionNudgeInputComponent;//[Offset: 0x3770, Size: 8]
	InputComponent* SocialNotificationInputComponent;//[Offset: 0x3778, Size: 8]
	bool bUseTrapPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38ec, Size: 1]
	float DoubleTapEditTime;//[Offset: 0x3958, Size: 4]
	AthenaPlayerMatchReport* MatchReport;//[Offset: 0x3960, Size: 8]
	BuildingEditModeMetadata_Wall*[] QuickEditWallPatterns;//[Offset: 0x3970, Size: 16]
	BuildingEditModeMetadata_Floor*[] QuickEditFloorPatterns;//[Offset: 0x3980, Size: 16]
	BuildingEditModeMetadata_Roof*[] QuickEditRoofPatterns;//[Offset: 0x3990, Size: 16]
	BuildingEditModeMetadata_Stair*[] QuickEditStairsPatterns;//[Offset: 0x39a0, Size: 16]
	MulticastInlineDelegateProperty OnBuildingQuickEditOptionChanged;//[Size: 16]
	class FortMiniMapTeamIndicators* MinimapIndicatorClass;//[Offset: 0x39d0, Size: 8]
	class FortMiniMapChallengeIndicators* MinimapChallengeIndicatorClass;//[Offset: 0x39d8, Size: 8]
	FortMiniMapChallengeIndicators* MinimapChallengeIndicators;//[Offset: 0x39e0, Size: 8]
	bool bEnableInGameChallengeLocationIndicators;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e8, Size: 1]
	class FortPlayerMarkerBase* SquadMarkerActorClass;//[Offset: 0x39f0, Size: 8]
	int BuildingsCreated;//[Offset: 0x3a00, Size: 4]
	int BuildingsEdited;//[Offset: 0x3a04, Size: 4]
	int BuildingsRepaired;//[Offset: 0x3a08, Size: 4]
	int BuildingsUpgraded;//[Offset: 0x3a0c, Size: 4]
	float BuildingActionDoneLastAtTime;//[Offset: 0x3a10, Size: 4]
	BuildingStats BuildingMatchStats;//[Offset: 0x3a14, Size: 32]
	BuildingEditAnalyticEvent[] BuildingAnalyticsArray;//[Offset: 0x3a38, Size: 16]
	float TimeStartedTrackingBuildingAnalytics;//[Offset: 0x3a48, Size: 4]
	FortVolume* CreativePlotLinkedVolume;//[Offset: 0x3b28, Size: 8]
	CreativePlotSessionData CreativePlotSessionData;//[Offset: 0x3b30, Size: 20]
	FortAthenaCreativePortal* OwnedPortal;//[Offset: 0x3b48, Size: 8]
	ItemAndCount[] CachedPurchasedItems;//[Offset: 0x3b98, Size: 16]
	FortPlaysetItemDefinition* CurrentPlayset;//[Offset: 0x3bc0, Size: 8]
	float DestructedBuildingInGridTimeoutOverride;//[Offset: 0x3bc8, Size: 4]
	FText ClientRespawnText;//[Offset: 0x3bd0, Size: 24]
	FText ClientRebootingText;//[Offset: 0x3be8, Size: 24]
	FText ClientIslandTravelText;//[Offset: 0x3c00, Size: 24]
	FText ClientTravelToCreativeHubText;//[Offset: 0x3c18, Size: 24]
	FortVolume*[] VolumesLoading;//[Offset: 0x3c30, Size: 16]
	FortVolume*[] VolumesUnloading;//[Offset: 0x3c40, Size: 16]
	AthenaMarkerComponent* MarkerComponent;//[Offset: 0x3c50, Size: 8]
	AthenaResurrectionComponent* ResurrectionComponent;//[Offset: 0x3c58, Size: 8]
	FortControllerComponent_HeldDeviceUsage* HeldDeviceUsageComponent;//[Offset: 0x3c60, Size: 8]
	FortPlayerControllerAthenaXPComponent* XPComponent;//[Offset: 0x3c80, Size: 8]
	FortControllerComponent_MapDiscoverability* DiscoverabilityComponent;//[Offset: 0x3c88, Size: 8]
	FortControllerComponent_TransientQuests* TransientQuestsComponent;//[Offset: 0x3c90, Size: 8]
	FortControllerComponent_SkydiveFeedback* SkydiveFeedback;//[Offset: 0x3c98, Size: 8]
	FortControllerComponent_ContextualChallenges* ContextualChallenges;//[Offset: 0x3ca0, Size: 8]
	FortControllerComponent_IndicatedActorManagement* IndicatedActorManagementComponent;//[Offset: 0x3ca8, Size: 8]
	FortControllerComponent_LocalizationService* LocalizationServiceComponent;//[Offset: 0x3cb0, Size: 8]
	FortControllerComponent_ToxicityService* ToxicityServiceComponent;//[Offset: 0x3cb8, Size: 8]
	FortControllerComponent_RechargeWeapons* RechargingWeaponsComponent;//[Offset: 0x3cc0, Size: 8]
	FortControllerComponent_InventoryService* InventoryServiceComponent;//[Offset: 0x3cc8, Size: 8]
	FortControllerComponent_RadiusTracker* RadiusTrackerComponent;//[Offset: 0x3cd0, Size: 8]
	FortControllerComponent_MinigameActivity* MinigameActivityComponent;//[Offset: 0x3cd8, Size: 8]
	ScalableFloat SightWeatherCapRadius;//[Offset: 0x3ce0, Size: 40]
	double TimeSinceLastCreativeSpawn;//[Offset: 0x3d08, Size: 8]
	CompositeBool IgnoreSignifanceBasedCustomDepthRendering;//[Offset: 0x3d30, Size: 24]
	CreativeUserContentManager* CreativeUserContentManager;//[Offset: 0x3d48, Size: 8]
	FortCreativeObjectTrackingComponent* CreativeObjectTrackingComponent;//[Offset: 0x3d50, Size: 8]
	MulticastInlineDelegateProperty OnPreviewScreenshotCameraActivated;//[Size: 16]
	FortWorldItem* CreativeItemToRemoveWhenAddingInventoryItem;//[Offset: 0x3db8, Size: 8]
	QuickBarEquippedItemGuids PrimaryQuickBarSlotItemGuids;//[Offset: 0x3dd0, Size: 164]
	void WriteCreateBuildingAnalytics();// 0xd153c18
	void UpdateUGCRestrictedForVolume(FortVolume* Volume, bool bRestricted);// 0xd153af0
	void UpdateRichPresenceTimer();// 0xd153adc
	void UpdateCreativePlotName(FString IslandId, FString Locale, FString Title);// 0xd153950
	void UpdateCreativePlotData(FortVolume* VolumeToPublish, CreativeIslandInfo MyInfo);// 0xd153628
	void UpdateCreativeIslandDescriptionTags(FString IslandId, FString Locale, const FString[] DescriptionTags);// 0xd15344c
	void TellServer_ClientReceivedPlaysetDataForVolume(FortPlaysetStreamingData PlaysetData, FortVolume* Volume);// 0xd1532d0
	void TeleportToPlaygroundLobbyIsland();// 0xd1532bc
	void StopRecordingHighlights();// 0xd1532a8
	void StartRespawnLoading();// 0xd153294
	void StartMatchmakingByLinkCode(FString LinkCode, FName PlaylistName);// 0xd1531a0
	void StartCreativeMatchmakingReadyCheck(FString LinkCode, FName PlaylistName, out bool OutDidStartMatchmakingImmediately);// 0xd153060
	void ShowHighlightSummary();// 0xd15304c
	void SetupClientRespawnTimerAndLocation(Vector RespawnLoc, Rotator RespawnRot, Vector OldPlayerLocation, bool bCalculateRespawnData);// 0xd152ed4
	void SetIgnoreSignifanceBasedCustomDepthRendering(bool bValue, Object* ModifyingObject);// 0xd152de4
	void SetFocalPointWithDuration(Actor* InFocalPoint, Vector InFocalPointOffset, float InFocalPointFOV, float InDuration);// 0xd152c80
	void SetFocalPoint(Actor* InFocalPoint, Vector InFocalPointOffset, float InFocalPointFOV);// 0xd152b58
	void SetCanStreamBuildingFoundationsIn(bool bCanStream);// 0xd152aa8
	void ServerUpdateUserCameraPreview();// 0xd152a4c
	void ServerUpdateSkydiveLocation(FString LocationStr, const Vector Location);// 0xd152954
	void ServerUpdatePrimaryQuickBarSlots(const QuickBarEquippedItemGuids SlotItemGuids);// 0xd15288c
	void ServerUpdateLevelStreamingHandshakeData(const bool bClientLevelStreamingState);// 0xd1527a8
	void ServerUpdateHeatmapBoundsForCurrentVolume();// 0xd15274c
	void ServerTryFindPlotItemForDefinition(FortCreativeRealEstatePlotItemDefinition* PlotDefinition);// 0xd15269c
	void ServerToggleAutoRestartMinigame();// 0xd152640
	void ServerTickForDoneTeleporting(FortAthenaCreativePortal* Portal);// 0xd152590
	void ServerThankBusDriverCheck();// 0xd152534
	void ServerThankBusDriver();// 0xd1524d8
	void ServerTeleportViaCreativePortal(int PortalIndex);// 0xd152428
	void ServerTeleportToPlaygroundLobbyIsland();// 0xd1523cc
	void ServerTeleportToPlaygroundIslandDock();// 0xd152370
	void ServerStopWaitLTMLoading();// 0xd152354
	void ServerStopSavingCreativePlot();// 0xd1522f8
	void ServerStartUnloadingVolume(FortVolume* VolumeToUnload);// 0xd152220
	void ServerStartMinigame();// 0xd1521c4
	void ServerStartLoadingVolume(FortVolume* VolumeToLoad);// 0xd1520ec
	void ServerStartInteractWithIslandPortal(FortAthenaCreativePortal* Portal);// 0xd15203c
	void ServerSpawnCreativeSupplyDrop(Vector Position, class Actor InSupplyDropClass);// 0xd151f1c
	void ServerSimulateLevelUp(int ClientSimulatedLevel);// 0xd151e44
	void ServerShowSeasonLevel();// 0xd151de8
	void ServerSetTeam(byte InTeam);// 0xd151d10
	void ServerSetStreamingTestStreamingLevels(bool streaming);// 0xd151c58
	void ServerSetRespawnData(Vector RespawnLoc, Rotator RespawnRot, float RespawnCameraDist);// 0xd151b30
	void ServerSetReceiveEmailSignups(bool bSignUp);// 0xd151a4c
	void ServerSetPlayset(FortPlaysetItemDefinition* NewPlayset);// 0xd151974
	void ServerSetOnCreativePortalLoadedDelegate(int PortalIndex);// 0xd1518c4
	void ServerSetMinigameClassSlot(byte InClassSlotIndex);// 0xd151814
	void ServerSendFriend(FortPlayerStateAthena* FriendPSA);// 0xd15173c
	void ServerSelectMutatorItem(FortGameplayMutator* Mutator, int ItemIndex, int PayloadData);// 0xd1515e4
	void ServerSaveIslandCheckpoint(FortAthenaCreativePortal* Portal);// 0xd15150c
	void ServerRestartMinigame();// 0xd1514b0
	void ServerRespondToAbandonMatch(bool bAbandon);// 0xd1513cc
	void ServerResetCurrentVolumeWithoutTeleport();// 0xd1513b0
	void ServerResetCameraPreviewToDefaultLocation();// 0xd151354
	void ServerRequestObjectTrackingDetails(const FortVolume* Volume);// 0xd1512a4
	void ServerRequestNewSkydiveLeader();// 0xd151248
	void ServerReloadCreativePlot();// 0xd1511ec
	void ServerReleasePortal();// 0xd151190
	void ServerPlaySquadQuickChatMessage(AthenaQuickChatActiveEntry ChatEntry, UniqueNetIdRepl SenderID);// 0xd150e54
	void ServerNotifyOstrichShieldOvercharge();// 0xd150df8
	void ServerNotifyOstrichSelfDestruct();// 0xd150d9c
	void ServerNotifyClientReachedMaxWaitingTimeForDeviceReplication();// 0xd150d40
	void ServerMarkSkydiveLocationsComplete();// 0xd150d24
	void ServerLookedAtFocalPoint();// 0xd150d08
	void ServerLoadPlotForPortalFromMnemonic(FortAthenaCreativePortal* Portal, FString Mnemonic);// 0xd150bd8
	void ServerLoadPlotForPortal(FortAthenaCreativePortal* Portal, FString PlotItemId);// 0xd150aa8
	void ServerLoadIslandCheckpoint(FortAthenaCreativePortal* Portal);// 0xd1509d0
	void ServerInsertExtraStreamingTestSkydiveStates();// 0xd1509b4
	void ServerGiveCreativeItem(const FortItemEntry CreativeItem, const GUID ItemToRemoveGuid);// 0xd15088c
	void ServerGenerateMockMatchReport();// 0xd150830
	void ServerEnteredCursorMode();// 0xd150814
	void ServerEnteredCameraMode();// 0xd1507f8
	void ServerEndUnloadingVolume(FortVolume* VolumeToUnload);// 0xd150720
	void ServerEndMinigame(bool bAbandon);// 0xd15063c
	void ServerEndLoadingVolume(FortVolume* VolumeToLoad);// 0xd150564
	void ServerEnableAnonymousMode();// 0xd150508
	void ServerEnableAnonymousCharacterMode();// 0xd1504ac
	void ServerDBNOReviveStarted(FortPlayerPawnAthena* DBNOPawn);// 0xd1503d4
	void ServerDBNOReviveInterrupted(FortPlayerPawnAthena* DBNOPawn);// 0xd1502fc
	void ServerCreateProfileGoCollectionForSublevels(FString SublevelSearchString, int GridStepsX, int GridStepsY, int RotationSteps, int Quad);// 0xd150110
	void ServerClientIsReadyToRespawn();// 0xd1500b4
	void ServerClearSkydiveLeader();// 0xd150058
	void ServerClaimPortal();// 0xd14fffc
	void ServerBroadcastDeviceButtonComponentClickedDelegate(const FortCreativeDeviceButtonComponent* DeviceButtonComponent);// 0xd14ff24
	void ServerBeginEndPreview(bool bInBegin);// 0xd14fe40
	void ServerApplyOverrideWrapToVehicle(const AthenaItemWrapDefinition* ItemWrap);// 0xd14fd74
	void ServerApplyOverrideWrapToItem(const GUID GUID, const AthenaItemWrapDefinition* ItemWrap);// 0xd14fc34
	void ServerAddToCachedPurchased(FortItemDefinition* ItemDefinition, int Count);// 0xd14fb18
	void ServerAddSimulatedXp(float XpAmmount, const FText Source, GameplayTag MetaData);// 0xd14f954
	void SendPhysicsBallHitToServer(FortPhysicsPawnObject* PhysicsObject, const float ClientPing, Pawn* HittingPawn, const Vector VelocityOfHitter, const Vector HitNormal, const TimeStampedPhysicsPawnState ClientBallState);// 0xd14f6d4
	void SendClientPhysicsBallStateToServer(FortPhysicsPawnObject* PhysicsObject, const float ClientPing, const TimeStampedPhysicsPawnState ClientBallState);// 0xd14f528
	void RevokeCreativeTool();// 0xbbc0600
	void RestoreCreativePlot(FString IslandId);// 0xd14f43c
	void RespawnTurnCameraBackOn();// 0xd14f428
	void RespawnPlayerAfterDeath(bool bEnterSkydiving);// 0xd14f378
	void ResetMyCurrentCreativePlot();// 0xd14f31c
	void RemoveDroppableTaggedItems(const GameplayTagContainer GameplayTagContainer);// 0xd14f22c
	void RemoveDroppableItems();// 0xd14f218
	void ReduceDroppableResources(const float ReductionPercentage);// 0xd14f170
	void RecordTeamStats();// 0xd14f15c
	void RecordMatchStats();// 0xd14f148
	void PublishCreativePlot(FortVolume* VolumeToPublish, CreativePublishOptions MyPublishOptions);// 0xd14e93c
	void PrepareClientForRespawning();// 0xd14e928
	void PreLobbyIslandTeleport();// 0xd14e914
	void PostLobbyIslandTeleport(FortPlayerPawn* PlayerPawn);// 0xd14e86c
	void PlayWinEffects(Pawn* FinisherPawn, const FortWeaponItemDefinition* FinishingWeapon, enum DeathCause, bool bAudioOnly);// 0xbbc0600
	void OnServerMarkerAdded(FortWorldMarkerData MarkerData);// 0xd14e6d4
	void OnRep_TrackedVictimsShared();// 0xd14e6c0
	void OnRep_SkydiveLeader();// 0xd14e6ac
	void OnRep_FocalPoint();// 0xd14e698
	void OnRep_CreativePlotLinkedVolume();// 0xd14e684
	void OnRep_CreativeIslands();// 0xd14e670
	void OnPostGameForced();// 0xd14e614
	void OnMinigameStarted();// 0xd14e600
	void OnMinigameEnded();// 0xd14e5ec
	void OnMatchmakingPartyReady();// 0xd14e5d8
	void OnIslandMetatdataUpdateComplete__DelegateSignature(FString Error);// 0xbbc0600
	void OnGameServerNodeTypeChanged(enum NewNodeType);// 0xd14e530
	void OnFortPlayerPawnAthenaDied(FortPlayerPawnAthena* FortPlayerPawnAthena);// 0xd14e488
	void OnCreativePlotLinkedVolumeMinigameChanged(FortMinigame* Minigame);// 0xd14e3e0
	void OnClientVolumeManagerReplicated();// 0xd14e3cc
	void OnClientEnterVolume(PlayerState* InPlayerState, FortVolume* InVolume);// 0xd14e2e8
	void OnBuildingQuickEditOptionChanged__DelegateSignature(const FName QuickEditClassName, const bool bPreviewMirrored, const byte PreviewRotations);// 0xbbc0600
	void MultiKillExpired();// 0xd14e2d4
	void MakeNewCreativePlotFromLinkCode(FString LinkCode, FString Locale, FString Title);// 0xd14e148
	void MakeNewCreativePlot(const FortCreativeRealEstatePlotItemDefinition* PlotType, FString Locale, FString Title);// 0xd14dfc8
	bool IsUnderPlotLimit(out int MaxIslands, out int NumIslands, bool bIncludeDeleted);// 0xd14de64
	bool IsTryToFireRestrictedByTypeCooldowns();// 0xd14de2c
	bool IsPlayerRebootingNow();// 0xd14ddf4
	bool IsPlayerInReadOnlyVolume();// 0xd14ddbc
	bool IsPlayerInPublishedVolume();// 0xd14dd84
	bool IsPlayerInFeaturedVolume();// 0xd14dd4c
	bool IsPlayerInAVolumeTheyCanCreateIn();// 0xd14dd14
	bool IsPlayerInAMinigame();// 0xd14dcdc
	bool IsPartyMemberReadyCheckStatusInProgress();// 0xd14dca4
	bool IsOnPublishedIsland();// 0xd14dc6c
	bool IsMatchmaking();// 0xd14dc34
	bool IsLoadingScreenActive();// 0xd14dc14
	bool IsClientNotifiedOfWin();// 0xd14dbf4
	bool IsClientNotifiedOfTeamWin();// 0xd14dbd4
	bool IsClientNotifiedOfLoss();// 0xd14dbb4
	void HighlightNumberReturned(int NumHighlights);// 0xd14db0c
	bool HasItems(out const enum[] ExcludedItemTypes);// 0xd14da40
	void HandlePlayersLeftChanged(int NumPlayersLeft);// 0xd14d998
	void HandleGamePhaseStepChanged(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xd14d8a0
	void HandleGamePhaseChanged(enum NewPhase);// 0xd14d7f8
	FortControllerComponent_TransientQuests* GetTransientQuestsComponent();// 0xd14d7dc
	void GetTrackedVictims(out FortPlayerStateAthena* EliminatedVictim, out FortPlayerStateAthena* DownedVictim);// 0xd14d6d8
	FortPlayerStateAthena*[] GetSquadMemberPlayerStates(const bool bIncludeSelf);// 0xd14d5e4
	int GetSquadKillsCount();// 0xd14d5b0
	void GetSquadKills(out int[] Kills);// 0xd14d4f0
	int GetProfilePlotEntries(bool bIncludeDeleted);// 0xd14d438
	void GetPlaysetSize(out int SizeX, out int SizeY, out int SizeZ);// 0xd14d2dc
	FortPlaysetItemDefinition* GetPlayset();// 0xd14d2a8
	FText GetPlaylistGameTypeText();// 0xd14d270
	FortMinigame* GetMinigame();// 0xd14d23c
	int GetMaxNumberOfPlots();// 0xd14d208
	AthenaPlayerMatchReport* GetMatchReport();// 0xd14d1d4
	int GetInventorySpace();// 0xd14d1a0
	bool GetIgnoreSignifanceBasedCustomDepthRendering();// 0xd14d0fc
	FortGameStateAthena* GetGameStateAthena();// 0xd14d0c8
	FortVolume* GetCurrentVolumeOrCreativePlotLinkedVolume();// 0xd14d094
	FortVolume* GetCurrentVolume();// 0xd14d060
	enum GetCurrentFortVolumeType();// 0xd14d02c
	float GetCurrentBuildingSpeedModifier();// 0xbbc0600
	float GetCurrentBuildingCostModifier();// 0xbbc0600
	CreativeUserContentManager* GetCreativeUserContentManager();// 0xd14d010
	FortVolume* GetCreativePlotLinkedVolume();// 0xd14cff4
	int GetCachedHighlightCount();// 0xd14cfc0
	void ForceSpectatorToCursorMode();// 0xd14cfac
	void FollowSpecialActor();// 0xd14cf98
	void EnableCreativeContentManagerBasedOnPlaylist();// 0xd14cf84
	void DuplicateCreativePlot(FString IslandId, FString Locale, FString Title);// 0xd14cdf8
	void DestroyCreativePlot(FString IslandId);// 0xd14cd0c
	void ClientUpdateGeneratedSkydivePath(FString LocationStr, const Vector DropLocationStr, const Vector GlideLocationStr, const Vector LandingLocationStr);// 0xd14cb9c
	void ClientStopWaitLTMLoading();// 0xd14cb80
	void ClientStartWaitLTMLoading();// 0xd14cb64
	void ClientStartRespawnPreparation(Vector RespawnLoc, Rotator RespawnRot, float RespawnCameraDist, FName InRespawnCameraBehavior, const FText HUDReasonText);// 0xd14c958
	void ClientSignalPortalLoadCompleteViaDelegate(const AsyncTaskResult Result);// 0xd14c834
	void ClientSetStreamingTestStreamingLevels(bool streaming);// 0xd14c77c
	void ClientSetDeathReport(FortPlayerDeathReport InDeathReport);// 0xd14c654
	void ClientSendTeamStatsForPlayer(const AthenaMatchTeamStats TeamStats);// 0xd14c5a4
	void ClientSendStateEncryptionKey(const PlayerStateEncryptionKey Key);// 0xd14c4e8
	void ClientSendMatchStatsForPlayer(const AthenaMatchStats Stats);// 0xd14c3e0
	void ClientSendEndMatchReportHeartbeat();// 0xd14c3c4
	void ClientSendEndBattleRoyaleMatchForPlayer(bool bSuccess, const AthenaRewardResult Result);// 0xd14c274
	void ClientSendDebugPoiVolumeData(FString PoiVolumes);// 0xd14c1b8
	void ClientSendDebugPoiLocationTags(const GameplayTagContainer InPoiTags);// 0xd14c0ec
	void ClientRequestLevelStreamingHandshake();// 0xd14c0d0
	void ClientReportTournamentPlacementPointsScored(int Placement, int PointsEarned);// 0xd14bfe4
	void ClientReportPhaseFound(FString Phase);// 0xd14bf28
	void ClientReceiveSquadQuickChatMessage(AthenaQuickChatActiveEntry ChatEntry, FortPlayerController* SenderPC);// 0xd14be08
	void ClientReceiveKillNotification(FortPlayerStateZone* Killer, FortPlayerStateZone* Killed);// 0xd14bd1c
	void ClientPublishCreativePlotComplete(FString ResultErrorCode, FString LinkJson);// 0xd14bc14
	void ClientPreviewScreenshotModeActivated(bool bSuccess, bool bForceQuit);// 0xd14bb14
	void ClientNotifyWon(Pawn* FinisherPawn, const FortWeaponItemDefinition* FinishingWeapon, enum DeathCause);// 0xd14b9e8
	void ClientNotifyTeamWon(Pawn* FinisherPawn, const FortWeaponItemDefinition* FinishingWeapon, enum DeathCause);// 0xd14b8bc
	void ClientNotifyTeamLost();// 0xd14b8a0
	void ClientNotifyLost(Pawn* WinningPawn, enum LostReason);// 0xd14b7b0
	void ClientNotifyAbortRespawn();// 0xd14b794
	void ClientMutatorEvent(FortGameplayMutator* Mutator, int EventId, int PayloadData);// 0xd14b668
	void ClientMarkSkydivePathsComplete();// 0xd14b64c
	void ClientHideScreenWhileRespawning(const FText HUDReasonText);// 0xd14b540
	void ClientEnterCameraMode();// 0xd14b524
	void ClientCycleQuickBarToCreativeItem(const GUID CreativeItemGuid, const FortWorldItemDefinition* CreativeItemDef);// 0xd14b434
	void ClientCheckIfSafeToTurnOnCamera();// 0xd14b418
	void ClientBroadcastPlotItemID(FString PlotID);// 0xd14b35c
	void ClientBroadcastOnUpdateCreativePlotName(bool bSuccess, const FText Reason);// 0xd14b208
	void ClientBroadcastOnUpdateCreativeDescriptionTags(bool bSuccess, const FText Reason);// 0xd14b0b4
	void ClientBroadcastOnRestoreCreativePlotFinished(bool bSuccess, const FText Reason);// 0xd14af60
	void ClientBroadcastOnMakeNewCreativePlotFinished(bool bSuccess, const FText Reason);// 0xd14ae0c
	void ClientBroadcastOnDuplicateCreativePlotFinished(bool bSuccess, const FText Reason);// 0xd14acb8
	void ClientBroadcastOnDestroyCreativePlotFinished(bool bSuccess, const FText Reason);// 0xd14ab64
	void ClientBotStopDogpile();// 0xd14ab48
	void ClientBotStartDogpile(Vector DogpilePosition);// 0xd14aa98
	void ClientAutoEquipFirstItem(GUID ItemGuid, bool bForceExecution);// 0xd14a9a0
	void ClientAlertPortalDoneTeleporting();// 0xd14a984
	void ClientAlertLeaveIsland();// 0xd14a968
	void ClientAddProfileGoCollection(FString CollectionName, const ProfileGoScenario[] NewScenarios);// 0xd14a864
	void Client_DisplayQuestUpdate(const FortDisplayQuestUpdateData[] UpdateData);// 0xd14a7a8
	void ClearInventorySpaces(int NumSpaces);// 0xd14a700
	void ClearDroppableItems(bool bAllowShouldDropItemOverride);// 0xd14a650
	void CheckIfSafeToTurnOnCamera();// 0xd14a63c
	void CheckIfSafeToRespawn();// 0xd14a628
	void CheckIfLevelStreamingCompleteForHandshake();// 0xd14a614
	void CheckIfClientLoadedLTM();// 0xd14a600
	bool CanPlayerCreateInCurrentVolume(out FortVolume* OutCurrentVolume);// 0xd14a540
	bool CanFollowSpecialActor();// 0xd14a508
	void CancelMatchmaking(enum CancelReason);// 0xd14a460
	void CancelCreativeMatchmakingReadyCheck();// 0xd14a44c
	void BroadcastOnPickupProjectileCreated(FortItemDefinition* ItemDefinition);// 0xd14a398
	void BroadcastDeviceButtonComponentClickedDelegate(const FortCreativeDeviceButtonComponent* DeviceButtonComponent);// 0xd14a2f0
	void ApplyOverrideWrapToVehicle(out const AthenaItemWrapDefinition* ItemWrap);// 0xd14a220

--------------------------------
Class: FortPlayerControllerZone.FortPlayerControllerGameplay.FortPlayerController.PlayspacePlayerController.PlayerController.Controller.Actor.Object
	MulticastInlineDelegateProperty OnBeginSkydiving;//[Size: 16]
	MulticastInlineDelegateProperty OnEndSkydiving;//[Size: 16]
	MulticastInlineDelegateProperty OnBeginSkydivingFromBus;//[Size: 16]
	MulticastInlineDelegateProperty OnEndSkydivingFromBus;//[Size: 16]
	MulticastInlineDelegateProperty OnVehicleSeatTransitionTargetIndexChange;//[Size: 16]
	MulticastInlineDelegateProperty OnStartedRespawn;//[Size: 16]
	bool bDontChangeReticleColorForEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c70, Size: 1]
	float LastVehicleSeatSwitchTime;//[Offset: 0x2c74, Size: 4]
	Pawn* PlayerToSpectateOnDeath;//[Offset: 0x2c80, Size: 8]
	<GUID> GadgetTrackedAttributeItemInstanceIds;//[Offset: 0x2c88, Size: 80]
	FortControllerComponent_TriggerHaptics* TriggerHapticsComponent;//[Offset: 0x2d50, Size: 8]
	InputComponent* DeathInputComponent;//[Offset: 0x2d58, Size: 8]
	InputComponent* RemoteControlledPawnInputComponent;//[Offset: 0x2d60, Size: 8]
	FortPlayerDeathReport PlayerDeathReport;//[Offset: 0x2d88, Size: 120]
	bool bClientNotifiedOfPawnDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e00, Size: 1]
	bool bEnterCameraModeOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e01, Size: 1]
	enum PlayerLeecherStatus;//[Offset: 0x2e02, Size: 1]
	MulticastInlineDelegateProperty OnPossessedPawnDied;//[Size: 16]
	interface class * HUDTargetUnderReticle;//[Offset: 0x2ef0, Size: 16]
	UniqueNetIdRepl[] RejoinablePartyMembers;//[Offset: 0x2f00, Size: 16]
	float LastScoreEarnedTime;//[Offset: 0x2f20, Size: 4]
	int VehicleSeatTransitionTargetIndex;//[Offset: 0x2f40, Size: 4]
	FString VoiceChatChannel;//[Offset: 0x2f60, Size: 16]
	Actor*[] DesyncNotifyList;//[Offset: 0x2fa0, Size: 16]
	bool bJetpackExecuteToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3000, Size: 1]
	bool bAllowMovementCancellableActionsWithIceFeet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3001, Size: 1]
	float MoveForwardOnlyEmoteCancelBackwardsThreshold;//[Offset: 0x3004, Size: 4]
	float MoveForwardOnlyEmoteCancelStrafeThreshold;//[Offset: 0x3008, Size: 4]
	ScalableFloat MovementCancellableActionLeashLength;//[Offset: 0x3010, Size: 40]
	Vector MovementCancellableActionLeashLocation;//[Offset: 0x3038, Size: 12]
	Vector MovementCancellableActionStartingLeashLocation;//[Offset: 0x3044, Size: 12]
	ScalableFloat UpdateSurfaceTypeMinimumLength;//[Offset: 0x3050, Size: 40]
	ScalableFloat UpdateSurfaceTypeMinimumDelay;//[Offset: 0x3078, Size: 40]
	void TestVehicleVelocity(FString Command);// 0xd16d1a0
	void SpectateOnDeath();// 0xd16d184
	void SetVehicleHealth(float NewHealth);// 0xd16d0dc
	void ServerVoiceChatRequestJoinToken(FString ChannelName);// 0xd16cff0
	void ServerSubmitGameplayVote(enum VoteType, int VoteDecision);// 0xd16ced4
	void ServerSpectatePlayerState(FortPlayerStateZone* PlayerToSpectate, const bool bAllowStateChange);// 0xd16cdac
	void ServerSpectateActor(Actor* NewViewTarget, const bool bAllowStateChange);// 0xd16cc84
	void ServerSetVehicleHealth(float NewHealth);// 0xd16cbac
	void ServerSetShouldDisablePlayerTeleportingDuringMissionResults();// 0xd16cb50
	void ServerSendPartyJoinInfoToPlayer(const UniqueNetIdRepl RecipientId, FString JoinInfoStr);// 0xd16c994
	void ServerSendLoadoutConfig(int LoadoutSeed, const byte[] Loadout);// 0xd16c864
	void ServerRequestSeatChange(int TargetSeatIndex);// 0xd16c78c
	void ServerRequestLoadoutRefresh();// 0xd16c770
	void ServerEndGameplayVote(enum VoteType);// 0xd16c698
	void ServerDetachFromRemoteControlledPawn();// 0xd16c63c
	void ServerDestroyFromRemoteControlledPawn();// 0xd16c5e0
	void ServerBeginGameplayVote(enum VoteType, FortVoteConfig VoteConfig);// 0xd16c488
	void ServerAttemptExitVehicle();// 0xd16c42c
	void ServerActivateMission();// 0xd16c3d0
	void RewindVehicle(FString Command);// 0xd16c2d4
	void ResurrectPlayer();// 0xd16c2c0
	void RespawnPlayer();// 0xd16c2a4
	void ResetExecuteJetpackToggle();// 0xd16c288
	void PushDeathInputComponent();// 0xd16c26c
	void PopDeathInputComponent();// 0xd16c258
	void OnRep_VoiceChatChannel();// 0xd16c244
	void KillAllVehicles(FString Command);// 0xd16c148
	bool IsUsingAnonymousMode();// 0xd16c110
	bool IsUsingAnonymousCharacterMode();// 0xd16c0d8
	bool IsShowingSeasonLevel();// 0xd16c0a0
	bool IsClientNotifiedOfPawnDied();// 0xd16c080
	int GetVehicleSeatTransitionTargetIndex();// 0xd16c064
	void DumpPhysicsVehicleBuffer(FString Command);// 0xd16bf68
	void DisableRangedWeaponScopeFX();// 0xd16bf54
	void ClientVoiceChatSendJoinToken(bool bSuccess, FString Error, FString Token);// 0xd16be04
	void ClientUpdatePlaylistFlags(const byte[] Buffer);// 0xd16bd48
	void ClientSendPartyJoinInfoToPlayer(FString JoinInfoStr);// 0xd16bc8c
	void ClientPresentGameplayVote(uint32 Payload);// 0xd16bbdc
	void ClientOnZoneEndScoreReports(const FortPlayerScoreReport[] ScoreReports);// 0xd16bb24
	void ClientOnPawnSpawned();// 0xd16bb08
	void ClientOnPawnRevived(Controller* EventInstigator);// 0xd16ba58
	void ClientOnPawnDied(FortPlayerDeathReport DeathReport);// 0xd16b930
	void ClientClearDeathNotification();// 0xd16b914
	void ClientAckLoadoutConfig(int LoadoutSeed);// 0xd16b864
	bool AreResurrectionAndRespawnTimeRemainingValid();// 0xd16b82c
	void AllowLoadoutRefresh();// 0xd16b818

--------------------------------
Class: FortControllerComponent_TriggerHaptics.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	bool bTriggerHapticsAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	void UpdateTriggerHaptics();// 0xcf9e9e0
	void ResetTriggerHaptics();// 0xcf9e9cc
	void OnWeaponEquipped(FortWeapon* NewWeapon, FortWeapon* PreviousWeapon);// 0xcf9e8e8
	void OnPawnChanged(FortPawn* InPawn);// 0xcf9e840

--------------------------------
Class: FortPlayerDeathReport
	float ServerTimeForRespawn;//[Offset: 0x0, Size: 4]
	float ServerTimeForResurrect;//[Offset: 0x4, Size: 4]
	float LethalDamage;//[Offset: 0x8, Size: 4]
	FortPlayerState* KillerPlayerState;//[Offset: 0x10, Size: 8]
	FortPawn* KillerPawn;//[Offset: 0x18, Size: 8]
	float KillerHealthPercent;//[Offset: 0x20, Size: 4]
	float KillerShieldPercent;//[Offset: 0x24, Size: 4]
	FortWeaponItemDefinition* KillerWeapon;//[Offset: 0x28, Size: 8]
	Actor* DamageCauser;//[Offset: 0x30, Size: 8]
	bool bDroppedBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotifyUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	GameplayTagContainer Tags;//[Offset: 0x40, Size: 32]
	Vector ViewLocationAtTimeOfDeath;//[Offset: 0x60, Size: 12]
	Rotator ViewRotationAtTimeOfDeath;//[Offset: 0x6c, Size: 12]

--------------------------------
Class: FortPlayerStateAthena.FortPlayerStateZone.FortPlayerState.PlayerState.Info.Actor.Object
	int PersonalLobbyAction;//[Offset: 0xd7c, Size: 4]
	FortRespawnData RespawnData;//[Offset: 0xd80, Size: 32]
	enum ReplicatedTeamMemberState;//[Offset: 0xdb8, Size: 1]
	enum TeamMemberState;//[Offset: 0xdb9, Size: 1]
	float TeamMemberStateRepTime;//[Offset: 0xdbc, Size: 4]
	MulticastInlineDelegateProperty OnTeamIndexChangedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnSquadIdChangedDelegate;//[Size: 16]
	bool bHasWonAGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	int TeamKillScore;//[Offset: 0xe1c, Size: 4]
	<AthenaGadgetItemDefinition*,int> KillsWhileAthenaGadgetEquippedMap;//[Offset: 0xe20, Size: 80]
	<FString,float> DamageDealtToBigHealthProps;//[Offset: 0xe70, Size: 80]
	byte TeamIndex;//[Offset: 0xec0, Size: 1]
	int TeamScorePlacement;//[Offset: 0xec4, Size: 4]
	int TeamScore;//[Offset: 0xec8, Size: 4]
	int Place;//[Offset: 0xecc, Size: 4]
	int DownScore;//[Offset: 0xed0, Size: 4]
	int KillScore;//[Offset: 0xed4, Size: 4]
	int SeasonLevelUIDisplay;//[Offset: 0xed8, Size: 4]
	int HumanKillScore;//[Offset: 0xedc, Size: 4]
	int AIKillCount;//[Offset: 0xf18, Size: 4]
	int NumChestsOpened;//[Offset: 0xf20, Size: 4]
	int NumAmmoCansOpened;//[Offset: 0xf28, Size: 4]
	int NumSupplyDropsOpened;//[Offset: 0xf30, Size: 4]
	int NumLlamasOpened;//[Offset: 0xf38, Size: 4]
	int NumForagedItemsConsumed;//[Offset: 0xf40, Size: 4]
	int NumMinutesAlive;//[Offset: 0xf48, Size: 4]
	int NumBronzeCoinsCollected;//[Offset: 0xf50, Size: 4]
	int NumSilverCoinsCollected;//[Offset: 0xf58, Size: 4]
	int NumGoldCoinsCollected;//[Offset: 0xf60, Size: 4]
	int TotalPlayerScore;//[Offset: 0xf68, Size: 4]
	MulticastInlineDelegateProperty PointsAddedToScore;//[Size: 16]
	MulticastInlineDelegateProperty TeamScoreChanged;//[Size: 16]
	MulticastInlineDelegateProperty TeamPlacementChanged;//[Size: 16]
	MulticastInlineDelegateProperty PlaceChanged;//[Size: 16]
	MulticastInlineDelegateProperty TeamAverageDamageChanged;//[Size: 16]
	MulticastInlineDelegateProperty MatchAbandonStateChanged;//[Size: 16]
	FortPlayerStateAthena*[] FriendsInSquad;//[Offset: 0xfd0, Size: 16]
	FortPlayerStateAthena*[] FriendsInSquadAtPartnerCafe;//[Offset: 0xfe0, Size: 16]
	byte StormSurgeEffectCount;//[Offset: 0x1040, Size: 1]
	uint16 TeamAverageDamageDealt;//[Offset: 0x1042, Size: 2]
	byte SquadId;//[Offset: 0x1044, Size: 1]
	bool bThankedBusDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1045, Size: 1]
	bool bDidNotThankBusDriver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1045, Size: 1]
	bool bUsingAnonymousMode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1045, Size: 1]
	bool bUsingAnonymousCharacterMode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1045, Size: 1]
	bool bShowingSeasonLevel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1045, Size: 1]
	FText PlayerNameCustomOverride;//[Offset: 0x1048, Size: 24]
	bool bIsTalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060, Size: 1]
	bool bIsMuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1061, Size: 1]
	MulticastInlineDelegateProperty OnInventoriesInNonPersistenceModeChanged;//[Size: 16]
	DetailedMetricInformation MetricInformation;//[Offset: 0x1290, Size: 16]
	SimpleMetricInformation SimpleMetricInformation;//[Offset: 0x12a0, Size: 96]
	int SecondsAlive;//[Offset: 0x1300, Size: 4]
	int TimeOfPawnCreation;//[Offset: 0x1304, Size: 4]
	bool bIsDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 1]
	Texture2D* GameModeIcon;//[Offset: 0x1338, Size: 8]
	DeathInfo DeathInfo;//[Offset: 0x1340, Size: 144]
	ChangeTeamInfo ChangeTeamInfo;//[Offset: 0x13d0, Size: 40]
	bool bResurrectionChipDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1440, Size: 1]
	FortResurrectionData ResurrectionChipAvailable;//[Offset: 0x1444, Size: 24]
	bool bResurrectingNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145c, Size: 1]
	int RebootCounter;//[Offset: 0x1460, Size: 4]
	bool bHoldsRebootVanLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1464, Size: 1]
	enum MatchAbandonState;//[Offset: 0x146c, Size: 1]
	bool bIsAnAthenaGameParticipant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x146e, Size: 1]
	UniqueNetIdRepl BotUniqueId;//[Offset: 0x1470, Size: 40]
	bool bPreserveSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1498, Size: 1]
	bool bInventoriesInNonPersistenceMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d8, Size: 1]
	static enum ToDeathCause(out const GameplayTagContainer InTags, bool bWasDBNO);// 0xd18fec0
	void Server_TogglePreserveSquad();// 0xd18fe64
	void Server_SetCanEditCreativeIsland(bool bCanEdit, const FString[] WhiteList);// 0xd18fcd8
	void OnSquadSpecificContainerSpawned(BuildingContainer* SpawnedContainer);// 0xd18fc30
	void OnSquadSpecificContainerDestroyed(BuildingContainer* DestroyedContainer);// 0xd18fb88
	void OnSimplePlayerMetricInformationUpdated__DelegateSignature(PlayerState* Client, out const SimpleMetricInformation Information);// 0xbbc0600
	void OnRep_TotalPlayerScore();// 0xd18fb74
	void OnRep_ThankedBusDriver();// 0xb6ac88c
	void OnRep_TeamScorePlacement();// 0xd18fb60
	void OnRep_TeamScore();// 0xd18fb4c
	void OnRep_TeamKillScore();// 0xb6ac878
	void OnRep_TeamIndex(byte OldVal);// 0xb6ac7d0
	void OnRep_TeamAverageDamageDealt();// 0xd18fb38
	void OnRep_StormSurgeEffectCount();// 0xd18fb24
	void OnRep_SquadId();// 0xb6ac7bc
	void OnRep_SimpleMetricInformation();// 0xd18fb10
	void OnRep_SeasonLevelUIDisplay();// 0xb6ac7a8
	void OnRep_ResurrectionChipReplicated();// 0xb6ac794
	void OnRep_ResurrectingNow(const bool bPreviousResurrectingNow);// 0xb6ac6e4
	void OnRep_ReplicatedTeamMemberState();// 0xb6ac6d0
	void OnRep_RebootCounter();// 0xb6ac6bc
	void OnRep_PreserveSquad();// 0xd18fafc
	void OnRep_Place();// 0xb6ac6a8
	void OnRep_NumSupplyDropsOpened();// 0xd18fae8
	void OnRep_NumSilverCoinsCollected();// 0xd18fad4
	void OnRep_NumMinutesAlive();// 0xd18fac0
	void OnRep_NumLlamasOpened();// 0xd18faac
	void OnRep_NumGoldCoinsCollected();// 0xd18fa98
	void OnRep_NumForagedItemsConsumed();// 0xd18fa84
	void OnRep_NumChestsOpened();// 0xd18fa70
	void OnRep_NumBronzeCoinsCollected();// 0xd18fa5c
	void OnRep_NumAmmoCansOpened();// 0xd18fa48
	void OnRep_MetricInformation();// 0xd18fa34
	void OnRep_MatchAbandonState(const enum PrevMatchAbandonState);// 0xd18f98c
	void OnRep_Kills();// 0xb6ac694
	void OnRep_InventoriesInNonPersistenceMode();// 0xd18f978
	void OnRep_Downs();// 0xd18f964
	void OnRep_DidNotThankBusDriver();// 0xd18f950
	void OnRep_DeathInfo();// 0xb6ac680
	void OnRep_ChangeTeamInfo();// 0xd18f93c
	void OnRep_AIKills();// 0xd18f928
	void OnPlayerMetricInformationUpdated__DelegateSignature(PlayerState* Client, out const DetailedMetricInformation Information);// 0xbbc0600
	void OnInteractionEventOccurred(out GameplayTagContainer InteractionTargetTags);// 0xd18f858
	bool IsSquadDead();// 0xd18f820
	bool IsResurrectionChipAvailable();// 0xd18f7e8
	bool IsResurrectingNow();// 0xd18f7b0
	bool IsInSquad();// 0xd18f778
	bool IsDisconnected();// 0xd18f740
	FortControllerComponent_TransientQuests* GetTransientQuestsComponent();// 0xd18f70c
	int GetSquadMemberIndex();// 0xd18f6d8
	byte GetSquadID();// 0xd18f6b8
	Texture2D* GetSocialAvatarBrush(const bool bSmallImage);// 0xd18f588
	float GetRemainingResurrectionChipExpirationTime();// 0xd18f554
	static LinearColor GetPinColorBySquadMemberIndex(int SquadIndex);// 0xd18f4a8
	LinearColor GetPinColor();// 0xd18f470
	bool GetInventoriesInNonPersistenceMode();// 0xd18f450
	DeathInfo GetDeathInfo();// 0xd18f3e0
	void DynamicBoolStateChange__DelegateSignature(const FortPlayerStateAthena* FortPlayerState, bool bNewValue);// 0xbbc0600
	void ClientReportTournamentStatUpdate(const FortTournamentStatInfo TournamentStatInfo);// 0xd18f31c
	void ClientReportTeamKill(int TeamKills);// 0xd18f26c
	void ClientReportKill(const FortPlayerStateAthena* Player);// 0xd18f1bc
	void ClientReportDBNO(const FortPlayerStateAthena* Player);// 0xd18f10c
	void ClientNotifyMatchEntered(const EventTournamentIds EventIds);// 0xd18f024
	void ClientAddKillFeedErrorMessage(const FortCreativeMessageDispatcherErrorMessage[] ErrorMessages);// 0xd18ef6c
	void Client_OnNewLevel(int NewLevel);// 0xd18eebc
	bool CanEditCreativeIsland();// 0xd18ee84
	bool CanBeResurrected();// 0xd18ee4c

--------------------------------
Class: FortRespawnData
	bool bRespawnDataAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bClientIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bServerIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector RespawnLocation;//[Offset: 0x4, Size: 12]
	Rotator RespawnRotation;//[Offset: 0x10, Size: 12]
	float RespawnCameraDistance;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: AthenaGadgetItemDefinition.FortGadgetItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bCanBeDroppedWhenEquipmentChangeIsBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f8, Size: 1]
	bool bAllowedFuelGadgetUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9f8, Size: 1]
	bool bShowCooldownUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9f8, Size: 1]
	bool bShowShortDescriptionInPickupDisplay;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9f8, Size: 1]
	bool bDisplayPlayerNameForInventoryActor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9f8, Size: 1]
	bool bDisplayHealthForInventoryActor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9f8, Size: 1]
	bool bDisplayShieldForInventoryActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9f8, Size: 1]
	GameplayTag SpecialActorInventoryTag;//[Offset: 0x9fc, Size: 8]
	FName InventorySpecialActorUniqueID;//[Offset: 0xa04, Size: 8]
	SlateBrush InventoryMinimapIconBrush;//[Offset: 0xa10, Size: 136]
	Vector2D InventoryMinimapIconScale;//[Offset: 0xa98, Size: 8]
	SlateBrush InventoryCompassIconBrush;//[Offset: 0xaa0, Size: 136]
	Vector2D InventoryCompassIconScale;//[Offset: 0xb28, Size: 8]
	FText InventoryActorDisplayName;//[Offset: 0xb30, Size: 24]
	SpecialActorSingleStatData[] SpecialActorInventoryStatList;//[Offset: 0xb48, Size: 16]
	class FortInteractContextInfoWidget* ContextOverrideWidget;//[Offset: 0xb58, Size: 8]
	FortCreativeTagsHelper CreativeTagsHelper;//[Offset: 0xb60, Size: 16]

--------------------------------
Class: FortInteractContextInfoWidget.UserWidget.Widget.Visual.Object
	void OnContextInfoUpdated(const FortInteractContextInfo* ContextInfo);// 0xbbc0600
	void GetInteractText(out FText InteractText, out bool Result);// 0xbbc0600

--------------------------------
Class: FortInteractContextInfo.Object
	FText ContextText;//[Offset: 0x28, Size: 24]
	LinearColor ContextTextColor;//[Offset: 0x40, Size: 16]
	FText ContextSubText;//[Offset: 0x50, Size: 24]
	LinearColor ContextSubTextColor;//[Offset: 0x68, Size: 16]
	class FortInteractContextInfoWidget* ContextOverrideWidget;//[Offset: 0x78, Size: 8]
	class FortInteractContextInfoWidget* SecondContextOverrideWidget;//[Offset: 0x80, Size: 8]
	FText SecondContextText;//[Offset: 0x88, Size: 24]
	LinearColor SecondContextTextColor;//[Offset: 0xa0, Size: 16]
	FText SecondContextSubText;//[Offset: 0xb0, Size: 24]
	LinearColor SecondContextSubTextColor;//[Offset: 0xc8, Size: 16]
	FText ErrorText;//[Offset: 0xd8, Size: 24]
	Actor* ReceivingActor;//[Offset: 0xf0, Size: 8]
	PrimitiveComponent* InteractComponent;//[Offset: 0xf8, Size: 8]
	Object* OptionalObjectData;//[Offset: 0x100, Size: 8]
	SoundBase* LongInteractSound;//[Offset: 0x108, Size: 8]
	UserWidget* OptionalHUDDisplayWidget;//[Offset: 0x110, Size: 8]
	Vector InteractPoint;//[Offset: 0x118, Size: 12]
	byte InteractionBeingAttempted;//[Offset: 0x124, Size: 1]
	float RequiredDuration;//[Offset: 0x128, Size: 4]
	float SecondRequiredDuration;//[Offset: 0x12c, Size: 4]
	bool bShowCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool bShowFirstInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	bool bShowSecondInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 1]
	bool bIsSecondInteractionActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133, Size: 1]
	bool bDisplayTextOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bSuppressInteractionWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool bHasCustomInteractionWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	bool bSuppressSimpleInteractionWidgetForTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 1]
	enum InteractContextInfoType;//[Offset: 0x139, Size: 1]
	bool HasValidSecondContextOverride();// 0xd040558
	bool HasValidContextOverride();// 0xd0404d4

--------------------------------
Class: BuildingContainer.BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	SoundCue* SearchingSoundCueLoop;//[Offset: 0xb20, Size: 8]
	SoundCue* LootRepeatSoundCue;//[Offset: 0xb28, Size: 8]
	SoundCue* OnDamageSoundCue;//[Offset: 0xb30, Size: 8]
	SoundCue* OnDeathSoundCue;//[Offset: 0xb38, Size: 8]
	StaticMesh* SearchedMesh;//[Offset: 0xb40, Size: 8]
	MaterialInterface*[] SearchedMaterialOverrides;//[Offset: 0xb48, Size: 16]
	LootTierGroupTagOverride[] LootTierGroupTagOverrideData;//[Offset: 0xb58, Size: 16]
	FName SearchLootTierGroup;//[Offset: 0xb68, Size: 8]
	RandomUpgradeData[] PotentialRandomUpgrades;//[Offset: 0xb70, Size: 16]
	ChosenQuotaInfo SearchLootTierChosenQuotaInfo;//[Offset: 0xb80, Size: 12]
	FName ContainerLootTierKey;//[Offset: 0xb8c, Size: 8]
	int ReplicatedLootTier;//[Offset: 0xb94, Size: 4]
	int ChosenRandomUpgrade;//[Offset: 0xb98, Size: 4]
	bool bSpawnedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9c, Size: 1]
	bool bBlockMarking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9c, Size: 1]
	bool bCanBeMarked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb9c, Size: 1]
	MarkedActorDisplayInfo MarkerDisplay;//[Offset: 0xba0, Size: 104]
	Vector MarkerPositionOffset;//[Offset: 0xc08, Size: 12]
	Vector2D NumItemsToDropRange;//[Offset: 0xc14, Size: 8]
	float SearchBounceRadiusOverride;//[Offset: 0xc1c, Size: 4]
	FortWorldItemDefinition* LootTestingData;//[Offset: 0xc20, Size: 8]
	float LootNoiseRange;//[Offset: 0xc28, Size: 4]
	Vector LootSpawnLocation;//[Offset: 0xc2c, Size: 12]
	Vector LootFinalLocation;//[Offset: 0xc38, Size: 12]
	Vector InstancedLoot_TossDirection;//[Offset: 0xc44, Size: 12]
	float InstancedLoot_TossSpeed;//[Offset: 0xc50, Size: 4]
	float InstancedLoot_TossConeHalfAngle;//[Offset: 0xc54, Size: 4]
	Vector LootSpawnLocation_Athena;//[Offset: 0xc58, Size: 12]
	Rotator LootTossDirection_Athena;//[Offset: 0xc64, Size: 12]
	float LootTossSpeed_Athena;//[Offset: 0xc70, Size: 4]
	float LootTossConeHalfAngle_Athena;//[Offset: 0xc74, Size: 4]
	enum HighestRarity;//[Offset: 0xc78, Size: 1]
	bool bUseLootProperties_Athena;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc79, Size: 1]
	bool bAlwaysShowContainer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc79, Size: 1]
	bool bAlwaysMaintainLoot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc79, Size: 1]
	bool bDestroyContainerOnSearch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc79, Size: 1]
	bool bForceHidePickupMinimapIndicator;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc79, Size: 1]
	bool bForceSpawnLootOnDestruction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc79, Size: 1]
	bool bForceTossLootOnSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc79, Size: 1]
	bool bAlreadySearched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc79, Size: 1]
	bool bDoNotDropLootOnDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc7a, Size: 1]
	bool bBuriedTreasure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc7a, Size: 1]
	bool bHasRaisedTreasure;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc7a, Size: 1]
	bool bStartAlreadySearched_Athena;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc7a, Size: 1]
	bool bRegenerateLoot;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc7a, Size: 1]
	bool bUseLocationForDrop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc7a, Size: 1]
	float LootedWeaponsDurabilityModifier;//[Offset: 0xc7c, Size: 4]
	FortSearchBounceData SearchBounceData;//[Offset: 0xc80, Size: 24]
	CurveTableRowHandle SearchSpeed;//[Offset: 0xc98, Size: 16]
	FText SearchText;//[Offset: 0xca8, Size: 24]
	AudioComponent* AudioIndicator_Component;//[Offset: 0xcc0, Size: 8]
	CurveFloat* CurrentInteractBounceCurve;//[Offset: 0xce8, Size: 8]
	CurveFloat* CurrentInteractBounceNormalCurve;//[Offset: 0xcf0, Size: 8]
	float SavedReservedRandomValueResult;//[Offset: 0xcf8, Size: 4]
	float TimeUntilLootRegenerates;//[Offset: 0xcfc, Size: 4]
	Texture* SoundIndicatorIconOverride;//[Offset: 0xd18, Size: 8]
	LinearColor SoundIndicatorTintOverride;//[Offset: 0xd20, Size: 16]
	void StopAudiovisualIndicator();// 0xb5efc00
	void StartAudiovisualIndicator(AudioComponent* ForComponent, enum Type, float Interval);// 0xb5efad8
	void SetSearchLootTierGroup(FName InSearchLootTierGroup);// 0xce49448
	void RaiseTreasure();// 0xce49434
	void OnSetSearched();// 0xbbc0600
	void OnSearchInterrupted();// 0xbbc0600
	void OnRep_LootTier();// 0xb5efabc
	void OnRep_ChosenRandomUpgrade();// 0xb5efaa0
	void OnRep_bAlreadySearched();// 0xb5efa84
	void OnRaiseTreasure();// 0xbbc0600
	void OnLootReset();// 0xbbc0600
	void OnLootRepeat();// 0xbbc0600
	void OnLoot();// 0xbbc0600
	void OnBeginSearch();// 0xbbc0600
	void OnAuthorityRandomUpgradeApplied(out const FName UpgradeTierGroup);// 0xbbc0600
	int GetLootTier();// 0xb5efa50
	void EnableBacchusHighlight();// 0xbbc0600
	void DisableBacchusHighlight();// 0xbbc0600
	bool BP_SpawnLoot(FortPlayerPawn* PlayerPawn);// 0xce49380
	void BP_SetAlreadySearched(bool bInAlreadySearched);// 0xce492d0
	bool BP_IsAlreadySearched();// 0xce49298
	void BounceContainer();// 0xb5efa34

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 1]
	SoundNode* FirstNode;//[Offset: 0x178, Size: 8]
	float VolumeMultiplier;//[Offset: 0x180, Size: 4]
	float PitchMultiplier;//[Offset: 0x184, Size: 4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 928]
	float SubtitlePriority;//[Offset: 0x528, Size: 4]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 1]
	int CookedQualityIndex;//[Offset: 0x534, Size: 4]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LootTierGroupTagOverride
	ScalableFloat IsEnabled;//[Offset: 0x0, Size: 40]
	FName OverrideLootTierGroup;//[Offset: 0x28, Size: 8]
	GameplayTagQuery PlayerTagQuery;//[Offset: 0x30, Size: 72]

--------------------------------
Class: RandomUpgradeData
	FName LootTierGroupIfApplied;//[Offset: 0x0, Size: 8]
	ScalableFloat ChanceToApplyPerContainer;//[Offset: 0x8, Size: 40]
	ScalableFloat Enabled;//[Offset: 0x30, Size: 40]
	RandomUpgradeCalendarData[] CalendarDrivenEnableState;//[Offset: 0x58, Size: 16]
	MarkedActorDisplayInfo[] MarkerDisplayInfoOverride;//[Offset: 0x68, Size: 16]
	Texture* SoundIndicatorIconOverride;//[Offset: 0x78, Size: 8]
	LinearColor SoundIndicatorTintOverride;//[Offset: 0x80, Size: 16]

--------------------------------
Class: RandomUpgradeCalendarData
	enum ReactionWhenEventIsPresent;//[Offset: 0x0, Size: 1]
	FString EventName;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortSearchBounceData
	Vector BounceNormal;//[Offset: 0x0, Size: 12]
	uint32 SearchAnimationCount;//[Offset: 0xc, Size: 4]
	FortPlayerPawn* SearchingPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SimpleMetricInformation
	enum[] CategoryNames;//[Offset: 0x0, Size: 16]
	int[] CategoryValues;//[Offset: 0x10, Size: 16]
	int[] CategoryBudgets;//[Offset: 0x20, Size: 16]
	Vector Location;//[Offset: 0x30, Size: 12]
	float NormalizedGroupBudgetValue;//[Offset: 0x3c, Size: 4]
	int GroupTotalBudget;//[Offset: 0x40, Size: 4]
	Vector NeighbourGroupCenter;//[Offset: 0x44, Size: 12]
	byte[] NeighbourGroupBudgetValue;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DetailedMetricInformation
	MetricStateInformation[] MetricStates;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MetricStateInformation
	FString Name;//[Offset: 0x0, Size: 16]
	FString Description;//[Offset: 0x10, Size: 16]
	enum Category;//[Offset: 0x20, Size: 1]
	int Cost;//[Offset: 0x24, Size: 4]
	int Budget;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortControllerComponent_TransientQuests.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnUrgentQuestTimeExpired;//[Size: 16]
	FortPlayerStateAthena* TrackedHunterBountyTarget;//[Offset: 0xd0, Size: 8]
	int TrackedHunterBountyTargetDistance;//[Offset: 0xd8, Size: 4]
	int TrackedHunterBountyTargetPrice;//[Offset: 0xdc, Size: 4]
	FortPlayerStateAthena* TrackedProtectorBountyTarget;//[Offset: 0xe0, Size: 8]
	FortPlayerStateAthena* TrackedPrimaryHunter;//[Offset: 0xe8, Size: 8]
	FortPlayerStateAthena*[] TrackedBountyHunters;//[Offset: 0xf8, Size: 16]
	FortUrgentQuestItemDefinition* ProtectorQuestToGrant;//[Offset: 0x108, Size: 8]
	FortUrgentQuestItemDefinition* TargetQuestToGrant;//[Offset: 0x110, Size: 8]
	UrgentQuestData[] ActiveUrgentQuests;//[Offset: 0x180, Size: 16]
	<GameplayAbilitySpecHandle,FortQuestItemDefinition*> AbilityHandleQuestDefinitions;//[Offset: 0x210, Size: 80]
	void StopPlayerBountyThreatLevelUpdates();// 0xcf9e6fc
	void OnUrgentQuestTimeExpired__DelegateSignature(out const UrgentQuestData UrgentQuestData);// 0xbbc0600
	void OnUrgentQuestStarted__DelegateSignature(out const UrgentQuestData UrgentQuestData, float EventTimeRemaining);// 0xbbc0600
	void OnUrgentQuestEnded__DelegateSignature(out const GameplayTag UrgentQuestTag);// 0xbbc0600
	void OnRep_TrackedHunterBountyTargetDistance();// 0xcf9e6e0
	void OnPlayerBountyThreatLevelUpdated__DelegateSignature(enum PlayerBountyThreatLevel);// 0xbbc0600
	void OnPlayerBountyThreatLevelEnded__DelegateSignature();// 0xbbc0600
	void GrantTransientQuest(const FortQuestItemDefinition* QuestDefToGrant);// 0xcf9e638
	int GetTrackedHunterBountyTargetPrice();// 0xcf9e61c
	int GetTrackedHunterBountyTargetDistance();// 0xcf9e600
	void ClientSetBountyTargetNPCIcon(const Texture2D* NPCIcon);// 0xcf9e534
	void ClientSetBountyHunterNPCIcon(const Texture2D* NPCIcon);// 0xcf9e468
	void ClientRemoveTransientQuest(const FortQuestItemDefinition* QuestItemDef);// 0xcf9e3b8
	void ClientRemoveThreatLevelBind();// 0xcf9e39c
	void ClientGrantTransientQuest(const FortQuestItemDefinition* QuestItemDef);// 0xcf9e2ec
	void ClientBroadcastOnUrgentQuestStarted(const UrgentQuestData UrgentQuestData, float EventTimeRemaining);// 0xcf9e1f0
	void ClientBroadcastOnUrgentQuestEnded(const GameplayTag EventTag);// 0xcf9e140
	void ClientBroadcastOnPlayerBountyThreatLevelUpdated(enum NewPlayerBountyThreatLevel);// 0xcf9e090
	void CleanupCompletedQuest(const FortQuestItemDefinition* CompletedQuestDef);// 0xcf9dfe8

--------------------------------
Class: FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: UrgentQuestData
	GameplayTag EventTag;//[Offset: 0x0, Size: 8]
	float TotalEventTime;//[Offset: 0x8, Size: 4]
	bool bQuestCompleteOnTimeExpiration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bDisplayHUDData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	FText EventTitle;//[Offset: 0x10, Size: 24]
	FText EventSubtitle;//[Offset: 0x28, Size: 24]
	FText EventSubtitleSecondary;//[Offset: 0x40, Size: 24]
	FText EventDescription;//[Offset: 0x58, Size: 24]
	int SortPriority;//[Offset: 0x70, Size: 4]
	bool bReverseProgressBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bShowBountyThreatInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bShowBountyPriceAndDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]
	FortPlayerStateAthena* DisplayPlayer;//[Offset: 0x78, Size: 8]
	FortPlayerStateAthena* AcceptingPlayer;//[Offset: 0x80, Size: 8]
	Texture2D* SocialAvatarBrushPtr;//[Offset: 0x88, Size: 40]
	Object* BountyPriceImage;//[Offset: 0xb0, Size: 8]
	Object* AlertIcon;//[Offset: 0xb8, Size: 8]
	SoundBase* SpecialEventStartedSound;//[Offset: 0xc0, Size: 40]
	DateTime EventStartTime;//[Offset: 0xe8, Size: 8]
	TimerHandle EventTimerHandle;//[Offset: 0xf0, Size: 8]
	LinearColor AlertIconBorderColor;//[Offset: 0xf8, Size: 16]
	Vector2D AlertIconBrushSize;//[Offset: 0x108, Size: 8]

--------------------------------
Class: FortQuestItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum QuestType;//[Offset: 0x3c0, Size: 1]
	enum QuestSubtype;//[Offset: 0x3c1, Size: 1]
	bool bShouldDisplayOverallQuestInformation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c2, Size: 1]
	bool bAthenaUpdateObjectiveOncePerMatch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c2, Size: 1]
	bool bAthenaGrantRarityToken;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c2, Size: 1]
	bool bShouldAutoClaim;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c2, Size: 1]
	bool bShouldGetFullMatchProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c2, Size: 1]
	bool bAthenaMustCompleteInSingleMatch;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c2, Size: 1]
	bool bUpdateObjectiveOncePerMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c3, Size: 1]
	bool IsStreamingRequired;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c3, Size: 1]
	bool bExpandsStormShield;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c3, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c3, Size: 1]
	FortTandemCharacterData* TandemCharacterData;//[Offset: 0x3c8, Size: 40]
	SoundBase* CharacterCompletionAudio;//[Offset: 0x3f0, Size: 40]
	float CharacterCompletionAudioDelay;//[Offset: 0x418, Size: 4]
	bool bSuppressQuestGrantedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 1]
	bool bInitiallySuppressedReplacementQuest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41c, Size: 1]
	bool bIncludedInCategories;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41c, Size: 1]
	bool bAutoLaunch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41c, Size: 1]
	bool bDeprecated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41c, Size: 1]
	bool bDisableBackendConditionEvaluation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41c, Size: 1]
	bool bAllowTileMatching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41c, Size: 1]
	bool bAllowPlayNowNavigation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41c, Size: 1]
	bool bAllowMissionAlertMatchesBypassingTileRequirements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41d, Size: 1]
	bool bTutorialQuest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41d, Size: 1]
	bool bHideStageDescription;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41d, Size: 1]
	bool bHideIncompleteObjectiveLocations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41d, Size: 1]
	int ExpirationDuration;//[Offset: 0x420, Size: 4]
	int ObjectiveCompletionCount;//[Offset: 0x424, Size: 4]
	int Threshold;//[Offset: 0x428, Size: 4]
	FortItemQuantityPair[] Rewards;//[Offset: 0x430, Size: 16]
	DataTable* RewardsTable;//[Offset: 0x440, Size: 8]
	FString QuestPool;//[Offset: 0x448, Size: 16]
	FortHiddenRewardQuantityPair[] HiddenRewards;//[Offset: 0x468, Size: 16]
	FString[] FeatureRewards;//[Offset: 0x478, Size: 16]
	FortMcpQuestRewardInfo[] SelectableRewards;//[Offset: 0x488, Size: 16]
	FortMcpQuestObjectiveInfo[] Objectives;//[Offset: 0x498, Size: 16]
	FortQuestItemDefinition*[] TransientPrerequisiteQuests;//[Offset: 0x4a8, Size: 16]
	bool bGrantTransientQuestToSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	bool bTransientAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 1]
	bool bAllowMultipleCompletionsPerMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	GameplayTagContainer Prerequisites;//[Offset: 0x4c0, Size: 32]
	FortQuestItemDefinition* PrerequisiteQuest;//[Offset: 0x4e0, Size: 40]
	DataTableRowHandle PrerequisiteObjective;//[Offset: 0x508, Size: 16]
	float Weight;//[Offset: 0x518, Size: 4]
	uint16 GranterWindowPeriodMinutes;//[Offset: 0x51c, Size: 2]
	uint16 GranterCooldownPeriodSeconds;//[Offset: 0x51e, Size: 2]
	DataTableRowHandle Category;//[Offset: 0x520, Size: 16]
	FortConversation* IntroConversation;//[Offset: 0x530, Size: 40]
	FortConversation* SelectRewardsConversation;//[Offset: 0x558, Size: 40]
	FortConversation* ClaimConversation;//[Offset: 0x580, Size: 40]
	FText RewardHeaderText;//[Offset: 0x5a8, Size: 24]
	FText RewardDescription;//[Offset: 0x5c0, Size: 24]
	FText CompletionText;//[Offset: 0x5d8, Size: 24]
	FText NPCInteractionText;//[Offset: 0x5f0, Size: 24]
	FortQuestMissionCreationContext[] MissionCreationContexts;//[Offset: 0x608, Size: 16]
	FortMissionConfigDataParams MissionConfigMetadata;//[Offset: 0x618, Size: 16]
	uint32 ClaimPriority;//[Offset: 0x628, Size: 4]
	int SortPriority;//[Offset: 0x62c, Size: 4]
	FortAbilitySet* QuestAbilitySet;//[Offset: 0x630, Size: 40]
	bool bHideQuestProgressNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bHideQuestRewardNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	bool bForceExpiryExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65a, Size: 1]
	bool ShouldDisplayOverallQuestInformation();// 0xd1b24b0
	bool ShouldAutoLaunch();// 0xd1b2478
	bool IsTutorialQuest();// 0xd1b2440
	bool IsPunchCardQuest();// 0xd1b2408
	bool IsIncludedInCategories();// 0xd1b23d0
	bool IsHidden();// 0xd1b2398
	bool IsGroupChallenge();// 0xd1b2360
	bool IsGlyphQuest();// 0xd1b2328
	bool IsFeatQuest();// 0xd1b22e8
	bool IsDeprecated();// 0xd1b22b0
	float GetWeight();// 0xd1b227c
	bool GetUpdateObjectiveOncePerMatch();// 0xd1b2244
	FortTandemCharacterData* GetTandemCharacterData();// 0xd1b2210
	FortTandemCharacterData* GetSoftTandemCharacterData();// 0xd1b2134
	FortConversation* GetSelectRewardsConversation();// 0xd1b2100
	FortMcpQuestRewardInfo[] GetSelectableRewards_BP();// 0xd1b2090
	enum GetRewardType();// 0xd1b205c
	FortItemQuantityPair[] GetRewards_BP();// 0xd1b1fbc
	FortRewardInfo GetRewardInfo_BP();// 0xd1b1ed4
	FText GetRewardHeaderText();// 0xd1b1e04
	FText GetRewardDescription();// 0xd1b1d34
	enum GetQuestType();// 0xd1b1d00
	enum GetQuestSubtype();// 0xd1b1ccc
	FortQuestItemDefinition* GetPrerequisiteQuest();// 0xd1b1c98
	DataTableRowHandle GetPrerequisiteObjective();// 0xd1b1c64
	int GetPartialObjectiveCompletionCount();// 0xd1b1c30
	FortMcpQuestObjectiveInfo[] GetObjectives_BP();// 0xd1b1b88
	int GetObjectiveNeededToComplete();// 0xd1b1b54
	FortConversation* GetIntroConversation();// 0xd1b1b20
	FortHiddenRewardQuantityPair[] GetHiddenRewards_BP();// 0xd1b1a80
	FText GetCompletionText();// 0xd1b19b0
	FortConversation* GetClaimConversation();// 0xd1b197c
	FortRewardInfo GetChallengeChainRewardInfo(bool bGetAllQuestRewards);// 0xd1b1840
	DataTableRowHandle GetCategory();// 0xd1b180c
	bool GetAthenaUpdateObjectiveOncePerMatch();// 0xd1b17d4
	bool GetAthenaObjectiveMustBeCompletedInASingleMatch();// 0xd1b179c
	bool ExpandsStormShield();// 0xd1b1764
	bool CanProgressInBRWarmup();// 0xd1b172c
	bool CanPartyAssist();// 0xd1b16f4
	bool AllowsTileMatching();// 0xd1b16d4
	bool AllowsPlayNowNavigation();// 0xd1b16b4

--------------------------------
Class: FortTandemCharacterData.PrimaryDataAsset.DataAsset.Object
	GameplayTag GameplayTag;//[Offset: 0x30, Size: 8]
	GameplayTagContainer POILocations;//[Offset: 0x38, Size: 32]
	FText[] POITextOverrides;//[Offset: 0x58, Size: 16]
	FText DisplayName;//[Offset: 0x68, Size: 24]
	FText GeneralDescription;//[Offset: 0x80, Size: 24]
	FText AdditionalDescription;//[Offset: 0x98, Size: 24]
	FText BehaviorDescription;//[Offset: 0xb0, Size: 24]
	Object* ToastIcon;//[Offset: 0xc8, Size: 40]
	Object* EntryListIcon;//[Offset: 0xf0, Size: 40]
	Object* SidePanelIcon;//[Offset: 0x118, Size: 40]

--------------------------------
Class: FortHiddenRewardQuantityPair
	FName TemplateId;//[Offset: 0x0, Size: 8]
	int Quantity;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortMcpQuestRewardInfo
	FortItemQuantityPair[] Rewards;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortMcpQuestObjectiveInfo
	FName BackendName;//[Offset: 0x0, Size: 8]
	FortQuestObjectiveStat[] InlineObjectiveStats;//[Offset: 0x8, Size: 16]
	DataTableRowHandle ObjectiveStatHandle;//[Offset: 0x18, Size: 16]
	DataTableRowHandle[] AlternativeStatHandles;//[Offset: 0x28, Size: 16]
	enum ItemEvent;//[Offset: 0x38, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 1]
	bool bRequirePrimaryMissionCompletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 1]
	bool bCanProgressInZone;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 1]
	bool bDisplayDynamicAnnouncementUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 1]
	enum DynamicStatusUpdateType;//[Offset: 0x3a, Size: 1]
	enum LinkVaultTab;//[Offset: 0x3b, Size: 1]
	enum LinkToItemManagement;//[Offset: 0x3c, Size: 1]
	FortItemDefinition* ItemReference;//[Offset: 0x40, Size: 40]
	FString ItemTemplateIdOverride;//[Offset: 0x68, Size: 16]
	FName LinkSquadID;//[Offset: 0x78, Size: 8]
	int LinkSquadIndex;//[Offset: 0x80, Size: 4]
	FText Description;//[Offset: 0x88, Size: 24]
	FText HudShortDescription;//[Offset: 0xa0, Size: 24]
	Texture2D* HudIcon;//[Offset: 0xb8, Size: 40]
	int Count;//[Offset: 0xe0, Size: 4]
	int Stage;//[Offset: 0xe4, Size: 4]
	int DynamicStatusUpdatePercentInterval;//[Offset: 0xe8, Size: 4]
	float DynamicUpdateCompletionDelay;//[Offset: 0xec, Size: 4]
	class FortScriptedAction* ScriptedAction;//[Offset: 0xf0, Size: 40]
	class FortScriptedAction* FrontendScriptedAction;//[Offset: 0x118, Size: 40]

--------------------------------
Class: FortQuestObjectiveStat
	InlineObjectiveStatTagCheckEntry[] TagConditions;//[Offset: 0x0, Size: 16]
	FString Condition;//[Offset: 0x10, Size: 16]
	FString[] TemplateIds;//[Offset: 0x20, Size: 16]
	enum Type;//[Offset: 0x30, Size: 1]
	bool bIsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bHasInclusiveTargetTags;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bHasInclusiveSourceTags;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 1]
	bool bHasInclusiveContextTags;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 1]

--------------------------------
Class: InlineObjectiveStatTagCheckEntry
	GameplayTag Tag;//[Offset: 0x0, Size: 8]
	enum Type;//[Offset: 0x8, Size: 1]
	bool Require;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]

--------------------------------
Class: FortScriptedAction.Actor.Object
	enum ActionEnvironment;//[Offset: 0x228, Size: 1]
	FortClientEventName ClientEventTrigger;//[Offset: 0x22c, Size: 16]
	int ActionPriority;//[Offset: 0x23c, Size: 4]
	bool bAllowOtherActionsWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	FortScriptedActionParams CachedParams;//[Offset: 0x248, Size: 48]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	void GetParams(out FortScriptedActionParams Params);// 0xd1cdc9c
	void Execute(out const FortScriptedActionParams Params);// 0xd1cdbcc
	void CompleteAction(bool bRegisterActionAgain);// 0xd1cdb1c
	bool CanExecute(out const FortScriptedActionParams Params);// 0xd1cda40
	void CancelAction(bool bRegisterActionAgain);// 0xd1cd990

--------------------------------
Class: FortClientEventName.FortEventName

--------------------------------
Class: FortEventName
	FName CategoryName;//[Offset: 0x0, Size: 8]
	FName EventName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortScriptedActionParams
	FortPlayerController* Player;//[Offset: 0x0, Size: 8]
	enum SourceType;//[Offset: 0x8, Size: 1]
	FortItem* SourceItem;//[Offset: 0x10, Size: 8]
	DataTableRowHandle SourceData;//[Offset: 0x18, Size: 16]
	FName SourceName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortConversation.DataAsset.Object
	FortConversationSentence[] Sentences;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortConversationSentence
	FortSentenceAudio SpeechAudio;//[Offset: 0x0, Size: 64]
	FText SpeechText;//[Offset: 0x40, Size: 24]
	Texture2D* TalkingHeadTexture;//[Offset: 0x58, Size: 40]
	FText TalkingHeadTitle;//[Offset: 0x80, Size: 24]
	AnimMontage* AnimMontage;//[Offset: 0x98, Size: 40]
	float PostSentenceDelay;//[Offset: 0xc0, Size: 4]
	float DisplayDuration;//[Offset: 0xc4, Size: 4]

--------------------------------
Class: FortSentenceAudio
	SoundBase* Audio;//[Offset: 0x0, Size: 40]
	FortFeedbackHandle Handle;//[Offset: 0x28, Size: 24]

--------------------------------
Class: FortQuestMissionCreationContext
	FortMissionInfo* MissionInfo;//[Offset: 0x0, Size: 40]
	GameplayTagContainer[] MissionCreationContextTags;//[Offset: 0x28, Size: 16]
	bool bSetQuestOwnerAsMissionOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int MaxNumberToSpawnInWorld;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: FortMissionInfo.PrimaryDataAsset.DataAsset.Object
	class FortMission* MissionRef;//[Offset: 0x30, Size: 40]
	byte MissionType;//[Offset: 0x58, Size: 1]
	GameplayTagContainer MissionTags;//[Offset: 0x60, Size: 32]
	float TimeOfDaySpeed;//[Offset: 0x80, Size: 4]
	float ZoneEndDelay;//[Offset: 0x84, Size: 4]
	float ZoneEndDelayOverrideForFailure;//[Offset: 0x88, Size: 4]
	FortBadgeItemDefinition* MissionRewardBadge;//[Offset: 0x90, Size: 8]
	FName MissionRewardItemsLootTierGroup;//[Offset: 0x98, Size: 8]
	int MaxRewardLootTierPoints;//[Offset: 0xa0, Size: 4]
	int ParTime;//[Offset: 0xa4, Size: 4]
	FortBadgeItemDefinition* UnderParBadge;//[Offset: 0xa8, Size: 8]
	int MaxMissionPoints;//[Offset: 0xb0, Size: 4]
	bool bVictoryTileRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	FText MissionDescription;//[Offset: 0xb8, Size: 24]
	FortMultiSizeBrush MissionIcons;//[Offset: 0xd0, Size: 816]
	MediaSource* EndOfMissionMediaSource;//[Offset: 0x400, Size: 8]
	bool bSkipEndOfMissionVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	int DaysToLive;//[Offset: 0x40c, Size: 4]
	FortObjectiveBlock[] ObjectiveBlocks;//[Offset: 0x410, Size: 16]
	bool bShowMinimapIconsOnlyIfFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float ExpectedCompletionTime;//[Offset: 0x424, Size: 4]
	float MissionEncounterTime;//[Offset: 0x428, Size: 4]
	FortMissionPlacementItems MissionPlacementInfo;//[Offset: 0x430, Size: 64]
	float MinDistanceToOtherMissions;//[Offset: 0x470, Size: 4]
	float MinDistanceToAllowSpawnPad;//[Offset: 0x474, Size: 4]
	FortPlacementActorFinderInfo PlacementActorInfo;//[Offset: 0x478, Size: 24]
	bool bStartPlayingOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bRequiresActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	int BluGloActivationRequirement;//[Offset: 0x494, Size: 4]
	bool bAllowDifficultyIncrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	FText RewardsTitleText;//[Offset: 0x4a0, Size: 24]
	FText RewardsDescriptionText;//[Offset: 0x4b8, Size: 24]
	FText NonParticipationRewardsDescriptionText;//[Offset: 0x4d0, Size: 24]
	FortMissionPopupWidgetData PopupWidgetData;//[Offset: 0x4e8, Size: 464]
	FortMissionWeightedRewards* WeightedRewards;//[Offset: 0x6b8, Size: 8]
	bool bIsGroupContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bUseRRV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	FText MissionName;//[Offset: 0x6c8, Size: 24]
	bool bShouldDisplayMissionName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	FortEncounterProfile[] EncounterProfiles;//[Offset: 0x6e8, Size: 16]
	FortEncounterSequenceSettings[] EncounterSequences;//[Offset: 0x6f8, Size: 16]
	FortDifficultyOptionSetMission* MissionOptions;//[Offset: 0x708, Size: 40]
	GameplayTagContainer MissionDifficultyOptionTags;//[Offset: 0x730, Size: 32]
	FortMissionTaggedRewards[] TaggedRewards;//[Offset: 0x750, Size: 16]
	MissionPerDifficultyProperties[] PerDifficultyProperties;//[Offset: 0x760, Size: 16]
	FortMissionConfigDataParams ConfigParams;//[Offset: 0x770, Size: 16]

--------------------------------
Class: FortMission.FortMissionState.Actor.Object
	FortMissionInfo* MissionInfo;//[Offset: 0x268, Size: 8]
	class FortBotMissionLogic* BotLogicClass;//[Offset: 0x270, Size: 8]
	FortBotMissionLogic* BotLogic;//[Offset: 0x278, Size: 8]
	FortItemDefinition*[] MissionPreloadAssets;//[Offset: 0x280, Size: 16]
	class FortClientAnnouncement_Basic* AnnouncementClassOverride;//[Offset: 0x290, Size: 8]
	FortMissionGenerator* MissionGenerator;//[Offset: 0x298, Size: 8]
	byte MissionCategory;//[Offset: 0x2a0, Size: 1]
	int UIIndex;//[Offset: 0x2a4, Size: 4]
	UniqueNetIdRepl QuestOwnerAccount;//[Offset: 0x2a8, Size: 40]
	FortMissionEventName[] MissionEventNames;//[Offset: 0x2d0, Size: 16]
	MulticastInlineDelegateProperty OnObjectivesUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnMissionInfoSet;//[Size: 16]
	FortMissionPlacementActorPreferredTagInfo[] PlacementActorPreferredTagData;//[Offset: 0x318, Size: 16]
	bool bLoadedFromRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bFiredParTimeEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	bool bAreNonpublicMatchesLeecherExempt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 1]
	float LeecherPity;//[Offset: 0x32c, Size: 4]
	float LeecherMinMultiplier;//[Offset: 0x330, Size: 4]
	float LeecherCutoff;//[Offset: 0x334, Size: 4]
	float LeecherTimeScalingCutoff;//[Offset: 0x338, Size: 4]
	float LeecherTimeScalingPenaltyMultipler;//[Offset: 0x33c, Size: 4]
	float LeecherCombatScoreMultiplier;//[Offset: 0x340, Size: 4]
	float LeecherBuildingScoreMultiplier;//[Offset: 0x344, Size: 4]
	float LeecherUtilityScoreMultiplier;//[Offset: 0x348, Size: 4]
	int LeecherCombatLowBar;//[Offset: 0x34c, Size: 4]
	int LeecherBuildingLowBar;//[Offset: 0x350, Size: 4]
	int LeecherUtilityLowBar;//[Offset: 0x354, Size: 4]
	float MissionActivationTime;//[Offset: 0x358, Size: 4]
	FortMissionFocusDisplayData CurrentFocusData;//[Offset: 0x360, Size: 32]
	bool bSilentDestroyNextFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	FortObjectiveBase*[] ActiveObjectives;//[Offset: 0x388, Size: 16]
	UniqueNetIdRepl[] ParticipatingAccounts;//[Offset: 0x398, Size: 16]
	UniqueNetIdRepl[] ParticipatingButDisconnectedAccounts;//[Offset: 0x3a8, Size: 16]
	enum MissionStatus;//[Offset: 0x3b8, Size: 1]
	GameplayTagContainer MissionCompletionTags;//[Offset: 0x3c0, Size: 32]
	bool bIsMissionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	enum MissionAudibility;//[Offset: 0x3e1, Size: 1]
	int CurrentObjectiveBlockIndex;//[Offset: 0x3e4, Size: 4]
	bool bIsMissionVisibleOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	GUID MissionGuid;//[Offset: 0x3ec, Size: 16]
	int StartingDay;//[Offset: 0x3fc, Size: 4]
	FortMissionTimerComponent* TimerComponent;//[Offset: 0x400, Size: 8]
	FortMissionTimerComponent* TimerElapsedComponent;//[Offset: 0x408, Size: 8]
	bool bObjectiveTimerExpireShouldFailObjectives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bMissionTimerExpireShouldFailMission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	bool bNeedsEnemyKilledEventForAllPawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 1]
	int ChosenRewardIdx;//[Offset: 0x414, Size: 4]
	FortBadgeCountArray PotentialBadgesArray;//[Offset: 0x418, Size: 280]
	FortGeneratedDifficultyOptions GeneratedMissionOptions;//[Offset: 0x5e8, Size: 64]
	AudioComponent* MissionCompletionStinger;//[Offset: 0x628, Size: 8]
	FortMissionInstancedConfigData ConfigData;//[Offset: 0x630, Size: 16]
	void StopMissionAIEncounter(FortAIEncounterInfo* EncounterToStop);// 0xd0d169c
	void StopEncounterSequence(FortAIEncounterSequence* SequenceToStop);// 0xd0d15f4
	FortAIEncounterInfo* StartMissionAIEncounterFromGeneratedProfile(int GeneratedEncounterProfileIndex, out const Actor*[] TargetActors, FortAIAssignmentSettings* AssignmentSettings, EncounterEnvironmentQueryInfo EnvironmentQueryInfo, Actor* QueryActor, GameplayTagContainer InjectedTags, FortEncounterSettings EncounterSettings, int ActivationDelay, bool bUseAssignments);// 0xd0d1108
	FortAIEncounterInfo* StartMissionAIEncounter(class FortAIEncounterInfo EncounterTemplate, out const Actor*[] TargetActors, FortAIAssignmentSettings* AssignmentSettings, EncounterEnvironmentQueryInfo EnvironmentQueryInfo, Actor* QueryActor, GameplayTagContainer InjectedTags, FortEncounterSettings EncounterSettings, int ActivationDelay);// 0xd0d0c68
	static Actor*[] SpawnAtPlacementActorsAsArray(FortMission* Mission, out bool bSucceeded);// 0xd0d0b38
	void SetUiVisibility(bool bInIsMissionVisible);// 0xd0d0a88
	void SetToSilentDestroy();// 0xd0d0a74
	void SetTimerElapsedComponent(FortMissionTimerComponent* InTimerElapsedComponent);// 0xd0d09d0
	void SetTimerComponent(FortMissionTimerComponent* InTimerComponent);// 0xd0d092c
	void SetRespawnTextOverride(out const FText NewText);// 0xd0d081c
	void SetMissionGameDifficulty(float GameDifficultyValue);// 0xd0d0774
	void SendBotLogicMessage(FString EventName);// 0xd0d06c0
	bool RemoveParticipantAccount(out UniqueNetIdRepl AbandoningPlayerId);// 0xd0d056c
	void RemoveGoalsFromEncounterAssignment(FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIEncounterInfo* Encounter, out const FortAIGoalInfo[] GoalInfos);// 0xd0d03a0
	void RemoveGoalFromEncounterAssignment(FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIEncounterInfo* Encounter, out const FortAIGoalInfo GoalInfo);// 0xd0d01b4
	void RegisterForContainerSearchedEvent(delegate Delegate, out const GameplayTagQuery ContainerRequirements);// 0xd0d007c
	void RegisterForBuildingHarvestedByPlayerEvent(delegate Delegate, out const GameplayTagQuery HarvestedBuildingRequirements);// 0xd0cff44
	void RecordResourceActorSpawn(Actor* SpawnedActor);// 0xd0cfe9c
	void ProvideAllPotentialBadges(out const GameplayTag[] BadgeTags);// 0xd0cfddc
	void OnWaveCompleted(int Tier, int Wave, enum Result);// 0xd0cfcb8
	void OnRep_UIIndex();// 0xd0cfc9c
	void OnRep_QuestOwnerAccount();// 0xd0cfc80
	void OnRep_PotentialBadgesArray();// 0xd0cfc6c
	void OnRep_MissionStatus();// 0xd0cfc50
	void OnRep_MissionInfo();// 0xd0cfc3c
	void OnRep_CurrentFocusDisplayData();// 0xd0cfc28
	void OnRep_bIsMissionVisible();// 0xd0cfc0c
	void OnRep_ActiveObjectives();// 0xd0cfbf8
	void OnEncounterEnemyAISpawned(FortAIEncounterInfo* Encounter, FortAIPawn* SpawnedEnemy);// 0xbbc0600
	void MissionTimerVisibilityOverrideSet();// 0xbbc0600
	void MissionTimerSet();// 0xd0cfbdc
	void LoadPossibleMissionsManually(out GUID[] OutAddedMissionGuids, out FortPossibleMission[] PossibleMissionsToLoad);// 0xd0cfac4
	void LoadMissionsManually(out GUID[] OutAddedMissionGuids, out FortMissionInfo*[] MissionsToLoad);// 0xd0cf9a8
	bool IsPlayerParticipating(FortPlayerController* PlayerController);// 0xd0cf8f4
	void InitializeModifiersRRV(int Seed);// 0xd0cf84c
	bool InitializeActorsForMissionMatchingItemIdentifyingQuery(FortMission* Mission, out const GameplayTagQuery TagQuery, out Actor*[] OutActorsInitialized);// 0xd0cf6b4
	bool InitializeActorsForMission(FortMission* Mission, out Actor*[] OutActorsInitialized);// 0xd0cf5a8
	bool HasMissionPar();// 0xd0cf56c
	void HandleEnemyKilled(FortPlayerController* KilledBy, FortPawn* KilledPawn, out const GameplayTagContainer SourceTags);// 0xbbc0600
	void HandleEncounterEnemyAISpawned(FortAIEncounterInfo* Encounter, FortAIPawn* SpawnedEnemy);// 0xd0cf488
	void GrantRewardsByTag(const GameplayTag RewardTag, byte RewardType);// 0xd0cf3a0
	void GetTieredModifierSet(FName TieredModifierSetName, out TieredModifierSetData[] OutModifierSetData);// 0xd0cf2a0
	bool GetSpawnLocationsMatchingQuery(out const GameplayTagQuery TagQuery, out Vector[] SpawnLocations);// 0xd0cf148
	bool GetSpawnLocationActorsMatchingQuery(out const GameplayTagQuery TagQuery, out Actor*[] SpawnLocationActors);// 0xd0ceff0
	void GetSpawningDistanceMinMaxOverrideForAIEncounter(const FortAIEncounterInfo* Encounter, out float OutSpawningDistanceMin, out float OutSpawningDistanceMax);// 0xd0ceea4
	void GetRewardItemsByTag(const GameplayTag RewardTag, out FortWorldItemDefinition*[] OutRewardItems);// 0xd0ceda4
	FText GetRespawnTextOverride();// 0xd0ceccc
	int GetPawnDamageLootTier(FortPlayerController* PlayerController);// 0xd0cec1c
	FortPlayerController*[] GetParticipatingMissionControllers();// 0xd0ceb7c
	enum GetObjectiveStatusByHandle(out const GameplayTagContainer ObjectiveHandle);// 0xd0ceaa4
	GameplayTagContainer[] GetObjectiveHandlesWithTag(GameplayTag ObjectiveTag, int MaxNumberOfObjectives);// 0xd0ce9a0
	FortObjectiveBase* GetObjectiveByHandle(out const GameplayTagContainer ObjectiveHandle);// 0xd0ce8c8
	FText GetMissionName();// 0xd0ce7f0
	GUID GetMissionGuid();// 0xd0ce7bc
	FText GetMissionCompletionResultText(enum Result);// 0xd0ce698
	float GetExpectedCompletionTime();// 0xd0ce65c
	int GetDaysRemainingBeforeOverPar();// 0xd0ce628
	float GetCurrentFocusPercentage();// 0xd0ce5f4
	FText GetCurrentFocusDisplayText();// 0xd0ce524
	int GetCurrentBluGloRewards();// 0xd0ce4e8
	FortMissionConfigData* GetConfigData(GameplayTag InBucketTag);// 0xd0ce438
	int GetBuildingDamageLootTier(FortPlayerController* PlayerController);// 0xd0ce388
	class FortClientAnnouncement_Basic GetAnnouncementClassOverride();// 0xd0ce354
	FortObjectiveBase*[] GetAllObjectives();// 0xd0ce2b4
	bool GetAdditionalMissionSuccessBadges(out FortWorldItemDefinition*[] SuccessItems);// 0xbbc0600
	int GetAdditionalMissionCompletionMissionPoints(enum CompletionStatus);// 0xbbc0600
	bool GetActorsSpawnedMatchingQuery(out const GameplayTagQuery TagQuery, out Actor*[] SpawnedActors);// 0xd0ce15c
	void FocusThisMission(FText FocusDisplayText, float FocusPercentage);// 0xd0cdf98
	void FindGoalLocationsForEncounterAssignment(out const FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIEncounterInfo* Encounter, out Vector[] OutGoalLocations);// 0xd0cde04
	FortAIEncounterSequence* CreateEncounterSequenceByIndex(int EncounterSequenceIndex);// 0xd0cdd54
	FortAIEncounterSequence* CreateEncounterSequence(out const GameplayTagContainer SequenceTags);// 0xd0cdc7c
	enum CreateEncounterAssignment(out const GameplayTagContainer AssignmentTags, out const FortAIEncounterInfo* Encounter, FortAIAssignmentSettings* AssignmentSettings, class FortAIGoalProvider GoalProvider, out FortAIAssignmentIdentifier AssignmentIdentifier);// 0xd0cda54
	FortMissionWeightedReward ChooseRandomReward();// 0xd0cd904
	void BlueprintPostMissionLoad();// 0xbbc0600
	void BlueprintOnStartPlaying();// 0xbbc0600
	void BlueprintOnMissionEnd(enum Status);// 0xbbc0600
	void BlueprintOnActivated();// 0xbbc0600
	void BlueprintCustomHandleMissionEvent(GUID InMissionGuid, GameplayTagContainer ObjectiveHandle, FortMissionEventParams* Params, bool DO_NOT_USE_THIS_OR_VARIABLES_BELOW, Object* EventFocus, const DataAsset* EventContent, Actor* EventInstigator, int GenericInt, float GenericFloat, out const FText GenericText, GameplayTagContainer GameplayTags, out const FortMissionEvent MissionEvent);// 0xbbc0600
	bool BlueprintCanPlayerParticipate(FortPlayerController* PlayerController);// 0xd0cd848
	void AttemptMissionSave(FString OptionalSaveName);// 0xd0cd74c
	void ApplyTieredModifierSet(out const TieredModifierSetData[] ModifierSetData, int Tier, int WaveNum, bool bDeferTemporaryModifiers, out ActiveGameplayModifierHandle[] OutAppliedModifiers);// 0xd0cd564
	bool AddParticipantAccount(FortPlayerController* PlayerController);// 0xd0cd4b0
	void AddOrRemoveTimerTime(float TimeToAdd);// 0xd0cd400
	void AddGoalToEncounterAssignment(FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIEncounterInfo* Encounter, out const FortAIGoalInfo GoalInfo);// 0xd0cd214
	void AddGoalToAssignment(FortAIAssignment* Assignment, out const FortAIGoalInfo GoalInfo);// 0xd0cd0f8
	void AddGoalsToEncounterAssignment(FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIEncounterInfo* Encounter, out const FortAIGoalInfo[] GoalInfos);// 0xd0ccf2c
	void AddGoalsToAssignment(FortAIAssignment* Assignment, out const FortAIGoalInfo[] GoalInfos);// 0xd0cce2c
	void AddCompletionTags(GameplayTagContainer NewCompletionTagContainer);// 0xd0ccd3c
	void AddCompletionTag(GameplayTag NewCompletionTag);// 0xd0ccc94

--------------------------------
Class: FortMissionState.Actor.Object
	MulticastInlineDelegateProperty OnUpdateUI;//[Size: 16]
	MulticastInlineDelegateProperty OnMissionUIEvent;//[Size: 16]
	bool bAlreadySetTimerOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bAlreadyCalledOnAllPlayersLoadedIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	float TimerForOnAllPlayersLoadedIn;//[Offset: 0x24c, Size: 4]
	void UpdateUI();// 0xd0df2a0
	void SetTimerForOnAllPlayersLoadedIn(float Timer);// 0xd0df1fc
	void SendMissionUIEvent(out const GameplayTagContainer EventTags);// 0xd0df12c
	void OnWorldReady();// 0xbbc0600
	void OnMatchStarted();// 0xbbc0600
	void OnAllPlayersLoadedInWrapper();// 0xd0df118
	void OnAllPlayersLoadedIn();// 0xbbc0600

--------------------------------
Class: FortAIEncounterSequence.Object
	FortGeneratedEncounterSequence GeneratedEncounterSequence;//[Offset: 0x28, Size: 48]
	int CurrentEncounterIndexInSequence;//[Offset: 0x58, Size: 4]
	FortAIEncounterInfo* CurrentEncounter;//[Offset: 0x60, Size: 8]
	FortAIDirector* AssociatedAIDirector;//[Offset: 0x68, Size: 8]
	FortMission* AssociatedMission;//[Offset: 0x70, Size: 8]
	Actor*[] TargetActors;//[Offset: 0x78, Size: 16]
	FortAIAssignmentSettings* AssignmentSettings;//[Offset: 0x88, Size: 8]
	EncounterEnvironmentQueryInfo OverrideEnvironmentQueryInfo;//[Offset: 0x90, Size: 40]
	Actor* OptionalQueryActor;//[Offset: 0xb8, Size: 8]
	GameplayTagContainer InjectedTags;//[Offset: 0xc0, Size: 32]
	FortEncounterSettings EncounterSettings;//[Offset: 0xe0, Size: 184]
	void StopCurrentEncounter();// 0xceac544
	FortAIEncounterInfo* StartCurrentEncounterWithSavedData(out enum OutRequestResult, int ActivationDelay);// 0xceac43c
	FortAIEncounterInfo* StartCurrentEncounter(out enum OutRequestResult, out const Actor*[] InTargetActors, FortAIAssignmentSettings* InAssignmentSettings, EncounterEnvironmentQueryInfo InOverrideEnvironmentQueryInfo, Actor* InOptionalQueryActor, GameplayTagContainer InInjectedTags, FortEncounterSettings InEncounterSettings, int ActivationDelay);// 0xceabf90
	void SetEncounterStartingData(out const Actor*[] InTargetActors, FortAIAssignmentSettings* InAssignmentSettings, EncounterEnvironmentQueryInfo InOverrideEnvironmentQueryInfo, Actor* InOptionalQueryActor, GameplayTagContainer InInjectedTags, FortEncounterSettings InEncounterSettings);// 0xceabb88
	enum Previous();// 0xceabb54
	enum Next();// 0xceabb20
	enum Last();// 0xceabaec
	bool IsOnFinalIndexInSequence();// 0xceabab4
	bool HasEncounter();// 0xceaba7c
	int GetNumEncountersInSequence();// 0xceaba48
	int GetEncounterIndexInSequence();// 0xceaba14
	FortAIEncounterInfo* GetCurrentEncounter();// 0xceab9e0
	bool EncounterBelongsToSequence(FortAIEncounterInfo* InEncounter);// 0xceab92c

--------------------------------
Class: FortGeneratedEncounterSequence
	FortEncounterTransitionSettings TransitionSettings;//[Offset: 0x0, Size: 1]
	int StartingGeneratedEncounterProfileIndex;//[Offset: 0x4, Size: 4]
	int NumEncountersInSequence;//[Offset: 0x8, Size: 4]
	GameplayTagContainer EncounterSequenceTags;//[Offset: 0x10, Size: 32]

--------------------------------
Class: FortEncounterTransitionSettings
	bool bShouldMaintainEncounterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAIDirector.Actor.Object
	CurveTableRowHandle MaxAliveCurve;//[Offset: 0x230, Size: 16]
	CurveTableRowHandle MinAliveCurve;//[Offset: 0x240, Size: 16]
	IntensityData IntensityInfo;//[Offset: 0x250, Size: 48]
	FortAIEncounterPIDController AIDirectorPIDController;//[Offset: 0x280, Size: 104]
	FortAIEncounterPIDControllerSettings PIDControllerSettings;//[Offset: 0x2e8, Size: 48]
	UtilityData UtilityContributionData;//[Offset: 0x318, Size: 64]
	float UnreachableLocationPathCost;//[Offset: 0x718, Size: 4]
	FortPlayerPerformanceEstimateSettings PlayerPerformanceEstimateSettings;//[Offset: 0x720, Size: 64]
	bool bUsePrototypeEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x760, Size: 1]
	bool bForceByPassNavMeshForAISpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x761, Size: 1]
	byte[] DebugEncounterDirections;//[Offset: 0x768, Size: 16]
	enum DespawnAIType;//[Offset: 0x778, Size: 1]
	float DespawnDistance;//[Offset: 0x77c, Size: 4]
	float DespawnInterval;//[Offset: 0x780, Size: 4]
	GameplayTagContainer DebugSpawnAIGroupTags;//[Offset: 0x788, Size: 32]
	GameplayTagContainer DebugEncounterTags;//[Offset: 0x7a8, Size: 32]
	float BurstSpawnThreatVisualsEndDelay;//[Offset: 0x7c8, Size: 4]
	FortAIEncounterSpawnGroupCapsProfile[] EncounterSpawnGroupCapSettings;//[Offset: 0x7d0, Size: 16]
	FortAIEncounterSpawnPointsProfile[] EncounterSpawnPointsSettings;//[Offset: 0x7e0, Size: 16]
	FortAIEncounterPawnDifficultyLevelModifier[] EncounterPawnDifficultyLevelModifiers;//[Offset: 0x7f0, Size: 16]
	FortAISpawnGroupUpgradeData[] SpawnGroupUpgrades;//[Offset: 0x800, Size: 16]
	float GuaranteedUpgradeGroupUtilityBonus;//[Offset: 0x810, Size: 4]
	float DiscreteEncounterUtilityDesireMappings;//[Offset: 0x814, Size: 4]
	byte InitialDynamicUtilities;//[Offset: 0x824, Size: 1]
	EncounterEnvironmentQueryInfo SpawnLocationPlacementQueries;//[Offset: 0x828, Size: 40]
	EncounterEnvironmentQueryInfo SpawnLocationActorSearchQueries;//[Offset: 0x8c8, Size: 40]
	FortAIDirectorDataTrackingSettings* DataTrackingSettings;//[Offset: 0x968, Size: 8]
	DataTableRowHandle[] BaseLootDropData;//[Offset: 0x970, Size: 16]
	FortAILootDropModifiers[] LootDropModifiers;//[Offset: 0x980, Size: 16]
	GameplayTagQuery LootDropDenialQuery;//[Offset: 0x990, Size: 72]
	bool bDebugEncounterQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d8, Size: 1]
	FortPlayerControllerZone*[] PlayerControllersForBVTree;//[Offset: 0x9f0, Size: 16]
	FortPlayerPawn*[] PlayerPawnsForBVTree;//[Offset: 0xa00, Size: 16]
	FortAIController*[] AIControllersForBVTree;//[Offset: 0xa50, Size: 16]
	FortAIPawn*[] AIPawnsForBVTree;//[Offset: 0xa60, Size: 16]
	FortAthenaAIBotController*[] AIPlayerBotControllersForBVTree;//[Offset: 0xab0, Size: 16]
	FortPlayerPawn*[] AIPlayerBotPawnsForBVTree;//[Offset: 0xac0, Size: 16]
	FortAthenaAIBotController*[] AINonPlayerBotControllersForBVTree;//[Offset: 0xb10, Size: 16]
	FortPlayerPawn*[] AINonPlayerBotPawnsForBVTree;//[Offset: 0xb20, Size: 16]
	FortPlayerPawn*[] NonPlayerBotPawns;//[Offset: 0xb70, Size: 16]
	FortPlayerPawn*[] PlayerBotPawns;//[Offset: 0xb80, Size: 16]
	FortPlayerPawn*[] PlayerPawns;//[Offset: 0xb90, Size: 16]
	FortAIPawn*[] FortAIPawns;//[Offset: 0xba0, Size: 16]
	bool bUseLODSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	interface class * CachedLODSettingsManager;//[Offset: 0xcd0, Size: 16]
	bool bAsyncProcessUpdateAliveAIs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 1]
	bool bAllowProcessPlayerTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce1, Size: 1]
	int MaxNumLODAIProcessPerFrame;//[Offset: 0xce4, Size: 4]
	FortEncounterPawnNumberCaps DefaultEncounterPawnCaps;//[Offset: 0xce8, Size: 24]
	ReporterGraph* IntensityGraph;//[Offset: 0xd08, Size: 8]
	ReporterGraph* UtilitiesGraph;//[Offset: 0xd10, Size: 8]
	ReporterGraph* PIDValuesGraph;//[Offset: 0xd18, Size: 8]
	ReporterGraph* PIDContributionsGraph;//[Offset: 0xd20, Size: 8]
	bool bNightActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd28, Size: 1]
	bool bAIDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd28, Size: 1]
	bool bRegisteredForDayPhaseChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd28, Size: 1]
	bool bUseSpawnCap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd28, Size: 1]
	int NightCount;//[Offset: 0xd2c, Size: 4]
	float NightEncounterFailureBreatherTime;//[Offset: 0xd30, Size: 4]
	float EncounterPawnSpawnInterval;//[Offset: 0xd34, Size: 4]
	class FortAIEncounterInfo* DefaultNightEncounter;//[Offset: 0xd38, Size: 8]
	class FortAIEncounterInfo* DummyDebugEncounter;//[Offset: 0xd40, Size: 8]
	class FortAIEncounterInfo* BaseEncounterClass;//[Offset: 0xd48, Size: 8]
	int MaxActiveAlive;//[Offset: 0xd50, Size: 4]
	int NumActiveAlive;//[Offset: 0xd54, Size: 4]
	int NumPendingCapRelevantAI;//[Offset: 0xd58, Size: 4]
	PendingSpawnInfo[] PendingSpawns;//[Offset: 0xdb0, Size: 16]
	int MaxAISpawnedPerFrame;//[Offset: 0xdc0, Size: 4]
	int MaxAIDespawnedPerFrame;//[Offset: 0xdc4, Size: 4]
	int DespawnAllAIMaxAIDespawnedPerFrame;//[Offset: 0xdc8, Size: 4]
	FortAIPawn*[] PendingDespawns;//[Offset: 0xdd0, Size: 16]
	int NumWorldSubdivides;//[Offset: 0xde8, Size: 4]
	float MinAISpawnDistanceFromPlayers;//[Offset: 0xdec, Size: 4]
	GameplayTagContainer AmbientThreatPreferredPlacementActorTags;//[Offset: 0xdf0, Size: 32]
	GameplayTagContainer AmbientThreatRequiredPlacementActorTags;//[Offset: 0xe10, Size: 32]
	FortAIEncounterInfo*[] ActiveEncounters;//[Offset: 0xe30, Size: 16]
	FortAIEncounterInfo*[] InactiveEncounters;//[Offset: 0xe40, Size: 16]
	FortPendingStoppedEncounterData[] PendingStoppedEncounters;//[Offset: 0xe50, Size: 16]
	FortAIEncounterInfo* ActiveDefaultEncounter;//[Offset: 0xe60, Size: 8]
	FortAIEncounterInfo* ActiveDummyDebugEncounter;//[Offset: 0xe68, Size: 8]
	FortAIEncounterSequence*[] EncounterSequences;//[Offset: 0xe70, Size: 16]
	EQSRenderingComponent* EQSRenderingComp;//[Offset: 0xe80, Size: 8]
	int DebugGraphUpdateFrequency;//[Offset: 0xe88, Size: 4]
	float MaxNormalLODDistanceToPlayer;//[Offset: 0xe8c, Size: 4]
	float AIRelevantDistanceToPlayer;//[Offset: 0xe90, Size: 4]
	float EncounterRelevantDistanceToPlayer;//[Offset: 0xe94, Size: 4]
	float EncounterRelevantDistanceToDefender;//[Offset: 0xe98, Size: 4]
	interface class[] PatrolWards;//[Offset: 0xea0, Size: 16]
	int MaxTotalActiveAliveAI;//[Offset: 0xeb4, Size: 4]
	int MaxEncounterActiveAliveAI;//[Offset: 0xeb8, Size: 4]
	int MaxSPUsed;//[Offset: 0xebc, Size: 4]
	UtilityTypeFloatPair[] DebugEncounterTopUtilityPercentages;//[Offset: 0xec8, Size: 16]
	CurveFloat*[] DebugEncounterSpawnPointsCurves;//[Offset: 0xed8, Size: 16]
	bool bDebugAllowEncounterModifierTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xee8, Size: 1]
	int SimulatedNumberOfPlayersForAIEncounters;//[Offset: 0xeec, Size: 4]
	int MaxNumberOfEncounterGroups;//[Offset: 0xf68, Size: 4]
	BuildingProp_AISpawner*[] RegisteredAISpawners;//[Offset: 0xf70, Size: 16]
	void UnregisterPatrolWard(interface class PatrolWard);// 0xcea6f04
	FortAIEncounterInfo* StartEncounter(out FString EncounterInstigator, FortDifficultyEncounterSettings* DifficultyEncounterSettings, FortAIEncounterQueryData OptionalQueryData);// 0xcea6d3c
	void RegisterPatrolWard(interface class PatrolWard);// 0xcea6c74
	void ReceivePawnSpawned(FortPawn* SpawnedPawn);// 0xbbc0600
	void PostDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	void OnRestStarted();// 0xbbc0600
	void OnRampStarted();// 0xbbc0600
	void OnPlayerSpawn(FortPlayerPawn* PlayerPawn);// 0xbbc0600
	void OnPlayerDied(FortPlayerPawn* PlayerPawn);// 0xbbc0600
	void OnPeakStarted();// 0xbbc0600
	void OnPawnDied(FortAIPawn* KilledPawn);// 0xbbc0600
	void OnFadeStarted();// 0xbbc0600
	void OnDirectorDeactivated();// 0xbbc0600
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xcea6b3c
	bool IsPointTooCloseToPatrolWards(out const Vector Point, const enum WardEffectTypeFilter);// 0xcea6a34
	bool IsLineTooCloseToPatrolWards(out const Vector LineStart, out const Vector LineEnd);// 0xcea6924
	bool IsAnyEncounterGoalWithinDistanceOfPoint(out const Vector Point, float Distance, bool bOnlyActiveEncounters);// 0xcea67d4
	bool IsAnyAIRelevantToPlayer(FortPlayerPawn* Player);// 0xcea6720
	bool IsAnyActiveEncounterRelevantToPlayer(FortPlayerPawn* Player);// 0xcea666c
	bool IsAnyActiveEncounterRelevantToDefender(FortAIPawn* Defender);// 0xcea65b8
	static Vector GetVectorFromEncounterDirection(byte Direction);// 0xcea650c
	BuildingRift*[] GetRiftsFromClosestActiveEncounterTo(Actor* Target);// 0xcea6420
	int GetNumPlayers();// 0xcea63e4
	int GetNumActiveEncounters();// 0xcea63b0
	static byte GetEncounterDirectionFromVector(Vector DirectionVector);// 0xcea6308
	void GetAmbientThreatEncounterSpawnLocations(out Vector[] AmbientThreatEncounterSpawnLocations);// 0xcea6248
	void Deactivate();// 0xcea622c
	static byte[] ConvertInvalidDirectionsToValidDirections(byte[] InvalidDirections);// 0xcea610c
	void Activate();// 0xcea60f0

--------------------------------
Class: IntensityData
	IntensityContribution[] ContributingFactors;//[Offset: 0x0, Size: 16]
	float ContributionsTotal;//[Offset: 0x10, Size: 4]
	BuildingEditModeMetadata*[] ExceptionEditModes;//[Offset: 0x18, Size: 16]
	float ExceptionEditModeWeight;//[Offset: 0x28, Size: 4]

--------------------------------
Class: IntensityContribution
	byte CombatFactor;//[Offset: 0x0, Size: 1]
	enum ContributingAIDirectorFactor;//[Offset: 0x1, Size: 1]
	float MaxContribution;//[Offset: 0x4, Size: 4]
	bool bModifyContributionByCompletionPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	CurveTableRowHandle CompletionPercentageInitialMultiplier;//[Offset: 0x10, Size: 16]
	CurveTableRowHandle CompletionPercentageToStartReducingMultiplier;//[Offset: 0x20, Size: 16]
	CurveTableRowHandle CompletionPercentageToStopReducingMultiplier;//[Offset: 0x30, Size: 16]
	bool bModifyByNumberOfCriticalEncounterGoals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: FortAIEncounterPIDController
	float ProportionalGain;//[Offset: 0x0, Size: 4]
	float IntegralGain;//[Offset: 0x4, Size: 4]
	float DerivativeGain;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortAIEncounterPIDControllerSettings
	CurveTableRowHandle ProportionalGain;//[Offset: 0x0, Size: 16]
	CurveTableRowHandle IntegralGain;//[Offset: 0x10, Size: 16]
	CurveTableRowHandle DerivativeGain;//[Offset: 0x20, Size: 16]

--------------------------------
Class: UtilityData
	UtilityContribution[] ContributingFactors;//[Offset: 0x0, Size: 16]
	float ContributionsTotal;//[Offset: 0x10, Size: 4]
	bool bApplyRecentSelectionPenalty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RecentlySelectedPenaltyPercentage;//[Offset: 0x18, Size: 4]
	float PenaltyFallOffRate;//[Offset: 0x1c, Size: 4]
	FString DebugGraphName;//[Offset: 0x20, Size: 16]
	LinearColor DebugGraphColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: UtilityContribution
	float MaxContribution;//[Offset: 0x0, Size: 4]
	byte ContributingFactor;//[Offset: 0x4, Size: 1]
	enum ContributingAIDirectorFactor;//[Offset: 0x5, Size: 1]
	byte ContributionType;//[Offset: 0x6, Size: 1]

--------------------------------
Class: FortPlayerPerformanceEstimateSettings
	CurveTableRowHandle PlayerPerformanceEstimateTransformMin;//[Offset: 0x0, Size: 16]
	CurveTableRowHandle PlayerPerformanceEstimateTransformOrigin;//[Offset: 0x10, Size: 16]
	CurveTableRowHandle PlayerPerformanceEstimateTransformMax;//[Offset: 0x20, Size: 16]
	float EncounterPlayerPerformanceWeight;//[Offset: 0x30, Size: 4]
	float PreviousWavePlayerPerformanceWeight;//[Offset: 0x34, Size: 4]
	float CampaignPlayerPerformanceWeight;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FortAIEncounterSpawnGroupCapsProfile
	GameplayTagContainer EncounterTypeTags;//[Offset: 0x0, Size: 32]
	FortAIEncounterSpawnGroupCapsCategory[] PopulationCategories;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortAIEncounterSpawnGroupCapsCategory
	GameplayTagQuery TagQuery;//[Offset: 0x0, Size: 72]
	bool bApplyGroupPopulationCurveToCategoryMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	CurveTableRowHandle InitialSpawnGroupAvailabilityDelaySeconds;//[Offset: 0x50, Size: 16]
	CurveTableRowHandle SpawnGroupAvailabilityDelaySeconds;//[Offset: 0x60, Size: 16]
	GameplayTagQuery UnlockingTagQuery;//[Offset: 0x70, Size: 72]
	FortAIEncounterSpawnGroupCap[] SpawnGroupCapsPerPlayerCount;//[Offset: 0xb8, Size: 16]
	float InitialSpawnGroupAvailabilityTime;//[Offset: 0xc8, Size: 4]
	float NumActiveCategorySpawnGroups;//[Offset: 0xcc, Size: 4]
	float[] SpawnGroupAvailabilityTimes;//[Offset: 0xd0, Size: 16]
	int NumSpawnGroupAvailable;//[Offset: 0xe0, Size: 4]
	Object* CategorySource;//[Offset: 0xe8, Size: 8]

--------------------------------
Class: FortAIEncounterSpawnGroupCap
	CurveTableRowHandle MinSpawnGroupNumberCap;//[Offset: 0x0, Size: 16]
	CurveTableRowHandle MaxSpawnGroupNumberCap;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortAIEncounterSpawnPointsProfile
	GameplayTagContainer EncounterTypeTags;//[Offset: 0x0, Size: 32]
	CurveTableRowHandle[] MaxSpawnPointsPerPlayerCount;//[Offset: 0x20, Size: 16]
	CurveTableRowHandle[] MinSpawnPointsPerPlayerCount;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortAIEncounterPawnDifficultyLevelModifier
	GameplayTagQuery EncounterTagRequirementsQuery;//[Offset: 0x0, Size: 72]
	CurveTableRowHandle DifficultyLevelModifierCurve;//[Offset: 0x48, Size: 16]

--------------------------------
Class: EncounterEnvironmentQueryInfo
	EnvQuery* EnvironmentQuery;//[Offset: 0x0, Size: 8]
	EnvNamedValue[] QueryParams;//[Offset: 0x8, Size: 16]
	bool bIsDirectional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 8]
	enum ParamType;//[Offset: 0x8, Size: 1]
	float Value;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortAIDirectorDataTrackingSettings.DataAsset.Object
	class FortAIDirectorDataManager* PlayerDataManager;//[Offset: 0x30, Size: 8]
	class FortAIDirectorDataManager* EncounterDataManager;//[Offset: 0x38, Size: 8]

--------------------------------
Class: FortAIDirectorDataManager.Actor.Object
	Object* OwnerObject;//[Offset: 0x220, Size: 8]
	AIDirectorEventData[] EventsToTrack;//[Offset: 0x228, Size: 16]
	FortAIDirectorFactorData[] FactorsToTrack;//[Offset: 0x238, Size: 16]
	enum[] FactorsBeingTracked;//[Offset: 0x2e8, Size: 16]
	void TriggerEvent(out const FortAIDirectorEvent TriggeredEvent);// 0xcea7e9c
	float GetAIDirectorFactorValue(enum AIDirectorFactor);// 0xcea7dec

--------------------------------
Class: FortAIDirectorEvent
	enum Event;//[Offset: 0x0, Size: 1]
	Object* EventSource;//[Offset: 0x8, Size: 8]
	Object* EventTarget;//[Offset: 0x10, Size: 8]
	float EventValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: AIDirectorEventData
	enum Event;//[Offset: 0x0, Size: 1]
	CurveTableRowHandle DataMax;//[Offset: 0x8, Size: 16]
	CurveTableRowHandle CoolDownRate;//[Offset: 0x18, Size: 16]
	enum ContributionType;//[Offset: 0x28, Size: 1]
	enum OwnerParticipantType;//[Offset: 0x29, Size: 1]

--------------------------------
Class: FortAIDirectorFactorData
	enum AIDirectorFactor;//[Offset: 0x0, Size: 1]
	FortAIDirectorFactorContribution[] ContributingEvents;//[Offset: 0x8, Size: 16]
	float MaxValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortAIDirectorFactorContribution
	enum AIDirectorEvent;//[Offset: 0x0, Size: 1]
	float MaxContribution;//[Offset: 0x4, Size: 4]
	byte ContributionType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FortAILootDropModifiers
	FortAIEncounterRequirements Requirements;//[Offset: 0x0, Size: 80]
	DataTableRowHandle[] LootDropModifierRows;//[Offset: 0x50, Size: 16]

--------------------------------
Class: FortAIEncounterRequirements
	byte AssociatedMissionType;//[Offset: 0x0, Size: 1]
	GameplayTagQuery TagQuery;//[Offset: 0x8, Size: 72]

--------------------------------
Class: FortAIController.AIController.Controller.Actor.Object
	bool bUsingNavMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	bool bAlwaysNotifyBumpWall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 1]
	bool bInstantRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 1]
	bool bTurnTransitionsEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 1]
	bool bAllowHotspotAbilityLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34a, Size: 1]
	FortPathFollowingComponent* FortPathFollowingComp;//[Offset: 0x350, Size: 8]
	AIHotSpotUseInfo CurrentHotSpot;//[Offset: 0x358, Size: 24]
	float GoalInfoUpdateRate;//[Offset: 0x370, Size: 4]
	Actor* GoalActor;//[Offset: 0x378, Size: 8]
	float GoalVisibilityPersistanceTime;//[Offset: 0x380, Size: 4]
	FortAIPawn* MyFortPawn;//[Offset: 0x420, Size: 8]
	MulticastInlineDelegateProperty OnTeamSetDelegate;//[Size: 16]
	AIGoalComponent* AIGoalComponent;//[Offset: 0x438, Size: 8]
	BehaviorTree* BTAssetToRunOnPawnAISpawned;//[Offset: 0x440, Size: 8]
	void WakeUp();// 0xcea49ac
	void UnlockMovementResource();// 0xcea4998
	void UnlockBehaviorResource();// 0xcea4984
	void SetupCustomVIM(class Object VIM);// 0xcea48dc
	void SetTeamInt(byte InTeam);// 0xcea4834
	void SetTeam(byte InTeam);// 0xcea478c
	void SetPawnAIType(enum NewAIType, Actor* SpawnSpot);// 0xcea46a4
	void SetIsSleeping(bool bNewSleepStatus);// 0xcea45f4
	void SetGoalActor(Actor* InActor, bool bLocationAlwaysKnown);// 0xcea4504
	void SetFullPeripheralVision(bool bNewFullPeripheralVision);// 0xcea4454
	void SetAlwaysGameplayRelevant(bool bInAlwaysGameplayRelevant);// 0xcea4394
	void OnBuildingActorGoalDestroyed();// 0xcea4380
	void LockMovementResource();// 0xcea436c
	void LockBehaviorResource();// 0xcea4358
	static bool IsIgnoringProximity(FortAIController* FortAIController);// 0xcea42ac
	bool IsAllowedToSleep();// 0xcea4274
	void IgnoreProximityForDuration(float DurationToIgnore);// 0xcea41c4
	Actor* GetGoalActor();// 0xcea41a8
	FortAIEncounterInfo* GetEncounterInfo();// 0xcea416c
	bool CreateBuildingActor(class BuildingSMActor BuildingClass, Vector BuildLoc, Rotator BuildRot, bool bMirrored);// 0xcea3ff0
	void ClearAllFocalPoints();// 0xcea3fdc

--------------------------------
Class: FortPathFollowingComponent.FortPathFollowingComponentBase.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	FortAIController* MyAI;//[Offset: 0x2b8, Size: 8]
	float MovementBlockFrustrationCooldownSpeed;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: FortPathFollowingComponentBase.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	AIController* AIController;//[Offset: 0x298, Size: 8]

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x268, Size: 12]
	void SuspendCrowdSteering(bool bSuspend);// 0xaf647a8

--------------------------------
Class: AIHotSpotUseInfo.AIHotSpotSlotInfo

--------------------------------
Class: AIHotSpotSlotInfo
	AIHotSpot* HotSpot;//[Offset: 0x0, Size: 8]
	int SlotIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIGoalComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: FortAthenaAIBotController.AIController.Controller.Actor.Object
	<GUID,FortAbilitySetHandle> AppliedInGameModifierAbilitySetHandles;//[Offset: 0x378, Size: 80]
	<GUID> GadgetTrackedAttributeItemInstanceIds;//[Offset: 0x3c8, Size: 80]
	FortBotTargetHandler TargetHandler;//[Offset: 0x468, Size: 40]
	bool bIsAnAthenaGameParticipant;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x490, Size: 1]
	bool bNeutralBecomeHostileOnBump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x490, Size: 1]
	enum ReachLocationValidationMode;//[Offset: 0x491, Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x498, Size: 8]
	FortBotInventoryInfo SlotItems;//[Offset: 0x4a0, Size: 24]
	FortAthenaAIBotInventoryDigestedSkillSet* CacheInventoryDigestedSkillSet;//[Offset: 0x548, Size: 8]
	FortPlayerPawnAthena* PlayerBotPawn;//[Offset: 0x558, Size: 8]
	FortServerBotManagerAthena* CachedBotManager;//[Offset: 0x560, Size: 8]
	FortGameModeAthena* CachedGameMode;//[Offset: 0x568, Size: 8]
	FortAthenaMutator_Bots* CachedBotMutator;//[Offset: 0x570, Size: 8]
	FortAthenaAIRuntimeParametersComponent* CachedAIRuntimeParametersComponent;//[Offset: 0x578, Size: 8]
	FortAthenaAIRuntimeParameters_Leash* CachedLeashRuntimeParameters;//[Offset: 0x580, Size: 8]
	FortAthenaNpcPatrollingComponent* CachedPatrollingComponent;//[Offset: 0x588, Size: 8]
	BotDelayedStimulus[] DelayedStimulus;//[Offset: 0x598, Size: 16]
	FortBotThreatActorInfo[] ObjectsThreatList;//[Offset: 0x5c0, Size: 16]
	FortBotThreatActorInfo[] TrapsThreatList;//[Offset: 0x5d0, Size: 16]
	enum CurrentAlertLevel;//[Offset: 0x5e0, Size: 1]
	AlertLevelInfo DefaultAlertLevelInfo;//[Offset: 0x5e8, Size: 16]
	MulticastInlineDelegateProperty OnAlertLevelChangedEventDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnStealthMeterChangedEventDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnAgentDBNOStatusChangedEventDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnAgentDiedEventDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnAgentGameOver;//[Size: 16]
	FortInventory* Inventory;//[Offset: 0x698, Size: 8]
	float Skill;//[Offset: 0x6a0, Size: 4]
	bool bAllowUnsupportedItemsInDefaultInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a4, Size: 1]
	class FortAthenaAIBotSkillSet[] BotSkillSetClasses;//[Offset: 0x6a8, Size: 16]
	FortAthenaAIBotInventoryItems* StartupInventory;//[Offset: 0x6d8, Size: 8]
	FortAthenaLoadout CosmeticLoadoutBC;//[Offset: 0x6e0, Size: 240]
	CustomCharacterPart*[] CustomCharacterPartOverridesBC;//[Offset: 0x7d0, Size: 16]
	FortBotNameSettings* NameSettingsBC;//[Offset: 0x7e0, Size: 8]
	ScalableFloat SpectateOnDeathMinTime;//[Offset: 0x7e8, Size: 40]
	ScalableFloat SpectateOnDeathMaxTime;//[Offset: 0x810, Size: 40]
	ScalableFloat SightWeatherCapRadius;//[Offset: 0x838, Size: 40]
	ScalableFloat LoseSightWeatherCapRadius;//[Offset: 0x860, Size: 40]
	ScalableFloat EmotesMaxCount;//[Offset: 0x888, Size: 40]
	FortAthenaAIBotPerceptionDigestedSkillSet* CachePerceptionDigestedSkillSet;//[Offset: 0x8b0, Size: 8]
	FortAthenaAIBotHarvestDigestedSkillSet* CacheHarvestDigestedSkillSet;//[Offset: 0x8b8, Size: 8]
	FortAthenaAIBotMovementDigestedSkillSet* CacheMovementSkillSet;//[Offset: 0x8c0, Size: 8]
	FortAthenaAIBotLootingDigestedSkillSet* CacheLootingSkillSet;//[Offset: 0x8c8, Size: 8]
	FortAthenaAIBotAttackingDigestedSkillSet* CacheAttackingSkillSet;//[Offset: 0x8d0, Size: 8]
	FortAthenaAIBotPlayStyleDigestedSkillSet* CachePlayStyleSkillSet;//[Offset: 0x8d8, Size: 8]
	FortAthenaAIBotUnstuckDigestedSkillSet* CacheUnstuckSkillSet;//[Offset: 0x8e0, Size: 8]
	FortAthenaAIBotRangeAttackDigestedSkillSet* CacheRangeAttackSkillSet;//[Offset: 0x8e8, Size: 8]
	FortInteractContextInfo* InteractContextInfo;//[Offset: 0x8f8, Size: 8]
	FortAthenaAIBotAimingDigestedSkillSet* CacheAimingDigestedSkillSet;//[Offset: 0x928, Size: 8]
	bool bCanBeDestroyedOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x934, Size: 1]
	Vector LastDeathLocation;//[Offset: 0x938, Size: 12]
	Rotator LastDeathRotation;//[Offset: 0x944, Size: 12]
	FortWorldItem* CachedWorldItem;//[Offset: 0x950, Size: 8]
	FortWeapon* CacheWeaponUsedToCalculateType;//[Offset: 0x960, Size: 8]
	bool bCachedIsUsingArcedProjectileWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	float CachedProjectileGravityScale;//[Offset: 0x96c, Size: 4]
	FortWeapon* CachedWeaponUsedToCalculateProjectileData;//[Offset: 0x970, Size: 8]
	StatManager* StatManager;//[Offset: 0x978, Size: 8]
	BuildingWeakSpotData[] ActiveWeakSpots;//[Offset: 0x980, Size: 16]
	class FortPawn* CacheBotPawnClass;//[Offset: 0x9b8, Size: 8]
	Actor* CurrentLootActor;//[Offset: 0x9c8, Size: 8]
	AthenaMarkerComponent* MarkerComponent;//[Offset: 0x9d0, Size: 8]
	FString BotPlayerName;//[Offset: 0x9d8, Size: 16]
	FString BotIDSuffix;//[Offset: 0x9e8, Size: 16]
	FString BotPlayerNameWithSkillRating;//[Offset: 0x9f8, Size: 16]
	FortAthenaMutator_SpawningPolicyData* PolicyDataSpawner;//[Offset: 0xa18, Size: 8]
	FortControllerComponent_Telemetry* FortControllerComponent_Telemetry;//[Offset: 0xaa8, Size: 8]
	bool bForceUsingBuildingTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool bForceHolsterWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	FortWorldItem* PendingEquipWeapon;//[Offset: 0xab8, Size: 8]
	Pawn* PlayerToSpectateOnDeath;//[Offset: 0xaf0, Size: 8]
	MulticastInlineDelegateProperty OnPlayerPawnAISpawnedDelegate;//[Size: 16]
	AISenseConfig_Sight* AISenseConfig_SightOverride;//[Offset: 0xbb0, Size: 8]
	Actor* BotOwner;//[Offset: 0xbc0, Size: 8]
	int BotControllerUID;//[Offset: 0xbc8, Size: 4]
	FortPlayerPawnAthena* ReviveTarget;//[Offset: 0xbd0, Size: 8]
	FortAthenaAIBotCustomizationData* BotData;//[Offset: 0xc68, Size: 8]
	DebugMinimapData DebugMinimapData;//[Offset: 0xc70, Size: 296]
	FortPlayerPawnAthena* RevivePlayerPawnToken;//[Offset: 0xd98, Size: 8]
	Actor* LeashActorToFollow;//[Offset: 0xdb8, Size: 8]
	Vector LeashActorToFollowLocalOffset;//[Offset: 0xdc0, Size: 12]
	FortGameStateComponent_AffiliationManager* CachedAffiliationManager;//[Offset: 0xdd0, Size: 8]
	bool bIsAffectedByMutatorHealthAndShieldModifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	bool bHasChangedPawnCullDistanceToAggroMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	FortAthenaAIRuntimeParameters_AIBotRespawn* RespawnRuntimeParameters;//[Offset: 0xde8, Size: 8]
	BuildingWall* CurrentBlockingDoor;//[Offset: 0xdf0, Size: 8]
	Pawn* FinisherPawn;//[Offset: 0xe08, Size: 8]
	BehaviorTree* BTAssetToRunOnPawnAISpawned;//[Offset: 0xe30, Size: 8]
	void UpdateLeashActorToFollowLocation();// 0xceca35c
	void ThankBusDriver();// 0xceca348
	void SwitchTeam(byte TeamIndex);// 0xceca2a0
	void StopEmote();// 0xceca28c
	void SetRadialLeashOuterRadius(const float OuterRadius);// 0xceca1e4
	void SetRadialLeashInnerRadius(const float InnerRadius);// 0xceca13c
	void SetPatrollingEnable(const bool bEnable);// 0xceca08c
	void SetLeashActorToFollow(const Actor* ActorToFollow, const float LeashLocationUpdateRate, const Vector LocalOffset);// 0xcec9f68
	void SetBotOwner(Actor* InBotOwner);// 0xcec9ec4
	void ReleaseBuildTool();// 0xcec9eb0
	void QueueStim(Actor* SourceActor, out const Vector SourceLocation, out const Vector SourceDirection, const enum NewStimType, const float StimStrength, const FName StimTag);// 0xcec9ca8
	void PlayEmote(out const PrimaryAssetId EmotePrimaryAssetId);// 0xcec9bf4
	void OverrideSkill(const float NewSkill);// 0xcec9b4c
	void OverrideAggressivenessPlayStyle(bool bInIsAggressive);// 0xcec9a94
	void OnTargetPawnDestroyed();// 0xcec9a80
	void OnTargetPawnDead(FortPawn* FortPawn);// 0xcec99d8
	void OnTargetBuildingDestroyed(BuildingActor* Building, AthenaAIController* AIController);// 0xcec98f4
	void OnServerMarkerAdded(FortWorldMarkerData MarkerData);// 0xcec975c
	void OnSafeZoneUpdated();// 0xcec9748
	void OnSafezoneStateChanged(const enum NewState);// 0xcec96a0
	void OnPossessedPawnReceiveDamage(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcec9440
	void OnPossesedPawnDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcec91e0
	void OnPerceptionSensed(Actor* SourceActor, AIStimulus Stim);// 0xcec9074
	void OnPawnWeaponChanged(FortWeapon* NewWeapon, FortWeapon* OldWeapon);// 0xcec8f90
	void OnPawnDidDamage(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* HitComponent, FName BoneName, Vector Momentum);// 0xcec8d30
	void OnMovementModeChange(Character* InCharacter, byte PrevMovementMode, byte PreviousCustomMode);// 0xcec8c08
	void OnLaunched(const Vector LaunchVelocity, const bool bXYOverride, const bool bZOverride);// 0xcec8ad0
	void OnKnockbacked(const GameplayTag KnockbackTypeTag);// 0xcec8a28
	void OnGamePhaseStepChanged(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xcec8930
	void OnGamePhaseChanged(enum GamePhase);// 0xcec8888
	void OnCurrentHarvestableDestroyed(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcec8628
	void OnAlertLevelChanged(const enum OldAlertLevel, const enum NewAlertLevel);// 0xbbc0600
	void OnAgentDBNO(FortPawn* InPlayer, bool bInIsDBNO);// 0xcec8538
	void NotifyPickupsSpawnedOnDeath(out const FortPickup*[] SpawnedPickups);// 0xcec8478
	bool IsAnAthenaGameParticipant();// 0xcec8458
	void HandleCollisionComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xcec828c
	AthenaMarkerComponent* GetMarkerComponent();// 0xcec8270
	Actor* GetBotOwner();// 0xcec8254
	void ChangeActiveVariantForCosmeticItem(FName ItemTemplateToChange, GameplayTag VariantChannelToChange, GameplayTag DesiredActiveVariant);// 0xcec8128
	void BlueprintOnBehaviorTreeStarted();// 0xbbc0600

--------------------------------
Class: FortBotTargetHandler
	FortBotTargetInfo[] Targets;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortBotTargetInfo
	Actor* SourceActor;//[Offset: 0x0, Size: 8]
	Actor* SupportingActor;//[Offset: 0x8, Size: 8]
	BuildingActor* AlternateTargetingActor;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortBotInventoryInfo
	FortItemDefinition* ItemDefinition;//[Offset: 0x0, Size: 8]
	FortWorldItem* FortItem;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AthenaAIController.FortAIController.AIController.Controller.Actor.Object
	FortGameplayAbility* PrimaryMeleeAttackAbilityInstance;//[Offset: 0x468, Size: 8]
	FortGameplayAbility* PrimaryRangedAttackAbilityInstance;//[Offset: 0x470, Size: 8]
	Vector NavWalkingSearchExtentScale;//[Offset: 0x478, Size: 12]
	float CheapFlyingNavPointHorizontalGridRatio;//[Offset: 0x484, Size: 4]
	float CheapFlyingNavNavPointVerticalGridRatio;//[Offset: 0x488, Size: 4]
	GameplayTagContainer CheapFlyingNavSmashableAbilityTag;//[Offset: 0x490, Size: 32]
	bool bEnableCheapFlyingNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b0, Size: 1]
	bool bAllowBacktrackPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4b0, Size: 1]
	bool bIsGoalRequiredForBehavior;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4b0, Size: 1]
	Actor* SecondaryGoalActor;//[Offset: 0x4b8, Size: 8]
	AthenaPathFollowingComponent* AthenaPFC;//[Offset: 0x4c8, Size: 8]

--------------------------------
Class: AthenaPathFollowingComponent.FortPathFollowingComponent.FortPathFollowingComponentBase.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	AthenaAIController* AthenaAIController;//[Offset: 0x380, Size: 8]

--------------------------------
Class: FortWorldMarkerData.FastArraySerializerItem
	MarkerID MarkerID;//[Offset: 0xc, Size: 8]
	FortPlayerState* Owner;//[Offset: 0x18, Size: 8]
	enum MarkerType;//[Offset: 0x20, Size: 1]
	Vector BasePosition;//[Offset: 0x24, Size: 12]
	Vector BasePositionOffset;//[Offset: 0x30, Size: 12]
	Vector WorldNormal;//[Offset: 0x3c, Size: 12]
	FortItemDefinition* ItemDefinition;//[Offset: 0x48, Size: 8]
	int ItemCount;//[Offset: 0x50, Size: 4]
	Actor* MarkedActor;//[Offset: 0x58, Size: 8]
	class Actor* MarkedActorClass;//[Offset: 0x60, Size: 40]
	bool bIncludeSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bHasCustomDisplayInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	bool bUseHoveredMarkerDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 1]
	MarkedActorDisplayInfo CustomDisplayInfo;//[Offset: 0x90, Size: 104]
	FortWorldMarker* MarkerInstance;//[Offset: 0xf8, Size: 8]

--------------------------------
Class: MarkerID
	int PlayerID;//[Offset: 0x0, Size: 4]
	int InstanceID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortWorldMarker.Object
	AthenaMarkerComponent* MarkerComponent;//[Offset: 0x28, Size: 8]
	FortWorldMarkerData MarkerDataCache;//[Offset: 0x30, Size: 256]
	FortPlayerMarkerBase* MarkerActor;//[Offset: 0x148, Size: 8]
	UserWidget* MarkerWidget;//[Offset: 0x150, Size: 8]
	void PlayerStateDestroyed(Actor* DestroyedActor);// 0xd22c8dc
	void PickedUp(FortPickup* SelfActor, FortPawn* InteractingPawn, const FortWorldItemDefinition* WorldItemDefinition, Vector PickupLocation);// 0xd22c778
	void ActorDestroyed(Actor* DestroyedActor);// 0xd22c6d0

--------------------------------
Class: AthenaMarkerComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnAddMapMarkerOnServerEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnRemoveMapMarkerOnServerEvent;//[Size: 16]
	class UserWidget* MarkerWidgetClass;//[Offset: 0x130, Size: 8]
	class FortPlayerMarkerBase* MarkerActorClass;//[Offset: 0x138, Size: 8]
	FortWorldMarkerContainer MarkerStream;//[Offset: 0x140, Size: 296]
	int LocalPlaceableMarkersPerRate;//[Offset: 0x268, Size: 4]
	int RemotePlayableMarkerSoundsPerRate;//[Offset: 0x26c, Size: 4]
	<int,int> RemotePlayableMarkerSoundsPerPlayerIDMap;//[Offset: 0x270, Size: 80]
	FortWorldMarker* PendingCancelMarker;//[Offset: 0x4e0, Size: 8]
	FortWorldMarker* LastHoveredMarker;//[Offset: 0x4e8, Size: 8]
	FortPlayerMarkerBase*[] MarkerActorPool;//[Offset: 0x4f8, Size: 16]
	UserWidgetPool MarkerWidgetPool;//[Offset: 0x508, Size: 136]
	bool bIsAimingDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	void UnmarkActorOnClient(MarkerID MarkerID);// 0xce36f40
	void SetMarkerWidgetClass(class UserWidget InMarkerClass);// 0xce36e98
	void SetMarkerActorClass(class FortPlayerMarkerBase InMarkerActorClass);// 0xce36df0
	void ServerRemoveMapMarker(MarkerID MarkerID, enum CancelReason);// 0xce36cfc
	void ServerAddMapMarker(FortClientMarkerRequest MarkerRequest);// 0xce36be8
	void OnTimelineScrubbed();// 0xce36bd4
	MarkerID MarkActorOnClient(Actor* ActorToBeMarked, const bool bIncludeSquad, const bool bUseHoveredMarkerDetail);// 0xce36a8c
	void HandleServerSquadChange(FortPlayerStateAthena* InPlayerState, const byte PreviousSquadId);// 0xce369a4
	Vector GetMarkerCurrentPosition(MarkerID MarkerID);// 0xce368ec
	FortWorldMarker* FindMarkerByID(MarkerID MarkerID);// 0xce36838
	void CancelAllMarkers();// 0xce36824

--------------------------------
Class: FortPlayerMarkerBase.Actor.Object
	Vector ImpactLocation;//[Offset: 0x220, Size: 12]
	LinearColor Color;//[Offset: 0x22c, Size: 16]
	MaterialInstanceDynamic* MID_Main;//[Offset: 0x240, Size: 8]
	MaterialInstanceDynamic* MID_Target;//[Offset: 0x248, Size: 8]
	AthenaMapMarkerItemDefinition* CustomMarkerItemDefinition;//[Offset: 0x250, Size: 8]
	float SpawnMarkerAnimLength;//[Offset: 0x258, Size: 4]
	CurveFloat* SpawnMarkerAnim_Opacity;//[Offset: 0x260, Size: 8]
	CurveFloat* SpawnMarkerAnim_SpawnScale;//[Offset: 0x268, Size: 8]
	CurveFloat* SpawnMarkerAnim_SpawnVerticalScale;//[Offset: 0x270, Size: 8]
	FortWorldMarkerData CurrentMarkerData;//[Offset: 0x310, Size: 256]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x410, Size: 8]
	void StartSpawnMarkerAnim();// 0xd171c04
	void SpawnMarkerAnimTimelineProgress_SpawnVerticalScale(float Value);// 0xd171b5c
	void SpawnMarkerAnimTimelineProgress_SpawnScale(float Value);// 0xd171ab4
	void SpawnMarkerAnimTimelineProgress_Opacity(float Value);// 0xd171a0c
	void OnSetupMarker(out const FortWorldMarkerData MarkerData);// 0xbbc0600
	void OnPlayMarkerSound();// 0xbbc0600
	void OnMarkerPlaced();// 0xbbc0600
	void OnMarkerHidden();// 0xbbc0600
	void OnMarkerColorChanged(LinearColor InColor);// 0xbbc0600

--------------------------------
Class: FortWorldMarkerContainer.FastArraySerializer
	FortWorldMarkerData[] Markers;//[Offset: 0x108, Size: 16]
	AthenaMarkerComponent* OwningComponent;//[Offset: 0x118, Size: 8]

--------------------------------
Class: FortClientMarkerRequest
	int InstanceID;//[Offset: 0x0, Size: 4]
	enum MarkerType;//[Offset: 0x4, Size: 1]
	Vector BasePosition;//[Offset: 0x8, Size: 12]
	Vector BasePositionOffset;//[Offset: 0x14, Size: 12]
	Vector WorldNormal;//[Offset: 0x20, Size: 12]
	Actor* MarkedActor;//[Offset: 0x30, Size: 8]
	bool bIncludeSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bUseHoveredMarkerDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 16]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortAthenaAIBotInventoryDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	float DefaultWeaponSelectionDistance;//[Offset: 0x2c, Size: 4]
	float DefaultWeaponSelectionDistanceDeviation;//[Offset: 0x30, Size: 4]
	bool bHasInfiniteResources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	GameplayTagContainer InventorySlotPreference;//[Offset: 0x38, Size: 32]
	DigestedBotEquipWeaponInfo[] EquipWeaponInfo;//[Offset: 0xf8, Size: 16]
	GameplayTagContainer InfiniteAmmoCheats;//[Offset: 0x108, Size: 32]
	GameplayTagContainer CheckLoadedAmmoForInfiniteAmmoCheats;//[Offset: 0x128, Size: 32]
	float NoWeaponGiveWeaponAfterTime;//[Offset: 0x148, Size: 4]
	float NoWeaponNoPlayerConeDistance;//[Offset: 0x14c, Size: 4]
	float NoWeaponNoPlayerConeFOV;//[Offset: 0x150, Size: 4]
	FName NoWeaponLootTierGroup;//[Offset: 0x154, Size: 8]

--------------------------------
Class: FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object

--------------------------------
Class: FortAthenaAIRuntimeParameters.Object
	int ExtractedLevel;//[Offset: 0x28, Size: 4]

--------------------------------
Class: DigestedBotEquipWeaponInfo
	GameplayTagQuery TagQuery;//[Offset: 0x0, Size: 72]
	ScalableFloat DistanceEffectivenessWithThreat;//[Offset: 0x48, Size: 40]
	ScalableFloat DistanceEffectivenessNoThreat;//[Offset: 0x70, Size: 40]

--------------------------------
Class: FortServerBotManagerAthena.Object
	FortServerBotInfo[] DeadBots;//[Offset: 0x30, Size: 16]
	FortServerBotInfo[] PlayerBotsRestartLeft;//[Offset: 0x40, Size: 16]
	FortGameModeAthena* CachedGameMode;//[Offset: 0x50, Size: 8]
	FortGameStateAthena* CachedGameState;//[Offset: 0x58, Size: 8]
	FortAthenaMutator_Bots* CachedBotMutator;//[Offset: 0x60, Size: 8]
	DebugMinimapData DebugMinimapData;//[Offset: 0x98, Size: 296]
	bool bBotHostileToHumanPlayersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	ScalableFloat UseAllBattleBusPOIsSquadRatio;//[Offset: 0x1c8, Size: 40]
	CurveFloat* TagQueryWeightChance;//[Offset: 0x1f0, Size: 8]
	EnvQuery* FindLocationsAroundPOIQuery;//[Offset: 0x1f8, Size: 40]
	BattleBusPOI[] BattleBusTagQueryPOIList;//[Offset: 0x220, Size: 16]
	BattleBusPOI[] SecondaryBattleBusTagQueryPOIList;//[Offset: 0x230, Size: 16]
	NavigationPOI[] OnGroundTagQueryPOIList;//[Offset: 0x248, Size: 16]
	ConstructionBuildingInfo ConstructionBuildingInfo;//[Offset: 0x258, Size: 24]
	ScalableFloat UseCustomSupportedItemList;//[Offset: 0x2e8, Size: 40]
	DataTable* BotItemDataTable;//[Offset: 0x310, Size: 8]
	ScalableFloat UseRegionalNameList;//[Offset: 0x318, Size: 40]
	FortAthenaAIBotNameDataAsset* BotNameDataAsset;//[Offset: 0x340, Size: 40]
	ScalableFloat ThankBusDriverProbability;//[Offset: 0x368, Size: 40]
	ScalableFloat ThankBusDriverMinTime;//[Offset: 0x390, Size: 40]
	ScalableFloat ThankBusDriverMaxTime;//[Offset: 0x3b8, Size: 40]
	ScalableFloat MaxNumberOfBotsToSpawnAroundPlayer;//[Offset: 0x3e0, Size: 40]
	float MaxAroundBotDistanceToSearchPOIToLand;//[Offset: 0x408, Size: 4]
	GameplayTagContainer SupportedItemTags;//[Offset: 0x410, Size: 32]
	CachedPOIVolumeLocations[] CachedValidPOIVolumeLocations;//[Offset: 0x430, Size: 16]
	BuildingFoundation*[] CachedBuildingFoundations;//[Offset: 0x440, Size: 16]
	FortPlayerStartWarmup* LastTeamPlayerStart;//[Offset: 0x5a8, Size: 8]
	<int,CacheSafeZoneLocation*> CacheSafeZoneLocationsMap;//[Offset: 0x5c0, Size: 80]
	float DeadBotCleanupMinDelay;//[Offset: 0x610, Size: 4]
	<FString> ReservedPlayerNames;//[Offset: 0x620, Size: 80]
	int[] LocationsInSafeZoneFreeIndices;//[Offset: 0x678, Size: 16]
	FortTeamInfoAthena* CurrentFillingTeam;//[Offset: 0x6d8, Size: 8]
	ScalableFloat BotsUniqueIDUseValidAccountID;//[Offset: 0x738, Size: 40]
	int CurrentBotControllerUID;//[Offset: 0x760, Size: 4]
	FortAthenaBeaconComponent*[] BeaconList;//[Offset: 0x768, Size: 16]
	AthenaAIPopulationTracker* CachedAIPopulationTracker;//[Offset: 0x780, Size: 8]
	FortPlayerPawnAthena* SpawnBot(out const Vector InSpawnLocation, out const Rotator InSpawnRotation, const FortAthenaAIBotCustomizationData* InBotData, out const FortAthenaAIBotRunTimeCustomizationData InRuntimeBotData);// 0xd1ceb1c
	Pawn* SpawnAI(out const Vector InSpawnLocation, out const Rotator InSpawnRotation, const FortAthenaAISpawnerDataComponentList* AISpawnerComponentList);// 0xd1ce9cc
	void OnGamePhaseStepChanged(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xd1ce8d4
	void KillBots(bool bKillPlayers, bool bKillNoneParticipants, byte TeamIndex, Actor* BotOwner);// 0xd1ce754
	void JoinTeam(const Controller* SourceTeamController, Controller* DestinationTeamController);// 0xd1ce670
	bool IsWeaponSupported(FortWeapon* FortWeapon);// 0xd1ce5bc

--------------------------------
Class: FortServerBotInfo
	FortAthenaAIBotController* BotController;//[Offset: 0x0, Size: 8]
	FortPoiVolume* SelectedPoiVolume;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortPoiVolume.Volume.Brush.Actor.Object
	bool bIsLargeGameVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	float CurrentFortPoiVolumeSize;//[Offset: 0x25c, Size: 4]
	float VolumeThresholdForLargeGameVolume;//[Offset: 0x260, Size: 4]
	float LargeGameVolume;//[Offset: 0x264, Size: 4]
	FString[] EventsEnabledDuring;//[Offset: 0x268, Size: 16]
	GameplayTagContainer LocationTags;//[Offset: 0x278, Size: 32]
	FortPOIAmbientAudioBank* AudioBank;//[Offset: 0x298, Size: 8]
	FortPoiCollisionComponent* PoiCollisionComp;//[Offset: 0x2a0, Size: 8]
	bool DoesShapeComponentOverlap(ShapeComponent* Shape);// 0xd1a1e2c
	bool ContainsLocationTag(out const GameplayTag Tag);// 0xd1a1d6c
	void CalendarEventsShouldBeReady(out const FString[] NewEvents);// 0xd1a1c54

--------------------------------
Class: FortPOIAmbientAudioBank.AmbientAudioDataAsset.DataAsset.Object
	FortPOIAmbientAudioLoop Loops;//[Offset: 0x58, Size: 48]
	FortPOIAmbientAudioOneShot[] Oneshots;//[Offset: 0x118, Size: 16]

--------------------------------
Class: AmbientAudioDataAsset.DataAsset.Object
	AmbientAudioLoop[] LoopingSounds;//[Offset: 0x30, Size: 16]
	AmbientAudioOneShot[] OneShotSounds;//[Offset: 0x40, Size: 16]
	float TagCrossfadeTime;//[Offset: 0x50, Size: 4]

--------------------------------
Class: AmbientAudioLoop.AmbientAudioBase

--------------------------------
Class: AmbientAudioBase
	SoundBase* Sound;//[Offset: 0x0, Size: 40]
	GameplayTagQuery Requirements;//[Offset: 0x28, Size: 72]

--------------------------------
Class: AmbientAudioOneShot.AmbientAudioBase
	Vector2D RetriggerTimeRange;//[Offset: 0x70, Size: 8]
	Vector2D TriggerDistanceRange;//[Offset: 0x78, Size: 8]

--------------------------------
Class: FortPOIAmbientAudioLoop
	SoundBase* LoopingSound;//[Offset: 0x0, Size: 40]
	float CrossfadeTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortPOIAmbientAudioOneShot
	SoundBase* OneShotSound;//[Offset: 0x0, Size: 40]
	Vector2D RetriggerTimeRange;//[Offset: 0x28, Size: 8]
	Vector2D TriggerDistanceRange;//[Offset: 0x30, Size: 8]
	byte[] AllowedDayPhases;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortPoiCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodyInstance PoiBodyInstance;//[Offset: 0x440, Size: 336]

--------------------------------
Class: FortAthenaAIBotCustomizationData.PrimaryDataAsset.DataAsset.Object
	class FortPlayerPawnAthena* PawnClass;//[Offset: 0x30, Size: 8]
	bool bRequiresUniqueNetId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bHasCustomSquadId;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte CustomSquadId;//[Offset: 0x39, Size: 1]
	bool bOverrideCanRespawnOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a, Size: 1]
	bool bCanRespawnOnDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a, Size: 1]
	bool bOverrideBehaviorTree;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a, Size: 1]
	bool bOverrideCharacterCustomization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a, Size: 1]
	bool bOverrideDBNOPlayStyle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a, Size: 1]
	bool bOverrideSkillLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a, Size: 1]
	bool bUseMatchMMRToOverrideSkillLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a, Size: 1]
	bool bOverrideSkillSets;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3a, Size: 1]
	bool bOverrideStartupInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 1]
	bool bOverrideBotNameSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b, Size: 1]
	bool bOverrideBotIDAnalyticsSuffix;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b, Size: 1]
	bool bOverrideConstructionBuildingInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b, Size: 1]
	DataTable* OverrideSkillLevelMMRTable;//[Offset: 0x40, Size: 40]
	BehaviorTree* BehaviorTree;//[Offset: 0x68, Size: 8]
	enum OverrideCosmeticMode;//[Offset: 0x70, Size: 1]
	FortAthenaAIBotCharacterCustomization* CharacterCustomization;//[Offset: 0x78, Size: 8]
	FortAthenaAIBotCosmeticLibraryData* CosmeticCustomizationLibrary;//[Offset: 0x80, Size: 40]
	enum DBNOPlayStyle;//[Offset: 0xa8, Size: 1]
	float SkillLevel;//[Offset: 0xac, Size: 4]
	class FortAthenaAIBotSkillSet[] SkillSetOverrideClasses;//[Offset: 0xb8, Size: 16]
	FortAthenaAIBotInventoryItems* StartupInventory;//[Offset: 0xc8, Size: 8]
	FortBotNameSettings* BotNameSettings;//[Offset: 0xd0, Size: 8]
	FString BotAnalyticsSuffix;//[Offset: 0xd8, Size: 16]
	float SpawnTracePadding;//[Offset: 0xe8, Size: 4]
	ConstructionBuildingInfo OverrideConstructionBuildingInfo;//[Offset: 0xf0, Size: 24]
	class FortAthenaAILODSettingsContainer* AILODSettingsContainer;//[Offset: 0x180, Size: 8]
	FortAthenaAILODSettingsContainer* AILODSettingsContainerLoaded;//[Offset: 0x188, Size: 8]
	void SetCharacterCustomizationFromPlayerPawn(const FortPlayerPawn* InFortPawn);// 0xcecc478

--------------------------------
Class: FortAthenaAIBotCharacterCustomization.Object
	FortAthenaLoadout CustomizationLoadout;//[Offset: 0x28, Size: 240]

--------------------------------
Class: FortAthenaAIBotCosmeticLibraryData.PrimaryDataAsset.DataAsset.Object
	DataTable* PredefineSetsDataTable;//[Offset: 0x30, Size: 40]
	DataTable* CharactersDataTable;//[Offset: 0x58, Size: 40]
	DataTable* GlidersDataTable;//[Offset: 0x80, Size: 40]
	DataTable* SkyDiveContrailsDataTable;//[Offset: 0xa8, Size: 40]
	DataTable* BackpacksDataTable;//[Offset: 0xd0, Size: 40]
	DataTable* PickaxesDataTable;//[Offset: 0xf8, Size: 40]
	DataTable* FallbackCharactersDataTable;//[Offset: 0x120, Size: 40]

--------------------------------
Class: FortAthenaAIBotSkillSet.Object

--------------------------------
Class: FortAthenaAIBotInventoryItems.Object
	ItemAndCount[] Items;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortBotNameSettings.Object
	byte NamingMode;//[Offset: 0x28, Size: 1]
	FText OverrideName;//[Offset: 0x30, Size: 24]
	bool bAddPlayerIDSuffix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstructionBuildingInfo
	class BuildingSMActor* BuildingActorClass;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortAthenaAILODSettingsContainer.Object
	<class Object,interface class> ClassToSettings;//[Offset: 0x28, Size: 80]
	class FortAthenaAILODSettings_AIEvaluator[] LODSettings_AIEvaluators;//[Offset: 0x78, Size: 16]
	class FortAthenaAILODSettings_CharacterMovement[] LODSettings_CharacterMovement;//[Offset: 0x88, Size: 16]
	class FortAthenaAILODSettings_FortWeaponRanged[] LODSettings_FortWeaponRanged;//[Offset: 0x98, Size: 16]
	class FortAIDirectorLODAIConfig* FortAIDirectorLODConfig;//[Offset: 0xa8, Size: 8]
	FortAIDirectorLODAIConfig* FortAIDirectorObjectLODConfig;//[Offset: 0xb0, Size: 8]

--------------------------------
Class: FortAthenaAILODSettings_AIEvaluator.Object
	class FortAthenaAIEvaluator[] SystemClasses;//[Offset: 0x30, Size: 16]
	FortAILODSetting_AIEvaluator BelowLowerLODSettings;//[Offset: 0x40, Size: 104]
	FortAILODSetting_AIEvaluator LowerLODSettings;//[Offset: 0xa8, Size: 104]
	FortAILODSetting_AIEvaluator AboveLowerLODSettings;//[Offset: 0x110, Size: 104]
	FortAILODSetting_AIEvaluator BelowNormalLODSettings;//[Offset: 0x178, Size: 104]
	FortAILODSetting_AIEvaluator NormalLODSettings;//[Offset: 0x1e0, Size: 104]
	FortAILODSetting_AIEvaluator AboveNormalLODSettings;//[Offset: 0x248, Size: 104]

--------------------------------
Class: FortAthenaAIEvaluator.Object
	FName ExecutionStatusName;//[Offset: 0x28, Size: 8]
	interface class * CachedLODSettingsInterface;//[Offset: 0x40, Size: 16]
	BlackboardKeyAccessValidator* KeyAccessValidator;//[Offset: 0x50, Size: 8]

--------------------------------
Class: BlackboardKeyAccessValidator.Object

--------------------------------
Class: FortAILODSetting_AIEvaluator.FortAthenaAILODSetting
	ScalableFloat IntervalMultiplier;//[Offset: 0x8, Size: 40]
	ScalableFloat RandomDeviationMultiplier;//[Offset: 0x38, Size: 40]

--------------------------------
Class: FortAthenaAILODSetting
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAthenaAILODSettings_CharacterMovement.Object
	class FortMovementComp_Character[] SystemClasses;//[Offset: 0x30, Size: 16]
	FortAILODSetting_CharacterMovement BelowLowerLODSettings;//[Offset: 0x40, Size: 392]
	FortAILODSetting_CharacterMovement LowerLODSettings;//[Offset: 0x1c8, Size: 392]
	FortAILODSetting_CharacterMovement AboveLowerLODSettings;//[Offset: 0x350, Size: 392]
	FortAILODSetting_CharacterMovement BelowNormalLODSettings;//[Offset: 0x4d8, Size: 392]
	FortAILODSetting_CharacterMovement NormalLODSettings;//[Offset: 0x660, Size: 392]
	FortAILODSetting_CharacterMovement AboveNormalLODSettings;//[Offset: 0x7e8, Size: 392]

--------------------------------
Class: FortMovementComp_Character.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LandHardSoundFallSpeedThreshold;//[Offset: 0xb00, Size: 4]
	float LandSoundFallSpeedThreshold;//[Offset: 0xb04, Size: 4]
	class FortPawn* PushBumpedPawnClass;//[Offset: 0xb08, Size: 8]
	float NetworkSmoothingVisibilityThreshold;//[Offset: 0xb24, Size: 4]
	int NetworkSmoothingThrottleProxyUpdateForPawnLOD;//[Offset: 0xb28, Size: 4]
	float NetworkSmoothingViewAngleThreshold;//[Offset: 0xb2c, Size: 4]
	float NetworkSmoothingViewAngleThresholdSmall;//[Offset: 0xb34, Size: 4]
	float NetworkSmoothingNoThrottleWithinDistanceInMeters;//[Offset: 0xb3c, Size: 4]
	int PlayerLodRequiredForFloorCheckWhenRendered;//[Offset: 0xb40, Size: 4]
	enum AILodRequiredForFloorCheckWhenRendered;//[Offset: 0xb44, Size: 1]
	CurveFloat* VelocityBasedStrafeCurve;//[Offset: 0xb58, Size: 8]
	CurveFloat* VelocityBasedTurnCurve;//[Offset: 0xb60, Size: 8]
	CurveFloat* VelocityBasedBackupCurve;//[Offset: 0xb68, Size: 8]
	bool bWasUsingVelocityBasedTurnCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 1]
	float RotationYawRateToRestore;//[Offset: 0xb74, Size: 4]
	ScalableFloat FallingSlopeSafeSlideAngleScalable;//[Offset: 0xb78, Size: 40]
	ScalableFloat FallingSlopeSafeSlideMaxSpeedScalable;//[Offset: 0xba0, Size: 40]
	ScalableFloat FallingSlopeDamageScalarMinScalable;//[Offset: 0xbc8, Size: 40]
	float FallingSlopeSafeSlideAngleCached;//[Offset: 0xbf8, Size: 4]
	float FallingSlopeSafeSlideNormalZ;//[Offset: 0xbfc, Size: 4]
	AirControlParams SkydivingControlParamsPassive;//[Offset: 0xc00, Size: 320]
	AirControlParams SkydivingControlParamsActive;//[Offset: 0xd40, Size: 320]
	AirControlParams ParachuteControlParamsSkydive;//[Offset: 0xe80, Size: 320]
	AirControlParams ParachuteControlParamsJump;//[Offset: 0xfc0, Size: 320]
	AirControlParams ParachuteControlParamsGliderRedeploy;//[Offset: 0x1100, Size: 320]
	AirControlParams GoopAirControlParams;//[Offset: 0x1240, Size: 320]
	GoopControlParams GoopControlParams;//[Offset: 0x1380, Size: 160]
	AirControlParams BalloonControlParams;//[Offset: 0x1420, Size: 320]
	AirControlParams FloatingControlParams;//[Offset: 0x1560, Size: 320]
	AirControlParams VortexSkydivingControlParamsPassive;//[Offset: 0x16a0, Size: 320]
	AirControlParams VortexSkydivingControlParamsActive;//[Offset: 0x17e0, Size: 320]
	AirControlParams VortexSkydivingControlParamsActiveUpward;//[Offset: 0x1920, Size: 320]
	AirControlParams VortexParachuteControlParams;//[Offset: 0x1a60, Size: 320]
	AirControlParams SkyTubeSkydivingControlParamsPassive;//[Offset: 0x1ba0, Size: 320]
	AirControlParams SkyTubeSkydivingControlParamsActive;//[Offset: 0x1ce0, Size: 320]
	AirControlParams SkyTubeSkydivingControlParamsActiveUpward;//[Offset: 0x1e20, Size: 320]
	ScalableFloat SkyTubeUpwardAccelerationScalar;//[Offset: 0x1f60, Size: 40]
	ScalableFloat SkyTubeDownwardAccelerationScalar;//[Offset: 0x1f88, Size: 40]
	WaterControlParams SurfaceSwimmingWaterControlParams;//[Offset: 0x1fb0, Size: 1680]
	WaterJumpParams WaterJumpParams;//[Offset: 0x2640, Size: 160]
	WaterJumpParams WaterJumpParamsSprint;//[Offset: 0x26e0, Size: 160]
	bool bComputeWaterSplineDataOnSimulatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2780, Size: 1]
	WaterSprintBoostParams WaterSprintBoostParams;//[Offset: 0x2788, Size: 240]
	float SkydivingMaxSmoothUpdateDistanceScale;//[Offset: 0x28a0, Size: 4]
	float SlideTimeUntilReset;//[Offset: 0x28a4, Size: 4]
	float SlideIfVelocityLessThanZ;//[Offset: 0x28a8, Size: 4]
	int GravityCeilingRelation;//[Offset: 0x28ac, Size: 4]
	float CurrentZiplineVelocityDirection;//[Offset: 0x2904, Size: 4]
	float GracePeriodToConnectToZipline;//[Offset: 0x2908, Size: 4]
	float FallingStartedZ;//[Offset: 0x290c, Size: 4]
	Vector CustomFallingAcceleration;//[Offset: 0x2a1c, Size: 12]
	Vector ReplicatedAcceleration;//[Offset: 0x2a48, Size: 12]
	bool bTriggeredFallingFeedbackSinceLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c78, Size: 1]
	bool bUpdatesFloorWhenNotInFullSimulation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c78, Size: 1]
	bool bUpdatesFloorWhenNotInFullSimulationOnlyOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c78, Size: 1]
	interface class * CachedLODSettingsManager;//[Offset: 0x2ca8, Size: 16]
	float CustomMeshHeightAdjust;//[Offset: 0x2cb8, Size: 4]
	float CustomMeshHeightAdjustLerpTarget;//[Offset: 0x2cbc, Size: 4]
	float CustomMeshHeightAdjustLerpSpeed;//[Offset: 0x2cc0, Size: 4]
	float CustomMeshHeightAdjustTotalApplied;//[Offset: 0x2cc4, Size: 4]
	bool IsPassivelySkydiving();// 0xd0e6170
	bool IsPassivelyParachuting();// 0xd0e6114
	bool IsActivelyStrafingInAir();// 0xd0e60dc
	bool IsActivelySkydivingUpInVortex();// 0xd0e60a4
	bool IsActivelySkydiving();// 0xd0e606c
	bool IsActivelyParachuting();// 0xd0e6034
	Vector GetWaterVelocity();// 0xd0e6010
	Vector GetWaterSurfaceNormal();// 0xd0e5fe8
	Vector GetWaterSurfaceLocation();// 0xb6937b4
	float GetWaterImmersionDepth();// 0xd0e5fcc
	Vector GetPlayerRelativeVelocityToWater();// 0xd0e5fa4
	float GetFallingStartedZ();// 0xd0e5f88

--------------------------------
Class: AirControlParams
	ScalableFloat MaxAcceleration;//[Offset: 0x0, Size: 40]
	ScalableFloat LateralFriction;//[Offset: 0x28, Size: 40]
	ScalableFloat MaxLateralSpeed;//[Offset: 0x50, Size: 40]
	ScalableFloat TerminalVelocity;//[Offset: 0x78, Size: 40]
	ScalableFloat UpwardTerminalVelocity;//[Offset: 0xa0, Size: 40]
	ScalableFloat GravityScalar;//[Offset: 0xc8, Size: 40]
	ScalableFloat CustomGravityCeiling;//[Offset: 0xf0, Size: 40]
	ScalableFloat CustomGravityCeilingWidth;//[Offset: 0x118, Size: 40]

--------------------------------
Class: GoopControlParams
	ScalableFloat DragHorizontalPercent;//[Offset: 0x0, Size: 40]
	ScalableFloat DragVerticalPercent;//[Offset: 0x28, Size: 40]
	ScalableFloat DragHorizontalFlat;//[Offset: 0x50, Size: 40]
	ScalableFloat DragVerticalFlat;//[Offset: 0x78, Size: 40]

--------------------------------
Class: WaterControlParams
	ScalableFloat MinImmersionDepth;//[Offset: 0x0, Size: 40]
	ScalableFloat TargetImmersionDepth;//[Offset: 0x28, Size: 40]
	ScalableFloat MaxImmersionDepth;//[Offset: 0x50, Size: 40]
	ScalableFloat CancelCrouchImmersionDepth;//[Offset: 0x78, Size: 40]
	ScalableFloat DBNOSwimImmersionDepth;//[Offset: 0xa0, Size: 40]
	ScalableFloat MaxAcceleration;//[Offset: 0xc8, Size: 40]
	ScalableFloat MaxAccelerationSprinting;//[Offset: 0xf0, Size: 40]
	ScalableFloat BrakingDeceleration;//[Offset: 0x118, Size: 40]
	ScalableFloat MaxNormalSpeed;//[Offset: 0x140, Size: 40]
	ScalableFloat MaxSprintSpeed;//[Offset: 0x168, Size: 40]
	ScalableFloat MinSprintJumpSpeed;//[Offset: 0x190, Size: 40]
	ScalableFloat SprintJumpAirAccelAngleLimit;//[Offset: 0x1b8, Size: 40]
	ScalableFloat SprintRetriggerDelay;//[Offset: 0x1e0, Size: 40]
	ScalableFloat SprintDelayAfterFiring;//[Offset: 0x208, Size: 40]
	ScalableFloat MaxTargetingSpeed;//[Offset: 0x230, Size: 40]
	ScalableFloat BackwardsSpeedMultiplier;//[Offset: 0x258, Size: 40]
	ScalableFloat BackwardsSpeedCosAngle;//[Offset: 0x280, Size: 40]
	ScalableFloat AngledSpeedMultiplier;//[Offset: 0x2a8, Size: 40]
	ScalableFloat AngledSpeedCosAngle;//[Offset: 0x2d0, Size: 40]
	ScalableFloat Friction;//[Offset: 0x2f8, Size: 40]
	ScalableFloat FrictionSprinting;//[Offset: 0x320, Size: 40]
	ScalableFloat FrictionDirectionChangeDot;//[Offset: 0x348, Size: 40]
	ScalableFloat FrictionDirectionChangeMultiplier;//[Offset: 0x370, Size: 40]
	ScalableFloat MaxSpeedUp;//[Offset: 0x398, Size: 40]
	ScalableFloat MaxSpeedDown;//[Offset: 0x3c0, Size: 40]
	ScalableFloat MaxHorizontalEntrySpeed;//[Offset: 0x3e8, Size: 40]
	ScalableFloat WaterForceMultiplier;//[Offset: 0x410, Size: 40]
	ScalableFloat WaterForceSecondMultiplier;//[Offset: 0x438, Size: 40]
	ScalableFloat MaxWaterForce;//[Offset: 0x460, Size: 40]
	ScalableFloat WaterVelocityDepthForMax;//[Offset: 0x488, Size: 40]
	ScalableFloat WaterVelocityMinMultiplier;//[Offset: 0x4b0, Size: 40]
	ScalableFloat WaterSimMaxTimeStep;//[Offset: 0x4d8, Size: 40]
	ScalableFloat WaterSimSubStepTime;//[Offset: 0x500, Size: 40]
	ScalableFloat BobbingMaxForce;//[Offset: 0x528, Size: 40]
	ScalableFloat BobbingIdealDepthTolerance;//[Offset: 0x550, Size: 40]
	ScalableFloat BobbingFrictionDown;//[Offset: 0x578, Size: 40]
	ScalableFloat BobbingExpDragDown;//[Offset: 0x5a0, Size: 40]
	ScalableFloat BobbingFrictionDownSubmerged;//[Offset: 0x5c8, Size: 40]
	ScalableFloat BobbingExpDragDownSubmerged;//[Offset: 0x5f0, Size: 40]
	ScalableFloat BobbingFrictionUp;//[Offset: 0x618, Size: 40]
	ScalableFloat BobbingExpDragUp;//[Offset: 0x640, Size: 40]
	ScalableFloat BoostDragMultiplier;//[Offset: 0x668, Size: 40]

--------------------------------
Class: WaterJumpParams
	ScalableFloat WaterJumpMinVelocityZ;//[Offset: 0x0, Size: 40]
	ScalableFloat WaterJumpMaxVelocityZ;//[Offset: 0x28, Size: 40]
	ScalableFloat WaterJumpForceZ;//[Offset: 0x50, Size: 40]
	ScalableFloat JumpForceDuration;//[Offset: 0x78, Size: 40]

--------------------------------
Class: WaterSprintBoostParams
	ScalableFloat RequiredDepth;//[Offset: 0x0, Size: 40]
	ScalableFloat TriggerAboveDepth;//[Offset: 0x28, Size: 40]
	ScalableFloat TriggerAtVelocity;//[Offset: 0x50, Size: 40]
	ScalableFloat PreventAtVelocity;//[Offset: 0x78, Size: 40]
	ScalableFloat Duration;//[Offset: 0xa0, Size: 40]
	ScalableFloat MaxSpeed;//[Offset: 0xc8, Size: 40]

--------------------------------
Class: FortAILODSetting_CharacterMovement.FortAthenaAILODSetting
	ScalableFloat Interval;//[Offset: 0x8, Size: 40]
	ScalableFloat RandomDeviation;//[Offset: 0x30, Size: 40]
	ScalableFloat MinimumDynamicInterval;//[Offset: 0x58, Size: 40]
	ScalableFloat MaximumDotDifferenceBetweenInputVectors;//[Offset: 0x80, Size: 40]
	ScalableFloat bDisableAvoidance;//[Offset: 0xa8, Size: 40]
	ScalableFloat bBotsEnableNavWalkingMode;//[Offset: 0xd0, Size: 40]
	ScalableFloat bBotsEnablePhysNavWalkingPathFollowingMode;//[Offset: 0xf8, Size: 40]
	ScalableFloat bSweepWhileNavWalking;//[Offset: 0x120, Size: 40]
	ScalableFloat bGenerateOverlapInNavWalking;//[Offset: 0x148, Size: 40]

--------------------------------
Class: FortAthenaAILODSettings_FortWeaponRanged.Object
	class FortWeaponRanged[] SystemClasses;//[Offset: 0x30, Size: 16]
	FortAILODSetting_FortWeaponRanged BelowLowerLODSettings;//[Offset: 0x40, Size: 104]
	FortAILODSetting_FortWeaponRanged LowerLODSettings;//[Offset: 0xa8, Size: 104]
	FortAILODSetting_FortWeaponRanged AboveLowerLODSettings;//[Offset: 0x110, Size: 104]
	FortAILODSetting_FortWeaponRanged BelowNormalLODSettings;//[Offset: 0x178, Size: 104]
	FortAILODSetting_FortWeaponRanged NormalLODSettings;//[Offset: 0x1e0, Size: 104]
	FortAILODSetting_FortWeaponRanged AboveNormalLODSettings;//[Offset: 0x248, Size: 104]

--------------------------------
Class: FortAILODSetting_FortWeaponRanged.FortAthenaAILODSetting
	ScalableFloat Interval;//[Offset: 0x8, Size: 40]
	ScalableFloat RandomDeviation;//[Offset: 0x38, Size: 40]

--------------------------------
Class: FortAIDirectorLODAIConfig.Object
	ScalableFloat SingleAIUnitCost;//[Offset: 0x28, Size: 40]
	ScalableFloat Priority;//[Offset: 0x50, Size: 40]

--------------------------------
Class: FortAthenaAIBotRunTimeCustomizationData
	GameplayTag PredefinedCosmeticSetTag;//[Offset: 0x0, Size: 8]
	float CullDistanceSquared;//[Offset: 0x8, Size: 4]
	bool bCheckForOverlaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bHasCustomSquadId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	byte CustomSquadId;//[Offset: 0xe, Size: 1]

--------------------------------
Class: FortAthenaAISpawnerDataComponentList.Object
	FortAthenaAISpawnerDataComponentList* OverrideComponentClass(const class FortAthenaAISpawnerDataComponent NewComponentSubClass);// 0xced8524
	FortAthenaAISpawnerDataComponentList* OverrideComponent(const FortAthenaAISpawnerDataComponent* NewComponent);// 0xced8474
	FortAthenaAISpawnerDataComponent* GetOrCreateComponentClassForModification(Object* ComponentOuter, const class FortAthenaAISpawnerDataComponent ClassToClone);// 0xced8388
	FortAthenaAISpawnerDataComponent*[] GetList();// 0xced82e8

--------------------------------
Class: FortAthenaAISpawnerDataComponent.Object

--------------------------------
Class: FortGameModeAthena.FortGamePvPBase.FortGameModeZone.FortGameMode_InGame.FortGameMode.FortGameModeBase.PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object
	FortTeamPrivateInfo*[] SortedStormCapPrivateTeams;//[Offset: 0xa68, Size: 16]
	float DelayForStormCapWarning;//[Offset: 0xa78, Size: 4]
	float DelayForStormCapDamage;//[Offset: 0xa7c, Size: 4]
	ScalableFloat TimeBetweenStormCapDamage;//[Offset: 0xa88, Size: 40]
	ScalableFloat StormCapDamagePerTick;//[Offset: 0xab8, Size: 40]
	MulticastInlineDelegateProperty OnMapInfoInitialized;//[Size: 16]
	bool bMapInfoInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	MulticastInlineDelegateProperty OnSafeZoneUpdated;//[Size: 16]
	bool bAllGameplayModifiersRegistered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	bool bAlwaysDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	ScalableFloat KillStreakTime;//[Offset: 0xb58, Size: 40]
	BuildingActor*[] ActorsToClear;//[Offset: 0xb88, Size: 16]
	Actor*[] ClearAreaIgnoreActors;//[Offset: 0xb98, Size: 16]
	bool bNeverSpawnPickupsOnPawnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 1]
	bool bLoadTestCosmetics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 1]
	bool bDisable3DVoiceChat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb4, Size: 1]
	bool bAllowDamageInWarmup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb4, Size: 1]
	FName[] ExcludedDefaultSupplyDrops;//[Offset: 0xbb8, Size: 16]
	FName[] ExcludedLTMSupplyDrops;//[Offset: 0xbc8, Size: 16]
	FName[] ExcludedLTMSpawnActors;//[Offset: 0xbd8, Size: 16]
	TimeOfDayOverride[] TimeOfDayOverrideList;//[Offset: 0xbe8, Size: 16]
	bool bDisableGCOnServerDuringMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 1]
	GCSettingsOverride[] GCSettingsOverrideList;//[Offset: 0xc00, Size: 16]
	bool bPlaylistHotfixChangedGCDisabling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 1]
	float PlaylistHotfixOriginalGCFrequency;//[Offset: 0xc14, Size: 4]
	bool bUseSkydiveLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 1]
	bool bUseSkydiveLeaderInSplitScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc19, Size: 1]
	float OverloadedInitialConnectTimeout;//[Offset: 0xc1c, Size: 4]
	float FailedToStartMatchTimeout;//[Offset: 0xc20, Size: 4]
	float OrphanedServerCheckTime;//[Offset: 0xc30, Size: 4]
	bool bEnableRecentPlayersUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	float DefaultWarmupEarlyRequiredPlayerPercent;//[Offset: 0xc44, Size: 4]
	bool bDisableStormCapSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 1]
	ScalableFloat PlaylistSupportsStormCapSystem;//[Offset: 0xc50, Size: 40]
	bool bStormCapSystemEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 1]
	ScalableFloat PlaylistEnableBots;//[Offset: 0xc80, Size: 40]
	ScalableFloat PlaylistEnableBotSpectate;//[Offset: 0xca8, Size: 40]
	ScalableFloat PlaylistEnableBotDynamicELO;//[Offset: 0xcd0, Size: 40]
	class Actor* BattleLabTeleporterManagerClass;//[Offset: 0xcf8, Size: 40]
	Actor* BattleLabTeleporterManager;//[Offset: 0xd20, Size: 8]
	bool bAlwaysIncludeDisconnectedTeammates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 1]
	bool bIncludeDisconnectedTeammatesFromAircraftPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf9, Size: 1]
	enum ForceKickAfterDeathMode;//[Offset: 0xe30, Size: 1]
	float ForceKickAfterDeathTime;//[Offset: 0xe34, Size: 4]
	int CreativeModeGracefulShutdownTime;//[Offset: 0xe38, Size: 4]
	HotfixVolumePlacement[] HotfixKillVolumes;//[Offset: 0xe40, Size: 16]
	HotfixVolumePlacement[] HotfixBlockingVolumes;//[Offset: 0xe50, Size: 16]
	HotfixVolumePlacement[] HotfixUndergroundVolumes;//[Offset: 0xe60, Size: 16]
	FName[] DisableMatchStatsReportingPlaylists;//[Offset: 0xe70, Size: 16]
	FName[] DisableProgressionReportingPlaylists;//[Offset: 0xe80, Size: 16]
	FortAthenaAircraft*[] Aircrafts;//[Offset: 0xe98, Size: 16]
	int MaxPlayerCount;//[Offset: 0xee0, Size: 4]
	FortPlayerControllerAthena*[] AlivePlayers;//[Offset: 0xee8, Size: 16]
	FortAthenaAIBotController*[] AliveBots;//[Offset: 0xef8, Size: 16]
	int[] TeamAlivePlayers;//[Offset: 0xf08, Size: 16]
	int WarmupRequiredPlayerCount;//[Offset: 0xf1c, Size: 4]
	float WarmupCountdownDuration;//[Offset: 0xf20, Size: 4]
	float WarmupEarlyCountdownDuration;//[Offset: 0xf28, Size: 4]
	bool bSafeZoneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 1]
	bool bSafeZonePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2d, Size: 1]
	class GameplayEffect* GE_OutsideSafeZone;//[Offset: 0xf30, Size: 8]
	class GameplayEffect* GE_OutsideSafeZoneCN;//[Offset: 0xf38, Size: 8]
	class FortSafeZoneIndicator* SafeZoneIndicatorClass;//[Offset: 0xf40, Size: 8]
	class MegaStormManager* MegaStormManagerClass;//[Offset: 0xf48, Size: 8]
	ScalableFloat SkyTubeDisablePhase;//[Offset: 0xf50, Size: 40]
	int SafeZonePhase;//[Offset: 0xf78, Size: 4]
	FortSafeZoneIndicator* SafeZoneIndicator;//[Offset: 0xf80, Size: 8]
	Vector[] SafeZoneLocations;//[Offset: 0xf88, Size: 16]
	bool bSafeZoneLocationsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 1]
	float EndGameKickPlayersDelay_NoIGMM;//[Offset: 0xf9c, Size: 4]
	float EndGameKickPlayersDelay_IGMM;//[Offset: 0xfa0, Size: 4]
	int EventStatSubmitAttempts;//[Offset: 0xfa4, Size: 4]
	MegaStormManager* MegaStormManager;//[Offset: 0xfb0, Size: 8]
	FString VoiceChatChannelPositional;//[Offset: 0xfb8, Size: 16]
	bool bUseRandomTimeOfDay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 1]
	AthenaAISettings* AISettings;//[Offset: 0xfd0, Size: 8]
	class FortServerBotManagerAthena* ServerBotManagerClass;//[Offset: 0xfd8, Size: 8]
	FortPlayerControllerSpectating*[] LiveSpectators;//[Offset: 0xfe0, Size: 16]
	class FortPlayerControllerSpectating* SpectateAFriendPlayerControllerClass;//[Offset: 0xff0, Size: 8]
	class FortPlayerControllerSpectating* LiveBroadcastPlayerControllerClass;//[Offset: 0xff8, Size: 8]
	FName[] PlatformOSSNamesToUploadStatsV2;//[Offset: 0x1010, Size: 16]
	<FName,enum> LeaderboardStatsDefaultOssInputTypes;//[Offset: 0x1020, Size: 80]
	FName[] BlacklistedMatchmakingBackfillPlaylists;//[Offset: 0x10b0, Size: 16]
	FName[] PlaylistsToRemoveSquadMappingOnLogout;//[Offset: 0x10c0, Size: 16]
	bool bEnableMatchmakingRatingUpdateV2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool bFlightPathInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	float ScorePerMinuteAlive;//[Offset: 0x10d8, Size: 4]
	float ScoreMaxMinutesAliveCounted;//[Offset: 0x10dc, Size: 4]
	float ScoreForGettingAtLeastOneKill;//[Offset: 0x10e0, Size: 4]
	float ScorePerScaledTeamKill;//[Offset: 0x10e4, Size: 4]
	float ScoreForFirstRevive;//[Offset: 0x10e8, Size: 4]
	float ScoreForSubsequentRevives;//[Offset: 0x10ec, Size: 4]
	int MaxAdditionalRevivesToScore;//[Offset: 0x10f0, Size: 4]
	ScorePlacementTable ScorePlacementTables;//[Offset: 0x10f8, Size: 224]
	float ScoreMultiplier;//[Offset: 0x11d8, Size: 4]
	int MaxActiveAIActors;//[Offset: 0x11dc, Size: 4]
	bool bLockMobilePlayersToTouchInSwitchPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 1]
	bool bAllCosmeticsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 1]
	AthenaCosmeticItemDefinition*[] SkyDiveContrailCosmetics;//[Offset: 0x11f0, Size: 16]
	int SkyDiveContrailLoadTestIndex;//[Offset: 0x1200, Size: 4]
	AthenaCosmeticItemDefinition*[] GliderCosmetics;//[Offset: 0x1208, Size: 16]
	int GliderLoadTestIndex;//[Offset: 0x1218, Size: 4]
	AthenaCosmeticItemDefinition*[] PickaxeCosmetics;//[Offset: 0x1220, Size: 16]
	int PickaxeLoadTestIndex;//[Offset: 0x1230, Size: 4]
	AthenaCosmeticItemDefinition*[] CharacterCosmetics;//[Offset: 0x1238, Size: 16]
	int CharacterLoadTestIndex;//[Offset: 0x1248, Size: 4]
	AthenaCosmeticItemDefinition*[] HatCosmetics;//[Offset: 0x1250, Size: 16]
	int HatLoadTestIndex;//[Offset: 0x1260, Size: 4]
	AthenaCosmeticItemDefinition*[] BackpackCosmetics;//[Offset: 0x1268, Size: 16]
	int BackpackLoadTestIndex;//[Offset: 0x1278, Size: 4]
	AthenaCosmeticItemDefinition*[] DanceCosmetics;//[Offset: 0x1280, Size: 16]
	int DanceLoadTestIndex;//[Offset: 0x1290, Size: 4]
	AthenaCosmeticItemDefinition*[] VictoryPoseCosmetics;//[Offset: 0x1298, Size: 16]
	int VictoryPoseLoadTestIndex;//[Offset: 0x12a8, Size: 4]
	AthenaCosmeticItemDefinition*[] MapMarkerCosmetics;//[Offset: 0x12b0, Size: 16]
	int MapMarkerLoadTestIndex;//[Offset: 0x12c0, Size: 4]
	int PetLoadTestIndex;//[Offset: 0x12c4, Size: 4]
	AthenaCosmeticItemDefinition*[] ConsumableEmoteCosmetics;//[Offset: 0x12c8, Size: 16]
	AthenaCosmeticItemDefinition*[] LoadingScreenCosmetics;//[Offset: 0x12d8, Size: 16]
	AthenaCosmeticItemDefinition*[] BattleBusCosmetics;//[Offset: 0x12e8, Size: 16]
	SupplyDropSpawnData[] SupplyDropSpawnDataList;//[Offset: 0x12f8, Size: 16]
	BuildingGameplayActorSpawnData[] BuildingGameplayActorSpawnData;//[Offset: 0x1308, Size: 16]
	ExitCraftSpawnData ExitCraftSpawnData;//[Offset: 0x1318, Size: 8]
	int LastSpawnedSupplyDropType;//[Offset: 0x1320, Size: 4]
	FortAthenaSpawningPolicyManager* SpawningPolicyManager;//[Offset: 0x1328, Size: 8]
	FortServerBotManagerAthena* ServerBotManager;//[Offset: 0x1330, Size: 8]
	AthenaVehicleOverride[] AthenaVehicleOverrides;//[Offset: 0x1338, Size: 16]
	AthenaCosmeticItemDefinition*[] ItemWrapCosmetics;//[Offset: 0x1348, Size: 16]
	AthenaCosmeticItemDefinition*[] MusicPacks;//[Offset: 0x1358, Size: 16]
	AthenaCosmeticItemDefinition*[] CharmCosmetics;//[Offset: 0x1368, Size: 16]
	class FortTimeOfDayManager* TimeOfDayManagerGameplayOverride;//[Offset: 0x1378, Size: 8]
	FortSpawnActorData[] SpawnActorDataList;//[Offset: 0x1380, Size: 16]
	FortMutatorListComponent* MutatorListComponent;//[Offset: 0x13a8, Size: 8]
	FortGameplayModifierItemDefinition*[] CoreGameModeModifiers;//[Offset: 0x13b0, Size: 16]
	FName[] SupportedAthenaLootTierGroups;//[Offset: 0x1480, Size: 16]
	<FName,FName> RedirectAthenaLootTierGroups;//[Offset: 0x1490, Size: 80]
	ScalableFloat StormCampingInitialDelayTime;//[Offset: 0x1500, Size: 40]
	ScalableFloat StormCampingIncrementTimeAfterDelay;//[Offset: 0x1528, Size: 40]
	ScalableFloat StormCampingDamageMultiplier;//[Offset: 0x1550, Size: 40]
	bool bEnableCompetitiveMissingPlayerMatchInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1590, Size: 1]
	float StartAircraftPhaseRequiredAlivePlayersPercent;//[Offset: 0x1594, Size: 4]
	float EndAircraftPhaseRequiredAlivePlayersPercent;//[Offset: 0x1598, Size: 4]
	bool bEnableCompetitiveDDoSDetectionMatchInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159c, Size: 1]
	FString DDoSDetectionMatchInvalidationSeverity;//[Offset: 0x15a0, Size: 16]
	int DDoSDetectionMatchInvalidationCount;//[Offset: 0x15b0, Size: 4]
	float DDoSDetectionMatchInvalidationEvalDurationSeconds;//[Offset: 0x15b4, Size: 4]
	FString[] ReticulatedSplineDefinitions;//[Offset: 0x15d8, Size: 16]
	bool bReticulateSplineKeysOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e8, Size: 1]
	AthenaStreamIdOverride[] ReticulatedSplineIds;//[Offset: 0x15f0, Size: 16]
	DataTable*[] GameFeatureLootTierData;//[Offset: 0x1600, Size: 16]
	DataTable*[] GameFeatureLootPackageData;//[Offset: 0x1610, Size: 16]
	FortGameFeatureData*[] GameFeaturesStreamingRangedWeaponData;//[Offset: 0x1620, Size: 16]
	static void StopRemovingAllLoot(Object* WorldContext, bool bImmediateCleanup);// 0xcfe7bb0
	void SetTimeOfDayManagerGameplayOverride(class FortTimeOfDayManager TimeOfDayManagerClass);// 0xcfe7b08
	void SafeZoneInsideChecks();// 0xcfe7af4
	static void RemoveAllLootFromWorld(Object* WorldContext, int ContainersPerIteration, int PickupsPerIteration, float TimeBetweenIterations, bool bProcessContainersAndPickupsConcurrently);// 0xcfe7958
	void OnMapInfoInitialized__DelegateSignature();// 0xbbc0600
	void OnGamePhaseStepChanged(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xcfe7860
	void OnEndGameKickPlayers();// 0xcfe784c
	void OnCheckForOrphanedServer(bool bFromPlayerLogout);// 0xcfe779c
	void OnAircraftFlightEnded(FortAthenaAircraft* FortAthenaAircraft);// 0xcfe76f4
	void OnAircraftExitedDropZone(FortAthenaAircraft* FortAthenaAircraft);// 0xcfe764c
	void OnAircraftEnteredDropZone(FortAthenaAircraft* FortAthenaAircraft);// 0xcfe75a4
	void JumpToSafeZonePhase();// 0xcfe7590
	bool IsMapInfoInitialized();// 0xcfe7574
	void HandleAllPlaylistLevelsVisible();// 0xcfe7560
	class Actor GetVehicleClassOverride(class Actor DefaultVehicleClass);// 0xcfe74b0
	void GetSquadMembers(byte SquadId, out FortPlayerStateAthena*[] SquadMembers);// 0xcfe73b0
	void GetSquadIdsOfNonSolos(out byte[] SquadsWithNonSolos);// 0xcfe72f0
	void GetSquadIds(out byte[] SquadIds);// 0xcfe7230
	FortServerBotManagerAthena* GetServerBotManager();// 0xcfe7214
	bool GetPlaylistEnableBots();// 0xcfe71d0
	FortGameplayMutator* GetMutatorByClass(const Actor* ContextActor, class FortGameplayMutator MutatorClass);// 0xcfe70dc
	FortGameplayMutator* GetGameplayMutator(GameplayTag MutatorTag);// 0xcfe702c
	Actor* GetBattleLabTeleporterManager();// 0xcfe7010
	void FireServerPerformanceEvent();// 0xcfe6ffc
	void EndGamePhaseStarted();// 0xbbc0600
	void EnableGameplayMutator(GameplayTag MutatorTag, bool bEnable);// 0xcfe6f0c
	void AddContentKeysToGameState();// 0xcfe6ef8
	void AddAIClassToReplicationGraph(class FortPawn NewAIClass);// 0xcfe6e50

--------------------------------
Class: FortGamePvPBase.FortGameModeZone.FortGameMode_InGame.FortGameMode.FortGameModeBase.PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object
	byte NumTeams;//[Offset: 0x9fc, Size: 1]

--------------------------------
Class: FortGameModeZone.FortGameMode_InGame.FortGameMode.FortGameModeBase.PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object
	MulticastInlineDelegateProperty OnPlayerLogin;//[Size: 16]
	bool bSpawnAllStuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a8, Size: 1]
	bool bDisableAI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6a8, Size: 1]
	bool bInitBeaconAtInitGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6a8, Size: 1]
	int OverrideAIDirectorIndex;//[Offset: 0x6ac, Size: 4]
	BuildingSMActor* ActiveSpawnPad;//[Offset: 0x6b0, Size: 8]
	bool bDisableVoiceChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	FString ReplayStreamerOverride;//[Offset: 0x6e8, Size: 16]
	FortAIDirector* AIDirector;//[Offset: 0x6f8, Size: 8]
	FortAIGoalManager* AIGoalManager;//[Offset: 0x700, Size: 8]
	int EndOfZoneRemainTime;//[Offset: 0x708, Size: 4]
	FortTaggedActorsManager* TaggedActorsManager;//[Offset: 0x710, Size: 8]
	FortBuildingOctreeManager* BuildingOctreeManager;//[Offset: 0x718, Size: 8]
	bool bUseAllSocketsInSpawnPad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	bool bAllowSpectateAfterDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 1]
	bool bForceSpectateAfterDeathRegardlessOfRespawnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 1]
	ScalableFloat SpectateAfterDeath_DelayFirst;//[Offset: 0x728, Size: 40]
	float SpectateAfterDeath_DelayRepeating;//[Offset: 0x750, Size: 4]
	HotfixVolumePlacement[] HotfixBehaviorVolumes;//[Offset: 0x758, Size: 16]
	class FortVisibilityManager* VisibilityManagerClass;//[Offset: 0x768, Size: 8]
	bool bCriticalMissionEligible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	<FName,float> ZoneLootNamedWeightsMapOverride;//[Offset: 0x7a8, Size: 80]
	FName[] XboxSubsystemNames;//[Offset: 0x7f8, Size: 16]
	FortPetManager* PetManager;//[Offset: 0x808, Size: 8]
	ItemAndCount[] StartingItems;//[Offset: 0x810, Size: 16]
	bool bAllowEnemyAIWorldItemLootDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x820, Size: 1]
	bool bAllowEnemyAIItemCacheLootDrops;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x820, Size: 1]
	bool bAllowContainerItemCacheLootDrops;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x820, Size: 1]
	MulticastInlineDelegateProperty OnHandleZonePeriodicReport;//[Size: 16]
	MulticastInlineDelegateProperty OnHandleMatchHasStarted;//[Size: 16]
	bool bTrustXboxPlatformId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	enum AssociatedSubGame;//[Offset: 0x849, Size: 1]
	SlateBrush BluGloMiniMapIconBrushOverride;//[Offset: 0x850, Size: 136]
	bool bTryToSpawnWithinStormShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	bool bSupportOneHitBuildingActorRecycling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 1]
	bool bOneHitResourcesGoToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96a, Size: 1]
	float StormWindInactiveMagnitudeScalar;//[Offset: 0x96c, Size: 4]
	float StormWindActiveMagnitudeScalar;//[Offset: 0x970, Size: 4]
	Vector[] PlayerStartLocationOverrides;//[Offset: 0x978, Size: 16]
	bool bEnableLongRangeAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	float LongRangeAutoPickupInterval;//[Offset: 0x9f4, Size: 4]
	float LongRangeAutoPickupRadius;//[Offset: 0x9f8, Size: 4]
	void SetZoneLootNamedWeightsMapOverride(out const <FName,float> NewOverrideMap);// 0xcfe9938
	void SetSpawnWithinStormShield(bool bSpawnInStormShield);// 0xcfe9888
	void SetPlayerStartLocationOverrides(Vector[] InPlayerStarts, FortMission* InMission);// 0xcfe976c
	void SetJoinability(bool bMatchJoinable);// 0xcfe96b4
	void SetEnemyAIItemCacheLootDrops(bool bValue);// 0xcfe9604
	void SetActiveSpawnPad(BuildingSMActor* InActiveSpawnPad);// 0xcfe9560
	void ReplicateHealthAndShield();// 0xcfe9544
	void OnMorningReached();// 0xcfe9528
	void OnEveningReached();// 0xcfe950c
	bool IsSpectatingAllowedAfterDeath();// 0xcfe94cc
	bool IsGameReadyToSelectLoot();// 0xcfe948c
	class GameplayEffect GetTeammateReviveGameplayEffectOverride();// 0xcfe9450
	FortPlayerStartupController* GetPlayerStartupController();// 0xcfe9418
	void ClearPlayerStartLocationOverrides();// 0xcfe9404

--------------------------------
Class: FortGameMode_InGame.FortGameMode.FortGameModeBase.PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: FortGameMode.FortGameModeBase.PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bDisableCloudStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bTravelInitiated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	FString CurrentWUID;//[Offset: 0x328, Size: 16]
	FString CurrentBucketId;//[Offset: 0x338, Size: 16]
	int CurrentPlaylistId;//[Offset: 0x348, Size: 4]
	FName CurrentPlaylistName;//[Offset: 0x34c, Size: 8]
	FString MatchmakingRegionId;//[Offset: 0x358, Size: 16]
	FString MatchmakingLinkCode;//[Offset: 0x368, Size: 16]
	FString CurrentZoneInstanceId;//[Offset: 0x378, Size: 16]
	int ZoneIndex;//[Offset: 0x38c, Size: 4]
	bool bPlayersInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x390, Size: 1]
	bool bKickIdlers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	float MaxIdleTime;//[Offset: 0x394, Size: 4]
	float NoScoreKickTime;//[Offset: 0x398, Size: 4]
	bool bEnableNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool bEnableReplicationGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	FortGameDeathPenalty* DefaultDeathPenaltyData;//[Offset: 0x3a0, Size: 40]
	FortGameDeathPenalty* DeathPenaltyData;//[Offset: 0x3c8, Size: 8]
	FortGameDeathPenalty* DeathPenaltyDataOverride;//[Offset: 0x3d0, Size: 8]
	FortGameSession* FortGameSession;//[Offset: 0x3d8, Size: 8]
	FString GameModeSessionString;//[Offset: 0x3e0, Size: 16]
	bool bIsAutomatedTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	class Pawn* DefaultPawnClassStringRef;//[Offset: 0x3f8, Size: 40]
	class FortMissionManager* MissionManagerClass;//[Offset: 0x420, Size: 8]
	GameplayTagContainer GameModeGameplayTags;//[Offset: 0x428, Size: 32]
	bool bContainersForceTossLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bOverrideRotationOnRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	byte PendingTimerState;//[Offset: 0x461, Size: 1]
	bool bDBNOEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	bool bWorldIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 1]
	bool bTheaterDataIsReady;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 1]
	int TheaterSlot;//[Offset: 0x46c, Size: 4]
	float GameplayServerHitchThreshold;//[Offset: 0x470, Size: 4]
	float MovementTimeDiscrepancyHitchCooldown;//[Offset: 0x474, Size: 4]
	float AbilityRefireHitchCooldown;//[Offset: 0x478, Size: 4]
	bool bCheckWeaponTracesForPlayerBuiltWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	MatchHeartbeatManager* MatchHeartbeatManager;//[Offset: 0x480, Size: 8]
	FortAwardItemDefinition*[] ActiveAwards;//[Offset: 0x488, Size: 16]
	GameplayTagContainer GameContextTags;//[Offset: 0x4a8, Size: 32]
	FortSharedMissionLists* SharedMissionLists;//[Offset: 0x4c8, Size: 8]
	class FortTeamInfo* TeamInfoClass;//[Offset: 0x4e8, Size: 8]
	double[] FrameTimeWithoutSleepHistogramBucketsMs;//[Offset: 0x4f0, Size: 16]
	CumulativeFrameTimeWithoutSleepLimits[] CumulativeFrameTimeWithoutSleepLimits;//[Offset: 0x500, Size: 16]
	double[] GameNetDriverTickFlushCostPerClientBucketsMicroSec;//[Offset: 0x510, Size: 16]
	double[] DemoNetDriverTickFlushTimeHistogramBucketsMs;//[Offset: 0x520, Size: 16]
	double[] CPUTimeBuckets;//[Offset: 0x530, Size: 16]
	double[] CPUPercentPerCoreBuckets;//[Offset: 0x540, Size: 16]
	double[] ActorsStarvedByClassTimeHistogramBuckets;//[Offset: 0x550, Size: 16]
	FString[] StarvedActorClassList;//[Offset: 0x560, Size: 16]
	FortMissionGenerationManager* MissionGenerationManager;//[Offset: 0x588, Size: 8]
	BuildingFlushManager* FlushManager;//[Offset: 0x590, Size: 8]
	bool bAlwaysFlushMMREndZoneEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	bool bOverrideQuickBars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	QuickBarData QuickBarDefinitions;//[Offset: 0x5d8, Size: 16]
	FortPlayerControllerGameplay*[] ConnectedPlayerControllers;//[Offset: 0x660, Size: 16]
	void OnEndOfDay();// 0xcfe63b8
	void DumpReservations();// 0xcfe639c

--------------------------------
Class: FortGameModeBase.PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: PlayspaceGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 1]
	int NumSpectators;//[Offset: 0x2cc, Size: 4]
	int NumPlayers;//[Offset: 0x2d0, Size: 4]
	int NumBots;//[Offset: 0x2d4, Size: 4]
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 16]
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 4]
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	void StartMatch();// 0xd813838
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0xd813788
	void Say(FString Msg);// 0xd8136cc
	void RestartGame();// 0xd8136b0
	bool ReadyToStartMatch();// 0xb9fa810
	bool ReadyToEndMatch();// 0xb9fa7d0
	void K2_OnSetMatchState(FName NewState);// 0xbbc0600
	bool IsMatchInProgress();// 0xd813670
	FName GetMatchState();// 0xd813654
	void EndMatch();// 0xd813638
	void AbortMatch();// 0xd81361c

--------------------------------
Class: FortAIGoalManager.Actor.Object
	FortAIAssignment*[] WorldAssignments;//[Offset: 0x228, Size: 16]
	FortAIAssignment*[] WorldEnemyAssignments;//[Offset: 0x238, Size: 16]
	FortAIAssignment* DefaultAttackPlayersAssignment;//[Offset: 0x248, Size: 8]
	EnvQuery*[] CombinedQueries;//[Offset: 0x2b0, Size: 16]
	FortAIAssignmentSettings* DefaultEncounterAssignmentSettings;//[Offset: 0x310, Size: 8]
	FortAIAssignmentSettings* DefaultEnemyAssignmentSettings;//[Offset: 0x318, Size: 8]
	PawnGoalSelectionTableEntry[] PawnGoalSelectionTable;//[Offset: 0x320, Size: 16]
	static void SetCurrentGoalDiscouragement(Object* WorldContext, FortAIController* AI);// 0xceae850
	static void RemoveWorldAssignment(const Object* WorldContextObject, FortAIAssignmentIdentifier AssignmentIdentifier);// 0xceae704
	static void RemoveGoalsFromWorldAssignment(Object* WorldContextObject, out const FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIGoalInfo[] GoalInfos);// 0xceae590
	static void RemoveGoalFromWorldAssignment(Object* WorldContextObject, out const FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIGoalInfo GoalInfo);// 0xceae400
	static void MakeGoalsFromLocationsAndActor(out FortAIGoalInfo[] Goals, const Object* WorldContextObject, out const Vector[] GoalLocations, const Actor* GoalActor);// 0xceae268
	static void MakeGoalsFromLocations(out FortAIGoalInfo[] Goals, const Object* WorldContextObject, out const Vector[] GoalLocations);// 0xceae114
	static void MakeGoalsFromActors(out FortAIGoalInfo[] Goals, const Object* WorldContextObject, out const Actor*[] GoalActors, bool bActorsAlwaysPerceived, bool bGoalActorsAllowUndermining);// 0xceadf24
	static void MakeGoalFromLocation(out FortAIGoalInfo Goal, const Object* WorldContextObject, out const Vector GoalLocation);// 0xceaddc4
	static void MakeGoalFromActor(out FortAIGoalInfo Goal, const Object* WorldContextObject, Actor* GoalActor, bool bActorAlwaysPerceived, bool bGoalActorAllowsUndermining);// 0xceadbe0
	static void CreateWorldAssignment(Object* WorldContextObject, FortAIAssignmentIdentifier WorldAssignmentIdentifier, FortAIAssignmentSettings* AssignmentSettings, class FortAIGoalProvider GoalProvider, out FortAIAssignmentIdentifier AssignmentIdentifier, out enum CreationResult);// 0xcead934
	FortAIAssignment* AddWorldAssignment(FortAIAssignmentSettings* AssignmentSettings, Actor* GoalActor);// 0xcead848
	static void AddGoalToWorldAssignment(Object* WorldContextObject, out const FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIGoalInfo GoalInfo);// 0xcead6b8
	static void AddGoalsToWorldAssignment(Object* WorldContextObject, out const FortAIAssignmentIdentifier AssignmentIdentifier, out const FortAIGoalInfo[] GoalInfos);// 0xcead544
	void AddGoalActorToAssignment(FortAIAssignment* Assignment, Actor* GoalActor);// 0xcead460
	void AddGoal(Actor* GoalActor, FortAIAssignmentSettings* GoalSettings);// 0xcead37c

--------------------------------
Class: FortAIAssignmentIdentifier
	enum AssignmentType;//[Offset: 0x0, Size: 1]
	GameplayTagContainer AssignmentGameplayTags;//[Offset: 0x8, Size: 32]
	byte AssignmentTeam;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FortAIGoalInfo
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Location;//[Offset: 0x8, Size: 12]
	bool bActorAlwaysPerceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: FortAIAssignment.Object
	FortAIAssignmentIdentifier AssignmentIdentifier;//[Offset: 0x28, Size: 48]
	FortAIAssignmentSettings* AssignmentSettings;//[Offset: 0x58, Size: 8]
	FortAIGoalProvider* GoalProvider;//[Offset: 0x60, Size: 8]
	AIGoalComponent*[] GoalComponentsOnAssignment;//[Offset: 0x68, Size: 16]
	FortAIGoal[] Goals;//[Offset: 0xc8, Size: 16]

--------------------------------
Class: FortAIAssignmentSettings.DataAsset.Object
	GoalSelectionQueryInfo[] GoalSelectionQueryInfos;//[Offset: 0x30, Size: 16]
	bool bGoalLocationsAlwaysKnown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bIsEnemyAssignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	GameplayTagContainer RequiredTags;//[Offset: 0x48, Size: 32]
	GameplayTagContainer ProhibitedTags;//[Offset: 0x68, Size: 32]
	float MaxAIAllowedForAssignment;//[Offset: 0x88, Size: 4]
	float MaxAIAllowedPerGoal;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: GoalSelectionQueryInfo
	EnvQuery* GoalSelectionQuery;//[Offset: 0x0, Size: 8]
	GameplayTagContainer RequiredGameplayTags;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FortAIGoalProvider.Object
	World* World;//[Offset: 0x30, Size: 8]
	FortAIAssignment* AssignmentOwner;//[Offset: 0x38, Size: 8]
	FortAIEncounterInfo* EncounterInfo;//[Offset: 0x40, Size: 8]
	void UpdateGoals();// 0xcead340
	bool InitializeGoalProvider(World* ContextWorld, FortAIAssignment* Assignment);// 0xcead248
	FortAIEncounterInfo* GetEncounterInfo();// 0xcead20c

--------------------------------
Class: FortAIGoal.FortAIGoalInfo
	AIGoalComponent*[] GoalComponentsAssignedToGoal;//[Offset: 0x18, Size: 16]

--------------------------------
Class: PawnGoalSelectionTableEntry
	GameplayTagContainer RequiredGameplayTags;//[Offset: 0x0, Size: 32]
	PawnGoalSelectionCriteria PawnGoalSelectionCriteria;//[Offset: 0x20, Size: 80]

--------------------------------
Class: PawnGoalSelectionCriteria
	GameplayTagContainer IncludeEnemiesWithTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer ExcludeEnemiesWithTags;//[Offset: 0x20, Size: 32]
	GoalSelectionCriteria[] GoalSelectionCriteria;//[Offset: 0x40, Size: 16]

--------------------------------
Class: GoalSelectionCriteria
	EnvQuery* GoalSelectionQuery;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortGameDeathPenalty.DataAsset.Object
	float PercentResourcesToDrop;//[Offset: 0x30, Size: 4]
	float PercentWeaponsToDrop;//[Offset: 0x34, Size: 4]
	float PercentCraftingIngredientsToDrop;//[Offset: 0x38, Size: 4]
	float PercentConsumablesToDrop;//[Offset: 0x3c, Size: 4]
	float PercentAmmoToDrop;//[Offset: 0x40, Size: 4]
	float PercentResourcesToRecover;//[Offset: 0x44, Size: 4]
	float PercentWeaponsToRecover;//[Offset: 0x48, Size: 4]
	float PercentCraftingIngredientsToRecover;//[Offset: 0x4c, Size: 4]
	float PercentConsumablesToRecover;//[Offset: 0x50, Size: 4]
	float PercentAmmoToRecover;//[Offset: 0x54, Size: 4]
	int MinResourcesToKeep;//[Offset: 0x58, Size: 4]
	int MinWeaponsToKeep;//[Offset: 0x5c, Size: 4]
	int MinCraftingIngredientsToKeep;//[Offset: 0x60, Size: 4]
	int MinConsumablesToKeep;//[Offset: 0x64, Size: 4]
	int MinAmmoToKeep;//[Offset: 0x68, Size: 4]
	CurveTableRowHandle RespawnDelays;//[Offset: 0x70, Size: 16]
	CurveFloat* RespawnDelayOverTime;//[Offset: 0x80, Size: 8]
	float MaxRespawnDelay;//[Offset: 0x88, Size: 4]
	float MinSelfResurrectDelay;//[Offset: 0x8c, Size: 4]
	bool bUseRegenHealthOnRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	float PercentHealthOnRespawn;//[Offset: 0x94, Size: 4]
	float PercentShieldOnRespawn;//[Offset: 0x98, Size: 4]
	float PercentStaminaOnRespawn;//[Offset: 0x9c, Size: 4]
	float RespawnDurabilityPenalty;//[Offset: 0xa0, Size: 4]
	float SelfResurrectDurabilityPenalty;//[Offset: 0xa4, Size: 4]
	float TeammateResurrectDurabilityPenalty;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: FortGameSession.GameSession.Info.Actor.Object
	FortHostSessionParams CurrentSessionParams;//[Offset: 0x258, Size: 12]
	class OnlineBeaconHostObject* ReservationBeaconHostClass;//[Offset: 0x278, Size: 8]
	class OnlineBeaconHostObject* SpectatorBeaconHostClass;//[Offset: 0x280, Size: 8]
	FortPartyBeaconHost* ReservationBeaconHost;//[Offset: 0x290, Size: 8]
	FortLobbyBeaconHost* LobbyBeaconHost;//[Offset: 0x298, Size: 8]
	FortSpectatorBeaconHost* SpectatorBeaconHost;//[Offset: 0x2a0, Size: 8]
	FortDisconnectedPlayerReservation[] DisconnectedPlayerReservations;//[Offset: 0x2a8, Size: 16]
	ContentBeaconHostObject* ContentBeaconHost;//[Offset: 0x2b8, Size: 8]
	PlayerReservation[] PlayersToRegister;//[Offset: 0x2c0, Size: 16]
	float BulkUnregisterTimerDelay;//[Offset: 0x2d0, Size: 4]
	int MaxBroadcasters;//[Offset: 0x2d4, Size: 4]
	float DisconnectedReservationTimeout;//[Offset: 0x2d8, Size: 4]
	bool bShouldServerForcePartnerId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	FString ServerForcePartnerId;//[Offset: 0x2e0, Size: 16]
	bool bEnableMeshNetwork;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	FString[] DisabledMeshNodeTypes;//[Offset: 0x328, Size: 16]
	FString[] DisabledMeshRegions;//[Offset: 0x338, Size: 16]
	FortMeshBeaconHost* MeshBeaconHost;//[Offset: 0x348, Size: 8]
	FortMeshBeaconHostObject* MeshBeaconHostObject;//[Offset: 0x350, Size: 8]
	FortMeshBeaconClient* MeshBeaconClient;//[Offset: 0x358, Size: 8]
	float RetryMeshConnectDelay;//[Offset: 0x360, Size: 4]
	float MaxMeshConnectDelay;//[Offset: 0x364, Size: 4]
	float MeshNetworkServerStatusEventRate;//[Offset: 0x368, Size: 4]
	void DumpReservations();// 0xcfff98c

--------------------------------
Class: FortHostSessionParams
	FName SessionName;//[Offset: 0x0, Size: 8]
	int ControllerId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x220, Size: 16]
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x230, Size: 8]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x238, Size: 16]

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x250, Size: 8]
	NetConnection* BeaconConnection;//[Offset: 0x258, Size: 8]
	enum ConnectionState;//[Offset: 0x260, Size: 1]
	void ClientOnConnected();// 0xbd48fdc

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x228, Size: 4]
	float BeaconConnectionTimeout;//[Offset: 0x22c, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x230, Size: 8]

--------------------------------
Class: FortPartyBeaconHost.PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PlayerSquadMapping[] PlayerSquadMapping;//[Offset: 0x2f8, Size: 16]
	bool bUseSquadMappingOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	FString[] RegionsToUseSquadOverrides;//[Offset: 0x310, Size: 16]

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x248, Size: 8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 4]
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 4]

--------------------------------
Class: PlayerSquadMapping
	FName PlaylistName;//[Offset: 0x0, Size: 8]
	FString PlayerID;//[Offset: 0x8, Size: 16]
	FString CustomMatchKey;//[Offset: 0x18, Size: 16]
	uint32 TeamId;//[Offset: 0x28, Size: 4]
	uint32 PartyId;//[Offset: 0x2c, Size: 4]
	int SeatId;//[Offset: 0x30, Size: 4]

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 4]
	int MaxReservations;//[Offset: 0x34, Size: 4]
	int NumTeams;//[Offset: 0x38, Size: 4]
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 4]
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 8]
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 4]
	int ForceTeamNum;//[Offset: 0x4c, Size: 4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	FString[] PlatformCrossplayRestrictions;//[Offset: 0x58, Size: 16]
	PartyBeaconCrossplayPlatformMapping[] PlatformTypeMapping;//[Offset: 0x68, Size: 16]
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	PartyReservation[] Reservations;//[Offset: 0x80, Size: 16]

--------------------------------
Class: PartyBeaconCrossplayPlatformMapping
	FString PlatformName;//[Offset: 0x0, Size: 16]
	FString PlatformType;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 4]
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 40]
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 16]
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x40, Size: 16]

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 40]
	FString ValidationStr;//[Offset: 0x28, Size: 16]
	FString Platform;//[Offset: 0x38, Size: 16]
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float ElapsedTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: FortLobbyBeaconHost.LobbyBeaconHost.OnlineBeaconHostObject.Actor.Object
	bool bAllowReservationsToProceedToLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bWorldRecordLoaded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	int LastReservationCountForPermissionTimeoutChange;//[Offset: 0x284, Size: 4]
	float LobbyPermissionTimeout;//[Offset: 0x288, Size: 4]

--------------------------------
Class: LobbyBeaconHost.OnlineBeaconHostObject.Actor.Object
	class LobbyBeaconState* LobbyStateClass;//[Offset: 0x250, Size: 40]
	LobbyBeaconState* LobbyState;//[Offset: 0x278, Size: 8]

--------------------------------
Class: LobbyBeaconState.Info.Actor.Object
	int MaxPlayers;//[Offset: 0x220, Size: 4]
	class LobbyBeaconPlayerState* LobbyBeaconPlayerStateClass;//[Offset: 0x228, Size: 8]
	bool bLobbyStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	float WaitForPlayersTimeRemaining;//[Offset: 0x23c, Size: 4]
	LobbyPlayerStateInfoArray Players;//[Offset: 0x240, Size: 288]
	void OnRep_WaitForPlayersTimeRemaining();// 0x7614c60
	void OnRep_LobbyStarted();// 0x7614c74

--------------------------------
Class: LobbyBeaconPlayerState.Info.Actor.Object
	FText DisplayName;//[Offset: 0x220, Size: 24]
	UniqueNetIdRepl UniqueId;//[Offset: 0x238, Size: 40]
	UniqueNetIdRepl PartyOwnerUniqueId;//[Offset: 0x260, Size: 40]
	bool bInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	OnlineBeaconClient* ClientActor;//[Offset: 0x290, Size: 8]
	void OnRep_UniqueId();// 0x761478c
	void OnRep_PartyOwner();// 0x7614778
	void OnRep_InLobby();// 0x7614764

--------------------------------
Class: LobbyPlayerStateInfoArray.FastArraySerializer
	LobbyPlayerStateActorInfo[] Players;//[Offset: 0x108, Size: 16]
	LobbyBeaconState* ParentState;//[Offset: 0x118, Size: 8]

--------------------------------
Class: LobbyPlayerStateActorInfo.FastArraySerializerItem
	LobbyBeaconPlayerState* LobbyPlayerState;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortSpectatorBeaconHost.SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x248, Size: 8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 4]
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 4]

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 4]
	int MaxReservations;//[Offset: 0x34, Size: 4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 40]
	PlayerReservation Spectator;//[Offset: 0x28, Size: 80]

--------------------------------
Class: FortDisconnectedPlayerReservation
	FName SessionName;//[Offset: 0x0, Size: 8]
	UniqueNetIdRepl PlayerID;//[Offset: 0x8, Size: 40]

--------------------------------
Class: ContentBeaconHostObject.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: FortMeshBeaconHost.MeshBeaconHost.OnlineBeaconHost.OnlineBeacon.Actor.Object

--------------------------------
Class: MeshBeaconHost.OnlineBeaconHost.OnlineBeacon.Actor.Object
	int MaxConnections;//[Offset: 0x308, Size: 4]

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x250, Size: 4]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x258, Size: 16]

--------------------------------
Class: FortMeshBeaconHostObject.MeshBeaconHostObject.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: MeshBeaconHostObject.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: FortMeshBeaconClient.MeshBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	bool bIgnoreFailedUpdateLevelVisibilityValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]

--------------------------------
Class: MeshBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	bool bConnectedToRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	DateTime MeshPingTime;//[Offset: 0x2f8, Size: 8]
	FString[] ParentIds;//[Offset: 0x300, Size: 16]
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x7ffabb4
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x7ffac90
	void OnRep_ParentIds();// 0x7ffab70
	void OnRep_MeshPingTime();// 0x7ffab84
	void OnRep_ConnectedToRoot();// 0x7ffaba0

--------------------------------
Class: FortMissionManager.Actor.Object
	FortMissionEventName[] MissionEventNames;//[Offset: 0x220, Size: 16]
	class GameplayEffect* PrimaryMissionGE;//[Offset: 0x230, Size: 40]
	FortBluGloManager* BluGloManager;//[Offset: 0x260, Size: 8]
	FortMission*[] Missions;//[Offset: 0x268, Size: 16]
	class FortAIPawn[] AllMissionEnemyClasses;//[Offset: 0x278, Size: 16]
	FortMissionEventReceiverByGameplayTagQuery[] ContainerSearchedMissionReceivers;//[Offset: 0x288, Size: 16]
	FortMissionEventReceiverByGameplayTagQuery[] HarvestedMissionReceivers;//[Offset: 0x298, Size: 16]
	FortMissionUIActorHandle[] MissionUIActors;//[Offset: 0x2f8, Size: 16]
	FortMission* CurrentUIFocusedMission;//[Offset: 0x308, Size: 8]
	FortMission* MissionClosestToPar;//[Offset: 0x310, Size: 8]
	MulticastInlineDelegateProperty OnMissionsUpdated;//[Size: 16]
	EarnedBadgeEntryArray EarnedBadgesArray;//[Offset: 0x340, Size: 280]
	MulticastInlineDelegateProperty OnShouldShowSecondaryMissionHeadersChanged;//[Size: 16]
	bool bDisplaySecondaryMissionHeaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	bool ShouldShowSecondaryMissionHeaders();// 0xd0dec7c
	void OnRep_MissionUIActors();// 0xd0dec60
	void OnRep_Missions();// 0xd0dec44
	void OnRep_EarnedBadgesArray();// 0xd0dec30
	void OnRep_CurrentUIFocusedMission();// 0xd0dec14
	void OnRep_AllMissionEnemyClasses();// 0xd0debf8
	static bool GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery(Object* WorldContextObject, out const GameplayTagQuery TagQuery, out Actor*[] SpawnLocationActors);// 0xd0dea70
	static bool GetSpawnLocationActorsMatchingEntryItemQuery(Object* WorldContextObject, out const GameplayTagQuery TagQuery, out Actor*[] SpawnLocationActors);// 0xd0de8e8

--------------------------------
Class: FortMissionEventName.FortEventName

--------------------------------
Class: FortBluGloManager.Actor.Object
	float BluGloPerMinute;//[Offset: 0x220, Size: 4]
	SlateBrush BluGloIcon;//[Offset: 0x228, Size: 136]
	FortItemDefinition* GetBluGloItemDefinition();// 0xcf39d40

--------------------------------
Class: FortMissionEventReceiverByGameplayTagQuery
	GameplayTagQuery TagQueryEventDiscriminator;//[Offset: 0x0, Size: 72]
	FortMissionEventDelegateHolder* DelegateHolder;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortMissionEventDelegateHolder.Object

--------------------------------
Class: FortMissionUIActorHandle
	Actor* AttachedActor;//[Offset: 0x0, Size: 8]
	Vector AttachmentOffset;//[Offset: 0x8, Size: 12]
	float MaxVisibleDistance;//[Offset: 0x14, Size: 4]
	GUID MissionGuid;//[Offset: 0x18, Size: 16]
	FortMissionInfoIndicator* MissionUIIndicator;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortMissionInfoIndicator.FortSlateHUDIndicator.FortIndicator.Object

--------------------------------
Class: EarnedBadgeEntryArray.FastArraySerializer
	EarnedBadgeEntry[] Items;//[Offset: 0x108, Size: 16]

--------------------------------
Class: EarnedBadgeEntry.FastArraySerializerItem
	FortBadgeItemDefinition* Badge;//[Offset: 0x10, Size: 8]
	EarnedBadgePlayerData[] PlayerData;//[Offset: 0x18, Size: 16]
	byte RewardType;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FortBadgeItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FText DisplayText;//[Offset: 0x798, Size: 24]
	FText FailedDisplayText;//[Offset: 0x7b0, Size: 24]
	LinearColor BadgeColor;//[Offset: 0x7c8, Size: 16]
	int UIMissionPointsOffset;//[Offset: 0x7d8, Size: 4]
	DataTableRowHandle BadgeScoringValuesHandle;//[Offset: 0x7e0, Size: 16]
	FortCardPackItemDefinition* BadgeCardPackReward;//[Offset: 0x7f0, Size: 40]
	FortItemQuantityPair[] ItemRewards;//[Offset: 0x818, Size: 16]
	int GetUIMissionPointsOffset();// 0xcf313a8
	int GetScoreAwarded(const PlayerController* PlayerController);// 0xcf312f8
	int GetMissionPoints();// 0xcf312a8
	int GetBadgeScoreThreshold();// 0xcf31274
	enum GetBadgeScoreCategory();// 0xcf31240

--------------------------------
Class: FortCardPackItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bIsLlama;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool bIsChoicePack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool bAutoOpenAsReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	int LootTier;//[Offset: 0x3c4, Size: 4]
	FString LootTierGroup;//[Offset: 0x3c8, Size: 16]
	int DisplayRarityLevel;//[Offset: 0x3d8, Size: 4]
	Texture* PackImage;//[Offset: 0x3e0, Size: 40]
	Texture2D* XRayTexture;//[Offset: 0x408, Size: 40]
	LinearColor PackColor;//[Offset: 0x430, Size: 16]
	FortPackPersonality* PackPersonality;//[Offset: 0x440, Size: 40]
	bool IsLlama();// 0xcf4565c
	bool IsChoicePack();// 0xcf45624
	Texture2D* GetXRayImage();// 0xcf45548
	FortPackPersonality* GetPackPersonality();// 0xcf45514
	Texture* GetPackImage();// 0xcf454e0
	LinearColor GetPackColor();// 0xcf454a8
	int GetDisplayRarityLevel();// 0xcf45474

--------------------------------
Class: FortPackPersonality.DataAsset.Object
	SoundCue* TickleVOSound;//[Offset: 0x30, Size: 8]
	SoundCue* TickleSFXSound;//[Offset: 0x38, Size: 8]
	SoundCue* XRayVOSound;//[Offset: 0x40, Size: 8]
	SoundCue* HoverVOSound;//[Offset: 0x48, Size: 8]
	SoundCue* BuySFXSound;//[Offset: 0x50, Size: 8]
	SoundCue* OpenGenericVO_Sound;//[Offset: 0x58, Size: 8]
	SoundCue* OpenGenericSFX_Sound;//[Offset: 0x60, Size: 8]
	SoundCue* UpgradeSilverVO_Sound;//[Offset: 0x68, Size: 8]
	SoundCue* UpgradeSilverSFX_Sound;//[Offset: 0x70, Size: 8]
	SoundCue* OpenSilverVO_Sound;//[Offset: 0x78, Size: 8]
	SoundCue* OpenSilverSFX_Sound;//[Offset: 0x80, Size: 8]
	SoundCue* UpgradeGoldVO_Sound;//[Offset: 0x88, Size: 8]
	SoundCue* UpgradeGoldSFX_Sound;//[Offset: 0x90, Size: 8]
	SoundCue* OpenGoldVO_Sound;//[Offset: 0x98, Size: 8]
	SoundCue* OpenGoldSFX_Sound;//[Offset: 0xa0, Size: 8]
	SoundCue* GreetGenericVO_Sound;//[Offset: 0xa8, Size: 8]
	SoundCue* GreetAxeVO_Sound;//[Offset: 0xb0, Size: 8]
	SoundCue* GreetBaseballBatVO_Sound;//[Offset: 0xb8, Size: 8]
	SoundCue* GreetGardenHoeVO_Sound;//[Offset: 0xc0, Size: 8]
	SoundCue* GreetGardenRakeVO_Sound;//[Offset: 0xc8, Size: 8]
	SoundCue* GreetHockeyStickVO_Sound;//[Offset: 0xd0, Size: 8]
	SoundCue* GreetPickAxeVO_Sound;//[Offset: 0xd8, Size: 8]
	SoundCue* GreetPitchforkVO_Sound;//[Offset: 0xe0, Size: 8]
	SoundCue* GreetScytheVO_Sound;//[Offset: 0xe8, Size: 8]
	SoundCue* GreetSledgehammerVO_Sound;//[Offset: 0xf0, Size: 8]
	SoundCue* GreetSwordVO_Sound;//[Offset: 0xf8, Size: 8]
	SoundCue* PreHitVO_Sound;//[Offset: 0x100, Size: 8]
	SoundCue* DropMusic_Sound;//[Offset: 0x108, Size: 8]
	SoundCue* OpenMusic_Sound;//[Offset: 0x110, Size: 8]

--------------------------------
Class: EarnedBadgePlayerData
	UniqueNetIdRepl PlayerID;//[Offset: 0x0, Size: 40]
	int Count;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortPlayerStartupController.Actor.Object
	bool UseIndividualHoldingAreas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	float DelayAfterFirstInTime;//[Offset: 0x224, Size: 4]
	float ContainmentTimer;//[Offset: 0x228, Size: 4]
	float AllInCountdownTime;//[Offset: 0x22c, Size: 4]
	float ErodeShieldTime;//[Offset: 0x230, Size: 4]
	float StopJoinabilityTime;//[Offset: 0x23c, Size: 4]
	bool DestroyImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	MulticastInlineDelegateProperty OnPlayerStartupControllerCreated;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerStartupControllerRegistered;//[Size: 16]
	MulticastInlineDelegateProperty OnAllInCountdownInitiated;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerStartupControllerDestroyed;//[Size: 16]
	MulticastInlineDelegateProperty OnResetContainmentTimer;//[Size: 16]
	void OnPlayerLoadedIn_BP(FortPlayerControllerZone* NewPlayerPC);// 0xbbc0600
	void OnAllPlayersLoadedIn_BP();// 0xbbc0600
	void HandlePlayerStartupControllerReset();// 0xd18c244
	void HandlePlayerStartupControllerRegistered();// 0xd18c228
	void HandlePlayerStartupControllerDestroyed();// 0xd18c20c
	void HandlePlayerStartupControllerCreated();// 0xd18c1f0
	void HandleAllInCountdownInitiated();// 0xd18c1d4
	int GetNumPlayersStillWaitingFor();// 0xd18c1a0
	int GetNumPlayersExpected();// 0xd18c16c
	int GetNumPlayersCurrentlyReady();// 0xd18c150
	float GetContainmentTimeRemaining();// 0xd18c134
	void DropContainmentTimeToAllInCountdownTime();// 0xd18c120

--------------------------------
Class: FortTaggedActorsManager.Object

--------------------------------
Class: FortBuildingOctreeManager.Object

--------------------------------
Class: HotfixVolumePlacement
	FString Map;//[Offset: 0x0, Size: 16]
	Vector Center;//[Offset: 0x10, Size: 12]
	Vector Extent;//[Offset: 0x1c, Size: 12]
	FString GameInclude;//[Offset: 0x28, Size: 16]
	FString GameExclude;//[Offset: 0x38, Size: 16]
	bool bNeededOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: FortTeamPrivateInfo.Info.Actor.Object
	FortTeamInfo* TeamInfo;//[Offset: 0x220, Size: 8]
	PrivateTeamDataArray RepData;//[Offset: 0x228, Size: 384]
	LatentRepTeamDataArray LatentTeamRepData;//[Offset: 0x3a8, Size: 288]
	uint16 AverageDamageDealt;//[Offset: 0x4c8, Size: 2]
	void OnRep_RepData();// 0xb6c6b84

--------------------------------
Class: FortTeamInfo.Info.Actor.Object
	Controller*[] TeamMembers;//[Offset: 0x228, Size: 16]
	byte Team;//[Offset: 0x238, Size: 1]
	FString ChatRoomId;//[Offset: 0x240, Size: 16]
	TeamSpottedActorInfoArray TeamSpottedActors;//[Offset: 0x250, Size: 288]
	FortTeamPrivateInfo* PrivateInfo;//[Offset: 0x370, Size: 8]
	void OnSpottedActorDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd1e1cf4
	int GetTeamLevel();// 0xd1e1cb8
	int GetTeamExperience();// 0xd1e1c7c

--------------------------------
Class: TeamSpottedActorInfoArray.FastArraySerializer
	TeamSpottedActorInfo[] SpottedActorInfo;//[Offset: 0x108, Size: 16]
	FortTeamInfo* OwningTeam;//[Offset: 0x118, Size: 8]

--------------------------------
Class: TeamSpottedActorInfo.FastArraySerializerItem
	FortPlayerController* Spotter;//[Offset: 0x10, Size: 8]
	Actor* SpottedActor;//[Offset: 0x18, Size: 8]

--------------------------------
Class: PrivateTeamDataArray.FastArraySerializer
	PrivateTeamDataItem[] Items;//[Offset: 0x108, Size: 16]

--------------------------------
Class: PrivateTeamDataItem.FastArraySerializerItem
	float Value;//[Offset: 0xc, Size: 4]
	UniqueNetIdRepl PlayerID;//[Offset: 0x10, Size: 40]

--------------------------------
Class: LatentRepTeamDataArray.FastArraySerializer
	LatentRepPlayerData[] PlayerData;//[Offset: 0x108, Size: 16]
	int CurrPlayerUpdateIndex;//[Offset: 0x118, Size: 4]

--------------------------------
Class: LatentRepPlayerData.FastArraySerializerItem
	FortPlayerStateAthena* PlayerState;//[Offset: 0x10, Size: 8]
	float LastPawnNotRelevantTime;//[Offset: 0x18, Size: 4]
	bool bPawnIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bWasPawnRelevantLastUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	Vector CurrentLocation;//[Offset: 0x20, Size: 12]
	float CurrentYaw;//[Offset: 0x2c, Size: 4]
	float LastLocationReplicationTime;//[Offset: 0x30, Size: 4]
	float PrevLocationReplicatedTime;//[Offset: 0x34, Size: 4]
	Vector_NetQuantize100 LastRepLocation;//[Offset: 0x38, Size: 12]
	Vector_NetQuantize100 PrevRepLocation;//[Offset: 0x44, Size: 12]
	Vector LerpStartLocation;//[Offset: 0x50, Size: 12]
	float LastYawReplicationTime;//[Offset: 0x5c, Size: 4]
	float PrevYawReplicatedTime;//[Offset: 0x60, Size: 4]
	float LastRepYaw;//[Offset: 0x64, Size: 4]
	float PrevRepYaw;//[Offset: 0x68, Size: 4]
	float LerpStartYaw;//[Offset: 0x6c, Size: 4]
	enum PawnStateMask;//[Offset: 0x70, Size: 1]
	enum CurrPawnStateMask;//[Offset: 0x71, Size: 1]
	uint16 CurieStateBitfield;//[Offset: 0x72, Size: 2]

--------------------------------
Class: TimeOfDayOverride
	FName PlaylistName;//[Offset: 0x0, Size: 8]
	float TimeOfDay;//[Offset: 0x8, Size: 4]
	float TimeOfDaySpeed;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GCSettingsOverride
	FName PlaylistName;//[Offset: 0x0, Size: 8]
	bool bEnableGCOnServerDuringMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float GCFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortAthenaAircraft.FortAircraft.Actor.Object
	LinearColor MinimapIconColorTeammate;//[Offset: 0x248, Size: 16]
	LinearColor MinimapIconColorEnemy;//[Offset: 0x258, Size: 16]
	int NumSpawnSlots;//[Offset: 0x298, Size: 4]
	float SpawnOffsetRadius;//[Offset: 0x29c, Size: 4]
	AircraftFlightInfo FlightInfo;//[Offset: 0x2b0, Size: 40]
	float FlightStartTime;//[Offset: 0x2d8, Size: 4]
	float FlightEndTime;//[Offset: 0x2dc, Size: 4]
	float DropStartTime;//[Offset: 0x2e0, Size: 4]
	float DropEndTime;//[Offset: 0x2e4, Size: 4]
	bool bIsOutOfPhaseAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float ReplicatedFlightTimestamp;//[Offset: 0x2ec, Size: 4]
	float FlightElapsedTime;//[Offset: 0x2f0, Size: 4]
	float ClientFlightTimerDrift;//[Offset: 0x2f4, Size: 4]
	float MiniMapIconScale;//[Offset: 0x2fc, Size: 4]
	SlateBrush MiniMapIconBrush;//[Offset: 0x300, Size: 136]
	float MiniMapTeamIndicatorIconScale;//[Offset: 0x388, Size: 4]
	SlateBrush MiniMapTeamIndicatorIconBrush;//[Offset: 0x390, Size: 136]
	AthenaBattleBusItemDefinition* DefaultBusSkin;//[Offset: 0x418, Size: 8]
	BattleBusCosmeticInstanceBase* SpawnedCosmeticActor;//[Offset: 0x420, Size: 8]
	AthenaBattleBusItemDefinition* AsyncLoadingSkin;//[Offset: 0x428, Size: 8]
	int AircraftIndex;//[Offset: 0x440, Size: 4]
	FortMiniMapIndicator* Indicator;//[Offset: 0x448, Size: 8]
	FortMiniMapIndicator* TeamIndicator;//[Offset: 0x450, Size: 8]
	void OnRep_ReplicatedFlightTimestamp();// 0xb61cf48
	float GetDropStartTime();// 0xced34d4
	float GetDropEndTime();// 0xced34a0
	void FortAthenaAircraftDelegate__DelegateSignature(FortAthenaAircraft* FortAthenaAircraft);// 0xbbc0600

--------------------------------
Class: FortAircraft.Actor.Object
	int JumpFlashCount;//[Offset: 0x220, Size: 4]
	class FortCameraMode_ThirdPerson* CameraModeClass;//[Offset: 0x228, Size: 8]
	Rotator CameraInitialRotation;//[Offset: 0x230, Size: 12]
	Vector ExitLocation;//[Offset: 0x23c, Size: 12]
	void PlayEffectsForPlayerJumped();// 0xbbc0600
	void OnRep_JumpFlashCount();// 0xb60dc44

--------------------------------
Class: AircraftFlightInfo
	Vector_NetQuantize100 FlightStartLocation;//[Offset: 0x0, Size: 12]
	Rotator FlightStartRotation;//[Offset: 0xc, Size: 12]
	float FlightSpeed;//[Offset: 0x18, Size: 4]
	float TimeTillFlightEnd;//[Offset: 0x1c, Size: 4]
	float TimeTillDropStart;//[Offset: 0x20, Size: 4]
	float TimeTillDropEnd;//[Offset: 0x24, Size: 4]

--------------------------------
Class: FortCameraMode_ThirdPerson.FortCameraMode.Object
	float FOV;//[Offset: 0x50, Size: 4]
	float CameraSpaceForwardDistance;//[Offset: 0x54, Size: 4]
	bool bClampCameraPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bClampCameraYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	float CameraPitchMin;//[Offset: 0x5c, Size: 4]
	float CameraPitchMax;//[Offset: 0x60, Size: 4]
	float CameraYawMin;//[Offset: 0x64, Size: 4]
	float CameraYawMax;//[Offset: 0x68, Size: 4]
	byte CameraOrigin;//[Offset: 0x6c, Size: 1]
	FName CameraOriginSocketName;//[Offset: 0x70, Size: 8]
	Vector CameraOriginInterpSpeed;//[Offset: 0x78, Size: 12]
	InterpOffset ViewTargetSpaceViewOffset;//[Offset: 0x88, Size: 16]
	InterpOffset ViewTargetSpaceViewOffset_Crouch;//[Offset: 0x98, Size: 16]
	Vector ViewTargetSpaceViewOffseInterpSpeed;//[Offset: 0xa8, Size: 12]
	InterpOffset CameraSpaceViewOffset;//[Offset: 0xb8, Size: 16]
	float ViewTargetAlignmentFlipInterpDuration;//[Offset: 0xc8, Size: 4]
	bool bScaleViewOffsetByViewTargetScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bSupportsShoulderSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	Vector LastCameraOrigin;//[Offset: 0x100, Size: 12]
	Vector CameraOriginLocalOffset;//[Offset: 0x10c, Size: 12]
	float PenetrationBlendInTime;//[Offset: 0x118, Size: 4]
	float PenetrationBlendOutTime;//[Offset: 0x11c, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bDoPredictiveAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	float CollisionPushOutDistance;//[Offset: 0x124, Size: 4]
	float HidePawnPenetrationPercent;//[Offset: 0x128, Size: 4]
	FName LastAttachSocketName;//[Offset: 0x160, Size: 8]
	MinimalViewInfo LastBasePOV;//[Offset: 0x170, Size: 1504]
	MinimalViewInfo DeltaBasePOV;//[Offset: 0x750, Size: 1504]
	float BlendAlpha;//[Offset: 0xd30, Size: 4]
	PenetrationAvoidanceFeeler[] PenetrationAvoidanceFeelers;//[Offset: 0xd48, Size: 16]
	float SafeLocToAimLineBlockedPct;//[Offset: 0xd58, Size: 4]
	float AimLineToDesiredPosBlockedPct;//[Offset: 0xd5c, Size: 4]
	float LastDrawDebugTime;//[Offset: 0xd60, Size: 4]
	Vector LastViewTargetSpaceViewOffset;//[Offset: 0xd64, Size: 12]
	Vector LastViewTargetAlignmentUp;//[Offset: 0xd70, Size: 12]
	float ViewTargetAlignmentFlipInterpTime;//[Offset: 0xd7c, Size: 4]
	Vector LastCameraPivot;//[Offset: 0xd80, Size: 12]
	float CachedPitchLimitMin;//[Offset: 0xd8c, Size: 4]
	float CachedPitchLimitMax;//[Offset: 0xd90, Size: 4]
	float CachedYawLimitMin;//[Offset: 0xd94, Size: 4]
	float CachedYawLimitMax;//[Offset: 0xd98, Size: 4]
	bool bLastViewTargetValidGroupEmoteLookTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9c, Size: 1]
	Actor* IgnoreActorForCameraPenetration;//[Offset: 0xda0, Size: 8]
	Actor*[] DebugActorsHitDuringCameraPenetration;//[Offset: 0xda8, Size: 16]
	bool bWasInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb8, Size: 1]
	Actor* PreviousIgnoreActorForCameraPenetration;//[Offset: 0xdc0, Size: 8]

--------------------------------
Class: InterpOffset
	InterpOffsetData[] SamplePoints;//[Offset: 0x0, Size: 16]

--------------------------------
Class: InterpOffsetData
	Vector ViewOffset;//[Offset: 0x0, Size: 12]
	Vector LargeBodyTypeAddtnlOffset;//[Offset: 0xc, Size: 12]
	float PitchAngle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PenetrationAvoidanceFeeler
	Rotator AdjustmentRot;//[Offset: 0x0, Size: 12]
	float WorldWeight;//[Offset: 0xc, Size: 4]
	float PawnWeight;//[Offset: 0x10, Size: 4]
	float Extent;//[Offset: 0x14, Size: 4]
	int TraceInterval;//[Offset: 0x18, Size: 4]
	int FramesUntilNextTrace;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FortSafeZoneIndicator.Actor.Object
	FortMiniMapComponent* MinimapComp;//[Offset: 0x220, Size: 8]
	float LastRadius;//[Offset: 0x228, Size: 4]
	float NextRadius;//[Offset: 0x22c, Size: 4]
	float NextNextRadius;//[Offset: 0x230, Size: 4]
	Vector_NetQuantize100 LastCenter;//[Offset: 0x234, Size: 12]
	Vector_NetQuantize100 NextCenter;//[Offset: 0x240, Size: 12]
	Vector_NetQuantize100 NextNextCenter;//[Offset: 0x24c, Size: 12]
	bool bSafezoneEventDriven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool bPausedForPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bPausedForPreview_Previous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	GameplayTag MegaStormGameplayCueTag;//[Offset: 0x25c, Size: 8]
	int NextNextMegaStormGridCellThickness;//[Offset: 0x264, Size: 4]
	int NextMegaStormGridCellThickness;//[Offset: 0x268, Size: 4]
	float MegaStormDelayTimeBeforeDestruction;//[Offset: 0x26c, Size: 4]
	int NumActiveMegaStormCircles;//[Offset: 0x270, Size: 4]
	int ActiveMegaStormCircleGridCellCountFromEdge;//[Offset: 0x274, Size: 4]
	float SafeZoneHeight;//[Offset: 0x278, Size: 4]
	SlateBrush MiniMapIconBrush;//[Offset: 0x290, Size: 136]
	SlateBrush FarOffMiniMapIconBrush;//[Offset: 0x318, Size: 136]
	float SafeZoneStartShrinkTime;//[Offset: 0x3a4, Size: 4]
	float SafeZoneFinishShrinkTime;//[Offset: 0x3a8, Size: 4]
	float Radius;//[Offset: 0x3ac, Size: 4]
	StaticMeshComponent* SafeZoneMesh;//[Offset: 0x3b0, Size: 8]
	CurveFloat* MovementAudioCrossfadeCurve;//[Offset: 0x3b8, Size: 8]
	CurveFloat* MovementAudioPitchModCurve;//[Offset: 0x3c0, Size: 8]
	CurveFloat* ClockTickingAudioVolumeCurve;//[Offset: 0x3c8, Size: 8]
	CurveFloat* ClockTickingAudioPitchCurve;//[Offset: 0x3d0, Size: 8]
	MaterialParameterCollection* MaterialCollection;//[Offset: 0x3d8, Size: 8]
	FName SafeZoneLocName;//[Offset: 0x3e0, Size: 8]
	FName SafeZoneScaleName;//[Offset: 0x3e8, Size: 8]
	float SafeZoneWorldScale;//[Offset: 0x3f0, Size: 4]
	Vector ViewTargetLocation;//[Offset: 0x3f4, Size: 12]
	bool bIsViewTargetPawnOutside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	FName SuperStormActiveName;//[Offset: 0x404, Size: 8]
	float MegaStormFXAlphaFactor;//[Offset: 0x40c, Size: 4]
	float MegaStormFXFadeInTime;//[Offset: 0x410, Size: 4]
	float MegaStormFXFadeOutTime;//[Offset: 0x414, Size: 4]
	bool bMegaStormGameplayCueStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool bMegaStormStopPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	bool bCleanupFXWithAlphaFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	float MegaStormOneOverFXFadeInTime;//[Offset: 0x41c, Size: 4]
	float MegaStormOneOverFXFadeOutTime;//[Offset: 0x420, Size: 4]
	AudioComponent* ShieldBoundaryAudio;//[Offset: 0x428, Size: 8]
	AudioComponent* HoldingAudio;//[Offset: 0x430, Size: 8]
	AudioComponent* HoldingTickAudio;//[Offset: 0x438, Size: 8]
	bool bMegastormAudioActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	float AudioLowPassValue;//[Offset: 0x444, Size: 4]
	float AudioPitchMod;//[Offset: 0x448, Size: 4]
	float AudioCrossfade;//[Offset: 0x44c, Size: 4]
	float MegastormAudioIntensity;//[Offset: 0x450, Size: 4]
	float HoldingStartTime;//[Offset: 0x454, Size: 4]
	float TimeRemainingWhenPhasePaused;//[Offset: 0x458, Size: 4]
	byte ForceUpdateCount;//[Offset: 0x45c, Size: 1]
	FortSafeZoneIndicatorFuture* FutureReplicator;//[Offset: 0x478, Size: 8]
	void SetSafeZoneRadiusAndCenter(float InRadius, Vector InLocation);// 0xd1ca874
	void SetSafeZoneHeight(float NewWaterHeight);// 0xd1ca7cc
	void OnSafeZoneStateChange(enum NewState, bool bInitial);// 0xbbc0600
	void OnRep_NumActiveMegaStormCircles(int PrevNumActiveMegaStormCircles);// 0xd1ca724
	void OnBeginStartingStateEffectsEvent();// 0xbbc0600
	void OnBeginStartingStateEffects();// 0xd1ca710
	void MegaStormMinTimerExpired();// 0xd1ca6fc
	float GetTimeSinceSafeZonesStart();// 0xb6be71c
	float GetSafeZoneStartShrinkTime();// 0xb6be6e8
	float GetSafeZoneShrinkSpeed();// 0xd1ca6c8
	float GetSafeZoneRadius();// 0xb6be6b4
	float GetSafeZoneFinishShrinkTime();// 0xb6be680
	Vector GetSafeZoneCenter();// 0xd1ca690
	void GetMovementAudioCurveValues(float Time, out float CrossfadeValue, out float PitchModValue);// 0xd1ca54c
	void GetClockTickingAudioCurveValues(float Time, out float VolumeModValue, out float PitchModValue);// 0xd1ca408

--------------------------------
Class: FortMiniMapComponent.FortVisibilityComponent.ActorComponent.Object
	FortMiniMapData MiniMapData;//[Offset: 0xd0, Size: 136]
	Texture2D* LocalMinimapIconOverride;//[Offset: 0x158, Size: 8]
	FortMiniMapIndicator* MinimapIndicator;//[Offset: 0x160, Size: 8]
	class FortMiniMapIndicator* MinimapIndicatorClass;//[Offset: 0x168, Size: 8]
	void SetupMiniMapComponent(Texture2D* MiniMapIcon, LinearColor IconColor, LinearColor PulseColor, float ColorPulsesPerSecond, float SizePulsesPerSecond);// 0xd0d269c
	void SetMiniMapViewableDistance(float ViewDistance);// 0xd0d25f4
	void SetMiniMapLocationOffset(out const Vector LocationOffset);// 0xd0d2544
	void SetMiniMapIndicatorTeam(byte Team);// 0xd0d249c
	void SetMiniMapIndicatorIsVisibleOnMiniMap(bool bVisibleOnMiniMap);// 0xd0d23ec
	void SetMiniMapIndicatorIsVisibleOnMap(bool bVisibleOnMap);// 0xd0d233c
	void SetMiniMapIndicatorIsVisible(bool bVisible);// 0xd0d228c
	void SetMiniMapIconSizePulsesPerSecond(float SizePulsesPerSecond);// 0xd0d21e4
	void SetMiniMapIconScale(out const Vector2D IconScale);// 0xd0d212c
	void SetMiniMapIconPulseColor(LinearColor PulseColor);// 0xd0d2084
	void SetMiniMapIconColorPulsesPerSecond(float ColorPulsesPerSecond);// 0xd0d1fdc
	void SetMiniMapIconColor(LinearColor InColor);// 0xd0d1f34
	void SetMiniMapIcon(Texture2D* MiniMapIcon);// 0xd0d1e84
	void OverrideLocalMiniMapIndicatorIsVisible(bool bVisible);// 0xd0d1dd4
	void OverrideLocalMiniMapIcon(Texture2D* MiniMapIcon);// 0xd0d1d2c
	void OnRep_MiniMapData();// 0xd0d1d10
	bool IsVisibleToPlayer(const FortPlayerController* PC);// 0xd0d1c54

--------------------------------
Class: FortMiniMapData
	Texture2D* MiniMapIcon;//[Offset: 0x0, Size: 8]
	Vector2D IconScale;//[Offset: 0x8, Size: 8]
	bool bUseIconSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bIsVisibleOnMiniMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bIsVisibleOnMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bIsVisibilityBasedOnTeam;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bShowVerticalOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bShowFarOffIndicator;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bDisplayIconEvenOnFogOfWar;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bAllowLocalOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bUseTeamAffiliationColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	LinearColor Color;//[Offset: 0x14, Size: 16]
	LinearColor FriendColor;//[Offset: 0x24, Size: 16]
	LinearColor EnemyColor;//[Offset: 0x34, Size: 16]
	LinearColor NeutralColor;//[Offset: 0x44, Size: 16]
	LinearColor PulseColor;//[Offset: 0x54, Size: 16]
	float ColorPulsesPerSecond;//[Offset: 0x64, Size: 4]
	float SizePulsesPerSecond;//[Offset: 0x68, Size: 4]
	float ViewableDistance;//[Offset: 0x6c, Size: 4]
	Vector LocationOffset;//[Offset: 0x70, Size: 12]
	int Priority;//[Offset: 0x7c, Size: 4]
	byte Team;//[Offset: 0x80, Size: 1]

--------------------------------
Class: FortSafeZoneIndicatorFuture.Info.Actor.Object
	Vector_NetQuantize100 NextNextCenter;//[Offset: 0x220, Size: 12]
	float NextNextRadius;//[Offset: 0x22c, Size: 4]

--------------------------------
Class: MegaStormManager.Actor.Object
	float MaxSecondsInMegaStormUpdate;//[Offset: 0x228, Size: 4]
	int NumBuildingActorMegaStormShouldDamagePerFrame;//[Offset: 0x22c, Size: 4]
	float SleepTimeAfterDamagingBuildingActors;//[Offset: 0x230, Size: 4]
	float MinDelayTimeBeforeDestruction;//[Offset: 0x234, Size: 4]
	bool bFloorRadiusToGridConversion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	int GridRadiusCellOffset;//[Offset: 0x23c, Size: 4]
	float MegaStormStartTime;//[Offset: 0x240, Size: 4]
	float SleepTimeRemaining;//[Offset: 0x244, Size: 4]
	MegaStormCircle[] MegaStormCircles;//[Offset: 0x248, Size: 16]

--------------------------------
Class: MegaStormCircle
	BuildingSupportCellIndex GridCenter;//[Offset: 0x0, Size: 12]
	int NumCellsFromCenter;//[Offset: 0xc, Size: 4]
	int CurrentQuadrant;//[Offset: 0x10, Size: 4]
	BuildingSupportCellIndex GridAt;//[Offset: 0x14, Size: 12]
	int RadiusInGridCells;//[Offset: 0x20, Size: 4]
	int XAdvanceAccumulation;//[Offset: 0x24, Size: 4]
	int YAdvanceAccumulation;//[Offset: 0x28, Size: 4]
	int GridRadiusSquaredX4;//[Offset: 0x2c, Size: 4]
	int NumPlots;//[Offset: 0x30, Size: 4]
	Vector WorldCenter;//[Offset: 0x34, Size: 12]
	float WorldRadius;//[Offset: 0x40, Size: 4]
	BuildingSMActor*[] ActorsInMegaStorm;//[Offset: 0x48, Size: 16]
	enum MegaStormState;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BuildingSupportCellIndex
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AthenaAISettings.DataAsset.Object
	bool bAllowAIDirector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAllowAIGoalManager;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bForceRVOUse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	float MaxPlayerSpeedScaleFootstepSounds;//[Offset: 0x34, Size: 4]
	float MinFootstepHearingRange;//[Offset: 0x38, Size: 4]
	float MaxFootstepHearingRange;//[Offset: 0x3c, Size: 4]
	float DamagedHearingRange;//[Offset: 0x40, Size: 4]
	float CrouchHearingModifier;//[Offset: 0x44, Size: 4]
	float MaxNPCHearingRange;//[Offset: 0x48, Size: 4]
	float MaxPerceptualStimuliAge;//[Offset: 0x4c, Size: 4]
	float DeAggroRange;//[Offset: 0x50, Size: 4]
	float ReducedDeAggroRange;//[Offset: 0x54, Size: 4]
	float DurationReduceAggroLimits;//[Offset: 0x58, Size: 4]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x60, Size: 8]
	AthenaAISettingsAIDIrectorLOD* AIDIrectorLOD;//[Offset: 0x68, Size: 40]
	class AthenaAIService[] AIServices;//[Offset: 0x90, Size: 16]

--------------------------------
Class: AthenaAISettingsAIDIrectorLOD.DataAsset.Object
	PlayerLODViewConeConfig[] PlayerLODViewConeConfigs;//[Offset: 0x30, Size: 16]
	PlayerLODViewConeHysteresisConfig PlayerLODViewConeHysteresisConfig;//[Offset: 0x40, Size: 80]
	ScalableFloat CouldBeVisibleViewConeAngleDegrees;//[Offset: 0x90, Size: 40]
	ScalableFloat CouldBeVisibleMaxDistance;//[Offset: 0xb8, Size: 40]
	ScalableFloat LODSortHysteresisDistance;//[Offset: 0xe0, Size: 40]
	FortAIDirectorPerLODConfig[] FortAIDirectorLODConfigs;//[Offset: 0x108, Size: 16]

--------------------------------
Class: PlayerLODViewConeConfig
	ScalableFloat ObserverVisionAngleDeg;//[Offset: 0x0, Size: 40]
	ScalableFloat ViewConeMaxRadius;//[Offset: 0x28, Size: 40]
	ScalableFloat AlwaysVisibleRadius;//[Offset: 0x50, Size: 40]
	enum FortAILODLevel;//[Offset: 0x78, Size: 1]

--------------------------------
Class: PlayerLODViewConeHysteresisConfig
	ScalableFloat AdditionalObserverVisionAngleDeg;//[Offset: 0x0, Size: 40]
	ScalableFloat AdditionalRadius;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortAIDirectorPerLODConfig
	ScalableFloat MaxNPCCosts;//[Offset: 0x0, Size: 40]
	enum FortAILODLevel;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AthenaAIService.Object
	FortGameModeAthena* CachedGameMode;//[Offset: 0x28, Size: 8]
	FortGameStateAthena* CachedGameState;//[Offset: 0x30, Size: 8]
	AthenaAIServiceManager* AIServiceManager;//[Offset: 0x68, Size: 8]

--------------------------------
Class: FortGameStateAthena.FortGameStateZone.FortGameState_InGame.FortGameState.FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object
	bool bCanBuildOnWaterGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 1]
	bool bBlockBuildOnWaterGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe9, Size: 1]
	CurveTable* AthenaGameDataTable;//[Offset: 0x1028, Size: 8]
	FString[] ReplicatedAdditionalGameFeaturePluginURLs;//[Offset: 0x1030, Size: 16]
	MulticastInlineDelegateProperty OnCurrentPlaylistLoaded;//[Size: 16]
	bool bPlaylistDataIsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool bPlaylistDataIsActivelyLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	MulticastInlineDelegateProperty AllWinnersAnnounced;//[Size: 16]
	MulticastInlineDelegateProperty WinnerInfoDisplayReadyCN;//[Size: 16]
	MulticastInlineDelegateProperty CountdownTick;//[Size: 16]
	MulticastInlineDelegateProperty CountdownStarted;//[Size: 16]
	MulticastInlineDelegateProperty CountdownFinished;//[Size: 16]
	MulticastInlineDelegateProperty CountdownStopped;//[Size: 16]
	MulticastInlineDelegateProperty FinalCountdownTick;//[Size: 16]
	MulticastInlineDelegateProperty FinalCountdownStarted;//[Size: 16]
	MulticastInlineDelegateProperty FinalCountdownFinished;//[Size: 16]
	MulticastInlineDelegateProperty CurrentHighScoreUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupSpawnedAndReady;//[Size: 16]
	MulticastInlineDelegateProperty OnPickupDestroy;//[Size: 16]
	MulticastInlineDelegateProperty GameModeMessageRequest;//[Size: 16]
	MulticastInlineDelegateProperty ContextTutorialGameModeMessageRequest;//[Size: 16]
	MulticastInlineDelegateProperty HideGameModeMessageRequest;//[Size: 16]
	MulticastInlineDelegateProperty GameModeMessageSuccess;//[Size: 16]
	MulticastInlineDelegateProperty ShowGameModeMessage;//[Size: 16]
	MulticastInlineDelegateProperty HideGameModeMessage;//[Size: 16]
	MulticastInlineDelegateProperty ShowMarkerGameMode;//[Size: 16]
	MulticastInlineDelegateProperty HideMarkerGameMode;//[Size: 16]
	MulticastInlineDelegateProperty RepositionGameModeMessage;//[Size: 16]
	MulticastInlineDelegateProperty SetDefaultPositionGameModeMessage;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerLeftCreativeIsland;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerJoinedCreativeIsland;//[Size: 16]
	MulticastInlineDelegateProperty MutatorGenericIntegerUpdated;//[Size: 16]
	MulticastInlineDelegateProperty MutatorGameplayEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnSafeZoneIndicatorChanged;//[Size: 16]
	float PlaylistEndTime;//[Offset: 0x12b0, Size: 4]
	float SafeZonePauseTime;//[Offset: 0x12b8, Size: 4]
	int TotalFinalCountdownTime;//[Offset: 0x12bc, Size: 4]
	bool bForceTeamScorePlacementOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 1]
	bool bPlaylistStoppedSafeZonePhases;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c1, Size: 1]
	bool bSkyTubesShuttingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c2, Size: 1]
	bool bSkyTubesDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c3, Size: 1]
	int ServerChangelistNumber;//[Offset: 0x12cc, Size: 4]
	FortSpecialActorReplicationInfo* SpecialActorData;//[Offset: 0x12d0, Size: 8]
	FortPropertyOverrideReplShared* ReplOverrideData;//[Offset: 0x12d8, Size: 8]
	class BuildingActor[] BuildingActorClasses;//[Offset: 0x12e0, Size: 16]
	MulticastInlineDelegateProperty WinnerAnnounced;//[Size: 16]
	MulticastInlineDelegateProperty WinningTeamAnnounced;//[Size: 16]
	MulticastInlineDelegateProperty GamePhaseChanged;//[Size: 16]
	MulticastInlineDelegateProperty WinningScoreDetermined;//[Size: 16]
	MulticastInlineDelegateProperty GamePhaseStepChanged;//[Size: 16]
	MulticastInlineDelegateProperty StormCapStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty StormProgressStopped;//[Size: 16]
	MulticastInlineDelegateProperty ActiveTeamArrayBuiltEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayersLeftChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnTeamsLeftChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnWinConditionMetCN;//[Size: 16]
	MulticastInlineDelegateProperty UpdateNamedPoiColorDelegate;//[Size: 16]
	bool bSkipWinnerAnnounced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b0, Size: 1]
	bool bStopBuildingHealingOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b1, Size: 1]
	bool bIsInCountdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b2, Size: 1]
	bool bIsInFinalCountdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b3, Size: 1]
	float WarmupCountdownStartTime;//[Offset: 0x13b4, Size: 4]
	float WarmupCountdownEndTime;//[Offset: 0x13b8, Size: 4]
	float AircraftStartTime;//[Offset: 0x13bc, Size: 4]
	float SafeZonesStartTime;//[Offset: 0x13c0, Size: 4]
	float EndGameStartTime;//[Offset: 0x13c4, Size: 4]
	float EndGameKickPlayerTime;//[Offset: 0x13c8, Size: 4]
	int TotalPlayers;//[Offset: 0x13cc, Size: 4]
	int PlayersLeft;//[Offset: 0x13d0, Size: 4]
	class Object[] ClientVehicleClassesToLoad;//[Offset: 0x13d8, Size: 16]
	FortItemDefinition*[] ClientItemDefsToLoad;//[Offset: 0x13e8, Size: 16]
	FortProjectileBase*[] PredictedProjectiles;//[Offset: 0x13f8, Size: 16]
	float RemainingFocalPointActorDuration;//[Offset: 0x1408, Size: 4]
	Actor* FocalPointActor;//[Offset: 0x1410, Size: 8]
	Vector_NetQuantize FocalPointOffset;//[Offset: 0x1418, Size: 12]
	float FocalPointFOV;//[Offset: 0x1424, Size: 4]
	bool bCheatRespawnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1440, Size: 1]
	enum StormCapState;//[Offset: 0x1441, Size: 1]
	int CurrentPlayerCap;//[Offset: 0x1444, Size: 4]
	StormCapDamageThresholdInfo DamageForStormCapMarking;//[Offset: 0x1448, Size: 8]
	int[] TeamXPlayersLeft;//[Offset: 0x1450, Size: 16]
	FortWinnerPlayerData[] WinningPlayerList;//[Offset: 0x1460, Size: 16]
	int TeamsLeft;//[Offset: 0x1470, Size: 4]
	byte[] WinningTeamsCN;//[Offset: 0x1478, Size: 16]
	Object*[] ServerToClientPreloadList;//[Offset: 0x1488, Size: 16]
	AthenaBattleBusItemDefinition* DefaultBattleBus;//[Offset: 0x1498, Size: 8]
	bool bAllowUserPickedCosmeticBattleBus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0, Size: 1]
	AircraftFlightInfo[] TeamFlightPaths;//[Offset: 0x14a8, Size: 16]
	AircraftFlightInfo FlightPathMidLine;//[Offset: 0x14b8, Size: 40]
	Vector2D DropZoneCenter;//[Offset: 0x14e0, Size: 8]
	Vector2D FlightPathSelectionCenter;//[Offset: 0x14e8, Size: 8]
	DateTime UtcTimeStartedMatch;//[Offset: 0x14f0, Size: 8]
	bool bIsLargeTeamGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f8, Size: 1]
	PlayerState* WinningPlayerState;//[Offset: 0x1500, Size: 8]
	int WinningTeam;//[Offset: 0x1518, Size: 4]
	int WinningScore;//[Offset: 0x151c, Size: 4]
	int CurrentHighScore;//[Offset: 0x1520, Size: 4]
	int CurrentHighScoreTeam;//[Offset: 0x1524, Size: 4]
	SoundCue* SupplyDropWaveStartedSoundCue;//[Offset: 0x1528, Size: 8]
	FText[] KillFeedEntry;//[Offset: 0x1530, Size: 16]
	MulticastInlineDelegateProperty KillFeedUpdated;//[Size: 16]
	FortPlayerState*[] SpectatorArray;//[Offset: 0x1560, Size: 16]
	FortPlayerState*[] PartyMemberSpectatorArray;//[Offset: 0x1570, Size: 16]
	FortPlayerState*[] MeshPlayerStateArray;//[Offset: 0x1580, Size: 16]
	enum AirCraftBehavior;//[Offset: 0x1590, Size: 1]
	bool bStormReachedFinalPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1592, Size: 1]
	enum FriendlyFireType;//[Offset: 0x1593, Size: 1]
	bool SpectateAPartyMemberAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b0, Size: 1]
	GameMemberInfoArray GameMemberInfoArray;//[Offset: 0x16c8, Size: 288]
	byte[] ActiveTeamNums;//[Offset: 0x1860, Size: 16]
	int CurrentPlaylistId;//[Offset: 0x1870, Size: 4]
	FortSafeZoneIndicator* SafeZoneIndicator;//[Offset: 0x1878, Size: 8]
	MaterialInstanceDynamic* MinimapBackgroundMID;//[Offset: 0x1880, Size: 8]
	MaterialInstanceDynamic* MinimapCircleMID;//[Offset: 0x1888, Size: 8]
	MaterialInstanceDynamic* MinimapNextCircleMID;//[Offset: 0x1890, Size: 8]
	MaterialInstanceDynamic* FullmapCircleMID;//[Offset: 0x1898, Size: 8]
	MaterialInstanceDynamic* FullmapNextCircleMID;//[Offset: 0x18a0, Size: 8]
	SlateBrush MinimapSafeZoneBrush;//[Offset: 0x18a8, Size: 136]
	SlateBrush MinimapCircleBrush;//[Offset: 0x1930, Size: 136]
	SlateBrush MinimapNextCircleBrush;//[Offset: 0x19b8, Size: 136]
	SlateBrush FullMapCircleBrush;//[Offset: 0x1a40, Size: 136]
	SlateBrush FullMapNextCircleBrush;//[Offset: 0x1ac8, Size: 136]
	SlateBrush MinimapSafeZoneFinalPosBrush;//[Offset: 0x1b50, Size: 136]
	SlateBrush AircraftPathBrush;//[Offset: 0x1bd8, Size: 136]
	SlateBrush AircraftMidlinePathBrush;//[Offset: 0x1c60, Size: 136]
	SlateBrush AircraftPathTeamIndicatorBrush;//[Offset: 0x1ce8, Size: 136]
	MaterialInterface* MiniMapBackgroundDrawingMaterial;//[Offset: 0x1d70, Size: 8]
	MaterialInterface* MiniMapCircleDrawingMaterial;//[Offset: 0x1d78, Size: 8]
	MaterialInterface* MiniMapNextCircleDrawingMaterial;//[Offset: 0x1d80, Size: 8]
	MaterialInterface* MiniMapRadiusTrackerCircleDrawingMaterial;//[Offset: 0x1d88, Size: 8]
	FName RadiusTrackerCircleCenterAndRadiusParameterName;//[Offset: 0x1d90, Size: 8]
	FName RadiusTrackerCircleColorParameterName;//[Offset: 0x1d98, Size: 8]
	DynamicLandData[] DynamicLands;//[Offset: 0x1da0, Size: 16]
	FortAthenaMapInfo* MapInfo;//[Offset: 0x1db0, Size: 8]
	MaterialParameterCollection* MinimapMPC;//[Offset: 0x1db8, Size: 8]
	FortBroadcastSpectatorInfo* BroadcastSpectatorInfo;//[Offset: 0x1dc0, Size: 8]
	SplatterGridSystem* SplatterGridSystem;//[Offset: 0x1dc8, Size: 8]
	FortCustomizationsPreloader* CustomizationsPreloader;//[Offset: 0x1dd0, Size: 8]
	AICharacterPartsPreloadData[] AICharacterPartsPreloadData;//[Offset: 0x1dd8, Size: 16]
	AIPawnCustomizationPreloadData[] AIPawnCustomizationPreloadData;//[Offset: 0x1de8, Size: 16]
	enum GamePhase;//[Offset: 0x1e18, Size: 1]
	FString ReasonWereInSetupPhase;//[Offset: 0x1e20, Size: 16]
	enum EventTournamentRound;//[Offset: 0x1e30, Size: 1]
	bool bIsCustomMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e31, Size: 1]
	PlaylistPropertyArray CurrentPlaylistInfo;//[Offset: 0x1e38, Size: 488]
	bool bGameModeWillSkipAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2020, Size: 1]
	float SafeZoneDamage;//[Offset: 0x2024, Size: 4]
	byte SafeZonePhase;//[Offset: 0x2028, Size: 1]
	enum GamePhaseStep;//[Offset: 0x2029, Size: 1]
	float GamePhaseStepTimeRemaining;//[Offset: 0x202c, Size: 4]
	SoundMix* LobbySoundMix;//[Offset: 0x2030, Size: 8]
	int TotalPlayersBots;//[Offset: 0x2038, Size: 4]
	int PlayerBotsLeft;//[Offset: 0x203c, Size: 4]
	FortAthenaAircraft*[] Aircrafts;//[Offset: 0x2050, Size: 16]
	bool bAircraftIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2060, Size: 1]
	enum CachedSafeZoneStartUp;//[Offset: 0x2061, Size: 1]
	int LobbyAction;//[Offset: 0x2064, Size: 4]
	GameplayMutatorEventData MutatorEventData;//[Offset: 0x206c, Size: 16]
	GameplayMutatorObjectDataArray MutatorObjectDataArray;//[Offset: 0x2080, Size: 280]
	int MutatorGenericInt;//[Offset: 0x2198, Size: 4]
	int MutatorGenericInt;//[Offset: 0x219c, Size: 4]
	int MutatorGenericInt;//[Offset: 0x21a0, Size: 4]
	FortAthenaMutator_AI* GameplayMutator_AI;//[Offset: 0x21a8, Size: 8]
	FortMutatorListComponent* MutatorListComponent;//[Offset: 0x21b0, Size: 8]
	FortGameStateComponent_Telemetry* FortGameStateComponent_Telemetry;//[Offset: 0x21b8, Size: 8]
	FortGameStateComponent_ActiveEventManager* ActiveEventManager;//[Offset: 0x21c0, Size: 8]
	FortGameStateComponent_Quests* FortGameStateComponent_Quests;//[Offset: 0x21c8, Size: 8]
	FortGameStateComponent_RadiusTracker* FortGameStateComponent_RadiusTracker;//[Offset: 0x21d0, Size: 8]
	FortGameStateComponent_AffiliationManager* AffiliationManager;//[Offset: 0x21d8, Size: 8]
	FortGameStateComponent_TimeDilation* FortGameStateComponent_TimeDilation;//[Offset: 0x21e0, Size: 8]
	float DefaultGliderRedeployCanRedeploy;//[Offset: 0x21e8, Size: 4]
	float DefaultRedeployGliderLateralVelocityMult;//[Offset: 0x21ec, Size: 4]
	float DefaultRedeployGliderHeightLimit;//[Offset: 0x21f0, Size: 4]
	float DefaultParachuteDeployTraceForGroundDistance;//[Offset: 0x21f4, Size: 4]
	float DefaultAllowNeutralWallEditing;//[Offset: 0x21f8, Size: 4]
	float DefaultRebootMachineHotfix;//[Offset: 0x21fc, Size: 4]
	float SignalInStormRegenSpeed;//[Offset: 0x2200, Size: 4]
	float SignalInStormLostSpeed;//[Offset: 0x2204, Size: 4]
	float StormCNDamageVulnerabilityLevel0;//[Offset: 0x2208, Size: 4]
	float StormCNDamageVulnerabilityLevel1;//[Offset: 0x220c, Size: 4]
	float StormCNDamageVulnerabilityLevel2;//[Offset: 0x2210, Size: 4]
	float StormCNDamageVulnerabilityLevel3;//[Offset: 0x2214, Size: 4]
	MeshNetworkStatus MeshNetworkStatus;//[Offset: 0x2218, Size: 3]
	MulticastInlineDelegateProperty OnClientVolumeManagerReplicated;//[Size: 16]
	class FortVolumeManager* VolumeManagerToUse;//[Offset: 0x2230, Size: 8]
	FortVolumeManager* VolumeManager;//[Offset: 0x2248, Size: 8]
	FortLocalizationService* LocalizationService;//[Offset: 0x2250, Size: 8]
	FortSanitizationService* SanitizationService;//[Offset: 0x2258, Size: 8]
	FortHermesLoadContext* HermesLoadContext;//[Offset: 0x2260, Size: 8]
	ScalableFloat ResurrectionEnabledRow;//[Offset: 0x2280, Size: 40]
	SlateBrush SpawnMachineIconBrush;//[Offset: 0x22a8, Size: 136]
	SlateBrush SpawnCardIconBrush;//[Offset: 0x2330, Size: 136]
	SpawnMachineRepDataArray SpawnMachineRepData;//[Offset: 0x23b8, Size: 288]
	ScalableFloat SafeZoneDamageAttribute;//[Offset: 0x24e8, Size: 40]
	SlateBrush EliminationSelfIconBrush;//[Offset: 0x2510, Size: 136]
	SlateBrush EliminationSelfClampedIconBrush;//[Offset: 0x2598, Size: 136]
	SlateBrush EliminationSquadmateIconBrush;//[Offset: 0x2620, Size: 136]
	SlateBrush EliminationSquadmateClampedIconBrush;//[Offset: 0x26a8, Size: 136]
	SlateBrush EliminationTeammateIconBrush;//[Offset: 0x2730, Size: 136]
	SlateBrush EliminationTeammateClampedIconBrush;//[Offset: 0x27b8, Size: 136]
	SlateBrush EliminationEnemyIconBrush;//[Offset: 0x2840, Size: 136]
	SlateBrush EliminationEnemyClampedIconBrush;//[Offset: 0x28c8, Size: 136]
	CurveFloat* EliminationFadeInCurve;//[Offset: 0x2950, Size: 40]
	CurveFloat* EliminationFadeOutCurve;//[Offset: 0x2978, Size: 40]
	CurveVector* EliminationScaleInCurve;//[Offset: 0x29a0, Size: 40]
	CurveVector* EliminationScaleOutCurve;//[Offset: 0x29c8, Size: 40]
	float EliminationMarkerHUDMaxDistance;//[Offset: 0x29f0, Size: 4]
	float EliminationMarkerHUDZOffset;//[Offset: 0x29f4, Size: 4]
	GameplayTagContainer GoldenPoiLocationTags;//[Offset: 0x2a18, Size: 32]
	UnicornDriver* UnicornDriver;//[Offset: 0x2ac8, Size: 8]
	FString[] ActiveEventNamesAtPlaylistLoad;//[Offset: 0x2ad0, Size: 16]
	ScalableFloat NewItemDuringWarmupWeightAddMod;//[Offset: 0x2ae0, Size: 40]
	float SmoothedWorldTimeSeconds;//[Offset: 0x2b08, Size: 4]
	float SmoothedWorldTimeSecondsDrift;//[Offset: 0x2b0c, Size: 4]
	GameplayTagContainer RolledLootGroupTags;//[Offset: 0x2b10, Size: 32]
	CosmeticUsageReport CosmeticUsageReport;//[Offset: 0x2b48, Size: 128]
	bool bEnvironmentDamageBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc9, Size: 1]
	FString[] ReticulatedSplineDefinitions;//[Offset: 0x2bd0, Size: 16]
	AthenaStreamIdOverride[] ReticulatedSplineIds;//[Offset: 0x2be0, Size: 16]
	FortMissionStormShield*[] StormShields;//[Offset: 0x2bf0, Size: 16]
	bool bDamageComboHUDEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c10, Size: 1]
	int DamageComboHUDMinHits;//[Offset: 0x2c14, Size: 4]
	bool bEnableMatchesProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c18, Size: 1]
	FString MatchesProxyMatchId;//[Offset: 0x2c20, Size: 16]
	MulticastInlineDelegateProperty EndGameTimeDilationCompleteDelegate;//[Size: 16]
	ScalableFloat DelayMovementInput;//[Offset: 0x2c40, Size: 40]
	float DelayMovementInputReplicated;//[Offset: 0x2c68, Size: 4]
	bool bCraftingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6c, Size: 1]
	void UpdateAllGoldenPoiColor(LinearColor Color, out const SlateFontInfo Font);// 0xb672e54
	bool ShouldReturnToMatchmakingOriginOnMatchEnd();// 0xd0064c4
	bool ShouldPlayDeathSoundEffects(const Actor* Victim);// 0xb672da0
	bool ShouldHaveInfiniteResources(const Pawn* Pawn);// 0xd006410
	bool ShouldEnterSpawningStartup();// 0xd0063d8
	bool ShouldDBNOTeamInfoFlash();// 0xd0063a0
	void SetLocationTextWorldPosition(out const GameplayTag LocationTag, Vector Location);// 0xd0062a8
	void SetLocationText(out const GameplayTag LocationTag, out const FText Text, enum State);// 0xd0060fc
	void SetLocationFontInState(out const GameplayTag LocationTag, out const SlateFontInfo Font, enum State);// 0xb672bf0
	void SetLocationFontInAllStates(out const GameplayTag LocationTag, out const SlateFontInfo Font);// 0xd005f9c
	void SetLocationFont(out const GameplayTag LocationTag, out const SlateFontInfo Font);// 0xd005e3c
	void SetLocationColorInState(out const GameplayTag LocationTag, LinearColor Color, enum State);// 0xb672ab8
	void SetLocationColor(out const GameplayTag LocationTag, LinearColor Color);// 0xd005d44
	void SetLocation_StateColor(out const GameplayTag LocationTag, out const LinearColor Color, enum State);// 0xd005bf8
	void SetFocalPointActor(Actor* InFocalPointActor, Vector InFocalPointOffset, float InFocalPointFOV, float InDuration);// 0xd005a94
	void SetFloatingIslandInformation(Vector WorldPosition, bool bActivated);// 0xd0059a4
	void SetAllLocations_StateColor(out const LinearColor Color, enum State);// 0xb6729c4
	void RunPerfMemCheatScript_Client_Replicated(bool bStartStatFiles);// 0xd0058ec
	void PauseFPSChartTimer();// 0xd0058d8
	void OverrideLocation_StateFontMaterial(out const GameplayTag LocationTag, MaterialInterface* Mat, enum State);// 0xd0057a0
	void OverrideAllLocations_StateFontMaterial(MaterialInterface* Mat, enum State);// 0xd0056b8
	void OnWinnerAnnounced();// 0xbbc0600
	void OnRep_WinningTeamsCN();// 0xd0056a4
	void OnRep_WinningTeam();// 0xd005690
	void OnRep_WinningScore();// 0xd00567c
	void OnRep_WinningPlayerState();// 0xd005668
	void OnRep_WinningPlayerList();// 0xd005654
	void OnRep_VolumeManager();// 0xd005640
	void OnRep_UtcTimeStartedMatch(out const DateTime OldUtcTimeStartedMatch);// 0xd005590
	void OnRep_TeamsLeft();// 0xb6729b0
	void OnRep_SupplyDropWaveStartedSoundCue();// 0xd00557c
	void OnRep_StormCapState();// 0xd005568
	void OnRep_SpectateAPartyMemberAvailable();// 0xb67299c
	void OnRep_SkyTubesShuttingDown();// 0xd005554
	void OnRep_SkyTubesDisabled();// 0xd005540
	void OnRep_ServerChangelistNumber();// 0xd00552c
	void OnRep_SafeZonePhase();// 0xb672988
	void OnRep_SafeZoneIndicator();// 0xd005518
	void OnRep_SafeZoneDamage();// 0xb672974
	void OnRep_ReticulatedSplineDefinitions();// 0xd005504
	void OnRep_PlaylistEndTime();// 0xd0054f0
	void OnRep_PlayersLeft();// 0xb672960
	void OnRep_PlayerBotsLeft();// 0xb67294c
	void OnRep_MutatorGenericInt();// 0xd0054dc
	void OnRep_MutatorGenericInt();// 0xd0054c8
	void OnRep_MutatorGenericInt();// 0xd0054b4
	void OnRep_MutatorEventData();// 0xd0054a0
	void OnRep_MeshNetworkStatus();// 0xd00548c
	void OnRep_MapInfo();// 0xd005478
	void OnRep_GoldenPoiLocationTags();// 0xd005464
	void OnRep_GamePhase(enum OldGamePhase);// 0xb6728a4
	void OnRep_FocalPointActor();// 0xd005450
	void OnRep_EventTournamentRound();// 0xd00543c
	void OnRep_EndGameKickPlayerTime();// 0xd005428
	void OnRep_DamageForStormCapMarking();// 0xd005414
	void OnRep_CurrentPlaylistInfo();// 0xd005400
	void OnRep_CurrentPlaylistId();// 0xd0053ec
	void OnRep_CurrentHighScore();// 0xd0053d8
	void OnRep_CosmeticUsage();// 0xd0053c4
	void OnRep_ClientItemDefsToLoad();// 0xd0053b0
	void OnRep_BroadcastSpectatorInfo();// 0xd00539c
	void OnRep_bPlaylistStoppedSafeZonePhases();// 0xd005388
	void OnRep_Aircraft();// 0xb672890
	void OnRep_AIPawnCustomizationPreloadData();// 0xb67287c
	void OnRep_AICharacterPartsPreloadData();// 0xb672868
	void OnRep_AdditionalGameFeaturePlugins();// 0xd005374
	void OnLoadedAllAdditionalContent(bool bSuccess);// 0xd0052c4
	void OnCurrentPlaylistLoaded__DelegateSignature(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xbbc0600
	bool IsWorldResourceWidgetVisible(const FortPlayerController* Controller, const byte ResourceType);// 0xd0051d0
	bool IsTherePersistenceDevices(const Pawn* SwitchingPawn);// 0xd00511c
	bool IsTeleportToCreativeHubAllowed(const FortPlayerState* PlayerState);// 0xd005068
	bool IsTeamSwitchAllowed(const Pawn* SwitchingPawn);// 0xd004fb4
	bool IsStormCN();// 0xd004f7c
	bool IsResurrectionEnabled(FortPlayerPawn* PlayerPawn);// 0xd004ec8
	bool IsPlaygroundModePlaylist();// 0xd004e90
	bool IsPlayerTriggeredRespawnAllowed(const FortPlayerState* PlayerState);// 0xd004ddc
	bool IsPlayerClearPersistanceIslandDataAllowed(const Pawn* SwitchingPawn);// 0xd004d28
	bool IsPapayaPlaylist();// 0xd004cf0
	bool IsLastManStandingCN();// 0xd004cb8
	bool IsLargePreviewDisabledOnMobile();// 0xd004c80
	bool IsGuidedTutorialPlaylist();// 0xd004c48
	bool IsGamePhaseNotificationSkipped(enum GamePhaseToSkip);// 0xd004b94
	bool IsCreativeUtilitySpawningAllowedPlaylist();// 0xd004b5c
	bool IsCreativeOrPlaygroundModePlaylist();// 0xb672830
	bool IsCreativeOrBattleLabModePlaylist();// 0xd004b24
	bool IsCreativeModePlaylist();// 0xb6727f8
	bool IsCreativeMMPlaylist();// 0xb6727c0
	bool IsCreativeLTMPlaylist();// 0xb672788
	bool IsBattleRoyalePlaylist();// 0xd004aec
	bool IsBattleLabModePlaylist();// 0xb672750
	bool IsAsyncPhysicsPlaylist();// 0xd004ab4
	bool HasValidFocalPointActor();// 0xd004a90
	bool HasInfiniteWarmup();// 0xd004a58
	void HandleHideGameModeMessageRequest(const enum MsgType, const bool bInstantHide, const bool bClearQueue);// 0xd004920
	void HandleGameModeShowMarker(int PlayerID, int InstanceID);// 0xd00483c
	void HandleGameModeMessageSuccess(FortPlayerController* OwnerController);// 0xd004794
	void HandleGameModeMessageRequest(AthenaGameMessageData MessageData);// 0xd0045dc
	void HandleGameModeMessageReposition(Vector2D Position, byte HorizontalAlignment, byte VerticalAlignment);// 0xd0044b8
	void HandleGameModeMessageDefaultPosition();// 0xd0044a4
	void HandleGameModeHideMarker(int PlayerID, int InstanceID);// 0xd0043c0
	void HandleContextTutorialGameModeMessageRequest(AthenaGameMessageData MessageData, FortContextualTutorialController* OwnedController);// 0xd0041c8
	TotalPlayers GetTotalPlayers();// 0xd004190
	float GetTimedWinConditionTime();// 0xd00415c
	FText GetTeamPOIName(byte Team);// 0xd004040
	FortPlayerStateAthena*[] GetSquadMemberPlayerStates(FortPlayerStateAthena* InstigatingPlayerState, const bool bIncludeSelf);// 0xd003f0c
	bool GetShouldPlayRespawnTimerSFX();// 0xd003ed4
	bool GetShouldDisplayCountdownTimerText();// 0xd003e9c
	FortSafeZoneIndicator* GetSafeZoneIndicator();// 0xb672734
	GameplayTagContainer GetPoiGridTagsForLocation(out const Vector Location);// 0xb67264c
	enum GetPlaylistType();// 0xd003e68
	bool GetPlaylistTeams(out byte[] OutTeams);// 0xd003d9c
	PlayersLeft GetPlayersLeft();// 0xb672614
	float GetOverridenSiphonWoodValue(const Pawn* Pawn);// 0xd003cec
	float GetOverridenSiphonStoneValue(const Pawn* Pawn);// 0xd003c3c
	float GetOverridenSiphonMetalValue(const Pawn* Pawn);// 0xd003b8c
	float GetOverridenSiphonHealthValue(const Pawn* Pawn);// 0xd003adc
	float GetOverridenSiphonGoldValue(const Pawn* Pawn);// 0xd003a2c
	GameplayTagQuery GetOverridenDamageSelfWeaponQuery(const Pawn* Pawn);// 0xd003940
	GameplayTagQuery GetOverridenDamageSelfTargetQuery(const Pawn* Pawn);// 0xd003854
	bool GetOverridenDamageSelfRequiresNonZeroDamage(const Pawn* Pawn);// 0xd0037a0
	float GetOverridenDamageSelfDamageToDeal(const Pawn* Pawn);// 0xd0036f0
	float GetOverriddenVehicleTrickScore(const FortPlayerController* Controller, float InTrickScore);// 0xd003600
	FortGameplayMutator* GetMutatorByInterface(const Actor* ContextActor, class Object MutatorInterface);// 0xd00350c
	FortGameplayMutator* GetMutatorByClass(const Actor* ContextActor, class FortGameplayMutator MutatorClass);// 0xd003418
	int GetMaxPlaylistPlayers();// 0xd0033e4
	float GetEndGameReturnToMatchmakingOriginDelay();// 0xd0033b0
	int GetDamageComboHUDMinHits();// 0xd00337c
	FName GetCurrentPlaylistName();// 0xd003348
	AthenaBattleBusItemDefinition* GetBattleBusForPlayer(FortPlayerControllerAthena* PC);// 0xd003298
	int GetAvgPlayerMMR();// 0xd003264
	GameplayTagContainer GetAthenaPlaylistContextTags();// 0xb672588
	FortAthenaAircraft* GetAircraft(int AircraftIndex);// 0xd0031b4
	void GatherCustomCharacterPartOverridesFromMutator(FortPlayerController* FortPC, out CustomCharacterPart*[] OutOverrides);// 0xd0030ac
	void DoesPlayerHaveLimitedLives(FortPlayerState* PlayerState, out bool bPlayerLivesAreLimited, out int RespawnsRemaining);// 0xd002f68
	bool CanUseSlowMotionOnVictory();// 0xd002f30
	EvaluationResult CanSpawnActorOfClass(const Actor* InstigatorActor, class Object ActorClassToSpawn, out const Vector Location, out const Rotator Rotation);// 0xd002cfc
	EvaluationResult CanSpawnActor(const Actor* InstigatorActor, Actor* ActorToSpawn, out const Vector Location, out const Rotator Rotation);// 0xd002ac8
	bool CanRespawnOnStarterIsland();// 0xd002a90
	bool CanChangeGameplayOptions();// 0xd002a58
	bool AreSkyTubesEnabled();// 0xd002a20

--------------------------------
Class: FortGameStateZone.FortGameState_InGame.FortGameState.FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object
	int PawnIDCount;//[Offset: 0x6f0, Size: 4]
	int WaitingToLeaveZoneTimeLeft;//[Offset: 0x6f4, Size: 4]
	float HostilityMeterPercent;//[Offset: 0x6f8, Size: 4]
	float IntensityPercent;//[Offset: 0x6fc, Size: 4]
	int SpawnPointsCap;//[Offset: 0x700, Size: 4]
	int SpawnPointsAllocated;//[Offset: 0x704, Size: 4]
	int MaxTotalAI;//[Offset: 0x708, Size: 4]
	int MaxEncounterAI;//[Offset: 0x70c, Size: 4]
	int MaxEncounterSP;//[Offset: 0x710, Size: 4]
	ReplicatedMontageMap ReplicatedMontageMap;//[Offset: 0x718, Size: 24]
	FortGameplayModifierItemDefinition*[] AllSpawnGroupUpgradeModifierDefs;//[Offset: 0x730, Size: 16]
	enum CompletionResult;//[Offset: 0x740, Size: 1]
	float PlayerBuildingSkillLevel;//[Offset: 0x794, Size: 4]
	float[] PlayerSharedMaxTrapAttributes;//[Offset: 0x798, Size: 16]
	Object*[] GameplayMutatorObservers;//[Offset: 0x7a8, Size: 16]
	GameplayTagContainer ExplicitGloballyBlockedAbilityTags;//[Offset: 0x8e0, Size: 32]
	bool bInvitesRestricted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	bool bDBNODeathEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 1]
	uint32 ServerGameplayTagIndexHash;//[Offset: 0x9a4, Size: 4]
	bool bDisconnectOnServerGameplayTagIndexHashMismatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	MulticastInlineDelegateProperty OnCompletionResultEvent;//[Size: 16]
	int TotalPlayerStructures;//[Offset: 0xa24, Size: 4]
	int MaxPlayerStructures;//[Offset: 0xa28, Size: 4]
	bool bGlobalCeaseFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	FortGlobalEnvironmentAbilityActor* GlobalEnvironmentAbilityActor;//[Offset: 0xa48, Size: 8]
	FortAbilitySystemComponent*[] GlobalGameplayEventListeners;//[Offset: 0xa50, Size: 16]
	ActiveGameplayModifierArray ActiveGameplayModifiers;//[Offset: 0xa60, Size: 304]
	bool bSupportRuntimeShutdownOfGameplayModifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	BuildingStructuralSupportSystem* StructuralSupportSystem;//[Offset: 0xb98, Size: 8]
	DataTableRowHandle ZoneDifficultyInfoRow;//[Offset: 0xba0, Size: 16]
	FortZoneTheme* ZoneTheme;//[Offset: 0xbb0, Size: 8]
	class FortMissionGenerator* MissionGeneratorClass;//[Offset: 0xbb8, Size: 40]
	FortItemQuantityPair[] MissionRewards;//[Offset: 0xbe0, Size: 16]
	FortZoneDifficultyIncreaseRewardData[] DifficultyIncreaseRewards;//[Offset: 0xbf0, Size: 16]
	FortZoneMissionAlertData MissionAlertData;//[Offset: 0xc00, Size: 48]
	SoftObjectPath[] ClientPreloadMissionClasses;//[Offset: 0xcc0, Size: 16]
	FortThreatVisualsManager* ThreatVisualsManager;//[Offset: 0xcd0, Size: 8]
	FortThreatParticleActor* ThreatParticleActor;//[Offset: 0xcd8, Size: 8]
	bool bDrawRunVariationDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 1]
	FortAIPawn*[] PawnVariationList;//[Offset: 0xce8, Size: 16]
	int VariationIndex;//[Offset: 0xcf8, Size: 4]
	float GameDifficulty;//[Offset: 0xcfc, Size: 4]
	bool bIsGroupContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	int DifficultyIncreaseRewardTier;//[Offset: 0xd08, Size: 4]
	bool bAllowedToUpdateBackendDifficulty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0c, Size: 1]
	bool bAllowedToOverrideBackendRewards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0c, Size: 1]
	class BuildingActor[] AllPlayerBuildableClasses;//[Offset: 0xd20, Size: 16]
	<class BuildingActor,int> AllPlayerBuildableClassesIndexLookup;//[Offset: 0xd30, Size: 80]
	PlayerBuildableClassContainer PlayerBuildableClasses;//[Offset: 0xd80, Size: 16]
	FortInGameMapManager* UIMapManager;//[Offset: 0xde0, Size: 8]
	FortCharacterCosmeticManager* CharacterCosmeticManager;//[Offset: 0xde8, Size: 8]
	FortSkinWeightOverrideManager* SkinWeightManager;//[Offset: 0xdf0, Size: 8]
	MulticastInlineDelegateProperty OnScoreTotalsChanged;//[Size: 16]
	FName ScoringTableRowName;//[Offset: 0xe08, Size: 8]
	int TotalCombatScore;//[Offset: 0xe10, Size: 4]
	int TotalBuildingScore;//[Offset: 0xe14, Size: 4]
	int TotalUtilityScore;//[Offset: 0xe18, Size: 4]
	FString TheaterUniqueId;//[Offset: 0xe20, Size: 16]
	FString MissionLogDebugString;//[Offset: 0xe30, Size: 16]
	bool bAllowBuildingCostMods;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe58, Size: 1]
	bool bFreeBuildingRepairs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe58, Size: 1]
	bool bAllowBuildingAtLayoutRequirements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe59, Size: 1]
	bool bAllowBuildingWithoutLayoutRequirements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5a, Size: 1]
	bool bAllowLayoutRequirementsFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5b, Size: 1]
	bool bAllowBuildingThroughBlockingObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5d, Size: 1]
	int NumSurvivorsSpawned;//[Offset: 0xe60, Size: 4]
	int NumSurvivorsDead;//[Offset: 0xe64, Size: 4]
	int NumSurvivorsRescued;//[Offset: 0xe68, Size: 4]
	MulticastInlineDelegateProperty OnNumSurvivorsRescuedChangedDelegate;//[Size: 16]
	enum ServerStability;//[Offset: 0xe80, Size: 1]
	VoteData[] GameplayVotesArray;//[Offset: 0xee8, Size: 16]
	FortCreativePortalManager* CreativePortalManager;//[Offset: 0xf48, Size: 8]
	FortCreativeRealEstatePlotManager* CreativeRealEstatePlotManager;//[Offset: 0xf50, Size: 8]
	bool bUseMaxBackpackSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	void UnregisterGameplayModifier(out const ActiveGameplayModifierHandle InHandleToUnregister);// 0xd0196d4
	void UnbindDelegateOnGameplayVoteUpdated(enum VoteType, delegate Delegate);// 0xd0195dc
	bool ShouldDisablePlayerTeleportingDuringMissionResults();// 0xd0195a4
	void SetZoneCompletionResult(enum NewCompletionResult);// 0xd0194fc
	void SetWorldLootLevel(const int NewLootLevel);// 0xd019454
	void SetMissionRewardOverrideTag(FText MissionRewardOverrideTag);// 0xd0192d0
	void SetMissionRewardLootLevelOverride(int LootLevel);// 0xd019228
	void SetIsDBNODeathEnabled(bool NewValue);// 0xd01917c
	bool SetDifficultyIncreaseRewardTier(int InDifficultyIncreaseTier);// 0xd0190c8
	void SetBuildingAllowed(bool bBuildingAtLayoutRequirementsAllowed, bool bBuildingWithoutLayoutRequirementsAllowed);// 0xd018fd0
	void ServerSubmitGameplayVote(enum VoteType, int VoteDecision, out const UniqueNetIdRepl PlayerNetId);// 0xd018e10
	void ServerFireAIDirectorEventBatch(const FortAIDirectorEvent[] Payload);// 0xd018d24
	void ServerFireAIDirectorEvent(enum Event, Object* EventSource, Object* EventTarget, float EventMultiplier);// 0xd018b88
	void ServerEndGameplayVote(enum VoteType, out const UniqueNetIdRepl PlayerNetId);// 0xd018a08
	void ServerBeginGameplayVote(enum VoteType, out const UniqueNetIdRepl PlayerNetId, FortVoteConfig VoteConfig);// 0xd018810
	void RemovePlayerAbilityRestriction();// 0xd0187fc
	ActiveGameplayModifierHandle RegisterGameplayModifier(const FortGameplayModifierItemDefinition* InModifierToRegister, int Expiration);// 0xd01870c
	void OnWaveStart(const FText LevelText, int Level, const FText WaveText, int WaveNum);// 0xd0184e8
	void OnWaveEncounterStarted(out const TieredWaveSetData WaveData, out const FText LevelText, int Level, out const FText WaveText, int WaveNum);// 0xd018158
	void OnWaveBasedModifiersAppliedMulticast(const FortGameplayModifierItemDefinition*[] ModifiersApplied);// 0xd01809c
	void OnRepServerUnstableFramerate();// 0xb675c00
	void OnRep_ZoneDifficultyInfoRow();// 0xd018088
	void OnRep_TheaterUniqueId();// 0xd018074
	void OnRep_ServerGameplayTagIndexHash();// 0xd018060
	void OnRep_PlayerStructuresChanged();// 0xb675be4
	void OnRep_PlayerSharedTrapAttributes();// 0xd018044
	void OnRep_PlayerBuildingSkillLevel();// 0xd018028
	void OnRep_NumSurvivorsRescued();// 0xd018014
	void OnRep_MissionRewards();// 0xd018000
	void OnRep_MissionGenerator();// 0xd017fec
	void OnRep_MissionAlertData();// 0xd017fd8
	void OnRep_GameplayVotes();// 0xd017fc4
	void OnRep_GameDifficulty();// 0xd017fa8
	void OnRep_ExplicitGloballyBlockedAbilityTags();// 0xd017f94
	void OnRep_DifficultyIncreaseRewardTier();// 0xd017f80
	void OnRep_DifficultyIncreaseRewards();// 0xd017f6c
	void OnRep_CompletionResult();// 0xd017f58
	void OnRep_ClientPreloadMissionClasses();// 0xd017f44
	void OnRep_bGlobalCeaseFire();// 0xd017f30
	void OnRep_AllSpawnGroupUpgradeModifierDefs();// 0xd017f1c
	void OnRep_ActiveGameplayModifiers();// 0xd017f08
	void NotifySurvivorSpawned();// 0xd017ef4
	void NotifySurvivorRescued(FortPlayerController* Rescuer, FString SurvivorName);// 0xd017e00
	void NotifySurvivorDead();// 0xd017dec
	void NotifyEndFailedGameplayVoteLockout(enum VoteType);// 0xd017d3c
	bool IsRespawningAllowed(FortPlayerState* PlayerState);// 0xd017c80
	bool IsGameplayVoteLocked(enum VoteType);// 0xd017bcc
	bool IsGameplayVoteInProgress(enum VoteType);// 0xd017b18
	bool IsGameplayVoteActive(enum VoteType);// 0xd017a64
	bool IsBuildingWithoutLayoutRequirementsAllowed();// 0xd017a48
	bool IsBuildingAtLayoutRequirementsAllowed();// 0xd017a2c
	bool IsAnyGameplayVoteActive();// 0xd0179f4
	bool HasActiveGameplayModifiers();// 0xd0179bc
	void GloballyUnblockAbilitiesWithTags(GameplayTagContainer TagsToUnblock);// 0xd0178cc
	void GloballyBlockAbilitiesWithTags(GameplayTagContainer TagsToBlock);// 0xd0177dc
	enum GetZoneCompletionResult();// 0xd0177a8
	bool GetVoteStartTime(enum VoteType, out float VoteStartTime);// 0xd0176a8
	bool GetVoteInstigator(enum VoteType, out UniqueNetIdRepl InstigatorNetId);// 0xd017514
	bool GetVoteEndTime(enum VoteType, out float VoteEndTime);// 0xd017414
	float GetVoteDuration(enum VoteType);// 0xd017364
	bool GetVoteArbitratorType(enum VoteType, out enum ArbitratorType);// 0xd017264
	FortInGameMapManager* GetUIMapManager();// 0xd017228
	int GetTotalScore(enum ScoreCategory);// 0xd017178
	float GetTimeRemainingToEndVote(enum VoteType);// 0xd0170c8
	float GetTimeRemainingToEndFailedVoteLockout(enum VoteType);// 0xd017018
	float GetTimeElapsedSinceEndVote(enum VoteType);// 0xd016f68
	float GetTimeElapsedSinceBeginVote(enum VoteType);// 0xd016eb8
	FortThreatParticleActor* GetThreatParticleActor();// 0xd016e9c
	void GetSupressedCraftingItemTypes(out enum[] OutItemTypes);// 0xbbc0600
	void GetSupressedCraftingFilterNames(out FName[] OutNames);// 0xbbc0600
	FText GetSupressedCraftingDisplayText();// 0xd016dc4
	int GetNumSurvivorsSpawned();// 0xd016da8
	int GetNumSurvivorsRescued();// 0xd016d8c
	int GetNumSurvivorsDead();// 0xd016d70
	int GetNumAllowedDifficultyIncreases();// 0xd016d3c
	bool GetIsDBNODeathEnabled();// 0xd016d20
	UniqueNetIdRepl[] GetGameplayVotesForChoice(enum VoteType, int VoteChoice);// 0xd016b68
	float GetGameDifficulty();// 0xd016b34
	float GetFailedVoteLockOutDuration(enum VoteType);// 0xd016a84
	bool GetCurrentVoters(enum VoteType, out Voter[] Voters);// 0xd0168c8
	void GetActiveModifiers(out FortGameplayModifierItemDefinition*[] OutActiveModifiers);// 0xd016808
	void BindDelegateOnGameplayVoteUpdated(enum VoteType, delegate Delegate);// 0xd016710
	void ApplyPlayerAbilityRestriction();// 0xd0166fc

--------------------------------
Class: FortGameState_InGame.FortGameState.FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: FortGameState.FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object
	FString CurrentWUID;//[Offset: 0x2e0, Size: 16]
	int ParTime;//[Offset: 0x2f0, Size: 4]
	int WorldLevel;//[Offset: 0x2f4, Size: 4]
	int CraftingBonus;//[Offset: 0x2f8, Size: 4]
	float CurrentReadyToContinueTimer;//[Offset: 0x2fc, Size: 4]
	int TeamCount;//[Offset: 0x300, Size: 4]
	uint32 GameFlagData;//[Offset: 0x304, Size: 4]
	FortPoiManager* PoiManager;//[Offset: 0x308, Size: 8]
	bool bDBNOEnabledForGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 1]
	bool bPlayersAlwaysVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 1]
	bool bSkipWorldSave;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 1]
	bool bShowLoadingScreenUntilAllLevelAreLoaded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 1]
	bool bFishingCollectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bCharacterCollectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bPlayerRespawningBlocked_Temporarily;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	AdditionalLevelStreamed[] AdditionalPlaylistLevelsStreamed;//[Offset: 0x360, Size: 16]
	int WorldDaysElapsed;//[Offset: 0x388, Size: 4]
	FortFeedbackManager* FeedbackManager;//[Offset: 0x3a8, Size: 8]
	FortMissionManager* MissionManager;//[Offset: 0x3b0, Size: 8]
	FortClientAnnouncementManager* AnnouncementManager;//[Offset: 0x3b8, Size: 8]
	FortScriptedActionManager* ScriptedActionManager;//[Offset: 0x3c0, Size: 8]
	FortLobbyBeaconState* LobbyGameState;//[Offset: 0x3c8, Size: 8]
	FortWorldManager* WorldManager;//[Offset: 0x3d0, Size: 8]
	byte GameplayState;//[Offset: 0x3d8, Size: 1]
	class FortMusicManager* MusicManagerSubclass;//[Offset: 0x3e0, Size: 8]
	FortMusicManagerBank* MusicManagerBank;//[Offset: 0x3e8, Size: 8]
	class FortAmbientAudioController* FortAmbientAudioControllerClass;//[Offset: 0x3f0, Size: 8]
	FString GameSessionId;//[Offset: 0x3f8, Size: 16]
	FortMovementComp_Character*[] ManagedCharMovementComponents;//[Offset: 0x408, Size: 16]
	FortAIPawn*[] ManagedAnimPawns;//[Offset: 0x418, Size: 16]
	FortPawn* PawnForReplayRelevancy;//[Offset: 0x428, Size: 8]
	FortPlayerState* RecorderPlayerState;//[Offset: 0x430, Size: 8]
	FortMovementComp_Character*[] ManagedCharMovementComponentsCopy;//[Offset: 0x470, Size: 16]
	OnTimeHitInfo[] TimeOfDayCallbacks;//[Offset: 0x480, Size: 16]
	FortVisibilityManager* VisibilityManager;//[Offset: 0x490, Size: 8]
	FortFXManager* FXManager;//[Offset: 0x498, Size: 8]
	FortWindManager* WindManager;//[Offset: 0x4a0, Size: 8]
	FortTeamInfo*[] Teams;//[Offset: 0x4a8, Size: 16]
	bool bSkipTeamReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	TeamChangeRequest[] PendingTeamChangeRequests;//[Offset: 0x4c0, Size: 16]
	bool bAllowPendingTeamChangeRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	MulticastInlineDelegateProperty OnPoiManagerReplicatedEvent;//[Size: 16]
	FortGlobalAbilityTargetingActor* GlobalAbilityTargetingActor;//[Offset: 0x560, Size: 8]
	AppliedHomebaseData[] AppliedHomebaseDataArray;//[Offset: 0x608, Size: 16]
	GameStateLootInfo LootInfo;//[Offset: 0x660, Size: 32]
	BuildingContainerDebugInfo[] TreasureChestInfos;//[Offset: 0x680, Size: 16]
	BuildingContainerDebugInfo[] AmmoBoxInfos;//[Offset: 0x690, Size: 16]
	float UnplayableHitchThresholdInMs;//[Offset: 0x6c8, Size: 4]
	int MaxUnplayableHitchesToTolerate;//[Offset: 0x6cc, Size: 4]
	CreativeQuestManager* CreativeQuestManager;//[Offset: 0x6e8, Size: 8]
	void SetPlayerRespawningBlocked_Temporarily(bool bBlock);// 0xd002780
	void RunPerfMemCheatScript(bool bStartStatFiles);// 0xd0026c8
	void OnRep_WorldManager();// 0xd0026ac
	void OnRep_WorldDaysElapsed();// 0xd002698
	void OnRep_Teams();// 0xd002684
	void OnRep_RecorderPlayerState();// 0xd002668
	void OnRep_PoiManager();// 0xd00264c
	void OnRep_PawnForReplayRelevancy(FortPawn* OldPawnForReplayRelevancy);// 0xb672268
	void OnRep_MusicManagerSubclass();// 0xd002638
	void OnRep_MusicManagerBank();// 0xd002624
	void OnRep_MissionManager();// 0xd002610
	void OnRep_GameSessionID();// 0xd0025f4
	void OnRep_GameplayState();// 0xd0025d8
	void OnRep_FeedbackManager();// 0xd0025c4
	void OnRep_CurrentWUID();// 0xd0025a8
	void OnRep_AnnouncementManager();// 0xd002594
	void OnRep_AdditionalPlaylistLevelsStreamed();// 0xd002580
	void OnFinishedStreamingAdditionalPlaylistLevel();// 0xd00256c
	void OnFinishedShowingAdditionalPlaylistLevel();// 0xd002558
	int GetWorldDaysElapsed();// 0xd00253c
	bool GetPlayerRespawningBlocked_Temporarily();// 0xd002520
	float GetMatchTime();// 0xd0024e4
	byte GetGameplayState();// 0xd0024c8
	void DemoEndOfDayRecap();// 0xd0024b4
	bool DBNOEnabledForGameMode();// 0xd002494
	void DbgSphereSendToAllInternal_DoNotCall(const Vector Center, float Radius, int Segments, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xd002224
	void DbgLineSendToAllInternal_DoNotCall(const Vector LineStart, const Vector LineEnd, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xd001ff8
	void DbgCapsuleSendToAllInternal_DoNotCall(const Vector Center, float HalfHeight, float Radius, const Quat Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xd001d50
	void DbgBoxSendToAllInternal_DoNotCall(const Vector Center, const Vector Extent, const Rotator Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0xd001ae8
	void CopyGameSessionIdToClipboard();// 0xd001ad4
	void Client_RefreshEventCalendar();// 0xd001ab8
	void Client_InitiateEndOfDayRecap(const EndOfDayRecap EndOfDayRecap);// 0xd0019f4

--------------------------------
Class: FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object
	FortTimeOfDayManager* FortTimeOfDayManager;//[Offset: 0x2d0, Size: 8]
	FortMissionStormShield* StormShield;//[Offset: 0x2d8, Size: 8]
	void OnRep_TimeOfDayManager();// 0xd012cc4
	void OnRep_StormShield();// 0xd012cb0
	FortTimeOfDayManager* GetTimeOfDayManager();// 0xd012c94
	FortMissionStormShield* GetStormShield();// 0xd012c78

--------------------------------
Class: PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object
	class Playspace* RootPlayspaceClass;//[Offset: 0x288, Size: 8]
	bool bUsePlayspaceSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bUsePlayerSpawningComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	PlayspaceManagerComponent* PlayspaceManagerComponentCached;//[Offset: 0x298, Size: 8]
	PlayspaceGameStateComponent_PlayerSpawningManager* PlayerSpawningManagerCached;//[Offset: 0x2a0, Size: 8]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x26c, Size: 8]
	FName PreviousMatchState;//[Offset: 0x274, Size: 8]
	int ElapsedTime;//[Offset: 0x27c, Size: 4]
	void OnRep_MatchState();// 0xb9fe018
	void OnRep_ElapsedTime();// 0xd8209e0

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 8]
	Object* FontMaterial;//[Offset: 0x8, Size: 8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 32]
	FName TypefaceFontName;//[Offset: 0x40, Size: 8]
	int Size;//[Offset: 0x48, Size: 4]
	int LetterSpacing;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ActiveGameplayModifierHandle
	int Handle;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ReplicatedMontageMap
	ReplicatedMontageIndexPair[] Mappings;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ReplicatedMontageIndexPair
	AnimMontage* Montage;//[Offset: 0x0, Size: 8]
	int Index;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortVoteConfig
	int NumVoteOptions;//[Offset: 0x0, Size: 4]
	float VoteDuration;//[Offset: 0x4, Size: 4]
	float FailedVoteLockOutDuration;//[Offset: 0x8, Size: 4]
	int MaxVotesAllowedPerPlayer;//[Offset: 0xc, Size: 4]
	enum VoteArbitratorType;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayspaceGameStateComponent_PlayerSpawningManager.PlayspaceGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	PlayspaceSpawningInfo[] SpawningUsersArray;//[Offset: 0xe0, Size: 16]

--------------------------------
Class: PlayspaceGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: PlayspaceSpawningInfo
	UniqueNetIdRepl UserId;//[Offset: 0x0, Size: 40]
	Playspace* RequestingPlayspace;//[Offset: 0x28, Size: 8]
	Actor* SpawnLocationActor;//[Offset: 0x30, Size: 8]
	Vector SpawnLocation;//[Offset: 0x38, Size: 12]
	Rotator SpawnRotation;//[Offset: 0x44, Size: 12]
	float SpawnTimeServer;//[Offset: 0x50, Size: 4]
	Vector LastLocation;//[Offset: 0x54, Size: 12]
	float MinTimeForCameraFadeTransition;//[Offset: 0x60, Size: 4]

--------------------------------
Class: EndOfDayRecap
	int DayNumber;//[Offset: 0x0, Size: 4]
	int TeamScoreAtStartOfDay;//[Offset: 0x4, Size: 4]
	int TeamScoreAtEndOfDay;//[Offset: 0x8, Size: 4]
	FortPlayerScoreReport[] ScoreReports;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortPlayerScoreReport
	UniqueNetIdRepl PlayerID;//[Offset: 0x0, Size: 40]
	FString PlayerName;//[Offset: 0x28, Size: 16]
	FortPlayerState* PlayerState;//[Offset: 0x38, Size: 8]
	byte PlayerTeam;//[Offset: 0x40, Size: 1]
	ReplicatedStatValues ReplicatedStats_Campaign;//[Offset: 0x44, Size: 8]
	ReplicatedStatValues ReplicatedStats_Zone;//[Offset: 0x15c, Size: 8]
	int InitialLevel;//[Offset: 0x274, Size: 4]
	int InitialExperienceAmount;//[Offset: 0x278, Size: 4]
	FortExperienceDelta ExperienceInfoDelta;//[Offset: 0x27c, Size: 36]
	int LastExperienceDeltaAmount;//[Offset: 0x2a0, Size: 4]
	int LastScoreDeltaAmount;//[Offset: 0x2a4, Size: 4]

--------------------------------
Class: ReplicatedStatValues
	int StatValue;//[Offset: 0x0, Size: 4]
	int ScoreValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortExperienceDelta
	int Level;//[Offset: 0x0, Size: 4]
	int XP;//[Offset: 0x4, Size: 4]
	int BaseXPEarned;//[Offset: 0x8, Size: 4]
	int BonusXPEarned;//[Offset: 0xc, Size: 4]
	int BoostXPEarned;//[Offset: 0x10, Size: 4]
	int BoostXPMissed;//[Offset: 0x14, Size: 4]
	int RestXPEarned;//[Offset: 0x18, Size: 4]
	int GroupBoostXPEarned;//[Offset: 0x1c, Size: 4]
	enum IsFinalXpUpdate;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TieredWaveSetData
	int EDOIdx;//[Offset: 0x0, Size: 4]
	float BreatherBetweenWaves;//[Offset: 0x4, Size: 4]
	enum WaveRules;//[Offset: 0x8, Size: 1]
	GameplayTag EnemyTypeToKillMod;//[Offset: 0xc, Size: 8]
	FortMissionInfo*[] WaveMissions;//[Offset: 0x18, Size: 16]
	float WaveLengthMod;//[Offset: 0x28, Size: 4]
	float NumKillsMod;//[Offset: 0x2c, Size: 4]
	float KillPointsMod;//[Offset: 0x30, Size: 4]
	float DifficultyAddMod;//[Offset: 0x34, Size: 4]
	bool bDeferTemporaryModifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	class FortDifficultyOptionEncounter_SpawnPointsMultiplier* OverrideSpawnPointsMultiplier;//[Offset: 0x40, Size: 40]
	class FortDifficultyOptionEncounter_SpawnPointsCurve* OverrideSpawnPointsCurve;//[Offset: 0x68, Size: 40]
	class FortDifficultyOptionEncounter_SpawnGroupProgression* OverrideSpawnProgression;//[Offset: 0x90, Size: 40]
	class FortDifficultyOptionEncounter_UtilitiesAdjustment* OverrideUtilitiesAdjustment;//[Offset: 0xb8, Size: 40]
	class FortDifficultyOptionEncounter_UtilitiesFree* OverrideUtilitiesFree;//[Offset: 0xe0, Size: 40]
	class FortDifficultyOptionEncounter_UtilitiesLocked* OverrideUtilitiesLocked;//[Offset: 0x108, Size: 40]
	class FortDifficultyOptionEncounter_Distance* OverrideDistance;//[Offset: 0x130, Size: 40]
	class FortDifficultyOptionEncounter_DirectionNumber* OverrideDirectionNumber;//[Offset: 0x158, Size: 40]
	class FortDifficultyOptionEncounter_ModifierTags* OverrideModifierTags;//[Offset: 0x180, Size: 40]
	class FortDifficultyOptionEncounter_TimedModifierTags* OverrideTimedModifierTags;//[Offset: 0x1a8, Size: 40]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnPointsMultiplier.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	ScalableFloat Multiplier;//[Offset: 0x48, Size: 40]

--------------------------------
Class: FortDifficultyOptionEncounter.FortDifficultyOption.Object

--------------------------------
Class: FortDifficultyOption.Object
	DataTableRowHandle CostAndAvailability;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnPointsCurve.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	FortSpawnPointsPercentageCurveSequence* CurveSequence;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortSpawnPointsPercentageCurveSequence.DataAsset.Object
	DataTableRowHandle[] SpawnPointsPercentageCurves;//[Offset: 0x30, Size: 16]
	byte SequenceType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnGroupProgression.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	FortAISpawnGroupProgressionInfo* SpawnGroupProgression;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortAISpawnGroupProgressionInfo.DataAsset.Object
	SpawnGroupProgression[] SpawnGroups;//[Offset: 0x30, Size: 16]

--------------------------------
Class: SpawnGroupProgression
	FortAISpawnGroup* SpawnGroup;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortDifficultyOptionEncounter_UtilitiesAdjustment.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	float UtilitiesAdjustmentIntervalSeconds;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortDifficultyOptionEncounter_UtilitiesFree.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	int NumFreeUtilitySlots;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortDifficultyOptionEncounter_UtilitiesLocked.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	FortEncounterLockedUtility[] LockedUtilities;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortEncounterLockedUtility
	byte Utility;//[Offset: 0x0, Size: 1]
	byte UtilityDesire;//[Offset: 0x1, Size: 1]

--------------------------------
Class: FortDifficultyOptionEncounter_Distance.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	float MinSpawnDistance;//[Offset: 0x48, Size: 4]
	float MaxSpawnDistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: FortDifficultyOptionEncounter_DirectionNumber.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	int NumberOfDirections;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortDifficultyOptionEncounter_ModifierTags.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	GameplayTagContainer ModifierTags;//[Offset: 0x48, Size: 32]

--------------------------------
Class: FortDifficultyOptionEncounter_TimedModifierTags.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	FortAIEncounterTimedModifierTags[] TimedModifierTags;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortAIEncounterTimedModifierTags
	float TimeSeconds;//[Offset: 0x0, Size: 4]
	GameplayTagContainer GameplayTags;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FortGlobalEnvironmentAbilityActor.Info.Actor.Object
	FortAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x228, Size: 8]
	FortDamageSet* DamageSet;//[Offset: 0x230, Size: 8]

--------------------------------
Class: ActiveGameplayModifierArray.FastArraySerializer
	ActiveGameplayModifier[] Items;//[Offset: 0x108, Size: 16]
	ActiveGameplayModifier[] DeferredGameplayModifiers;//[Offset: 0x118, Size: 16]
	int ModifierHandleGenerator;//[Offset: 0x128, Size: 4]
	bool bSupportRuntimeModifierShutdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]

--------------------------------
Class: ActiveGameplayModifier.FastArraySerializerItem
	FortGameplayModifierItemDefinition* ModifierDef;//[Offset: 0x10, Size: 8]
	ActiveGameplayModifierHandle ModifierHandle;//[Offset: 0x18, Size: 4]
	FortGameplayMutator*[] Mutators;//[Offset: 0x20, Size: 16]
	int Expiration;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BuildingStructuralSupportSystem.Object
	Controller* BatchedRemovalInstigator;//[Offset: 0x80, Size: 8]
	BuildingLayoutRequirement*[] LayoutRequirementActorsToRegister;//[Offset: 0x308, Size: 16]
	FortNavigationGraph* NavGraph;//[Offset: 0x3d8, Size: 8]
	bool WouldBuildingBeStructurallySupportedByNeighbors(const BuildingSMActor* ActorToCheck, out const Vector Location, out const Rotator Rotation, bool bMirrored);// 0xce6ea54
	void StopActorRemovalBatch();// 0xce6ea40
	void StartActorRemovalBatch();// 0xce6ea2c
	bool K2_GetWorldLocFromGridIndices(out const BuildingSupportCellIndex GridIndices, out Vector OutWorldLoc);// 0xce6e914
	void K2_GetNeighboringBuildingActors(byte BuildingType, out const Vector WorldLocation, out BuildingSupportCellIndex OutActorGridIndices, out BuildingNeighboringActorInfo OutNeighboringActors);// 0xce6e6e8
	void K2_GetNeighboringActorsForWallActor(out const Vector WorldLocation, out BuildingSupportCellIndex OutActorGridIndices, out BuildingNeighboringActorInfo OutNeighboringActors);// 0xce6e54c
	void K2_GetNeighboringActorsForCenterCellActor(out const Vector WorldLocation, out BuildingSupportCellIndex OutActorGridIndices, out BuildingNeighboringActorInfo OutNeighboringActors);// 0xce6e3b4
	void K2_GetLogicalBuildingActors(int LogicalIdx, out BuildingSMActor*[] LogicalBuildingActors);// 0xce6e2b4
	bool K2_GetGridIndicesFromWorldLoc(out const Vector WorldLoc, out BuildingSupportCellIndex OutGridIndices);// 0xce6e19c
	Box K2_GetGridBoxFromWorldLoc(out const Vector WorldLocation);// 0xce6e0d4
	bool K2_GetBuildingActorsInGridCells(out const BuildingSupportCellIndex[] CellIndices, out const BuildingGridActorFilter Filter, out BuildingNeighboringActorInfo OutActorsInGridCell);// 0xce6df30
	bool K2_GetBuildingActorsInGridCell(out const Vector WorldLocation, out const BuildingGridActorFilter Filter, out BuildingNeighboringActorInfo OutActorsInGridCell);// 0xce6dd9c
	byte K2_CanAddWallActorToGrid(out const Vector WorldLocation, out const BuildingSupportCellIndex GridIndices, byte WallType, out enum OutWallPosition, out int OutWallIdx, out BuildingActor*[] OutExistingBuildings, out bool OutbSupportedByWorld, bool bAllowStaticOverlap, bool bPerformCollisionChecks);// 0xce6da4c
	byte K2_CanAddFloorActorToGrid(out const Vector WorldLocation, out const BuildingSupportCellIndex GridIndices, byte FloorType, out enum OutFloorPosition, out int OutFloorIdx, out BuildingActor*[] OutExistingBuildings, out bool OutbSupportedByWorld, bool bAllowStaticOverlap, bool bPerformCollisionChecks);// 0xce6d6fc
	byte K2_CanAddCenterCellActorToGrid(out const Vector WorldLocation, out const BuildingSupportCellIndex GridIndices, byte CenterCellType, out int OutHorizontalGridIdx, out BuildingActor*[] OutExistingBuildings, out bool OutbStructurallySupported, bool bAllowStaticOverlap, bool bPerformCollisionChecks);// 0xce6d404
	byte K2_CanAddBuildingActorToGrid(Object* WorldContextObject, const BuildingSMActor* ActorToCheck, out const Vector Location, out const Rotator Rotation, bool bMirrored, out BuildingActor*[] ExistingBuildings, out enum MarkerOptionalAdjustment, bool bAllowStaticOverlap);// 0xce6d128
	bool IsWorldLocValid(out const Vector WorldLoc);// 0xce6d06c
	static bool IsBuildingActorValid(const BuildingSMActor* ActorToTest);// 0xce6cfc0
	bool IsBuildingActorStructurallySupported(const BuildingSMActor* ActorToCheck);// 0xce6cf0c
	BuildingSMActor* GetWallActor(out const BuildingSupportCellIndex GridIndices, enum WallPosition);// 0xce6ce00
	void GetLogicalBuildingGroundSupportedActors(int LogicalIndex, out BuildingSMActor*[] LogicalBuildingGroundSupportedActors);// 0xce6cd00
	Box GetGridBox(out const BuildingSupportCellIndex CellIndex);// 0xce6cc30
	BuildingSMActor* GetFloorActor(out const BuildingSupportCellIndex GridIndices, enum FloorPosition);// 0xce6cb24
	BuildingSMActor* GetCenterCellActor(out const BuildingSupportCellIndex GridIndices);// 0xce6ca64
	byte CanAddBuildingActorClassToGrid(Object* WorldContextObject, class Object BuildingSMActorClassToCheck, out const Vector Location, out const Rotator Rotation, bool bMirrored, out BuildingActor*[] ExistingBuildings, out enum MarkerOptionalAdjustment, bool bAllowStaticOverlap);// 0xce6c788
	bool AreNeighborsConnected(const BuildingSMActor* NeighborOne, out const Vector NeighborOneLoc, out const Rotator NeighborOneRot, bool bNeighborOneMirrored, const BuildingSMActor* NeighborTwo, out const Vector NeighborTwoLoc, out const Rotator NeighborTwoRot, bool bNeighborTwoMirrored);// 0xce6c4b8
	bool AreNeighboringBuildingActorsConnected(const BuildingSMActor* NeighborOne, const BuildingSMActor* NeighborTwo);// 0xce6c3c8
	bool AreGridIndicesValid(out const BuildingSupportCellIndex GridIndices);// 0xce6c304

--------------------------------
Class: BuildingNeighboringActorInfo
	NeighboringWallInfo[] NeighboringWallInfos;//[Offset: 0x0, Size: 16]
	NeighboringFloorInfo[] NeighboringFloorInfos;//[Offset: 0x10, Size: 16]
	NeighboringCenterCellInfo[] NeighboringCenterCellInfos;//[Offset: 0x20, Size: 16]

--------------------------------
Class: NeighboringWallInfo
	BuildingSMActor* NeighboringActor;//[Offset: 0x0, Size: 8]
	BuildingSupportCellIndex NeighboringCellIdx;//[Offset: 0x8, Size: 12]
	enum WallPosition;//[Offset: 0x14, Size: 1]

--------------------------------
Class: NeighboringFloorInfo
	BuildingSMActor* NeighboringActor;//[Offset: 0x0, Size: 8]
	BuildingSupportCellIndex NeighboringCellIdx;//[Offset: 0x8, Size: 12]
	enum FloorPosition;//[Offset: 0x14, Size: 1]

--------------------------------
Class: NeighboringCenterCellInfo
	BuildingSMActor* NeighboringActor;//[Offset: 0x0, Size: 8]
	BuildingSupportCellIndex NeighboringCellIdx;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BuildingGridActorFilter
	bool bIncludeWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIncludeFloors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIncludeFloorInTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bIncludeCenterCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: BuildingLayoutRequirement.BuildingPlayerPrimitivePreview.BuildingSMActor.BuildingActor.Actor.Object
	MulticastInlineDelegateProperty OnLayoutSatisfied;//[Size: 16]
	MulticastInlineDelegateProperty OnLayoutUnSatisfied;//[Size: 16]
	class BuildingSMActor* LayoutRequirementSMActorClass;//[Offset: 0xb00, Size: 8]
	bool bIgnoreResourceTypeRequirements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08, Size: 1]
	bool bMakeSatisfyingActorIndestructibleWhileRequirementExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb09, Size: 1]
	bool bNeedToInitializeRequirementStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0a, Size: 1]
	bool bRequirementSatisfied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0b, Size: 1]
	enum RequirementStatus;//[Offset: 0xb0c, Size: 1]
	byte OverrideResourceType;//[Offset: 0xb0d, Size: 1]
	bool bAllowAnyPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0e, Size: 1]
	bool bAllowOccupantPatternEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0f, Size: 1]
	MaterialInterface* LayoutDisplayMaterial;//[Offset: 0xb10, Size: 40]
	MaterialInstanceDynamic* LayoutDisplayMID;//[Offset: 0xb38, Size: 8]
	bool SupportsEditingOfOccupant();// 0xce58158
	void SetRequirementVisible(bool bVisible);// 0xce580a8
	void SetRequiredResourceType(byte DesiredResourceType);// 0xce58000
	void OnRequirementSatisfyingActorDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xce57d98
	void OnRep_RequirementStatus();// 0xce57d7c
	void DeactivateRequirement();// 0xce57d68
	void ActivateRequirement(bool bMakeVisible);// 0xce57cb8

--------------------------------
Class: BuildingPlayerPrimitivePreview.BuildingSMActor.BuildingActor.Actor.Object

--------------------------------
Class: FortNavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: AthenaGameMessageData
	enum MsgType;//[Offset: 0x0, Size: 1]
	FText MsgText;//[Offset: 0x8, Size: 24]
	SoundCue* MsgSound;//[Offset: 0x20, Size: 8]
	float MsgDelay;//[Offset: 0x28, Size: 4]
	bool bIsTeamBased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int TeamIndex;//[Offset: 0x30, Size: 4]
	float DisplayTime;//[Offset: 0x34, Size: 4]
	PlayerController* TargetPlayerController;//[Offset: 0x38, Size: 8]

--------------------------------
Class: FortContextualTutorialController.Object
	FortContextualTutorial*[] ActiveContextualTutorials;//[Offset: 0x28, Size: 16]
	FortContextualTutorial*[] PendingContextualTutorials;//[Offset: 0x38, Size: 16]
	FortContextualTutorial*[] CompletedContextualTutorials;//[Offset: 0x48, Size: 16]
	FortContextualTutorial*[] PendingCompletedContextualTutorials;//[Offset: 0x58, Size: 16]
	FortPlayerController* OwnerController;//[Offset: 0x98, Size: 8]
	void HideGameModeMessageRequest();// 0xcf9117c
	void HandleStartSkydivingForActivation();// 0xcf91168
	void HandleDBNOChanged(FortPawn* Pawn, bool IsBDNO);// 0xcf91078
	void HandleDamageReceived();// 0xcf91064

--------------------------------
Class: FortContextualTutorial.Object
	Actor* MarkerActor;//[Offset: 0x90, Size: 8]
	FText MarkerText;//[Offset: 0x98, Size: 24]
	FortHighlightObjectInWorldComponent* MarkerHighlightComponent;//[Offset: 0xb0, Size: 8]
	FortContextualTutorialDefinition* TutorialDefinition;//[Offset: 0xb8, Size: 8]
	FortPlayerController* OwnerController;//[Offset: 0xc8, Size: 8]

--------------------------------
Class: FortHighlightObjectInWorldComponent.ActorComponent.Object
	HighlightObjectData[] HighlightData;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: HighlightObjectData
	GameplayTagContainer HighlightTags;//[Offset: 0x0, Size: 32]
	FName FriendlyStencilName;//[Offset: 0x20, Size: 8]
	FName EnemyStencilName;//[Offset: 0x28, Size: 8]
	byte FriendlyStencilIndex;//[Offset: 0x30, Size: 1]
	byte EnemyStencilIndex;//[Offset: 0x31, Size: 1]
	ParticleSystem* Effect;//[Offset: 0x38, Size: 8]
	float OverlapRadius;//[Offset: 0x40, Size: 4]
	byte[] ObjectTypes;//[Offset: 0x48, Size: 16]
	class Actor* ActorClassFilter;//[Offset: 0x58, Size: 8]
	Actor*[] PreviouslyOverlappingActors;//[Offset: 0x60, Size: 16]
	bool bIgnoreDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bOnlyHighlightOwningActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]

--------------------------------
Class: FortContextualTutorialDefinition.DataAsset.Object
	class FortContextualTutorial* ContextualTutorialClass;//[Offset: 0x30, Size: 8]
	GameplayTag TutorialType;//[Offset: 0x38, Size: 8]
	int Priority;//[Offset: 0x40, Size: 4]
	int AmountOfRecallMatches;//[Offset: 0x44, Size: 4]
	DirectiveInput[] DirectiveMessages;//[Offset: 0x48, Size: 16]
	FText InformativeMessage;//[Offset: 0x58, Size: 24]
	float TriggerActivationDelay;//[Offset: 0x70, Size: 4]
	float MessageDisplayTime;//[Offset: 0x74, Size: 4]
	float SuccesMessageDisplayTime;//[Offset: 0x78, Size: 4]
	float ReminderDelay;//[Offset: 0x7c, Size: 4]
	int ReminderAmount;//[Offset: 0x80, Size: 4]
	float InformativeMessageDelay;//[Offset: 0x84, Size: 4]
	float LockedDelay;//[Offset: 0x88, Size: 4]
	float QueuedActivateDelay;//[Offset: 0x8c, Size: 4]
	bool bQueueActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	int AccountLevelLimit;//[Offset: 0x94, Size: 4]
	bool bCanBeShownInCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bIsCompletionSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bAlwaysSendSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bCanSetMessagingSystemOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	bool bCanBeShownWhileDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	enum Platform;//[Offset: 0x9d, Size: 1]
	GameplayTag ContextualTutorialDependency;//[Offset: 0xa0, Size: 8]
	GameplayTagContainer AdditionalTutorialsToComplete;//[Offset: 0xa8, Size: 32]
	HUDElementToHighlight[] HudElementsToHighlight;//[Offset: 0xc8, Size: 16]
	bool bRequireSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bRequireSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bActivateInBR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bActivateInCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]

--------------------------------
Class: DirectiveInput
	enum Input;//[Offset: 0x0, Size: 1]
	FText Text;//[Offset: 0x8, Size: 24]
	FText[] ABTestingTexts;//[Offset: 0x20, Size: 16]

--------------------------------
Class: HUDElementToHighlight
	GameplayTagContainer HUDElementToHighlight;//[Offset: 0x0, Size: 32]
	GameplayTagContainer HUDSubElementToHighlight;//[Offset: 0x20, Size: 32]
	GameplayTagContainer UniqueHUDElementToHighlight;//[Offset: 0x40, Size: 32]

--------------------------------
Class: TotalPlayers
	int Humans;//[Offset: 0x0, Size: 4]
	int Bots;//[Offset: 0x4, Size: 4]
	int Total;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortInGameMapManager.Actor.Object
	MulticastInlineDelegateProperty OnAllowShowMainMapChanged;//[Size: 16]
	TeamMapInfo[] MapData;//[Offset: 0x258, Size: 16]
	bool bClearAllFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	FName StaticCaptureCameraName;//[Offset: 0x26c, Size: 8]
	int MapLayerSize;//[Offset: 0x284, Size: 4]
	Margin MapMargin;//[Offset: 0x288, Size: 16]
	class SceneCapture2D* SceneCaptureClass;//[Offset: 0x298, Size: 8]
	class SceneCapture2D* SceneCaptureBlurryClass;//[Offset: 0x2a0, Size: 8]
	MaterialInterface* MapMaterial;//[Offset: 0x2a8, Size: 8]
	MaterialInstanceDynamic* MapMaterialMID;//[Offset: 0x2b0, Size: 8]
	float MapOpacityWhenWalking;//[Offset: 0x2b8, Size: 4]
	float OffsetZ;//[Offset: 0x2bc, Size: 4]
	int IconVisibilityFogThreshold;//[Offset: 0x2c0, Size: 4]
	float DelayBetweenDispersions;//[Offset: 0x2c4, Size: 4]
	float ExploredRadius;//[Offset: 0x2c8, Size: 4]
	float ExploredFalloffRadius;//[Offset: 0x2cc, Size: 4]
	float SeenRadius;//[Offset: 0x2d0, Size: 4]
	float SeenFalloffRadius;//[Offset: 0x2d4, Size: 4]
	int VisibilityMaxGradient;//[Offset: 0x2d8, Size: 4]
	int UnexploredOpacity;//[Offset: 0x2dc, Size: 4]
	CurveTableRowHandle CloudBrightnessCurve;//[Offset: 0x2e0, Size: 16]
	CurveTableRowHandle DesaturationFactorCurve;//[Offset: 0x2f0, Size: 16]
	float MaxPercentageMapExplored;//[Offset: 0x300, Size: 4]
	float MapExplorationThresholdPercentage;//[Offset: 0x304, Size: 4]
	float LastMapExplorationThresholdPercentageReached;//[Offset: 0x308, Size: 4]
	MulticastInlineDelegateProperty OnMapFullyExplored;//[Size: 16]
	MulticastInlineDelegateProperty OnMapExplorationThresholdReached;//[Size: 16]
	enum MapCaptureMethod;//[Offset: 0x330, Size: 4]
	SceneCapture2D* SceneCapture;//[Offset: 0x338, Size: 8]
	SceneCapture2D* SceneCaptureBlurry;//[Offset: 0x340, Size: 8]
	Texture2D* FogMask;//[Offset: 0x4a0, Size: 8]
	bool bUseExplorationBasedFogOfWar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bShareMapWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	bool bResetMapDataOnTeamSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 1]
	Texture2D* HeatmapMask;//[Offset: 0x4b0, Size: 8]
	bool bCanUpdateHeatmapMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	float MapWorldScale;//[Offset: 0x51c, Size: 4]
	LinearColor DefaultMapLocationFontColor;//[Offset: 0x528, Size: 16]
	SlateFontInfo DefaultMapLocationFont;//[Offset: 0x558, Size: 88]
	uint32 MobileMapLocationFontSizeOverride;//[Offset: 0x5b0, Size: 4]
	SlateFontInfo MapLocationFont;//[Offset: 0x5b8, Size: 88]
	<GameplayTag,MapLocationRenderData> MinimapLocationRenderData_Player1;//[Offset: 0x618, Size: 80]
	<GameplayTag,MapLocationRenderData> MinimapLocationRenderData_Player2;//[Offset: 0x668, Size: 80]
	bool ShouldShowMainMap();// 0xd0396c8
	void SetCaptureLocation(out const Vector Location);// 0xd039618
	void SetActorBoundaryData(float UpperZ, float LowerZ, out const class Actor[] ClassesToHide);// 0xd0394dc
	void ServerClearAllFog();// 0xd0394c8
	void ResetCaptureLocation();// 0xd0394b4
	void PaintOnFog(out const Vector WorldCoords, byte Team);// 0xd0393c0
	void OnRep_MapData();// 0xd0393ac
	void OnRep_ClearAllFog();// 0xd039398
	bool GetStaticCaptureSetupComplete();// 0xd03937c
	float GetHeatmapMaskScale();// 0xd039348
	Texture2D* GetHeatmapMask();// 0xd039314
	static FortInGameMapManager* GetCurrent(const Object* WorldContextObject);// 0xd03926c
	void BroadcastExplorationEvents(const TeamMapExplorationEvent[] Events);// 0xd0391b0
	Vector2D BPWorldLocationToMapLocation(out const Vector WorldLocation, float InMapSize);// 0xd0390ac
	void AllowShowMiniMap(bool bAllowShow);// 0xd039000
	void AllowShowMainMap(bool bAllowShow);// 0xd038f50

--------------------------------
Class: TeamMapInfo
	byte[] ReplicatedSeedPack;//[Offset: 0x0, Size: 16]
	byte TeamId;//[Offset: 0x44, Size: 1]

--------------------------------
Class: TeamMapExplorationEvent
	byte TeamId;//[Offset: 0x0, Size: 1]
	int8 ExplorationThreshold;//[Offset: 0x1, Size: 1]

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x230, Size: 8]
	void OnInterpToggle(bool bEnable);// 0xd8d9a44

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x220, Size: 8]
	SceneComponent* SceneComponent;//[Offset: 0x228, Size: 8]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2a8, Size: 1]
	float FOVAngle;//[Offset: 0x2ac, Size: 4]
	float OrthoWidth;//[Offset: 0x2b0, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2b8, Size: 8]
	byte CompositeMode;//[Offset: 0x2c0, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 1360]
	float PostProcessBlendWeight;//[Offset: 0x820, Size: 4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x824, Size: 1]
	float CustomNearClippingPlane;//[Offset: 0x828, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x830, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x874, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x880, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88c, Size: 1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88d, Size: 1]
	void CaptureScene();// 0xd8d99d0
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0xd8d98cc

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1f1, Size: 1]
	byte CaptureSource;//[Offset: 0x1f2, Size: 1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x1f8, Size: 16]
	Actor*[] HiddenActors;//[Offset: 0x208, Size: 16]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x218, Size: 16]
	Actor*[] ShowOnlyActors;//[Offset: 0x228, Size: 16]
	float LODDistanceFactor;//[Offset: 0x238, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x23c, Size: 4]
	int CaptureSortPriority;//[Offset: 0x240, Size: 4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x248, Size: 16]
	FString ProfilingEventName;//[Offset: 0x288, Size: 16]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0xd8dbe44
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xd8dbd54
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0xd8dbcac
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0xd8dbc04
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xd8dbb14
	void HideComponent(PrimitiveComponent* InComponent);// 0xd8dba6c
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0xd8db97c
	void ClearShowOnlyComponents();// 0xd8db968
	void ClearHiddenComponents();// 0xd8db954

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 16]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: MapLocationRenderData
	SlateFontInfo Font;//[Offset: 0x48, Size: 88]

--------------------------------
Class: FortPoiManager.Actor.Object
	FortPoiGridInfo FortPoiGridInfo;//[Offset: 0x220, Size: 40]
	FortPoiVolume*[] SmallTickUpdatedPoi;//[Offset: 0x248, Size: 16]
	FortPoiVolume*[] LargePoiVolumes;//[Offset: 0x258, Size: 16]
	FortPoiVolume*[] PendingLargePoiVolumes;//[Offset: 0x268, Size: 16]
	FortPoiVolume*[] NamedOnMapPoiVolumes;//[Offset: 0x278, Size: 16]
	FortPoiVolume*[] AllPoiVolumes;//[Offset: 0x288, Size: 16]
	int TestPlayerIndex;//[Offset: 0x298, Size: 4]
	FName[] POIsExcludedFromBeginGolden;//[Offset: 0x2a0, Size: 16]
	int MaxNumTestsPerFrame;//[Offset: 0x2b0, Size: 4]
	GameplayTagContainer[] PoiTagContainerTable;//[Offset: 0x2b8, Size: 16]
	int PoiTagContainerTableSize;//[Offset: 0x2c8, Size: 4]
	bool bIsReinitializingGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool bHasInitalized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	int PoiGridPrevSizeForDebugDisplay;//[Offset: 0x2d0, Size: 4]
	int16[] PoiGridForDebugDisplay;//[Offset: 0x2d8, Size: 16]
	int16[] FortPoiGridCellsTagContainerTableIds;//[Offset: 0x2e8, Size: 16]
	FortPoiVolumeGridCell[] FortPoiGridCellsLargeVolume;//[Offset: 0x2f8, Size: 16]
	void OnRep_PoiTagContainerTable();// 0xb6b1b10
	void OnRep_PoiGridForDebugDisplay();// 0xd1a08f0
	void OnRep_FortPoiGridInfo();// 0xd1a08dc
	void ClientsideMinimalInitPostEventsReady(out const FString[] NewEvents);// 0xd1a07c4

--------------------------------
Class: FortPoiGridInfo
	Vector2D WorldGridStart;//[Offset: 0x0, Size: 8]
	Vector2D WorldGridEnd;//[Offset: 0x8, Size: 8]
	Vector2D WorldGridSpacing;//[Offset: 0x10, Size: 8]
	int GridCountX;//[Offset: 0x18, Size: 4]
	int GridCountY;//[Offset: 0x1c, Size: 4]
	Vector2D WorldGridTotalSize;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortPoiVolumeGridCell

--------------------------------
Class: AdditionalLevelStreamed
	FName LevelName;//[Offset: 0x0, Size: 8]
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: FortFeedbackManager.Actor.Object
	FortFeedbackEventData[] FeedbackEvents;//[Offset: 0x220, Size: 16]
	bool bUsesStWFeedbackEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	FortFeedbackEventData[] BankDefinedFeedbackEvents;//[Offset: 0x238, Size: 16]
	class FortPawn_FeedbackAnnouncer* AnnouncerPawnClass;//[Offset: 0x248, Size: 8]
	FortPawn_FeedbackAnnouncer* Announcer;//[Offset: 0x250, Size: 8]
	Controller*[] SuppressedControllers;//[Offset: 0x258, Size: 16]
	void SuppressProceduralFeedback(Controller*[] ControllersToSuppress);// 0xcfdb73c
	static FortFeedbackManager* GetFeedbackManager(Object* WorldContextObject);// 0xcfdb694
	static FortPawn_FeedbackAnnouncer* GetAnnouncerPawn(Object* WorldContextObject);// 0xcfdb5ec

--------------------------------
Class: FortFeedbackEventData
	FortFeedbackHandle Handle;//[Offset: 0x0, Size: 24]
	float ChanceToPlay;//[Offset: 0x18, Size: 4]
	float MinReplayTime;//[Offset: 0x1c, Size: 4]
	float MinReplayTimeForSpeaker;//[Offset: 0x20, Size: 4]
	float MaxWitnessDistance;//[Offset: 0x24, Size: 4]
	bool bInterruptCurrentLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bCanBeInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bCanQue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	byte MultiplayerBroadcastFilter;//[Offset: 0x2b, Size: 1]
	byte ContextSelectionMethod;//[Offset: 0x2c, Size: 1]
	float FeedbackDelay;//[Offset: 0x30, Size: 4]
	float TimeLastPlayed;//[Offset: 0x34, Size: 4]

--------------------------------
Class: FortPawn_FeedbackAnnouncer.FortPawn.Character.Pawn.Actor.Object

--------------------------------
Class: FortClientAnnouncementManager.Actor.Object
	FortClientAnnouncement*[] ClientAnnouncements;//[Offset: 0x248, Size: 16]
	FortClientAnnouncement*[] LocalClientAnnouncements;//[Offset: 0x258, Size: 16]
	GUID[] CancelledAnnouncements;//[Offset: 0x268, Size: 16]
	FortClientAnnouncementQueue Channels;//[Offset: 0x278, Size: 16]
	void OnRep_ClientAnnouncements(out FortClientAnnouncement*[] PreviousClientAnnouncements);// 0xcf725f0
	void OnRep_CancelledAnnouncements();// 0xcf725dc

--------------------------------
Class: FortClientAnnouncement.Actor.Object
	GUID AnnouncementID;//[Offset: 0x228, Size: 16]
	class UserWidget* DisplayWidget;//[Offset: 0x238, Size: 8]
	float TimeToLive;//[Offset: 0x240, Size: 4]
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bDestroyOnAllClientsStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	enum Channel;//[Offset: 0x246, Size: 1]
	int Priority;//[Offset: 0x248, Size: 4]
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	enum ClientDeliveryStatus;//[Offset: 0x24e, Size: 1]
	float ClientDeliveryTime;//[Offset: 0x250, Size: 4]
	MulticastInlineDelegateProperty OnUpdateAnnouncementData;//[Size: 16]
	MulticastInlineDelegateProperty OnAnnouncementStopped;//[Size: 16]
	FortPlayerController*[] RecipientControllers;//[Offset: 0x278, Size: 16]
	void StopClientAnnouncement();// 0xcf6eedc
	void OnClientAnnouncementStop();// 0xbbc0600
	void OnClientAnnouncementStart();// 0xbbc0600
	int GetPriority();// 0xcf6eea8
	void CancelClientAnnouncement();// 0xcf6ee94

--------------------------------
Class: FortClientAnnouncementQueue
	FortClientAnnouncement*[] Announcements;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PlayersLeft
	int Humans;//[Offset: 0x0, Size: 4]
	int Bots;//[Offset: 0x4, Size: 4]
	int Total;//[Offset: 0x8, Size: 4]

--------------------------------
Class: EvaluationResult
	bool bSucceeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ErrorCode;//[Offset: 0x8, Size: 16]
	FText ErrorMessage;//[Offset: 0x18, Size: 24]

--------------------------------
Class: FortScriptedActionManager.Actor.Object
	FortScriptedAction*[] ActiveScriptedActions;//[Offset: 0x228, Size: 16]
	FortAvailableScriptedAction[] AvailableScriptedActions;//[Offset: 0x238, Size: 16]
	FortAvailableScriptedAction[] PendingAvailableScriptedActions;//[Offset: 0x248, Size: 16]
	FortClientEventName[] PendingClientEvents;//[Offset: 0x258, Size: 16]
	bool bIsProcessingClientEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	void HandleClientEvent_Undefined(Object* EventSource, Object* EventFocus, out const FortClientEvent ClientEvent);// 0xd1cde18

--------------------------------
Class: FortClientEvent
	FName CategoryName;//[Offset: 0x0, Size: 8]
	FName EventName;//[Offset: 0x8, Size: 8]
	Object* EventSource;//[Offset: 0x10, Size: 8]
	Object* EventFocus;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FortAvailableScriptedAction
	FortScriptedActionParams Params;//[Offset: 0x0, Size: 48]
	FortScriptedAction* ActionDefaults;//[Offset: 0x30, Size: 8]

--------------------------------
Class: FortLobbyBeaconState.LobbyBeaconState.Info.Actor.Object
	bool bIsLobbyTimerPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	int MatchmakingLevel;//[Offset: 0x3cc, Size: 4]
	FString MissionGeneratorClassPath;//[Offset: 0x3d0, Size: 16]
	FortMissionGenerator* CachedMissionGeneratorCDO;//[Offset: 0x3e0, Size: 8]
	enum MissionGeneratorDetailsRequirement;//[Offset: 0x3e8, Size: 1]
	bool bWorldRecordLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	void OnRep_MissionGeneratorDetailsRequirement();// 0xd076100
	void OnRep_MissionGeneratorClassPath();// 0xd0760ec

--------------------------------
Class: FortMissionGenerator.PrimaryDataAsset.DataAsset.Object
	FText MissionName;//[Offset: 0x30, Size: 24]
	FText MissionDescription;//[Offset: 0x48, Size: 24]
	SlateBrush MissionIcon;//[Offset: 0x60, Size: 136]
	FortMultiSizeBrush MissionIcons;//[Offset: 0xe8, Size: 816]
	ZoneLoadingScreenConfig LoadingScreenConfig;//[Offset: 0x418, Size: 280]
	FortAthenaLTMConfig AthenaLTMConfig;//[Offset: 0x530, Size: 88]
	FortMissionInfo* PrimaryMissionInfo;//[Offset: 0x588, Size: 40]
	bool bUseNewMissionGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	GameplayTagQuery OptionalRequirementsForAllOtherMissions;//[Offset: 0x5b8, Size: 72]
	FortMissionGenerationList* MissionGenerationList;//[Offset: 0x600, Size: 40]
	float MissionGenerationChance;//[Offset: 0x628, Size: 4]
	FortPossibleMission[] SecondaryMissionList;//[Offset: 0x638, Size: 16]
	FortPossibleMission[] TertiaryMissionList;//[Offset: 0x648, Size: 16]
	FortPossibleMission[] SurvivorMissionList;//[Offset: 0x658, Size: 16]
	bool bUseOverridePlayerSpawnPadPlacementData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	FortPlayerSpawnPadPlacementData OverridePlayerSpawnPadPlacementData;//[Offset: 0x670, Size: 88]

--------------------------------
Class: ZoneLoadingScreenConfig
	Texture2D* BackgroundImage;//[Offset: 0x0, Size: 40]
	FText TitleDescription;//[Offset: 0x28, Size: 24]
	FText Title;//[Offset: 0x40, Size: 24]
	ZoneLoadingScreenHeadingConfig Headings;//[Offset: 0x58, Size: 56]
	FortTips*[] LoadingTips;//[Offset: 0x100, Size: 16]
	SoundBase* LoadingMusic;//[Offset: 0x110, Size: 8]

--------------------------------
Class: ZoneLoadingScreenHeadingConfig
	Texture2D* HeadingImage;//[Offset: 0x0, Size: 8]
	FText Heading;//[Offset: 0x8, Size: 24]
	FText HeadingDescription;//[Offset: 0x20, Size: 24]

--------------------------------
Class: FortTips.DataAsset.Object
	FText[] Tips;//[Offset: 0x30, Size: 16]
	bool OverrideTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint32 DisplayOnPlatforms;//[Offset: 0x44, Size: 4]

--------------------------------
Class: FortAthenaLTMConfig
	Texture2D* SplashImage;//[Offset: 0x0, Size: 40]
	FText FrontEndDescription;//[Offset: 0x28, Size: 24]
	FText DisabledMessage;//[Offset: 0x40, Size: 24]

--------------------------------
Class: FortMissionGenerationList.PrimaryDataAsset.DataAsset.Object
	GameplayTagQuery GameplayContextRequirements;//[Offset: 0x30, Size: 72]
	PerDifficultyMissionGenerationInfo[] PerDifficultyMissionGenerationInfos;//[Offset: 0x78, Size: 16]

--------------------------------
Class: PerDifficultyMissionGenerationInfo
	DataTableRowHandle MinDifficulty;//[Offset: 0x0, Size: 16]
	DataTableRowHandle MaxDifficulty;//[Offset: 0x10, Size: 16]
	MissionGenerationInfo[] MissionGenerationInfos;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MissionGenerationInfo
	int NumMissionsRequired;//[Offset: 0x0, Size: 4]
	int MaxMissionsAllowed;//[Offset: 0x4, Size: 4]
	int NumMissionsGeneratedMatchingRequirements;//[Offset: 0x8, Size: 4]
	GameplayTagQuery MissionTagRequirements;//[Offset: 0x10, Size: 72]

--------------------------------
Class: FortPossibleMission
	FortMissionInfo* MissionInfo;//[Offset: 0x0, Size: 40]
	float Weight;//[Offset: 0x28, Size: 4]
	int MinAlwaysGenerated;//[Offset: 0x2c, Size: 4]
	bool bIsPrototype;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: FortPlayerSpawnPadPlacementData
	EnvQuery* PlacementQuery;//[Offset: 0x0, Size: 8]
	class BuildingSMActor* ActorToPlace;//[Offset: 0x8, Size: 40]
	bool bSnapToGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bAdjustPlacementForFloors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	GameplayTagContainer TagsToAddToChosenPlacementActor;//[Offset: 0x38, Size: 32]

--------------------------------
Class: FortThreatParticleActor.Actor.Object
	void OnWorldReady();// 0xbbc0600
	void OnThreatOverrideChanged(bool bForceThreatOn);// 0xbbc0600
	void OnThreatCloudsChanged(out const ThreatLocationInfo[] ThreatLocationInfo);// 0xbbc0600
	ThreatLocationInfo[] GetThreatClouds();// 0xd1e73a4

--------------------------------
Class: Voter
	int VoteDecision;//[Offset: 0x0, Size: 4]
	int LastVoteDecision;//[Offset: 0x4, Size: 4]
	UniqueNetIdRepl NetId;//[Offset: 0x8, Size: 40]
	int NumVotesCast;//[Offset: 0x30, Size: 4]

--------------------------------
Class: FortWorldManager.Info.Actor.Object
	FortLevelStreamingInfo[] StreamedLevels;//[Offset: 0x280, Size: 16]
	FortPlacementLocationTagHandler[] PlacementLocationTagHandlers;//[Offset: 0x290, Size: 16]
	bool bSavingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	uint32 SaveFrequency_Seconds;//[Offset: 0x2a4, Size: 4]
	bool bStreamInBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bConstructTileWorld;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bUseSimMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	int NumNonAutoconstructedTiles;//[Offset: 0x2ac, Size: 4]
	DataTableRowHandle GameDifficultyRowPIEOverride;//[Offset: 0x2b0, Size: 16]
	class FortZoneTheme* ZoneThemeForPIE;//[Offset: 0x2c0, Size: 8]
	FortWindIntensityAndDirection InitialGlobalWind;//[Offset: 0x2c8, Size: 8]
	byte WorldManagerState;//[Offset: 0x2d0, Size: 1]
	WorldTileManager* TileManager;//[Offset: 0x2d8, Size: 8]
	int X_Size;//[Offset: 0x2e0, Size: 4]
	int Y_Size;//[Offset: 0x2e4, Size: 4]
	int Z_StructuralGrid_Size;//[Offset: 0x2e8, Size: 4]
	int VerticalCellNumOffsetFromOrigin;//[Offset: 0x2ec, Size: 4]
	int TileEdgeSize;//[Offset: 0x2f0, Size: 4]
	WorldTheme* Theme;//[Offset: 0x2f8, Size: 8]
	FName DefaultLootQuotaCategory;//[Offset: 0x300, Size: 8]
	FortTileLootData LootData;//[Offset: 0x308, Size: 792]
	int MaxTiles;//[Offset: 0x620, Size: 4]
	bool bUseFixedSeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	int FixedSeed;//[Offset: 0x628, Size: 4]
	WorldTileSubArray[] Y;//[Offset: 0x630, Size: 16]
	Vector FriendlyPlayerSpawnExtent;//[Offset: 0x640, Size: 12]
	Vector PadPlayerSpawnExtent;//[Offset: 0x64c, Size: 12]
	float DangerPlayerSpawnExclusionRadius;//[Offset: 0x658, Size: 4]
	float ObjectivePlayerSpawnExclusionRadius;//[Offset: 0x65c, Size: 4]
	GameplayTagContainer OverrideInitialPlayerSpawnTags;//[Offset: 0x660, Size: 32]
	GameplayTagContainer OverrideBackupPlayerSpawnTags;//[Offset: 0x680, Size: 32]
	FortStartingMissionInfo StartingMissionInfo;//[Offset: 0x6a0, Size: 24]
	FortWorldRecord* CurrentWorldRecord;//[Offset: 0x6b8, Size: 8]
	FortZoneRecord* CurrentZoneRecord;//[Offset: 0x6c0, Size: 8]
	FortUserCloudHelperComponent* CloudHelper;//[Offset: 0x6e8, Size: 8]
	int CurrentZoneIndex;//[Offset: 0x6f0, Size: 4]
	bool bHasCreatedMissions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 1]
	bool bHasCreatedPrimaryAdditionalFoundations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 1]
	bool bHasSpawnedActorsForMissions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f6, Size: 1]
	bool bZoneCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f7, Size: 1]
	bool bZoneFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	bool bCreatedMissionRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	FortMissionManagerRecord MissionManagerRecord;//[Offset: 0x700, Size: 56]
	FortMissionEntry[] ReactiveMissionsToAdd;//[Offset: 0x738, Size: 16]
	FortDeferredNewActorData[] DeferredActors;//[Offset: 0x748, Size: 16]
	int FinalNumChosenBuildingFoundations;//[Offset: 0x868, Size: 4]
	BuildingFoundation*[] ChosenBuildingFoundations;//[Offset: 0x870, Size: 16]
	int MaxConsecutiveFails;//[Offset: 0x880, Size: 4]
	bool bClearOutpostMapStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	FortPlayerEarnedItemCaches[] UnsavedPlayerEarnedItemCaches;//[Offset: 0x890, Size: 16]
	void OnRep_InitialGlobalWind();// 0xd22d920

--------------------------------
Class: FortLevelStreamingInfo
	FName PackageName;//[Offset: 0x0, Size: 8]
	byte LevelState;//[Offset: 0x8, Size: 1]
	bool bFailedToLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: FortPlacementLocationTagHandler
	BuildingActor* SpawnLocationBuildingActor;//[Offset: 0x0, Size: 8]
	Actor* SpawnedActor;//[Offset: 0x8, Size: 8]
	GameplayTagContainer TagsToRemove;//[Offset: 0x10, Size: 32]

--------------------------------
Class: FortZoneTheme.PrimaryDataAsset.DataAsset.Object
	class FortTheaterMapTile* TheaterMapTileClass;//[Offset: 0x30, Size: 40]
	World* ZoneToUse;//[Offset: 0x58, Size: 40]
	FText ZoneName;//[Offset: 0x80, Size: 24]
	FText ZoneDescription;//[Offset: 0x98, Size: 24]
	FText AbundantResources;//[Offset: 0xb0, Size: 24]
	enum ZoneType;//[Offset: 0xc8, Size: 1]
	class FortGameMode* ZoneGameMode;//[Offset: 0xd0, Size: 40]
	GameplayTagContainer ZoneTags;//[Offset: 0xf8, Size: 32]
	class FortLobbyBeaconHost* LobbyBeaconHostClass;//[Offset: 0x118, Size: 40]
	FortCloudSaveItemDefinition* CloudSaveItemDefinition;//[Offset: 0x140, Size: 40]
	int ZoneIndex;//[Offset: 0x168, Size: 4]
	int PlaylistId;//[Offset: 0x16c, Size: 4]
	int TeamSize;//[Offset: 0x170, Size: 4]
	int TeamCount;//[Offset: 0x174, Size: 4]
	int MaxPartySize;//[Offset: 0x178, Size: 4]
	int MaxPlayers;//[Offset: 0x17c, Size: 4]
	float CriticalMissionEligibilityLength;//[Offset: 0x180, Size: 4]
	float CriticalMissionEligibilityGracePeriodLength;//[Offset: 0x184, Size: 4]
	DeployableBaseSupportSettings DeployableBaseSettings;//[Offset: 0x188, Size: 152]
	bool IgnoreGeneratedRewards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	class BuildingSMActor* PlayerSpawnPadClass;//[Offset: 0x228, Size: 40]
	GameplayTagContainer InitialPlayerSpawnTags;//[Offset: 0x250, Size: 32]
	GameplayTagContainer BackupPlayerSpawnTags;//[Offset: 0x270, Size: 32]
	bool bOverrideConningText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	FText ConningOverrideText;//[Offset: 0x298, Size: 24]
	class FortMusicManager* MusicManagerClass;//[Offset: 0x2b0, Size: 40]
	FortMusicManagerBank* MusicManagerBank;//[Offset: 0x2d8, Size: 8]
	Texture2D* BackgroundImage;//[Offset: 0x2e0, Size: 40]
	ZoneThemeDifficultyProperties[] DifficultyProperties;//[Offset: 0x308, Size: 16]

--------------------------------
Class: FortTheaterMapTile.FortClientOnlyActor.Actor.Object
	bool bFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	bool bHostSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 1]
	bool bGoToPromptEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 1]
	FortHexMapCoord MapCoord;//[Offset: 0x224, Size: 12]
	bool bHasFinishedLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	enum TileType;//[Offset: 0x240, Size: 1]
	class FortZoneTheme* ZoneThemeClass;//[Offset: 0x248, Size: 8]
	int TileIndex;//[Offset: 0x250, Size: 4]
	int RegionIndex;//[Offset: 0x254, Size: 4]
	Vector SelectionOffset;//[Offset: 0x258, Size: 12]
	Vector FocusOffset;//[Offset: 0x264, Size: 12]
	float SelectionInterpSpeed;//[Offset: 0x270, Size: 4]
	float NormalBrightness;//[Offset: 0x274, Size: 4]
	float LockedBrightness;//[Offset: 0x278, Size: 4]
	float FocusedBrightness;//[Offset: 0x27c, Size: 4]
	float SelectedBrightnessRange;//[Offset: 0x280, Size: 4]
	float SelectedPulseSpeed;//[Offset: 0x284, Size: 4]
	bool bEnableBrightnessCode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bDisallowQuickplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	float StaticMeshMaterialID;//[Offset: 0x28c, Size: 4]
	Vector InitialLocation;//[Offset: 0x290, Size: 12]
	FortAvailableMissionData MissionData;//[Offset: 0x2a0, Size: 168]
	FortAvailableMissionData LastValidMissionData;//[Offset: 0x348, Size: 168]
	DataTableRowHandle ZoneDifficultyInfo;//[Offset: 0x3f0, Size: 16]
	FortAvailableMissionAlertData MissionAlertData;//[Offset: 0x400, Size: 152]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x498, Size: 8]
	MaterialInstanceDynamic*[] AdjacencyMIDs;//[Offset: 0x4a0, Size: 16]
	void RefreshTile();// 0xbbc0600
	void OnTileClicked(Actor* ClickedActor, Key ButtonReleased);// 0xd1e5a28
	void OnSelectWrapper(bool bIsGameSessionOwner);// 0xd1e5970
	void OnProfileBannerChanged();// 0xbbc0600
	void OnMouseOverEnd(Actor* MousedOverActor);// 0xd1e58c8
	void OnMouseOverBegin(Actor* MousedOverActor);// 0xd1e5820
	void OnMissionDataUpdated();// 0xbbc0600
	void OnMarkedQuestChanged();// 0xbbc0600
	void OnInitializeTile();// 0xbbc0600
	void OnHostSelect();// 0xbbc0600
	void OnHostDeselect();// 0xbbc0600
	void OnFocus();// 0xbbc0600
	void OnEnableGoToPrompt();// 0xbbc0600
	void OnDisableGoToPrompt();// 0xbbc0600
	void OnDeselectWrapper(bool bIsGameSessionOwner);// 0xd1e5768
	void OnDefocus();// 0xbbc0600
	void OnClientSelect();// 0xbbc0600
	void OnClientDeselect();// 0xbbc0600
	bool IsTileValidForMarkedQuest(out FortQuestItem* OutMarkedQuest);// 0xd1e56a8
	bool IsTileSelectable();// 0xd1e5670
	bool IsTileQuestRecommended();// 0xd1e5638
	bool IsTilePlayable();// 0xd1e5600
	bool IsTileLocked();// 0xd1e55c8
	bool IsTileInPhoenixTheater();// 0xd1e5590
	bool IsTileHidden();// 0xd1e5558
	bool IsTeamRatingDataValid();// 0xd1e5520
	bool IsMissionAlertTile();// 0xd1e54e8
	bool HasValidMissionData();// 0xd1e54b0
	GameDifficultyInfo GetZoneDifficulty();// 0xd1e5318
	bool GetMissionDefinitionIcon(out SlateBrush OutMissionDefIcon);// 0xd1e5138
	int GetMissionContentDifficultyLevel();// 0xd1e5104
	GameplayTagContainer GetMissionAlertVisualTags();// 0xd1e5084
	FName GetMissionAlertCategoryName();// 0xd1e5050
	bool DoesTileAllowQuickplay();// 0xd1e5018

--------------------------------
Class: FortHexMapCoord
	int Horizontal;//[Offset: 0x0, Size: 4]
	int Vertical;//[Offset: 0x4, Size: 4]
	int Depth;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortQuestItem.FortAccountItem.FortPersistableItem.FortItem.Object
	FortQuestObjectiveInfo*[] Objectives;//[Offset: 0xf0, Size: 16]
	int LastNotifiedQuestCount;//[Offset: 0x100, Size: 4]
	enum quest_state;//[Offset: 0x104, Size: 1]
	bool sent_new_notification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	DateTime last_state_change_time;//[Offset: 0x108, Size: 8]
	enum quest_rarity;//[Offset: 0x110, Size: 1]
	CompletionCountEntry[] CompletionCounts;//[Offset: 0x118, Size: 16]
	bool bSentCompleteNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bAllObjectivesComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool bIsManuallyGrantedQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	bool bHasRegisteredWithQuestManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	FString twitch_broadcaster_channel_id;//[Offset: 0x130, Size: 16]
	int CurrentStage;//[Offset: 0x140, Size: 4]
	DateTime expiry_time;//[Offset: 0x148, Size: 8]
	FString quest_pool;//[Offset: 0x150, Size: 16]
	float xp_reward_scalar;//[Offset: 0x160, Size: 4]
	FortMissionInstancedConfigData InstancedConfigData;//[Offset: 0x168, Size: 16]
	FString challenge_linked_quest_given;//[Offset: 0x178, Size: 16]
	FString challenge_linked_quest_parent;//[Offset: 0x188, Size: 16]
	FString challenge_bundle_id;//[Offset: 0x198, Size: 16]
	int PlayerLevel;//[Offset: 0x1a8, Size: 4]
	bool ShouldDisplayOverallQuestInformation();// 0xd1b0594
	void PlayIntroConversation(class FortClientAnnouncement_Conversation QuestConversationClass);// 0xd1b04ec
	bool IsVisibleToUser(bool bAllowClaimedQuestsToBeVisible);// 0xd1b0430
	bool IsQuestPinned();// 0xd1b03f8
	bool IsQuestInProgress();// 0xd1b03c0
	bool IsObjectiveWithNameInProgress(FName BackendName);// 0xd1b030c
	bool IsObjectiveInProgress(DataTableRowHandle ObjectiveStatHandle);// 0xd1b0258
	bool IsIncludedInCategories();// 0xd1b0220
	bool HasVisibleRewards();// 0xd1b01e8
	bool HasQuestExpired(DateTime UtcNow);// 0xd1b0138
	bool HasCompletedQuest();// 0xd1b0100
	bool HasCompletedObjectiveWithName(FName BackendName);// 0xd1b004c
	bool HasCompletedObjective(DataTableRowHandle ObjectiveStatHandle);// 0xd1aff98
	bool HasCompletedAllObjectives(const bool bCheckForTurnInObjective);// 0xd1afedc
	int GetXpRewardValue(const FortItemDefinition* XpItemDef);// 0xd1afe2c
	float GetXpRewardScalar();// 0xd1afe10
	FString GetTwitchBroadcasterChannelId();// 0xd1afd70
	FortRewardInfo GetRewardInfo();// 0xd1afc88
	Timespan GetRemainingExpirationDuration(DateTime UtcNow);// 0xd1afbdc
	enum GetQuestState();// 0xd1afbc0
	FString GetQuestPool();// 0xd1afaec
	FortQuestItemDefinition* GetQuestDefinitionBP();// 0xd1afad0
	FortItemInstanceQuantityPair[] GetPreviewSelectableRewards(int RewardIndex);// 0xd1af9e4
	FortItemInstanceQuantityPair[] GetPreviewRewards();// 0xd1af944
	FortItemInstanceQuantityPair[] GetPreviewAllSelectableRewards();// 0xd1af8a4
	float GetPercentageComplete(const FortQuestItemDefinition* KnownQuestDef);// 0xd1af7f4
	FortQuestObjectiveInfo* GetObjectiveInfo(DataTableRowHandle ObjectiveStatHandle);// 0xd1af744
	int GetNumObjectivesComplete();// 0xd1af710
	FortMissionConfigData* GetMissionConfigData(GameplayTag InBucketTag);// 0xd1af660
	FortRewardInfo GetChallengeChainRewardInfo(bool bGetCurrentChainQuestOnly);// 0xd1af524
	FString GetChallengeBundleId();// 0xd1af484
	DateTime GetBroadcasterGrantWindowEnd();// 0xd1af450
	int GetBarsRewardValue();// 0xd1af41c
	void GetAchievedCount(out int OutTotalAchievedCount, out int OutTotalRequiredCount, out int OutLastKnownAchievedCount, bool UseLastKnownMcp);// 0xd1af274
	bool DoesQuestExpire();// 0xd1af23c
	bool CanPinQuest();// 0xd1af204

--------------------------------
Class: FortClientAnnouncement_Conversation.FortClientAnnouncement.Actor.Object
	FortClientAnnouncementData_Conversation ConversationData;//[Offset: 0x2a0, Size: 16]
	MulticastInlineDelegateProperty OnConversationStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnConversationStopped;//[Size: 16]
	AudioComponent* SpeechComponent;//[Offset: 0x2d0, Size: 8]
	bool bAutoPlayConversation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bCurrentlyPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	int CurrentSentenceIndex;//[Offset: 0x2dc, Size: 4]
	void CurrentSentenceAudioTimeout();// 0xcf703d0
	void CurrentSentenceAudioFinished();// 0xcf703bc
	void AssetLoadTimeout();// 0xcf703a8

--------------------------------
Class: FortClientAnnouncementData_Conversation.FortClientAnnouncementData
	FortConversation* Conversation;//[Offset: 0x0, Size: 8]
	enum ConversationDisplayPreference;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FortClientAnnouncementData

--------------------------------
Class: FortRewardInfo
	FortSelectableRewardOption[] SelectableRewards;//[Offset: 0x0, Size: 16]
	FortItemQuantityPair[] StandardRewards;//[Offset: 0x10, Size: 16]
	FortHiddenRewardQuantityPair[] HiddenRewards;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortSelectableRewardOption
	FortItemQuantityPair[] Rewards;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortItemInstanceQuantityPair
	FortItem* Item;//[Offset: 0x0, Size: 8]
	byte InventoryType;//[Offset: 0x8, Size: 1]
	int Quantity;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortQuestObjectiveInfo.Object
	FName BackendName;//[Offset: 0x28, Size: 8]
	enum StatEvent;//[Offset: 0x30, Size: 1]
	enum ItemEvent;//[Offset: 0x31, Size: 1]
	FortItemDefinition* ItemReference;//[Offset: 0x38, Size: 40]
	FText Description;//[Offset: 0x60, Size: 24]
	FText HudShortDescription;//[Offset: 0x78, Size: 24]
	Texture2D* HudIcon;//[Offset: 0x90, Size: 8]
	int AchievedCount;//[Offset: 0x98, Size: 4]
	int RequiredCount;//[Offset: 0x9c, Size: 4]
	int LastNotifiedCount;//[Offset: 0xa0, Size: 4]
	int LastKnownMCPCount;//[Offset: 0xa4, Size: 4]
	FortPlayerState* QuestOwner;//[Offset: 0xa8, Size: 8]
	FortPlayerState* AssistPlayerState;//[Offset: 0xb0, Size: 8]
	bool bIsHelper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 1]
	bool IsVisibleToUser();// 0xd1b7c78
	bool IsInProgress();// 0xd1b7c40
	bool IsActive();// 0xd1b7c08
	bool HasCompleted();// 0xd1b7bd0
	FortQuestItem* GetOwningQuest();// 0xd1b7b9c
	void DisplayDynamicQuestUpdate();// 0xd1b7b88

--------------------------------
Class: CompletionCountEntry

--------------------------------
Class: FortMissionInstancedConfigData
	FortMissionInstancedConfigDataBucket[] ConfigDataBuckets;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortMissionInstancedConfigDataBucket
	GameplayTag Tag;//[Offset: 0x0, Size: 8]
	FortMissionConfigData* ConfigData;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortMissionConfigData.Object

--------------------------------
Class: GameDifficultyInfo.TableRowBase
	bool bIsOnboarding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float Difficulty;//[Offset: 0xc, Size: 4]
	float DifficultyMatchmakingMinOverride;//[Offset: 0x10, Size: 4]
	float DifficultyMatchmakingMaxOverride;//[Offset: 0x14, Size: 4]
	int LootLevel;//[Offset: 0x18, Size: 4]
	enum RatingsEnforcement;//[Offset: 0x1c, Size: 1]
	int RequiredRating;//[Offset: 0x20, Size: 4]
	int MaximumRating;//[Offset: 0x24, Size: 4]
	int PvPRating;//[Offset: 0x28, Size: 4]
	int RecommendedRating;//[Offset: 0x2c, Size: 4]
	float ScoreBonus;//[Offset: 0x30, Size: 4]
	FString LootTierGroup;//[Offset: 0x38, Size: 16]
	FString BonusLootTierGroup;//[Offset: 0x48, Size: 16]
	FString DifficultyIncreaseLootTierGroup;//[Offset: 0x58, Size: 16]
	int NumDifficultyIncreases;//[Offset: 0x68, Size: 4]
	FText ThreatDisplayName;//[Offset: 0x70, Size: 24]
	FName ColorParamName;//[Offset: 0x88, Size: 8]
	int DefaultPlayerLives;//[Offset: 0x90, Size: 4]
	FName PlayerStatClampRowName;//[Offset: 0x94, Size: 8]

--------------------------------
Class: TableRowBase

--------------------------------
Class: FortAvailableMissionData
	FString MissionGuid;//[Offset: 0x0, Size: 16]
	McpLootResult MissionRewards;//[Offset: 0x10, Size: 32]
	McpLootResult BonusMissionRewards;//[Offset: 0x30, Size: 32]
	class FortMissionGenerator* MissionGenerator;//[Offset: 0x50, Size: 40]
	DataTableRowHandle MissionDifficultyInfo;//[Offset: 0x78, Size: 16]
	int TileIndex;//[Offset: 0x88, Size: 4]
	DateTime AvailableUntil;//[Offset: 0x90, Size: 8]
	FortItemDefinition*[] ItemDefinitionRefCache;//[Offset: 0x98, Size: 16]

--------------------------------
Class: McpLootResult
	FString TierGroupName;//[Offset: 0x0, Size: 16]
	McpLootEntry[] Items;//[Offset: 0x10, Size: 16]

--------------------------------
Class: McpLootEntry
	FString ItemType;//[Offset: 0x0, Size: 16]
	FString ItemGuid;//[Offset: 0x10, Size: 16]
	int Quantity;//[Offset: 0x20, Size: 4]
	JsonObjectWrapper Attributes;//[Offset: 0x28, Size: 32]
	FString ItemProfile;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortAvailableMissionAlertData
	FString CategoryName;//[Offset: 0x0, Size: 16]
	FString SpreadDataName;//[Offset: 0x10, Size: 16]
	FString MissionAlertGuid;//[Offset: 0x20, Size: 16]
	int TileIndex;//[Offset: 0x30, Size: 4]
	DateTime AvailableUntil;//[Offset: 0x38, Size: 8]
	DateTime RefreshSpreadAt;//[Offset: 0x40, Size: 8]
	McpLootResult MissionAlertRewards;//[Offset: 0x48, Size: 32]
	McpLootResult MissionAlertModifiers;//[Offset: 0x68, Size: 32]
	FortItemDefinition*[] ItemDefinitionRefCache;//[Offset: 0x88, Size: 16]

--------------------------------
Class: FortCloudSaveItemDefinition.FortMetadataItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	int ContentVersion;//[Offset: 0x350, Size: 4]

--------------------------------
Class: FortMetadataItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	int MinLevel;//[Offset: 0x348, Size: 4]
	int MaxLevel;//[Offset: 0x34c, Size: 4]

--------------------------------
Class: DeployableBaseSupportSettings
	bool bUseDeployableBases;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FortDeployableBaseCloudSaveItemDefinition* DeployableBaseCloudSaveItemDef;//[Offset: 0x8, Size: 40]
	class DeployableBasePlot* DeployableBasePlot;//[Offset: 0x30, Size: 40]
	FortDeployableBaseSkillTreeUnlocks* SupportedUnlocks;//[Offset: 0x58, Size: 40]
	bool bDeployableBasesReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	enum SupportedUseType;//[Offset: 0x81, Size: 1]
	FortTieredCollectionLayout*[] TieredCollectionLayouts;//[Offset: 0x88, Size: 16]

--------------------------------
Class: FortDeployableBaseCloudSaveItemDefinition.FortCloudSaveItemDefinition.FortMetadataItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	GUID SaveFilenameGUID;//[Offset: 0x354, Size: 16]

--------------------------------
Class: DeployableBasePlot.BuildingGameplayActor.BuildingActor.Actor.Object
	UniqueNetIdRepl OccupantNetID;//[Offset: 0x7e8, Size: 40]
	FortCloudSaveInfo OccupantNextCloudSaveInfo;//[Offset: 0x810, Size: 24]
	FortDeployableBaseRecord* OccupantDeployableBaseRecord;//[Offset: 0x828, Size: 8]
	BoxComponent* BuildableSpaceComponent;//[Offset: 0x830, Size: 8]
	BoxComponent* SavableSpaceComponent;//[Offset: 0x838, Size: 8]
	BoxComponent* EntirePlotSpaceComponent;//[Offset: 0x840, Size: 8]
	SceneComponent* SpawnOffsetComponent;//[Offset: 0x848, Size: 8]
	BoxComponent* BuildableAreasArray;//[Offset: 0x850, Size: 8]
	class DeployableBaseCore* DeployableBaseCoreClass;//[Offset: 0x868, Size: 40]
	DeployableBaseCore* DeployableBaseCore;//[Offset: 0x890, Size: 8]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 1]
	bool bDirtiedSinceLastWriteToBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x898, Size: 1]
	bool bCloudFileSavedSinceLastCloudItemUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x898, Size: 1]
	enum CurrentBuildingState;//[Offset: 0x899, Size: 1]
	enum GoalBuildingState;//[Offset: 0x89a, Size: 1]
	MulticastInlineDelegateProperty OnOccupantIdChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnDeployableBaseCoreCreated;//[Size: 16]
	MulticastInlineDelegateProperty OnDeployableBaseCoreDestroyed;//[Size: 16]
	MulticastInlineDelegateProperty OnDeployableBasePlotSpacesChanged;//[Size: 16]
	FortDeployableBasePickup*[] OutstandingAssociatedPickups;//[Offset: 0x8f0, Size: 16]
	FortInventory* PlotInventory;//[Offset: 0x900, Size: 8]
	int DeferredActorIdxToResumeAt;//[Offset: 0x920, Size: 4]
	int NumActorsFromRecordDestroyed;//[Offset: 0x924, Size: 4]
	IntVector BuildableSpaceExpansionVector;//[Offset: 0x928, Size: 12]
	int MaxActorsToCreatePerBuildingCall;//[Offset: 0x934, Size: 4]
	int MaxActorsToDestroyPerDestroyCall;//[Offset: 0x938, Size: 4]
	float DelayBetweenActorRecordBuilding;//[Offset: 0x93c, Size: 4]
	float DelayBetweenActorRecordDestroying;//[Offset: 0x940, Size: 4]
	FortPlayerStart* PlayerStart;//[Offset: 0x948, Size: 8]
	class GameplayEffect* ConstructionTimeEffect;//[Offset: 0x950, Size: 8]
	DeferredActorData[] DeferredConstructionActors;//[Offset: 0x958, Size: 16]
	Box BuildableAreasStructuralSupportBoxesArray;//[Offset: 0x970, Size: 28]
	void SetContextComponent(PrimitiveComponent* ContextComponent);// 0xce8f128
	void OnRep_OccupantNetID();// 0xce8f114
	void OnRep_CurrentBuildingState();// 0xce8f100
	void OnRep_BuildableSpaceExpansionVector();// 0xce8f0ec
	void OnCurrentBuildingStateSet(enum InCurrentBuildingState);// 0xce8f03c
	void OnBuildingStateTransition(enum InPreviousState, enum InCurrentState);// 0xce8ef4c
	bool IsOccupied();// 0xce8ef14
	bool IsOccupant(out const UniqueNetIdRepl UserId);// 0xce8edc0
	bool IsBuildingActorWithinBuildableSpace(const BuildingActor* ActorToCheck, out const Vector GridLocation);// 0xce8ecc4
	void HandleBuildingStateTransition(enum InPreviousState, enum InCurrentState);// 0xce8ebd4
	FortPlayerStart* GetPlayerStart();// 0xce8ebb8
	UniqueNetIdRepl GetOccupantNetID();// 0xce8ea84
	int GetNumOfItemsInPlot();// 0xce8ea50

--------------------------------
Class: FortCloudSaveInfo
	int SaveCount;//[Offset: 0x0, Size: 4]
	FortCloudSaveRecordInfo[] SavedRecords;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortCloudSaveRecordInfo
	int RecordIndex;//[Offset: 0x0, Size: 4]
	int ArchiveNumber;//[Offset: 0x4, Size: 4]
	FString RecordFilename;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortDeployableBaseRecord.FortGenericRecord.Object
	FortActorRecord[] Actors;//[Offset: 0xf0, Size: 16]
	bool bNeedsFullActorSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]

--------------------------------
Class: FortGenericRecord.Object

--------------------------------
Class: FortActorRecord
	GUID ActorGuid;//[Offset: 0x0, Size: 16]
	byte ActorState;//[Offset: 0x10, Size: 1]
	class BuildingActor* ActorClass;//[Offset: 0x18, Size: 8]
	Transform ActorTransform;//[Offset: 0x20, Size: 48]
	bool bSpawnedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	byte[] ActorData;//[Offset: 0x58, Size: 16]

--------------------------------
Class: DeployableBaseCore.BuildingGameplayActor.BuildingActor.Actor.Object
	DeployableBasePlot* Plot;//[Offset: 0x7e0, Size: 8]
	ParticleSystem* SimpleDeathParticles;//[Offset: 0x7e8, Size: 40]
	SoundBase* SimpleDeathSound;//[Offset: 0x810, Size: 40]
	bool bRegisterAsGlobalGameplayEventListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x838, Size: 1]
	Transform GetSimpleDeathFXTransform();// 0xce8f230

--------------------------------
Class: FortDeployableBasePickup.FortPickup.Actor.Object
	UniqueNetIdRepl AssociatedPlotOccupant;//[Offset: 0x638, Size: 40]

--------------------------------
Class: FortPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	Controller* ClaimingController;//[Offset: 0x250, Size: 8]
	float ExpirationCheckInterval;//[Offset: 0x258, Size: 4]
	ParticleSystemComponent* StartParticleComponent;//[Offset: 0x260, Size: 8]
	GameplayTagContainer StartPointTags;//[Offset: 0x268, Size: 32]

--------------------------------
Class: DeferredActorData
	BuildingActor* BuildingActor;//[Offset: 0x0, Size: 8]
	int ActorRecordIndex;//[Offset: 0x8, Size: 4]
	Transform BuildingTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: FortDeployableBaseSkillTreeUnlocks.DataAsset.Object
	FortTaggedDeployableBasePlotExpansionUnlock[] PlotSizeUnlocks;//[Offset: 0x30, Size: 16]
	FortTaggedDeployableBaseLootUnlock[] NeighborhoodLootGrantUnlocks;//[Offset: 0x40, Size: 16]
	FortTaggedDeployableBaseLootUnlock[] CombatZoneStartLootGrantUnlocks;//[Offset: 0x50, Size: 16]
	FortTaggedDeployableBaseLootUnlock[] CombatZoneWaveCompleteLootGrantUnlocks;//[Offset: 0x60, Size: 16]

--------------------------------
Class: FortTaggedDeployableBasePlotExpansionUnlock.FortTaggedUnlockBase
	IntVector CellExpansionVector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: FortTaggedUnlockBase
	GameplayTag RequiredTag;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortTaggedDeployableBaseLootUnlock.FortTaggedUnlockBase
	FName LootTierGroup;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortTieredCollectionLayout.DataAsset.Object
	bool bUseTierAsRandomSeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bFiniteTiers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	int MaxNumberOfTiersAllowed;//[Offset: 0x34, Size: 4]
	int InitialTierUnlocked;//[Offset: 0x38, Size: 4]
	TieredNamedCollectionProgressionData SpawnWaveProgressions;//[Offset: 0x40, Size: 24]
	DifficultyCollectionProgressionData DifficultyProgressions;//[Offset: 0x58, Size: 24]
	TieredNamedCollectionProgressionData ModifierProgressions;//[Offset: 0x70, Size: 24]
	RewardBadgesCollectionProgressionData RewardBadgesProgression;//[Offset: 0x88, Size: 24]
	CollectionLootSetData LootSetProgression;//[Offset: 0xa0, Size: 24]
	FText CollectionLayoutDisplayName;//[Offset: 0xb8, Size: 24]
	FortTieredCollectionLayout* PrerequisiteLayout;//[Offset: 0xd0, Size: 40]
	CurveTableRowHandle TierToMissionPointLookupTable;//[Offset: 0xf8, Size: 16]
	GUID LayoutGUID;//[Offset: 0x108, Size: 16]
	bool ShouldUseTierAsRandomSeed();// 0xd1e7fbc
	int GetMissionPointsForTier(int Tier);// 0xd1e7f0c
	FText GetCollectionLayoutDisplayName();// 0xd1e7e3c

--------------------------------
Class: TieredNamedCollectionProgressionData.TieredCollectionProgressionDataBase
	FName[] CollectionNames;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TieredCollectionProgressionDataBase
	enum SelectionMethod;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DifficultyCollectionProgressionData.TieredCollectionProgressionDataBase
	DifficultyRowProgression[] DifficultyCollections;//[Offset: 0x8, Size: 16]

--------------------------------
Class: DifficultyRowProgression
	FName DifficultyRowName;//[Offset: 0x0, Size: 8]
	ScalableFloat AdditiveDifficultyMod;//[Offset: 0x8, Size: 40]

--------------------------------
Class: RewardBadgesCollectionProgressionData.TieredCollectionProgressionDataBase
	RewardBadgesProgression[] BadgeCollections;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RewardBadgesProgression
	FortBadgeItemDefinition*[] RewardBadges;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CollectionLootSetData.TieredCollectionProgressionDataBase
	FName[] LootSetNames;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortMusicManager.Actor.Object
	FortPlayerController* ControllerOwner;//[Offset: 0x228, Size: 8]
	FortMusicVoice* Voices;//[Offset: 0x230, Size: 8]
	FortMusicVoice*[] VoicesToCleanUp;//[Offset: 0x240, Size: 16]
	bool bWorldReadyCalled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 1]
	FortMusicManagerBank* MusicBank;//[Offset: 0x270, Size: 8]
	void StopPrimaryMusic(bool bPlayOutro);// 0xd0e8c90
	void StopMusicVoice(FortMusicVoice* Voice);// 0xd0e8be8
	void SetPrimaryMusicVolume(float InVolumeMultiplier);// 0xd0e8b40
	void SetMusicBank(FortMusicManagerBank* Bank);// 0xd0e8a98
	void PlayStinger(FortMusicAsset* NewMusicAsset);// 0xd0e89e8
	FortMusicVoice* PlayMusicVoice(FortMusicAsset* Asset);// 0xd0e8938
	void OnVoiceFinished(FortMusicVoice* Voice);// 0xd0e8890
	void OnThresholdChange(byte OldThreshold, byte NewThreshold);// 0xbbc0600
	void OnPlayerSpawned();// 0xbbc0600
	void OnPlayerDowned(out const FortPlayerDeathReport DeathReport);// 0xbbc0600
	void OnMusicBankChanged(FortMusicManagerBank* NewBank);// 0xbbc0600
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	float GetPrimaryMusicVolume();// 0xd0e885c
	FortMusicManagerBank* GetMusicBank();// 0xd0e8828
	float GetEventHeatPercentTotal(byte CombatEvent);// 0xd0e8770
	float GetEventHeatPercent(byte CombatEvent);// 0xd0e86b8
	FortMusicVoice* ChangePrimaryMusic(FortMusicAsset* NewMusicAsset, bool bPlayStinger);// 0xd0e85c0

--------------------------------
Class: FortMusicVoice.Object
	MulticastInlineDelegateProperty OnVoiceStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnVoiceFinished;//[Size: 16]

--------------------------------
Class: FortMusicManagerBank.DataAsset.Object
	FortMusicTimeOfDayBank* TimeOfDayBank;//[Offset: 0x30, Size: 8]
	FortMusicCombatBank* CombatBank;//[Offset: 0x38, Size: 8]

--------------------------------
Class: FortMusicTimeOfDayBank.DataAsset.Object
	FortMusicAsset* Assets;//[Offset: 0x30, Size: 8]
	FortMusicAsset* GetAssetFromDayPhase(byte DayPhase);// 0xd0e8d64

--------------------------------
Class: FortMusicAsset.PrimaryDataAsset.DataAsset.Object
	FortMusicSection Sections;//[Offset: 0x30, Size: 24]
	float Priority;//[Offset: 0x78, Size: 4]
	enum StopBehavior;//[Offset: 0x7c, Size: 1]
	bool bIsStinger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	FortMusicSection GetMusicSection(byte Section);// 0xd0e7ce8

--------------------------------
Class: FortMusicSection
	SoundBase* Sound;//[Offset: 0x0, Size: 8]
	float FadeInTime;//[Offset: 0x8, Size: 4]
	float FadeOutTime;//[Offset: 0xc, Size: 4]
	float InitialOffset;//[Offset: 0x10, Size: 4]
	float Duration;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortMusicCombatBank.DataAsset.Object
	FortMusicAsset* Assets;//[Offset: 0x30, Size: 8]
	FortMusicAsset* GetAssetFromCombatIntensity(byte Intensity);// 0xd0e7e04

--------------------------------
Class: ZoneThemeDifficultyProperties
	DataTableRowHandle[] ValidDifficulties;//[Offset: 0x0, Size: 16]
	FortTimeOfDayTheme TimeOfDayTheme;//[Offset: 0x10, Size: 64]
	FortGlobalWindInfo GlobalWindInfo;//[Offset: 0x50, Size: 24]

--------------------------------
Class: FortTimeOfDayTheme
	FortTimeOfDayCollection*[] TimeOfDayCollections;//[Offset: 0x0, Size: 16]
	class FortTimeOfDayManager[] AdditionalTimeOfDayManagers;//[Offset: 0x10, Size: 16]
	class FortTimeOfDayManager[] ProhibitedTimeOfDayManagers;//[Offset: 0x20, Size: 16]
	class FortTimeOfDayManager[] ValidTimeOfDayManagers;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortTimeOfDayCollection.DataAsset.Object
	class FortTimeOfDayManager[] TimeOfDayManagers;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortGlobalWindInfo
	FortWindIntensityAndDirection[] ValidWindInfos;//[Offset: 0x0, Size: 16]
	int WindIndex;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortWindIntensityAndDirection
	float WindIntensity;//[Offset: 0x0, Size: 4]
	float WindHeading;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WorldTileManager.Object
	FortWorldManager* WorldManager;//[Offset: 0x28, Size: 8]

--------------------------------
Class: WorldTheme.DataAsset.Object
	TileGroupSelection[] TileGroups;//[Offset: 0x30, Size: 16]
	WorldTileGroup* FillerTileGroup;//[Offset: 0x40, Size: 8]
	int MaxCircuitSize;//[Offset: 0x48, Size: 4]
	World* BorderWorld_I;//[Offset: 0x50, Size: 40]
	World* BorderWorld_IO;//[Offset: 0x78, Size: 40]
	World* BorderWorld_O;//[Offset: 0xa0, Size: 40]
	World* BorderWorld_OO;//[Offset: 0xc8, Size: 40]
	World* BorderWorld_OOO;//[Offset: 0xf0, Size: 40]
	World* BorderWorld_OOOO;//[Offset: 0x118, Size: 40]
	World* BorderWorld_S;//[Offset: 0x140, Size: 40]
	World* BorderWorld_SS;//[Offset: 0x168, Size: 40]
	World* BorderWorld_OS;//[Offset: 0x190, Size: 40]
	World* BorderWorld_SO;//[Offset: 0x1b8, Size: 40]
	World* BorderWorld_SOO;//[Offset: 0x1e0, Size: 40]
	World* BorderWorld_U;//[Offset: 0x208, Size: 40]
	World* BorderWorld_R;//[Offset: 0x230, Size: 40]

--------------------------------
Class: TileGroupSelection
	TileGroupInfo[] TileGroupOptions;//[Offset: 0x0, Size: 16]

--------------------------------
Class: TileGroupInfo
	WorldTileGroup* TileGroup;//[Offset: 0x0, Size: 8]
	int Weight;//[Offset: 0x8, Size: 4]
	int MinTiles;//[Offset: 0xc, Size: 4]
	int MaxTiles;//[Offset: 0x10, Size: 4]
	bool bPlaceAdjacent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]

--------------------------------
Class: WorldTileGroup.DataAsset.Object
	FString TileID;//[Offset: 0x30, Size: 16]
	bool bOnlyPlaceDiagonalWithAdjacent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	TileGroupMapInfo[] FlatMapInfos;//[Offset: 0x48, Size: 16]
	TileGroupMapInfo[] InnerMapInfos;//[Offset: 0x58, Size: 16]
	TileGroupMapInfo[] OuterMapInfos;//[Offset: 0x68, Size: 16]
	TileGroupMapInfo[] StraightMapInfos;//[Offset: 0x78, Size: 16]
	World* Sim_FlatWorld;//[Offset: 0x88, Size: 40]
	World* Sim_InnerWorld;//[Offset: 0xb0, Size: 40]
	World* Sim_OuterWorld;//[Offset: 0xd8, Size: 40]
	World* Sim_StraightWorld;//[Offset: 0x100, Size: 40]

--------------------------------
Class: TileGroupMapInfo
	World* GroupWorld;//[Offset: 0x0, Size: 40]
	float Weight;//[Offset: 0x28, Size: 4]
	FName QuotaCategory;//[Offset: 0x2c, Size: 8]

--------------------------------
Class: FortTileLootData
	FortLootQuotaData LootQuotas;//[Offset: 0x0, Size: 40]
	int LootDrops;//[Offset: 0x2d0, Size: 4]

--------------------------------
Class: FortLootQuotaData.TableRowBase
	FName QuotaCategory;//[Offset: 0x8, Size: 8]
	byte QuotaLevel;//[Offset: 0x10, Size: 1]
	int min;//[Offset: 0x14, Size: 4]
	int max;//[Offset: 0x18, Size: 4]
	float Quota;//[Offset: 0x1c, Size: 4]
	int MinWorldLevel;//[Offset: 0x20, Size: 4]
	int MaxWorldLevel;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldTileSubArray
	WorldTileFoundation*[] X;//[Offset: 0x0, Size: 16]

--------------------------------
Class: WorldTileFoundation.BuildingFoundation.BuildingSMActor.BuildingActor.Actor.Object
	byte NumRotations;//[Offset: 0xe60, Size: 1]

--------------------------------
Class: BuildingFoundation.BuildingSMActor.BuildingActor.Actor.Object
	BuildingGroup*[] BuildingGroups;//[Offset: 0xae0, Size: 16]
	World*[] AdditionalWorlds;//[Offset: 0xaf0, Size: 16]
	Vector BuildingDeconstructorOrigin;//[Offset: 0xb00, Size: 12]
	Vector BuildingDeconstructorExtent;//[Offset: 0xb0c, Size: 12]
	bool bConditionalFoundation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb18, Size: 1]
	bool bServerStreamedInLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb18, Size: 1]
	bool bShowHLODWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb18, Size: 1]
	bool bOverrideNavigationGraphCells;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb18, Size: 1]
	bool bHasExcludedZone;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb18, Size: 1]
	bool bForceDitheringTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb18, Size: 1]
	bool bStreamingDataBasedBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb18, Size: 1]
	enum FoundationEnabledState;//[Offset: 0xb1a, Size: 1]
	enum DynamicFoundationType;//[Offset: 0xb1b, Size: 1]
	byte FoundationType;//[Offset: 0xb1c, Size: 1]
	int NavExclusionMinX;//[Offset: 0xb20, Size: 4]
	int NavExclusionMaxX;//[Offset: 0xb24, Size: 4]
	int NavExclusionMinY;//[Offset: 0xb28, Size: 4]
	int NavExclusionMaxY;//[Offset: 0xb2c, Size: 4]
	Box StreamingBoundingBox;//[Offset: 0xb34, Size: 28]
	FName LevelToStream;//[Offset: 0xb50, Size: 8]
	GameplayTagQuery BuildingGroupFilter;//[Offset: 0xb58, Size: 72]
	GameplayTag MapLocationTag;//[Offset: 0xba0, Size: 8]
	SlateBrush LandIcon;//[Offset: 0xba8, Size: 136]
	Vector LandIconWorldOffset;//[Offset: 0xc30, Size: 12]
	FText MapLocationText;//[Offset: 0xc40, Size: 24]
	Vector MapLocationTextOffset;//[Offset: 0xc58, Size: 12]
	BuildingFoundationStreamingData StreamingData;//[Offset: 0xc68, Size: 128]
	FortHLODSMActor*[] SpawnedLODActors;//[Offset: 0xce8, Size: 16]
	float[] SpawnedLODActorsMinDrawDistances;//[Offset: 0xcf8, Size: 16]
	FortHLODSMActor*[] ChildSpawnedLODActors;//[Offset: 0xd08, Size: 16]
	LODActor*[] HLODActors;//[Offset: 0xd18, Size: 16]
	BuildingFoundation* ParentFoundation;//[Offset: 0xd28, Size: 8]
	float ProxyMeshMaxDrawDistanceMultiplier;//[Offset: 0xd30, Size: 4]
	LevelStreaming* LevelStreamInfo;//[Offset: 0xd40, Size: 8]
	DynamicBuildingFoundationRepData DynamicFoundationRepData;//[Offset: 0xdc4, Size: 28]
	Transform DynamicFoundationTransform;//[Offset: 0xdf0, Size: 48]
	void SetDynamicFoundationTransform(out const Transform NewTransform);// 0xce4d10c
	void SetDynamicFoundationEnabled(bool bEnabled);// 0xce4d05c
	void OnRep_ServerStreamedInLevel();// 0xb5f1828
	void OnRep_LevelToStream();// 0xb5f180c
	void OnRep_DynamicFoundationRepData();// 0xb5f17f8
	void OnLevelStreamedIn();// 0xb5f17e4
	void OnLevelShown();// 0xb5f17d0
	bool EditorOnlyUnloadPreviewLevel();// 0xce4d024
	bool EditorOnlyRemoveAdditionalWorld(out FString LevelToRemove);// 0xce4cf58
	bool EditorOnlyLoadPreviewLevel(bool bCreateLevelInstance);// 0xce4ce9c
	FString[] EditorOnlyGetAdditionalWorlds();// 0xce4cdc8
	static void EditorOnlyExitBatchPreview();// 0xce4cdb4
	static void EditorOnlyEnterBatchPreview();// 0xce4cda0
	void EditorOnlyClearAdditionalWorlds();// 0xce4cd8c
	bool EditorOnlyAddTransformToPreviewLevel(out const Transform DeltaTransform);// 0xce4ccb4
	void EditorOnlyAddAdditionalWorld(out FString LevelPackageName);// 0xce4cbf4
	bool DoesBuildingFoundationContainActor(Actor* Actor);// 0xce4cb40

--------------------------------
Class: BuildingGroup.DataAsset.Object
	FName GroupName;//[Offset: 0x30, Size: 8]
	BuildingGroup* FallbackGroup;//[Offset: 0x38, Size: 8]
	byte FoundationType;//[Offset: 0x40, Size: 1]
	GameplayTagContainer AllBuildingLevelTags;//[Offset: 0x48, Size: 32]
	FortMapData[] BuildingLevelData;//[Offset: 0x68, Size: 16]
	void GetAllMapNames(out FString[] AllMaps);// 0xce54ca0

--------------------------------
Class: FortMapData
	World* BuildingWorld;//[Offset: 0x0, Size: 40]
	GameplayTagContainer BuildingLevelTags;//[Offset: 0x28, Size: 32]
	float SelectionWeight;//[Offset: 0x48, Size: 4]

--------------------------------
Class: BuildingFoundationStreamingData
	FName FoundationName;//[Offset: 0x0, Size: 8]
	Vector FoundationLocation;//[Offset: 0x8, Size: 12]
	Box BoundingBox;//[Offset: 0x14, Size: 28]
	GameplayTagContainer GameplayTags;//[Offset: 0x30, Size: 32]
	IntPoint GridCoordinates;//[Offset: 0x50, Size: 8]
	FortHLODSMActor*[] ProxyInfo;//[Offset: 0x58, Size: 16]
	int[] ChildStreamingDataIndices;//[Offset: 0x68, Size: 16]
	byte PersistentHLODLevelIndex;//[Offset: 0x78, Size: 1]

--------------------------------
Class: FortHLODSMActor.Actor.Object
	FName ActorFName;//[Offset: 0x220, Size: 8]
	Vector UniqueWorldLocation;//[Offset: 0x228, Size: 12]
	bool bIsDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	float MaxDrawDistanceMultiplier;//[Offset: 0x23c, Size: 4]
	StaticMesh* HLODStaticMesh;//[Offset: 0x240, Size: 40]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x268, Size: 8]

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 8]
	<HLODInstancingKey,InstancedStaticMeshComponent*> InstancedStaticMeshComponents;//[Offset: 0x228, Size: 80]
	HLODProxy* Proxy;//[Offset: 0x278, Size: 8]
	FName Key;//[Offset: 0x280, Size: 8]
	float LODDrawDistance;//[Offset: 0x288, Size: 4]
	int LODLevel;//[Offset: 0x28c, Size: 4]
	Actor*[] SubActors;//[Offset: 0x290, Size: 16]
	byte CachedNumHLODLevels;//[Offset: 0x2a0, Size: 1]

--------------------------------
Class: HLODInstancingKey
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 8]

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 16]
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 80]

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 28]
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 8]
	FName Key;//[Offset: 0x28, Size: 8]

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: DynamicBuildingFoundationRepData
	Rotator Rotation;//[Offset: 0x0, Size: 12]
	Vector Translation;//[Offset: 0xc, Size: 12]
	enum EnabledState;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FortStartingMissionInfo
	FortMissionInfo*[] StartingMissions;//[Offset: 0x0, Size: 16]
	bool bDisableSharedMissionLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: FortWorldRecord.FortGenericRecord.Object
	FortCloudSaveInfo CloudInfo;//[Offset: 0xf0, Size: 24]
	int CurrentZoneIndex;//[Offset: 0x108, Size: 4]
	FortPlayerRecord[] SavedPlayers;//[Offset: 0x110, Size: 16]
	FortZoneInstanceDetails ZoneInstanceInfo;//[Offset: 0x120, Size: 296]
	FString WUID;//[Offset: 0x248, Size: 16]

--------------------------------
Class: FortPlayerRecord
	FString DisplayName;//[Offset: 0x0, Size: 16]
	FString UniqueId;//[Offset: 0x10, Size: 16]
	byte[] BackpackData;//[Offset: 0x20, Size: 16]
	bool bPlayerIsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	PlayerStatsRecord PlayerStatsData;//[Offset: 0x34, Size: 140]
	StatManagerPeriodRecord CampaignPeriodRecord;//[Offset: 0xc0, Size: 16]

--------------------------------
Class: PlayerStatsRecord
	int Stats;//[Offset: 0x0, Size: 4]

--------------------------------
Class: StatManagerPeriodRecord
	StatRecord[] StatRecords;//[Offset: 0x0, Size: 16]

--------------------------------
Class: StatRecord
	FName StatName;//[Offset: 0x0, Size: 8]
	int StatValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortZoneInstanceDetails.FortZoneInstanceInfo
	class FortMissionGenerator* MissionGenerator;//[Offset: 0x68, Size: 40]
	DataTableRowHandle ZoneDifficultyInfo;//[Offset: 0x90, Size: 16]
	McpLootResult MissionRewards;//[Offset: 0xa0, Size: 32]
	McpLootResult[] DifficultyIncreaseMissionRewards;//[Offset: 0xc0, Size: 16]
	McpLootResult MissionAlertRewards;//[Offset: 0xd0, Size: 32]
	McpLootResult ZoneModifiers;//[Offset: 0xf0, Size: 32]
	FString MissionAlertCategoryName;//[Offset: 0x110, Size: 16]
	int TileIndex;//[Offset: 0x120, Size: 4]

--------------------------------
Class: FortZoneInstanceInfo
	FString WorldId;//[Offset: 0x0, Size: 16]
	FString TheaterId;//[Offset: 0x10, Size: 16]
	FString TheaterMissionId;//[Offset: 0x20, Size: 16]
	FString TheaterMissionAlertId;//[Offset: 0x30, Size: 16]
	class FortZoneTheme* ZoneThemeClass;//[Offset: 0x40, Size: 40]

--------------------------------
Class: FortZoneRecord.FortGenericRecord.Object
	int WorldSaveCount;//[Offset: 0xf0, Size: 4]
	int ZoneIndex;//[Offset: 0xf4, Size: 4]
	FName PersistentLevelName;//[Offset: 0xf8, Size: 8]
	FortLevelRecord[] SavedLevels;//[Offset: 0x100, Size: 16]
	int NumSavedLevels;//[Offset: 0x110, Size: 4]
	int ZoneTileSeed;//[Offset: 0x114, Size: 4]
	StatManagerPeriodRecord[] PlayerMapStatManagerPeriods;//[Offset: 0x2a8, Size: 16]
	int CloudSaveItemDefContentVersion;//[Offset: 0x2b8, Size: 4]
	bool bNeedsFullActorSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]

--------------------------------
Class: FortLevelRecord
	int ParentLevelIndex;//[Offset: 0x0, Size: 4]
	GUID BoundActorGuid;//[Offset: 0x4, Size: 16]
	FName PackageName;//[Offset: 0x14, Size: 8]
	FortActorRecord[] SavedActors;//[Offset: 0x20, Size: 16]
	int X_Loc;//[Offset: 0x30, Size: 4]
	int Y_Loc;//[Offset: 0x34, Size: 4]
	byte Rotation;//[Offset: 0x38, Size: 1]

--------------------------------
Class: FortUserCloudHelperComponent.ActorComponent.Object
	uint64 LastIssuedRequestHandle;//[Offset: 0xb0, Size: 8]
	int SaveSizeCompressionThreshold;//[Offset: 0xb8, Size: 4]

--------------------------------
Class: FortMissionManagerRecord
	class FortMissionManager* MissionManagerClass;//[Offset: 0x0, Size: 8]
	FortMissionRecord[] MissionRecords;//[Offset: 0x8, Size: 16]
	int NumRequiredMissionsOfType;//[Offset: 0x18, Size: 4]
	byte[] MissionManagerData;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortMissionRecord
	FortMissionEntry MissionEntry;//[Offset: 0x0, Size: 136]
	FortMissionGenerator* MissionGenerator;//[Offset: 0x88, Size: 8]
	FortGeneratedDifficultyOptions GeneratedMissionOptions;//[Offset: 0x90, Size: 64]
	int DayGenerated;//[Offset: 0xd0, Size: 4]
	int UIIndex;//[Offset: 0xd4, Size: 4]
	UniqueNetIdRepl QuestOwnerAccount;//[Offset: 0xd8, Size: 40]
	enum MissionStatus;//[Offset: 0x100, Size: 1]
	FortObjectiveRecord[] ObjectiveRecords;//[Offset: 0x108, Size: 16]
	byte[] MissionData;//[Offset: 0x118, Size: 16]
	GUID MissionGuid;//[Offset: 0x128, Size: 16]

--------------------------------
Class: FortMissionEntry
	float Weight;//[Offset: 0x0, Size: 4]
	int WorldMinLevel;//[Offset: 0x4, Size: 4]
	int WorldMaxLevel;//[Offset: 0x8, Size: 4]
	DataTableRowHandle MinDifficultyInfoRow;//[Offset: 0x10, Size: 16]
	FortMissionGenerator* MissionGenerator;//[Offset: 0x20, Size: 8]
	FortMissionInfo* MissionInfo;//[Offset: 0x28, Size: 8]
	byte GenerationCategory;//[Offset: 0x30, Size: 1]
	FortGeneratedDifficultyOptions GeneratedDifficultyOptions;//[Offset: 0x38, Size: 64]
	FortMissionPlacementItemLookupData[] BlueprintLookupData;//[Offset: 0x78, Size: 16]

--------------------------------
Class: FortGeneratedDifficultyOptions
	float GameDifficultyAtGeneration;//[Offset: 0x0, Size: 4]
	int DifficultyOptionPointsAvailableAtGeneration;//[Offset: 0x4, Size: 4]
	int MaxEncounterSpawnPointsAtGeneration;//[Offset: 0x8, Size: 4]
	int MinDifficultyOptionPointsToUse;//[Offset: 0xc, Size: 4]
	FortGeneratedEncounterSequence[] GeneratedEncounterSequences;//[Offset: 0x10, Size: 16]
	FortGeneratedMissionOption[] MissionOptions;//[Offset: 0x20, Size: 16]
	FortGeneratedEncounterProfile[] GeneratedEncounterProfiles;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortGeneratedMissionOption
	FortDifficultyOptionCategoryMission* MissionOptionCategory;//[Offset: 0x0, Size: 8]
	class FortDifficultyOptionMission* MissionOption;//[Offset: 0x8, Size: 8]
	float RangeLerpValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortDifficultyOptionCategoryMission.FortDifficultyOptionCategory.DataAsset.Object

--------------------------------
Class: FortDifficultyOptionCategory.DataAsset.Object
	bool bIsRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bHasValueRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]

--------------------------------
Class: FortDifficultyOptionMission.FortDifficultyOption.Object

--------------------------------
Class: FortGeneratedEncounterProfile
	float EncounterDifficultyLevel;//[Offset: 0x0, Size: 4]
	FortGeneratedEncounterOption[] EncounterOptions;//[Offset: 0x8, Size: 16]
	FortEncounterModeSettings EncounterModeSettings;//[Offset: 0x18, Size: 5]
	GameplayTagContainer EncounterTypeTags;//[Offset: 0x20, Size: 32]
	int DifficultyOptionPointsAvailableAtGeneration;//[Offset: 0x40, Size: 4]
	int MinDifficultyOptionPointsToUse;//[Offset: 0x44, Size: 4]
	bool bShouldReselectOptionsPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	int GeneratedEncounterIndex;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: FortGeneratedEncounterOption
	FortDifficultyOptionCategoryEncounter* EncounterOptionCategory;//[Offset: 0x0, Size: 8]
	class FortDifficultyOptionEncounter* EncounterOption;//[Offset: 0x8, Size: 8]
	FortDifficultyOptionEncounter* EncounterOptionInstance;//[Offset: 0x10, Size: 8]
	float RangeLerpValue;//[Offset: 0x18, Size: 4]
	bool bChangedSinceLastVLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object

--------------------------------
Class: FortEncounterModeSettings
	byte PacingMode;//[Offset: 0x0, Size: 1]
	enum SpawnLocationManagementMode;//[Offset: 0x1, Size: 1]
	byte SpawnLocationMode;//[Offset: 0x2, Size: 1]
	byte UtilitiesMode;//[Offset: 0x3, Size: 1]
	byte SpawnLimitMode;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FortMissionPlacementItemLookupData
	GameplayTagContainer ItemIdentifyingTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer TagsAddedToPlacementActors;//[Offset: 0x20, Size: 32]
	class Actor* ActorToPlace;//[Offset: 0x40, Size: 8]
	Actor* ActorToUseForSpawnLocation;//[Offset: 0x48, Size: 8]
	Actor* SpawnedActor;//[Offset: 0x50, Size: 8]
	Vector SpawnLocation;//[Offset: 0x58, Size: 12]
	Rotator SpawnRotation;//[Offset: 0x64, Size: 12]
	bool bDontCreateSpawnRiftsNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bShouldFreeLocationsOnDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: FortObjectiveRecord
	class FortObjectiveBase* ObjectiveClass;//[Offset: 0x0, Size: 8]
	byte[] ObjectiveData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortObjectiveBase.FortMissionState.Actor.Object
	FortBadgeItemDefinition* ObjectiveRewardBadge;//[Offset: 0x258, Size: 8]
	FortWorldItemDefinition*[] ItemsToGiveOnObjectiveStart;//[Offset: 0x260, Size: 16]
	bool bStartPlayingOnMissionStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bAcceptsMissionEventsWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	GameplayTagContainer ObjectiveHandle;//[Offset: 0x278, Size: 32]
	FString ObjectiveAnalyticsName;//[Offset: 0x298, Size: 16]
	byte MissionRequirement;//[Offset: 0x2a8, Size: 1]
	bool bIsObjectiveVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 1]
	enum VisibilityOverride;//[Offset: 0x2aa, Size: 1]
	bool bIsProgressBarHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ab, Size: 1]
	enum ObjectiveAudiblity;//[Offset: 0x2ac, Size: 1]
	bool bRelevantToSpecificTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	byte RelevantTeam;//[Offset: 0x2ae, Size: 1]
	enum ObjectiveStatus;//[Offset: 0x2af, Size: 1]
	FortMissionTimerComponent* TimerComponent;//[Offset: 0x2b8, Size: 8]
	MulticastInlineDelegateProperty OnObjectiveStatusChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnObjectiveVisibilityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnObjectiveVisibilityOverrideChanged;//[Size: 16]
	void UnpauseObjectiveTimer();// 0xd0f3d38
	void StopObjective(enum Status, FString Description, FortBadgeItemDefinition* ExtraBadgeToGrant);// 0xd0f3bfc
	bool StartPlayingObjective();// 0xd0f3bbc
	void SetUIVisibilityOverride(enum InVisibilityOverride);// 0xd0f3b14
	void SetUiVisibility(bool bInIsObjectiveVisible);// 0xd0f3a64
	void SetObjectiveTimer(FString FunctionName, float TimerLength, bool bStartPaused);// 0xd0f38d8
	void PauseObjectiveTimer();// 0xd0f38c4
	void OnRep_ObjectiveVisibilityOverride();// 0xd0f38b0
	void OnRep_ObjectiveStatus();// 0xd0f389c
	void OnRep_bIsObjectiveVisible();// 0xd0f3888
	void OnGenericObjectiveEvent();// 0xbbc0600
	bool IsRelevantToTeam(byte Team);// 0xd0f37d4
	bool IsRelevantToASpecificTeam();// 0xd0f379c
	bool IsObjectiveTimerPaused();// 0xd0f3764
	void GrantRewardsByTag(const GameplayTag RewardTag, byte RewardType);// 0xd0f367c
	FortMissionTimerComponent* GetTimerComponent();// 0xd0f3660
	void GetRewardItemsByTag(const GameplayTag RewardTag, out FortWorldItemDefinition*[] OutRewardItems);// 0xd0f3560
	float GetObjectiveTimerTimeRemaining();// 0xd0f352c
	FText GetObjectiveDisplayString();// 0xd0f3454
	GUID GetMissionGuid();// 0xd0f3420
	FortMission* GetMission();// 0xd0f33ec
	void EnableTick(bool bEnabled);// 0xd0f333c
	void ClearObjectiveTimer();// 0xd0f3328
	void BlueprintPostObjectiveLoad();// 0xbbc0600
	void BlueprintOnStartPlaying();// 0xbbc0600
	void BlueprintOnObjectiveEnd(enum Status);// 0xbbc0600
	void BlueprintOnActivated();// 0xbbc0600
	FText BlueprintGetProgressBarText(int ProgressBarIdx);// 0xbbc0600
	float BlueprintGetProgressBarPercentage(int ProgressBarIdx);// 0xbbc0600
	Texture2D* BlueprintGetProgressBarIcon(int ProgressBarIdx);// 0xbbc0600
	LinearColor BlueprintGetProgressBarColor(int ProgressBarIdx);// 0xbbc0600
	FText BlueprintGetObjectiveDisplayText();// 0xbbc0600
	int BlueprintGetNumProgressBars();// 0xbbc0600
	void AttemptMissionSave(FString OptionalSaveName);// 0xd0f322c

--------------------------------
Class: FortMissionTimerComponent.ActorComponent.Object
	bool bShowTimeElapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUpdateQuestsTimeElapsed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnMissionTimerComponentUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnMissionTimerTimeAddedOrRemoved;//[Size: 16]
	MissionTimeDisplayData[] DisplayData;//[Offset: 0xd8, Size: 16]
	MissionTimerData TimerData;//[Offset: 0xe8, Size: 48]
	FText TimerLabelText;//[Offset: 0x118, Size: 24]
	bool bDisplayInTimeFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	byte TimerVisibilityOverrideSetting;//[Offset: 0x131, Size: 1]
	float TimerVisibilityShowAtEndTime;//[Offset: 0x134, Size: 4]
	void UnpauseMissionTimer();// 0xd0e0518
	void SetTimerVisibilityOverrideToShowAtEnd(float ShowTime);// 0xd0e0470
	void SetTimerVisibilityOverrideSetting(byte NewVisibilitySetting);// 0xd0e03c8
	void SetTimerLabelText(FText NewLabelText);// 0xd0e0244
	void SetTimerDisplayFormat(bool bNewDisplayInTimeFormat);// 0xd0e0194
	void SetMissionTimer(FString FunctionName, float TimerLength, Actor* CallbackActor);// 0xd0e0018
	void SetMissionTimeElapsedTimer();// 0xd0e0004
	void ResetMissionTimer();// 0xd0dfff0
	void PauseMissionTimer();// 0xd0dffdc
	void OnRep_TimerVisibilityOverride();// 0xd0dffc8
	void OnRep_TimerData();// 0xd0dffb4
	bool IsTimerVisible();// 0xd0dff7c
	bool IsMissionTimerSet();// 0xd0dff44
	bool IsMissionTimerPaused();// 0xd0dff0c
	FText GetTimeText();// 0xd0dfe3c
	FText GetTimerLabelText();// 0xd0dfd8c
	float GetNormalizedTime();// 0xd0dfd58
	float GetMissionTimerTimeRemaining();// 0xd0dfd24
	float GetMissionTimerTimeElapsed();// 0xd0dfcf0
	MissionTimeDisplayData GetCorrectTimeDisplayData();// 0xd0dfc80
	void DummyTimer();// 0xd0dfc6c
	void ClearMissionTimer();// 0xd0dfc58
	void AddOrRemoveTime(float TimeToAdd);// 0xd0dfbb0

--------------------------------
Class: MissionTimeDisplayData
	float LessThanTimeValue;//[Offset: 0x0, Size: 4]
	bool bHideTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	LinearColor BaseColor;//[Offset: 0x8, Size: 16]
	LinearColor PulseColor;//[Offset: 0x18, Size: 16]
	float ColorPulsesPerSecond;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MissionTimerData
	bool bTimerIsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float OriginalTimePeriod;//[Offset: 0x4, Size: 4]
	float ReplicatedRemainingTime;//[Offset: 0x8, Size: 4]
	float TimeAddedOrRemoved;//[Offset: 0xc, Size: 4]
	float LastTimeAddedOrRemoved;//[Offset: 0x10, Size: 4]
	float ClientRemainingTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortDeferredNewActorData
	BuildingActor* BuildingActor;//[Offset: 0x0, Size: 8]
	int SavedLevelIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortPlayerEarnedItemCaches
	UniqueNetIdRepl PlayerID;//[Offset: 0x0, Size: 40]
	FortItemCacheItemDefinition*[] EarnedItemCaches;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortItemCacheItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortCardPackItemDefinition* CardPackReward;//[Offset: 0x798, Size: 40]

--------------------------------
Class: FortAmbientAudioController.ActorComponent.Object
	FortPOIAmbientAudioBank* DefaultAudioBank;//[Offset: 0xb0, Size: 8]
	GameplayTag RequiredTagSubstr;//[Offset: 0xb8, Size: 8]
	FortPlayerController* PlayerController;//[Offset: 0xc0, Size: 8]
	float PauseFadeTime;//[Offset: 0xc8, Size: 4]
	void SetAudioBankOverride(FortPOIAmbientAudioBank* BankOverride);// 0xcebae94
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xb60f94c
	static FortAmbientAudioController* GetAmbientAudioControllerFromContext(Object* WorldContextObject);// 0xcebadec
	void ClearAudioBankOverride();// 0xcebadd8

--------------------------------
Class: OnTimeHitInfo
	delegate TimeCallback;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortVisibilityManager.Actor.Object
	VisibiltyInfoArray VisibilityInfoArray;//[Offset: 0x230, Size: 280]

--------------------------------
Class: VisibiltyInfoArray.FastArraySerializer
	VisibilityInfo[] VisibilityInfoArray;//[Offset: 0x108, Size: 16]

--------------------------------
Class: VisibilityInfo.FastArraySerializerItem
	Actor* Actor;//[Offset: 0x10, Size: 8]
	FortVisibilityComponent* VisibilityComponent;//[Offset: 0x18, Size: 8]
	uint16 TeamVisibilityFlag;//[Offset: 0x20, Size: 2]

--------------------------------
Class: FortWindManager.Actor.Object
	bool bAllowWindImpulses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool bAllowResponderAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	float SectionWidth;//[Offset: 0x230, Size: 4]
	float MinimumSectionBlendTime;//[Offset: 0x234, Size: 4]
	MaterialInterface* MaterialDefiningParametersToInterpolate;//[Offset: 0x238, Size: 40]
	FName WindVectorParameterName;//[Offset: 0x260, Size: 8]
	FName[] WindOffsetMaterialParameterNames;//[Offset: 0x268, Size: 16]
	FName[] WindSpeedMaterialParameterNames;//[Offset: 0x278, Size: 16]
	FName[] WindMaterialScalarParameterNamesToInterpolate;//[Offset: 0x288, Size: 16]
	FName[] WindMaterialVectorParameterNamesToInterpolate;//[Offset: 0x298, Size: 16]
	FortWindImpulseRadius[] WindImpulses;//[Offset: 0x2a8, Size: 16]
	FortWindImpulseCylinderDelta[] WindImpulseCylinderDeltas;//[Offset: 0x2b8, Size: 16]
	FortWindImpulseCylinder[] WindImpulseCylinders;//[Offset: 0x2c8, Size: 16]
	FortWindResponder[] WindResponders;//[Offset: 0x2d8, Size: 16]
	int[] NearbyCacheIndicesForAudio;//[Offset: 0x2f0, Size: 16]
	int[] NearbyCacheIndicesForUpdates;//[Offset: 0x300, Size: 16]
	int NextNearbyIndexToUpdate;//[Offset: 0x310, Size: 4]
	FortWindResponder ActiveAudioWindResponder;//[Offset: 0x320, Size: 144]
	<BuildingSMActor*,AudioComponent*> WindActorToWindResponderAudioMap;//[Offset: 0x3b0, Size: 80]
	FName AudioWindSpeedParameterName;//[Offset: 0x400, Size: 8]
	float AudioWindInterpSpeed;//[Offset: 0x408, Size: 4]
	float AudioWindMaxResponderDistance;//[Offset: 0x40c, Size: 4]
	float UpdateWindMaxResponderDistance;//[Offset: 0x410, Size: 4]
	float ViewerMovementDistanceForRefresh;//[Offset: 0x414, Size: 4]
	AudioComponent*[] WindAudioComponentPool;//[Offset: 0x418, Size: 16]
	bool SetWindImpulseCylinderMagnitude(out const FortWindImpulseHandle ImpulseHandle, float NewMagnitude, float BlendTime);// 0xd22a714
	bool SetWindImpulse(out const FortWindImpulseHandle ImpulseHandle, out const FortWindImpulseRadius WindImpulse);// 0xd22a5a8
	void RemoveWindParticleSystemComponent(ParticleSystemComponent* ParticleSystemComponent);// 0xbbc0600
	void RemoveWindImpulse(out const FortWindImpulseHandle ImpulseHandle, float BlendTime);// 0xd22a4a0
	void OnWorldReady();// 0xbbc0600
	void OnWindImpulseCylinderDeltaComplete(out const FortWindImpulseCylinder WindImpulseCylinder);// 0xbbc0600
	void OnWindImpulseCylinderDeath(out const FortWindImpulseCylinder WindImpulseCylinder);// 0xbbc0600
	void OnWindImpulseCylinderCreation(out const FortWindImpulseCylinder WindImpulseCylinder, out const FortWindImpulseCylinderDelta WindImpulseCylinderDelta);// 0xbbc0600
	void OnWindAudioBecameInactive(AudioComponent* WindAudioComp);// 0xbbc0600
	void OnWindAudioBecameActive(AudioComponent* WindAudioComp);// 0xbbc0600
	static FortWindImpulseRadius MakeWindImpulseRadius(out const Vector ImpulseLocation, float ImpulseRadius, float ImpulseMagnitude, float ImpulseBlendTime);// 0xd22a2dc
	static FortWindImpulseCylinder MakeWindImpulseCylinder(out const Vector ImpulseLocation, float ImpulseInnerRadius, float ImpulseOuterRadius, float ImpulseMagnitude, out const Vector ImpulseDirection);// 0xd22a0a4
	bool HasWindImpulse(out const FortWindImpulseHandle WindImpulseHandle);// 0xd229f70
	static FortWindManager* GetWindManager(const Object* WorldContextObject);// 0xb6daf14
	void GetGlobalWindIntensityAndDirection(out float WindIntensity, out Vector WindDirection);// 0xd229e70
	bool GetCurrentWindImpulseCylinderDelta(out FortWindImpulseCylinder WindImpulseCylinder, out FortWindImpulseCylinderDelta WindImpulseCylinderDelta);// 0xd229c6c
	static void BreakWindImpulseRadius(out const FortWindImpulseRadius InWindImpulseRadius, out Vector ImpulseLocation, out float ImpulseRadius, out float ImpulseMagnitude, out float ImpulseBlendTime);// 0xd229a20
	static void BreakWindImpulseCylinderDelta(out const FortWindImpulseCylinderDelta WindImpulseCylinderDelta, out Vector WindDeltaCenter, out bool bWindImpulseInitialized, out bool bWindRipplesOutward, out float WindDeltaSectionWidth, out float WindDeltaInnerSectionRadius, out float WindDeltaOuterSectionRadius, out float WindDeltaMaximumRadius, out float WindDeltaDesiredOverallBlendTime, out float WindDeltaSectionBlendTime, out float WindDeltaSectionCurrentBlendTime, out float WindDeltaPreviousMagnitude, out float WindDeltaSectionCurrentMagnitude, out float WindDeltaDesiredMagnitude, out Box WindDeltaOuterWorldBounds, out Box WindDeltaInnerWorldBounds, out Box WindImpulseBounds, out FortWindImpulseHandle WindImpulseHandleToModify);// 0xd22936c
	static void BreakWindImpulseCylinderAdvanced(out const FortWindImpulseCylinder WindImpulseCylinder, out Vector WindLocation, out float WindInnerRadius, out float WindOuterRadius, out Vector WindWorldDirection, out float WindMagnitude, out Box WindWorldBounds, out bool bIsWindChanging, out bool bIsWindChangePending);// 0xd228fe4
	static void BreakWindImpulseCylinder(out const FortWindImpulseCylinder InWindImpulseCylinder, out Vector ImpulseLocation, out float ImpulseInnerRadius, out float ImpulseOuterRadius, out float ImpulseMagnitude, out Vector ImpulseDirection);// 0xd228d34
	void AddWindParticleSystemComponent(ParticleSystemComponent* ParticleSystemComponent);// 0xbbc0600
	FortWindImpulseHandle AddWindImpulseCylinder(out const FortWindImpulseCylinder WindImpulseCylinder, float BlendTime);// 0xd228bd8
	FortWindImpulseHandle AddWindImpulse(out const FortWindImpulseRadius WindImpulse);// 0xd228acc

--------------------------------
Class: FortWindImpulseHandle
	int UID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: FortWindImpulseRadius
	Vector Location;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float CurrentRadius;//[Offset: 0x10, Size: 4]
	float PreviousRadius;//[Offset: 0x14, Size: 4]
	float Magnitude;//[Offset: 0x18, Size: 4]
	float CurrentMagnitude;//[Offset: 0x1c, Size: 4]
	float PreviousMagnitude;//[Offset: 0x20, Size: 4]
	float BlendTime;//[Offset: 0x24, Size: 4]
	float CurrentBlendTime;//[Offset: 0x28, Size: 4]
	Box WorldBounds;//[Offset: 0x2c, Size: 28]
	FortWindImpulseHandle Handle;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortWindImpulseCylinderDelta
	Vector DeltaCenter;//[Offset: 0x0, Size: 12]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bRippleOutward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float SectionWidth;//[Offset: 0x10, Size: 4]
	float InnerSectionRadius;//[Offset: 0x14, Size: 4]
	float OuterSectionRadius;//[Offset: 0x18, Size: 4]
	float MaximumRadius;//[Offset: 0x1c, Size: 4]
	float DesiredOverallBlendTime;//[Offset: 0x20, Size: 4]
	float SectionBlendTime;//[Offset: 0x24, Size: 4]
	float SectionCurrentBlendTime;//[Offset: 0x28, Size: 4]
	float PreviousMagnitude;//[Offset: 0x2c, Size: 4]
	float SectionCurrentMagnitude;//[Offset: 0x30, Size: 4]
	float DesiredMagnitude;//[Offset: 0x34, Size: 4]
	Box OuterWorldBounds;//[Offset: 0x38, Size: 28]
	Box InnerWorldBounds;//[Offset: 0x54, Size: 28]
	Box WindImpulseBounds;//[Offset: 0x70, Size: 28]
	FortWindImpulseHandle WindImpulseHandleToModify;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: FortWindImpulseCylinder.FortWindImpulseCylinderRadial
	Vector WindDirection;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: FortWindImpulseCylinderRadial
	Vector Location;//[Offset: 0x0, Size: 12]
	float InnerRadius;//[Offset: 0xc, Size: 4]
	float OuterRadius;//[Offset: 0x10, Size: 4]
	float Magnitude;//[Offset: 0x14, Size: 4]
	Box WorldBounds;//[Offset: 0x18, Size: 28]
	bool bIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bIsChangePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	FortWindImpulseHandle Handle;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FortWindResponder
	BuildingSMActor* WindUpdatingBuildingSMActor;//[Offset: 0x0, Size: 8]
	CurveLinearColor* WindSpeedCurve;//[Offset: 0x8, Size: 8]
	CurveLinearColor* WindPannerSpeedCurve;//[Offset: 0x10, Size: 8]
	SoundBase* WindAudio;//[Offset: 0x18, Size: 8]
	MaterialInterface*[] MildWindMaterialInstances;//[Offset: 0x20, Size: 16]
	MaterialInterface*[] IntenseWindMaterialInstances;//[Offset: 0x30, Size: 16]
	FortWindMaterialData[] MaterialsData;//[Offset: 0x40, Size: 16]
	int MaterialParameterPairIndices;//[Offset: 0x50, Size: 4]
	FortWindResponderMaterialVariablePairData[] PairedVariablesData;//[Offset: 0x58, Size: 16]
	float WindSpeed;//[Offset: 0x84, Size: 4]
	bool bHasSetupAnimatingMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]

--------------------------------
Class: FortWindMaterialData
	MaterialInstanceDynamic* Mid;//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* IntenseStateMID;//[Offset: 0x8, Size: 8]
	int MaterialParameterPairIndices;//[Offset: 0x10, Size: 4]
	int WindVectorParameterIndex;//[Offset: 0x14, Size: 4]
	WindScalarMaterialInterpolationData[] ScalarInterpolationData;//[Offset: 0x18, Size: 16]
	WindVectorMaterialInterpolationData[] VectorInterpolationData;//[Offset: 0x28, Size: 16]
	FortWindMaterialParameterPairID[] ParametersToSet;//[Offset: 0x38, Size: 16]

--------------------------------
Class: WindScalarMaterialInterpolationData
	FName MaterialParameterName;//[Offset: 0x0, Size: 8]
	int MaterialParameterIndex;//[Offset: 0x8, Size: 4]
	float LerpFromValue;//[Offset: 0xc, Size: 4]
	float LerpToValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WindVectorMaterialInterpolationData
	FName MaterialParameterName;//[Offset: 0x0, Size: 8]
	int MaterialParameterIndex;//[Offset: 0x8, Size: 4]
	LinearColor LerpFromValue;//[Offset: 0xc, Size: 16]
	LinearColor LerpToValue;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: FortWindMaterialParameterPairID
	int PairIndex;//[Offset: 0x0, Size: 4]
	FortMaterialParameterID SpeedParameter;//[Offset: 0x4, Size: 12]
	FortMaterialParameterID OffsetParameter;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FortMaterialParameterID
	int VariableIndex;//[Offset: 0x0, Size: 4]
	FName VariableName;//[Offset: 0x4, Size: 8]

--------------------------------
Class: FortWindResponderMaterialVariablePairData
	float PreviousSpeed;//[Offset: 0x0, Size: 4]
	float PreviousOffset;//[Offset: 0x4, Size: 4]
	float MaterialsPreviousTime;//[Offset: 0x8, Size: 4]
	float DeltaTimeModifiedByMaterialSpeed;//[Offset: 0xc, Size: 4]
	int MaterialVariableIndex;//[Offset: 0x10, Size: 4]
	FName SpeedVariableName;//[Offset: 0x14, Size: 8]
	FName TimeOffsetVariableName;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: TeamChangeRequest
	FortPlayerController* RequestingController;//[Offset: 0x0, Size: 8]
	byte DesiredTeam;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FortGlobalAbilityTargetingActor.Info.Actor.Object

--------------------------------
Class: AppliedHomebaseData
	AbilitySystemComponent* Source;//[Offset: 0x0, Size: 8]
	AbilitySystemComponent* Target;//[Offset: 0x8, Size: 8]
	ActiveGameplayEffectHandle[] AppliedEffects;//[Offset: 0x10, Size: 16]
	FortAbilitySetHandle[] AppliedAbilitySets;//[Offset: 0x20, Size: 16]

--------------------------------
Class: GameStateLootInfo
	FortTreasureChestSpawnInfo[] TreasureChestSpawnInfos;//[Offset: 0x0, Size: 16]
	FortAmmoBoxSpawnInfo[] AmmoBoxSpawnInfos;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortTreasureChestSpawnInfo
	class BuildingContainer* TreasureChestClass;//[Offset: 0x0, Size: 8]
	ScalableFloat TreasureChestMinSpawnPercent;//[Offset: 0x8, Size: 40]
	ScalableFloat TreasureChestMaxSpawnPercent;//[Offset: 0x30, Size: 40]
	ScalableFloat GoldenPoiTreasureChestMinSpawnPercent;//[Offset: 0x58, Size: 40]
	ScalableFloat GoldenPoiTreasureChestMaxSpawnPercent;//[Offset: 0x80, Size: 40]

--------------------------------
Class: FortAmmoBoxSpawnInfo
	class BuildingContainer* AmmoBoxClass;//[Offset: 0x0, Size: 8]
	ScalableFloat AmmoBoxMinSpawnPercent;//[Offset: 0x8, Size: 40]
	ScalableFloat AmmoBoxMaxSpawnPercent;//[Offset: 0x30, Size: 40]
	ScalableFloat GoldenPoiAmmoBoxMinSpawnPercent;//[Offset: 0x58, Size: 40]
	ScalableFloat GoldenPoiAmmoBoxMaxSpawnPercent;//[Offset: 0x80, Size: 40]

--------------------------------
Class: BuildingContainerDebugInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	GameplayTagContainer LocationTags;//[Offset: 0x10, Size: 32]

--------------------------------
Class: CreativeQuestManager.Object

--------------------------------
Class: FortZoneDifficultyIncreaseRewardData
	FortItemQuantityPair[] Rewards;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortZoneMissionAlertData
	FortItemQuantityPair[] MissionAlertRewards;//[Offset: 0x0, Size: 16]
	FString MissionAlertCategoryName;//[Offset: 0x10, Size: 16]
	FString MissionAlertID;//[Offset: 0x20, Size: 16]

--------------------------------
Class: PlayerBuildableClassContainer
	class BuildingSMActor[] BuildingClasses;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortCharacterCosmeticManager.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: FortSkinWeightOverrideManager.Object

--------------------------------
Class: VoteData
	enum VoteType;//[Offset: 0x0, Size: 1]
	UniqueNetIdRepl VoteInstigatorNetId;//[Offset: 0x8, Size: 40]
	FortVoteConfig VoteConfig;//[Offset: 0x30, Size: 20]
	float VoteStartTime;//[Offset: 0x44, Size: 4]
	float VoteEndTime;//[Offset: 0x48, Size: 4]
	Voter[] Voters;//[Offset: 0x50, Size: 16]
	int NumVotersWithMaxVotes;//[Offset: 0x60, Size: 4]
	TimerHandle EndVoteTimerHandle;//[Offset: 0x68, Size: 8]
	enum VoteStatus;//[Offset: 0x70, Size: 1]

--------------------------------
Class: FortCreativePortalManager.Info.Actor.Object
	FortAthenaCreativePortal*[] AllPortals;//[Offset: 0x220, Size: 16]
	FortPlayerControllerAthena*[] PendingPortalReservations;//[Offset: 0x230, Size: 16]
	void ReleasePortal(FortAthenaCreativePortal* PortalToRelease);// 0xcfbbb0c
	static void GetCreativePortalManager(const Object* WorldContextObject, out FortCreativePortalManager* OutCreativePortalManager, out enum OutIsValid);// 0xcfbb9d0

--------------------------------
Class: FortAthenaCreativePortal.BuildingGameplayActor.BuildingActor.Actor.Object
	int PortalIndex;//[Offset: 0x7e8, Size: 4]
	Actor* DestinationActor;//[Offset: 0x7f0, Size: 8]
	FString OverrideImageURL;//[Offset: 0x7f8, Size: 16]
	Vector MarkerDetailsPointerOrigin;//[Offset: 0x808, Size: 12]
	float MaxInstantTeleportDistance;//[Offset: 0x814, Size: 4]
	FText LoadingText;//[Offset: 0x818, Size: 24]
	FText SavingText;//[Offset: 0x830, Size: 24]
	FText TeleportingPlayersText;//[Offset: 0x848, Size: 24]
	FText TeleportingVehiclesText;//[Offset: 0x860, Size: 24]
	FortVolume* LinkedVolume;//[Offset: 0x878, Size: 8]
	bool bReturnToCreativeHub;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool bInErrorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	bool bUserInitiatedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x882, Size: 1]
	CreativeLoadedLinkData IslandInfo;//[Offset: 0x888, Size: 336]
	FText VolumeStatus;//[Offset: 0x9d8, Size: 24]
	FText SanitizedTitle;//[Offset: 0x9f0, Size: 24]
	FText SanitizedTagline;//[Offset: 0xa08, Size: 24]
	FText SanitizedCreatorName;//[Offset: 0xa20, Size: 24]
	PrimitiveComponent* InteractComponent;//[Offset: 0xa40, Size: 8]
	byte CurrentPopulation;//[Offset: 0xa48, Size: 1]
	UniqueNetIdRepl OwningPlayer;//[Offset: 0xa50, Size: 40]
	UniqueNetIdRepl[] PlayersReady;//[Offset: 0xa78, Size: 16]
	bool bIsPublishedPortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa88, Size: 1]
	Vector TeleportLocation;//[Offset: 0xa8c, Size: 12]
	ScalableFloat TeleportExitDistance;//[Offset: 0xa98, Size: 40]
	bool bTeleportLocationIsIslandStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac0, Size: 1]
	bool bDisallowPortalInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac1, Size: 1]
	bool bPortalOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac2, Size: 1]
	FortPlayerStateAthena* CachedOwningPlayerState;//[Offset: 0xae0, Size: 8]
	Texture2DDynamic* ThumbnailTexture;//[Offset: 0xaf8, Size: 8]
	CapsuleComponent* InteractIconPlacementCapsule;//[Offset: 0xb10, Size: 8]
	bool bForceUpdateInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb29, Size: 1]
	void UpdateThumbnail();// 0xcedd840
	void TeleportVehicle(FortAthenaVehicle* Vehicle);// 0xcedd798
	void TeleportPlayerToLinkedVolume(FortPlayerPawn* PlayerPawn, bool bUseSpawnTags);// 0xcedd6a8
	void TeleportPlayerForPlotLoadComplete(FortPlayerPawn* PlayerPawn);// 0xcedd600
	void TeleportPlayer(FortPlayerPawn* PlayerPawn, out const Rotator TeleportRotation);// 0xcedd510
	void StartedPlotLoadForUser(out const AsyncTaskResult Result);// 0xcedd3e8
	void SetInteractionInteractComponent(PrimitiveComponent* PrimitiveComponent);// 0xcedd340
	void SetInteractionDisplayWidget(UserWidget* DisplayWidget);// 0xcedd298
	void SetHUDPointerOrigin(Vector NewPointerOrigin);// 0xcedd1f0
	void ServerOnInteractWithIslandPortal(const FortPlayerPawn* InteractingPawn);// 0xbbc0600
	void PortalOpenChanged();// 0xbbc0600
	void PopulationChanged();// 0xbbc0600
	void OwningPlayerChanged();// 0xbbc0600
	void OverlappingOnBeginPlay(Actor* Actor);// 0xbbc0600
	void OnVolumeManagerUserGeneratedContentRestrictionsChanged(FortVolume* Volume, bool bRestrictionEnabled);// 0xcedd100
	void OnUserGeneratedContentRestrictionsChanged(bool bRestrictionEnabled);// 0xcedd050
	void OnUnloadPlotComplete(out const AsyncTaskResult Result);// 0xcedcf28
	void OnThumbnailTextureReady();// 0xbbc0600
	void OnRep_VolumeStatus();// 0xcedcf14
	void OnRep_PublishedPortal();// 0xcedcf00
	void OnRep_PortalOpen();// 0xcedceec
	void OnRep_PopulationChanged();// 0xcedced8
	void OnRep_PlayersReady();// 0xcedcec4
	void OnRep_OwningPlayer();// 0xcedceb0
	void OnRep_IslandInfo();// 0xcedce9c
	void OnRep_ErrorState();// 0xcedce88
	void OnReceivedNewIslandInfo();// 0xbbc0600
	void OnPlayerPawnTeleported(FortPlayerPawn* PlayerPawn, bool bTeleportedToIslandStart);// 0xcedcd98
	void OnClientLoadedStateChanged();// 0xcedcd84
	void NotifyTeleportedVehicle(Actor* VehicleActor);// 0xcedccd4
	void NotifyTeleportedPlayerPawn(FortPlayerPawn* PlayerPawn, bool bTeleportedToIslandStart);// 0xbbc0600
	void LogIslandTeleportation();// 0xcedccc0
	bool IsPortalOpen();// 0xcedcc88
	bool IsPortalInteractable();// 0xcedcc50
	FText GetVolumeDisplayName();// 0xcedcb80
	FString GetVideoID();// 0xcedcae0
	int GetThumbnailWidth();// 0xcedcaac
	int GetThumbnailHeight();// 0xcedca78
	FText GetTagline();// 0xcedc9a8
	enum GetPrivacy();// 0xcedc974
	byte GetPopulation();// 0xcedc958
	FortPlayerStateAthena* GetPlayerState();// 0xcedc924
	FString GetMnemonic();// 0xcedc884
	FortVolume* GetLinkedVolume();// 0xcedc850
	bool GetIsPublishedPortal();// 0xcedc818
	FString GetIslandID();// 0xcedc778
	CreativeIslandDescriptionTag[] GetIslandDescriptionTags();// 0xcedc708
	FString GetImageURL();// 0xcedc668
	Vector GetHUDPointerOrigin();// 0xcedc644
	FString[] GetDescriptionTags();// 0xcedc570
	FText GetCreatorName();// 0xcedc4a0
	void FinishedReadingCloudFiles(out const AsyncTaskResult Result);// 0xcedc378
	void ErrorStateChanged();// 0xbbc0600
	void DisplayNameChanged();// 0xbbc0600
	void CuratedPortalChanged();// 0xbbc0600
	void ClientSaveStateChanged(bool bSaving);// 0xcedc2c8
	void ClientSaveDisplayChanged(bool bSaving);// 0xbbc0600
	void CheckMinigameOnTeleportComplete(FortPlayerPawn* PlayerPawn, bool bTeleportedToIslandStart);// 0xcedc1d8
	bool BlueprintUseMobileHighlight();// 0xbbc0600
	bool BlueprintDisplayMobileInteractPrompt();// 0xbbc0600

--------------------------------
Class: AsyncTaskResult
	bool bSucceeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ErrorCode;//[Offset: 0x8, Size: 16]
	FText ErrorMessage;//[Offset: 0x18, Size: 24]

--------------------------------
Class: CreativeLoadedLinkData
	FString CreatorName;//[Offset: 0x0, Size: 16]
	FString SupportCode;//[Offset: 0x10, Size: 16]
	FString Mnemonic;//[Offset: 0x20, Size: 16]
	enum Privacy;//[Offset: 0x30, Size: 1]
	int Version;//[Offset: 0x34, Size: 4]
	LocalizedStringPair[] LinkTitle;//[Offset: 0x38, Size: 16]
	FText AltTitle;//[Offset: 0x48, Size: 24]
	LocalizedStringPair[] LinkTagline;//[Offset: 0x60, Size: 16]
	FString[] DescriptionTags;//[Offset: 0x70, Size: 16]
	LocalizedStringPair[] IslandIntroduction;//[Offset: 0x80, Size: 16]
	FString LinkYoutubeId;//[Offset: 0x90, Size: 16]
	FString ImageUrl;//[Offset: 0xa0, Size: 16]
	FString IslandType;//[Offset: 0xb0, Size: 16]
	FString QuestContextTag;//[Offset: 0xc0, Size: 16]
	FString AccountId;//[Offset: 0xd0, Size: 16]
	CreativeIslandMatchmakingSettings MatchmakingSettings;//[Offset: 0xe0, Size: 80]
	FString[] PlaylistOptions;//[Offset: 0x130, Size: 16]
	FString LinkType;//[Offset: 0x140, Size: 16]

--------------------------------
Class: LocalizedStringPair
	FString Locale;//[Offset: 0x0, Size: 16]
	FString TextLiteral;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CreativeIslandMatchmakingSettings
	int MinimumNumberOfPlayers;//[Offset: 0x0, Size: 4]
	int MaximumNumberOfPlayers;//[Offset: 0x4, Size: 4]
	FString MmsType;//[Offset: 0x8, Size: 16]
	FString MmsPrivacy;//[Offset: 0x18, Size: 16]
	FString Override_Playlist;//[Offset: 0x28, Size: 16]
	int PlayerCount;//[Offset: 0x38, Size: 4]
	int NumberOfTeams;//[Offset: 0x3c, Size: 4]
	int PlayersPerTeam;//[Offset: 0x40, Size: 4]
	bool bAllowJoinInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	enum JoinInProgressType;//[Offset: 0x48, Size: 4]
	byte JoinInProgressTeam;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: CreativeIslandDescriptionTag
	FString Name;//[Offset: 0x0, Size: 16]
	FText DisplayText;//[Offset: 0x10, Size: 24]

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: FortCreativeRealEstatePlotManager.Info.Actor.Object
	ActiveRealEstatePlotInfo[] ActiveCreativeRealEstatePlots;//[Offset: 0x220, Size: 16]

--------------------------------
Class: ActiveRealEstatePlotInfo
	FortCreativeRealEstatePlotItemDefinition* Plot;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]

--------------------------------
Class: FortCreativeRealEstatePlotItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FText UIDisplayName;//[Offset: 0x3c0, Size: 24]
	FText UIDisplayDescription;//[Offset: 0x3d8, Size: 24]
	FortPlaysetItemDefinition* BasePlayset;//[Offset: 0x3f0, Size: 40]
	FString InitialSaveFileName;//[Offset: 0x418, Size: 16]
	int SizeX;//[Offset: 0x428, Size: 4]
	int SizeY;//[Offset: 0x42c, Size: 4]
	Vector LocationOffset;//[Offset: 0x430, Size: 12]
	Rotator DefaultRotation;//[Offset: 0x43c, Size: 12]
	enum OffsetType;//[Offset: 0x448, Size: 1]
	SlateBrush MapImage;//[Offset: 0x450, Size: 136]
	int SortIndex;//[Offset: 0x4d8, Size: 4]
	bool bIsAvailableToUsers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	FortCreativeBudget[] CreativeBudgetOverrides;//[Offset: 0x4e0, Size: 16]
	bool bCreativeHeatmapThermometerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	float CreativeHeatmapThermometerInfluenceDistanceMultiplier;//[Offset: 0x4f4, Size: 4]
	int CreativeHeatmapThermometerCellSizeMultiplier;//[Offset: 0x4f8, Size: 4]
	FortCreativeGridCellBudget[] CreativeHeatmapThermometerBudgetOverrides;//[Offset: 0x500, Size: 16]

--------------------------------
Class: FortCreativeBudget
	int TotalBudget;//[Offset: 0x0, Size: 4]
	int UsedBudget;//[Offset: 0x4, Size: 4]
	enum Category;//[Offset: 0x8, Size: 1]
	bool bCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BudgetLowend;//[Offset: 0xc, Size: 4]
	int FixedInstanceCost;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortCreativeGridCellBudget
	int CellBudget;//[Offset: 0x0, Size: 4]
	enum Category;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FortSpecialActorReplicationInfo.Info.Actor.Object
	SpecialActorRepDataArray SpecialActorRepList;//[Offset: 0x220, Size: 280]
	SpecialActorStatData[] SpecialActorStats;//[Offset: 0x338, Size: 16]

--------------------------------
Class: SpecialActorRepDataArray.FastArraySerializer
	SpecialActorRepData[] SpecialActorList;//[Offset: 0x108, Size: 16]

--------------------------------
Class: SpecialActorRepData.FastArraySerializerItem
	FName SpecialActorID;//[Offset: 0xc, Size: 8]
	GameplayTag CategoryTag;//[Offset: 0x14, Size: 8]
	Actor* SpecialActor;//[Offset: 0x20, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x28, Size: 8]
	float ReplicationInterval;//[Offset: 0x30, Size: 4]
	float ReplicationIntervalDeviation;//[Offset: 0x34, Size: 4]
	float NextReplicationTime;//[Offset: 0x38, Size: 4]
	float LastActorNotRelevantTime;//[Offset: 0x3c, Size: 4]
	bool bActorIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bWasActorRelevantLastUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	Vector CurrentLocation;//[Offset: 0x44, Size: 12]
	float CurrentYaw;//[Offset: 0x50, Size: 4]
	SlateBrush MainIconBrush;//[Offset: 0x58, Size: 136]
	Vector2D MinimapScale;//[Offset: 0xe0, Size: 8]
	SlateBrush CompassIconBrush;//[Offset: 0xe8, Size: 136]
	Vector2D CompassScale;//[Offset: 0x170, Size: 8]
	bool bDrawCompassIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float CurrentHealth;//[Offset: 0x17c, Size: 4]
	float MaxHealth;//[Offset: 0x180, Size: 4]
	float CurrentShield;//[Offset: 0x184, Size: 4]
	float MaxShield;//[Offset: 0x188, Size: 4]
	FText DisplayName;//[Offset: 0x190, Size: 24]
	float RenderDistance;//[Offset: 0x1a8, Size: 4]
	GameplayTagContainer RenderTags;//[Offset: 0x1b0, Size: 32]
	float AddedToClientTime;//[Offset: 0x1d0, Size: 4]
	SpecialActorSingleStatData[] TrackedStats;//[Offset: 0x1d8, Size: 16]
	float LastLocationReplicationTime;//[Offset: 0x1e8, Size: 4]
	float PrevLocationReplicatedTime;//[Offset: 0x1ec, Size: 4]
	Vector_NetQuantize100 LastRepLocation;//[Offset: 0x1f0, Size: 12]
	Vector_NetQuantize100 PrevRepLocation;//[Offset: 0x1fc, Size: 12]
	Vector LerpStartLocation;//[Offset: 0x208, Size: 12]
	float LastYawReplicationTime;//[Offset: 0x214, Size: 4]
	float PrevYawReplicatedTime;//[Offset: 0x218, Size: 4]
	float LastRepYaw;//[Offset: 0x21c, Size: 4]
	float PrevRepYaw;//[Offset: 0x220, Size: 4]
	float LerpStartYaw;//[Offset: 0x224, Size: 4]
	bool bReplicateHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bReplicateShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]

--------------------------------
Class: SpecialActorStatData
	GameplayTag CategoryTag;//[Offset: 0x0, Size: 8]
	SpecialActorSingleStatData[] Stats;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortPropertyOverrideReplShared.Info.Actor.Object
	PropertyOverrideDataRepl ReplOverrides;//[Offset: 0x220, Size: 304]
	void OnRep_ReplOverrides();// 0xd1aa0e0

--------------------------------
Class: PropertyOverrideDataRepl.FastArraySerializer
	MulticastInlineDelegateProperty ReplNotifier;//[Size: 16]
	PropertyOverrideRepl[] PropertyOverridesRepl;//[Offset: 0x118, Size: 16]

--------------------------------
Class: PropertyOverrideRepl.FastArraySerializerItem
	PropertyOverrideId PropertyId;//[Offset: 0x10, Size: 8]
	FString PropertyScopedName;//[Offset: 0x18, Size: 16]
	FString PropertyData;//[Offset: 0x28, Size: 16]

--------------------------------
Class: StormCapDamageThresholdInfo
	float ThresholdFloor;//[Offset: 0x0, Size: 4]
	float ThresholdCeiling;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortWinnerPlayerData
	int PlayerID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameMemberInfoArray.FastArraySerializer
	GameMemberInfo[] Members;//[Offset: 0x108, Size: 16]
	FortGameStateAthena* OwningGameState;//[Offset: 0x118, Size: 8]

--------------------------------
Class: GameMemberInfo.FastArraySerializerItem
	byte SquadId;//[Offset: 0xc, Size: 1]
	byte TeamIndex;//[Offset: 0xd, Size: 1]
	UniqueNetIdRepl MemberUniqueId;//[Offset: 0x10, Size: 40]

--------------------------------
Class: DynamicLandData
	FName Name;//[Offset: 0x0, Size: 8]
	Vector WorldPosition;//[Offset: 0x8, Size: 12]
	SlateBrush LandBrush;//[Offset: 0x18, Size: 136]

--------------------------------
Class: FortAthenaMapInfo.Actor.Object
	ScalableFloat GoldenPoiPercents;//[Offset: 0x220, Size: 40]
	ScalableFloat GoldenPoiPercentOfSelectedAtBusPathEnd;//[Offset: 0x248, Size: 40]
	ScalableFloat GoldenPoiDistanceAroundBusPathEnd;//[Offset: 0x270, Size: 40]
	ScalableFloat GoldenPoiDistanceMustBeAwayFromBusPath;//[Offset: 0x298, Size: 40]
	FortTreasureChestSpawnInfo[] TreasureChestSpawnInfos;//[Offset: 0x2c0, Size: 16]
	FortAmmoBoxSpawnInfo[] AmmoBoxSpawnInfos;//[Offset: 0x2d0, Size: 16]
	BuildingGameplayActorSpawnDetails[] BuildingGameplayActorSpawnDetails;//[Offset: 0x2e0, Size: 16]
	class BuildingItemCollectorActor* VendingMachineClass;//[Offset: 0x2f0, Size: 8]
	ScalableFloat VendingMachineRarityCount;//[Offset: 0x2f8, Size: 40]
	class BuildingItemWeaponUpgradeActor* WeaponUpgradeMachineClass;//[Offset: 0x320, Size: 8]
	ScalableFloat WeaponUpgradeMachineSpawnChance;//[Offset: 0x328, Size: 40]
	class FortAthenaSupplyDrop* LlamaClass;//[Offset: 0x350, Size: 8]
	ScalableFloat LlamaQuantityMin;//[Offset: 0x358, Size: 40]
	ScalableFloat LlamaQuantityMax;//[Offset: 0x380, Size: 40]
	FortSupplyDropInfo*[] SupplyDropInfoList;//[Offset: 0x3a8, Size: 16]
	ScalableFloat SupplyDropMinPlacementHeight;//[Offset: 0x3b8, Size: 40]
	ScalableFloat SupplyDropMaxPlacementHeight;//[Offset: 0x3e0, Size: 40]
	class FortAthenaAircraft* AircraftClass;//[Offset: 0x408, Size: 8]
	Box2D AircraftSpawnZone;//[Offset: 0x410, Size: 20]
	Box2D AircraftDropZone;//[Offset: 0x424, Size: 20]
	Volume* AircraftDropVolume;//[Offset: 0x438, Size: 8]
	ScalableFloat SkydivingScanForImpactWorldZ;//[Offset: 0x440, Size: 40]
	ScalableFloat SkydivingForceDeployParachuteWorldZ;//[Offset: 0x468, Size: 40]
	AircraftFlightInfo[] FlightInfos;//[Offset: 0x490, Size: 16]
	BoxSphereBounds CachedPlayableBoundsForClients;//[Offset: 0x4a0, Size: 28]
	ScalableFloat AircraftDeviationAngle;//[Offset: 0x4c0, Size: 40]
	ScalableFloat AircraftDistanceFromMidLine;//[Offset: 0x4e8, Size: 40]
	ScalableFloat AircraftHeight;//[Offset: 0x510, Size: 40]
	ScalableFloat AircraftSpeed;//[Offset: 0x538, Size: 40]
	ScalableFloat AircraftDesiredDoorOpenTime;//[Offset: 0x560, Size: 40]
	Volume* PlayableBoundsVolume;//[Offset: 0x588, Size: 8]
	ScalableFloat SafeZoneStartDelay;//[Offset: 0x590, Size: 40]
	ScalableFloat SafeZoneStartingRadius;//[Offset: 0x5b8, Size: 40]
	FortSafeZoneVolumeDefinition[] SafeZoneVolumeDefinitions;//[Offset: 0x5e0, Size: 16]
	FortSafeZoneDefinition SafeZoneDefinition;//[Offset: 0x5f0, Size: 664]
	FortSafeZoneStorm* SafeZoneStorm;//[Offset: 0x888, Size: 8]
	BuildingFoundation* WarmupBuildingFoundation;//[Offset: 0x890, Size: 40]

--------------------------------
Class: BuildingGameplayActorSpawnDetails
	class BuildingGameplayActor* BuildingGameplayActorClass;//[Offset: 0x0, Size: 8]
	class Actor* TargetActorClass;//[Offset: 0x8, Size: 8]
	ScalableFloat SpawnHeight;//[Offset: 0x10, Size: 40]
	ScalableFloat GlobalMaxBGAs;//[Offset: 0x38, Size: 40]
	ScalableFloat MinNumToSpawnPerPhase;//[Offset: 0x60, Size: 40]
	ScalableFloat MaxNumToSpawnPerPhase;//[Offset: 0x88, Size: 40]
	ScalableFloat MinTimeToStartSpawnningBGAs;//[Offset: 0xb0, Size: 40]
	ScalableFloat MaxTimeToStartSpawnningBGAs;//[Offset: 0xd8, Size: 40]
	ScalableFloat MinTimeBetweenBGASpawns;//[Offset: 0x100, Size: 40]
	ScalableFloat MaxTimeBetweenBGASpawns;//[Offset: 0x128, Size: 40]
	ScalableFloat MinTimeToRepeatSpawningBGAs;//[Offset: 0x150, Size: 40]
	ScalableFloat MaxTimeToRepeatSpawningBGAs;//[Offset: 0x178, Size: 40]

--------------------------------
Class: BuildingItemCollectorActor.BuildingGameplayActor.BuildingActor.Actor.Object
	enum ItemCollectorBehavior;//[Offset: 0x801, Size: 1]
	bool bRequireAllForInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x802, Size: 1]
	bool bRequireAllForTurnIn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x802, Size: 1]
	bool bHasToHaveSomething;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x802, Size: 1]
	bool bIncrementCaptureCountWhenGoalIsReached;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x802, Size: 1]
	bool bCurrentInteractionSuccess;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x802, Size: 1]
	enum ItemCollectorState;//[Offset: 0x803, Size: 1]
	enum TrackingType;//[Offset: 0x804, Size: 1]
	FortPlayerController* ControllingPlayer;//[Offset: 0x808, Size: 8]
	FName DefaultItemLootTierGroupName;//[Offset: 0x810, Size: 8]
	DataTableRowHandle ItemCollectorHandle;//[Offset: 0x818, Size: 16]
	bool bCallOnLocalInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	bool bUseInstanceLootValueOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 1]
	FortItemQuantityPair[] OverrideOutputItems;//[Offset: 0x830, Size: 16]
	int OverrideGoal;//[Offset: 0x840, Size: 4]
	int NumInteractionsAllowed;//[Offset: 0x844, Size: 4]
	int NumInteractions;//[Offset: 0x848, Size: 4]
	CollectorUnitInfo[] ItemCollections;//[Offset: 0x850, Size: 16]
	MulticastInlineDelegateProperty ManualOutputOverride;//[Size: 16]
	FortWorldItemDefinition* ActiveInputItem;//[Offset: 0x870, Size: 8]
	FortWorldItemDefinition* ClientPausedActiveInputItem;//[Offset: 0x878, Size: 8]
	ScalableFloat ActiveItemRotationTime;//[Offset: 0x880, Size: 40]
	float ItemRotationTime;//[Offset: 0x8a8, Size: 4]
	float ItemRotationTimeVariation;//[Offset: 0x8ac, Size: 4]
	GameplayTagContainer AllowedItemRotationDamageTags;//[Offset: 0x8b8, Size: 32]
	ScalableFloat OutputDespenseDelayTime;//[Offset: 0x8d8, Size: 40]
	float DespensingDelayTime;//[Offset: 0x900, Size: 4]
	Vector LootSpawnLocation;//[Offset: 0x904, Size: 12]
	Rotator LootTossDirection;//[Offset: 0x944, Size: 12]
	float LootTossConeHalfAngle;//[Offset: 0x950, Size: 4]
	float LootTossSpeed;//[Offset: 0x954, Size: 4]
	bool bTossOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 1]
	bool bSpawnAmmoOnlyWhenCarryingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x959, Size: 1]
	int StartingGoalLevel;//[Offset: 0x95c, Size: 4]
	int StartingGoalLevelOverride;//[Offset: 0x960, Size: 4]
	Texture* InactiveItemTexture;//[Offset: 0x968, Size: 8]
	bool bPickupOwnedByLooter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 1]
	MulticastInlineDelegateProperty PickupSpawned;//[Size: 16]
	MulticastInlineDelegateProperty VehicleSpawned;//[Size: 16]
	CollectorTrackedData[] TrackedInteractionData;//[Offset: 0x998, Size: 16]
	void UpdateCollectorsActiveItem(int StartingSeedValue, FortWorldItemDefinition* InputItem, Texture* InputTexture, int CurrentGoal, int CurrentCollectedAmount, int CurrentCaptureCount, Texture* OutputTexture);// 0xbbc0600
	void SetLootSpawnWorldTransformOverride(out const Transform Transform);// 0xce55dec
	void SetItemCollectorState(enum InItemCollectorState);// 0xce55d44
	void ServerSpawnItem(const FortItemEntry OutputItem);// 0xce55c34
	void RefreshCollectorsActiveItem();// 0xce55c18
	void OnRep_TrackedInteractionData();// 0xce55c04
	void OnRep_ItemCollectorState();// 0xce55bf0
	void OnRep_ControllingPlayer();// 0xce55bdc
	void OnRep_ActiveInputItem();// 0xce55bc8
	void OnReachedDepositGoal(FortPlayerController* CurrentControllingPlayer, FortWorldItemDefinition* CurrentActiveInputItem);// 0xbbc0600
	void OnItemCollectorStateChanged(enum InItemCollectorState);// 0xbbc0600
	void OnForcedCycle();// 0xbbc0600
	bool HasEnoughDepositItems(FortPlayerController* FortPC, FortWorldItemDefinition* InputItem, bool bAllOrNothing, const byte InInteractionBeingAttempted);// 0xce55a40
	int GetTeamReachedGoalCount(byte InTeam);// 0xce55990
	bool GetOverrideRarity(out enum Rarity);// 0xce558c8
	int GetNumberOfCaptures(FortPlayerController* InFortPC, FortWorldItemDefinition* InInputItem);// 0xce557dc
	int GetDepositGoal(FortPlayerController* InFortPC, FortWorldItemDefinition* InInputItem);// 0xce556f0
	int GetDepositAmount(FortPlayerController* InFortPC, FortWorldItemDefinition* InInputItem);// 0xce55604
	FortWorldItemDefinition* GetCurrentActiveItem();// 0xce555e8
	void ClearLootSpawnWorldTransformOverride();// 0xce555d4

--------------------------------
Class: CollectorUnitInfo
	FortWorldItemDefinition* InputItem;//[Offset: 0x0, Size: 8]
	ScalableFloat InputCount;//[Offset: 0x8, Size: 40]
	Texture* OverrideInputItemTexture;//[Offset: 0x30, Size: 8]
	bool bUseDefinedOutputItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	FortWorldItemDefinition* OutputItem;//[Offset: 0x40, Size: 8]
	FortItemEntry[] OutputItemEntry;//[Offset: 0x48, Size: 16]
	FName OverrideOutputItemLootTierGroupName;//[Offset: 0x58, Size: 8]
	FortGameplayEffectDeliveryInfo OutputGameplayEffect;//[Offset: 0x60, Size: 152]
	Texture* OverrideOutputItemTexture;//[Offset: 0xf8, Size: 8]

--------------------------------
Class: CollectorTrackedData
	byte Team;//[Offset: 0x0, Size: 1]
	FortPlayerState* Player;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuildingItemWeaponUpgradeActor.BuildingItemCollectorActor.BuildingGameplayActor.BuildingActor.Actor.Object
	bool bAllowSecondInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	FortResourceItemDefinition* WoodItem;//[Offset: 0x9b8, Size: 8]
	FortResourceItemDefinition* MetalItem;//[Offset: 0x9c0, Size: 8]
	FortResourceItemDefinition* BrickItem;//[Offset: 0x9c8, Size: 8]
	ScalableFloat WoodCostCurve;//[Offset: 0x9d0, Size: 40]
	ScalableFloat MetalCostCurve;//[Offset: 0x9f8, Size: 40]
	ScalableFloat BrickCostCurve;//[Offset: 0xa20, Size: 40]
	ScalableFloat HorizontalWoodCostCurve;//[Offset: 0xa48, Size: 40]
	ScalableFloat HorizontalMetalCostCurve;//[Offset: 0xa70, Size: 40]
	ScalableFloat HorizontalBrickCostCurve;//[Offset: 0xa98, Size: 40]
	FText WeaponCannotBeUpgradedText;//[Offset: 0xac0, Size: 24]
	FText NotEnoughRessourcesText;//[Offset: 0xad8, Size: 24]
	enum UpgradeInteractionResult;//[Offset: 0xaf0, Size: 1]
	enum HorizontalUpgradeInteractionResult;//[Offset: 0xaf1, Size: 1]
	WeaponUpgradeRequiredResources* RequiredResources;//[Offset: 0xaf8, Size: 8]
	WeaponUpgradeRequiredResources* RequiredHorizontalResources;//[Offset: 0xb00, Size: 8]
	FortWeaponItemDefinition* CurrentWeaponDefinition;//[Offset: 0xb08, Size: 8]
	PlayerWeaponUpgradeHoldData[] PlayerToUpgradeWeaponData;//[Offset: 0xb10, Size: 16]
	enum UpgradedWeaponRarity;//[Offset: 0xb20, Size: 1]
	ScalableFloat InteractionTimeUncommon;//[Offset: 0xb28, Size: 40]
	ScalableFloat InteractionTimeRare;//[Offset: 0xb50, Size: 40]
	ScalableFloat InteractionTimeVeryRare;//[Offset: 0xb78, Size: 40]
	ScalableFloat InteractionTimeSuperRare;//[Offset: 0xba0, Size: 40]
	ScalableFloat InteractionTimeMythic;//[Offset: 0xbc8, Size: 40]
	byte BuildingAttachmentType;//[Offset: 0xbf0, Size: 1]
	bool bBlocksAttachmentPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf1, Size: 1]
	BuildingActor* BuildingActorAttachedTo;//[Offset: 0xbf8, Size: 8]
	void OnRep_AllowSecondInteraction();// 0xce57c28
	void FloorDestroyed(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xce579c8
	void BlueprintOnInteractInterrupted();// 0xbbc0600

--------------------------------
Class: FortResourceItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	byte ResourceType;//[Offset: 0x7a0, Size: 1]
	byte AccumulatingStatType;//[Offset: 0x7a1, Size: 1]
	FortCreativeTagsHelper CreativeTagsHelper;//[Offset: 0x7a8, Size: 16]

--------------------------------
Class: WeaponUpgradeRequiredResources.Object
	int RequiredWood;//[Offset: 0x28, Size: 4]
	int RequiredMetal;//[Offset: 0x2c, Size: 4]
	int RequiredBrick;//[Offset: 0x30, Size: 4]
	enum Direction;//[Offset: 0x34, Size: 1]

--------------------------------
Class: PlayerWeaponUpgradeHoldData
	FortPlayerController* InteractingPC;//[Offset: 0x0, Size: 8]
	FortWeapon* UpgradeTargetWeapon;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortAthenaSupplyDrop.BuildingGameplayActor.BuildingActor.Actor.Object
	CollisionProfileName GroundCollsionProfile;//[Offset: 0x7e0, Size: 8]
	SoundCue* WaveSpawnSoundCue;//[Offset: 0x7e8, Size: 8]
	FName LootTableNameOverride;//[Offset: 0x7f0, Size: 8]
	HitResult LastGroundLocationHitResult;//[Offset: 0x7f8, Size: 136]
	float SpawnOffsetZ;//[Offset: 0x880, Size: 4]
	SoundCue* SearchingSoundCueLoop;//[Offset: 0x888, Size: 8]
	bool bReplicateLongUseNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	int CachedSpecialActorIdx;//[Offset: 0x894, Size: 4]
	FName SpecialActorID;//[Offset: 0x898, Size: 8]
	ScalableFloat InStormDespawnTimeInSeconds;//[Offset: 0x8a0, Size: 40]
	float CachedInStormDespawnTimeInSeconds;//[Offset: 0x8c8, Size: 4]
	AudioComponent* LongInteractAudioComponent;//[Offset: 0x8d0, Size: 8]
	FortSpectateClickableMapIcon* SpectatorMapIcon;//[Offset: 0x8e8, Size: 8]
	int NumPlayersInteracting;//[Offset: 0x8f0, Size: 4]
	bool bVisualizePlayerInteractionChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 1]
	FortPickup* SpawnPickupFromItemEntry(FortWorldItemDefinition* ItemDefinition, out const FortItemEntry InItemEntry, int NumberToSpawn, FortPawn* TriggeringPawn, Vector Position, Vector Direction);// 0xcf214f0
	FortPickup* SpawnPickup(FortWorldItemDefinition* ItemDefinition, int NumberToSpawn, FortPawn* TriggeringPawn, Vector Position, Vector Direction);// 0xcf21340
	void SpawningLootOnDestruction(Controller* EventInstigator);// 0xcf21298
	FortGameModePickup* SpawnGameModePickup(FortWorldItemDefinition* ItemDefinition, class FortGameModePickup PickupClass, int NumberToSpawn, FortPawn* TriggeringPawn, Vector Position, Vector Direction);// 0xcf210a8
	void SetLootTableNameOverride(FName TableNameToUse);// 0xcf21000
	void SendSpawnLootAnalytics(FortPlayerController* FortPC, out const FortItemEntry[] ItemsToSpawn);// 0xcf20ed4
	void OnTouchedFillFloor(AthenaFillFloor* FillFloorActor);// 0xbbc0600
	void OnRep_NumPlayersInteracting();// 0xcf20ec0
	void OnLootSpawned();// 0xcf20eac
	void OnDespawnDueToStorm();// 0xcf20e98
	void OnCheckForBeingInStorm();// 0xcf20e84
	bool IsPlayingAReplay();// 0xcf20e4c
	bool GroundTrace(out const Vector TraceStart, out const Vector TraceEnd, out HitResult OutHit);// 0xcf20cd0
	void GetSupplyDropSpeedData(out float MinSpeed, out float MaxSpeed);// 0xcf20bcc
	void GetSupplyDropSpawnData(out float MinSpawnHeight, out float MaxSpawnHeight);// 0xcf20ac8
	Vector FindGroundLocationAt(out const Vector InLocation);// 0xcf20a0c

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortGameModePickup.FortPickupAthena.FortPickup.Actor.Object
	ScalableFloat InteractionTime;//[Offset: 0x638, Size: 40]
	void OnLocalInterrupt();// 0xbbc0600
	void OnLocalBeginLongUse();// 0xbbc0600

--------------------------------
Class: FortPickupAthena.FortPickup.Actor.Object

--------------------------------
Class: AthenaFillFloor.BuildingFillFloor.BuildingGameplayActor.BuildingActor.Actor.Object

--------------------------------
Class: BuildingFillFloor.BuildingGameplayActor.BuildingActor.Actor.Object
	ScalableFloat ZKillOffset;//[Offset: 0x7f8, Size: 40]
	ScalableFloat ZMovementToleranceOffset;//[Offset: 0x820, Size: 40]
	int StepIndex;//[Offset: 0x848, Size: 4]
	float FloorZ;//[Offset: 0x84c, Size: 4]
	float InitialDelay;//[Offset: 0x858, Size: 4]
	FillFloorPositionData FloorPositionData;//[Offset: 0x860, Size: 128]
	int NumStepsToUse;//[Offset: 0x8e0, Size: 4]
	float[] EventHeights;//[Offset: 0x8e8, Size: 16]
	ScalableFloat MovementTimerUpdatePeriod;//[Offset: 0x8f8, Size: 40]
	float FloorMovementSpeed;//[Offset: 0x924, Size: 4]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	void StopMovement();// 0xce4e144
	void StartMovement();// 0xce4e128
	void OnStopMoving(int CurrentStep);// 0xbbc0600
	void OnStartMoving(int CurrentStep);// 0xbbc0600
	void OnRep_StepIndex();// 0xce4e114
	void OnRep_IsMoving();// 0xce4e100
	void OnRep_FloorZ();// 0xce4e0ec
	void OnLavaOverlap(FortPlayerPawn* Pawn);// 0xce4e044
	void OnHeightEvent(float Height, int HeightEventIndex);// 0xbbc0600
	void InterpToStopCallback(out const HitResult ImpactResult, float Time);// 0xce4df2c
	bool GetFloorPositionFromStep(int Step, out float MoveTime, out float Height, out float PostMoveDelay);// 0xce4dd84

--------------------------------
Class: FillFloorPositionData
	ScalableFloat MoveTime;//[Offset: 0x0, Size: 40]
	ScalableFloat Height;//[Offset: 0x28, Size: 40]
	ScalableFloat PostMoveDelay;//[Offset: 0x50, Size: 40]

--------------------------------
Class: FortSpectateClickableMapIcon.ActorComponent.Object
	SlateBrush SpectatorMapIndicatorBrush;//[Offset: 0xb0, Size: 136]

--------------------------------
Class: FortSupplyDropInfo.DataAsset.Object
	FName SupplyDropID;//[Offset: 0x30, Size: 8]
	class FortAthenaSupplyDrop* SupplyDropClass;//[Offset: 0x38, Size: 8]
	enum SpawnType;//[Offset: 0x40, Size: 1]
	bool bIgnoreBlueprintOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	GameplayTag SpecialActorTag;//[Offset: 0x44, Size: 8]
	SlateBrush SpecialActorMinimapIconBrush;//[Offset: 0x50, Size: 136]
	Vector2D SpecialActorMinimapIconScale;//[Offset: 0xd8, Size: 8]
	SlateBrush SpecialActorCompassIconBrush;//[Offset: 0xe0, Size: 136]
	Vector2D SpecialActorCompassIconScale;//[Offset: 0x168, Size: 8]
	bool bShouldDrawCompassIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	FortSupplyDropGamePhaseData[] GamePhaseData;//[Offset: 0x178, Size: 16]
	enum ItemTrackType;//[Offset: 0x188, Size: 1]
	enum GamePhaseToSpawn;//[Offset: 0x189, Size: 1]
	int SafeZoneIndexToSpawn;//[Offset: 0x18c, Size: 4]
	GameplayTagContainer SupplyDropTrackingTags;//[Offset: 0x190, Size: 32]
	bool bShouldMaintainItemCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	ScalableFloat NumDeliveryItemsToSpawn;//[Offset: 0x1b8, Size: 40]
	ScalableFloat MinInitialDeliveryDelayTime;//[Offset: 0x1e0, Size: 40]
	ScalableFloat MaxInitialDeliveryDelayTime;//[Offset: 0x208, Size: 40]
	ScalableFloat MinTimeBetweenDrops;//[Offset: 0x230, Size: 40]
	ScalableFloat MaxTimeBetweenDrops;//[Offset: 0x258, Size: 40]
	ScalableFloat MinRespawnTime;//[Offset: 0x280, Size: 40]
	ScalableFloat MaxRespawnTime;//[Offset: 0x2a8, Size: 40]
	ScalableFloat MinTraceHeight;//[Offset: 0x2d0, Size: 40]
	ScalableFloat MaxTraceHeight;//[Offset: 0x2f8, Size: 40]

--------------------------------
Class: FortSupplyDropGamePhaseData
	enum GamePhase;//[Offset: 0x0, Size: 1]
	ScalableFloat SupplyDropMinPlacementHeight;//[Offset: 0x8, Size: 40]
	ScalableFloat SupplyDropMaxPlacementHeight;//[Offset: 0x30, Size: 40]
	ScalableFloat SupplyDropTimeInterval;//[Offset: 0x58, Size: 40]
	ScalableFloat SupplyDropTimeDeviation;//[Offset: 0x80, Size: 40]
	ScalableFloat SupplyDropSpawnMinWaitTime;//[Offset: 0xa8, Size: 40]
	ScalableFloat SupplyDropSpawnMaxWaitTime;//[Offset: 0xd0, Size: 40]
	ScalableFloat SupplyDropMinSpawnHeight;//[Offset: 0xf8, Size: 40]
	ScalableFloat SupplyDropMaxSpawnHeight;//[Offset: 0x120, Size: 40]
	ScalableFloat SupplyDropMinSpeed;//[Offset: 0x148, Size: 40]
	ScalableFloat SupplyDropMaxSpeed;//[Offset: 0x170, Size: 40]
	FortSupplyDropSubPhaseData SubPhaseData;//[Offset: 0x198, Size: 120]

--------------------------------
Class: FortSupplyDropSubPhaseData
	ScalableFloat SupplyDropMinCount;//[Offset: 0x0, Size: 40]
	ScalableFloat SupplyDropMaxCount;//[Offset: 0x28, Size: 40]
	ScalableFloat SupplyDropCap;//[Offset: 0x50, Size: 40]

--------------------------------
Class: FortSafeZoneVolumeDefinition
	Volume* Volume;//[Offset: 0x0, Size: 8]
	ScalableFloat RejectionChance;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FortSafeZoneDefinition
	ScalableFloat Count;//[Offset: 0x0, Size: 40]
	ScalableFloat Radius;//[Offset: 0x28, Size: 40]
	ScalableFloat ForceDistanceMin;//[Offset: 0x50, Size: 40]
	ScalableFloat ForceDistanceMax;//[Offset: 0x78, Size: 40]
	ScalableFloat RejectRadius;//[Offset: 0xa0, Size: 40]
	ScalableFloat RejectOuterDistance;//[Offset: 0xc8, Size: 40]
	ScalableFloat WaitTime;//[Offset: 0xf0, Size: 40]
	ScalableFloat ShrinkTime;//[Offset: 0x118, Size: 40]
	ScalableFloat MegaStormGridCellThickness;//[Offset: 0x140, Size: 40]
	ScalableFloat PlayerCapSolo;//[Offset: 0x168, Size: 40]
	ScalableFloat PlayerCapDuo;//[Offset: 0x190, Size: 40]
	ScalableFloat PlayerCapSquad;//[Offset: 0x1b8, Size: 40]

--------------------------------
Class: FortSafeZoneStorm.Actor.Object
	ComponentReference StormEffectsMeshRef;//[Offset: 0x220, Size: 40]

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 8]
	FName ComponentProperty;//[Offset: 0x8, Size: 8]
	FString PathToComponent;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortBroadcastSpectatorInfo.Info.Actor.Object
	int TotalNumPlayers;//[Offset: 0x220, Size: 4]
	int TotalNumTeams;//[Offset: 0x224, Size: 4]
	FortTeamPrivateInfo*[] TeamPrivateInfos;//[Offset: 0x228, Size: 16]
	FortBroadcastInfoPerPlayer[] PerPlayerInfo;//[Offset: 0x238, Size: 16]
	void OnRep_TotalNumTeams();// 0xcf3ec5c
	void OnRep_TotalNumPlayers();// 0xcf3ec48
	void OnRep_PerPlayerInfo();// 0xcf3ec34
	void HandleTeamInfosSet();// 0xcf3ec20
	void HandlePlayerAdded(PlayerController* AddedPlayer);// 0xcf3eb78

--------------------------------
Class: FortBroadcastInfoPerPlayer
	FortPlayerStateAthena* PlayerState;//[Offset: 0x0, Size: 8]
	FortInventory* PlayerInventory;//[Offset: 0x8, Size: 8]
	FortBroadcastRemoteClientInfo* PlayerClientInfo;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortBroadcastRemoteClientInfo.Actor.Object
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bRemoteIsInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	BuildingSMActor* RemoteEditActor;//[Offset: 0x278, Size: 8]
	int[] RemoteEditTileData;//[Offset: 0x280, Size: 16]
	class BuildingSMActor* RemoteBuildableClass;//[Offset: 0x290, Size: 8]
	byte RemoteBuildingMaterial;//[Offset: 0x298, Size: 1]
	bool bRemoteIsFullScreenMapActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool bRemoteIsInventoryActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	bool bRemoteCanDBNORevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 1]
	AthenaQuickChatActiveEntry RemoteChatEntry;//[Offset: 0x29c, Size: 20]
	BuildingWeakSpotData RemoteWeakspotData;//[Offset: 0x2b0, Size: 56]
	float RemoteRespawnTime;//[Offset: 0x2e8, Size: 4]
	int16 RemotePoiTagID;//[Offset: 0x2ec, Size: 2]
	int RemoteEventScore;//[Offset: 0x2f0, Size: 4]
	void ServerSetPlayerInventoryActive(bool bInventorypActive);// 0xcf3cc40
	void ServerSetPlayerInteracting(bool bInteracting);// 0xcf3cb5c
	void ServerSetPlayerHitMarkers(const Vector2D[] RelativeScreenPositions);// 0xcf3ca70
	void ServerSetPlayerFullScreenMapActive(bool bFullscreenMapActive);// 0xcf3c98c
	void ServerSetPlayerEventScore(int EventScore);// 0xcf3c8b4
	void ServerSetPlayerEditTileData(const int[] EditTileData);// 0xcf3c7c8
	void ServerSetPlayerCanDBNORevive(bool bCanDBNORevive);// 0xcf3c6e4
	void ServerSetPlayerBuildingMaterial(byte Material);// 0xcf3c60c
	void ServerSetPlayerBuildableClass(class BuildingSMActor BuildableClass);// 0xcf3c534
	void OnServerRespawnTimeChanged(float InRespawnTime);// 0xcf3c48c
	void OnServerRemoveMapMarker(MarkerID InMarkerID);// 0xcf3c3e0
	void OnServerPoiTagIDChanged(int16 InPoiTagID);// 0xcf3c338
	void OnServerPlayerWeakspotSpawned(out BuildingWeakSpotData WeakSpotData);// 0xcf3c264
	void OnServerPlayerQuickChatEntryChanged(out const AthenaQuickChatActiveEntry ChatEntry);// 0xcf3c190
	void OnServerPlayerEditActorChanged(BuildingSMActor* EditActor);// 0xcf3c0e8
	void OnServerPlayerDamagedResourceBuilding(BuildingSMActor* BuildingSMActor, byte PotentialResourceType, int PotentialResourceCount, bool bDestroyed, bool bJustHitWeakspot);// 0xcf3bf30
	void OnServerAddMapMarker(FortWorldMarkerData InMarkerData);// 0xcf3bd98
	void OnRep_RemoteWeakspotData();// 0xcf3bd84
	void OnRep_RemoteRespawnTime();// 0xcf3bd70
	void OnRep_RemotePoiTagID();// 0xcf3bd5c
	void OnRep_RemoteIsInventoryActive();// 0xcf3bd48
	void OnRep_RemoteIsInteracting();// 0xcf3bd34
	void OnRep_RemoteIsFullScreenMapActive();// 0xcf3bd20
	void OnRep_RemoteEventScore();// 0xcf3bd0c
	void OnRep_RemoteEditTileData();// 0xcf3bcf8
	void OnRep_RemoteEditActor();// 0xcf3bce4
	void OnRep_RemoteChatEntry();// 0xcf3bcd0
	void OnRep_RemoteCanDBNORevive();// 0xcf3bcbc
	void OnRep_RemoteBuildingMaterial();// 0xcf3bca8
	void OnRep_RemoteBuildableClass();// 0xcf3bc94
	void OnRep_bActive();// 0xcf3bc80
	void OnPlayerInventoryActiveChanged(bool bInventoryActive);// 0xcf3bbd0
	void OnPlayerInteractLongUseChanged(bool bInteracting, bool bLongUseInteractionCompleted);// 0xcf3bad8
	void OnPlayerHitMarkersChanged(out const Vector2D[] ScreenPositions);// 0xcf3ba18
	void OnPlayerFullScreenMapActiveChanged(bool bFullscreenMapActive);// 0xcf3b968
	void OnPlayerEventScoreChanged(int EventScore);// 0xcf3b8c0
	void OnPlayerEditPreviewChanged(BuildingSMActor* EditedActor);// 0xcf3b818
	void OnPlayerCanDBNOReviveChanged(bool bCanDBNORevive);// 0xcf3b768
	void OnPlayerBuildingMaterialChanged();// 0xcf3b754
	void OnPlayerBuildableClassChanged();// 0xcf3b740
	void ClientRemotePlayerRemoveMapMarker(MarkerID MarkerID);// 0xb63dc30
	void ClientRemotePlayerHitMarkers(const Vector2D[] RelativeScreenPositions);// 0xb63db74
	void ClientRemotePlayerDamagedResourceBuilding(BuildingSMActor* BuildingSMActor, byte PotentialResourceType, int PotentialResourceCount, bool bDestroyed, bool bJustHitWeakspot);// 0xb63d9b4
	void ClientRemotePlayerAddMapMarker(FortWorldMarkerData InMarkerData);// 0xb63d7e0

--------------------------------
Class: AthenaQuickChatActiveEntry
	AthenaQuickChatBank* Bank;//[Offset: 0x0, Size: 8]
	Object* ContextObject;//[Offset: 0x8, Size: 8]
	int16 ContextValue;//[Offset: 0x10, Size: 2]
	int8 Index;//[Offset: 0x12, Size: 1]

--------------------------------
Class: AthenaQuickChatBank.DataAsset.Object
	AthenaQuickChatLeafEntry[] ChatOptions;//[Offset: 0x30, Size: 16]

--------------------------------
Class: AthenaQuickChatLeafEntry
	FText Label;//[Offset: 0x0, Size: 24]
	FText FullChatMessage;//[Offset: 0x18, Size: 24]
	SlateBrush Brush;//[Offset: 0x30, Size: 136]
	bool bPopulateBrushFromContextObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	enum FilterType;//[Offset: 0xb9, Size: 1]
	AthenaEmojiItemDefinition* EmojiItemDefinition;//[Offset: 0xc0, Size: 8]
	enum TeamCommType;//[Offset: 0xc8, Size: 1]
	GameplayTag OptionGameplayTag;//[Offset: 0xcc, Size: 8]

--------------------------------
Class: AthenaEmojiItemDefinition.AthenaDanceItemDefinition.FortMontageItemDefinitionBase.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	GameplayTag EmojiGameplayCueTag;//[Offset: 0x8d8, Size: 8]
	AnimMontage* PreviewAnimation;//[Offset: 0x8e0, Size: 40]
	Texture2D* SpriteSheet;//[Offset: 0x908, Size: 40]
	IntPoint SheetDimensions;//[Offset: 0x930, Size: 8]
	int FrameIndex;//[Offset: 0x938, Size: 4]
	int FrameCount;//[Offset: 0x93c, Size: 4]
	MaterialInterface* BaseMaterial;//[Offset: 0x940, Size: 8]
	Vector IconSize;//[Offset: 0x948, Size: 12]
	LinearColor InitialColor;//[Offset: 0x954, Size: 16]
	Vector InitialLocation;//[Offset: 0x964, Size: 12]
	Vector InitialVelocity;//[Offset: 0x970, Size: 12]
	float LifetimeIntroSeconds;//[Offset: 0x97c, Size: 4]
	float LifetimeMidSeconds;//[Offset: 0x980, Size: 4]
	float LifetimeOutroSeconds;//[Offset: 0x984, Size: 4]
	MaterialInstance* GeneratedMaterial;//[Offset: 0x988, Size: 8]
	void ConfigureParticleSystem(ParticleSystemComponent* ParticleSystem, Texture2D* OverrideImage);// 0xce340cc

--------------------------------
Class: BuildingWeakSpotData
	Object* ParentObject;//[Offset: 0x0, Size: 8]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x8, Size: 12]
	Vector_NetQuantize10 Position;//[Offset: 0x14, Size: 12]
	int HitCount;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SplatterGridSystem.Object

--------------------------------
Class: FortCustomizationsPreloader.Object
	<CustomCharacterPart*> PrioritizedCharacterPartsNPCBudget;//[Offset: 0x88, Size: 80]
	<CustomCharacterPart*> PrioritizedCharacterPartsPlayerBudget;//[Offset: 0xd8, Size: 80]
	FortAIPawnCustomizationDefinition*[] PrioritizedAIPawnCustomizations;//[Offset: 0x128, Size: 16]

--------------------------------
Class: FortAIPawnCustomizationDefinition.PrimaryDataAsset.DataAsset.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x38, Size: 40]
	FortAIPawnMaterialDefinition[] OverrideMaterials;//[Offset: 0x60, Size: 16]
	class AnimInstance* AnimationBP;//[Offset: 0x70, Size: 40]

--------------------------------
Class: FortAIPawnMaterialDefinition
	MaterialInterface* Material;//[Offset: 0x0, Size: 40]
	bool bRequireDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AICharacterPartsPreloadData
	float Priority;//[Offset: 0x0, Size: 4]
	CustomCharacterPart* CharacterPart;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AIPawnCustomizationPreloadData
	float Priority;//[Offset: 0x0, Size: 4]
	FortAIPawnCustomizationDefinition* Customization;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PlaylistPropertyArray.FastArraySerializer
	PropertyOverride[] PropertyOverrides;//[Offset: 0x108, Size: 16]
	int PlaylistReplicationKey;//[Offset: 0x118, Size: 4]
	FortPlaylistAthena* BasePlaylist;//[Offset: 0x120, Size: 8]
	FortPlaylistAthena* OverridePlaylist;//[Offset: 0x128, Size: 8]
	<FString,PropertyOverrideScope> PropertyOverrideScopes;//[Offset: 0x130, Size: 80]

--------------------------------
Class: PropertyOverride.FastArraySerializerItem
	FString PropertyScope;//[Offset: 0x10, Size: 16]
	FString PropertyName;//[Offset: 0x20, Size: 16]
	FString PropertyData;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortPlaylistAthena.FortPlaylist.PrimaryDataAsset.DataAsset.Object
	bool bRewardsTrackPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 1]
	bool bRewardsAllowXPProgression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f6, Size: 1]
	bool bRewardForRevivingTeammates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f7, Size: 1]
	enum RewardPlacementBonusType;//[Offset: 0x3f8, Size: 1]
	int RewardsPlacementThreshold;//[Offset: 0x3fc, Size: 4]
	enum RewardTimePlayedType;//[Offset: 0x400, Size: 1]
	int RewardTimePlayedXPPerMinute;//[Offset: 0x404, Size: 4]
	int RewardTimePlayedXPFlatValue;//[Offset: 0x408, Size: 4]
	ScalableFloat InMatchXPRewardScalar;//[Offset: 0x410, Size: 40]
	DataTable* QuestEventXPTableOverride;//[Offset: 0x438, Size: 40]
	FortItemDefinition*[] FirstWinRewards;//[Offset: 0x460, Size: 16]
	FString[] CalendarEventsForEndOfMatchUpdate;//[Offset: 0x470, Size: 16]
	bool bAllowSinglePartyMatches;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bRequeueAfterFailedSessionAssignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	bool bIsTournament;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 1]
	bool bUseMultidivisionQueues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 1]
	int CompetitivePointClamp;//[Offset: 0x484, Size: 4]
	FString Strategy;//[Offset: 0x488, Size: 16]
	FName BotVersionPlaylistName;//[Offset: 0x498, Size: 8]
	int MaxBucketCapacity;//[Offset: 0x4a0, Size: 4]
	int MaxPendingMatches;//[Offset: 0x4a4, Size: 4]
	RatingExpansion[] PriorityRatingExpansion;//[Offset: 0x4a8, Size: 16]
	bool bUseInputRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	bool bAllowBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 1]
	int MinBackfillMatchPlayers;//[Offset: 0x4bc, Size: 4]
	int MaxTeamScoreAllowedForBackfill;//[Offset: 0x4c0, Size: 4]
	float MaxTeamScoreDiscrepancyPercent;//[Offset: 0x4c4, Size: 4]
	bool bUsePlayerRating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool bEnableRatingUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	bool bEnableDynamicBotBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ca, Size: 1]
	FString RatingType;//[Offset: 0x4d0, Size: 16]
	bool bRequireCrossplayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	bool bLimitedPoolMatchmakingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 1]
	bool bAllowedInLeto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2, Size: 1]
	bool bAllowInGameMatchMaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e3, Size: 1]
	bool bAllowReturnToMatchmakingOriginOnMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	bool bAllowBotsInHumanTeams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	bool bForceNewPlayerStateOnReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 1]
	int DADTestValue;//[Offset: 0x4e8, Size: 4]
	enum WinConditionType;//[Offset: 0x4ec, Size: 1]
	ScalableFloat TimedWinConditionTime;//[Offset: 0x4f0, Size: 40]
	ScalableFloat FinalWinConditionTime;//[Offset: 0x518, Size: 40]
	WinConditionScoreData ScoringData;//[Offset: 0x540, Size: 96]
	ScalableFloat TimedSafeZonePhaseTime;//[Offset: 0x5a0, Size: 40]
	int WinConditionPlayersRemaining;//[Offset: 0x5c8, Size: 4]
	ScalableFloat NumWinningTeamsCN;//[Offset: 0x5d0, Size: 40]
	bool bIsLargeTeamGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	bool bShouldSpreadTeams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 1]
	bool bIgnoreDefaultQuests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa, Size: 1]
	bool bDisallowMultipleWeaponsOfType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fb, Size: 1]
	bool bAllowEditingEnemyWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	int LootDropRounds;//[Offset: 0x600, Size: 4]
	float ForceKickAfterDeathTime;//[Offset: 0x604, Size: 4]
	enum ForceKickAfterDeathMode;//[Offset: 0x608, Size: 1]
	enum QuickbarSelectionPreservationMode;//[Offset: 0x609, Size: 1]
	GameplayTagContainer AlwaysAllowedNativeActions;//[Offset: 0x610, Size: 32]
	ScalableFloat PawnForcedCullDistance;//[Offset: 0x630, Size: 40]
	ScalableFloat TransientMatchStartBonusCurrency;//[Offset: 0x658, Size: 40]
	ItemAndCount[] InventoryItemsToGrant;//[Offset: 0x680, Size: 16]
	bool bIgnoreGameModeStartingInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	bool bRequirePickaxeInStartingInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	float DestructedBuildingInGridTimeout;//[Offset: 0x694, Size: 4]
	bool bTeamFilterDestructedBuildingsInGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	bool bOwnerFilterDestructedBuildingsInGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	bool bEnableBuildingCreatedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 1]
	float MaximumAspectRatio;//[Offset: 0x69c, Size: 4]
	bool bVehiclesDestroyAllBuildingSMActorsOnContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	class Actor* VehicleBoundsXYSplineClass;//[Offset: 0x6a8, Size: 8]
	bool bAutoAcquireSpawnChip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	SoundMix* SoundMix;//[Offset: 0x6b8, Size: 8]
	bool bAllowHardcoreModifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bForceCameraFadeOnRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	float MinTimeBeforeRespawnCameraFade;//[Offset: 0x6c4, Size: 4]
	enum RespawnType;//[Offset: 0x6c8, Size: 1]
	ScalableFloat RespawnHeight;//[Offset: 0x6d0, Size: 40]
	ScalableFloat MaxRespawnHeight;//[Offset: 0x6f8, Size: 40]
	ScalableFloat RespawnTime;//[Offset: 0x720, Size: 40]
	bool bRespawnInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	ScalableFloat RespawnLevelStreamDistanceToForceSceenFade;//[Offset: 0x750, Size: 40]
	bool bSkipWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	bool bSkipAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	bool bAllowWarmupPlayerStartInSetupPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 1]
	float WarmupEarlyRequiredPlayerPercent;//[Offset: 0x77c, Size: 4]
	enum AirCraftBehavior;//[Offset: 0x780, Size: 1]
	bool bUseCustomAircraftPathSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 1]
	bool bUseSameDirectionForOpposingAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x782, Size: 1]
	bool bAircraftDropOnlyWithinSafeZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x783, Size: 1]
	ScalableFloat AircraftSafetyMarginPct;//[Offset: 0x788, Size: 40]
	float AircraftPathOffsetFromMapCenterMin;//[Offset: 0x7b0, Size: 4]
	float AircraftPathOffsetFromMapCenterMax;//[Offset: 0x7b4, Size: 4]
	float AircraftPathMidpointSelectionRadiusMin;//[Offset: 0x7b8, Size: 4]
	float AircraftPathMidpointSelectionRadiusMax;//[Offset: 0x7bc, Size: 4]
	float LastStepPushAircraftCenterLine_Magnitude;//[Offset: 0x7c0, Size: 4]
	float LastStepPushAircraftCenterLine_Direction;//[Offset: 0x7c4, Size: 4]
	bool bDisableAudioShapes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	float NonRenderedCharacterAnimationScale;//[Offset: 0x7cc, Size: 4]
	class FortMissionGenerator* PlaylistMissionGen;//[Offset: 0x7d0, Size: 8]
	bool bForceLTMLoadingScreenBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	class UserWidget* LoadingScreenWidget;//[Offset: 0x7e0, Size: 40]
	UIExtension[] UIExtensions;//[Offset: 0x808, Size: 16]
	FortPlaylistUIInfo* PlaylistUIData;//[Offset: 0x818, Size: 40]
	FortAthenaHUDInfoDataAsset* HUDInfoDataAsset;//[Offset: 0x840, Size: 40]
	Texture2D* MissionIcon;//[Offset: 0x868, Size: 8]
	FText UIDisplaySubName;//[Offset: 0x870, Size: 24]
	bool bLimitedTimeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	bool bDisable_ReportAPlayerReason_TeamingUpWithEnemies_WhileInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 1]
	bool bDisplayScoreInHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88a, Size: 1]
	bool bDisplayRespawnWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88b, Size: 1]
	bool bDisableMatchStatsDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	DataTableRowHandle SpecialActorInputActionDataTableRow;//[Offset: 0x890, Size: 16]
	bool bEnforceFullSquadInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	bool bShowEliminationIndicatorForSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 1]
	bool bShowEliminationIndicatorForSquadmates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a2, Size: 1]
	bool bShowEliminationIndicatorForTeammates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a3, Size: 1]
	bool bShowEliminationIndicatorForEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	ScalableFloat EliminationIndicatorMaxDistance;//[Offset: 0x8a8, Size: 40]
	bool bLeaderboardDisplaysIndividuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool bUsePointLeaderAsTeamLeaderInLeaderboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	enum TypeOfLeaderboard;//[Offset: 0x8d2, Size: 1]
	ScalableFloat OnlyRespectsGlobalSettingForReplayRecording;//[Offset: 0x8d8, Size: 40]
	ScalableFloat DisableReplays;//[Offset: 0x900, Size: 40]
	ScalableFloat EnableServerReplays;//[Offset: 0x928, Size: 40]
	ScalableFloat ShouldUseCustomGameChannel;//[Offset: 0x950, Size: 40]
	ScalableFloat ShouldRejectDefaultGameChat;//[Offset: 0x978, Size: 40]
	enum CustomGameChannel;//[Offset: 0x9a0, Size: 1]
	ScalableFloat ShouldRecommendCustomGameChannel;//[Offset: 0x9a8, Size: 40]
	SlateBrush MapImageOverride;//[Offset: 0x9d0, Size: 136]
	float MapScaleOverride;//[Offset: 0xa58, Size: 4]
	bool bDrawCreativeDynamicIslands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c, Size: 1]
	class FortInGameMapManager* MapManagerClass;//[Offset: 0xa60, Size: 40]
	bool bUseAsyncPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa88, Size: 1]
	enum ServerMaxTickRate;//[Offset: 0xa89, Size: 1]
	enum SafeZoneStartUp;//[Offset: 0xa8a, Size: 1]
	bool bWarmUpInStorm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8b, Size: 1]
	float StormEffectDelay;//[Offset: 0xa8c, Size: 4]
	bool bDisplayFinalStormPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	bool bDrawLineToStormCircleIfOutside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa91, Size: 1]
	int LastSafeZoneIndex;//[Offset: 0xa94, Size: 4]
	CurveTable* SafeZoneLocationBlacklist;//[Offset: 0xa98, Size: 40]
	DataTable* CreativeItemListSource;//[Offset: 0xac0, Size: 40]
	DataTable* UpgradeBenchData;//[Offset: 0xae8, Size: 40]
	DataTable* AILootOnDeathData;//[Offset: 0xb10, Size: 40]
	DataTable* HeroStats;//[Offset: 0xb38, Size: 40]
	bool bUseDefaultSupplyDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 1]
	SupplyDropModifierData[] SupplyDropModifierList;//[Offset: 0xb68, Size: 16]
	FortSupplyDropInfo*[] SupplyDropInfoList;//[Offset: 0xb78, Size: 16]
	DataTable*[] QueryNameToLootChanceScaleTables;//[Offset: 0xb88, Size: 16]
	DataTable*[] QueryNameToLootCountScaleTables;//[Offset: 0xb98, Size: 16]
	FortAthenaExitCraftInfo* ExitCraftInfo;//[Offset: 0xba8, Size: 40]
	bool bPlaylistUsesCustomCharacterParts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 1]
	CharacterPreloadBlock[] CharactersToPreload;//[Offset: 0xbd8, Size: 16]
	CharacterFallbackPreloadBlock[] CharacterFallbackTagsToPreload;//[Offset: 0xbe8, Size: 16]
	GameplayTag[] AIPawnCustomizationFallbackTagsToPreload;//[Offset: 0xbf8, Size: 16]
	FortSpawnActorInfo*[] SpawnActorInfoList;//[Offset: 0xc08, Size: 16]
	int NetActorDiscoveryBudgetInKBytesPerSec;//[Offset: 0xc18, Size: 4]
	int NetDormancyNumFramesUntilObsolete;//[Offset: 0xc1c, Size: 4]
	bool bEnableCreativeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc20, Size: 1]
	bool bEnableSpawningStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc20, Size: 1]
	bool bAllowTeamSwitching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc20, Size: 1]
	bool bShowTeamSelectButton;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc20, Size: 1]
	bool bAllowLayoutRequirementsFeature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc20, Size: 1]
	bool bUseCreativeStarterIsland;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc20, Size: 1]
	bool bForceCustomMinigame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc20, Size: 1]
	bool bUsesAnimationSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc21, Size: 1]
	AnimationSharingSetup* AnimationSharingSetup;//[Offset: 0xc28, Size: 40]
	bool bAllowBroadcasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	bool bAllowSpectateAPartyMember;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 1]
	bool bActivateCurie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc52, Size: 1]
	FortCurieSettings* CurieSettings;//[Offset: 0xc58, Size: 8]
	int PlaylistStatId;//[Offset: 0xc60, Size: 4]
	bool bAccumulateToProfileStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 1]
	bool bSaveToRecentGameList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc65, Size: 1]
	bool bEnableStatsV2Stats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc66, Size: 1]
	AthenaAISettings* AISettings;//[Offset: 0xc68, Size: 8]
	class FortServerBotManagerAthena* ServerBotManagerClass;//[Offset: 0xc70, Size: 8]
	class FortTimeOfDayManager* DefaultCreativeTOD;//[Offset: 0xc78, Size: 40]
	static int GetMaxTeamSize(const Object* InWorldContext, const FortPlaylistAthena* InPlaylist);// 0xd19ae94
	static int GetMaxPlayerCount(const Object* InWorldContext, const FortPlaylistAthena* InPlaylist);// 0xd19adb0
	static int GetMaxNumberOfTeams(const Object* InWorldContext, const FortPlaylistAthena* InPlaylist);// 0xd19accc
	static int GetLastTeamNumber(const Object* InWorldContext, const FortPlaylistAthena* InPlaylist);// 0xd19abe8
	void CreateCalendarPayload_RegionalOverride();// 0xd19abd4
	void CreateCalendarPayload_Enabling();// 0xd19abc0

--------------------------------
Class: FortPlaylist.PrimaryDataAsset.DataAsset.Object
	int PlaylistId;//[Offset: 0x30, Size: 4]
	FName PlaylistName;//[Offset: 0x34, Size: 8]
	enum GameType;//[Offset: 0x3c, Size: 4]
	int MinPlayers;//[Offset: 0x40, Size: 4]
	int MaxPlayers;//[Offset: 0x44, Size: 4]
	bool bUnderfillMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	int UnderfilledMaxPlayers;//[Offset: 0x4c, Size: 4]
	bool bOverrideMaxPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int MaxHumanAndBotParticipants;//[Offset: 0x54, Size: 4]
	int MaxTeamCount;//[Offset: 0x58, Size: 4]
	int MaxTeamSize;//[Offset: 0x5c, Size: 4]
	int MaxSocialPartySize;//[Offset: 0x60, Size: 4]
	int MaxSquadSize;//[Offset: 0x64, Size: 4]
	int MaxSquads;//[Offset: 0x68, Size: 4]
	bool EnforceSquadFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bAllowSquadFillOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 1]
	bool bShouldFillWhenNoSquadFillOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 1]
	bool bAllowJoinInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f, Size: 1]
	FText JoinInProgressMatchType;//[Offset: 0x70, Size: 24]
	int EndOfMatchXpFirstElim;//[Offset: 0x88, Size: 4]
	int EndOfMatchXpMultiplier;//[Offset: 0x8c, Size: 4]
	PlaylistUserOptions* UserOptions;//[Offset: 0x90, Size: 8]
	bool bEnableBackfillDuringWarmupPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	float TimeAfterWarmupToDisableBackfill;//[Offset: 0x9c, Size: 4]
	FName RichPresenceAssetName;//[Offset: 0xa0, Size: 8]
	World* PreloadPersistentLevel;//[Offset: 0xa8, Size: 40]
	World*[] AdditionalLevels;//[Offset: 0xd0, Size: 16]
	World*[] AdditionalLevelsServerOnly;//[Offset: 0xe0, Size: 16]
	FString[] BuiltInGameFeaturePluginsToLoad;//[Offset: 0xf0, Size: 16]
	ExternalContent* RootExternalContent;//[Offset: 0x100, Size: 8]
	FString OverrideGameFeaturePluginToDownload;//[Offset: 0x108, Size: 16]
	byte DefaultFirstTeam;//[Offset: 0x118, Size: 1]
	byte DefaultLastTeam;//[Offset: 0x119, Size: 1]
	GameplayTagContainer GameplayTagContainer;//[Offset: 0x120, Size: 32]
	enum FriendlyFireType;//[Offset: 0x140, Size: 1]
	bool bUseFriendlyFireAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	int LootLevel;//[Offset: 0x144, Size: 4]
	GameplayTagQuery LootTagQuery;//[Offset: 0x148, Size: 72]
	int BuildingLevelOverride;//[Offset: 0x190, Size: 4]
	enum DBNOType;//[Offset: 0x194, Size: 1]
	ScalableFloat SpawnImmunityTime;//[Offset: 0x198, Size: 40]
	enum[] SkippedGamePhaseNotification;//[Offset: 0x1c0, Size: 16]
	FortGameplayModifierItemDefinition*[] ModifierList;//[Offset: 0x1d0, Size: 16]
	class FortTimeOfDayManager* TimeOfDayManager;//[Offset: 0x1e0, Size: 40]
	bool bIgnoreWeatherEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	FortItemDefinition*[] ItemsToFullyLoad;//[Offset: 0x210, Size: 16]
	FortSharedAssetGroup* SharedAssetGroup;//[Offset: 0x220, Size: 8]
	FortConditionalAssetGroup* ConditionalAssetGroup;//[Offset: 0x228, Size: 8]
	bool bIsDefaultPlaylist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	FText UIDisplayName;//[Offset: 0x238, Size: 24]
	FText UIDescription;//[Offset: 0x250, Size: 24]
	GameplayTagContainer HUDElementsToHide;//[Offset: 0x268, Size: 32]
	DataTable* LootTierData;//[Offset: 0x288, Size: 40]
	DataTable* LootPackages;//[Offset: 0x2b0, Size: 40]
	FortPlaylistBaseCurveTableOverride[] BaseCurveTableOverrides;//[Offset: 0x2d8, Size: 16]
	FortPlaylistBaseDataTableOverride[] BaseDataTablesOverride;//[Offset: 0x2e8, Size: 16]
	DataTable* RangedWeapons;//[Offset: 0x2f8, Size: 40]
	CurveTable* GameData;//[Offset: 0x320, Size: 40]
	CurveTable* ResourceRates;//[Offset: 0x348, Size: 40]
	SoundBase* SkydiveMusic;//[Offset: 0x370, Size: 40]
	SoundBase* SkydiveMusicOutroStinger;//[Offset: 0x398, Size: 40]
	SoundBase* RespawnStinger;//[Offset: 0x3c0, Size: 40]
	float GarbageCollectionFrequency;//[Offset: 0x3e8, Size: 4]
	float ServerPerformanceEventFrequency;//[Offset: 0x3ec, Size: 4]
	float ServerMetricsEventFrequency;//[Offset: 0x3f0, Size: 4]
	bool bUseLocalizationService;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]

--------------------------------
Class: RatingExpansion
	int Priority;//[Offset: 0x0, Size: 4]
	int RatingDelta;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WinConditionScoreData
	ScalableFloat GoalScore;//[Offset: 0x0, Size: 40]
	ScalableFloat BigScoreThreshold;//[Offset: 0x28, Size: 40]
	AthenaScoreData[] ScoreDataList;//[Offset: 0x50, Size: 16]

--------------------------------
Class: AthenaScoreData
	enum ScoringEvent;//[Offset: 0x0, Size: 1]
	FText ScoreNameText;//[Offset: 0x8, Size: 24]
	GameplayTagContainer EventInclusionTags;//[Offset: 0x20, Size: 32]
	int NumOccurrencesForScore;//[Offset: 0x40, Size: 4]
	int NumOccurrencesPermitted;//[Offset: 0x44, Size: 4]
	ScalableFloat ScoreAwarded;//[Offset: 0x48, Size: 40]

--------------------------------
Class: ExternalContent.DataAsset.Object
	enum Type;//[Offset: 0x30, Size: 1]
	FString ModuleId;//[Offset: 0x38, Size: 16]
	FString Label;//[Offset: 0x48, Size: 16]
	GameplayTagContainer Tags;//[Offset: 0x58, Size: 32]
	bool IsLoaded();// 0xce912ac

--------------------------------
Class: FortSharedAssetGroup.DataAsset.Object
	FortSharedAssetList*[] SharedAssetsToLoad;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortSharedAssetList.DataAsset.Object
	FortWorldItemDefinition*[] SharedItemsToFullyLoad;//[Offset: 0x30, Size: 16]
	World*[] SharedAdditionalLevels;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortConditionalAssetGroup.DataAsset.Object
	<FString,FortSharedAssetList*> ConditionalAssetsToLoad;//[Offset: 0x30, Size: 80]

--------------------------------
Class: FortPlaylistBaseCurveTableOverride
	CurveTable* BaseTable;//[Offset: 0x0, Size: 40]
	CurveTable* OverrideTable;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortPlaylistBaseDataTableOverride
	DataTable* BaseTable;//[Offset: 0x0, Size: 40]
	DataTable* OverrideTable;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortPlaylistUIInfo.DataAsset.Object
	class UserWidget* PostGamePlacementOverlayClass;//[Offset: 0x30, Size: 8]
	PostGameScreenTagClassPair[] PostGameScreenOverrides;//[Offset: 0x38, Size: 16]
	SoundCue* VictoryStinger;//[Offset: 0x48, Size: 8]
	FText VictoryText;//[Offset: 0x50, Size: 24]
	bool bIsCinematicVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bShouldPushEmoteInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	bool bShouldPlayOnLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	float StingerFadesToAudioMusicAfter;//[Offset: 0x6c, Size: 4]
	SlateBrush MinimapOverride;//[Offset: 0x70, Size: 136]

--------------------------------
Class: PostGameScreenTagClassPair
	GameplayTag ScreenType;//[Offset: 0x0, Size: 8]
	class UserWidget* PostGameScreenClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortAthenaHUDInfoDataAsset.PrimaryDataAsset.DataAsset.Object
	<byte,FortAthenaTeamHUDInfo> TeamInfo;//[Offset: 0x30, Size: 80]
	<byte,FortAthenaTeamHUDInfo> TeamAffiliationInfo;//[Offset: 0x80, Size: 80]
	void FindTeamInfoForTeamAffiliation(byte TeamAffiliation, out bool bOutWasInfoFound, out FortAthenaTeamHUDInfo OutTeamInfo);// 0xcee4638
	void FindTeamInfoForTeam(byte Team, out bool bOutWasInfoFound, out FortAthenaTeamHUDInfo OutTeamInfo);// 0xcee4488

--------------------------------
Class: FortAthenaTeamHUDInfo
	FText DisplayName;//[Offset: 0x0, Size: 24]
	LinearColor Color;//[Offset: 0x18, Size: 16]

--------------------------------
Class: SupplyDropModifierData
	FName SupplyDropID;//[Offset: 0x0, Size: 8]
	SupplyDropSubPhaseModifier[] ModifierList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SupplyDropSubPhaseModifier
	enum GamePhase;//[Offset: 0x0, Size: 1]
	int SubPhaseIndex;//[Offset: 0x4, Size: 4]
	float SpawnInPreviousZonePercentChance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortAthenaExitCraftInfo.PrimaryDataAsset.DataAsset.Object
	class FortAthenaExitCraft* ExitCaftClass;//[Offset: 0x30, Size: 8]
	class FortAthenaExitCraftSpawner* ExitCraftSpawnerClass;//[Offset: 0x38, Size: 8]
	ExitCraftInfo ExitCraftInfo;//[Offset: 0x40, Size: 488]
	GameplayTag SpecialActorSpawnerTag;//[Offset: 0x228, Size: 8]
	SlateBrush SpawnerMinimapIconBrush;//[Offset: 0x230, Size: 136]
	Vector2D SpawnerMinimapIconScale;//[Offset: 0x2b8, Size: 8]
	SlateBrush SpawnerCompassIconBrush;//[Offset: 0x2c0, Size: 136]
	Vector2D SpawnerCompassIconScale;//[Offset: 0x348, Size: 8]
	GameplayTag SpecialActorCraftTag;//[Offset: 0x350, Size: 8]
	SlateBrush CraftMinimapIconBrush;//[Offset: 0x358, Size: 136]
	Vector2D CraftMinimapIconScale;//[Offset: 0x3e0, Size: 8]
	SlateBrush CraftCompassIconBrush;//[Offset: 0x3e8, Size: 136]
	Vector2D CraftCompassIconScale;//[Offset: 0x470, Size: 8]

--------------------------------
Class: FortAthenaExitCraft.FortAthenaVehicle.FortPhysicsPawn.Pawn.Actor.Object
	StaticMeshComponent* MeshComponent;//[Offset: 0x1120, Size: 8]
	StaticMeshComponent* OverlapMesh;//[Offset: 0x1128, Size: 8]
	FortAthenaExitCraftInfo* ExitCraftInfo;//[Offset: 0x1130, Size: 8]
	FName CraftSpecialActorID;//[Offset: 0x1150, Size: 8]
	enum CurrentState;//[Offset: 0x115c, Size: 1]
	FortPlayerPawnAthena*[] OverlappingPawns;//[Offset: 0x1160, Size: 16]
	class FortAthenaExitCraftBalloon* BalloonClass;//[Offset: 0x1170, Size: 8]
	FortAthenaExitCraftBalloon* BalloonActor;//[Offset: 0x1178, Size: 8]
	class FortPhysicsVehicleConfigs* FortVehicleConfigClass;//[Offset: 0x1180, Size: 8]
	CurveFloat* GettingIntoPostionCurve_Location;//[Offset: 0x1188, Size: 8]
	CurveFloat* GettingIntoPostionCurve_Rotation;//[Offset: 0x1190, Size: 8]
	float BuildingZOffset;//[Offset: 0x1198, Size: 4]
	GameplayTagContainer TagsToApplyOnAttached;//[Offset: 0x11a0, Size: 32]
	FText InteractText;//[Offset: 0x11c0, Size: 24]
	float SafetyTimerTime;//[Offset: 0x11d8, Size: 4]
	MaterialInterface*[] VehicleSkins;//[Offset: 0x11e0, Size: 16]
	int VehicleSkinIndex;//[Offset: 0x11f0, Size: 4]
	FortPlayerPawnAthena*[] PlayersNeedingSeats;//[Offset: 0x1200, Size: 16]
	LocationLerpData LocationLerpData;//[Offset: 0x1228, Size: 56]
	RotationLerpData RotationLerpData;//[Offset: 0x1260, Size: 80]
	void OnRep_VehicleSkinIndex();// 0xcee1264
	void OnRep_RotationLerpData();// 0xcee1250
	void OnRep_QualifyingPlayers();// 0xcee123c
	void OnRep_LocationLerpData();// 0xcee1228
	void OnRep_CurrentState();// 0xcee1214
	void OnRep_BalloonActor();// 0xcee1200
	void OnRemakeMIDs();// 0xbbc0600
	void OnOverlapStart(Actor* TestActor);// 0xcee1158
	void OnOverlapEnd(Actor* TestActor);// 0xcee10b0
	void OnNewState(enum NewState);// 0xbbc0600
	void OnMoveStart();// 0xbbc0600
	void OnMoveEnd();// 0xbbc0600
	void OnDepartFinished();// 0xcee109c
	Vector GetBalloonLocation();// 0xbbc0600
	void CheatDepart();// 0xcee1088

--------------------------------
Class: FortAthenaExitCraftBalloon.Actor.Object
	StaticMeshComponent* RootMeshComp;//[Offset: 0x220, Size: 8]
	PhysicsConstraintComponent* PhysicsComp;//[Offset: 0x228, Size: 8]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x1f8, Size: 8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x200, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x208, Size: 8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x210, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x228, Size: 8]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 16]
	ConstraintInstance ConstraintInstance;//[Offset: 0x240, Size: 448]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xd8b1bd8
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0xd8b1b28
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0xd8b1a40
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0xd8b1958
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0xd8b1870
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0xd8b17c0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xd8b1678
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0xd8b15c8
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0xd8b1480
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xd8b135c
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0xd8b126c
	void SetDisableCollision(bool bDisableCollision);// 0xd8b11bc
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0xd8b10cc
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0xd8b0f90
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0xd8b0e80
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0xd8b0d20
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0xd8b0c70
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0xd8b0b78
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0xd8b0ac8
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xd8b09d0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0xd8b08e8
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0xd8b0800
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0xd8b0718
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0xd8b0668
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0xd8b0570
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0xd8b044c
	void SetAngularDriveMode(byte DriveMode);// 0xd8b03a4
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0xd8b02b4
	bool IsBroken();// 0xd8b027c
	float GetCurrentTwist();// 0xd8b0248
	float GetCurrentSwing2();// 0xd8b0214
	float GetCurrentSwing1();// 0xd8b01e0
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0xd8b00e4
	void BreakConstraint();// 0xd8b00d0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortPhysicsVehicleConfigs.FortVehicleConfigs.Object
	float WaterTestFrequency;//[Offset: 0x2c0, Size: 4]
	float MinLinearSpeedRunningVarianceSq;//[Offset: 0x2c4, Size: 4]
	float MinAngularSpeedRunningVarianceSq;//[Offset: 0x2c8, Size: 4]
	float VehicleErrorPerDistanceCentimeters;//[Offset: 0x2cc, Size: 4]
	float VehicleErrorPerDistanceCentimetersPerSecond;//[Offset: 0x2d0, Size: 4]
	float VehicleErrorPerAngleDegrees;//[Offset: 0x2d4, Size: 4]
	float VehicleErrorPerAngleDegreesPerSecond;//[Offset: 0x2d8, Size: 4]
	float VehicleErrorPerUpdate;//[Offset: 0x2dc, Size: 4]
	float VehicleInvalidErrorPerSecondTolerance;//[Offset: 0x2e0, Size: 4]
	float VehicleInvalidErrorMaxSeconds;//[Offset: 0x2e4, Size: 4]
	float VehicleInvalidErrorMinSeconds;//[Offset: 0x2e8, Size: 4]
	float InPlaceRotationStrength;//[Offset: 0x2ec, Size: 4]
	float WheelRadius;//[Offset: 0x2f0, Size: 4]
	float IdleBrakeForce;//[Offset: 0x2f4, Size: 4]
	float TooFastBrakeForce;//[Offset: 0x2f8, Size: 4]
	float BrakeForce;//[Offset: 0x2fc, Size: 4]
	float AutoBrakeSpeed;//[Offset: 0x300, Size: 4]
	float WaterDragCoefficient;//[Offset: 0x304, Size: 4]
	float WaterDragCoefficient2;//[Offset: 0x308, Size: 4]
	float LateralFriction;//[Offset: 0x30c, Size: 4]
	float VehicleCameraMaxSteerAlpha;//[Offset: 0x310, Size: 4]
	float MaxForwardSpeedToSwapReverseControls;//[Offset: 0x314, Size: 4]
	float MinSpeedSteeringAngle;//[Offset: 0x318, Size: 4]
	float MaxSpeedSteeringAngle;//[Offset: 0x31c, Size: 4]
	bool bSteerWithFrontWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bInvertSteeringWhenReversing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	float MaxRestSpeed;//[Offset: 0x324, Size: 4]
	float ImpactDamageSafeDegrees;//[Offset: 0x328, Size: 4]
	float MinSpeedToDamage;//[Offset: 0x32c, Size: 4]
	float MaxSpeedToDamage;//[Offset: 0x330, Size: 4]
	float MinSpeedDamage;//[Offset: 0x334, Size: 4]
	float MaxSpeedDamage;//[Offset: 0x338, Size: 4]
	float VehicleOnVehicle_ImpactVelocityMultiplier;//[Offset: 0x33c, Size: 4]
	float MinSpeedDamageNoPlayer;//[Offset: 0x340, Size: 4]
	float MaxSpeedDamageNoPlayer;//[Offset: 0x344, Size: 4]
	float MinSpeedAIDamage;//[Offset: 0x348, Size: 4]
	float MaxSpeedAIDamage;//[Offset: 0x34c, Size: 4]
	float MinSpeedAIDamageNoPlayer;//[Offset: 0x350, Size: 4]
	float MaxSpeedAIDamageNoPlayer;//[Offset: 0x354, Size: 4]
	float MinImpactMagnitudeToDealDamageKmH;//[Offset: 0x358, Size: 4]
	float MaxImpactDamage;//[Offset: 0x35c, Size: 4]
	float ImpactDamagePerImpulse;//[Offset: 0x360, Size: 4]
	float ImpactReductionPerTransverseVelocity;//[Offset: 0x364, Size: 4]
	float MaxImpactDamageReduction;//[Offset: 0x368, Size: 4]
	float PlayerImpactDamageMultiplier;//[Offset: 0x36c, Size: 4]
	float VehicleFlipCooldown;//[Offset: 0x370, Size: 4]
	float MinSpringHitNormal;//[Offset: 0x374, Size: 4]
	float VehicleCameraGraceZone;//[Offset: 0x378, Size: 4]
	float VehicleLeftAnalogSteeringDeadZone;//[Offset: 0x37c, Size: 4]
	float VehicleCameraLeftAnalogMultiplier;//[Offset: 0x380, Size: 4]
	float InWaterTopSpeedMutliplier;//[Offset: 0x384, Size: 4]
	float VehicleInPlaceThreshold;//[Offset: 0x388, Size: 4]
	float VehicleWeightShiftPitchStrength;//[Offset: 0x38c, Size: 4]
	float VehicleWeightShiftRollStrength;//[Offset: 0x390, Size: 4]
	float VehicleWeightShiftYawStrength;//[Offset: 0x394, Size: 4]
	float JumpRateMultiplier;//[Offset: 0x398, Size: 4]
	float VehicleDebugStrafeMultiplier;//[Offset: 0x39c, Size: 4]
	float GravityVelocitySteerForwardThreshold;//[Offset: 0x3a0, Size: 4]
	float GravityVelocitySteerErrorThreshold;//[Offset: 0x3a4, Size: 4]
	float GravitySteerMultiplier;//[Offset: 0x3a8, Size: 4]
	float InWaterPushMultiplier;//[Offset: 0x3ac, Size: 4]
	float MinWheelRotationSpeed;//[Offset: 0x3b0, Size: 4]
	float WheelRotationAcceleration;//[Offset: 0x3b4, Size: 4]
	float WheelRotationDampingPerSecond;//[Offset: 0x3b8, Size: 4]
	float HonkTimeMax;//[Offset: 0x3bc, Size: 4]
	float HonkCooldownMax;//[Offset: 0x3c0, Size: 4]
	float HonkTimePerHonk;//[Offset: 0x3c4, Size: 4]
	float VehicleLookAheadLength;//[Offset: 0x3c8, Size: 4]
	float VehicleLookAheadInAirLength;//[Offset: 0x3cc, Size: 4]
	float VehicleLookAheadMinSpeed;//[Offset: 0x3d0, Size: 4]
	bool bEnableLookahead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float VehicleLookAheadMinNormal;//[Offset: 0x3d8, Size: 4]
	float VehicleLookAheadStiff;//[Offset: 0x3dc, Size: 4]
	float VehicleLookAheadDamp;//[Offset: 0x3e0, Size: 4]
	float VehicleLookAheadInAirStiff;//[Offset: 0x3e4, Size: 4]
	float VehicleLookAheadInAirDamp;//[Offset: 0x3e8, Size: 4]
	float VehicleLookAheadMaxAccel;//[Offset: 0x3ec, Size: 4]
	float VehicleLookAheadMaxAccelInAir;//[Offset: 0x3f0, Size: 4]
	float VehicleAirControlStiff;//[Offset: 0x3f4, Size: 4]
	float VehicleAirControlDamp;//[Offset: 0x3f8, Size: 4]
	float VehicleAirYawStrength;//[Offset: 0x3fc, Size: 4]
	float VehicleAirPitchStrength;//[Offset: 0x400, Size: 4]
	float DragCoefficient;//[Offset: 0x404, Size: 4]
	float DragCoefficient2;//[Offset: 0x408, Size: 4]
	float MaxDragSpeed;//[Offset: 0x40c, Size: 4]
	float MinLinearSpeedToWake;//[Offset: 0x410, Size: 4]
	float MinAngularSpeedToWake;//[Offset: 0x414, Size: 4]
	float MaxDriveInclineAngle;//[Offset: 0x418, Size: 4]
	float MaxAntigravityInclineAngle;//[Offset: 0x41c, Size: 4]
	float MaxDriveTiltAngle;//[Offset: 0x420, Size: 4]
	float AxleOffsetZ;//[Offset: 0x424, Size: 4]
	float SpringStiffMultiplier;//[Offset: 0x428, Size: 4]
	float SpringDampMultiplier;//[Offset: 0x42c, Size: 4]
	float SpringStiffMultiplierWater;//[Offset: 0x430, Size: 4]
	float SpringDampMultiplierWater;//[Offset: 0x434, Size: 4]
	float SpringMaxAccelMultiplier;//[Offset: 0x438, Size: 4]
	float SpringLengthMultiplier;//[Offset: 0x43c, Size: 4]
	float HasGroundSweepLengthMultiplier;//[Offset: 0x440, Size: 4]
	float AngularDragCoefficient;//[Offset: 0x444, Size: 4]
	float PitchAngularDrag;//[Offset: 0x448, Size: 4]
	float RollAngularDrag;//[Offset: 0x44c, Size: 4]
	float AngularDragCoefficientWater;//[Offset: 0x450, Size: 4]
	float PitchAngularDragWater;//[Offset: 0x454, Size: 4]
	float RollAngularDragWater;//[Offset: 0x458, Size: 4]
	float YawAngularDragWater;//[Offset: 0x45c, Size: 4]
	float VehicleAnalogReverse;//[Offset: 0x460, Size: 4]
	float VehicleLookAheadMinSpeedInAir;//[Offset: 0x464, Size: 4]
	float VehicleAutoAirPitchStrength;//[Offset: 0x468, Size: 4]
	float VehicleAutoAirYawStrength;//[Offset: 0x46c, Size: 4]
	float VehicleAutoAirRollStrength;//[Offset: 0x470, Size: 4]
	float VehicleMinVelAlongContactNormal;//[Offset: 0x474, Size: 4]
	float VehicleMaxVelAlongContactNormal;//[Offset: 0x478, Size: 4]
	float MinSameDirCollision;//[Offset: 0x47c, Size: 4]
	float MinCollisionSpeedToCorrect;//[Offset: 0x480, Size: 4]
	float MinCollisionBoostNormal;//[Offset: 0x484, Size: 4]
	float CollisionSpeedBoostAlpha;//[Offset: 0x488, Size: 4]
	float CancelIgnoreForwardThreshold;//[Offset: 0x48c, Size: 4]
	float AngularDragCoefficientRampedUp;//[Offset: 0x490, Size: 4]
	float PitchAngularDragRampedUp;//[Offset: 0x494, Size: 4]
	float VehicleAirYawStrengthRampedUp;//[Offset: 0x498, Size: 4]
	float VehicleAirPitchStrengthRampedUp;//[Offset: 0x49c, Size: 4]
	float SteerBrakeMultiplier;//[Offset: 0x4a0, Size: 4]
	float WheelRadiusF;//[Offset: 0x4a4, Size: 4]
	float WheelRadiusB;//[Offset: 0x4a8, Size: 4]
	float PitchLeanStrength;//[Offset: 0x4ac, Size: 4]
	float MaxForwardVelAccelLean;//[Offset: 0x4b0, Size: 4]
	float MaxReverseVelAccelLean;//[Offset: 0x4b4, Size: 4]
	float MaxSteerForAccelLean;//[Offset: 0x4b8, Size: 4]
	float MinYawSpeedForLean;//[Offset: 0x4bc, Size: 4]
	float YawLeanStrength;//[Offset: 0x4c0, Size: 4]
	float AccelerationPitchCooldown;//[Offset: 0x4c4, Size: 4]
	float YawLeanCooldown;//[Offset: 0x4c8, Size: 4]
	float MaxAccelPitch;//[Offset: 0x4cc, Size: 4]
	float MaxYawLean;//[Offset: 0x4d0, Size: 4]
	float ContactModificationOffset;//[Offset: 0x4d4, Size: 4]
	float VehicleFloorFriction;//[Offset: 0x4d8, Size: 4]
	float VehicleSideScrapeFriction;//[Offset: 0x4dc, Size: 4]
	float VehicleSideScrapeMaxCosAngle;//[Offset: 0x4e0, Size: 4]
	float GroundCheckSweepRadius;//[Offset: 0x4e4, Size: 4]
	float SMSleepCounter;//[Offset: 0x4e8, Size: 4]
	float CorrectOrientationTimeout;//[Offset: 0x4ec, Size: 4]
	float NudgeOrientationTimeout;//[Offset: 0x4f0, Size: 4]
	float NudgeDistance;//[Offset: 0x4f4, Size: 4]
	Vector CorrectOrientationCenterOfMassOffset;//[Offset: 0x4f8, Size: 12]
	float CorrectOrientationLinearCoefficient;//[Offset: 0x504, Size: 4]
	float CorrectOrientationAngularCoefficient;//[Offset: 0x508, Size: 4]
	byte SpringCollisionChannel;//[Offset: 0x50c, Size: 1]
	bool bVehicleCameraSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	bool bVehicleScreenSpaceSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50e, Size: 1]
	bool bVehicleCameraLeftAnalogSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50f, Size: 1]
	bool bUseKinematicReplicationWhenNotRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float PawnLaunchVerticalVelocityScale;//[Offset: 0x514, Size: 4]
	float PawnLaunchForwardVelocityScale;//[Offset: 0x518, Size: 4]
	float PawnLaunchMinVerticalVelocity;//[Offset: 0x51c, Size: 4]
	float PawnLaunchMinForwardVelocity;//[Offset: 0x520, Size: 4]
	float PawnLaunchMaxSpeed;//[Offset: 0x524, Size: 4]
	float PawnLaunchAngleAdjustment;//[Offset: 0x528, Size: 4]
	float PawnLaunchMinDirection;//[Offset: 0x52c, Size: 4]
	float DestructionTraceAheadMinSpeed;//[Offset: 0x530, Size: 4]
	float DestructionTraceAheadAmount;//[Offset: 0x534, Size: 4]
	float DestructionImpulseAmount;//[Offset: 0x538, Size: 4]
	float PropDestructionImpulseAmount;//[Offset: 0x53c, Size: 4]
	Vector DestructionTraceHalfSize;//[Offset: 0x540, Size: 12]
	bool bCanDestroyProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	float HitRequiredMinSpeed;//[Offset: 0x550, Size: 4]
	float MaxHealthToDestroyProp;//[Offset: 0x554, Size: 4]
	float MaxHealthToDestroyPropBoosting;//[Offset: 0x558, Size: 4]
	float MaxHealthToDestroyPropFast;//[Offset: 0x55c, Size: 4]
	float MaxHealthToDestroyPropSpeedThreshold;//[Offset: 0x560, Size: 4]
	float PropImpactImpulseMagnitude;//[Offset: 0x564, Size: 4]
	bool bShouldUseLocalIgnoreListForDestroyedBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	float RadiusForPropOverlapCheck;//[Offset: 0x56c, Size: 4]
	float PropOverlapMinMoveDistSquared;//[Offset: 0x570, Size: 4]
	bool bForceUseImminentCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	int MaxBudgetForActorTick;//[Offset: 0x578, Size: 4]
	int MinBudgetForReducedSpring;//[Offset: 0x57c, Size: 4]
	bool bShouldServerRunReducedSprings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	int MaxReducedSpringsPerTick;//[Offset: 0x584, Size: 4]
	bool bDontApplyDragInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bDriverCanDamageVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	float MaxWheelSpinWound;//[Offset: 0x58c, Size: 4]
	bool bUseRechargeableFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	float BuoyancyCoefficient;//[Offset: 0x594, Size: 4]
	float BuoyancyDamp;//[Offset: 0x598, Size: 4]
	float BuoyancyDamp2;//[Offset: 0x59c, Size: 4]
	float BuoyancyRampMinVelocity;//[Offset: 0x5a0, Size: 4]
	float BuoyancyRampMaxVelocity;//[Offset: 0x5a4, Size: 4]
	float BuoyancyRampMax;//[Offset: 0x5a8, Size: 4]
	float MaxBuoyantForce;//[Offset: 0x5ac, Size: 4]
	float UprightSpringWaterPitchStiff;//[Offset: 0x5b0, Size: 4]
	float UprightSpringWaterPitchDamp;//[Offset: 0x5b4, Size: 4]
	float UprightSpringWaterRollStiff;//[Offset: 0x5b8, Size: 4]
	float UprightSpringWaterRollDamp;//[Offset: 0x5bc, Size: 4]
	bool bModifyShocksInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	bool bApplyPushForceAtSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 1]
	float WaterVelocityStrength;//[Offset: 0x5c4, Size: 4]
	float MaxWaterForce;//[Offset: 0x5c8, Size: 4]
	int NumPontoonsForFullyInWater;//[Offset: 0x5cc, Size: 4]
	float WaterIdleTimeForRiverPush;//[Offset: 0x5d0, Size: 4]
	float WaterIdleTimeForSleep;//[Offset: 0x5d4, Size: 4]
	int VelocityPontoonIndex;//[Offset: 0x5d8, Size: 4]
	float WaterShorePushFactor;//[Offset: 0x5dc, Size: 4]
	float YawAngularDragIdleMultiplier;//[Offset: 0x5e0, Size: 4]
	float YawAngularDragWaterEmpty;//[Offset: 0x5e4, Size: 4]
	float WaterBodyTraceTimer;//[Offset: 0x5e8, Size: 4]
	float WaterBodyOverlapSphereRadius;//[Offset: 0x5ec, Size: 4]
	float WaterBodyOverlapSphereCenterZOffset;//[Offset: 0x5f0, Size: 4]
	float ImminentCollisDestructionAngle;//[Offset: 0x5f4, Size: 4]
	float ImminentCollisUpForwardMinProtected;//[Offset: 0x5f8, Size: 4]
	float ImminentCollisUpNormalMinProtected;//[Offset: 0x5fc, Size: 4]
	ScalableFloat MetalOnHit;//[Offset: 0x600, Size: 40]
	bool bOverrideErrorCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	RigidBodyErrorCorrection ErrorCorrectionOverride;//[Offset: 0x62c, Size: 52]
	class Actor* BoundsXYSplineClass;//[Offset: 0x660, Size: 8]
	ScalableFloat bEnableDormantOnSleep;//[Offset: 0x668, Size: 40]

--------------------------------
Class: FortVehicleConfigs.Object
	int NumWheelsTouchingGroundForWheelsOnGround;//[Offset: 0x28, Size: 4]
	float TimeToIdleBrake;//[Offset: 0x2c, Size: 4]
	float ChangeDirBrakeDelta;//[Offset: 0x30, Size: 4]
	float VehicleSleepCounter;//[Offset: 0x34, Size: 4]
	float VehicleMinSecondsBetweenUpdates;//[Offset: 0x38, Size: 4]
	float VehicleMinFOV;//[Offset: 0x3c, Size: 4]
	float VehicleMaxFOV;//[Offset: 0x40, Size: 4]
	float VehicleMinFOVSpeed;//[Offset: 0x44, Size: 4]
	float VehicleMaxFOVSpeed;//[Offset: 0x48, Size: 4]
	float VehicleFOVInterpSpeed;//[Offset: 0x4c, Size: 4]
	float InteractDistanceScalar;//[Offset: 0x50, Size: 4]
	float MinFallDamageHeight;//[Offset: 0x54, Size: 4]
	float MaxFallDamageHeight;//[Offset: 0x58, Size: 4]
	float MinFallDamage;//[Offset: 0x5c, Size: 4]
	float MaxFallDamage;//[Offset: 0x60, Size: 4]
	float PlayerFallDamageMultiplier;//[Offset: 0x64, Size: 4]
	float VehicleEjectCooldown;//[Offset: 0x68, Size: 4]
	float CameraSpaceForwardDistanceOverride;//[Offset: 0x6c, Size: 4]
	float PlayerToSocketSweepRadius;//[Offset: 0x70, Size: 4]
	float VehicleGravity;//[Offset: 0x74, Size: 4]
	float PlayerGravityMultiplier;//[Offset: 0x78, Size: 4]
	float PassengerDamageOnDestruction;//[Offset: 0x7c, Size: 4]
	float MinFallDamageNormalScale;//[Offset: 0x80, Size: 4]
	float DriverExitLaunchScalar;//[Offset: 0x84, Size: 4]
	float DriverExitLaunchUpScalar;//[Offset: 0x88, Size: 4]
	float DriverExitInAirLaunchScalar;//[Offset: 0x8c, Size: 4]
	float DriverExitInAirLaunchUpScalar;//[Offset: 0x90, Size: 4]
	float PassengerExitLaunchScalar;//[Offset: 0x94, Size: 4]
	float PassengerExitLaunchUpScalar;//[Offset: 0x98, Size: 4]
	float PassengerExitInAirLaunchScalar;//[Offset: 0x9c, Size: 4]
	float PassengerExitInAirLaunchUpScalar;//[Offset: 0xa0, Size: 4]
	bool bCanDoTricks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	bool bShouldDriverHaveReticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	bool bSupportsWraps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 1]
	float ExitVehicleCoolDown;//[Offset: 0xa8, Size: 4]
	bool bInheritScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	float HoldToExitTime;//[Offset: 0xb0, Size: 4]
	float ForceExitZOffset;//[Offset: 0xb4, Size: 4]
	bool bBlockBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bPreferDriverSeatWhenEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	float FireDamagePerSecond;//[Offset: 0xbc, Size: 4]
	float FireDamageTickRate;//[Offset: 0xc0, Size: 4]
	bool bCanBeOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	VehicleDamageablePartConfig[] DamageableParts;//[Offset: 0xc8, Size: 16]
	ScalableFloat UnoccupiedAutoDestroyTime;//[Offset: 0xd8, Size: 40]
	ScalableFloat bUsesVehicleFuelSystem;//[Offset: 0x100, Size: 40]
	class FortProjectileBase* LeakFuelProjectileTemplate;//[Offset: 0x128, Size: 8]
	ScalableFloat FuelTankCapacity;//[Offset: 0x130, Size: 40]
	ScalableFloat FuelPerSecondIdle;//[Offset: 0x158, Size: 40]
	ScalableFloat FuelPerSecondDriving;//[Offset: 0x180, Size: 40]
	ScalableFloat FuelPerSecondBoosting;//[Offset: 0x1a8, Size: 40]
	ScalableFloat FuelPerSecondLeaking;//[Offset: 0x1d0, Size: 40]
	ScalableFloat MinFuelAtSpawn;//[Offset: 0x1f8, Size: 40]
	ScalableFloat MaxFuelAtSpawn;//[Offset: 0x220, Size: 40]
	ScalableFloat bInfiniteFuel;//[Offset: 0x248, Size: 40]
	ScalableFloat LowFuelRepeatingPingDelay;//[Offset: 0x270, Size: 40]
	ScalableFloat LowFuelPercent;//[Offset: 0x298, Size: 40]

--------------------------------
Class: VehicleDamageablePartConfig
	FName ShapeName;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x8, Size: 8]
	float MaxHealth;//[Offset: 0x10, Size: 4]
	bool bStartsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 4]
	float PingLimit;//[Offset: 0x4, Size: 4]
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 4]
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 4]
	float MaxRestoredStateError;//[Offset: 0x10, Size: 4]
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 4]
	float PositionLerp;//[Offset: 0x18, Size: 4]
	float AngleLerp;//[Offset: 0x1c, Size: 4]
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 4]
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 4]
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 4]
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 4]
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 4]

--------------------------------
Class: LocationLerpData
	Vector PositionLerp_Start;//[Offset: 0x0, Size: 12]
	Vector PositionLerp_End;//[Offset: 0xc, Size: 12]
	Vector PositionLerp_Target;//[Offset: 0x18, Size: 12]
	float TotalLerpTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RotationLerpData
	Quat RotationLerp_Start;//[Offset: 0x0, Size: 16]
	Quat RotationLerp_End;//[Offset: 0x10, Size: 16]
	Quat RotationLerp_Target;//[Offset: 0x20, Size: 16]
	float TotalLerpTime;//[Offset: 0x30, Size: 4]

--------------------------------
Class: FortAthenaExitCraftSpawner.Actor.Object
	CapsuleComponent* DestructionOverlapCapsule;//[Offset: 0x238, Size: 8]
	FortAthenaExitCraftInfo* ExitCraftInfo;//[Offset: 0x240, Size: 8]
	BuildingSMActor*[] BuildingActorsToDestroy;//[Offset: 0x248, Size: 16]
	FName SpawnerSpecialActorID;//[Offset: 0x258, Size: 8]
	void StartExitCraftSpawnTimer();// 0xcee14e4
	void DestroyBlockingActors();// 0xcee14d0

--------------------------------
Class: ExitCraftInfo
	GameplayTag RequiredExitCraftTag;//[Offset: 0x0, Size: 8]
	ScalableFloat ExitCraftSpawnerZOffset;//[Offset: 0x8, Size: 40]
	ScalableFloat ExitCraftSpawnDelay;//[Offset: 0x30, Size: 40]
	ScalableFloat SpawnDestructionInitialDelay;//[Offset: 0x58, Size: 40]
	ScalableFloat SpawnDestructionDelayBetweenPieces;//[Offset: 0x80, Size: 40]
	ScalableFloat ExitCraftZOffset;//[Offset: 0xa8, Size: 40]
	ScalableFloat ExitCraftTargetZOffset;//[Offset: 0xd0, Size: 40]
	ScalableFloat ExitCraftTimeToHoverLocation;//[Offset: 0xf8, Size: 40]
	ScalableFloat ExitCraftTimeToHoverRotation;//[Offset: 0x120, Size: 40]
	ScalableFloat MinLandingSpeed;//[Offset: 0x148, Size: 40]
	ScalableFloat ExitZOffset;//[Offset: 0x170, Size: 40]
	ScalableFloat ExitTime;//[Offset: 0x198, Size: 40]
	ScalableFloat InteractionTime;//[Offset: 0x1c0, Size: 40]

--------------------------------
Class: CharacterPreloadBlock
	bool bShouldGoInNPCBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AthenaCharacterItemDefinition* CID;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterFallbackPreloadBlock
	bool bShouldGoInNPCBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTag FallbackTag;//[Offset: 0x4, Size: 8]

--------------------------------
Class: FortSpawnActorInfo.PrimaryDataAsset.DataAsset.Object
	FName SpawnActorID;//[Offset: 0x30, Size: 8]
	class FortLevelSpawnActor* SpawnActorClass;//[Offset: 0x38, Size: 8]
	CollisionProfileName CollisionProfile;//[Offset: 0x40, Size: 8]
	enum SpawnTiming;//[Offset: 0x48, Size: 1]
	ScalableFloat SafeZoneIndex;//[Offset: 0x50, Size: 40]
	ScalableFloat SpawnAtSafeZoneIndex;//[Offset: 0x78, Size: 40]
	ScalableFloat DelayBetweenSpawns;//[Offset: 0xa0, Size: 40]
	ScalableFloat MinActorsToSpawn;//[Offset: 0xc8, Size: 40]
	ScalableFloat MaxActorsToSpawn;//[Offset: 0xf0, Size: 40]
	ScalableFloat MinSpawnHeight;//[Offset: 0x118, Size: 40]
	ScalableFloat MaxSpawnHeight;//[Offset: 0x140, Size: 40]

--------------------------------
Class: FortLevelSpawnActor.Actor.Object
	FName SpecialActorUniqueID;//[Offset: 0x220, Size: 8]
	GameplayTag SpecialActorCategoryTag;//[Offset: 0x228, Size: 8]
	SlateBrush MiniMapIconBrush;//[Offset: 0x230, Size: 136]
	Vector2D MiniMapIconScale;//[Offset: 0x2b8, Size: 8]
	int CachedSpecialActorIdx;//[Offset: 0x2c0, Size: 4]
	FName SpecialActorID;//[Offset: 0x2c4, Size: 8]

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 16]
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 16]

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 8]
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 8]
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 8]
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 8]
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 16]

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x2b8, Size: 8]
	SkeletalMeshComponent* ToComponent;//[Offset: 0x2c0, Size: 8]
	float BlendTime;//[Offset: 0x2c8, Size: 4]
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x2b8, Size: 8]
	AnimSequence* AdditiveAnimation;//[Offset: 0x2c0, Size: 8]
	float Alpha;//[Offset: 0x2c8, Size: 4]
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 40]
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x8091398
	Enum* GetAnimationStateEnum();// 0x809135c

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 1]
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 16]
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	float BlendTime;//[Offset: 0x1c, Size: 4]
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	byte NextState;//[Offset: 0x22, Size: 1]
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 4]
	float WiggleTimePercentage;//[Offset: 0x28, Size: 4]
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 8]
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 8]
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 4]
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 1]

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x2b8, Size: 8]
	float PermutationTimeOffset;//[Offset: 0x2c0, Size: 4]
	float PlayRate;//[Offset: 0x2c4, Size: 4]
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	AnimSharingInstance* Instance;//[Offset: 0x2d0, Size: 8]
	void GetInstancedActors(out Actor*[] Actors);// 0x8090724

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 16]
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 8]
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 16]
	Enum* StateEnum;//[Offset: 0xe8, Size: 8]
	Actor* SharingActor;//[Offset: 0xf0, Size: 8]

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 1]
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 4]
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 4]
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortCurieSettings.PrimaryDataAsset.DataAsset.Object
	class FortCurieManager* CurieManagerClass;//[Offset: 0x30, Size: 40]
	FortCurieFXSettings* CurieFXSettings;//[Offset: 0x58, Size: 40]
	bool bUseElectricityPropagationManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bUseFirePropagationManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool bUseSpatialManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	bool bUseCableSignalManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 1]
	FortCurieElectricityPropagationManagerConfig ElectricityPropagationManagerConfig;//[Offset: 0x84, Size: 40]
	FortCurieFirePropagationManagerConfig FirePropagationManagerConfig;//[Offset: 0xb0, Size: 200]
	FortCurieSpatialManagerConfig SpatialManagerConfig;//[Offset: 0x178, Size: 120]
	FortCurieCableSignalManagerConfig CableSignalManagerConfig;//[Offset: 0x1f0, Size: 4]
	ScalableFloat WaterBodyInteractionMagnitude;//[Offset: 0x1f8, Size: 40]

--------------------------------
Class: FortCurieManager.CurieManager.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	<GameplayTag,CurieToggleComponentGroup> ToggleComponentGroups;//[Offset: 0x5c8, Size: 80]
	FortCurieSpatialManager* SpatialManager;//[Offset: 0x618, Size: 8]
	FortCurieFirePropagationManager* FirePropagationManager;//[Offset: 0x620, Size: 8]
	FortCurieElectricityPropagationManager* ElectricityPropagationManager;//[Offset: 0x628, Size: 8]
	FortCurieCableSignalManager* CableSignalManager;//[Offset: 0x630, Size: 8]
	FortCurieFXManager* FXManager;//[Offset: 0x638, Size: 8]
	GameplayTag[] ValidStateIdentifiers;//[Offset: 0x640, Size: 16]
	<GameplayTag,int> StateIdentifierToIdxMap;//[Offset: 0x650, Size: 80]
	FortCurieSettings* CurieSettings;//[Offset: 0x6a0, Size: 8]
	bool bAllowCurieApplicationViaDamageFormulaTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool bCurieElementsBlockBuildingEdit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	void UnbindDelegateOnToggleGroupMemberActiveStateChange(GameplayTag ToggleGroup, delegate Delegate);// 0xcfc6c70
	void UnbindDelegateOnToggleGroupFullyInactive(GameplayTag ToggleGroup, delegate Delegate);// 0xcfc6b78
	void UnbindDelegateOnToggleGroupFullyActive(GameplayTag ToggleGroup, delegate Delegate);// 0xcfc6a80
	void OnToggleGroupComponentDeactivated(ActorComponent* InComponent);// 0xcfc69d8
	void OnToggleGroupComponentActivated(ActorComponent* InComponent, bool bReset);// 0xcfc68e8
	void OnRep_ValidStateIdentifiers();// 0xcfc68cc
	void BindDelegateOnToggleGroupMemberActiveStateChange(GameplayTag ToggleGroup, delegate Delegate);// 0xcfc67d4
	void BindDelegateOnToggleGroupFullyInactive(GameplayTag ToggleGroup, delegate Delegate);// 0xcfc66dc
	void BindDelegateOnToggleGroupFullyActive(GameplayTag ToggleGroup, delegate Delegate);// 0xcfc65e4

--------------------------------
Class: CurieManager.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	class CurieComponent* CurieComponentClass;//[Offset: 0xb0, Size: 8]
	FName MaterialDataRegistryName;//[Offset: 0xb8, Size: 8]
	FName ElementDataRegistryName;//[Offset: 0xc0, Size: 8]
	FName EntityStateDataRegistryName;//[Offset: 0xc8, Size: 8]
	DataTable* MaterialDefinitionsTable;//[Offset: 0xd0, Size: 8]
	DataTable* ElementDefinitionsTable;//[Offset: 0xd8, Size: 8]
	DataTable* EntityStateDefinitionsTable;//[Offset: 0xe0, Size: 8]
	<GameplayTag,CurieElementAttachHandlersContainer> ElementAttachmentHandlers;//[Offset: 0x390, Size: 80]
	<GameplayTag,CurieElementAttachConditionHandlersContainer> ElementAttachmentConditionHandlers;//[Offset: 0x3e0, Size: 80]
	<CurieElementPairKey,CurieElementInteractWithElementHandlersContainer> ElementInteractWithElementHandlers;//[Offset: 0x430, Size: 80]
	<GameplayTag,CurieElementInteractWithMaterialHandlersContainer> ElementInteractWithMaterialHandlers;//[Offset: 0x480, Size: 80]
	<GameplayTag,CurieElementInteractWithContainerHandlersContainer> ElementInteractWithContainerHandlers;//[Offset: 0x4d0, Size: 80]
	bool bUseDataRegistry;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x574, Size: 1]
	void UnbindDelegateForCurieStateDetached(Object* CurieOwner, out const delegate Delegate);// 0x73ba484
	void UnbindDelegateForCurieStateAttached(Object* CurieOwner, out const delegate Delegate);// 0x73ba6a4
	void UnbindDelegateForCurieElementInteract(Object* CurieOwner, out const delegate Delegate);// 0x73bc428
	void UnbindDelegateForCurieElementEndInteract(Object* CurieOwner, out const delegate Delegate);// 0x73bbfe8
	void UnbindDelegateForCurieElementDetached(Object* CurieOwner, out const delegate Delegate);// 0x73bc648
	void UnbindDelegateForCurieElementBeginInteract(Object* CurieOwner, out const delegate Delegate);// 0x73bc208
	void UnbindDelegateForCurieElementAttached(Object* CurieOwner, out const delegate Delegate);// 0x73bc868
	void HandleContainerOwnerDestroyed(Actor* OwnerActor);// 0x73bbf40
	void BindDelegateForCurieStateDetached(Object* CurieOwner, out const delegate Delegate);// 0x73ba594
	void BindDelegateForCurieStateAttached(Object* CurieOwner, out const delegate Delegate);// 0x73ba7b4
	void BindDelegateForCurieElementInteract(Object* CurieOwner, out const delegate Delegate);// 0x73bc538
	void BindDelegateForCurieElementEndInteract(Object* CurieOwner, out const delegate Delegate);// 0x73bc0f8
	void BindDelegateForCurieElementDetached(Object* CurieOwner, out const delegate Delegate);// 0x73bc758
	void BindDelegateForCurieElementBeginInteract(Object* CurieOwner, out const delegate Delegate);// 0x73bc318
	void BindDelegateForCurieElementAttached(Object* CurieOwner, out const delegate Delegate);// 0x73bc978

--------------------------------
Class: CurieToggleComponentGroup
	FortCurieToggleComponent*[] GroupComponents;//[Offset: 0x0, Size: 16]
	MulticastInlineDelegateProperty OnToggleGroupFullyActive;//[Size: 16]
	MulticastInlineDelegateProperty OnToggleGroupFullyInactive;//[Size: 16]
	MulticastInlineDelegateProperty OnToggleGroupMemberStateChange;//[Size: 16]

--------------------------------
Class: FortCurieToggleComponent.ActorComponent.Object
	GameplayTagContainer ActivationElements;//[Offset: 0xb0, Size: 32]
	enum ActivationBehavior;//[Offset: 0xd0, Size: 1]
	enum DeactivationBehavior;//[Offset: 0xd1, Size: 1]
	float DeactivationTime;//[Offset: 0xd4, Size: 4]
	GameplayTag ToggleGroup;//[Offset: 0xd8, Size: 8]
	TimerHandle TimedDeactivationHandle;//[Offset: 0xe0, Size: 8]
	void OnInactive();// 0xcfc8214
	void OnElementDetached(Object* InOwner, CurieContainerHandle ContainerHandle, out const GameplayTag ElementIdentifier);// 0xcfc80d8
	void OnElementAttached(Object* InOwner, CurieContainerHandle ContainerHandle, out const GameplayTag ElementIdentifier);// 0xcfc7f9c
	void OnElementApplied(Object* InOwner, CurieContainerHandle ContainerHandle, out const GameplayTag ElementIdentifier);// 0xcfc7e60
	void OnActive();// 0xcfc7e44

--------------------------------
Class: CurieComponent.ActorComponent.Object

--------------------------------
Class: FortCurieSpatialManager.Object
	FoliageType*[] GrassFoliageTypePtrs;//[Offset: 0xa0, Size: 16]
	FortCurieSpatialManagerTickFunction PrimaryTickFunction;//[Offset: 0xb0, Size: 48]
	FortCurieBuildingGrid CurieBuildingGrid;//[Offset: 0xe0, Size: 456]
	FortCurieElementSpatialGrid ElementSpatialGrid;//[Offset: 0x2a8, Size: 904]
	FortCurieGrassGrid GrassGrid;//[Offset: 0x630, Size: 320]
	void HandleBuildingGridInitialized(BuildingStructuralSupportSystem* StructuralSupportSystem);// 0xcfc7c3c

--------------------------------
Class: FoliageType.Object
	GUID UpdateGuid;//[Offset: 0x28, Size: 16]
	float Density;//[Offset: 0x38, Size: 4]
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 4]
	float Radius;//[Offset: 0x40, Size: 4]
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 4]
	enum Scaling;//[Offset: 0x4c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x50, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x58, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 8]
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 12]
	byte VertexColorMask;//[Offset: 0x98, Size: 1]
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 4]
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 8]
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	float AlignMaxAngle;//[Offset: 0xb0, Size: 4]
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	float RandomPitchAngle;//[Offset: 0xb8, Size: 4]
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 8]
	FloatInterval Height;//[Offset: 0xc4, Size: 8]
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 16]
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 4]
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 16]
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 4]
	FName LandscapeLayer;//[Offset: 0xfc, Size: 8]
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	Vector CollisionScale;//[Offset: 0x108, Size: 12]
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 28]
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 12]
	byte Mobility;//[Offset: 0x13c, Size: 1]
	Int32Interval CullDistance;//[Offset: 0x140, Size: 8]
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 4]
	enum LightmapType;//[Offset: 0x150, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 336]
	byte CustomNavigableGeometry;//[Offset: 0x2a8, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2a9, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2aa, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2ab, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2ac, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 4]
	float CollisionRadius;//[Offset: 0x2b4, Size: 4]
	float ShadeRadius;//[Offset: 0x2b8, Size: 4]
	int NumSteps;//[Offset: 0x2bc, Size: 4]
	float InitialSeedDensity;//[Offset: 0x2c0, Size: 4]
	float AverageSpreadDistance;//[Offset: 0x2c4, Size: 4]
	float SpreadVariance;//[Offset: 0x2c8, Size: 4]
	int SeedsPerStep;//[Offset: 0x2cc, Size: 4]
	int DistributionSeed;//[Offset: 0x2d0, Size: 4]
	float MaxInitialSeedOffset;//[Offset: 0x2d4, Size: 4]
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	float MaxInitialAge;//[Offset: 0x2dc, Size: 4]
	float MaxAge;//[Offset: 0x2e0, Size: 4]
	float OverlapPriority;//[Offset: 0x2e4, Size: 4]
	FloatInterval ProceduralScale;//[Offset: 0x2e8, Size: 8]
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2f0, Size: 136]
	int ChangeCount;//[Offset: 0x378, Size: 4]
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 1]
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 1]
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 1]
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 1]
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37c, Size: 1]
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37c, Size: 1]
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37c, Size: 1]
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37c, Size: 1]
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37d, Size: 1]
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37d, Size: 1]
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37d, Size: 1]
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37d, Size: 1]
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37d, Size: 1]
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37d, Size: 1]
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37d, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37d, Size: 1]
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37e, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x380, Size: 16]
	int VirtualTextureCullMips;//[Offset: 0x390, Size: 4]
	enum VirtualTextureRenderPassType;//[Offset: 0x394, Size: 1]

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float MaskThreshold;//[Offset: 0x4, Size: 4]
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32Interval
	int min;//[Offset: 0x0, Size: 4]
	int max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortCurieSpatialManagerTickFunction.TickFunction

--------------------------------
Class: FortCurieBuildingGrid.FortCurieSpatialGrid.FortSpatialGrid

--------------------------------
Class: FortCurieSpatialGrid.FortSpatialGrid

--------------------------------
Class: FortSpatialGrid

--------------------------------
Class: FortCurieElementSpatialGrid.FortCurieSpatialGrid.FortSpatialGrid
	<IntPoint,FortCurieFireNavRelevantObject*> NavRelevantObjectMap;//[Offset: 0x140, Size: 80]
	FortCurieFireNavRelevantObject*[] NavRelevantPool;//[Offset: 0x190, Size: 16]
	<Actor*> PendingVoxelizationActors;//[Offset: 0x2f0, Size: 80]

--------------------------------
Class: FortCurieFireNavRelevantObject.Object

--------------------------------
Class: FortCurieGrassGrid.FortCurieSpatialGrid.FortSpatialGrid

--------------------------------
Class: FortCurieFirePropagationManager.Object
	FortCurieFirePropagationManagerTickFunction PrimaryTickFunction;//[Offset: 0x28, Size: 48]
	FortCurieActorFireEntry[] ActiveActorFires;//[Offset: 0x58, Size: 16]

--------------------------------
Class: FortCurieFirePropagationManagerTickFunction.TickFunction

--------------------------------
Class: FortCurieActorFireEntry
	Actor*[] AvailablePropagationNeighbors;//[Offset: 0x108, Size: 16]

--------------------------------
Class: FortCurieElectricityPropagationManager.Object
	int ElectricGridHighWaterMark;//[Offset: 0x28c, Size: 4]
	FortCurieElectricityPropagationManagerTickFunction PrimaryTickFunction;//[Offset: 0x340, Size: 48]

--------------------------------
Class: FortCurieElectricityPropagationManagerTickFunction.TickFunction

--------------------------------
Class: FortCurieCableSignalManager.Object
	FortCurieCableSignalManagerTickFunction PrimaryManagerTick;//[Offset: 0x28, Size: 48]

--------------------------------
Class: FortCurieCableSignalManagerTickFunction.TickFunction

--------------------------------
Class: FortCurieFXManager.Object
	FortCurieFXManagerTickFunction PrimaryManagerTick;//[Offset: 0x98, Size: 48]
	FortCurieFXSettings* FXSettings;//[Offset: 0xc8, Size: 8]
	StaticMesh*[] ValidElectricityArcMeshes;//[Offset: 0xd0, Size: 16]
	NiagaraSystem* ElectricityArcImpactSystem;//[Offset: 0xe0, Size: 8]
	SoundBase* ElectricityArcSound;//[Offset: 0xe8, Size: 8]
	SoundBase* ElectricityAmbientSound;//[Offset: 0xf0, Size: 8]
	NiagaraSystem* FireSystem;//[Offset: 0xf8, Size: 8]
	NiagaraSystem* PlayerWorldFireSystem;//[Offset: 0x100, Size: 8]
	SoundBase* FireAmbientSound;//[Offset: 0x108, Size: 8]
	<FortCurieAmbientAudioLocationKey,FortCurieActiveAmbientAudio> ActiveAmbientAudioMap;//[Offset: 0x110, Size: 80]
	AudioComponent*[] AvailablePooledAmbientAudioComponents;//[Offset: 0x160, Size: 16]
	TimerHandle AudioComponentCleanupTimerHandle;//[Offset: 0x170, Size: 8]
	<NiagaraComponent*> ActiveElectricityArcImpactFX;//[Offset: 0x178, Size: 80]
	NiagaraComponent*[] AvailablePooledNiagaraComponents;//[Offset: 0x1c8, Size: 16]
	FortCurieGlowFadeRequest[] GlowFadeRequests;//[Offset: 0x1d8, Size: 16]
	StaticMeshComponent*[] AvailablePooledElectricityMeshComponents;//[Offset: 0x1e8, Size: 16]
	FortCurieActiveElectricityArc[] ActiveElectricityArcs;//[Offset: 0x1f8, Size: 16]
	FortCuriePendingElectricityArcRequest[] PendingElectricityArcRequestHeap;//[Offset: 0x208, Size: 16]
	FortCurieFireParticleActorData[] CachedFireParticleActorData;//[Offset: 0x218, Size: 16]
	FortCurieFireParticleGrassData[] CachedFireParticleGrassData;//[Offset: 0x228, Size: 16]
	<FortSpatialCellIndex> CachedBurningGrassGridCells;//[Offset: 0x238, Size: 80]
	FortCurieComponent*[] CharredEffectInterpComponents;//[Offset: 0x288, Size: 16]
	FortCurieWorldFirePlayerSystem[] WorldFireNiagaraSystems;//[Offset: 0x298, Size: 16]
	FortCurieComponent*[] PrematureComponents;//[Offset: 0x2a8, Size: 16]
	TimerHandle PrematureComponentTimerHandle;//[Offset: 0x2b8, Size: 8]
	FortCurieGrassFireReplicator*[] GrassFireReplicators;//[Offset: 0x2c0, Size: 16]
	TextureRenderTarget2D* LandscapeCharRenderTarget;//[Offset: 0x2d0, Size: 8]
	float LandscapeCharInterpSpeed;//[Offset: 0x2d8, Size: 4]
	Box GrassFireBounds;//[Offset: 0x2dc, Size: 28]
	RandomStream RandomStream;//[Offset: 0x358, Size: 8]
	int NumActiveNativeFireStates;//[Offset: 0x360, Size: 4]
	float ElectricityArcFXSignificanceRequirement;//[Offset: 0x364, Size: 4]
	float ElectricityImpactFXSignificanceRequirement;//[Offset: 0x368, Size: 4]
	float ElectricityArcSoundSignificanceRequirement;//[Offset: 0x36c, Size: 4]
	float AmbientAudioSignificanceRequirement;//[Offset: 0x370, Size: 4]
	float AmbientAudioSurroundSignificanceRequirement;//[Offset: 0x374, Size: 4]
	float GlowInterpolationSignificanceRequirement;//[Offset: 0x378, Size: 4]
	float WorldSystemFireParticleSignificanceRequirement;//[Offset: 0x37c, Size: 4]
	float WorldSystemIgnitionParticleSignificanceRequirement;//[Offset: 0x380, Size: 4]
	float CharredEffectInterpolationSignificanceRequirement;//[Offset: 0x384, Size: 4]
	float MinLandscapeFireSphericalBounds;//[Offset: 0x388, Size: 4]
	float MaxLandscapeFireSphericalBounds;//[Offset: 0x38c, Size: 4]
	float LandscapeFireRandomLocationRadius;//[Offset: 0x390, Size: 4]
	float TimeSinceAudioUpdate;//[Offset: 0x394, Size: 4]
	bool bNiagaraImpactFXActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	bool bNiagaraPlayerWorldFireFXActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x398, Size: 1]
	bool bFireElementEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x398, Size: 1]
	bool bElectricityElementEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x398, Size: 1]
	bool bShutdown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x398, Size: 1]
	void OnUserSettingsEffectQualityChanged();// 0xcfc53d4
	void OnElectricityImpactFXComplete(NiagaraComponent* InComponent);// 0xcfc532c

--------------------------------
Class: FortCurieFXManagerTickFunction.TickFunction

--------------------------------
Class: FortCurieFXSettings.DataAsset.Object
	NativeCurieFXTypeSettings ElectricityNativeFXTypeSettings;//[Offset: 0x30, Size: 288]
	NativeCurieFXTypeSettings FireNativeFXTypeSettings;//[Offset: 0x150, Size: 288]
	NativeCurieFXTypeSettings CharredNativeFXTypeSettings;//[Offset: 0x270, Size: 288]
	StaticMesh*[] ElectricityArcMeshes;//[Offset: 0x390, Size: 16]
	NiagaraSystem* ElectricityArcImpactSystem;//[Offset: 0x3a0, Size: 8]
	SoundBase* ElectricityArcSound;//[Offset: 0x3a8, Size: 8]
	SoundBase* ElectricityAmbientSound;//[Offset: 0x3b0, Size: 8]
	NiagaraSystem* PlayerWorldFireSystem;//[Offset: 0x3b8, Size: 8]
	SoundBase* FireAmbientSound;//[Offset: 0x3c0, Size: 8]
	TextureRenderTarget2D* LandscapeCharRenderTarget;//[Offset: 0x3c8, Size: 8]
	FName PlayerWorldFireSystemLightScalabilityParamName;//[Offset: 0x3d0, Size: 8]
	int GlowElementIdxPrimitiveDataIdx;//[Offset: 0x3d8, Size: 4]
	int GlowLerpDataIdx;//[Offset: 0x3dc, Size: 4]
	int CharredEffectPrimitiveDataIdx;//[Offset: 0x3e0, Size: 4]
	int ElectricityArcTilingDivisorPrimitiveDataIdx;//[Offset: 0x3e4, Size: 4]
	int ElectricityArcStartTimestampPrimitiveDataIdx;//[Offset: 0x3e8, Size: 4]
	int ElectricityArcJumpDurationPrimitiveDataIdx;//[Offset: 0x3ec, Size: 4]
	int ElectricityArcDurationBeforeFadeoutPrimitiveDataIdx;//[Offset: 0x3f0, Size: 4]
	int ElectricityArcWPONoisePrimitiveDataIdx;//[Offset: 0x3f4, Size: 4]
	int ElectricityArcWPONoiseWorldTileScalePrimitiveDataIdx;//[Offset: 0x3f8, Size: 4]
	int ElectricityArcWPONoiseScalePrimitiveDataIdx;//[Offset: 0x3fc, Size: 4]
	int ElectricityArcSplineWidthPrimitiveDataIdx;//[Offset: 0x400, Size: 4]
	int ElectricityArcColorScalePrimitiveDataIdx;//[Offset: 0x404, Size: 4]
	float ElectricityArcMaxPropagationLength;//[Offset: 0x408, Size: 4]
	Vector ElectricityArcRandScaleMin;//[Offset: 0x40c, Size: 12]
	Vector ElectricityArcRandScaleMax;//[Offset: 0x418, Size: 12]
	Vector2D ElectricityArcTilingDivisorRand;//[Offset: 0x424, Size: 8]
	float ElectricityArcJumpDuration;//[Offset: 0x42c, Size: 4]
	float ElectricityArcLifetime;//[Offset: 0x430, Size: 4]
	float ElectricityArcFadeoutDuration;//[Offset: 0x434, Size: 4]
	Vector ElectricityArcWPONoiseRandMin;//[Offset: 0x438, Size: 12]
	Vector ElectricityArcWPONoiseRandMax;//[Offset: 0x444, Size: 12]
	Vector2D ElectricityArcWPONoiseWorldTileScaleRand;//[Offset: 0x450, Size: 8]
	Vector2D ElectricityArcWPONoiseScaleRand;//[Offset: 0x458, Size: 8]
	float ElectricityArcSplineWidthFirstIteration;//[Offset: 0x460, Size: 4]
	float ElectricityArcSplineWidthSubsequentIteration;//[Offset: 0x464, Size: 4]
	float ElectricityArcColorScaleFirstIteration;//[Offset: 0x468, Size: 4]
	float ElectricityArcColorScaleSubsequentIteration;//[Offset: 0x46c, Size: 4]
	float ElectricityArcRetriggerDelay;//[Offset: 0x470, Size: 4]
	float ElectricityArcImpactFXDelay;//[Offset: 0x474, Size: 4]
	float CharredStateInterpSpeed;//[Offset: 0x478, Size: 4]
	float CharredStateFireAttachedFinalAlpha;//[Offset: 0x47c, Size: 4]
	float CharredStateNearFireFinalAlpha;//[Offset: 0x480, Size: 4]
	float LandscapeCharredStateInterpSpeed;//[Offset: 0x484, Size: 4]
	float MinLandscapeFireSphericalBounds;//[Offset: 0x488, Size: 4]
	float MaxLandscapeFireSphericalBounds;//[Offset: 0x48c, Size: 4]
	float LandscapeFireRandomLocationRadius;//[Offset: 0x490, Size: 4]
	float AmbientAudioFadeTime;//[Offset: 0x494, Size: 4]

--------------------------------
Class: NativeCurieFXTypeSettings
	RuntimeFloatCurve GlowFadeInCurve;//[Offset: 0x0, Size: 136]
	RuntimeFloatCurve GlowFadeOutCurve;//[Offset: 0x88, Size: 136]
	int GlowPriority;//[Offset: 0x110, Size: 4]
	float GlowMaterialIdx;//[Offset: 0x114, Size: 4]
	bool bNeedsSignificanceTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 1]
	bool bNeedsGlow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 1]
	bool bNeedsAmbientAudio;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 1]

--------------------------------
Class: FortCurieAmbientAudioLocationKey

--------------------------------
Class: FortCurieActiveAmbientAudio
	AudioComponent* AudioComponent;//[Offset: 0x0, Size: 8]
	FortCurieComponent* OwningComponent;//[Offset: 0x8, Size: 8]
	int AudioClusterCount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortCurieComponent.CurieComponent.ActorComponent.Object
	Actor* LastElectricityPropagationParent;//[Offset: 0xd0, Size: 8]
	float LastElectrifiedTime;//[Offset: 0xd8, Size: 4]
	float LastFireFXRelatedStateTime;//[Offset: 0xdc, Size: 4]
	uint16 ActiveStateBitfield;//[Offset: 0xe0, Size: 2]
	FortCurieCableSocketComponent* CableSocketComponent;//[Offset: 0x108, Size: 8]
	enum TrackedNativeGlowFlags;//[Offset: 0x110, Size: 1]
	void OnRep_ActiveStateBitfield();// 0xb65a074

--------------------------------
Class: FortCurieCableSocketComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnCurieCableSignalReceived;//[Size: 16]
	FortCurieCableSocket[] CableSockets;//[Offset: 0x468, Size: 16]
	float CableSocketRadius;//[Offset: 0x478, Size: 4]
	void SendSignal(FortCurieCableSocketIdentifier SourceSocketIdentifier, GameplayTag ElementTag, float Magnitude);// 0xcfc3268
	void OnCurieCableSignalReceived__DelegateSignature(out const FortCurieCableSocketIdentifier SocketIdentifier, out const GameplayTag ElementTag, float Magnitude);// 0xbbc0600
	bool IsReceivedElementSignalActive(FortCurieCableSocketIdentifier SocketIdentifier, GameplayTag ElementTag);// 0xcfc3170
	bool IsCableSocketConnected(FortCurieCableSocketIdentifier SocketIdentifier);// 0xcfc30b4
	GameplayTagContainer GetReceivedElementSignals(FortCurieCableSocketIdentifier SourceSocketIdentifier);// 0xcfc2fd8
	float GetReceivedElementSignalMagnitude(FortCurieCableSocketIdentifier SocketIdentifier, GameplayTag ElementTag);// 0xcfc2ee4
	GameplayTagContainer GetOngoingReceivedElementSignals(FortCurieCableSocketIdentifier SourceSocketIdentifier);// 0xcfc2e08
	Vector GetCableSocketWorldLocation(out const FortCurieCableSocketIdentifier SocketIdentifier);// 0xcfc2d44
	void GetCableSocketIdentifiers(out FortCurieCableSocketIdentifier[] SocketIdentifiers);// 0xcfc2c84
	bool GetCableSocketConnection(FortCurieCableSocketIdentifier SourceSocketIdentifier, out Actor* ConnectedActor, out FortCurieCableSocketIdentifier ConnectedSocketIdentifier);// 0xcfc2b20
	bool Disconnect(FortCurieCableSocketIdentifier SourceSocketIdentifier);// 0xcfc2a64
	bool Connect(FortCurieCableSocketIdentifier SourceSocketIdentifier, Actor* DestinationActor, FortCurieCableSocketIdentifier DestinationSocketIdentifier);// 0xcfc2924

--------------------------------
Class: FortCurieCableSocketIdentifier
	GameplayTag Tag;//[Offset: 0x0, Size: 8]
	int Index;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortCurieCableSocket
	FortCurieCableSocketIdentifier SocketIdentifier;//[Offset: 0x0, Size: 12]
	Vector Location;//[Offset: 0xc, Size: 12]
	FortCurieCableSocketConnection SocketConnection;//[Offset: 0x18, Size: 32]
	bool bAutoSendSignalOnElementAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bAutoSendSignalOnElementDetachment;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bAutoRouteToCurieComponentOnReceive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bAutoCreateElectricLinksOnSend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	<GameplayTag,float> ReceivedElementToMagnitudeMap;//[Offset: 0x40, Size: 80]

--------------------------------
Class: FortCurieCableSocketConnection
	Actor* ConnectedActor;//[Offset: 0x0, Size: 8]
	FortCurieCableSocketIdentifier ConnectedSocketIdentifier;//[Offset: 0x8, Size: 12]
	FortCurieCableSocketComponent* ConnectedSocketComponent;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FortCurieGlowFadeRequest
	FortCurieComponent* CurieComponent;//[Offset: 0x0, Size: 8]
	enum FXType;//[Offset: 0x8, Size: 1]
	float StartTimestamp;//[Offset: 0xc, Size: 4]
	bool bIsFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: FortCurieActiveElectricityArc
	Vector TargetActorSmallestAxis;//[Offset: 0x0, Size: 12]
	StaticMeshComponent* Mesh;//[Offset: 0x10, Size: 8]
	FortCurieComponent* OwningComponent;//[Offset: 0x18, Size: 8]
	float StartTime;//[Offset: 0x20, Size: 4]
	bool bPlayedImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: FortCuriePendingElectricityArcRequest
	FortCurieComponent* RequestingComponent;//[Offset: 0x0, Size: 8]
	float ExecutionTime;//[Offset: 0x8, Size: 4]
	bool bIsFirstIteration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: FortCurieFireParticleActorData
	FortCurieComponent* AssociatedComponent;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortCurieFireParticleGrassData

--------------------------------
Class: FortSpatialCellIndex
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortCurieWorldFirePlayerSystem
	FortCurieWorldNiagaraComponent* ActiveWorldFireSystem;//[Offset: 0x0, Size: 8]
	float LastFireParticleSampleTimestamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortCurieWorldNiagaraComponent.NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int AssociatedControllerId;//[Offset: 0x5cc, Size: 4]

--------------------------------
Class: FortCurieGrassFireReplicator.FortStaticReplicatedActor.Actor.Object
	FortCuriePackedGrassDataArray PackedDataArray;//[Offset: 0x228, Size: 280]
	FortSpatialCellIndex MinGrassGridIndex;//[Offset: 0x350, Size: 12]
	FortSpatialCellIndex MaxGrassGridIndex;//[Offset: 0x35c, Size: 12]
	Vector GrassGridOrigin;//[Offset: 0x368, Size: 12]
	Vector GrassGridCellSize;//[Offset: 0x374, Size: 12]
	void OnRep_PackedDataArray();// 0xb65b798
	void OnRep_MinGrassGridIndex();// 0xb65b784
	void OnRep_MaxGrassGridIndex();// 0xb65b770
	void OnRep_GrassGridOrigin();// 0xb65b75c
	void OnRep_GrassGridCellSize();// 0xb65b748

--------------------------------
Class: FortStaticReplicatedActor.Actor.Object

--------------------------------
Class: FortCuriePackedGrassDataArray.FastArraySerializer
	FortCuriePackedGrassData[] Items;//[Offset: 0x108, Size: 16]

--------------------------------
Class: FortCuriePackedGrassData.FastArraySerializerItem
	uint32 Data;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CurieElementAttachHandlersContainer
	CurieElementAttachHandler*[] Handlers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CurieElementAttachHandler.CurieElementGameplayEffectOwner.Object
	enum HandlerPriority;//[Offset: 0x28, Size: 1]
	enum HandlerBehavior;//[Offset: 0x29, Size: 1]
	GameplayTag ElementTag;//[Offset: 0x2c, Size: 8]
	CurieEffectContainer[] OnBeginAttachmentEffects;//[Offset: 0x38, Size: 16]
	CurieEffectContainer[] OngoingAttachmentEffects;//[Offset: 0x48, Size: 16]
	CurieEffectContainer[] OnEndAttachmentEffects;//[Offset: 0x58, Size: 16]

--------------------------------
Class: CurieElementGameplayEffectOwner.Object

--------------------------------
Class: CurieEffectContainer
	GameplayTagQuery TargetFilter;//[Offset: 0x0, Size: 72]
	class GameplayEffect* GameplayEffect;//[Offset: 0x48, Size: 8]

--------------------------------
Class: CurieElementAttachConditionHandlersContainer
	CurieElementAttachConditionHandler*[] Handlers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CurieElementAttachConditionHandler.Object
	enum HandlerPriority;//[Offset: 0x28, Size: 1]
	GameplayTag ElementTag;//[Offset: 0x2c, Size: 8]

--------------------------------
Class: CurieElementPairKey

--------------------------------
Class: CurieElementInteractWithElementHandlersContainer
	CurieElementInteractWithElementHandler*[] Handlers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CurieElementInteractWithElementHandler.Object
	enum HandlerPriority;//[Offset: 0x28, Size: 1]
	enum HandlerBehavior;//[Offset: 0x29, Size: 1]
	GameplayTag ElementTag;//[Offset: 0x2c, Size: 8]

--------------------------------
Class: CurieElementInteractWithMaterialHandlersContainer
	CurieElementInteractWithMaterialHandler*[] Handlers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CurieElementInteractWithMaterialHandler.Object
	enum HandlerPriority;//[Offset: 0x28, Size: 1]
	enum HandlerBehavior;//[Offset: 0x29, Size: 1]
	GameplayTag ElementTag;//[Offset: 0x2c, Size: 8]

--------------------------------
Class: CurieElementInteractWithContainerHandlersContainer
	CurieElementInteractWithContainerHandler*[] Handlers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CurieElementInteractWithContainerHandler.CurieElementGameplayEffectOwner.Object
	enum HandlerPriority;//[Offset: 0x28, Size: 1]
	enum HandlerBehavior;//[Offset: 0x29, Size: 1]
	GameplayTag ElementTag;//[Offset: 0x2c, Size: 8]
	CurieEffectContainer[] OnInstantInteractionEffects;//[Offset: 0x38, Size: 16]
	CurieEffectContainer[] OnBeginInteractionEffects;//[Offset: 0x48, Size: 16]
	CurieEffectContainer[] OngoingInteractionEffects;//[Offset: 0x58, Size: 16]
	CurieEffectContainer[] OnEndInteractionEffects;//[Offset: 0x68, Size: 16]

--------------------------------
Class: FortCurieElectricityPropagationManagerConfig
	int16 MinPropagationDepthLimit;//[Offset: 0x0, Size: 2]
	int16 MaxPropagationDepthLimit;//[Offset: 0x2, Size: 2]
	int16 DefaultPropagationDepthLimit;//[Offset: 0x4, Size: 2]
	int ElectricGridWarningLimit;//[Offset: 0x8, Size: 4]
	float PropagationTimeDelay;//[Offset: 0xc, Size: 4]
	int NeighborCacheDefaultSlack;//[Offset: 0x10, Size: 4]
	int ApplicationMapDefaultSlack;//[Offset: 0x14, Size: 4]
	Vector DefaultCollisionExpansion;//[Offset: 0x18, Size: 12]
	bool bAllowPropagationDepthLimitOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: FortCurieFirePropagationManagerConfig
	float TickInterval;//[Offset: 0x0, Size: 4]
	float FirePropagationDelay;//[Offset: 0x4, Size: 4]
	float MinPropagationFuel;//[Offset: 0x8, Size: 4]
	float DefaultPropagationFuel;//[Offset: 0xc, Size: 4]
	float MaxPropagationFuel;//[Offset: 0x10, Size: 4]
	float DefaultPropagationFuelCost;//[Offset: 0x14, Size: 4]
	float IncompletePropagationRefundFuelMultiplier;//[Offset: 0x18, Size: 4]
	float InactiveFireFailsafeRemovalTime;//[Offset: 0x1c, Size: 4]
	float MaximumPendingInteractTimePerTick;//[Offset: 0x20, Size: 4]
	float PropagationApplicationMagnitude;//[Offset: 0x24, Size: 4]
	float HalfAngleForUpwardMobilityCalculation;//[Offset: 0x28, Size: 4]
	int PropagationLimit;//[Offset: 0x2c, Size: 4]
	int MinimumPendingInteractsToProcessPerTick;//[Offset: 0x30, Size: 4]
	int DefaultConnectivityPoints;//[Offset: 0x34, Size: 4]
	ScalableFloat PropagationRate;//[Offset: 0x38, Size: 40]
	Vector2D PropagationApplicationMagnitudeRandomizationRange;//[Offset: 0x60, Size: 8]
	Vector DefaultFireBoundsExpansion;//[Offset: 0x68, Size: 12]
	bool bAllowPropagationFuelOverrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float FireElementSubgridOverlapThreshold;//[Offset: 0x78, Size: 4]
	float BuildingFirePropagationTickInterval;//[Offset: 0x7c, Size: 4]
	float GrassFirePropagationInterval;//[Offset: 0x80, Size: 4]
	float GrassFireBurnoutInterval;//[Offset: 0x84, Size: 4]
	float GrassFireInitialPropagationDelay;//[Offset: 0x88, Size: 4]
	float GrassFireMinPropagationDelay;//[Offset: 0x8c, Size: 4]
	float GrassFireMaxPropagationDelay;//[Offset: 0x90, Size: 4]
	float GrassFireBurnoutTime;//[Offset: 0x94, Size: 4]
	float GrassMaxWaterContent;//[Offset: 0x98, Size: 4]
	float GrassWaterContentChangeOnFireApplication;//[Offset: 0x9c, Size: 4]
	float GrassWaterContentChangeOnWaterApplication;//[Offset: 0xa0, Size: 4]
	float GrassFirePropagationCostPerLocation;//[Offset: 0xa4, Size: 4]
	float GrassTraceLandscapeOffset;//[Offset: 0xa8, Size: 4]
	float FireFoundationGrassDefaultExpansion;//[Offset: 0xac, Size: 4]
	int GrassFirePropagationRate;//[Offset: 0xb0, Size: 4]
	int GrassGridCellsPerAxisManagedByGrassFireReplicator;//[Offset: 0xb4, Size: 4]
	int GrassGridFireMinimumTraceOptimization;//[Offset: 0xb8, Size: 4]
	int GrassFirePropagationFuelConsumptionLimit;//[Offset: 0xbc, Size: 4]
	bool bUseLandscapeMapForGrassGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bUseIFACacheForGrassGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]

--------------------------------
Class: FortCurieSpatialManagerConfig
	float TickInterval;//[Offset: 0x0, Size: 4]
	float OverlapFireApplicationMagnitude;//[Offset: 0x4, Size: 4]
	int FireOverlapMaximumTestActorsPerFrame;//[Offset: 0x8, Size: 4]
	float FireOverlapMaximumDelayBetweenChecks;//[Offset: 0xc, Size: 4]
	float FireOverlapDefaultExpansion;//[Offset: 0x10, Size: 4]
	float GrassWaterContentDecayRate;//[Offset: 0x14, Size: 4]
	float FireLandscapePropagationApplicationMagnitude;//[Offset: 0x18, Size: 4]
	float FireElementSubgridVoxelOverlapThreshold;//[Offset: 0x1c, Size: 4]
	float FireElementGridOverlapVolumeThreshold;//[Offset: 0x20, Size: 4]
	int FireNavRelevantObjectPoolCap;//[Offset: 0x24, Size: 4]
	int AccurateCollisionGridCellMinimum;//[Offset: 0x28, Size: 4]
	int PrecacheVoxelGridCellMinimum;//[Offset: 0x2c, Size: 4]
	float PrecacheVoxelTimeLimitPerFrame;//[Offset: 0x30, Size: 4]
	int MaxNumStormFireConsiderationsPerFrame;//[Offset: 0x34, Size: 4]
	int StormFireInteractionTickCheckFreq;//[Offset: 0x38, Size: 4]
	float MaxTimeForStormFireInteractionsPerFrame;//[Offset: 0x3c, Size: 4]
	float StormFireInteractionConsiderationDelay;//[Offset: 0x40, Size: 4]
	float StormFireInteractionMagnitude;//[Offset: 0x44, Size: 4]
	float MovableActorFireInteractionMagnitude;//[Offset: 0x48, Size: 4]
	FoliageType*[] GrassFoliageTypes;//[Offset: 0x50, Size: 16]
	PhysicalMaterial*[] IgnitablePhysicalMaterials;//[Offset: 0x60, Size: 16]
	bool bFireElementSubgridUseCenterAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bAllowFireInteractsWhileInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	bool bAllowFireInteractsWhileDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 1]
	bool bUseAccurateCollisionVoxelization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 1]
	bool bAllowStormFireInteractions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bCreateFireInteractsForMovableActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]

--------------------------------
Class: FortCurieCableSignalManagerConfig
	int SignalsProcessedPerTick;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PropertyOverrideScope
	PropertyOverride[] PropertyOverrides;//[Offset: 0x0, Size: 16]

--------------------------------
Class: GameplayMutatorEventData
	int EventId;//[Offset: 0x0, Size: 4]
	int EventParam1;//[Offset: 0x4, Size: 4]
	int EventParam2;//[Offset: 0x8, Size: 4]
	int EventParam3;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameplayMutatorObjectDataArray.FastArraySerializer
	GameplayMutatorObjectData[] ObjectDataList;//[Offset: 0x108, Size: 16]

--------------------------------
Class: GameplayMutatorObjectData.FastArraySerializerItem
	Object* TheObject;//[Offset: 0x10, Size: 8]
	int ObjectId;//[Offset: 0x18, Size: 4]
	int ObjectValue1;//[Offset: 0x1c, Size: 4]
	int ObjectValue2;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortAthenaMutator_AI.FortGameplayMutator.Info.Actor.Object
	FortMovementComp_AIChar*[] DeimosMoveComponents;//[Offset: 0x250, Size: 16]

--------------------------------
Class: FortMovementComp_AIChar.FortMovementComp_Character.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeimos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc8, Size: 1]
	AthenaPathFollowingComponent* CachedAthenaPathFollowingComp;//[Offset: 0x2cd8, Size: 8]
	AthenaAIController* CachedAthenaAIController;//[Offset: 0x2ce0, Size: 8]

--------------------------------
Class: FortGameStateComponent_Telemetry.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	int[] MatchCounts;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: FortGameStateComponent_ActiveEventManager.FortGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	FString[] EventsAlreadyApplied;//[Offset: 0xb0, Size: 16]
	void OnPlaylistDataReady(FortGameStateAthena* GameState, const FortPlaylist* Playlist, out const GameplayTagContainer PlaylistContextTags);// 0xd00f370
	void HandleActiveSeasonDataChanged(out const FString[] ActiveEventFlags);// 0xd00f258

--------------------------------
Class: FortGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: FortGameStateComponent_Quests.FortGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: FortGameStateComponent_RadiusTracker.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	Actor*[] UpdateQueue;//[Offset: 0x100, Size: 16]
	bool UpdateRadiusTrackingSizes(Actor* ActorTarget, float MaxCenterOffset, float MinimumRadius, float MaximumRadius);// 0xd01225c
	void SetRadiusTrackingViewersFromPlayerPawns(out RadiusTrackingInitializer RadiusTrackingInitializer, out const RadiusTrackingInitializer RadiusTrackingInitializerInput, out const FortPlayerPawn*[] ViewerPawns);// 0xd0120d4
	void RemoveTrackingForActorFromTrackingGroup(Actor* TrackedActor, const FortPlayerController* PlayerTrackingActor, enum GroupingType);// 0xd011fb0
	void RemoveTrackingForActorFromPlayer(Actor* TrackedActor, FortPlayerController* PlayerTrackingActor, enum GroupingType);// 0xd011e8c
	void RemoveTrackingForActorAndTrackingKey(Actor* TrackedActor, RadiusTrackingGroupKey TrackingKey);// 0xd011d9c
	void RemoveTrackingForActor(Actor* TrackedActor);// 0xd011cf4
	bool RemoveOwnerSquadMemberIndexFromTracking(Actor* TrackedActor, const FortPlayerController* PlayerTrackingActor);// 0xd011c04
	static bool RemoveFromInitializerOwnerSquadMemberIndex(out RadiusTrackingInitializer RadiusTrackerInitializer, FortPlayerStateAthena* PlayerToRemove);// 0xd011af8
	void OnTrackedActorEndPlay(Actor* Actor, byte EndPlayReason);// 0xd011a10
	void OnTrackedActorDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd0117b0
	void OnTrackedActorDestroyed(Actor* DestroyedActor);// 0xd011708
	static RadiusTrackingInitializer MakeRadiusTrackingInitializer(float MaxCenterOffset, float MinimumRadius, float MaximumRadius, float TimeBetweenUpdatesInSeconds, float RadiusAmountToShrinkEachUpdate, LinearColor CircleColor, Actor* ActorTarget, FortPlayerController*[] TargetTrackers, enum GroupingType);// 0xd011370
	static FortGameStateComponent_RadiusTracker* GetGameStateRadiusTrackerComponent(Object* WorldContextObject);// 0xd0112c8
	static void BreakRadiusTrackingInitializer(out const RadiusTrackingInitializer RadiusTrackingInitializer, out float MaxCenterOffset, out float MinimumRadius, out float MaximumRadius, out float TimeBetweenUpdatesInSeconds, out float RadiusAmountToShrinkEachUpdate, out LinearColor CircleColor, out Actor* ActorTarget, out FortPlayerController*[] TargetTrackers, out enum GroupingType);// 0xd010f14
	static void AddToInitializerOwnerSquadMemberIndex(out RadiusTrackingInitializer RadiusTrackerInitializer, FortPlayerStateAthena* PlayerToAdd);// 0xd010e14
	void AddOwnerSquadMemberIndexFromTracking(Actor* TrackedActor, const FortPlayerController* PlayerTrackingActor);// 0xd010d30
	RadiusTrackingGroupKey AddActorTrackingInfo(out const RadiusTrackingInitializer RadiusTrackingInitializer);// 0xd010c64

--------------------------------
Class: RadiusTrackingInitializer
	float MaxCenterOffset;//[Offset: 0x0, Size: 4]
	float MinimumRadius;//[Offset: 0x4, Size: 4]
	float MaximumRadius;//[Offset: 0x8, Size: 4]
	MaterialInterface* CircleDrawingMaterial;//[Offset: 0x10, Size: 8]
	float TimeBetweenUpdatesInSeconds;//[Offset: 0x18, Size: 4]
	float RadiusAmountToShrinkEachUpdate;//[Offset: 0x1c, Size: 4]
	LinearColor CircleColor;//[Offset: 0x20, Size: 16]
	enum GroupingType;//[Offset: 0x30, Size: 1]

--------------------------------
Class: RadiusTrackingGroupKey

--------------------------------
Class: FortGameStateComponent_AffiliationManager.FortGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	FactionData GameParticipantFaction;//[Offset: 0xb0, Size: 248]
	FactionData[] CachedFactionData;//[Offset: 0x1a8, Size: 16]
	GameplayTagContainer CachedFactionTags;//[Offset: 0x1b8, Size: 32]
	GameplayTagContainer BlockResetSpecificRelationTags;//[Offset: 0x1d8, Size: 32]
	FortActorComponent_Affiliation*[] AffiliationComponents;//[Offset: 0x1f8, Size: 16]
	FortFactionInfo[] FactionInfos;//[Offset: 0x208, Size: 16]
	FortActorComponent_Affiliation*[] AffiliationComponentsToRegister;//[Offset: 0x218, Size: 16]
	void OnRep_FactionInfos();// 0xd00f51c

--------------------------------
Class: FactionData
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FText Name;//[Offset: 0x8, Size: 24]
	FText Description;//[Offset: 0x20, Size: 24]
	GameplayTag FactionTag;//[Offset: 0x38, Size: 8]
	byte DefaultAttitude;//[Offset: 0x40, Size: 1]
	bool bAreFactionMemberAllies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bShouldSpecificRelationsApplyToEntireFaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	bool bMembersCanResetSpecificRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 1]
	ScalableFloat ResetSpecificRelationUnawareDelay;//[Offset: 0x48, Size: 40]
	ScalableFloat ResetSpecificRelationNoDamageDelay;//[Offset: 0x70, Size: 40]
	GameplayTagContainer RelationExceptions;//[Offset: 0x98, Size: 32]

--------------------------------
Class: FortActorComponent_Affiliation.ActorComponent.Object
	bool bHasSpecificRelations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bHasPerceptionUpdateRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	GameplayTagContainer DefaultFactionTags;//[Offset: 0xb8, Size: 32]
	bool bIsRegisteredToAffiliationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	float ResetSpecificRelationUnawareDelay;//[Offset: 0xdc, Size: 4]
	float ResetSpecificRelationNoDamageDelay;//[Offset: 0xe0, Size: 4]
	uint32 AffiliationUID;//[Offset: 0xe4, Size: 4]
	GameplayTagContainer CurrentFactions;//[Offset: 0xe8, Size: 32]
	GameplayTagContainer CurrentBlockResetRelationTags;//[Offset: 0x118, Size: 32]
	FortAffiliationComponentSpecificRelations SpecificRelations;//[Offset: 0x138, Size: 32]
	FortGameStateComponent_AffiliationManager* CachedAffiliationManager;//[Offset: 0x198, Size: 8]
	AIPerceptionComponent* CachedAIPerceptionComponent;//[Offset: 0x1a0, Size: 8]
	FortAthenaAIBotController* CachedBotController;//[Offset: 0x1a8, Size: 8]
	void UpdatePerception();// 0xce9e0cc
	void OnRep_CurrentFactions();// 0xb608a24
	void OnOwnerTeamIndexChanged();// 0xce9e0b8
	void OnOwnerPawnUnpossessed(Pawn* Pawn);// 0xce9e010
	void OnOwnerPawnPossessed(Pawn* Pawn);// 0xce9df68
	void OnOwnerPawnDamaged(Actor* DamageOnOwnerPawnDamageddActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xce9dd08
	void OnBotControllerAlertLevelChanged(FortAthenaAIBotController* BotController, enum OldAlertLevel, enum NewAlertLevel);// 0xce9dbe0

--------------------------------
Class: FortAffiliationComponentSpecificRelations
	FortAffiliationActorIdentifierList Identifiers;//[Offset: 0x0, Size: 16]
	FortActorComponent_Affiliation*[] Components;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortAffiliationActorIdentifierList
	uint32[] AffiliationComponentUIDs;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortFactionInfo
	GameplayTag FactionTag;//[Offset: 0x0, Size: 8]
	byte DefaultAttitude;//[Offset: 0x8, Size: 1]
	bool bHasSpecificRelations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bAreFactionMemberAllies;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bShouldSpecificRelationsApplyToEntireFaction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bMembersCanResetSpecificRelation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	float ResetSpecificRelationUnawareDelay;//[Offset: 0xc, Size: 4]
	float ResetSpecificRelationNoDamageDelay;//[Offset: 0x10, Size: 4]
	GameplayTagContainer FactionRelations;//[Offset: 0x18, Size: 32]
	FortAffiliationActorIdentifierList SpecificRelations;//[Offset: 0x78, Size: 16]
	FortActorComponent_Affiliation*[] Members;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: FortGameStateComponent_TimeDilation.FortGameStateComponent.GameStateComponent.GameFrameworkComponent.ActorComponent.Object
	CurveFloat* EndGameTimeDilationCurve;//[Offset: 0xb0, Size: 8]
	ScalableFloat EndGameTimeDilationDuration;//[Offset: 0xb8, Size: 40]
	FortAthenaCustomTimeDilationManager* TimeDilationManager;//[Offset: 0xe0, Size: 8]

--------------------------------
Class: FortAthenaCustomTimeDilationManager.Object
	CurveFloat* TimeDilationCurve;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MeshNetworkStatus
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bConnectedToRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum GameServerNodeType;//[Offset: 0x2, Size: 1]

--------------------------------
Class: FortVolumeManager.Info.Actor.Object
	MulticastInlineDelegateProperty OnClientEnterVolume;//[Size: 16]
	MulticastInlineDelegateProperty OnClientExitVolume;//[Size: 16]
	MulticastInlineDelegateProperty OnVolumeStateChanged;//[Size: 16]
	FortVolume*[] VolumeObjects;//[Offset: 0x280, Size: 16]
	FortVolumeActiveUsers VolumeActivePlayers;//[Offset: 0x290, Size: 288]
	CreativeAssetCostDirectory* AssetCostDirectory;//[Offset: 0x430, Size: 40]
	DataTable* BlackListClassesTable;//[Offset: 0x458, Size: 8]
	DataTable* BlackListObjectsTable;//[Offset: 0x460, Size: 8]
	<class Object> BlackListClasses;//[Offset: 0x468, Size: 80]
	<Object*> BlackListObjects;//[Offset: 0x4b8, Size: 80]
	bool bInSpawningStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508, Size: 1]
	VolumePlayerStateInfo[] PendingPlayers;//[Offset: 0x518, Size: 16]
	AsyncOverlapQueue* OverlapQueue;//[Offset: 0x530, Size: 8]
	AsyncTraceQueue* TraceQueue;//[Offset: 0x538, Size: 8]
	FortCreativeGeneralThrottleManager* FortCreativeGeneralThrottleManager;//[Offset: 0x540, Size: 8]
	MulticastInlineDelegateProperty OnClientVolumeUGCViewableStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnServerVolumeUGCViewableStateChanged;//[Size: 16]
	bool WillVolumeDeleteAfterActorSpawn(FortVolume* Volume);// 0xd2108c8
	bool VolumeContainsUser(const PlayerState* PlayerState, const FortVolume* Volume);// 0xd2107d8
	void UpdatePublishWatermarkFlagForVolume(FortVolume* Volume);// 0xd210730
	void TryActivateQueuedVolumes(enum GamePhase);// 0xd210688
	FortVolume* SpawnVolume(class FortVolume VolumeActor, FortPlaysetItemDefinition* Playset, Vector Location, Rotator Rotation);// 0xd21051c
	bool ShouldSpawnActor(World* WorldContext, class Actor ActorClass, out const Vector Location, out const Rotator Rotation);// 0xd210390
	bool ShouldShowPublishWatermarkForVolume(FortVolume* Volume, out FString CreatorName, out FString CreativeMnemonic, out FText Title);// 0xd210174
	void ResetVolumeAndLevelRecord(FortVolume* Volume, FortPlayerController* RequestingFortPC);// 0xd210090
	void ResaveBuildingFoundationActorFromHealthChange(Actor* Actor, float NewHealth);// 0xd20ffa8
	void ResaveActorWithVolume(Actor* Actor, FortVolume* Volume);// 0xd20fec4
	void ResaveActor(Actor* Actor);// 0xd20fe1c
	void RemovePawnNotRespawningInsideVolume(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd20fbbc
	void RemoveBuildingFoundationActorFromSave(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd20f95c
	void MinigameExitReadOnlyForVolume(FortVolume* Volume);// 0xd20f8b4
	void IncrementUserIslandLoading();// 0xd20f8a0
	void HandleVolumeStateChanged(enum NewState, FortVolume* Volume);// 0xd20f7b8
	void HandleVolumeReset(FortVolume* VolumeResetting);// 0xd20f710
	void HandlePlayerPawnPossessed(Pawn* Pawn);// 0xd20f668
	void HandleBuildingFoundationLoaded(BuildingFoundation* LoadedFoundation);// 0xd20f5c0
	void HandleActorHealthChanged(Actor* Actor, float NewHealth);// 0xd20f4d8
	void HandleActorExitedVolume(Actor* Actor, ActorComponent* ActorComponent, Pawn* InstigatorPawn, FortVolume* Volume);// 0xd20f378
	void HandleActorEnteredVolume(Actor* Actor, ActorComponent* ActorComponent, Pawn* InstigatorPawn, FortVolume* Volume);// 0xd20f218
	bool GetVolumesForLocation(Vector Location, out FortVolume*[] Volumes);// 0xd20f10c
	bool GetVolumesForActor(const Actor* Actor, out FortVolume*[] Volumes, const bool bUseActorBounds);// 0xd20efac
	static void GetVolumeManager(const Object* WorldContextObject, out FortVolumeManager* OutVolumeManager, out enum OutIsValid);// 0xd20ee70
	FortVolume* GetVolumeForPlayerState(const PlayerState* PlayerState);// 0xd20edc0
	FortVolume* GetVolumeForLocationWithComponent(Vector Location, out const class ActorComponent ComponentType, out ActorComponent*[] OutComponents);// 0xd20ec60
	FortVolume* GetVolumeForLocation(Vector Location);// 0xd20ebb0
	FortVolume* GetVolumeForActorWithComponent(const Actor* Actor, out const class ActorComponent ComponentType, out ActorComponent*[] OutComponents, const bool bUseActorBounds);// 0xd20ea04
	FortVolume* GetVolumeForActor(const Actor* Actor);// 0xd20e954
	static FortMinigameSettingsBuilding* GetSettingsActorForVolume(const FortVolume* ContextVolume);// 0xd20e8ac
	static FortMinigameSettingsBuilding* GetSettingsActor(const Actor* ContextActor);// 0xd20e804
	FortMinigame* GetMinigameFromVolume(const Actor* Actor);// 0xd20e754
	static FortMinigame* GetMinigameForVolume(const FortVolume* Volume);// 0xd20e6ac
	static FortMinigame* GetMinigameForPlayerState(const PlayerState* PlayerState);// 0xd20e604
	PlayerState*[] GetAllPlayerStatesInVolume(FortVolume* Volume);// 0xd20e518
	Controller*[] GetAllPlayersInVolume(FortVolume* Volume);// 0xd20e42c
	void FinishedSpawningCurrentLevelRecord(out const AsyncTaskResult Result);// 0xd20e304
	void EnterReadOnlyForVolume(FortVolume* Volume);// 0xd20e25c
	EvaluationResult DoesThermometerHaveBudgetForActor(const Actor* InstigatorActor, Actor* TestActor, out const Vector Location, out const Rotator Rotation);// 0xd20e028
	void DecrementUserIslandLoading();// 0xd20e014
	static bool CanCreatePlayset(FortPlayerPawn* Thrower, out const Vector StartLocation, out const Rotator PlaysetRotation, FortPlaysetItemDefinition* NewPlayset);// 0xd20de88
	void AttemptAddToVolumeAfterDelay(Actor* Actor);// 0xd20dde0
	bool AreIslandsLoading();// 0xd20dda8
	void ApplyLevelSaveToWorld(LevelSaveRecord* SaveToSpawnFrom, const bool bComplexShouldSpawn);// 0xd20dcb8
	void AddOrRemovePawnAfterVehicleChange(FortPlayerPawn* FortPawn, Actor* NewVehicle, Actor* OldVehicle);// 0xd20db94
	void AddOrRemovePawn(FortPawn* FortPawn);// 0xd20daec
	bool ActorsAreInSameVolume(const Actor* Left, const Actor* Right);// 0xd20d9fc

--------------------------------
Class: FortVolumeActiveUsers.FastArraySerializer
	VolumePlayerStateInfo[] Items;//[Offset: 0x108, Size: 16]
	FortVolumeManager* Manager;//[Offset: 0x118, Size: 8]

--------------------------------
Class: VolumePlayerStateInfo.FastArraySerializerItem
	UniqueNetIdRepl UniquePlayerId;//[Offset: 0x10, Size: 40]
	FortVolume* Volume;//[Offset: 0x38, Size: 8]

--------------------------------
Class: CreativeAssetCostDirectory.DataAsset.Object
	FortCreativeAssetCostData CostDirectory;//[Offset: 0x30, Size: 160]
	<FString,int> ComponentSimulationCostDirectory;//[Offset: 0xd0, Size: 80]

--------------------------------
Class: FortCreativeAssetCostData
	<FString,CreativeActorMetaData> MetaDataMap;//[Offset: 0x0, Size: 80]
	<FName,CreativeActorMetaData> NameMetaDataMap;//[Offset: 0x50, Size: 80]

--------------------------------
Class: CreativeActorMetaData
	int AssetSize;//[Offset: 0x0, Size: 4]
	int InstanceSize;//[Offset: 0x4, Size: 4]
	int SimulationCost;//[Offset: 0x8, Size: 4]
	int DrawCall;//[Offset: 0xc, Size: 4]
	int AudioCost;//[Offset: 0x10, Size: 4]
	int NetworkCost;//[Offset: 0x14, Size: 4]
	CreativeAssetMetaData[] AssetDependencies;//[Offset: 0x18, Size: 16]

--------------------------------
Class: CreativeAssetMetaData
	FString StringObjectPtr;//[Offset: 0x0, Size: 16]
	FName NameObjectPtr;//[Offset: 0x10, Size: 8]
	Object* ObjectPtr;//[Offset: 0x18, Size: 40]
	int AssetSize;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AsyncOverlapQueue.Object
	void ThrottledAsyncSphereOverlapActors(Actor* ContextActor, out const Vector Location, const float Radius, const bool bCheckLineOfSight, out const Actor*[] ActorsToIgnore, delegate ShouldCancelProcess, delegate ProcessHitActorFunction, delegate CompletionFunction, byte TraceChannel);// 0xce2adc4
	static void AsyncSphereOverlapActors(Actor* ContextActor, out const Vector Location, const float Radius, out const Actor*[] ActorsToIgnore, delegate ShouldCancelProcess, delegate ProcessHitActorFunction, delegate CompletionFunction, byte TraceChannel);// 0xce2ab04

--------------------------------
Class: AsyncTraceQueue.Object
	void ThrottledAsyncTrace_SourceTarget(Object* WorldContextObject, const bool bUseLocalCameraAsSource, const Actor* SourceActor, out const Vector SourceOffset, const Actor* TargetActor, out const Vector TargetOffset, out const Actor*[] ActorsToIgnore, byte CollisionChannel, delegate CompletionFunction);// 0xce2b7fc
	void ThrottledAsyncTrace(Object* WorldContextObject, out const Vector StartLocation, out const Vector EndLocation, out const Actor*[] ActorsToIgnore, byte CollisionChannel, delegate CompletionFunction);// 0xce2b5c8
	static void AsyncTrace_Immediate(Object* WorldContextObject, out const Vector StartLocation, out const Vector EndLocation, out const Actor*[] ActorsToIgnore, byte CollisionChannel, delegate CompletionFunction);// 0xce2b39c

--------------------------------
Class: FortCreativeGeneralThrottleManager.Object
	void RequestThrottleObject(Object* InWorldContextObject, Object* InThrottleObject, int InThrottleBucketID, delegate InThrottleCompleteFunction);// 0xcfadff4

--------------------------------
Class: FortMinigameSettingsBuilding.Info.Actor.Object
	FortCreativeVolumeLinkComponent* CreativeLinkComponent;//[Offset: 0x230, Size: 8]
	FText[] GameDescriptionData;//[Offset: 0x238, Size: 16]
	FText GameNameData;//[Offset: 0x248, Size: 24]
	bool bShowPublishWatermark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	MulticastInlineDelegateProperty OnGameDescriptionDataChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnGameNameDataChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnVolumeMachineSet;//[Size: 16]
	MulticastInlineDelegateProperty OnShowPublishWatermarkChanged;//[Size: 16]
	bool bAllowOutOfBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	bool bDeferDeletePlayerBuiltBuildingActorsForRollback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 1]
	CreativeIslandMatchmakingSettings MatchmakingSettings;//[Offset: 0x2b0, Size: 80]
	int MinimumNumberOfPlayersUserSetting;//[Offset: 0x300, Size: 4]
	int MaximumNumberOfPlayersUserSetting;//[Offset: 0x304, Size: 4]
	enum MmsType;//[Offset: 0x308, Size: 1]
	enum MmsPrivacy;//[Offset: 0x309, Size: 1]
	bool bPrefersRespectingPartiesFromMMS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 1]
	int MmsPlayerCount;//[Offset: 0x30c, Size: 4]
	int MmsBetaPlayerCount;//[Offset: 0x310, Size: 4]
	enum MmsPlayersPerTeam;//[Offset: 0x314, Size: 1]
	int JoinInProgress;//[Offset: 0x318, Size: 4]
	int ShowResourceFeedOnElimination;//[Offset: 0x320, Size: 4]
	FortVolume* SettingsVolume;//[Offset: 0x328, Size: 8]
	GUID SavedActorGuid;//[Offset: 0x330, Size: 16]
	void UpdateMatchmakingSettings();// 0xd0c7ad0
	void SetGameDescription(out const FText GameName, out const FText[] GameDescriptionText);// 0xd0c7968
	void OnRep_SettingsVolume();// 0xd0c7954
	void OnRep_GameNameData();// 0xd0c7940
	void OnRep_GameDescriptionData();// 0xd0c792c
	void OnMinigameStarted();// 0xd0c7918
	void OnMinigameSettingsBuildingShowPublishWatermarkChanged(FortMinigameSettingsBuilding* MinigameSettingsBuilding, bool bNewShowPublishWatermark);// 0xd0c7828
	void OnMinigameEnded();// 0xd0c7814
	void OnLinkedVolumeSet(FortVolume* PreviousVolume, FortVolume* NewVolume);// 0xd0c7730
	int GetTeamSetting();// 0xbbc0600
	FText GetGameName();// 0xd0c767c
	FText[] GetGameDescription();// 0xd0c75f4
	void CheckShowPublishWatermarkChanged();// 0xd0c75e0

--------------------------------
Class: LevelSaveRecord.Object
	FName PackageName;//[Offset: 0x28, Size: 8]
	int16 SaveVersion;//[Offset: 0x30, Size: 2]
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	Vector Center;//[Offset: 0x34, Size: 12]
	ObjectCostVersion CreateVersion;//[Offset: 0x40, Size: 24]
	Vector HalfBoundsExtent;//[Offset: 0x58, Size: 12]
	Rotator Rotation;//[Offset: 0x64, Size: 12]
	Vector Scale;//[Offset: 0x70, Size: 12]
	uint64 LastRecordID;//[Offset: 0x88, Size: 8]
	<int,ActorTemplateRecord> TemplateRecords;//[Offset: 0x90, Size: 80]
	<GUID,ActorInstanceRecord> ActorInstanceRecords;//[Offset: 0xe0, Size: 80]
	<GUID,ActorInstanceRecord> VolumeInfoActorRecords;//[Offset: 0x130, Size: 80]
	<FName,LevelStreamedDeleteActorRecord> LevelStreamedActorsToDelete;//[Offset: 0x180, Size: 80]
	int PlayerPersistenceUserWipeNumber;//[Offset: 0x1d0, Size: 4]
	MulticastInlineDelegateProperty OnFinishedWrite;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedRead;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedRecordCollapse;//[Size: 16]
	ActorInstanceRecord[] InstanceRecords_LEGACY;//[Offset: 0x208, Size: 16]
	DeleteActorRecord[] DeleteActorRecords_LEGACY;//[Offset: 0x218, Size: 16]
	MulticastInlineDelegateProperty FinishSpawningDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnRemoveAllDeletedLevelStreamedActorsComplete;//[Size: 16]
	AsyncTaskQueue* TaskQueue;//[Offset: 0x290, Size: 8]
	LevelRecordSpawner*[] ActiveSpawners;//[Offset: 0x298, Size: 16]
	MulticastInlineDelegateProperty OnFinishedRemoveInvalidDeleteRecords;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedRemoveInvalidInstanceRecords;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedRemoveDuplicateInstanceRecords;//[Size: 16]
	RecordBucketMap RecordBucketMap;//[Offset: 0x2d8, Size: 96]
	MulticastInlineDelegateProperty OnFinishedSeparateModifiedActors;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedDeletePendingActors;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedWriteToBuffer;//[Size: 16]
	Actor*[] RecentlySpawnedActors;//[Offset: 0x488, Size: 16]
	bool bRequiresGridPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	void RemoveInvalidInstanceRecordsHelper(const int StartRecordIndex);// 0xd2395c8
	void RemoveInvalidDeleteRecordsHelper(const int StartRecordIndex);// 0xd239520
	void FindAndRemoveDuplicateRecordsUsingBucketMap(const int StartRecordIndex);// 0xd239478
	void FailsafeTimerExpired();// 0xd239464

--------------------------------
Class: ObjectCostVersion
	int MajorVersion;//[Offset: 0x0, Size: 4]
	int64 Timestamp;//[Offset: 0x8, Size: 8]
	uint32 MinorVersionStringHash;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ActorTemplateRecord

--------------------------------
Class: ActorInstanceRecord

--------------------------------
Class: LevelStreamedDeleteActorRecord

--------------------------------
Class: DeleteActorRecord

--------------------------------
Class: AsyncTaskQueue.Object
	void OnAsyncTaskFinished(out const AsyncTaskResult Result);// 0xce2b17c

--------------------------------
Class: LevelRecordSpawner.Object
	MulticastInlineDelegateProperty OnFinishedSpawning;//[Size: 16]
	FortVolume* VolumeCurrentlySpawningWithin;//[Offset: 0xe8, Size: 8]
	AsyncTaskQueue* TaskQueue;//[Offset: 0xf0, Size: 8]
	MulticastInlineDelegateProperty OnFinishedAsyncLoadingActors;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedSpawningFromRecords;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedPostUpdate;//[Size: 16]
	class Actor[] ActorClassesThatWereAlreadyLoaded;//[Offset: 0x148, Size: 16]
	Actor*[] SpawnedActors;//[Offset: 0x160, Size: 16]
	void NotifyFinishedSpawning(out const AsyncTaskResult Result);// 0xd239310
	void FailsafeTimerExpired();// 0xd2392fc

--------------------------------
Class: RecordBucketMap
	<IntPoint,RecordBucket> PositionToRecord;//[Offset: 0x0, Size: 80]
	int[] DuplicateRecords;//[Offset: 0x50, Size: 16]

--------------------------------
Class: RecordBucket
	int[] RecordIndices;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortLocalizationService.Info.Actor.Object
	<FString> DocumentLoadInProgress;//[Offset: 0x250, Size: 80]
	<FString,ReplicatedLocalizedDocument> TranslationsReadyToSendToTheClient;//[Offset: 0x2a0, Size: 80]
	<FString,ProcessedTranslations> AvailableTranslationsOnTheClient;//[Offset: 0x2f0, Size: 80]

--------------------------------
Class: ReplicatedLocalizedDocument
	FString ID;//[Offset: 0x0, Size: 16]
	FString SourceLang;//[Offset: 0x10, Size: 16]
	ReplicatedTranslatedStrings[] Strings;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ReplicatedTranslatedStrings
	FString ID;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 16]
	LocalizedStringPair[] Translations;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ProcessedTranslations

--------------------------------
Class: FortSanitizationService.Object
	<uint32,SanitizationData> PendingRequests;//[Offset: 0x30, Size: 80]

--------------------------------
Class: SanitizationData
	AsyncTaskQueue* TaskQueue;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortHermesLoadContext.Object

--------------------------------
Class: SpawnMachineRepDataArray.FastArraySerializer
	SpawnMachineRepData[] SpawnMachineRepDataArray;//[Offset: 0x108, Size: 16]
	FortGameStateAthena* OwningGameState;//[Offset: 0x118, Size: 8]

--------------------------------
Class: SpawnMachineRepData.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 12]
	enum SpawnMachineState;//[Offset: 0x18, Size: 1]
	float SpawnMachineCooldownStartTime;//[Offset: 0x1c, Size: 4]
	float SpawnMachineCooldownEndTime;//[Offset: 0x20, Size: 4]
	int SpawnMachineRepDataHandle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: UnicornDriver.Info.Actor.Object
	bool bEnable_MainHighlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bEnable_ShorterExtendedHighlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bEnable_ShortHighlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	bool bEnable_ShortExtendedHighlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 1]
	bool bEnable_MediumHighlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bEnable_MediumExtendedighlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool bEnable_PlayerSpotlightReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool bEnable_PlayerSpotlightNoDeathsReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	bool bEnable_VATReel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float ShorterReelMaxClipDuration;//[Offset: 0x354, Size: 4]
	float ShorterReelMaxLookback;//[Offset: 0x358, Size: 4]
	float ShorterReelMaxTailTime;//[Offset: 0x35c, Size: 4]
	float ShorterReelEliminationLookbackTime;//[Offset: 0x360, Size: 4]
	float ShortReelMaxClipDuration;//[Offset: 0x364, Size: 4]
	float ShortReelMaxLookback;//[Offset: 0x368, Size: 4]
	float ShortReelMaxTailTime;//[Offset: 0x36c, Size: 4]
	float ShortReelEliminationLookbackTime;//[Offset: 0x370, Size: 4]
	float ShortExtendedReelMaxClipDuration;//[Offset: 0x374, Size: 4]
	float ShortExtendedReelMaxLookback;//[Offset: 0x378, Size: 4]
	float ShortExtendedReelMaxTailTime;//[Offset: 0x37c, Size: 4]
	float ShortExtendedReelEliminationLookbackTime;//[Offset: 0x380, Size: 4]
	float MediumReelMaxClipDuration;//[Offset: 0x384, Size: 4]
	float MediumReelMaxLookback;//[Offset: 0x388, Size: 4]
	float MediumReelMaxTailTime;//[Offset: 0x38c, Size: 4]
	float MediumExtendedReelMaxClipDuration;//[Offset: 0x390, Size: 4]
	float MediumExtendedReelMaxLookback;//[Offset: 0x394, Size: 4]
	float MediumExtendedReelMaxTailTime;//[Offset: 0x398, Size: 4]
	float VATReelEliminationLookbackTime;//[Offset: 0x39c, Size: 4]
	int MaxHighlightsToSave;//[Offset: 0x3b0, Size: 4]
	float MinHighlightScore;//[Offset: 0x3b4, Size: 4]
	float DefaultShotLeadTime;//[Offset: 0x3b8, Size: 4]
	float DefaultShotTailTime;//[Offset: 0x3bc, Size: 4]
	float HighlightAnnotationTime;//[Offset: 0x3c0, Size: 4]
	int MinimumPlacementForHighlight;//[Offset: 0x3c4, Size: 4]
	bool bEnsureChronologicalHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	UnicornSocialComponent* SocialComponent;//[Offset: 0x438, Size: 8]
	UnicornWebAPIComponent* WebAPIComponent;//[Offset: 0x440, Size: 8]
	bool bShouldUploadHighlightsPayload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	void UnicornStopStreamRecording();// 0xd255f9c
	void UnicornStartStreamRecording();// 0xd255f88
	void UnicornStartStreamPlaybackToNow();// 0xd255f74
	void UnicornStartStreamPlayback();// 0xd255f60
	void UnicornSetLoggingEnabled(bool bEnabled);// 0xd255eb0
	void UnicornResetAll();// 0xd255e9c
	void UnicornPlayUnionAllPlayersHighlights(byte ReelId, byte MessageSettings, bool bExportSequenceFile);// 0xd255d6c
	void UnicornPlayTopHighlights(int NumHighlights, byte ReelId, byte MessageSetting, bool bExportSequenceFile);// 0xd255bfc
	void UnicornPlayTopEliminationHighlights(int NumHighlights, byte ReelId);// 0xd255b14
	void UnicornPlayThroughPlayerHighlightReel(byte ReelId, byte MessageSettings, bool bExportSequenceFile);// 0xd2559e4
	void UnicornPlayOrderedHighlightsWithSocialFeature(int FeatureAsInt, byte ReelId);// 0xd2558fc
	void UnicornPlayOrderedHighlightsWithFeature(int FeatureAsInt, byte ReelId);// 0xd255814
	void UnicornPlayLastEliminationHighlights(int NumHighlights, byte ReelId);// 0xd25572c
	void UnicornPlayHighlight(int HighlightId);// 0xd255684
	void UnicornFollowPlayerWithHighlight(int HighlightId);// 0xd2555dc
	void UnicornFakeAndUploadAndShutdown(int NumHighlights);// 0xd255534
	void UnicornFakeAndUpload(int NumHighlights);// 0xd25548c
	void UnicornDebugUploadPayloadFile();// 0xd255478
	void UnicornDebugPlayerWithIdString(FString PlayerIdString);// 0xd2553c4
	void UnicornDebugHighlightTime(int HighlightId);// 0xd25531c
	void UnicornDebugHighlight(int HighlightId);// 0xd255274
	void UnicornDebugCurrentReplayPlayer();// 0xd255260
	void UnicornDebugCurrentPlayerSampler();// 0xd25524c
	void UnicornDebugCurrentPlayerPlayerLog();// 0xd255238
	void UnicornCreateAndPlayServerGameHighlights(int TargetSeconds, byte ReelId, byte MessageSetting, bool bExportSequenceFile);// 0xd2550c8
	void UnicornClearDebugPlayer();// 0xd2550b4
	void RunHighlightExtractors();// 0xd2550a0
	void OnGamePhaseChanged(enum GamePhase);// 0xd254ff8
	void HandleDemoRecordingFinish(World* InWorld);// 0xd254f50
	void HandleDemoPlaybackFinish(World* InWorld);// 0xd254ea8

--------------------------------
Class: UnicornSocialComponent.ActorComponent.Object

--------------------------------
Class: UnicornWebAPIComponent.ActorComponent.Object

--------------------------------
Class: CosmeticUsageReport
	AthenaCosmeticItemDefinition*[] TrackedCosmetics;//[Offset: 0x0, Size: 16]
	VariantUsageReport[] VariantUsageByCosmetic;//[Offset: 0x60, Size: 16]
	int[] PrioritizedCosmeticIndices;//[Offset: 0x70, Size: 16]

--------------------------------
Class: VariantUsageReport
	VariantUsageReportInner[] VariantUsage;//[Offset: 0x0, Size: 16]
	int TotalUses;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VariantUsageReportInner
	GameplayTag ChannelTag;//[Offset: 0x0, Size: 8]
	GameplayTag VariantTag;//[Offset: 0x8, Size: 8]
	int UseCount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AthenaStreamIdOverride
	FString SourceName;//[Offset: 0x0, Size: 16]
	FString OverriddenId;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AthenaAIServiceManager.AISubsystem.Object
	AthenaAIService*[] AIServices;//[Offset: 0x50, Size: 16]

--------------------------------
Class: ScorePlacementTable
	float[] Solo;//[Offset: 0x0, Size: 16]
	float[] Duos;//[Offset: 0x10, Size: 16]
	float[] Squads;//[Offset: 0x20, Size: 16]
	float[] FiftyFifty;//[Offset: 0x30, Size: 16]
	float[] LargeTeam;//[Offset: 0x40, Size: 16]
	float[] MediumTeam;//[Offset: 0x50, Size: 16]
	float[] QuickSolo;//[Offset: 0x60, Size: 16]
	float[] QuickDuo;//[Offset: 0x70, Size: 16]
	float[] QuickSquad;//[Offset: 0x80, Size: 16]
	float[] QuickLargeTeam;//[Offset: 0x90, Size: 16]
	float[] QuickTwoTeam;//[Offset: 0xa0, Size: 16]
	float[] QuickMediumTeam;//[Offset: 0xb0, Size: 16]
	float[] SinglePlacement;//[Offset: 0xc0, Size: 16]
	float[] Default;//[Offset: 0xd0, Size: 16]

--------------------------------
Class: SupplyDropSpawnData
	FortSupplyDropInfo* SupplyDropInfo;//[Offset: 0x0, Size: 8]
	SupplyDropZoneBasedSpawnData ZoneBasedData;//[Offset: 0x8, Size: 40]
	SupplyDropItemDeliverySpawnData ItemDeliveryData;//[Offset: 0x30, Size: 32]

--------------------------------
Class: SupplyDropZoneBasedSpawnData
	FortAthenaSupplyDrop*[] SpawnedSupplyDrops;//[Offset: 0x0, Size: 16]
	int NumDropsRemainingInWave;//[Offset: 0x10, Size: 4]
	float NextWaveSpawnTime;//[Offset: 0x14, Size: 4]
	float NextSpawnTime;//[Offset: 0x18, Size: 4]
	enum CurrGamePhase;//[Offset: 0x1c, Size: 1]
	int CurrSubPhase;//[Offset: 0x20, Size: 4]
	int TotalSupplyDropsSpawnedInSubPhase;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SupplyDropItemDeliverySpawnData
	int NumItemsToDeliver;//[Offset: 0x0, Size: 4]
	float[] QueuedSpawnTimes;//[Offset: 0x8, Size: 16]
	float NextSpawnTime;//[Offset: 0x18, Size: 4]
	int NumInitialSpawns;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BuildingGameplayActorSpawnData
	int BGAIndex;//[Offset: 0x0, Size: 4]
	int NumSpawnedBGAs;//[Offset: 0x4, Size: 4]
	int NumBGAsToSpawn;//[Offset: 0x8, Size: 4]
	float NextSpawnTime;//[Offset: 0xc, Size: 4]
	enum LastSpawnSide;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ExitCraftSpawnData
	FortAthenaExitCraftInfo* ExitCraftInfo;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortAthenaSpawningPolicyManager.Actor.Object
	FortAthenaMutator_SpawningPolicyBase*[] SpawningPolicyMutatorList;//[Offset: 0x228, Size: 16]
	FortGameModeAthena* GameModeAthena;//[Offset: 0x238, Size: 8]
	FortGameStateAthena* GameStateAthena;//[Offset: 0x240, Size: 8]

--------------------------------
Class: FortAthenaMutator_SpawningPolicyBase.FortAthenaMutator.FortGameplayMutator.Info.Actor.Object
	ObjectiveSpecialActorContainer[] SpecialActorIDList;//[Offset: 0x2c0, Size: 16]
	int CachedSpecialActorIdx;//[Offset: 0x2d0, Size: 4]
	ScalableFloat MinRespawnTime;//[Offset: 0x2e0, Size: 40]
	ScalableFloat MaxRespawnTime;//[Offset: 0x308, Size: 40]
	float SpawnFailureLockoutTime;//[Offset: 0x330, Size: 4]
	enum GamePhaseToStartSpawning;//[Offset: 0x334, Size: 1]
	bool bShouldCenterGroundCheckAtFoundLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 1]
	bool bShouldMaintainItemCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 1]
	bool bAllowedDespawnToMaintainItemCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 1]
	bool bWaitForNavmeshToBeLoaded;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 1]
	FortAthenaMutator_SpawningPolicyData* ItemDataRemovalQueryPending;//[Offset: 0x338, Size: 8]
	SpawningInfo[] QueuedSpawnInfo;//[Offset: 0x358, Size: 16]
	<FortAthenaMutator_SpawningPolicyData*,int> QueuedSpawnInfoCount;//[Offset: 0x368, Size: 80]
	<FortAthenaMutator_SpawningPolicyData*,float> NextSpawnTime;//[Offset: 0x3b8, Size: 80]

--------------------------------
Class: FortAthenaMutator.FortGameplayMutator.Info.Actor.Object
	bool bMutatesGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 1]
	bool bMutatesGameState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 1]
	FortGameModeAthena* CachedGameMode;//[Offset: 0x258, Size: 8]
	FortGameStateAthena* CachedGameState;//[Offset: 0x260, Size: 8]
	<PlayerController*> InitializedPlayerControllers;//[Offset: 0x268, Size: 80]

--------------------------------
Class: ObjectiveSpecialActorContainer
	Actor* TheSpawnedObjective;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortAthenaMutator_SpawningPolicyData.DataAsset.Object
	ScalableFloat NumItemsToSpawn;//[Offset: 0x30, Size: 40]
	EnvQuery* ItemPlacementQuery;//[Offset: 0x58, Size: 40]
	EnvQuery* ItemRemovalQuery;//[Offset: 0x80, Size: 40]
	float RemovalQueryInterval;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: SpawningInfo
	FortAthenaMutator_SpawningPolicyData* ItemSpawnData;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AthenaVehicleOverride
	FString RequiredCalendarEvent;//[Offset: 0x0, Size: 16]
	class Actor* DefaultVehicleClass;//[Offset: 0x10, Size: 40]
	class Actor* OverrideVehicleClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: FortSpawnActorData
	FortSpawnActorInfo* SpawnActorInfo;//[Offset: 0x0, Size: 8]
	int NumSpawnsRemaining;//[Offset: 0x8, Size: 4]
	float TimeUntilNextSpawn;//[Offset: 0xc, Size: 4]
	Actor*[] SpawnedFortSpawnActors;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortGameFeatureData.GameFeatureData.PrimaryDataAsset.DataAsset.Object
	UIExtension[] UIExtensions;//[Offset: 0x50, Size: 16]
	class Actor* DynamicHUDDirectorClass;//[Offset: 0x60, Size: 40]
	FortMobileHUDWidgetRegistryBase* MobileHUDWidgetRegistry;//[Offset: 0x88, Size: 40]
	FString[] GameplayCueNotifyPaths;//[Offset: 0xb0, Size: 16]
	FortGameFeatureDataBaseCurveTableOverrides[] PlaylistBaseCurveTableOverrides;//[Offset: 0xc0, Size: 16]
	FortGameFeatureDataBaseDataTableOverrides[] PlaylistBaseDataTableOverrides;//[Offset: 0xd0, Size: 16]
	FortGameFeatureLootTableData DefaultLootTableData;//[Offset: 0xe0, Size: 80]
	<GameplayTag,FortGameFeatureLootTableData> PlaylistOverrideLootTableData;//[Offset: 0x130, Size: 80]
	DataTable* DefaulAILootOnDeathDataTable;//[Offset: 0x180, Size: 40]
	CurveTable* DefaultGameData;//[Offset: 0x1a8, Size: 40]
	<GameplayTag,CurveTable*> PlaylistOverrideGameData;//[Offset: 0x1d0, Size: 80]
	DataTable* DefaultRangedWeapons;//[Offset: 0x220, Size: 40]
	<GameplayTag,DataTable*> PlaylistOverrideRangedWeapons;//[Offset: 0x248, Size: 80]
	<GameplayTag,DataTable*> PlaylistOverrideAILootOnDeathDataTable;//[Offset: 0x298, Size: 80]
	FortPlayspaceConfig* PlayspaceConfig;//[Offset: 0x2e8, Size: 8]
	FortLevelOverlayConfig* LevelOverlayConfig;//[Offset: 0x2f0, Size: 8]
	World*[] AdditionalLevels;//[Offset: 0x2f8, Size: 16]
	World*[] AdditionalLevelsServerOnly;//[Offset: 0x308, Size: 16]
	FortAbilitySet* PlayerAbilitySet;//[Offset: 0x318, Size: 40]
	FortDeathCauseData* FortDeathCauseData;//[Offset: 0x340, Size: 40]
	FortContextualTutorialDefinition*[] ContextualTutorials;//[Offset: 0x368, Size: 16]
	FortFactionMapping* FactionMapping;//[Offset: 0x378, Size: 40]
	DataTable* WeaponUpgradesDataTable;//[Offset: 0x3a0, Size: 40]
	PawnGoalSelectionTableEntry[] PawnGoalSelectionTable;//[Offset: 0x3c8, Size: 16]
	FortItemDefinition*[] SharedItemsToFullyLoad;//[Offset: 0x3d8, Size: 16]
	FortGameFeatureItemsToFullyLoadData[] PlaylistItemsToFullyLoad;//[Offset: 0x3e8, Size: 16]
	ExternalContent*[] ExternalContentDependencies;//[Offset: 0x3f8, Size: 16]

--------------------------------
Class: GameFeatureData.PrimaryDataAsset.DataAsset.Object
	GameFeatureAction*[] Actions;//[Offset: 0x30, Size: 16]
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x40, Size: 16]

--------------------------------
Class: GameFeatureAction.Object

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 8]
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 40]
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 16]
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 16]
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 12]
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 16]
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int NumberOfAssets;//[Offset: 0x84, Size: 4]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 4]
	int ChunkId;//[Offset: 0x4, Size: 4]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum CookRule;//[Offset: 0x9, Size: 1]

--------------------------------
Class: FortMobileHUDWidgetRegistryBase.DataAsset.Object

--------------------------------
Class: FortGameFeatureDataBaseCurveTableOverrides
	CurveTable* BaseTable;//[Offset: 0x0, Size: 40]
	<GameplayTag,CurveTable*> PlaylistToOverrideTableMap;//[Offset: 0x28, Size: 80]

--------------------------------
Class: FortGameFeatureDataBaseDataTableOverrides
	DataTable* BaseTable;//[Offset: 0x0, Size: 40]
	<GameplayTag,DataTable*> PlaylistToOverrideTableMap;//[Offset: 0x28, Size: 80]

--------------------------------
Class: FortGameFeatureLootTableData
	DataTable* LootTierData;//[Offset: 0x0, Size: 40]
	DataTable* LootPackageData;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortPlayspaceConfig.DataAsset.Object
	FortPlayspaceConfigData[] PlayspaceDataList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortPlayspaceConfigData
	class Playspace* PlayspaceClass;//[Offset: 0x0, Size: 40]
	enum CreationType;//[Offset: 0x28, Size: 1]
	bool bSpawnAtPlayspaceSpawnActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: FortLevelOverlayConfig.DataAsset.Object
	FortSourceWorldAndOverlayWorld[] OverlayList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortSourceWorldAndOverlayWorld
	bool bSpecifySourceWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	World* SourceWorld;//[Offset: 0x8, Size: 40]
	World* OverlayWorld;//[Offset: 0x30, Size: 40]
	bool bServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: FortDeathCauseData.DataAsset.Object
	FortDeathCauseInfo[] DeathCauseInfos;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortDeathCauseInfo
	FString DisplayText;//[Offset: 0x0, Size: 16]
	GameplayTag DeathCauseTag;//[Offset: 0x10, Size: 8]
	FText[] SelfInflictedMessages;//[Offset: 0x18, Size: 16]
	FText[] SelfInflictedDBNOMessages;//[Offset: 0x28, Size: 16]
	FText[] EliminatedMessages;//[Offset: 0x38, Size: 16]
	FText[] EliminatedDBNOMessages;//[Offset: 0x48, Size: 16]
	FortDeathCauseInfoVariant[] DeathCauseInfoVariants;//[Offset: 0x58, Size: 16]

--------------------------------
Class: FortDeathCauseInfoVariant
	FString DisplayText;//[Offset: 0x0, Size: 16]
	GameplayTag DeathCauseTag;//[Offset: 0x10, Size: 8]
	FText[] SelfInflictedMessages;//[Offset: 0x18, Size: 16]
	FText[] SelfInflictedDBNOMessages;//[Offset: 0x28, Size: 16]
	FText[] EliminatedMessages;//[Offset: 0x38, Size: 16]
	FText[] EliminatedDBNOMessages;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortFactionMapping.DataAsset.Object
	GameplayTagContainer BlockResetSpecificRelationTags;//[Offset: 0x30, Size: 32]
	FactionData[] FactionDataArray;//[Offset: 0x50, Size: 16]

--------------------------------
Class: FortGameFeatureItemsToFullyLoadData
	GameplayTagContainer PlaylistTags;//[Offset: 0x0, Size: 32]
	FortItemDefinition*[] ItemsToFullyLoad;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortPetManager.Object
	FortPlayerPetRepState*[] RegisteredPets;//[Offset: 0x28, Size: 16]
	FortPlayerPetRepState*[] PetsPendingUpdate;//[Offset: 0x38, Size: 16]

--------------------------------
Class: MatchHeartbeatManager.Object
	FortGameMode* OwningGameMode;//[Offset: 0x28, Size: 8]
	SlowStatReader* SlowStatReader;//[Offset: 0x30, Size: 8]
	MatchHeartbeatManagerTickFunction MatchHearbeatTick;//[Offset: 0x38, Size: 48]
	int ServerMetricsLOD;//[Offset: 0x68, Size: 4]
	int HighFrequencyServerMetricsDurationSec;//[Offset: 0x8c, Size: 4]
	int HighFrequencyEventsLOD;//[Offset: 0x90, Size: 4]

--------------------------------
Class: SlowStatReader.Object

--------------------------------
Class: MatchHeartbeatManagerTickFunction.TickFunction

--------------------------------
Class: FortAwardItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bSingleSharedDetector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool bCanEarnMultipleTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	class FortAwardDetector* DetectorClass;//[Offset: 0x3c8, Size: 8]

--------------------------------
Class: FortAwardDetector.Object
	FortAwardItemDefinition* AwardDefinition;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortSharedMissionLists.Object
	FortNonPrimaryMission[] CombinedNonPrimaryMissionList;//[Offset: 0x28, Size: 16]
	FortNonPrimaryMission[] NonPrimaryMissionList;//[Offset: 0x38, Size: 16]
	FortNonPrimaryMissionList*[] NonPrimaryMissionLists;//[Offset: 0x48, Size: 16]
	FortMissionDistributionCategory[] NonPrimaryMissionDistributionCategories;//[Offset: 0x58, Size: 16]
	FortMissionGenerationList*[] WorldSetupMissionGenerationLists;//[Offset: 0x68, Size: 16]
	GameplayTagQuery PrimaryMissionTagQuery;//[Offset: 0x78, Size: 72]
	GameplayTagQuery TheaterTagQuery;//[Offset: 0xc0, Size: 72]
	GameplayTagQuery RegionTagQuery;//[Offset: 0x108, Size: 72]
	FortGlobalMission[] SharedMissionList;//[Offset: 0x150, Size: 16]
	QuestDrivenMissionSubList[] QuestDrivenMissionLists;//[Offset: 0x160, Size: 16]
	FortQuestDrivenMission[] AvailableQuestDrivenMissionList;//[Offset: 0x170, Size: 16]
	FortPlayerController*[] PendingPIEPlayers;//[Offset: 0x180, Size: 16]
	int[] DisableSharedMissionListIndices;//[Offset: 0x1a8, Size: 16]
	void UpdatePIEPlayers();// 0xd1d02f8

--------------------------------
Class: FortNonPrimaryMission
	FortMissionInfo* MissionInfo;//[Offset: 0x0, Size: 40]
	GameplayTagQuery ContextTagQuery;//[Offset: 0x28, Size: 72]
	DataTableRowHandle MinDifficulty;//[Offset: 0x70, Size: 16]
	DataTableRowHandle MaxDifficulty;//[Offset: 0x80, Size: 16]
	bool bSatisfiesCurrentRequirement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	int[] RequirementIndicesSatisfied;//[Offset: 0x98, Size: 16]
	int[] DistributionCategoryIndicesSatisfied;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: FortNonPrimaryMissionList.PrimaryDataAsset.DataAsset.Object
	FortNonPrimaryMission[] NonPrimaryMissionList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortMissionDistributionCategory
	GameplayTagQuery CategoryTagQuery;//[Offset: 0x0, Size: 72]

--------------------------------
Class: FortGlobalMission
	FortMissionInfo* MissionInfo;//[Offset: 0x0, Size: 40]
	enum[] AllowedTheaterTypes;//[Offset: 0x28, Size: 16]
	GameplayTagQuery TheaterTagQuery;//[Offset: 0x38, Size: 72]
	GameplayTagQuery RegionTagQuery;//[Offset: 0x80, Size: 72]
	enum[] AllowedZoneTypes;//[Offset: 0xc8, Size: 16]
	GameplayTagQuery ZoneTagQuery;//[Offset: 0xd8, Size: 72]
	GameplayTagQuery PrimaryMissionTagQuery;//[Offset: 0x120, Size: 72]
	float MaxDifficultyLevel;//[Offset: 0x168, Size: 4]
	float MinDifficultyLevel;//[Offset: 0x16c, Size: 4]
	bool bIsPrototype;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bAllowInTestMaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]

--------------------------------
Class: QuestDrivenMissionSubList
	FName MissionSubListName;//[Offset: 0x0, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FortQuestDrivenMission[] QuestDrivenMissionList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortQuestDrivenMission.FortGlobalMission
	FortQuestItemDefinition* RequiredQuest;//[Offset: 0x178, Size: 8]

--------------------------------
Class: CumulativeFrameTimeWithoutSleepLimits
	double FrameTimeWithoutSleep;//[Offset: 0x0, Size: 8]
	double MaxCumulativeFrameTimeAboveThreshold;//[Offset: 0x8, Size: 8]
	double MaxNumberOfFramesAboveThreshold;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortMissionGenerationManager.Actor.Object
	enum CheatMissionGenType;//[Offset: 0x220, Size: 1]

--------------------------------
Class: BuildingFlushManager.Object
	QueuedFlushNetDormancyInfo[] FlushNetDormancyQueue;//[Offset: 0x28, Size: 16]

--------------------------------
Class: QueuedFlushNetDormancyInfo
	Actor* Actor;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortAthenaMutator_Bots.FortAthenaMutator_SpawningPolicyEQS.FortAthenaMutator_SpawningPolicyBase.FortAthenaMutator.FortGameplayMutator.Info.Actor.Object
	class FortAthenaMutator_PlayerBotSpawningPolicyData[] BotSpawningDataItemClasses;//[Offset: 0x460, Size: 16]
	bool bBotHostileToHumanPlayersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	FortAthenaAIBotCustomizationData* CacheBotData;//[Offset: 0x478, Size: 8]
	DataTable* MMRSpawnSpec;//[Offset: 0x498, Size: 40]
	DataTable* OverrideTableInfo;//[Offset: 0x4c0, Size: 40]
	DataTable* ABTestOverrideTableInfo;//[Offset: 0x4e8, Size: 40]
	SoftObjectPath[] AllPossibleOverrideTables;//[Offset: 0x510, Size: 16]
	FortAthenaMutator_PlayerBotSpawningPolicyData*[] BotSpawningDataItems;//[Offset: 0x520, Size: 16]
	MMRSpawningBotsRuntimeInfo CachedMMRSpawningInfo;//[Offset: 0x530, Size: 48]
	bool bSpawnInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	ScalableFloat MinHeightFromGround;//[Offset: 0x570, Size: 40]
	float MaxAroundBotDistanceToSearchPOIToLand;//[Offset: 0x598, Size: 4]
	ScalableFloat OverridePOISpreadingSquadCount;//[Offset: 0x5a0, Size: 40]
	CompositeCurveTable* CacheCompositeCurveTable;//[Offset: 0x5c8, Size: 8]
	CompositeDataTable* CacheCompositeDataTable;//[Offset: 0x5d0, Size: 8]
	FortPlayerPawnAthena* SpawnBot(class FortPlayerPawnAthena BotPawnClass, const Actor* InSpawnLocator, const Vector InSpawnLocation, const Rotator InSpawnRotation, const bool bSnapToGround);// 0xceee688
	void OnSafeZoneUpdated();// 0xceee674

--------------------------------
Class: FortAthenaMutator_SpawningPolicyEQS.FortAthenaMutator_SpawningPolicyBase.FortAthenaMutator.FortGameplayMutator.Info.Actor.Object
	float BaseQueryingAttemptIntervalTimeSeconds;//[Offset: 0x418, Size: 4]
	EnvQuery* BasePlacementQuery;//[Offset: 0x420, Size: 40]

--------------------------------
Class: FortAthenaMutator_PlayerBotSpawningPolicyData.FortAthenaMutator_SpawningPolicyData.DataAsset.Object
	bool bUseCustomizationInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	class FortPlayerPawnAthena* PlayerBotPawn;//[Offset: 0xb0, Size: 8]
	ScalableFloat Skill;//[Offset: 0xb8, Size: 40]
	class FortAthenaAIBotSkillSet[] SkillSetOverrideClasses;//[Offset: 0xe0, Size: 16]
	FortAthenaAIBotInventoryItems* StartupInventory;//[Offset: 0xf0, Size: 8]
	FortGameModeAthena* CachedGameMode;//[Offset: 0xf8, Size: 8]
	float MaxTraceHeight;//[Offset: 0x100, Size: 4]
	float MinTraceHeight;//[Offset: 0x104, Size: 4]
	float InitialSpawnDelay;//[Offset: 0x108, Size: 4]
	float SpawnDelay;//[Offset: 0x10c, Size: 4]
	FortAthenaAIBotCosmeticData* CosmeticCustomizationData;//[Offset: 0x110, Size: 40]
	ScalableFloat DefaultCosmeticLibraryWeight;//[Offset: 0x138, Size: 40]
	DataTable* EmotesDataTable;//[Offset: 0x160, Size: 40]
	DataTable* CosmeticLibraryWeightRegionOverride;//[Offset: 0x188, Size: 40]
	class FortAthenaAISpawnerData* AISpawnerData;//[Offset: 0x1b0, Size: 8]

--------------------------------
Class: FortAthenaAIBotCosmeticData.DataAsset.Object
	FortAthenaAIBotCosmeticLibraryData*[] CosmeticLibraries;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortAthenaAISpawnerData.Object
	GameplayTagContainer DescriptorTag;//[Offset: 0x28, Size: 32]
	FortAthenaAISpawnerDataComponent*[] ClassComponentList;//[Offset: 0x48, Size: 16]
	class FortAthenaAISpawnerDataComponent_SpawnParamsBase* SpawnParamsComponent;//[Offset: 0x58, Size: 8]
	class FortAthenaAISpawnerDataComponent_BehaviorBase* BehaviorComponent;//[Offset: 0x60, Size: 8]
	class FortAthenaAISpawnerDataComponent_AffiliationBase* AffiliationComponent;//[Offset: 0x68, Size: 8]
	class FortAthenaAISpawnerDataComponent_LODBase* LODComponent;//[Offset: 0x70, Size: 8]
	class FortAthenaAISpawnerDataComponent_DebugBase* DebugComponent;//[Offset: 0x78, Size: 8]
	class FortAthenaAISpawnerDataComponent_AnalyticBase* AnalyticComponent;//[Offset: 0x80, Size: 8]
	class FortAthenaAISpawnerDataComponent_GameplayBase* GameplayComponent;//[Offset: 0x88, Size: 8]
	class FortAthenaAISpawnerDataComponent_ConversationBase* ConversationComponent;//[Offset: 0x90, Size: 8]
	class FortAthenaAISpawnerDataComponent_VoiceBase* VoiceComponent;//[Offset: 0x98, Size: 8]
	class FortAthenaAISpawnerDataComponent_CosmeticBase* CosmeticComponent;//[Offset: 0xa0, Size: 8]
	class FortAthenaAISpawnerDataComponent_ChanceEncounterBase* ChanceEncounterComponent;//[Offset: 0xa8, Size: 8]
	FortAthenaAISpawnerDataComponent_VoiceBase* GetVoiceComponent();// 0xced3cec
	FortAthenaAISpawnerDataComponent_SpawnParamsBase* GetSpawnParamsComponent();// 0xced3cb8
	FortAthenaAISpawnerDataComponent_GameplayBase* GetGameplayComponent();// 0xced3c84
	FortAthenaAISpawnerDataComponent_DebugBase* GetDebugComponent();// 0xced3c50
	FortAthenaAISpawnerDataComponent_CosmeticBase* GetCosmeticComponent();// 0xced3c1c
	FortAthenaAISpawnerDataComponent_ConversationBase* GetConversationComponent();// 0xced3be8
	FortAthenaAISpawnerDataComponent_ChanceEncounterBase* GetChanceEncounterComponent();// 0xced3bb4
	FortAthenaAISpawnerDataComponent_BehaviorBase* GetBehaviorComponent();// 0xced3b80
	FortAthenaAISpawnerDataComponent_AnalyticBase* GetAnalyticComponent();// 0xced3b44
	FortAthenaAISpawnerDataComponent_LODBase* GetAILODComponent();// 0xced3b10
	FortAthenaAISpawnerDataComponent_AffiliationBase* GetAffiliationComponent();// 0xced3adc
	static FortAthenaAISpawnerDataComponentList* CreateComponentListFromClass(const class FortAthenaAISpawnerData AISpawnerDataClass, Object* OuterObject);// 0xced39f8
	FortAthenaAISpawnerDataComponentList* CreateComponentList(Object* OuterObject);// 0xced3948

--------------------------------
Class: FortAthenaAISpawnerDataComponent_SpawnParamsBase.FortAthenaAISpawnerDataComponent.Object
	bool ShouldSpawnInAir();// 0xced8124
	bool ShouldCheckForOverlaps();// 0xced80e4
	float GetSpawnTracePadding();// 0xced80a8
	class FortAthenaAISpawnerData[] GetSpawnerDataSpawnedAsChildren();// 0xced8000
	class Pawn GetPawnClass();// 0xced7fc4
	float GetInAirSpawnTraceStartHeight();// 0xced7f88
	float GetInAirSpawnTraceSphereRadius();// 0xced7f4c
	float GetInAirSpawnTraceEndHeight();// 0xced7f10

--------------------------------
Class: FortAthenaAISpawnerDataComponent_BehaviorBase.FortAthenaAISpawnerDataComponent.Object
	BehaviorTree* GetBehaviorTree();// 0xced5eb8

--------------------------------
Class: FortAthenaAISpawnerDataComponent_AffiliationBase.FortAthenaAISpawnerDataComponent.Object
	GameplayTagContainer FactionTags;//[Offset: 0x30, Size: 32]

--------------------------------
Class: FortAthenaAISpawnerDataComponent_LODBase.FortAthenaAISpawnerDataComponent.Object
	ClientAILODSettings GetClientAILODSettings();// 0xced7b2c
	FortAthenaAILODSettingsContainer* GetAILODSettingsContainer();// 0xced7af0

--------------------------------
Class: ClientAILODSettings
	ScalableFloat ScoreMultiplier;//[Offset: 0x0, Size: 40]
	ScalableFloat PreloadingPriorityOverride;//[Offset: 0x28, Size: 40]
	ScalableFloat bSupportCharacterMovementOptimization;//[Offset: 0x50, Size: 40]

--------------------------------
Class: FortAthenaAISpawnerDataComponent_DebugBase.FortAthenaAISpawnerDataComponent.Object

--------------------------------
Class: FortAthenaAISpawnerDataComponent_AnalyticBase.FortAthenaAISpawnerDataComponent.Object
	GameplayTagContainer OnDeathGameplayTags;//[Offset: 0x30, Size: 32]

--------------------------------
Class: FortAthenaAISpawnerDataComponent_GameplayBase.FortAthenaAISpawnerDataComponent.Object
	ScalableFloat CanBeConverted;//[Offset: 0x30, Size: 40]
	ScalableFloat CanBeConvertedFromDBNO;//[Offset: 0x58, Size: 40]
	ScalableFloat ForceKillWhenUnconverted;//[Offset: 0x80, Size: 40]
	ScalableFloat CopyConverterSpecificRelations;//[Offset: 0xa8, Size: 40]
	ScalableFloat RemoveFromAllFactions;//[Offset: 0xd0, Size: 40]
	ScalableFloat ReleaseDistance;//[Offset: 0xf8, Size: 40]
	ScalableFloat CheckReleaseConditionsTimeInterval;//[Offset: 0x120, Size: 40]
	GameplayTagContainer AddToFactions;//[Offset: 0x148, Size: 32]
	GameplayTagContainer RemoveFromFactions;//[Offset: 0x168, Size: 32]

--------------------------------
Class: FortAthenaAISpawnerDataComponent_ConversationBase.FortAthenaAISpawnerDataComponent.Object

--------------------------------
Class: FortAthenaAISpawnerDataComponent_VoiceBase.FortAthenaAISpawnerDataComponent.Object

--------------------------------
Class: FortAthenaAISpawnerDataComponent_CosmeticBase.FortAthenaAISpawnerDataComponent.Object
	void GetFallbackTag(out GameplayTag OutFallbackTag);// 0xced55c0

--------------------------------
Class: FortAthenaAISpawnerDataComponent_ChanceEncounterBase.FortAthenaAISpawnerDataComponent.Object

--------------------------------
Class: MMRSpawningBotsRuntimeInfo.MMRSpawningBaseRuntimeInfo
	BotELOSpawningInfo*[] ELOSpawningInfos;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MMRSpawningBaseRuntimeInfo

--------------------------------
Class: BotELOSpawningInfo.FortAthenaMutator_SpawningPolicyData.DataAsset.Object
	FortAthenaMutator_PlayerBotSpawningPolicyData* BotSpawningDataInfo;//[Offset: 0xb0, Size: 8]
	FortGameModeAthena* CachedGameMode;//[Offset: 0xc8, Size: 8]

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 16]
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 16]
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 16]

--------------------------------
Class: DebugMinimapData
	bool bIsOverridden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SlateBrush DebugMinimapIconBrush;//[Offset: 0x8, Size: 136]
	Vector2D DebugMinimapIconScale;//[Offset: 0x90, Size: 8]
	SlateBrush DebugCompassIconBrush;//[Offset: 0x98, Size: 136]
	Vector2D DebugCompassIconScale;//[Offset: 0x120, Size: 8]

--------------------------------
Class: BattleBusPOI
	ScalableFloat IsEnabled;//[Offset: 0x0, Size: 40]
	GameplayTagQuery POIFilterQuery;//[Offset: 0x28, Size: 72]
	FortPoiVolume*[] ValidPOIVolumeList;//[Offset: 0x70, Size: 16]

--------------------------------
Class: NavigationPOI
	ScalableFloat IsEnabled;//[Offset: 0x0, Size: 40]
	GameplayTagQuery POIFilterQuery;//[Offset: 0x28, Size: 72]
	FortPoiVolume*[] ValidPOIVolumeList;//[Offset: 0x70, Size: 16]

--------------------------------
Class: FortAthenaAIBotNameDataAsset.DataAsset.Object
	DataTable* DefaultNameDataTable;//[Offset: 0x30, Size: 40]
	DataTable* ChinaNameDataTable;//[Offset: 0x58, Size: 40]
	FortAthenaAIBotNameRegionData[] RegionData;//[Offset: 0x80, Size: 16]

--------------------------------
Class: FortAthenaAIBotNameRegionData
	FString RegionId;//[Offset: 0x0, Size: 16]
	DataTable* NameDataTable;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CachedPOIVolumeLocations
	FortPoiVolume* POIVolume;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortPlayerStartWarmup.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: CacheSafeZoneLocation.Object

--------------------------------
Class: FortTeamInfoAthena.FortTeamInfo.Info.Actor.Object
	FortBotTeamInfoAthena BotInfo;//[Offset: 0x390, Size: 16]

--------------------------------
Class: FortBotTeamInfoAthena
	FortBotReservedLoot[] ReservedLoots;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortBotReservedLoot
	uint32 LootId;//[Offset: 0x0, Size: 4]
	FortAthenaAIBotController* Owner;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortAthenaBeaconComponent.ActorComponent.Object
	int MaxAttractedBots;//[Offset: 0xb0, Size: 4]
	float AttractionRadius;//[Offset: 0xb4, Size: 4]
	Actor*[] RegisteredActors;//[Offset: 0xb8, Size: 16]
	MulticastInlineDelegateProperty OnConsumeEvent;//[Size: 16]
	bool bIsConsumed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]

--------------------------------
Class: AthenaAIPopulationTracker.AISubsystem.Object
	FortServerBotInfo[] PlayerBots;//[Offset: 0x40, Size: 16]
	FortServerBotInfo[] NoneAthenaParticipantBots;//[Offset: 0x50, Size: 16]
	FortGameModeAthena* CachedGameMode;//[Offset: 0x60, Size: 8]
	void OnAISpawned(Pawn* Pawn, const int RequestID);// 0xce2bd68
	void OnAgentGameOver(FortAthenaAIBotController* AIBotController, FortPawn* Pawn);// 0xce2bc84

--------------------------------
Class: FortAthenaAIRuntimeParametersComponent.ActorComponent.Object
	<class FortAthenaAIRuntimeParameters,interface class> RegisteredParametersProviders;//[Offset: 0xb0, Size: 80]
	FortAthenaAIRuntimeParameters*[] ExtractedRuntimeParameters;//[Offset: 0x100, Size: 16]

--------------------------------
Class: FortAthenaAIRuntimeParameters_Leash.FortAthenaAIRuntimeParameters.Object
	Vector LeashLocation;//[Offset: 0x2c, Size: 12]
	float LeashInnerRadius;//[Offset: 0x38, Size: 4]
	float LeashOuterRadius;//[Offset: 0x3c, Size: 4]
	enum LeashReturnLocationMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: FortAthenaNpcPatrollingComponent.ActorComponent.Object
	bool bCanPropagatePatrollingProgression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	FortAthenaAIBotController* CachedBotController;//[Offset: 0xb8, Size: 8]
	MulticastInlineDelegateProperty OnStartPatrollingEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnStopPatrollingEvent;//[Size: 16]
	FortAthenaPatrolPath* PatrolPath;//[Offset: 0xe0, Size: 8]
	void SetPatrolPath(const FortAthenaPatrolPath* NewPatrolPath);// 0xcf1c27c

--------------------------------
Class: FortAthenaPatrolPath.Actor.Object
	enum Mode;//[Offset: 0x229, Size: 1]
	FortAthenaPatrolPoint*[] PatrolPoints;//[Offset: 0x230, Size: 16]
	bool bUseRandomStartupPatrolPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bUseRandomStartupDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 32]
	Actor* RadialLeashLocationActorOverride;//[Offset: 0x268, Size: 8]
	float RadialLeashInnerRadiusOverride;//[Offset: 0x270, Size: 4]
	float RadialLeashOuterRadiusOverride;//[Offset: 0x274, Size: 4]
	bool bLeashEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float LeashWidth;//[Offset: 0x27c, Size: 4]
	float LeashHeight;//[Offset: 0x280, Size: 4]
	ScalableFloat WaterLevelIndexMax;//[Offset: 0x288, Size: 40]
	ScalableFloat WaterLevelIndexMin;//[Offset: 0x2b0, Size: 40]
	int MaxConcurrentUsage;//[Offset: 0x2d8, Size: 4]
	int CurrentConcurrentUsage;//[Offset: 0x2dc, Size: 4]
	float DebugLinkWidthSelected;//[Offset: 0x2e0, Size: 4]
	float DebugLinkWidthNotSelected;//[Offset: 0x2e4, Size: 4]
	LinearColor DebugNotSelectedColor;//[Offset: 0x2e8, Size: 16]
	void OnCurrentPlaylistLoaded(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xcf1cd94
	void GetPatrolPoints(out FortAthenaPatrolPoint*[] OutPatrolPoints);// 0xcf1ccb0

--------------------------------
Class: FortAthenaPatrolPoint.Actor.Object
	FortAthenaLocalGameplayBehavior* LocalGameplayBehavior;//[Offset: 0x220, Size: 8]

--------------------------------
Class: FortAthenaLocalGameplayBehavior.Actor.Object
	bool bNeedToAwakeDuringExecution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	FortAthenaBTTask_DynamicBlueprint* CachedTask;//[Offset: 0x228, Size: 8]
	void OnExecute(Actor* Activator);// 0xbbc0600
	void OnAbort();// 0xbbc0600
	void FinishExecute();// 0xcee6398

--------------------------------
Class: FortAthenaBTTask_DynamicBlueprint.BTTaskNode.BTNode.Object
	FName DynamicBlueprintStatusKeyName;//[Offset: 0x6c, Size: 8]
	FName DynamicBlueprintActorKeyName;//[Offset: 0x78, Size: 8]

--------------------------------
Class: BotDelayedStimulus
	Actor* SourceActor;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortBotThreatActorInfo
	Actor* ThreatActor;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AlertLevelInfo
	AISenseConfig*[] SensesConfig;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortAthenaAIBotPerceptionDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	float SightReactionTime;//[Offset: 0x2c, Size: 4]
	float SightRandomDeviation;//[Offset: 0x30, Size: 4]
	DigestedSightReactionSpecialization[] SightReactionSpecializations;//[Offset: 0x60, Size: 16]
	float LoseSightTime;//[Offset: 0x70, Size: 4]
	float LoseSightRandomDeviation;//[Offset: 0x74, Size: 4]
	float SightSuspicionTime;//[Offset: 0x78, Size: 4]
	float SightSuspicionRandomDeviation;//[Offset: 0x7c, Size: 4]
	float EnemyMarkedReactionTime;//[Offset: 0x80, Size: 4]
	float EnemyMarkedReactionRandomDeviation;//[Offset: 0x84, Size: 4]
	float ChancesToHelpOnMarkedEnemy;//[Offset: 0x88, Size: 4]
	float DamageReactionTime;//[Offset: 0x8c, Size: 4]
	float DamageRandomDeviation;//[Offset: 0x90, Size: 4]
	float HearingReactionTime;//[Offset: 0x94, Size: 4]
	float HearingRandomDeviation;//[Offset: 0x98, Size: 4]
	float MaxHearingLocationError;//[Offset: 0x9c, Size: 4]
	DigestedPerceptionStateSettings PerceptionStateSettings;//[Offset: 0xa0, Size: 56]
	float ThreatDamageWeight;//[Offset: 0x1f0, Size: 4]
	float ThreatDamageWeightMultiplier;//[Offset: 0x1f4, Size: 4]
	float ObstacleDistanceOverrideTargetingSq;//[Offset: 0x1f8, Size: 4]
	float ObstacleForgetDistanceSq;//[Offset: 0x1fc, Size: 4]
	float DBNOWeightModifier;//[Offset: 0x200, Size: 4]
	SoundPerceptionDigestedSetting SoundSettings;//[Offset: 0x204, Size: 12]
	float AlertedAccumulatedLoudnessLimit;//[Offset: 0x258, Size: 4]
	float LKPAccumulatedLoudnessLimit;//[Offset: 0x25c, Size: 4]
	float EnemyMarkingDelay;//[Offset: 0x260, Size: 4]
	float EnemyMarkingDelayRandomDeviation;//[Offset: 0x264, Size: 4]
	float AdditionalMarkedEnemyLKPForgetTime;//[Offset: 0x268, Size: 4]
	float AdditionalMarkedEnemyLKPForgetDistance;//[Offset: 0x26c, Size: 4]
	AlertLevelInfo AlertLevelInfos;//[Offset: 0x270, Size: 16]
	float ProjectileThreatForgetTime;//[Offset: 0x2b0, Size: 4]
	TrapPerceptionSettings TrapPerceptionSettings;//[Offset: 0x2b4, Size: 20]
	bool bStealthMeterEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	float StealthMeterThreshold;//[Offset: 0x2cc, Size: 4]
	ScalableFloat StealthMeterIncreaseSpeed;//[Offset: 0x2d0, Size: 40]
	float StealthMeterDecreaseSpeed;//[Offset: 0x2f8, Size: 4]
	bool bStealthMeterAllowSharedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]

--------------------------------
Class: DigestedSightReactionSpecialization
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	ScalableFloat SightMinAdditionTime;//[Offset: 0x20, Size: 40]
	ScalableFloat SightMaxAdditionTime;//[Offset: 0x48, Size: 40]

--------------------------------
Class: DigestedPerceptionStateSettings
	float ForgetTime;//[Offset: 0x0, Size: 4]
	float ForgetTimeDeviation;//[Offset: 0x4, Size: 4]
	float ForgetDistance;//[Offset: 0x8, Size: 4]
	float ForgetDistanceDeviation;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SoundPerceptionDigestedSetting
	float Loudness;//[Offset: 0x0, Size: 4]
	float IgnoreTime;//[Offset: 0x4, Size: 4]
	float OverrideReactionDistanceSq;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TrapPerceptionSettings

--------------------------------
Class: FortAthenaAIBotHarvestDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	float DelayBetweenHarvest;//[Offset: 0x2c, Size: 4]
	float DeviationTimeBetweenHarvest;//[Offset: 0x30, Size: 4]
	float HarvestingMaxDistanceSquared;//[Offset: 0x34, Size: 4]
	float WeakSpotHitProbability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FortAthenaAIBotMovementDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	float SlowDownDistance;//[Offset: 0x2c, Size: 4]
	float TraversalSpeedEstimation;//[Offset: 0x30, Size: 4]
	float TraversalSpeedEstimationWithThreat;//[Offset: 0x34, Size: 4]
	float GliderDeployMinAngle;//[Offset: 0x38, Size: 4]
	float GliderDeployMaxAngle;//[Offset: 0x3c, Size: 4]
	float GliderNoiseMaxDistance;//[Offset: 0x40, Size: 4]
	float GliderNoiseMinDelay;//[Offset: 0x44, Size: 4]
	float GliderNoiseMaxDelay;//[Offset: 0x48, Size: 4]
	float JumpOffMinAngle;//[Offset: 0x4c, Size: 4]
	float JumpOffMaxAngle;//[Offset: 0x50, Size: 4]
	float MaxPatrolDistance;//[Offset: 0x54, Size: 4]
	float MaxPatrolDistanceRandomDeviation;//[Offset: 0x58, Size: 4]
	float WobbleProbability;//[Offset: 0x5c, Size: 4]
	float MaxDelayBetweenWobblingMovement;//[Offset: 0x60, Size: 4]
	float MaxDelayBetweenWobblingMovementRandomDeviation;//[Offset: 0x64, Size: 4]
	bool bAllowSwimWobble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	float MaxWobblingDuration;//[Offset: 0x6c, Size: 4]
	float MaxWobblingDurationRandomDeviation;//[Offset: 0x70, Size: 4]
	float MaxWobblingIntensity;//[Offset: 0x74, Size: 4]
	float WobblingIntensityDeviation;//[Offset: 0x78, Size: 4]
	float MaxWobblingFrequency;//[Offset: 0x7c, Size: 4]
	float WobblingFrequencyDeviation;//[Offset: 0x80, Size: 4]
	float WobblingStickToPathCorridorStrength;//[Offset: 0x84, Size: 4]
	float MaxAfterLaunchedPauseTime;//[Offset: 0x88, Size: 4]
	float AfterLaunchedPauseTimeDeviation;//[Offset: 0x8c, Size: 4]
	bool bSteerMovementWhenLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	float SteerMovementWhenLaunchedDirectionUpdateTime;//[Offset: 0x94, Size: 4]
	float MaxReactionTimeToDangerZone;//[Offset: 0x98, Size: 4]
	float MaxReactionTimeToDangerZoneDeviation;//[Offset: 0x9c, Size: 4]
	bool bLimitBlockingObstacleAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float SwimSprintJumpDelay;//[Offset: 0xa4, Size: 4]
	float SwimSprintJumpDelayDeviation;//[Offset: 0xa8, Size: 4]
	float SwimUnblockJumpHeightThreshold;//[Offset: 0xac, Size: 4]
	bool bSwimSprintJumpNav2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float MoveToRangeAttackMinOffset;//[Offset: 0xb4, Size: 4]
	float MoveToRangeAttackMaxOffset;//[Offset: 0xb8, Size: 4]
	float LKPMinOffset;//[Offset: 0xbc, Size: 4]
	float LKPMaxOffset;//[Offset: 0xc0, Size: 4]
	float SandTunnelJumpMinTime;//[Offset: 0xc4, Size: 4]
	float SandTunnelJumpMaxTime;//[Offset: 0xc8, Size: 4]
	float SandTunnelBurrowedAndHiddenChance;//[Offset: 0xcc, Size: 4]
	float SandTunnelBurrowedAndHiddenMinTime;//[Offset: 0xd0, Size: 4]
	float SandTunnelBurrowedAndHiddenMaxTime;//[Offset: 0xd4, Size: 4]
	DigestedBotKnockbackSettings DefaultKnockbackSettings;//[Offset: 0xd8, Size: 80]
	DigestedBotKnockbackSettings[] KnockbackSettingsSpecializations;//[Offset: 0x128, Size: 16]

--------------------------------
Class: DigestedBotKnockbackSettings
	GameplayTagQuery TagQuery;//[Offset: 0x0, Size: 72]
	bool bShouldAllowCharacterToBeLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bShouldStopActiveMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	float IgnoreMoveInputDuration;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: FortAthenaAIBotLootingDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	float ThresholdDistanceToSwitchLootItem;//[Offset: 0x2c, Size: 4]
	float ThresholdDistanceSquaredToRescanForBetterLoot;//[Offset: 0x30, Size: 4]
	float ThresholdTimeToRescanForBetterLoot;//[Offset: 0x34, Size: 4]
	Vector OctreeBoxHalfExtent;//[Offset: 0x38, Size: 12]
	float LootStateEvaluationRadiusSq;//[Offset: 0x44, Size: 4]
	float MinLootDurationPerPOI;//[Offset: 0x48, Size: 4]
	float MaxLootDurationPerPOI;//[Offset: 0x4c, Size: 4]
	float LootPickupInteractionTime;//[Offset: 0x50, Size: 4]
	float LootPickupInteractionDeviationTime;//[Offset: 0x54, Size: 4]
	float Distance2DScore;//[Offset: 0x58, Size: 4]
	float HeightScore;//[Offset: 0x5c, Size: 4]
	float ThreatMaxScore;//[Offset: 0x60, Size: 4]
	float PrioritizeWeaponScore;//[Offset: 0x64, Size: 4]
	float PoiSelectionDistanceScore;//[Offset: 0x68, Size: 4]
	float PoiSelectionBotPresenceScore;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: FortAthenaAIBotAttackingDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	float MaxDistanceToEngageMeleeSq;//[Offset: 0x2c, Size: 4]
	bool bOnlyEngageMeleeAgainstThreatThatHasNoRangeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float MaxDistanceToConsiderAsAnAlternateTargetSq;//[Offset: 0x34, Size: 4]
	bool bEnableAlternateTargetRequiredTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	GameplayTagContainer AlternateTargetRequiredTags;//[Offset: 0x40, Size: 32]
	bool bEnableWTFBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float MinCooldownDelayBetweenMeleeAttackAttempts;//[Offset: 0x64, Size: 4]
	float MaxCooldownDelayBetweenMeleeAttackAttempts;//[Offset: 0x68, Size: 4]
	GameplayTagContainer ThrowableGameplayTags;//[Offset: 0x70, Size: 32]
	int MinThrowableCount;//[Offset: 0x90, Size: 4]
	int MaxThrowableCount;//[Offset: 0x94, Size: 4]
	float ThrowableCooldownMin;//[Offset: 0x98, Size: 4]
	float ThrowableCooldownMax;//[Offset: 0x9c, Size: 4]
	float ThrowableMinimumRangeSquared;//[Offset: 0xa0, Size: 4]
	bool bThrowableEvaluatorActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]

--------------------------------
Class: FortAthenaAIBotPlayStyleDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	ScalableFloat AggressiveTowardsThreatWeight;//[Offset: 0x30, Size: 40]
	ScalableFloat DefensiveTowardsThreatWeight;//[Offset: 0x58, Size: 40]
	enum DBNOPlayStyle;//[Offset: 0x80, Size: 1]
	PlaystyleSwitchToAggressiveDataDigested[] ChangeToAggressiveData;//[Offset: 0x88, Size: 16]

--------------------------------
Class: PlaystyleSwitchToAggressiveDataDigested
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x0, Size: 72]
	float TurnToAggressiveMinimumDistanceSquared;//[Offset: 0x48, Size: 4]
	float TurnToAggressiveTime;//[Offset: 0x4c, Size: 4]
	float DamageThresholdToSwitchToAggressive;//[Offset: 0x50, Size: 4]
	float SwitchBackToDefensivePreventionTime;//[Offset: 0x54, Size: 4]

--------------------------------
Class: FortAthenaAIBotUnstuckDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	bool bCanTeleportWhenStuck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bCanTeleportWhenStuckWithPlayerAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float MaxDistanceSqToPlayerToTeleport;//[Offset: 0x30, Size: 4]
	float PlayerToPhoebeAngleVisibilityConeToTeleport;//[Offset: 0x34, Size: 4]
	float TimeBetweenPartialPathToConsiderPathStuck;//[Offset: 0x38, Size: 4]
	int ConsecutivePartialPathCountToConsiderPathStuck;//[Offset: 0x3c, Size: 4]
	float DistanceSqBetweenBlockedPathToConsiderPathStuck;//[Offset: 0x40, Size: 4]
	float DistanceBetweenSampleToConsiderPathStuckInWater;//[Offset: 0x44, Size: 4]
	float TimeBetweenSampleToConsiderPathStuckInWater;//[Offset: 0x48, Size: 4]
	float DistanceBetweenSampleToConsiderPathStuckOnGround;//[Offset: 0x4c, Size: 4]
	float TimeBetweenSampleToConsiderPathStuckOnGround;//[Offset: 0x50, Size: 4]
	int ConsecutiveBlockedPathCountToConsiderPathStuck;//[Offset: 0x54, Size: 4]
	int MaxSafeZoneIndexToAllowTeleport;//[Offset: 0x58, Size: 4]
	float TimeToBreakBlockingDoor;//[Offset: 0x5c, Size: 4]
	float TimeToCloseBlockingDoor;//[Offset: 0x60, Size: 4]
	float RiverbedObstacleCollisionNormalThreshold;//[Offset: 0x64, Size: 4]

--------------------------------
Class: FortAthenaAIBotRangeAttackDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	FortWeapon* CachedWeaponUsedToCalculateSkillSet;//[Offset: 0x30, Size: 8]
	DigestedRangedWeaponSkillCategory[] RangedWeaponCategorySkills;//[Offset: 0x40, Size: 16]

--------------------------------
Class: DigestedRangedWeaponSkillCategory
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	DigestedRangedWeaponSkill WeaponSkill;//[Offset: 0x20, Size: 24]
	DigestedRangedWeaponSkillCategorySpecialization[] Specializations;//[Offset: 0x38, Size: 16]

--------------------------------
Class: DigestedRangedWeaponSkill
	float DelayBetweenShots;//[Offset: 0x0, Size: 4]
	float DelayDeviationTimeBetweenShots;//[Offset: 0x4, Size: 4]
	float TriggerHoldDuration;//[Offset: 0x8, Size: 4]
	float TriggerHoldDeviationTime;//[Offset: 0xc, Size: 4]
	float DelayBeforeFirstShot;//[Offset: 0x10, Size: 4]
	float ShotDelayAfterTargeting;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DigestedRangedWeaponSkillCategorySpecialization
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	DigestedRangedWeaponSkill WeaponSkill;//[Offset: 0x20, Size: 24]

--------------------------------
Class: FortAthenaAIBotAimingDigestedSkillSet.FortAthenaAIBotDigestedSkillSet.FortAthenaAIRuntimeParameters.Object
	DigestedFocusSetting DefaultFocusSetting;//[Offset: 0x30, Size: 96]
	DigestedFocusSetting[] FocusSettings;//[Offset: 0x90, Size: 16]
	LookAtDigestedSetting LookAtSettings;//[Offset: 0xa0, Size: 16]
	bool bAllowScanAroundWhileSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float TrackingReactionTime;//[Offset: 0xd4, Size: 4]
	float TrackingInterpTime;//[Offset: 0xd8, Size: 4]
	float MaxTrackingPredictionError;//[Offset: 0xdc, Size: 4]
	float MaxTrackingOffsetErrorMultiplier;//[Offset: 0xe0, Size: 4]
	float AdjustedTrackingOffsetErrorMultiplierAgainstAIs;//[Offset: 0xe4, Size: 4]
	float TrackingErrorUpdateInterval;//[Offset: 0xe8, Size: 4]
	float TrackingInAirVelocityThreshold;//[Offset: 0xec, Size: 4]
	float TrackingInAirHeightDeltaThreshold;//[Offset: 0xf0, Size: 4]
	float TargetAcquisitionRate;//[Offset: 0xf4, Size: 4]
	float MaxDistanceEvaluationErrorRatio;//[Offset: 0xf8, Size: 4]
	float TargetingUpdateInterval;//[Offset: 0xfc, Size: 4]
	float TargetingUpdateIntervalMaxDeviation;//[Offset: 0x100, Size: 4]
	float ReachLeashLimitToleranceDistance;//[Offset: 0x104, Size: 4]
	bool bShootFloorTrapOnlyWhenHigherThanTrap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	DigestedWeaponAccuracy NoWeaponAccuracy;//[Offset: 0x110, Size: 416]
	DigestedWeaponAccuracyCategory[] WeaponAccuracies;//[Offset: 0x2b0, Size: 16]
	DigestedTargetBasedAccuracyCategory[] DigestedTargetBasedAccuracies;//[Offset: 0x2c0, Size: 16]
	DigestedTrackingOffsetModifiers TrackingOffsetModifiers;//[Offset: 0x2d0, Size: 288]
	FortWeapon* CachedWeaponUsedToCalculateAccuracy;//[Offset: 0x3f0, Size: 8]

--------------------------------
Class: DigestedFocusSetting
	GameplayTagQuery WeaponTagQuery;//[Offset: 0x0, Size: 72]
	bool bRequireAmmoToMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float IgnoreThreatTimeWhenNotAttacking;//[Offset: 0x4c, Size: 4]
	float IgnoreThreatDeviationWhenNotAttacking;//[Offset: 0x50, Size: 4]
	float IgnoreThreatDuration;//[Offset: 0x54, Size: 4]
	float IgnoreThreatDurationDeviation;//[Offset: 0x58, Size: 4]

--------------------------------
Class: LookAtDigestedSetting
	float LookAtDuration;//[Offset: 0x0, Size: 4]
	float LookAtDurationDeviation;//[Offset: 0x4, Size: 4]
	float LookAtDelay;//[Offset: 0x8, Size: 4]
	float LookAtDelayDeviation;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DigestedWeaponAccuracy
	ScalableFloat TrackingOffsetError;//[Offset: 0x0, Size: 40]
	ScalableFloat TargetingTrackingOffsetError;//[Offset: 0x28, Size: 40]
	ScalableFloat TrackingDistanceFarError;//[Offset: 0x50, Size: 40]
	ScalableFloat TargetingTrackingDistanceFarError;//[Offset: 0x78, Size: 40]
	ScalableFloat TrackingDistanceNearError;//[Offset: 0xa0, Size: 40]
	ScalableFloat TargetingTrackingDistanceNearError;//[Offset: 0xc8, Size: 40]
	ScalableFloat TrackingDistanceNearErrorProbability;//[Offset: 0xf0, Size: 40]
	ScalableFloat TargetingActivationProbability;//[Offset: 0x118, Size: 40]
	ScalableFloat FiringRestrictedToTargetingActive;//[Offset: 0x140, Size: 40]
	float IdealAttackRange;//[Offset: 0x168, Size: 4]
	float TargetingIdealAttackRange;//[Offset: 0x16c, Size: 4]
	float MaxAttackRange;//[Offset: 0x170, Size: 4]
	float ChanceToAimAtTargetsFeet;//[Offset: 0x174, Size: 4]
	ScalableFloat ShouldUseProjectileArcForAiming;//[Offset: 0x178, Size: 40]

--------------------------------
Class: DigestedWeaponAccuracyCategory
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	DigestedWeaponAccuracy WeaponAccuracy;//[Offset: 0x20, Size: 416]
	DigestedWeaponAccuracyCategorySpecialization[] Specializations;//[Offset: 0x1c0, Size: 16]

--------------------------------
Class: DigestedWeaponAccuracyCategorySpecialization
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	DigestedWeaponAccuracy WeaponAccuracy;//[Offset: 0x20, Size: 416]

--------------------------------
Class: DigestedTargetBasedAccuracyCategory
	GameplayTagContainer Tags;//[Offset: 0x0, Size: 32]
	DigestedTargetBasedAccuracy TargetBasedAccuracy;//[Offset: 0x20, Size: 28]

--------------------------------
Class: DigestedTargetBasedAccuracy
	float AimTrackingOffsetErrorMultiplier;//[Offset: 0x0, Size: 4]
	float AimTrackingHeightOffsetErrorMultiplier;//[Offset: 0x4, Size: 4]
	float AimTrackingDistanceErrorMultiplier;//[Offset: 0x8, Size: 4]
	float AimTrackingReactionTimeMultiplier;//[Offset: 0xc, Size: 4]
	float AimTrackingInterpTimeMultiplier;//[Offset: 0x10, Size: 4]
	float AimTrackingInAirVelocityThresholdMultiplier;//[Offset: 0x14, Size: 4]
	float AimTrackinginAirHeightDataThresholdMultiplier;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DigestedTrackingOffsetModifiers
	float CombatStartDuration;//[Offset: 0x0, Size: 4]
	float TargetLowHealthThreshold;//[Offset: 0x4, Size: 4]
	DigestedTrackingOffsetModifierCurves Curves;//[Offset: 0x8, Size: 40]
	DigestedTrackingOffsetModifierCurves DistanceCurves;//[Offset: 0x80, Size: 40]
	DigestedTrackingOffsetModifierCurves InAirHeightCurve;//[Offset: 0xf8, Size: 40]

--------------------------------
Class: DigestedTrackingOffsetModifierCurves
	int Values;//[Offset: 0x0, Size: 4]

--------------------------------
Class: FortControllerComponent_Telemetry.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	FortBotTeleportInfo[] Teleports;//[Offset: 0xb0, Size: 16]
	int TotalTeleports;//[Offset: 0xc0, Size: 4]
	int TotalAmmoCheats;//[Offset: 0xc4, Size: 4]
	float SpawnTime;//[Offset: 0xc8, Size: 4]
	PlayerFishingTelemetryData PlayerFishingTelemetryData;//[Offset: 0xd0, Size: 48]
	FortItemsConsumedInfo[] ItemsConsumed;//[Offset: 0x100, Size: 16]
	int TotalItemsConsumed;//[Offset: 0x110, Size: 4]
	FortRevivedInfo[] Revived;//[Offset: 0x118, Size: 16]
	int TotalTimesRevived;//[Offset: 0x128, Size: 4]
	bool bHasLandedFromSkyDiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	Vector SkyDiveJumpLocation;//[Offset: 0x13c, Size: 12]
	Vector SkyDiveLandLocation;//[Offset: 0x148, Size: 12]
	int SkyDiveLandAsyncQueue;//[Offset: 0x154, Size: 4]
	FString SkyDiveLandPOITags;//[Offset: 0x158, Size: 16]
	GameplayTagContainer IgnoreTelemetryCapForConsumedItems;//[Offset: 0x168, Size: 32]
	PawnConvertedInfos[] PawnsConverted;//[Offset: 0x188, Size: 16]

--------------------------------
Class: FortBotTeleportInfo
	bool bTeleportSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector TeleportFrom;//[Offset: 0x4, Size: 12]
	Rotator RotationFrom;//[Offset: 0x10, Size: 12]
	Vector TeleportTo;//[Offset: 0x1c, Size: 12]
	Rotator RotationTo;//[Offset: 0x28, Size: 12]
	enum TeleportReason;//[Offset: 0x34, Size: 1]
	FString BTNodeNameCausingTeleportation;//[Offset: 0x38, Size: 16]

--------------------------------
Class: PlayerFishingTelemetryData
	float TimeFishingSessionBegan;//[Offset: 0x0, Size: 4]
	FortPickup* Item;//[Offset: 0x4, Size: 8]
	Actor* ItemUsedToFish;//[Offset: 0xc, Size: 8]
	bool bFromFishingPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bBestCollected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	FString FishVariantTag;//[Offset: 0x18, Size: 16]
	float FishPropertyLength;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortItemsConsumedInfo
	FortWeaponItemDefinition* WeaponData;//[Offset: 0x0, Size: 8]
	Vector Location;//[Offset: 0x8, Size: 12]
	float Health;//[Offset: 0x14, Size: 4]
	float Shield;//[Offset: 0x18, Size: 4]
	int ItemQuantity;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FortRevivedInfo
	Vector RevivedLocation;//[Offset: 0x0, Size: 12]
	FString ReviverUniqueID;//[Offset: 0x10, Size: 16]
	byte ReviverTeam;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PawnConvertedInfos
	FString ConvertedPawnUniqueID;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 8]
	float SightRadius;//[Offset: 0x50, Size: 4]
	float LoseSightRadius;//[Offset: 0x54, Size: 4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 4]
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 4]
	float NearClippingRadius;//[Offset: 0x68, Size: 4]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 4]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAthenaAIRuntimeParameters_AIBotRespawn.FortAthenaAIRuntimeParameters.Object
	bool bCanRespawnOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bRespawnOnDeathLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	float RespawnTime;//[Offset: 0x30, Size: 4]
	FortAthenaAISpawnerDataComponentList* AISpawnerDataComponentList;//[Offset: 0x38, Size: 8]

--------------------------------
Class: BuildingWall.BuildingSMActor.BuildingActor.Actor.Object
	class NavArea* DoorObstacleClass;//[Offset: 0xaf8, Size: 40]
	ClimbLinkData ClimbLink;//[Offset: 0xb20, Size: 40]
	Vector DoorOffset;//[Offset: 0xb48, Size: 12]
	Vector SlidingDoorOffset;//[Offset: 0xb54, Size: 12]
	Vector AutomaticSlidingDoorBoxExtent;//[Offset: 0xb60, Size: 12]
	Vector AutomaticSlidingDoorBoxOffset;//[Offset: 0xb6c, Size: 12]
	Vector SlamOpenDoorBoxExtent;//[Offset: 0xb78, Size: 12]
	float SlidingTranslation;//[Offset: 0xb84, Size: 4]
	float SlidingOpenTime;//[Offset: 0xb88, Size: 4]
	SoundBase* DoorOpeningSound;//[Offset: 0xb90, Size: 8]
	SoundBase* DoorSlammedOpenSound;//[Offset: 0xb98, Size: 8]
	SoundBase* DoorClosingSound;//[Offset: 0xba0, Size: 8]
	MaterialInterface* DoorAnimatingMaterial;//[Offset: 0xba8, Size: 8]
	StaticMesh* DoorMesh;//[Offset: 0xbb0, Size: 8]
	StaticMesh* DoubleDoorMesh;//[Offset: 0xbb8, Size: 8]
	StaticMeshComponent* DoorComponent;//[Offset: 0xbc0, Size: 8]
	StaticMeshComponent* SlidingDoorComponent;//[Offset: 0xbc8, Size: 8]
	StaticMeshComponent* DoubleDoorComponent;//[Offset: 0xbd0, Size: 8]
	BoxComponent* DoorBoxComponent;//[Offset: 0xbd8, Size: 8]
	FortDoorLinkComponent* DoorSmartLinkComp;//[Offset: 0xbe0, Size: 8]
	StaticMeshComponent* DoorBlueprintMeshComp;//[Offset: 0xbe8, Size: 8]
	StaticMeshComponent* SlidingDoorBlueprintMeshComp;//[Offset: 0xbf0, Size: 8]
	StaticMeshComponent* DoubleDoorBlueprintMeshComp;//[Offset: 0xbf8, Size: 8]
	Rotator DoorDesiredRotOffset;//[Offset: 0xc00, Size: 12]
	float DoorDesiredXLocation;//[Offset: 0xc18, Size: 4]
	float SlidingDoorDesiredXLocation;//[Offset: 0xc1c, Size: 4]
	BuildingActorNavArea AreaPatternOverride;//[Offset: 0xc20, Size: 4]
	float AreaWidthOverride;//[Offset: 0xc24, Size: 4]
	byte AreaShapeType;//[Offset: 0xc2c, Size: 1]
	enum DoorOpenStyle;//[Offset: 0xc2d, Size: 1]
	bool bSwingingDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2e, Size: 1]
	bool bSlidingDoor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2e, Size: 1]
	bool bAutomaticSlidingDoor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2e, Size: 1]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2e, Size: 1]
	bool bCreateDoorLink;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc2e, Size: 1]
	bool bDoorOpen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc2e, Size: 1]
	bool bLocalDoorOpen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc2e, Size: 1]
	bool bDoorCollisionDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc2e, Size: 1]
	bool bLocalDoorCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2f, Size: 1]
	bool bOverrideAreaWidth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2f, Size: 1]
	bool bCreateClimbLink;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2f, Size: 1]
	bool bProhibitPassOverLowEndOfTriangleWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2f, Size: 1]
	void VerifyDoorOpenMatchesServer();// 0xce77984
	void VerifyDoorCollisionMatchesServer();// 0xce77970
	void OnRep_bDoorOpen();// 0xb5f9140
	void OnRep_bDoorCollisionDisabled();// 0xb5f9124
	void OnNearDoorTriggerUnTouched(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xce7780c
	void OnNearDoorTriggerTouched(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xce775f8
	bool IsDoorOpen();// 0xce775c0
	bool IsDoorComponent(const StaticMeshComponent* MeshComponent);// 0xb5f9064

--------------------------------
Class: ClimbLinkData
	uint32 UniqueLinkId;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortDoorLinkComponent.NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xe8, Size: 4]
	class NavArea* EnabledAreaClass;//[Offset: 0xf0, Size: 8]
	class NavArea* DisabledAreaClass;//[Offset: 0xf8, Size: 8]
	NavAgentSelector SupportedAgents;//[Offset: 0x100, Size: 4]
	Vector LinkRelativeStart;//[Offset: 0x104, Size: 12]
	Vector LinkRelativeEnd;//[Offset: 0x110, Size: 12]
	byte LinkDirection;//[Offset: 0x11c, Size: 1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11d, Size: 1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11d, Size: 1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11d, Size: 1]
	Vector ObstacleOffset;//[Offset: 0x120, Size: 12]
	Vector ObstacleExtent;//[Offset: 0x12c, Size: 12]
	class NavArea* ObstacleAreaClass;//[Offset: 0x138, Size: 8]
	float BroadcastRadius;//[Offset: 0x140, Size: 4]
	float BroadcastInterval;//[Offset: 0x144, Size: 4]
	byte BroadcastChannel;//[Offset: 0x148, Size: 1]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 8]
	void SetNavigationRelevancy(bool bRelevant);// 0xad9636c

--------------------------------
Class: BuildingActorNavArea
	int AreaBits;//[Offset: 0x0, Size: 4]

--------------------------------
Class: FortEncounterPawnNumberCaps
	bool bApplyPawnNumberCaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	CurveTableRowHandle[] PawnCapsPerPlayerCount;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PendingSpawnInfo
	class FortAIPawn* PawnClassToSpawn;//[Offset: 0x0, Size: 8]
	Actor* SpawnPoint;//[Offset: 0x8, Size: 8]
	Vector SpawnLocation;//[Offset: 0x10, Size: 12]
	Rotator SpawnRotation;//[Offset: 0x1c, Size: 12]
	Actor* SpawnSource;//[Offset: 0x28, Size: 8]
	bool bSpawnedFromExternalSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int SpawnSetIndex;//[Offset: 0x34, Size: 4]
	enum AIType;//[Offset: 0x38, Size: 1]
	FortPlayerController* TargetPlayer;//[Offset: 0x40, Size: 8]
	FortAIEncounterInfo* EncounterInfo;//[Offset: 0x48, Size: 8]
	float DifficultyLevel;//[Offset: 0x50, Size: 4]
	FortAISpawnGroup* SpawnGroup;//[Offset: 0x58, Size: 8]
	GUID SpawnGroupGuid;//[Offset: 0x60, Size: 16]
	int EnemyIndexInSpawnGroup;//[Offset: 0x70, Size: 4]
	float TimeToSpawn;//[Offset: 0x74, Size: 4]
	GUID PendingSpawnInfoGuid;//[Offset: 0x78, Size: 16]
	bool bIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bKillBuildingActorsAtSpawnLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	float EncounterAILifespan;//[Offset: 0x8c, Size: 4]
	float ScoreMultiplier;//[Offset: 0x90, Size: 4]
	bool bDebugSpawnedAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	FortAbilitySet*[] AbilitySetsToGrantOnSpawn;//[Offset: 0x98, Size: 16]
	FortGameplayModifierItemDefinition*[] ModifiersToApplyOnSpawn;//[Offset: 0xa8, Size: 16]
	FortAISpawnGroupUpgradeUIData UpgradeUIData;//[Offset: 0xb8, Size: 128]
	FortAIPawnLootDropData LootDropData;//[Offset: 0x138, Size: 28]

--------------------------------
Class: FortAISpawnGroupUpgradeUIData
	bool bAlwaysDisplayHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideHealthBarColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	Texture2D* UpgradeIconImage;//[Offset: 0x8, Size: 40]
	SlateColor UpgradeIconTintColor;//[Offset: 0x30, Size: 40]
	LinearColor HealthBarColorOverride;//[Offset: 0x58, Size: 16]
	FText UpgradeName;//[Offset: 0x68, Size: 24]

--------------------------------
Class: FortAIPawnLootDropData
	float LootDropChance;//[Offset: 0x0, Size: 4]
	FName WorldItemTierGroup;//[Offset: 0x4, Size: 8]
	FName WorldItemInstancedTierGroup;//[Offset: 0xc, Size: 8]
	FName AccountItemTierGroup;//[Offset: 0x14, Size: 8]

--------------------------------
Class: FortPendingStoppedEncounterData
	FortAIEncounterInfo* Encounter;//[Offset: 0x0, Size: 8]
	enum ObjectiveStatus;//[Offset: 0x8, Size: 1]
	bool bForceDestroyAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bEncounterCompletedSuccessfully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: UtilityTypeFloatPair
	byte Utility;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BuildingProp_AISpawner.BuildingProp.BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	class AthenaCreativeRift* CreativeRiftClass;//[Offset: 0xbc0, Size: 8]
	FortCreativeCreatureManagerComponent* CreatureManagerComponent;//[Offset: 0xbc8, Size: 8]
	FortMinigameProgressComponent* MinigameProgress;//[Offset: 0xbd0, Size: 8]
	AthenaCreativeRift* CreativeRift;//[Offset: 0xbd8, Size: 8]
	SceneComponent* SpawnLocation;//[Offset: 0xbe0, Size: 8]
	int ActivationRangeLevel;//[Offset: 0xbe8, Size: 4]
	bool bUseDistanceToAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbec, Size: 1]
	float DespawnRangeOverride;//[Offset: 0xbf0, Size: 4]
	void SpawnRift();// 0xce59520
	void SetSpawnLocation(SceneComponent* SpawnLocation);// 0xce59478
	void OnSpawnedRift(BuildingRift* SpawnedRift);// 0xbbc0600
	void MinigameEnded();// 0xce5945c
	void DestroyRift();// 0xce59440
	void AdjustCollision(bool bIgnore, PrimitiveComponent* Collision);// 0xce59350

--------------------------------
Class: AthenaCreativeRift.BuildingRift.BuildingActor.Actor.Object
	SphereComponent* DespawnSphereComponent;//[Offset: 0x8f0, Size: 8]
	BuildingProp_AISpawner* ParentTrap;//[Offset: 0x8f8, Size: 8]
	FortEncounterSettings OverrideEncounterSettings;//[Offset: 0x900, Size: 184]
	bool bHasLoadedSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	FortPlayerPawn*[] DespawnPlayerOverlaps;//[Offset: 0x9c0, Size: 16]
	void NotifyActorDespawnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xce32c10
	void BlueprintShowRift();// 0xbbc0600

--------------------------------
Class: FortEncounterSettings
	byte[] ForbiddenSpawnDirections;//[Offset: 0x0, Size: 16]
	bool bRiftsDestroyPlayerBuiltBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bValidateIfPlayerIsAtSpawnLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bMustFindSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bStopIfCantFindSpawnPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bIgnoreCollisionWhenSpawningAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bTrackCombatParticipation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool bDisplayThreatVisuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	float BurstSpawnThreatVisualsEndDelayOverride;//[Offset: 0x18, Size: 4]
	int NumRiftsToUseOverride;//[Offset: 0x1c, Size: 4]
	bool bUseEQSQueryToFindAISpawnLocations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bRelevantForTotalAICap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bEnableRecreateRift;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bRespawnRiftWhenRiftDead;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	bool bRandomiseQueryRiftLocations;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 1]
	bool bOverrideEqsFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 1]
	EncounterEnvironmentQueryInfo EqsFallbackOverride;//[Offset: 0x28, Size: 40]
	float PreSpawnRequeryTime;//[Offset: 0x50, Size: 4]
	float SpawnAIIntervalTime;//[Offset: 0x54, Size: 4]
	float SpawnRiftIntervalTime;//[Offset: 0x58, Size: 4]
	bool bSpawnFirstRiftNoDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	EnvQuery* RiftSelectionQuery;//[Offset: 0x60, Size: 8]
	EnvQuery* RiftSlotsEQSQueryOverride;//[Offset: 0x68, Size: 8]
	Actor*[] ScriptedSpawnPoints;//[Offset: 0x70, Size: 16]
	class BuildingRift* RiftClassOverride;//[Offset: 0x80, Size: 8]
	Actor*[] WorkingScriptedSpawnPoints;//[Offset: 0x88, Size: 16]
	int EncounterGroupID;//[Offset: 0x98, Size: 4]
	int ZoneIndex;//[Offset: 0x9c, Size: 4]
	int DifficultyIndex;//[Offset: 0xa0, Size: 4]
	float AIDespawnDistanceOverride;//[Offset: 0xa4, Size: 4]
	FortDifficultyOptionCategoryEncounter*[] InjectedOverrideCategories;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: FortMinigameProgressComponent.FortMinigameLogicComponent.ActorComponent.Object
	MulticastInlineDelegateProperty ProgressStartedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty ProgressFinishedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty ProgressAbortedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty ProgressRevertedDelegate;//[Size: 16]
	float ActivationTime;//[Offset: 0x1a8, Size: 4]
	void StartProgress(PlayerState* PlayerState);// 0xd0c5d94
	void RevertProgress(PlayerState* PlayerState);// 0xd0c5cec
	bool HasActivationTime();// 0xd0c5cc8
	void FinishProgress(PlayerState* PlayerState);// 0xd0c5c20
	void AbortProgress(PlayerState* PlayerState);// 0xd0c5b78

--------------------------------
Class: FortDifficultyEncounterSettings.PrimaryDataAsset.DataAsset.Object
	FortDifficultyOptionEncounter*[] DifficultyOptions;//[Offset: 0x30, Size: 16]
	EncounterEnvironmentQueryInfo OverrideEncounterEnvironmentQueryInfo;//[Offset: 0x40, Size: 40]
	FortEncounterSettings EncounterSettings;//[Offset: 0x68, Size: 184]
	byte SpawnLimitMode;//[Offset: 0x120, Size: 1]
	byte PacingMode;//[Offset: 0x121, Size: 1]

--------------------------------
Class: FortAIEncounterQueryData
	Vector[] QueryLocations;//[Offset: 0x0, Size: 16]
	Actor*[] QueryActors;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortBotMissionLogic.Object
	FortMission* Mission;//[Offset: 0x28, Size: 8]
	Actor*[] Goals;//[Offset: 0x30, Size: 16]
	FortBotStructureBuilder*[] Builders;//[Offset: 0x40, Size: 16]
	BehaviorTree* CurrentBehaviorAsset;//[Offset: 0x50, Size: 8]
	FortBotController*[] AssignedAI;//[Offset: 0x58, Size: 16]
	byte[] GoalHasLocator;//[Offset: 0x68, Size: 16]
	FortBotStructureBuilder* SpawnStructureBuilder(Actor* MissionGoal, FortBuildingInstructions* BuildingInstructions);// 0xcf3a190
	void SetGoalsInvulnerable(bool bGodMode);// 0xcf3a0e0
	void SetCurrentBehavior(BehaviorTree* Behavior);// 0xcf3a038
	void ResetBehavior();// 0xcf3a024
	void OnMissionStarted();// 0xbbc0600
	void OnMissionFinished();// 0xbbc0600
	void OnMissionActivated();// 0xbbc0600
	bool OnInteractWithMissionGoal(FortAIController* BotAI, Actor* MissionGoal);// 0xbbc0600
	bool OnCanStartOtherMission(FortAIController* BotAI, FortMission* OtherMission);// 0xbbc0600
	void OnAssignedBehavior(FortAIController* BotAI);// 0xbbc0600
	void MarkSingleLocator(const Actor* LocatorActor);// 0xcf39f7c
	void MarkAllLocated();// 0xcf39f68
	void ClearAllLocated();// 0xcf39f54

--------------------------------
Class: FortBuildingInstructions.DataAsset.Object
	FortBuildingInstruction[] Instructions;//[Offset: 0x30, Size: 16]
	BoxSphereBounds Bounds;//[Offset: 0x40, Size: 28]
	int NumOfPiecesToSpawnAtOnce;//[Offset: 0x5c, Size: 4]
	float TimeBetweenSpawns;//[Offset: 0x60, Size: 4]
	bool bSetOwnerID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bUsePlayerBuildAnimations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	FString MapName;//[Offset: 0x68, Size: 16]

--------------------------------
Class: FortBuildingInstruction
	FortActorRecord ActorRecord;//[Offset: 0x0, Size: 112]

--------------------------------
Class: FortBotStructureBuilder.Actor.Object
	FortBuildingInstructions* BuildingInstructions;//[Offset: 0x220, Size: 8]
	BuildingActor*[] BuiltActors;//[Offset: 0x228, Size: 16]
	Actor* CachedGoal;//[Offset: 0x238, Size: 8]
	void RunDeconstructor();// 0xcf3a644
	void OnBuildingDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcf3a3e4
	void BuildAll();// 0xcf3a3d0

--------------------------------
Class: FortBotController.FortAIController.AIController.Controller.Actor.Object
	FortBotMissionLogic* CurrentMissionLogic;//[Offset: 0x448, Size: 8]

--------------------------------
Class: FortClientAnnouncement_Basic.FortClientAnnouncement.Actor.Object
	FortClientAnnouncementData_Basic BasicData;//[Offset: 0x290, Size: 232]
	void SetTitleText(FText TitleText);// 0xcf6f8b0
	void SetIcon(out SlateBrush Icon);// 0xcf6f6dc
	void SetDisplayTime(float DisplayTime);// 0xcf6f62c
	void SetDetailText(FText DetailText);// 0xcf6f4a0
	void OnRep_BasicData(out const FortClientAnnouncementData_Basic PreviousBasicData);// 0xcf6f218

--------------------------------
Class: FortClientAnnouncementData_Basic.FortClientAnnouncementData
	SlateBrush Icon;//[Offset: 0x0, Size: 136]
	FText TitleText;//[Offset: 0x88, Size: 24]
	FText DetailText;//[Offset: 0xa0, Size: 24]
	FText GamepadDetailText;//[Offset: 0xb8, Size: 24]
	int Priority;//[Offset: 0xd0, Size: 4]
	float DisplayTime;//[Offset: 0xd8, Size: 4]
	SoundBase* OnStartSound;//[Offset: 0xe0, Size: 8]

--------------------------------
Class: FortMissionPlacementActorPreferredTagInfo
	DataTableRowHandle DifficultyInfo;//[Offset: 0x0, Size: 16]
	GameplayTagContainer PlacementActorPreferredTags;//[Offset: 0x10, Size: 32]
	float Difficulty;//[Offset: 0x30, Size: 4]

--------------------------------
Class: FortMissionFocusDisplayData
	FText CurrentFocusDisplayText;//[Offset: 0x0, Size: 24]
	float CurrentFocusPercentage;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TieredModifierSetData
	int WaveNumber;//[Offset: 0x0, Size: 4]
	int ModifierDuration;//[Offset: 0x4, Size: 4]
	FName ModifierLootTierGroup;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortBadgeCountArray.FastArraySerializer
	FortBadgeCount[] Badges;//[Offset: 0x108, Size: 16]

--------------------------------
Class: FortBadgeCount.FastArraySerializerItem
	FortBadgeItemDefinition* Badge;//[Offset: 0x10, Size: 8]
	int Count;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortMissionWeightedReward
	FName LootTierGroup;//[Offset: 0x0, Size: 8]
	SlateBrush LootIcon;//[Offset: 0x8, Size: 136]
	float Weight;//[Offset: 0x90, Size: 4]

--------------------------------
Class: FortMissionEventParams.Object

--------------------------------
Class: FortMissionEvent
	FName EventType;//[Offset: 0x0, Size: 8]
	GameplayTagContainer ObjectiveHandle;//[Offset: 0x8, Size: 32]
	Object* EventFocus;//[Offset: 0x28, Size: 8]
	DataAsset* EventContent;//[Offset: 0x30, Size: 8]
	Actor* EventInstigator;//[Offset: 0x38, Size: 8]
	int GenericInt;//[Offset: 0x40, Size: 4]
	float GenericFloat;//[Offset: 0x44, Size: 4]
	FText GenericText;//[Offset: 0x48, Size: 24]
	GameplayTagContainer GameplayTags;//[Offset: 0x60, Size: 32]
	GUID MissionGuid;//[Offset: 0x80, Size: 16]
	FortMissionEventParams* Params;//[Offset: 0x90, Size: 8]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0xaa0bff4
	void SetMediaOptionString(out const FName Key, FString Value);// 0xaa0bc00
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0xaa0bd04
	void SetMediaOptionFloat(out const FName Key, float Value);// 0xaa0bdfc
	void SetMediaOptionBool(out const FName Key, bool Value);// 0xaa0bef4
	FString GetUrl();// 0xaa0c034

--------------------------------
Class: FortObjectiveBlock
	FortObjectiveEntry[] ObjectiveEntries;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortObjectiveEntry
	class FortObjectiveBase* ObjectiveRef;//[Offset: 0x0, Size: 40]
	FortBadgeItemDefinition* ObjectiveRewardBadge;//[Offset: 0x28, Size: 8]
	byte MissionRequirement;//[Offset: 0x30, Size: 1]
	GameplayTagContainer ObjectiveHandle;//[Offset: 0x38, Size: 32]

--------------------------------
Class: FortMissionPlacementItems
	GameplayTagContainer TagsToAddToChosenPlacementActors;//[Offset: 0x0, Size: 32]
	FortMissionPlacementFoundationItem[] AdditionalWorldFoundations;//[Offset: 0x20, Size: 16]
	FortMissionPlacementActorItem[] ActorsAndLocations;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortMissionPlacementFoundationItem
	GameplayTagContainer ItemIdentifyingTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer TagsToAddToChosenPlacementActorOrFoundationActor;//[Offset: 0x20, Size: 32]
	EnvQuery* PlacementQuery;//[Offset: 0x40, Size: 8]
	class BuildingFoundation* BuildingFoundationToPlace;//[Offset: 0x48, Size: 40]
	int NumLocationsToFind;//[Offset: 0x70, Size: 4]
	bool bAdjustFoundationPlacementForFloors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]

--------------------------------
Class: FortMissionPlacementActorItem
	GameplayTagContainer ItemIdentifyingTags;//[Offset: 0x0, Size: 32]
	GameplayTagContainer TagsToAddToChosenPlacementActor;//[Offset: 0x20, Size: 32]
	EnvQuery* PlacementQuery;//[Offset: 0x40, Size: 8]
	class Actor* ActorToPlace;//[Offset: 0x48, Size: 40]
	int NumLocationsToFind;//[Offset: 0x70, Size: 4]
	bool bSpawnActorAutomatically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bShouldReserveLocations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bSnapToGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 1]
	bool bAdjustPlacementForFloors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bDontCreateSpawnRiftsNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]

--------------------------------
Class: FortPlacementActorFinderInfo
	float DistanceRangeMin;//[Offset: 0x0, Size: 4]
	float DistanceRangeMax;//[Offset: 0x4, Size: 4]
	FortPlacementActorFinderEntry[] BuildingData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortPlacementActorFinderEntry
	class Actor* BuildingToSpawn;//[Offset: 0x0, Size: 40]
	class BuildingActor* BuildingClassToFind;//[Offset: 0x28, Size: 8]
	class BuildingActor[] BuildingClassesToFind;//[Offset: 0x30, Size: 16]
	GameplayTagContainer RequiredTags;//[Offset: 0x40, Size: 32]
	GameplayTagContainer PreferredTags;//[Offset: 0x60, Size: 32]
	GameplayTagContainer ExlusionTags;//[Offset: 0x80, Size: 32]
	FortFinderProperty[] RequiredProperties;//[Offset: 0xa0, Size: 16]
	bool bIgnoreCollisionCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bSnapToGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]

--------------------------------
Class: FortFinderProperty
	FieldPathProperty Property;//[Size: 32]
	FString Value;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortMissionPopupWidgetData
	FText DisplayName;//[Offset: 0x0, Size: 24]
	bool bShowDescription;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FText Description;//[Offset: 0x20, Size: 24]
	SlateBrush DescriptionIcon;//[Offset: 0x38, Size: 136]
	SlateBrush AvailableIcon;//[Offset: 0xc0, Size: 136]
	SlateBrush UnavailableIcon;//[Offset: 0x148, Size: 136]

--------------------------------
Class: FortMissionWeightedRewards.DataAsset.Object
	FortMissionWeightedReward[] Rewards;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortEncounterProfile
	FortDifficultyOptionSetEncounter* EncounterOptions;//[Offset: 0x0, Size: 40]
	FortDifficultyOptionCategoryEncounter*[] OverrideCategories;//[Offset: 0x28, Size: 16]
	bool bShouldReselectOptionsPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	GameplayTagContainer EncounterTypeTags;//[Offset: 0x40, Size: 32]

--------------------------------
Class: FortDifficultyOptionSetEncounter.DataAsset.Object
	byte PacingMode;//[Offset: 0x30, Size: 1]
	FortDifficultyOptionCategoryEncounter_IntensityCurveSequence* IntensityCurveSequenceCategory;//[Offset: 0x38, Size: 8]
	FortDifficultyOptionCategoryEncounter_SpawnPointsCurve* SpawnPointsPercentageCurveSequenceCategory;//[Offset: 0x40, Size: 8]
	FortDifficultyOptionCategoryEncounter_SpawnPointsBurst* SpawnPointsBurstCategory;//[Offset: 0x48, Size: 8]
	FortDifficultyOptionCategoryEncounter_Breathers* BreathersCategory;//[Offset: 0x50, Size: 8]
	FortDifficultyOptionCategoryEncounter_SpawnPointsMultiplier* SpawnPointsMultiplierCategory;//[Offset: 0x58, Size: 8]
	FortDifficultyOptionCategoryEncounter_PawnNumberCap* PawnNumberCapCategory;//[Offset: 0x60, Size: 8]
	FortDifficultyOptionCategoryEncounter_SpawnTiming* OptionalSpawnTimingCategory;//[Offset: 0x68, Size: 8]
	byte SpawnLimitMode;//[Offset: 0x70, Size: 1]
	FortDifficultyOptionCategoryEncounter_SpawnLimitPoints* SpawnPointsLimitCategory;//[Offset: 0x78, Size: 8]
	FortDifficultyOptionCategoryEncounter_SpawnLimitPawns* PawnLimitCategory;//[Offset: 0x80, Size: 8]
	byte UtilitiesMode;//[Offset: 0x88, Size: 1]
	FortDifficultyOptionCategoryEncounter_UtilitiesLocked* LockedUtilitiesCategory;//[Offset: 0x90, Size: 8]
	FortDifficultyOptionCategoryEncounter_UtilitiesFree* FreeUtilitiesCategory;//[Offset: 0x98, Size: 8]
	FortDifficultyOptionCategoryEncounter_UtilitiesAdjustment* UtilitiesAdjustmentCategory;//[Offset: 0xa0, Size: 8]
	enum SpawnLocationManagementMode;//[Offset: 0xa8, Size: 1]
	byte SpawnLocationPlacementMode;//[Offset: 0xa9, Size: 1]
	FortDifficultyOptionCategoryEncounter_DirectionNumber* DirectionNumberCategory;//[Offset: 0xb0, Size: 8]
	FortDifficultyOptionCategoryEncounter_DirectionChange* DirectionChangeCategory;//[Offset: 0xb8, Size: 8]
	FortDifficultyOptionCategoryEncounter_Distance* DistanceCategory;//[Offset: 0xc0, Size: 8]
	FortDifficultyOptionCategoryEncounter_SpawnGroupProgression* SpawnGroupProgressionCategory;//[Offset: 0xc8, Size: 8]
	FortDifficultyOptionCategoryEncounter_Time* TimeCategory;//[Offset: 0xd0, Size: 8]
	FortDifficultyOptionCategoryEncounter_ModifierTags* OptionalModifierTagsCategory;//[Offset: 0xd8, Size: 8]
	FortDifficultyOptionCategoryEncounter_TimedModifierTags* OptionalMiniBossStartTimedTagsCategory;//[Offset: 0xe0, Size: 8]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_IntensityCurveSequence.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_IntensityCurveSequence[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_IntensityCurveSequence.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	FortIntensityCurveSequence* CurveSequence;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortIntensityCurveSequence.DataAsset.Object
	DataTableRowHandle[] IntensityCurves;//[Offset: 0x30, Size: 16]
	byte SequenceType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnPointsCurve.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnPointsCurve[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnPointsBurst.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnPointsBurst[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnPointsBurst.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	ScalableFloat BurstSpawnPointsPercentage;//[Offset: 0x48, Size: 40]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_Breathers.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_Breathers[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_Breathers.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	bool bUseBreathers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	CurveTableRowHandle LowPlayerPerformanceBreatherTimeSecondsCurve;//[Offset: 0x50, Size: 16]
	CurveTableRowHandle NormalPlayerPerformanceBreatherTimeSecondsCurve;//[Offset: 0x60, Size: 16]
	CurveTableRowHandle HighPlayerPerformanceBreatherTimeSecondsCurve;//[Offset: 0x70, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnPointsMultiplier.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnPointsMultiplier[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_PawnNumberCap.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_PawnNumberCap[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_PawnNumberCap.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	FortEncounterPawnNumberCaps PawnCapsPerPlayerCount;//[Offset: 0x48, Size: 24]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnTiming.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnTiming[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnTiming.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	ScalableFloat SpawnIntervalSeconds;//[Offset: 0x48, Size: 40]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnLimitPoints.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnLimitPoints[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnLimitPoints.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	float SpawnPointsPercentageLimit;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnLimitPawns.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnLimitPawns[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_SpawnLimitPawns.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	int PawnNumberLimit;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_UtilitiesLocked.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_UtilitiesLocked[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_UtilitiesFree.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_UtilitiesFree[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_UtilitiesAdjustment.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_UtilitiesAdjustment[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_DirectionNumber.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_DirectionNumber[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_DirectionChange.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_DirectionChange[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_DirectionChange.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	bool bChangeDirectionsOnRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_Distance.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_Distance[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_SpawnGroupProgression.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_SpawnGroupProgression* SpawnGroupProgression;//[Offset: 0x38, Size: 8]
	class FortDifficultyOptionEncounter_SpawnGroupProgression[] Options;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_Time.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_Time[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionEncounter_Time.FortDifficultyOptionEncounter.FortDifficultyOption.Object
	float EncounterTimeSeconds;//[Offset: 0x48, Size: 4]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_ModifierTags.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_ModifierTags[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortDifficultyOptionCategoryEncounter_TimedModifierTags.FortDifficultyOptionCategoryEncounter.FortDifficultyOptionCategory.DataAsset.Object
	class FortDifficultyOptionEncounter_TimedModifierTags[] Options;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortEncounterSequenceSettings
	FortEncounterTransitionSettings TransitionSettings;//[Offset: 0x0, Size: 1]
	FortEncounterProfile[] EncounterSequence;//[Offset: 0x8, Size: 16]
	GameplayTagContainer SequenceTags;//[Offset: 0x18, Size: 32]

--------------------------------
Class: FortDifficultyOptionSetMission.DataAsset.Object
	FortDifficultyOptionCategoryMission*[] MissionOptionsCategories;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortMissionTaggedRewards
	GameplayTag Tag;//[Offset: 0x0, Size: 8]
	FortWorldItemDefinition*[] WorldItemDefinitions;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MissionPerDifficultyProperties
	DataTableRowHandle[] ValidDifficulties;//[Offset: 0x0, Size: 16]
	FortTimeOfDayTheme OverrideTimeOfDayTheme;//[Offset: 0x10, Size: 64]
	FortGlobalWindInfo OverrideGlobalWindInfo;//[Offset: 0x50, Size: 24]

--------------------------------
Class: FortMissionConfigDataParams
	FortMissionConfigDataBucket[] ConfigParams;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortMissionConfigDataBucket
	GameplayTag Tag;//[Offset: 0x0, Size: 8]
	class FortMissionConfigData* ConfigDataClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FortUrgentQuestItemDefinition.FortQuestItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	UrgentQuestData UrgentQuestData;//[Offset: 0x660, Size: 272]
	UrgentQuestData GetUrgentQuestData();// 0xd1febe8

--------------------------------
Class: DeathInfo
	Actor* FinisherOrDowner;//[Offset: 0x0, Size: 8]
	Actor* Downer;//[Offset: 0x8, Size: 8]
	bool bDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	enum DeathCause;//[Offset: 0x11, Size: 1]
	byte DeathClassSlot;//[Offset: 0x12, Size: 1]
	float Distance;//[Offset: 0x14, Size: 4]
	Vector DeathLocation;//[Offset: 0x18, Size: 12]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	GameplayTagContainer DeathTags;//[Offset: 0x28, Size: 32]
	GameplayTagContainer FinisherOrDownerTags;//[Offset: 0x48, Size: 32]
	GameplayTagContainer VictimTags;//[Offset: 0x68, Size: 32]

--------------------------------
Class: ChangeTeamInfo
	Actor* Instigator;//[Offset: 0x0, Size: 8]
	GameplayTagContainer ChangeTeamTags;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FortResurrectionData
	bool bResurrectionChipAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ResurrectionExpirationTime;//[Offset: 0x4, Size: 4]
	float ResurrectionExpirationLength;//[Offset: 0x8, Size: 4]
	Vector WorldLocation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: FortTournamentStatInfo
	FString StatName;//[Offset: 0x0, Size: 16]
	FName StatDisplayName;//[Offset: 0x10, Size: 8]
	int StatValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: EventTournamentIds
	FString EventId;//[Offset: 0x0, Size: 16]
	FString WindowId;//[Offset: 0x10, Size: 16]
	FString GroupId;//[Offset: 0x20, Size: 16]
	FString SubGroupId;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortCreativeMessageDispatcherErrorMessage
	enum ErrorMessageType;//[Offset: 0x0, Size: 1]
	FText MessageName;//[Offset: 0x8, Size: 24]
	GameplayTag ChannelId;//[Offset: 0x20, Size: 8]
	int LimitValue;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelStreamRequestHandshakeState
	bool bLevelStreamingCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: CreativeIslandData
	FString McpId;//[Offset: 0x0, Size: 16]
	FText IslandName;//[Offset: 0x10, Size: 24]
	FString PublishedIslandCode;//[Offset: 0x28, Size: 16]
	int PublishedIslandVersion;//[Offset: 0x38, Size: 4]
	DateTime LastLoadedDate;//[Offset: 0x40, Size: 8]
	DateTime DeletedAt;//[Offset: 0x48, Size: 8]
	bool bIsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: FortGamepadSettings.DataAsset.Object
	CurveFloat* GamepadLookCurve;//[Offset: 0x30, Size: 8]
	CurveFloat* GamepadLookSensitivityCurve;//[Offset: 0x38, Size: 8]
	Vector2D GamepadLookScale;//[Offset: 0x40, Size: 8]
	float GamepadLookScaleDownsights;//[Offset: 0x48, Size: 4]
	float GamepadLookScaleScope;//[Offset: 0x4c, Size: 4]
	float GamepadLookScaleDownsightsDecayTime;//[Offset: 0x50, Size: 4]
	float AimAssistStrength;//[Offset: 0x54, Size: 4]
	float AimAssistStrengthDownsights;//[Offset: 0x58, Size: 4]
	float AimAssistStrengthDBNO;//[Offset: 0x5c, Size: 4]
	float GamepadLookAccelTime;//[Offset: 0x60, Size: 4]
	float GamepadLookDecelTime;//[Offset: 0x64, Size: 4]
	float AimAssistPullStrength;//[Offset: 0x68, Size: 4]
	float AimAssistPullMaxRate;//[Offset: 0x6c, Size: 4]
	float AimAssistPullRampUpTime;//[Offset: 0x70, Size: 4]
	float AimAssistPullDecayTime;//[Offset: 0x74, Size: 4]
	float AimAssistInitialDownsightStrength;//[Offset: 0x78, Size: 4]
	float AimAssistInitialDownsightTime;//[Offset: 0x7c, Size: 4]
	float SlowMinDistance;//[Offset: 0x80, Size: 4]
	float SlowMinStrength;//[Offset: 0x84, Size: 4]
	float SlowMaxDistance;//[Offset: 0x88, Size: 4]
	float SlowMaxStrength;//[Offset: 0x8c, Size: 4]
	float SlowDecayTime;//[Offset: 0x90, Size: 4]
	float EditModePullStrengthStationary;//[Offset: 0x94, Size: 4]
	float EditModePullStrengthMovingNewTile;//[Offset: 0x98, Size: 4]
	float EditModePullStrengthMovingWithinTile;//[Offset: 0x9c, Size: 4]
	float EditModePullMinDistance;//[Offset: 0xa0, Size: 4]
	float EditModePullMaxDistance;//[Offset: 0xa4, Size: 4]
	float EditModePullScaleFlat;//[Offset: 0xa8, Size: 4]
	float EditModePullMaxRate;//[Offset: 0xac, Size: 4]
	float EditModeSlowMinDistance;//[Offset: 0xb0, Size: 4]
	float EditModeSlowMinStrength;//[Offset: 0xb4, Size: 4]
	float EditModeSlowMaxDistance;//[Offset: 0xb8, Size: 4]
	float EditModeSlowMaxStrength;//[Offset: 0xbc, Size: 4]
	FortAbilityTargetSelection AimAssistTargetSelection;//[Offset: 0xc0, Size: 280]

--------------------------------
Class: AthenaPlayerMatchReport.Object
	MulticastInlineDelegateProperty OnRewardsAvailable;//[Size: 16]
	MulticastInlineDelegateProperty OnStatsAvailable;//[Size: 16]
	MulticastInlineDelegateProperty OnTeamStatsAvailable;//[Size: 16]
	AthenaLevelInfo InitialLevelInfo;//[Offset: 0x58, Size: 36]
	bool bHasMatchStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	AthenaMatchStats MatchStats;//[Offset: 0x80, Size: 200]
	bool bHasTeamStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	AthenaMatchTeamStats TeamStats;//[Offset: 0x14c, Size: 8]
	bool bHasRewards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	AthenaRewardResult EndOfMatchResults;//[Offset: 0x158, Size: 64]
	AthenaTravelRecord TravelRecord;//[Offset: 0x198, Size: 16]
	MulticastInlineDelegateProperty TravelLogUpdated;//[Size: 16]
	void GetXpRewards(out AthenaMatchXpReward[] XpRewards);// 0xce39c70
	int GetTotalSeasonalXpEarned();// 0xce39c3c
	int GetTotalScoreEarned();// 0xce39c08
	int GetTotalBookXpEarned();// 0xce39bd4
	void GetLootRewards(out AthenaMatchLootReward[] LootRewards);// 0xce39b18
	void DataAvailableEvent__DelegateSignature();// 0xbbc0600

--------------------------------
Class: AthenaLevelInfo
	int AccountLevel;//[Offset: 0x0, Size: 4]
	int Level;//[Offset: 0x4, Size: 4]
	int MaxLevel;//[Offset: 0x8, Size: 4]
	int LevelXp;//[Offset: 0xc, Size: 4]
	int LevelXpForLevel;//[Offset: 0x10, Size: 4]
	int BookLevel;//[Offset: 0x14, Size: 4]
	int BookMaxLevel;//[Offset: 0x18, Size: 4]
	int BookLevelXp;//[Offset: 0x1c, Size: 4]
	int BookLevelXpForLevel;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AthenaMatchXpReward
	FText Text;//[Offset: 0x0, Size: 24]
	int Amount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: AthenaMatchLootReward
	FString TemplateId;//[Offset: 0x0, Size: 16]
	int Amount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AthenaMatchStats
	FString StatBucket;//[Offset: 0x0, Size: 16]
	FString MatchId;//[Offset: 0x10, Size: 16]
	FString MatchEndTime;//[Offset: 0x20, Size: 16]
	FString MatchPlatform;//[Offset: 0x30, Size: 16]
	int Stats;//[Offset: 0x40, Size: 4]
	AthenaWeaponStats[] WeaponStats;//[Offset: 0x90, Size: 16]
	AthenaXPStats[] XPStats;//[Offset: 0xa0, Size: 16]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	FString FactionTag;//[Offset: 0xb8, Size: 16]

--------------------------------
Class: AthenaWeaponStats
	FString WeaponId;//[Offset: 0x0, Size: 16]
	int Stats;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AthenaXPStats
	FName Stat;//[Offset: 0x0, Size: 8]
	int Count;//[Offset: 0x8, Size: 4]
	int XP;//[Offset: 0xc, Size: 4]
	enum Subtype;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AthenaMatchTeamStats
	int Place;//[Offset: 0x0, Size: 4]
	int TotalPlayers;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AthenaRewardResult
	int LevelsGained;//[Offset: 0x0, Size: 4]
	int BookLevelsGained;//[Offset: 0x4, Size: 4]
	int TotalSeasonXpGained;//[Offset: 0x8, Size: 4]
	int TotalBookXpGained;//[Offset: 0xc, Size: 4]
	int PrePenaltySeasonXpGained;//[Offset: 0x10, Size: 4]
	AthenaMatchXpMultiplierGroup[] XpMultipliers;//[Offset: 0x18, Size: 16]
	AthenaAwardGroup[] Rewards;//[Offset: 0x28, Size: 16]
	float AntiAddictionMultiplier;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AthenaMatchXpMultiplierGroup
	enum Source;//[Offset: 0x0, Size: 1]
	int Amount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AthenaAwardGroup
	enum RewardSource;//[Offset: 0x0, Size: 1]
	McpLootEntry[] Items;//[Offset: 0x8, Size: 16]
	int Score;//[Offset: 0x18, Size: 4]
	float SeasonXp;//[Offset: 0x1c, Size: 4]
	int BookXp;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AthenaTravelRecord
	AthenaTravelLogEntry[] Log;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AthenaTravelLogEntry
	float Time;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	enum Type;//[Offset: 0x1c, Size: 1]
	FName InstigatorName;//[Offset: 0x20, Size: 8]
	UniqueNetIdRepl InstigatorId;//[Offset: 0x28, Size: 40]
	enum InstigatorPlayerType;//[Offset: 0x50, Size: 1]
	FName ReceiverName;//[Offset: 0x54, Size: 8]
	UniqueNetIdRepl ReceiverId;//[Offset: 0x60, Size: 40]
	enum ReceiverPlayerType;//[Offset: 0x88, Size: 1]
	float Value;//[Offset: 0x8c, Size: 4]
	JsonObjectWrapper Meta;//[Offset: 0x90, Size: 32]
	GameplayTagContainer LocationPOITags;//[Offset: 0xb0, Size: 32]

--------------------------------
Class: BuildingEditModeMetadata_Wall.BuildingEditModeMetadata_BinaryToggle.BuildingEditModeMetadata.DataAsset.Object

--------------------------------
Class: BuildingEditModeMetadata_BinaryToggle.BuildingEditModeMetadata.DataAsset.Object
	byte[] TileData;//[Offset: 0x110, Size: 16]

--------------------------------
Class: BuildingEditModeMetadata_Floor.BuildingEditModeMetadata_BinaryToggle.BuildingEditModeMetadata.DataAsset.Object

--------------------------------
Class: BuildingEditModeMetadata_Roof.BuildingEditModeMetadata_BinaryToggle.BuildingEditModeMetadata.DataAsset.Object
	AuxiliaryEditTileMeshData[] AuxEditTileMeshData;//[Offset: 0x120, Size: 16]

--------------------------------
Class: AuxiliaryEditTileMeshData
	StaticMesh* TileMesh;//[Offset: 0x0, Size: 8]
	Texture2D* TileTexture;//[Offset: 0x8, Size: 8]
	Rotator RelativeRot;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BuildingEditModeMetadata_Stair.BuildingEditModeMetadata.DataAsset.Object
	int[] TileData;//[Offset: 0x110, Size: 16]

--------------------------------
Class: FortMiniMapTeamIndicators.FortMiniMapIndicator.FortIndicator.Object
	FortPlayerController* PlayerController;//[Offset: 0x118, Size: 8]
	bool bSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	FortPlayerControllerSpectating* SpectatorPC;//[Offset: 0x128, Size: 8]
	AthenaIndicatorPlayersCache* IndicatedPlayersCache;//[Offset: 0x130, Size: 8]
	float PlatformScale;//[Offset: 0x138, Size: 4]
	SlateBrush SquadPlayerBrush;//[Offset: 0x140, Size: 136]
	SlateBrush TeamPlayerBrush;//[Offset: 0x1c8, Size: 136]
	SlateBrush EnemyPlayerBrush;//[Offset: 0x250, Size: 136]
	SlateBrush SpectatedPlayerBrush;//[Offset: 0x2d8, Size: 136]
	SlateBrush SpectatedPlayerVehicleBrush;//[Offset: 0x360, Size: 136]
	SlateBrush MiniMapIconBrushDBNO;//[Offset: 0x3e8, Size: 136]
	LinearColor MinimapIconColorSelf;//[Offset: 0x470, Size: 16]
	LinearColor MinimapIconColorTeammate;//[Offset: 0x480, Size: 16]
	LinearColor MinimapIconColorEnemy;//[Offset: 0x490, Size: 16]
	LinearColor[] MinimapIconColorEnemy_MultiTeam;//[Offset: 0x4a0, Size: 16]
	SlateBrush PlayerNameBackgroundBrush;//[Offset: 0x4b0, Size: 136]
	SlateFontInfo PlayerNameFontInfo;//[Offset: 0x538, Size: 88]

--------------------------------
Class: AthenaIndicatorPlayersCache.Object
	void HandleRefreshIndicatorPlayersCache();// 0xce34cd4
	void HandlePlayerEnterVolume(PlayerState* Client, FortVolume* Volume);// 0xce34bf0

--------------------------------
Class: FortMiniMapChallengeIndicators.FortMiniMapIndicator.FortIndicator.Object
	FortPlayerControllerAthena* AthenaPlayerController;//[Offset: 0x118, Size: 8]
	AthenaChallengeIndicatorCache* ChallengeIndicatorCache;//[Offset: 0x120, Size: 8]

--------------------------------
Class: AthenaChallengeIndicatorCache.Object
	FortPlayerController* OwningPlayerController;//[Offset: 0x28, Size: 8]
	void HandleQuestsUpdated();// 0xce31030

--------------------------------
Class: BuildingStats
	int BuildingsPlaced;//[Offset: 0x0, Size: 4]
	int WallsPlaced;//[Offset: 0x4, Size: 4]
	int StairsPlaced;//[Offset: 0x8, Size: 4]
	int FloorsPlaced;//[Offset: 0xc, Size: 4]
	int RoofsPlaced;//[Offset: 0x10, Size: 4]
	int WoodBuildingsPlaced;//[Offset: 0x14, Size: 4]
	int StoneBuildingsPlaced;//[Offset: 0x18, Size: 4]
	int MetalBuildingsPlaced;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BuildingEditAnalyticEvent
	byte BuildingType;//[Offset: 0x0, Size: 1]
	byte ResourceType;//[Offset: 0x1, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CreativePlotSessionData
	int TimesInventoryOpened;//[Offset: 0x8, Size: 4]
	int TimesIslandMenuOpened;//[Offset: 0xc, Size: 4]
	int TimesGameStarted;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AthenaResurrectionComponent.ActorComponent.Object
	UniqueNetIdRepl[] PlayerIdsForResurrection;//[Offset: 0xc8, Size: 16]
	FortPlayerStart* ResurrectionLocation;//[Offset: 0xd8, Size: 8]
	MarkerID ResurrectionMachineMarkerID;//[Offset: 0xe0, Size: 8]
	int ClosestSpawnMachineIndex;//[Offset: 0xe8, Size: 4]
	CloneMachineRepData CloneMachineRepData;//[Offset: 0xf0, Size: 24]
	float NotifyPlayerDamageThrottle;//[Offset: 0x108, Size: 4]
	void ServerOnInterruptResurrectionInteraction(BuildingGameplayActorSpawnMachine* SpawnMachine);// 0xce3a210
	void ServerOnBeginResurrectionInteraction(BuildingGameplayActorSpawnMachine* SpawnMachine);// 0xce3a138
	void OnRep_PlayerIdsForResurrection();// 0xce3a124
	void ClientNotifyCloneMchineDestroyed(const SoundCue* DestroyedSound);// 0xce3a074
	void ClientNotifyCloneMachineUnderAttack(const SoundCue* DamageSound);// 0xce39fc4

--------------------------------
Class: BuildingGameplayActorSpawnMachine.BuildingGameplayActor.BuildingActor.Actor.Object
	FortPlayerStart* ResurrectLocation;//[Offset: 0x7e0, Size: 8]
	UniqueNetIdRepl[] PlayerIdsForResurrection;//[Offset: 0x7e8, Size: 16]
	FortPlayerControllerAthena* InstigatorPC;//[Offset: 0x7f8, Size: 8]
	byte SquadId;//[Offset: 0x800, Size: 1]
	byte ActiveTeam;//[Offset: 0x801, Size: 1]
	enum SpawnMachineState;//[Offset: 0x802, Size: 1]
	ScalableFloat ResurrectionStartDelay;//[Offset: 0x808, Size: 40]
	ScalableFloat ResurrectionNextPlayerDelay;//[Offset: 0x830, Size: 40]
	SoundCue* InteractSoundCueLoop;//[Offset: 0x858, Size: 8]
	ScalableFloat CooldownLengthRow;//[Offset: 0x860, Size: 40]
	FText InteractNoCardsSubText;//[Offset: 0x888, Size: 24]
	FText InteractNoVanLockSubText;//[Offset: 0x8a0, Size: 24]
	LinearColor InteractSubTextColor;//[Offset: 0x8b8, Size: 16]
	enum SpawnMachineSubTextState;//[Offset: 0x8c8, Size: 1]
	int HandleIntoGameState;//[Offset: 0x8cc, Size: 4]
	void SetSpawnMachineState(enum NewState);// 0xce54784
	bool RebootPlayersInAir();// 0xce5474c
	void OnSpawnMachineStateChanged();// 0xce54730
	void OnResurrectionStarted();// 0xce54714
	void OnResurrectionCompleted();// 0xce546f8
	void OnRep_SpawnMachineState();// 0xb5f30cc
	void OnPlayerPawnResurrected(FortPlayerPawn* PlayerPawn);// 0xce54648
	void OnInterruptLongUse(FortPlayerControllerAthena* AthenaPC);// 0xce54598
	void OnBeginLongUse(FortPlayerControllerAthena* AthenaPC);// 0xce544e8
	enum GetSpawnMachineState();// 0xb5f30b0
	float GetCooldownLength();// 0xb5f307c

--------------------------------
Class: CloneMachineRepData
	BuildingGameplayActorCloneMachine* CloneMachine;//[Offset: 0x0, Size: 8]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BuildingGameplayActorCloneMachine.BuildingGameplayActor.BuildingActor.Actor.Object
	FortPlayerStart* CloneLocation;//[Offset: 0x7e0, Size: 8]
	bool bRespawnCompleteAndSelfDestructing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e8, Size: 1]
	ScalableFloat DelayBeforeActivation;//[Offset: 0x7f0, Size: 40]
	ScalableFloat DelayBeforeRespawn;//[Offset: 0x818, Size: 40]
	ScalableFloat DelayBeforeSelfDestruct;//[Offset: 0x840, Size: 40]
	ScalableFloat DelayBeforeSelfDestructWithStorm;//[Offset: 0x868, Size: 40]
	SoundCue* OnDamagedNotifyPlayerSound;//[Offset: 0x890, Size: 8]
	SoundCue* OnDestroyedNotifyPlayerSound;//[Offset: 0x898, Size: 8]
	float ActivationServerEndTime;//[Offset: 0x8a0, Size: 4]
	float RespawnServerEndTime;//[Offset: 0x8a4, Size: 4]
	void OnRep_RespawnServerEndTime();// 0xce50a10
	void OnRep_ActivationServerEndTime();// 0xce509fc
	void OnCloneMachineSpawnsPlayer(FortPlayerPawn* PlayerPawn);// 0xce5094c
	void OnCloneMachineRespawningBegins();// 0xce50930
	void OnCloneMachineActivationBegins();// 0xce50914

--------------------------------
Class: FortControllerComponent_HeldDeviceUsage.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	FortBattleLabDeviceItemDefinition* LastBattleLabDeviceItemDefinition;//[Offset: 0xb0, Size: 8]
	FortHeldObjectComponent* LastHeldObjectComponent;//[Offset: 0xb8, Size: 8]
	void ServerUseBattleLabDevice(const FortBattleLabDeviceItemDefinition* DeviceItemDef);// 0xcf967f8
	void QuestUpdate();// 0xcf967e4
	void OnWeaponEquipped(FortWeapon* NewWeapon, FortWeapon* PreviousWeapon);// 0xcf96700
	void OnHeldObjectThrown();// 0xcf966ec
	void OnHeldObjectPlaced();// 0xcf966d8
	void OnHeldObjectDropped();// 0xcf966c4
	void OnHeldObjectDestroy();// 0xcf966b0
	void DestroyDroppedDevice(Actor* DroppedDevice);// 0xcf96608

--------------------------------
Class: FortBattleLabDeviceItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class BattleLabDeviceGameplayActor* BattleLabDeviceActorClass;//[Offset: 0x798, Size: 40]

--------------------------------
Class: BattleLabDeviceGameplayActor.BuildingGameplayActor.BuildingActor.Actor.Object
	FortBattleLabDeviceItemDefinition* BattleLabDeviceItemData;//[Offset: 0x7e0, Size: 8]
	void OnRep_BattleLabDeviceItemData();// 0xce3ec90

--------------------------------
Class: FortHeldObjectComponent.ActorComponent.Object
	FortWeaponItemDefinition* EquippedWeaponItemDefinition;//[Offset: 0xb0, Size: 40]
	HeldObjectThrownData HeldObjectThrownData;//[Offset: 0xd8, Size: 80]
	Vector AttachmentOffset;//[Offset: 0x128, Size: 12]
	enum PlayerAttachmentScaleRule;//[Offset: 0x134, Size: 1]
	bool bAllowObjectToBeHeldInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x135, Size: 1]
	bool bBlocksVehicleDriverSeat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x135, Size: 1]
	bool bApplyAngularImpulseOnThrow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x135, Size: 1]
	Vector2D ThrowAngularImpulseRange;//[Offset: 0x138, Size: 8]
	MaterialInterface* PreviewMaterial;//[Offset: 0x140, Size: 40]
	class FortDecoPreview* PlacementPreviewClass;//[Offset: 0x168, Size: 8]
	class FortProjectileBase* GuideProjectileClass;//[Offset: 0x170, Size: 8]
	Vector GuideAttachLocationOffset;//[Offset: 0x178, Size: 12]
	Rotator GuideAttachRotationOffset;//[Offset: 0x184, Size: 12]
	MulticastInlineDelegateProperty OnHeldObjectPickedUp;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectPlaced;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectDropped;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectGuideProjectileStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectGuideProjectileStopped;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectEnteredWater;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectMovedToVehicle;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectThrown;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectThrownLanded;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectDestroy;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectAttached;//[Size: 16]
	MulticastInlineDelegateProperty OnHeldObjectOwningPawnChanged;//[Size: 16]
	bool bUsePreviewMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 1]
	bool bCollisionBlockedByPawns;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 1]
	bool bDroppedFromWeaponSwap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 1]
	enum HeldObjectState;//[Offset: 0x251, Size: 1]
	FortPlayerPawn* OwningPawn;//[Offset: 0x258, Size: 8]
	Rotator ObjectPickupRotation;//[Offset: 0x260, Size: 12]
	FortPlayerPawn* PreviousOwningPawn;//[Offset: 0x26c, Size: 8]
	HeldObjectMovementReplicatedData HeldObjectMovementReplicatedData;//[Offset: 0x274, Size: 40]
	FortWorldItem* GrantedWeaponItem;//[Offset: 0x29c, Size: 8]
	FortWeapon* GrantedWeapon;//[Offset: 0x2a4, Size: 8]
	FortProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x2b0, Size: 8]
	FortPhysicsObjectComponent* PhysicsObjectComponent;//[Offset: 0x2b8, Size: 8]
	<PrimitiveComponent*,CollisionResponseRestoreState> CollisionResponseChannelRestoreMap;//[Offset: 0x2c0, Size: 80]
	MeshComponent* ReferenceMeshComponent;//[Offset: 0x310, Size: 8]
	FortDecoPreview* PlacementPreviewActor;//[Offset: 0x318, Size: 8]
	FortProjectileBase* GuideProjectile;//[Offset: 0x320, Size: 8]
	void TurnOnCollisionSettings();// 0xd027d58
	void TurnOffCollisionSettings();// 0xd027d44
	void ThrownObjectStopped(out const HitResult ImpactResult);// 0xd027c74
	void ThrownObjectEnteredWater(FortWaterBodyActor* WaterBody, FortWaterInteractionComponent* WaterInteractionComponent, bool bIsFirstBody);// 0xd027b48
	void ThrowHeldObject(out const Vector DetachLocation, out const Rotator ThrowDirection);// 0xd027a4c
	void SetMeshComponent(MeshComponent* InMeshComponent);// 0xd0279a8
	void RemoveHeldObjectFromVehicle();// 0xd027994
	void PlaceHeldObject();// 0xd027980
	void PickupHeldObject(FortPlayerPawn* PlayerPawn);// 0xd0278d8
	void OnWeaponUnequipped();// 0xd0278c4
	void OnThrowComplete();// 0xd0278b0
	void OnRep_UsePreviewMaterial();// 0xd02789c
	void OnRep_OwningPawn(FortPlayerPawn* LastOwningPawn);// 0xd0277f4
	void OnRep_bCollisionBlockedByPawns();// 0xd0277e0
	void OnHeldObjectThrownLanded__DelegateSignature();// 0xbbc0600
	void OnHeldObjectThrown__DelegateSignature();// 0xbbc0600
	void OnHeldObjectPlaced__DelegateSignature();// 0xbbc0600
	void OnHeldObjectPickedUp__DelegateSignature();// 0xbbc0600
	void OnHeldObjectOwningPawnChanged__DelegateSignature();// 0xbbc0600
	void OnHeldObjectMovedToVehicle__DelegateSignature(FortHeldObjectComponent* HeldObject);// 0xbbc0600
	void OnHeldObjectGuideProjectileStopped__DelegateSignature();// 0xbbc0600
	void OnHeldObjectGuideProjectileStarted__DelegateSignature();// 0xbbc0600
	void OnHeldObjectEnteredWater__DelegateSignature();// 0xbbc0600
	void OnHeldObjectDropped__DelegateSignature();// 0xbbc0600
	void OnHeldObjectDestroy__DelegateSignature();// 0xbbc0600
	void OnHeldObjectAttached__DelegateSignature();// 0xbbc0600
	bool IsUnheld();// 0xd0277bc
	bool IsThrown();// 0xd027798
	bool IsPlaced();// 0xd027774
	bool IsHeldInVehicle();// 0xd027750
	bool IsHeld();// 0xd02772c
	bool IsDropped();// 0xd027708
	void HoldObjectInVehicle();// 0xd0276f4
	void HandleOwnerDestroyed(Actor* DestroyedActor);// 0xb677d10
	void HandleOwnerAsBuildingActorDestroyed(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd027494
	void HandleGuideProjectileDestroyed(Actor* DestroyedActor);// 0xd0273ec
	void GuideProjectileStopped(out const HitResult ImpactResult);// 0xd02731c
	float GetSweptTraceRadius();// 0xd0272e8
	MeshComponent* GetMeshComponent();// 0xd0272cc
	float GetMaxSpeed();// 0xd027298
	FortPlayerPawn* GetInstigator();// 0xd027264
	float GetGravityZ();// 0xd027230
	float GetGravityScale();// 0xd0271fc
	bool GetBlocksVehicleDriverSeat();// 0xd0271dc
	bool GetAllowObjectToBeHeldInVehicle();// 0xd0271bc
	void DropObjectHeldInVehicle();// 0xd0271a8
	void DropHeldObject();// 0xd027194
	bool CanInteract(const FortPlayerPawn* RequestingPawn);// 0xd0270e0

--------------------------------
Class: HeldObjectThrownData
	ScalableFloat MaxSpeed;//[Offset: 0x0, Size: 40]
	ScalableFloat GravityScale;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortDecoPreview.Actor.Object
	byte FallbackAttachmentType;//[Offset: 0x220, Size: 1]
	byte FallbackPlacementType;//[Offset: 0x221, Size: 1]
	MaterialInterface* PreviewPlacementMaterial;//[Offset: 0x228, Size: 40]
	CurveFloat* MotionBounceCurve;//[Offset: 0x250, Size: 40]
	FName CanBePlacedMaterialScalarParam;//[Offset: 0x278, Size: 8]
	float ValidPlacementScalarParam;//[Offset: 0x280, Size: 4]
	float InvalidPlacementScalarParam;//[Offset: 0x284, Size: 4]
	FName InverseMovementVectorMaterialParam;//[Offset: 0x288, Size: 8]
	float MovementEffectScale;//[Offset: 0x290, Size: 4]
	FName InverseOuterScaleVectorParam;//[Offset: 0x294, Size: 8]
	FName InverseInnerScaleVectorParam;//[Offset: 0x29c, Size: 8]
	FName WorldSpacePivotVectorParam;//[Offset: 0x2a4, Size: 8]
	FName DiffuseTextureParam;//[Offset: 0x2ac, Size: 8]
	float FreePlacementOffset;//[Offset: 0x2b4, Size: 4]
	Timeline BounceTimeline;//[Offset: 0x2b8, Size: 152]
	MaterialInstanceDynamic*[] PreviewMIDs;//[Offset: 0x350, Size: 16]
	Vector DirectionChange;//[Offset: 0x360, Size: 12]
	Vector WorldSpacePivot;//[Offset: 0x36c, Size: 12]
	FortDecoHelper* ParentDecoHelper;//[Offset: 0x378, Size: 8]
	void SetVectorParameterValueOnAllPreviewMIDs(FName ParamName, out const LinearColor ParamValue);// 0xcfceb20
	void SetScalarParameterValueOnAllPreviewMIDs(FName ParamName, float ParamValue);// 0xcfcea30
	void OnUpdateVisuals(float DeltaSeconds, bool bSafeToPlace);// 0xcfce938
	void OnUpdateScale(float Scale, out const Vector InWorldSpacePivot);// 0xcfce840
	void OnInitializeDecoPreview(const BuildingActor* NewBuildingActor, const FortDecoItemDefinition* NewDecoItemDefinition);// 0xcfce754
	void OnBounceMotionUpdate(float VectorScale);// 0xcfce6a4
	Texture* GetTextureParameterValueFromMeshComponent(MeshComponent* MeshComp, int ElementIdx, FName ParamName);// 0xcfce574
	MaterialInstanceDynamic* CreatePreviewMID(MaterialInterface* OverrideParentMaterial);// 0xcfce4c4

--------------------------------
Class: FortDecoItemDefinition.FortWeaponItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bReplacesEditedSurfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 1]
	class BuildingActor* BlueprintClass;//[Offset: 0xba0, Size: 40]
	class FortDecoPreview* PlacementPreviewClass;//[Offset: 0xbc8, Size: 40]
	bool bCanBePlacedOnEnemyBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf0, Size: 1]
	float GridSnapSizeOverride;//[Offset: 0xbf4, Size: 4]
	float RotationAngleIncrement;//[Offset: 0xbf8, Size: 4]
	float GridPlacementOffset;//[Offset: 0xbfc, Size: 4]
	byte PlacementTypeOverride;//[Offset: 0xc00, Size: 1]
	bool bForceIgnoreOverlapTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc01, Size: 1]
	bool bIgnoreCollisionWithVehicles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc01, Size: 1]
	bool bForceIgnoreBuildingOverlaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc01, Size: 1]
	bool bIgnoreCollisionWithCriticalActors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc01, Size: 1]
	bool bIgnoreCollisionWithStructuralGridActors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc01, Size: 1]
	bool bIgnoreCollisionWithFortStaticMeshActors;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc01, Size: 1]
	bool bIgnoreCollisionWithPlayers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc01, Size: 1]
	bool bDisableLocationLerpWhilePlacing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc01, Size: 1]
	bool bDisableRotationLerpWhilePlacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc02, Size: 1]
	bool bDisableScaleLerpWhilePlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc02, Size: 1]
	bool bAttachWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc02, Size: 1]
	bool bAllowPlacementOnWorldGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc02, Size: 1]
	bool bAllowPlacementOnBuildings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc02, Size: 1]
	bool bDestroySmallObjectsWhenPlaced;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc02, Size: 1]
	bool bSetOwningPlayerForSpawnedDeco;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc02, Size: 1]
	bool bSetSpawnedDecoOnPlayerTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc03, Size: 1]
	bool bConsumeWhenPlaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc04, Size: 1]
	bool bCancelToolWhenPlaced;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc04, Size: 1]
	bool bCancelAbilityOnUnequip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc04, Size: 1]
	bool bRequiresPlayerPlaceableAttachmentActors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc04, Size: 1]
	bool bUseRelativeCameraRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc04, Size: 1]
	bool bAllowStairsWhenAttachingToFloors;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc04, Size: 1]
	bool bSnapYawToHorizontalAxes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc04, Size: 1]
	bool bAllowAnyFloorPlacement;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc04, Size: 1]
	bool bRequiresPermissionToEditWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc05, Size: 1]
	bool bAutoCreateAttachmentBuilding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc05, Size: 1]
	byte AutoCreateAttachmentBuildingResourceType;//[Offset: 0xc06, Size: 1]
	int MaxPlacementDistance;//[Offset: 0xc08, Size: 4]
	BuildingEditModeMetadata*[] AutoCreateAttachmentBuildingShapes;//[Offset: 0xc10, Size: 16]
	BuildingEditModeMetadata*[] AllowedShapes;//[Offset: 0xc20, Size: 16]
	BuildingEditModeMetadata*[] AllowedPlayerBuiltShapes;//[Offset: 0xc30, Size: 16]
	bool bReplacesDecoOnAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	bool bShowPreviewOnPressHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc41, Size: 1]
	bool ShouldUseRelativeCameraRotation();// 0xcfcdd14
	bool ShouldSnapYawToHorizontalAxes();// 0xcfcdcdc
	bool ShouldIgnoreCollisionWithVehicles();// 0xcfcdca4
	bool ShouldIgnoreCollisionWithStructuralGridActors();// 0xcfcdc6c
	bool ShouldIgnoreCollisionWithPlayers();// 0xcfcdc34
	bool ShouldIgnoreCollisionWithFortStaticMeshActors();// 0xcfcdbfc
	bool ShouldIgnoreCollisionWithCriticalActors();// 0xcfcdbc4
	bool ShouldForceIgnoreOverlapTest();// 0xcfcdb8c
	bool ShouldForceIgnoreBuildingOverlaps();// 0xcfcdb54
	bool ShouldDisableScaleLerpWhilePlacing();// 0xcfcdb1c
	bool ShouldDisableRotationLerpWhilePlacing();// 0xcfcdae4
	bool ShouldDisableLocationLerpWhilePlacing();// 0xcfcdaac
	bool ShouldDestroySmallObjectsWhenPlaced();// 0xcfcda74
	bool ShouldConsumeWhenPlaced();// 0xcfcda3c
	bool ShouldCancelToolWhenPlaced();// 0xcfcda04
	bool ShouldCancelAbilityOnUnequip();// 0xcfcd9cc
	bool ShouldAttachWhenPlacing();// 0xcfcd994
	bool ShouldAllowStairsWhenAttachingToFloors();// 0xcfcd95c
	bool ShouldAllowPlacementOnWorldGeometry();// 0xcfcd924
	bool ShouldAllowPlacementOnBuildings();// 0xcfcd8ec
	bool ShouldAllowAnyFloorPlacement();// 0xcfcd8b4
	bool RequiresPlayerPlaceableAttachmentActors();// 0xcfcd87c
	bool RequiresPermissionToEditWorld();// 0xcfcd85c
	float GetRotationAngleIncrement();// 0xcfcd828
	byte GetPlacementTypeOverride();// 0xcfcd7f4
	class FortDecoPreview GetPlacementPreviewClass();// 0xcfcd7c0
	int GetMaxPlacementDistance();// 0xcfcd78c
	float GetGridSnapSizeOverride();// 0xcfcd758
	float GetGridPlacementOffset();// 0xcfcd724
	class BuildingActor GetBlueprintClass();// 0xcfcd6f0

--------------------------------
Class: FortDecoHelper.Actor.Object
	FortDecoPreview* DecoPreview;//[Offset: 0x220, Size: 8]
	class BuildingActor* PlacementActorClass;//[Offset: 0x228, Size: 8]
	FortDecoTool* DecoTool;//[Offset: 0x230, Size: 8]
	float DecoToolReach;//[Offset: 0x238, Size: 4]
	byte CurrentAttachmentType;//[Offset: 0x23c, Size: 1]
	byte CurrentPlacementType;//[Offset: 0x23d, Size: 1]
	FortDecoItemDefinition* DecoItemDefinition;//[Offset: 0x240, Size: 8]
	Vector LocationData;//[Offset: 0x248, Size: 12]
	Rotator RelativeRotationData;//[Offset: 0x260, Size: 12]
	Rotator AbsoluteRotationData;//[Offset: 0x278, Size: 12]
	float ScaleData;//[Offset: 0x290, Size: 4]
	DecoPlacementState PlacementInfo;//[Offset: 0x2a0, Size: 144]
	bool bInFallbackPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	float FallbackTinyScale;//[Offset: 0x334, Size: 4]
	byte CanPlaceState;//[Offset: 0x338, Size: 1]
	FText CustomPlacementText;//[Offset: 0x340, Size: 24]
	float DesiredRelativeRotation;//[Offset: 0x358, Size: 4]
	Vector DirectionChange;//[Offset: 0x35c, Size: 12]
	float GridSnapSize;//[Offset: 0x368, Size: 4]
	Rotator FreeFloorPlacementRelativeRotationOffset;//[Offset: 0x36c, Size: 12]
	bool IsInValidPlacementSpot(bool bTestingForVisuals);// 0xcfcecec
	bool GetInFallbackPosition();// 0xcfcecd0

--------------------------------
Class: FortDecoTool.FortWeapon.Actor.Object
	bool bButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd91, Size: 1]
	FortItemDefinition* ItemDefinition;//[Offset: 0xd98, Size: 8]
	FortDecoHelper* DecoHelper;//[Offset: 0xda0, Size: 8]
	Actor* CarriedActor;//[Offset: 0xda8, Size: 8]
	bool bPlaceCarriedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	ParticleSystem* SpawnEffect;//[Offset: 0xdb8, Size: 40]
	bool bPreventExecutionOnOwningPlayerFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	bool bIsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde2, Size: 1]
	bool TryToPlace();// 0xcfce46c
	void SetHelper(FortDecoHelper* InHelper);// 0xcfce3c4
	void SetDecoObjectPreview(const FortItemDefinition* InItemDefinition, bool bUpdatePreviewPosition);// 0xcfce2cc
	void ServerSpawnDeco(Vector Location, Rotator Rotation, BuildingSMActor* AttachedActor, byte InBuildingAttachmentType);// 0xcfce120
	void ServerCreateBuildingAndSpawnDeco(Vector_NetQuantize10 BuildingLocation, Rotator BuildingRotation, Vector_NetQuantize10 Location, Rotator Rotation, byte InBuildingAttachmentType);// 0xcfcdf08
	void OnUnEquip();// 0xcfcdeec
	void OnRep_ItemDefinition();// 0xcfcded8
	void OnRep_CarriedActor(Actor* OldCarriedActor);// 0xcfcde30
	void OnCarriedActorDestroyed(Actor* DestroyedActor);// 0xcfcdd88
	void ClientDestroyDecoPreview();// 0xcfcdd6c

--------------------------------
Class: DecoPlacementState
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	Vector RawLocation;//[Offset: 0x18, Size: 12]
	Vector Normal;//[Offset: 0x24, Size: 12]
	Quat AbsoluteRotation;//[Offset: 0x30, Size: 16]
	Vector GridLocation;//[Offset: 0x40, Size: 12]
	Vector PreviousLocation;//[Offset: 0x4c, Size: 12]
	Vector FallbackLocation;//[Offset: 0x58, Size: 12]
	Actor* LastHitActor;//[Offset: 0x64, Size: 8]
	BuildingSMActor* CurrentBuildingActorAttachment;//[Offset: 0x6c, Size: 8]
	Vector CreateBuildingLocation;//[Offset: 0x74, Size: 12]
	Rotator CreateBuildingRotation;//[Offset: 0x80, Size: 12]
	byte CanPlaceState;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: HeldObjectMovementReplicatedData
	byte RepIncrement;//[Offset: 0x0, Size: 1]
	Vector DetachLocation;//[Offset: 0x4, Size: 12]
	Rotator DetachRotation;//[Offset: 0x10, Size: 12]
	Vector MovementVelocity;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: FortPhysicsObjectComponent.GameFrameworkComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnAwakeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReceivedLargeImpulse;//[Size: 16]
	BuoyancyComponent* BuoyancyComponent;//[Offset: 0xd0, Size: 8]
	Vector PreviousLinearVelocity;//[Offset: 0xd8, Size: 12]
	Vector LinearVelocity;//[Offset: 0xe4, Size: 12]
	Vector AngularVelocity;//[Offset: 0xf0, Size: 12]
	float CustomGravityMultiplier;//[Offset: 0xfc, Size: 4]
	FortPhysicsObjectPreset* PhysicsPreset;//[Offset: 0x100, Size: 8]
	FortPhysicsObjectCollisionEffectsData* EffectsDataOverride;//[Offset: 0x108, Size: 8]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x110, Size: 8]
	bool bInitializeUsingRootComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	bool bHasSetupPhysicsObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 1]
	enum PhysicsObjectAwakeState;//[Offset: 0x1b5, Size: 1]
	PrimitiveComponent* SimulatingComponent;//[Offset: 0x1b8, Size: 8]
	static void WakeUpPhysicsObject(Actor* PhysicsObject);// 0xd11663c
	void WakeUp();// 0xd116628
	void SetSimulatePhysics(bool bSimulate);// 0xd116578
	void SetPhysicsPreset(const FortPhysicsObjectPreset* InPhysicsPreset);// 0xd1164d0
	void SetPhysicalMaterialOverride(const PhysicalMaterial* InPhysicalMaterialOverride);// 0xd116428
	void SetCollisionEffectsDataOverride(const FortPhysicsObjectCollisionEffectsData* InEffectsDataOverride);// 0xd116380
	static void PutToSleepPhysicsObject(Actor* PhysicsObject);// 0xd1162e8
	void PutToSleep();// 0xd1162d4
	void OnRep_AwakeState();// 0xb6a15b8
	bool IsAwake();// 0xd11629c
	void HandleSimulatingComponentWake(PrimitiveComponent* WakingComponent, FName BoneName);// 0xb6a14d4
	void HandleSimulatingComponentSleep(PrimitiveComponent* SleepingComponent, FName BoneName);// 0xb6a13f0
	void HandleSimulatingComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xb6a1224
	void HandleSimulatingComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xb6a1010
	PrimitiveComponent* GetSimulatingComponent();// 0xd116280
	void GetRollingData(out Actor* OutInstigator, out HitResult OutHitResult, out float LinearSpeed);// 0xd116104
	static void DeactivatePhysicsObject(Actor* PhysicsObject);// 0xd11606c
	void BroadcastPhysicsSimulationEvent(const FortPhysicsSimulationRepData EventData);// 0xd115f90
	static void ActivatePhysicsObject(Actor* PhysicsObject);// 0xd115ef8

--------------------------------
Class: BuoyancyComponent.ActorComponent.Object
	SphericalPontoon[] Pontoons;//[Offset: 0xb0, Size: 16]
	MulticastInlineDelegateProperty OnEnteredWaterDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnExitedWaterDelegate;//[Size: 16]
	BuoyancyData BuoyancyData;//[Offset: 0xe0, Size: 80]
	WaterBody*[] CurrentWaterBodies;//[Offset: 0x130, Size: 16]
	PrimitiveComponent* SimulatingComponent;//[Offset: 0x140, Size: 8]
	void OnPontoonExitedWater(out const SphericalPontoon Pontoon);// 0x7b31704
	void OnPontoonEnteredWater(out const SphericalPontoon Pontoon);// 0x7b31908
	bool IsInWaterBody();// 0x7b2f294
	void GetLastWaterSurfaceInfo(out Vector OutWaterPlaneLocation, out Vector OutWaterPlaneNormal, out Vector OutWaterSurfacePosition, out float OutWaterDepth, out int OutWaterBodyIdx, out Vector OutWaterVelocity);// 0x7b314c0

--------------------------------
Class: SphericalPontoon
	FName CenterSocket;//[Offset: 0x0, Size: 8]
	Vector RelativeLocation;//[Offset: 0x8, Size: 12]
	float Radius;//[Offset: 0x14, Size: 4]
	Vector LocalForce;//[Offset: 0x18, Size: 12]
	Vector CenterLocation;//[Offset: 0x24, Size: 12]
	Quat SocketRotation;//[Offset: 0x30, Size: 16]
	Vector Offset;//[Offset: 0x40, Size: 12]
	float WaterHeight;//[Offset: 0x50, Size: 4]
	float WaterDepth;//[Offset: 0x54, Size: 4]
	float ImmersionDepth;//[Offset: 0x58, Size: 4]
	Vector WaterPlaneLocation;//[Offset: 0x5c, Size: 12]
	Vector WaterPlaneNormal;//[Offset: 0x68, Size: 12]
	Vector WaterSurfacePosition;//[Offset: 0x74, Size: 12]
	Vector WaterVelocity;//[Offset: 0x80, Size: 12]
	int WaterBodyIndex;//[Offset: 0x8c, Size: 4]
	WaterBody* CurrentWaterBody;//[Offset: 0x208, Size: 8]

--------------------------------
Class: BuoyancyData
	SphericalPontoon[] Pontoons;//[Offset: 0x0, Size: 16]
	float BuoyancyCoefficient;//[Offset: 0x10, Size: 4]
	float BuoyancyDamp;//[Offset: 0x14, Size: 4]
	float BuoyancyDamp2;//[Offset: 0x18, Size: 4]
	float BuoyancyRampMinVelocity;//[Offset: 0x1c, Size: 4]
	float BuoyancyRampMaxVelocity;//[Offset: 0x20, Size: 4]
	float BuoyancyRampMax;//[Offset: 0x24, Size: 4]
	float MaxBuoyantForce;//[Offset: 0x28, Size: 4]
	float WaterShorePushFactor;//[Offset: 0x2c, Size: 4]
	float WaterVelocityStrength;//[Offset: 0x30, Size: 4]
	float MaxWaterForce;//[Offset: 0x34, Size: 4]
	float DragCoefficient;//[Offset: 0x38, Size: 4]
	float DragCoefficient2;//[Offset: 0x3c, Size: 4]
	float AngularDragCoefficient;//[Offset: 0x40, Size: 4]
	float MaxDragSpeed;//[Offset: 0x44, Size: 4]
	bool bApplyDragForcesInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: FortPhysicsObjectPreset.DataAsset.Object
	enum NetworkPolicy;//[Offset: 0x30, Size: 1]
	CollisionProfileName CollisionProfile;//[Offset: 0x34, Size: 8]
	float PlayerImpulseMagnitude;//[Offset: 0x3c, Size: 4]
	bool bIsAffectedByPlayerMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bCanAffectPlayerMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bImpulseOnPlayerInteraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bCanInteractWithVehicles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bCanInteractWithWater;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	float DefaultPontoonRadius;//[Offset: 0x44, Size: 4]
	Vector DefaultPontoonRelativeLocation;//[Offset: 0x48, Size: 12]
	float MinTimeInWaterToSink;//[Offset: 0x54, Size: 4]
	float MaxTimeInWaterToSink;//[Offset: 0x58, Size: 4]
	BuoyancyData BuoyancyData;//[Offset: 0x60, Size: 80]
	bool bStartActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldEnableTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bShouldImpulseOnDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bOverrideLinearDamping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bOverrideAngularDamping;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bOverrideMassKg;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bOverrideMassScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bOverrideGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	float LinearDampingOverride;//[Offset: 0xb4, Size: 4]
	float AngularDampingOverride;//[Offset: 0xb8, Size: 4]
	float MassKgOverride;//[Offset: 0xbc, Size: 4]
	float MassScaleOverride;//[Offset: 0xc0, Size: 4]
	float GravityOverride;//[Offset: 0xc4, Size: 4]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0xc8, Size: 8]
	float SleepLinearVelocity;//[Offset: 0xd0, Size: 4]
	float SleepAngularVelocity;//[Offset: 0xd4, Size: 4]
	float TimeToSleep;//[Offset: 0xd8, Size: 4]
	float TimeToDeactivate;//[Offset: 0xdc, Size: 4]
	float MinHitImpulseForNotify;//[Offset: 0xe0, Size: 4]
	float DamageImpulseMultiplier;//[Offset: 0xe4, Size: 4]
	float MinDamageToImpulse;//[Offset: 0xe8, Size: 4]
	FortPhysicsObjectCollisionEffectsData* EffectsData;//[Offset: 0xf0, Size: 8]

--------------------------------
Class: FortPhysicsObjectCollisionEffectsData.DataAsset.Object
	GameplayCueTag ImpactEffects;//[Offset: 0x30, Size: 8]
	float MinRetriggerTime;//[Offset: 0x38, Size: 4]
	float MinRetriggerDistance;//[Offset: 0x3c, Size: 4]
	float MinImpulseMagnitude;//[Offset: 0x40, Size: 4]
	float MinMediumImpulseMagnitude;//[Offset: 0x44, Size: 4]
	float MinLargeImpulseMagnitude;//[Offset: 0x48, Size: 4]
	float MaxLargeImpulseMagnitude;//[Offset: 0x4c, Size: 4]
	GameplayCueTag RollingEffects;//[Offset: 0x50, Size: 8]
	float LinearVelocityThresholdForRolling;//[Offset: 0x58, Size: 4]
	float AngularVelocityThresholdForRolling;//[Offset: 0x5c, Size: 4]
	float RollingCosThreshold;//[Offset: 0x60, Size: 4]
	float RollingBufferTime;//[Offset: 0x64, Size: 4]

--------------------------------
Class: FortPhysicsSimulationRepData
	enum EventType;//[Offset: 0x0, Size: 1]
	Vector RepAppliedVector;//[Offset: 0x4, Size: 12]
	Vector RepLocationVector;//[Offset: 0x10, Size: 12]
	FName RepBoneName;//[Offset: 0x1c, Size: 8]
	bool bRepFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: CollisionResponseRestoreState
	byte OverlapResponse;//[Offset: 0x0, Size: 1]
	byte BlockingResponse;//[Offset: 0x1, Size: 1]

--------------------------------
Class: FortPlayerControllerAthenaXPComponent.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	AthenaAccolades[] PlayerAccolades;//[Offset: 0xb0, Size: 16]
	CardSlotMedalData[] LocalPunchCardMedals;//[Offset: 0xc0, Size: 16]
	XPEventArray EventArray;//[Offset: 0xe8, Size: 288]
	XPEventEntry[] WaitingQuestXp;//[Offset: 0x208, Size: 16]
	int RestXp;//[Offset: 0x218, Size: 4]
	bool bRegisteredWithQuestManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	AthenaLevelInfo CachedLevelInfo;//[Offset: 0x2f8, Size: 36]
	AthenaSeasonItemDefinition* CachedSeasonDef;//[Offset: 0x320, Size: 8]
	int CachedSeasonMatchXpBoost;//[Offset: 0x328, Size: 4]
	int CurrentLevel;//[Offset: 0x330, Size: 4]
	int PlayerXp;//[Offset: 0x334, Size: 4]
	int TotalXpEarned;//[Offset: 0x338, Size: 4]
	int MedalBonusXP;//[Offset: 0x33c, Size: 4]
	int SurvivalXp;//[Offset: 0x340, Size: 4]
	int CombatXp;//[Offset: 0x344, Size: 4]
	int MatchXp;//[Offset: 0x348, Size: 4]
	int ChallengeXp;//[Offset: 0x34c, Size: 4]
	int64 HasBRMatchReportCompletedProfileVer;//[Offset: 0x350, Size: 8]
	int64 InMatchProfileVer;//[Offset: 0x358, Size: 8]
	FortAccoladeItemDefinition*[] MedalsEarned;//[Offset: 0x360, Size: 16]
	FortQuestItem*[] QuestsUpdated;//[Offset: 0x370, Size: 16]
	bool bUseNewQuestRewardProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	void QuestObjectiveUpdated(FortPlayerController* Controller, const FortQuestItemDefinition* QuestDef, FName BackendName, int CompletionCount, bool ObjectiveCompleted, bool QuestCompleted);// 0xd15de50
	void OnXpUpdated(int InCombatXp, int InServivalXp, int InBonusMedalXp, int InChallengeXp, int InMatchXp, int InTotalXp);// 0xd15dc74
	void OnXPEvent(out const XPEventInfo XPEvent);// 0xd15db44
	void OnRep_InMatchProfileVer();// 0xd15db30
	void OnRep_HasBRMatchReportCompletedProfileVer();// 0xd15db1c
	void OnRep_bRegisteredWithQuestManager();// 0xd15db08
	void OnProfileUpdated();// 0xd15daf4
	void OnMatchResultsReported(int64 ProfileRevision);// 0xd15da4c
	void OnInMatchProfileUpdate(int64 ProfileRevision);// 0xd15d9a4
	void InitRestedXp();// 0xd15d990
	void HighPrioXPEvent(XPEventEntry HighPrioXPEvent);// 0xd15d6d0
	void HandlePlayerLevelUp();// 0xd15d6bc
	void ClientQuestsUpdated(const FortQuestObjectiveCompletion[] PendingQuestChanges);// 0xd15d5dc
	void ClientMedalsRecived(const AthenaAccolades[] Medals);// 0xd15d4fc

--------------------------------
Class: AthenaAccolades
	FortAccoladeItemDefinition* AccoladeDef;//[Offset: 0x0, Size: 8]
	FString TemplateId;//[Offset: 0x8, Size: 16]
	int Count;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortAccoladeItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum AccoladeType;//[Offset: 0x348, Size: 1]
	enum AccoladeSubtype;//[Offset: 0x349, Size: 1]
	FortAccoladeItemDefinition*[] AccoladeToReplace;//[Offset: 0x350, Size: 16]
	Texture2D* PreviouseAccoladeSmallPreviewImage;//[Offset: 0x360, Size: 40]
	Texture2D* PreviouseAccoladeLargePreviewImage;//[Offset: 0x388, Size: 40]
	enum Priority;//[Offset: 0x3b0, Size: 1]
	ScalableFloat XpRewardAmount;//[Offset: 0x3b8, Size: 40]
	float AccoladeLevel;//[Offset: 0x3e0, Size: 4]
	bool bOnlyAllowOncePerDay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bIgnoreInAntiAddictionReducedStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	SoundCue* AwardedSoundCue;//[Offset: 0x3e8, Size: 8]
	ScalableFloat XpRewardScalarByCount;//[Offset: 0x3f0, Size: 40]
	AccoladeSecondaryXpType[] SecondaryXpValues;//[Offset: 0x418, Size: 16]
	enum GetPriority();// 0xce9d86c
	Texture2D* GetPreviousAccoladeSmallPreviewImage();// 0xce9d790
	Texture2D* GetPreviousAccoladeLargePreviewImage();// 0xce9d6b4
	SoundCue* GetAwardedSound();// 0xce9d680
	int GetAccoladeXpValueWithCountScalar(const int Count);// 0xce9d5d0
	int GetAccoladeXpValue();// 0xce9d59c
	enum GetAccoladeType();// 0xce9d580
	enum GetAccoladeSubtype();// 0xce9d564
	float GetAccoladeLevel();// 0xce9d548

--------------------------------
Class: AccoladeSecondaryXpType
	GameplayTag Type;//[Offset: 0x0, Size: 8]
	ScalableFloat XpAmount;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CardSlotMedalData
	FortAccoladeItemDefinition* AccoladeForSlot;//[Offset: 0x0, Size: 8]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	bool bLoadedFromMcp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bPunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: XPEventArray.FastArraySerializer
	XPEventEntry[] Entries;//[Offset: 0x108, Size: 16]
	FortPlayerControllerAthenaXPComponent* ParentComp;//[Offset: 0x118, Size: 8]

--------------------------------
Class: XPEventEntry.FastArraySerializerItem
	FText SimulatedXpEvent;//[Offset: 0x10, Size: 24]
	FortQuestItemDefinition* QuestDef;//[Offset: 0x28, Size: 8]
	PrimaryAssetId Accolade;//[Offset: 0x30, Size: 16]
	float Time;//[Offset: 0x40, Size: 4]
	int EventXpValue;//[Offset: 0x44, Size: 4]
	int TotalXpEarnedInMatch;//[Offset: 0x48, Size: 4]

--------------------------------
Class: XPEventInfo
	FName EventName;//[Offset: 0x0, Size: 8]
	FText SimulatedText;//[Offset: 0x8, Size: 24]
	FortQuestItemDefinition* QuestDef;//[Offset: 0x20, Size: 8]
	enum Priority;//[Offset: 0x28, Size: 1]
	int EventXpValue;//[Offset: 0x2c, Size: 4]
	int TotalXpEarnedInMatch;//[Offset: 0x30, Size: 4]
	PrimaryAssetId Accolade;//[Offset: 0x34, Size: 16]
	int RestedValuePortion;//[Offset: 0x44, Size: 4]
	int SeasonBoostValuePortion;//[Offset: 0x48, Size: 4]
	int RestedXPRemaining;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AthenaSeasonItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bXpOnlySeason;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	DataTable* SeasonXpOnlyExtendedCurve;//[Offset: 0x3c8, Size: 8]
	FortMedalsPunchCardItemDefinition* DailyPunchCard;//[Offset: 0x3d0, Size: 8]
	FortRepeatableDailiesCardItemDefinition* RepeatableDailiesCard;//[Offset: 0x3d8, Size: 8]
	int RestedXpDailyGrant;//[Offset: 0x3e0, Size: 4]
	int RestedXpMaxAccrue;//[Offset: 0x3e4, Size: 4]
	float RestedXpMultiplier;//[Offset: 0x3e8, Size: 4]
	int SeasonStartCalendarOffsetDays;//[Offset: 0x3ec, Size: 4]
	int SeasonNumber;//[Offset: 0x3f0, Size: 4]
	int NumSeasonLevels;//[Offset: 0x3f4, Size: 4]
	DataTable* SeasonXpCurve;//[Offset: 0x3f8, Size: 8]
	FString SeasonStorefront;//[Offset: 0x400, Size: 16]
	FString[] BattlePassOfferIds;//[Offset: 0x410, Size: 16]
	FString[] BattlePassLevelOfferIDs;//[Offset: 0x420, Size: 16]
	FString BattlePassLevelBundleOfferID;//[Offset: 0x430, Size: 16]
	PrimaryAssetId[] FreeTokenItemPrimaryAssetIds;//[Offset: 0x440, Size: 16]
	TrackDynamicBackground[] TrackPageBackgrounds;//[Offset: 0x450, Size: 16]
	AthenaRewardSchedule SeasonXpScheduleFree;//[Offset: 0x460, Size: 16]
	AthenaSeasonBannerLevelSchedule SeasonBannerSchedule;//[Offset: 0x470, Size: 16]
	FortChallengeBundleItemDefinition* SeasonalGlyphChallengeBundle;//[Offset: 0x480, Size: 8]
	FString GlyphTokenTemplateId;//[Offset: 0x488, Size: 16]
	DataTable* SeasonalGlyphRewards;//[Offset: 0x498, Size: 8]
	FortChallengeBundleScheduleDefinition* ChallengeSchedulePaid;//[Offset: 0x4a0, Size: 8]
	FortChallengeBundleScheduleDefinition*[] ChallengeSchedulesAlwaysShown;//[Offset: 0x4a8, Size: 16]
	AthenaRewardScheduleLevel SeasonGrantsToEveryone;//[Offset: 0x4b8, Size: 16]
	AthenaRewardScheduleLevel SeasonFirstWinRewards;//[Offset: 0x4c8, Size: 16]
	AthenaRewardScheduleLevel BattleStarSubstitutionReward;//[Offset: 0x4d8, Size: 16]
	GameplayTag FreeSeasonItemContentTag;//[Offset: 0x4e8, Size: 8]
	GameplayTag SeasonGrantsToEveryoneItemContentTag;//[Offset: 0x4f0, Size: 8]
	GameplayTag SeasonFirstWinItemContentTag;//[Offset: 0x4f8, Size: 8]
	XpDisplayConversion[] XpDisplayOverride;//[Offset: 0x500, Size: 16]
	FortItemDefinition* XpItemDef;//[Offset: 0x510, Size: 40]
	FortItemDefinition*[] ExpiringRewardTypes;//[Offset: 0x538, Size: 16]
	FortItemDefinition*[] TokensToRemoveAtSeasonEnd;//[Offset: 0x548, Size: 16]
	AthenaMidSeasonUpdate[] MidSeasonUpdates;//[Offset: 0x558, Size: 16]
	bool bRemoveAllDailyQuestsAtSeasonEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	FortTokenType* NoBattleBundleToken;//[Offset: 0x570, Size: 40]
	FortCollectionsDataTable* CollectionsDataTable;//[Offset: 0x598, Size: 40]
	DataTable* NPCConversationQuests;//[Offset: 0x5c0, Size: 8]
	GameplayTag[] FirstTimeTrackedBitFlags;//[Offset: 0x5c8, Size: 16]
	AthenaSeasonItemData*[] AdditionalSeasonData;//[Offset: 0x5d8, Size: 16]
	FString BattlePassOfferId;//[Offset: 0x5e8, Size: 16]
	FString BattlePassLevelOfferID;//[Offset: 0x5f8, Size: 16]
	AthenaRewardSchedule BookXpScheduleFree;//[Offset: 0x608, Size: 16]
	GameplayTag BattlePassFreeItemContentTag;//[Offset: 0x618, Size: 8]
	AthenaRewardSchedule BookXpSchedulePaid;//[Offset: 0x620, Size: 16]
	GameplayTag BattlePassPaidItemContentTag;//[Offset: 0x630, Size: 8]
	AthenaRewardSchedule AdditionalBookSchedule;//[Offset: 0x638, Size: 16]
	GameplayTag BattlePassAdditionalItemContentTag;//[Offset: 0x648, Size: 8]
	int[] FreeLevelsThatNavigateToBattlePass;//[Offset: 0x650, Size: 16]
	TrackCategory[] TrackCategories;//[Offset: 0x660, Size: 16]
	DataTable* BookXpCurve;//[Offset: 0x670, Size: 8]
	int NumBookLevels;//[Offset: 0x678, Size: 4]
	int NumAdditionalBookLevels;//[Offset: 0x67c, Size: 4]

--------------------------------
Class: FortMedalsPunchCardItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	int NumPunches;//[Offset: 0x348, Size: 4]
	bool bAllowMedalReplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	ScalableFloat PunchCardXpRewards;//[Offset: 0x350, Size: 40]
	ScalableFloat PunchCardRestXp;//[Offset: 0x378, Size: 40]

--------------------------------
Class: FortRepeatableDailiesCardItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FString GranterQuestPack;//[Offset: 0x3c0, Size: 16]
	int FillCount;//[Offset: 0x3d0, Size: 4]
	ScalableFloat ReplacedRestedXpValue;//[Offset: 0x3d8, Size: 40]
	ScalableFloat ReducedXPReward;//[Offset: 0x400, Size: 40]
	ScalableFloat ReplacedRestedXpValueScalarForMissedDays;//[Offset: 0x428, Size: 40]
	FortAthenaRewardEventGraphPurchaseToken* RequiredItemDef;//[Offset: 0x450, Size: 40]
	RepeatableDailiesCardDateOverride[] DateOverrides;//[Offset: 0x478, Size: 16]

--------------------------------
Class: FortAthenaRewardEventGraphPurchaseToken.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum ProfileType;//[Offset: 0x3c0, Size: 1]
	AthenaRewardEventGraph* RewardEventGraphDefinition;//[Offset: 0x3c8, Size: 40]
	FortRepeatableDailiesCardItemDefinition* RepeatableDailiesCardItemDefinition;//[Offset: 0x3f0, Size: 40]

--------------------------------
Class: AthenaRewardEventGraph.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FString CalendarEventName;//[Offset: 0x348, Size: 16]
	FString CalendarEventType;//[Offset: 0x358, Size: 16]
	FortAthenaRewardEventGraphPurchaseToken* PurchaseToken;//[Offset: 0x368, Size: 40]
	RewardKeyData[] RewardKey;//[Offset: 0x390, Size: 16]
	bool bRewardKeysInternally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	RewardNode[] Rewards;//[Offset: 0x3a8, Size: 16]
	FortItemDefinition*[] ItemsToCleanUpUponRemoval;//[Offset: 0x3b8, Size: 16]
	AthenaRewardEventGraphCosmeticItemDefinition* CosmeticRandomnes;//[Offset: 0x3c8, Size: 8]

--------------------------------
Class: RewardKeyData
	FortTokenType* Key;//[Offset: 0x0, Size: 40]
	GameplayTag NodeTagMatchReq;//[Offset: 0x28, Size: 8]
	int RewardKeyMaxCount;//[Offset: 0x30, Size: 4]
	int RewardKeyInitialCount;//[Offset: 0x34, Size: 4]
	FortAccountItemDefinition* UnlockingItemDef;//[Offset: 0x38, Size: 40]
	bool bUseUnlockingItemDisplayName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: FortTokenType.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class FortScriptedAction* ScriptedAction;//[Offset: 0x3c0, Size: 40]
	SlateColor NodeTintColour;//[Offset: 0x3e8, Size: 40]
	bool bPercentageRepresentation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	enum ProfileType;//[Offset: 0x411, Size: 1]
	class FortItemPreviewActor* ItemPreviewActorClass;//[Offset: 0x418, Size: 40]

--------------------------------
Class: FortItemPreviewActor.Actor.Object
	MaterialInstance* SpecialEventMaterial;//[Offset: 0x228, Size: 8]
	CharacterDisplaySettings CurrentDisplayInfo;//[Offset: 0x230, Size: 136]
	SceneComponent* ItemPreviewRootComponent;//[Offset: 0x2b8, Size: 8]
	SceneComponent* UserRotationComponent;//[Offset: 0x2c0, Size: 8]
	float ZoomLevel;//[Offset: 0x2c8, Size: 4]
	void OnSetFloorMaterial(MaterialInterface* InMaterialInstance);// 0xbbc0600
	void OnPreviewVisualsSpawned();// 0xbbc0600
	void OnCurrentVisualsCleanedUp();// 0xbbc0600
	void OnAllLODStreamingComplete();// 0xbbc0600
	bool IsSceneTransitioning();// 0xd04ca80
	bool ArePreviewVisualsReady();// 0xd04ca40

--------------------------------
Class: CharacterDisplaySettings
	FortAccountItemDefinition* PrimaryItem;//[Offset: 0x8, Size: 8]

--------------------------------
Class: RewardNode
	FortTokenType* RequiredKey;//[Offset: 0x0, Size: 40]
	int KeyCount;//[Offset: 0x28, Size: 4]
	int MinKeyCountToUnlock;//[Offset: 0x2c, Size: 4]
	int DaysFromEventStartToUnlock;//[Offset: 0x30, Size: 4]
	GameplayTagContainer ChildNodes;//[Offset: 0x38, Size: 32]
	GameplayTagContainer ParentNodes;//[Offset: 0x58, Size: 32]
	GameplayTag NodeTag;//[Offset: 0x78, Size: 8]
	bool bGrantedAtGraphDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bRequiredOwnership;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	AthenaRewardItemReference[] Rewards;//[Offset: 0x88, Size: 16]
	FString RewardOperation;//[Offset: 0x98, Size: 16]
	FortItemDefinition* RewardContextItem;//[Offset: 0xa8, Size: 40]
	CosmeticVariantInfo[] HardDefinedVisuals;//[Offset: 0xd0, Size: 16]

--------------------------------
Class: AthenaRewardItemReference
	FortItemDefinition* ItemDefinition;//[Offset: 0x0, Size: 40]
	FString TemplateId;//[Offset: 0x28, Size: 16]
	int Quantity;//[Offset: 0x38, Size: 4]
	ChallengeGiftBoxData RewardGiftBox;//[Offset: 0x40, Size: 56]
	bool IsChaseReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	enum RewardType;//[Offset: 0x79, Size: 1]
	enum RewardVisualImportanceType;//[Offset: 0x7a, Size: 1]

--------------------------------
Class: ChallengeGiftBoxData
	FortGiftBoxItemDefinition* GiftBoxToUse;//[Offset: 0x0, Size: 40]
	FortGiftBoxFortmatData[] GiftBoxFormatData;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortGiftBoxItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	enum RestrictToSubgame;//[Offset: 0x3c0, Size: 1]
	enum GiftWrapType;//[Offset: 0x3c1, Size: 1]
	FText ViolatorText;//[Offset: 0x3c8, Size: 24]
	FText DefaultHeaderText;//[Offset: 0x3e0, Size: 24]
	FText SubHeaderText;//[Offset: 0x3f8, Size: 24]
	FText DefaultBodyText;//[Offset: 0x410, Size: 24]
	Object* ItemDisplayAsset;//[Offset: 0x428, Size: 40]
	int SortPriority;//[Offset: 0x450, Size: 4]
	bool bReuseExistingBoxIfPossible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool bOverrideBackgroundMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	FText BackgroundMessageText;//[Offset: 0x458, Size: 24]
	class UserWidget* GiftBoxPreMessageWidgetRef;//[Offset: 0x470, Size: 40]
	class UserWidget* GiftBoxHeaderSubWidgetRef;//[Offset: 0x498, Size: 40]
	class UserWidget* CustomLeftsideContent;//[Offset: 0x4c0, Size: 40]
	bool TryLoadPreMessageWidgetClass(out class UserWidget OutWidgetClass);// 0xd020c28
	bool TryLoadHeaderSubWidgetClass(out class UserWidget OutWidgetClass);// 0xd020b68
	bool HasPreMessageWidget();// 0xd020b44
	bool HasHeaderSubWidget();// 0xd020b20

--------------------------------
Class: FortGiftBoxFortmatData
	FString StringAssetType;//[Offset: 0x0, Size: 16]
	FString StringData;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AthenaRewardEventGraphCosmeticItemDefinition.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: RepeatableDailiesCardDateOverride
	FortQuestItemDefinition* Quest;//[Offset: 0x0, Size: 40]
	DateTime Start;//[Offset: 0x28, Size: 8]
	DateTime End;//[Offset: 0x30, Size: 8]

--------------------------------
Class: TrackDynamicBackground
	Texture2D* BackgroundSubstance;//[Offset: 0x0, Size: 40]
	LinearColor PrimaryColor;//[Offset: 0x28, Size: 16]
	LinearColor SecondaryColor;//[Offset: 0x38, Size: 16]
	LinearColor TertiaryColor;//[Offset: 0x48, Size: 16]
	bool bIsSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bIsFoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	int MinimalDiscoveryLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: AthenaRewardSchedule
	AthenaRewardScheduleLevel[] Levels;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AthenaRewardScheduleLevel
	AthenaRewardItemReference[] Rewards;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AthenaSeasonBannerLevelSchedule
	AthenaSeasonBannerLevel[] Levels;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AthenaSeasonBannerLevel
	Texture2D* SurroundImage;//[Offset: 0x0, Size: 40]
	MaterialInterface* BannerMaterial;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortChallengeBundleItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortChallengeBundleQuestEntry[] QuestInfos;//[Offset: 0x3c0, Size: 16]
	FortQuestItemDefinition*[] SuppressedQuestDefs;//[Offset: 0x3d0, Size: 16]
	FString CalendarEventTag;//[Offset: 0x3e0, Size: 16]
	FString CalendarEventName;//[Offset: 0x3f0, Size: 16]
	FortChallengeBundleRewards[] BundleCompletionRewards;//[Offset: 0x400, Size: 16]
	FortChallengeBundleLevel[] BundleLevelRewards;//[Offset: 0x410, Size: 16]
	FortChallengeBundleSpecialOffer[] SpecialOffers;//[Offset: 0x420, Size: 16]
	FortQuestItemDefinition*[] CareerQuestBitShifts;//[Offset: 0x430, Size: 16]
	FortChallengeSetStyle DisplayStyle;//[Offset: 0x440, Size: 160]
	AthenaRewardItemReference OverrideRewardItem;//[Offset: 0x4e0, Size: 128]
	AthenaCharacterItemDefinition* CharacterOverrideForRewardPreviews;//[Offset: 0x560, Size: 8]
	int MaxChainDepth;//[Offset: 0x568, Size: 4]
	Material* BundleHidenImageMaterial;//[Offset: 0x570, Size: 40]
	FText UniqueLockedMessage;//[Offset: 0x598, Size: 24]
	bool bHideFromMapChallenges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bHideFromMapChallengeUntilBundleExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b1, Size: 1]
	bool bHideRewardFromMapChallenges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 1]
	bool IsLinearChainQuest(const FortQuestItemDefinition* InQuestDef, out int ChainLength, out int ChainPos);// 0xcf46720
	int GetTotalNumberOfQuests();// 0xcf466ec
	int GetRewardCompletionThreshold();// 0xcf466b8
	void GetQuests(FortQuestManager* QuestManager, out const FortQuestItem*[] GrantedQuests, out FortQuestItem*[] OwnedQuests, out FortQuestItemDefinition*[] UnownedQuests, bool bGetAllQuestsInChain);// 0xcf464ac
	int GetNumVisibleQuests();// 0xcf46478
	int GetNumQuests();// 0xcf46444
	FString GetHexCodeForStyleColor(enum DesiredColor);// 0xcf46358
	FString GetEventName();// 0xcf462d4
	FortChallengeSetStyle GetDisplayStyle();// 0xcf461a8
	AthenaRewardItemReference[] GetCompletionRewards();// 0xcf46138
	FString GetCalendarEventName();// 0xcf460b4
	int GetBundleLevelForQuest(const FortQuestItemDefinition* QuestDef);// 0xcf46004

--------------------------------
Class: FortChallengeBundleQuestEntry
	FortQuestItemDefinition* QuestDefinition;//[Offset: 0x0, Size: 40]
	enum QuestUnlockType;//[Offset: 0x28, Size: 1]
	bool bStartActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bIsPrerequisite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	int UnlockValue;//[Offset: 0x2c, Size: 4]
	ChallengeGiftBoxData RewardGiftBox;//[Offset: 0x30, Size: 56]
	FortItemQuantityPair MenuOverrideRewardPreview;//[Offset: 0x68, Size: 20]

--------------------------------
Class: FortChallengeBundleRewards
	int CompletionCount;//[Offset: 0x0, Size: 4]
	bool bBundlePrestige;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	AthenaRewardItemReference[] Rewards;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortChallengeBundleLevel
	FortChallengeBundleLevelReward[] BundleLevelRewardEntries;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortChallengeBundleLevelReward
	AthenaRewardItemReference RewardItem;//[Offset: 0x0, Size: 128]
	int NumObjectivesNeeded;//[Offset: 0x80, Size: 4]

--------------------------------
Class: FortChallengeBundleSpecialOffer
	FString Storefront;//[Offset: 0x0, Size: 16]
	FText RichText;//[Offset: 0x10, Size: 24]
	Material* OfferImage;//[Offset: 0x28, Size: 40]

--------------------------------
Class: FortChallengeSetStyle
	LinearColor PrimaryColor;//[Offset: 0x0, Size: 16]
	LinearColor SecondaryColor;//[Offset: 0x10, Size: 16]
	LinearColor AccentColor;//[Offset: 0x20, Size: 16]
	LinearColor Context_LimitedTimeColor;//[Offset: 0x30, Size: 16]
	LinearColor Context_BaseColor;//[Offset: 0x40, Size: 16]
	Object* DisplayImage;//[Offset: 0x50, Size: 40]
	Object* CustomBackground;//[Offset: 0x78, Size: 40]

--------------------------------
Class: FortQuestManager.Object
	MulticastInlineDelegateProperty OnQuestsUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnQuestsCompleted;//[Size: 16]
	MulticastInlineDelegateProperty OnQuestsGranted;//[Size: 16]
	MulticastInlineDelegateProperty OnQuestRewardClaimed;//[Size: 16]
	MulticastInlineDelegateProperty OnQuestSeen;//[Size: 16]
	MulticastInlineDelegateProperty OnNoQuestRewardsToClaim;//[Size: 16]
	MulticastInlineDelegateProperty OnPinnedQuestsChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnDailyQuestRerolled;//[Size: 16]
	MulticastInlineDelegateProperty OnDisplayDynamicQuestUpdate;//[Size: 16]
	MulticastInlineDelegateProperty OnTransientQuestStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnTransientQuestRemoved;//[Size: 16]
	MulticastInlineDelegateProperty OnUrgentTransientQuestStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnUrgentTransientQuestCompleted;//[Size: 16]
	MulticastInlineDelegateProperty OnUrgentTransientQuestFailed;//[Size: 16]
	MulticastInlineDelegateProperty OnObjectiveStatXPGranted;//[Size: 16]
	MulticastInlineDelegateProperty OnXpValueDeltasUpdate;//[Size: 16]
	FortQuestItem*[] CurrentQuests;//[Offset: 0x298, Size: 16]
	FortQuestItem*[] CurrentFeats;//[Offset: 0x2a8, Size: 16]
	FortQuestItem*[] ActiveTransientQuests;//[Offset: 0x2b8, Size: 16]
	FortQuestItem*[] CompletedTransientQuests;//[Offset: 0x2c8, Size: 16]
	FortQuestItem*[] ActiveNPCInteractableQuests;//[Offset: 0x2d8, Size: 16]
	FortHardcoreModifierItem*[] CurrentHardcoreModifiers;//[Offset: 0x2e8, Size: 16]
	FortHardcoreModifierItem*[] HardcoreModifiersToUse;//[Offset: 0x2f8, Size: 16]
	GameplayTagContainer CurrentHardcoreModifierSrcTags;//[Offset: 0x308, Size: 32]
	FortAccoladeItem*[] CurrentAccolades;//[Offset: 0x328, Size: 16]
	FortQuestItem*[] TrackedTempQuestItems;//[Offset: 0x338, Size: 16]
	<FName,FortQuestCategory*> CurrentCategorizedQuestsMap;//[Offset: 0x348, Size: 80]
	FortQuestObjectiveCompletion[] PendingChanges;//[Offset: 0x398, Size: 16]
	FortMcpProfileSubgame* BoundProfile;//[Offset: 0x420, Size: 8]
	FortAbilitySetHandle[] EquippedQuestAbilities;//[Offset: 0x478, Size: 16]
	DataTable*[] EventQuestDataTables;//[Offset: 0xb10, Size: 16]
	float DamageEventFlushDelaySeconds;//[Offset: 0xb88, Size: 4]
	float BuildingEventFlushDelaySeconds;//[Offset: 0xb8c, Size: 4]
	bool bDoQuestStateLogging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	bool bBlockBRXPWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 1]
	bool bFlatCurrentQuestsSearch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 1]
	bool bBlockQuestCompletion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb93, Size: 1]
	bool bBlockAthenaQuestCompletion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 1]
	bool bBlockStWQuestCompletion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb95, Size: 1]
	bool bBlockXPEventsInAnyAAState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb96, Size: 1]
	bool bBlockAthenaQuestCompletionInCompetitive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb97, Size: 1]
	bool bBlockPartyAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 1]
	bool bUseSquadForPartyAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99, Size: 1]
	bool bBlockAthenaFeatsCompletionInCompetitive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9a, Size: 1]
	FString[] BackendObjectiveNamesToBlock;//[Offset: 0xba0, Size: 16]
	FString[] QuestTemplatesToBlock;//[Offset: 0xbb0, Size: 16]
	bool bAllowAthenaMCPNotifyOnComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 1]
	enum QuestMapMode;//[Offset: 0xbc1, Size: 1]
	<FortFeatItemDefinition*> FeatsCompletedThisSession;//[Offset: 0xc50, Size: 80]
	bool bEnableObjectiveConditionHandling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 1]
	FortDisplayQuestUpdateData[] DisplayQuestUpdateData;//[Offset: 0xcb8, Size: 16]
	bool SetQuestPinned(FortQuestItem* Quest, bool bEnabled);// 0xd1b6c60
	void SetQuestMapMode(enum NewQuestMapMode);// 0xd1b6bb8
	void SendCustomStatEventDirect(FName ObjectiveBackendName, FortQuestItem* QuestItem, int Count, bool bForceFlush);// 0xd1b6a50
	void SendCustomStatEvent(DataTableRowHandle ObjectiveStat, int Count, bool bForceFlush);// 0xd1b6924
	void SendComplexCustomStatEvent(Object* TargetObject, GameplayTagContainer AdditionalSourceTags, GameplayTagContainer TargetTags, out bool QuestActive, out bool QuestCompleted, int Count);// 0xd1b6680
	void RerollDailyQuest(const FortQuestItem* QuestToDiscard);// 0xd1b65d8
	FString PopNextPendingFeatureUnlock();// 0xd1b6538
	void MarkQuestsSeen(bool bOnlyMarkPendingSeenQuests);// 0xd1b6488
	void MarkQuestSeen(FortQuestItem* Quest);// 0xd1b63e0
	void ListChallenges(FString Filter);// 0xd1b62e4
	bool IsThisAnEventQuest(const FortQuestItemDefinition* QuestDefinition, FString MatchQuestEventFlag, DataTable* QuestTable);// 0xd1b6150
	bool IsQuestObjectiveActive(FName ObjectiveName);// 0xd1b609c
	bool IsQuestInProgress(const FortQuestItemDefinition* Definition);// 0xd1b5fe8
	bool IsPendingFeatureUnlockNotification();// 0xd1b5fb0
	bool IsObjectiveWithNameInProgress(const FortQuestItemDefinition* Definition, FName BackendName);// 0xd1b5ec0
	bool IsObjectiveInProgress(const FortQuestItemDefinition* Definition, DataTableRowHandle ObjectiveStatHandle);// 0xd1b5dcc
	bool IsMainQuest(FortQuestItem* Quest);// 0xd1b5d18
	void InitializeQuestAbilities(Pawn* PlayerPawn);// 0xd1b5c70
	bool HasUnseenQuests();// 0xd1b5c38
	bool HasUnsavedPrimaryMissionProgress();// 0xd1b5c00
	bool HasQuestBeenSeenLocally(const FortQuestItem* Quest);// 0xd1b5b4c
	bool HasCompletedTransientQuest(const FortQuestItemDefinition* Definition);// 0xd1b5a98
	bool HasCompletedQuest(const FortQuestItemDefinition* Definition);// 0xd1b59e4
	bool HasCompletedObjectiveWithName(const FortQuestItemDefinition* Definition, FName BackendName);// 0xd1b58f4
	bool HasCompletedObjective(const FortQuestItemDefinition* Definition, DataTableRowHandle ObjectiveStatHandle);// 0xd1b5800
	void HandleQuestUpdated(FortPlayerController* QuestOwner, const FortQuestItemDefinition* QuestDef, FName BackendName, int CompletionCount, int DeltaChange, const FortPlayerState* AssistingPlayer, bool ObjectiveCompleted, bool QuestCompleted);// 0xd1b558c
	void GrantFirstDailyQuest();// 0xd1b5578
	void GiveAthenaXp(float XpAmount);// 0xd1b54d0
	int GetUnseenQuestCount();// 0xd1b549c
	void GetSourceAndContextTags(out GameplayTagContainer OutSourceTags, out GameplayTagContainer OutContextTags);// 0xd1b5360
	int GetRemainingQuestPoolRerolls(FString PoolName);// 0xd1b52a4
	int GetRemainingDailyQuestRerolls();// 0xd1b5270
	FortQuestItem* GetQuestWithDefinition(const FortQuestItemDefinition* Definition);// 0xd1b51c0
	void GetQuestsFromCategory(FortQuestCategory* Category, out FortQuestItem*[] QuestList);// 0xd1b50c0
	enum GetQuestMapMode();// 0xd1b508c
	FortQuestCategory* GetQuestCategory(FortQuestItem* QuestItem);// 0xd1b4fdc
	FortPlayerController* GetPlayerControllerBP();// 0xd1b4fa8
	void GetPinnedQuests(out FortQuestItem*[] OutPinnedQuestItems);// 0xd1b4ee8
	int GetObjectiveCompletionCount(const FortQuestItemDefinition* Definition, FName BackendName);// 0xd1b4dfc
	int GetNumCompletedObjectives(const FortQuestItemDefinition* Definition);// 0xd1b4d4c
	FortQuestItem* GetNextUnseenQuest(enum QuestType);// 0xd1b4c9c
	FortQuestItem* GetMainQuest();// 0xd1b4c68
	void GetCurrentQuestsCategories(out FortQuestCategory*[] Categories);// 0xd1b4ba8
	void GetCurrentQuests(out FortQuestItem*[] OutCurrentQuests);// 0xd1b4ae8
	void GetCompletedQuests(out FortQuestItem*[] OutCompletedQuests);// 0xd1b4a28
	FortQuestItem* GetBroadcasterQuestWithOpenWindow();// 0xd1b49f4
	void GetBattlePassQuestsInProgress(const int MaxCount, const FortItemDefinition* RequiredReward, out FortQuestItem*[] OutQuests, out bool bAllQuestsComplete);// 0xd1b4864
	void ForceTriggerQuestsUpdated();// 0xd1b4850
	void ForceCompleteAccolades(float TimerDelay, bool bSkipAcknowledgements);// 0xd1b4760
	void EnableQuestStateLogging();// 0xd1b474c
	void DisableQuestStateLogging();// 0xd1b4738
	void ClaimSelectedQuestReward(const FortQuestItem* Quest, int RewardIndex);// 0xd1b4650
	void ClaimQuestReward(const FortQuestItem* Quest);// 0xd1b45a8
	void CheckObjectiveStatUsage();// 0xd1b4594
	bool CanProgressQuestInCurrentZone(const FortQuestItemDefinition* QuestItemDefinition);// 0xd1b44e0
	void AppendTemporaryRelevancyTags(out const GameplayTagContainer SourceTags, out const GameplayTagContainer ContextTags, out const GameplayTagContainer TargetTags);// 0xd1b4330

--------------------------------
Class: FortHardcoreModifierItem.FortAccountItem.FortPersistableItem.FortItem.Object
	bool is_enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 1]

--------------------------------
Class: FortAccoladeItem.FortAccountItem.FortPersistableItem.FortItem.Object
	int last_earned_day;//[Offset: 0xec, Size: 4]
	int earned_count;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: FortQuestCategory.Object
	FText Name;//[Offset: 0x28, Size: 24]
	FortQuestItem*[] CurrentQuests;//[Offset: 0x40, Size: 16]
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	FortCategoryTableRow CategoryInfo;//[Offset: 0x58, Size: 40]
	bool HasUnseenQuests();// 0xd1b3304
	int GetUnseenQuestCount();// 0xd1b32d0

--------------------------------
Class: FortCategoryTableRow.TableRowBase
	FText Name;//[Offset: 0x8, Size: 24]
	int SortPriority;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortFeatItemDefinition.FortQuestItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: FortDisplayQuestUpdateData
	FortUpdatedObjectiveStat ObjectiveUpdated;//[Offset: 0x0, Size: 32]
	FortPlayerState* QuestOwner;//[Offset: 0x20, Size: 8]
	FortPlayerState* AssistingPlayer;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortUpdatedObjectiveStat
	FortQuestItemDefinition* Quest;//[Offset: 0x0, Size: 8]
	FName BackendName;//[Offset: 0x8, Size: 8]
	int StatValue;//[Offset: 0x10, Size: 4]
	int ShadowStatValue;//[Offset: 0x14, Size: 4]
	int StatDelta;//[Offset: 0x18, Size: 4]
	int CurrentStage;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FortChallengeBundleScheduleDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortChallengeBundleScheduleEntry[] ScheduleEntries;//[Offset: 0x3c0, Size: 16]
	FString CalendarEventTag;//[Offset: 0x3d0, Size: 16]
	FString CalendarEventName;//[Offset: 0x3e0, Size: 16]
	GameplayTag RequiredMcpContextTags;//[Offset: 0x3f0, Size: 8]
	ChallengeGiftBoxData GrantedBundleGiftBox;//[Offset: 0x3f8, Size: 56]
	bool CleanUpOnBundleCompletion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	GameplayTag CategoryTag;//[Offset: 0x434, Size: 8]
	GameplayTag ChallengeDetailsTag;//[Offset: 0x43c, Size: 8]
	bool bHideInLegacyAllChallengesEscapeMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	GameplayTag SourceTag;//[Offset: 0x448, Size: 8]
	bool bSeperateEachBundleForDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	int SortPriority;//[Offset: 0x454, Size: 4]
	FText UnlockTextOverride;//[Offset: 0x458, Size: 24]
	class UserWidget[] CustomChallengeHeaderExtensions;//[Offset: 0x470, Size: 16]
	bool bHideCountdownFromMapChallenges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	int GetSortPriority();// 0xcf481e8
	int GetNumBundles();// 0xcf481b4
	FString GetEventName();// 0xcf48114
	FString GetCalendarEventName();// 0xcf48074
	FortChallengeBundleItemDefinition*[] GetBundleDefinitions();// 0xcf47fd4
	bool DoesChallengeBundleScheduleExpire();// 0xcf47f9c

--------------------------------
Class: FortChallengeBundleScheduleEntry
	FortChallengeBundleItemDefinition* ChallengeBundle;//[Offset: 0x0, Size: 40]
	enum UnlockType;//[Offset: 0x28, Size: 1]
	int UnlockValue;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: XpDisplayConversion
	FortItemDefinition* XpItemDef;//[Offset: 0x0, Size: 40]
	int ValueToReplaceAt;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AthenaMidSeasonUpdate
	int SeasonLevelRequirement;//[Offset: 0x0, Size: 4]
	int BookLevelRequirement;//[Offset: 0x4, Size: 4]
	bool SeasonPurchasedRequirement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AthenaMidSeasonUpdateItemReq[] ItemRequirements;//[Offset: 0x10, Size: 16]
	AthenaMidSeasonUpdateQuestReq[] QuestRequirements;//[Offset: 0x20, Size: 16]
	AthenaRewardScheduleLevel Grants;//[Offset: 0x30, Size: 16]
	FortItemDefinition*[] Removals;//[Offset: 0x40, Size: 16]

--------------------------------
Class: AthenaMidSeasonUpdateItemReq
	FortItemDefinition* Item;//[Offset: 0x0, Size: 40]
	int Count;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AthenaMidSeasonUpdateQuestReq
	FortQuestItemDefinition* Quest;//[Offset: 0x0, Size: 40]
	bool bCompletionRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: FortCollectionsDataTable.DataAsset.Object
	FortCollectionDataMapping[] Collections;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortCollectionDataMapping
	FString CollectionType;//[Offset: 0x0, Size: 16]
	bool bEnsureAllTaggedItemsAreInTheCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FortCollectionData* Collection;//[Offset: 0x18, Size: 40]

--------------------------------
Class: FortCollectionData.DataAsset.Object
	FortCollectionDataEntry*[] Entries;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortCollectionDataEntry.Object

--------------------------------
Class: AthenaSeasonItemData.Object

--------------------------------
Class: TrackCategory
	Object* CategoryIcon;//[Offset: 0x0, Size: 40]
	FText CategoryName;//[Offset: 0x28, Size: 24]
	int CategoryStartingLevel;//[Offset: 0x40, Size: 4]

--------------------------------
Class: FortControllerComponent_MapDiscoverability.FortControllerComponent_HasCoupledWidgets.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	MaterialParameterCollection* DiscoverabilityMPC;//[Offset: 0xd8, Size: 8]
	ScalableFloat DiscoveryUnmaskDuration;//[Offset: 0xe0, Size: 40]
	bool bFlipYInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float DiscoveryUnmaskUpdateRate;//[Offset: 0x10c, Size: 4]
	TextureRenderTarget2D* DiscoveryRenderTarget;//[Offset: 0x110, Size: 40]
	MaterialInterface* StencilMaterial;//[Offset: 0x138, Size: 40]
	PoiDiscoverabilityDataArray DiscoveredData;//[Offset: 0x160, Size: 288]
	MaterialInstanceDynamic* StencilMID;//[Offset: 0x360, Size: 8]
	void UndiscoverAllPois();// 0xcf9a930
	void UndiscoverAllLandmarks();// 0xcf9a91c
	void UndiscoverAllAreas();// 0xcf9a908
	void TeleportToAllLocations(float DelayBetween);// 0xcf9a860
	void SetDiscoverStatusByTag(FString Tag, bool bDiscovered);// 0xcf9a764
	void PlaylistLoadedStub(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xcf9a654
	void EventsReadyStub(out const FString[] Events);// 0xcf9a53c
	void DiscoverAllPois();// 0xcf9a528
	void DiscoverAllLandmarks();// 0xcf9a514
	void DiscoverAllAreas();// 0xcf9a500
	void CancelTeleportToAllLocations();// 0xcf9a4ec

--------------------------------
Class: FortControllerComponent_HasCoupledWidgets.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	ComponentWidgetPairings[] SpawnableWidgets;//[Offset: 0xb0, Size: 16]
	void MakeComponentWidgetsOnAutonomous();// 0xcf963cc

--------------------------------
Class: ComponentWidgetPairings
	enum Slot;//[Offset: 0x0, Size: 1]
	class UserWidget* Class;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PoiDiscoverabilityDataArray.FastArraySerializer
	PoiDiscoverabilityDataEntry[] Entries;//[Offset: 0x108, Size: 16]
	FortControllerComponent_MapDiscoverability* Owner;//[Offset: 0x118, Size: 8]

--------------------------------
Class: PoiDiscoverabilityDataEntry.FastArraySerializerItem
	GameplayTag POITag;//[Offset: 0xc, Size: 8]
	bool bDiscovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bWasInitiallyDiscovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	byte VisitCounter;//[Offset: 0x16, Size: 1]

--------------------------------
Class: FortControllerComponent_SkydiveFeedback.FortControllerComponent_HasCoupledWidgets.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	MatineeCameraShake* SkydiveCamShake;//[Offset: 0x118, Size: 8]
	class MatineeCameraShake* SkydiveCamShakeClass;//[Offset: 0x120, Size: 8]
	float DropSpeedForMinShakeMultiplier;//[Offset: 0x128, Size: 4]
	float DropSpeedForMaxShakeMultiplier;//[Offset: 0x12c, Size: 4]
	float DropSpeedBlendExponent;//[Offset: 0x130, Size: 4]
	float CachedSkydiveDropSpeedMin;//[Offset: 0x134, Size: 4]
	float CachedSkydiveDropSpeedMax;//[Offset: 0x138, Size: 4]
	ScalableFloat RotOscPitchMinAmplitude;//[Offset: 0x140, Size: 40]
	ScalableFloat RotOscPitchMaxAmplitude;//[Offset: 0x168, Size: 40]
	ScalableFloat RotOscYawMinAmplitude;//[Offset: 0x190, Size: 40]
	ScalableFloat RotOscYawMaxAmplitude;//[Offset: 0x1b8, Size: 40]
	ScalableFloat RotOscRollMinAmplitude;//[Offset: 0x1e0, Size: 40]
	ScalableFloat RotOscRollMaxAmplitude;//[Offset: 0x208, Size: 40]
	ScalableFloat RotOscPitchMinFreq;//[Offset: 0x230, Size: 40]
	ScalableFloat RotOscPitchMaxFreq;//[Offset: 0x258, Size: 40]
	ScalableFloat RotOscYawMinFreq;//[Offset: 0x280, Size: 40]
	ScalableFloat RotOscYawMaxFreq;//[Offset: 0x2a8, Size: 40]
	ScalableFloat RotOscRollMinFreq;//[Offset: 0x2d0, Size: 40]
	ScalableFloat RotOscRollMaxFreq;//[Offset: 0x2f8, Size: 40]
	ScalableFloat TransOscXMinAmplitude;//[Offset: 0x320, Size: 40]
	ScalableFloat TransOscXMaxAmplitude;//[Offset: 0x348, Size: 40]
	ScalableFloat TransOscYMinAmplitude;//[Offset: 0x370, Size: 40]
	ScalableFloat TransOscYMaxAmplitude;//[Offset: 0x398, Size: 40]
	ScalableFloat TransOscZMinAmplitude;//[Offset: 0x3c0, Size: 40]
	ScalableFloat TransOscZMaxAmplitude;//[Offset: 0x3e8, Size: 40]
	ScalableFloat TransOscXMinFreq;//[Offset: 0x410, Size: 40]
	ScalableFloat TransOscXMaxFreq;//[Offset: 0x438, Size: 40]
	ScalableFloat TransOscYMinFreq;//[Offset: 0x460, Size: 40]
	ScalableFloat TransOscYMaxFreq;//[Offset: 0x488, Size: 40]
	ScalableFloat TransOscZMinFreq;//[Offset: 0x4b0, Size: 40]
	ScalableFloat TransOscZMaxFreq;//[Offset: 0x4d8, Size: 40]

--------------------------------
Class: FortControllerComponent_ContextualChallenges.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	FortQuestItem*[] SortedContextualObjectives;//[Offset: 0xe8, Size: 16]
	FortQuestItem*[] ContextualObjectivesToProcess;//[Offset: 0xf8, Size: 16]
	void FirstTimePlayerLanded(out const HitResult Hit);// 0xcf93de0
	void ClientSetContext(enum NextContext);// 0xcf93d30

--------------------------------
Class: FortControllerComponent_IndicatedActorManagement.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	IndicatedActorInfoArray IndicatedActorList;//[Offset: 0xb0, Size: 288]
	StenciledActorInfoArray StenciledActorList;//[Offset: 0x2f0, Size: 288]
	void RemoveGroupFromStenciledList(FString GroupIdentifier, const bool bIncludeSquad);// 0xcf97908
	void RemoveGroupFromIndicatedList(FString GroupIdentifier, const bool bIncludeSquad);// 0xcf9780c
	void RemoveActorFromStenciledList(Actor* StenciledActor, const bool bIncludeSquad);// 0xcf9771c
	void RemoveActorFromIndicatedList(Actor* IndicatedActor, const bool bIncludeSquad);// 0xcf9762c
	void OnRep_StenciledActorList();// 0xcf97618
	void OnRep_IndicatedActorList();// 0xcf97604
	void OnHardCoreBeaconPlayerPawnPossessed(Pawn* PossessedPawn);// 0xcf9755c
	void OnHardCoreBeaconPlayerPawnDied(out const FortPlayerDeathReport DeathReport);// 0xcf9748c
	void AddActorsToStenciledList(out Actor*[] StenciledActors, StenciledActorData Data, const bool bAddAsUnique, const bool bReplaceExistingEntry, const bool bRefreshExistingEntry);// 0xcf971d4
	void AddActorsToIndicatedList(out Actor*[] IndicatedActors, IndicatedActorData Data, const bool bAddAsUnique, const bool bAllowOwningPlayer, const bool bReplaceExistingEntry, const bool bRefreshExistingEntry);// 0xcf96e80

--------------------------------
Class: IndicatedActorInfoArray.FastArraySerializer
	IndicatedActorInfoEntry[] Entries;//[Offset: 0x108, Size: 16]

--------------------------------
Class: IndicatedActorInfoEntry.FastArraySerializerItem
	Actor* Actor;//[Offset: 0x10, Size: 8]
	float StartTime;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]
	IndicatedActorData Data;//[Offset: 0x20, Size: 144]
	bool bReplaceExistingWhenAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bRefreshExistingWhenAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]

--------------------------------
Class: IndicatedActorData
	FString GroupIdentifier;//[Offset: 0x0, Size: 16]
	float Duration;//[Offset: 0x10, Size: 4]
	float StepTime;//[Offset: 0x14, Size: 4]
	Vector IndicatorOffset;//[Offset: 0x18, Size: 12]
	Vector IndicatorDBNOOffset;//[Offset: 0x24, Size: 12]
	enum ShareActorWith;//[Offset: 0x30, Size: 1]
	bool bClampToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	IndicatedActorScaleAndOpacityData ScaleAndOpacityData;//[Offset: 0x34, Size: 28]
	IndicatedActorParticleSystemData ParticleSystemData;//[Offset: 0x50, Size: 48]
	SoundBase* Sound;//[Offset: 0x80, Size: 8]
	enum StateImageOverride;//[Offset: 0x88, Size: 1]

--------------------------------
Class: IndicatedActorScaleAndOpacityData
	float SmallSizeDistance;//[Offset: 0x0, Size: 4]
	float LargestSizeDistance;//[Offset: 0x4, Size: 4]
	float SmallScale;//[Offset: 0x8, Size: 4]
	float LargestScale;//[Offset: 0xc, Size: 4]
	float FarAwayScale;//[Offset: 0x10, Size: 4]
	float FarAwayOpacity;//[Offset: 0x14, Size: 4]
	float MaxScaleAndFadePercent;//[Offset: 0x18, Size: 4]

--------------------------------
Class: IndicatedActorParticleSystemData
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 8]
	FName ParticleSystemActorParamName;//[Offset: 0x8, Size: 8]
	Vector ParticleSystemOffset;//[Offset: 0x10, Size: 12]
	Vector ParticleSystemDBNOOffset;//[Offset: 0x1c, Size: 12]
	FName ParticleSystemVectorParamName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: StenciledActorInfoArray.FastArraySerializer
	StenciledActorInfoEntry[] Entries;//[Offset: 0x108, Size: 16]

--------------------------------
Class: StenciledActorInfoEntry.FastArraySerializerItem
	Actor* Actor;//[Offset: 0x10, Size: 8]
	float StartTime;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]
	StenciledActorData Data;//[Offset: 0x20, Size: 112]
	bool bReplaceExistingWhenAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool bRefreshExistingWhenAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]

--------------------------------
Class: StenciledActorData
	FString GroupIdentifier;//[Offset: 0x0, Size: 16]
	float Duration;//[Offset: 0x10, Size: 4]
	float StepTime;//[Offset: 0x14, Size: 4]
	enum ShareActorWith;//[Offset: 0x18, Size: 1]
	IndicatedActorParticleSystemData ParticleSystemData;//[Offset: 0x20, Size: 48]
	SoundBase* Sound;//[Offset: 0x50, Size: 8]
	FName FriendlyStencilName;//[Offset: 0x58, Size: 8]
	FName EnemyStencilName;//[Offset: 0x60, Size: 8]
	byte FriendlyStencilIndex;//[Offset: 0x68, Size: 1]
	byte EnemyStencilIndex;//[Offset: 0x69, Size: 1]

--------------------------------
Class: FortControllerComponent_LocalizationService.ActorComponent.Object
	void ServerRequestLocalizationDocument(FString InDocumentID, FString InLocale);// 0xcf9a348
	void ClientLoadLocalizationDocument(const ReplicatedLocalizedDocument Document);// 0xcf9a1ac

--------------------------------
Class: FortControllerComponent_ToxicityService.ActorComponent.Object
	void ServerSanitizeStrings(const FString[] StringsToSanitize, int RequestID);// 0xcf9dac8
	void ServerSanitizeString(FString StringToSanitize, int RequestID);// 0xcf9d998
	void ClientReturnSanitizedStrings(bool bSuccess, const FString[] SanitizedStrings, int RequestID);// 0xcf9d7fc
	void ClientReturnSanitizedString(bool bSuccess, FString SanitizedString, int RequestID);// 0xcf9d6b8

--------------------------------
Class: FortControllerComponent_RechargeWeapons.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	<GUID,CachedRechargeAmmoData> WeaponToRechargeDataMap;//[Offset: 0xb0, Size: 80]
	<GUID,float> PendingGuidToServerStartTimeMap;//[Offset: 0x100, Size: 80]
	void ClientItemStartedRecharging(const GUID ItemGuid, const float InServerStartTime);// 0xcf9ce8c

--------------------------------
Class: CachedRechargeAmmoData
	float ServerStartTime;//[Offset: 0x0, Size: 4]
	float ChargeRate;//[Offset: 0x4, Size: 4]
	int AmountToRecharge;//[Offset: 0x8, Size: 4]
	int ItemLevel;//[Offset: 0xc, Size: 4]
	GUID WeaponItemGuid;//[Offset: 0x10, Size: 16]
	FortWorldItemDefinition* AmmoItemDefinition;//[Offset: 0x20, Size: 40]
	bool bShouldRechargeAmmoToClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: FortControllerComponent_InventoryService.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	bool bBoundToRegisteredPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	RepGlobalCurrencyStash GlobalCurrencyData;//[Offset: 0xbc, Size: 8]
	ScalableFloat ShouldDropCurrencyOnDeath;//[Offset: 0xd8, Size: 40]
	ScalableFloat NumDeathsThatDropCurrency;//[Offset: 0x100, Size: 40]
	ScalableFloat InventoryServiceEnabled;//[Offset: 0x128, Size: 40]
	GlobalCurrencyTrackedData TotalCurrencyEarnedData;//[Offset: 0x158, Size: 32]
	void OnPlaylistDataReady(FortGameStateAthena* GameState, const FortPlaylist* Playlist, out const GameplayTagContainer PlaylistContextTags);// 0xcf99b88
	void OnGamePhaseChanged(enum NewPhase);// 0xcf99ae0
	static bool IsGlobalCurrencyWidgetEnabled();// 0xcf99aa8
	void HandlePlacementChanged(FortPlayerStateAthena* FortPlayerState, int NewPlacement);// 0xcf999c0
	void HandleOnItemCountChanged(interface class InventoryOwner, FortItemDefinition* Definition, int Delta);// 0xcf99878
	static FortControllerComponent_InventoryService* GetInventoryServiceComponent(FortPlayerControllerGameplay* FortPC);// 0xcf997d0
	static FortResourceItemDefinition* GetDefaultGlobalCurrencyItemDefinition();// 0xcf9979c
	static CurveTable* GetDefaultCurrencyPayoutTable();// 0xcf99768

--------------------------------
Class: RepGlobalCurrencyStash
	enum SyncState;//[Offset: 0x0, Size: 1]
	FortGlobalCurrencyStash Currency;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortGlobalCurrencyStash
	int Count;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GlobalCurrencyTrackedData
	int TotalCurrencyEarnedInMatch;//[Offset: 0x0, Size: 4]
	int PhaseStartCurrencyBalance;//[Offset: 0x4, Size: 4]
	int PhaseEndCurrencyBalance;//[Offset: 0x8, Size: 4]
	GlobalCurrencyTransactionData[] TransactionData;//[Offset: 0x10, Size: 16]

--------------------------------
Class: GlobalCurrencyTransactionData
	float ServerTime;//[Offset: 0x0, Size: 4]
	int Amount;//[Offset: 0x4, Size: 4]
	FString SourceType;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortControllerComponent_RadiusTracker.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	RadiusTrackingDisplayInfoArray TrackingDisplayInfos;//[Offset: 0xb0, Size: 280]
	FortMiniMapRadiusTrackerIndicator* RadiusTrackerIndicator;//[Offset: 0x1c8, Size: 8]
	void UpdateTrackingDisplayIndicators();// 0xcf9cc7c
	void OnRep_TrackingDisplayInfos();// 0xcf9cc60

--------------------------------
Class: RadiusTrackingDisplayInfoArray.FastArraySerializer
	RadiusTrackingDisplayInfo[] Items;//[Offset: 0x108, Size: 16]

--------------------------------
Class: RadiusTrackingDisplayInfo.FastArraySerializerItem
	Actor* TrackedActor;//[Offset: 0x10, Size: 8]
	Vector2D TrackedCenter;//[Offset: 0x18, Size: 8]
	float TrackedRadius;//[Offset: 0x20, Size: 4]
	LinearColor CircleColor;//[Offset: 0x24, Size: 16]
	MaterialInterface* CircleMaterial;//[Offset: 0x38, Size: 8]
	MaterialInstanceDynamic* MiniMapMID;//[Offset: 0x40, Size: 8]
	MaterialInstanceDynamic* FullMapMID;//[Offset: 0x48, Size: 8]
	FortControllerComponent_RadiusTracker* RadiusTrackerComponent;//[Offset: 0x50, Size: 8]

--------------------------------
Class: FortMiniMapRadiusTrackerIndicator.FortMiniMapIndicator.FortIndicator.Object
	FortControllerComponent_RadiusTracker* RadiusTrackerComponent;//[Offset: 0x118, Size: 8]
	FortPlayerController* PlayerController;//[Offset: 0x120, Size: 8]
	float PlatformScale;//[Offset: 0x128, Size: 4]
	SlateBrush[] MinimapRadiusTrackerCircleBrushes;//[Offset: 0x130, Size: 16]

--------------------------------
Class: FortControllerComponent_MinigameActivity.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	static FortControllerComponent_MinigameActivity* GetMinigameActivityComponent(const Pawn* Pawn, out enum OutIsValid);// 0xcf9b3e8
	void ForwardMinigameActivityStatChanged(enum Stat, float Value);// 0xcf9b300
	void ForwardMinigameActivityStarted(out const MinigameActivityStartedData StartData);// 0xcf9b158
	void ForwardMinigameActivityScoreChanged(int CurrentScore, int TotalScore);// 0xcf9b074
	void ForwardMinigameActivityRankChanged(int Rank);// 0xcf9afcc
	void ForwardMinigameActivityEnded(out const MinigameActivityEndedData EndData);// 0xcf9af04

--------------------------------
Class: MinigameActivityStartedData
	FText MinigameActivityName;//[Offset: 0x0, Size: 24]
	enum Stat;//[Offset: 0x18, Size: 1]
	float InitialStatValue;//[Offset: 0x1c, Size: 4]
	int InitialScore;//[Offset: 0x20, Size: 4]
	int TotalScore;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MinigameActivityEndedData
	bool bSuccessfullyCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum Stat;//[Offset: 0x1, Size: 1]
	float FinalStatValue;//[Offset: 0x4, Size: 4]
	float FinalStatBestValue;//[Offset: 0x8, Size: 4]
	int FinalScore;//[Offset: 0xc, Size: 4]
	int TotalScore;//[Offset: 0x10, Size: 4]
	int Rank;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CompositeBool
	bool bDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Object*[] ModifyingObjects;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CreativeUserContentManager.ActorComponent.Object
	<FName,LevelSaveRecord*> LevelSaveRecords;//[Offset: 0xb0, Size: 80]
	<FName,CreativeThumbnailCacheData> SaveThumbnails;//[Offset: 0x100, Size: 80]
	LevelSaveRecordThumbnailGenerator* ThumbnailGenerator;//[Offset: 0x150, Size: 8]

--------------------------------
Class: CreativeThumbnailCacheData

--------------------------------
Class: LevelSaveRecordThumbnailGenerator.Object
	class Actor* StageActorClassSoftClassPtr;//[Offset: 0x38, Size: 40]
	SceneCaptureComponent2D* SceneCaptureComponent;//[Offset: 0x70, Size: 8]
	CameraComponent* CameraComponent;//[Offset: 0x78, Size: 8]
	LevelRecordSpawner* ActiveRecordSpawner;//[Offset: 0x80, Size: 8]
	Actor*[] SpawnedActors;//[Offset: 0x90, Size: 16]

--------------------------------
Class: FortCreativeObjectTrackingComponent.ActorComponent.Object
	bool bUpdatePreviewLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	void ServerSetPreviewLocation(bool bPreviewActive, const Vector Location);// 0xcfba5b8
	void OnThermometerBetaEnabledChangedSignature__DelegateSignature(bool bBetaEnabled);// 0xbbc0600

--------------------------------
Class: QuickBarEquippedItemGuids
	GUID EquippedItemGuids;//[Offset: 0x0, Size: 16]
	int NumEnabledSlots;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: CreativeIslandInfo
	FString IslandTitle;//[Offset: 0x0, Size: 16]
	FString IslandIntroduction;//[Offset: 0x10, Size: 16]
	FString UserLocale;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FortCreativeDeviceButtonComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnDeviceButtonClickedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnDeviceButtonLabelChangedDelegate;//[Size: 16]
	FText ButtonName;//[Offset: 0xe0, Size: 24]
	FText ButtonDescription;//[Offset: 0xf8, Size: 24]
	FText ButtonLabel;//[Offset: 0x110, Size: 24]
	int WeightOffset;//[Offset: 0x128, Size: 4]
	class UserWidget* EditWidget;//[Offset: 0x130, Size: 8]
	GameplayTagContainer Tags;//[Offset: 0x138, Size: 32]
	void SetButtonLabel(out const FText InButtonLabel);// 0xcfaced0

--------------------------------
Class: FortPhysicsPawnObject.FortPhysicsPawn.Pawn.Actor.Object
	StaticMeshComponent* PhysicsMeshComponent;//[Offset: 0x3a0, Size: 8]
	StaticMeshComponent* VisibleMeshComponent;//[Offset: 0x3a8, Size: 8]
	byte PrimarySurfaceType;//[Offset: 0x3b0, Size: 1]
	byte WeaponResponseType;//[Offset: 0x3b1, Size: 1]
	bool bShowDamageNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool bPlayDamageAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	GameplayTagContainer PhysicsObjectTags;//[Offset: 0x3c8, Size: 32]
	float ImpulseResponseMultiplier;//[Offset: 0x3e8, Size: 4]
	float ImpulseResponseZBias;//[Offset: 0x3ec, Size: 4]
	Vector TestInitialLinearVelocity;//[Offset: 0x3f0, Size: 12]
	Vector TestInitialAngularVelocity;//[Offset: 0x3fc, Size: 12]
	HitResult LookAheadHit;//[Offset: 0x408, Size: 136]
	float CachedSpeed;//[Offset: 0x490, Size: 4]
	WeaponHitNotifyAudioBank* DefaultHitNotifyAudioBank;//[Offset: 0x498, Size: 8]
	MulticastInlineDelegateProperty OnHealthChanged;//[Size: 16]
	float LifespanAfterDeath;//[Offset: 0x4b0, Size: 4]
	bool bPlayedDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	float LastDamagedTime;//[Offset: 0x4b8, Size: 4]
	class GameplayEffect* PlayerCollisionGameplayEffect;//[Offset: 0x4f0, Size: 8]
	VehicleTargetOrientation CorrectTargetOrientation;//[Offset: 0x530, Size: 36]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x5b4, Size: 16]
	FortAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x5c8, Size: 8]
	FortHealthSet* HealthSet;//[Offset: 0x5d0, Size: 8]
	FortAthenaImpulseResponseSet* ImpulseResponseSet;//[Offset: 0x5d8, Size: 8]
	FortDamageSet* DamageSet;//[Offset: 0x5e0, Size: 8]
	FortHealthBarIndicator* HealthBarIndicator;//[Offset: 0x5e8, Size: 8]
	bool bPendingDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	GameplayTagContainer GameplayTags;//[Offset: 0x5f8, Size: 32]
	BuildingEditModeMetadata*[] WallsPhysicsObjectCanDestroy;//[Offset: 0x618, Size: 16]
	class BuildingActor[] BuildingPropClassesPhysicsObjectCanDestroy;//[Offset: 0x628, Size: 16]
	byte SurfaceTypePhysicsObjectOn;//[Offset: 0x639, Size: 1]
	MulticastInlineDelegateProperty OnSurfaceTypePhysicsObjectIsOnChangedDelegate;//[Size: 16]
	FortAbilitySet* StartupAbilitySet;//[Offset: 0x650, Size: 8]
	TimeStampedPhysicsPawnState CurrentServerPhysicsState;//[Offset: 0x670, Size: 80]
	HitData LastServerConfirmedHit;//[Offset: 0x720, Size: 112]
	PhysicsPawnObjectInitialParameters InitialParameters;//[Offset: 0x84c, Size: 36]
	class Actor[] ActorsObjectDiesWhenHitting;//[Offset: 0x870, Size: 16]
	void WakeUpOnGroundDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd11a588
	void WakeUp();// 0xd11a56c
	void UpdateClientWithPhysicsObjectTestInput(Vector LinearVelocity, Vector AngularVelocity);// 0xd11a47c
	void TurnOffClientPrediction();// 0xd11a468
	static FortPhysicsPawnObject* SpawnPhysicsPawnObject(const Object* WorldContextObject, class FortPhysicsPawnObject ActorClass, out const Transform Transform, out const PhysicsPawnObjectInitialParameters InitialParameters);// 0xd11a298
	void SetPropDestructionParams(class BuildingActor[] InBuildingPropClassesPhysicsObjectCanDestroy, BuildingEditModeMetadata*[] InWallsPhysicsObjectCanDestroy);// 0xd11a140
	void SetImpulseResponseZBias(const float ZBias);// 0xd11a098
	void SetImpulseResponseMultiplier(const float Multiplier);// 0xd119ff0
	void SetHealthPercent(float Percent);// 0xd119f48
	void SetDyingPhysics();// 0xd119f2c
	void ServerBroadcastHitFromClient(PlayerController* HittingController, Pawn* HittingPawn, const Vector VelocityOfHitter, const Vector HitNormal, const TimeStampedPhysicsPawnState ClientBallState);// 0xd119d78
	void ServerBroadcastHit(Pawn* ImpulseInstigator, const Vector ImpactPoint, const Vector ImpulseValue);// 0xd119c48
	void SendClientStateToServer_Helper();// 0xd119c34
	void PawnHitByPhysicsObject(FortPawn* Pawn, out const Vector ImpactPoint, out const Vector ImpactNormal, const Vector LaunchVector);// 0xbbc0600
	void OnSurfaceTypePhysicsObjectIsOnChanged(byte SurfaceTypePhysicsObjectIsOn);// 0xbbc0600
	void OnStopTick();// 0xbbc0600
	void OnStartTick();// 0xbbc0600
	void OnRep_SurfaceTypePhysicsObjectOn(byte PreviousSurfaceOn);// 0xd119b8c
	void OnRep_PendingDeath();// 0xd119b78
	void OnRep_LastServerConfirmedHit();// 0xd119b64
	void OnRep_InitialParameters();// 0xd119b50
	void OnRep_HealthSet();// 0xd119b3c
	void OnRep_CurrentServerPhysicsState();// 0xd119b28
	void OnRep_CorrectTargetOrientation();// 0xd119b14
	void OnRep_AbilitySystemComponent();// 0xd119b00
	void OnPxComponentWake(PrimitiveComponent* WakingComponent, FName BoneName);// 0xd119a1c
	void OnImpactDamageApplied(const float Damage, const Vector ImpactNormal);// 0xbbc0600
	void OnExitedWaterVolume(out const Vector WaterSurfacePoint);// 0xbbc0600
	void OnEnteredWaterVolume(out const Vector WaterSurfacePoint);// 0xbbc0600
	void OnDeathPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDamagePlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnDamaged(float Damage, out const GameplayTagContainer DamageTags, out const GameplayEffectContextHandle EffectContext, Controller* EventInstigator, Actor* DamageCauser);// 0xbbc0600
	void OnCollisionHitServer(out const Vector HitLocation, out const Vector VelocityOfHitter, out const Vector HitNormal, Actor* HitActor, byte HitSurfaceType);// 0xbbc0600
	void OnCollisionHitDamageEffects(float DamageTaken);// 0xbbc0600
	void OnCollisionHitClient(out const Vector HitLocation, out const Vector VelocityOfHitter, out const Vector HitNormal, Actor* HitActor, byte HitSurfaceType);// 0xbbc0600
	float ModifyIncomingDamage(float Damage, out const GameplayTagContainer InTags, out const GameplayEffectContextHandle EffectContext, Controller* EventInstigator, Actor* DamageCauser);// 0xd1197b4
	bool IsScrapingSidesOrTop();// 0xd119774
	bool IsInWater();// 0xd119758
	bool IsInAir();// 0xd119718
	bool IsCorrectingOrientation();// 0xd1196d8
	bool IsAsleep();// 0xd1196bc
	bool HasPermissionToAlterBuildings();// 0xd119684
	Vector GetPreviousLinearVelocity();// 0xd119660
	Vector GetPreviousLinearAcceleration();// 0xd11963c
	float GetPreviousForwardSpeedKmh();// 0xd119600
	Vector GetPhysicsObjectVelocity();// 0xd1195c8
	float GetMaxHealth();// 0xd119594
	float GetHealth();// 0xd119560
	float GetForwardSpeedKmh();// 0xd119524
	FString GetDisplayName();// 0xd11947c
	void GameplayCue_Damage(byte EventType, GameplayCueParameters Parameters);// 0xd11918c
	void DrawServerAndClientBallPosition(const Vector ServerPosition);// 0xd1190dc
	void DestroyPhysicsObject();// 0xd1190c8
	void DebugDrawImpactBucket(Vector Location, Vector ImpactVector, Color Color);// 0xd118f9c
	bool CanTeleport();// 0xd118f5c
	bool CanCorrectOrientation(FortPawn* FP);// 0xd118ea0
	void ApplyPredictedImpulseFromPawnHitClient(out const Vector VelocityOfHitter, out const Vector NormalTowardObject, Pawn* HittingPawn);// 0xd118d58
	void ApplyImpulseFromPawnHit(out const Vector VelocityOfHitter, out const Vector NormalTowardObject, Pawn* HittingPawn);// 0xd118c10
	void ApplyImpulse(Actor* ImpulseInstigator, out const Vector ImpulseToApply);// 0xd118b20

--------------------------------
Class: PhysicsPawnObjectInitialParameters
	Vector InitialVelocity;//[Offset: 0x0, Size: 12]
	float OverrideMassInKG;//[Offset: 0xc, Size: 4]
	float OverrideAngularDampening;//[Offset: 0x10, Size: 4]
	float OverrideLinearDampening;//[Offset: 0x14, Size: 4]
	float PlayerForceMultiplier;//[Offset: 0x18, Size: 4]
	float PawnKnockbackMultiplier;//[Offset: 0x1c, Size: 4]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bEnableGravityOnHit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bShouldKillPawnOnHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: TimeStampedPhysicsPawnState
	float WorldTime;//[Offset: 0x0, Size: 4]
	ReplicatedPhysicsPawnState PhysicsPawnState;//[Offset: 0x10, Size: 64]

--------------------------------
Class: VehicleTargetOrientation
	Vector UpVector;//[Offset: 0x0, Size: 12]
	Vector ForwardVector;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FortHealthSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData Health;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData MaxHealth;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData Shield;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData CurrentShield;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData SignalInStorm;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData MaxSignalInStorm;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData Armor;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData DamageResistance;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData DamageVulnerability;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData ReflectDamageAbsolute;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData ReflectDamageFromSource;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData HealingSourceBaseMultiplier;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData Damage;//[Offset: 0x210, Size: 40]
	FortGameplayAttributeData ShieldDamage;//[Offset: 0x238, Size: 40]
	FortGameplayAttributeData HealingSource;//[Offset: 0x260, Size: 40]
	FortGameplayAttributeData HealingBonusTarget;//[Offset: 0x288, Size: 40]
	FortGameplayAttributeData Healing;//[Offset: 0x2b0, Size: 40]
	void OnRep_SignalInStorm(out const FortGameplayAttributeData OldValue);// 0xb678378
	void OnRep_Shield(out const FortGameplayAttributeData OldValue);// 0xb6782a4
	void OnRep_MaxSignalInStorm(out const FortGameplayAttributeData OldValue);// 0xd028b3c
	void OnRep_MaxHealth(out const FortGameplayAttributeData OldValue);// 0xb6781d0
	void OnRep_Health(out const FortGameplayAttributeData OldValue);// 0xb6780fc
	void OnRep_CurrentShield(out const FortGameplayAttributeData OldValue);// 0xb678028

--------------------------------
Class: FortAthenaImpulseResponseSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData ImpulseMultiplier;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData ImpulseMagnitude;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData ImpulseZAngle;//[Offset: 0x80, Size: 40]

--------------------------------
Class: FortHealthBarIndicator.FortSlateHUDIndicator.FortIndicator.Object

--------------------------------
Class: HitData
	float PingOfHitter;//[Offset: 0x0, Size: 4]
	Pawn* HittingPawn;//[Offset: 0x8, Size: 8]
	Vector HitNormal;//[Offset: 0x10, Size: 12]
	TimeStampedPhysicsPawnState ObjectState;//[Offset: 0x20, Size: 80]

--------------------------------
Class: CreativePublishOptions
	FString UserTitle;//[Offset: 0x0, Size: 16]
	FString UserDescription;//[Offset: 0x10, Size: 16]
	FString UserYoutubeVideoId;//[Offset: 0x20, Size: 16]
	FString[] DescriptionTags;//[Offset: 0x30, Size: 16]
	bool bActivateLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bClearPersistentData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	FString UserLocale;//[Offset: 0x48, Size: 16]

--------------------------------
Class: PlayerStateEncryptionKey
	byte[] Key;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ProfileGoScenario
	FString Name;//[Offset: 0x0, Size: 16]
	Vector Position;//[Offset: 0x10, Size: 12]
	Rotator Orientation;//[Offset: 0x1c, Size: 12]
	FString OnBegin;//[Offset: 0x28, Size: 16]
	FString OnEnd;//[Offset: 0x38, Size: 16]
	bool AutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool UseSetupCheats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: FortRemoteControlPawnSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData FuseLength;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData MouseTurnCap;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData MouseTurnRate;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData MouseTurnRateMax;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData GyroTurnRateMax;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData KeyboardTurnRate;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData ControllerTurnRate;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData TouchTurnRate;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData MaxSpeed;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData MaxAcceleration;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData UseLaunchDelay;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData LaunchDelay;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData LaunchSpeed;//[Offset: 0x210, Size: 40]
	FortGameplayAttributeData OutOfHealthExplodeDelay;//[Offset: 0x238, Size: 40]
	FortGameplayAttributeData PlayerCanDetonate;//[Offset: 0x260, Size: 40]

--------------------------------
Class: AthenaPawnReplayData
	float HealthRatio;//[Offset: 0x0, Size: 4]
	float ShieldRatio;//[Offset: 0x4, Size: 4]
	byte[] CipherText;//[Offset: 0x8, Size: 16]
	World* World;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FortMobileInteractionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInstanceDynamic* IconMID;//[Offset: 0x4d0, Size: 8]
	void TickLocation(float DeltaTime);// 0xd0e2eec
	void StopRadialTimer();// 0xd0e2ed8
	void StartRadialTimer(float Duration);// 0xd0e2e30
	void SetVisibleStartTime();// 0xd0e2e1c
	void SetUpdateLocationOnTick(bool bShouldUpdate);// 0xd0e2d6c
	void SetRarityColor(LinearColor InColor);// 0xd0e2cc4
	void SetRadialStartTime(float StartTime);// 0xd0e2c1c
	void SetRadialOpacity(float Opacity);// 0xd0e2b74
	void SetRadialDuration(float Duration);// 0xd0e2acc
	void SetIcon(enum IconType);// 0xd0e2a24
	void SetExtents(Vector Extents);// 0xd0e297c
	void SetCameraPush(float Offset);// 0xd0e28d4
	bool IsAvailable();// 0xd0e289c

--------------------------------
Class: UnicornAthenaPawnSampler.ActorComponent.Object
	bool bShouldListenOutToDBNOEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	void HandlePawnDBNOChanged(FortPawn* FortPawn, bool bInIsDBNO);// 0xd254558

--------------------------------
Class: FortPawnComponent_Convert.FortPawnComponent.PawnComponent.GameFrameworkComponent.ActorComponent.Object
	ScalableFloat CanConvert;//[Offset: 0xb0, Size: 40]
	ScalableFloat CanBeConverted;//[Offset: 0xd8, Size: 40]
	ScalableFloat CanBeConvertedFromDBNO;//[Offset: 0x100, Size: 40]
	ScalableFloat MaxConvertedPawn;//[Offset: 0x128, Size: 40]
	ScalableFloat ConvertTimeFromDBNO;//[Offset: 0x150, Size: 40]
	SoundBase* ConvertInteractionSound;//[Offset: 0x178, Size: 8]
	class UserWidget* IndicatorMarkerWidgetClass;//[Offset: 0x180, Size: 8]
	MulticastInlineDelegateProperty OnConvertedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnUnconvertedEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnConvertEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnUnconvertEvent;//[Size: 16]
	bool bCanConvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 1]
	bool bCanBeConverted;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c8, Size: 1]
	bool bCanBeConvertedFromDBNO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c8, Size: 1]
	FortPlayerState* ConverterPlayerState;//[Offset: 0x1d0, Size: 8]
	FortAthenaAIRuntimeParameters_AIConvert* CachedAIConvertParameters;//[Offset: 0x1d8, Size: 8]
	FortPawnComponent_Convert*[] ConvertedPawnComponents;//[Offset: 0x1e0, Size: 16]
	static void TriggerConversion(FortPawn* Converter, FortPawn* Converted);// 0xd1116d8
	void ShowIndicatorMarker();// 0xd1116c4
	void OnConverterTeamChange();// 0xd1116b0
	void OnConverterStoppedEmote(FortItemDefinition* MontageItemDef, FortPawn* PawnEmoting);// 0xd1115cc
	void OnConverterStartedEmote(FortItemDefinition* MontageItemDef, FortPawn* PawnEmoting);// 0xd1114e8
	void OnConvertedPawnDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xd111288
	void HideIndicatorMarker();// 0xd111274

--------------------------------
Class: FortAthenaAIRuntimeParameters_AIConvert.FortAthenaAIRuntimeParameters.Object
	bool bCanBeConverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bCanBeConvertedFromDBNO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bForceKillWhenUnconverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	bool bCopyConverterSpecificRelations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 1]
	bool bRemoveFromAllFactions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float ReleaseDistanceSq;//[Offset: 0x34, Size: 4]
	float CheckReleaseConditionsTimeInterval;//[Offset: 0x38, Size: 4]
	GameplayTagContainer AddToFactions;//[Offset: 0x40, Size: 32]
	GameplayTagContainer RemoveFromFactions;//[Offset: 0x60, Size: 32]
	byte PreConversionTeamIndex;//[Offset: 0x80, Size: 1]
	GameplayTagContainer PreConversionFactions;//[Offset: 0x88, Size: 32]

--------------------------------
Class: SharedRepMovement
	RepMovement RepMovement;//[Offset: 0x0, Size: 52]
	float RepTimeStamp;//[Offset: 0x34, Size: 4]
	float TurretYaw;//[Offset: 0x38, Size: 4]
	float TurretPitch;//[Offset: 0x3c, Size: 4]
	uint32 RemoteViewData32;//[Offset: 0x40, Size: 4]
	uint16 AccelerationPack;//[Offset: 0x44, Size: 2]
	int8 AccelerationZPack;//[Offset: 0x46, Size: 1]
	byte RepMovementMode;//[Offset: 0x47, Size: 1]
	byte JumpFlashCountPacked;//[Offset: 0x48, Size: 1]
	byte LandingFlashCountPacked;//[Offset: 0x49, Size: 1]
	byte CurrentMovementStyle;//[Offset: 0x4a, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bIsSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bIsParachuteOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	bool bIsSlopeSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 1]
	bool bIsProxySimulationTimedOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bIsWaterJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bIsWaterSprintBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool bIsWaterSprintBoostPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: FortPickupRequestInfo
	GUID SwapWithItem;//[Offset: 0x0, Size: 16]
	float FlyTime;//[Offset: 0x10, Size: 4]
	Vector Direction;//[Offset: 0x14, Size: 12]
	bool bPlayPickupSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsAutoPickup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bUseRequestedSwap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bTrySwapWithWeapon;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	bool bIsVisualOnlyPickup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 1]

--------------------------------
Class: FortPlayerStateComponent_Quests.FortPlayerStateComponent.PlayerStateComponent.GameFrameworkComponent.ActorComponent.Object
	void OnSpectatorUrgentQuest__DelegateSignature(out const UrgentQuestData UrgentQuestData, const float EventTimeRemaining);// 0xbbc0600
	void OnSpectatorEndUrgentQuest__DelegateSignature(out const GameplayTag UrgentQuestEventTag);// 0xbbc0600
	void OnSpectatorClearUrgentQuests__DelegateSignature();// 0xbbc0600
	void OnNoLongerTargetingBotUrgentQuest__DelegateSignature();// 0xbbc0600
	void HandleNoLongerTargetingBotUrgentQuest();// 0xd194f54
	void ClientSpectatorShowUrgentQuestMessage(const UrgentQuestData UrgentQuestData);// 0xd194e98
	void ClientSpectatorShowUrgentQuestEntry(const UrgentQuestData UrgentQuestData);// 0xd194ddc
	void ClientSpectatorFailUrgentQuestMessage(const UrgentQuestData UrgentQuestData, const GameplayTag FailedEventTag);// 0xd194ce0
	void ClientSpectatorCompleteUrgentQuestMessage(const UrgentQuestData UrgentQuestData, const GameplayTag CompletedEventTag);// 0xd194be4
	void ClientSpectatorClearUrgentQuestEntries();// 0xd194bc8

--------------------------------
Class: FortPlayerStateComponent.PlayerStateComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: PlayerStateComponent.GameFrameworkComponent.ActorComponent.Object

--------------------------------
Class: FortAthenaZipline.FortAthenaZiplineBase.BuildingGameplayActor.BuildingActor.Actor.Object
	ScalableFloat ZiplineVelocity;//[Offset: 0x7e8, Size: 40]
	ScalableFloat ZiplineAcceleration;//[Offset: 0x810, Size: 40]
	ScalableFloat ZiplineVariableSpeedEnabled;//[Offset: 0x838, Size: 40]
	ScalableFloat DownhillAcceleration;//[Offset: 0x860, Size: 40]
	ScalableFloat UphillAcceleration;//[Offset: 0x888, Size: 40]
	ScalableFloat DownhillDeceleration;//[Offset: 0x8b0, Size: 40]
	ScalableFloat UphillDeceleration;//[Offset: 0x8d8, Size: 40]
	ScalableFloat ZiplineDownhillSpeed;//[Offset: 0x900, Size: 40]
	ScalableFloat ZiplineUphillSpeed;//[Offset: 0x928, Size: 40]
	ScalableFloat ZiplineUphillSpeedMin;//[Offset: 0x950, Size: 40]
	Vector StartPosition;//[Offset: 0x978, Size: 12]
	Vector EndPosition;//[Offset: 0x984, Size: 12]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	CapsuleComponent* InteractIconPlacementCapsule;//[Offset: 0x994, Size: 8]
	void Initialize(out const Vector NewStartPosition, out const Vector NewEndPosition);// 0xb63a000

--------------------------------
Class: PlayerBannerInfo
	FString IconId;//[Offset: 0x0, Size: 16]
	FString ColorId;//[Offset: 0x10, Size: 16]
	int Level;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CustomCharacterData
	byte WasPartReplicatedFlags;//[Offset: 0x0, Size: 1]
	int RequiredVariantPartFlags;//[Offset: 0x4, Size: 4]
	CustomCharacterPart* Parts;//[Offset: 0x8, Size: 8]
	AthenaCharmItemDefinition* Charms;//[Offset: 0x40, Size: 8]
	CustomCharacterPart*[] VariantRequiredCharacterParts;//[Offset: 0x60, Size: 16]
	bool bReplicationFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: FortSpectatorZoneArray.FastArraySerializer
	FortSpectatorZoneItem[] SpectatorArray;//[Offset: 0x108, Size: 16]
	FortPlayerStateZone* OwningState;//[Offset: 0x118, Size: 8]

--------------------------------
Class: FortSpectatorZoneItem.FastArraySerializerItem
	FortPlayerStateZone* PlayerState;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortCarriedObject.Actor.Object
	ProjectileMovementComponent* ProjectileComp;//[Offset: 0x238, Size: 8]
	CarriedObjectAttachmentInfo HolderInfo;//[Offset: 0x248, Size: 40]
	Vector IndicatorRelativeOffset;//[Offset: 0x298, Size: 12]
	SlateBrush Indicator;//[Offset: 0x2a8, Size: 136]
	SlateColor DefaultIndicatorColor;//[Offset: 0x330, Size: 40]
	Vector RelativeTranslation;//[Offset: 0x358, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x364, Size: 12]
	bool bPickupOnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	byte Team;//[Offset: 0x371, Size: 1]
	BuildingFlagSpawn* SpawnPointActor;//[Offset: 0x378, Size: 8]
	void ReturnToSpawnPoint();// 0xcf458e0
	void OnRep_HolderInfo(out CarriedObjectAttachmentInfo PreviousInfo);// 0xcf457f4
	Actor* GetHoldingActor();// 0xcf457b8

--------------------------------
Class: CarriedObjectAttachmentInfo
	Actor* AttachParent;//[Offset: 0x0, Size: 8]
	FName SocketName;//[Offset: 0x8, Size: 8]
	Vector RelativeTranslation;//[Offset: 0x10, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BuildingFlagSpawn.BuildingGameplayActor.BuildingActor.Actor.Object
	Vector HUDIndicatorRelativeOffset;//[Offset: 0x7e8, Size: 12]
	byte bPickupOnTouch;//[Offset: 0x7f4, Size: 1]
	class FortCarriedObject* CarriedObjectClass;//[Offset: 0x7f8, Size: 8]
	Vector RelativeTranslation;//[Offset: 0x800, Size: 12]
	FortCarriedObject* SpawnedObject;//[Offset: 0x810, Size: 8]
	float SpawnDelay;//[Offset: 0x818, Size: 4]
	void SpawnCarriedObject();// 0xce4c9b8
	void OnCarriedObjectDetachedEvent();// 0xce4c99c
	void OnCarriedObjectAttachedEvent();// 0xce4c980
	bool IsSpawnedObjectAwayFromBase();// 0xce4c948

--------------------------------
Class: AccumulatedItemEntry
	FortWorldItemDefinition* ItemDefinition;//[Offset: 0x0, Size: 8]
	int Quantity;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SimulatedAttributeEntry
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 56]
	float CurrentValue;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FortPlayerAttributeSets
	FortRegenHealthSet* HealthSet;//[Offset: 0x0, Size: 8]
	FortControlResistanceSet* ControlResistanceSet;//[Offset: 0x8, Size: 8]
	FortDamageSet* DamageSet;//[Offset: 0x10, Size: 8]
	FortMovementSet* MovementSet;//[Offset: 0x18, Size: 8]
	FortAdvancedMovementSet* AdvancedMovementSet;//[Offset: 0x20, Size: 8]
	FortConstructionSet* ConstructionSet;//[Offset: 0x28, Size: 8]
	FortPlayerAttrSet* PlayerAttrSet;//[Offset: 0x30, Size: 8]
	FortCharacterAttrSet* CharacterAttrSet;//[Offset: 0x38, Size: 8]
	FortWeaponAttrSet* WeaponAttrSet;//[Offset: 0x40, Size: 8]
	FortHomebaseSet* HomebaseSet;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortRegenHealthSet.FortHealthSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData HealthRegenRate;//[Offset: 0x400, Size: 40]
	FortGameplayAttributeData HealthRegenDelay;//[Offset: 0x428, Size: 40]
	FortGameplayAttributeData HealthRegenThreshold;//[Offset: 0x450, Size: 40]
	FortGameplayAttributeData ShieldRegenRate;//[Offset: 0x478, Size: 40]
	FortGameplayAttributeData ShieldRegenDelay;//[Offset: 0x4a0, Size: 40]
	FortGameplayAttributeData ShieldRegenThreshold;//[Offset: 0x4c8, Size: 40]

--------------------------------
Class: FortControlResistanceSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData ControlResistance;//[Offset: 0x38, Size: 40]
	FortGameplayAttributeData MaxControlResistance;//[Offset: 0x60, Size: 40]
	FortGameplayAttributeData ControlResistanceRegenRate;//[Offset: 0x88, Size: 40]
	FortGameplayAttributeData ControlResistanceRegenDelay;//[Offset: 0xb0, Size: 40]
	FortGameplayAttributeData ControlResistanceRegenThreshold;//[Offset: 0xd8, Size: 40]
	FortGameplayAttributeData KnockbackThreshold;//[Offset: 0x100, Size: 40]
	FortGameplayAttributeData KnockbackMultiplier;//[Offset: 0x128, Size: 40]
	FortGameplayAttributeData ImpactDamageResistance;//[Offset: 0x150, Size: 40]
	FortGameplayAttributeData ImpactDamageMultiplier;//[Offset: 0x178, Size: 40]
	FortGameplayAttributeData ImpactDamage;//[Offset: 0x1a0, Size: 40]
	void OnRep_MaxControlResistance(out const FortGameplayAttributeData OldValue);// 0xcfa0874
	void OnRep_ControlResistance(out const FortGameplayAttributeData OldValue);// 0xcfa07a0

--------------------------------
Class: FortMovementSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData WalkSpeed;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData RunSpeed;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData SprintSpeed;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData FlySpeed;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData CrouchedRunSpeed;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData CrouchedSprintSpeed;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData BackwardSpeedMultiplier;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData JumpHeight;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData GravityZScale;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData VehicleGravityZScale;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData SpeedMultiplier;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData LandSpeedMultiplier;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData SwimSpeedMultiplier;//[Offset: 0x210, Size: 40]
	FortGameplayAttributeData LandSpeedWhileBurrowingMultiplier;//[Offset: 0x238, Size: 40]
	void OnRep_SpeedMultiplier(out const FortGameplayAttributeData OldValue);// 0xd0e786c

--------------------------------
Class: FortAdvancedMovementSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData GroundFriction;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData BrakingDecelerationWalking;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData BrakingDecelerationFalling;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData BrakingDecelerationFlying;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData MaxAcceleration;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData MaxAccelerationFlying;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData BrakingFrictionFactor;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData JumpZVelocity;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData JumpHorizontalAccelerationOverride;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData JumpHorizontalVelocityOverride;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData MinAnalogWalkSpeed;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData AirControlMultiplier;//[Offset: 0x1e8, Size: 40]
	void OnRep_MinAnalogWalkSpeed(out const FortGameplayAttributeData OldValue);// 0xb609758
	void OnRep_MaxAccelerationFlying(out const FortGameplayAttributeData OldValue);// 0xb609684
	void OnRep_MaxAcceleration(out const FortGameplayAttributeData OldValue);// 0xb6095b0
	void OnRep_JumpZVelocity(out const FortGameplayAttributeData OldValue);// 0xcea0f04
	void OnRep_GroundFriction(out const FortGameplayAttributeData OldValue);// 0xb6094dc
	void OnRep_BrakingFrictionFactor(out const FortGameplayAttributeData OldValue);// 0xcea0e30
	void OnRep_BrakingDecelerationWalking(out const FortGameplayAttributeData OldValue);// 0xcea0d5c
	void OnRep_BrakingDecelerationFlying(out const FortGameplayAttributeData OldValue);// 0xb609408
	void OnRep_BrakingDecelerationFalling(out const FortGameplayAttributeData OldValue);// 0xcea0c88

--------------------------------
Class: FortConstructionSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData BuildSpeed;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData RepairSpeed;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData BuildCost;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData RepairCost;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData MaxBuildLevel;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData BuildingSkill;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData TrapArmSpeed;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData TrapReloadSpeed;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData TrapBaseDamage;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData TrapMaxDurability;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData TrapDiceCritChance;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData TrapDiceCritMultiplier;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData TrapHealingSource;//[Offset: 0x210, Size: 40]
	void OnRep_TrapReloadSpeed(out const FortGameplayAttributeData OldValue);// 0xcf89848
	void OnRep_TrapMaxDurability(out const FortGameplayAttributeData OldValue);// 0xcf89774
	void OnRep_TrapHealingSource(out const FortGameplayAttributeData OldValue);// 0xcf896a0
	void OnRep_TrapDiceCritMultiplier(out const FortGameplayAttributeData OldValue);// 0xcf895cc
	void OnRep_TrapDiceCritChance(out const FortGameplayAttributeData OldValue);// 0xcf894f8
	void OnRep_TrapBaseDamage(out const FortGameplayAttributeData OldValue);// 0xcf89424
	void OnRep_TrapArmSpeed(out const FortGameplayAttributeData OldValue);// 0xcf89350
	void OnRep_RepairSpeed(out const FortGameplayAttributeData OldValue);// 0xcf8927c
	void OnRep_RepairCost(out const FortGameplayAttributeData OldValue);// 0xcf891a8
	void OnRep_MaxBuildLevel(out const FortGameplayAttributeData OldValue);// 0xcf890d4
	void OnRep_BuildSpeed(out const FortGameplayAttributeData OldValue);// 0xcf89000
	void OnRep_BuildingSkill(out const FortGameplayAttributeData OldValue);// 0xcf88f2c
	void OnRep_BuildCost(out const FortGameplayAttributeData OldValue);// 0xcf88e58

--------------------------------
Class: FortPlayerAttrSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData Stamina;//[Offset: 0x38, Size: 40]
	FortGameplayAttributeData StaminaRegenRate;//[Offset: 0x60, Size: 40]
	FortGameplayAttributeData StaminaRegenDelay;//[Offset: 0x88, Size: 40]
	FortGameplayAttributeData MaxStamina;//[Offset: 0xb0, Size: 40]
	FortGameplayAttributeData StaminaCost;//[Offset: 0xd8, Size: 40]
	FortGameplayAttributeData SprintCost;//[Offset: 0x100, Size: 40]
	FortGameplayAttributeData ItemRegenMaxStack;//[Offset: 0x130, Size: 40]
	FortGameplayAttributeData ItemRegenCooldown;//[Offset: 0x158, Size: 40]
	FortGameplayAttributeData ItemMaxStack;//[Offset: 0x180, Size: 40]
	FortGameplayAttributeData DoubleLootRollChance;//[Offset: 0x1a8, Size: 40]
	FortGameplayAttributeData DoubleItemLootChance;//[Offset: 0x1d0, Size: 40]
	FortGameplayAttributeData DoubleCraftChance;//[Offset: 0x1f8, Size: 40]
	FortGameplayAttributeData CraftingTimeMultiplier;//[Offset: 0x220, Size: 40]
	FortGameplayAttributeData CraftItemLevelBonusMin;//[Offset: 0x248, Size: 40]
	FortGameplayAttributeData CraftItemLevelBonusMax;//[Offset: 0x270, Size: 40]
	FortGameplayAttributeData ResourceHarvesting;//[Offset: 0x298, Size: 40]
	FortGameplayAttributeData HarvestingTool;//[Offset: 0x2c0, Size: 40]
	FortGameplayAttributeData ExtraLives;//[Offset: 0x2e8, Size: 40]
	FortGameplayAttributeData ResurrectTeammateDuration;//[Offset: 0x310, Size: 40]
	FortGameplayAttributeData Fortitude_Team;//[Offset: 0x338, Size: 40]
	FortGameplayAttributeData Offense_Team;//[Offset: 0x360, Size: 40]
	FortGameplayAttributeData Tech_Team;//[Offset: 0x388, Size: 40]
	FortGameplayAttributeData Resistance_Team;//[Offset: 0x3b0, Size: 40]
	FortGameplayAttributeData TurboBuildFirstInterval;//[Offset: 0x3d8, Size: 40]
	FortGameplayAttributeData TurboBuildInterval;//[Offset: 0x400, Size: 40]
	FortGameplayAttributeData BuildSpeedModifier;//[Offset: 0x428, Size: 40]
	FortGameplayAttributeData BuildCostModifier;//[Offset: 0x450, Size: 40]
	FortGameplayAttributeData ActiveEffectDuration;//[Offset: 0x478, Size: 40]
	void OnRep_Tech_Team(out const FortGameplayAttributeData OldValue);// 0xd129de8
	void OnRep_StaminaRegenRate(out const FortGameplayAttributeData OldValue);// 0xd129d14
	void OnRep_StaminaRegenDelay(out const FortGameplayAttributeData OldValue);// 0xd129c40
	void OnRep_StaminaCost(out const FortGameplayAttributeData OldValue);// 0xd129b6c
	void OnRep_Stamina(out const FortGameplayAttributeData OldValue);// 0xd129a98
	void OnRep_SprintCost(out const FortGameplayAttributeData OldValue);// 0xd1299c4
	void OnRep_ResurrectTeammateDuration(out const FortGameplayAttributeData OldValue);// 0xd1298f0
	void OnRep_ResourceHarvesting(out const FortGameplayAttributeData OldValue);// 0xd12981c
	void OnRep_Resistance_Team(out const FortGameplayAttributeData OldValue);// 0xd129748
	void OnRep_Offense_Team(out const FortGameplayAttributeData OldValue);// 0xd129674
	void OnRep_MaxStamina(out const FortGameplayAttributeData OldValue);// 0xd1295a0
	void OnRep_ItemRegenMaxStack(out const FortGameplayAttributeData OldValue);// 0xd1294cc
	void OnRep_ItemRegenCooldown(out const FortGameplayAttributeData OldValue);// 0xd1293f8
	void OnRep_ItemMaxStack(out const FortGameplayAttributeData OldValue);// 0xd129324
	void OnRep_HarvestingTool(out const FortGameplayAttributeData OldValue);// 0xd129250
	void OnRep_Fortitude_Team(out const FortGameplayAttributeData OldValue);// 0xd12917c
	void OnRep_ExtraLives(out const FortGameplayAttributeData OldValue);// 0xd1290a8
	void OnRep_DoubleLootRollChance(out const FortGameplayAttributeData OldValue);// 0xd128fd4
	void OnRep_DoubleItemLootChance(out const FortGameplayAttributeData OldValue);// 0xd128f00
	void OnRep_DoubleCraftChance(out const FortGameplayAttributeData OldValue);// 0xd128e2c
	void OnRep_CraftItemLevelBonusMin(out const FortGameplayAttributeData OldValue);// 0xd128d58
	void OnRep_CraftItemLevelBonusMax(out const FortGameplayAttributeData OldValue);// 0xd128c84
	void OnRep_CraftingTimeMultiplier(out const FortGameplayAttributeData OldValue);// 0xb6a4c88
	void OnRep_BuildSpeedModifier(out const FortGameplayAttributeData OldValue);// 0xd128bb0
	void OnRep_BuildCostModifier(out const FortGameplayAttributeData OldValue);// 0xd128adc

--------------------------------
Class: FortCharacterAttrSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData Fortitude;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData Offense;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData Tech;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData Resistance;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData MaxCharacterLevel;//[Offset: 0xd0, Size: 40]
	void OnRep_Tech(out const FortGameplayAttributeData OldValue);// 0xcf49bbc
	void OnRep_Resistance(out const FortGameplayAttributeData OldValue);// 0xcf49ae8
	void OnRep_Offense(out const FortGameplayAttributeData OldValue);// 0xcf49a14
	void OnRep_MaxCharacterLevel(out const FortGameplayAttributeData OldValue);// 0xcf49940
	void OnRep_Fortitude(out const FortGameplayAttributeData OldValue);// 0xcf4986c

--------------------------------
Class: FortWeaponAttrSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData WeaponChanceToNotConsumeAmmo;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData AccumulatedWeaponChanceToNotConsumeAmmo;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData WeaponRateOfFire;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData WeaponHorizontalRecoil;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData WeaponVerticalRecoil;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData WeaponSpreadReduction;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData WeaponReloadSpeed;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData WeaponAmmoClipSize;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData WeaponChargeRate;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData WeaponOverheatMultiplier;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData WeaponOverheatMaxMultiplier;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData WeaponOverheatCoolingMultiplier;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData WeaponOverheatCooldownMultiplier;//[Offset: 0x210, Size: 40]
	FortGameplayAttributeData CharacterItemDurabilityDecayModifier;//[Offset: 0x238, Size: 40]
	void OnRep_WeaponVerticalRecoil(out const FortGameplayAttributeData OldValue);// 0xd21e068
	void OnRep_WeaponSpreadReduction(out const FortGameplayAttributeData OldValue);// 0xd21df94
	void OnRep_WeaponReloadSpeed(out const FortGameplayAttributeData OldValue);// 0xd21dec0
	void OnRep_WeaponRateOfFire(out const FortGameplayAttributeData OldValue);// 0xd21ddec
	void OnRep_WeaponOverheatMultiplier(out const FortGameplayAttributeData OldValue);// 0xd21dd18
	void OnRep_WeaponOverheatMaxMultiplier(out const FortGameplayAttributeData OldValue);// 0xd21dc44
	void OnRep_WeaponOverheatCoolingMultiplier(out const FortGameplayAttributeData OldValue);// 0xd21db70
	void OnRep_WeaponOverheatCooldownMultiplier(out const FortGameplayAttributeData OldValue);// 0xd21da9c
	void OnRep_WeaponHorizontalRecoil(out const FortGameplayAttributeData OldValue);// 0xd21d9c8
	void OnRep_WeaponChargeRate(out const FortGameplayAttributeData OldValue);// 0xd21d8f4
	void OnRep_WeaponChanceToNotConsumeAmmo(out const FortGameplayAttributeData OldValue);// 0xd21d820
	void OnRep_WeaponAmmoClipSize(out const FortGameplayAttributeData OldValue);// 0xd21d74c
	void OnRep_CharacterItemDurabilityDecayModifier(out const FortGameplayAttributeData OldValue);// 0xd21d678
	void OnRep_AccumulatedWeaponChanceToNotConsumeAmmo(out const FortGameplayAttributeData OldValue);// 0xd21d5a4

--------------------------------
Class: FortHomebaseSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData Keep_Level;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData Keep_AmmoStash_Level;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData Keep_Armory_Level;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData Keep_Medical_Level;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData Keep_Storage_Level;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData Keep_Workshop_Level;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData Keep_StructureCap;//[Offset: 0x120, Size: 40]
	FortGameplayAttributeData Keep_PermaniteCap;//[Offset: 0x148, Size: 40]
	FortGameplayAttributeData Manor_Level;//[Offset: 0x170, Size: 40]
	FortGameplayAttributeData Manor_StructureCap;//[Offset: 0x198, Size: 40]
	FortGameplayAttributeData InventorySizeBonus;//[Offset: 0x1c0, Size: 40]
	FortGameplayAttributeData WorldInventorySizeBonus;//[Offset: 0x1e8, Size: 40]
	FortGameplayAttributeData StorageInventorySizeBonus;//[Offset: 0x210, Size: 40]
	FortGameplayAttributeData ResearchPointMaxBonus;//[Offset: 0x238, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Global;//[Offset: 0x260, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Schematics;//[Offset: 0x288, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Schematics_Ranged;//[Offset: 0x2b0, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Schematics_Melee;//[Offset: 0x2d8, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Schematics_Traps;//[Offset: 0x300, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Personnel;//[Offset: 0x328, Size: 40]
	FortGameplayAttributeData MaxLevelBonus_Alterations;//[Offset: 0x350, Size: 40]
	FortGameplayAttributeData rate_per_second_collector_Token_collectionresource_nodegatetoken01;//[Offset: 0x378, Size: 40]
	FortGameplayAttributeData max_capacity_collector_Token_collectionresource_nodegatetoken01;//[Offset: 0x3a0, Size: 40]
	FortGameplayAttributeData SupplyDrop_Magnitude;//[Offset: 0x3c8, Size: 40]
	FortGameplayAttributeData SupplyDrop_Level;//[Offset: 0x3f0, Size: 40]
	FortGameplayAttributeData ExpeditionSquadOne_Power;//[Offset: 0x418, Size: 40]
	FortGameplayAttributeData ExpeditionSquadTwo_Power;//[Offset: 0x440, Size: 40]
	FortGameplayAttributeData ExpeditionSquadThree_Power;//[Offset: 0x468, Size: 40]
	FortGameplayAttributeData ExpeditionSquadFour_Power;//[Offset: 0x490, Size: 40]
	FortGameplayAttributeData ExpeditionSquadFive_Power;//[Offset: 0x4b8, Size: 40]
	FortGameplayAttributeData ExpeditionSquadSix_Power;//[Offset: 0x4e0, Size: 40]
	void OnRep_WorldInventorySizeBonus(out const FortGameplayAttributeData OldValue);// 0xb67a60c
	void OnRep_SupplyDrop_Magnitude(out const FortGameplayAttributeData OldValue);// 0xd032dfc
	void OnRep_SupplyDrop_Level(out const FortGameplayAttributeData OldValue);// 0xd032d28
	void OnRep_StorageInventorySizeBonus(out const FortGameplayAttributeData OldValue);// 0xd032c54
	void OnRep_ResearchPointMaxBonus(out const FortGameplayAttributeData OldValue);// 0xd032b80
	void OnRep_rate_per_second_collector_Token_collectionresource_nodegatetoken01(out const FortGameplayAttributeData OldValue);// 0xd032aac
	void OnRep_MaxLevelBonus_Schematics_Traps(out const FortGameplayAttributeData OldValue);// 0xd0329d8
	void OnRep_MaxLevelBonus_Schematics_Ranged(out const FortGameplayAttributeData OldValue);// 0xd032904
	void OnRep_MaxLevelBonus_Schematics_Melee(out const FortGameplayAttributeData OldValue);// 0xd032830
	void OnRep_MaxLevelBonus_Schematics(out const FortGameplayAttributeData OldValue);// 0xd03275c
	void OnRep_MaxLevelBonus_Personnel(out const FortGameplayAttributeData OldValue);// 0xd032688
	void OnRep_MaxLevelBonus_Global(out const FortGameplayAttributeData OldValue);// 0xd0325b4
	void OnRep_MaxLevelBonus_Alterations(out const FortGameplayAttributeData OldValue);// 0xd0324e0
	void OnRep_max_capacity_collector_Token_collectionresource_nodegatetoken01(out const FortGameplayAttributeData OldValue);// 0xd03240c
	void OnRep_Manor_StructureCap(out const FortGameplayAttributeData OldValue);// 0xd032338
	void OnRep_Manor_Level(out const FortGameplayAttributeData OldValue);// 0xd032264
	void OnRep_Keep_Workshop_Level(out const FortGameplayAttributeData OldValue);// 0xd032190
	void OnRep_Keep_StructureCap(out const FortGameplayAttributeData OldValue);// 0xd0320bc
	void OnRep_Keep_Storage_Level(out const FortGameplayAttributeData OldValue);// 0xd031fe8
	void OnRep_Keep_PermaniteCap(out const FortGameplayAttributeData OldValue);// 0xd031f14
	void OnRep_Keep_Medical_Level(out const FortGameplayAttributeData OldValue);// 0xd031e40
	void OnRep_Keep_Level(out const FortGameplayAttributeData OldValue);// 0xd031d6c
	void OnRep_Keep_Armory_Level(out const FortGameplayAttributeData OldValue);// 0xd031c98
	void OnRep_Keep_AmmoStash_Level(out const FortGameplayAttributeData OldValue);// 0xd031bc4
	void OnRep_InventorySizeBonus(out const FortGameplayAttributeData OldValue);// 0xd031af0

--------------------------------
Class: FortConstructorBASE.BuildingProp.BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	BASEGameplayEffect[] BASEBuildingApplicationEffects;//[Offset: 0xbc8, Size: 16]
	BASEGameplayEffect[] BASEFriendlyApplicationEffects;//[Offset: 0xbd8, Size: 16]
	BASEGameplayEffect[] BASEFriendlyApplicationTrapEffects;//[Offset: 0xbe8, Size: 16]
	BASEGameplayEffect[] BASEEnemyApplicationEffects;//[Offset: 0xbf8, Size: 16]
	GameplayTag InBASETag;//[Offset: 0xc08, Size: 8]
	int NodesToAffect;//[Offset: 0xc10, Size: 4]
	int BaseLevel;//[Offset: 0xc14, Size: 4]
	PatternBASEEffect[] BASEEffectPatterns;//[Offset: 0xc18, Size: 16]
	FortBaseWeaponStats DamageStats;//[Offset: 0xc28, Size: 360]
	FortDamageSet* DamageAttributeSet;//[Offset: 0xd90, Size: 8]
	void StopBuildingActorVisuals(BuildingSMActor* BuildingActor, StaticMeshComponent* EffectMeshComp);// 0xbbc0600
	void StartBuildingActorVisuals(BuildingSMActor* BuildingActor, StaticMeshComponent* EffectMeshComp);// 0xbbc0600
	void OnPlaced(AbilitySystemComponent* InstigatorAbilitySystemComponent);// 0xbbc0600
	void OnPawnRemovedFromBase(FortPawn* Pawn);// 0xbbc0600
	void OnPawnAddedToBase(FortPawn* Pawn);// 0xbbc0600
	void OnNeighborEndPlay(Actor* Actor, const byte EndPlayReason);// 0xcf8ca3c
	void OnNeighborDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xcf8c7dc
	void OnBasePawnDied(FortPawn* Pawn);// 0xcf8c734
	void OnBasePawnDestroyed(FortPawn* Pawn);// 0xcf8c68c
	void OnBaseCollisionUnTouched(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xcf8c528
	void OnBaseCollisionTouched(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xcf8c314
	void GetResourceAmountsBasedOnUpgradeTier(int TierOneUpgradeAmount, int TierTwoUpgradeAmount, int TierThreeUpgradeAmount, out int WoodResult, out int StoneResult, out int MetalResult);// 0xcf8c0fc
	BuildingSMActor*[] GetBuildingActorsInBase();// 0xcf8c05c
	void AddNeighborToBaseOnFinishedConstruction(BuildingSMActor* PlaceOn);// 0xcf8bfb4

--------------------------------
Class: BASEGameplayEffect
	class GameplayEffect* Effect;//[Offset: 0x0, Size: 8]
	int LevelOverride;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PatternBASEEffect
	BuildingEditModeMetadata* Pattern;//[Offset: 0x0, Size: 8]
	StaticMesh* Mesh;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortBaseWeaponStats.TableRowBase
	int BaseLevel;//[Offset: 0xc, Size: 4]
	FName NamedWeightRow;//[Offset: 0x10, Size: 8]
	float DmgPB;//[Offset: 0x18, Size: 4]
	float DmgMid;//[Offset: 0x1c, Size: 4]
	float DmgLong;//[Offset: 0x20, Size: 4]
	float DmgMaxRange;//[Offset: 0x24, Size: 4]
	float EnvDmgPB;//[Offset: 0x28, Size: 4]
	float EnvDmgMid;//[Offset: 0x2c, Size: 4]
	float EnvDmgLong;//[Offset: 0x30, Size: 4]
	float EnvDmgMaxRange;//[Offset: 0x34, Size: 4]
	float ImpactDmgPB;//[Offset: 0x38, Size: 4]
	float ImpactDmgMid;//[Offset: 0x3c, Size: 4]
	float ImpactDmgLong;//[Offset: 0x40, Size: 4]
	float ImpactDmgMaxRange;//[Offset: 0x44, Size: 4]
	bool bForceControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float RngPB;//[Offset: 0x4c, Size: 4]
	float RngMid;//[Offset: 0x50, Size: 4]
	float RngLong;//[Offset: 0x54, Size: 4]
	float RngMax;//[Offset: 0x58, Size: 4]
	CurveTable* DmgScaleTable;//[Offset: 0x60, Size: 8]
	FName DmgScaleTableRow;//[Offset: 0x68, Size: 8]
	float DmgScale;//[Offset: 0x70, Size: 4]
	CurveTable* EnvDmgScaleTable;//[Offset: 0x78, Size: 8]
	FName EnvDmgScaleTableRow;//[Offset: 0x80, Size: 8]
	float EnvDmgScale;//[Offset: 0x88, Size: 4]
	CurveTable* ImpactDmgScaleTable;//[Offset: 0x90, Size: 8]
	FName ImpactDmgScaleTableRow;//[Offset: 0x98, Size: 8]
	float ImpactDmgScale;//[Offset: 0xa0, Size: 4]
	FName SurfaceRatioRowName;//[Offset: 0xa4, Size: 8]
	float DamageZone_Light;//[Offset: 0xac, Size: 4]
	float DamageZone_Normal;//[Offset: 0xb0, Size: 4]
	float DamageZone_Critical;//[Offset: 0xb4, Size: 4]
	float DamageZone_Vulnerability;//[Offset: 0xb8, Size: 4]
	float KnockbackMagnitude;//[Offset: 0xbc, Size: 4]
	float MidRangeKnockbackMagnitude;//[Offset: 0xc0, Size: 4]
	float LongRangeKnockbackMagnitude;//[Offset: 0xc4, Size: 4]
	float KnockbackZAngle;//[Offset: 0xc8, Size: 4]
	float ShortRangeHitImpulseMagnitude;//[Offset: 0xcc, Size: 4]
	float MidRangeHitImpulseMagnitude;//[Offset: 0xd0, Size: 4]
	float LongRangeHitImpulseMagnitude;//[Offset: 0xd4, Size: 4]
	float HitImpulseZBias;//[Offset: 0xd8, Size: 4]
	float StunTime;//[Offset: 0xdc, Size: 4]
	float StunScale;//[Offset: 0xe0, Size: 4]
	DataTable* Durability;//[Offset: 0xe8, Size: 8]
	FName DurabilityRowName;//[Offset: 0xf0, Size: 8]
	float DurabilityScale;//[Offset: 0xf8, Size: 4]
	float DurabilityPerUse;//[Offset: 0xfc, Size: 4]
	float FullChargeDurabilityPerUse;//[Offset: 0x100, Size: 4]
	float DiceCritChance;//[Offset: 0x104, Size: 4]
	float DiceCritDamageMultiplier;//[Offset: 0x108, Size: 4]
	float ReloadTime;//[Offset: 0x10c, Size: 4]
	float ReloadScale;//[Offset: 0x110, Size: 4]
	enum ReloadType;//[Offset: 0x114, Size: 1]
	bool bAllowReloadInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	bool bReloadInterruptIsImmediate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 1]
	int NumIndividualBulletsToReload;//[Offset: 0x118, Size: 4]
	int ClipSize;//[Offset: 0x11c, Size: 4]
	float ClipScale;//[Offset: 0x120, Size: 4]
	int InitialClips;//[Offset: 0x124, Size: 4]
	int CartridgePerFire;//[Offset: 0x128, Size: 4]
	int AmmoCostPerFire;//[Offset: 0x12c, Size: 4]
	int MaxAmmoCostPerFire;//[Offset: 0x130, Size: 4]
	float MinChargeTime;//[Offset: 0x134, Size: 4]
	float MaxChargeTime;//[Offset: 0x138, Size: 4]
	float ChargeDownTime;//[Offset: 0x13c, Size: 4]
	bool bAutoDischarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	float MaxChargeTimeUntilDischarge;//[Offset: 0x144, Size: 4]
	float MinChargeDamageMultiplier;//[Offset: 0x148, Size: 4]
	float MaxChargeDamageMultiplier;//[Offset: 0x14c, Size: 4]
	CurveFloat* ChargeDamageMultiplierCurve;//[Offset: 0x150, Size: 8]
	float EquipAnimRate;//[Offset: 0x158, Size: 4]
	float QuickBarSlotCooldownDuration;//[Offset: 0x15c, Size: 4]

--------------------------------
Class: ProxyGameplayCueDamage
	GameplayEffectContextHandle EffectContext;//[Offset: 0x0, Size: 24]
	uint32 ProxyGameplayCueDamageMagnitude;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CreativePlayerHealthInfoComponent.FortPlayerHealthInfoComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnBossPlayerChanged;//[Size: 16]
	FortMinigame* ControllingMinigame;//[Offset: 0x120, Size: 8]
	FortPlayerStateAthena* BossPlayerState;//[Offset: 0x128, Size: 8]
	void OnRep_BossPlayerState();// 0xce801c0
	void OnMinigameStarted();// 0xce801ac
	void OnMinigamePlayerLeftMinigame(UniqueNetIdRepl UniqueNetId, bool bIsLocalPlayer);// 0xce7ff88
	void OnMinigamePlayerJoinedMinigame(UniqueNetIdRepl UniqueNetId, bool bIsLocalPlayer);// 0xce7fd64
	void OnMinigamePlayerDeadStateChanged(FortPlayerStateAthena* PlayerState, bool bIsDead);// 0xce7fc74
	void OnMinigamePlayerClassApplied(FortPlayerState* PlayerState, byte ClassSlotIndex);// 0xce7fb8c
	void OnMinigamePlayerChangedTeam(FortPlayerState* PlayerState, byte TeamId, byte OldTeamId, bool bTeamChangedWithoutRespawn);// 0xce7fa1c
	void OnMinigameEnded();// 0xce7fa08

--------------------------------
Class: FortPlayerHealthInfoComponent.ActorComponent.Object
	FortTeamHealthInfo*[] TeamHealthInfoArray;//[Offset: 0xb0, Size: 16]
	<byte,FortTeamHealthInfo*> TeamInfoToTeamHealthMap;//[Offset: 0xc0, Size: 80]
	void OnRep_TeamHealthInfoArray();// 0xd16e9f8
	void OnHealthChanged(FortTeamHealthInfo* TeamHealthInfo);// 0xd16e950

--------------------------------
Class: FortTeamHealthInfo.Info.Actor.Object
	FortPlayerHealthInfoComponent* OwnerHealthComponent;//[Offset: 0x230, Size: 8]
	FortTeamInfo* FortTeamInfo;//[Offset: 0x238, Size: 8]
	PrivateTeamDataArray RepData;//[Offset: 0x240, Size: 384]
	byte TeamNum;//[Offset: 0x3c0, Size: 1]
	void OnRep_RepDataReplicated();// 0xd1e04e8

--------------------------------
Class: MinigamePlayerBucket
	byte TeamIdAtGameStart;//[Offset: 0x0, Size: 1]
	byte TeamIdAtRoundStart;//[Offset: 0x1, Size: 1]
	float DesiredTeamSizePercent;//[Offset: 0x4, Size: 4]
	UniqueNetIdRepl[] PlayerIds;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MinigamePlayerPersistentStartPoint
	Vector Location;//[Offset: 0x0, Size: 12]
	Quat Rotation;//[Offset: 0x10, Size: 16]
	UniqueNetIdRepl UniqueId;//[Offset: 0x20, Size: 40]
	bool bConsumed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: MinigameScoreboardBucketRow.MingiameScoreboardRow
	int Standing;//[Offset: 0x38, Size: 4]
	int BucketIndex;//[Offset: 0x3c, Size: 4]
	MinigameScoreboardPlayerRow[] PlayerRows;//[Offset: 0x40, Size: 16]

--------------------------------
Class: MingiameScoreboardRow
	FText Name;//[Offset: 0x0, Size: 24]
	int TeamColorIndex;//[Offset: 0x18, Size: 4]
	MinigameScoreboardValue[] Values;//[Offset: 0x20, Size: 16]
	int WinCount;//[Offset: 0x30, Size: 4]
	bool bHighlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MinigameScoreboardValue
	class FortMinigameStatFilter* StatFilter;//[Offset: 0x0, Size: 8]
	int Value;//[Offset: 0x8, Size: 4]
	bool bHighlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: MinigameScoreboardPlayerRow.MingiameScoreboardRow
	FortPlayerState* PlayerState;//[Offset: 0x38, Size: 8]

--------------------------------
Class: MinigameStatRow
	FText PlayerName;//[Offset: 0x0, Size: 24]
	int TeamColorIndex;//[Offset: 0x18, Size: 4]
	FText[] PlayerStats;//[Offset: 0x20, Size: 16]
	FText[] CumulativePlayerStats;//[Offset: 0x30, Size: 16]
	bool bIsTeamRow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: LevelSaveRecordCollection.Object
	LevelSaveRecordCollectionItem[] Items;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelSaveRecordCollectionItem
	LevelSaveRecord* LevelSaveRecord;//[Offset: 0x0, Size: 40]
	FName RecordUniqueName;//[Offset: 0x28, Size: 8]
	Transform Transform;//[Offset: 0x30, Size: 48]

--------------------------------
Class: FortPlaysetPropItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FortCreativeTagsHelper CreativeTagsHelper;//[Offset: 0x358, Size: 16]
	LevelSaveRecord* ActorSaveRecord;//[Offset: 0x368, Size: 8]
	FortPlaysetItemDefinition*[] AssociatedPlaysets;//[Offset: 0x370, Size: 16]
	bool bExplicitlyNotBrowsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 1]
	bool bImplicitlyNotBrowsable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x380, Size: 1]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0xd88ce50
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0xd88cbec

--------------------------------
Class: FortVolumeObjectTrackingComponent.ActorComponent.Object
	FortVolume* ParentVolume;//[Offset: 0xb0, Size: 8]
	FortCreativeClassInstanceTracker TransientTracker;//[Offset: 0x120, Size: 192]
	ObjectTracker_Legacy ObjectTracker;//[Offset: 0x1e0, Size: 312]
	FortCreativeBudgetTracker BudgetTracker;//[Offset: 0x318, Size: 408]
	FortCreativeClassInstanceTracker ClassTracker;//[Offset: 0x4b0, Size: 192]
	bool bRunNewVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool bHeatmapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	bool bHeatmapIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	int ObjectTrackingHeatmapSize;//[Offset: 0x574, Size: 4]
	byte[] ObjectTrackingHeatmapHighPrecision;//[Offset: 0x578, Size: 16]
	byte[] ObjectTrackingOverBudgetHeatmap;//[Offset: 0x588, Size: 16]
	int ThermalGroupMatrixSizeX;//[Offset: 0x59c, Size: 4]
	int ThermalGroupMatrixSizeY;//[Offset: 0x5a0, Size: 4]
	byte[] ThermalGroupCostMatrix;//[Offset: 0x5a8, Size: 16]
	float TargetUpdateTime;//[Offset: 0x5b8, Size: 4]
	float CreativeHeatmapThermometerInfluenceDistanceMultiplier;//[Offset: 0x5bc, Size: 4]
	FortCreativeGridCellBudget[] CreativeHeatmapThermometerBudgets;//[Offset: 0x5c0, Size: 16]
	float CreativeHeatmapThermometerCellSize;//[Offset: 0x5d0, Size: 4]
	void RemoveActor(Actor* Actor, ActorComponent* ActorComponent, Pawn* InstigatorPawn, FortVolume* Volume);// 0xd211a24
	void OnRep_BudgetTracker();// 0xd211a10
	void On_RepObjectTrackingHeatmap();// 0xd2119fc
	bool IsHeatmapEnabled();// 0xd2119c4
	void AddActorAtLocation(Actor* Actor, out const Vector Location);// 0xd2118d4

--------------------------------
Class: FortCreativeClassInstanceTracker
	class Object[] ChildClassesAtLimit;//[Offset: 0xa0, Size: 16]
	class Object[] ParentClassesAtLimit;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: ObjectTracker_Legacy
	MetricConfiguration_Legacy* MetricConfiguration;//[Offset: 0xf8, Size: 8]

--------------------------------
Class: MetricConfiguration_Legacy.Object
	class CategoryMetric[] CategoryClasses;//[Offset: 0x28, Size: 16]
	VersionedMetricWrapper[] MetricClasses;//[Offset: 0x38, Size: 16]
	ObjectMetric_Legacy*[] Metrics;//[Offset: 0x48, Size: 16]
	<enum,CategoryMetric*> CategoryToMetric;//[Offset: 0x58, Size: 80]
	CategoryMetric*[] CategoryMetrics;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: CategoryMetric.ObjectMetric_Legacy.Object
	ObjectMetric_Legacy*[] Metrics;//[Offset: 0xb0, Size: 16]
	VersionedBudget[] VersionedBudgets;//[Offset: 0xc8, Size: 16]

--------------------------------
Class: ObjectMetric_Legacy.Object

--------------------------------
Class: VersionedBudget
	byte Version;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VersionedMetricWrapper
	byte IntroducedVersion;//[Offset: 0x0, Size: 1]
	byte DeprecatedVersion;//[Offset: 0x1, Size: 1]
	class ObjectMetric_Legacy* Class;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FortCreativeBudgetTracker
	FortCreativeBudget[] Budgets;//[Offset: 0x10, Size: 16]
	uint32[] AssetInstances;//[Offset: 0x70, Size: 16]
	uint32[] AssetLastInstances;//[Offset: 0x80, Size: 16]
	<Object*,int> UsedAssetDependencies;//[Offset: 0x148, Size: 80]

--------------------------------
Class: DevicesDataTrackingComponent.ActorComponent.Object
	DeviceTrackedData*[] DevicesTrackedData;//[Offset: 0xb0, Size: 16]
	DeviceTrackedData* AddNewTracker(class Object DataTrackedClass);// 0xce8fa84

--------------------------------
Class: DeviceTrackedData.Object

--------------------------------
Class: VolumeActorStats
	<byte,int> BuildingTypeCounts;//[Offset: 0x0, Size: 80]

--------------------------------
Class: AthenaNavInvokerBox.Actor.Object
	float GenerationRange;//[Offset: 0x220, Size: 4]
	NavigationInvokerComponent* InvokerComp;//[Offset: 0x228, Size: 8]
	void SetInvokerEnabled(bool bEnable);// 0xce376e0

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb0, Size: 4]
	float TileRemovalRadius;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: FortCreativeTimerObjective.BuildingProp.BuildingTimeOfDayLights.BuildingAutoNav.BuildingSMActor.BuildingActor.Actor.Object
	TimerObjectiveHUDData HUDData;//[Offset: 0xbc8, Size: 8]
	FortVolume* Volume;//[Offset: 0xbd0, Size: 8]
	bool MaintainInteractionWhileLookingAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 1]
	void SetHUDData(TimerObjectiveHUDData NewHUDData);// 0xcfbe1f8
	void OnGameStateSet(FortGameState* GameState);// 0xcfbe150
	void BroadcastUpdateToHUD();// 0xcfbe13c
	FText BP_GetLabelText();// 0xbbc0600
	FName BP_GetDisplayTextStyle();// 0xbbc0600
	void AddTimerObjectiveToVolume();// 0xcfbe128

--------------------------------
Class: TimerObjectiveHUDData
	float TimeLeft;//[Offset: 0x0, Size: 4]
	bool bIsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: CreativeIslandResourceManagerComponent.ActorComponent.Object
	CreativeIslandResource[] Resources;//[Offset: 0xb0, Size: 16]
	bool RequestResource(const FName Tag, out const Vector WorldLocation);// 0xce7c550
	void FreeResource(const FName Tag, out const Vector WorldLocation);// 0xce7c460

--------------------------------
Class: CreativeIslandResource
	float WorldRadius;//[Offset: 0x14, Size: 4]
	FName Tag;//[Offset: 0x18, Size: 8]
	int MaxCount;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortPlayerSaveComponent.ActorComponent.Object
	VkPersistenceManager* PersistenceManager;//[Offset: 0x130, Size: 8]

--------------------------------
Class: VkPersistenceManager.Object

--------------------------------
Class: FortVolumePersistenceOptions.ActorComponent.Object
	bool bAllowPlayerToClearData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PersistenceDevicesCount;//[Offset: 0xb4, Size: 4]
	<FortCreativePersistenceComponent*,FortCreativePersistenceOptions> FortCreativePersistenceOptionsMap;//[Offset: 0xb8, Size: 80]
	void UpdatePersistenceComponent(const FortCreativePersistenceComponent* FortCreativePersistenceComponent, out const FortCreativePersistenceOptions FortCreativePersistenceOptions);// 0xd212338
	void UnregistryFortCreativePersistenceComponent(const FortCreativePersistenceComponent* FortCreativePersistenceComponent);// 0xd212290
	void RegistryFortCreativePersistenceComponent(const FortCreativePersistenceComponent* FortCreativePersistenceComponent, out const FortCreativePersistenceOptions FortCreativePersistenceOptions);// 0xd21219c
	bool IsTherePersistenceDevices();// 0xd212164
	bool IsPlayerClearDataOptionAllowed();// 0xd21212c
	FortCreativePersistenceComponent* GetFirstOrderedPersistenceComponent();// 0xd2120f8

--------------------------------
Class: FortCreativePersistenceComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnPlayerDataLoaded;//[Size: 16]
	FortInventory_SaveEntrySettings SaveEntrySettings;//[Offset: 0xc0, Size: 8]
	class FortMinigameStatFilter[] StatsToSave;//[Offset: 0xc8, Size: 16]
	class FortItemDefinition[] ItemClassesNotToSave;//[Offset: 0xd8, Size: 16]
	PendingToApplyData[] PendingToApplyData;//[Offset: 0xe8, Size: 16]
	bool StorePlayerRelatedData(PlayerState* PlayerState, const FortMinigame* Minigame);// 0xcfbb7a4
	void StoreAllMinigamePlayersData(const FortMinigame* Minigame);// 0xcfbb6fc
	void OnPlayerPawnFinishedTeleported(FortPlayerPawn* FortPlayerPawn);// 0xcfbb654
	void LoadPlayersDataNeededBeforeSpawn(FortMinigame* Minigame);// 0xcfbb5ac
	void LoadPlayersDataNeededAfterSpawn(FortMinigame* Minigame);// 0xcfbb504
	void LoadPlayerRelatedData(PlayerState* PlayerState, FortMinigame* Minigame);// 0xcfbb420
	static float GetAutoSaveInterval();// 0xcfbb3ec
	void ClearPlayerSpecificData(PlayerState* PlayerState, FortMinigame* Minigame);// 0xcfbb308
	void ClearPlayerRelatedData(PlayerState* PlayerState, FortMinigame* Minigame);// 0xcfbb224
	void ClearAllPlayersSpecificData(FortMinigame* Minigame);// 0xcfbb17c

--------------------------------
Class: FortInventory_SaveEntrySettings
	bool bIncludeHealthAndShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIncludeClassSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIncludeTeamIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bIncludeMinigameStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bIncludeInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bIncludeResources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bIncludeCheckpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bIncludePlayerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]

--------------------------------
Class: PendingToApplyData
	FortPlayerControllerAthena* PlayerController;//[Offset: 0x0, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x8, Size: 8]
	FortMinigame* Minigame;//[Offset: 0x10, Size: 8]
	FortInventory_SaveEntry SaveEntry;//[Offset: 0x20, Size: 144]

--------------------------------
Class: FortInventory_SaveEntry
	DateTime MostRecentUseTime;//[Offset: 0x0, Size: 8]
	FortInventory_SaveEntryFloat Health;//[Offset: 0x8, Size: 8]
	FortInventory_SaveEntryFloat Shield;//[Offset: 0x10, Size: 8]
	FortInventory_SaveEntryUint8 ClassSlot;//[Offset: 0x18, Size: 2]
	FortInventory_SaveEntryUint8 TeamIndex;//[Offset: 0x1a, Size: 2]
	FortInventory_SaveEntryItems Items;//[Offset: 0x20, Size: 24]
	FortInventory_SaveEntryCheckpoints Checkpoints;//[Offset: 0x38, Size: 24]
	FortInventory_SaveEntryTransform PlayerTransform;//[Offset: 0x50, Size: 32]
	FortInventory_MinigameStats MinigameStats;//[Offset: 0x70, Size: 24]

--------------------------------
Class: FortInventory_SaveEntryFloat.FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase

--------------------------------
Class: FortInventory_SaveEntryBase
	bool bHasBeenStored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortInventory_SaveEntryUint8.FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase
	byte Value;//[Offset: 0x1, Size: 1]

--------------------------------
Class: FortInventory_SaveEntryItems.FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase
	FortItemEntry[] FortItemEntries;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortInventory_SaveEntryCheckpoints.FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase
	FortInventory_CheckpointEntry[] CheckpointsList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortInventory_CheckpointEntry
	GUID LevelSpawnableGuid;//[Offset: 0x0, Size: 16]
	DateTime MostRecentUseTime;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortInventory_SaveEntryTransform.FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase
	Vector LocationValue;//[Offset: 0x4, Size: 12]
	Quat RotationValue;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortInventory_MinigameStats.FortInventory_SaveEntryAttributeBase.FortInventory_SaveEntryBase
	FortInventory_PlayerStatEntry[] PlayerStatsList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortInventory_PlayerStatEntry
	class FortMinigameStatFilter* StatFilter;//[Offset: 0x0, Size: 8]
	int Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortCreativePersistenceOptions
	bool bAllowPlayerToClearData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAISpawnGroupUpgradeProbabilities.Object
	bool bIsGuaranteedUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FortAIPawnUpgradeProbability[] UpgradeProbabilities;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortAIPawnUpgradeProbability
	GameplayTagQuery TagQuery;//[Offset: 0x0, Size: 72]
	CurveTableRowHandle UpgradeProbability;//[Offset: 0x48, Size: 16]

--------------------------------
Class: FortAISpawnGroupCapsCategorySet.Object
	FortAIEncounterSpawnGroupCapsCategory[] SpawnGroupCapsCategories;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortAISpawnerData
	GUID SpawnGroupInstanceGuid;//[Offset: 0x0, Size: 16]
	FortSpawnAIRequest ReservedSpawnRequest;//[Offset: 0x10, Size: 80]

--------------------------------
Class: FortSpawnAIRequest
	GUID SpawnGroupInstanceGuid;//[Offset: 0x0, Size: 16]
	int EnemyIndex;//[Offset: 0x10, Size: 4]
	Vector SpawnLocation;//[Offset: 0x14, Size: 12]
	Rotator SpawnRotation;//[Offset: 0x20, Size: 12]
	Actor* SpawnPoint;//[Offset: 0x30, Size: 8]
	FortAbilitySet*[] AbilitySetsToGrantOnSpawn;//[Offset: 0x38, Size: 16]
	bool bIgnoreCollisionWhenSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: FortSpawnPointsPercentageCurveSequenceInstanceInfo.FortCurveSequenceInstanceInfo
	FortSpawnPointsPercentageCurveSequence* SpawnPointsPercentageCurveSequence;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortCurveSequenceInstanceInfo

--------------------------------
Class: FortIntensityCurveSequenceInstanceInfo.FortCurveSequenceInstanceInfo
	FortIntensityCurveSequence* IntensityCurveSequence;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortEncounterSettingsFixedPace
	float RiftSpawnInterval;//[Offset: 0x0, Size: 4]
	int RiftSpawnCount;//[Offset: 0x4, Size: 4]
	int AIMaxCount;//[Offset: 0x8, Size: 4]
	float SpawnAIIntervalTime;//[Offset: 0xc, Size: 4]
	int SpawnAIIntervalCount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortAIBaseLootDropRow.TableRowBase
	int Priority;//[Offset: 0x8, Size: 4]
	float ItemDropChance;//[Offset: 0xc, Size: 4]
	FName WorldItemLootTierGroup;//[Offset: 0x10, Size: 8]
	FName WorldItemInstancedLootTierGroup;//[Offset: 0x18, Size: 8]
	FName AccountItemLootTierGroup;//[Offset: 0x20, Size: 8]
	GameplayTagContainer AITagsContainer;//[Offset: 0x28, Size: 32]

--------------------------------
Class: FortAILootDropModifierRow.TableRowBase
	int Priority;//[Offset: 0x8, Size: 4]
	float ItemDropChanceMultiplier;//[Offset: 0xc, Size: 4]
	FName WorldItemLootTierGroup;//[Offset: 0x10, Size: 8]
	GameplayTagContainer AITagsContainer;//[Offset: 0x18, Size: 32]

--------------------------------
Class: FortIntensityCurveSequenceProgression.DataAsset.Object
	FortInstensityCurveSequenceProgression[] IntensityCurveSequences;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortInstensityCurveSequenceProgression
	FortIntensityCurveSequence* CurveSequence;//[Offset: 0x0, Size: 8]
	CurveTableRowHandle SelectionWeight;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AIEncounterSpawnGroupWeights

--------------------------------
Class: SpawnGroupInstanceInfo
	FortAISpawnGroup* SpawnGroup;//[Offset: 0x0, Size: 8]
	int NumActiveAlive;//[Offset: 0x8, Size: 4]
	int TotalGroupCost;//[Offset: 0xc, Size: 4]
	int SpawnPointsUsed;//[Offset: 0x10, Size: 4]
	int NumEngaged;//[Offset: 0x14, Size: 4]
	bool bReadyToSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bFinishedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	GUID GroupGuid;//[Offset: 0x1c, Size: 16]
	int EnemySpawnDataIndex;//[Offset: 0x2c, Size: 4]
	float TimeSelected;//[Offset: 0x30, Size: 4]
	int NextEnemyToSpawnIndex;//[Offset: 0x34, Size: 4]
	GameplayTagContainer UpgradeTags;//[Offset: 0x38, Size: 32]
	FortAISpawnGroupUpgradeUIData UpgradeUIData;//[Offset: 0x58, Size: 128]
	FortAIPawnUpgradeData[] PawnUpgrades;//[Offset: 0xd8, Size: 16]
	FortGameplayModifierItemDefinition*[] ModifiersForAllPawns;//[Offset: 0xe8, Size: 16]
	FortAIPawn*[] PawnList;//[Offset: 0xf8, Size: 16]

--------------------------------
Class: FortAIEncounterWaveProgressEstimation
	float SectionProgressEstimate;//[Offset: 0x0, Size: 4]
	float SectionStartTime;//[Offset: 0x4, Size: 4]
	float LastWaveProgressUpdateTime;//[Offset: 0x8, Size: 4]
	float PeakAndFadeWavePercentage;//[Offset: 0xc, Size: 4]
	float MaxAdjustmentPerSecond;//[Offset: 0x10, Size: 4]
	byte CurrentSection;//[Offset: 0x14, Size: 1]
	int NumberOfWaveSegments;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortGoalActorEncounterDataManagerPair
	Actor* GoalActor;//[Offset: 0x0, Size: 8]
	FortAIDirectorDataManager* EncounterDataManager;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortAIEncounterRiftManager.Object
	FortAIEncounterInfo* MyEncounter;//[Offset: 0x38, Size: 8]
	FortAIDirector* AIDirector;//[Offset: 0x40, Size: 8]
	FortAIEncounterSpawnArea CurrentSpawnArea;//[Offset: 0x48, Size: 72]
	FortAIEncounterSpawnArea FutureSpawnArea;//[Offset: 0x90, Size: 72]
	float UpdateIntervalTimeSeconds;//[Offset: 0xd8, Size: 4]
	int NumRiftsToUse;//[Offset: 0xdc, Size: 4]
	int MinRiftsToUse;//[Offset: 0xe0, Size: 4]
	FortEncounterSettings EncounterSettings;//[Offset: 0xe8, Size: 184]
	float ExtraSpawnLocationPercentage;//[Offset: 0x1a0, Size: 4]
	EncounterEnvironmentQueryInfo CurrentEnvironmentQueryInfo;//[Offset: 0x1a8, Size: 40]
	EncounterEnvironmentQueryInfo FallbackEnvironmentQueryInfo;//[Offset: 0x1d0, Size: 40]
	FortAIEncounterQueryDirectionTracker EncounterQueryDirectionTracker;//[Offset: 0x1f8, Size: 72]
	class BuildingRift* RiftClassTemplate;//[Offset: 0x240, Size: 8]
	float LastObjectiveBatchPathCostUpdateTime;//[Offset: 0x248, Size: 4]
	float LastPlayerBatchPathCostUpdateTime;//[Offset: 0x24c, Size: 4]
	FortMission* GetAssociatedMission();// 0xceab574

--------------------------------
Class: FortAIEncounterSpawnArea
	EncounterEnvironmentQueryInstance[] QueryInstances;//[Offset: 0x0, Size: 16]
	FortAIEncounterRift[] PendingRifts;//[Offset: 0x10, Size: 16]
	FortAIEncounterRift[] Rifts;//[Offset: 0x20, Size: 16]
	FortPathCostEstimator*[] PathEstimators;//[Offset: 0x30, Size: 16]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUsingFallbackQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	enum SpawnLocationManagementMode;//[Offset: 0x42, Size: 1]

--------------------------------
Class: EncounterEnvironmentQueryInstance
	EncounterEnvironmentQueryInfo EnvironmentQueryInfo;//[Offset: 0x0, Size: 40]
	int QueryID;//[Offset: 0x28, Size: 4]
	bool bIsWaitingForQueryResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte ChosenDirection;//[Offset: 0x2d, Size: 1]
	Vector[] QueryLocations;//[Offset: 0x30, Size: 16]
	BuildingRift*[] FoundRifts;//[Offset: 0x40, Size: 16]
	int NumTimesUsed;//[Offset: 0x50, Size: 4]

--------------------------------
Class: FortAIEncounterRift
	int QueryID;//[Offset: 0x0, Size: 4]
	Vector RiftLocation;//[Offset: 0x4, Size: 12]
	BuildingRift* RiftActor;//[Offset: 0x10, Size: 8]
	FortRiftReservationHandle RiftReservationHandle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortRiftReservationHandle
	int RiftReservationID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: FortPathCostEstimator.Object
	Actor* GoalActor;//[Offset: 0x28, Size: 8]
	FortNavigationGraph* NavGraph;//[Offset: 0x30, Size: 8]

--------------------------------
Class: FortAIEncounterQueryDirectionTracker
	bool bHasTriedPreviousDirections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte[] PreviousQueryDirections;//[Offset: 0x8, Size: 16]
	byte[] ChosenDirections;//[Offset: 0x18, Size: 16]
	byte[] FailedDirections;//[Offset: 0x28, Size: 16]
	byte[] AvailableDirections;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortGameplayMutator_AILevelVariance.FortGameplayMutator.Info.Actor.Object
	float MinVariance;//[Offset: 0x250, Size: 4]
	float MaxVariance;//[Offset: 0x254, Size: 4]

--------------------------------
Class: FortGameplayMutator_AIEncounterModifierTags.FortGameplayMutator.Info.Actor.Object
	GameplayTagContainer GameplayTags;//[Offset: 0x250, Size: 32]
	FortEncounterMutatorReplacedTag[] TagsToReplace;//[Offset: 0x270, Size: 16]
	byte RequiredEncounterAssociatedMissionType;//[Offset: 0x280, Size: 1]

--------------------------------
Class: FortEncounterMutatorReplacedTag
	GameplayTagContainer TagsToRemove;//[Offset: 0x0, Size: 32]
	GameplayTagContainer TagsToAdd;//[Offset: 0x20, Size: 32]

--------------------------------
Class: MinimapGoalByTagColorsData
	GameplayTagContainer GoalTags;//[Offset: 0x0, Size: 32]
	LinearColor MinimapColor;//[Offset: 0x20, Size: 16]

--------------------------------
Class: BuildingTrapDefender.BuildingTrapFloor.BuildingTrap.BuildingSMActor.BuildingActor.Actor.Object
	enum LastInteractError;//[Offset: 0xcc8, Size: 1]
	FortAIPawn* DefenderPawn;//[Offset: 0xcd0, Size: 8]
	FortDefenderItemDefinition* DefenderItemDefinition;//[Offset: 0xcd8, Size: 8]
	int DefenderItemLevel;//[Offset: 0xce0, Size: 4]
	MulticastInlineDelegateProperty DefenderPawnOrItemSet;//[Size: 16]
	FortWorldItem* TakeWeaponAwayFromDefender(FortWorldItem* WeaponToTakeAway);// 0xce72b9c
	void SupplyDefender(const FortWorldItem* WeaponToGive, const int AmmoQuantity);// 0xce72ab4
	FortAIPawn* SpawnDefenderfromItem(FortAccountItem* DefenderItem, out const FName DefenderSquadId, out const Transform SpawnTransform, Actor* InOwner);// 0xce72904
	void RemoveCurrentDefender(FortPlayerStateZone* RequestingPlayer, bool bRemovalCausedByPlayerJoin);// 0xbbc0600
	void OnRep_DefenderPawn();// 0xbbc0600
	void OnRep_DefenderItemDefinition();// 0xbbc0600
	FText GetLastInteractErrorText();// 0xce72834
	Transform GetDefenderSpawnTransform();// 0xbbc0600
	void DeployDefender(const FortPlayerController* ItemSelectorPC, const FortDefenderItem* InDefenderItem, out const FName InDefenderSquadId, const FortWorldItem* WeaponToGive, const int AmmoQuantity);// 0xbbc0600
	void ClearCurrentDefender(bool bForceKillDefender);// 0xbbc0600

--------------------------------
Class: BuildingTrapFloor.BuildingTrap.BuildingSMActor.BuildingActor.Actor.Object

--------------------------------
Class: BuildingTrap.BuildingSMActor.BuildingActor.Actor.Object
	SceneComponent* TraceLocation;//[Offset: 0xb00, Size: 8]
	SkeletalMesh* PlacementSkeletalMesh;//[Offset: 0xb08, Size: 8]
	Vector PlacementSkeletalMeshRelativeLocation;//[Offset: 0xb10, Size: 12]
	Rotator PlacementSkeletalMeshRelativeRotation;//[Offset: 0xb1c, Size: 12]
	StaticMesh* TrapRangeMesh;//[Offset: 0xb28, Size: 8]
	StaticMesh* TrapPreviewMesh;//[Offset: 0xb30, Size: 8]
	Vector PreviewOverrideScale;//[Offset: 0xb38, Size: 12]
	FortTrapItemDefinition* TrapData;//[Offset: 0xb48, Size: 8]
	FText AttachmentHintText;//[Offset: 0xb50, Size: 24]
	bool bShouldAffectAllPawnsInMinigames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	FortTargetFilter TriggerFilter;//[Offset: 0xb70, Size: 56]
	Vector TrapPlacementOffset;//[Offset: 0xba8, Size: 12]
	bool bTriggerAbilityOnEndoverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 1]
	FortAbilitySet* AbilitySet;//[Offset: 0xbb8, Size: 8]
	FortDamageSet* DamageAttributeSet;//[Offset: 0xbc0, Size: 8]
	FortAlterationItemDefinition*[] AppliedAlterations;//[Offset: 0xbc8, Size: 16]
	FortAbilitySetHandle[] AlterationAbilitySetHandles;//[Offset: 0xbd8, Size: 16]
	BuildingSMActor* AttachedTo;//[Offset: 0xbe8, Size: 8]
	bool bTargetWithAttachedTo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	BuildingSMActor* LastAttachedTo;//[Offset: 0xbf8, Size: 8]
	float DelayBeforeDestroyAfterDurabilityExpired;//[Offset: 0xc00, Size: 4]
	float SavedDurabilityPct;//[Offset: 0xc04, Size: 4]
	float ObstructedTargetRecheckInterval;//[Offset: 0xc0c, Size: 4]
	Vector[] ShouldTriggerTraceOffsets;//[Offset: 0xc10, Size: 16]
	PrimitiveComponent*[] TriggerComponents;//[Offset: 0xc20, Size: 16]
	bool bIgnoreBuildingObstructions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	bool bOwnAllFacesOfAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc31, Size: 1]
	MaterialInstance* AlternateMaterialInstance;//[Offset: 0xc38, Size: 8]
	AthenaTrapAIPerceptionStimuliSourceComponent* StimSourceComponent;//[Offset: 0xc40, Size: 8]
	PrimitiveComponent*[] DamageComponents;//[Offset: 0xc48, Size: 16]
	StaticMeshComponent*[] StaticMeshes;//[Offset: 0xc58, Size: 16]
	int TrapLevel;//[Offset: 0xc68, Size: 4]
	int OriginalTrapLevel;//[Offset: 0xc6c, Size: 4]
	bool bTrapRecharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	GameplayTagContainer AnalyticsTags;//[Offset: 0xca8, Size: 32]
	bool UseAttachedToWhenTargeted();// 0xce70df8
	void TriggerOverlapEnd(Actor* OtherActor);// 0xce70d48
	bool TriggerIfAppropriate();// 0xce70d08
	void SwitchToAlternateMaterial();// 0xce70cec
	void SpawnedFromItemDefinition(const FortTrapItemDefinition* ItemDef, int InTrapLevel);// 0xce70c04
	void SetTeamForMinigameStart();// 0xce70bf0
	void SetAttachedTo(BuildingSMActor* ActorAttachedTo);// 0xce70b48
	void ResetTrapLevel();// 0xce70b34
	void ResetTeamOnMinigameEnd();// 0xce70b20
	void OnTriggerTouch(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xce70904
	void OnTriggerEndTouch(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xce70798
	void OnRep_ReplicatedAppliedAlterations();// 0xce7077c
	void OnRep_bTrapRecharging();// 0xce70768
	void OnRep_AttachedTo();// 0xce7074c
	void OnReloadEnd();// 0xbbc0600
	void OnReloadBegin();// 0xbbc0600
	void OnPlaced();// 0xbbc0600
	void OnOutOfDurability();// 0xbbc0600
	void OnModifyTrapIncomingDamage(float Damage, Controller* EventInstigator, Actor* DamageCauser, out float OutDamage, out bool bOutConsumeEvent);// 0xbbc0600
	void OnInitTeam();// 0xbbc0600
	void OnInitCosmeticAlterations(FortCosmeticModification CosmeticMod);// 0xbbc0600
	void OnInitAlteration(FortAlterationItemDefinition* NewAlteration);// 0xbbc0600
	void OnFinishedBuilding();// 0xbbc0600
	void OnDestroy();// 0xbbc0600
	void OnBlockingBuildingDied(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xce704ec
	bool HasDurability();// 0xce704ac
	int GetTrapRating();// 0xce70470
	int GetTrapLevel();// 0xce70434
	Actor*[] GetTouchingDamageTargets(out const FortTargetFilter Filter);// 0xce702f8
	float GetReloadTime();// 0xce702c4
	GameplayTag GetReloadBeginGameplayCueTag();// 0xce70290
	int GetNumberOfRemainingDelayedAttachingAttempts();// 0xce70254
	float GetMaxDurability();// 0xce70218
	float GetFireDelay();// 0xce701dc
	float GetDurabilityPercent();// 0xce701a0
	GameplayTag GetDelayBeginGameplayCueTag();// 0xce7016c
	float GetDamageDelay();// 0xce70130
	Vector GetCenter();// 0xce700f0
	BuildingSMActor* GetBuildingAttachedTo();// 0xce700bc
	float GetArmTime();// 0xce70088
	FortAlterationItemDefinition*[] GetAlterations();// 0xce6ffe0
	GameplayTag GetActivateTrapGameplayCueTag();// 0xce6ffac
	void GameplayCue_Abilities_Activation_Traps(byte EventType, GameplayCueParameters Parameters);// 0xce6fcc4
	void FinishTrigger();// 0xce6fca8
	bool BP_ShouldTrigger(out const Actor*[] TouchingActors);// 0xce6fbd4
	void BP_OnTrigger(out const Actor*[] TouchingActors, out bool bOutConsumeEvent);// 0xbbc0600
	void AttemptRetrigger(float Seconds);// 0xce6fb24
	void AddTriggerComponent(PrimitiveComponent* TriggerComponent);// 0xce6fa74
	void AddDamageComponent(PrimitiveComponent* DamageComponent);// 0xce6f9cc

--------------------------------
Class: FortTrapItemDefinition.FortDecoItemDefinition.FortWeaponItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	Rotator KnockbackDirOverride;//[Offset: 0xc44, Size: 12]
	bool bKnockBackUsingPawnDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	SoundBase* EquipSound;//[Offset: 0xc58, Size: 40]
	GameplayTagContainer OverrideAutoEquipTags;//[Offset: 0xc80, Size: 32]

--------------------------------
Class: FortDefenderItemDefinition.FortCharacterType.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	GameplayEffectApplicationInfo[] CombinedStatGEs;//[Offset: 0x3c0, Size: 16]
	FName AppearanceOverrideName;//[Offset: 0x3d0, Size: 8]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x3d8, Size: 16]
	class FortAIPawn* PawnClass;//[Offset: 0x3e8, Size: 40]
	GameplayTag GetDefenderSubtypeTag();// 0xcfd0dec
	enum GetDefenderSubtype();// 0xcfd0db8

--------------------------------
Class: FortDefenderItem.FortCharacter.FortAccountItem.FortPersistableItem.FortItem.Object
	FString[] alterations;//[Offset: 0x108, Size: 16]
	FortAlterationItemDefinition*[] AlterationInstances;//[Offset: 0x118, Size: 16]
	enum GetDefenderSubtype();// 0xcfd0ce4

--------------------------------
Class: AthenaTrapAIPerceptionStimuliSourceComponent.AIPerceptionStimuliSourceComponent.ActorComponent.Object
	<Actor*,TrapDetectionState> TrapDiscoverabilityMap;//[Offset: 0xc8, Size: 80]
	bool bEnablePerceptionSystemOnTrap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 1]

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 16]
	void UnregisterFromSense(class AISense SenseClass);// 0xaf48c94
	void UnregisterFromPerceptionSystem();// 0xaf48d3c
	void RegisterWithPerceptionSystem();// 0xaf48df8
	void RegisterForSense(class AISense SenseClass);// 0xaf48d50

--------------------------------
Class: TrapDetectionState

--------------------------------
Class: FortAIAppearanceOverrideEntry
	FName AppearanceName;//[Offset: 0x0, Size: 8]
	bool bIsFemale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x10, Size: 40]
	FortFeedbackBank* FeedbackBank;//[Offset: 0x38, Size: 40]

--------------------------------
Class: FortAIAttributesSet.FortCharacterAttrSet.FortAttributeSet.AttributeSet.Object

--------------------------------
Class: FortNavObstacleComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* ObstacleAreaClass;//[Offset: 0xe0, Size: 8]

--------------------------------
Class: FortAIAssetLoader.Object
	PendingRequestManager[] PendingRequests;//[Offset: 0x28, Size: 16]
	Object*[] AssetsLoaded;//[Offset: 0x38, Size: 16]

--------------------------------
Class: PendingRequestManager

--------------------------------
Class: FortAthenaVehicleInputState
	float ForwardAlpha;//[Offset: 0x0, Size: 4]
	float RightAlpha;//[Offset: 0x4, Size: 4]
	float PitchAlpha;//[Offset: 0x8, Size: 4]
	float LookUpDelta;//[Offset: 0xc, Size: 4]
	float TurnDelta;//[Offset: 0x10, Size: 4]
	float SteerAlpha;//[Offset: 0x14, Size: 4]
	float GravityOffset;//[Offset: 0x18, Size: 4]
	Vector MovementDir;//[Offset: 0x1c, Size: 12]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsHonking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreForwardInAir;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bMovementModifier0;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bMovementModifier1;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bMovementModifier2;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]

--------------------------------
Class: FortAIBatchedDamageCues
	bool bImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bImpactWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bDamageShields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bDamageWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bFatal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bWeaponActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	Vector_NetQuantize10 HitLocation;//[Offset: 0x8, Size: 12]
	Actor* TargetActor;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FortAISharedRepMovement
	RepMovement RepMovement;//[Offset: 0x0, Size: 52]
	float RepTimeStamp;//[Offset: 0x34, Size: 4]
	byte RepMovementMode;//[Offset: 0x38, Size: 1]
	enum RepCurrentFortAILODLevel;//[Offset: 0x39, Size: 1]
	GameplayAbilityRepSharedAnim_Index RepSharedAnimInfo;//[Offset: 0x3c, Size: 8]

--------------------------------
Class: GameplayAbilityRepSharedAnim_Index.GameplayAbilityRepSharedAnim_Base
	int MontageIndex;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BoneSet
	BoneReference[] Bones;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimTagProperty
	GameplayTag BackingGameplayTag;//[Offset: 0x0, Size: 8]
	FieldPathProperty PropertyToEdit;//[Size: 32]
	FName PropertyName;//[Offset: 0x28, Size: 8]
	bool bUseExactTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AbilityKitItem
	FortItemDefinition* Item;//[Offset: 0x0, Size: 8]
	int Quantity;//[Offset: 0x8, Size: 4]
	byte Replenishment;//[Offset: 0xc, Size: 1]

--------------------------------
Class: FortSchematicItemDefinition.FortAlterableItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	DataTableRowHandle CraftingRecipe;//[Offset: 0x3c0, Size: 16]
	SoundBase* CraftingSuccessSound;//[Offset: 0x3d0, Size: 40]
	FortWorldItemDefinition* CachedResultWorldItemDefinition;//[Offset: 0x3f8, Size: 8]
	DataTableCategoryHandle LootLevelData;//[Offset: 0x400, Size: 24]
	FName CraftingTimeRowName;//[Offset: 0x418, Size: 8]
	bool bUseSchematicDisplayName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	FortWorldItemDefinition* GetResultWorldItemDefinition();// 0xd1cbaa8
	Recipe GetRecipe();// 0xd1cb990
	int GetQuantityProduced();// 0xd1cb95c
	float GetCraftingTimeForCharacter(int Level, const FortPlayerPawn* FortPawn);// 0xd1cb86c
	float GetCraftingTime(int Level);// 0xd1cb7bc
	SoundBase* GetCraftingSuccessSound();// 0xd1cb788
	bool DoesResultWorldItemDisassembleRecipeMatchExactly();// 0xd1cb750

--------------------------------
Class: FortAlterableItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: Recipe.TableRowBase
	FortItemQuantityPair[] RecipeResults;//[Offset: 0x8, Size: 16]
	bool bIsConsumed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FortItemQuantityPair[] RecipeCosts;//[Offset: 0x20, Size: 16]
	GameplayTagContainer RequiredCatalysts;//[Offset: 0x30, Size: 32]
	int Score;//[Offset: 0x50, Size: 4]

--------------------------------
Class: FortTooltipDisplayStatsList.DataAsset.Object
	FortTooltipDisplayStatsCategory[] TooltipCategories;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortTooltipDisplayStatsCategory
	FText CategoryName;//[Offset: 0x0, Size: 24]
	FortTooltipDisplayStatInfo[] TooltipStats;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortTooltipDisplayStatInfo
	GameplayTag Token;//[Offset: 0x0, Size: 8]
	GameplayAttribute Attribute;//[Offset: 0x8, Size: 56]
	GameplayTagContainer ContextTags;//[Offset: 0x40, Size: 32]
	bool bLowerIsBetter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: FortTeamPerkLoadoutCondition
	int NumTimesSatisfiable;//[Offset: 0x0, Size: 4]
	GameplayTagQuery RequiredTagQuery;//[Offset: 0x8, Size: 72]
	bool bConsiderMinimumTier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bConsiderMaximumTier;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bConsiderMinimumLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bConsiderMaximumLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	bool bConsiderMinimumRarity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50, Size: 1]
	bool bConsiderMaximumRarity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x50, Size: 1]
	enum MinimumHeroTier;//[Offset: 0x51, Size: 1]
	enum MaximumHeroTier;//[Offset: 0x52, Size: 1]
	int MinimumHeroLevel;//[Offset: 0x54, Size: 4]
	int MaximumHeroLevel;//[Offset: 0x58, Size: 4]
	enum MinimumHeroRarity;//[Offset: 0x5c, Size: 1]
	enum MaximumHeroRarity;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: EndZoneScoreAndAwards
	bool bResultsPendingSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int TotalScore;//[Offset: 0x4, Size: 4]
	bool bCriticalMatchBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bDidLeech;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	FortQuestEarnedBadgeData[] EarnedBadgeData;//[Offset: 0x10, Size: 16]
	FString[] EarnedItemCaches;//[Offset: 0x20, Size: 16]
	int NumMissionPoints;//[Offset: 0x30, Size: 4]
	float MissionLeechScaling;//[Offset: 0x34, Size: 4]

--------------------------------
Class: FortQuestEarnedBadgeData
	FString TemplateId;//[Offset: 0x0, Size: 16]
	int Count;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AccountIdAndMatchEndData
	FString AccountId;//[Offset: 0x0, Size: 16]
	FortQuestObjectiveCompletion[] Advance;//[Offset: 0x10, Size: 16]
	FortQuestEarnedBadgeData[] EarnedBadgeData;//[Offset: 0x20, Size: 16]
	FString[] EarnedItemCaches;//[Offset: 0x30, Size: 16]
	int TotalScore;//[Offset: 0x40, Size: 4]
	bool bCriticalMatchBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bDidLeech;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	int NumMissionPoints;//[Offset: 0x48, Size: 4]
	FString[] ShuffledLoadoutUsed;//[Offset: 0x50, Size: 16]
	int ShuffledLockerUsedIndex;//[Offset: 0x60, Size: 4]
	int TheaterNum;//[Offset: 0x64, Size: 4]
	McpProfileChangeRequest TheaterItemUpdate;//[Offset: 0x68, Size: 88]
	int OutpostNum;//[Offset: 0xc0, Size: 4]
	McpProfileChangeRequest OutpostItemUpdate;//[Offset: 0xc8, Size: 88]
	FString OutpostId;//[Offset: 0x120, Size: 16]
	FortOutpostCoreInfo OutpostInfo;//[Offset: 0x130, Size: 40]
	FString DeployableBaseItemId;//[Offset: 0x158, Size: 16]
	FortCloudSaveInfo CloudSaveInfo;//[Offset: 0x168, Size: 24]
	FString LockCode;//[Offset: 0x180, Size: 16]
	bool bAbandoning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float MissionLeechScaling;//[Offset: 0x194, Size: 4]

--------------------------------
Class: McpProfileChangeRequest
	int BaseCommandRevision;//[Offset: 0x0, Size: 4]
	McpAddItemRequest[] AddRequests;//[Offset: 0x8, Size: 16]
	McpRemoveItemRequest[] RemoveRequests;//[Offset: 0x18, Size: 16]
	McpChangeQuantityRequest[] ChangeQuantityRequests;//[Offset: 0x28, Size: 16]
	McpChangeAttributesRequest[] ChangeAttributesRequests;//[Offset: 0x38, Size: 16]
	JsonObjectWrapper[] ChangeStatRequests;//[Offset: 0x48, Size: 16]

--------------------------------
Class: McpAddItemRequest
	FString ItemId;//[Offset: 0x0, Size: 16]
	FString TemplateId;//[Offset: 0x10, Size: 16]
	int Quantity;//[Offset: 0x20, Size: 4]
	JsonObjectWrapper Attributes;//[Offset: 0x28, Size: 32]

--------------------------------
Class: McpRemoveItemRequest
	FString ItemId;//[Offset: 0x0, Size: 16]

--------------------------------
Class: McpChangeQuantityRequest
	FString ItemId;//[Offset: 0x0, Size: 16]
	int DeltaQuantity;//[Offset: 0x10, Size: 4]

--------------------------------
Class: McpChangeAttributesRequest
	FString ItemId;//[Offset: 0x0, Size: 16]
	JsonObjectWrapper Attributes;//[Offset: 0x10, Size: 32]

--------------------------------
Class: FortOutpostCoreInfo
	FortPlacedBuilding[] PlacedBuildings;//[Offset: 0x0, Size: 16]
	FString[] AccountsWithEditPermission;//[Offset: 0x10, Size: 16]
	uint32 HighestEnduranceWaveReached;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FortPlacedBuilding
	FString BuildingTag;//[Offset: 0x0, Size: 16]
	FString PlacedTag;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AccountIdAndScore
	FString AccountId;//[Offset: 0x0, Size: 16]
	int TotalScore;//[Offset: 0x10, Size: 4]
	int IndividualContribution;//[Offset: 0x14, Size: 4]
	bool bCriticalMatchBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsLeecherExempt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]

--------------------------------
Class: FortMcpProfileCommonPublic.FortMcpProfile.McpProfile.Object
	void SetHomebaseName(FString HomebaseName, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetHomebaseBanner(FString HomebaseBannerIconId, FString HomebaseBannerColorId, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpProfileCommonCore.FortMcpProfile.McpProfile.Object
	FString ListCatalogEntriesUrl;//[Offset: 0x278, Size: 16]
	int AffiliateExpirationSeconds;//[Offset: 0x2c4, Size: 4]
	void TwitchUpdateBroadcasterRegistration(FString AccessToken, FString ChannelId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetReceiveGiftsEnabled(bool bReceiveGifts, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetMtxPlatform(FString NewPlatform, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetMatchmakingBansViewed(out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetForcedIntroPlayed(FString ForcedIntroName, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetAffiliateName(FString AffiliateName, out ClientUrlContext Context);// 0xffffff8d0733b000
	void RefundMtxPurchase(FString PurchaseId, bool QuickReturn, FString GameContext, out ClientUrlContext Context);// 0xffffff8d0733b000
	void IssueFriendCode(FString CodeTokenType, out ClientUrlContext Context);// 0xffffff8d0733b000
	void CompletePlayerSurvey(FString SurveyID, bool bUpdateAllSurveysMetadata, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimSubscriptionRewards(enum AppStore, FString UniqueSubscriptionId, FString ReceiptInfo, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimMfaEnabled(bool bClaimForStw, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimImportFriendsReward(enum Network, out ClientUrlContext Context);// 0xffffff8d0733b000
	void CancelOrResumeSubscription(enum AppStore, FString UniqueSubscriptionId, bool WillAutoRenew, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpProfileWorld.FortMcpProfile.McpProfile.Object
	FortWorldProfileUpdateRequest[] UpdateRequests;//[Offset: 0x150, Size: 16]
	FortWorldPlayerLoadout CachedPlayerLoadout;//[Offset: 0x160, Size: 304]
	FortInventory* FortInventory;//[Offset: 0x290, Size: 8]
	bool bIsInventoryInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	void UnlockProfiles(FString Code, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void StorageTransfer(const ItemTransferOperation[] TransferOperations, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ModifyQuickbar(const FString[] PrimaryQuickbarChoices, FString SecondaryQuickbarChoice, out ClientUrlContext Context);// 0xffffff8d0733b000
	void LockProfiles(FString Code, int Timeout, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void InitializeTheater(FString TheaterGuid, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void DisassembleWorldItems(const ItemIdAndQuantityPair[] TargetItemIdAndQuantityPairs, out ClientUrlContext Context);// 0xffffff8d0733b000
	void DestroyWorldItems(const FString[] ItemIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void DepositPostResources(const FString[] itemsToDepositIds, const int[] itemCountsToDeposit, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void CraftWorldItem(FString TargetSchematicItemId, int NumTimesToCraft, FString TargetSchematicTier, out ClientUrlContext Context);// 0xffffff8d0733b000
	void BatchUpdatePlayers_Outpost(const FortBatchUpdatePlayer_Update[] Updates, FString OutpostId, const FortOutpostCoreInfo OutpostInfo, const FortCloudSaveInfo CloudSaveInfo, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void BatchUpdatePlayers_DeployableBase(const FortBatchUpdatePlayer_Update[] Updates, const FortBatchUpdatePlayer_DeployableBaseUpdate[] DeployableBaseUpdates, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void BatchUpdatePlayers(const FortBatchUpdatePlayer_Update[] Updates, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: ItemTransferOperation
	FString ItemId;//[Offset: 0x0, Size: 16]
	int Quantity;//[Offset: 0x10, Size: 4]
	bool ToStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	FString NewItemIdHint;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ItemIdAndQuantityPair
	FString ItemId;//[Offset: 0x0, Size: 16]
	int Quantity;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortBatchUpdatePlayer_Update
	UniqueNetIdRepl AccountId;//[Offset: 0x0, Size: 40]
	int TheaterNum;//[Offset: 0x28, Size: 4]
	McpProfileChangeRequest TheaterItemUpdate;//[Offset: 0x30, Size: 88]
	int OutpostNum;//[Offset: 0x88, Size: 4]
	McpProfileChangeRequest OutpostItemUpdate;//[Offset: 0x90, Size: 88]
	FortQuestObjectiveCompletion[] QuestObjectiveUpdates;//[Offset: 0xe8, Size: 16]

--------------------------------
Class: FortBatchUpdatePlayer_DeployableBaseUpdate
	UniqueNetIdRepl AccountId;//[Offset: 0x0, Size: 40]
	FString DeployableBaseItemId;//[Offset: 0x28, Size: 16]
	FortCloudSaveInfo CloudSaveInfo;//[Offset: 0x38, Size: 24]

--------------------------------
Class: FortWorldProfileUpdateRequest
	FortMcpProfileWorld*[] WorldProfilesToSave;//[Offset: 0x10, Size: 16]
	int NumberOfRequests;//[Offset: 0x30, Size: 4]

--------------------------------
Class: FortWorldPlayerLoadout
	bool bPlayerIsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	QuickBar PrimaryQuickBarRecord;//[Offset: 0x8, Size: 144]
	QuickBar SecondaryQuickBarRecord;//[Offset: 0x98, Size: 144]
	int ZonesCompleted;//[Offset: 0x128, Size: 4]

--------------------------------
Class: QuickBar
	int CurrentFocusedSlot;//[Offset: 0x0, Size: 4]
	int PreviousFocusedSlot;//[Offset: 0x4, Size: 4]
	int SecondaryFocusedSlot;//[Offset: 0x8, Size: 4]
	QuickBarSlot[] Slots;//[Offset: 0x10, Size: 16]
	QuickBarData DataDefinition;//[Offset: 0x20, Size: 16]
	<FortItemDefinition*> EquippedItemDefinitions;//[Offset: 0x30, Size: 80]
	int[] SharedVisibleSlotIndicesWhenUsingGamepad;//[Offset: 0x80, Size: 16]

--------------------------------
Class: QuickBarSlot
	GUID[] Items;//[Offset: 0x0, Size: 16]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bIsReserved;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	int UsedBySlotIndex;//[Offset: 0x14, Size: 4]
	GUID UsedByItemGuid;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortMcpProfileMetadata.FortMcpProfile.McpProfile.Object
	void UpdateOutpostCore(FString CoreId, const FortOutpostCoreInfo CoreInfo, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void UpdateDeployableBaseTierProgression(FString DeployableBaseItemId, FString ProgressionLayoutGuid, int TierDefeated, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void CreateOrUpgradeOutpostItem(FString TemplateId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void CreateDeployableBaseItem(FString TemplateId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpProfileCreative.FortMcpProfile.McpProfile.Object
	bool bEnablePublishing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	FortCreativeRealEstatePlotItemDefinition* DefaultBattleLabPlot;//[Offset: 0x238, Size: 40]
	void UpdatePlotPublishInfo(FString PlotItemId, FString LinkCode, FString VkProjectId, FString VkModuleId, int LinkVersion, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void SetLastUsedCreativePlot(FString PlotItemId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void SetLastUsedBattleLabFile(FString PlotItemId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void SetCreativePlotMetadata(FString PlotItemId, FString Locale, FString Title, FString Tagline, const FString[] DescriptionTags, FString YoutubeVideoId, FString Introduction, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void RestoreDeletedIsland(FString PlotItemId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void ModifyCreativePlotPermissions(FString PlotItemId, enum Permission, const FString[] AccountIds, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void DuplicateIsland(FString IslandId, FString Locale, FString NewTitle, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void DeleteIsland(FString PlotItemId, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void DeleteBattleLabIsland(out ClientUrlContext Context);// 0xffffff8d0733b000
	void CreateNewIslandFromLinkCode(FString LinkCode, FString Locale, FString Title, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void CreateNewIsland(FString TemplateId, FString Locale, FString Title, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void CreateNewBattleLabFile(FString TemplateId, FString Locale, FString Title, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpProfileCollections.McpProfile.Object
	<FString,FortCollectionData*> DataTables;//[Offset: 0x140, Size: 80]
	FortCollectionsTaskManager* TaskManager;//[Offset: 0x190, Size: 8]
	void MarkCollectedItemsSeen(const FortMcpCollectionsVariant[] Variants, out ClientUrlContext Context);// 0xffffff8d0733b000
	void BulkUpdateCollections(const FortMcpCollectionsBulkUpdateEntry[] Items, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void AddToCollection(FString Category, FString Variant, const FString[] ContextTags, const JsonObjectWrapper Properties, enum SeenState, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortMcpCollectionsVariant
	FString Category;//[Offset: 0x0, Size: 16]
	FString Variant;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortMcpCollectionsBulkUpdateEntry
	FString Category;//[Offset: 0x0, Size: 16]
	FString Variant;//[Offset: 0x10, Size: 16]
	FString[] ContextTags;//[Offset: 0x20, Size: 16]
	JsonObjectWrapper Properties;//[Offset: 0x30, Size: 32]
	enum SeenState;//[Offset: 0x50, Size: 1]
	int Count;//[Offset: 0x54, Size: 4]

--------------------------------
Class: FortCollectionsTaskManager.Object
	float DefaultTimeoutSeconds;//[Offset: 0x118, Size: 4]

--------------------------------
Class: FortMcpProfileAthena.FortMcpProfileSubgame.FortMcpProfile.McpProfile.Object
	float ClientQuestLoginTimerNoise;//[Offset: 0x440, Size: 4]
	void UnlockRewardNode(FString NodeId, FString rewardGraphId, FString rewardCfg, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ToggleQuestActiveState(const FString[] QuestIds, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetRewardGraphConfig(const FString[] State, FString rewardGraphId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void SetHardcoreModifier(const HardcoreModifierUpdate[] Updates, out ClientUrlContext Context);// 0xffffff8d0733b000
	void RequestRestedStateIncrease(int timeToCompensateFor, int restedXpGenAccumulated, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ReportConsumableUsed(int UsedQuantity, FString ItemType, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	bool HasPurchasedSeasonBook();// 0xd0879a4
	void HandleActiveEventFlagsChanged(out const FString[] ActiveEventFlags);// 0xd08788c
	float GetSeasonRestedXpMult();// 0xd087858
	float GetSeasonRestedXpExchange();// 0xd087824
	int GetSeasonRestedXp();// 0xd0877f0
	int GetSeasonOverflowXp();// 0xd0877bc
	int GetSeasonMatchXpBoost();// 0xd087788
	bool GetSeasonLevelUpReward(int SeasonLevel, out FortItemInstanceQuantityPair Reward, out int RewardLevel);// 0xd087624
	AthenaSeasonRewardLevelInfo GetSeasonLevelInfo(int SeasonLevel);// 0xd087548
	int GetSeasonFriendMatchXpBoost();// 0xd087514
	int GetSeasonBookLevel();// 0xd0874e0
	AthenaSeasonItemDefinition* GetActiveSeasonDefinition();// 0xd0874ac
	void ExchangeGiftToken(out ClientUrlContext Context);// 0xffffff8d0733b000
	void ExchangeGameCurrencyForBattlePassOffer(const FString[] OfferIdList, out ClientUrlContext Context);// 0xffffff8d0733b000
	void EndBattleRoyaleGameV2(const FortQuestObjectiveCompletion[] Advance, FString PlaylistId, const AthenaMatchStats MatchStats, int TotalXPAccum, int RestedXPAccum, int FriendshipXpBoost, int CosmeticXpBoost, float AntiAddictionPlayTimeMultiplier, bool ShouldAccumulateToProfileStats, bool ShouldSaveToRecentGameLists, const AthenaAccolades[] Accolades, const FString[] ShuffledLoadoutUsed, int ShuffledLockerUsedIndex, const FString[] DeletedQuestIds, const FString[] GrantedQuestDefs, const SecondaryXpGained[] secondaryXp, const FortCreateItemDetail[] GrantedItems, const FortTransientQuestGrant[] GrantedTransientQuests, out DedicatedServerUrlContext Context);// 0xffffff8d0733b000
	void ChallengeBundleLevelUp(FString BundleIdToLevel, out ClientUrlContext Context);// 0xffffff8d0733b000
	bool CanPurchaseSeasonBook();// 0xd087474
	void ApplyVote(FString OfferId, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: HardcoreModifierUpdate
	FString ModifierId;//[Offset: 0x0, Size: 16]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: AthenaSeasonRewardLevelInfo
	enum Track;//[Offset: 0x0, Size: 1]
	int Level;//[Offset: 0x4, Size: 4]
	int XpToNextLevel;//[Offset: 0x8, Size: 4]
	AthenaRewardItemReference[] Rewards;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SecondaryXpGained
	FString Type;//[Offset: 0x0, Size: 16]
	int secondaryXp;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortCreateItemDetail
	FString TemplateId;//[Offset: 0x0, Size: 16]
	int Quantity;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FortTransientQuestGrant
	FString TemplateId;//[Offset: 0x0, Size: 16]
	FortQuestObjectiveCompletion[] Objectives;//[Offset: 0x10, Size: 16]
	FString ExpirationTime;//[Offset: 0x20, Size: 16]
	FString CreationTime;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortAwardManager.Object
	FortPlayerController* PlayerController;//[Offset: 0x28, Size: 8]
	FortAwardDetector*[] ActiveAwards;//[Offset: 0x30, Size: 16]
	void GetSourceAndContextTags(out GameplayTagContainer OutSourceTags, out GameplayTagContainer OutContextTags);// 0xcf310b0

--------------------------------
Class: FortMinigameManager.Object
	FortPlayerController* PlayerController;//[Offset: 0x28, Size: 8]
	FortMinigame* CurrentMinigame;//[Offset: 0x30, Size: 8]
	void SendStatEventWithTags(enum Type, Object* TargetObject, out const GameplayTagContainer TargetTags, out const GameplayTagContainer SourceTags, out const GameplayTagContainer ContextTags, int Count);// 0xd0c451c
	void GetSourceAndContextTags(out GameplayTagContainer OutSourceTags, out GameplayTagContainer OutContextTags);// 0xd0c43e0

--------------------------------
Class: FortCollectionBookManager.Object
	MulticastInlineDelegateProperty OnPagesChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnSlottedItemOperationComplete;//[Size: 16]
	MulticastInlineDelegateProperty OnSlotItemComplete;//[Size: 16]
	MulticastInlineDelegateProperty OnInventoryUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnRewardClaimed;//[Size: 16]
	MulticastInlineDelegateProperty OnUnslotItemComplete;//[Size: 16]
	MulticastInlineDelegateProperty OnResearchItemComplete;//[Size: 16]
	FortPendingSlottedItemOperation[] PendingSlottedItems;//[Offset: 0x188, Size: 16]
	FortPendingSlottedItemOperation[] PendingUpdatedItems;//[Offset: 0x198, Size: 16]
	<FName,FortMcpProfileCollectionBook*> ProfileTable;//[Offset: 0x1b0, Size: 80]
	<FString,FortCollectionBookPage*> PageTable;//[Offset: 0x200, Size: 80]
	<FString> TemporaryPageTemplateIds;//[Offset: 0x250, Size: 80]
	bool UnSlotItem(const FortAccountItem* Item);// 0xcf86ac8
	bool SlotItem(const FortAccountItem* Item, FName SlotId);// 0xcf869d8
	bool PurchaseItem(const FortAccountItem* Item);// 0xcf86924
	void PopulateCollectionBookRewards(out FortCollectionBookRewards[] OutAvailableRewards);// 0xcf86868
	void OnPagesChanged__DelegateSignature(FortCollectionBookManager* CollectionBookManager);// 0xbbc0600
	bool IsItemMissingFromCollectionBook(const FortItemDefinition* ItemDefinition);// 0xcf867b4
	FortItem* GetItemInSlot(FName SlotId);// 0xcf86704
	float GetBookXPPercentToNextLevel(int CurrentLevel, int NewXP);// 0xcf86618
	int GetBookTotalXPToNextLevel(int CurrentLevel);// 0xcf86568
	bool DoesItemSlotExistInCollectionBook(const FortItemDefinition* ItemDefinition);// 0xcf864b4
	void ClaimReward(out const FortCollectionBookRewards RewardToClaim, int RewardIndex);// 0xcf86310
	bool CanSlotItem(const FortAccountItem* AccountItem, bool bOnlyAllowIfSlotEmpty, out FName OutSlotId);// 0xcf861c0
	int CalculatePageXp(FName PageId);// 0xcf86110
	int CalculateBookXp();// 0xcf860dc

--------------------------------
Class: FortPendingSlottedItemOperation
	FString SlottedItemId;//[Offset: 0x0, Size: 16]
	FName SlotRowName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortCollectionBookRewards
	enum RewardType;//[Offset: 0x0, Size: 1]
	FName PageId;//[Offset: 0x4, Size: 8]
	FName SectionId;//[Offset: 0xc, Size: 8]
	int XpRequired;//[Offset: 0x14, Size: 4]
	FText Description;//[Offset: 0x18, Size: 24]
	bool bIsMajorReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FortRewardInfo Rewards;//[Offset: 0x38, Size: 48]

--------------------------------
Class: FortMcpProfileCollectionBook.FortMcpProfile.McpProfile.Object
	void UpgradeSlottedItem(FString TargetItemId, int DesiredLevel, out ClientUrlContext Context);// 0xffffff8d0733b000
	void PromoteItem(FString TargetItemId, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ConvertSlottedItem(FString TargetItemId, int ConversionIndex, out ClientUrlContext Context);// 0xffffff8d0733b000
	void ClaimCollectionBookPageRewards(FString PageTemplateId, FString SectionId, int SelectedRewardIndex, out ClientUrlContext Context);// 0xffffff8d0733b000

--------------------------------
Class: FortCollectionBookPage.Object
	FString TemplateId;//[Offset: 0x40, Size: 16]
	FString InstanceID;//[Offset: 0x50, Size: 16]
	FName PageRowName;//[Offset: 0x60, Size: 8]
	enum State;//[Offset: 0x68, Size: 1]
	FortCollectionBookSectionState[] SectionStates;//[Offset: 0x70, Size: 16]
	enum GetSectionState(FName SectionId);// 0xcf86bb8
	enum GetPageState();// 0xcf86b9c

--------------------------------
Class: FortCollectionBookSectionState
	FString Section;//[Offset: 0x0, Size: 16]
	enum State;//[Offset: 0x10, Size: 1]

--------------------------------
Class: FortExpeditionManager.Object

--------------------------------
Class: FortLinkedAccountManager.Object
	FortLinkedAccount*[] LinkedAccounts;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortLinkedAccount.Object
	FortLinkedAccountManager* Manager;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortTooltipValueData
	FText DisplayName;//[Offset: 0x0, Size: 24]
	FText FormattedValue;//[Offset: 0x18, Size: 24]
	FText ExplanationText;//[Offset: 0x30, Size: 24]
	float Value;//[Offset: 0x48, Size: 4]
	GameplayTagContainer StateTags;//[Offset: 0x50, Size: 32]

--------------------------------
Class: FortAbilityCost
	enum CostSource;//[Offset: 0x0, Size: 1]
	ScalableFloat CostValue;//[Offset: 0x8, Size: 40]
	FortItemDefinition* ItemDefinition;//[Offset: 0x30, Size: 8]
	bool bOnlyApplyCostOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: FortGameplayAbilityMontageInfo
	AnimMontage* MontageToPlay;//[Offset: 0x0, Size: 8]
	float AnimPlayRate;//[Offset: 0x8, Size: 4]
	float AnimRootMotionTranslationScale;//[Offset: 0xc, Size: 4]
	enum MontageSectionToPlay;//[Offset: 0x10, Size: 1]
	FName OverrideSection;//[Offset: 0x14, Size: 8]
	bool bPlayRandomSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	FortCharacterPartMontageInfo[] CharacterPartMontages;//[Offset: 0x20, Size: 16]

--------------------------------
Class: AbilityTrackedActorSettings
	ScalableFloat MaximumTrackedActors;//[Offset: 0x0, Size: 40]

--------------------------------
Class: FortPickupEntryData
	InterpCurveFloat FloatCurve;//[Offset: 0x0, Size: 24]
	GUID PickupGuid;//[Offset: 0x18, Size: 16]
	float StartTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FortSwimmingAudioBank.DataAsset.Object
	SoundBase* SwimmingAssets1P;//[Offset: 0x30, Size: 8]
	SoundBase* SwimmingAssets3P;//[Offset: 0x70, Size: 8]
	float TeammateVolumeMultiplier;//[Offset: 0xb0, Size: 4]
	float MaxSwimmingDistance;//[Offset: 0xb4, Size: 4]
	float RequiredImmersionDepth;//[Offset: 0xb8, Size: 4]
	float GetTeammateVolumeMultiplier();// 0xd1dfbcc
	SoundBase* GetSoundAsset(bool bIsLocal, byte SwimType);// 0xd1dfacc
	float GetRequiredImmersionDepth();// 0xd1dfa98

--------------------------------
Class: PawnDamageZones
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] Bones;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FortFoleyFootstepContext.SoundLibraryContext.Object
	byte StepType;//[Offset: 0x30, Size: 1]
	byte SurfaceType;//[Offset: 0x31, Size: 1]
	byte RelativePosition;//[Offset: 0x32, Size: 1]
	bool bIs1P;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 1]
	bool bIsThreat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: SoundLibraryContext.Object
	Actor* Actor;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FortFoleyHitContext.SoundLibraryContext.Object
	byte HitType;//[Offset: 0x30, Size: 1]
	bool bIs3D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bIsReceiver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]

--------------------------------
Class: FortPawnVocalChord
	AudioComponent* FeedbackAudioComponent;//[Offset: 0x0, Size: 8]
	FortSpokenLine ReplicatedSpokenLine;//[Offset: 0x8, Size: 48]
	FortSpokenLine PendingSpokenLine;//[Offset: 0x38, Size: 48]
	FortSpokenLine QueuedSpokenLine;//[Offset: 0x68, Size: 48]
	FortSpokenLine CurrentSpokenLine;//[Offset: 0x98, Size: 48]

--------------------------------
Class: FortSpokenLine
	SoundBase* Audio;//[Offset: 0x0, Size: 8]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 8]
	AnimSequence* AnimSequence;//[Offset: 0x10, Size: 8]
	FortPawn* Addressee;//[Offset: 0x18, Size: 8]
	byte BroadcastFilter;//[Offset: 0x20, Size: 1]
	float Delay;//[Offset: 0x24, Size: 4]
	bool bInterruptCurrentLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bCanBeInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bCanQue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: FortActiveMontageDecisionWindow
	FortAnimNotifyState_AbilityDecisionWindow* DecisionWindow;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* DecisionAnimation;//[Offset: 0x8, Size: 8]
	bool bReceivedPrimaryInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bReceivedSecondaryInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAlreadyProcessedInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]

--------------------------------
Class: FortAnimNotifyState_AbilityDecisionWindow.AnimNotifyState.Object
	FortMontageInputAction PrimaryInput;//[Offset: 0x2c, Size: 20]
	FortMontageInputAction SecondaryInput;//[Offset: 0x40, Size: 20]
	FName DefaultNextSection;//[Offset: 0x54, Size: 8]
	float PrimaryInputStrikeAngle;//[Offset: 0x5c, Size: 4]
	float SecondaryInputStrikeAngle;//[Offset: 0x60, Size: 4]
	int ComboCounter;//[Offset: 0x64, Size: 4]

--------------------------------
Class: FortMontageInputAction
	GameplayTag TriggerAbilityTag;//[Offset: 0x0, Size: 8]
	FName NextSection;//[Offset: 0x8, Size: 8]
	enum InputType;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DamagerInfo
	Actor* DamageCauser;//[Offset: 0x0, Size: 8]
	int DamageAmount;//[Offset: 0x8, Size: 4]
	GameplayTagContainer SourceTags;//[Offset: 0x10, Size: 32]

--------------------------------
Class: DamageDoneInfo
	GameplayTagContainer TrackedDamageTagGrouping;//[Offset: 0x0, Size: 32]
	float DamageAmount;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DamageDoneSourceInfo
	GameplayTagContainer TrackedSourceTags;//[Offset: 0x0, Size: 32]
	float DamageAmount;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DamageDoneTargetInfo
	GameplayTagContainer TrackedTargetTags;//[Offset: 0x0, Size: 32]
	DamageDoneSourceInfo[] TrackedSourceData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: CalloutEntry
	GameplayTag CalloutTag;//[Offset: 0x0, Size: 8]
	SlateBrush CalloutIcon;//[Offset: 0x8, Size: 136]

--------------------------------
Class: AthenaBatchedDamageGameplayCues_Shared
	Vector_NetQuantize10 Location;//[Offset: 0x0, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0xc, Size: 12]
	float Magnitude;//[Offset: 0x18, Size: 4]
	bool bWeaponActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIsFatal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bIsCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bIsShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bIsShieldDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bIsShieldApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bIsBallistic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	Vector_NetQuantize10 NonPlayerLocation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal NonPlayerNormal;//[Offset: 0x30, Size: 12]
	float NonPlayerMagnitude;//[Offset: 0x3c, Size: 4]
	bool NonPlayerbIsFatal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool NonPlayerbIsCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]

--------------------------------
Class: AthenaBatchedDamageGameplayCues_NonShared
	Actor* HitActor;//[Offset: 0x0, Size: 8]
	Actor* NonPlayerHitActor;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PegasusGameEventCollector.ActorComponent.Object
	float InventoryChangesTimeSpan;//[Offset: 0x260, Size: 4]
	float EndSkydivePlayerCheckRadius;//[Offset: 0x2b0, Size: 4]
	float WeaponExecutedTimeSpan;//[Offset: 0x338, Size: 4]
	float BuildingBeginPlayTimeSpan;//[Offset: 0x388, Size: 4]
	float ExpensiveTestInterval;//[Offset: 0x418, Size: 4]
	float SquadCohesionTestRadius;//[Offset: 0x420, Size: 4]
	float PlayerResourceEventsTimeSpan;//[Offset: 0x468, Size: 4]
	float EliminationEventsTimeSpan;//[Offset: 0x548, Size: 4]
	void HandleOwnerVehicleStateChange(FortPlayerPawn* Sender, Actor* NewVehicle, Actor* OldVehicle);// 0xd248998
	void HandleOwnerEndSkyDiving();// 0xd248984
	void HandleOwnerBeginSkyDiving();// 0xd248970
	void HandleOwnerAthenaPlaceChanged(FortPlayerStateAthena* Sender, int NewPlace);// 0xd248888

--------------------------------
Class: FortAthenaAILODComponent.ActorComponent.Object
	enum CurrentFortAILODLevel;//[Offset: 0xb0, Size: 1]
	bool bCouldBeVisibleToPlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 1]
	FortPawn* CachedFortPawn;//[Offset: 0xb8, Size: 8]
	FortAthenaAILODSettingsContainer* AILODSettingsContainer;//[Offset: 0xc0, Size: 8]
	void OnRep_CurrentFortAILODLevel();// 0xb61ca20

--------------------------------
Class: RecordedGunshot
	FortWeapon* Weapon;//[Offset: 0x0, Size: 8]
	FortPawn* InstigatingFortPawn;//[Offset: 0x8, Size: 8]
	Vector WorldLocation;//[Offset: 0x10, Size: 12]
	float Strength;//[Offset: 0x1c, Size: 4]
	float Time;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AssetAttachment
	FName SocketName;//[Offset: 0x0, Size: 8]
	SkeletalMesh* SkeletalMeshAsset;//[Offset: 0x8, Size: 8]
	StaticMesh* StaticMeshAsset;//[Offset: 0x10, Size: 8]
	bool bSkipOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bIsCurrentWeaponSubstitute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	SkeletalMeshComponentBudgeted* SkelMeshComp;//[Offset: 0x20, Size: 8]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x28, Size: 8]

--------------------------------
Class: CreativeQuickbarComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnCreativeQuickbarActiveChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeQuickbarEquippedChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnCreativeQuickbarClutchReleasedNoAction;//[Size: 16]
	MulticastInlineDelegateProperty OnItemAddedToMoveTool;//[Size: 16]
	MulticastInlineDelegateProperty OnItemAddedToCreativeQuickbar;//[Size: 16]
	bool bIsCreativeQuickbarActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bIsCreativeQuickbarEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	FortCreativeUserPrefabItemDefinition*[] QuickbarSlotItemDefinitions;//[Offset: 0x108, Size: 16]
	FortPlaysetWorldItemDefinition* QuickbarSlotPlaysetItemDefinition;//[Offset: 0x140, Size: 8]
	LevelSaveRecord* CurrentQuickbarRequestSaveRecord;//[Offset: 0x148, Size: 8]
	InputComponent* CreativeQuickbarInputComponent;//[Offset: 0x150, Size: 8]
	InputComponent* CreativeQuickbarActiveInputComponent;//[Offset: 0x158, Size: 8]
	void SetIsQuickbarEquipped(bool bIsEquipped);// 0xce82288
	void ServerAddToQuickBar(const Actor*[] Actors, const int DesiredSlotIndex);// 0xce82158
	void ServerAddItemToQuickBar(const FortItemDefinition* ItemDefinition, const int DesiredSlotIndexconst, GUID PreviousItemGuid, bool bUseVolumeToSpawn);// 0xce81fa8
	void PopulateQuickbarSlotFromSelection(int SlotIndex);// 0xce81ef8
	bool IsQuickbarActive();// 0xce81edc
	void HandleWeaponEquipped(FortWeapon* NewWeapon, FortWeapon* PrevWeapon);// 0xce81df8
	void HandleQuickbarClutchReleased();// 0xce81ddc
	void HandleQuickbarClutchPressed();// 0xce81dc0
	void HandleMoveToolInteractionStarted(ObjectInteractionBehavior* InteractionMode);// 0xce81d18
	void HandleMoveToolInteractionEnded();// 0xce81d04
	void HandleInputMethodChanged(enum CurrentInputType);// 0xce81c5c
	void HandleCreativeQuickbarReleased(int SlotIndex);// 0xce81bac
	void HandleCreativeQuickbarPressed(int SlotIndex);// 0xce81afc
	void ExecuteDelayedAddItemToQuickbar(const FortItemDefinition* ItemDefinition, const int DesiredSlotIndex, bool bUseVolumeToSpawn);// 0xce819d0
	void ExecuteDelayedAddItemToMoveTool(const FortItemDefinition* ItemDefinition, bool bUseVolume);// 0xce818e0
	void ClientAddToQuickBarComplete(const int SlotPutIn, GUID ItemGuid, const FortItemDefinition* Playset, bool UseDelayedAddToQuickbar, bool bUseVolumeToSpawn);// 0xce81720
	void ActivateQuickbarSlot(int SlotIndex);// 0xce81670

--------------------------------
Class: ObjectInteractionBehavior.ActorComponent.Object
	Color HoverReticleColor;//[Offset: 0xb0, Size: 4]
	Color ActiveReticleColor;//[Offset: 0xb4, Size: 4]
	DataTableRowHandle InteractionClasses;//[Offset: 0xb8, Size: 16]
	class Object[] ValidAllowedClasses;//[Offset: 0xc8, Size: 16]
	class Object[] ValidForbiddenClasses;//[Offset: 0xd8, Size: 16]
	class FortGameplayAbility* StartInteractionAbility;//[Offset: 0xe8, Size: 8]
	class FortGameplayAbility* EndInteractionAbility;//[Offset: 0xf0, Size: 8]
	class FortGameplayAbility* TriggerInteractionAbility;//[Offset: 0xf8, Size: 8]
	class FortGameplayAbility* RotateClockwiseAbility;//[Offset: 0x100, Size: 8]
	class FortGameplayAbility* RotateCounterclockwiseAbility;//[Offset: 0x108, Size: 8]
	class FortGameplayAbility* MirrorAbility;//[Offset: 0x110, Size: 8]
	class FortGameplayAbility* ExitAbility;//[Offset: 0x118, Size: 8]
	class FortGameplayAbility* FailAbility;//[Offset: 0x120, Size: 8]
	bool bShouldAddToParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bShouldUseActorToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	int Priority;//[Offset: 0x12c, Size: 4]
	void TriggerInteractionBehavior();// 0xcfaf7f4
	void TickMovementMode();// 0xcfaf7d8
	void StartCreativeInteractionOnServer();// 0xcfaf7bc
	void StartCreativeInteractionOnClient();// 0xcfaf7a0
	void PlayGameplayAbility(const class FortGameplayAbility ActivatedAbilityClass);// 0xcfaf6f8
	void OnObjectPlacement(out const MeshComponent*[] Components, OriginalAndSpawnedPair NewlyPlacedActorPair);// 0xbbc0600
	bool IsSelectionSetInValidPosition();// 0xcfaf6b8
	void HandleDuplicateActor();// 0xcfaf69c
	void GetSelectedActorsMeshComponents(out MeshComponent*[] Components);// 0xcfaf5dc
	void GetSelectedActors(out Actor*[] SelectedActors);// 0xcfaf51c
	FortPlayerController* GetFortPlayerController();// 0xcfaf4e8
	FortCreativeMoveTool* GetFortCreativeMoveTool();// 0xcfaf4b4
	void ExitCreativeInteraction(const bool bShouldClearActiveInteractionMode);// 0xcfaf3fc
	void EndCreativeInteraction();// 0xcfaf3e0

--------------------------------
Class: OriginalAndSpawnedPair
	Actor* OriginalActor;//[Offset: 0x0, Size: 8]
	Actor* SpawnedActor;//[Offset: 0x8, Size: 8]
	bool bSpawnedActorIsForPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: FortCreativeMoveTool.FortWeapon.Actor.Object
	FortObjectMoverInputComponent* CreativeMoveToolInputComponent;//[Offset: 0xd98, Size: 8]
	OriginalAndSpawnedPair[] SpawnHelperNewlyPlacedActors;//[Offset: 0xe10, Size: 16]
	ActorAndTransformPair[] ToDuplicateActors;//[Offset: 0xe20, Size: 16]
	MulticastInlineDelegateProperty OnFinishedSpawningSelectedActors;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedSpawningPreviewActors;//[Size: 16]
	MulticastInlineDelegateProperty OnFinishedSpawningForCut;//[Size: 16]
	float MaxRange;//[Offset: 0xe68, Size: 4]
	ObjectInteractionBehavior* ActiveMovementMode;//[Offset: 0xe70, Size: 8]
	bool bIsPreviewingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe78, Size: 1]
	ObjectInteractionBehavior*[] InteractionBehaviors;//[Offset: 0xe80, Size: 16]
	DeleteObjects* DeleteObjectsInteractionBehavior;//[Offset: 0xea0, Size: 8]
	PlaysetPreview* PlaysetPreviewInteractionBehavior;//[Offset: 0xea8, Size: 8]
	MulticastInlineDelegateProperty OnMoveToolInteractionStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolInteractionStopped;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotationAxisChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleAxisChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolLineOfSightBlockingChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolDropToFloorChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolPrecisionChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolTransformationModeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleInsteadOfRotateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnAddedSelectedActor;//[Size: 16]
	MulticastInlineDelegateProperty OnCouldNotAddReachedSelectionLimit;//[Size: 16]
	MulticastInlineDelegateProperty OnRemovedSelectedActor;//[Size: 16]
	MulticastInlineDelegateProperty OnSelectedActorsCleared;//[Size: 16]
	MulticastInlineDelegateProperty OnSelectionPropertyChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleModified;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotationModified;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolFocusChanged;//[Size: 16]
	enum CurrentTransformationType;//[Offset: 0x1019, Size: 1]
	CreativeSelectedActorInfo[] SelectedActors;//[Offset: 0x1020, Size: 16]
	LogicalConnectionChain[] ServerSelectedActorLogicalConnections;//[Offset: 0x1030, Size: 16]
	ValidPlacementPair[] ConnectedActorStates;//[Offset: 0x1040, Size: 16]
	Vector ScaleModifier;//[Offset: 0x1050, Size: 12]
	Transform SelectionToWorld;//[Offset: 0x1060, Size: 48]
	Box SelectionSpaceActorsBounds;//[Offset: 0x1090, Size: 28]
	bool bIsScaleUpPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 1]
	bool bIsMultiselectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1140, Size: 1]
	bool bIsQuickbarSupported;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1141, Size: 1]
	enum SelectionProperty;//[Offset: 0x1142, Size: 1]
	bool bIsScaleDownPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1145, Size: 1]
	bool bIsPushPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1146, Size: 1]
	bool bIsPullPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1147, Size: 1]
	bool bIsAutoTractorBeamRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 1]
	bool bIsRotateClockwisePressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1154, Size: 1]
	bool bIsRotateCounterclockwisePressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1155, Size: 1]
	bool bIsScalingInsteadOfRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1156, Size: 1]
	Quat TargetRotationOffset;//[Offset: 0x1160, Size: 16]
	Quat RotationOffset;//[Offset: 0x1170, Size: 16]
	Rotator[] RotationAxes;//[Offset: 0x1180, Size: 16]
	byte RotationAxisIndex;//[Offset: 0x1190, Size: 1]
	enum SelectedScaleAxis;//[Offset: 0x1191, Size: 1]
	<MeshComponent*> HoveredComponents;//[Offset: 0x1198, Size: 80]
	<MeshComponent*,float> ComponentsToReclaimMIDsFrom;//[Offset: 0x11e8, Size: 80]
	CreativePooledMID[] AllMIDs;//[Offset: 0x1238, Size: 16]
	float MaxUnhoverAnimationTime;//[Offset: 0x1298, Size: 4]
	OriginalAndSpawnedPair[] NewlyPlacedActors;//[Offset: 0x12a0, Size: 16]
	FlashCountedActorInfo CutActors;//[Offset: 0x12b0, Size: 24]
	<Actor*> AlreadyProcessedNewlyPlacedActorsOnClient;//[Offset: 0x12c8, Size: 80]
	AgingActorArray RecentlyPlacedAgingActors;//[Offset: 0x1318, Size: 16]
	bool bShouldDestroyPropsWhenPlacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	bool bAllowGravityOnPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1329, Size: 1]
	CreativeOptionVariableBase WantsGravityOnPlace;//[Offset: 0x132c, Size: 12]
	bool bShouldUsePrecisionGridSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1338, Size: 1]
	byte GridSnapIndex;//[Offset: 0x1339, Size: 1]
	CreativeOptionVariableBase WantsPrecisionGridSnapping;//[Offset: 0x133c, Size: 12]
	Vector[] GridSnapRatios;//[Offset: 0x1348, Size: 16]
	bool bDoesRequireCreatePermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1358, Size: 1]
	enum TraceType;//[Offset: 0x1359, Size: 1]
	bool bClientNeedsToProcessNewlyPlacedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135a, Size: 1]
	CreativeOptionVariableBase WantedHitTraceRule;//[Offset: 0x135c, Size: 12]
	GameplayTagContainer MoveToolActivatedTags;//[Offset: 0x1368, Size: 32]
	LevelRecordSpawner* ActiveRecordSpawner;//[Offset: 0x1388, Size: 8]
	CreativeOptionVariableBase WantedIgnoreRecentlyPlacedTime;//[Offset: 0x1390, Size: 12]
	bool bAlwaysMoveFreely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139c, Size: 1]
	CreativeOptionVariableBase WantedAlwaysMoveFreely;//[Offset: 0x13a0, Size: 12]
	CreativeOptionVariableBase WantedCameraSpacePositioning;//[Offset: 0x13ac, Size: 12]
	Actor* HoveredActor;//[Offset: 0x13b8, Size: 8]
	FortCreativeHeatmapThermometerPreview* CreativeHeatmapThermometerPreview;//[Offset: 0x13c0, Size: 8]
	void UnholsterWeapon();// 0xcfb589c
	void TurboBuildAttemptToPlace();// 0xcfb5888
	void SpawnPlaysetVolumeOnServer(const FortPlaysetItemDefinition* Playset, const Vector SpawnLocation, const Rotator SpawnRotation);// 0xcfb5730
	void SpawnPlaysetVolume(const FortPlaysetItemDefinition* Playset, out const Vector SpawnLocation, out const Rotator SpawnRotation);// 0xbbc0600
	void SetupMIDForComponent(MeshComponent* MeshComponent);// 0xcfb5688
	void SetTargetingState(bool bNewTargetingState);// 0xcfb55d8
	void ServerUpdateTractorBeam(float NewTargetTractorBeamOffset, bool bNewIsPushPressed, bool bNewIsPullPressed);// 0xcfb5458
	void ServerUpdateScalePressed(bool bNewIsScaleUpPressed, bool bNewIsScaleDownPressed);// 0xcfb531c
	void ServerUpdateScaleAxis(enum SelectedAxis);// 0xcfb5244
	void ServerUpdateRotationAxis(byte AxisIndex);// 0xcfb516c
	void ServerUpdateRotation(Quat ClientRotation, bool bNewIsRotateClockwisePressed, bool bNewIsRotateCounterclockwisePressed);// 0xcfb4fe8
	void ServerUpdatePrecisionMode(bool bPrecisionMode, byte PrecisionModeIndex);// 0xcfb4ec0
	void ServerUpdateMirrored(bool bMirrored);// 0xcfb4ddc
	void ServerStartInteracting(const Actor*[] Actors, const Transform DragStart);// 0xcfb4c88
	void ServerSpawnSelectedActorsWithTransform(const bool bAllowOverlap, const bool bAllowGravity, const bool bIgnoreStructuralIssues, const bool bForPreviewing);// 0xcfb4aa4
	void ServerSpawnActorWithTransform(Actor* ActorToSpawn, Transform TargetTransform, const bool bAllowOverlap, const bool bAllowGravity, const bool bIgnoreStructuralIssues, const bool bForPreviewing);// 0xcfb4814
	void ServerSetAlwaysMoveFreely(bool bNewValue);// 0xcfb4730
	void ServerSetAllowGravity(bool bAllow);// 0xcfb464c
	void ServerResetScale();// 0xcfb45f0
	void ServerPlaceActorsAndClearMovementMode(Transform TargetTransformForBuildings);// 0xcfb44f8
	void ServerOnNewlyPlacedActorProcessedByClient(OriginalAndSpawnedPair NewlyPlacedActorPair);// 0xcfb43fc
	void ServerMoveSelectionSet(const Transform NewSelectionToWorld, const bool bShouldUpdateOwningClient);// 0xcfb42b4
	void ServerHandshakeFromClientForReceivingCutActors();// 0xcfb4258
	void ServerDuplicateStartInteracting(const Actor*[] Actors, const Transform DragStart);// 0xcfb4104
	void ServerDestroyActor(Actor* ActorToDestroy);// 0xcfb402c
	void ServerClearMovementMode(const bool bExited);// 0xcfb3f48
	void ServerAddItemToMoveTool(FortPlayerControllerAthena* FortPC, const FortItemDefinition* PlaysetToSpawn, bool bUseVolume);// 0xcfb3e14
	void RemoteClientsUpdateSelectedActors(const CreativeSelectedActorInfo[] NewSelectedActors, ObjectInteractionBehavior* CurrentObjectInteractionBehvaior);// 0xcfb3d18
	void QueuedActorDestroyed(Actor* DestroyedActor);// 0xcfb3c70
	void PushCreativeMoveToolEquippedInputComponent();// 0xcfb3c54
	void PopCreativeMoveToolEquippedInputComponent();// 0xcfb3c38
	void OnWantsPrecisionGridSnapping(FortCreativeOption* CreativeOption, byte Index);// 0xcfb3b50
	void OnWantsGravityOnPlace(FortCreativeOption* CreativeOption, byte Index);// 0xcfb3a68
	void OnWantedIgnoreRecentlyPlacedTime(FortCreativeOption* CreativeOption, byte Index);// 0xcfb3980
	void OnWantedHitTraceRule(FortCreativeOption* CreativeOption, byte Index);// 0xcfb3898
	void OnWantedCameraSpacePositioning(FortCreativeOption* CreativeOption, byte Index);// 0xcfb37b0
	void OnWantedAlwaysMoveFreely(FortCreativeOption* CreativeOption, byte Index);// 0xcfb36c8
	void OnValidPlacementChangedActorInstance(Actor* ActorForPlacement, bool ValidPlacement);// 0xbbc0600
	void OnValidPlacementChanged(bool bValidPlacement);// 0xbbc0600
	void OnRep_SelectionProperty();// 0xcfb36b4
	void OnRep_NewlyPlacedActors();// 0xcfb36a0
	void OnRep_CutActors();// 0xcfb368c
	void OnRep_ConnectedActorStates();// 0xcfb3678
	void OnRep_AllowGravityOnPlace();// 0xcfb3664
	void OnRemoveHighlightSelectedActor(Actor* SelectedActor, out const MeshComponent*[] SelectedComponents);// 0xbbc0600
	void OnPlaysetSelected(FortPlaysetItemDefinition* SelectedPlayset);// 0xcfb35bc
	void OnObjectPlacement(out const MeshComponent*[] Components, OriginalAndSpawnedPair NewlyPlacedActorPair);// 0xbbc0600
	void OnInteractionStarted(out const MeshComponent*[] Components);// 0xbbc0600
	void OnInteractionFinished(out const MeshComponent*[] Components);// 0xbbc0600
	void OnHoverChanged(out const MeshComponent*[] NewHoveredComponents, out const MeshComponent*[] UnhoveredComponents, ObjectInteractionBehavior* ObjectInteraction);// 0xbbc0600
	void OnHighlightSelectedActor(Actor* SelectedActor, out const MeshComponent*[] SelectedComponents);// 0xbbc0600
	void OnCreativeQuickmenuEnabledChanged(bool bEnabled);// 0xcfb350c
	void OnCopyOrPickupFailed();// 0xbbc0600
	void OnAllowGravityToggleChanged(bool bAllowGravity);// 0xbbc0600
	void OnAddedToQuickbar(out const MeshComponent*[] Components);// 0xbbc0600
	void MulticastUpdateSelectionSetExceptServerAndOwningClient(const Transform NewTransformToWorld);// 0xcfb3440
	void MulticastUpdateSelectionSetExceptServer(const Transform NewTransformToWorld);// 0xcfb3374
	void MulticastSetCollisionForActor(Actor* Actor, bool bEnableCollision);// 0xcfb327c
	void MulticastRestoreCutActors();// 0xcfb3260
	void MulticastHideCutActors();// 0xcfb3244
	void MulticastForceMoveActorExceptOwningClient(Actor* ActorToMove, const Transform NewTransform);// 0xcfb3134
	void MulticastForceMoveActor(Actor* ActorToMove, const Transform NewTransform);// 0xcfb3024
	bool IsRunningOnOwningClient();// 0xcfb2fec
	bool IsMultiselectingMoveOnGrid();// 0xcfb2fb4
	bool IsMultiSelecting();// 0xcfb2f7c
	void IncrementOrWrapHitTraceRuleOnClient();// 0xcfb2f68
	void HandleTransformModeUpPressed();// 0xcfb2f4c
	void HandleTransformModeDownPressed();// 0xcfb2f30
	void HandleScaleUpReleased();// 0xcfb2f14
	void HandleScaleUpPressed();// 0xcfb2ef8
	void HandleScaleSwitchAxisReleased();// 0xcfb2edc
	void HandleScaleSwitchAxisPressed();// 0xcfb2ec0
	void HandleScaleDownReleased();// 0xcfb2ea4
	void HandleScaleDownPressed();// 0xcfb2e88
	void HandleRotateSwitchAxisReleased();// 0xcfb2e6c
	void HandleRotateSwitchAxisPressed();// 0xcfb2e50
	void HandleRotateSingleCounterclockwiseReleased();// 0xcfb2e34
	void HandleRotateSingleCounterclockwisePressed();// 0xcfb2e18
	void HandleRotateSingleClockwiseReleased();// 0xcfb2dfc
	void HandleRotateSingleClockwisePressed();// 0xcfb2de0
	void HandleRotateCounterclockwiseReleased();// 0xcfb2dc4
	void HandleRotateCounterclockwisePressed();// 0xcfb2da8
	void HandleRotateClockwiseReleased();// 0xcfb2d8c
	void HandleRotateClockwisePressed();// 0xcfb2d70
	void HandleResetScalePressed();// 0xcfb2d54
	void HandleResetRotationPressed();// 0xcfb2d38
	void HandlePushReleased();// 0xcfb2d1c
	void HandlePushPressed();// 0xcfb2d00
	void HandlePullReleased();// 0xcfb2ce4
	void HandlePullPressed();// 0xcfb2cc8
	void HandlePrecisionModeReleased();// 0xcfb2cac
	void HandlePrecisionModePressed();// 0xcfb2c90
	void HandlePlaysetPreviewPlace();// 0xcfb2c74
	void HandlePickupPressed();// 0xcfb2c58
	void HandleMirrorPressed();// 0xcfb2c3c
	void HandleHitTraceRuleReleased();// 0xcfb2c20
	void HandleHitTraceRulePressed();// 0xcfb2c04
	void HandleHitTraceRuleHeldDownLongEnough();// 0xcfb2be8
	void HandleExitReleased();// 0xcfb2bcc
	void HandleExitPressed();// 0xcfb2bb0
	void HandleExitOrDeletePressed();// 0xcfb2b94
	void HandleExitHeldDownLongEnough();// 0xcfb2b78
	void HandleDuplicateActorReleased();// 0xcfb2b5c
	void HandleDuplicateActorPressed();// 0xcfb2b40
	void HandleDropToFloorPressed();// 0xcfb2b24
	void HandleDeleteReleased();// 0xcfb2b08
	void HandleDeletePressed();// 0xcfb2aec
	void HandleCopyPickupReleased();// 0xcfb2ad0
	void HandleCopyPickupPressed();// 0xcfb2ab4
	void HandleClearMultiSelectQueuePressed();// 0xcfb2a98
	void HandleActorSelectedForQueueReleased();// 0xcfb2a7c
	void HandleActorSelectedForQueuePressed();// 0xcfb2a60
	void HandleActivateTranslateModePressed();// 0xcfb2a44
	void HandleActivateScaleModePressed();// 0xcfb2a28
	void HandleActivateRotationModePressed();// 0xcfb2a0c
	void GetValidQueuedActorsAsArray(out Actor*[] ValidQueuedActors);// 0xcfb294c
	bool GetShouldUsePrecisionGridSnapping();// 0xcfb292c
	enum GetSelectedScaleAxis();// 0xcfb290c
	byte GetRotationAxisIndex();// 0xcfb28d8
	int GetMultiselectLimit();// 0xcfb28a4
	Vector[] GetGridSnapRatios();// 0xcfb27ec
	byte GetGridSnapIndex();// 0xcfb27b8
	FortVolume* GetCurrentVolume(const bool bMustHavePermissions);// 0xcfb2700
	FortObjectMoverInputComponent* GetCreativeMoveToolInputComponent();// 0xcfb26e4
	bool GetClientNeedsToProcessNewlyPlacedActors();// 0xcfb26c4
	float GetAverageScaleModifier();// 0xcfb2690
	bool GetAllowGravityOnPlace();// 0xcfb2670
	ObjectInteractionBehavior* GetActiveMovementMode();// 0xcfb2654
	void Finished_DuplicateStartInteractingOnServer();// 0xcfb2640
	void Finished_CutDuplicateStartInteractingOnServer();// 0xcfb262c
	void DeactiveWeaponAndState();// 0xcfb2610
	void ClientStopInteracting();// 0xcfb25f4
	void ClientStartInteracting(ObjectInteractionBehavior* NewActiveMovementMode, const CreativeSelectedActorInfo[] NewSelectedActors, const Transform NewSelectionToWorld, const Box NewSelectionSpaceActorBounds);// 0xcfb2460
	void ClientDeactiveWeaponAndState();// 0xcfb2444
	void ClientAddItemToMoveToolComplete(FortPlayerControllerAthena* FortPC);// 0xcfb2394
	bool CanUtilizeMoveToolSpawningFunctionality();// 0xcfb2354
	void AdjustOptionsBasedOnSelectionProperty(enum UpdatedSelectionProperty);// 0xcfb22ac

--------------------------------
Class: FortObjectMoverInputComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnDuplicateBuildingActorPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnDuplicateBuildingActorReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolLetGo;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolCopyGrabOrDuplicatePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolCopyGrabOrDuplicateReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateClockwisePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateClockwiseReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateCounterclockwisePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateCounterclockwiseReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateSingleClockwisePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateSingleClockwiseReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateSingleCounterclockwisePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolRotateSingleCounterclockwiseReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolSwitchRotationAxisPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolSwitchRotationAxisReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnTouchMoveToolResetRotationPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolMirror;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolPushPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolPushReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolPullPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolPullReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolDropToFloor;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolExitPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolExitReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolDeletePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolDeleteReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolChangePrecisionLevelPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolChangePrecisionLevelReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaysetPreviewPlace;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaysetPreviewPushPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaysetPreviewPushReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaysetPreviewPullPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaysetPreviewPullReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleUpPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleUpReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleDownPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolScaleDownReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolSwitchScaleAxisPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnTouchMoveToolResetScalePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolSwitchScaleAxisReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnCycleTransformationModeUpPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnCycleTransformationModeDownPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnSelectTranslationModePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnSelectRotationModePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnSelectScaleModePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMultiSelectPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMultiSelectReleased;//[Size: 16]
	MulticastInlineDelegateProperty OnClearMultiSelectPressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolHitTraceRulePressed;//[Size: 16]
	MulticastInlineDelegateProperty OnMoveToolHitTraceRuleReleased;//[Size: 16]
	FortPlayerController* OwningPC;//[Offset: 0x3d0, Size: 8]
	InputComponent* CreativeMoveToolEquippedInputComponent;//[Offset: 0x3d8, Size: 8]
	InputComponent* PropPossessorEquippedInputComponent;//[Offset: 0x3e0, Size: 8]
	InputComponent* MoveObjectsFreelyModeInputComponent;//[Offset: 0x3e8, Size: 8]
	InputComponent* MultiSelectMoveObjectsFreelyModeInputComponent;//[Offset: 0x3f0, Size: 8]
	InputComponent* MoveBuildingsOnGridModeInputComponent;//[Offset: 0x3f8, Size: 8]
	InputComponent* MultiSelectMoveBuildingsOnGridModeInputComponent;//[Offset: 0x400, Size: 8]
	InputComponent* TranslationInputComponent;//[Offset: 0x408, Size: 8]
	InputComponent* RotationInputComponent;//[Offset: 0x410, Size: 8]
	InputComponent* ScaleInputComponent;//[Offset: 0x418, Size: 8]
	InputComponent* EmptyInputComponent;//[Offset: 0x420, Size: 8]
	InputComponent* PlaysetPreviewModeInputComponent;//[Offset: 0x428, Size: 8]
	void PushTranslationInputMode(PlayerController* PlayerController);// 0xd03bff4
	void PushScaleInputMode(PlayerController* PlayerController);// 0xd03bf4c
	void PushRotationInputMode(PlayerController* PlayerController);// 0xd03bea4
	void PushPropPossessorEquippedInputComponent(PlayerController* PlayerController);// 0xd03bdfc
	void PushPlaysetPreviewInputMode(PlayerController* PlayerController);// 0xd03bd54
	void PushMultiSelectMoveObjectsFreelyModeInputComponent(PlayerController* PlayerController);// 0xd03bcac
	void PushMultiSelectMoveBuildingsOnGridModeInputComponent(PlayerController* PlayerController);// 0xd03bc04
	void PushMoveObjectsFreelyInputMode(PlayerController* PlayerController);// 0xd03bb5c
	void PushMoveBuildingsOnGridInputMode(PlayerController* PlayerController);// 0xd03bab4
	void PushEmptyInputMode(PlayerController* PlayerController);// 0xd03ba0c
	void PushCreativeMoveToolEquippedInputComponent(PlayerController* PlayerController);// 0xd03b964
	void PopTranslationInputMode(PlayerController* PlayerController);// 0xd03b8bc
	void PopScaleInputMode(PlayerController* PlayerController);// 0xd03b814
	void PopRotationInputMode(PlayerController* PlayerController);// 0xd03b76c
	void PopPropPossessorEquippedInputComponent(PlayerController* PlayerController);// 0xd03b6c4
	void PopPlaysetPreviewInputMode(PlayerController* PlayerController);// 0xd03b61c
	void PopMultiSelectMoveObjectsFreelyModeInputComponent(PlayerController* PlayerController);// 0xd03b574
	void PopMultiSelectMoveBuildingsOnGridModeInputComponent(PlayerController* PlayerController);// 0xd03b4cc
	void PopMoveObjectsFreelyInputMode(PlayerController* PlayerController);// 0xd03b424
	void PopMoveBuildingsOnGridInputMode(PlayerController* PlayerController);// 0xd03b37c
	void PopEmptyInputMode(PlayerController* PlayerController);// 0xd03b2d4
	void PopCreativeMoveToolEquippedInputComponent(PlayerController* PlayerController);// 0xd03b22c
	void PopAllInputModes(PlayerController* PlayerController);// 0xd03b184
	bool IsEmptyInputComponentActive();// 0xd03b14c

--------------------------------
Class: ActorAndTransformPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Transform Transform;//[Offset: 0x10, Size: 48]
	bool bHasValidTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: DeleteObjects.ObjectInteractionBehavior.ActorComponent.Object
	Actor*[] DeleteActors;//[Offset: 0x130, Size: 16]
	void PlayDeleteAnimation();// 0xcfafde8
	void GetDeleteActorsMeshComponents(out MeshComponent*[] Components);// 0xcfafd28

--------------------------------
Class: PlaysetPreview.ObjectInteractionBehavior.ActorComponent.Object
	StaticMeshActor* PreviewPlaysetStaticMeshActor;//[Offset: 0x130, Size: 8]
	StaticMesh* PlaysetMesh;//[Offset: 0x138, Size: 8]
	Material* PlaysetMaterial;//[Offset: 0x140, Size: 8]
	PlaysetInfo PlaysetToPlace;//[Offset: 0x148, Size: 16]
	void UpdatePreviewMeshScale();// 0xcfafcf0
	void ServerSetPreviewLocation(const Vector NewPreviewLocation);// 0xcfafc1c
	void OnRep_PlaysetToPlace();// 0xcfafc08

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 1]
	void SetMobility(byte InMobility);// 0xd8fff84

--------------------------------
Class: PlaysetInfo
	FortPlaysetItemDefinition* Playset;//[Offset: 0x0, Size: 8]
	int8 FlashCounter;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CreativeSelectedActorInfo
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Transform UnscaledActorToSelectionAtDragStart;//[Offset: 0x10, Size: 48]
	Vector DragStartGridSnapPoint;//[Offset: 0x40, Size: 12]
	float OriginalRelevancyDistance;//[Offset: 0x4c, Size: 4]
	bool bWasCollisionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bWasDormant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bSpawnedFromSaveRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	int LogicalConnectionChainIndex;//[Offset: 0x54, Size: 4]

--------------------------------
Class: LogicalConnectionChain
	Actor*[] LogicalConnectedActors;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ValidPlacementPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	bool bIsPlacementValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: CreativePooledMID
	MaterialInstanceDynamic* Mid;//[Offset: 0x0, Size: 8]
	MaterialInterface* OriginalMaterial;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FlashCountedActorInfo
	CreativeSelectedActorInfo[] Actors;//[Offset: 0x0, Size: 16]
	int8 FlashCounter;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AgingActorArray
	ActorAndTimePair[] AgingActors;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ActorAndTimePair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	DateTime SpawnTime;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CreativeOptionVariableBase
	GameplayTag VariableTag;//[Offset: 0x0, Size: 8]
	int Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortCreativeOption.DataAsset.Object
	FText OptionText;//[Offset: 0x30, Size: 24]
	FText OptionToolTip;//[Offset: 0x48, Size: 24]
	FName CategoryTag;//[Offset: 0x60, Size: 8]
	SlateBrush DisplayIcon;//[Offset: 0x68, Size: 136]
	MulticastInlineDelegateProperty OnCreativeOptionChanged;//[Size: 16]
	CreativeOptionData[] Options;//[Offset: 0x100, Size: 16]
	GameplayTag VariableTag;//[Offset: 0x110, Size: 8]
	byte MenuListType;//[Offset: 0x118, Size: 1]
	int CurrentIndex;//[Offset: 0x11c, Size: 4]
	void SetCurrentIndex(int Index);// 0xcfbab48
	void IncrementIndexWithWrap();// 0xcfbab34
	int GetValueAtIndex(int Index);// 0xcfbaa84
	int GetValueAtCurrentIndex();// 0xcfbaa50
	int GetCurrentIndex();// 0xcfbaa1c
	FText GetCreativeOptionTextAtIndex(int Index);// 0xcfba900
	FText GetCreativeOptionTextAtCurrent();// 0xcfba830
	bool DoesMatchCategory(out CreativeOptionCategoryData CreativeOptionCategory);// 0xcfba710
	void DecrementIndexWithWrap();// 0xcfba6fc

--------------------------------
Class: CreativeOptionCategoryData
	FText CategoryDisplayName;//[Offset: 0x0, Size: 24]
	FName CategoryTag;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CreativeOptionData
	FText DisplayText;//[Offset: 0x0, Size: 24]
	int Value;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortCreativeHeatmapThermometerPreview.Actor.Object
	Actor* Actor;//[Offset: 0x228, Size: 8]
	FortPlaysetItemDefinition* PlaysetItemDefinition;//[Offset: 0x230, Size: 8]

--------------------------------
Class: FortCreativeUserPrefabItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	FName UserSaveContentName;//[Offset: 0x798, Size: 8]

--------------------------------
Class: FortPlaysetWorldItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: VehicleTrickInfo
	float LastOnGroundTime;//[Offset: 0x0, Size: 4]
	float mCreditDisabledTime;//[Offset: 0x4, Size: 4]
	int TrickScore;//[Offset: 0x8, Size: 4]
	int TrickAxisCount;//[Offset: 0x9c, Size: 4]
	float AirControlsAlpha;//[Offset: 0xb8, Size: 4]
	float AirDistance;//[Offset: 0xbc, Size: 4]
	float AirDistanceSqrd;//[Offset: 0xc0, Size: 4]
	float AirTime;//[Offset: 0xc4, Size: 4]
	float AirHeight;//[Offset: 0xc8, Size: 4]
	float TimeAtLaunch;//[Offset: 0xcc, Size: 4]
	Vector LocationAtLaunch;//[Offset: 0xd0, Size: 12]
	Vector ForwardVectorAtLaunch;//[Offset: 0xdc, Size: 12]
	Vector UpVectorAtLaunch;//[Offset: 0xe8, Size: 12]
	Vector FlatForwardVectorAtLaunch;//[Offset: 0xf4, Size: 12]
	Vector PrevForwardVec;//[Offset: 0x100, Size: 12]
	Vector PrevRightVec;//[Offset: 0x10c, Size: 12]
	Vector PrevUpVec;//[Offset: 0x118, Size: 12]
	int PeterPanCount;//[Offset: 0x124, Size: 4]
	int StoopingSquirrelCount;//[Offset: 0x128, Size: 4]
	bool bDidPeterPan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 1]
	bool bDidStoopingSquirrel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12c, Size: 1]
	bool bInAirTrick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12c, Size: 1]
	bool bCreditTrick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12c, Size: 1]
	bool bTrickDeactivated;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12c, Size: 1]
	bool bStuckLanding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12c, Size: 1]
	bool bDoingRotationTrick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12c, Size: 1]

--------------------------------
Class: GhostModeRepData
	bool bInGhostMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FortWorldItemDefinition* GhostModeItemDef;//[Offset: 0x8, Size: 8]
	int PreviousFocusedSlot;//[Offset: 0x10, Size: 4]
	float TimeExitedGhostMode;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortCreativeOptionsBundle.DataAsset.Object
	FortCreativeOption*[] CreativeOptions;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortControllerComponent_SpawnedVehicle.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	FortAthenaVehicle* SpawnedVehicle;//[Offset: 0xb0, Size: 8]
	void OnRep_SpawnedVehicle();// 0xcf9d178
	void HandleVehicleStateChanged(FortPlayerPawn* PlayerPawn, Actor* NewVehicle, Actor* OldVehicle);// 0xcf9d054

--------------------------------
Class: NotificationUISettings
	float DisplayTime;//[Offset: 0x0, Size: 4]
	bool bShouldOverrideVisibilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: FortSpectatorThirdPersonPawn.FortReplaySpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: HoverDronePawn.FortReplaySpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	HoverDroneMovementComponent* HoverMoveComponent;//[Offset: 0x358, Size: 8]
	bool IsMaintainingConstantAltitude();// 0xd2349e8
	float GetAltitude();// 0xd2349b4

--------------------------------
Class: HoverDroneMovementComponent.SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float RotAcceleration;//[Offset: 0x194, Size: 4]
	float RotDeceleration;//[Offset: 0x198, Size: 4]
	float MaxPitchRotSpeed;//[Offset: 0x19c, Size: 4]
	float MaxYawRotSpeed;//[Offset: 0x1a0, Size: 4]
	float TurboRotAcceleration;//[Offset: 0x1a4, Size: 4]
	float TurboRotDeceleration;//[Offset: 0x1a8, Size: 4]
	float TurboMaxPitchRotSpeed;//[Offset: 0x1ac, Size: 4]
	float TurboMaxYawRotSpeed;//[Offset: 0x1b0, Size: 4]
	Vector2D TurboAccelerationRange;//[Offset: 0x1b4, Size: 8]
	Vector2D TurboAccelerationAltitudeRange;//[Offset: 0x1bc, Size: 8]
	float TurboDeceleration;//[Offset: 0x1c4, Size: 4]
	float TurboHoverThrustScale;//[Offset: 0x1c8, Size: 4]
	float FullAirFrictionVelocity;//[Offset: 0x1cc, Size: 4]
	Vector CreativeModeBoundsScale;//[Offset: 0x1d0, Size: 12]
	void OnFollowedPlayerChanged(FortPlayerControllerSpectating* SpectatorPC, FortPlayerState* NewFollowedPlayer);// 0xd233708

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 1]

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x138, Size: 4]
	float Acceleration;//[Offset: 0x13c, Size: 4]
	float Deceleration;//[Offset: 0x140, Size: 4]
	float TurningBoost;//[Offset: 0x144, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]

--------------------------------
Class: BattleMapPawnReplay.HoverDronePawn.FortReplaySpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	class BattleMapNode* GroundMoveNodeClass;//[Offset: 0x530, Size: 8]
	class BattleMapNode* AirMoveNodeClass;//[Offset: 0x538, Size: 8]
	class BattleMapNode* GotKillNodeClass;//[Offset: 0x540, Size: 8]
	class BattleMapNode* ZoneNodeClass;//[Offset: 0x548, Size: 8]
	class BattleMapNode* TeamFlightNodeClass;//[Offset: 0x550, Size: 8]
	class BattleMapTimeIndicator* TimeIndicatorClass;//[Offset: 0x558, Size: 8]
	SoundBase* SelectedNodeSound;//[Offset: 0x560, Size: 8]
	SoundBase* HoveredNodeSound;//[Offset: 0x568, Size: 8]
	SoundBase* ScrubbingToSound;//[Offset: 0x570, Size: 8]
	void HandleTimeIndicatorUpdatedSegment(const BattleMapNode* StartNode, const BattleMapEdge* Edge, const BattleMapNode* EndNode);// 0xce41dd0
	void HandleRightMouseUp();// 0xce41dbc
	void HandleRightMouseDown();// 0xce41da8
	void HandleReplayEventRemoving(int Index);// 0xce41d00
	void HandleRefreshingReplayEvents();// 0xce41ce8
	void HandlePlaybackTimeChanged(float NowTime);// 0xce41c40
	void HandleLeftMouseUp();// 0xce41c2c
	void HandleLeftMouseDown();// 0xce41c18
	void HandleGotoTimeComplete(bool bWasSuccessful);// 0xce41b64
	void HandleCompletedAllRequested();// 0xce41b4c
	void HandleCameraOutsideSafeZoneChanged(bool bCameraOutsideSafeZone);// 0xce41a9c
	void HandleBattleMapShowTimeIndicatorChanged(bool bEnabled);// 0xce419ec
	void HandleBattleMapShowNearbyChestsChanged(bool bEnabled);// 0xce4193c
	void HandleBattleMapShowAllSquadMembersChanged(bool bEnabled);// 0xce4188c
	void HandleBattleMapAutomaticCameraPlacementChanged(bool bEnabled);// 0xce417dc
	bool BP_SetTimelineMode(bool bEnabled);// 0xce41720
	bool BP_IsOnTimelineMode();// 0xce41704

--------------------------------
Class: SavedPlayerSpectatorCameraData
	<UniqueNetIdRepl,SavedSpectatorCameraState> PlayerToCameraStateMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: SavedSpectatorCameraState
	bool bDataIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CameraType;//[Offset: 0x1, Size: 1]
	UniqueNetIdRepl FollowedPlayerUniqueId;//[Offset: 0x8, Size: 40]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x30, Size: 12]
	CameraLensSettings LensSettings;//[Offset: 0x3c, Size: 24]
	CameraFocusSettings FocusSettings;//[Offset: 0x58, Size: 88]
	float CurrentFocalLength;//[Offset: 0xb0, Size: 4]
	float CurrentAperture;//[Offset: 0xb4, Size: 4]
	bool bAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float CurrentFocusDistance;//[Offset: 0xbc, Size: 4]
	bool bAutoExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	float ManualExposureBias;//[Offset: 0xc4, Size: 4]
	Transform Transform;//[Offset: 0xd0, Size: 48]
	Rotator ControlRotation;//[Offset: 0x100, Size: 12]
	float ThirdPersonNormalizedDistance;//[Offset: 0x10c, Size: 4]
	enum ThirdPersonAutoFollowMode;//[Offset: 0x110, Size: 1]
	float DroneSpeedIndex;//[Offset: 0x114, Size: 4]
	float ReplayPlaybackSpeed;//[Offset: 0x118, Size: 4]
	bool bNamePlatesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	bool bPlayerOutlinesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	bool bThirdPersonCamCollide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 1]
	bool bFollowDroneDoTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 1]
	bool bBattleMapIsOnTimelineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	NamePlateFilter NamePlatesFilter;//[Offset: 0x128, Size: 88]

--------------------------------
Class: NamePlateFilter
	bool bIsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	<UniqueNetIdRepl> NamePlatesToShow;//[Offset: 0x8, Size: 80]

--------------------------------
Class: SavedSpectatorCameras
	SavedSpectatorCameraShot[] Shots;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SavedSpectatorCameraShot
	SavedSpectatorCameraState CameraState;//[Offset: 0x0, Size: 384]
	bool bIsShotStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float Timestamp;//[Offset: 0x184, Size: 4]
	float ShotLength;//[Offset: 0x188, Size: 4]
	FString Message;//[Offset: 0x190, Size: 16]
	FText LocalisedMessage;//[Offset: 0x1a0, Size: 24]
	enum NotificationType;//[Offset: 0x1b8, Size: 1]
	NotificationUISettings MessageUISettings;//[Offset: 0x1bc, Size: 8]

--------------------------------
Class: RemoteViewRotSnapshotManager
	int BufferSize;//[Offset: 0x0, Size: 4]
	float TimeDelay;//[Offset: 0x4, Size: 4]
	bool bUseVariableTimeDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float VariableTimeDelayMultiplier;//[Offset: 0xc, Size: 4]
	float TimeBeforeDormant;//[Offset: 0x10, Size: 4]
	float InterpSpeedWhenNoSample;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortRelevancyZoneIndicator.Actor.Object
	StaticMeshComponent* RelevancyZoneMesh;//[Offset: 0x220, Size: 8]
	StaticMeshComponent* CustomDepthMesh;//[Offset: 0x228, Size: 8]
	float RelevancyZoneToWorldScale;//[Offset: 0x230, Size: 4]
	MaterialInterface* MiniMapNetRelevancyOverlayMaterial;//[Offset: 0x238, Size: 8]
	MaterialInterface* MiniMapNetRelevancyCircleMaterial;//[Offset: 0x240, Size: 8]
	MaterialInstanceDynamic* MinimapNetRelevancyOverlayMID;//[Offset: 0x248, Size: 8]
	SlateBrush MinimapNetRelevancyOverlayBrush;//[Offset: 0x250, Size: 136]
	MaterialInstanceDynamic* MinimapNetRelevancyCircleMID;//[Offset: 0x2d8, Size: 8]
	SlateBrush MinimapNetRelevancyCircleBrush;//[Offset: 0x2e0, Size: 136]

--------------------------------
Class: FortReplayContext.BlueprintContextBase.Subsystem.Object
	FortReplayPlaybackState PlaybackState;//[Offset: 0x30, Size: 24]
	FortReplayFXState EffectsState;//[Offset: 0x48, Size: 16]
	MulticastInlineDelegateProperty OnReplayFXStateChange;//[Size: 16]
	float TimeBeforeEvent;//[Offset: 0x68, Size: 4]
	MulticastInlineDelegateProperty OnPauseStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnSessionIdWatermarkVisibilityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayTimeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayTimelineChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayPlaybackMultiplierChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayHudVisibilityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayHudNotificationSuppressionChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnToggleReplayViewSettings;//[Size: 16]
	MulticastInlineDelegateProperty OnToggleReplayPlayerList;//[Size: 16]
	MulticastInlineDelegateProperty OnToggleHighlightsListEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayLevelStreamingChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnSequencerReadyEvent;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayTimelineFocusChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayTimelineMarkerAdded;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayTimelineMarkersCleared;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayScrubStart;//[Size: 16]
	MulticastInlineDelegateProperty OnReplayScrubComplete;//[Size: 16]
	MulticastInlineDelegateProperty OnToggleSequencer;//[Size: 16]
	MulticastInlineDelegateProperty OnSequenceFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnSequenceShotChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnHighlightPlayingEvent;//[Size: 16]
	FortSpectateClickableMapIcon*[] InteractiveMapIcons;//[Offset: 0x280, Size: 16]
	<class Object,bool> UniqueMapIconVisibility;//[Offset: 0x290, Size: 80]
	FortPlayerControllerSpectating* SpectatingPC;//[Offset: 0x2e0, Size: 8]
	void ToggleViewSettingsVisibility();// 0xd1bd208
	void TogglePlayPause();// 0xd1bd1f4
	void TogglePlayerListVisibility();// 0xd1bd1e0
	bool ToggleIconVisibility(class Object ToToggle);// 0xd1bd12c
	void ToggleHUDVisibility();// 0xd1bd118
	void ToggleHighlightsListVisibility();// 0xd1bd104
	void TakeScreenshot();// 0xd1bd0f0
	void SkipTo(const float TimeInSeconds);// 0xd1bd048
	void SkipForward(const float TimeInSeconds);// 0xd1bcfa0
	void SkipBack(const float TimeInSeconds);// 0xd1bcef8
	void SetSessionIdWatermarkVisible(bool bIsVisible);// 0xd1bce48
	void ReplayHUDCleanup();// 0xd1bce34
	void OnHighQualityFxEnabledChanged(bool bEnabled);// 0xd1bcd84
	void JumpToPreviousEvent();// 0xd1bcd70
	void JumpToNextEvent();// 0xd1bcd5c
	void JumpToEvent(int EventIndex);// 0xd1bccb4
	void JumpReplayToTimelinePosition(float TimeRatio);// 0xd1bcc0c
	bool IsDepthOfFieldActive();// 0xd1bcbd4
	void IncreasePlaybackMultiplier();// 0xd1bcbc0
	float GetMaxMapZoomLevel();// 0xd1bcb8c
	FString GetEventTooltip(int EventIndex);// 0xd1bcaa0
	FText GetCameraNameFromType(const enum CamType);// 0xd1bc984
	void DecreasePlaybackMultiplier();// 0xd1bc970

--------------------------------
Class: BlueprintContextBase.Subsystem.Object

--------------------------------
Class: FortReplayPlaybackState
	float StartTime;//[Offset: 0x0, Size: 4]
	float EndTime;//[Offset: 0x4, Size: 4]
	float TimeNow;//[Offset: 0x8, Size: 4]
	bool bIsPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PlaybackSpeedMultiplier;//[Offset: 0x10, Size: 4]
	enum HUDVisibility;//[Offset: 0x14, Size: 1]
	bool bLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool bHasRelevancyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]

--------------------------------
Class: FortReplayFXState
	int DefaultParticleLODBias;//[Offset: 0x0, Size: 4]
	int DefaultDepthOfFieldQuality;//[Offset: 0x4, Size: 4]
	int OverrideParticleLODBias;//[Offset: 0x8, Size: 4]
	int OverrideDepthOfFieldQuality;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortSpectateBlend.Object

--------------------------------
Class: FortMiniMapInputComponent.InputComponent.ActorComponent.Object
	void HandleFullScreenMapToggled(bool bMapVisible);// 0xd0cb488

--------------------------------
Class: FortMinigameItemContainerComponent.ActorComponent.Object
	void K2_NotifyItemContainerChanged();// 0xbbc0600

--------------------------------
Class: FortMarkActor.Actor.Object
	FortPlayerStateZone* OwningPlayer;//[Offset: 0x220, Size: 8]
	FString MarkString;//[Offset: 0x228, Size: 16]
	FText PreapprovedMarkString;//[Offset: 0x238, Size: 24]
	bool bFinishedEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Actor* AttachedToActor;//[Offset: 0x258, Size: 8]
	Vector AttachmentOffset;//[Offset: 0x260, Size: 12]
	SlateBrush MiniMapIconBrush;//[Offset: 0x270, Size: 136]
	void OnRep_AttachedToActor();// 0xd0794e0

--------------------------------
Class: FortReplayMovableSpotLight.FortReplaySpectatorPawnBase.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	SpotLightComponent* SpotLightComp;//[Offset: 0x338, Size: 8]
	bool bGroupMoveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	int LightIndex;//[Offset: 0x344, Size: 4]
	float RepInnerAngle;//[Offset: 0x348, Size: 4]
	float RepOuterAngle;//[Offset: 0x34c, Size: 4]
	float RepIntensity;//[Offset: 0x350, Size: 4]
	float RepRadius;//[Offset: 0x354, Size: 4]
	byte RepColorR;//[Offset: 0x358, Size: 1]
	byte RepColorG;//[Offset: 0x359, Size: 1]
	byte RepColorB;//[Offset: 0x35a, Size: 1]
	float RepTemperature;//[Offset: 0x35c, Size: 4]
	bool bRepEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	void OnRep_RepTemperature();// 0xd1be930
	void OnRep_RepRadius();// 0xd1be918
	void OnRep_RepOuterAngle();// 0xd1be900
	void OnRep_RepIntensity();// 0xd1be8e8
	void OnRep_RepInnerAngle();// 0xd1be8d0
	void OnRep_RepEnabled();// 0xd1be8b8
	void OnRep_RepColor();// 0xd1be898

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x344, Size: 4]
	float OuterConeAngle;//[Offset: 0x348, Size: 4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0xd8fbd6c
	void SetInnerConeAngle(float NewInnerConeAngle);// 0xd8fbcc4

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	float LightFalloffExponent;//[Offset: 0x334, Size: 4]
	float SourceRadius;//[Offset: 0x338, Size: 4]
	float SoftSourceRadius;//[Offset: 0x33c, Size: 4]
	float SourceLength;//[Offset: 0x340, Size: 4]
	void SetSourceRadius(float bNewValue);// 0xd8c5c60
	void SetSourceLength(float NewValue);// 0xd8c5bb8
	void SetSoftSourceRadius(float bNewValue);// 0xd8c5b10
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0xd8c5a68

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x319, Size: 1]
	float Radius;//[Offset: 0x31c, Size: 4]
	float AttenuationRadius;//[Offset: 0x320, Size: 4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x324, Size: 12]
	void SetIntensityUnits(enum NewIntensityUnits);// 0xd8905ac
	void SetAttenuationRadius(float NewRadius);// 0xd890504
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0xd8903dc

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: CreateBuildingActorData
	uint32 BuildingClassHandle;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize10 BuildLoc;//[Offset: 0x4, Size: 12]
	Rotator BuildRot;//[Offset: 0x10, Size: 12]
	bool bMirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float SyncKey;//[Offset: 0x20, Size: 4]
	BuildingClassData BuildingClassData;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BuildingClassData
	class BuildingActor* BuildingClass;//[Offset: 0x0, Size: 8]
	int PreviousBuildingLevel;//[Offset: 0x8, Size: 4]
	byte UpgradeLevel;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MediaPlayer.Object
	MulticastInlineDelegateProperty OnEndReached;//[Size: 16]
	MulticastInlineDelegateProperty OnMediaClosed;//[Size: 16]
	MulticastInlineDelegateProperty OnMediaOpened;//[Size: 16]
	MulticastInlineDelegateProperty OnMediaOpenFailed;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaybackResumed;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaybackSuspended;//[Size: 16]
	MulticastInlineDelegateProperty OnSeekCompleted;//[Size: 16]
	MulticastInlineDelegateProperty OnTracksChanged;//[Size: 16]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 8]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 8]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 8]
	int PlaylistIndex;//[Offset: 0xd0, Size: 4]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 8]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 4]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 4]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 12]
	GUID PlayerGuid;//[Offset: 0x120, Size: 16]
	bool SupportsSeeking();// 0xaa0627c
	bool SupportsScrubbing();// 0xaa062b4
	bool SupportsRate(float Rate, bool Unthinned);// 0xaa062ec
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0xaa06498
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0xaa065a8
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0xaa066f8
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0xaa06840
	void SetTimeDelay(Timespan TimeDelay);// 0xaa063f4
	bool SetRate(float Rate);// 0xaa06a3c
	bool SetNativeVolume(float Volume);// 0xaa06988
	void SetMediaOptions(const MediaSource* Options);// 0xaa06af0
	bool SetLooping(bool Looping);// 0xaa06b98
	void SetDesiredPlayerName(FName PlayerName);// 0xaa06c54
	void SetBlockOnTime(out const Timespan Time);// 0xaa06cfc
	bool SelectTrack(enum TrackType, int TrackIndex);// 0xaa06dac
	bool Seek(out const Timespan Time);// 0xaa06eac
	bool Rewind();// 0xaa06f68
	bool Reopen();// 0xaa06fa0
	bool Previous();// 0xaa06fd8
	void PlayAndSeek();// 0xaa07010
	bool Play();// 0xaa07024
	bool Pause();// 0xaa0705c
	bool OpenUrl(FString URL);// 0xaa07094
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0xaa07354
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0xaa07154
	bool OpenSource(MediaSource* MediaSource);// 0xaa07470
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0xaa07524
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0xaa07624
	bool OpenFile(FString FilePath);// 0xaa076dc
	bool Next();// 0xaa0779c
	bool IsReady();// 0xaa077d4
	bool IsPreparing();// 0xaa07844
	bool IsPlaying();// 0xaa0787c
	bool IsPaused();// 0xaa078b4
	bool IsLooping();// 0xaa078ec
	bool IsConnecting();// 0xaa07924
	bool IsClosed();// 0xaa0780c
	bool IsBuffering();// 0xaa0795c
	bool HasError();// 0xaa07994
	Rotator GetViewRotation();// 0xaa07a00
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0xaa07a38
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0xaa07b78
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0xaa07c70
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0xaa07d68
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0xaa07e64
	float GetVerticalFieldOfView();// 0xaa07f5c
	FString GetUrl();// 0xaa07f90
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0xaa08014
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0xaa08158
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0xaa08254
	MediaTimeStampInfo* GetTimeStamp();// 0xaa083bc
	Timespan GetTimeDelay();// 0xaa079cc
	Timespan GetTime();// 0xaa083f0
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0xaa08424
	int GetSelectedTrack(enum TrackType);// 0xaa08530
	float GetRate();// 0xaa085e0
	int GetPlaylistIndex();// 0xaa08614
	MediaPlaylist* GetPlaylist();// 0xaa08630
	FName GetPlayerName();// 0xaa0864c
	int GetNumTracks(enum TrackType);// 0xaa0877c
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0xaa08680
	FText GetMediaName();// 0xaa0882c
	float GetHorizontalFieldOfView();// 0xaa08904
	Timespan GetDuration();// 0xaa08938
	FName GetDesiredPlayerName();// 0xaa0896c
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0xaa089a0
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0xaa08ae0
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0xaa08bd8
	void Close();// 0xaa08cd0
	bool CanPlayUrl(FString URL);// 0xaa08ce4
	bool CanPlaySource(MediaSource* MediaSource);// 0xaa08da4
	bool CanPause();// 0xaa08e58

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 28]
	Timespan SeekTime;//[Offset: 0x20, Size: 8]
	enum PlayOnOpen;//[Offset: 0x28, Size: 1]
	enum Loop;//[Offset: 0x29, Size: 1]

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 4]
	int Caption;//[Offset: 0x4, Size: 4]
	int MetaData;//[Offset: 0x8, Size: 4]
	int Script;//[Offset: 0xc, Size: 4]
	int Subtitle;//[Offset: 0x10, Size: 4]
	int Text;//[Offset: 0x14, Size: 4]
	int Video;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 16]
	bool Replace(int Index, MediaSource* Replacement);// 0xaa0a35c
	bool RemoveAt(int Index);// 0xaa0a45c
	bool Remove(MediaSource* MediaSource);// 0xaa0a510
	int Num();// 0xaa0a5c4
	void Insert(MediaSource* MediaSource, int Index);// 0xaa0a5e0
	MediaSource* GetRandom(out int OutIndex);// 0xaa0a6d4
	MediaSource* GetPrevious(out int InOutIndex);// 0xaa0a790
	MediaSource* GetNext(out int InOutIndex);// 0xaa0a84c
	MediaSource* Get(int Index);// 0xaa0a908
	bool AddUrl(FString URL);// 0xaa0a9b8
	bool AddFile(FString FilePath);// 0xaa0aa78
	bool Add(MediaSource* MediaSource);// 0xaa0ab38

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 8]
	int64 SequenceIndex;//[Offset: 0x30, Size: 8]

--------------------------------
Class: ProfileUpdateSingle
	int64 ProfileRevision;//[Offset: 0x0, Size: 8]
	FString ProfileId;//[Offset: 0x8, Size: 16]
	int64 ProfileChangesBaseRevision;//[Offset: 0x18, Size: 8]
	JsonObjectWrapper[] ProfileChanges;//[Offset: 0x20, Size: 16]
	DateTime LockExpiration;//[Offset: 0x30, Size: 8]
	JsonObjectWrapper[] Notifications;//[Offset: 0x38, Size: 16]
	int ProfileCommandRevision;//[Offset: 0x48, Size: 4]

--------------------------------
Class: ChoiceData
	int MenuIdentifier;//[Offset: 0x0, Size: 4]
	bool bShowCloseButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FText Title;//[Offset: 0x8, Size: 24]
	ChoiceDataEntry[] Items;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ChoiceDataEntry
	FText ButtonText;//[Offset: 0x0, Size: 24]
	FText ButtonDescription;//[Offset: 0x18, Size: 24]
	FText ConfirmText;//[Offset: 0x30, Size: 24]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bRequireConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bCloseAfterSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]

--------------------------------
Class: FortRequirementsInfo
	int CommanderLevel;//[Offset: 0x0, Size: 4]
	int PersonalPowerRating;//[Offset: 0x4, Size: 4]
	int MaxPersonalPowerRating;//[Offset: 0x8, Size: 4]
	int PartyPowerRating;//[Offset: 0xc, Size: 4]
	int MaxPartyPowerRating;//[Offset: 0x10, Size: 4]
	FortQuestItemDefinition*[] ActiveQuestDefinitions;//[Offset: 0x18, Size: 16]
	FortQuestItemDefinition* QuestDefinition;//[Offset: 0x28, Size: 8]
	DataTableRowHandle ObjectiveStatHandle;//[Offset: 0x30, Size: 16]
	FortQuestItemDefinition* UncompletedQuestDefinition;//[Offset: 0x40, Size: 8]
	FortItemDefinition* ItemDefinition;//[Offset: 0x48, Size: 8]
	FString EventFlag;//[Offset: 0x50, Size: 16]

--------------------------------
Class: FortControllerComponent_Aircraft.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnAircraftStateChange;//[Size: 16]
	FortAircraft* CurrentAircraft;//[Offset: 0xc0, Size: 8]
	void ServerAttemptAircraftJump(Rotator ClientRotation);// 0xcf93660
	void OnAircraftStateChange__DelegateSignature();// 0xbbc0600
	bool IsInAircraft();// 0xcf93644
	void ClientExitAircraft();// 0xcf93628
	void ClientEnterAircraft(FortAircraft* InAircraft);// 0xcf93578

--------------------------------
Class: JoinabilitySettings
	FName SessionName;//[Offset: 0x0, Size: 8]
	bool bPublicSearchable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bAllowInvites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bJoinViaPresence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bJoinViaPresenceFriendsOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	int MaxPlayers;//[Offset: 0xc, Size: 4]
	int MaxPartySize;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AttributeModifierInfo
	GameplayEffect* InstantGEs;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuildingWeakSpot.FortClientOnlyActor.Actor.Object
	Object* ParentObject;//[Offset: 0x248, Size: 8]
	bool bHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 1]
	bool bFadeOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x250, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x250, Size: 1]
	int HitCount;//[Offset: 0x254, Size: 4]
	int Level;//[Offset: 0x258, Size: 4]
	int MaxLevel;//[Offset: 0x25c, Size: 4]
	Vector StartingLocation;//[Offset: 0x260, Size: 12]
	Vector HitNormal;//[Offset: 0x26c, Size: 12]
	byte PhysicalSurfaceType;//[Offset: 0x278, Size: 1]
	void OnStartDirectionEffect();// 0xbbc0600
	void OnHit();// 0xbbc0600
	void OnFadeOut();// 0xbbc0600
	void Deactivate();// 0xce77b18

--------------------------------
Class: AIDirectorDebugInfo
	float Timestamp;//[Offset: 0x0, Size: 4]
	float[] DebugGraphData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LastBuildableState
	BuildingEditModeMetadata* LastBuildableMetaData;//[Offset: 0x0, Size: 8]
	bool LastBuildableMirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int LastBuildableRotationIterations;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortDamageNumberInfo
	Vector WorldLocation;//[Offset: 0x0, Size: 12]
	Vector HitNormal;//[Offset: 0xc, Size: 12]
	bool bIsCriticalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int Damage;//[Offset: 0x1c, Size: 4]
	enum DamageNumberType;//[Offset: 0x20, Size: 1]
	float VisualDamageScale;//[Offset: 0x24, Size: 4]
	enum ElementalDamageType;//[Offset: 0x28, Size: 1]
	enum ScoreType;//[Offset: 0x29, Size: 1]
	bool bAttachScoreNumberToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x30, Size: 8]
	MaterialInstanceDynamic*[] MeshMIDs;//[Offset: 0x38, Size: 16]
	int[] DamageNumberArray;//[Offset: 0x48, Size: 16]
	GameplayTagContainer DamagedActorTags;//[Offset: 0x58, Size: 32]
	Actor* DamagedActor;//[Offset: 0x78, Size: 8]
	Pawn* DamageCauser;//[Offset: 0x80, Size: 8]

--------------------------------
Class: FortDamageNumbersActor.FortClientOnlyActor.Actor.Object
	float ComponentLifespan;//[Offset: 0x224, Size: 4]
	StaticMesh* MeshesByElement;//[Offset: 0x228, Size: 8]
	StaticMesh* CritBuildingImpactMesh;//[Offset: 0x250, Size: 8]
	StaticMesh* MeshesByScoreCategory;//[Offset: 0x258, Size: 8]
	FName PlayerMaterialParameterName;//[Offset: 0x270, Size: 8]
	float PlayerMaterialParameterValue;//[Offset: 0x278, Size: 4]
	FName ColorParameterName;//[Offset: 0x27c, Size: 8]
	LinearColor HitPlayerColor;//[Offset: 0x284, Size: 16]
	LinearColor CriticalHitPlayerColor;//[Offset: 0x294, Size: 16]
	LinearColor HitEnemyColor;//[Offset: 0x2a4, Size: 16]
	LinearColor CriticalHitEnemyColor;//[Offset: 0x2b4, Size: 16]
	LinearColor HitBuildingColor;//[Offset: 0x2c4, Size: 16]
	LinearColor CriticalHitBuildingColor;//[Offset: 0x2d4, Size: 16]
	LinearColor ShieldHitColor;//[Offset: 0x2e4, Size: 16]
	LinearColor CriticalHitShieldColor;//[Offset: 0x2f4, Size: 16]
	FortDamageNumberColorInfo[] DamageNumberColorInfos;//[Offset: 0x308, Size: 16]
	FName AnimationLifespanParameterName;//[Offset: 0x318, Size: 8]
	FName IsCriticalHitParameterName;//[Offset: 0x320, Size: 8]
	float SpacingPercentageForOnes;//[Offset: 0x328, Size: 4]
	FName[] PositionParameterNames;//[Offset: 0x330, Size: 16]
	float DistanceFromCameraBeforeDoublingSize;//[Offset: 0x340, Size: 4]
	float CriticalHitSizeMultiplier;//[Offset: 0x344, Size: 4]
	float FontXSize;//[Offset: 0x348, Size: 4]
	float FontYSize;//[Offset: 0x34c, Size: 4]
	float NumberOfNumberRotations;//[Offset: 0x350, Size: 4]
	FName[] ScaleRotationAngleParameterNames;//[Offset: 0x358, Size: 16]
	FName[] DurationParameterNames;//[Offset: 0x368, Size: 16]
	float MaxScoreNumberDistance;//[Offset: 0x378, Size: 4]
	FName MoveToCameraParameterName;//[Offset: 0x37c, Size: 8]
	LinearColor[] PercentDamageColors;//[Offset: 0x388, Size: 16]
	int[] PercentDamageThresholds;//[Offset: 0x398, Size: 16]
	PooledDamageNumberComponents PooledComponentsByElement;//[Offset: 0x3a8, Size: 16]
	PooledDamageNumberComponents PooledComponentsCritBuildingImpact;//[Offset: 0x3f8, Size: 16]
	PooledDamageNumberComponents PooledComponentsByScoreCategory;//[Offset: 0x408, Size: 16]
	LiveDamageNumberComponent[] LiveComponents;//[Offset: 0x438, Size: 16]
	void SetMaterialParameters(out FortDamageNumberInfo NewDamageNumberInfo, out const Transform CameraTransform, out const Vector NumberLocation);// 0xb65d790
	void OnNewDamageNumber(out const FortDamageNumberInfo NewDamageNumberInfo);// 0xbbc0600

--------------------------------
Class: FortDamageNumberColorInfo
	FString DisplayText;//[Offset: 0x0, Size: 16]
	LinearColor Color;//[Offset: 0x10, Size: 16]
	LinearColor CriticalColor;//[Offset: 0x20, Size: 16]
	GameplayTagContainer Tags;//[Offset: 0x30, Size: 32]

--------------------------------
Class: PooledDamageNumberComponents
	StaticMeshComponent*[] Components;//[Offset: 0x0, Size: 16]

--------------------------------
Class: LiveDamageNumberComponent
	StaticMeshComponent* Component;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortQuickBars.FortClientOnlyActor.Actor.Object
	QuickBar PrimaryQuickBar;//[Offset: 0x228, Size: 144]
	QuickBar SecondaryQuickBar;//[Offset: 0x2b8, Size: 144]
	QuickBar CreativeQuickBar;//[Offset: 0x348, Size: 144]
	FortWorldItem*[] AllCachedTraps;//[Offset: 0x440, Size: 16]
	FortWorldItem*[] CachedFloorTraps;//[Offset: 0x450, Size: 16]
	FortWorldItem*[] CachedWallTraps;//[Offset: 0x460, Size: 16]
	FortWorldItem*[] CachedCeilingTraps;//[Offset: 0x470, Size: 16]

--------------------------------
Class: RecentlyRemovedQuickbarInfo
	GUID ItemGuid;//[Offset: 0x0, Size: 16]
	int RemovedFromSlot;//[Offset: 0x10, Size: 4]
	FortItemDefinition* ItemDefinition;//[Offset: 0x18, Size: 8]

--------------------------------
Class: DelayedQuickBarActionContainer.FastArraySerializer
	DelayedQuickBarAction[] Items;//[Offset: 0x108, Size: 16]

--------------------------------
Class: DelayedQuickBarAction.FastArraySerializerItem
	uint32 ActionId;//[Offset: 0xc, Size: 4]
	enum Action;//[Offset: 0x10, Size: 1]
	GUID ItemGuid;//[Offset: 0x14, Size: 16]
	PrimaryAssetId ItemDefinitionAssetId;//[Offset: 0x24, Size: 16]
	enum QuickBarType;//[Offset: 0x34, Size: 1]
	int QuickBarSlot;//[Offset: 0x38, Size: 4]
	bool bForceExecution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: QueuedItemsToDropViaPickup
	FortPawn* DestructionPawn;//[Offset: 0x0, Size: 8]
	int TotalNumItemsToDrop;//[Offset: 0x8, Size: 4]
	FortWorldItem*[] ItemsToDrop;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortClientPilot_Base.ClientPilotComponent.Object
	FortClientPilotArbitraryAction*[] AvailableAAs;//[Offset: 0xa8, Size: 16]
	FortClientPilotArbitraryAction*[] AAQueue;//[Offset: 0xb8, Size: 16]
	FortPawn* EnemyTarget;//[Offset: 0xf8, Size: 8]
	FortPickup* PickupTarget;//[Offset: 0x100, Size: 8]
	BuildingActor* BuildingTarget;//[Offset: 0x108, Size: 8]
	BuildingSMActor* EditTarget;//[Offset: 0x110, Size: 8]

--------------------------------
Class: ClientPilotComponent.Object

--------------------------------
Class: FortClientPilotArbitraryAction.Object
	FortClientPilotActionBase*[] ActionSteps;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortClientPilotActionBase.Object

--------------------------------
Class: FortClientBotManager.Object
	TimerHandle MissionEndTimerHandle;//[Offset: 0x68, Size: 8]
	bool bHasAttemptedAbandon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bIsMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bShouldPickRandomMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bShouldRecordFPSCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bShouldRecordMemoryReports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bFPSRecordingStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bWatchingForCallStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	int iSelectedTheater;//[Offset: 0x9c, Size: 4]
	int iSelectedTile;//[Offset: 0xa0, Size: 4]
	int[] SelectedTileList;//[Offset: 0xa8, Size: 16]
	float RandomZoneDifficultyMinimum;//[Offset: 0xb8, Size: 4]
	float RandomZoneDifficultyMaximum;//[Offset: 0xbc, Size: 4]
	int NumSkillPurchasesAttempted;//[Offset: 0xc0, Size: 4]
	int MaxSkillPurchaseAttempts;//[Offset: 0xc4, Size: 4]
	int NumWorkerSlotsAttempted;//[Offset: 0xc8, Size: 4]
	int MaxWorkerSlotAttempts;//[Offset: 0xcc, Size: 4]
	float LobbyActionTimer;//[Offset: 0xd0, Size: 4]
	float TimeBetweenLobbyActions;//[Offset: 0xd4, Size: 4]
	bool bWaitingForSkillTreePurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bWaitingForWorkerSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	int LoopsSpentWaitingForFrontend;//[Offset: 0xdc, Size: 4]
	float TimeBetweenStartButtonClicks;//[Offset: 0xe0, Size: 4]
	float TimeSinceFriendInvitesSent;//[Offset: 0xe8, Size: 4]
	float LastMatchmakeTime;//[Offset: 0xec, Size: 4]
	float LastLoginCycleTime;//[Offset: 0xf0, Size: 4]
	float MatchmakingStartTime;//[Offset: 0xf4, Size: 4]
	float LastChangedStateTime;//[Offset: 0xf8, Size: 4]
	float LastRandomTurnTime;//[Offset: 0xfc, Size: 4]
	float LastPickLootTime;//[Offset: 0x100, Size: 4]
	float LastPickEnemyTime;//[Offset: 0x104, Size: 4]
	float LastEnemyKilledTime;//[Offset: 0x108, Size: 4]
	float LastBuildingKilledTime;//[Offset: 0x10c, Size: 4]
	float LastGoodInteraction;//[Offset: 0x110, Size: 4]
	float LastCheckGoodTarget;//[Offset: 0x114, Size: 4]
	FortPawn* EnemyTarget;//[Offset: 0x168, Size: 8]
	FortPickup* PickupTarget;//[Offset: 0x170, Size: 8]
	BuildingActor* BuildingTarget;//[Offset: 0x178, Size: 8]
	BuildingActor* MissionTarget;//[Offset: 0x180, Size: 8]
	BuildingActor* PrimaryMissionTarget;//[Offset: 0x188, Size: 8]
	BuildingActor*[] AllMissionTargets;//[Offset: 0x190, Size: 16]
	BuildingActor*[] ActiveMissionTargets;//[Offset: 0x1a0, Size: 16]
	Vector ViewLocation;//[Offset: 0x250, Size: 12]
	FortPlayerPawn* MyPawn;//[Offset: 0x260, Size: 8]
	FortWorldItem*[] ItemsToCheckForMaxStackSize;//[Offset: 0x268, Size: 16]

--------------------------------
Class: FortRewardReport
	FText MissionName;//[Offset: 0x0, Size: 24]
	FText TheaterName;//[Offset: 0x18, Size: 24]
	FText Difficulty;//[Offset: 0x30, Size: 24]
	float DifficultyValue;//[Offset: 0x48, Size: 4]
	FortRewardActivity[] RewardActivities;//[Offset: 0x50, Size: 16]
	bool bIsFinalized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: FortRewardActivity
	byte ActivityType;//[Offset: 0x0, Size: 1]
	GUID ActivityGuid;//[Offset: 0x4, Size: 16]
	FText TitleText;//[Offset: 0x18, Size: 24]
	FText DescriptionText;//[Offset: 0x30, Size: 24]
	float RewardDisplayTime;//[Offset: 0x48, Size: 4]
	FortItemEntry[] RewardItems;//[Offset: 0x50, Size: 16]
	FortItemEntry[] MissedRewardItems;//[Offset: 0x60, Size: 16]
	enum ActivityCompletionResult;//[Offset: 0x70, Size: 1]
	int AdditionalCompletionMissionPoints;//[Offset: 0x74, Size: 4]

--------------------------------
Class: HeartbeatManager.Object
	bool bShouldTrackLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float TrackLocationFrequencySec;//[Offset: 0x44, Size: 4]
	bool bShouldSendPerMinuteResourceAndDamageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bShouldSendPerMinuteVehicleEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	FortAnalyticsClientEngagementsManager* AnalyticsClientEngagementsManager;//[Offset: 0x68, Size: 8]

--------------------------------
Class: FortAnalyticsClientEngagementsManager.Object

--------------------------------
Class: FortStatEventManager.Object
	FortPlayerController* FPC;//[Offset: 0x28, Size: 8]
	FortStatEvent[] StatEvents;//[Offset: 0x30, Size: 16]
	FortStatEventSequence[] StatEventSequences;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortStatEvent
	FName StatEventName;//[Offset: 0x0, Size: 8]
	byte RepeatType;//[Offset: 0x8, Size: 1]
	FName[] StatsToMonitor;//[Offset: 0x10, Size: 16]
	FortEventConditional[] Conditions;//[Offset: 0x20, Size: 16]
	class FortClientAnnouncement* AnnouncementToDisplay;//[Offset: 0x30, Size: 8]
	Object* NotificationParameter;//[Offset: 0x38, Size: 8]
	Stat* AssociatedStat;//[Offset: 0x40, Size: 8]
	FortPlayerController* FPC;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortEventConditional
	byte ConditionalType;//[Offset: 0x0, Size: 1]
	FName StatToCompare;//[Offset: 0x4, Size: 8]
	enum RelevantPeriod;//[Offset: 0xc, Size: 1]
	byte ComparisonType;//[Offset: 0xd, Size: 1]
	int Value;//[Offset: 0x10, Size: 4]
	Stat* Stat;//[Offset: 0x18, Size: 8]
	FortPlayerController* FPC;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortStatEventSequence
	FName StatEventName;//[Offset: 0x0, Size: 8]
	byte RepeatType;//[Offset: 0x8, Size: 1]
	FortStatEvent[] EventSequence;//[Offset: 0x10, Size: 16]
	Stat* AssociatedStat;//[Offset: 0x20, Size: 8]
	FortPlayerController* FPC;//[Offset: 0x28, Size: 8]
	FName[] StatsToMonitor;//[Offset: 0x30, Size: 16]
	FortEventConditional[] Conditions;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortPersistentGameplayStatContainer
	FortPersistentGameplayStatValue[] GameplayStats;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortSprayDecalInstance.BuildingSMActor.BuildingActor.Actor.Object
	FortSprayDecalRepPayload SprayInfo;//[Offset: 0xae0, Size: 32]
	bool bDestroyOnNearbyDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb00, Size: 1]
	bool bDestroyOnNearbyDamageTaken;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb00, Size: 1]
	bool bDestroyOnNearbyBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb00, Size: 1]
	MaterialInstanceDynamic*[] SprayMIDsThatCanBounce;//[Offset: 0xb08, Size: 16]
	void StartSprayFadeOutDueToNewPlacement();// 0xd1dc978
	void SetSprayParameters(FortPlayerController* SpawningPC, AthenaSprayItemDefinition* InSprayAsset);// 0xd1dc894
	void OnSprayInfoReady();// 0xbbc0600
	void OnRep_SprayInfo();// 0xd1dc880
	void OnBounceOccurs();// 0xbbc0600

--------------------------------
Class: FortSprayDecalRepPayload
	AthenaSprayItemDefinition* SprayAsset;//[Offset: 0x0, Size: 8]
	FName BannerName;//[Offset: 0x8, Size: 8]
	FName BannerColor;//[Offset: 0x10, Size: 8]
	int SavedStatValue;//[Offset: 0x18, Size: 4]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: AthenaSprayItemDefinition.AthenaDanceItemDefinition.FortMontageItemDefinitionBase.AthenaCosmeticItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x8d8, Size: 40]
	FName ProgressiveCosmeticStatName;//[Offset: 0x900, Size: 8]
	bool bUseBannerAsTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 1]
	Texture2D* DecalTexture;//[Offset: 0x910, Size: 40]
	bool ShouldUseBannerAsTexture();// 0xce3c9f8
	Texture2D* GetDecalTexture();// 0xce3c91c
	MaterialInterface* GetDecalMaterial();// 0xce3c840

--------------------------------
Class: LockOnInfo
	enum State;//[Offset: 0x0, Size: 1]
	FortWeapon* Weapon;//[Offset: 0x4, Size: 8]
	Actor* LockOnTarget;//[Offset: 0xc, Size: 8]
	Rotator CamRotAtTargetAcquisiton;//[Offset: 0x14, Size: 12]
	Vector2D LockOnCoords;//[Offset: 0x20, Size: 8]
	float TargetAcquisitionTime;//[Offset: 0x28, Size: 4]
	float TargetLockOnTime;//[Offset: 0x2c, Size: 4]
	float TargetOutOfSightTime;//[Offset: 0x30, Size: 4]
	float CooldownStartTime;//[Offset: 0x34, Size: 4]

--------------------------------
Class: FortIndicatorManager.Object
	FortIndicator*[] AllIndicators;//[Offset: 0x28, Size: 16]
	FortMiniMapIndicator*[] MiniMapIndicators;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FortControllerComponent_InventoryNetworkManagement.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	void ServerSwapItems(Object* SourceOwner, Object* TargetOwner, const ItemGuidAndCount[] ItemGuids);// 0xcf99308
	void ServerSwapItem(Object* SourceOwner, Object* TargetOwner, GUID ItemGuid, int Count);// 0xcf9916c

--------------------------------
Class: ItemGuidAndCount
	int Count;//[Offset: 0x0, Size: 4]
	GUID ItemGuid;//[Offset: 0x4, Size: 16]

--------------------------------
Class: FortControllerComponent_Interaction.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	Actor* ActorPendingNonInteraction;//[Offset: 0xb0, Size: 8]
	float ClearActorPendingNonInteractionTime;//[Offset: 0xb8, Size: 4]
	AudioComponent* LongInteractAudioComponent;//[Offset: 0x168, Size: 8]
	FortInteractContextInfo* PossibleInteractContextInfo;//[Offset: 0x190, Size: 8]
	FortInteractContextInfo* InteractResponse;//[Offset: 0x198, Size: 8]
	Actor* InteractActor;//[Offset: 0x1a0, Size: 8]
	bool bInteractTraceStartsAtClosestPointDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 1]
	bool bFilterInteractTracesBehindMyFortPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 1]
	bool bFilterInteractTracesBehindMyFortPawnOtherThanBuildingActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 1]
	bool bDoNotFilterBuildingActorsThatAreAttachedToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	bool bFilterInteractTracesBehindMyFortPawnOnlyWithMultipleResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 1]
	bool bInteractTracesWithStartPenetratingBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6, Size: 1]
	bool bUseReticleAimingIfInitialBlockingInteractTraceBehindMyFortPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b7, Size: 1]
	float InteractTracesCapsuleReductionPct;//[Offset: 0x1b8, Size: 4]
	float MobileUpdateCachedInteractActorsCooldown;//[Offset: 0x1c4, Size: 4]
	float MobileUpdateCachedInteractActorsCooldownLength;//[Offset: 0x1c8, Size: 4]
	bool bTapInteractEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	enum TouchInteractMode;//[Offset: 0x1cd, Size: 1]
	bool bAllowRetryUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bAthena;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool bUsePlayerInsteadOfCameraForTraces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	bool bShouldBlockInteractionsForAllVehiclePassengers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 1]
	FortInteractContextInfo* AutoDoorInteractResponse;//[Offset: 0x1d8, Size: 8]
	Actor*[] CurrentlyHighlightedActors;//[Offset: 0x200, Size: 16]
	<GameplayTag,int> InteractionTagHistory;//[Offset: 0x210, Size: 80]
	void ServerNotifyStartLongUse(Actor* ReceivingActor);// 0xcf9824c
	void ServerNotifyEndLongUse(Actor* ReceivingActor);// 0xcf98174
	void ServerAttemptInteract(Actor* ReceivingActor, PrimitiveComponent* InteractComponent, byte InteractType, Object* OptionalObjectData, byte InteractionBeingAttempted, int RequestID);// 0xcf97f50
	FortInteractContextInfo* K2_GetInteractResponse();// 0xcf97f34
	Actor* GetInteractActor();// 0xcf97f18
	void FixupInteractionWidgetsOnUnzoom();// 0xcf97f04

--------------------------------
Class: FortControllerComponent_Collections.FortControllerComponent.ControllerComponent.GameFrameworkComponent.ActorComponent.Object
	void OnFishCollected(out const FortItemEntry ItemEntry, out const FortMcpCollectedFishProperties FishProperties, out GameplayTag OutFishCollectionTag, out GameplayTag OutAnalyticsTag, out enum OutNewSeenState);// 0xcf93a00
	static FortControllerComponent_Collections* GetCollectionsComponent(const Pawn* Pawn, out enum OutIsValid);// 0xcf9390c

--------------------------------
Class: FortMcpCollectedFishProperties
	float Weight;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]

--------------------------------
Class: QuickHealItemPicker.Object
	QuickHealPriority[] QuickHealPriorities;//[Offset: 0x28, Size: 16]
	GameplayTag HealingItemComparisonTag;//[Offset: 0x38, Size: 8]
	GameplayTag ShieldItemComparisonTag;//[Offset: 0x40, Size: 8]
	GameplayTagContainer SpecialActionTags;//[Offset: 0x48, Size: 32]
	void HandlePlayerHealthOrShieldChanged();// 0xd24f41c
	void HandleOnSafeZoneOccupancyChanged(FortPlayerPawn* PlayerPawn, bool bIsInSafeZone);// 0xd24f32c

--------------------------------
Class: QuickHealPriority
	float MinHealth;//[Offset: 0x0, Size: 4]
	float MaxHealth;//[Offset: 0x4, Size: 4]
	float MinShields;//[Offset: 0x8, Size: 4]
	float MaxShields;//[Offset: 0xc, Size: 4]
	GameplayTag[] GameplayTags;//[Offset: 0x10, Size: 16]

--------------------------------
Class: FortPersistentResourceItemDefinition.FortAccountItemDefinition.FortPersistableItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	bool bIsEventItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool IsEventItem();// 0xd1139b8

--------------------------------
Class: FortAlterationSlotStatus
	FortAlterationItemDefinition* Alteration;//[Offset: 0x0, Size: 8]
	int MinRequiredLevel;//[Offset: 0x8, Size: 4]
	enum MinHostItemRarity;//[Offset: 0xc, Size: 1]

--------------------------------
Class: FortCosmeticVariant.Object
	GameplayTag VariantChannelTag;//[Offset: 0x28, Size: 8]
	FText VariantChannelName;//[Offset: 0x30, Size: 24]
	GameplayTag ActiveVariantTag;//[Offset: 0x48, Size: 8]
	FText GetVariantUnlockRequirement(GameplayTag InVariantTag);// 0xcfa5adc
	FText GetVariantText(GameplayTag InVariantTag);// 0xcfa59b8
	FText GetVariantChannelText();// 0xcfa58e0
	GameplayTagContainer GetAllVariantTags();// 0xcfa5860

--------------------------------
Class: FortCosmeticVariantPreview
	FText UnlockCondition;//[Offset: 0x0, Size: 24]
	float PreviewTime;//[Offset: 0x18, Size: 4]
	McpVariantChannelInfo[] VariantOptions;//[Offset: 0x20, Size: 16]
	FortCosmeticVariantPreviewElement[] AdditionalItems;//[Offset: 0x30, Size: 16]

--------------------------------
Class: FortCosmeticVariantPreviewElement
	McpVariantChannelInfo[] VariantOptions;//[Offset: 0x0, Size: 16]
	AthenaCosmeticItemDefinition* Item;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortCosmeticAdaptiveStatPreview
	FText UnlockCondition;//[Offset: 0x0, Size: 24]
	FortCosmeticAdaptiveStatPair[] StatValues;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortCosmeticAdaptiveStatPair
	FortStatManagerTag StatTag;//[Offset: 0x0, Size: 8]
	int StatValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortStatManagerTag.GameplayTag

--------------------------------
Class: ApplyVariantsAdditionalParams
	FortPlayerPawn* WeakPlayerPawn;//[Offset: 0x0, Size: 8]
	ActorComponent*[] AdditionalVariantComponents;//[Offset: 0x8, Size: 16]
	bool bApplyToAdditionalVariantComponentsOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bDeriveMIDNameFromParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bShouldResetOverrideMaterialsOnMeshSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	CosmeticVariantInfo[] PreviouslyActiveVariants;//[Offset: 0x20, Size: 16]
	bool bBackpackReliesOnVariantsFromCID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bGliderReliesOnVariantsFromCID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bForbidParticleSwapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]

--------------------------------
Class: FortCosmeticReactivePreview.Actor.Object
	Object*[] PotentiallyResponsiveObjects;//[Offset: 0x230, Size: 16]
	FCRP_LoopingUpdate[] ActiveLoops;//[Offset: 0x240, Size: 16]
	void StartSteppedDynamicStat(Object* Requester, int From, int To, int AtRate, enum EndBehavior);// 0xcfa6ea4
	void StartSmoothDynamicStat(Object* Requester, float From, float To, float AtRate, enum EndBehavior);// 0xcfa6d00
	void OnFortPlayerPawnFinishedCustomization(FortPlayerPawn* Pawn);// 0xcfa6c58
	void OnBoundingActorEndedPlay(Actor* ActorEndingPlay, byte Reason);// 0xcfa6b70
	CosmeticVariantInfo GetVariantInfo();// 0xcfa6b38
	void DispatchReactStart();// 0xcfa6b1c
	void DispatchReactEnd();// 0xcfa6b00

--------------------------------
Class: FCRP_LoopingUpdate
	Object* Requester;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AthenaCosmeticMaterialOverride
	FName ComponentName;//[Offset: 0x0, Size: 8]
	int MaterialOverrideIndex;//[Offset: 0x8, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x10, Size: 40]

--------------------------------
Class: FortItemSeriesDefinition.PrimaryDataAsset.DataAsset.Object
	FText DisplayName;//[Offset: 0x30, Size: 24]
	FortColorPalette Colors;//[Offset: 0x48, Size: 80]
	Texture2D* BackgroundTexture;//[Offset: 0x98, Size: 40]
	MaterialInterface* ItemCardMaterial;//[Offset: 0xc0, Size: 40]
	MaterialInterface* BackgroundMaterial;//[Offset: 0xe8, Size: 40]

--------------------------------
Class: FortColorPalette
	LinearColor Color1;//[Offset: 0x0, Size: 16]
	LinearColor Color2;//[Offset: 0x10, Size: 16]
	LinearColor Color3;//[Offset: 0x20, Size: 16]
	LinearColor Color4;//[Offset: 0x30, Size: 16]
	LinearColor Color5;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortVehicleSeatWeaponComponent.ActorComponent.Object
	FName[] MuzzleSocketNames;//[Offset: 0xb0, Size: 16]
	WeaponSeatDefinition[] WeaponSeatDefinitions;//[Offset: 0xc0, Size: 16]
	int ActiveSeatIdx;//[Offset: 0xd0, Size: 4]
	FortWeaponRanged* CachedWeapon;//[Offset: 0xd8, Size: 8]
	FortWeaponRangedItemDefinition* CachedWeaponDef;//[Offset: 0xe0, Size: 8]
	float CachedOverheatMax;//[Offset: 0xe8, Size: 4]
	float CachedOverheatValue;//[Offset: 0xec, Size: 4]
	float OverheatValueRepped;//[Offset: 0xf0, Size: 4]
	bool bWeaponEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool bUseVehicleOrientationForShootingCone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool bControlledByMultipleSeats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	Actor* ActorBase;//[Offset: 0xf8, Size: 8]
	bool bReadyToSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	ScalableFloat TotalShotsAllowedThenShutdown;//[Offset: 0x108, Size: 40]
	int ShotsFired;//[Offset: 0x130, Size: 4]
	bool bWeaponOverheatDataHasBeenCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	FortCachedWeaponOverheatData CachedWeaponOverheatData;//[Offset: 0x138, Size: 24]
	VehicleWeapon_RetainedData CachedWeaponState;//[Offset: 0x150, Size: 12]
	bool bSaveAndRestoreWeaponData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	SkeletalMeshComponent* WeaponSklMeshComponent;//[Offset: 0x160, Size: 8]
	FName VehicleSocketName;//[Offset: 0x168, Size: 8]
	FName VehiclePawnAttachSocketName;//[Offset: 0x170, Size: 8]
	float AttachmentAngleOffsetYaw;//[Offset: 0x178, Size: 4]
	bool bIsStandaloneComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	void OnRep_ShotsFired();// 0xd207918
	void OnRep_OverheatValueRepped();// 0xd207904
	void OnMountedWeaponFired(const int SeatIdx, int ShotsRemaining);// 0xbbc0600
	Actor* GetVehicle();// 0xd2078d0
	float GetOverheatScaler();// 0xd20789c
	float GetOverheatingMaxValue();// 0xd207868
	float GetCurrentOverheatValue();// 0xd207834
	void EquipVehicleWeapon(FortPawn* FortPawn, out WeaponSeatDefinition WeaponSeatDefinition, int ItemLevel);// 0xd2076d8

--------------------------------
Class: WeaponSeatDefinition
	int SeatIndex;//[Offset: 0x0, Size: 4]
	FortWeaponItemDefinition* VehicleWeapon;//[Offset: 0x8, Size: 8]
	ActionDefForUI[] WeaponActionDefForUI;//[Offset: 0x10, Size: 16]
	FortWeaponItemDefinition* VehicleWeaponOverride;//[Offset: 0x20, Size: 8]
	FortWeaponItemDefinition* LastEquippedVehicleWeapon;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ActionDefForUI
	FName InputAction;//[Offset: 0x0, Size: 8]
	FName GamepadInputAction;//[Offset: 0x8, Size: 8]
	FText ActionLabel;//[Offset: 0x10, Size: 24]

--------------------------------
Class: FortWeaponRangedItemDefinition.FortWeaponItemDefinition.FortWorldItemDefinition.FortItemDefinition.McpItemDefinitionBase.PrimaryDataAsset.DataAsset.Object
	class FortProjectileBase* ProjectileTemplate;//[Offset: 0xb98, Size: 40]
	ParticleSystem* BulletShellFXTemplate;//[Offset: 0xbc0, Size: 40]
	bool bUseNativeWeaponTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbe8, Size: 1]
	bool bTraceThroughPawns;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbe8, Size: 1]
	bool bTraceThroughWorld;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbe8, Size: 1]
	bool bShouldSpawnBulletShellFX;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbe8, Size: 1]
	bool bShouldUsePerfectAimWhenTargetingMinSpread;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbe8, Size: 1]
	bool bDoNotAllowDoublePump;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbe8, Size: 1]
	bool bUseOnTouch;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xbe8, Size: 1]
	bool bAllowADSInAir;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbe8, Size: 1]
	bool bShowReticleHitNotifyAtImpactLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbe9, Size: 1]
	bool bForceProjectileTooltip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbe9, Size: 1]
	bool bSecondaryFireRequiresAmmo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbe9, Size: 1]
	bool UseOnTouch();// 0xd2278b4
	bool ShouldUsePerfectAimWhenTargetingMinSpread();// 0xd22787c
	bool ShouldUseNativeWeaponTrace();// 0xd227844
	bool ShouldTraceThroughWorld();// 0xd22780c
	bool ShouldTraceThroughPawns();// 0xd2277d4
	bool ShouldSpawnBulletShellFX();// 0xd22779c
	bool ShouldShowReticleHitNotifyAtImpactLocation();// 0xd22777c
	class FortProjectileBase GetProjectileTemplate();// 0xd227748
	ParticleSystem* GetBulletShellFXTemplate();// 0xd227714
	bool ForceProjectileTooltip();// 0xd2276f4
	bool DoNotAllowDoublePump();// 0xd2276bc

--------------------------------
Class: FortCachedWeaponOverheatData
	float TimeWeaponWasUnequipped;//[Offset: 0x0, Size: 4]
	float OverheatValueAtUneqip;//[Offset: 0x4, Size: 4]
	float OverheatValue;//[Offset: 0x8, Size: 4]
	float TimeOverheatedBegan;//[Offset: 0x10, Size: 4]
	float TimeHeatWasLastAdded;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleWeapon_RetainedData
	int AmmoInClip;//[Offset: 0x0, Size: 4]
	float LastFireTime;//[Offset: 0x4, Size: 4]
	bool bHasPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: AthenaVehicleShootingCone
	float YawConstraint;//[Offset: 0x0, Size: 4]
	float PitchConstraint;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InteractionType
	byte InteractionType;//[Offset: 0x0, Size: 1]
	byte InteractionBeingAttempted;//[Offset: 0x1, Size: 1]
	FortPlayerPawn* RequestingPawn;//[Offset: 0x4, Size: 8]
	FortPlayerController* RequestingPlayerController;//[Offset: 0xc, Size: 8]
	PrimitiveComponent* InteractComponent;//[Offset: 0x1c, Size: 8]
	Object* OptionalObjectData;//[Offset: 0x24, Size: 8]
	Vector InteractPoint;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: VehicleDamageablePart
	int ConfigIndex;//[Offset: 0x0, Size: 4]
	int BoneIndex;//[Offset: 0x4, Size: 4]
	int ShapeIndex;//[Offset: 0x8, Size: 4]
	float Health;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleRuntimeModifiers
	byte DataVersion;//[Offset: 0x0, Size: 1]
	bool bHasInfiniteFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportCosmeticWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 136]

--------------------------------
Class: IgnoredPawn
	FortPawn* Pawn;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PredictedDestroyedBuilding
	BuildingActor* Building;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortRechargingActionTimer
	float ChargeRate;//[Offset: 0xa8, Size: 4]
	float ActiveExpenseRate;//[Offset: 0xac, Size: 4]
	float PassiveExpenseRate;//[Offset: 0xb0, Size: 4]
	float MinActiveDuration;//[Offset: 0xb4, Size: 4]
	float MinActivationCharge;//[Offset: 0xb8, Size: 4]
	float ActiveCooldownTime;//[Offset: 0xbc, Size: 4]
	float ChargeThreshold;//[Offset: 0xc0, Size: 4]
	float Charge;//[Offset: 0xc4, Size: 4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bIsCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bIsPassive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]

--------------------------------
Class: VehicleSpringInfo
	FName SpringStart;//[Offset: 0x0, Size: 8]
	Vector SpringStartLocalOffset;//[Offset: 0x8, Size: 12]
	FName ForceApplicationPoint;//[Offset: 0x14, Size: 8]
	float SpringLength;//[Offset: 0x1c, Size: 4]
	float SpringStiff;//[Offset: 0x20, Size: 4]
	float SpringDamp;//[Offset: 0x24, Size: 4]
	float SpringRadius;//[Offset: 0x28, Size: 4]
	float MaxAccelChange;//[Offset: 0x2c, Size: 4]
	int8 SeatSocketIndex;//[Offset: 0x30, Size: 1]
	bool bIsLookAhead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bNormalToGroundTriangle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bForceAlongSpringGroundNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 1]
	float LookAheadMinSpeed;//[Offset: 0x34, Size: 4]
	float LookAheadMaxSpeed;//[Offset: 0x38, Size: 4]
	float LookAheadMinStiff;//[Offset: 0x3c, Size: 4]
	float LookAheadMaxStiff;//[Offset: 0x40, Size: 4]
	Transform LocalStartTM;//[Offset: 0x50, Size: 48]
	Transform LocalApplyTM;//[Offset: 0x80, Size: 48]
	HitResult Hit;//[Offset: 0xb0, Size: 136]
	Plane GroundPlane;//[Offset: 0x140, Size: 16]
	float SprungMass;//[Offset: 0x150, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	Vector Start;//[Offset: 0x158, Size: 12]
	Vector End;//[Offset: 0x164, Size: 12]
	Vector RayDir;//[Offset: 0x170, Size: 12]
	Vector ForcePt;//[Offset: 0x17c, Size: 12]
	Vector ForceDir;//[Offset: 0x188, Size: 12]

--------------------------------
Class: SpringGroundTriangle
	FName Socket0;//[Offset: 0x0, Size: 8]
	FName Socket1;//[Offset: 0x8, Size: 8]
	FName Socket2;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SMVehicleGear
	float TopSpeed;//[Offset: 0x0, Size: 4]
	float MinSpeed;//[Offset: 0x4, Size: 4]
	float PushForce;//[Offset: 0x8, Size: 4]
	float RampTime;//[Offset: 0xc, Size: 4]
	float SteeringAngleMultiplier;//[Offset: 0x10, Size: 4]
	bool bAutoBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bIgnoreGravity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]

--------------------------------
Class: FortVehicleTrickSet.PrimaryDataAsset.DataAsset.Object
	DataTableRowHandle Basics;//[Offset: 0x30, Size: 16]
	FortVehicleIncrementTrick[] RollTricks;//[Offset: 0x40, Size: 16]
	FortVehicleIncrementTrick[] ReverseRollTricks;//[Offset: 0x50, Size: 16]
	FortVehicleIncrementTrick[] YawTricks;//[Offset: 0x60, Size: 16]
	FortVehicleIncrementTrick[] ReverseYawTricks;//[Offset: 0x70, Size: 16]
	FortVehicleIncrementTrick[] PitchTricks;//[Offset: 0x80, Size: 16]
	FortVehicleIncrementTrick[] ReversePitchTricks;//[Offset: 0x90, Size: 16]

--------------------------------
Class: FortVehicleIncrementTrick
	FText Name;//[Offset: 0x0, Size: 24]
	int HalfSpinsNeeded;//[Offset: 0x18, Size: 4]
	int BaseScore;//[Offset: 0x1c, Size: 4]
	int Repeats;//[Offset: 0x20, Size: 4]
	int RepeatsHalfSpinsPerTrick;//[Offset: 0x24, Size: 4]
	int MultiplierIncrement;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SeatTransitionMontage
	AnimMontage* Montage;//[Offset: 0x0, Size: 8]
	int FromSeatIndex;//[Offset: 0x8, Size: 4]
	int ToSeatIndex;//[Offset: 0xc, Size: 4]
	bool bUseFromSeatIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseToSeatIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: FortVehicleSeatComponent.ActorComponent.Object
	float SeatSwitchCooldown;//[Offset: 0xb0, Size: 4]
	bool bHasAnyMountedWeaponSeats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	AthenaCarPlayerSlot[] PlayerSlots;//[Offset: 0xc8, Size: 16]
	AthenaCarPlayerSlotUnreplicated[] PlayerSlotsUnreplicated;//[Offset: 0xd8, Size: 16]
	int[] PlayerSlotPriorityList;//[Offset: 0xe8, Size: 16]
	bool bAlwaysAllowEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	FortPawn* PreviousDriver;//[Offset: 0xfc, Size: 8]
	void OnRep_PlayerSlots();// 0xb6d2d94

--------------------------------
Class: AthenaCarPlayerSlot
	FName SeatSocket;//[Offset: 0x0, Size: 8]
	FName SeatChoiceSocket;//[Offset: 0x8, Size: 8]
	FName SeatIndicatorSocket;//[Offset: 0x10, Size: 8]
	FText SeatChoiceDisplayText;//[Offset: 0x18, Size: 24]
	FName SeatCollision;//[Offset: 0x30, Size: 8]
	FName[] ExitSockets;//[Offset: 0x38, Size: 16]
	AthenaVehicleShootingCone ShootingCone;//[Offset: 0x48, Size: 8]
	SoundBase* SoundOnEnter;//[Offset: 0x50, Size: 8]
	SoundBase* SoundOnExit;//[Offset: 0x58, Size: 8]
	class AnimInstance* AnimInstanceOverride;//[Offset: 0x60, Size: 8]
	class AnimInstance* AnimLayerOverride;//[Offset: 0x68, Size: 8]
	bool bUsePerSeatAnimInstanceOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bIsSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bUseGroundMotion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]
	bool bUseVehicleIsOnGround;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x70, Size: 1]
	bool bCanEmote;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 1]
	bool bCanCarryDBNOPlayer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x70, Size: 1]
	bool bForceCrouch;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x70, Size: 1]
	bool bPlayEnterSoundForTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x70, Size: 1]
	bool bPlayExitSoundForTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	bool bIsPushDriver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71, Size: 1]
	bool bCanOnlyFireWhenTargeting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71, Size: 1]
	Vector ActorSpaceCameraOffset;//[Offset: 0x74, Size: 12]
	Vector VehicleSpaceCameraOffset;//[Offset: 0x80, Size: 12]
	float SlopeCompensationCameraOffset;//[Offset: 0x8c, Size: 4]
	Vector StandingFiringOffset;//[Offset: 0x90, Size: 12]
	Vector CrouchingFiringOffset;//[Offset: 0x9c, Size: 12]
	Vector EmoteOffset;//[Offset: 0xa8, Size: 12]
	FortPlayerPawn* Player;//[Offset: 0xb8, Size: 8]
	interface class * ControllerUser;//[Offset: 0xc0, Size: 16]
	float PlayerEntryTime;//[Offset: 0xd0, Size: 4]
	float EnterSeatTime;//[Offset: 0xd4, Size: 4]
	bool bConstrainPawnToSeatTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bConstrainPawnToSeatDuringTransitionMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bOffsetPlayerRelativeAttachLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bUseExitTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	FortVehicleSeatWeaponComponent* WeaponComponent;//[Offset: 0xe0, Size: 8]
	bool bIsMountedWeaponOnlySeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	float CameraPitchConstraint;//[Offset: 0xec, Size: 4]
	float CameraYawConstraint;//[Offset: 0xf0, Size: 4]
	ActionDefForUI[] ActionDefForUI;//[Offset: 0xf8, Size: 16]

--------------------------------
Class: AthenaCarPlayerSlotUnreplicated
	InputComponent* Input;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortVehicleInteractionOverrideComponent.ActorComponent.Object

--------------------------------
Class: FortSkyTubePhysicsComponent.ActorComponent.Object
	float MaxTubeSpeed;//[Offset: 0xb0, Size: 4]
	float MaxTubeAcceleration;//[Offset: 0xb4, Size: 4]
	bool bMagnetizeWhenNotInSkytube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	MulticastInlineDelegateProperty OnEnteredSkyTube;//[Size: 16]
	MulticastInlineDelegateProperty OnChangedSkyTube;//[Size: 16]
	MulticastInlineDelegateProperty OnExitedSkyTube;//[Size: 16]
	FortSkyTube* SkyTube;//[Offset: 0xf8, Size: 8]
	FortSkyTube* PrevSkyTube;//[Offset: 0x100, Size: 8]
	bool bMagnetized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	void SetMagnetization(const bool bInMagnetized);// 0xd1d26c4
	void OnRep_SkyTube(FortSkyTube* PreviousSkyTube);// 0xd1d261c
	void OnRep_Magnetized(bool bPreviousMagnetized);// 0xd1d256c
	bool IsSkyTubeForceEnabled();// 0xd1d2534
	bool IsMagnetized();// 0xd1d24fc
	bool IsInSkyTube();// 0xd1d24c4
	void ExitSkyTube(FortSkyTube* InSkyTube);// 0xd1d241c
	void EnterSkyTube(FortSkyTube* InSkyTube);// 0xd1d2374
	void ComputeAccelerations(const float DeltaTime, PrimitiveComponent* PrimComp, out Vector OutLinearAcceleration, out Vector OutAngularAccelerationRad);// 0xd1d21f8

--------------------------------
Class: FortVehiclePontoonsComponent.BuoyancyComponent.ActorComponent.Object
	VehicleEffectsPontoonParamSet[] WaterEffectsPontoonParameters;//[Offset: 0x1d8, Size: 16]
	float[] OverridePontoonRadiuses;//[Offset: 0x1e8, Size: 16]
	int[] PushForcePontoons;//[Offset: 0x1f8, Size: 16]
	int[] LeftTurnPontoons;//[Offset: 0x208, Size: 16]
	int[] RightTurnPontoons;//[Offset: 0x218, Size: 16]
	FortAthenaVehicle* OwnerVehicle;//[Offset: 0x228, Size: 8]
	int WaterLineStartPontoonIndex;//[Offset: 0x230, Size: 4]
	int WaterLineEndPontoonIndex;//[Offset: 0x234, Size: 4]
	void OnRep_PontoonRadius(out const float[] PrevPontoonRadiuses);// 0xb6d3018

--------------------------------
Class: VehicleEffectsPontoonParamSet
	FName PontoonName;//[Offset: 0x0, Size: 8]
	FName EffectsName;//[Offset: 0x8, Size: 8]
	FName ImpulseParamName;//[Offset: 0x10, Size: 8]
	FName LocationParamName;//[Offset: 0x18, Size: 8]
	FName RotationParamName;//[Offset: 0x20, Size: 8]
	FName WaterBodyIndex;//[Offset: 0x28, Size: 8]
	FName WaterHeightParamName;//[Offset: 0x30, Size: 8]
	FName DepthParamName;//[Offset: 0x38, Size: 8]
	FName WaterPlaneLocation;//[Offset: 0x40, Size: 8]
	FName WaterPlaneNormal;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortAthenaTrackableAIObjectComponent.ActorComponent.Object
	GameplayTagContainer GameplayTags;//[Offset: 0xc0, Size: 32]

--------------------------------
Class: FortVehicleMovementSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData FrontLateralFrictionScale;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData RearLateralFrictionScale;//[Offset: 0x58, Size: 40]
	FortGameplayAttributeData BrakeForceTractionScale;//[Offset: 0x80, Size: 40]
	FortGameplayAttributeData ForwardForceTractionScale;//[Offset: 0xa8, Size: 40]
	FortGameplayAttributeData SlopeAntigravityScale;//[Offset: 0xd0, Size: 40]
	FortGameplayAttributeData TopSpeedScale;//[Offset: 0xf8, Size: 40]
	FortGameplayAttributeData VehicleGravityScale;//[Offset: 0x120, Size: 40]

--------------------------------
Class: ReplicatedAthenaVehicleAttributes
	float FrontLateralFrictionScale;//[Offset: 0x0, Size: 4]
	float RearLateralFrictionScale;//[Offset: 0x4, Size: 4]
	float BrakeForceTractionScale;//[Offset: 0x8, Size: 4]
	float ForwardForceTractionScale;//[Offset: 0xc, Size: 4]
	float SlopeAntigravityScale;//[Offset: 0x10, Size: 4]
	float TopSpeedScale;//[Offset: 0x14, Size: 4]
	float VehicleGravityScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortVehicleImminentCollisionComponent.ActorComponent.Object
	bool bAllowHitPawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bAllowHitBuildingPieces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool bDoMultiSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	bool bOnlyAffectBuildingsIfKillingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 1]
	float ClientIgnoreBuildingActorsTime;//[Offset: 0xb4, Size: 4]
	FName NoVehicleDamageTagName;//[Offset: 0xb8, Size: 8]
	FName BoxTraceSingleName;//[Offset: 0xc0, Size: 8]
	FName DestructionTraceSocket;//[Offset: 0xc8, Size: 8]
	FName DestructionTraceSocketRear;//[Offset: 0xd0, Size: 8]
	bool bUpdateTimeoutIgnoreBuildingActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	byte TraceChannel;//[Offset: 0xd9, Size: 1]
	PotentiallyDestroyedBuilding[] PotentiallyDestroyedBuildings;//[Offset: 0xe0, Size: 16]
	bool bAlignLookAheadDirectionWithVehicleYAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bAlignLookAheadDirectionWithVehicleZAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	float VehicleApproxHalfLength;//[Offset: 0xf4, Size: 4]

--------------------------------
Class: PotentiallyDestroyedBuilding
	BuildingActor* BuildingActor;//[Offset: 0x0, Size: 8]
	float TimeSinceCollision;//[Offset: 0x8, Size: 4]

--------------------------------
Class: FortCameraMode_AthenaVehicle.FortCameraMode_ThirdPerson.FortCameraMode.Object
	Vector CameraOriginOffset;//[Offset: 0xdc8, Size: 12]

--------------------------------
Class: FortVehicleAnimSet.DataAsset.Object
	FortAnimInput_VehicleDriverAnimAsset DefaultAnimAsset;//[Offset: 0x30, Size: 176]
	FortAnimInput_VehicleDriverAnimAsset FemaleOverrideAnimAsset;//[Offset: 0xe0, Size: 176]

--------------------------------
Class: FortAnimInput_VehicleDriverAnimAsset
	AnimSequence* DriveNPose;//[Offset: 0x0, Size: 8]
	AnimSequence* DriveEPose;//[Offset: 0x8, Size: 8]
	AnimSequence* DriveWPose;//[Offset: 0x10, Size: 8]
	AnimSequence* DriveNAdditivePose;//[Offset: 0x18, Size: 8]
	AnimSequence* DriveFastAdditivePose;//[Offset: 0x20, Size: 8]
	AnimSequence* OverrideDriverPose;//[Offset: 0x28, Size: 8]
	AnimSequence* DriveIdle;//[Offset: 0x30, Size: 8]
	AnimSequence* DriveIdleFastAdditive;//[Offset: 0x38, Size: 8]
	AimOffsetBlendSpace* DriverHeadAimOffset;//[Offset: 0x40, Size: 8]
	AnimSequence* DriveNStart;//[Offset: 0x48, Size: 8]
	AnimSequence* Braking;//[Offset: 0x50, Size: 8]
	AnimSequence* BoostStart;//[Offset: 0x58, Size: 8]
	AnimSequence* BoostLoop;//[Offset: 0x60, Size: 8]
	AnimSequence* ReverseStart;//[Offset: 0x68, Size: 8]
	AnimSequence* ReverseLoop;//[Offset: 0x70, Size: 8]
	AnimSequence* ReverseEnd;//[Offset: 0x78, Size: 8]
	AnimSequence* ReturnToIdleTransition;//[Offset: 0x80, Size: 8]
	AnimSequence* PoseCorrectionAdditive;//[Offset: 0x88, Size: 8]
	AnimSequence* CollisionN;//[Offset: 0x90, Size: 8]
	AnimSequence* Collisions;//[Offset: 0x98, Size: 8]
	AnimSequence* CollisionE;//[Offset: 0xa0, Size: 8]
	AnimSequence* CollisionW;//[Offset: 0xa8, Size: 8]

--------------------------------
Class: VehicleCosmeticInfo
	FortPlayerPawn* MostRecentCosmeticSourcePawn;//[Offset: 0x0, Size: 8]
	AthenaVehicleCosmeticItemDefinition* ActiveCosmeticItem;//[Offset: 0x8, Size: 8]
	FortPlayerPawn* PawnAssociatedWithWrap;//[Offset: 0x10, Size: 8]
	AthenaItemWrapDefinition* ActiveCosmeticWrap;//[Offset: 0x18, Size: 8]
	SceneComponent*[] SpawnedCosmeticComponents;//[Offset: 0x20, Size: 16]
	CustomItemWrapModifier* ItemWrapModifier;//[Offset: 0x30, Size: 8]

--------------------------------
Class: FortVehicleNavModifierComponent.FortPhysicsObjectNavigationComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	void OnVehicleSleepStateChanged(const bool bIsAwake);// 0xd207334

--------------------------------
Class: FortPhysicsObjectNavigationComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	float LowSpeedSquareThreshold;//[Offset: 0x140, Size: 4]
	float LowSpeedSquareDistanceThreshold;//[Offset: 0x144, Size: 4]
	float LowSpeedRotationThreshold;//[Offset: 0x148, Size: 4]
	float LowSpeedScaleThreshold;//[Offset: 0x14c, Size: 4]
	PrimitiveComponent* ComponentAffectingNavMesh;//[Offset: 0x150, Size: 8]
	FortPhysicsObjectComponent* PhysicsObjectComponent;//[Offset: 0x158, Size: 8]
	void OnSleepStateChanged(PrimitiveComponent* SimulatingComponent, bool bIsAwake);// 0xd117784

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 8]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 12]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	void SetAreaClass(class NavArea NewAreaClass);// 0xad95ffc

--------------------------------
Class: FortBuildingActorSet.FortHealthSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData BuildTime;//[Offset: 0x3f8, Size: 40]
	FortGameplayAttributeData RepairTime;//[Offset: 0x420, Size: 40]
	void OnRep_RepairTime(out const FortGameplayAttributeData OldValue);// 0xcf3effc
	void OnRep_BuildTime(out const FortGameplayAttributeData OldValue);// 0xcf3ef28

--------------------------------
Class: FortSpawnSlotData
	Vector SpawnSlotLocation;//[Offset: 0x0, Size: 12]
	FortAIPawn* OccupyingAI;//[Offset: 0x10, Size: 8]
	byte SlotStatus;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FortPlacementActor.BuildingActor.Actor.Object
	Actor* OccupyingActor;//[Offset: 0x5ac, Size: 8]

--------------------------------
Class: FortRiftReservation
	bool bDesiredVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDesiredActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	FortRiftReservationHandle ReservationHandle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ThreatLocationArray.FastArraySerializer
	ThreatLocationInfo[] Locations;//[Offset: 0x108, Size: 16]

--------------------------------
Class: StormWindArray.FastArraySerializer
	StormWind[] StormWinds;//[Offset: 0x108, Size: 16]

--------------------------------
Class: StormWind.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 12]
	Vector Direction;//[Offset: 0x18, Size: 12]
	float Radius;//[Offset: 0x24, Size: 4]
	float Magnitude;//[Offset: 0x28, Size: 4]
	FortThreatVisualsManager* ThreatVisualsManager;//[Offset: 0x30, Size: 8]
	FortAIEncounterInfo*[] Encounters;//[Offset: 0x38, Size: 16]
	FortWindImpulseHandle WindHandle;//[Offset: 0x48, Size: 4]

--------------------------------
Class: TimeOfDayDirectOverrides
	bool bOverrideLightIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverrideLightColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverrideSkyLightIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverrideSkyLightColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverrideFogDensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverrideFogColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverrideFogStartDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	float OverriddenLightIntensity;//[Offset: 0x4, Size: 4]
	LinearColor OverriddenLightColor;//[Offset: 0x8, Size: 16]
	float OverriddenSkyLightIntensity;//[Offset: 0x18, Size: 4]
	LinearColor OverriddenSkyLightColor;//[Offset: 0x1c, Size: 16]
	float OverriddenFogDensity;//[Offset: 0x2c, Size: 4]
	float OverriddenFogStartDistance;//[Offset: 0x30, Size: 4]
	LinearColor OverriddenFogColor;//[Offset: 0x34, Size: 16]
	class Object* OverriddenPostProcessActorClass;//[Offset: 0x48, Size: 8]

--------------------------------
Class: FortDayPhaseInfoOverride.Object
	DayPhaseInfo DayPhaseInfo;//[Offset: 0x28, Size: 528]
	bool bUseAltitudeAdjustmentsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	CameraAltitudeAdjustments[] AltitudeAdjustments;//[Offset: 0x240, Size: 16]
	bool bUseAltitudeAdjustmentsForSecondFogOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	CameraAltitudeAdjustments[] AltitudeAdjustmentsForSecondFog;//[Offset: 0x258, Size: 16]

--------------------------------
Class: DayPhaseInfo
	FString PhaseStartAnnouncement;//[Offset: 0x0, Size: 16]
	float TimePhaseBegins;//[Offset: 0x10, Size: 4]
	float PhaseLengthInHours;//[Offset: 0x14, Size: 4]
	float PercentageTransitionIn;//[Offset: 0x18, Size: 4]
	float TransitionInTimeInMinutes;//[Offset: 0x1c, Size: 4]
	float PercentageTransitionOut;//[Offset: 0x20, Size: 4]
	float TransitionOutTimeInMinutes;//[Offset: 0x24, Size: 4]
	SkyLightValues SkyLightValues;//[Offset: 0x28, Size: 56]
	ThreatCloudValues ThreatCloudValues;//[Offset: 0x60, Size: 160]
	ElementalCharValues ElementalCharValues;//[Offset: 0x100, Size: 20]
	DirectionalLightValues DirectionalLightValues;//[Offset: 0x114, Size: 12]
	ExponentialHeightFogValues ExpHeightFogValues;//[Offset: 0x120, Size: 96]
	SkyAtmosphereValues SkyAtmosphereValues;//[Offset: 0x180, Size: 116]
	PostProcessComponent* LowPriPostProcessComponent;//[Offset: 0x1f8, Size: 8]
	MaterialInstance* SkyMaterialInstance;//[Offset: 0x200, Size: 8]
	MaterialInstance* StarMapMaterialInstance;//[Offset: 0x208, Size: 8]

--------------------------------
Class: SkyLightValues
	LinearColor SkyLightColor;//[Offset: 0x0, Size: 16]
	LinearColor SkyLightOcclusionTint;//[Offset: 0x10, Size: 16]
	float SkyLightMinOcclusion;//[Offset: 0x20, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x24, Size: 4]
	TextureCube* Cubemap;//[Offset: 0x28, Size: 8]
	TextureCube* DestinationCubemap;//[Offset: 0x30, Size: 8]

--------------------------------
Class: ThreatCloudValues
	CloudColorState CloudActivated;//[Offset: 0x0, Size: 80]
	CloudColorState CloudDeactivated;//[Offset: 0x50, Size: 80]

--------------------------------
Class: CloudColorState
	LinearColor BottomEmissive;//[Offset: 0x0, Size: 16]
	LinearColor TopEmissive;//[Offset: 0x10, Size: 16]
	LinearColor BottomLightning;//[Offset: 0x20, Size: 16]
	LinearColor TopLightning;//[Offset: 0x30, Size: 16]
	LinearColor InternalColor;//[Offset: 0x40, Size: 16]

--------------------------------
Class: ElementalCharValues
	LinearColor FireCharColor;//[Offset: 0x0, Size: 16]
	float ElectricalCharEmissive;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DirectionalLightValues
	Color LightColor;//[Offset: 0x0, Size: 4]
	float Brightness;//[Offset: 0x4, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkyAtmosphereValues
	float RayleighScatteringScale;//[Offset: 0x0, Size: 4]
	LinearColor RayleighScattering;//[Offset: 0x4, Size: 16]
	float RayleighExponentialDistribution;//[Offset: 0x14, Size: 4]
	float MieScatteringScale;//[Offset: 0x18, Size: 4]
	LinearColor MieScattering;//[Offset: 0x1c, Size: 16]
	float MieAbsorptionScale;//[Offset: 0x2c, Size: 4]
	LinearColor MieAbsorption;//[Offset: 0x30, Size: 16]
	float MieAnisotropy;//[Offset: 0x40, Size: 4]
	float MieExponentialDistribution;//[Offset: 0x44, Size: 4]
	float OtherAbsorptionScale;//[Offset: 0x48, Size: 4]
	LinearColor OtherAbsorption;//[Offset: 0x4c, Size: 16]
	LinearColor SkyLuminanceFactor;//[Offset: 0x5c, Size: 16]
	float AerialPespectiveViewDistanceScale;//[Offset: 0x6c, Size: 4]
	float HeightFogContribution;//[Offset: 0x70, Size: 4]

--------------------------------
Class: CameraAltitudeAdjustments
	float Altitude;//[Offset: 0x0, Size: 4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 4]
	float HeightFogZOffset;//[Offset: 0x8, Size: 4]
	float FogDensity;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x31c, Size: 4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x324, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x328, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x32c, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x338, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x33c, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x340, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x344, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x348, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x34c, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x350, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x358, Size: 4]
	float FarShadowDistance;//[Offset: 0x35c, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x360, Size: 4]
	float LightSourceAngle;//[Offset: 0x364, Size: 4]
	float LightSourceSoftAngle;//[Offset: 0x368, Size: 4]
	float ShadowSourceAngleFactor;//[Offset: 0x36c, Size: 4]
	float TraceDistance;//[Offset: 0x370, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x378, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x37c, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 1]
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 1]
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 1]
	float CloudShadowStrength;//[Offset: 0x390, Size: 4]
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x394, Size: 4]
	float CloudShadowOnSurfaceStrength;//[Offset: 0x398, Size: 4]
	float CloudShadowDepthBias;//[Offset: 0x39c, Size: 4]
	float CloudShadowExtent;//[Offset: 0x3a0, Size: 4]
	float CloudShadowMapResolutionScale;//[Offset: 0x3a4, Size: 4]
	float CloudShadowRaySampleCountScale;//[Offset: 0x3a8, Size: 4]
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3ac, Size: 16]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3bc, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x3d0, Size: 4]
	float ShadowAmount;//[Offset: 0x3d4, Size: 4]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0xd806adc
	void SetShadowAmount(float NewValue);// 0xd806a34
	void SetOcclusionMaskDarkness(float NewValue);// 0xd80698c
	void SetLightShaftOverrideDirection(Vector NewValue);// 0xd8068e4
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0xd806834
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0xd80678c
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0xd8066e4
	void SetDynamicShadowCascades(int NewValue);// 0xd80663c
	void SetCascadeTransitionFraction(float NewValue);// 0xd806594
	void SetCascadeDistributionExponent(float NewValue);// 0xd8064ec
	void SetAtmosphereSunLightIndex(int NewValue);// 0xd806444
	void SetAtmosphereSunLight(bool bNewValue);// 0xd806394

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1f4, Size: 4]
	float FogHeightFalloff;//[Offset: 0x1f8, Size: 4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x1fc, Size: 12]
	LinearColor FogInscatteringColor;//[Offset: 0x208, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x218, Size: 8]
	float InscatteringColorCubemapAngle;//[Offset: 0x220, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x224, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x234, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x238, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x23c, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x240, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x244, Size: 16]
	float FogMaxOpacity;//[Offset: 0x254, Size: 4]
	float StartDistance;//[Offset: 0x258, Size: 4]
	float FogCutoffDistance;//[Offset: 0x25c, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x264, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x268, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x26c, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x27c, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x280, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x284, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0xd810760
	void SetVolumetricFogExtinctionScale(float NewValue);// 0xd8106b8
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0xd810610
	void SetVolumetricFogDistance(float NewValue);// 0xd810568
	void SetVolumetricFogAlbedo(Color NewValue);// 0xd8104c4
	void SetVolumetricFog(bool bNewValue);// 0xd810414
	void SetStartDistance(float Value);// 0xd81036c
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0xd8102c4
	void SetInscatteringTextureTint(LinearColor Value);// 0xd81021c
	void SetInscatteringColorCubemapAngle(float Value);// 0xd810174
	void SetInscatteringColorCubemap(TextureCube* Value);// 0xd8100cc
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0xd810024
	void SetFogMaxOpacity(float Value);// 0xd80ff7c
	void SetFogInscatteringColor(LinearColor Value);// 0xd80fed4
	void SetFogHeightFalloff(float Value);// 0xd80fe2c
	void SetFogDensity(float Value);// 0xd80fd84
	void SetFogCutoffDistance(float Value);// 0xd80fcdc
	void SetDirectionalInscatteringStartDistance(float Value);// 0xd80fc34
	void SetDirectionalInscatteringExponent(float Value);// 0xd80fb8c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0xd80fae4

--------------------------------
Class: FortDayPhaseChangeParams.FortMissionEventParams.Object
	FortTimeOfDayManager* LightingAndFogManager;//[Offset: 0x28, Size: 8]
	byte NewDayPhase;//[Offset: 0x30, Size: 1]
	void SetParams(FortTimeOfDayManager* _LightingAndFogManager, byte _NewDayPhase, out FortDayPhaseChangeParams* ThisParam);// 0xd23f39c
	void BreakParams(out FortTimeOfDayManager* _LightingAndFogManager, out byte _NewDayPhase);// 0xd23f298

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	byte SourceType;//[Offset: 0x225, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x228, Size: 8]
	float SourceCubemapAngle;//[Offset: 0x230, Size: 4]
	int CubemapResolution;//[Offset: 0x234, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x238, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x240, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x250, Size: 4]
	float Contrast;//[Offset: 0x254, Size: 4]
	float OcclusionExponent;//[Offset: 0x258, Size: 4]
	float MinOcclusion;//[Offset: 0x25c, Size: 4]
	Color OcclusionTint;//[Offset: 0x260, Size: 4]
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	float CloudAmbientOcclusionStrength;//[Offset: 0x268, Size: 4]
	float CloudAmbientOcclusionExtent;//[Offset: 0x26c, Size: 4]
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x270, Size: 4]
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x274, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x278, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x328, Size: 8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0xd8ec554
	void SetOcclusionTint(out const Color InTint);// 0xd8ec4a4
	void SetOcclusionExponent(float InOcclusionExponent);// 0xd8ec3fc
	void SetOcclusionContrast(float InOcclusionContrast);// 0xd8ec354
	void SetMinOcclusion(float InMinOcclusion);// 0xd8ec2ac
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0xd8ec1fc
	void SetLightColor(LinearColor NewLightColor);// 0xd8ec154
	void SetIntensity(float NewIntensity);// 0xd8ec0ac
	void SetIndirectLightingIntensity(float NewIntensity);// 0xd8ec004
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0xd8ebee0
	void SetCubemap(TextureCube* NewCubemap);// 0xd8ebe38
	void RecaptureSky();// 0xd8ebe24

--------------------------------
Class: FortTimeOfDayWeatherComponent.ActorComponent.Object
	GlobalWeatherData[] GlobalWeatherDataArray;//[Offset: 0xc0, Size: 16]
	ScalableFloat WeatherEventStartDelayMin;//[Offset: 0xd0, Size: 40]
	ScalableFloat WeatherEventStartDelayMax;//[Offset: 0xf8, Size: 40]
	ScalableFloat WeatherEventEndedCooldownMin;//[Offset: 0x120, Size: 40]
	ScalableFloat WeatherEventEndedCooldownMax;//[Offset: 0x148, Size: 40]
	bool bWeatherDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	enum GamePhaseToStart;//[Offset: 0x171, Size: 1]
	bool bWeatherStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]
	FString CalendarEnableEvent;//[Offset: 0x180, Size: 16]
	enum WeatherState;//[Offset: 0x190, Size: 1]
	float WeatherEventEndTime;//[Offset: 0x194, Size: 4]
	float WeatherEventAttemptStart;//[Offset: 0x198, Size: 4]
	int WeatherEventIndex;//[Offset: 0x19c, Size: 4]
	int LocalWeatherEventIndex;//[Offset: 0x1a0, Size: 4]
	float CurrentWeatherEventIntensity;//[Offset: 0x1a4, Size: 4]
	float CurrentBlendTime;//[Offset: 0x1a8, Size: 4]
	float TargetBlendTime;//[Offset: 0x1ac, Size: 4]
	float BlendTimeLength;//[Offset: 0x1b0, Size: 4]
	PostProcessComponent* PostProcessComponent;//[Offset: 0x1b8, Size: 8]
	void OnRep_WeatherEventIndex();// 0xd1eceac
	void OnRep_CurrentWeatherEventIntensity();// 0xd1ece98
	void OnPlaylistLoaded(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xd1ecd88
	bool IsWeatherEventActive();// 0xd1ecd64
	float GetCurrentWindStrength();// 0xd1ecd48
	Vector GetCurrentWindDirection();// 0xd1ecd24
	float GetCurrentWeatherIntensity();// 0xd1ecd08
	int GetCurrentWeatherEventIndex();// 0xd1eccec
	float GetBlendTimePercentage();// 0xd1eccc8

--------------------------------
Class: GlobalWeatherData
	FString WeatherEventName;//[Offset: 0x0, Size: 16]
	FString RequiredCalendarEvent;//[Offset: 0x10, Size: 16]
	GameplayTagContainer WeatherEventTags;//[Offset: 0x20, Size: 32]
	ScalableFloat FrequencyMin;//[Offset: 0x40, Size: 40]
	ScalableFloat FrequencyMax;//[Offset: 0x68, Size: 40]
	ScalableFloat ChanceMin;//[Offset: 0x90, Size: 40]
	ScalableFloat ChanceMax;//[Offset: 0xb8, Size: 40]
	ScalableFloat IntensityMin;//[Offset: 0xe0, Size: 40]
	ScalableFloat IntensityMax;//[Offset: 0x108, Size: 40]
	ScalableFloat DurationMin;//[Offset: 0x130, Size: 40]
	ScalableFloat DurationMax;//[Offset: 0x158, Size: 40]
	ScalableFloat CooldownMin;//[Offset: 0x180, Size: 40]
	ScalableFloat CooldownMax;//[Offset: 0x1a8, Size: 40]
	ScalableFloat ChanceToRemainActiveMin;//[Offset: 0x1d0, Size: 40]
	ScalableFloat ChanceToRemainActiveMax;//[Offset: 0x1f8, Size: 40]
	ScalableFloat BlendInMin;//[Offset: 0x220, Size: 40]
	ScalableFloat BlendInMax;//[Offset: 0x248, Size: 40]
	ScalableFloat BlendOutMin;//[Offset: 0x270, Size: 40]
	ScalableFloat BlendOutMax;//[Offset: 0x298, Size: 40]
	GameplayTagContainer Tags;//[Offset: 0x2c0, Size: 32]
	CurveFloat* BotVisibilityScale;//[Offset: 0x2e0, Size: 8]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 1360]
	CurveFloat* PostProcessBlendWeight;//[Offset: 0x840, Size: 8]
	SkylightWeatherData SkylightWeatherData;//[Offset: 0x848, Size: 16]
	DirectionalLightWeatherData DirectionalLightWeatherData;//[Offset: 0x858, Size: 32]
	ExponentialHeightFogWeatherData ExponentialHeightFogWeatherData;//[Offset: 0x878, Size: 40]
	SkyAtmosphereWeatherData SkyAtmosphereWeatherData;//[Offset: 0x8a0, Size: 24]
	HeightFogAltitudeWeatherData HeightFogAltitudeWeatherData;//[Offset: 0x8b8, Size: 8]
	MaterialWeatherData MaterialWeatherData;//[Offset: 0x8c0, Size: 16]
	WindWeatherData WindWeatherData;//[Offset: 0x8d0, Size: 16]
	float TimeForNextAttempt;//[Offset: 0x8e0, Size: 4]

--------------------------------
Class: SkylightWeatherData
	CurveLinearColor* SkyLightColor;//[Offset: 0x0, Size: 8]
	CurveFloat* SkyLightColorWeight;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectionalLightWeatherData
	CurveLinearColor* DirectionalLightColor;//[Offset: 0x0, Size: 8]
	CurveFloat* DirectionalLightColorWeight;//[Offset: 0x8, Size: 8]
	CurveFloat* DirectionalLightColorBrightness;//[Offset: 0x10, Size: 8]
	CurveFloat* VolumetricScatteringIntensity;//[Offset: 0x18, Size: 8]

--------------------------------
Class: ExponentialHeightFogWeatherData
	CurveFloat* FogDensityScale;//[Offset: 0x0, Size: 8]
	CurveFloat* FogHeightFalloffScale;//[Offset: 0x8, Size: 8]
	CurveFloat* SecondFogDensityScale;//[Offset: 0x10, Size: 8]
	CurveFloat* SecondFogHeightFalloffScale;//[Offset: 0x18, Size: 8]
	CurveFloat* SecondHeightFogOffsetBias;//[Offset: 0x20, Size: 8]

--------------------------------
Class: SkyAtmosphereWeatherData
	CurveFloat* MieScatteringScaleScale;//[Offset: 0x0, Size: 8]
	CurveFloat* MieAbsorptionScaleScale;//[Offset: 0x8, Size: 8]
	CurveFloat* HeightFogContributionScale;//[Offset: 0x10, Size: 8]

--------------------------------
Class: HeightFogAltitudeWeatherData
	CurveFloat* HeightFogZOffset;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MaterialWeatherData
	MaterialInstance* SkyMaterialInstance;//[Offset: 0x0, Size: 8]
	MaterialInstanceDynamic* DynamicSkyMaterialInstance;//[Offset: 0x8, Size: 8]

--------------------------------
Class: WindWeatherData
	CurveVector* WindDirection;//[Offset: 0x0, Size: 8]
	CurveFloat* WindStrength;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FortVehicleManager.Actor.Object
	MulticastInlineDelegateProperty OnVehicleCountByTagChanged;//[Size: 16]
	FortAthenaVehicle*[] Vehicles;//[Offset: 0x248, Size: 16]
	<GameplayTag,int> VehicleCountByTagMap;//[Offset: 0x278, Size: 80]
	void OnNavSystemLockReleased();// 0xd2072b0
	static bool GetVehicleManager(const Object* WorldContextObject, out FortVehicleManager* VehicleManager);// 0xd2071b8
	int GetVehicleCountByTag(GameplayTag VehicleTag);// 0xd207108

--------------------------------
Class: FortPhysicsObjectManager.Actor.Object
	FortPhysicsObjectComponent*[] PhysicsObjects;//[Offset: 0x220, Size: 16]
	static bool GetPhysicsObjectManager(const Object* WorldContextObject, out FortPhysicsObjectManager* Manager);// 0xd1175d4

--------------------------------
Class: FortLevelOverlayManager.Object

--------------------------------
Class: FortExternalContentManager.Object

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 8]
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]

--------------------------------
Class: DefaultMapInfo_C.FortAthenaMapInfo.Actor.Object

--------------------------------
Class: BP_SafeZoneStorm_C.FortSafeZoneStorm.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 8]
	StaticMeshComponent* SM_CloudBottomBlend;//[Offset: 0x250, Size: 8]
	StaticMeshComponent* SM_CloudRing_Mobile;//[Offset: 0x258, Size: 8]
	StaticMeshComponent* SM_CloudRingTopBlend;//[Offset: 0x260, Size: 8]
	StaticMeshComponent* SM_Storm_ScreenEffect;//[Offset: 0x268, Size: 8]
	PostProcessComponent* PostProcess;//[Offset: 0x270, Size: 8]
	BoxComponent* Box;//[Offset: 0x278, Size: 8]
	StaticMeshComponent* CloudsOuterRing;//[Offset: 0x280, Size: 8]
	StaticMeshComponent* StaticMesh10;//[Offset: 0x288, Size: 8]
	StaticMeshComponent* StaticMesh9;//[Offset: 0x290, Size: 8]
	StaticMeshComponent* StaticMesh8;//[Offset: 0x298, Size: 8]
	StaticMeshComponent* StaticMesh7;//[Offset: 0x2a0, Size: 8]
	StaticMeshComponent* StaticMesh6;//[Offset: 0x2a8, Size: 8]
	StaticMeshComponent* StaticMesh5;//[Offset: 0x2b0, Size: 8]
	StaticMeshComponent* StaticMesh4;//[Offset: 0x2b8, Size: 8]
	StaticMeshComponent* StaticMesh3;//[Offset: 0x2c0, Size: 8]
	StaticMeshComponent* StaticMesh2;//[Offset: 0x2c8, Size: 8]
	StaticMeshComponent* StaticMesh1;//[Offset: 0x2d0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2d8, Size: 8]
	StaticMeshComponent* StormQuadMain16;//[Offset: 0x2e0, Size: 8]
	StaticMeshComponent* StormQuadMain15;//[Offset: 0x2e8, Size: 8]
	StaticMeshComponent* StormQuadMain1;//[Offset: 0x2f0, Size: 8]
	StaticMeshComponent* StormQuadMain13;//[Offset: 0x2f8, Size: 8]
	StaticMeshComponent* StormQuadMain12;//[Offset: 0x300, Size: 8]
	StaticMeshComponent* StormQuadMain11;//[Offset: 0x308, Size: 8]
	StaticMeshComponent* StormQuadMain10;//[Offset: 0x310, Size: 8]
	StaticMeshComponent* StormQuadMain9;//[Offset: 0x318, Size: 8]
	StaticMeshComponent* StormQuadMain8;//[Offset: 0x320, Size: 8]
	StaticMeshComponent* StormQuadMain7;//[Offset: 0x328, Size: 8]
	StaticMeshComponent* StormQuadMain6;//[Offset: 0x330, Size: 8]
	StaticMeshComponent* StormQuadMain5;//[Offset: 0x338, Size: 8]
	StaticMeshComponent* StormQuadMain4;//[Offset: 0x340, Size: 8]
	StaticMeshComponent* StormQuadMain3;//[Offset: 0x348, Size: 8]
	StaticMeshComponent* StormQuadMain2;//[Offset: 0x350, Size: 8]
	StaticMeshComponent* StormQuadMain14;//[Offset: 0x358, Size: 8]
	StaticMeshComponent* StormRings;//[Offset: 0x360, Size: 8]
	StaticMeshComponent* StormQuadMain;//[Offset: 0x368, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x370, Size: 8]
	bool MobileMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	bool ShowStorm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 1]
	float StormSize;//[Offset: 0x37c, Size: 4]
	float StormBias;//[Offset: 0x380, Size: 4]
	Vector StormCenter;//[Offset: 0x384, Size: 12]
	bool UseNewStorm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool UseSeason11Storm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool UseVolumetricStorm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	void UserConstructionScript(HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void MobileClouds(bool Mobile);// 0xbbc0600
	void ShowClouds(float Amount);// 0xbbc0600
	void ShowStormScreenEffect(bool Show);// 0xbbc0600
	void ExecuteUbergraph_BP_SafeZoneStorm(int EntryPoint, bool CallFunc_IsMobilePlatform_ReturnValue, bool K2Node_CustomEvent_Mobile, float K2Node_CustomEvent_Amount, bool K2Node_CustomEvent_Show, bool CallFunc_Not_PreBool_ReturnValue);// 0xbbc0600

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x220, Size: 8]

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x1f8, Size: 40]
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x228, Size: 8]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	uint32 ScalabilityGroup;//[Offset: 0x234, Size: 4]
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x240, Size: 8]
	int StreamLowMips;//[Offset: 0x248, Size: 4]
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0xd8d5a24

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 8]
	uint64 BuildHash;//[Offset: 0x30, Size: 8]

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x100, Size: 12]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 4]
	int TileBorderSize;//[Offset: 0x4, Size: 4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: Apollo_Terrain_C.FortLevelScriptActor.LevelScriptActor.Actor.Object

--------------------------------
Class: FortLevelScriptActor.LevelScriptActor.Actor.Object
	bool bWorldReadyCalled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	void OnWorldReady();// 0xbbc0600
	void OnMatchStarted();// 0xbbc0600

--------------------------------
Class: VirtualHeightfieldMesh.Actor.Object
	VirtualHeightfieldMeshComponent* VirtualHeightfieldMeshComponent;//[Offset: 0x220, Size: 8]

--------------------------------
Class: VirtualHeightfieldMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	RuntimeVirtualTextureVolume* VirtualTexture;//[Offset: 0x440, Size: 40]
	RuntimeVirtualTextureVolume* VirtualTextureRef;//[Offset: 0x468, Size: 8]
	Object* VirtualTextureThumbnail;//[Offset: 0x470, Size: 8]
	bool bCopyBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	HeightfieldMinMaxTexture* MinMaxTexture;//[Offset: 0x480, Size: 8]
	int NumMinMaxTextureBuildLevels;//[Offset: 0x488, Size: 4]
	bool bBuildMinMaxTextureButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	MaterialInterface* Material;//[Offset: 0x490, Size: 8]
	float Lod0ScreenSize;//[Offset: 0x498, Size: 4]
	float Lod0Distribution;//[Offset: 0x49c, Size: 4]
	float LodDistribution;//[Offset: 0x4a0, Size: 4]
	float LodBiasScale;//[Offset: 0x4a4, Size: 4]
	int NumForceLoadLods;//[Offset: 0x4a8, Size: 4]
	int NumOcclusionLods;//[Offset: 0x4ac, Size: 4]
	bool bHiddenInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	void GatherHideFlags(out bool InOutHidePrimitivesInEditor, out bool InOutHidePrimitivesInGame);// 0x8b84ca0

--------------------------------
Class: HeightfieldMinMaxTexture.Object
	Texture2D* Texture;//[Offset: 0x28, Size: 8]
	Texture2D* LodBiasTexture;//[Offset: 0x30, Size: 8]
	Texture2D* LodBiasMinMaxTexture;//[Offset: 0x38, Size: 8]
	int MaxCPULevels;//[Offset: 0x40, Size: 4]
	Vector2D[] TextureData;//[Offset: 0x48, Size: 16]
	IntPoint TextureDataSize;//[Offset: 0x58, Size: 8]
	int[] TextureDataMips;//[Offset: 0x60, Size: 16]

--------------------------------
Class: Athena_Prop_Video_Stream_Trigger1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	FortMediaRegionLockComponent* FortMediaRegionLock;//[Offset: 0x228, Size: 8]
	MediaSoundComponent* ScreenMediaSound;//[Offset: 0x230, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x238, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 8]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	MediaPlayer* MediaPlayer;//[Offset: 0x250, Size: 8]
	bool EnteredStreamingZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	DateTime TimeEnteredStreamingZone;//[Offset: 0x260, Size: 8]
	FortStreamMediaSource* MediaSource;//[Offset: 0x268, Size: 8]
	MulticastInlineDelegateProperty VideoStartedEventDispatcher;//[Size: 16]
	MulticastInlineDelegateProperty VideoStoppedEventDispatcher;//[Size: 16]
	PrimitiveComponent* Mesh;//[Offset: 0x290, Size: 8]
	bool IsVideoTestEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	BP_VideoMeshTrigger_C* MeshTrigger;//[Offset: 0x2a0, Size: 8]
	float StartPlayTime;//[Offset: 0x2a8, Size: 4]
	TimerHandle CheckDistanceTimer;//[Offset: 0x2b0, Size: 8]
	FortMediaSubtitlesPlayer* SubtitlePlayer;//[Offset: 0x2b8, Size: 8]
	FortDownloadLocalizedOverlays* SubtitlesOverlays;//[Offset: 0x2c0, Size: 8]
	MediaSource* FallbackMediaSource;//[Offset: 0x2c8, Size: 8]
	bool StreamingFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	int VideoRetryCounter;//[Offset: 0x2d4, Size: 4]
	int VideoMaxRetries;//[Offset: 0x2d8, Size: 4]
	bool VideoEnableLocalFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	enum LoopVideoPlayerOption;//[Offset: 0x2dd, Size: 1]
	FString VideoUID;//[Offset: 0x2e0, Size: 16]
	FString VideoUID_Default;//[Offset: 0x2f0, Size: 16]
	FString ScreenName;//[Offset: 0x300, Size: 16]
	float LocalPlayServerTimeSeconds;//[Offset: 0x310, Size: 4]
	bool ForceStartPlayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	TimerHandle StartPlayingTimer;//[Offset: 0x318, Size: 8]
	BP_Galileo_VideoPreBuffer_C* WarmingObject;//[Offset: 0x320, Size: 8]
	bool VideoUIDSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float ActivationCullRadius_High;//[Offset: 0x32c, Size: 4]
	float ActivationCullRadius_Low;//[Offset: 0x330, Size: 4]
	float BandwidthLimitCullRadius;//[Offset: 0x334, Size: 4]
	TimerHandle BandwidthCheckLimitTimer;//[Offset: 0x338, Size: 8]
	TimerHandle MaxBandwidthTimer;//[Offset: 0x340, Size: 8]
	int MediaMaxBandwidth;//[Offset: 0x348, Size: 4]
	DateTime LocalPlayUTCTime;//[Offset: 0x350, Size: 8]
	TimerHandle SubtitleRenderLimitTimer;//[Offset: 0x358, Size: 8]
	FortMediaPlayerCtrl* MediaPlayerCtrl;//[Offset: 0x360, Size: 8]
	FString[] ScreenIndexes;//[Offset: 0x368, Size: 16]
	bool PiPWasPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	FString PiPWasPlayingVUID;//[Offset: 0x380, Size: 16]
	bool LeaveScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	TimerHandle PiPActivation;//[Offset: 0x398, Size: 8]
	bool PiPEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool RespectScreenActivationRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool RemoteOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool PiPStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	FName ResetData;//[Offset: 0x3a4, Size: 8]
	float LOSSwitchDebounceTime;//[Offset: 0x3ac, Size: 4]
	float LastLOSSwitch;//[Offset: 0x3b0, Size: 4]
	bool PiPForceOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	Actor* ScreenActor;//[Offset: 0x3b8, Size: 8]
	bool MediaPlayerClosedPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool MediaStarted_PIPLOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool ScreenLOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	MediaCDNWarmer_C* NoMPMediaCDNWarmer;//[Offset: 0x3c8, Size: 8]
	bool SimpleWarming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	MulticastInlineDelegateProperty AudioStartedEventDispatcher;//[Size: 16]
	MulticastInlineDelegateProperty VideoAboutToLoadEventDispatcher;//[Size: 16]
	bool DelayVideoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool TempAudioUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	bool UseScreenMSC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	bool DisabledSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 1]
	TimerHandle SharingCheckTimer;//[Offset: 0x400, Size: 8]
	MulticastInlineDelegateProperty VideoSharingCheck;//[Size: 16]
	int ScreenDistance;//[Offset: 0x418, Size: 4]
	<FString,Object*> RegionLockObjects;//[Offset: 0x420, Size: 80]
	<FString,int> MeshRegionLockMap;//[Offset: 0x470, Size: 80]
	FString Country;//[Offset: 0x4c0, Size: 16]
	FString Continent;//[Offset: 0x4d0, Size: 16]
	FString[] Subdivisions;//[Offset: 0x4e0, Size: 16]
	MeshRegionLockData_Int Mesh_PIPVersion;//[Offset: 0x4f0, Size: 24]
	MeshRegionLockData_Bool Mesh_LeaveScreen;//[Offset: 0x508, Size: 24]
	FString Mesh_ScreenName;//[Offset: 0x520, Size: 16]
	MeshRegionLockData_String Mesh_VideoUID;//[Offset: 0x530, Size: 40]
	MeshRegionLockData_DateTime Mesh_PlayUTCTime;//[Offset: 0x558, Size: 32]
	MeshRegionLockData_DateTime Mesh_RootUTCTIme;//[Offset: 0x578, Size: 32]
	MeshRegionLockData_Bool Mesh_SimpleWarming;//[Offset: 0x598, Size: 24]
	MeshRegionLockData_String Mesh_WarmingCDNWeights;//[Offset: 0x5b0, Size: 40]
	MeshRegionLockData_Float Mesh_StartWarmingServerTimeSeconds;//[Offset: 0x5d8, Size: 24]
	MeshRegionLockData_Float Mesh_VideoPlayStartTime;//[Offset: 0x5f0, Size: 24]
	MeshRegionLockData_Float Mesh_PlayServerTimeSeconds;//[Offset: 0x608, Size: 24]
	MeshRegionLockData_Int Mesh_MaxBandwidth;//[Offset: 0x620, Size: 24]
	MeshRegionLockData_Bool Mesh_PiPMirrorEnable;//[Offset: 0x638, Size: 24]
	MeshRegionLockData_Bool Mesh_PiPEnable;//[Offset: 0x650, Size: 24]
	MeshRegionLockData_String Mesh_PiPVideoUID;//[Offset: 0x668, Size: 40]
	MeshRegionLockData_Bool Mesh_LoopVideo;//[Offset: 0x690, Size: 24]
	MeshRegionLockData_Int64 Mesh_PiPForceCounter;//[Offset: 0x6a8, Size: 32]
	MeshRegionLockData_Bool Mesh_PIPCDNDistroSet;//[Offset: 0x6c8, Size: 24]
	MeshRegionLockData_Bool Mesh_IsPIPLive;//[Offset: 0x6e0, Size: 24]
	MeshRegionLockData_Float Mesh_PiPPlayerServerTimeSeconds;//[Offset: 0x6f8, Size: 24]
	MeshRegionLockData_Int Mesh_ScreenDistance;//[Offset: 0x710, Size: 24]
	MeshRegionLockData_String Mesh_CDNWeights;//[Offset: 0x728, Size: 40]
	MeshRegionLockData_Bool Mesh_IsLive;//[Offset: 0x750, Size: 24]
	FString AllRegions;//[Offset: 0x768, Size: 16]
	TimerHandle CheckUCPFromStartTimer;//[Offset: 0x778, Size: 8]
	TimerHandle UCPCheckTimerHandle;//[Offset: 0x780, Size: 8]
	bool SubtitlesinRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	TimerHandle UCPAudioCheckTimer;//[Offset: 0x790, Size: 8]
	FortStreamMediaSource* StandAlonePIPMS;//[Offset: 0x798, Size: 8]
	TimerHandle UCPMirrorPIPTimer;//[Offset: 0x7a0, Size: 8]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	void DrawPIPBlackout(bool StandAlonePIP, bool CallFunc_CheckVideoDisabledRaw_Blocked);// 0xbbc0600
	void SetAudioSubmix(bool CallFunc_Contains_ReturnValue);// 0xbbc0600
	void GetData_DateTime(MeshRegionLockData_DateTime In, out DateTime Data);// 0xbbc0600
	void GetData_Int64(MeshRegionLockData_Int64 In, out int64 Data);// 0xbbc0600
	void GetData_Float(MeshRegionLockData_Float In, out float Data);// 0xbbc0600
	void GetData_String(MeshRegionLockData_String In, out FString Data);// 0xbbc0600
	void GetData_Bool(MeshRegionLockData_Bool In, out bool Data);// 0xbbc0600
	void GetData_Int(MeshRegionLockData_Int In, out int Data);// 0xbbc0600
	void FlipAudioSubmix(bool Default);// 0xbbc0600
	void UCPInViewCheck(bool CallFunc_CheckLOS_LOS, bool CallFunc_Contains_ReturnValue);// 0xbbc0600
	void UCPInViewTimer(bool Enable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Contains_ReturnValue);// 0xbbc0600
	void EnablePIPAudio(byte CallFunc_ShouldProtectPlayerFromContent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void CheckVideoDisabledRaw(bool StandAlonePIP, out bool bLocked, bool Temp_bool_Variable, FortStreamMediaSource* K2Node_Select_Default, bool CallFunc_Contains_ReturnValue);// 0xbbc0600
	void CheckVideoDisabled(bool StandAlonePIP, out bool Disabled, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_GetPIPStandaloneError_ReturnValue, bool Temp_bool_Variable, FortStreamMediaSource* K2Node_Select_Default, bool K2Node_Select_Default, byte CallFunc_ShouldProtectPlayerFromContent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void GetRegionInfoComplete(FString Continent, FString Country, out FString[] Subdivisions);// 0xbbc0600
	void GetRegionInfo(bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, FortPlayerController* CallFunc_GetFirstLocalFortPlayerController_ReturnValue);// 0xbbc0600
	void RegionIsAllowed(FString RegionData, out bool Allowed, bool AllowedInternal, FString ListType, FString[] RegionDataArray, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsEmpty_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool K2Node_SwitchString_CmpSuccess, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0xbbc0600
	void GetMeshData_DateTime(out MeshRegionLockData_DateTime[] Array, DateTime Default, out MeshRegionLockData_DateTime Out, bool Found, MeshRegionLockData_DateTime Value, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Max_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, MeshRegionLockData_DateTime CallFunc_Array_Get_Item, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, bool CallFunc_RegionIsAllowed_Allowed, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void GetMeshData_Int64(out MeshRegionLockData_Int64[] Array, int64 Default, out MeshRegionLockData_Int64 Out, bool Found, MeshRegionLockData_Int64 Value, MeshRegionLockData_Int64 K2Node_MakeStruct_MeshRegionLockData_Int64, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Max_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, MeshRegionLockData_Int64 CallFunc_Array_Get_Item, MeshRegionLockData_Int64 K2Node_MakeStruct_MeshRegionLockData_Int64, bool CallFunc_RegionIsAllowed_Allowed, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void GetMeshData_Float(out MeshRegionLockData_Float[] Array, float Default, out MeshRegionLockData_Float Out, bool Found, MeshRegionLockData_Float Value, MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, int Temp_int_Array_Index_Variable, MeshRegionLockData_Float CallFunc_Array_Get_Item, MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float, bool CallFunc_RegionIsAllowed_Allowed, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void GetMeshData_String(out MeshRegionLockData_String[] Array, FString Default, out MeshRegionLockData_String Out, bool Found, MeshRegionLockData_String Value, MeshRegionLockData_String K2Node_MakeStruct_MeshRegionLockData_String, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Max_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MeshRegionLockData_String CallFunc_Array_Get_Item, MeshRegionLockData_String K2Node_MakeStruct_MeshRegionLockData_String, bool CallFunc_RegionIsAllowed_Allowed, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void GetMeshData_Bool(out MeshRegionLockData_Bool[] Array, bool Default, out MeshRegionLockData_Bool Out, bool Found, MeshRegionLockData_Bool Value, MeshRegionLockData_Bool K2Node_MakeStruct_MeshRegionLockData_Bool, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Max_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, MeshRegionLockData_Bool CallFunc_Array_Get_Item, MeshRegionLockData_Bool K2Node_MakeStruct_MeshRegionLockData_Bool, bool CallFunc_RegionIsAllowed_Allowed, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void GetMeshData_Int(out MeshRegionLockData_Int[] Array, int Default, out MeshRegionLockData_Int Out, bool Found, MeshRegionLockData_Int Value, MeshRegionLockData_Int K2Node_MakeStruct_MeshRegionLockData_Int, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Max_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, MeshRegionLockData_Int CallFunc_Array_Get_Item, MeshRegionLockData_Int K2Node_MakeStruct_MeshRegionLockData_Int, bool CallFunc_RegionIsAllowed_Allowed, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void UpdateMeshVariables(bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, MeshRegionLockData_Int CallFunc_GetMeshData_Int_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_String CallFunc_GetMeshData_String_Out, MeshRegionLockData_Float CallFunc_GetMeshData_Float_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_Int64 CallFunc_GetMeshData_Int64_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_String CallFunc_GetMeshData_String_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_Int CallFunc_GetMeshData_Int_Out, MeshRegionLockData_Float CallFunc_GetMeshData_Float_Out, MeshRegionLockData_Float CallFunc_GetMeshData_Float_Out, MeshRegionLockData_Float CallFunc_GetMeshData_Float_Out, MeshRegionLockData_String CallFunc_GetMeshData_String_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_DateTime CallFunc_GetMeshData_DateTime_Out, MeshRegionLockData_DateTime CallFunc_GetMeshData_DateTime_Out, MeshRegionLockData_String CallFunc_GetMeshData_String_Out, MeshRegionLockData_Bool CallFunc_GetMeshData_Bool_Out, MeshRegionLockData_Int CallFunc_GetMeshData_Int_Out);// 0xbbc0600
	void AllowCommand(FString ScreenName, FString RegionData, out bool Allowed, bool CallFunc_RegionIsAllowed_Allowed, bool CallFunc_CheckScreen_IsThisScreen, bool CallFunc_CheckBlacklist_NotBlocked, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void BindMediaSourceEvents(bool Bind, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600
	void StopScreenTimers();// 0xbbc0600
	void SharingCheck();// 0xbbc0600
	void EnableShareBlocking(bool Enable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xbbc0600
	void End();// 0xbbc0600
	void EndPlaybackClosePIP();// 0xbbc0600
	void ActivateScreenMSC(bool Enable, byte CallFunc_ShouldProtectPlayerFromContent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0xbbc0600
	void ActivateTempMSC(bool Enable);// 0xbbc0600
	void UserPIPEnabled(out bool Enabled, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FortGameUserSettings* K2Node_DynamicCast_AsFort_Game_User_Settings, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xbbc0600
	void DebounceLOS(out bool Bounced, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xbbc0600
	void CheckLOS(bool SkipUserCheck, bool ForceTrue, bool SkipSet, out bool LOS, bool SkipUserCheckInt, bool SkipSetInternal, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortPlayerController* CallFunc_GetFirstLocalFortPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_UserPIPEnabled_Enabled, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ShouldStreamBePlaying_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, FortPlayerController* CallFunc_GetFirstLocalFortPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Rotator CallFunc_GetDirectionActorToActor_ReturnValue, Rotator CallFunc_GetDirectionActorToActor_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_GetBaseAimRotation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, bool CallFunc_CheckLineOfSightToActorWithChannel_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void CheckPiPDisabled(out bool Disabled, bool CallFunc_GetData_Bool_Data, bool CallFunc_GetData_Bool_Data, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void SetPIPAnalyticsData(bool Reset, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_GetPlayerName_ReturnValue, Timespan CallFunc_GetTime_ReturnValue, int CallFunc_BreakTimespan_Days, int CallFunc_BreakTimespan_Hours, int CallFunc_BreakTimespan_Minutes, int CallFunc_BreakTimespan_Seconds, int CallFunc_BreakTimespan_Milliseconds, int64 CallFunc_Conv_IntToInt64_ReturnValue, int64 CallFunc_Conv_IntToInt64_ReturnValue, int64 CallFunc_Multiply_Int64Int64_ReturnValue, int64 CallFunc_Conv_IntToInt64_ReturnValue, int64 CallFunc_Conv_IntToInt64_ReturnValue, int64 CallFunc_Multiply_Int64Int64_ReturnValue, int64 CallFunc_Multiply_Int64Int64_ReturnValue, int64 CallFunc_Conv_IntToInt64_ReturnValue, int64 CallFunc_Multiply_Int64Int64_ReturnValue, int64 CallFunc_Add_Int64Int64_ReturnValue, int64 CallFunc_Add_Int64Int64_ReturnValue, int64 CallFunc_Add_Int64Int64_ReturnValue, int64 CallFunc_Add_Int64Int64_ReturnValue);// 0xbbc0600
	void CheckBlacklist(out bool NotBlocked, FortGameStateAthena* CallFunc_GetGameStateAthena_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameplayTagContainer CallFunc_GetAthenaPlaylistContextTags_ReturnValue, GameplayTagContainer CallFunc_GetRiskyReelsPlaylistBlacklistFilter_ReturnValue, bool CallFunc_GetIsPlayingReplay_ReturnValue, bool CallFunc_HasAnyTags_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void CheckBlocks(out bool CompleteBlock, byte CallFunc_ShouldProtectPlayerFromContent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xbbc0600
	void StreamFailCheck(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HasError_ReturnValue, bool CallFunc_HasLocalFilePlayback_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void SendAnalytics(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FortPlayerController*[] CallFunc_GetLocalFortPlayerControllers_ReturnValue, int CallFunc_Array_Length_ReturnValue, FortPlayerController* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Utc To String(DateTime UTC, out FString String, int CallFunc_BreakDateTime_Year, int CallFunc_BreakDateTime_Month, int CallFunc_BreakDateTime_Day, int CallFunc_BreakDateTime_Hour, int CallFunc_BreakDateTime_Minute, int CallFunc_BreakDateTime_Second, int CallFunc_BreakDateTime_Millisecond, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xbbc0600
	void SetStartPlayTime(FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, DateTime CallFunc_GetData_DateTime_Data, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Utc_To_String_String, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Utc_To_String_String, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, DateTime CallFunc_GetData_DateTime_Data, FString CallFunc_Concat_StrStr_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xbbc0600
	void CheckScreen(FString ScreenName, out bool IsThisScreen, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void Bind Player Events(bool Bind, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600
	void TelevisionOff();// 0xbbc0600
	void SendRelevancyAnalytics(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FortPlayerController*[] CallFunc_GetLocalFortPlayerControllers_ReturnValue, DateTime CallFunc_UtcNow_ReturnValue, FortPlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue);// 0xbbc0600
	void OnReady_D6A6CC9041318E455FAC36B6A9CEE294(enum NodeType);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void On Media Closed();// 0xbbc0600
	void On Media Open Failed(FString FailedUrl);// 0xbbc0600
	void On Video Url Success(FString RetrievedUrl);// 0xbbc0600
	void On Video Url Failed(FString RetrievedUrl);// 0xbbc0600
	void On Media End();// 0xbbc0600
	void On Media Opened(FString OpenedUrl);// 0xbbc0600
	void CheckDistanceToScreen();// 0xbbc0600
	void videotest(FString ScreenName, FString VideoUID, float StartTime, FString RegionData);// 0xbbc0600
	void videotestoff(FString ScreenName, bool LeaveScreen, FString RegionData);// 0xbbc0600
	void AttemptOpenSource();// 0xbbc0600
	void RequestVideoUrl();// 0xbbc0600
	void SetupMeshTrigger();// 0xbbc0600
	void MeshTriggerReady(float PlayStartTime, FString VideoUID, FString ScreenName, bool LIVE, FString RegionData);// 0xbbc0600
	void SetScreenActiveWithTimer();// 0xbbc0600
	void VideoPlayFrom(FString ScreenName, float StartPlayTime, FString RegionData);// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void MeshStartWarming(float StartWarmingTime, FString ScreenName, bool SimpleWarming, FString RegionData);// 0xbbc0600
	void StartVideoWarming(FString ScreenName, bool Enable, bool Simple, FString Weights, FString RegionData);// 0xbbc0600
	void EnableLoopVideo(FString ScreenName, FString RegionData);// 0xbbc0600
	void DisableLoopVideo(FString ScreenName, FString RegionData);// 0xbbc0600
	void OnMetaDataFailed(FString Reason);// 0xbbc0600
	void StartPlayCheck();// 0xbbc0600
	void PlayCheck();// 0xbbc0600
	void MeshStopWarming(FString VideoScreen, bool SimpleWarming, FString RegionData);// 0xbbc0600
	void BandwidthLimitDistance();// 0xbbc0600
	void videosetmaxbw(FString ScreenName, int MaxBandwidth, FString RegionData);// 0xbbc0600
	void videoseek(FString ScreenName, float SeekTime, bool Exact, FString RegionData);// 0xbbc0600
	void SubtitleLimitDistance();// 0xbbc0600
	void SetPiPMirror(FString ScreenName, bool Enable, FString RegionData);// 0xbbc0600
	void StartPiPStandalone(FString ScreenName, FString VideoUID, bool Enable, FString RegionData);// 0xbbc0600
	void EnablePiPDistance();// 0xbbc0600
	void EnablePiPDistanceCheck(bool Enable);// 0xbbc0600
	void ForcePiPOn(FString ScreenName, int64 NewCounterValue, FString RegionData);// 0xbbc0600
	void StopWarming();// 0xbbc0600
	void onScreenPrio(int Distance, FString RegionData);// 0xbbc0600
	void SetCDNWeights(FString Weights, FString RegionData);// 0xbbc0600
	void CheckUCPFromStart();// 0xbbc0600
	void OnVideoUrlSucces_Cont();// 0xbbc0600
	void StartMeshPlayback(FString RegionData);// 0xbbc0600
	void MeshStopPlayback(FString VideoScreen, bool LeaveScreen, FString RegionData);// 0xbbc0600
	void MeshEnableLoopVideo(FString ScreenName, FString RegionData);// 0xbbc0600
	void MeshDisableLoopVideo(FString ScreenName, FString RegionData);// 0xbbc0600
	void MeshSetMaxBW(FString ScreenName, int MaxBW, FString RegionData);// 0xbbc0600
	void MeshSeekPlayback(FString ScreenName, float SeekTime, bool Exact, FString RegionData);// 0xbbc0600
	void MeshSetMirrorScreen(FString ScreenName, bool Enable, FString RegionData);// 0xbbc0600
	void MeshCDNWeights(FString Weights, FString RegionData);// 0xbbc0600
	void OnStartPiP(FString ScreenName, FString VideoUID, bool Enable, bool LIVE, FString RegionData);// 0xbbc0600
	void MeshForcePiPOn(FString Screen, int64 Counter, FString RegionData);// 0xbbc0600
	void ExecuteUbergraph_Athena_Prop_Video_Stream_Trigger1(int EntryPoint, float K2Node_CustomEvent_StartWarmingTime, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_SimpleWarming, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_Enable, bool K2Node_CustomEvent_Simple, FString K2Node_CustomEvent_Weights, FString K2Node_CustomEvent_RegionData, const Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_AllowCommand_Allowed, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Galileo_VideoPreBuffer_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, MediaCDNWarmer_C* CallFunc_FinishSpawningActor_ReturnValue, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_RegionData, MediaPlayerOptions K2Node_MakeStruct_MediaPlayerOptions, bool CallFunc_AllowCommand_Allowed, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_SetLooping_ReturnValue, Timespan CallFunc_FromSeconds_ReturnValue, MediaPlayerOptions K2Node_MakeStruct_MediaPlayerOptions, delegate K2Node_CreateDelegate_OutputDelegate, FString K2Node_CustomEvent_Reason, bool CallFunc_IsPlaying_ReturnValue, FString K2Node_CustomEvent_VideoScreen, bool K2Node_CustomEvent_SimpleWarming, FString K2Node_CustomEvent_RegionData, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString K2Node_CustomEvent_ScreenName, int K2Node_CustomEvent_MaxBandwidth, FString K2Node_CustomEvent_RegionData, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_AllowCommand_Allowed, FString K2Node_CustomEvent_ScreenName, float K2Node_CustomEvent_SeekTime, bool K2Node_CustomEvent_Exact, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, bool CallFunc_SupportsSeeking_ReturnValue, Timespan CallFunc_GetTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, Timespan CallFunc_FromSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Seek_ReturnValue, Timespan CallFunc_FromSeconds_ReturnValue, bool CallFunc_Seek_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte K2Node_Event_EndPlayReason, FString K2Node_CustomEvent_ScreenName, float K2Node_CustomEvent_StartPlayTime, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, FortMediaPlayerCtrl* CallFunc_SpawnObject_ReturnValue, bool CallFunc_CheckBlocks_CompleteBlock, bool CallFunc_Play_ReturnValue, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_Enable, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, int CallFunc_Array_Find_ReturnValue, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_VideoUID, bool K2Node_CustomEvent_Enable, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_Enable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, FString K2Node_CustomEvent_ScreenName, int64 K2Node_CustomEvent_NewCounterValue, FString K2Node_CustomEvent_RegionData, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, bool CallFunc_AllowCommand_Allowed, int Temp_int_Variable, bool CallFunc_ShouldStreamBePlaying_ReturnValue, bool CallFunc_ShouldStreamBePlaying_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_CheckPiPDisabled_Disabled, bool CallFunc_CheckPiPDisabled_Disabled, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_DebounceLOS_Bounced, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckLOS_LOS, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsPlaying_ReturnValue, float K2Node_CustomEvent_PlayStartTime, FString K2Node_CustomEvent_VideoUID, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_Live, FString K2Node_CustomEvent_RegionData, bool CallFunc_BooleanAND_ReturnValue, BP_VideoMeshTrigger_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_VideoMeshTrigger_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, MediaPlayerOptions K2Node_Select_Default, bool CallFunc_OpenSourceWithOptions_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_LeaveScreen, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_VideoUID, float K2Node_CustomEvent_StartTime, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, bool CallFunc_AllowCommand_Allowed, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_SelectString_ReturnValue, FortPlayerController* CallFunc_GetFirstLocalFortPlayerController_ReturnValue, FString K2Node_CustomEvent_OpenedUrl, int K2Node_CustomEvent_Distance, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_RetrievedUrl, FString K2Node_CustomEvent_RetrievedUrl, FString K2Node_CustomEvent_FailedUrl, bool CallFunc_OpenSourceWithOptions_ReturnValue, int CallFunc_GetData_Int_Data, int CallFunc_GetData_Int_Data, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_GetData_Int_Data, int CallFunc_GetData_Int_Data, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_GetData_Int_Data, int CallFunc_GetData_Int_Data, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetData_Bool_Data, FString CallFunc_GetData_String_Data, DateTime CallFunc_GetData_DateTime_Data, DateTime CallFunc_GetData_DateTime_Data, bool CallFunc_GetData_Bool_Data, bool CallFunc_GetData_Bool_Data, FString CallFunc_GetData_String_Data, FString CallFunc_GetData_String_Data, bool CallFunc_CheckScreen_IsThisScreen, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, FString CallFunc_GetData_String_Data, bool CallFunc_GetData_Bool_Data, float CallFunc_GetData_Float_Data, int CallFunc_GetData_Int_Data, int CallFunc_GetData_Int_Data, int CallFunc_GetData_Int_Data, DateTime CallFunc_UtcNow_ReturnValue, FString K2Node_CustomEvent_Weights, FString K2Node_CustomEvent_RegionData, bool CallFunc_AllowCommand_Allowed, FString[] CallFunc_ParseIntoArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_GetData_Bool_Data, int Temp_int_Array_Index_Variable, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_CheckVideoDisabled_Disabled, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_CheckBlocks_CompleteBlock, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString K2Node_CustomEvent_RegionData, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_GetData_Int_Data, bool CallFunc_GetData_Bool_Data, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_GetData_Int_Data, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_CheckVideoDisabled_Disabled, FString K2Node_CustomEvent_VideoScreen, bool K2Node_CustomEvent_LeaveScreen, FString K2Node_CustomEvent_RegionData, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float Temp_float_Variable, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_RegionData, int Temp_int_Variable, float K2Node_Select_Default, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_ShouldStreamBePlaying_ReturnValue, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_RegionData, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float Temp_float_Variable, int Temp_int_Variable, float Temp_float_Variable, float K2Node_Select_Default, bool CallFunc_ShouldStreamBePlaying_ReturnValue, FString K2Node_CustomEvent_ScreenName, int K2Node_CustomEvent_MaxBW, FString K2Node_CustomEvent_RegionData, int Temp_int_Variable, float K2Node_Select_Default, FString K2Node_CustomEvent_ScreenName, float K2Node_CustomEvent_SeekTime, bool K2Node_CustomEvent_Exact, FString K2Node_CustomEvent_RegionData, bool CallFunc_ShouldStreamBePlaying_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_Enable, FString K2Node_CustomEvent_RegionData, FortAsyncAction_MeshNetworkReady* CallFunc_MeshNetworkReadyAsync_ReturnValue, enum Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, FString K2Node_CustomEvent_Weights, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_VideoUID, bool K2Node_CustomEvent_Enable, bool K2Node_CustomEvent_Live, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_Screen, int64 K2Node_CustomEvent_Counter, FString K2Node_CustomEvent_RegionData, enum K2Node_CustomEvent_NodeType, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetData_Float_Data);// 0xbbc0600
	void VideoSharingCheck__DelegateSignature();// 0xbbc0600
	void VideoAboutToLoadEventDispatcher__DelegateSignature(bool Reset);// 0xbbc0600
	void AudioStartedEventDispatcher__DelegateSignature(bool Enable, bool FirstStart);// 0xbbc0600
	void VideoStoppedEventDispatcher__DelegateSignature();// 0xbbc0600
	void VideoStartedEventDispatcher__DelegateSignature(bool FirstStart);// 0xbbc0600

--------------------------------
Class: MeshRegionLockData_DateTime.MeshRegionLockData_Base
	DateTime Data;//[Offset: 0x18, Size: 8]

--------------------------------
Class: MeshRegionLockData_Base
	FString RegionData;//[Offset: 0x0, Size: 16]
	bool Replicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: MeshRegionLockData_Int64.MeshRegionLockData_Base
	int64 Data;//[Offset: 0x18, Size: 8]

--------------------------------
Class: MeshRegionLockData_Float.MeshRegionLockData_Base
	float Data;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MeshRegionLockData_String.MeshRegionLockData_Base
	FString Data;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MeshRegionLockData_Bool.MeshRegionLockData_Base
	bool Data;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: MeshRegionLockData_Int.MeshRegionLockData_Base
	int Data;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortMediaRegionLockComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnMediaRegionLockLocaleComplete;//[Size: 16]
	MulticastInlineDelegateProperty OnRegionLockCanPlayContentInRegionComplete;//[Size: 16]
	void SetEventCallback(bool bSet);// 0xd0b088c
	static void MeshRemoveRegionValue_String(out MeshRegionLockData_String[] inArray, FString InRegionData);// 0xd0b0788
	static void MeshRemoveRegionValue_Int64(out MeshRegionLockData_Int64[] inArray, FString InRegionData);// 0xd0b0684
	static void MeshRemoveRegionValue_Int(out MeshRegionLockData_Int[] inArray, FString InRegionData);// 0xd0b0580
	static void MeshRemoveRegionValue_Float(out MeshRegionLockData_Float[] inArray, FString InRegionData);// 0xd0b047c
	static void MeshRemoveRegionValue_DateTime(out MeshRegionLockData_DateTime[] inArray, FString InRegionData);// 0xd0b0378
	static void MeshRemoveRegionValue_Bool(out MeshRegionLockData_Bool[] inArray, FString InRegionData);// 0xd0b0274
	static bool MeshRemoveRegionTrackerValue(out MeshRegionLockData_Tracker InTracker, FString InRegionData);// 0xd0b0108
	static bool MeshGetRegionValue_String(FString InFind, out MeshRegionLockData_String[] inArray, out MeshRegionLockData_String OutItem);// 0xd0aff44
	static bool MeshGetRegionValue_Int64(FString InFind, out MeshRegionLockData_Int64[] inArray, out MeshRegionLockData_Int64 OutItem);// 0xd0afdd4
	static bool MeshGetRegionValue_Int(FString InFind, out MeshRegionLockData_Int[] inArray, out MeshRegionLockData_Int OutItem);// 0xd0afc64
	static bool MeshGetRegionValue_Float(FString InFind, out MeshRegionLockData_Float[] inArray, out MeshRegionLockData_Float OutItem);// 0xd0afaf4
	static bool MeshGetRegionValue_DateTime(FString InFind, out MeshRegionLockData_DateTime[] inArray, out MeshRegionLockData_DateTime OutItem);// 0xd0af964
	static bool MeshGetRegionValue_Bool(FString InFind, out MeshRegionLockData_Bool[] inArray, out MeshRegionLockData_Bool OutItem);// 0xd0af7fc
	static void MeshAddRegionValue_String(const FString inString, out MeshRegionLockData_String[] inArray, FString InRegionData);// 0xd0af664
	static void MeshAddRegionValue_Int64(const int64 InInt64, out MeshRegionLockData_Int64[] inArray, FString InRegionData);// 0xd0af520
	static void MeshAddRegionValue_Int(const int inInt, out MeshRegionLockData_Int[] inArray, FString InRegionData);// 0xd0af3dc
	static void MeshAddRegionValue_Float(const float InFloat, out MeshRegionLockData_Float[] inArray, FString InRegionData);// 0xd0af298
	static void MeshAddRegionValue_DateTime(const DateTime InDateTime, out MeshRegionLockData_DateTime[] inArray, FString InRegionData);// 0xd0af158
	static void MeshAddRegionValue_Bool(const bool bInBool, out MeshRegionLockData_Bool[] inArray, FString InRegionData);// 0xd0af00c
	static void MeshAddRegionTrackerValue(out MeshRegionLockData_Tracker InTracker, FString InRegionData);// 0xd0aeeac
	void GetRegionLockApproval(const FortPlayerController* FortPC, FString UseURL, FString Data);// 0xd0aed6c
	void GetLocale(const FortPlayerController* FortPC);// 0xd0aecc4

--------------------------------
Class: MeshRegionLockData_Tracker
	FString[] RegionLockDatas;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6c0, Size: 4]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float RateAdjustmentFactor;//[Offset: 0x6c8, Size: 4]
	FloatRange RateAdjustmentRange;//[Offset: 0x6cc, Size: 16]
	MediaPlayer* MediaPlayer;//[Offset: 0x6e0, Size: 8]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0xaa0b468
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0xaa0b660
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0xaa0b170
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0xaa0b5b0
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0xaa0b260
	MediaSoundComponentSpectralData[] GetSpectralData();// 0xaa0b3bc
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0xaa0b310
	MediaPlayer* GetMediaPlayer();// 0xaa0b708
	float GetEnvelopeValue();// 0xaa0b13c
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0xaa0b73c

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x1f8, Size: 8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x200, Size: 928]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a0, Size: 8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5a8, Size: 80]
	SoundClass* SoundClass;//[Offset: 0x5f8, Size: 8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x600, Size: 8]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x608, Size: 8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x610, Size: 16]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x620, Size: 16]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x630, Size: 16]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x640, Size: 1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x640, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x644, Size: 4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x648, Size: 4]
	MulticastInlineDelegateProperty OnAudioEnvelopeValue;//[Size: 16]
	SynthSound* Synth;//[Offset: 0x680, Size: 8]
	AudioComponent* AudioComponent;//[Offset: 0x688, Size: 8]
	void Stop();// 0xa8a928c
	void Start();// 0xa8b0898
	void SetVolumeMultiplier(float VolumeMultiplier);// 0xa8a91e4
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0xa8b076c
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0xa8b055c
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0xa8b060c
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0xa8b06bc
	bool IsPlaying();// 0xa8b0860

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 4]
	float Magnitude;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3d0, Size: 8]

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: FortStreamMediaSource.StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString VideoStreamSource;//[Offset: 0x98, Size: 16]
	float VideoStreamSourceAB;//[Offset: 0xa8, Size: 4]
	<FString,FString> VideoId;//[Offset: 0xb0, Size: 80]
	bool bIsLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bBlurlLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	int MaxResolution;//[Offset: 0x104, Size: 4]
	int MaxBandwidth;//[Offset: 0x108, Size: 4]
	float AspectRatio;//[Offset: 0x10c, Size: 4]
	bool bShareLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bPartySync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	float MediaDuration;//[Offset: 0x114, Size: 4]
	float[] CDNDistribution;//[Offset: 0x118, Size: 16]
	bool bAutoClearCDNDistribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	MulticastInlineDelegateProperty OnVideoUrlSuccess;//[Size: 16]
	MulticastInlineDelegateProperty OnVideoUrlFailed;//[Size: 16]
	MulticastInlineDelegateProperty OnMetaDataFailure;//[Size: 16]
	FortDownloadLocalizedOverlays* FortDownloadLocalizedOverlays;//[Offset: 0x170, Size: 8]
	FString ProtectUserFromAVSettings;//[Offset: 0x178, Size: 16]
	FString StreamID;//[Offset: 0x188, Size: 16]
	FString StreamID_Development;//[Offset: 0x198, Size: 16]
	MediaSource* LocalFilePlaybackAsset;//[Offset: 0x1a8, Size: 8]
	MediaPlayerOptions UpdatePlayerOptions(MediaPlayerOptions PlayerOptions);// 0xd1dd854
	bool ShouldStreamBePlaying(const Object* WorldContextObject, const PrimitiveComponent* PrimitiveComponent, float CullRadius);// 0xd1dd724
	byte ShouldProtectPlayerFromContent();// 0xd1dd6f0
	void SetPlaybackStartTime(float StartTime);// 0xd1dd648
	void RequestVideoUrl(const PlayerController* FortPC);// 0xd1dd5a0
	void ReinstateSharing();// 0xd1dd58c
	bool IsScreenRecordingInProgress();// 0xd1dd554
	bool HasLocalFilePlayback();// 0xd1dd51c
	int GetCDNNumber();// 0xd1dd500
	void DisableSharing();// 0xd1dd4ec

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 16]

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 8]

--------------------------------
Class: FortDownloadLocalizedOverlays.LocalizedOverlays.Overlays.Object
	MediaPlayer* MediaPlayer;//[Offset: 0x80, Size: 8]

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 8]
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 80]

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 16]

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 8]
	Timespan EndTime;//[Offset: 0x8, Size: 8]
	FString Text;//[Offset: 0x10, Size: 16]
	Vector2D Position;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortRuntimeOptions.RuntimeOptionsBase.Object
	CreativeBetaPermission[] CreativeBetaPermissions;//[Offset: 0x38, Size: 16]
	bool bEnableItemDefinitionWhiteListing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bAlwaysReadyUpAllLocalPlayersForMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	CreativeIslandResource[] IslandResources;//[Offset: 0x50, Size: 16]
	class Object[] VolumeManagerBannedClasses;//[Offset: 0x60, Size: 16]
	int CreativeIslandDescriptionTagsMaxQty;//[Offset: 0x70, Size: 4]
	CreativeIslandDescriptionTag[] CreativeIslandDescriptionTagsWhitelist;//[Offset: 0x78, Size: 16]
	ExperimentalCohortPercent[] ExperimentalCohortPercent;//[Offset: 0x88, Size: 16]
	FString YoutubeVideoPrefix;//[Offset: 0x98, Size: 16]
	FString YoutubeVideoSuffix;//[Offset: 0xa8, Size: 16]
	bool bEnableSpectatorUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bIsTournamentMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	bool bIsOutOfSeasonMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 1]
	bool bForceBRMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 1]
	bool bAllowBPTokenRefund;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool bEnableSpeculativeCreativeMMTeamSizeFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	bool bUseTournamentAnonymousOverrideEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 1]
	bool bEnableYoutubeLinks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 1]
	bool bEnableGeneratedScreenshotForPortalPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bAllowLoadoutSwitchingInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	int IngameMatchmakingDelaySeconds;//[Offset: 0xc4, Size: 4]
	int NumSavedLoadouts;//[Offset: 0xc8, Size: 4]
	FName TournamentPlaylistName;//[Offset: 0xcc, Size: 8]
	int TournamentPlaylistPriorityBase;//[Offset: 0xd4, Size: 4]
	float TournamentModeQueueInterval;//[Offset: 0xd8, Size: 4]
	int MinimumAccountLevelForTournamentPlay;//[Offset: 0xdc, Size: 4]
	bool bEnableManualBroadcasterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bForcePRM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bCreativeManualBroadcasterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	bool bAutoloadRestrictedPlots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	bool bDisableMyIslandDescriptionPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool bEnableAllRemoteClientInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	bool bEnableBuildPreviewForBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 1]
	bool bEnableRemoteAimSnapshotManagerForBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7, Size: 1]
	float EsportsAnalyticsHeartbeatRate;//[Offset: 0xe8, Size: 4]
	bool bUseBroadcastPostProcessing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bUseBroadcastKillFeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bUseServerReplayActionFeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	bool bReplayGoToTimeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 1]
	bool bBroadcastPipModeToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bShowBroadcastPlayerEventScoreWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	bool bUseOutsideTopThreeSpectatorLeaderboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	bool bReplayPauseZeroDeltas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	int CurrentSocialImportVersion;//[Offset: 0xf4, Size: 4]
	float PawnDeathScreenDelay;//[Offset: 0xf8, Size: 4]
	int CurrentVKImportVersion;//[Offset: 0xfc, Size: 4]
	bool bEnableMassFriendImport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool bEnableToastSocialWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	int NumDaysBeforeFailedImportReattempt;//[Offset: 0x104, Size: 4]
	bool bEnableSocialBanModal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bEnableLetoSellModal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	bool bEnableDedicatedServerSocialBanVoiceQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 1]
	bool bEnableDedicatedServerSocialBanVoiceEnforcement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 1]
	bool bDisplayLastOnlineTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bDisplayLastInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool bEnableStartupSocialImport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bEnableStartupErebusFriendImport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	bool bEnableVKImport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bEnableSteamImport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	FString SocialImportURI;//[Offset: 0x118, Size: 16]
	int DaysBetweenSocialImportPrompts;//[Offset: 0x128, Size: 4]
	int DaysBetweenVKImportPrompt;//[Offset: 0x12c, Size: 4]
	int FriendImportCaptionSelection;//[Offset: 0x130, Size: 4]
	bool bEnableSplitWalletTextNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bShowAthenaStoreToast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool bShowAthenaStoreToastForRolloverAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	bool bAllow3DInspectOfRMTItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 1]
	bool bAltUpdateFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bShowRMTDescriptionPopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	bool bAllowJuniorEndingMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	FName[] AthenaStarterGameMode;//[Offset: 0x140, Size: 16]
	bool AthenaStarterFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	float PartyRichPresenceUpdateTime;//[Offset: 0x154, Size: 4]
	float PartySuggestionUpdateTimer;//[Offset: 0x158, Size: 4]
	int MaxPartySuggestionsToConsider;//[Offset: 0x15c, Size: 4]
	bool bAllowLFG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bAllowPartyPresenceUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	bool bAllowGameplayPresenceUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 1]
	bool bEnablePlaylistNameInRichPresence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163, Size: 1]
	bool bAllowDiscordFrictionlessJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bEnableInteractiveConsumables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	bool bEnableContextHelpMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166, Size: 1]
	bool bShowAthenaItemShop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167, Size: 1]
	bool bEnableShowdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	bool bEnableTournamentMatchCaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 1]
	bool bUsePlayingEventIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 1]
	bool bRetryCMSLoads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 1]
	float RefreshScoreDelay;//[Offset: 0x16c, Size: 4]
	bool bAlwaysForceTournamentLobbyPanelRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bEnableEventLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	int NumCachedLeaderboardPages;//[Offset: 0x174, Size: 4]
	int MaxPagesPerLeaderboard;//[Offset: 0x178, Size: 4]
	int EventLeaderboardLiveRefreshTimeSeconds;//[Offset: 0x17c, Size: 4]
	int EventLeaderboardLivePostEventRefreshWindowMinutes;//[Offset: 0x180, Size: 4]
	bool bGetLiveSessionsFromLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	bool bUseServerTournamentPlacementNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 1]
	int MaximumEventLengthHoursForCallout;//[Offset: 0x188, Size: 4]
	bool bEnableHypeLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	FString HypeLeaderboardEventId;//[Offset: 0x190, Size: 16]
	FString HypeLeaderboardEventWindowId;//[Offset: 0x1a0, Size: 16]
	int HypeLeaderboardRefreshTimeSeconds;//[Offset: 0x1b0, Size: 4]
	bool bHypeLeaderboardIncludeFriendsTab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	FName CreativePlaylistName;//[Offset: 0x1b8, Size: 8]
	FName BattleLabPlaylistName;//[Offset: 0x1c0, Size: 8]
	FName PlaygroundsPlaylistName;//[Offset: 0x1c8, Size: 8]
	bool bEnableEventScoreClamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	int CreativeDisabledTabIndex;//[Offset: 0x1d4, Size: 4]
	bool bAllowIslandExporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool bAllowCreativeModeratorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	bool bIslandExportingEnabledMCPOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 1]
	bool bEnableCreativeServerImportFriendsOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db, Size: 1]
	int MaxPlayersInCreativeServer;//[Offset: 0x1dc, Size: 4]
	int MaxPlayersInCreativeWhitelist;//[Offset: 0x1e0, Size: 4]
	bool bShowSupportACreatorOnIslandLinkScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool bHideServersWithZeroPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	bool bEnableIslandCodeEntryOnPlayerPortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6, Size: 1]
	bool bEnableIslandCodeEntryOnCuratedPortal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e7, Size: 1]
	bool bEnableIslandCodeEntryInFrontend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float RefreshFavoriteIslandsWaitTime;//[Offset: 0x1ec, Size: 4]
	int IslandCodeLength;//[Offset: 0x1f0, Size: 4]
	bool bApplyCodeFormatting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	bool bAdvertiseBattleLabOwnerInSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5, Size: 1]
	bool bEnableThermometerUIForBattleLab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6, Size: 1]
	bool bEnableSpatialThermometerForBattleLab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f7, Size: 1]
	bool bEnableHeatmapUIDisplayForCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool bEnableHeatmapUIDisplayForBattleLab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	bool bUseHeatmapHighPrecison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 1]
	bool bEnableBudgetTrackerSpatialTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb, Size: 1]
	bool bEnableSpatialThermometerForCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 1]
	bool bEnableSpatialSettingsForCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd, Size: 1]
	bool bIsMatchmakingEnabledForPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe, Size: 1]
	float CreativeHeatmapThermometerCellSize;//[Offset: 0x200, Size: 4]
	bool bEnableThermomterCostPreviwer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	bool bEnableJoinInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 1]
	bool bEnableSpectateAPartyMember;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 1]
	bool bEnableJoinAndSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207, Size: 1]
	bool bEnableRequestToJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	int MaxNumAlivePlayersForSpectateAPartyMember;//[Offset: 0x20c, Size: 4]
	int MaxNumPartyMemberSpectatorsPerMatch;//[Offset: 0x210, Size: 4]
	RuntimeOptionSpectateAPartyMemberOverride[] SpectateAPartyMemberPlaylistOverrides;//[Offset: 0x218, Size: 16]
	bool bEnableJoinInProgressInMatchmakingWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bAnyPartyMemberAllowedToCancelMatchmakingV2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	bool bEnableLockerSearch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 1]
	bool bEnableLockerDirtySearch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b, Size: 1]
	bool bEnableBattlePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool bEnableBattlePassFAQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	bool bShowBattlePassBangAfterPurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 1]
	bool bShowBattlePassBangEveryLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 1]
	bool bShowBattlePassBangs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool bSkipBattlePassPurchaseTextScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool bBattlePassPurchaseSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	bool bBattlePassPurchaseDialog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233, Size: 1]
	bool bBattlePassFTUEFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	bool bBattlePassVideoDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 1]
	bool bEnableAthenaFavoriting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 1]
	bool bShowAthenaDailyQuests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 1]
	bool bShowAthenaDailyQuestsWithAllChallenges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	bool bEnableAthenaCustomPreviewActionForCosmetics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 1]
	bool bEnableAthenaItemRandomization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 1]
	bool bEnableProfileStatTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b, Size: 1]
	bool bEnableProfileStatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bEnableTrickUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool bEnableMultiplayerTricks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	bool bShowAthenaChallengesTabWhenOutOfSeason;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 1]
	bool bEnableInGameChallengeTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bCreateEpicAccountPinGrantDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	bool bLoginEpicWeb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 1]
	bool bLoginXBLDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243, Size: 1]
	bool bLoginPSNDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	bool bLoginErebusDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 1]
	bool bSkipInternetCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 1]
	bool bEnableClientSettingsSaveToCloud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 1]
	bool bEnableClientSettingsSaveToDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bEnableClientSettingsRestoreInputPresets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	int bDedServerEventServiceDownloadTryCount;//[Offset: 0x24c, Size: 4]
	int TournamentRefreshPayoutMaxRateSeconds;//[Offset: 0x250, Size: 4]
	int TournamentRefreshEventsMaxRateSeconds;//[Offset: 0x254, Size: 4]
	int TournamentRefreshPlayerMaxRateSeconds;//[Offset: 0x258, Size: 4]
	float TournamentHUDPointCounterDelay;//[Offset: 0x25c, Size: 4]
	int MaxNumDisplayNamesOnLiveGameList;//[Offset: 0x260, Size: 4]
	int LiveGameListInitialLimit;//[Offset: 0x264, Size: 4]
	int LiveGameListQueryIncreaseAmount;//[Offset: 0x268, Size: 4]
	bool bEnableLiveGamesScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bLiveGameTimeDurationVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bEnableFlagSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	FString DefaultFlagRegionId;//[Offset: 0x270, Size: 16]
	FString MixedNationTeamFlagRegionId;//[Offset: 0x280, Size: 16]
	FString[] DisabledFlagSelections;//[Offset: 0x290, Size: 16]
	int FlagChangeCooldownDays;//[Offset: 0x2a0, Size: 4]
	bool bEnableEventServicePayouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bLiveGamesClientAnalyticsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	float MinimumWaitTimeToRequestNewShowdownScoreForWindow;//[Offset: 0x2a8, Size: 4]
	int EventServicePayoutRefreshRateSeconds;//[Offset: 0x2ac, Size: 4]
	int EventServicePayoutRefreshSpreadSeconds;//[Offset: 0x2b0, Size: 4]
	float BundleLoaderWidgetTimerInterval;//[Offset: 0x2b4, Size: 4]
	FString[] CancelledEvents;//[Offset: 0x2b8, Size: 16]
	int SecondsShowStartingMatchMessageForScheduledMMEvents;//[Offset: 0x2c8, Size: 4]
	bool bEnableMatchAbandonProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float MatchAbandonTimeout;//[Offset: 0x2d0, Size: 4]
	bool bEnableMultidivisionTournamentEventIdQuorum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bUseAircraftStartTimeForTimeAliveTournamentStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	double CloudSaveIntervalConfig;//[Offset: 0x2d8, Size: 8]
	bool bSaveToCloudOnMapLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool bSaveToCloudOnSuspend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool bSaveToCloudOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 1]
	bool bSaveToCloudOnTerminate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e3, Size: 1]
	bool bSaveToCloudOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	bool bSaveToCloudOnLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	double GiftNotificationRefreshTimer;//[Offset: 0x2e8, Size: 8]
	bool bEnableUndoPurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool bMoveUndoToBottomBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool bShowStoreBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	float InGameStoreUpdateChance;//[Offset: 0x2f4, Size: 4]
	bool bEnableReplayBrowser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	uint32[] WhitelistedReplayCLs;//[Offset: 0x300, Size: 16]
	bool bAllowAllReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bEnableReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool bEnableLargeTeamReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	bool bEnableCreativeModeReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x313, Size: 1]
	bool bEnablePlaygroundModeReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bEnableSplitscreenReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool bStableReplayPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	bool bEnableHearingAccessibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	bool bDisableSpatializationInsteadOfMutingWhenHearingAccessibilityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bDisableGiftXMPPMessageSend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool bDisableGifting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	bool bEnableGiftEligibilityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 1]
	bool bImmediateClaimOfEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool bForceRestrictChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	bool bLimitGiftingToEligiblePlatforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 1]
	bool bCanGiftYourself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 1]
	int GiftLimitAmount;//[Offset: 0x320, Size: 4]
	bool bBattlePassGiftingEmergencyDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	bool bEnableBattlePassGiftingButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 1]
	bool bEnableBattlePassGiftingButtonTokenOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x326, Size: 1]
	bool bShowBPGiftBoxPopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x327, Size: 1]
	float EndBattleRoyalUpdateDelay;//[Offset: 0x328, Size: 4]
	float LightswitchDownLoginDelay;//[Offset: 0x32c, Size: 4]
	bool bShowStatusButtonOnWaitingRoomScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bInvertMotionOnUnattachedSwitchControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool bDisableTouchLookVelocityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	bool bDisablePurchaseHistoryScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 1]
	bool bEnableRedeemOfflinePurchasesToasts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool bAllowProcessedPayoutsToRefreshProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	float TouchAimAssistStrengthScalar;//[Offset: 0x338, Size: 4]
	bool bDisableTouchAimAssistAutoTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bProcessGamepadInputOnMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool bMobileForceGamepadHUDWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e, Size: 1]
	bool bDisableLegacyControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f, Size: 1]
	bool bFixAimAssistDeadzoneExploit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	enum CrucibleWhitelistOverride;//[Offset: 0x341, Size: 1]
	bool bDisableCrucibleStatUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool bDisableCrucibleStatDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	bool bDisableCrucibleGlobalLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bDisableCrucibleFriendLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	bool bDisableCrucibleAnalyticsEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool bDisableCrucibleDestroyDeadBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	bool bDisableCrucibleForcedGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bDisableCrucibleLeaderboardFilterText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bDisableCrucibleLeaderboardSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	bool bCrucibleLockToPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 1]
	bool bCrucibleSendStatsEndOfSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bCrucibleSendStatsEndOfSessionOnShutdownEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	int CrucibleMinValidStatScoreMilliseconds;//[Offset: 0x350, Size: 4]
	int CrucibleLeaderboardFriendQueryMaxSize;//[Offset: 0x354, Size: 4]
	bool bCrucibleLeaderboardEnableDisplayNameIcons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool bEnableFortLeaderboardHelperDisplayNonPlatformNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	bool bEnableFortLeaderboardHelperConsolePlatformNameSearch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 1]
	bool bEnableFortLeaderboardHelperConsoleDisplayNameFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b, Size: 1]
	bool bDisableCollectionStatsUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool bDisableCollectionStatsDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	int CollectionStatsFriendQueryMaxSize;//[Offset: 0x360, Size: 4]
	bool bUseNativeQuickbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool bSoundIndicatorsAlwaysEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	bool bSoundIndicatorsEnabledForTeammates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 1]
	bool bSoundIndicatorsPooled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x367, Size: 1]
	int SoundIndicatorMaxNum;//[Offset: 0x368, Size: 4]
	int TencentDefaultBookStatSeason;//[Offset: 0x36c, Size: 4]
	bool bEquipFirstWeaponOnMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bClearLastFireOnAbilityFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool bUsePrototypeSubGameLoadingScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 1]
	bool bForcePrototypeLoadingScreenScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	float ShowEliminationDistanceOver;//[Offset: 0x374, Size: 4]
	float FadeOutTeamIndicatorsAfter;//[Offset: 0x378, Size: 4]
	float FadeOutNPCEnemyIndicatorsAfter;//[Offset: 0x37c, Size: 4]
	float FadeOutEnemyIndicatorsAfter;//[Offset: 0x380, Size: 4]
	float FadeOutWorldItemIndicatorsAfter;//[Offset: 0x384, Size: 4]
	float FadeOutHardCoreBeaconIndicatorsAfter;//[Offset: 0x388, Size: 4]
	float MapIndicatorTouchClearDistance;//[Offset: 0x38c, Size: 4]
	Vector2D MapIndicatorOffset;//[Offset: 0x390, Size: 8]
	float AthenaMapZoomMax;//[Offset: 0x398, Size: 4]
	float BacchusMapIndicatorSizeMultiplier;//[Offset: 0x39c, Size: 4]
	float AthenaMapPanSpeedMultiplier;//[Offset: 0x3a0, Size: 4]
	float AthenaMapZoomSpeedMultiplier;//[Offset: 0x3a4, Size: 4]
	bool bAthenaMapMapIconsFlowEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float WaitTimeBeforeShowingNewModeViolator;//[Offset: 0x3ac, Size: 4]
	RuntimeOptionLocalizableString FriendCodeShareWarningMessage;//[Offset: 0x3b0, Size: 16]
	RuntimeOptionLocalizableString PlatformPlayAllowedErrorMessage;//[Offset: 0x3c0, Size: 16]
	bool bOnlyShareURLWithNoMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool bExcludeURLInShareMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	bool bShowCreateAccountOnRedirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 1]
	bool bEnableContextTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d3, Size: 1]
	bool bDebugForcePlayerSurveys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bFeedbackTextShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool bEnableBadMatchPopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 1]
	int BadMatchIncidentThreshold;//[Offset: 0x3d8, Size: 4]
	float BadConnectionUpdateTime;//[Offset: 0x3dc, Size: 4]
	int BadMatchPopupRecallInterval;//[Offset: 0x3e0, Size: 4]
	FString AthenaCodeOfConductURL;//[Offset: 0x3e8, Size: 16]
	FString KairosCommunityRulesURL;//[Offset: 0x3f8, Size: 16]
	FString BacchusFriendCodeShareURL;//[Offset: 0x408, Size: 16]
	FString CreateAccountUrl;//[Offset: 0x418, Size: 16]
	FString GooglePlayRatingURL;//[Offset: 0x428, Size: 16]
	FString LinkAccountURL;//[Offset: 0x438, Size: 16]
	FString AccountMergeMoreInfoURL;//[Offset: 0x448, Size: 16]
	bool bEnableFactionTechScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bRequireFactionChoiceOnInfiltrationPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	int TotalPlayerTechLevelsToShow;//[Offset: 0x45c, Size: 4]
	FString SupportURL;//[Offset: 0x460, Size: 16]
	FString CheckStatusURL;//[Offset: 0x470, Size: 16]
	FString iOSAppStoreURL;//[Offset: 0x480, Size: 16]
	FString TurnOnMfaURL;//[Offset: 0x490, Size: 16]
	FString ArenaResetTime;//[Offset: 0x4a0, Size: 16]
	FString ListOfCreatorsURL;//[Offset: 0x4b0, Size: 16]
	bool bAllowCodeRedemptionInSubgameSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	bool bEnableAutomaticMOTD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 1]
	bool bShowMOTDInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2, Size: 1]
	bool bMOTDSameNewsForCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3, Size: 1]
	bool bSkipSubgameSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	enum BRUpdatesURLMode;//[Offset: 0x4c5, Size: 1]
	FString BRUpdatesURL;//[Offset: 0x4c8, Size: 16]
	enum STWUpdatesURLMode;//[Offset: 0x4d8, Size: 1]
	FString STWUpdatesURL;//[Offset: 0x4e0, Size: 16]
	FString GiftingInfoURL;//[Offset: 0x4f0, Size: 16]
	FString PrivacyPolicyURL;//[Offset: 0x500, Size: 16]
	FString FanContentPolicyURL;//[Offset: 0x510, Size: 16]
	FString TermsOfServiceURL;//[Offset: 0x520, Size: 16]
	int GuardianChallengeLengthDays;//[Offset: 0x530, Size: 4]
	bool bAgeGateFlowEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 1]
	bool bEnableContentControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 1]
	FString ContentControlsMoreInfoURL;//[Offset: 0x538, Size: 16]
	FString ContentControlsForgotPinURL;//[Offset: 0x548, Size: 16]
	FString ContentControlsVerifyEmailURL;//[Offset: 0x558, Size: 16]
	bool bEnableContentControlsPlaytimeReporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	bool bEnableContentControlsPurchaseReporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 1]
	bool bContentControlsViewUGCEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 1]
	int MaxNumItemsInCreativeChests;//[Offset: 0x56c, Size: 4]
	int MaxStreamerMatchmakingDelay;//[Offset: 0x570, Size: 4]
	bool bEnableHiddenMatchmakingDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	FString TencentStoreDetailsURL;//[Offset: 0x578, Size: 16]
	int PSALoadingScreenPercentChance;//[Offset: 0x588, Size: 4]
	FString StwDownloadLauncherOption;//[Offset: 0x590, Size: 16]
	RuntimeOptionLocalizableString OverrideDefaultBonusXpEventTitleString;//[Offset: 0x5a0, Size: 16]
	RuntimeOptionLocalizableString XBLDisableText;//[Offset: 0x5b0, Size: 16]
	RuntimeOptionLocalizableString PSNDisableText;//[Offset: 0x5c0, Size: 16]
	RuntimeOptionLocalizableString SwitchDisableText;//[Offset: 0x5d0, Size: 16]
	RuntimeOptionReviewPromptCriteria ReviewPromptCriteria;//[Offset: 0x5e0, Size: 20]
	bool bDisableAllKnobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	bool bDisableAllGameplayMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 1]
	bool bDisableMatchmakingKnobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f6, Size: 1]
	bool bDisableMinigameKnobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f7, Size: 1]
	bool bDisableGameOptionKnobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	bool bDisableAffiliateFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 1]
	bool bUseHotfixedAffiliateNamesArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa, Size: 1]
	bool bEnablePrerollLlamas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fb, Size: 1]
	bool bEnableSubregionNetworkAccelerators;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	FString[] DisabledNetworkAcceleratedSubregions;//[Offset: 0x600, Size: 16]
	FString[] AdvertisedNetworkAcceleratedSubregions;//[Offset: 0x610, Size: 16]
	bool bShowAccountItemWarningForVaultThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	int DaysBetweenAccountItemWarnings;//[Offset: 0x624, Size: 4]
	float VaultLimitThresholdForAccountItemWarning;//[Offset: 0x628, Size: 4]
	bool bShowAccountItemWarningForItemCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	int AlwaysWarnAccountItemCount;//[Offset: 0x630, Size: 4]
	RuntimeOptionTabStateInfo[] DisabledFrontendNavigationTabs;//[Offset: 0x638, Size: 16]
	RuntimeOptionTabStateInfo[] DisabledTabsForOutOfSeason;//[Offset: 0x648, Size: 16]
	RuntimeOptionTabStateInfo[] TournamentDisabledFrontendNavigationTabs;//[Offset: 0x658, Size: 16]
	FString[] DisabledMatchmakingKnobs;//[Offset: 0x668, Size: 16]
	FString[] HiddenMatchmakingKnobs;//[Offset: 0x678, Size: 16]
	RuntimeOptionDisabledGameplayMessage[] DisabledGameplayMessages;//[Offset: 0x688, Size: 16]
	int NumGameplayMessageChannels;//[Offset: 0x698, Size: 4]
	FString[] AffiliateNames;//[Offset: 0x6a0, Size: 16]
	bool bShowMOTDNews;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	DateTime DPlusVBuckPromoStart;//[Offset: 0x6b8, Size: 8]
	DateTime DPlusVBuckPromoEnd;//[Offset: 0x6c0, Size: 8]
	FString[] CountryCodesForDPlusVBuckOverride;//[Offset: 0x6c8, Size: 16]
	DateTime RockyRidgeStart;//[Offset: 0x6d8, Size: 8]
	RuntimeOptionTournamentScoreThreshold[] SoloTournamentScoreThresholds;//[Offset: 0x6e0, Size: 16]
	RuntimeOptionTournamentScoreThreshold[] DuoTournamentScoreThresholds;//[Offset: 0x6f0, Size: 16]
	RuntimeOptionTournamentScoreThreshold[] SquadsTournamentScoreThresholds;//[Offset: 0x700, Size: 16]
	float PickingInteractDistance;//[Offset: 0x710, Size: 4]
	float PickingHighlightMovementUpdateDist;//[Offset: 0x714, Size: 4]
	float PickingHighlightUpdateTime;//[Offset: 0x718, Size: 4]
	float PickingTime;//[Offset: 0x71c, Size: 4]
	float AutoPickingInteractDistanceFactor;//[Offset: 0x720, Size: 4]
	float AutoOpenDoorInputMagnitude;//[Offset: 0x724, Size: 4]
	float AutoOpenDoorTraceDistance;//[Offset: 0x728, Size: 4]
	bool bAutofireEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bShowXPWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool bShowAccoladesListWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	bool bEnableInGameMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 1]
	bool bUseNewFlowIngameMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	bool bDisableAccoladesButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 1]
	bool bToggleIGMAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x732, Size: 1]
	FString[] WhitelistedInGameMatchmakingRegions;//[Offset: 0x738, Size: 16]
	FString[] WhitelistedInGameMatchmakingSubRegions;//[Offset: 0x748, Size: 16]
	FString[] BlacklistedInGameMatchmakingSubRegions;//[Offset: 0x758, Size: 16]
	FName[] BlacklistedInGameMatchmakingPlaylists;//[Offset: 0x768, Size: 16]
	FName[] SubRegionWhitelistedInGameMatchmakingPlaylists;//[Offset: 0x778, Size: 16]
	bool bAllowPreserveSquad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	bool bAutofireUsesComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 1]
	bool bAutofireUsesAutoaimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78a, Size: 1]
	bool bHoldToFireOnAutofireTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78b, Size: 1]
	float DefaultAutofireRange;//[Offset: 0x78c, Size: 4]
	float AutofireExtraTrackingRange;//[Offset: 0x790, Size: 4]
	bool bServerNetDriverAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 1]
	bool bClientNetDriverAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795, Size: 1]
	bool bDisableReplicationGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x796, Size: 1]
	float BRServerMaxTickRate;//[Offset: 0x798, Size: 4]
	float DoubleTapOnEndTouchTime;//[Offset: 0x79c, Size: 4]
	float DoubleTapOnStartTouchTime;//[Offset: 0x7a0, Size: 4]
	float DoubleTapDistance;//[Offset: 0x7a4, Size: 4]
	float SingleTapDistance;//[Offset: 0x7a8, Size: 4]
	float TouchMoveStickRadius;//[Offset: 0x7ac, Size: 4]
	float TouchMoveStickRadiusTargeting;//[Offset: 0x7b0, Size: 4]
	float TouchMoveStickRadiusScoped;//[Offset: 0x7b4, Size: 4]
	float TouchMoveStickRadiusDriving;//[Offset: 0x7b8, Size: 4]
	float AutorunLockZoneOffset;//[Offset: 0x7bc, Size: 4]
	float AutorunLockZoneDelay;//[Offset: 0x7c0, Size: 4]
	float MoveOriginResetTime;//[Offset: 0x7c4, Size: 4]
	float MoveOriginResetDistance;//[Offset: 0x7c8, Size: 4]
	float MoveOriginFollowDistance;//[Offset: 0x7cc, Size: 4]
	bool bDisableTouchLookInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	float RotateInertiaMultiplier;//[Offset: 0x7d4, Size: 4]
	float RotateInertiaMinTime;//[Offset: 0x7d8, Size: 4]
	float RotateInertiaMinLength;//[Offset: 0x7dc, Size: 4]
	float RotateInertiaMinMagnitude;//[Offset: 0x7e0, Size: 4]
	int RotateInertiaNumAveragedTouches;//[Offset: 0x7e4, Size: 4]
	bool bTouchQuickbarTapToLockEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool bTouchInteractInUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 1]
	bool bTouchInteractInUIForced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ea, Size: 1]
	bool bEnableHUDLayoutTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7eb, Size: 1]
	bool bEnableHUDLayoutCloudSave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ec, Size: 1]
	bool bEnableHUDLayoutToolPanZoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ed, Size: 1]
	bool bEnableMobileHUDV2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ee, Size: 1]
	bool bEnableHUDLayoutToolV2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ef, Size: 1]
	bool bEnableHUDLayoutToolV2_GridSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	bool bEnableGFNSettingEditCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 1]
	float AthenaExternalRichPresenceDelayTimeSeconds;//[Offset: 0x7f4, Size: 4]
	bool bEnableExternalPresenceAthenaPlayersRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	float MinimumTimeBetweenConsolePresenceUpdates;//[Offset: 0x7fc, Size: 4]
	float MinimumTimeBetweenMCPPresenceUpdates;//[Offset: 0x800, Size: 4]
	int TimeBetweenStorePatchCheckRequestsSeconds;//[Offset: 0x804, Size: 4]
	bool bInviteUIDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	bool bEnableInGameMipsAnalyticsReporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 1]
	float SecondsBetweenTextureStatsGathering;//[Offset: 0x80c, Size: 4]
	bool bEnableMipsCapExperiment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	int CurrentMipsCapExperimentVersion;//[Offset: 0x814, Size: 4]
	bool bEnableDownloadAnalyticsReporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool bEnableDownloadHeartbeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	float DownloadHeartbeatIntervalInSeconds;//[Offset: 0x81c, Size: 4]
	bool bEnableFriendsListButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	bool bForceDisableCrossplatformSquadFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 1]
	bool bRequireCrossplayOptIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x822, Size: 1]
	bool bUseAccountCrossplayPermissions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x823, Size: 1]
	bool bSingleCrossplayOptInPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool bImmediatelyDisplayCrossplayOptIn_STW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 1]
	bool bImmediatelyDisplayCrossplayOptIn_BR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x826, Size: 1]
	bool bCrossplayOptInByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x827, Size: 1]
	bool bShowIconForSamePlatformPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	bool bObscuredPlatformIcons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 1]
	bool bEnableChatWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82a, Size: 1]
	bool bShowVoiceChatSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82b, Size: 1]
	bool bShowMultipleVoiceChatSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 1]
	bool bPartyInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82d, Size: 1]
	bool bShouldAthenaQueryRecentPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82e, Size: 1]
	bool bEnableRecentPlayerList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82f, Size: 1]
	bool bEnableSuggestedFriendList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	bool bEnableBlockedList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x831, Size: 1]
	bool bEnableFriendListInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 1]
	bool bPushJIPInfoToPlatformPresence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x833, Size: 1]
	bool bEnableStWInZonePrivacyChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 1]
	bool bEnableSitoutOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x835, Size: 1]
	bool bEnableSitoutOption_STW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x836, Size: 1]
	bool bEnableSocialPanelLeaveParty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x837, Size: 1]
	bool bEnableMainMenuLeaveParty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	bool bEnableINICachedRecentPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 1]
	int MaxINICachedRecentPlayers;//[Offset: 0x83c, Size: 4]
	int MinUSSNameLength;//[Offset: 0x840, Size: 4]
	bool bEnableNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool bAllowNicknameEmoji;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	FString[] NicknameEmojiBlacklist;//[Offset: 0x848, Size: 16]
	bool bNicknameInFront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool bShowAccountBoosts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	bool bShowCustomerSupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85a, Size: 1]
	bool bEnableChannelChangePopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85b, Size: 1]
	bool bEnableVoiceSpeakerWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c, Size: 1]
	bool bEnableSpeakerWidgetZonePerfMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d, Size: 1]
	bool bShowVoiceIndicatorsWhileLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85e, Size: 1]
	bool bEnableVoiceChannelSelectionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85f, Size: 1]
	bool bEnableGlobalChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool bEnableAllTabInChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool bEnableEULA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	bool bEnableEndOfZoneCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x863, Size: 1]
	bool bEnableOnboardingCinematics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 1]
	FName[] VideoDisplayDataBlacklist;//[Offset: 0x868, Size: 16]
	bool bShowFounderBannerIcons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 1]
	bool bShowCurrentRegionInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 1]
	bool bEnableFoundersDailyRewards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 1]
	bool bEnableTwitchIntegration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87b, Size: 1]
	bool bEnableMatchmakingRegionSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	bool bEnableReadyupButtonWhileSittingout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 1]
	bool bEnableEulaRequiredTournaments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87e, Size: 1]
	bool bEnableMFARequiredTournaments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87f, Size: 1]
	bool bAllTournamentsRequireMFA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool bSpectatorBroadcasterSkipMfaEulaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	bool bEnableNaviationToChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x882, Size: 1]
	bool bEnableLanguageSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x883, Size: 1]
	bool bEnableFriendCodeSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	bool bEnableEarlyAccessLoadingScreenBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 1]
	bool bClientIgnoreIsTournamentCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x886, Size: 1]
	int CampaignMatchEndRetryCount;//[Offset: 0x888, Size: 4]
	int StWTutorialDownloadAttempts;//[Offset: 0x88c, Size: 4]
	bool bShopPurchaseConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	bool bShopPurchaseConfirmationJapanPS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	bool bToyMessagingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892, Size: 1]
	bool bAllowAccessToAllEmotesForTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x893, Size: 1]
	bool bAllowAccessToStWHeroOutfitsAndBackblingForTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	bool bEnableCosmeticItemShopInSTW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 1]
	bool bRequireEmoteOwnershipInPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x896, Size: 1]
	bool bEnableSTWLootDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x897, Size: 1]
	bool bEnableSTWContainerItemCacheDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	bool bEnableSTWEnemyItemCacheDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 1]
	bool bEnableHoldToPickupUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89a, Size: 1]
	bool bSkipTrailerMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89b, Size: 1]
	bool bAlwaysPlayTrailerMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 1]
	bool bHideUnaffordableMtxPurchases;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 1]
	bool bDisableCTAInMtxStoreSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89e, Size: 1]
	bool bAthenaFrontEndUsePushPopMTXStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89f, Size: 1]
	bool bHidePlusOnVbucksButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	bool bAllowXboxStwAccessDuringLiveStoreOutage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a1, Size: 1]
	bool bShowReplayTrailerButton_Athena;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a2, Size: 1]
	bool bEnableAlterationModification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a3, Size: 1]
	bool bEnableSchematicRarityUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	bool bEnableMissionActivationVote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a5, Size: 1]
	bool bEnableLtmRetrieveTheData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a6, Size: 1]
	bool bEnableUpgradesVideos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a7, Size: 1]
	bool bEnableExternalRichPresence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 1]
	bool bShowEnableMFAModalAtStartupAthena;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 1]
	bool bShowEnableMFAModalAtStartupSTW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8aa, Size: 1]
	bool bEnableAIBuildingHitFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ab, Size: 1]
	int LevelToStartShowingMFAModal;//[Offset: 0x8ac, Size: 4]
	int DaysBetweenEnableMFAModalPrompts;//[Offset: 0x8b0, Size: 4]
	float DelayGiftButtonWhenMFANotEnabledSeconds;//[Offset: 0x8b4, Size: 4]
	int LevelToAutoOpenBattlePassOnNewSeason;//[Offset: 0x8b8, Size: 4]
	int ForceSeasonRefreshCounter;//[Offset: 0x8bc, Size: 4]
	int ForceVideoRefreshCounter;//[Offset: 0x8c0, Size: 4]
	bool bForceBattlePassPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bCanShowSTWUpsellInBR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	bool bShowLeaderboardPrivacySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c6, Size: 1]
	bool bEnableServerScoreboardLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c7, Size: 1]
	bool bEnableAsyncScoreboardFlush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bEnableInputBasedMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	bool bUsingAlternateMatchmakingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ca, Size: 1]
	bool bNotifyBlockedInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cb, Size: 1]
	int NumberOfFramesBeforeWarnInputBlocked;//[Offset: 0x8cc, Size: 4]
	bool bDisableVideoOptions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	bool bEnableBattlePassWatchVideoActionOnCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d1, Size: 1]
	bool bEnableBattlePassReplayCinematicAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d2, Size: 1]
	bool bEnableCareerReplayCinematicAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d3, Size: 1]
	float RadioInputDebounceSeconds;//[Offset: 0x8d4, Size: 4]
	float RadioTuningRetryTime;//[Offset: 0x8d8, Size: 4]
	int RadioTuningRetryCount;//[Offset: 0x8dc, Size: 4]
	bool bEnableBattlePassSocialFriends;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	bool bEnableBattlePassSocialFriendsOfDifferentPlatforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 1]
	bool bEnableBattlePassSocialFriendsServerSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e2, Size: 1]
	bool bEnableSimulatedXPForBattlePassSocialFriends;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e3, Size: 1]
	bool bEnableBattlePassPreviewOnRewardScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool bEnableHoldToCloseOnRewardsScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	int ShowBattlePassTracker;//[Offset: 0x8e8, Size: 4]
	bool bDisplayBattlePassRewardsIndividually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec, Size: 1]
	bool bDisplayOnlyBattlePassFAQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ed, Size: 1]
	bool bEnableBPVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ee, Size: 1]
	bool bEnableUEKGameSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ef, Size: 1]
	bool bCompletelyDisableUEKGameSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	bool bDisableGRL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f1, Size: 1]
	bool bAlwaysPlayBPVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f2, Size: 1]
	bool bShowBPPreviewVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f3, Size: 1]
	bool bShowBPTrack_TimeLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4, Size: 1]
	bool bDisplayAllCharactersOnBattlePassPreviewScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f5, Size: 1]
	bool bRefreshBattlePassCatalogOnSeasonDataLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f6, Size: 1]
	bool bEnableChallengeHolidayVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f7, Size: 1]
	bool bEnableCareerScreenVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	bool bEnableSpecialEventVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 1]
	bool bEnableCNVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fa, Size: 1]
	bool bEnableWinterfestPurchaseButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fb, Size: 1]
	bool bEnableWinterfestGiftButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 1]
	bool bForceWinterfestInfoModalButtonVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fd, Size: 1]
	int NumViewsToDisplayWinterfestInfoModalButton;//[Offset: 0x900, Size: 4]
	bool bCheckForPatchUpdateOnMatchmakingPlayClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 1]
	bool bCheckForPatchUpdateOnItemShopActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 1]
	FString[] HiddenSettings;//[Offset: 0x908, Size: 16]
	bool bDisplayPlayerReportingRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 1]
	bool bDisplayRelevantPlayersForPlayerReporting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x919, Size: 1]
	bool bPreventMultipleReportsOfSamePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91a, Size: 1]
	bool bAllowReportingFeaturedIslands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91b, Size: 1]
	bool bForceGamepadPlaytest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 1]
	bool bEnableNewFireModeSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91d, Size: 1]
	bool bEnableHUDPresetSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91e, Size: 1]
	bool bEnableAddFriendWhileSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91f, Size: 1]
	bool bEnableFriendLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	float PlatformChatToastDisplaySeconds;//[Offset: 0x924, Size: 4]
	float HPMicrophoneToastDisplaySeconds;//[Offset: 0x928, Size: 4]
	FString FriendLinkURL;//[Offset: 0x930, Size: 16]
	bool bAllowForceTouchFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 1]
	float VehicleSessionMinTimeUsed;//[Offset: 0x944, Size: 4]
	float RebootChipExpirationTime;//[Offset: 0x948, Size: 4]
	float RebootDirectiveDisplayTime;//[Offset: 0x94c, Size: 4]
	bool bDonutIdleGameEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	bool bRebootEnableInventoryDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 1]
	bool bUseHordeStormShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x952, Size: 1]
	float HordeStormShieldStartingRadiusOverride;//[Offset: 0x954, Size: 4]
	float HordeStormShieldEndingRadiusOverride;//[Offset: 0x958, Size: 4]
	float HordeStormShieldBreatherRadiusOverride;//[Offset: 0x95c, Size: 4]
	bool bUseHordeRespawnAtLastPawnLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	bool bAllowHordePlayerTriggeredRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 1]
	int MaxQuickScopeAimAssistPulls;//[Offset: 0x964, Size: 4]
	float MaxQuickScopeAimAssistPullWatchTime;//[Offset: 0x968, Size: 4]
	bool bShouldDisablePickaxeFXFrontendPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
	bool bRegisterPawnsWithSignificanceManagerInFrontEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96d, Size: 1]
	bool bHideExclusiveCosmeticsFromOtherPlatformsOnPS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96e, Size: 1]
	bool bHideExclusiveCosmeticsFromOtherPlatformsOnXB1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96f, Size: 1]
	bool bHideExclusiveCosmeticsFromOtherPlatformsOnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 1]
	bool bHideExclusiveCosmeticsFromOtherPlatformsOnPS4_STWOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x971, Size: 1]
	bool bHideExclusiveCosmeticsFromOtherPlatformsOnXB1_STWOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x972, Size: 1]
	bool bHideExclusiveCosmeticsFromOtherPlatformsOnSwitch_STWOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x973, Size: 1]
	bool bSimpleHeistVanEntrance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x974, Size: 1]
	FString LobbyGenericLinkButtonURL;//[Offset: 0x978, Size: 16]
	bool bEnableLobbyGenericLinkButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 1]
	RuntimeOptionLocalizableString LobbyGenericLinkButtonText;//[Offset: 0x990, Size: 16]
	int HighlightClipRewindTimeInSeconds;//[Offset: 0x9a0, Size: 4]
	bool bEnableAntiTaxi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 1]
	float StopFlyingParachuteCooldownTime;//[Offset: 0x9a8, Size: 4]
	float FlushLoadingScreenRefreshSeconds;//[Offset: 0x9ac, Size: 4]
	bool bEnableVehicleSpawnMissionInStw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	bool bEnableDownTierCraftingInStw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 1]
	bool bShowBugReportsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b2, Size: 1]
	bool bShowCommentReportsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b3, Size: 1]
	bool bShowContentReportsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 1]
	bool bEnableItemRefundingInStw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 1]
	bool bDisableCareerStatsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b6, Size: 1]
	bool bDisableCareerLeaderboardButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b7, Size: 1]
	bool bDisableCareerStatsPagePlatformProfileButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	bool bUsePlatformSpecificTextOnCareerPage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9, Size: 1]
	bool bDisableViewOtherProfilesFromCompLeaderboards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ba, Size: 1]
	bool bShowOtherPlayerStatsOnCareerPage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bb, Size: 1]
	bool bShowFeatsOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 1]
	bool bShowHardcoreModifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bd, Size: 1]
	int InputMethodThrashingLimit;//[Offset: 0x9c0, Size: 4]
	float InputMethodThrashingWindowInSeconds;//[Offset: 0x9c4, Size: 4]
	bool bEnableLogUploadForTokenHolders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 1]
	float TokenHolderLogTailSizeKb;//[Offset: 0x9cc, Size: 4]
	bool bAllowPartialBackgroundAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	bool bDuplicateRemovedPlayersOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1, Size: 1]
	PlayerMarkerConfig PlayerMarkerConfig;//[Offset: 0x9d4, Size: 88]
	bool bIsCreativeMultiSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	bool bEnableUserProfilePictures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2d, Size: 1]
	bool bUseProfilePicturePresence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2e, Size: 1]
	bool bEnableChannelsServiceLoadTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2f, Size: 1]
	bool bAllowMimicingEmotes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool bAllowMimicingEmotesInFrontend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	bool bAllowAsyncTooltipLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa32, Size: 1]
	bool bAllowListViewAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa33, Size: 1]
	bool bEnableBackToPartyHubButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 1]
	bool bEnableMobileAvailableLootingListView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa35, Size: 1]
	bool bEnableDisambiguateLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa36, Size: 1]
	bool bEnableOptionalHighRezMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa37, Size: 1]
	int NumDaysToSnoozeGooglePlayRating;//[Offset: 0xa38, Size: 4]
	int NumDaysAllowedToDelayGoogleRating;//[Offset: 0xa3c, Size: 4]
	bool bEnableMobileInGameAppRating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	int PreloadRevision;//[Offset: 0xa44, Size: 4]
	bool bEnableLiveStoreTilePreviews;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	bool bEnableLiveStoreTilePreviews_InGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 1]
	bool bAllowedToEnableUIGlobalInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4a, Size: 1]
	bool bEnableAutoMulchInStW;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4b, Size: 1]
	bool bAllStWMoonbeamHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 1]
	FString[] IllegalIslandTitleCharacters;//[Offset: 0xa50, Size: 16]
	int[] IllegalIslandTitleChars;//[Offset: 0xa60, Size: 16]
	bool bEnableCreativeUserTextSanitizationWithToxicityService;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	bool bEnableCreativeUserTextSanitizationWithPlatformSanitizer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 1]
	bool bEnableCreativeUserTextSanitizationWithChatSanitizer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa72, Size: 1]
	bool bUseToxicityAsCreativeMainTextSanitizer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa73, Size: 1]
	bool bUseLegacyAsyncSanitizationLogicInCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74, Size: 1]
	int HotfixVersionId;//[Offset: 0xa78, Size: 4]
	bool bCanTurboBuildOutsideBuildModeWithBuildTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	float MaxBuildingIntoTerrainIntersectionPercentage;//[Offset: 0xa80, Size: 4]
	bool bUsingBuildingExtraPiece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 1]
	int AnalyticsBuildingWallTooLowLocations;//[Offset: 0xa88, Size: 4]
	bool bDisableClientEngagementsAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c, Size: 1]
	float AnalyticsClientEngagementsTimeoutSeconds;//[Offset: 0xa90, Size: 4]
	int AnalyticsClientEngagementsMaxSendPerMinute;//[Offset: 0xa94, Size: 4]
	int AnalyticsClientEngagementsMaxSendOnCleanup;//[Offset: 0xa98, Size: 4]
	bool bAnalyticsClientEngagementsRequireTimeToReturnFireToSend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	int AnalyticsClientEngagementsParticipationPercent;//[Offset: 0xaa0, Size: 4]
	bool PublishingEnabledForWhitelistedAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 1]
	FString IslandCodeLinkMnemonicExampleText;//[Offset: 0xaa8, Size: 16]
	FString IslandCodeLinkURLText;//[Offset: 0xab8, Size: 16]
	FString FeaturedCreativeLTMAffiliateName;//[Offset: 0xac8, Size: 16]
	bool bEnableCreativeLTMSupportCreator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	FString CreativePublishCodeURLPrefix;//[Offset: 0xae0, Size: 16]
	bool bCreativeMinimapRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	bool bCreativeMinimapCaptureLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf1, Size: 1]
	bool bCreativeMapRenderingInHub;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf2, Size: 1]
	bool bCreativeMapWaitForVolumeReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf3, Size: 1]
	FString[] CuratedLinkCodes;//[Offset: 0xaf8, Size: 16]
	FString[] CuratedIslandTemplateCodes;//[Offset: 0xb08, Size: 16]
	<FString,FortPlaylistCuratedContent> PlaylistCuratedContent;//[Offset: 0xb18, Size: 80]
	bool bEnableIslandCheckpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	bool bEnableIslandLoadNetSafeGuards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 1]
	<FString,FString> PlaylistCuratedHub;//[Offset: 0xb70, Size: 80]
	FString CreativeIslandImageURLOverride;//[Offset: 0xbc0, Size: 16]
	FString CreativeIslandGeneratedImageURLOverride;//[Offset: 0xbd0, Size: 16]
	bool bLoadingScreenInputPreprocessorEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	bool AllowInputTypeFilterForAccessibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe1, Size: 1]
	bool AllowLockPrimaryInputMethodToMouseForAccessibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe2, Size: 1]
	bool bEnableLiveStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe3, Size: 1]
	bool bEnableLiveStreamCountdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe4, Size: 1]
	DateTime LiveStreamStartTime;//[Offset: 0xbe8, Size: 8]
	bool bEnableLiveStreamInMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	bool bShowLiveStreamInMatchByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf1, Size: 1]
	bool bCaptureTeamFrontendFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf2, Size: 1]
	FName VideoHolidayName;//[Offset: 0xbf4, Size: 8]
	FName VideoBattlePassName;//[Offset: 0xbfc, Size: 8]
	FName VideoCareerScreenName;//[Offset: 0xc04, Size: 8]
	FName VideoChallengeScreenName;//[Offset: 0xc0c, Size: 8]
	FName VideoFrontEndName;//[Offset: 0xc14, Size: 8]
	float FTUESeasonTrailerBoundary;//[Offset: 0xc1c, Size: 4]
	float VideoDurationOffsetFromTransition;//[Offset: 0xc20, Size: 4]
	float VideoDurationOffsetFromEnd;//[Offset: 0xc24, Size: 4]
	bool bEnableGCBeforeVideoPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 1]
	float EOneVideoLength;//[Offset: 0xc2c, Size: 4]
	float[] MediaCDNDistribution;//[Offset: 0xc30, Size: 16]
	int MaxNumberOfMediaDecoderResources;//[Offset: 0xc40, Size: 4]
	FString[] VideoEVMap;//[Offset: 0xc48, Size: 16]
	int LiveStreamPiPMemoryRequired;//[Offset: 0xc58, Size: 4]
	int64 ShouldShowLiveStreamPiPInMatchCounter;//[Offset: 0xc60, Size: 8]
	bool bEnableRiskyReelsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 1]
	bool bDisableBlastURLStreamSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 1]
	int StreamPlaylistFetchMethodOrder;//[Offset: 0xc6c, Size: 4]
	bool bHiddenButEnabledLiveStreamInMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	float TimedEventsJIPStartDelay;//[Offset: 0xc74, Size: 4]
	bool bEnableSplineReticulationById;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 1]
	bool bUseSingleHUDUpdatePerFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc79, Size: 1]
	int64 MinInteractionScoreForFriendToBeConsideredClose;//[Offset: 0xc80, Size: 8]
	int64 MinIntervalBetweenInviteToPartyNotificationsInSeconds;//[Offset: 0xc88, Size: 8]
	FString[] PlaylistConditionalFlags;//[Offset: 0xc90, Size: 16]
	bool bIsUserChoiceAllowedForForcedAndroidStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
	int AndroidStoreCounter;//[Offset: 0xca4, Size: 4]
	bool bHideCharacterCustomizationNullTile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 1]
	bool bEnablePlaylistRequireCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca9, Size: 1]
	bool bRequireCrossplayOptInForFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcaa, Size: 1]
	bool bUseConcurrentCrossplayPromptGuard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcab, Size: 1]
	int MaxSquadSize;//[Offset: 0xcac, Size: 4]
	int MaxPartySizeCampaign;//[Offset: 0xcb0, Size: 4]
	int MaxPartySizeAthena;//[Offset: 0xcb4, Size: 4]
	bool bShouldFollowersSendSquadMatchmakingInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 1]
	bool bAllowAthenaNavSystemForCreative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb9, Size: 1]
	bool bEnablePlayerSurveys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcba, Size: 1]
	bool bEnablePlayerStatsPrecache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbb, Size: 1]
	bool bEnableStreamingReplayViewingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 1]
	float LiveReplayDiscoverabilityDelay;//[Offset: 0xcc0, Size: 4]
	bool bSkipPlayingFortniteChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	bool bReplayBattleMapCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc5, Size: 1]
	bool bReplayKeepLocalClientEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc6, Size: 1]
	bool bReplaySampleAthenaPawnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc7, Size: 1]
	float ReplaySampleAthenaPawnTimeRate;//[Offset: 0xcc8, Size: 4]
	float ReplaySampleAthenaPawnSpaceRate;//[Offset: 0xccc, Size: 4]
	float ReplaySampleAthenaPawnUpdateTimeRate;//[Offset: 0xcd0, Size: 4]
	bool bDisablePartyJoinInOutpost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd4, Size: 1]
	<FString,int> MashSpecialScores;//[Offset: 0xcd8, Size: 80]
	bool bEnableMissedInvitesEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	bool bOnlyShowMissedInvitesEntryIfMissedInvites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd29, Size: 1]
	bool bEnableNotifyWhenPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2a, Size: 1]
	bool bEnableSubscriptionNudges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2b, Size: 1]
	bool bEnableSidekick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2c, Size: 1]
	bool bEnableSidekickFeature1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2d, Size: 1]
	bool bEnableSidekickFOMO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2e, Size: 1]
	bool bEnableSidekickAvatars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2f, Size: 1]
	bool bSidekickDisablesScreenRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	bool bSidekickEnableExitFNButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd31, Size: 1]
	bool bEnableSidekickFaceAreaInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd32, Size: 1]
	bool bSidekickDisabledByNightNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd33, Size: 1]
	bool bSidekickForcesSingleChannelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	bool bEnableCampaignBatchLevelingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35, Size: 1]
	bool bAllowSimultaneousChannelConnections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd36, Size: 1]
	bool bAllowSimultaneousChannelListening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd37, Size: 1]
	bool bExpandNotListeningChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	uint32 MaxSetFriendSubscriptionSettingsAttempts;//[Offset: 0xd3c, Size: 4]
	uint32 MaxQueryFriendSubscriptionSettingsAttempts;//[Offset: 0xd40, Size: 4]
	int NumDaysBetweenPlayingNotifications;//[Offset: 0xd44, Size: 4]
	int NumHoursBetweenPlayingNotifications;//[Offset: 0xd48, Size: 4]
	int NumMinutesBetweenPlayingNotifications;//[Offset: 0xd4c, Size: 4]
	bool bForceAutoChangeMaterialOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	bool bActiveDisplayDeviceTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd51, Size: 1]
	bool bAllowOfflineInvites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd52, Size: 1]
	bool bEnablePlatformVoiceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd53, Size: 1]
	bool bEnablePlatformVoicePrompts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
	bool bEnableVoiceChatEnablePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd55, Size: 1]
	float PlaylistGameVoiceChannelRecommendationDisplayTime;//[Offset: 0xd58, Size: 4]
	bool bEnablePlaylistGameChannelRecommendationToast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5c, Size: 1]
	bool bEnableQuickHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5d, Size: 1]
	bool bAllowDeferredPedestalPawnSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5e, Size: 1]
	bool bRunUnicornOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5f, Size: 1]
	bool bShowSamsungSensorButtonWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	int SamsungSensorButtonGamesPerWarning;//[Offset: 0xd64, Size: 4]
	FString[] CatabaExclusiveCountryCodes;//[Offset: 0xd68, Size: 16]
	bool bEnableCatabaDynamicBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 1]
	bool bUseLegacyItemShopOfferDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 1]
	bool EnableCommunityVotingScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7a, Size: 1]
	int CommunityVotingTutorialVersion;//[Offset: 0xd7c, Size: 4]
	float CommunityVotingRevealDelay;//[Offset: 0xd80, Size: 4]
	float CommunityVotingTimerRefreshDelay;//[Offset: 0xd84, Size: 4]
	bool ScrollToWinnerTileAfterReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	bool EnableStandaloneStorefront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd89, Size: 1]
	bool bEnableBattlePassStorefront;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8a, Size: 1]
	bool bEnableItemPreviewInStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8b, Size: 1]
	bool bEnableCurrencyInspectScreenBonusText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8c, Size: 1]
	bool bEnableCurrencyBonusBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8d, Size: 1]
	bool bEnableItemShopInvalidationBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8e, Size: 1]
	bool ScrollToStandaloneSectionOnPopupClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8f, Size: 1]
	enum[] ItemShopOrdering;//[Offset: 0xd90, Size: 16]
	bool bEnableItemShopSectionBangs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	bool bEnableItemShopCommunityVotingSectionBang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda1, Size: 1]
	bool bEnableItemShopLandingPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda2, Size: 1]
	AthenaItemShopSectionPriority[] ItemShopDefaultLandingPriority;//[Offset: 0xda8, Size: 16]
	AthenaItemShopSectionOverrideDisplayData[] ItemShopOverrideDisplayDataList;//[Offset: 0xdb8, Size: 16]
	enum ItemShopDefaultLanding;//[Offset: 0xdc8, Size: 1]
	float ItemShopOfferSeenThreshold;//[Offset: 0xdcc, Size: 4]
	bool CommunityVotingTileAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd0, Size: 1]
	bool ScrollToComTileOnEventPopupClosed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd1, Size: 1]
	bool EnableThanksVotingPopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd2, Size: 1]
	bool bUseItemPresentationScreenOnItemPurchased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd3, Size: 1]
	float CommunityVotingThanksPopupDelay;//[Offset: 0xdd4, Size: 4]
	bool bIgnoreABTestingForReloadMtx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	FString[] ReloadMtxExclusiveCountryCodes;//[Offset: 0xde0, Size: 16]
	bool bEnableReloadMtx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 1]
	bool bEnableDynamicReloadMtx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf1, Size: 1]
	bool bEnableInGameReloadMtx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf2, Size: 1]
	int ReloadMtxIntroVersion;//[Offset: 0xdf4, Size: 4]
	bool bEnableCrew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 1]
	bool bEnableSubscriptionInspectScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf9, Size: 1]
	bool bEnableBattlePassViolatorEarnedCurrency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfa, Size: 1]
	float InGameCosmeticItemBangRefreshRate;//[Offset: 0xdfc, Size: 4]
	bool bUseContentPatchingRestartFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe00, Size: 1]
	bool bAthenaAutoPickupStackables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe01, Size: 1]
	RuntimeOptionScheduledNotification[] ScheduledNotifications;//[Offset: 0xe08, Size: 16]
	bool bEnableUnicornHighlightsOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	bool bEnableHighlightsPromptInCompeteScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe19, Size: 1]
	bool bUseReturnToKairosLoadingScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1a, Size: 1]
	bool bForceReturnToKairosLoadingScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1b, Size: 1]
	bool bUseActivityBrowser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1c, Size: 1]
	bool bDebugForceLoginRelaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1d, Size: 1]
	bool bShouldAllowNightNightMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1e, Size: 1]
	FString NightNightModeEventName;//[Offset: 0xe20, Size: 16]
	bool bEnableDADUpdateCheckOnRTMM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 1]
	bool bShouldAllowForcedIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 1]
	FName ForcedIntroName;//[Offset: 0xe34, Size: 8]
	FName ForcedIntroPlaylistNameOverride;//[Offset: 0xe3c, Size: 8]
	bool bShowMovieInGameplayIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe44, Size: 1]
	bool bShowMovieInGameplayOutro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe45, Size: 1]
	bool bSkipSubgameSelectDuringForcedIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe46, Size: 1]
	bool bSkipToEndGameplayIntroOutroVideos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe47, Size: 1]
	bool bUseAthenaArmory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 1]
	bool bEnableLiveSpectateButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe49, Size: 1]
	bool bEnableGuidedTutorialDefensiveBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4a, Size: 1]
	bool bEnableSafeZoneEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4b, Size: 1]
	bool bEnableSavedLoadouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	bool bSavedLoadoutsUseGodTile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4d, Size: 1]
	bool bEnableSafeZoneEditorOnLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4e, Size: 1]
	bool bEnableSafeZoneEditorWhenNotInApolloIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4f, Size: 1]
	float LoginFlowCMSRefreshWaitTime;//[Offset: 0xe50, Size: 4]
	bool bEnableAppResumeCMSUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe54, Size: 1]
	bool bEnableMOTDAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe55, Size: 1]
	bool bEnableTabTransitionMOTDAnalyticsEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe56, Size: 1]
	bool bAllowStoreSkipOpenAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe57, Size: 1]
	bool bAllowInGameStore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58, Size: 1]
	bool bPostGameStoreNoLeto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe59, Size: 1]
	bool bPostGameStoreTriggerIncrementalGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5a, Size: 1]
	bool bAllowInGameLocker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5b, Size: 1]
	bool bAllowInGameCareer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5c, Size: 1]
	bool bAllowInGameActivityBrowser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5d, Size: 1]
	bool bEnableGuidedTutorialDirectFlush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5e, Size: 1]
	bool bEnableGuidedTutorialABTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5f, Size: 1]
	bool bEnableHighlightPlayButtonABTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	bool bEnableSkipGuidedTutorialABTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe61, Size: 1]
	int MaxFrontendFlowStatQueries;//[Offset: 0xe64, Size: 4]
	bool ApolloIntroShowMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe68, Size: 1]
	bool bRunDeimosSpawnTimelines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe69, Size: 1]
	int TeamToPlaceMeshNetPawnsOn;//[Offset: 0xe6c, Size: 4]
	bool bEnableAddFriendUserSearchDarkTraffic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	bool bEnableExtendedUserSearchUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe71, Size: 1]
	bool bEnableRecursiveMatchAssignmentSearchForTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe72, Size: 1]
	bool bEnableBackfillCheckForHighestTeamScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe73, Size: 1]
	bool bEnableBackfillCheckForTeamScoreDifference;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe74, Size: 1]
	<FString,int> BackfillCheckForHighestTeamScorePlaylistOverrides;//[Offset: 0xe78, Size: 80]
	<FString,float> BackfillCheckForScoreDiscrepancyPlaylistOverrides;//[Offset: 0xec8, Size: 80]
	bool bDisableTdmBackfilledPlayerTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 1]
	bool bDisableWarmupRequiredPlayerCountCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf19, Size: 1]
	bool bAIDirectorTreatBotsAsPlayersForLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1a, Size: 1]
	bool bEnablePhoenix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1b, Size: 1]
	bool bBuildingPossessionShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1c, Size: 1]
	SoftObjectPath LoadingContentModalWidget;//[Offset: 0xf20, Size: 24]
	bool bBacchusFrontendEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	FName[] InvalidCreativeItemTags;//[Offset: 0xf40, Size: 16]
	bool bEnableAFortPlayerPawnOnRep_InVehicleAndUFortVehicleSeatComponentOnRep_PlayerSlotsRaceConditionFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	FString ValkyrieMajMinPatchQueryParams;//[Offset: 0xf58, Size: 16]
	bool bSprintingStrafeSnapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	bool bExplicitSprintableInputRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf69, Size: 1]
	float MinForwardForSprint;//[Offset: 0xf6c, Size: 4]
	float MinForwardForSprintSnapping;//[Offset: 0xf70, Size: 4]
	float AccelerationStrafeMultiplierSprintOverride;//[Offset: 0xf74, Size: 4]
	float KeyboardDiagonalSprintForwardOverride;//[Offset: 0xf78, Size: 4]
	float KeyboardSprintInputWindUpTime;//[Offset: 0xf7c, Size: 4]
	float KeyboardMoveInputWindUpTime;//[Offset: 0xf80, Size: 4]
	bool bEnableWebAuthFNMobileOnClassicBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	bool bPortraitWebAuthFNMobileOnClassicBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf85, Size: 1]
	bool bBacchusFrontendLabelShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf86, Size: 1]
	int NoWeaponZoneMaxDestroyCount;//[Offset: 0xf88, Size: 4]
	float NoWeaponZoneResetDestroyCountRate;//[Offset: 0xf8c, Size: 4]
	bool bEnableServerSendPlayerInteractions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf90, Size: 1]
	float ServerSendPlayerInteractionsIntervalSeconds;//[Offset: 0xf94, Size: 4]
	bool bEnableFrontendMeshRockyRidgeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 1]
	FString FrontendMeshRockyRidgeMetadataKey;//[Offset: 0xfa0, Size: 16]
	FString FrontendMeshRockyRidgeCanaryKey;//[Offset: 0xfb0, Size: 16]
	float FrontendMeshRockyRidgeInitialIntervalSeconds;//[Offset: 0xfc0, Size: 4]
	float FrontendMeshRockyRidgeFailureMultiplier;//[Offset: 0xfc4, Size: 4]
	float FrontendMeshRockyRidgeMaxIntervalSeconds;//[Offset: 0xfc8, Size: 4]
	FName FrontendMeshRockyRidgeMeshName;//[Offset: 0xfcc, Size: 8]
	bool bForceEverybodyToGoNightNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd4, Size: 1]
	bool bQueryKeychainBeforeGoingNightNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd5, Size: 1]
	bool bAllowSubgameSelectToGoNightNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd6, Size: 1]
	bool bAllowAthenaFrontendToGoNightNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd7, Size: 1]
	bool bAllowCampaignFrontendToGoNightNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd8, Size: 1]
	class FortMissionGenerator* DefaultMissionGen;//[Offset: 0xfe0, Size: 40]
	bool bGyroV2Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 1]
	bool bFlickStickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1009, Size: 1]
	bool bEnableBacchusDialogSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100a, Size: 1]
	bool bBacchusDialogSystemSkipConfirmationStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100b, Size: 1]
	bool bMobileDisableResolutionReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100c, Size: 1]
	bool bMotionAxisMobileDefaultToYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100d, Size: 1]
	bool ShouldShowNewMOTD(const Widget* ContextWidget);// 0xd1c6e24
	bool ShouldShowLeaderboardPrivacySettings();// 0xd1c6e08
	void SetEnableMainMenuSocialButton(bool NewValue);// 0xd1c6d5c
	static bool IsSitoutOptionEnabled();// 0xd1c6d24
	bool IsShippingBuild();// 0xd1c6cec
	static bool IsPartyInProgressEnabled();// 0xd1c6cb4
	bool IsMatchmakingKnobVisible(FString KnobName);// 0xd1c6bf4
	bool IsMatchmakingKnobEnabled(FString KnobName);// 0xd1c6b34
	bool IsInviteUIDisabled();// 0xd1c6b18
	bool IsGiftingDisabled();// 0xd1c6ae0
	bool IsGameplayMessageEnabled(out const FName MessageOwnerClassName, out const FName MessageName);// 0xd1c69c8
	FString[] GetValidAffiliateNames();// 0xd1c69a8
	bool GetShowReplayTrailerButton_Athena();// 0xd1c698c
	static FortRuntimeOptions* GetRuntimeOptions();// 0xb6be2b4
	bool GetRebootShowInInventory();// 0xd1c6970
	float GetRebootDirectiveDisplayTime();// 0xd1c6954
	float GetRebootChipExpirationTime();// 0xd1c6938
	FText GetOverrideBonusEventXpTitleText();// 0xd1c6868
	int GetNumGameplayMessageChannels();// 0xd1c6834
	FString GetLobbyGenericLinkButtonURL();// 0xd1c6760
	FText GetLobbyGenericLinkButtonOverrideText();// 0xd1c6690
	bool GetIsFriendLinkEnabled();// 0xd1c6674
	bool GetIsDonutIdleGameEnabled();// 0xd1c6658
	GameplayTagContainer GetInvalidCreativeItemTags(out const GameplayTagContainer AdditionalInvalidCreativeItemTags);// 0xd1c655c
	float GetHPMicrophoneToastDisplaySeconds();// 0xd1c6540
	FString GetGameVersion();// 0xd1c649c
	void GetExternalNewsURL(enum CurrentMode, out bool bHasValidExternalURL, out FString ExternalURL, out enum ButtonMode);// 0xd1c62f4
	bool GetEnableSplitWalletTextNotice();// 0xd1c62d8
	bool GetEnableNotifyWhenPlaying();// 0xd1c62bc
	bool GetEnableMainMenuSocialButton();// 0xd1c62a0
	bool GetEnableLobbyGenericLinkButton();// 0xd1c6284
	bool GetEnableLFG();// 0xd1c6268
	float GetEliminationMarkerTTL();// 0xd1c624c
	bool GetDisablePurchaseHistoryScreen();// 0xd1c6230
	RuntimeOptionTabStateInfo[] GetDisabledFrontendNavigationTabs();// 0xd1c61d8
	float GetDelayGiftButtonWhenMFANotEnabledSeconds();// 0xd1c61a4
	bool AllowInGameMatchmakingOnPlaylist(const FortPlaylistAthena* PlaylistAthena);// 0xd1c60f0
	bool AllowInGameMatchmaking(Object* WorldContextObject);// 0xd1c603c

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: CreativeBetaPermission
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 16]
	FString[] PermissionTagContainer;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ExperimentalCohortPercent
	int ExperimentNum;//[Offset: 0x0, Size: 4]
	int CohortPercent;//[Offset: 0x4, Size: 4]
	FString Name;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RuntimeOptionSpectateAPartyMemberOverride
	FName PropertyName;//[Offset: 0x0, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RuntimeOptionLocalizableString
	RuntimeOptionLocalizableStringEntry[] Entries;//[Offset: 0x0, Size: 16]

--------------------------------
Class: RuntimeOptionLocalizableStringEntry
	FString Culture;//[Offset: 0x0, Size: 16]
	FString Text;//[Offset: 0x10, Size: 16]

--------------------------------
Class: RuntimeOptionReviewPromptCriteria
	int MinutesPlayed;//[Offset: 0x0, Size: 4]
	int GamesPlayed;//[Offset: 0x4, Size: 4]
	int BestResult;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	bool RequireAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: RuntimeOptionTabStateInfo
	FName TabName;//[Offset: 0x0, Size: 8]
	enum TabState;//[Offset: 0x8, Size: 1]
	enum TargetPlayer;//[Offset: 0x9, Size: 1]

--------------------------------
Class: RuntimeOptionDisabledGameplayMessage
	FName MessageOwnerClassName;//[Offset: 0x0, Size: 8]
	FName MessageName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: RuntimeOptionTournamentScoreThreshold
	int StartingPlacement;//[Offset: 0x0, Size: 4]
	int PointsIncrement;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerMarkerConfig
	float DoubleClickTime;//[Offset: 0x0, Size: 4]
	bool bShowMarkerDetailsWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bCreateMarkerActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bCreateMarkerWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bClampEnemyMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bClampItemMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bShowLocationMarkersOnCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int LocalPlaceableMarkersPerRate;//[Offset: 0xc, Size: 4]
	float LocalPlaceableMarkersRechargeRate;//[Offset: 0x10, Size: 4]
	int RemotePlayableMarkerSoundsPerRate;//[Offset: 0x14, Size: 4]
	int RemotePlayableMarkerSoundsRechargeRate;//[Offset: 0x18, Size: 4]
	int RemotePlayableMarkerSoundsByPlayerIDPerRate;//[Offset: 0x1c, Size: 4]
	int RemotePlayableMarkerSoundsByPlayerIDRechargeRate;//[Offset: 0x20, Size: 4]
	int RemotePlayableMarkerSoundsByPlayerIDRechargeRateCap;//[Offset: 0x24, Size: 4]
	bool EnableDoubleClickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool EnableItemMarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool EnableInteractionMarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float ScreenPercentageDistanceToShowMarkerInfo;//[Offset: 0x2c, Size: 4]
	float EnemyMarkerTLL;//[Offset: 0x30, Size: 4]
	float ItemMarkerTTL;//[Offset: 0x34, Size: 4]
	float SpecialServerMarkerTTL;//[Offset: 0x38, Size: 4]
	float EliminationMarkerTTL;//[Offset: 0x3c, Size: 4]
	float SelfEliminationMarkerTTL;//[Offset: 0x40, Size: 4]
	int MaxItemMarkers;//[Offset: 0x44, Size: 4]
	int MaxEnemyMarkers;//[Offset: 0x48, Size: 4]
	int MaxEliminationMarkers;//[Offset: 0x4c, Size: 4]
	int MaxSpecialLocalMarkers;//[Offset: 0x50, Size: 4]
	int MaxSpecialServerMarkers;//[Offset: 0x54, Size: 4]

--------------------------------
Class: FortPlaylistCuratedContent
	FString[] CuratedLinkCodes;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AthenaItemShopSectionPriority
	enum Section;//[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AthenaItemShopSectionOverrideDisplayData
	enum Section;//[Offset: 0x0, Size: 1]
	bool bHideTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bNoSectionTab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: RuntimeOptionScheduledNotification
	DateTime FireDateTime;//[Offset: 0x0, Size: 8]
	bool LocalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	RuntimeOptionLocalizableString Title;//[Offset: 0x10, Size: 16]
	RuntimeOptionLocalizableString Body;//[Offset: 0x20, Size: 16]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 4]
	int WindowPosX;//[Offset: 0x90, Size: 4]
	int WindowPosY;//[Offset: 0x94, Size: 4]
	int FullscreenMode;//[Offset: 0x98, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 4]
	uint32 Version;//[Offset: 0xa4, Size: 4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 16]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 16]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 4]
	MulticastInlineDelegateProperty OnGameUserSettingsUINeedsUpdate;//[Size: 16]
	void ValidateSettings();// 0xd8238d0
	bool SupportsHDRDisplayOutput();// 0xd823890
	void SetVSyncEnabled(bool bEnable);// 0xd8237e0
	void SetVisualEffectQuality(int Value);// 0xd823738
	void SetViewDistanceQuality(int Value);// 0xd823690
	void SetToDefaults();// 0xd823674
	void SetTextureQuality(int Value);// 0xd8235cc
	void SetShadowQuality(int Value);// 0xd823524
	void SetShadingQuality(int Value);// 0xd82347c
	void SetScreenResolution(IntPoint Resolution);// 0xd8233d8
	void SetResolutionScaleValueEx(float NewScaleValue);// 0xd823330
	void SetResolutionScaleValue(int NewScaleValue);// 0xd823288
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0xd8231e0
	void SetPostProcessingQuality(int Value);// 0xd823138
	void SetOverallScalabilityLevel(int Value);// 0xd823088
	void SetFullscreenMode(byte InFullscreenMode);// 0xd822fe0
	void SetFrameRateLimit(float NewLimit);// 0xd822f38
	void SetFoliageQuality(int Value);// 0xd822e90
	void SetDynamicResolutionEnabled(bool bEnable);// 0xd822de0
	void SetBenchmarkFallbackValues();// 0xd822dcc
	void SetAudioQualityLevel(int QualityLevel);// 0xd822d24
	void SetAntiAliasingQuality(int Value);// 0xd822c7c
	void SaveSettings();// 0xd822c60
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0xd822b34
	void RevertVideoMode();// 0xd822b20
	void ResetToCurrentSettings();// 0xd822b04
	void LoadSettings(bool bForceReload);// 0xd822a4c
	bool IsVSyncEnabled();// 0xd822a14
	bool IsVSyncDirty();// 0xd8229dc
	bool IsScreenResolutionDirty();// 0xd8229a4
	bool IsHDREnabled();// 0xd82296c
	bool IsFullscreenModeDirty();// 0xd822934
	bool IsDynamicResolutionEnabled();// 0xd8228fc
	bool IsDynamicResolutionDirty();// 0xd8228c4
	bool IsDirty();// 0xd822884
	int GetVisualEffectQuality();// 0xb9fe214
	int GetViewDistanceQuality();// 0xd822850
	int GetTextureQuality();// 0xd82281c
	static int GetSyncInterval();// 0xd8227e8
	int GetShadowQuality();// 0xb9fe1e0
	int GetShadingQuality();// 0xd8227b4
	IntPoint GetScreenResolution();// 0xd82277c
	float GetResolutionScaleNormalized();// 0xd822748
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0xd82259c
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0xd8223f0
	float GetRecommendedResolutionScale();// 0xd8223b4
	byte GetPreferredFullscreenMode();// 0xd822380
	int GetPostProcessingQuality();// 0xd82234c
	int GetOverallScalabilityLevel();// 0xd822310
	IntPoint GetLastConfirmedScreenResolution();// 0xd8222d8
	byte GetLastConfirmedFullscreenMode();// 0xd8222a4
	static GameUserSettings* GetGameUserSettings();// 0xb9fe1ac
	byte GetFullscreenMode();// 0xd822270
	float GetFrameRateLimit();// 0xd82223c
	static int GetFramePace();// 0xd822208
	int GetFoliageQuality();// 0xd8221d4
	IntPoint GetDesktopResolution();// 0xd82219c
	static IntPoint GetDefaultWindowPosition();// 0xd822164
	static byte GetDefaultWindowMode();// 0xd822130
	float GetDefaultResolutionScale();// 0xd8220f4
	static IntPoint GetDefaultResolution();// 0xd8220bc
	int GetCurrentHDRDisplayNits();// 0xd822088
	int GetAudioQualityLevel();// 0xd82206c
	int GetAntiAliasingQuality();// 0xd822038
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0xd821f48
	void ConfirmVideoMode();// 0xd821f2c
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0xd821e74
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0xd821dc4
	void ApplyNonResolutionSettings();// 0xd821da8
	void ApplyHardwareBenchmarkResults();// 0xd821d8c

--------------------------------
Class: FortGameUserSettings.GameUserSettings.Object
	float MouseSensitivity;//[Offset: 0x120, Size: 4]
	int FortVersion;//[Offset: 0x124, Size: 4]
	bool UnlockConsoleFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool LastAppliedUnlockConsoleFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	FString CurrentFpsModeString;//[Offset: 0x148, Size: 16]
	FString CurrentDeviceProfileOverrideSuffix;//[Offset: 0x158, Size: 16]
	int SubGameSelectCount_Athena;//[Offset: 0x168, Size: 4]
	DateTime SubGameLastSelectedTime_Athena;//[Offset: 0x170, Size: 8]
	int SubGameSelectCount_Campaign;//[Offset: 0x178, Size: 4]
	DateTime SubGameLastSelectedTime_Campaign;//[Offset: 0x180, Size: 8]
	DateTime LastTimeSettingsSnapshotUploaded;//[Offset: 0x188, Size: 8]
	DateTime FirstLoginOnDevice;//[Offset: 0x190, Size: 8]
	float SafeZone;//[Offset: 0x198, Size: 4]
	bool bIsSafeZoneSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	int CachedPlayerLevel;//[Offset: 0x1a0, Size: 4]
	bool bShowCareerTabBang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	FString CustomVoiceChatInputDevice;//[Offset: 0x1a8, Size: 16]
	FString CustomVoiceChatOutputDevice;//[Offset: 0x1b8, Size: 16]
	FString CustomVoiceChatInputDeviceId;//[Offset: 0x1c8, Size: 16]
	FString CustomVoiceChatOutputDeviceId;//[Offset: 0x1d8, Size: 16]
	bool bMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bShowGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	bool bShowFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 1]
	bool bUseGPUCrashDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb, Size: 1]
	int UserRenderingAPI;//[Offset: 0x1ec, Size: 4]
	bool bLatencyTweak1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	int LatencyTweak2;//[Offset: 0x1f4, Size: 4]
	bool bLatencyFlash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	int DLSSQuality;//[Offset: 0x1fc, Size: 4]
	bool bRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool RayTracingShadowsQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	int RayTracingReflectionsQuality;//[Offset: 0x204, Size: 4]
	bool RayTracingAmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	int RayTracingAOQuality;//[Offset: 0x20c, Size: 4]
	int RayTracingGIQuality;//[Offset: 0x210, Size: 4]
	bool b120FpsMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	float DisplayGamma;//[Offset: 0x218, Size: 4]
	float UserInterfaceContrast;//[Offset: 0x220, Size: 4]
	<FName,DateTime> NamedTimes;//[Offset: 0x228, Size: 80]
	<FName,int> NamedCounts;//[Offset: 0x278, Size: 80]
	int BattlePassOverrideTracker;//[Offset: 0x2c8, Size: 4]
	bool bHasSeenDonutShopSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float DonutIdleGameHighScore;//[Offset: 0x2d0, Size: 4]
	<FName,SavedShopSectionState> LastSeenShopSectionStateBySectionId;//[Offset: 0x2d8, Size: 80]
	<FName,SavedShopSectionState> LastReceivedShopSectionStateBySectionId;//[Offset: 0x328, Size: 80]
	PlaylistData LastSelectedPlaylist;//[Offset: 0x378, Size: 56]
	bool LastSelectedFillOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	<FName,SavedCustomMatchOptions> CustomMatchOptions;//[Offset: 0x3b8, Size: 80]
	<FName,int> CreativeOptions;//[Offset: 0x408, Size: 80]
	bool bHasSeenCreativePhoneTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bHasSeenCreativeHeatmapTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	int CreativeOptionLastUsedCategory;//[Offset: 0x45c, Size: 4]
	int CreativeOptionLastUsedIndexInCategory;//[Offset: 0x460, Size: 4]
	FortPortalOriginInfo LastPortalOrigin;//[Offset: 0x468, Size: 24]
	FString LastNewsVersionViewedBR;//[Offset: 0x480, Size: 16]
	FString LastNewsVersionViewedCreative;//[Offset: 0x490, Size: 16]
	FString LastNewsVersionViewedSTW;//[Offset: 0x4a0, Size: 16]
	FString LastPRMEtag;//[Offset: 0x4b0, Size: 16]
	FString LastPlaylistInfoVersionViewedBR;//[Offset: 0x4c0, Size: 16]
	FString LastFrontEndBackPlateStageUsed;//[Offset: 0x4d0, Size: 16]
	bool bEulaAccepted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	FString EulaAcceptedUserId;//[Offset: 0x4f8, Size: 16]
	DateTime LastEulaCheckTime;//[Offset: 0x508, Size: 8]
	HUDLayoutData HUDLayoutData;//[Offset: 0x510, Size: 16]
	FortMobileHUDProfileIdentifier ActiveHUDProfileIdentifier;//[Offset: 0x540, Size: 24]
	int bTimesSeenBacchusLoadTutorial;//[Offset: 0x558, Size: 4]
	bool bHasSeenTapToShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	int NumTimesSeeingPanningTip;//[Offset: 0x560, Size: 4]
	FireModeData FireModeData;//[Offset: 0x564, Size: 5]
	FortSimpleGameStats SimpleMobileStats;//[Offset: 0x570, Size: 32]
	bool bDesiredHeadphoneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	FString AudioOutputDeviceId;//[Offset: 0x598, Size: 16]
	bool bUseHeadphoneMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	int InitialBenchmarkState;//[Offset: 0x5ac, Size: 4]
	bool bDisableMouseAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	enum ChosenLoginType;//[Offset: 0x5b1, Size: 1]
	MulticastInlineDelegateProperty OnViewDistanceQualityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnShadowQualityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnAntiAliasingQualityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnTextureQualityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnEffectsQualityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPostProcessQualityChanged;//[Size: 16]
	SavedCredentials[] Credentials;//[Offset: 0x680, Size: 16]
	int SocialImportOptedOutVersion;//[Offset: 0x690, Size: 4]
	int VKImportOptedOutVersion;//[Offset: 0x694, Size: 4]
	bool bHasSeenErebusSocialImport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	bool bHasSeenFriendImportToast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	DateTime LastSocialImportPromptTime;//[Offset: 0x6a0, Size: 8]
	bool bAutoImportFriendEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool bSeenLetoSellModal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	int SocialImportPromptCountCurrentVersion;//[Offset: 0x6ac, Size: 4]
	int SocialImportPromptCountAllVersions;//[Offset: 0x6b0, Size: 4]
	int VKImportPromptCountCurrentVersion;//[Offset: 0x6b4, Size: 4]
	int VKImportPromptCountAllVersions;//[Offset: 0x6b8, Size: 4]
	bool bSocialImportDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	bool bAccountItemWarningShownThisLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	DateTime LastAccountItemWarningTime;//[Offset: 0x6c0, Size: 8]
	bool bMultiFactorAuthModalOpOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	DateTime LastEnableMFAModalPromptTime;//[Offset: 0x6d0, Size: 8]
	DateTime LastVKImportPromptTime;//[Offset: 0x6d8, Size: 8]
	DateTime LastAffiliateToastTime;//[Offset: 0x6e0, Size: 8]
	<FString,DateTime> FailedInviteMap;//[Offset: 0x6e8, Size: 80]
	int MobileRecommendationDismissedVersion;//[Offset: 0x738, Size: 4]
	enum ShowLiveStreamPictureInPictureInMatchV2;//[Offset: 0x73c, Size: 1]
	int64 CurrentLivePiPStreamOverrideCounter;//[Offset: 0x740, Size: 8]
	FString SelectedFrontEnd;//[Offset: 0x748, Size: 16]
	bool bNeverShowMobileLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	bool bHasShownMobileLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 1]
	bool bDesiredAllowLowPowerMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75b, Size: 1]
	MulticastInlineDelegateProperty OnAllowVideoPlaybackChanged;//[Size: 16]
	bool bDesiredAllowMultithreadedRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bHasMigratedDownloadSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool bSendAppsFlyerEventOnInstallation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	bool bAllowFullGameDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x773, Size: 1]
	bool bAllowFullGameDownloadOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 1]
	bool bAllowElectraPlayerDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x775, Size: 1]
	bool bAllowElectraPlayerDownloadOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x776, Size: 1]
	bool bAllowCellularDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x777, Size: 1]
	bool bResumeUserCanceledOrPausedDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	bool bForceNoPatchingForDownloads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791, Size: 1]
	bool bAutoLaunchFullGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x792, Size: 1]
	bool bAllowDownloadHighResMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x793, Size: 1]
	bool bAllowLowPowerMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool bAllowVideoPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 1]
	bool bAllowMultithreadedRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ea, Size: 1]
	enum MobileFPSMode;//[Offset: 0x7eb, Size: 1]
	FString MobileQualitySettingsResetDefaultsGUID;//[Offset: 0x900, Size: 16]
	bool bHasSeenSamsungPressureSensorWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool bNeverDisplaySamsungPressureSensorWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	bool bHasRecentlySeenBadMatchPopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 1]
	int MatchesSinceLastBadMatchPopup;//[Offset: 0x914, Size: 4]
	bool bHasAlreadyRatedOnGooglePlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 1]
	int DaysToSnoozeBeforeNextGooglePlayRating;//[Offset: 0x91c, Size: 4]
	int GooglePlayRatingDelayedOccurences;//[Offset: 0x920, Size: 4]
	bool bShowTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	DateTime LastGameStartNotificationSentTime;//[Offset: 0x928, Size: 8]
	int[] ScheduledNotifications;//[Offset: 0x930, Size: 16]
	int LastYearForcedDisplayWinterfestInfoButton;//[Offset: 0x940, Size: 4]
	RecentPlayerEncounterSerialized[] RecentPlayerEncounters;//[Offset: 0x948, Size: 16]
	bool bHasSeenSidekickWelcomePopup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 1]
	void ToggleScalabilityMode(enum Mode, bool bEnabled, bool bForceApply);// 0xd01f660
	void SetUserInterfaceContrast(float InContrast);// 0xd01f5b8
	void SetUseLatencyTweak2(int InLatencyTweak2);// 0xd01f510
	void SetUseLatencyTweak1(bool bEnabled);// 0xd01f460
	void SetUseLatencyFlash(bool bEnabled);// 0xd01f3b0
	void SetUseGPUCrashDebugging(bool bEnabled);// 0xd01f300
	void SetShowTemperature(bool bNewValue);// 0xd01f250
	void SetShowCareerTabBang(bool Value);// 0xd01f1a4
	void SetSafeZone(float Value);// 0xd01f100
	void SetResolutionFraction(float ResolutionFraction);// 0xd01f058
	void SetRenderingAPI(int InRenderingAPI);// 0xd01efb0
	void SetRayTracingShadowsQuality(bool InRayTracingShadowsQuality);// 0xd01ef00
	void SetRayTracingReflectionsQuality(int InRayTracingReflectionsQuality);// 0xd01ee58
	void SetRayTracingGIQuality(int InRayTracingGIQuality);// 0xd01edb0
	void SetRayTracingEnabled(bool bEnable);// 0xd01ed00
	void SetRayTracingAmbientOcclusionQuality(int InRayTracingAmbientOcclusionQuality);// 0xd01ec58
	void SetMobileFPSMode(const enum Mode);// 0xd01ebb0
	void SetMeshQuality(int Value);// 0xd01eb08
	void SetLastSelectedFillOption(bool FillOption);// 0xd01ea58
	void SetHasSeenTapToShoot(bool bHasSeenIt);// 0xd01e9a8
	void SetHasSeenPanningTip(bool bHasSeenIt);// 0xd01e8f8
	void SetHasSeenCreativePhoneTutorial(bool bHasSeenCreativePhoneTutorial);// 0xd01e848
	void SetHasSeenCreativeHeatmapTutorial(bool bHasSeenCreativeHeatmapTutorial);// 0xd01e798
	void SetDonutShopSequenceMarkedAsSeen(bool bHasSeen);// 0xd01e6dc
	void SetDLSSQuality(int InDLSSQuality);// 0xd01e634
	void SetDisplayGamma(float InGamma);// 0xd01e58c
	void SetCachedPlayerLevel(int Value);// 0xd01e4e8
	void SetAudioOutputDeviceId(FString InAudioOutputDeviceId);// 0xd01e434
	void ResetToDefaultDeviceScalability();// 0xd01e420
	void ResetScalabilityModes();// 0xd01e40c
	bool IsVideoPlaybackAllowed();// 0xd01e3d4
	bool IsInPerformanceMode();// 0xd01e3bc
	bool IsHeadphoneModeEnabled();// 0xd01e3a0
	bool HasRecordedStat(out const FName RecordName);// 0xd01e2e0
	float GetUserInterfaceContrast();// 0xd01e2ac
	int GetUseLatencyTweak2();// 0xd01e278
	bool GetUseLatencyTweak1();// 0xd01e240
	bool GetUseLatencyFlash();// 0xd01e208
	bool GetUseGPUCrashDebugging();// 0xd01e1d0
	bool GetShowTemperature();// 0xd01e198
	bool GetShowCareerTabBang();// 0xd01e17c
	float GetSafeZone();// 0xd01e160
	float GetResolutionFraction();// 0xd01e12c
	int GetRenderingAPI();// 0xd01e0f8
	bool GetRayTracingShadowsQuality();// 0xd01e0c0
	int GetRayTracingReflectionsQuality();// 0xd01e08c
	int GetRayTracingGIQuality();// 0xd01e058
	bool GetRayTracingEnabled();// 0xd01e020
	int GetRayTracingAmbientOcclusionQuality();// 0xd01dfec
	int GetMeshQuality();// 0xd01dfb8
	bool GetLastSelectedFillOption();// 0xd01df80
	bool GetHasSeenTapToShoot();// 0xd01df48
	bool GetHasSeenPanningTip();// 0xd01df10
	bool GetHasSeenCreativePhoneTutorial();// 0xd01ded8
	bool GetHasSeenCreativeHeatmapTutorial();// 0xd01dea0
	FireModeData GetFireModeData();// 0xd01de60
	int GetDLSSQuality();// 0xd01de2c
	bool GetDLSSEnabled();// 0xd01ddf4
	float GetDisplayGamma();// 0xd01ddc0
	int GetCachedPlayerLevel();// 0xd01dda4
	FString GetAudioOutputDeviceId();// 0xd01dcd0

--------------------------------
Class: SavedShopSectionState
	FString[] OfferIds;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PlaylistData
	FName PlaylistName;//[Offset: 0x0, Size: 8]
	FString TournamentId;//[Offset: 0x8, Size: 16]
	FString EventWindowId;//[Offset: 0x18, Size: 16]
	FString RegionId;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SavedCustomMatchOptions
	<FString,FString> CustomMatchOptions;//[Offset: 0x0, Size: 80]

--------------------------------
Class: FortPortalOriginInfo
	FName PlaylistName;//[Offset: 0x0, Size: 8]
	FString LinkCode;//[Offset: 0x8, Size: 16]

--------------------------------
Class: HUDLayoutData
	HUDLayoutDataEntry[] LayoutEntries;//[Offset: 0x0, Size: 16]

--------------------------------
Class: HUDLayoutDataEntry
	GameplayTag VisualType;//[Offset: 0x0, Size: 8]
	AnchorData AnchroData;//[Offset: 0x8, Size: 40]
	int ZOrder;//[Offset: 0x30, Size: 4]
	enum BuildVisibility;//[Offset: 0x34, Size: 1]
	enum CombatVisibility;//[Offset: 0x35, Size: 1]
	enum EditVisibility;//[Offset: 0x36, Size: 1]
	enum CreativeVisibility;//[Offset: 0x37, Size: 1]
	float Property;//[Offset: 0x38, Size: 4]
	float Property;//[Offset: 0x3c, Size: 4]
	float Property;//[Offset: 0x40, Size: 4]
	float Property;//[Offset: 0x44, Size: 4]
	<FName,float> FloatProperties;//[Offset: 0x48, Size: 80]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortMobileHUDProfileIdentifier
	GameplayTag HUDProfileType;//[Offset: 0x0, Size: 8]
	GUID GUID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FireModeData
	bool bAutoFireIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool b3DTouchEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bTapToShootEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bAlwaysShowDedicatedButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	enum FireModeType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FortSimpleGameStats
	int GamesPlayed;//[Offset: 0x0, Size: 4]
	int SecondsPlayed;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int BestResult;//[Offset: 0xc, Size: 4]
	DateTime LastReviewPromptDay;//[Offset: 0x10, Size: 8]
	int CampaignGamesPlayed;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SavedCredentials
	enum Type;//[Offset: 0x0, Size: 1]
	FString ID;//[Offset: 0x8, Size: 16]
	FString Token;//[Offset: 0x18, Size: 16]

--------------------------------
Class: RecentPlayerEncounterSerialized.RecentPlayerEncounter
	UniqueNetIdRepl LocalUserId;//[Offset: 0x40, Size: 40]

--------------------------------
Class: RecentPlayerEncounter
	UniqueNetIdRepl UserId;//[Offset: 0x0, Size: 40]
	DateTime EncounterTime;//[Offset: 0x28, Size: 8]

--------------------------------
Class: BP_VideoMeshTrigger_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	MeshNetworkComponent* MeshNetwork;//[Offset: 0x228, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 8]
	DateTime PlayUTCTime;//[Offset: 0x238, Size: 8]
	float PlayServerTimeSeconds;//[Offset: 0x240, Size: 4]
	float VideoPlayStartTime;//[Offset: 0x244, Size: 4]
	MulticastInlineDelegateProperty onReadyToPlay;//[Size: 16]
	MulticastInlineDelegateProperty onStopPlayback;//[Size: 16]
	DateTime StopUTCTime;//[Offset: 0x268, Size: 8]
	float MinutesBetweenPlays;//[Offset: 0x270, Size: 4]
	ScalableFloat MinBetweenPlays;//[Offset: 0x278, Size: 40]
	DateTime StartWarmingUTCTime;//[Offset: 0x2a0, Size: 8]
	float StartWarmingServerTimeSeconds;//[Offset: 0x2a8, Size: 4]
	MulticastInlineDelegateProperty onStartWarming;//[Size: 16]
	float VideoWarmingStartTime;//[Offset: 0x2c0, Size: 4]
	bool LoopVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	MulticastInlineDelegateProperty onEnableLoopVideo;//[Size: 16]
	MulticastInlineDelegateProperty onDisableLoopVideo;//[Size: 16]
	FString VideoUID;//[Offset: 0x2e8, Size: 16]
	FString ScreenName;//[Offset: 0x2f8, Size: 16]
	DateTime RootUtcTime;//[Offset: 0x308, Size: 8]
	MulticastInlineDelegateProperty onStopWarming;//[Size: 16]
	int MaxBandwidth;//[Offset: 0x320, Size: 4]
	MulticastInlineDelegateProperty onSetBandwidthLimit;//[Size: 16]
	MulticastInlineDelegateProperty onSeekPlayback;//[Size: 16]
	MulticastInlineDelegateProperty onSetMirrorScreen;//[Size: 16]
	MulticastInlineDelegateProperty OnStartPiP;//[Size: 16]
	bool LeaveScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	MulticastInlineDelegateProperty onForcePiP;//[Size: 16]
	DateTime PiPPlayUTCTIme;//[Offset: 0x380, Size: 8]
	float PiPPlayerServerTimeSeconds;//[Offset: 0x388, Size: 4]
	FString PiPVideoUID;//[Offset: 0x390, Size: 16]
	bool PiPEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool PiPMirrorEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	int64 PiPForceCounter;//[Offset: 0x3a8, Size: 8]
	bool PlayWithPiP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	FString CDNWeights;//[Offset: 0x3b8, Size: 16]
	MulticastInlineDelegateProperty onCDNWeights;//[Size: 16]
	bool PIPCDNDistroSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool isLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	bool IsPIPLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 1]
	int PIPVersion;//[Offset: 0x3dc, Size: 4]
	int PIPVersionOff;//[Offset: 0x3e0, Size: 4]
	bool SimpleWarming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	FString WarmingCDNWeights;//[Offset: 0x3e8, Size: 16]
	int ScreenDistance;//[Offset: 0x3f8, Size: 4]
	MulticastInlineDelegateProperty onScreenPrio;//[Size: 16]
	MeshRegionLockData_Float[] Region_VideoPlayStartTime;//[Offset: 0x410, Size: 16]
	MeshRegionLockData_DateTime[] Region_RootUtcTime;//[Offset: 0x420, Size: 16]
	MeshRegionLockData_DateTime Region_PlayUTCTime;//[Offset: 0x430, Size: 32]
	MeshRegionLockData_Float Region_PlayServerTimeSeconds;//[Offset: 0x450, Size: 24]
	MeshRegionLockData_DateTime Region_StartWarmingUTCTime;//[Offset: 0x468, Size: 32]
	MeshRegionLockData_Bool[] Region_LeaveScreen;//[Offset: 0x488, Size: 16]
	MeshRegionLockData_Bool[] Region_IsLive;//[Offset: 0x498, Size: 16]
	MeshRegionLockData_String[] Region_VideoUID;//[Offset: 0x4a8, Size: 16]
	MeshRegionLockData_Int[] Region_ScreenDistance;//[Offset: 0x4b8, Size: 16]
	MeshRegionLockData_String[] Region_WarmingCDNWeights;//[Offset: 0x4c8, Size: 16]
	MeshRegionLockData_Bool[] Region_SimpleWarming;//[Offset: 0x4d8, Size: 16]
	MeshRegionLockData_Float Region_StartWarmingServerTimeSeconds;//[Offset: 0x4e8, Size: 24]
	MeshRegionLockData_Float[] Region_VideoWarmingStartTime;//[Offset: 0x500, Size: 16]
	MeshRegionLockData_Bool Region_LoopVideo;//[Offset: 0x510, Size: 24]
	MeshRegionLockData_Int Region_MaxBandwidth;//[Offset: 0x528, Size: 24]
	MeshRegionLockData_Bool[] Region_PlaywithPiP;//[Offset: 0x540, Size: 16]
	MeshRegionLockData_Float[] Region_SeekTime;//[Offset: 0x550, Size: 16]
	MeshRegionLockData_Int[] Region_PIPVersion;//[Offset: 0x560, Size: 16]
	MeshRegionLockData_Bool[] Region_PiPMirrorEnable;//[Offset: 0x570, Size: 16]
	MeshRegionLockData_Bool[] Region_PiPEnable;//[Offset: 0x580, Size: 16]
	MeshRegionLockData_Bool[] Region_IsPIPLive;//[Offset: 0x590, Size: 16]
	MeshRegionLockData_DateTime Region_PiPPlayUTCTime;//[Offset: 0x5a0, Size: 32]
	MeshRegionLockData_Int64[] Region_PiPForceCounter;//[Offset: 0x5c0, Size: 16]
	MeshRegionLockData_Bool[] Region_PIPCDNDistroSet;//[Offset: 0x5d0, Size: 16]
	MeshRegionLockData_String[] Region_CDNWeights;//[Offset: 0x5e0, Size: 16]
	MeshRegionLockData_Float Region_PiPPlayerServerTimeSeconds;//[Offset: 0x5f0, Size: 24]
	MeshRegionLockData_String[] Region_PiPVideoUID;//[Offset: 0x608, Size: 16]
	MeshRegionLockData_DateTime[] Region_PlayUTCTime_GS;//[Offset: 0x618, Size: 16]
	MeshRegionLockData_DateTime[] Region_WarmingStartUTCTime_GS;//[Offset: 0x628, Size: 16]
	MeshRegionLockData_Float[] Region_PlayServerTimeSeconds_GS;//[Offset: 0x638, Size: 16]
	MeshRegionLockData_Float[] Region_StartWarmingServerTimeSeconds_GS;//[Offset: 0x648, Size: 16]
	MeshRegionLockData_Bool[] Region_LoopVideo_GS;//[Offset: 0x658, Size: 16]
	MeshRegionLockData_Int[] Region_MaxBandwidth_GS;//[Offset: 0x668, Size: 16]
	MeshRegionLockData_DateTime[] Region_PiPPlayUTCTime_GS;//[Offset: 0x678, Size: 16]
	MeshRegionLockData_Float[] Region_PiPPlayerServerTimeSeconds_GS;//[Offset: 0x688, Size: 16]
	void OnRep_Region_PiPPlayerServerTimeSeconds(MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, MeshRegionLockData_String CallFunc_MeshGetRegionValue_String_OutItem, bool CallFunc_MeshGetRegionValue_String_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue);// 0xbbc0600
	void OnRep_Region_PiPPlayUTCTime(float CallFunc_GetServerWorldTimeSeconds_ReturnValue, DateTime CallFunc_UtcNow_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float);// 0xbbc0600
	void OnRep_Region_MaxBandwidth(MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void OnRep_Region_LoopVideo(MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void OnRep_Region_StartWarmingServerTimeSeconds(float CachedServerWorldTimeSeconds, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void OnRep_Region_ScreenDistance();// 0xbbc0600
	void OnRep_Region_StartWarmingUTCTime(MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float, MeshRegionLockData_DateTime CallFunc_MeshGetRegionValue_DateTime_OutItem, bool CallFunc_MeshGetRegionValue_DateTime_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, bool CallFunc_EqualEqual_DateTimeDateTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float);// 0xbbc0600
	void OnRep_Region_PlayServerTimeSeconds(float CachedServerWorldTimeSeconds, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MeshRegionLockData_String CallFunc_MeshGetRegionValue_String_OutItem, bool CallFunc_MeshGetRegionValue_String_ReturnValue, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void OnRep_Region_PlayUTCTime(MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, bool CallFunc_EqualEqual_DateTimeDateTime_ReturnValue, DateTime CallFunc_UtcNow_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, MeshRegionLockData_Float K2Node_MakeStruct_MeshRegionLockData_Float);// 0xbbc0600
	void OnRep_ScreenDistance();// 0xbbc0600
	void PIPAlso Version(int Version, bool LIVE, FString VUID, bool Enable, FString RegionData, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MeshRegionLockData_Int CallFunc_MeshGetRegionValue_Int_OutItem, bool CallFunc_MeshGetRegionValue_Int_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void OnRep_PiPPlayerServerTimeSeconds(bool CallFunc_HasAuthority_ReturnValue);// 0xbbc0600
	void OnRep_PiPPlayUTCTIme(float CallFunc_GetServerWorldTimeSeconds_ReturnValue, DateTime CallFunc_UtcNow_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0xbbc0600
	void CheckScreen(FString ScreenName, out bool ThisScreen, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void PrintIncomingData(FString ScreenName, FString VideoUID, FString Command, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xbbc0600
	void OnRep_MaxBandwidth(bool CallFunc_HasAuthority_ReturnValue);// 0xbbc0600
	void OnRep_ScreenName();// 0xbbc0600
	void OnRep_LoopVideo(MeshRegionLockData_Bool NewLocalVar);// 0xbbc0600
	void OnRep_StartWarmingServerTimeSeconds(float CachedServerWorldTimeSeconds, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xbbc0600
	void OnRep_StartWarmingUTCTime(float CallFunc_GetServerWorldTimeSeconds_ReturnValue, bool CallFunc_EqualEqual_DateTimeDateTime_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0xbbc0600
	void OnRep_PlayServerTimeSeconds(float CachedServerWorldTimeSeconds, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xbbc0600
	void OnRep_PlayUTCTime(MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, bool CallFunc_EqualEqual_DateTimeDateTime_ReturnValue, DateTime CallFunc_UtcNow_ReturnValue, Timespan CallFunc_Subtract_DateTimeDateTime_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void RootPlayVideo(FString ScreenName, FString VideoUID, int PIP, bool LIVE, int Distance, FString RegionData);// 0xbbc0600
	void RootStopVideo(FString ScreenName, bool LeaveScreen, FString RegionData);// 0xbbc0600
	void RootStartWarming(FString ScreenName, bool Enable, bool Simple, FString CDNWeights, FString RegionData);// 0xbbc0600
	void RootEnableLoopVideo(FString ScreenName, FString RegionData);// 0xbbc0600
	void RootDisableLoopVideo(FString ScreenName, FString RegionData);// 0xbbc0600
	void RootSetMaxBW(FString ScreenName, int MaxBW, FString RegionData);// 0xbbc0600
	void RootSeekVideo(FString ScreenName, float Time, bool Exact, FString RegionData);// 0xbbc0600
	void RootSetScreenMirror(FString ScreenName, bool Enable, FString RegionData);// 0xbbc0600
	void RootStartPiP(FString ScreenName, FString VideoUID, bool Enable, bool LIVE, FString RegionData);// 0xbbc0600
	void RootForcePiP(FString ScreenName, int64 Counter, FString RegionData);// 0xbbc0600
	void RootSetCDNWeights(FString ScreenName, FString Weights, bool PIPToo, bool Clear, FString RegionData);// 0xbbc0600
	void RootSetScreenPrio(FString ScreenName, int Distance, FString RegionData);// 0xbbc0600
	void RootClearAllData(FString ScreeName);// 0xbbc0600
	void ExecuteUbergraph_BP_VideoMeshTrigger(int EntryPoint, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, DateTime CallFunc_UtcNow_ReturnValue, FString K2Node_CustomEvent_ScreenName, int K2Node_CustomEvent_Distance, FString K2Node_CustomEvent_RegionData, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_Weights, bool K2Node_CustomEvent_PIPToo, bool K2Node_CustomEvent_Clear, FString K2Node_CustomEvent_RegionData, bool CallFunc_CheckScreen_ThisScreen, DateTime CallFunc_UtcNow_ReturnValue, FString K2Node_CustomEvent_ScreenName, int64 K2Node_CustomEvent_Counter, FString K2Node_CustomEvent_RegionData, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_VideoUID, bool K2Node_CustomEvent_Enable, bool K2Node_CustomEvent_Live, FString K2Node_CustomEvent_RegionData, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_Enable, FString K2Node_CustomEvent_RegionData, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, float K2Node_CustomEvent_Time, bool K2Node_CustomEvent_Exact, FString K2Node_CustomEvent_RegionData, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, int K2Node_CustomEvent_MaxBW, FString K2Node_CustomEvent_RegionData, MeshRegionLockData_Int K2Node_MakeStruct_MeshRegionLockData_Int, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_RegionData, MeshRegionLockData_Bool K2Node_MakeStruct_MeshRegionLockData_Bool, MeshRegionLockData_Bool K2Node_MakeStruct_MeshRegionLockData_Bool, bool CallFunc_CheckScreen_ThisScreen, bool CallFunc_CheckScreen_ThisScreen, DateTime CallFunc_UtcNow_ReturnValue, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_Enable, bool K2Node_CustomEvent_Simple, FString K2Node_CustomEvent_CDNWeights, FString K2Node_CustomEvent_RegionData, FString K2Node_CustomEvent_ScreenName, bool K2Node_CustomEvent_LeaveScreen, FString K2Node_CustomEvent_RegionData, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, MeshRegionLockData_Int CallFunc_MeshGetRegionValue_Int_OutItem, bool CallFunc_MeshGetRegionValue_Int_ReturnValue, MeshRegionLockData_Bool CallFunc_MeshGetRegionValue_Bool_OutItem, bool CallFunc_MeshGetRegionValue_Bool_ReturnValue, MeshRegionLockData_Bool K2Node_MakeStruct_MeshRegionLockData_Bool, bool CallFunc_CheckScreen_ThisScreen, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, bool CallFunc_CheckScreen_ThisScreen, FString K2Node_CustomEvent_ScreenName, FString K2Node_CustomEvent_VideoUID, int K2Node_CustomEvent_PiP, bool K2Node_CustomEvent_Live, int K2Node_CustomEvent_Distance, FString K2Node_CustomEvent_RegionData, MeshRegionLockData_DateTime K2Node_MakeStruct_MeshRegionLockData_DateTime, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_CheckScreen_ThisScreen, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, MeshRegionLockData_Int CallFunc_MeshGetRegionValue_Int_OutItem, bool CallFunc_MeshGetRegionValue_Int_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanOR_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString K2Node_CustomEvent_ScreeName, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_CheckScreen_ThisScreen, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void onScreenPrio__DelegateSignature(int Distance, FString RegionData);// 0xbbc0600
	void onCDNWeights__DelegateSignature(FString Weights, FString RegionData);// 0xbbc0600
	void onForcePiP__DelegateSignature(FString Screen, int64 Counter, FString RegionData);// 0xbbc0600
	void OnStartPiP__DelegateSignature(FString ScreenName, FString VideoUID, bool Enable, bool LIVE, FString RegionData);// 0xbbc0600
	void onSetMirrorScreen__DelegateSignature(FString ScreenName, bool Enable, FString RegionData);// 0xbbc0600
	void onSeekPlayback__DelegateSignature(FString ScreenName, float SeekTime, bool Exact, FString RegionData);// 0xbbc0600
	void onSetBandwidthLimit__DelegateSignature(FString ScreenName, int MaxBW, FString RegionData);// 0xbbc0600
	void onStopWarming__DelegateSignature(FString VideoScreen, bool SimpleWarming, FString RegionData);// 0xbbc0600
	void onDisableLoopVideo__DelegateSignature(FString ScreenName, FString RegionData);// 0xbbc0600
	void onEnableLoopVideo__DelegateSignature(FString ScreenName, FString RegionData);// 0xbbc0600
	void onStartWarming__DelegateSignature(float StartWarmingTime, FString ScreenName, bool SimpleWarming, FString RegionData);// 0xbbc0600
	void onStopPlayback__DelegateSignature(FString VideoScreen, bool LeaveScreen, FString RegionData);// 0xbbc0600
	void onReadyToPlay__DelegateSignature(float PlayStartTime, FString VideoUID, FString ScreenName, bool LIVE, FString RegionData);// 0xbbc0600

--------------------------------
Class: MeshNetworkComponent.ActorComponent.Object
	enum MeshRelevancy;//[Offset: 0xb0, Size: 1]
	<FName,double> AggregationTimeouts;//[Offset: 0xb8, Size: 80]
	<FName> NoAggregationFunctions;//[Offset: 0x108, Size: 80]
	<FName,NoAggregationParameters> NoAggregationParameters;//[Offset: 0x158, Size: 80]
	<FString,AggregatedFunction> AggregatedFunctions;//[Offset: 0x1a8, Size: 80]
	enum GetMeshNetworkNodeType();// 0x7ffb490

--------------------------------
Class: NoAggregationParameters
	<FName> Parameters;//[Offset: 0x0, Size: 80]

--------------------------------
Class: AggregatedFunction
	Function* Function;//[Offset: 0x0, Size: 8]

--------------------------------
Class: MeshNetworkSubsystem.GameInstanceSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty OnMeshNodeTypeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnConnectedToRootChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnGameServerNodeTypeChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnMeshMetaDataUpdated;//[Size: 16]
	MulticastInlineDelegateProperty OnMeshPlayerRequested;//[Size: 16]
	enum NodeType;//[Offset: 0xb0, Size: 1]
	enum GameServerNodeType;//[Offset: 0xb1, Size: 1]
	bool bConnectedToRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	bool bMetadataReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 1]
	void SetMetaDataWithKey(FName Key, out const MeshMetaDataStruct MetaData);// 0x7ffc494
	void SetMetaData(out const MeshMetaDataStruct MetaData);// 0x7ffb8f4
	bool GetMetaDataWithKey(FName Key, out MeshMetaDataStruct MetaData);// 0x7ffc038
	void GetMetaData(out MeshMetaDataStruct MetaData);// 0x7ffb844
	enum GetMeshNetworkNodeType();// 0x7ffba10
	enum GetGameServerNodeType();// 0x7ffb9dc
	bool GetConnectedToRoot();// 0x7ffb9a4
	void EnableMeshReplication(Actor* Actor, class MeshNetworkComponent MeshComponentClass);// 0x7ffb754
	void DisableMeshReplication(Actor* Actor);// 0x7ffb6ac

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: MeshMetaDataStruct

--------------------------------
Class: FortMediaSubtitlesPlayer.Object
	Overlays* SourceSubtitles;//[Offset: 0x30, Size: 8]
	void Stop();// 0x8929fa4
	void SetSubtitles(Overlays* Subtitles);// 0x8929efc
	void Play();// 0x8929fb8
	void BindToMediaPlayer(MediaPlayer* InMediaPlayer);// 0x8929e54

--------------------------------
Class: BP_Galileo_VideoPreBuffer_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 8]
	int64 CurrentPiPCounter;//[Offset: 0x230, Size: 8]
	bool CurrentHiddenPiPHF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	bool CurrentPiPLiveByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 1]
	bool CurrentLiveStreamInMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 1]
	int64 CounterBuffer;//[Offset: 0x240, Size: 8]
	float tmp;//[Offset: 0x248, Size: 4]
	void ReceiveBeginPlay();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ExecuteUbergraph_BP_Galileo_VideoPreBuffer(int EntryPoint, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, byte K2Node_Event_EndPlayReason, FortRuntimeOptions* CallFunc_GetRuntimeOptions_ReturnValue, int64 CallFunc_RandomInteger64InRange_ReturnValue, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, MeshNetworkSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, enum CallFunc_GetMeshNetworkNodeType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_Int64Int64_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortMediaPlayerCtrl.Object
	MediaPlayer* MediaPlayer;//[Offset: 0x30, Size: 8]
	FortStreamMediaSource* MediaSource;//[Offset: 0x38, Size: 8]
	float InitialBufferDurationInSeconds;//[Offset: 0x40, Size: 4]
	float SegmentBufferDurationInSeconds;//[Offset: 0x44, Size: 4]
	void SetPlayerStartTime(float InRequestSentTime);// 0xd0ae414
	bool Play();// 0xd0ae3dc
	bool OpenSourceWithOptions(MediaSource* InMediaSource, out const MediaPlayerOptions InOptions);// 0xd0ae2c0

--------------------------------
Class: MediaCDNWarmer_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 8]
	FortMediaCDNWarmer* Warmer;//[Offset: 0x230, Size: 8]
	float tmp;//[Offset: 0x238, Size: 4]
	FString CDNWeights;//[Offset: 0x240, Size: 16]
	void ReceiveBeginPlay();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ExecuteUbergraph_MediaCDNWarmer(int EntryPoint, FString[] CallFunc_ParseIntoArray_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue, FortMediaCDNWarmer* CallFunc_SpawnObject_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsEmpty_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortMediaCDNWarmer.Object
	float[] CDNDistribution;//[Offset: 0x28, Size: 16]
	bool bAutoClearCDNDistribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bWarmLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	void Stop();// 0xd0ae1b4
	void Start();// 0xd0ae1a0

--------------------------------
Class: FortAsyncAction_MeshNetworkReady.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnReady;//[Size: 16]
	static FortAsyncAction_MeshNetworkReady* MeshNetworkReadyAsync(Object* WorldContextObject);// 0xcec587c
	void HandleMeshNetworkTypeSet(enum NodeType);// 0xcec57d4

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xb9ee918

--------------------------------
Class: BP_DisplayShadowProxy_01_C.FortSkydivingShadowProxy.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240, Size: 8]
	InstancedStaticMeshComponent* InstancedStaticMesh;//[Offset: 0x248, Size: 8]
	FakeShadowData InstanceData;//[Offset: 0x250, Size: 16]
	void UpdateInstances(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Transform CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_AddInstanceWorldSpace_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void UserConstructionScript();// 0xbbc0600
	void disablefakeshadows();// 0xbbc0600
	void enablefakeshadows();// 0xbbc0600
	void HideShadowProxy();// 0xbbc0600
	void ShowShadowProxy();// 0xbbc0600
	void Clear ();// 0xbbc0600
	void ExecuteUbergraph_BP_DisplayShadowProxy_01(int EntryPoint);// 0xbbc0600

--------------------------------
Class: FortSkydivingShadowProxy.Actor.Object
	float SkydivingHeightThreshold;//[Offset: 0x220, Size: 4]
	float SkydivingHeightCheckInterval;//[Offset: 0x224, Size: 4]
	bool bDestroyOnHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	FortPlayerController* ViewingPlayerController;//[Offset: 0x230, Size: 8]
	void ShowShadowProxy();// 0xbbc0600
	void HideShadowProxy();// 0xbbc0600
	void CheckHeight();// 0xd1d093c

--------------------------------
Class: FakeShadowData
	Transform[] Transforms_3_E1CCE90049DFF424189A74B8718EB117;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortStaticMeshActor.StaticMeshActor.Actor.Object
	int LinkCompCount;//[Offset: 0x238, Size: 4]
	bool bUseAutoNavmeshFlags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	GUID SavedActorGuid;//[Offset: 0x240, Size: 16]

--------------------------------
Class: BP_SetupNamedPoiColors_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 8]
	SlateFontInfo SnowPoiFont;//[Offset: 0x230, Size: 88]
	FortGameStateAthena* BRGameState;//[Offset: 0x288, Size: 8]
	LinearColor GoldenPoiFontColor;//[Offset: 0x290, Size: 16]
	SlateFontInfo GoldenPoiFont;//[Offset: 0x2a0, Size: 88]
	LinearColor SnowPoiFontColor;//[Offset: 0x2f8, Size: 16]
	LinearColor UndiscoveredPoiColor;//[Offset: 0x308, Size: 16]
	void MakeLocationsVisibleInSnow(out const GameplayTagContainer LocationTags, GameplayTag[] CallFunc_BreakGameplayTagContainer_GameplayTags, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, GameplayTag CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void OnReady_734C353B401F21D840C0A0BF8E84199F(GameStateBase* GameState);// 0xbbc0600
	void OnReady_734C353B401F21D840C0A0BF35BB4063(GameStateBase* GameState);// 0xbbc0600
	void OnReady_734C353B401F21D840C0A0BFD0A60019(GameStateBase* GameState);// 0xbbc0600
	void OnReady_48C0CAD94148AE3E93FCDD8F6267DB95();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void RefreshMapLocations();// 0xbbc0600
	void RefreshCalendar (Authority Only)();// 0xbbc0600
	void UpdateNamedPoiColorDelegate_Bind();// 0xbbc0600
	void OnCurrentPlaylistLoaded_Bind(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xbbc0600
	void ExecuteUbergraph_BP_SetupNamedPoiColors(int EntryPoint, GameStateBase* Temp_object_Variable, FortAsyncAction_GameStateReady* CallFunc_GameStateReadyAsync_ReturnValue, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* K2Node_CustomEvent_GameState, GameStateBase* Temp_object_Variable, FortAsyncAction_GameStateReady* CallFunc_GameStateReadyAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, FortAsyncAction_AuthorityMatchReady* CallFunc_MatchReadyAsync_ReturnValue, FortReplayContext* CallFunc_GetContext_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortAsyncAction_GameStateReady* CallFunc_GameStateReadyAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* Temp_object_Variable, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameStateBase* K2Node_CustomEvent_GameState, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, GameplayTagContainer CallFunc_MakeLiteralGameplayTagContainer_ReturnValue, FName K2Node_CustomEvent_PlaylistName, const GameplayTagContainer K2Node_CustomEvent_PlaylistContextTags, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* K2Node_CustomEvent_GameState, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_GetIsPlayingReplay_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600

--------------------------------
Class: FortAsyncAction_GameStateReady.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnReady;//[Size: 16]
	static FortAsyncAction_GameStateReady* GameStateReadyAsync(Object* WorldContextObject);// 0xb6162bc

--------------------------------
Class: FortAsyncAction_AuthorityMatchReady.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnReady;//[Size: 16]
	static FortAsyncAction_AuthorityMatchReady* MatchReadyAsync(Object* WorldContextObject);// 0xb615464

--------------------------------
Class: BuoyancyManager.Actor.Object
	BuoyancyComponent*[] BuoyancyComponents;//[Offset: 0x270, Size: 16]
	static bool GetBuoyancyComponentManager(const Object* WorldContextObject, out BuoyancyManager* Manager);// 0x7b31cfc

--------------------------------
Class: Athena_PlayerController_C.FortPlayerControllerAthena.FortPlayerControllerZone.FortPlayerControllerGameplay.FortPlayerController.PlayspacePlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e80, Size: 8]
	UnderwaterAudioComponent_C* UnderwaterAudioComponent;//[Offset: 0x3e88, Size: 8]
	SceneComponent* ListenerOverride;//[Offset: 0x3e90, Size: 8]
	AudioComponent* VictoryRoyaleAudio;//[Offset: 0x3e98, Size: 8]
	AudioComponent* VictoryRoyaleMusic1;//[Offset: 0x3ea0, Size: 8]
	SoundBase* CurrentMusic;//[Offset: 0x3ea8, Size: 8]
	GameplayTagContainer BladeWielderTag;//[Offset: 0x3eb0, Size: 32]
	enum InteractingItemType;//[Offset: 0x3ed0, Size: 1]
	GameplayTagContainer InteractionTags;//[Offset: 0x3ed8, Size: 32]
	MulticastInlineDelegateProperty PawnPossessedDispatcher;//[Size: 16]
	TimerHandle PermissionsRecheckTimerHandle;//[Offset: 0x3f08, Size: 8]
	float LobbyMusicOnVictoryDelayTime;//[Offset: 0x3f10, Size: 4]
	SoundMix* CamUnderwaterSoundMix;//[Offset: 0x3f18, Size: 8]
	SoundBase* CamUnderwaterLoopSound;//[Offset: 0x3f20, Size: 8]
	AudioComponent* CamUnderwaterAudio;//[Offset: 0x3f28, Size: 8]
	SoundBase* CamUnderwaterStartSound;//[Offset: 0x3f30, Size: 8]
	SoundBase* CamUnderwaterStopSound;//[Offset: 0x3f38, Size: 8]
	AudioComponent* VictoryRoyaleMusic2;//[Offset: 0x3f40, Size: 8]
	void FadeAudioComponents(AudioComponent* NewMusicComponent, AudioComponent* PreviousMusicComponent, SoundBase* Music, float StartTime, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	bool Is Creative Mode(GameStateBase* CallFunc_GetGameState_ReturnValue, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsCreativeModePlaylist_ReturnValue, bool CallFunc_IsCreativeLTMPlaylist_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void SetupPermissionRecheckTimer();// 0xbbc0600
	void LeftAllVolumes(out bool bLeftVolumes, bool InTempVolume, FortVolume*[] ContainingVolumes, int Temp_int_Array_Index_Variable, FortVolume* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FortPlayerPawn* CallFunc_GetPlayerPawn_ReturnValue, FortVolumeManager* CallFunc_GetVolumeManager_OutVolumeManager, enum CallFunc_GetVolumeManager_OutIsValid, bool CallFunc_IsDead_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_WillVolumeDeleteAfterActorSpawn_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FortVolume*[] CallFunc_GetVolumesForLocation_Volumes, bool CallFunc_GetVolumesForLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void UserConstructionScript(AthenaMarkerComponent* CallFunc_GetMarkerComponent_ReturnValue);// 0xbbc0600
	void OnLoaded_F82CC70840156DFAFAF85EB0D93E5E2D(Object* Loaded);// 0xbbc0600
	void OnReady_B4409EAB4038578B1EBA9DB1586489B9(FortGameStateAthena* GameState, const FortPlaylist* Playlist, out const GameplayTagContainer PlaylistContextTags);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void PlayWinEffects(Pawn* FinisherPawn, const FortWeaponItemDefinition* FinishingWeapon, enum DeathCause, bool bAudioOnly);// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void Start Victory Royale Music();// 0xbbc0600
	void OnMusicPackLoaded(const AthenaMusicPackItemDefinition* NewMusicPack, float StartTimeOffset);// 0xbbc0600
	void GrantItem(FortWorldItemDefinition* Item);// 0xbbc0600
	void RevokeItem(FortWorldItemDefinition* Item);// 0xbbc0600
	void OnLocalInteraction(Actor* ReceivingActor);// 0xbbc0600
	void RemoveItem();// 0xbbc0600
	void ReactToPawnPossession(Pawn* PossessedPawn);// 0xbbc0600
	void ReplicateRotationScaleReset();// 0xbbc0600
	void K2_OnLeaveVolume(FortVolume* Volume);// 0xbbc0600
	void K2_OnEnterVolume(FortVolume* Volume);// 0xbbc0600
	void Handle Victory Royale Audio(bool Audio Only);// 0xbbc0600
	void Change Music(SoundBase* New Music, float StartTime);// 0xbbc0600
	void ExecuteUbergraph_Athena_PlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, Pawn* K2Node_Event_FinisherPawn, const FortWeaponItemDefinition* K2Node_Event_FinishingWeapon, enum K2Node_Event_DeathCause, bool K2Node_Event_bAudioOnly, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, class FortWeapon CallFunc_GetWeaponActorClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, class FortWeaponRangedDual K2Node_ClassDynamicCast_AsFort_Weapon_Ranged_Dual, bool K2Node_ClassDynamicCast_bSuccess, class B_Ranged_Generic_C K2Node_ClassDynamicCast_AsB_Ranged_Generic, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Event_EndPlayReason, Object* Temp_object_Variable, FortWorldItemDefinition* K2Node_DynamicCast_AsFort_World_Item_Definition, bool K2Node_DynamicCast_bSuccess, const AthenaMusicPackItemDefinition* K2Node_CustomEvent_NewMusicPack, float K2Node_CustomEvent_StartTimeOffset, GameStateBase* CallFunc_GetGameState_ReturnValue, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, bool CallFunc_IsCreativeModePlaylist_ReturnValue, SoundBase* K2Node_DynamicCast_AsSound_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LeftAllVolumes_bLeftVolumes, FortWorldItemDefinition* K2Node_CustomEvent_Item, FortWorldItemDefinition* K2Node_CustomEvent_Item, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, FortWorldItemDefinition* K2Node_DynamicCast_AsFort_World_Item_Definition, bool K2Node_DynamicCast_bSuccess, FortWorldItemDefinition* K2Node_DynamicCast_AsFort_World_Item_Definition, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValidSoftObjectReference_ReturnValue, Object* K2Node_CustomEvent_Loaded, interface class CallFunc_GiveItemToInventoryOwner_InventoryOwner_CastInput, bool CallFunc_IsValid_ReturnValue, interface class CallFunc_GiveItemToInventoryOwner_InventoryOwner_CastInput, bool CallFunc_IsValid_ReturnValue, int CallFunc_K2_RemoveItemFromPlayer_ReturnValue, Actor* K2Node_Event_ReceivingActor, FortPickup* K2Node_DynamicCast_AsFort_Pickup, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, const FortItemEntry CallFunc_GetItemEntry_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FortWorldItemDefinition* K2Node_DynamicCast_AsFort_World_Item_Definition, bool K2Node_DynamicCast_bSuccess, interface class CallFunc_HasMatchingGameplayTag_self_CastInput, bool CallFunc_HasMatchingGameplayTag_ReturnValue, interface class CallFunc_HasAnyMatchingGameplayTags_self_CastInput, bool CallFunc_HasAnyMatchingGameplayTags_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, FortMusicContext* CallFunc_GetContext_ReturnValue, Pawn* K2Node_CustomEvent_PossessedPawn, AthenaMusicPackItemDefinition* CallFunc_GetEquippedMusicPack_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortVolume* K2Node_Event_Volume, FortVolume* K2Node_Event_Volume, bool K2Node_CustomEvent_Audio_Only, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, bool CallFunc_Is_Creative_Mode_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AthenaHUDContext* CallFunc_GetContext_ReturnValue, bool Temp_bool_Variable, float CallFunc_VictoryStingerTimeUntilFadeOut_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FortMusicContext* CallFunc_GetContext_ReturnValue, FortPlayerController* CallFunc_GetFirstLocalFortPlayerController_ReturnValue, AthenaHUDContext* CallFunc_GetContext_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SoundCue* CallFunc_GetVictoryStinger_ReturnValue, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue, SoundBase* K2Node_CustomEvent_New_Music, float K2Node_CustomEvent_StartTime, FortAsyncAction_CurrentPlaylistReady* CallFunc_PlaylistDataReadyAsync_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortGameStateAthena* Temp_object_Variable, bool CallFunc_NotEqual_ObjectObject_ReturnValue, FortPlaylist* Temp_object_Variable, GameplayTagContainer Temp_struct_Variable, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, FortGameStateAthena* K2Node_CustomEvent_GameState, const FortPlaylist* K2Node_CustomEvent_Playlist, const GameplayTagContainer K2Node_CustomEvent_PlaylistContextTags, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Is_Creative_Mode_ReturnValue, bool K2Node_Select_Default, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void PawnPossessedDispatcher__DelegateSignature(Pawn* PossessedPawn);// 0xbbc0600

--------------------------------
Class: FortWeaponRangedDual.FortWeaponRanged.FortWeapon.Actor.Object
	SkeletalMeshComponentBudgeted* LeftHandWeaponMesh;//[Offset: 0x1120, Size: 8]
	AnimMontage* LeftHandFireAnimation;//[Offset: 0x1128, Size: 8]
	AnimMontage* LeftCockingAnimation;//[Offset: 0x1130, Size: 8]
	AnimMontage* LeftHandFireDownsightsAnimation;//[Offset: 0x1138, Size: 8]
	AnimMontage* LeftWeaponFireMontage;//[Offset: 0x1140, Size: 8]
	AnimMontage* LeftWeaponFireDownsightsMontage;//[Offset: 0x1148, Size: 8]
	AnimMontage* LeftWeaponCockingMontage;//[Offset: 0x1150, Size: 8]
	AnimMontage* LeftWeaponReloadMontage;//[Offset: 0x1158, Size: 8]
	MulticastInlineDelegateProperty OnHandFired;//[Size: 16]
	enum GetNextFireHand();// 0xd226728
	SkeletalMeshComponentBudgeted* GetLeftHandWeaponMesh();// 0xd22670c
	enum GetLastFireHand();// 0xd2266ec

--------------------------------
Class: B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1120, Size: 8]
	ParticleSystemComponent* Reload(Empty);//[Offset: 0x1128, Size: 8]
	StaticMeshComponent* ScopeMesh1P;//[Offset: 0x1130, Size: 8]
	ParticleSystemComponent* Muzzle(Empty);//[Offset: 0x1138, Size: 8]
	float AnimateScopePostProcess_DownSightPostProcessAmount_393D8BA5486879173797EF8C9B8D4642;//[Offset: 0x1140, Size: 4]
	byte AnimateScopePostProcess__Direction_393D8BA5486879173797EF8C9B8D4642;//[Offset: 0x1144, Size: 1]
	TimelineComponent* AnimateScopePostProcess;//[Offset: 0x1148, Size: 8]
	ParticleSystem* MuzzleParticleSystem;//[Offset: 0x1150, Size: 8]
	ParticleSystem* WeaponDurabilityDestroyEffect;//[Offset: 0x1158, Size: 8]
	ParticleSystem* WeaponDurabilityDestroyEffectIcon;//[Offset: 0x1160, Size: 8]
	bool UseDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 1]
	bool Use Reload Particles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1169, Size: 1]
	ParticleSystem* Reload_ParticleSystem;//[Offset: 0x1170, Size: 8]
	float LastPlayFXTime;//[Offset: 0x1178, Size: 4]
	float MinPlayFXTime;//[Offset: 0x117c, Size: 4]
	bool UseShellsOnFire?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	bool UseShellsOnReload?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1181, Size: 1]
	bool UseShellsOnPump?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1182, Size: 1]
	FName ReloadSocketName;//[Offset: 0x1184, Size: 8]
	FortAIPawn*[] Array Of Active Enemy AI;//[Offset: 0x1190, Size: 16]
	bool Scope - Render Enemies To Custom Depth Buffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	FName Shells Socket Name;//[Offset: 0x11a4, Size: 8]
	byte ShellTypeSelect;//[Offset: 0x11ac, Size: 1]
	float Shells Spawn Rate Scale;//[Offset: 0x11b0, Size: 4]
	Vector ShellsRotationRate;//[Offset: 0x11b4, Size: 12]
	Vector Shells Velocity;//[Offset: 0x11c0, Size: 12]
	Vector Shells Gravity;//[Offset: 0x11cc, Size: 12]
	Vector Shells Size;//[Offset: 0x11d8, Size: 12]
	float Target Scope Vignette Blur Screen Percentage;//[Offset: 0x11e4, Size: 4]
	float Scope Camera Offset Amount;//[Offset: 0x11e8, Size: 4]
	float Inherit Parent Velocity;//[Offset: 0x11ec, Size: 4]
	float Cylindrical Radius;//[Offset: 0x11f0, Size: 4]
	float Cylindrical Height;//[Offset: 0x11f4, Size: 4]
	LinearColor Shell Color;//[Offset: 0x11f8, Size: 16]
	NiagaraComponent* Spawned_Shells;//[Offset: 0x1208, Size: 8]
	bool DebugShellsSocket?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 1]
	SoundBase* Sound_ScopeZoomIn;//[Offset: 0x1218, Size: 8]
	SoundBase* Sound_ScopeZoomOut;//[Offset: 0x1220, Size: 8]
	ParticleSystemComponent* Alteration Ambient PS;//[Offset: 0x1228, Size: 8]
	GameplayTagContainer ReticleHUDElementTags;//[Offset: 0x1230, Size: 32]
	bool Is Wind Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 1]
	ParticleSystem* MuzzleWindParticleSystem;//[Offset: 0x1258, Size: 8]
	ParticleSystem* MuzzleParticleSystem1P;//[Offset: 0x1260, Size: 8]
	bool ShouldHideReticleAfterDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 1]
	ParticleSystemComponent* MuzzleWindParticleSpawned;//[Offset: 0x1270, Size: 8]
	int StencilBufferValue;//[Offset: 0x1278, Size: 4]
	CurveFloat* Curve_PitchOffset;//[Offset: 0x1280, Size: 8]
	SoundBase* Sound_ScopedInLoop;//[Offset: 0x1288, Size: 8]
	AudioComponent* ScopeZoomInComp;//[Offset: 0x1290, Size: 8]
	AudioComponent* ScopedInLoopComp;//[Offset: 0x1298, Size: 8]
	AudioComponent* ScopeZoomOutComp;//[Offset: 0x12a0, Size: 8]
	float Alteration Ambient PS Max Draw Distance;//[Offset: 0x12a8, Size: 4]
	float Muzzle PS Max Draw Distance;//[Offset: 0x12ac, Size: 4]
	float Beam PS Max Draw Distance;//[Offset: 0x12b0, Size: 4]
	float Reload PS Max Draw Distance;//[Offset: 0x12b4, Size: 4]
	float Shells PS Max Draw Distance;//[Offset: 0x12b8, Size: 4]
	MulticastInlineDelegateProperty onAimDownSightsChanged;//[Size: 16]
	bool IsMuzzleNiagara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 1]
	NiagaraSystem* MuzzleNiagaraSystemInstance;//[Offset: 0x12d8, Size: 8]
	NiagaraSystem* MuzzleNiagaraSystemAsset;//[Offset: 0x12e0, Size: 40]
	NiagaraComponent* MuzzleNiagaraComponentInstance;//[Offset: 0x1308, Size: 8]
	ParticleSystemComponent*[] MuzzleParticleSystemComponents;//[Offset: 0x1310, Size: 16]
	float Muzzle_ChanceOfLargeFlash;//[Offset: 0x1320, Size: 4]
	float Muzzle_FlashLarge_MinScale;//[Offset: 0x1324, Size: 4]
	float Muzzle_FlashLarge_MaxScale;//[Offset: 0x1328, Size: 4]
	float Muzzle_FlashSmall_MinScale;//[Offset: 0x132c, Size: 4]
	float Muzzle_FlashSmall_MaxScale;//[Offset: 0x1330, Size: 4]
	TimerHandle ScopeEffectDelay1Handle;//[Offset: 0x1338, Size: 8]
	TimerHandle ScopeEffectDelay2Handle;//[Offset: 0x1340, Size: 8]
	void PlayScopeOutAudio(bool CallFunc_IsValid_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue);// 0xbbc0600
	void GetScopeParameters(out StaticMeshComponent* ScopeComponent, out Vector2D DepthOfFieldVignetteRange, out float WeaponSightsCameraOffset, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0xbbc0600
	void GetActiveMuzzleComponents(out FXSystemComponent*[] NewParam, FXSystemComponent*[] K2Node_MakeArray_Array, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, NiagaraSystem* K2Node_DynamicCast_AsNiagara_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetMuzzleSocketName_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, FXSystemComponent*[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void SetActiveMuzzleComponent(bool NiagaraEnabled);// 0xbbc0600
	void StopScopedAudio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void StartScopedAudio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue);// 0xbbc0600
	void SetPostProcessParams(float InputPin);// 0xbbc0600
	void SetActiveAlterationIdleParticles(bool Active, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void ShowReticle(Controller* CallFunc_GetInstigatorController_ReturnValue, FortPlayerControllerZone* K2Node_DynamicCast_AsFort_Player_Controller_Zone, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void HideReticle(Controller* CallFunc_GetInstigatorController_ReturnValue, FortPlayerControllerZone* K2Node_DynamicCast_AsFort_Player_Controller_Zone, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void ActivateOrDeactivateWindParticle(bool bNewActive);// 0xbbc0600
	void DeactivateMuzzleFX(int Temp_int_Variable, FXSystemComponent*[] CallFunc_GetActiveMuzzleComponents_NewParam, int CallFunc_Add_IntInt_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void DeactivateReloadSmokeFX(bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void ActivateReloadSmokeFX(bool CallFunc_ShouldPlayReloadFX_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void ActivateShellsFX(bool Bool, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void DeactivateShellsFX(bool CallFunc_IsActive_ReturnValue);// 0xbbc0600
	void SetupShellFX(NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, Vector CallFunc_Conv_FloatToVector_ReturnValue, bool CallFunc_ShouldPlayPersistentFireFX_ReturnValue, byte Temp_byte_Variable, NiagaraSystem* K2Node_Select_Default, float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default);// 0xbbc0600
	void UpdateShellEmittersFX(byte[] Keys to Check, FName[] Values to Run Through, int CallFunc_GetShellReloadCounter_ReturnValue, bool Temp_bool_Variable, int CallFunc_Max_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void Muzzle Play Reload FX(byte Selection, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void Muzzle Flash FX(bool Persistent Fire, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsUsingScope_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FXSystemComponent*[] CallFunc_GetActiveMuzzleComponents_NewParam, FXSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void SetWpnRarity();// 0xbbc0600
	void AddRandomScale(int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FXSystemComponent*[] CallFunc_GetActiveMuzzleComponents_NewParam, float CallFunc_RandomFloatInRange_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void UserConstructionScript(int ValidMuzzleSocketCount, int Temp_int_Array_Index_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, const Transform Temp_struct_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, ParticleSystemComponent* CallFunc_AddComponent_ReturnValue, int Temp_int_Array_Index_Variable, FName[] CallFunc_GetUniqueMuzzleSocketNames_Names, FName[] CallFunc_GetUniqueMuzzleSocketNames_Names, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsNiagaraEffectEnabledSoftPtr_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, FName CallFunc_GetMuzzleSocketName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const Transform Temp_struct_Variable, ParticleSystemComponent* CallFunc_AddComponent_ReturnValue);// 0xbbc0600
	void AnimateScopePostProcess__FinishedFunc();// 0xbbc0600
	void AnimateScopePostProcess__UpdateFunc();// 0xbbc0600
	void OnLoaded_4D1409A247BFDB4C074B628406FC7A72(Object* Loaded);// 0xbbc0600
	void OnLoaded_4DE6158742ED7EE528BC98A240A81632(Object* Loaded);// 0xbbc0600
	void OnLoaded_3A9BBE884A5C5966375089938B7DC0CA(Object* Loaded);// 0xbbc0600
	void OnLoaded_83457BA843174AC6288682A342EBEAD9(Object* Loaded);// 0xbbc0600
	void OnLoaded_5B08633343C4DA6FF40449A8A36357E4(Object* Loaded);// 0xbbc0600
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void OnStopWeaponFireFX();// 0xbbc0600
	void OnPlayReloadFX(byte ReloadStage);// 0xbbc0600
	void OnSetTargeting(bool bNewIsTargeting);// 0xbbc0600
	void K2_OnUnEquip();// 0xbbc0600
	void InitializeScopeVariables();// 0xbbc0600
	void Update Enemy Custom Depths(bool Enable Or Disable, int StencilBufferValue);// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void OnInitAlteration(FortAlterationItemDefinition* NewAlteration);// 0xbbc0600
	void OnInitCosmeticAlterations(FortCosmeticModification CosmeticMod);// 0xbbc0600
	void ShellsON_(onPump)();// 0xbbc0600
	void OnEquippedWeaponDestory();// 0xbbc0600
	void SetWeaponPierceThrough(bool Enable, int TargetLimit);// 0xbbc0600
	void SetWeaponPierceThrough_ClientRep(bool Enable, int TargetLimit);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void HideWeaponMesh();// 0xbbc0600
	void ShowWeaponMesh();// 0xbbc0600
	void HideWeapon();// 0xbbc0600
	void ShowWeapon();// 0xbbc0600
	void ReverseScopePP();// 0xbbc0600
	void ResetDoonceScopeSound();// 0xbbc0600
	void UnhideThirdPersonStuff();// 0xbbc0600
	void PlayScopePP();// 0xbbc0600
	void HideFirstPersonStuff();// 0xbbc0600
	void AbortScopeFX();// 0xbbc0600
	void HideThirdPersonStuff();// 0xbbc0600
	void UnhideFirstPersonStuffPart2(int Which Call);// 0xbbc0600
	void UnhideFirstPersonStuffPart1();// 0xbbc0600
	void ForceScopeFX();// 0xbbc0600
	void BindFireRateChange();// 0xbbc0600
	void PitchUpOnRateOfFireChange(float NewRateOfFire);// 0xbbc0600
	void ShellEjectionFixOn();// 0xbbc0600
	void Bind on Effects Quality();// 0xbbc0600
	void ShellEjectionOff();// 0xbbc0600
	void ForceScopeBackImmediatly();// 0xbbc0600
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void OnStartOverheated();// 0xbbc0600
	void LoadNiagaraMuzzleSoftObject();// 0xbbc0600
	void OnApplyFireModeData(FortWeaponFireModeData* FireModeData);// 0xbbc0600
	void ScopeEffectDelay2();// 0xbbc0600
	void ScopeEffectDelay1();// 0xbbc0600
	void ExecuteUbergraph_B_Ranged_Generic(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_GetPI_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_bPersistentFire, bool K2Node_Event_bSecondaryFire, byte K2Node_Event_ReloadStage, Pawn* CallFunc_GetInstigator_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, float K2Node_MathExpression_ReturnValue, bool K2Node_MathExpression_ReturnValue, bool Temp_bool_IsClosed_Variable, Object* Temp_object_Variable, bool K2Node_Event_bNewIsTargeting, bool CallFunc_SetHiddenInGameOtherLocalControllersOnly_ReturnValue, bool CallFunc_SetHiddenInGameControllerOnly_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FortAIPawn*[] CallFunc_GetAllActorsOfClass_OutActors, bool K2Node_CustomEvent_Enable_Or_Disable, int K2Node_CustomEvent_StencilBufferValue, Object* K2Node_CustomEvent_Loaded, Pawn* CallFunc_GetInstigator_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FortAlterationItemDefinition* K2Node_Event_NewAlteration, FortCosmeticModification K2Node_Event_CosmeticMod, FXSystemAsset* CallFunc_SelectAltSystemAsset_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FXSystemAsset* CallFunc_SelectAltSystemAsset_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, bool CallFunc_UseScopeTargeting_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool K2Node_CustomEvent_Enable, int K2Node_CustomEvent_TargetLimit, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_SelectInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_CustomEvent_Enable, int K2Node_CustomEvent_TargetLimit, int CallFunc_SelectInt_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, bool CallFunc_IsUsingFirstPersonCamera_ReturnValue, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetInstigatorController_ReturnValue, FortPlayerControllerZone* K2Node_DynamicCast_AsFort_Player_Controller_Zone, bool K2Node_DynamicCast_bSuccess, FortWindManager* CallFunc_GetWindManager_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_UseScopeTargeting_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, bool CallFunc_UseScopeTargeting_ReturnValue, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly, FortAIPawn* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetRenderingDetailMode_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetHiddenInGameControllerOnly_ReturnValue, int K2Node_CustomEvent_Which_Call, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_CustomEvent_NewRateOfFire, float CallFunc_GetWeaponRateOfFireModifier_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, bool CallFunc_IsInAthena_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FortGameUserSettings* CallFunc_GetFortGameUserSettings_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInVehicle_ReturnValue, Object* K2Node_CustomEvent_Loaded, Pawn* CallFunc_GetInstigator_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInVehicle_ReturnValue, const HitResult K2Node_Event_HitResult, byte K2Node_Event_ImpactPhysicalSurface, FXSystemComponent* K2Node_Event_SpawnedPSC, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BuildingActor* K2Node_DynamicCast_AsBuilding_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_NegateVector_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, byte CallFunc_GetActorTeam_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, byte CallFunc_GetTeamAffiliationToLocalPlayer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_GetIsTargeting_ReturnValue, bool CallFunc_GetIsTargeting_ReturnValue, bool CallFunc_GetIsTargeting_ReturnValue, SlateBrush CallFunc_GetWeaponDataSmallPreviewImageBrush_ReturnValue, byte CallFunc_GetWeaponDataTriggerType_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_ShouldPlayPersistentFireFX_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, NiagaraSystem* K2Node_DynamicCast_AsNiagara_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ShouldPlayShellFX_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Object* Temp_object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, FortWeaponFireModeData* K2Node_Event_FireModeData, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Object* K2Node_CustomEvent_Loaded, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Object* Temp_object_Variable, FXSystemComponent*[] CallFunc_GetActiveMuzzleComponents_NewParam, NiagaraSystem* K2Node_DynamicCast_AsNiagara_System, bool K2Node_DynamicCast_bSuccess, FXSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_GetBeamPSC_ReturnValue, bool CallFunc_GetUseBeamParticles_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Generic_Parent_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic_Parent, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Object* K2Node_CustomEvent_Loaded, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, NiagaraSystem* K2Node_DynamicCast_AsNiagara_System, bool K2Node_DynamicCast_bSuccess, NiagaraSystem* CallFunc_SetBeamNiagaraSystem_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* CallFunc_SetBeamParticleSystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Object* Temp_object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, Transform CallFunc_GetSocketTransform_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_VSize_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue);// 0xbbc0600
	void onAimDownSightsChanged__DelegateSignature(bool AimDownsights);// 0xbbc0600

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 152]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0xba396f4
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0xd9045d0
	void SetTimelineLengthMode(byte NewLengthMode);// 0xd904528
	void SetTimelineLength(float NewLength);// 0xd904480
	void SetPlayRate(float NewRate);// 0xba3964c
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0xd904348
	void SetNewTime(float NewTime);// 0xd9042a0
	void SetLooping(bool bNewLooping);// 0xd9041f0
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0xd90410c
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0xd90405c
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0xd903f78
	void ReverseFromEnd();// 0xba39638
	void Reverse();// 0xba39624
	void PlayFromStart();// 0xba39610
	void Play();// 0xba395fc
	void OnRep_Timeline();// 0xba395e8
	bool IsReversing();// 0xd903f40
	bool IsPlaying();// 0xba395b0
	bool IsLooping();// 0xd903f08
	float GetTimelineLength();// 0xd903ed4
	float GetPlayRate();// 0xd903ea0
	float GetPlaybackPosition();// 0xd903e6c
	bool GetIgnoreTimeDilation();// 0xd903e34

--------------------------------
Class: PlayerPawn_Generic_Parent_C.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x31a0, Size: 8]
	MaterialInterface*[] Default Weapon Materials;//[Offset: 0x31a8, Size: 16]
	MaterialInstanceDynamic*[] PawnBackpackMaterials;//[Offset: 0x31b8, Size: 16]
	MaterialInstanceDynamic*[] PawnHatMaterials;//[Offset: 0x31c8, Size: 16]
	MaterialInstanceDynamic*[] PawnHeadMaterials;//[Offset: 0x31d8, Size: 16]
	MaterialInstanceDynamic*[] PawnBodyMaterials;//[Offset: 0x31e8, Size: 16]
	MaterialInstanceDynamic*[] PawnCharmMaterials;//[Offset: 0x31f8, Size: 16]
	MaterialInstanceDynamic*[] PawnFaceMaterials;//[Offset: 0x3208, Size: 16]
	PostProcessComponent* PlayerPostProcessFX;//[Offset: 0x3218, Size: 8]
	SkeletalMeshComponent*[] SkeletalMeshes;//[Offset: 0x3220, Size: 16]
	MaterialInstanceDynamic*[] PawnMaterials_ALL;//[Offset: 0x3230, Size: 16]
	int WaterCounter;//[Offset: 0x3240, Size: 4]
	Actor* CurrentWaterMeshActor;//[Offset: 0x3248, Size: 8]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3250, Size: 1]
	float Time when you'll be able to splash again;//[Offset: 0x3254, Size: 4]
	MulticastInlineDelegateProperty OnOverlapWaterVolume;//[Size: 16]
	void ReceiveBeginPlay();// 0xbbc0600
	void Exited/Entered Water Volume();// 0xbbc0600
	void Player Creates a Splash(out const Transform NewTransform);// 0xbbc0600
	void ReinitializeWeaponMaterials();// 0xbbc0600
	void ExecuteUbergraph_PlayerPawn_Generic_Parent(int EntryPoint, const Transform Temp_struct_Variable, bool CallFunc_IsLocallyControlled_ReturnValue, PostProcessComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, const Transform K2Node_CustomEvent_NewTransform);// 0xbbc0600
	void OnOverlapWaterVolume__DelegateSignature(bool bIsInWater, FortPlayerPawn* Pawn, Actor* Water);// 0xbbc0600

--------------------------------
Class: UnderwaterAudioComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 8]
	SoundMix* CamUnderwaterSoundMix;//[Offset: 0xb8, Size: 8]
	SoundBase* CamUnderwaterStartSound;//[Offset: 0xc0, Size: 8]
	AudioComponent* CamUnderwaterAudio;//[Offset: 0xc8, Size: 8]
	SoundBase* CamUnderwaterLoopSound;//[Offset: 0xd0, Size: 8]
	SoundBase* CamUnderwaterStopSound;//[Offset: 0xd8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	void ReceiveBeginPlay();// 0xbbc0600
	void On Camera Underwater State Changed(bool bIsUnderWater, float DepthUnderwater);// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ExecuteUbergraph_UnderwaterAudioComponent(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_bIsUnderWater, float K2Node_CustomEvent_DepthUnderwater, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, WaterSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetPlayState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_IsSplitScreen_ReturnValue, byte K2Node_Event_EndPlayReason);// 0xbbc0600

--------------------------------
Class: WaterSubsystem.WorldSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty OnCameraUnderwaterStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnWaterScalabilityChanged;//[Size: 16]
	StaticMesh* DefaultRiverMesh;//[Offset: 0x90, Size: 8]
	StaticMesh* DefaultLakeMesh;//[Offset: 0x98, Size: 8]
	BuoyancyManager* BuoyancyManager;//[Offset: 0xa0, Size: 8]
	WaterMeshActor* WaterMeshActor;//[Offset: 0xa8, Size: 8]
	MaterialParameterCollection* MaterialParameterCollection;//[Offset: 0xe0, Size: 8]
	void SetOceanFloodHeight(float InFloodHeight);// 0x7b34cc4
	void PrintToWaterLog(FString Message, bool bWarning);// 0x7b34de0
	bool IsWaterRenderingEnabled();// 0x7b34f6c
	bool IsUnderwaterPostProcessEnabled();// 0x7b3500c
	bool IsShallowWaterSimulationEnabled();// 0x7b35044
	float GetWaterTimeSeconds();// 0x7b34f38
	float GetSmoothedWorldTimeSeconds();// 0x7b34f04
	static int GetShallowWaterSimulationRenderTargetSize();// 0x7b34fa4
	static int GetShallowWaterMaxImpulseForces();// 0x7b31118
	static int GetShallowWaterMaxDynamicForces();// 0x7b34fd8
	float GetOceanTotalHeight();// 0x7b34d6c
	float GetOceanFloodHeight();// 0x7b310fc
	float GetOceanBaseHeight();// 0x7b34dac
	float GetCameraUnderwaterDepth();// 0x7b34ee8

--------------------------------
Class: WaterMeshActor.Actor.Object
	Texture2D* WaterVelocityTexture;//[Offset: 0x220, Size: 8]
	WaterMeshComponent* WaterMesh;//[Offset: 0x228, Size: 8]

--------------------------------
Class: WaterMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForceCollapseDensityLevel;//[Offset: 0x464, Size: 4]
	float TileSize;//[Offset: 0x468, Size: 4]
	IntPoint ExtentInTiles;//[Offset: 0x46c, Size: 8]
	MaterialInterface* FarDistanceMaterial;//[Offset: 0x478, Size: 8]
	float FarDistanceMeshExtent;//[Offset: 0x480, Size: 4]
	Vector RTWorldLocation;//[Offset: 0x484, Size: 12]
	Vector RTWorldSizeVector;//[Offset: 0x490, Size: 12]
	<MaterialInterface*> UsedMaterials;//[Offset: 0x500, Size: 80]
	int TessellationFactor;//[Offset: 0x580, Size: 4]
	float LODScale;//[Offset: 0x584, Size: 4]
	bool IsEnabled();// 0x7b3488c

--------------------------------
Class: FortMusicContext.BlueprintContextBase.Subsystem.Object
	MulticastInlineDelegateProperty OnMusicPackChanged;//[Size: 16]
	AthenaMusicPackItemDefinition* DesiredActiveMusicPack;//[Offset: 0x40, Size: 8]
	PrimaryAssetId[] LoadedPacks;//[Offset: 0x48, Size: 16]
	void SetActiveMusicPack(const AthenaMusicPackItemDefinition* NewMusicPack, float StartTimeOffset);// 0xd0e800c
	bool IsDefaultMusicEquipped();// 0xd0e7fd4
	AthenaMusicPackItemDefinition* GetEquippedMusicPack();// 0xd0e7fa0

--------------------------------
Class: AthenaHUDContext.BlueprintContextBase.Subsystem.Object
	MulticastInlineDelegateProperty OnLocalPlayerWon;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerDeathOnWin;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalTeamWon;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalTeamLost;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerLost;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerKilledPlayer;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerDBNOStateChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnUIGameplayCue;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerBeginSkydiving;//[Size: 16]
	MulticastInlineDelegateProperty OnAthenaAutoFireChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnClientSettingsShowViewersChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnAthenaGamePhaseChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerFiredWeapon;//[Size: 16]
	MulticastInlineDelegateProperty OnShowUrgentQuestMessage;//[Size: 16]
	MulticastInlineDelegateProperty OnDuelChange;//[Size: 16]
	MulticastInlineDelegateProperty OnLowPerformanceMode;//[Size: 16]
	MulticastInlineDelegateProperty OnPTTStateChange;//[Size: 16]
	MulticastInlineDelegateProperty OnCanPTTChange;//[Size: 16]
	MulticastInlineDelegateProperty ShowMobilePickerDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayerNameChangeDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnResurrectingNowDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnAllWinnersAnnouncedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnSignalQualityChangeDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnForwardStartedFalling;//[Size: 16]
	MulticastInlineDelegateProperty OnSpecialActorListChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnFireStopped;//[Size: 16]
	MulticastInlineDelegateProperty OnPostGameWidgetPlacementChange;//[Size: 16]
	MulticastInlineDelegateProperty OnForceStartPostGameFlow;//[Size: 16]
	MulticastInlineDelegateProperty OnQuickTimeEventWidgetStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnQuickTimeEventWidgetStopped;//[Size: 16]
	MulticastInlineDelegateProperty OnQuickTimeEventFeedbackWidget;//[Size: 16]
	MulticastInlineDelegateProperty OnForceAllQuickbarsMinimizedChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnPlaylistExtensionWidgetCreatedNotSupported;//[Size: 16]
	MulticastInlineDelegateProperty OnClearPlaylistExtensionWidgetNotSupported;//[Size: 16]
	Widget* MoveButtonWidgetPtr;//[Offset: 0x270, Size: 8]
	AthenaWinnerInfo WinnerInfo;//[Offset: 0x278, Size: 32]
	bool bMoveButtonMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool bPendingAttachToHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool bLocalPlayerWonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	FortPlayerPawnAthena* BoundPlayerPawn;//[Offset: 0x2a0, Size: 8]
	AthenaPlayerViewModel* PlayerViewModel;//[Offset: 0x2a8, Size: 8]
	float VictoryStingerTimeUntilFadeOut();// 0xdfa8d78
	bool UseTapToShoot();// 0xdfa8d40
	void UseOrRleoadFromHUDStop();// 0xdfa8d2c
	void UseOrRleoadFromHUDStart();// 0xdfa8d18
	void UpdateSelectedWidgetMoveOffsetVector(out const Vector2D VectorOffset, float fMoveScale);// 0xdfa8c24
	void TryBestUseForActor(Actor* ActorToUse);// 0xdfa8b7c
	void TakeMovementInputFromHUD(Vector2D MoveVector);// 0xdfa8ad8
	void TakeLookStickInputFromHUD(const Vector2D LookStickPosition);// 0xdfa8a34
	void TakeLookInputFromHUD(Rotator LookRotator);// 0xdfa898c
	void TakeItemSelectionInputFromHUD(const int TouchIndex, const int SlotIdx, out bool bIsUsing, enum InQuickBar, bool bReloadOrUseIfAlreadySelected, bool bStopUseImmediately);// 0xdfa8780
	void SwitchToPrimaryQuickbar();// 0xdfa876c
	void SwapQuickBarFocusFromHUD(enum InQuickBar, int SlotOverride);// 0xdfa8684
	void StopTargettingFromHUD();// 0xdfa8670
	void StopItemSelectionInputFromHUD(const int TouchIndex, const int SlotIdx, enum InQuickBar);// 0xdfa854c
	void ShowUrgentQuestMessage(out const UrgentQuestData UrgentQuestData);// 0xdfa848c
	void ShowMobilePicker__DelegateSignature();// 0xbbc0600
	void ShowMobilePicker();// 0xdfa8478
	void ShowMarkerGameModeMessage(int PlayerID, int InstanceID);// 0xdfa8394
	void ShowGameModeMessage();// 0xdfa8380
	void ShowDuelUpdate(const enum DuelState, out const DuelOverlayData DuelOverlayData);// 0xdfa81c0
	bool ShouldVictoryUIPushEmoteInput();// 0xdfa8188
	bool ShouldPlayCustomEndScreenAtLoss();// 0xdfa8150
	bool ShouldDisplayScoreUI();// 0xdfa8118
	bool ShouldDisplayPlacement();// 0xdfa80e0
	bool ShouldAlwaysDisplaySquadInfo();// 0xdfa80a8
	void SetTargetingToggleable(const bool bNewValue);// 0xdfa7ff8
	void SetSelectWidgetToMoveMode(bool bSet);// 0xdfa7f48
	void SetSelectedInventoryItem(FortItem* Item);// 0xdfa7ea0
	void SetResourceMaterial(byte NewMaterial);// 0xdfa7df8
	void SetPTTState(enum NewPushToTalkState);// 0xdfa7d50
	void SetPostGameWidgetPlacement(FName WidgetPlacement);// 0xdfa7ca8
	void SetLockOnStickCoords(out const Vector2D LockOnCoords);// 0xdfa7bf8
	void SetLocalPlayerWonMatch(bool bLocalPlayerWon);// 0xdfa7b48
	void SelectWidgetToMove(Widget* Widget);// 0xdfa7aa0
	void ReloadFromHUD();// 0xdfa7a8c
	void PushGameOverEmoteInput();// 0xdfa7a78
	void PTTStateChange__DelegateSignature(enum NewPushToTalkState);// 0xbbc0600
	bool OwnerOrWeaponHasTag(GameplayTag InTag);// 0xdfa79c4
	void OnSpecialActorListChanged__DelegateSignature();// 0xbbc0600
	void OnSignalQualityChange__DelegateSignature(float NewQuality);// 0xbbc0600
	void OnShowUrgentQuestMessage__DelegateSignature(out const UrgentQuestData UrgentQuestData, const float EventTimeRemaining);// 0xbbc0600
	void OnResurrectingNow__DelegateSignature(bool bResurrectingNow);// 0xbbc0600
	void OnReadyForWinnerInfoDisplay();// 0xdfa79b0
	void OnQuickTimeEventWidgetStopped__DelegateSignature();// 0xbbc0600
	void OnQuickTimeEventWidgetStarted__DelegateSignature(float Duration, float SweetSpot, float PerfectTolerance, float GreatTolerance, float GoodTolerance);// 0xbbc0600
	void OnQuickTimeEventFeedbackWidget__DelegateSignature(enum Result);// 0xbbc0600
	void OnPostGameWidgetPlacement__DelegateSignature(FName WidgetPlacement);// 0xbbc0600
	void OnPlaylistExtensionWidgetCreatedNotSupported__DelegateSignature(enum ExtensionSlot, UserWidget* Widget);// 0xbbc0600
	void OnPlayerNameChange__DelegateSignature(FString NewName);// 0xbbc0600
	void OnPlayerFiredWeapon__DelegateSignature();// 0xbbc0600
	void OnLowPerformanceMode__DelegateSignature(bool bInLowPerformanceMode);// 0xbbc0600
	void OnLocalTeamWon__DelegateSignature();// 0xbbc0600
	void OnLocalTeamLost__DelegateSignature();// 0xbbc0600
	void OnLocalPlayerWon__DelegateSignature();// 0xbbc0600
	void OnLocalPlayerLost__DelegateSignature(enum LostReason);// 0xbbc0600
	void OnLocalPlayerKilledPlayer__DelegateSignature(const FortPlayerStateAthena* Player);// 0xbbc0600
	void OnLocalPlayerDeathOnWin__DelegateSignature();// 0xbbc0600
	void OnLocalPlayerDBNOStateChanged__DelegateSignature(bool bIsDBNO);// 0xbbc0600
	void OnLocalPlayerBeginSkydiving__DelegateSignature();// 0xbbc0600
	void OnForwardStartedFalling__DelegateSignature();// 0xbbc0600
	void OnForceStartPostGameFlow__DelegateSignature();// 0xbbc0600
	void OnForceAllQuickbarsMinimizedChanged__DelegateSignature(bool bEnabled);// 0xbbc0600
	void OnFireStopped__DelegateSignature(int StopFireIndex);// 0xbbc0600
	void OnDuelStarted__DelegateSignature(const enum DuelState, out const DuelOverlayData DuelOverlayData);// 0xbbc0600
	void OnClientSettingUpdatedShowViewers();// 0xdfa7994
	void OnClearPlaylistExtensionWidgetNotSupported__DelegateSignature();// 0xbbc0600
	void OnCanPTTChange__DelegateSignature();// 0xbbc0600
	void OnAthenaSettingsApplied__DelegateSignature();// 0xbbc0600
	void OnAthenaHUDAllWinnersAnnounced__DelegateSignature(out const AthenaWinnerInfo WinnerInfo);// 0xbbc0600
	void OnAthenaGamePhaseChanged__DelegateSignature(out const interface class SafeZoneInterface, const enum NewPhase);// 0xbbc0600
	void OnAthenaAutoFireChanged__DelegateSignature(bool bEntering);// 0xbbc0600
	void OnAllWinnersAnnounced();// 0xdfa7980
	void JumpFromHudStart(int TouchIndex);// 0xdfa78d8
	void JumpFromHudEnd();// 0xdfa78c4
	bool IsVictoryUICinematic();// 0xdfa788c
	bool IsUsingScope();// 0xdfa7854
	bool IsTargeting();// 0xdfa781c
	bool IsShowViewerCountEnabled();// 0xdfa77e4
	bool IsRunningOnBattery();// 0xdfa77ac
	bool IsOperatingTurret();// 0xdfa7774
	bool IsMovingSelectedWidget();// 0xdfa773c
	bool IsInSelectWidgetToMoveMode();// 0xdfa7704
	bool IsInBuildMode();// 0xdfa76cc
	bool IsFiringFromTouch(int TouchIndex);// 0xdfa75f4
	bool IsCurrentWeaponFiring();// 0xdfa75bc
	bool IsCurrentWeaponChargeable();// 0xdfa7584
	bool IsCrouching();// 0xdfa754c
	bool IsAutoRunEnabled();// 0xdfa7514
	bool IsActionBound(const FName ActionName);// 0xdfa7460
	void HideGameModeMessage();// 0xdfa744c
	bool HasWifi();// 0xdfa7414
	bool HasLockOnTarget();// 0xdfa73dc
	bool HasFiringTouch();// 0xdfa73b8
	bool HasAutofireTarget();// 0xdfa7380
	void HandleUIGameplayCue(FName CueName, byte EventType, out const GameplayCueParameters Parameters);// 0xba9e348
	void HandleSpectatorViewTargetChanged();// 0xdfa736c
	void HandleLocalPlayerDBNOStateChanged(FortPawn* FortPawn, bool bIsDBNO);// 0xba9e258
	void HandleLocalPlayerBeginSkydiving();// 0xdfa7358
	void HandleGamePhaseChange(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xba9e160
	void GetWinnerText(out FText ReturnText, out const FText WinnerName);// 0xdfa719c
	FText GetVictoryText();// 0xdfa70cc
	SoundCue* GetVictoryStinger();// 0xdfa7098
	enum GetTouchInteractMode();// 0xdfa7064
	int GetSquadSize();// 0xdfa7030
	int GetSquadConnectedCount();// 0xdfa6ffc
	enum GetPTTState();// 0xdfa6fc8
	FString GetPlayerName();// 0xdfa6f28
	LinearColor GetPlayerColor();// 0xdfa6ef0
	void GetLocalTime(out int Hours, out int Minutes);// 0xdfa6dec
	bool GetLocalPlayerWonMatch();// 0xdfa6db4
	int GetJumpPressedTouchIndex();// 0xdfa6d80
	int GetInteractPressedTouchIndex();// 0xdfa6d4c
	bool GetInLowPerformanceMode();// 0xdfa6d14
	FortAthenaHUDInfoDataAsset* GetHUDInfoDataAsset();// 0xdfa6ce0
	FText GetGliderDisplayName();// 0xdfa6c10
	enum GetGamePhase();// 0xdfa6bdc
	float GetGameOverDelayTime();// 0xdfa6ba8
	class UserWidget GetCustomDBNOWidgetClass();// 0xdfa6acc
	MaterialInterface* GetCustomDBNOReviveMaterial();// 0xdfa69f0
	bool GetCanPTT();// 0xdfa69b8
	FName[] GetBoundActions();// 0xdfa6918
	float GetBatteryLevel();// 0xdfa68e4
	void ForwardOnSpecialActorListChanged(out const SpecialActorRepData SpecialActorData);// 0xdfa6620
	void ForceVictoryRoyaleUI();// 0xdfa660c
	void ForceStartPostGameFlow();// 0xdfa65f8
	void ForceFireFromHUDStop();// 0xdfa65e4
	void FireFromHUDStop(int TouchIndex, Widget* DebugWidget);// 0xdfa64fc
	void FireFromHUDStart(int TouchIndex, Widget* DebugWidget);// 0xdfa6414
	void ExecuteActionNameFromHUDWithEventType(const FName ActionName, const byte KeyEvent);// 0xdfa632c
	void ExecuteActionNameFromHUD(const FName ActionName);// 0xdfa6284
	void EndUseFromHUD();// 0xdfa6270
	void EnableAutoRunFromHUD(bool bEnable);// 0xdfa61c0
	bool DoesPlaylistUIExtensionSlotContainWidget(enum PlaylistSlot);// 0xdfa610c
	float DisplayPlayerWonTime();// 0xdfa60d8
	void CycleQuickbar();// 0xdfa60c4
	bool CanShootInVehicle();// 0xdfa608c
	bool CanCurrentWeaponAutoFireFromReticle();// 0xdfa6054
	bool CanAutoRun();// 0xdfa601c
	void BeginUseFromHUD();// 0xdfa6008

--------------------------------
Class: AthenaWinnerInfo
	FString BigNameWinnerName;//[Offset: 0x0, Size: 16]
	FString[] WinnerNames;//[Offset: 0x10, Size: 16]

--------------------------------
Class: DuelOverlayData
	FText ChallengerName;//[Offset: 0x0, Size: 24]
	FText ChallengedNPCName;//[Offset: 0x18, Size: 24]
	Object* ChallengerSocialAvatarBrushPtr;//[Offset: 0x30, Size: 40]
	Object* ChallengedNPCSocialAvatarBrushPtr;//[Offset: 0x58, Size: 40]
	FortItemDefinition* ChallengedNPCLootDef;//[Offset: 0x80, Size: 8]

--------------------------------
Class: AthenaPlayerViewModel.FortPlayerViewModel.Object

--------------------------------
Class: FortPlayerViewModel.Object

--------------------------------
Class: FortAsyncAction_CurrentPlaylistReady.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnReady;//[Size: 16]
	static FortAsyncAction_CurrentPlaylistReady* PlaylistDataReadyAsync(Object* WorldContextObject);// 0xb615dc8
	void HandlePlaylistLoaded(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xb615cac

--------------------------------
Class: MainPlayerCamera_C.FortPlayerCameraZone.FortPlayerCameraBase.PlayerCameraManager.Actor.Object

--------------------------------
Class: FortPlayerCameraZone.FortPlayerCameraBase.PlayerCameraManager.Actor.Object

--------------------------------
Class: FortUIPvP.FortUIZone.FortUIBaseClass.HUD.Actor.Object

--------------------------------
Class: FortUIZone.FortUIBaseClass.HUD.Actor.Object
	FontRenderInfo TextRenderInfo;//[Offset: 0x378, Size: 40]
	ReporterGraph* IntensityGraph;//[Offset: 0x3a0, Size: 8]
	ReporterGraph* PIDValuesGraph;//[Offset: 0x3a8, Size: 8]
	ReporterGraph* PIDContributionsGraph;//[Offset: 0x3b0, Size: 8]
	ReporterGraph* UtilitiesGraph;//[Offset: 0x3b8, Size: 8]
	byte CurrentContextualReticleIconType;//[Offset: 0x3e8, Size: 1]
	Color CurrentContextualReticleColor;//[Offset: 0x3ec, Size: 4]
	Texture2D* ContextualReticleIcons;//[Offset: 0x3f0, Size: 40]
	SlateBrushAsset* ActorCanvasArrowBrush;//[Offset: 0x530, Size: 40]
	FortSpottedActorIndicator*[] SpottedActorIndicators;//[Offset: 0x6a8, Size: 16]
	void ToggleTargetInfoSensing();// 0xd1fe10c
	void ToggleTargetInfoPaths();// 0xd1fe0f8
	void ToggleTargetInfoLock(bool bTraceComplex);// 0xd1fe048
	void ToggleTargetInfoAI();// 0xd1fe034
	void ToggleTargetInfo();// 0xd1fe020
	FName GetCurrentCursorModeAction();// 0xd1fe000
	void CloseFullScreenMap();// 0xd1fdfec

--------------------------------
Class: FortUIBaseClass.HUD.Actor.Object

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: FortSpottedActorIndicator.FortSlateHUDIndicator.FortIndicator.Object
	FortPlayerController* OwnerPC;//[Offset: 0x98, Size: 8]

--------------------------------
Class: TODM_BR_s14_C.TODM_BR_s11_STATIC_SKYLIGHT_C.APOLLO_MASTER_TODM_C.FortTimeOfDayManagerAtmosphere.FortTimeOfDayManager.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10b8, Size: 8]
	StaticMeshComponent* SkyColorCorrectionMesh;//[Offset: 0x10c0, Size: 8]
	PostProcessComponent* JanusPost;//[Offset: 0x10c8, Size: 8]
	StaticMeshComponent* GroundMesh;//[Offset: 0x10d0, Size: 8]
	void validateAdvancedPostProcessing(int CallFunc_GetConsoleVariableIntValue_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void UserConstructionScript(bool CallFunc_InEditorOrPIE_ReturnValue);// 0xbbc0600
	void CycloneTODM();// 0xbbc0600
	void JanusPostEnable();// 0xbbc0600
	void JanusPostDisable();// 0xbbc0600
	void OnDataDrivenCVarDelegate_Event(FString CVarName);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void OnDataDrivenCVarChangedEditorOnly(FString CVarName);// 0xbbc0600
	void RollStormOut();// 0xbbc0600
	void RollStormIn();// 0xbbc0600
	void ExecuteUbergraph_TODM_BR_s14(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, DataDrivenCVarEngineSubsystem* CallFunc_GetEngineSubsystem_ReturnValue, FString K2Node_CustomEvent_CVarName, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString K2Node_Event_CVarName, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0xbbc0600

--------------------------------
Class: TODM_BR_s11_STATIC_SKYLIGHT_C.APOLLO_MASTER_TODM_C.FortTimeOfDayManagerAtmosphere.FortTimeOfDayManager.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10b0, Size: 8]
	void ReceiveBeginPlay();// 0xbbc0600
	void CycloneTODM();// 0xbbc0600
	void ExecuteUbergraph_TODM_BR_s11_STATIC_SKYLIGHT(int EntryPoint);// 0xbbc0600

--------------------------------
Class: APOLLO_MASTER_TODM_C.FortTimeOfDayManagerAtmosphere.FortTimeOfDayManager.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe90, Size: 8]
	PostProcessComponent* HeavySSAO_Postprocess;//[Offset: 0xe98, Size: 8]
	PostProcessComponent* EditorPostProcessMaterial(HackToWorkAroundTheOutlineShaderBeingInjectedByCodeAtRuntime);//[Offset: 0xea0, Size: 8]
	float New_Storm_Timeline_Wind_Strength_1418199D40439300D6A294BFB0695C20;//[Offset: 0xea8, Size: 4]
	float New_Storm_Timeline_RainInt_1418199D40439300D6A294BFB0695C20;//[Offset: 0xeac, Size: 4]
	float New_Storm_Timeline_Lightning_Modulator_1418199D40439300D6A294BFB0695C20;//[Offset: 0xeb0, Size: 4]
	float New_Storm_Timeline_Storm_Ramp_In_Value_1418199D40439300D6A294BFB0695C20;//[Offset: 0xeb4, Size: 4]
	byte New_Storm_Timeline__Direction_1418199D40439300D6A294BFB0695C20;//[Offset: 0xeb8, Size: 1]
	TimelineComponent* New Storm Timeline;//[Offset: 0xec0, Size: 8]
	float FlashLightning_LightningColorLERP_0384539D43C6E59E42B14C91632CFE4D;//[Offset: 0xec8, Size: 4]
	float FlashLightning_lightning_alpha_0384539D43C6E59E42B14C91632CFE4D;//[Offset: 0xecc, Size: 4]
	float FlashLightning_Lightning_Intensity_0384539D43C6E59E42B14C91632CFE4D;//[Offset: 0xed0, Size: 4]
	byte FlashLightning__Direction_0384539D43C6E59E42B14C91632CFE4D;//[Offset: 0xed4, Size: 1]
	TimelineComponent* FlashLightning;//[Offset: 0xed8, Size: 8]
	float WindSpeed;//[Offset: 0xee0, Size: 4]
	float RandomWeatherWaitTime;//[Offset: 0xee4, Size: 4]
	float CurrentAmountOfRandomWeatherTimeLeft;//[Offset: 0xee8, Size: 4]
	float NewWeatherLerpAmount;//[Offset: 0xeec, Size: 4]
	float WindStrength;//[Offset: 0xef0, Size: 4]
	float FutureWindStrength;//[Offset: 0xef4, Size: 4]
	float FutureWindSpeed;//[Offset: 0xef8, Size: 4]
	bool bPickNewWindConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc, Size: 1]
	float LightningStrength;//[Offset: 0xf00, Size: 4]
	float ThreatCloudStormAmount;//[Offset: 0xf04, Size: 4]
	bool UseRainWithStorms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08, Size: 1]
	bool Play a Particle Effect Near the players Feet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf09, Size: 1]
	bool Internal Rain/WindEffects Should be Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0a, Size: 1]
	ParticleSystemComponent* Storm Foot Particle Outdoor;//[Offset: 0xf10, Size: 8]
	ParticleSystem* Storm Foot Particle While on Terrain;//[Offset: 0xf18, Size: 8]
	ParticleSystemComponent* Storm Foot Particle Indoor;//[Offset: 0xf20, Size: 8]
	ParticleSystem* Storm Foot Particle While NOT on Terrain;//[Offset: 0xf28, Size: 8]
	float Storm Wind Strength;//[Offset: 0xf30, Size: 4]
	bool Generate Foliage Wind Gusts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf34, Size: 1]
	TimerHandle LightningStrikeTimerHandle;//[Offset: 0xf38, Size: 8]
	LinearColor PreviousDirectionalLightColor;//[Offset: 0xf40, Size: 16]
	LinearColor Lightning Flash Color;//[Offset: 0xf50, Size: 16]
	float Lightning Flash Timeline Min;//[Offset: 0xf60, Size: 4]
	float Lightning Flash Timeline Max;//[Offset: 0xf64, Size: 4]
	LinearColor SkyboxFogMorningColor;//[Offset: 0xf68, Size: 16]
	LinearColor SkyboxFogMorningLitColor;//[Offset: 0xf78, Size: 16]
	float SkyboxFogMorningDistance;//[Offset: 0xf88, Size: 4]
	float SkyboxFogMorningDiffuseAmount;//[Offset: 0xf8c, Size: 4]
	float SkyboxFogMorningEmissiveAmount;//[Offset: 0xf90, Size: 4]
	float SkyboxFogMorningLitLength;//[Offset: 0xf94, Size: 4]
	float SkyboxFogMorningLitRotation;//[Offset: 0xf98, Size: 4]
	float SkyboxFogMorningLitOffset;//[Offset: 0xf9c, Size: 4]
	LinearColor SkyboxFogDayColor;//[Offset: 0xfa0, Size: 16]
	LinearColor SkyboxFogDayLitColor;//[Offset: 0xfb0, Size: 16]
	float SkyboxFogDayDistance;//[Offset: 0xfc0, Size: 4]
	float SkyboxFogDayDiffuseAmount;//[Offset: 0xfc4, Size: 4]
	float SkyboxFogDayEmissiveAmount;//[Offset: 0xfc8, Size: 4]
	float SkyboxFogDayLitLength;//[Offset: 0xfcc, Size: 4]
	float SkyboxFogDayLitRotation;//[Offset: 0xfd0, Size: 4]
	float SkyboxFogDayLitOffset;//[Offset: 0xfd4, Size: 4]
	LinearColor SkyboxFogEveningColor;//[Offset: 0xfd8, Size: 16]
	LinearColor SkyboxFogEveningLitColor;//[Offset: 0xfe8, Size: 16]
	float SkyboxFogEveningDistance;//[Offset: 0xff8, Size: 4]
	float SkyboxFogEveningDiffuseAmount;//[Offset: 0xffc, Size: 4]
	float SkyboxFogEveningEmissiveAmount;//[Offset: 0x1000, Size: 4]
	float SkyboxFogEveningLitLength;//[Offset: 0x1004, Size: 4]
	float SkyboxFogEveningLitRotation;//[Offset: 0x1008, Size: 4]
	float SkyboxFogEveningLitOffset;//[Offset: 0x100c, Size: 4]
	LinearColor SkyboxFogNightColor;//[Offset: 0x1010, Size: 16]
	LinearColor SkyboxFogNightLitColor;//[Offset: 0x1020, Size: 16]
	float SkyboxFogNightDistance;//[Offset: 0x1030, Size: 4]
	float SkyboxFogNightDiffuseAmount;//[Offset: 0x1034, Size: 4]
	float SkyboxFogNightEmissiveAmount;//[Offset: 0x1038, Size: 4]
	float SkyboxFogNightLitLength;//[Offset: 0x103c, Size: 4]
	float SkyboxFogNightLitRotation;//[Offset: 0x1040, Size: 4]
	float SkyboxFogNightLitOffset;//[Offset: 0x1044, Size: 4]
	float World Border Cloud Base Color Brightness;//[Offset: 0x1048, Size: 4]
	LinearColor World Border Cloud Sub Surface Color and Opacity;//[Offset: 0x104c, Size: 16]
	bool EnableCometDynamicPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105c, Size: 1]
	FString Cheat_RTDFShadowsDistance;//[Offset: 0x1060, Size: 16]
	Vector4 Morning;//[Offset: 0x1070, Size: 16]
	Vector4 Day;//[Offset: 0x1080, Size: 16]
	Vector4 Evening;//[Offset: 0x1090, Size: 16]
	Vector4 Night;//[Offset: 0x10a0, Size: 16]
	void SetShadowStateMPC(float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);// 0xbbc0600
	void EmptyTransform(out Transform Transform, Transform CallFunc_MakeTransform_ReturnValue);// 0xbbc0600
	void SetHeavySSAO(float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);// 0xbbc0600
	void UserConstructionScript(LinearColor CallFunc_MakeColor_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue);// 0xbbc0600
	void FlashLightning__FinishedFunc();// 0xbbc0600
	void FlashLightning__UpdateFunc();// 0xbbc0600
	void New Storm Timeline__FinishedFunc();// 0xbbc0600
	void New Storm Timeline__UpdateFunc();// 0xbbc0600
	void New Storm Timeline__FireOffRain__EventFunc();// 0xbbc0600
	void DisableLightAndFog(bool Enable);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void EnableHDRRendering();// 0xbbc0600
	void UpdateSSAO();// 0xbbc0600
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void LightningStrike();// 0xbbc0600
	void OnStormEnd();// 0xbbc0600
	void OnStormStart();// 0xbbc0600
	void StartStorm();// 0xbbc0600
	void Manual Update for Override();// 0xbbc0600
	void UpdateShadowLevel();// 0xbbc0600
	void SkyDomeCloudsToggle(bool Enable);// 0xbbc0600
	void ExecuteUbergraph_APOLLO_MASTER_TODM(int EntryPoint, bool K2Node_CustomEvent_Enable, float CallFunc_SelectFloat_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_Enable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, LinearColor CallFunc_GetLightColor_ReturnValue, float CallFunc_GetStormStrength_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float K2Node_Event_DeltaSeconds, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_BoolToFloat_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortTimeOfDayManagerAtmosphere.FortTimeOfDayManager.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0xe80, Size: 8]

--------------------------------
Class: DataDrivenCVarEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty OnDataDrivenCVarDelegate;//[Size: 16]

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x1f1, Size: 1]
	float BottomRadius;//[Offset: 0x1f4, Size: 4]
	Color GroundAlbedo;//[Offset: 0x1f8, Size: 4]
	float AtmosphereHeight;//[Offset: 0x1fc, Size: 4]
	float MultiScatteringFactor;//[Offset: 0x200, Size: 4]
	float TraceSampleCountScale;//[Offset: 0x204, Size: 4]
	float RayleighScatteringScale;//[Offset: 0x208, Size: 4]
	LinearColor RayleighScattering;//[Offset: 0x20c, Size: 16]
	float RayleighExponentialDistribution;//[Offset: 0x21c, Size: 4]
	float MieScatteringScale;//[Offset: 0x220, Size: 4]
	LinearColor MieScattering;//[Offset: 0x224, Size: 16]
	float MieAbsorptionScale;//[Offset: 0x234, Size: 4]
	LinearColor MieAbsorption;//[Offset: 0x238, Size: 16]
	float MieAnisotropy;//[Offset: 0x248, Size: 4]
	float MieExponentialDistribution;//[Offset: 0x24c, Size: 4]
	float OtherAbsorptionScale;//[Offset: 0x250, Size: 4]
	LinearColor OtherAbsorption;//[Offset: 0x254, Size: 16]
	TentDistribution OtherTentDistribution;//[Offset: 0x264, Size: 12]
	LinearColor SkyLuminanceFactor;//[Offset: 0x270, Size: 16]
	float AerialPespectiveViewDistanceScale;//[Offset: 0x280, Size: 4]
	float HeightFogContribution;//[Offset: 0x284, Size: 4]
	float TransmittanceMinLightElevationAngle;//[Offset: 0x288, Size: 4]
	float AerialPerspectiveStartDepth;//[Offset: 0x28c, Size: 4]
	GUID bStaticLightingBuiltGUID;//[Offset: 0x2b4, Size: 16]
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0xd8ebd3c
	void SetRayleighScatteringScale(float NewValue);// 0xd8ebc94
	void SetRayleighScattering(LinearColor NewValue);// 0xd8ebbec
	void SetRayleighExponentialDistribution(float NewValue);// 0xd8ebb44
	void SetOtherAbsorptionScale(float NewValue);// 0xd8eba9c
	void SetOtherAbsorption(LinearColor NewValue);// 0xd8eb9f4
	void SetMieScatteringScale(float NewValue);// 0xd8eb94c
	void SetMieScattering(LinearColor NewValue);// 0xd8eb8a4
	void SetMieExponentialDistribution(float NewValue);// 0xd8eb7fc
	void SetMieAnisotropy(float NewValue);// 0xd8eb754
	void SetMieAbsorptionScale(float NewValue);// 0xd8eb6ac
	void SetMieAbsorption(LinearColor NewValue);// 0xd8eb604
	void SetHeightFogContribution(float NewValue);// 0xd8eb55c
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0xd8eb4b4
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0xd8eb3c4

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 4]
	float TipValue;//[Offset: 0x4, Size: 4]
	float Width;//[Offset: 0x8, Size: 4]

--------------------------------
Class: B_Weap_Bow_ClusterBomb_Athena_C.B_Weap_Bow_Athena_Generic_C.B_Bow_Athena_Parent_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x14e0, Size: 8]
	float TL_LightBlink_Interpolation_F333F38B4214A9701E9113BE6454B071;//[Offset: 0x14e8, Size: 4]
	byte TL_LightBlink__Direction_F333F38B4214A9701E9113BE6454B071;//[Offset: 0x14ec, Size: 1]
	TimelineComponent* TL_LightBlink;//[Offset: 0x14f0, Size: 8]
	MaterialInstanceDynamic* MeshMaterial;//[Offset: 0x14f8, Size: 8]
	LinearColor VectorParam_LightOn;//[Offset: 0x1500, Size: 16]
	LinearColor VectorParam_LightOff;//[Offset: 0x1510, Size: 16]
	bool bLightsOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1520, Size: 1]
	float LightBlinkFrequency;//[Offset: 0x1524, Size: 4]
	TimerHandle BlinkTimerHandle;//[Offset: 0x1528, Size: 8]
	bool bBlinkOnFullyCharged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1530, Size: 1]
	SoundBase* BlinkSound_1P;//[Offset: 0x1538, Size: 8]
	float BlinkEmissiveLerpTime;//[Offset: 0x1540, Size: 4]
	SoundBase* BlinkSound_3P;//[Offset: 0x1548, Size: 8]
	bool bIsLocalClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 1]
	void ForceEmissiveOff(Vector CallFunc_Conv_LinearColorToVector_ReturnValue);// 0xbbc0600
	void TL_LightBlink__FinishedFunc();// 0xbbc0600
	void TL_LightBlink__UpdateFunc();// 0xbbc0600
	void DeactivateFullyChargedFX();// 0xbbc0600
	void BlinkLights();// 0xbbc0600
	void PlayBlinkSound();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void SpawnFullyChargedFX();// 0xbbc0600
	void OnReachedMaxCharge();// 0xbbc0600
	void OnRemoteClientReachedMaxCharge();// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void ExecuteUbergraph_B_Weap_Bow_ClusterBomb_Athena(int EntryPoint, bool Temp_bool_Variable, TimerHandle CallFunc_K2_SetTimer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_FMax_ReturnValue, Vector CallFunc_Conv_LinearColorToVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, SoundBase* K2Node_Select_Default);// 0xbbc0600

--------------------------------
Class: B_Weap_Bow_Athena_Generic_C.B_Bow_Athena_Parent_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object

--------------------------------
Class: B_Bow_Athena_Parent_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1348, Size: 8]
	AudioComponent* Charge_AudioComponent;//[Offset: 0x1350, Size: 8]
	AudioComponent* FullCharge_AudioComponent;//[Offset: 0x1358, Size: 8]
	FortPlayerPawn* PlayerPawn;//[Offset: 0x1360, Size: 8]
	bool ReachedMaxCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1368, Size: 1]
	bool ReachedMinCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1369, Size: 1]
	bool Charging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136a, Size: 1]
	class FortProjectileBase* Prj_Dummy;//[Offset: 0x1370, Size: 8]
	FortProjectileBase* DummyProjectile;//[Offset: 0x1378, Size: 8]
	float DummyExtent;//[Offset: 0x1380, Size: 4]
	float DummyMaxSpeed;//[Offset: 0x1384, Size: 4]
	float ProjectileVelocity;//[Offset: 0x1388, Size: 4]
	float DummyFriction;//[Offset: 0x138c, Size: 4]
	float DummyBouncieness;//[Offset: 0x1390, Size: 4]
	float DummyGravity;//[Offset: 0x1394, Size: 4]
	float DummyTimeStep;//[Offset: 0x1398, Size: 4]
	byte DummyCollisionChannel;//[Offset: 0x139c, Size: 1]
	ScalableFloat Row_MaxProjectileSpeed;//[Offset: 0x13a0, Size: 40]
	class Actor* TrajectoryClass;//[Offset: 0x13c8, Size: 8]
	BP_ProjectileTrajectory_Bow_Generic_C* BowTrajectory;//[Offset: 0x13d0, Size: 8]
	TimerHandle Timer_UpdateTrajectorySpline;//[Offset: 0x13d8, Size: 8]
	bool IsBowEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e0, Size: 1]
	SoundBase* LowTensionFire;//[Offset: 0x13e8, Size: 8]
	SoundBase* NormalTensionFire;//[Offset: 0x13f0, Size: 8]
	SoundBase* FullTensionFire;//[Offset: 0x13f8, Size: 8]
	SoundBase* FullTensionFireP1;//[Offset: 0x1400, Size: 8]
	SoundBase* LowTensionFireP1;//[Offset: 0x1408, Size: 8]
	SoundBase* NormalTensionFireP1;//[Offset: 0x1410, Size: 8]
	ParticleSystem* FX_AdditionalFire;//[Offset: 0x1418, Size: 8]
	ParticleSystem* FX_FullyCharge;//[Offset: 0x1420, Size: 8]
	SoundBase* Sound_OnCharge;//[Offset: 0x1428, Size: 8]
	NiagaraSystem* NS_AdditionalFire;//[Offset: 0x1430, Size: 8]
	NiagaraSystem* NS_FullyCHarge;//[Offset: 0x1438, Size: 8]
	FXSystemComponent* FX_FullyCharged;//[Offset: 0x1440, Size: 8]
	SoundBase* Sound_OnFullyCharged;//[Offset: 0x1448, Size: 8]
	HitResult Calculate Spline Hit Result;//[Offset: 0x1450, Size: 136]
	FName TrajectoryCollisionProfile;//[Offset: 0x14d8, Size: 8]
	void SpawnFullyChargedFX(FXSystemComponent* CallFunc_SpawnAltFXAttached_ReturnValue);// 0xbbc0600
	SoundBase* GetChargedWeaponFireSound(byte Channel, const bool bSecondaryFire, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetChargePercent_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_GetChargePercent_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_GetChargePercent_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetChargePercent_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool Temp_bool_Variable, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, Pawn* CallFunc_GetInstigator_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue);// 0xbbc0600
	SoundBase* GetFireSoundToPlay(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, Pawn* CallFunc_GetInstigator_ReturnValue, SoundBase* K2Node_Select_Default, bool CallFunc_IsLocallyControlled_ReturnValue, SoundBase* K2Node_Select_Default);// 0xbbc0600
	void SetMaxChargeReachedAndPlayAudio();// 0xbbc0600
	void StopDrawAudio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void StartDrawAudio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void SetupProjectileVariables(out Vector StartLocation, out Vector InitialVelocity, out float ProjectileVelocity, out Rotator OutRotation, float CallFunc_GetProjectilePitchOffset_ReturnValue, Vector CallFunc_GetDamageStartLocation_AimDir, Vector CallFunc_GetDamageStartLocation_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0xbbc0600
	void CalculateVelocity(out float Velocity, float CallFunc_GetChargePercent_ReturnValue, float CallFunc_GetProjectileSpeed_ReturnValue);// 0xbbc0600
	void CalculateTrajectorySpline(out HitResult CalculateSplineHitResult, float CallFunc_GetChargePercent_ReturnValue, float CallFunc_Lerp_ReturnValue, Vector CallFunc_SetupProjectileVariables_StartLocation, Vector CallFunc_SetupProjectileVariables_InitialVelocity, float CallFunc_SetupProjectileVariables_ProjectileVelocity, Rotator CallFunc_SetupProjectileVariables_OutRotation, HitResult CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutHitResult, Vector[] CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplinePoints, Vector[] CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplineTangents);// 0xbbc0600
	void SetDummyVariables(const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, byte CallFunc_GetCollisionObjectType_ReturnValue, FortProjectileBase* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_GetScaledCapsuleSize_OutRadius, float CallFunc_GetScaledCapsuleSize_OutHalfHeight, float CallFunc_FMax_ReturnValue, float CallFunc_GetGravityZ_ReturnValue);// 0xbbc0600
	void SetupTrajectoryProjectile(const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, BP_ProjectileTrajectory_Bow_Generic_C* K2Node_DynamicCast_AsBP_Projectile_Trajectory_Bow_Generic, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void OnReachedMinCharge();// 0xbbc0600
	void OnStartCharge();// 0xbbc0600
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void EndOfCharge();// 0xbbc0600
	void K2_OnUnEquip();// 0xbbc0600
	void OnChargeDown();// 0xbbc0600
	void OnChargeUp();// 0xbbc0600
	void OnEndCharge();// 0xbbc0600
	void ResetCharge();// 0xbbc0600
	void IncreaseDrawStrength();// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void OnReachedMaxCharge();// 0xbbc0600
	void DeactivateFullyChargedFX();// 0xbbc0600
	void OnRemoteClientReachedMaxCharge();// 0xbbc0600
	void OnRemoteClientReachedMinCharge();// 0xbbc0600
	void ExecuteUbergraph_B_Bow_Athena_Parent(int EntryPoint, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_Event_bPersistentFire, bool K2Node_Event_bSecondaryFire, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_CalculateTrajectorySpline_CalculateSplineHitResult, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_CalculateVelocity_Velocity, float K2Node_Event_DeltaSeconds, float CallFunc_GetChargePercent_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Controller* CallFunc_GetInstigatorController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalPlayerController_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_BooleanAND_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, FXSystemComponent* CallFunc_SpawnAltFXAttached_ReturnValue);// 0xbbc0600

--------------------------------
Class: BP_ProjectileTrajectory_Bow_Generic_C.FortProjectileTrajectory.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 8]
	StaticMeshComponent* Target;//[Offset: 0x240, Size: 8]
	SplineComponent* Spline;//[Offset: 0x248, Size: 8]
	int MaxMeshCount;//[Offset: 0x250, Size: 4]
	MaterialInstanceDynamic* SplineMID;//[Offset: 0x258, Size: 8]
	Object* Trajectory Owner;//[Offset: 0x260, Size: 8]
	TimerHandle Update Timer Handle;//[Offset: 0x268, Size: 8]
	Vector EndPointOffset;//[Offset: 0x270, Size: 12]
	float Right;//[Offset: 0x27c, Size: 4]
	float Up;//[Offset: 0x280, Size: 4]
	float SplineMeshLength;//[Offset: 0x284, Size: 4]
	float SplineMeshOffsetDistance;//[Offset: 0x288, Size: 4]
	FortWeaponRanged* OwnerWeapon;//[Offset: 0x290, Size: 8]
	Vector MuzzleOffset;//[Offset: 0x298, Size: 12]
	bool ValidTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	MaterialInstanceDynamic* TargetMID;//[Offset: 0x2a8, Size: 8]
	bool CheckForValidTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	float ProjMaxDistance;//[Offset: 0x2b4, Size: 4]
	void OnRep_InvalidTarget();// 0xbbc0600
	void SetShouldUpdateFromOwner(bool ShouldUpdate, Object* Owner, float Interval, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0xbbc0600
	void UpdateFromTrajectoryOwner(interface class K2Node_DynamicCast_AsFort_Trajectory_Ability_Interface, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void SetTrajectorySplineInternal(out Vector[] SplinePoints, out Vector[] SplineTangents, float LastPointDist, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_GetMuzzleLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, SplineMeshComponent* CallFunc_Array_Get_Item, Vector CallFunc_GetLocationAtSplinePoint_ReturnValue, Vector CallFunc_GetStartPosition_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, Vector CallFunc_Array_Get_Item, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, Vector CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetSplineLength_ReturnValue, float CallFunc_GetSplineLength_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_GetSplineLength_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_GetSplineLength_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SplineMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue, Vector CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void Pulse();// 0xbbc0600
	void SetTrajectorySpline(out const Vector[] SplinePoints, out const Vector[] SplineTangents);// 0xbbc0600
	void Check Valid Target(HitResult Trajectory Hit Result);// 0xbbc0600
	void ExecuteUbergraph_BP_ProjectileTrajectory_Bow_Generic(int EntryPoint, Vector CallFunc_K2_GetActorLocation_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const Transform Temp_struct_Variable, SplineMeshComponent* CallFunc_AddComponent_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, const Vector[] K2Node_Event_SplinePoints, const Vector[] K2Node_Event_SplineTangents, SplineMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, HitResult K2Node_CustomEvent_Trajectory_Hit_Result, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600

--------------------------------
Class: NetworkPredictionReplicatedManager.Actor.Object
	SharedPackageMap SharedPackageMap;//[Offset: 0x220, Size: 16]

--------------------------------
Class: SharedPackageMap
	SharedPackageMapItem[] Items;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SharedPackageMapItem
	Object* SoftPtr;//[Offset: 0x0, Size: 40]

--------------------------------
Class: AthenaSupplyDrop_Llama_C.FortAthenaSupplyDrop.BuildingGameplayActor.BuildingActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x8f8, Size: 8]
	AudioComponent* treasure_pinata_loop_Cue;//[Offset: 0x900, Size: 8]
	StaticMeshComponent* LlamaStaticMesh;//[Offset: 0x908, Size: 8]
	BoxComponent* BoxCollision;//[Offset: 0x910, Size: 8]
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x918, Size: 8]
	FortPawn* MyInteractingPawn;//[Offset: 0x920, Size: 8]
	FName LootTableName;//[Offset: 0x928, Size: 8]
	Vector LootSpawnOffset;//[Offset: 0x930, Size: 12]
	ParticleSystem* LlamaLootFX;//[Offset: 0x940, Size: 8]
	FName FXSocketName;//[Offset: 0x948, Size: 8]
	SoundBase* Sound_Looted;//[Offset: 0x950, Size: 8]
	SoundBase* Sound_Destroyed;//[Offset: 0x958, Size: 8]
	SoundBase* Sound_Ambient;//[Offset: 0x960, Size: 8]
	bool Looted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	FortPlayerController* ControllerWhoOpenedLlama;//[Offset: 0x970, Size: 8]
	FName ObjBackendName;//[Offset: 0x978, Size: 8]
	FortQuestItemDefinition* QuestItem;//[Offset: 0x980, Size: 8]
	bool CreativeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 1]
	float Initial Fall Delay;//[Offset: 0x98c, Size: 4]
	Vector FinalDestination;//[Offset: 0x990, Size: 12]
	float SoundIndicatorUpdateInterval;//[Offset: 0x99c, Size: 4]
	void Analytics(out const FortItemEntry[] ItemsToSpawn, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void OnRep_FinalDestination(HitResult FakeHitResult, bool CallFunc_HasAuthority_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0xbbc0600
	void OnSetCustomDepthStencilValue(out const PrimitiveComponent*[] PrimComponents, bool bUseCustomDepth, int StencilValue, out bool bOutConsume, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, PrimitiveComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void PlayLootedFX(bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_IsClosed_Variable, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0xbbc0600
	void OnRep_Looted();// 0xbbc0600
	void Setup Bind To Building Actor(Object* Object, delegate K2Node_CreateDelegate_OutputDelegate, BuildingActor* K2Node_DynamicCast_AsBuilding_Actor, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	FText BlueprintGetInteractionString(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted);// 0xbbc0600
	void GetLootSpawnLocation(out Vector LootSpawnLocation, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_RandomUnitVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xbbc0600
	void SpawnLoot(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, FName CallFunc_GetLootTierGroupOverride_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, Vector CallFunc_GetLootSpawnLocation_LootSpawnLocation, int CallFunc_GetLootLevel_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Has_Been_Initd_Variable, FName K2Node_Select_Default, FortItemEntry[] CallFunc_PickLootDrops_OutLootToDrop, bool CallFunc_PickLootDrops_ReturnValue, bool Temp_bool_IsClosed_Variable, FortItemEntry CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FortWorldItemDefinition* K2Node_DynamicCast_AsFort_World_Item_Definition, bool K2Node_DynamicCast_bSuccess, FortPickup* CallFunc_SpawnPickup_ReturnValue);// 0xbbc0600
	bool BlueprintCanInteract(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted, const byte InteractionType, bool CallFunc_Not_PreBool_ReturnValue);// 0xbbc0600
	void OnLandingLocationChanged(Actor* DamagedActor, float Damage, Controller* InstigatedBy, Actor* DamageCauser, Vector HitLocation, PrimitiveComponent* FHitComponent, FName BoneName, Vector Momentum);// 0xbbc0600
	void Multicast_ApplyGravityForFall();// 0xbbc0600
	void BndEvt__ProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xbbc0600
	void OnDeathServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void BlueprintOnInteract(const FortPawn* InteractingPawn, const byte InteractionBeingAttempted);// 0xbbc0600
	void PlaylistLoaded(FName PlaylistName, out const GameplayTagContainer PlaylistContextTags);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void Show audio indicator();// 0xbbc0600
	void ExecuteUbergraph_AthenaSupplyDrop_Llama(int EntryPoint, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, const HitResult K2Node_ComponentBoundEvent_ImpactResult, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, delegate K2Node_CreateDelegate_OutputDelegate, Actor* K2Node_CustomEvent_DamagedActor, float K2Node_CustomEvent_Damage, Controller* K2Node_CustomEvent_InstigatedBy, Actor* K2Node_CustomEvent_DamageCauser, Vector K2Node_CustomEvent_HitLocation, PrimitiveComponent* K2Node_CustomEvent_FHitComponent, FName K2Node_CustomEvent_BoneName, Vector K2Node_CustomEvent_Momentum, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, const FortPawn* K2Node_Event_InteractingPawn, const byte K2Node_Event_InteractionBeingAttempted, Controller* CallFunc_GetController_ReturnValue, FortAthenaAIBotController* K2Node_DynamicCast_AsFort_Athena_AIBot_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, FortPlayerController*[] K2Node_MakeArray_Array, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted, bool CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, GameplayTagContainer CallFunc_GetAthenaPlaylistContextTags_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasTag_ReturnValue, FName K2Node_CustomEvent_PlaylistName, const GameplayTagContainer K2Node_CustomEvent_PlaylistContextTags, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasTag_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_GroundTrace_OutHit, bool CallFunc_GroundTrace_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_HasAuthority_ReturnValue, const FortPlayerController*[] Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xbbc0600

--------------------------------
Class: ContextTutorial_Mutator_C.FortAthenaMutator_ContextTutorial.FortAthenaMutator.FortGameplayMutator.Info.Actor.Object

--------------------------------
Class: FortAthenaMutator_ContextTutorial.FortAthenaMutator.FortGameplayMutator.Info.Actor.Object
	MulticastInlineDelegateProperty OnShowButtonHighlight;//[Size: 16]
	bool bEnableTutorials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	int bContextTutorialMinimumLevelOverride;//[Offset: 0x2d4, Size: 4]
	SoundCue* MessageSound;//[Offset: 0x2d8, Size: 8]
	int ConcurrentActiveContextualTutorials;//[Offset: 0x2e0, Size: 4]
	float CooldownTimeBetweenContextualTutorialTips;//[Offset: 0x2e4, Size: 4]
	FortContextualTutorialDefinition*[] ContextualTutorialDefinitions;//[Offset: 0x2e8, Size: 16]
	float InCombatGraceTime;//[Offset: 0x2f8, Size: 4]
	float RayCastDistanceForNearbyEnemyCentimeter;//[Offset: 0x2fc, Size: 4]
	float WorldMarkerPadding;//[Offset: 0x300, Size: 4]
	FName WorldMarkerSockerName;//[Offset: 0x304, Size: 8]
	bool bEnableWorldMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bEnableHighlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	FortContextualTutorialController*[] Controllers;//[Offset: 0x310, Size: 16]
	void HandleGamePhaseChanged(enum GamePhase);// 0xcef2030

--------------------------------
Class: Athena_GameState_C.FortGameStateBR.FortGameStateAthena.FortGameStateZone.FortGameState_InGame.FortGameState.FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c70, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c78, Size: 8]
	SoundBase* Victory_Royale_Sound;//[Offset: 0x2c80, Size: 8]
	void OnWinnerAnnounced();// 0xbbc0600
	void ExecuteUbergraph_Athena_GameState(int EntryPoint, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, bool CallFunc_CanUseSlowMotionOnVictory_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortGameStateBR.FortGameStateAthena.FortGameStateZone.FortGameState_InGame.FortGameState.FortGameStateBase.PlayspaceGameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: B_FortGlobalAbilityTargetingActor_C.FortGlobalAbilityTargetingActor.Info.Actor.Object

--------------------------------
Class: UIMapManagerBR_C.FortInGameMapManagerAthena.FortInGameMapManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x700, Size: 8]

--------------------------------
Class: FortInGameMapManagerAthena.FortInGameMapManager.Actor.Object
	bool bDrawMapLocationsIfFogged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d4, Size: 1]
	bool bDrawSpecialActorIconsIfFogged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6d4, Size: 1]
	bool bDrawSquadPinsIfFogged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6d4, Size: 1]
	bool bDrawMapIndicatorsIfFogged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6d4, Size: 1]
	bool bDrawEliminationsIfFogged;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6d4, Size: 1]
	MaterialInterface* MapMaskMaterial;//[Offset: 0x6e8, Size: 8]
	MaterialInstanceDynamic* MapMaskMaterialMID;//[Offset: 0x6f0, Size: 8]
	void OnEndSkydivingFromBus(FortPlayerControllerZone* FortPC);// 0xd03a460
	void OnBeginSkydivingFromBus(FortPlayerControllerZone* FortPC);// 0xd03a3b0
	void OnAthenaPlayerControllerEndPlay(Actor* Actor, byte EndPlayReason);// 0xd03a2c0
	void HandlePlayerTeamIndexChanged();// 0xd03a2a4
	void HandleLocalPlayerStateSet();// 0xd03a290

--------------------------------
Class: GCNL_Athena_Inner_ActiveEffect_C.FortGameplayCueNotify_Loop.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object

--------------------------------
Class: FortGameplayCueNotify_Loop.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	FortBurstEffectData ApplicationBurst;//[Offset: 0x310, Size: 248]
	FortGameplayCueSpawnResult ApplicationResult;//[Offset: 0x408, Size: 64]
	FortGameplayCueAttachInfo DefaultLoopingAttachment;//[Offset: 0x448, Size: 36]
	FortGameplayCueParticleInfo[] LoopingParticles;//[Offset: 0x470, Size: 16]
	FortGameplayCueAudioInfo_Looping[] LoopingSounds;//[Offset: 0x480, Size: 16]
	FortGameplayCueForceFeedbackInfo LoopingForceFeedbackEffect;//[Offset: 0x490, Size: 40]
	FortGameplayCueCameraLensEffectInfo LoopingCameraLensEffect;//[Offset: 0x4b8, Size: 24]
	FortGameplayCueCameraShakeInfo LoopingCameraShake;//[Offset: 0x4d0, Size: 40]
	FortGameplayCueSpawnResult LoopingResult;//[Offset: 0x4f8, Size: 64]
	FortBurstEffectData RecurringBurst;//[Offset: 0x538, Size: 248]
	FortGameplayCueSpawnResult RecurringResult;//[Offset: 0x630, Size: 64]
	FortBurstEffectData RemovalBurst;//[Offset: 0x670, Size: 248]
	FortGameplayCueSpawnResult RemovalResult;//[Offset: 0x768, Size: 64]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	float TickInterval;//[Offset: 0x7ac, Size: 4]
	byte TickGroup;//[Offset: 0x7b0, Size: 1]
	void OnRemovalNiagara(Actor* MyTarget, out const GameplayCueParameters Parameters, out const NiagaraComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnRemovalGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnRemoval(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnRecurringNiagara(Actor* MyTarget, out const GameplayCueParameters Parameters, out const NiagaraComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnRecurringGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnRecurring(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnLoopingStartNiagara(Actor* MyTarget, out const GameplayCueParameters Parameters, out const NiagaraComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents);// 0xbbc0600
	void OnLoopingStartGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents);// 0xbbc0600
	void OnLoopingStart(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents);// 0xbbc0600
	void OnApplicationNiagara(Actor* MyTarget, out const GameplayCueParameters Parameters, out const NiagaraComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnApplicationGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnApplication(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600

--------------------------------
Class: FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	FortGameplayCueSpawnCondition DefaultCondition;//[Offset: 0x280, Size: 56]
	FortGameplayCueAttachInfo DefaultAttachment;//[Offset: 0x2b8, Size: 36]
	GameplayTagContainer HUDElementTag;//[Offset: 0x2e0, Size: 32]
	Actor* ExecutionTarget;//[Offset: 0x300, Size: 8]

--------------------------------
Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	float AutoDestroyDelay;//[Offset: 0x224, Size: 4]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	GameplayTag GameplayCueTag;//[Offset: 0x22c, Size: 8]
	FName GameplayCueName;//[Offset: 0x234, Size: 8]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	int NumPreallocatedInstances;//[Offset: 0x244, Size: 4]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x73327d8
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x73325b4
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x7332e44
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x7332c20
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x73329fc
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void K2_EndGameplayCue();// 0x7335f54

--------------------------------
Class: FortBurstEffectData
	FortGameplayCueParticleInfo[] BurstParticles;//[Offset: 0x0, Size: 16]
	FortGameplayCueAudioInfo[] BurstSounds;//[Offset: 0x10, Size: 16]
	FortGameplayCueCameraShakeInfo BurstCameraShake;//[Offset: 0x20, Size: 40]
	FortGameplayCueCameraLensEffectInfo BurstCameraLensEffect;//[Offset: 0x48, Size: 24]
	FortGameplayCueForceFeedbackInfo BurstForceFeedbackEffect;//[Offset: 0x60, Size: 40]
	FortGameplayCueDecalInfo BurstDecal;//[Offset: 0x88, Size: 112]

--------------------------------
Class: FortGameplayCueParticleInfo
	FortGameplayCueSpawnCondition Condition;//[Offset: 0x0, Size: 56]
	FortGameplayCueAttachInfo Attachment;//[Offset: 0x38, Size: 36]
	enum FXType;//[Offset: 0x5c, Size: 1]
	NiagaraSystem* NiagaraSystem;//[Offset: 0x60, Size: 8]
	ParticleSystem* ParticleSystem;//[Offset: 0x68, Size: 8]
	bool bCastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bOverrideCondition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	bool bOverrideAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 1]

--------------------------------
Class: FortGameplayCueSpawnCondition
	enum SourceCondition;//[Offset: 0x0, Size: 1]
	byte[] AllowedSurfaces;//[Offset: 0x8, Size: 16]
	byte[] DisallowedSurfaces;//[Offset: 0x18, Size: 16]
	float ChanceToPlay;//[Offset: 0x28, Size: 4]
	enum Significance;//[Offset: 0x2c, Size: 1]
	int RequiredDetailMode;//[Offset: 0x30, Size: 4]
	bool bRequireVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: FortGameplayCueAttachInfo
	FName SocketName;//[Offset: 0x0, Size: 8]
	enum AttachType;//[Offset: 0x8, Size: 1]
	bool bAttachToWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bAttachToHitResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bUseUnsmoothedNetworkPosition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bIgnoreScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bIgnoreRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	Vector OverrideScale;//[Offset: 0xc, Size: 12]
	Rotator OverrideRotation;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FortGameplayCueAudioInfo
	FortGameplayCueSpawnCondition Condition;//[Offset: 0x0, Size: 56]
	FortGameplayCueAttachInfo Attachment;//[Offset: 0x38, Size: 36]
	SoundBase* SoundCue;//[Offset: 0x60, Size: 8]
	float DelayBeforePlayInSeconds;//[Offset: 0x68, Size: 4]
	bool bOverrideCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool bOverrideAttachment;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]

--------------------------------
Class: FortGameplayCueCameraShakeInfo
	class MatineeCameraShake* Shake;//[Offset: 0x0, Size: 8]
	float Scale;//[Offset: 0x8, Size: 4]
	enum Playspace;//[Offset: 0xc, Size: 1]
	Rotator UserPlaySpaceRotation;//[Offset: 0x10, Size: 12]
	bool bAlwaysPlayOnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bCalculateUserPlaySpaceRotationFromLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bCancelOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	FortGameplayCueAOEInfo Falloff;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortGameplayCueAOEInfo
	float InnerRadius;//[Offset: 0x0, Size: 4]
	float OuterRadius;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortGameplayCueCameraLensEffectInfo
	class Actor* CameraLensEffect;//[Offset: 0x0, Size: 8]
	FortGameplayCueAOEInfo Falloff;//[Offset: 0x8, Size: 8]
	bool bAlwaysPlayOnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bCancelOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: FortGameplayCueForceFeedbackInfo
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 8]
	float EffectRadius;//[Offset: 0x8, Size: 4]
	ForceFeedbackEffect* FarForceFeedbackEffect;//[Offset: 0x10, Size: 8]
	float FarEffectRadius;//[Offset: 0x18, Size: 4]
	FName EffectTag;//[Offset: 0x1c, Size: 8]
	bool bAlwaysPlayOnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: FortGameplayCueDecalInfo
	FortGameplayCueSpawnCondition Condition;//[Offset: 0x0, Size: 56]
	FortGameplayCueAttachInfo Attachment;//[Offset: 0x38, Size: 36]
	bool bOverrideCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bOverrideAttachment;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	bool bOverrideFadeOut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	class DecalActor* Decal;//[Offset: 0x60, Size: 8]
	float FadeOutStartDelay;//[Offset: 0x68, Size: 4]
	float FadeOutDuration;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x220, Size: 8]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xd8055e0
	MaterialInterface* GetDecalMaterial();// 0xd8055ac
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xd805570

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 8]
	int SortOrder;//[Offset: 0x200, Size: 4]
	float FadeScreenSize;//[Offset: 0x204, Size: 4]
	float FadeStartDelay;//[Offset: 0x208, Size: 4]
	float FadeDuration;//[Offset: 0x20c, Size: 4]
	float FadeInDuration;//[Offset: 0x210, Size: 4]
	float FadeInStartDelay;//[Offset: 0x214, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	Vector DecalSize;//[Offset: 0x21c, Size: 12]
	void SetSortOrder(int Value);// 0xd8053e8
	void SetFadeScreenSize(float NewFadeScreenSize);// 0xd805340
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0xb9f4b84
	void SetFadeIn(float StartDelay, float Duaration);// 0xb9f4aa0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0xd805298
	float GetFadeStartDelay();// 0xd805264
	float GetFadeInStartDelay();// 0xd805230
	float GetFadeInDuration();// 0xd8051fc
	float GetFadeDuration();// 0xd8051c8
	MaterialInterface* GetDecalMaterial();// 0xd805194
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0xd805158

--------------------------------
Class: FortGameplayCueSpawnResult
	FXSystemComponent*[] ParticleComponents;//[Offset: 0x0, Size: 16]
	AudioComponent*[] AudioComponents;//[Offset: 0x10, Size: 16]
	MatineeCameraShake* CameraShake;//[Offset: 0x20, Size: 8]
	interface class * CameraLensEffect;//[Offset: 0x28, Size: 16]
	DecalActor* DecalActor;//[Offset: 0x38, Size: 8]

--------------------------------
Class: FortGameplayCueAudioInfo_Looping.FortGameplayCueAudioInfo
	float LoopingSoundFadeOutDuration;//[Offset: 0x70, Size: 4]
	float LoopingSoundVolumeLevel;//[Offset: 0x74, Size: 4]

--------------------------------
Class: GCN_Loop_PlayerWorldPFX_Persistent_C.FortGameplayCueNotify_Loop.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7b8, Size: 8]
	NiagaraComponent* NS_Loop_WorldFX_Persistent_motes01;//[Offset: 0x7c0, Size: 8]
	NiagaraComponent* NS_Loop_WorldFX_Persistent;//[Offset: 0x7c8, Size: 8]
	Actor* My Target;//[Offset: 0x7d0, Size: 8]
	TimerHandle Timer;//[Offset: 0x7d8, Size: 8]
	float LoopingCheckTime;//[Offset: 0x7e0, Size: 4]
	void SpawnNiagara();// 0xbbc0600
	void OnLoopingStartGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents);// 0xbbc0600
	void OnApplicationGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnLoopingStartNiagara(Actor* MyTarget, out const GameplayCueParameters Parameters, out const NiagaraComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents);// 0xbbc0600
	void OnRemovalGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void ExecuteUbergraph_GCN_Loop_PlayerWorldPFX_Persistent(int EntryPoint, FortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FortPlayerCameraSpectator* K2Node_DynamicCast_AsFort_Player_Camera_Spectator, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const FXSystemComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const FXSystemComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, MatineeCameraShake* K2Node_Event_BurstCameraShakeInstance, DecalActor* K2Node_Event_BurstDecalInstance, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const NiagaraComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const FXSystemComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, MatineeCameraShake* K2Node_Event_BurstCameraShakeInstance, DecalActor* K2Node_Event_BurstDecalInstance, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortPlayerCameraSpectator.FortPlayerCameraBase.PlayerCameraManager.Actor.Object
	FortCinematicCamera* SpectatorCam;//[Offset: 0x2e70, Size: 8]

--------------------------------
Class: PlayerPawn_Athena_C.PlayerPawn_Athena_Generic_C.PlayerPawn_Athena_Generic_Parent_C.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4020, Size: 8]
	FortContrailsComponent* FortContrails;//[Offset: 0x4028, Size: 8]
	FortUnderwaterDamageComponent* FortUnderwaterDamage;//[Offset: 0x4030, Size: 8]
	float Timeline_0_BlendWeight_A4943458400C3662DB243099F9EAC7E8;//[Offset: 0x4038, Size: 4]
	byte Timeline_0__Direction_A4943458400C3662DB243099F9EAC7E8;//[Offset: 0x403c, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x4040, Size: 8]
	SkeletalMeshComponent* TargetHead;//[Offset: 0x4048, Size: 8]
	SkeletalMeshComponent* TargetBody;//[Offset: 0x4050, Size: 8]
	MaterialInterface*[] PawnHeadMaterials;//[Offset: 0x4058, Size: 16]
	MaterialInterface*[] PawnBodyMaterials;//[Offset: 0x4068, Size: 16]
	GameplayTagContainer TC_FlakVest;//[Offset: 0x4078, Size: 32]
	GameplayEventData Event Data;//[Offset: 0x4098, Size: 176]
	GameplayTag EventSpawnEffect;//[Offset: 0x4148, Size: 8]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4150, Size: 1]
	FortWeapon* MenuGoingCommandowWeapon;//[Offset: 0x4158, Size: 8]
	SoundBase* SafeZonePassThroughSound;//[Offset: 0x4160, Size: 8]
	bool bHasBeenOutsideSafeZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4168, Size: 1]
	LinearColor ThreatColor;//[Offset: 0x416c, Size: 16]
	SoundBase* PlayerKilledSound;//[Offset: 0x4180, Size: 8]
	ParticleSystemComponent* WindDebrisParticles;//[Offset: 0x4188, Size: 8]
	ParticleSystemComponent* FallingRainParticles;//[Offset: 0x4190, Size: 8]
	ParticleSystemComponent* StormAuraParticles;//[Offset: 0x4198, Size: 8]
	Vector LightningSpawnLocation;//[Offset: 0x41a0, Size: 12]
	float LightningIntensityMin;//[Offset: 0x41ac, Size: 4]
	float LightningIntensityMax;//[Offset: 0x41b0, Size: 4]
	Actor* SafeZoneActor;//[Offset: 0x41b8, Size: 8]
	float LightningIntensity;//[Offset: 0x41c0, Size: 4]
	PointLightComponent* RandomLightningLight;//[Offset: 0x41c8, Size: 8]
	float LightningTimelinePlaySpeedMin;//[Offset: 0x41d0, Size: 4]
	float LightningTimelinePlaySpeedMax;//[Offset: 0x41d4, Size: 4]
	float LightningFlashDiameter;//[Offset: 0x41d8, Size: 4]
	float LightningFlashHeight;//[Offset: 0x41dc, Size: 4]
	float LightningFlashRepeatDelayMin;//[Offset: 0x41e0, Size: 4]
	float LightningFlashRepeatDelayMax;//[Offset: 0x41e4, Size: 4]
	EmitterCameraLensEffectBase* RainCameraLensParticles;//[Offset: 0x41e8, Size: 8]
	float %ChanceOfLightningMesh;//[Offset: 0x41f0, Size: 4]
	bool ShowInvulnerableVisuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f4, Size: 1]
	AudioComponent* StormAudioLoop_Inst;//[Offset: 0x41f8, Size: 8]
	float StormAudioVolume;//[Offset: 0x4200, Size: 4]
	AudioComponent* FallingAudioLoop_Inst;//[Offset: 0x4208, Size: 8]
	bool bIsPlayingFallingSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4210, Size: 1]
	float PlayerAttributes_Speed_Walk;//[Offset: 0x4214, Size: 4]
	float PlayerAttributes_Speed_Run;//[Offset: 0x4218, Size: 4]
	float PlayerAttributes_Speed_Sprint;//[Offset: 0x421c, Size: 4]
	int MaxTrailsLOD;//[Offset: 0x4220, Size: 4]
	PostProcessComponent* MobilePostProcess;//[Offset: 0x4228, Size: 8]
	bool bIsOutsideSafeZoneCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4230, Size: 1]
	MaterialInstanceDynamic*[] ResOutMaterials;//[Offset: 0x4238, Size: 16]
	DuplicateResOutMesh_C* RezInFXActor;//[Offset: 0x4248, Size: 8]
	bool bQueueRezIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4250, Size: 1]
	DuplicateResOutMesh_C* RezOutFXActor;//[Offset: 0x4258, Size: 8]
	bool bQueueRezOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4260, Size: 1]
	bool bWasEverInWarmUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4261, Size: 1]
	bool bStormAudioCleanedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4262, Size: 1]
	Transform Box Local Transform;//[Offset: 0x4270, Size: 48]
	float BoundsRadius;//[Offset: 0x42a0, Size: 4]
	PointLightComponent* TeleportationPointLight;//[Offset: 0x42a8, Size: 8]
	float MaxLightIntensity;//[Offset: 0x42b0, Size: 4]
	FName Socket_MeshTop;//[Offset: 0x42b4, Size: 8]
	FName Socket_MeshBot;//[Offset: 0x42bc, Size: 8]
	FName MIDParam_Transition;//[Offset: 0x42c4, Size: 8]
	FName MIDParam_DissolvePercent;//[Offset: 0x42cc, Size: 8]
	FName MIDParam_DissolveDirection;//[Offset: 0x42d4, Size: 8]
	FName MIDParam_DissolveBaseLoc;//[Offset: 0x42dc, Size: 8]
	FName MIDParam_DissolveDistance;//[Offset: 0x42e4, Size: 8]
	FName MIDParam_DissolveFirstSpawn;//[Offset: 0x42ec, Size: 8]
	MaterialInterface* Mat_CharacterDissolve;//[Offset: 0x42f8, Size: 8]
	MaterialInstanceDynamic*[] DissolveMIDs;//[Offset: 0x4300, Size: 16]
	bool bUseNewTeleportFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4310, Size: 1]
	GameplayTag OutsideSafeZoneGameplayCueTag;//[Offset: 0x4314, Size: 8]
	int SafeZonePhase;//[Offset: 0x431c, Size: 4]
	int WhichSafeZoneTag;//[Offset: 0x4320, Size: 4]
	bool bOutsideSafeZoneGameplayCueActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4324, Size: 1]
	ScalableFloat SafeZoneDamageScalableFloat;//[Offset: 0x4328, Size: 40]
	bool bFrontendPartyInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4350, Size: 1]
	bool bLockOnInteractionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4351, Size: 1]
	MulticastInlineDelegateProperty ResIn;//[Size: 16]
	MulticastInlineDelegateProperty ResOut;//[Size: 16]
	MulticastInlineDelegateProperty SwingRight;//[Size: 16]
	MulticastInlineDelegateProperty SwingLeft;//[Size: 16]
	bool bSkeletalArrayReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4398, Size: 1]
	int CurDissolveSetupAttempt;//[Offset: 0x439c, Size: 4]
	SoundBase* DBNOEnterSound;//[Offset: 0x43a0, Size: 8]
	MulticastInlineDelegateProperty onFadeToWhiteTeleported;//[Size: 16]
	bool Is_Ashton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b8, Size: 1]
	ParticleSystemComponent* Ashton;//[Offset: 0x43c0, Size: 8]
	MulticastInlineDelegateProperty SwingRightEnd;//[Size: 16]
	MulticastInlineDelegateProperty SwingLeftEnd;//[Size: 16]
	GameplayTag PhoneGhostCue;//[Offset: 0x43e8, Size: 8]
	GameplayTag WhiteoutCue;//[Offset: 0x43f0, Size: 8]
	GameplayTag OutsideSafeZoneCue;//[Offset: 0x43f8, Size: 8]
	GameplayTag OutsideSafeZone2Cue;//[Offset: 0x4400, Size: 8]
	GameplayTag OutsideSafeZone3Cue;//[Offset: 0x4408, Size: 8]
	bool PlayRespawnFXOnSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4410, Size: 1]
	FortPlayerPawnAthena* PlayerPawnAthena;//[Offset: 0x4418, Size: 8]
	MulticastInlineDelegateProperty SwingRight2;//[Size: 16]
	MulticastInlineDelegateProperty SwingLeft2;//[Size: 16]
	bool TestProceduralWaterInIsolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4440, Size: 1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4441, Size: 1]
	bool Is First Water Body;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4442, Size: 1]
	bool Is Last Water Body;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4443, Size: 1]
	float AccumulatedNormalizedDiveSpeed;//[Offset: 0x4444, Size: 4]
	GameplayTag WaterSprintBoostTag;//[Offset: 0x4448, Size: 8]
	MulticastInlineDelegateProperty CCPM_isHiddenInProp;//[Size: 16]
	<Object*,PawnHighlight> PawnHighlights;//[Offset: 0x4460, Size: 80]
	Object* Current Highlight Source;//[Offset: 0x44b0, Size: 8]
	float Current Highlight Priority;//[Offset: 0x44b8, Size: 4]
	PawnHighlight Invulnerable Highlight;//[Offset: 0x44bc, Size: 48]
	FCreativeEffectColorIndex LastCreativeEffectColorIndex;//[Offset: 0x44ec, Size: 8]
	bool IsGalileo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44f4, Size: 1]
	ScalableFloat HotFixSnow;//[Offset: 0x44f8, Size: 40]
	<FName> NoSnowPlaylists;//[Offset: 0x4520, Size: 80]
	GameplayTag GalileoPlaylistTag;//[Offset: 0x4570, Size: 8]
	MaterialInstanceDynamic*[] WeaponMIDs;//[Offset: 0x4578, Size: 16]
	int AmountOfTimesToAttemptRestoreMats;//[Offset: 0x4588, Size: 4]
	GameplayTag TC_PawnAthenaNPC;//[Offset: 0x458c, Size: 8]
	float HitGlowBrightnessScalar;//[Offset: 0x4594, Size: 4]
	MaterialInterface*[] CurrentWeaponMaterials;//[Offset: 0x4598, Size: 16]
	SkeletalMeshComponent*[] CurrentWeaponMeshes;//[Offset: 0x45a8, Size: 16]
	MaterialInstanceDynamic*[] WeaponDissolveMIDs;//[Offset: 0x45b8, Size: 16]
	float HitGlowBrightnessScalar_Mobile;//[Offset: 0x45c8, Size: 4]
	GameplayTag TC_PawnAthenaDecoy;//[Offset: 0x45cc, Size: 8]
	float ScaleRate;//[Offset: 0x45d4, Size: 4]
	GameplayTagContainer TetherQuestTag;//[Offset: 0x45d8, Size: 32]
	FName FirefliesTag;//[Offset: 0x45f8, Size: 8]
	Transform RightSideRim_Transform;//[Offset: 0x4600, Size: 48]
	SpotLightComponent* Right Side Rim Light;//[Offset: 0x4630, Size: 8]
	float Rim light Shadow Bias;//[Offset: 0x4638, Size: 4]
	float Rim Light Attenuation Radius;//[Offset: 0x463c, Size: 4]
	float Rim Light Intensity;//[Offset: 0x4640, Size: 4]
	Rotator PlayerAimRotation;//[Offset: 0x4644, Size: 12]
	ScalableFloat ControlRotationReplicationTickRate;//[Offset: 0x4650, Size: 40]
	GameplayTag Elimination Rez Sequence GC;//[Offset: 0x4678, Size: 8]
	GameplayTag Creative Respawn Teleportation GC;//[Offset: 0x4680, Size: 8]
	GameplayTag Teleport In GC;//[Offset: 0x4688, Size: 8]
	float RimlightDistanceFromCamera;//[Offset: 0x4690, Size: 4]
	float RimlightOffsetFromCamera;//[Offset: 0x4694, Size: 4]
	LinearColor Rim Light Color - Night;//[Offset: 0x4698, Size: 16]
	LinearColor Rim Light Color - Day;//[Offset: 0x46a8, Size: 16]
	GameplayTag PhoneModeratorModeGameplayCue;//[Offset: 0x46b8, Size: 8]
	GameplayTag PhoneInvulnerableGameplayCue;//[Offset: 0x46c0, Size: 8]
	void Get Creative Effect Data(out FCreativeEffectColorIndex Effect Color);// 0xbbc0600
	void Hide Character Parts(bool IsHidden, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, byte[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, byte CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, SceneComponent*[] CallFunc_GetChildrenComponents_Children, SceneComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Update Rim Light Location(byte CallFunc_GetCurrentDayPhase_ReturnValue, byte CallFunc_GetCurrentDayPhase_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, byte Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, float K2Node_Select_Default, Pawn* CallFunc_GetPlayerPawn_ReturnValue, byte Temp_byte_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, FortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, LinearColor K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_TransformLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Rotator CallFunc_FindLookAtRotation_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0xbbc0600
	void handleCvarsUpdated(FString CVarName, FString l_cvarName, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0xbbc0600
	void OnRep_PlayerAimRotation();// 0xbbc0600
	void GetAimPoint(out Rotator ControlRotation, Rotator CallFunc_GetControlRotation_ReturnValue);// 0xbbc0600
	void validateRimLight(bool l_usePhysicalRimlight, SpringArmComponent* l_springArm, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_GetConsoleVariableBoolValue_ReturnValue, SpotLightComponent* CallFunc_AddComponent_ReturnValue);// 0xbbc0600
	bool PawnIsDecoy(bool CallFunc_HasTag_ReturnValue);// 0xbbc0600
	bool PawnIsNPC(bool CallFunc_HasTag_ReturnValue);// 0xbbc0600
	void RemoveSkeletalMeshComponentsFromWeaponObject(FortWeapon* WeaponObject, int ComponentIndexOffset, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SkeletalMeshComponentBudgeted*[] CallFunc_GetWeaponMeshes_WeaponMeshes, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MaterialInterface* Temp_wildcard_Variable, SkeletalMeshComponentBudgeted* CallFunc_Array_Get_Item, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0xbbc0600
	void AddSkeletalMeshComponentsFromWeaponObject(FortWeapon* WeaponObject, MaterialInterface* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponentBudgeted*[] CallFunc_GetWeaponMeshes_WeaponMeshes, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SkeletalMeshComponentBudgeted* CallFunc_Array_Get_Item, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_PawnIsNPC_ReturnValue, MaterialInterface* K2Node_Select_Default, bool CallFunc_SetupDissolveFx_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void GalileoMaterialSetup(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Get Highest Priority Highlight(out Object* Source, out PawnHighlight Top Priority, Object* Best Source, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PawnHighlight CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Object*[] CallFunc_Map_Keys_Keys, Object* CallFunc_Array_Get_Item, PawnHighlight CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PawnHighlight CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0xbbc0600
	void Highlight Pawn from Source(Object* Source, PawnHighlight Highlight, bool Only Update If Current, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, PawnHighlight CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xbbc0600
	void Remove Pawn Highlight from Source(Object* Source, Object* CallFunc_Get_Highest_Priority_Highlight_Source, PawnHighlight CallFunc_Get_Highest_Priority_Highlight_Top_Priority, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Map_Remove_ReturnValue);// 0xbbc0600
	void ApplyPawnHighlight(Object* Source, PawnHighlight HitGlow, float CallFunc_Add_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void OnRep_PlayRespawnFXOnSpawn();// 0xbbc0600
	void LockonSearchCompleteTimedOut();// 0xbbc0600
	void OnLockOnSearchCompleted(out bool bConsumeEvent, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0xbbc0600
	void SetPartyInProgress(bool bIsPartyInProgress);// 0xbbc0600
	void CleanUpTeleportationFXLight(bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void RestoreCharacterMats(out bool bFullyCompleted, int CurrentReplacementIndex, int Itr, int Temp_int_Loop_Counter_Variable, MaterialInstanceDynamic* Temp_wildcard_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void SetPetHidden(bool NewHidden, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void SetupDissolveFx(bool Temp_bool_Variable, MaterialInterface* Temp_object_Variable, bool CallFunc_PawnIsNPC_ReturnValue, MaterialInterface* K2Node_Select_Default, bool CallFunc_SetupDissolveFx_ReturnValue);// 0xbbc0600
	void CleanupDissolveFX(bool Temp_bool_Variable, MaterialInterface* Temp_object_Variable, bool CallFunc_PawnIsNPC_ReturnValue, MaterialInterface* K2Node_Select_Default);// 0xbbc0600
	void UpdateDissolveFx(float Scalar_Transition, float Scalar_ZHeight, float Scalar_LightIntensity);// 0xbbc0600
	void SpawnTeleportationLight(bool CallFunc_PawnIsNPC_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, PointLightComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsMobilePlatform_ReturnValue);// 0xbbc0600
	void FindBounds(bool bGunTrue, Vector CallFunc_GetActorBounds_Origin, Vector CallFunc_GetActorBounds_BoxExtent, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Multiply_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Transform CallFunc_MakeTransform_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_VSize_ReturnValue);// 0xbbc0600
	void QueueTeleportOut();// 0xbbc0600
	void QueueTeleportIn();// 0xbbc0600
	void OnStartLongInteract(Actor* ReceivingActor, out bool Out_bConsumeEvent, out bool Out_bSkipSetInteractDuration, out bool Out_bSkipStartAnimation, out enum Out_ItemInteractionType, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, FortPlayerPawnAthena* K2Node_DynamicCast_AsFort_Player_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, interface class CallFunc_HasMatchingGameplayTag_self_CastInput, bool CallFunc_HasMatchingGameplayTag_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void InWarmup(out bool bInWarmup, GameStateBase* CallFunc_GetGameState_ReturnValue, Athena_GameState_C* K2Node_DynamicCast_AsAthena_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void StopLoopingAudio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void EnableWaterAudio(bool Is Entering Water, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SoundBase* K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, SoundBase* K2Node_Select_Default);// 0xbbc0600
	void GetLocationInCircle_XY(out Vector LocationLocalSpace, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_RandomFloat_ReturnValue, float CallFunc_GetPI_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Cos_ReturnValue, float CallFunc_Sin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue);// 0xbbc0600
	void InitAthenaFoleyAudio(bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool CallFunc_IsLocallyControlled_ReturnValue, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default);// 0xbbc0600
	void UserConstructionScript(FortPlayerPawnStats CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0xbbc0600
	void Timeline_0__FinishedFunc();// 0xbbc0600
	void Timeline_0__UpdateFunc();// 0xbbc0600
	void OnReady_978607004CDEB137CACF38831BECEF40(FortGameStateAthena* GameState, const FortPlaylist* Playlist, out const GameplayTagContainer PlaylistContextTags);// 0xbbc0600
	void GameplayCue.Athena.Equipping(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void OnDeathPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void SafeZoneStatusChanged();// 0xbbc0600
	void GameplayCue.Athena.Player.BeingRevivedFromDBNO(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void RemoveStormFX();// 0xbbc0600
	void GameplayCue.Abilities.Activation.DBNOResurrect(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void OnEnteredWaterVolume();// 0xbbc0600
	void OnExitedWaterVolume();// 0xbbc0600
	void ReceiveDestroyed();// 0xbbc0600
	void NotifyTeammateSkydivedFromBus();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void OnLeftReplayRelevancy();// 0xbbc0600
	void OnEnteredReplayRelevancy();// 0xbbc0600
	void OnCharacterCustomizationCompleted(FortPlayerPawn* Pawn);// 0xbbc0600
	void OnResInDuringWarmup();// 0xbbc0600
	void AddStormFX();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void SetSafeZonePhaseAndGameplayCueTag(int InSafeZonePhase, bool bSpawnGameplayCue);// 0xbbc0600
	void SetSafeZoneTagWhenChanged(int NewWhichSafeZoneTag, GameplayTag GameplayTag, bool bSpawnGameplayCue);// 0xbbc0600
	void OnOutsideSafeZonePhaseChanged(int SafeZonePhase);// 0xbbc0600
	void RemoveSafeZoneGameplayCue();// 0xbbc0600
	void OnReceivedStormSurgeDamage();// 0xbbc0600
	void MeleeSwingLeft(bool First Left);// 0xbbc0600
	void MeleeSwingRight(bool First Right);// 0xbbc0600
	void GameplayCue.Abilities.Activation.DBNOEnter(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void ActivateInvincibleVisuals(float Duration);// 0xbbc0600
	void ReceivePossessed(Controller* NewController);// 0xbbc0600
	void GameplayCue.Athena.Reloading(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void TeleportInNSeconds(float SecondsTillTeleport, Vector DestLocation, Rotator DestRotation);// 0xbbc0600
	void ClientRunSnowGC(bool Instant);// 0xbbc0600
	void WhiteoutAndTeleport(Vector DestLocation, Rotator DestRotation, bool Instant, float Gravity);// 0xbbc0600
	void GameplayCue.Athena.Boost(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void OnCreativeStopGhost();// 0xbbc0600
	void OnCreativeStartGhost();// 0xbbc0600
	void MeleeSwingLeft_End();// 0xbbc0600
	void MeleeSwingRight_End();// 0xbbc0600
	void AddSafeZoneGameplayCue();// 0xbbc0600
	void RemoveSafeZoneGameplayCueServerToClient();// 0xbbc0600
	void OnSuccessfulBuildingEdit();// 0xbbc0600
	void Play Respawn FX();// 0xbbc0600
	void OnSpawnImmunityTimeReset();// 0xbbc0600
	void OnEnteredWaterBody(FortWaterBodyActor* WaterBody, bool bIsFirstBody);// 0xbbc0600
	void OnExitedWaterBody(FortWaterBodyActor* WaterBody, bool bIsLastBody);// 0xbbc0600
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xbbc0600
	void GameplayCue.Abilities.Activation.Generic.HarvestBuff.Tier2(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Abilities.Activation.Generic.HarvestBuff.Tier1(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void OnBeginWaterSprintBoost();// 0xbbc0600
	void isHiddingInProp(bool IsHidden);// 0xbbc0600
	void ServerSetCreativeEffectColorIndex(FCreativeEffectColorIndex Index);// 0xbbc0600
	void OnLandscapeCheckFailedAndTeleported();// 0xbbc0600
	void ScalePlayerUp();// 0xbbc0600
	void ScalePlayerDown();// 0xbbc0600
	void OnTetheredExitPressed();// 0xbbc0600
	void OnTetheredExitReleased();// 0xbbc0600
	void OnTetherStarted(Pawn* LastTetherPawn);// 0xbbc0600
	void OnTetherEnded(Pawn* LastTetherPawn);// 0xbbc0600
	void StartAImRotationTick();// 0xbbc0600
	void EndRotationTick();// 0xbbc0600
	void ReplicateAimRotation(Rotator PlayerAimRotation);// 0xbbc0600
	void AimTick();// 0xbbc0600
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void GameplayCue.Damage(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Healing(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Damage.Shielded(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Shield.PotionConsumed(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void SetupColdTag();// 0xbbc0600
	void ApplyColdTag();// 0xbbc0600
	void ApplyColdTag_Retry(FortAbilitySystemComponent* AbilitySystemComponent, FortPlayerPawn* AffectedPawn);// 0xbbc0600
	void OnCreativeModeratorModeActivate();// 0xbbc0600
	void OnCreativeModeratorModeDeactivate();// 0xbbc0600
	void OnCreativeStartInvulnerable();// 0xbbc0600
	void OnCreativeStopInvulnerable();// 0xbbc0600
	void ExecuteUbergraph_PlayerPawn_Athena(int EntryPoint, bool Temp_bool_Variable, bool CallFunc_IsMobilePlatform_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsMobilePlatform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Event_EndPlayReason, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool Temp_bool_IsClosed_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, FortPlayerPawn* K2Node_CustomEvent_Pawn, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Conv_IntToFloat_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, Vector CallFunc_K2_GetComponentLocation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, int K2Node_CustomEvent_InSafeZonePhase, bool K2Node_CustomEvent_bSpawnGameplayCue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, int K2Node_CustomEvent_NewWhichSafeZoneTag, GameplayTag K2Node_CustomEvent_GameplayTag, bool K2Node_CustomEvent_bSpawnGameplayCue, int K2Node_Event_SafeZonePhase, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool K2Node_Event_First_Left, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool K2Node_Event_First_Right, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte CallFunc_GetActorTeam_ReturnValue, float K2Node_CustomEvent_Duration, byte CallFunc_GetTeamAffiliationToLocalPlayer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_FloatFloat_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, bool CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, FortPlayerControllerSpectating* K2Node_DynamicCast_AsFort_Player_Controller_Spectating, bool K2Node_DynamicCast_bSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool CallFunc_IsLocallyControlled_ReturnValue, Controller* K2Node_Event_NewController, bool CallFunc_IsLocallyControlled_ReturnValue, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, FortPlayerControllerSpectating* K2Node_DynamicCast_AsFort_Player_Controller_Spectating, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, FortPawn* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, float K2Node_CustomEvent_SecondsTillTeleport, Vector K2Node_CustomEvent_DestLocation, Rotator K2Node_CustomEvent_DestRotation, bool K2Node_CustomEvent_Instant, Vector K2Node_CustomEvent_DestLocation, Rotator K2Node_CustomEvent_DestRotation, bool K2Node_CustomEvent_Instant, float K2Node_CustomEvent_Gravity, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, GameplayEventData K2Node_MakeStruct_GameplayEventData, bool CallFunc_IsLocallyControlled_ReturnValue, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, FortPlayerControllerSpectating* K2Node_DynamicCast_AsFort_Player_Controller_Spectating, bool K2Node_DynamicCast_bSuccess, FortAsyncAction_CurrentPlaylistReady* CallFunc_PlaylistDataReadyAsync_ReturnValue, FortGameStateAthena* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, FortPlaylist* Temp_object_Variable, GameplayTagContainer Temp_struct_Variable, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, interface class CallFunc_HasAllMatchingGameplayTags_TagContainerInterface_CastInput, bool CallFunc_HasAllMatchingGameplayTags_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FortGameStateAthena* K2Node_CustomEvent_GameState, const FortPlaylist* K2Node_CustomEvent_Playlist, const GameplayTagContainer K2Node_CustomEvent_PlaylistContextTags, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, interface class CallFunc_GetVehicleUInterface_ReturnValue, FortPlayerControllerSpectating* K2Node_DynamicCast_AsFort_Player_Controller_Spectating, bool K2Node_DynamicCast_bSuccess, FortPlayerPawn* CallFunc_GetDriver_ReturnValue, Object* CallFunc_Conv_InterfaceToObject_ReturnValue, Actor* CallFunc_GetVehicleActorPtrConst_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortCharacterVehicle* K2Node_DynamicCast_AsFort_Character_Vehicle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FortWaterBodyActor* K2Node_Event_WaterBody, bool K2Node_Event_bIsFirstBody, FortWaterBodyActor* K2Node_Event_WaterBody, bool K2Node_Event_bIsLastBody, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool CallFunc_IsSurfaceSwimming_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, float CallFunc_GetNumericCVar_OutValue, bool CallFunc_GetNumericCVar_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_IsInVehicle_ReturnValue, bool CallFunc_IsInAthena_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsStormCN_ReturnValue, Vector CallFunc_GetLastWaterSurfaceInfo_OutWaterSurfacePosition, Vector CallFunc_GetLastWaterSurfaceInfo_OutWaterSurfaceNormal, float CallFunc_GetWaterImmersionDepth_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, FortWaterBodyActor* CallFunc_GetCurrentWaterBody_ReturnValue, FortMovementComp_Character* K2Node_DynamicCast_AsFort_Movement_Comp_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsMovingOnGround_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_GetWaterSurfaceLocation_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_isHidden, delegate K2Node_CreateDelegate_OutputDelegate, FCreativeEffectColorIndex K2Node_CustomEvent_Index, bool CallFunc_IsValid_ReturnValue, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, bool Temp_bool_IsClosed_Variable, Pawn* K2Node_Event_LastTetherPawn, Pawn* K2Node_Event_LastTetherPawn, FortPlayerController* CallFunc_GetFortPlayerControllerFromActor_ReturnValue, Pawn* CallFunc_GetTetherPawn_ReturnValue, FortQuestManager* CallFunc_GetQuestManager_ReturnValue, interface class K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface, bool K2Node_DynamicCast_bSuccess, GameplayTagContainer CallFunc_GetOwnedGameplayTags_TagContainer, GameplayEventData K2Node_MakeStruct_GameplayEventData, Rotator CallFunc_GetControlRotation_ReturnValue, Rotator K2Node_CustomEvent_PlayerAimRotation, TimerHandle CallFunc_K2_SetTimer_ReturnValue, DataDrivenCVarEngineSubsystem* CallFunc_GetEngineSubsystem_ReturnValue, float CallFunc_GetValueAtLevel_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, const Transform Temp_struct_Variable, PostProcessComponent* CallFunc_AddComponent_ReturnValue, float K2Node_Event_DeltaSeconds, bool Temp_bool_Has_Been_Initd_Variable, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, FortAnimInput_Vitality K2Node_MakeStruct_FortAnimInput_Vitality, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, FortPlayerAnimInstance* K2Node_DynamicCast_AsFort_Player_Anim_Instance, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, FortPlayerAnimInstance* K2Node_DynamicCast_AsFort_Player_Anim_Instance, bool K2Node_DynamicCast_bSuccess, FortAnimInput_Vitality K2Node_MakeStruct_FortAnimInput_Vitality, bool CallFunc_IsDedicatedServer_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, FortAnimInput_Vitality K2Node_MakeStruct_FortAnimInput_Vitality, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, FortPlayerAnimInstance* K2Node_DynamicCast_AsFort_Player_Anim_Instance, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, FortAnimInput_Vitality K2Node_MakeStruct_FortAnimInput_Vitality, FortPlayerAnimInstance* K2Node_DynamicCast_AsFort_Player_Anim_Instance, bool K2Node_DynamicCast_bSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FortAbilitySystemComponent* K2Node_CustomEvent_AbilitySystemComponent, FortPlayerPawn* K2Node_CustomEvent_AffectedPawn, GameplayTagContainer Temp_struct_Variable, bool CallFunc_SendComplexCustomStatEvent_QuestActive, bool CallFunc_SendComplexCustomStatEvent_QuestCompleted, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_IsClosed_Variable, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameplayCueParameters CallFunc_MakeGameplayCueParameters_ReturnValue, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Select_Default);// 0xbbc0600
	void CCPM_isHiddenInProp__DelegateSignature(bool IsHidden);// 0xbbc0600
	void SwingLeft2__DelegateSignature();// 0xbbc0600
	void SwingRight2__DelegateSignature();// 0xbbc0600
	void SwingLeftEnd__DelegateSignature();// 0xbbc0600
	void SwingRightEnd__DelegateSignature();// 0xbbc0600
	void onFadeToWhiteTeleported__DelegateSignature();// 0xbbc0600
	void SwingLeft__DelegateSignature();// 0xbbc0600
	void SwingRight__DelegateSignature();// 0xbbc0600
	void ResOut__DelegateSignature();// 0xbbc0600
	void ResIn__DelegateSignature();// 0xbbc0600

--------------------------------
Class: PlayerPawn_Athena_Generic_C.PlayerPawn_Athena_Generic_Parent_C.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3de0, Size: 8]
	ParticleSystemComponent* Effect_WaterInteraction_FX;//[Offset: 0x3de8, Size: 8]
	ParticleSystemComponent* AnimTrailPS;//[Offset: 0x3df0, Size: 8]
	bool CanSpawnDustLandFX?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3df8, Size: 1]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3df9, Size: 1]
	Rotator RunWalkParticleRotation;//[Offset: 0x3dfc, Size: 12]
	int WaterCounter;//[Offset: 0x3e08, Size: 4]
	float Tick Delta Seconds;//[Offset: 0x3e0c, Size: 4]
	SoundBase* Sound_Shield_Impact;//[Offset: 0x3e10, Size: 8]
	SoundBase* Sound_Shield_Destroyed;//[Offset: 0x3e18, Size: 8]
	SoundBase* Sound_Shield_FullyCharged;//[Offset: 0x3e20, Size: 8]
	SoundBase* Sound_Shield_StartRecharge;//[Offset: 0x3e28, Size: 8]
	bool BodyValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e30, Size: 1]
	bool BackpackValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e31, Size: 1]
	bool HatValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e32, Size: 1]
	bool FaceValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e33, Size: 1]
	bool CharmValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e34, Size: 1]
	bool HeadValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e35, Size: 1]
	ParticleSystem* Effect_Player_LandedDust;//[Offset: 0x3e38, Size: 8]
	MaterialInstanceDynamic*[] TempArray;//[Offset: 0x3e40, Size: 16]
	SceneComponent* Sound Player Hit;//[Offset: 0x3e50, Size: 8]
	ParticleSystem* Effect_Player_Landed_WindVector_P;//[Offset: 0x3e58, Size: 8]
	class UserWidget* SpeechBubbleWidgetClass;//[Offset: 0x3e60, Size: 8]
	FText LastSpeechText;//[Offset: 0x3e68, Size: 24]
	bool UseAnimTrailsNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e80, Size: 1]
	float Time when you'll be able to splash again;//[Offset: 0x3e84, Size: 4]
	Actor* CurrentWaterMeshActor;//[Offset: 0x3e88, Size: 8]
	HitResult WaterTraceHitLocation;//[Offset: 0x3e90, Size: 136]
	Vector StableVelocityVector;//[Offset: 0x3f18, Size: 12]
	ParticleSystem* PlayerRunTemplate_Ground;//[Offset: 0x3f28, Size: 8]
	ParticleSystem* PlayerWalkTemplate_Ground;//[Offset: 0x3f30, Size: 8]
	ParticleSystem* PlayerRunTemplate_Water;//[Offset: 0x3f38, Size: 8]
	ParticleSystem* PlayerWalkTemplate_Water;//[Offset: 0x3f40, Size: 8]
	SkeletalMesh* Pawn Charm Skeletal Mesh;//[Offset: 0x3f48, Size: 8]
	ParticleSystemComponent* AnimTrailsPS_Ref;//[Offset: 0x3f50, Size: 8]
	MaterialInterface* WeaponMaterialOverride;//[Offset: 0x3f58, Size: 8]
	bool TickWaterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f60, Size: 1]
	TextureRenderTarget2D* WetnessDepthTexture;//[Offset: 0x3f68, Size: 8]
	MaterialInstanceDynamic* WaterLevelMID;//[Offset: 0x3f70, Size: 8]
	MaterialInstanceDynamic* WaterDecayMID;//[Offset: 0x3f78, Size: 8]
	bool Was RTT Enabled Var Set;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f80, Size: 1]
	bool Is RTT Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f81, Size: 1]
	float StartingMinCapsuleShadowVis;//[Offset: 0x3f84, Size: 4]
	bool IsShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f88, Size: 1]
	float InstigatorCheckDistanceSqrd;//[Offset: 0x3f8c, Size: 4]
	float SlideDustActivateSpeed;//[Offset: 0x3f90, Size: 4]
	bool CanSpawnSlideKickupFX?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f94, Size: 1]
	ParticleSystem* Effect_Player_ShieldActivate;//[Offset: 0x3f98, Size: 8]
	ParticleSystem* Effect_PLayer_ShieldBreak;//[Offset: 0x3fa0, Size: 8]
	bool GhostMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa8, Size: 1]
	FXSystemComponent* OverrideAnimTrail;//[Offset: 0x3fb0, Size: 8]
	MulticastInlineDelegateProperty AnimNotify_Begin;//[Size: 16]
	MulticastInlineDelegateProperty AnimNotify_End;//[Size: 16]
	SoundBase* Sound_Shield_Destroyed_2D;//[Offset: 0x3fd8, Size: 8]
	SoundBase* Sound_Shield_Destroyed_Crit_2D;//[Offset: 0x3fe0, Size: 8]
	FXSystemComponent* AnimTrailFx;//[Offset: 0x3fe8, Size: 8]
	MulticastInlineDelegateProperty PlayDamageEffect;//[Size: 16]
	FName Component Tag AnimTrailFX Const;//[Offset: 0x4000, Size: 8]
	float ReppedCapsuleExtraHalfHeight;//[Offset: 0x4008, Size: 4]
	float CachedCapsuleHalfHeight;//[Offset: 0x400c, Size: 4]
	MulticastInlineDelegateProperty OnCharacterPartsMIDInitialized;//[Size: 16]
	void Melee_Effect_Color(out Vector Melee_Color_Set);// 0xbbc0600
	void OnRep_CapsuleEnlarged(bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_GetUnscaledCapsuleHalfHeight_ReturnValue);// 0xbbc0600
	void PlayShieldDestroyedSound(out const GameplayCueParameters GameplayCueParameters, Pawn* InstigatorLocal, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, bool CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFatalHit_ReturnValue, bool CallFunc_IsCriticalHit_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, bool CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy, FortProjectileBase* K2Node_DynamicCast_AsFort_Projectile_Base, bool K2Node_DynamicCast_bSuccess, FortWeapon* K2Node_DynamicCast_AsFort_Weapon, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetInstigator_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, bool Temp_bool_Variable, SoundBase* K2Node_Select_Default, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue);// 0xbbc0600
	void ReInitFrontendPetDisplay(bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void Are the wind and water RTT passes enabled(out bool NewParam, float CallFunc_GetScalarParameterValue_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xbbc0600
	void DisableWaterLevelTick();// 0xbbc0600
	void Create and Duplicate Effect Poseable Skeletal Mesh(byte BodyType, MaterialInterface* Material to Apply, out MaterialInstanceDynamic*[] Empty MID Array, int TranslucentSortPriority, out PoseableMeshComponent* PoseableMesh, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, SceneComponent* K2Node_Select_Default, Transform CallFunc_GetRelativeTransform_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, const Transform Temp_struct_Variable, bool Temp_bool_Variable, PoseableMeshComponent* CallFunc_AddComponent_ReturnValue, SkinnedMeshComponent* K2Node_Select_Default);// 0xbbc0600
	void SlaveAMeshToTheBody(SkeletalMeshComponent* Mesh, SkeletalMeshComponent* Master, SkinnedMeshComponent* MasterToUse, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_GetRelativeTransform_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult);// 0xbbc0600
	void Create and Duplicate Effect Skeletal Meshes Parent(byte BodyType, out SkeletalMeshComponent* DuplicatedSkeletalMeshComponent, MaterialInterface* Material to Apply, out MaterialInstanceDynamic*[] Empty MID Array, int TranslucentSortPriority, int CallFunc_Array_LastIndex_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, SceneComponent* K2Node_Select_Default, Transform CallFunc_GetRelativeTransform_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, const Transform Temp_struct_Variable, bool Temp_bool_Variable, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, SkeletalMeshComponent* K2Node_Select_Default, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0xbbc0600
	void UserConstructionScript(SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue);// 0xbbc0600
	void MeleeSwingRight(bool First Right);// 0xbbc0600
	void MeleeSwingLeft(bool First Left);// 0xbbc0600
	void MeleeSwingRight_End();// 0xbbc0600
	void MeleeSwingLeft_End();// 0xbbc0600
	void OnDamagePlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnLanded(out const HitResult Hit);// 0xbbc0600
	void OnWeaponEquipped(FortWeapon* NewWeapon, FortWeapon* PrevWeapon);// 0xbbc0600
	void FootStepLeft();// 0xbbc0600
	void FootStepRight();// 0xbbc0600
	void OnCharacterPartsReinitialized();// 0xbbc0600
	void GameplayCue.Abilities.Activation.Generic.HarvestBuff.Tier1(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Abilities.Activation.Generic.HarvestBuff.Tier2(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void ReceiveDestroyed();// 0xbbc0600
	void OnDeathServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void Exited/Entered WaterVolume();// 0xbbc0600
	void CharacterDestroyed(Actor* DestroyedActor);// 0xbbc0600
	void BindOnDestroyed();// 0xbbc0600
	void AnimTrailsNotify(bool bActive);// 0xbbc0600
	void AnimTrailsSetup(ParticleSystem* ParticleSystemReference, NiagaraSystem* NiagaraSystemReference, FName FirstSocketName, FName SecondSocketName, float Width, FXSystemComponent* OverrideParticleComp, FName OverideFirstSocketName, FName OverideSecondSocketName);// 0xbbc0600
	void AnimTrailsDisable();// 0xbbc0600
	void GameplayCue.Abilities.SpookyMist.Loop(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Shield.PotionConsumed(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Damage.Shielded(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Shield.Destroyed(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Shield.Reapplied(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Loop.Shadow.Bomb(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void ExecuteUbergraph_PlayerPawn_Athena_Generic(int EntryPoint, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic*[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool Temp_bool_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, byte Temp_byte_Variable, int Temp_int_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_First_Right, bool K2Node_Event_First_Left, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, FortPawn* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, const HitResult K2Node_Event_Hit, FortWeapon* K2Node_Event_NewWeapon, FortWeapon* K2Node_Event_PrevWeapon, float CallFunc_RandomFloatInRange_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsPlayerControlled_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, int CallFunc_Round_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_ComposeRotators_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Controller* CallFunc_GetController_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsLocalController_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FortWindManager* CallFunc_GetWindManager_ReturnValue, float CallFunc_FClamp_ReturnValue, WindManager_C* K2Node_DynamicCast_AsWind_Manager, bool K2Node_DynamicCast_bSuccess, float CallFunc_Lerp_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, const MaterialInstanceDynamic* Temp_object_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, const MaterialInstanceDynamic* Temp_object_Variable, int Temp_int_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Are_the_wind_and_water_RTT_passes_enabled_NewParam, bool CallFunc_Are_the_wind_and_water_RTT_passes_enabled_NewParam, bool CallFunc_Are_the_wind_and_water_RTT_passes_enabled_NewParam, Actor* K2Node_CustomEvent_DestroyedActor, const MaterialInstanceDynamic* Temp_object_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, bool K2Node_Event_bActive, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, ParticleSystem* K2Node_Event_ParticleSystemReference, NiagaraSystem* K2Node_Event_NiagaraSystemReference, FName K2Node_Event_FirstSocketName, FName K2Node_Event_SecondSocketName, float K2Node_Event_Width, FXSystemComponent* K2Node_Event_OverrideParticleComp, FName K2Node_Event_OverideFirstSocketName, FName K2Node_Event_OverideSecondSocketName, bool CallFunc_IsValid_ReturnValue, FXSystemAsset* CallFunc_GetFXSystemAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const MaterialInstanceDynamic* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FXSystemComponent* CallFunc_SetAssetOrSpawnAltFXAttached_ReturnValue, FortWaterBodyActor* CallFunc_GetCurrentWaterBody_ReturnValue, bool CallFunc_IsSurfaceSwimming_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_WasRecentlyRendered_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, const MaterialInstanceDynamic* Temp_object_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, bool Temp_bool_Variable, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Variable, const MaterialInstanceDynamic* Temp_object_Variable, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, int CallFunc_Round_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Round_ReturnValue, int K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, const MaterialInstanceDynamic* Temp_object_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xbbc0600
	void OnCharacterPartsMIDInitialized__DelegateSignature();// 0xbbc0600
	void PlayDamageEffect__DelegateSignature(GameplayTagContainer Damage Tags, HitResult Hit Info, FortPawn* Instigated By, Actor* Damage Causer);// 0xbbc0600
	void AnimNotify_End__DelegateSignature();// 0xbbc0600
	void AnimNotify_Begin__DelegateSignature(bool bActive);// 0xbbc0600

--------------------------------
Class: PlayerPawn_Athena_Generic_Parent_C.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d00, Size: 8]
	MaterialInterface*[] Default Weapon Materials;//[Offset: 0x3d08, Size: 16]
	MaterialInstanceDynamic*[] PawnBackpackMaterials;//[Offset: 0x3d18, Size: 16]
	MaterialInstanceDynamic*[] PawnHatMaterials;//[Offset: 0x3d28, Size: 16]
	MaterialInstanceDynamic*[] PawnHeadMaterials;//[Offset: 0x3d38, Size: 16]
	MaterialInstanceDynamic*[] PawnBodyMaterials;//[Offset: 0x3d48, Size: 16]
	MaterialInstanceDynamic*[] PawnCharmMaterials;//[Offset: 0x3d58, Size: 16]
	MaterialInstanceDynamic*[] PawnFaceMaterials;//[Offset: 0x3d68, Size: 16]
	PostProcessComponent* PlayerPostProcessFX;//[Offset: 0x3d78, Size: 8]
	SkeletalMeshComponent*[] SkeletalMeshes;//[Offset: 0x3d80, Size: 16]
	MaterialInstanceDynamic*[] PawnMaterials_ALL;//[Offset: 0x3d90, Size: 16]
	MulticastInlineDelegateProperty ShootingTargetReactToJump;//[Size: 16]
	MulticastInlineDelegateProperty OnPlayHit;//[Size: 16]
	MulticastInlineDelegateProperty OnEnteredVehicleDispatcher;//[Size: 16]
	MulticastInlineDelegateProperty OnExitedVehicleDispatcher;//[Size: 16]
	void ReceiveBeginPlay();// 0xbbc0600
	void OnEnteredVehicle();// 0xbbc0600
	void OnExitedVehicle();// 0xbbc0600
	void OnJumped();// 0xbbc0600
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xbbc0600
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0xbbc0600
	void ExecuteUbergraph_PlayerPawn_Athena_Generic_Parent(int EntryPoint, const Transform Temp_struct_Variable, bool CallFunc_IsLocallyControlled_ReturnValue, PostProcessComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float K2Node_Event_HalfHeightAdjust, float K2Node_Event_ScaledHalfHeightAdjust, float K2Node_Event_HalfHeightAdjust, float K2Node_Event_ScaledHalfHeightAdjust);// 0xbbc0600
	void OnExitedVehicleDispatcher__DelegateSignature();// 0xbbc0600
	void OnEnteredVehicleDispatcher__DelegateSignature();// 0xbbc0600
	void OnPlayHit__DelegateSignature(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xbbc0600
	void ShootingTargetReactToJump__DelegateSignature(FortPlayerPawnAthena* JumpingPlayer);// 0xbbc0600

--------------------------------
Class: FCreativeEffectColorIndex
	int Index_2_D2D2DEB24E760961E0D6AB88DC603692;//[Offset: 0x0, Size: 4]
	byte SetType_5_3A2997D544A0618EC312FEAED95187B8;//[Offset: 0x4, Size: 1]
	byte VisibleToOwningPlayer_8_E546F2A4426B8AB99EE118A3125AC217;//[Offset: 0x5, Size: 1]
	byte TeamRelationshipVisibility_11_3BB5265D4D611D2BB5799EB5A6E26AA7;//[Offset: 0x6, Size: 1]

--------------------------------
Class: FortContrailsComponent.ActorComponent.Object
	bool bAlwaysShowContrails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bIsFrontend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	AthenaSkyDiveContrailItemDefinition* ContrailsDefinition;//[Offset: 0xb8, Size: 8]
	FXSystemAsset* ContrailFXAsset;//[Offset: 0xc0, Size: 8]
	ParticleSystem* VaporEmitterTemplate;//[Offset: 0xc8, Size: 8]
	FXSystemComponent* ContrailFXComp;//[Offset: 0xd0, Size: 8]
	FXSystemComponent* VaporFXComp;//[Offset: 0xd8, Size: 8]
	enum PoolingMethod;//[Offset: 0xe0, Size: 1]
	float VelocityInRangeMin;//[Offset: 0xf8, Size: 4]
	float VelocityInRangeMax;//[Offset: 0xfc, Size: 4]
	float NiagaraParamsOutRangeMin;//[Offset: 0x100, Size: 4]
	float NiagaraParamsOutRangeMax;//[Offset: 0x104, Size: 4]
	float TrailAlphaOutRangeMin;//[Offset: 0x108, Size: 4]
	float TrailAlphaOutRangeMax;//[Offset: 0x10c, Size: 4]
	float TrailWidthOutRangeMin;//[Offset: 0x110, Size: 4]
	float TrailWidthOutRangeMax;//[Offset: 0x114, Size: 4]
	MulticastInlineDelegateProperty OnContrailsLoadFinished;//[Size: 16]
	MulticastInlineDelegateProperty OnContrailsActivated;//[Size: 16]
	MulticastInlineDelegateProperty OnContrailsDeactivated;//[Size: 16]
	void SetupContrails(AthenaSkyDiveContrailItemDefinition* Contrails, FXSystemAsset* ContrailsFXOverride, bool bFrontend, float ActivateDelay);// 0xcf923e0
	void HandleLanded(out const HitResult Hit);// 0xb64c0bc
	void HandleEndSkydiving();// 0xb64c0a8
	void HandleEndParachuteMovement();// 0xb64c094
	void HandleBeginSkydiving();// 0xb64c080
	void HandleBeginParachuteMovement();// 0xb64c06c

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0xd8c6b5c
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0xd8c6a34
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0xd8c690c
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0xd8c67e4
	void ResetBoneTransformByName(FName BoneName);// 0xd8c673c
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0xd8c6648
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0xd8c6554
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0xd8c6460
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0xd8c636c
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0xd8c62c4

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f4, Size: 4]
	Vector SocketOffset;//[Offset: 0x1f8, Size: 12]
	Vector TargetOffset;//[Offset: 0x204, Size: 12]
	float ProbeSize;//[Offset: 0x210, Size: 4]
	byte ProbeChannel;//[Offset: 0x214, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	float CameraLagSpeed;//[Offset: 0x218, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x21c, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x220, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x224, Size: 4]
	bool IsCollisionFixApplied();// 0xd8fc124
	Vector GetUnfixedCameraPosition();// 0xd8fc0ec
	Rotator GetTargetRotation();// 0xd8fc0b4

--------------------------------
Class: PawnHighlight
	float Priority_28_E2E1B5344846E187B9C11B863A7F0698;//[Offset: 0x0, Size: 4]
	LinearColor Inner_21_4CC2801147EA190DE16F59B34F36853E;//[Offset: 0x4, Size: 16]
	LinearColor Outer_22_5A1D7D0543D303E8B54B66A7F7BD2E2E;//[Offset: 0x14, Size: 16]
	float FresnelBrightness_23_52B0F96447FF640F47DF2895B0602E92;//[Offset: 0x24, Size: 4]
	float FresnelExponent_24_B427CF0C441AA37ED49833BF7579DE6D;//[Offset: 0x28, Size: 4]
	float UsesPulse_25_E29229F64E540F0617E4C4987AD77605;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: WindManager_C.FortWindManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x460, Size: 8]
	StaticMeshComponent* EmptyStaticMesh;//[Offset: 0x468, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x470, Size: 8]
	float SmallerRenderTargetOrthoWidth;//[Offset: 0x478, Size: 4]
	Actor*[] External Test Actor;//[Offset: 0x480, Size: 16]
	FortStaticMeshActor*[] World Terrain Meshes;//[Offset: 0x490, Size: 16]
	Vector Camera Height Offset;//[Offset: 0x4a0, Size: 12]
	float Particle Z Offset;//[Offset: 0x4ac, Size: 4]
	bool Is Water Interaction Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	StaticMeshMaterialArrayCombo[] WorldStaticMeshArray;//[Offset: 0x4b8, Size: 16]
	ArrayOfWaterMeshWaterBlueprintPairs Array Of Water Assets;//[Offset: 0x4c8, Size: 16]
	StaticMesh*[] PrototypicalStaticMeshes;//[Offset: 0x4d8, Size: 16]
	int Current Water Mesh Index;//[Offset: 0x4e8, Size: 4]
	FlowMapMaterials[] WaterVectorMatToDefaultMaterialPairing;//[Offset: 0x4f0, Size: 16]
	bool MaterialPairingFound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	LinearColor WorldBoundsMinMax;//[Offset: 0x504, Size: 16]
	MaterialInterface* Black Scene Capture Material;//[Offset: 0x518, Size: 8]
	Box Max level bounds - used to isolate the level from the vista;//[Offset: 0x520, Size: 28]
	StaticMeshComponent*[] StormCylinderMeshes;//[Offset: 0x540, Size: 16]
	bool Storm Cyl Mesh Match;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	int Wind Cyl Mesh Array Match Index;//[Offset: 0x554, Size: 4]
	float Delta Wind Falloff in World Units;//[Offset: 0x558, Size: 4]
	FortWindImpulseHandle NewVar;//[Offset: 0x55c, Size: 4]
	void Find Matching Wind Mesh Index And Write Bool(Vector Wind location, out bool Storm Cyl Mesh Match, out int Wind Cyl Mesh Array Match Index, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, StaticMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0xbbc0600
	void SetWindMatVariables(MaterialInstanceDynamic* Mid, bool Set AnimatedCylinderCenter, Vector AnimatedCylinderCenter, bool Set Animating Wind Magnitude, float Animating Wind Magnitude, bool Set Static Wind Magnitude, float Static Wind Magnitude, bool Set CylinderCenter, Vector CylinderCenter, bool Set WindVector, Vector WindVector, bool Set WindCrossVector, Vector WindCrossVector, bool Set OverallOuterRadius, float OverallOuterRadius, bool Set OverallInnerRadius, float OverallInnerRadius, bool Set Wind Still 0 or Animating 1, float Wind Still 0 or Animating 1, bool Set Circular Shader?, float Circular Shader?, out bool NewParam, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue);// 0xbbc0600
	void UpdateWindDeltaCyl(float Static Cylinder Outer Radius, float Duration, MaterialInstanceDynamic* Mid, bool Is Wind Circular?, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, float K2Node_Select_Default, float K2Node_Select_Default);// 0xbbc0600
	void RemoveWindCylinder(out const FortWindImpulseCylinder WindImpulseCylinder, StaticMeshComponent* CurrentStormCylinder, bool Temp_bool_True_if_break_was_hit_Variable, Vector CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation, float CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius, float CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius, Vector CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection, float CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude, Box CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds, bool CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging, bool CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, StaticMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0xbbc0600
	void UpdateStormWindCylinder(FortWindImpulseCylinder Wind Impulse, FortWindImpulseCylinderDelta Wind Delta, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_BreakWindImpulseCylinderDelta_WindDeltaCenter, bool CallFunc_BreakWindImpulseCylinderDelta_bWindImpulseInitialized, bool CallFunc_BreakWindImpulseCylinderDelta_bWindRipplesOutward, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionWidth, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerSectionRadius, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterSectionRadius, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaMaximumRadius, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredOverallBlendTime, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionBlendTime, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentBlendTime, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaPreviousMagnitude, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentMagnitude, float CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredMagnitude, Box CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterWorldBounds, Box CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerWorldBounds, Box CallFunc_BreakWindImpulseCylinderDelta_WindImpulseBounds, FortWindImpulseHandle CallFunc_BreakWindImpulseCylinderDelta_WindImpulseHandleToModify, StaticMeshComponent* CallFunc_AddComponent_ReturnValue, Vector CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation, float CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius, float CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius, Vector CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection, float CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude, Box CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds, bool CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging, bool CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match, int CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, bool CallFunc_MakeLiteralBool_ReturnValue, bool CallFunc_SetWindMatVariables_NewParam, StaticMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetWindMatVariables_NewParam);// 0xbbc0600
	Vector Calculate Camera Position(float Scale, SceneCaptureComponent2D* Scene Capture, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_FCeil_ReturnValue, int CallFunc_FCeil_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue);// 0xbbc0600
	void UserConstructionScript(const Transform Temp_struct_Variable, ParticleSystemComponent* CallFunc_AddComponent_ReturnValue);// 0xbbc0600
	void OnWindImpulseCylinderDeath(out const FortWindImpulseCylinder WindImpulseCylinder);// 0xbbc0600
	void OnWindImpulseCylinderDeltaComplete(out const FortWindImpulseCylinder WindImpulseCylinder);// 0xbbc0600
	void OnWindImpulseCylinderCreation(out const FortWindImpulseCylinder WindImpulseCylinder, out const FortWindImpulseCylinderDelta WindImpulseCylinderDelta);// 0xbbc0600
	void SpawnTestWind(float Radius, float ImpulseMagnitude);// 0xbbc0600
	void Play Water Splash Particle System At Location(Transform Particle Transform);// 0xbbc0600
	void AddWindParticleSystemComponent(ParticleSystemComponent* ParticleSystemComponent);// 0xbbc0600
	void Register player for render to texture purposes(PrimitiveComponent* Effect Water Interaction FX, PrimitiveComponent* Gameplay Wind INteraction Effects);// 0xbbc0600
	void Add Wind Component(PrimitiveComponent* InComponent);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void Update Test(float NewMagnitude);// 0xbbc0600
	void Add Render To Texture Particle(ParticleSystem* EmitterTemplate, out const Transform InTransform);// 0xbbc0600
	void ExecuteUbergraph_WindManager(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Transform K2Node_CustomEvent_Particle_Transform, ParticleSystemComponent* K2Node_Event_ParticleSystemComponent, PrimitiveComponent* K2Node_CustomEvent_Effect_Water_Interaction_FX, PrimitiveComponent* K2Node_CustomEvent_Gameplay_Wind_INteraction_Effects, float CallFunc_MakeLiteralFloat_ReturnValue, PrimitiveComponent* K2Node_CustomEvent_InComponent, Vector CallFunc_MakeVector_ReturnValue, float K2Node_CustomEvent_NewMagnitude, ParticleSystem* K2Node_CustomEvent_EmitterTemplate, const Transform K2Node_CustomEvent_InTransform, bool CallFunc_SetWindImpulseCylinderMagnitude_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_ImpulseMagnitude, const FortWindImpulseCylinder K2Node_Event_WindImpulseCylinder, const FortWindImpulseCylinderDelta K2Node_Event_WindImpulseCylinderDelta, float CallFunc_Add_FloatFloat_ReturnValue, FortWindImpulseCylinder CallFunc_MakeWindImpulseCylinder_ReturnValue, FortWindImpulseHandle CallFunc_AddWindImpulseCylinder_ReturnValue, const FortWindImpulseCylinder K2Node_Event_WindImpulseCylinder, Vector CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation, float CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius, float CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius, Vector CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection, float CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude, Box CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds, bool CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging, bool CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending, const FortWindImpulseCylinder K2Node_Event_WindImpulseCylinder, bool CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match, int CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index, StaticMeshComponent* CallFunc_Array_Get_Item, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, float CallFunc_K2_GetScalarParameterValue_ReturnValue);// 0xbbc0600

--------------------------------
Class: StaticMeshMaterialArrayCombo
	StaticMeshActor* StaticMesh_6_F7234FBB43D39B4944E60390FB9D9D4D;//[Offset: 0x0, Size: 8]
	MaterialInterface*[] MaterialArray_5_FAE74D234840C6E8BEEBE4BC4590BE6C;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ArrayOfWaterMeshWaterBlueprintPairs
	WaterMeshAssetsToReplace[] ArrayOfPairedMeshesandBlueprints_3_66DC153A4804C5BFDF6D5187A0EEF992;//[Offset: 0x0, Size: 16]

--------------------------------
Class: WaterMeshAssetsToReplace
	StaticMesh* StaticMesh_4_B162F6034281E7ABCD4DD1A24FFB5843;//[Offset: 0x0, Size: 8]
	class _WaterMeshBlueprintMaster_C* Blueprint_8_FAC48F2D497ED83408C598897E74E513;//[Offset: 0x8, Size: 8]
	int WaterMaterialID_11_1F00A5914214393D3251C4918ACFBCD2;//[Offset: 0x10, Size: 4]

--------------------------------
Class: _WaterMeshBlueprintMaster_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	StaticMeshComponent* CollisionMesh1;//[Offset: 0x228, Size: 8]
	StaticMeshComponent* CollisionMesh2;//[Offset: 0x230, Size: 8]
	StaticMeshComponent* CollisionMesh4;//[Offset: 0x238, Size: 8]
	StaticMeshComponent* CollisionMesh3;//[Offset: 0x240, Size: 8]
	StaticMeshComponent* StaticMesh1;//[Offset: 0x248, Size: 8]
	int Number of Collision Meshes;//[Offset: 0x250, Size: 4]
	bool FlipFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool NoFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	MaterialInterface* FlippedMaterial;//[Offset: 0x258, Size: 8]
	int Current Characters Personal Water Counter;//[Offset: 0x260, Size: 4]
	bool Enable Player/Water Interactions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool Entering True Exiting False;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	PlayerPawn_Generic_Parent_C* ExternalActor;//[Offset: 0x268, Size: 8]
	StaticMeshComponent* Internal Mesh;//[Offset: 0x270, Size: 8]
	bool Continue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float Minimum time between splashes;//[Offset: 0x27c, Size: 4]
	bool ShowTestMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool HasExecutedConstuctionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool Is Deep Water Asset?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	void Construction(int CallFunc_GetNumMaterials_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void Handle Water Penetration Components And Arrays(bool In T Out F, Actor* Touching Actor, StaticMeshComponent* Touching Volume, int Temp_int_Variable, PlayerPawn_Generic_Parent_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic_Parent, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void Find Placement on water mesh surfaces(out Transform Traced Transform, out Vector VelocityVector, out bool Trace Hit, LinearColor NewLocalVar, bool Temp_bool_Variable, StaticMeshComponent* K2Node_Select_Default, Vector CallFunc_GetVelocity_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_LineTraceComponent_HitLocation, Vector CallFunc_K2_LineTraceComponent_HitNormal, FName CallFunc_K2_LineTraceComponent_BoneName, HitResult CallFunc_K2_LineTraceComponent_OutHit, bool CallFunc_K2_LineTraceComponent_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_MakeRotFromXZ_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0xbbc0600
	void SetupMeshCollisionVolumes(StaticMeshComponent* StaticMeshComponent, int Target Int, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbbc0600
	void UserConstructionScript();// 0xbbc0600
	void BndEvt__CollisionMesh2_K2Node_ComponentBoundEvent_220_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xbbc0600
	void BndEvt__CollisionMesh3_K2Node_ComponentBoundEvent_211_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xbbc0600
	void BndEvt__CollisionMesh_K2Node_ComponentBoundEvent_66_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xbbc0600
	void BndEvt__CollisionMesh4_K2Node_ComponentBoundEvent_203_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xbbc0600
	void BndEvt__CollisionMesh2_K2Node_ComponentBoundEvent_196_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xbbc0600
	void BndEvt__CollisionMesh3_K2Node_ComponentBoundEvent_190_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xbbc0600
	void BndEvt__CollisionMesh4_K2Node_ComponentBoundEvent_185_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xbbc0600
	void BndEvt__CollisionMesh_K2Node_ComponentBoundEvent_69_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xbbc0600
	void Construct();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void ExecuteUbergraph__WaterMeshBlueprintMaster(int EntryPoint, Transform CallFunc_Find_Placement_on_water_mesh_surfaces_Traced_Transform, Vector CallFunc_Find_Placement_on_water_mesh_surfaces_VelocityVector, bool CallFunc_Find_Placement_on_water_mesh_surfaces_Trace_Hit, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, FortWindManager* CallFunc_GetWindManager_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, WindManager_C* K2Node_DynamicCast_AsWind_Manager, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex);// 0xbbc0600

--------------------------------
Class: FlowMapMaterials
	MaterialInterface* OriginalMaterial_4_C9560D9C4A128A0A813E97865710CC97;//[Offset: 0x0, Size: 8]
	MaterialInterface* RenderToTextureMaterial_5_5CB972A744E80375B62CF68122B83C88;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DuplicateResOutMesh_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 8]
	float CharacterSpawnInTimeline_FirstPassComplete_2AB89084476E64255664E9B2D45E14C1;//[Offset: 0x230, Size: 4]
	float CharacterSpawnInTimeline_LightIntensity_2AB89084476E64255664E9B2D45E14C1;//[Offset: 0x234, Size: 4]
	float CharacterSpawnInTimeline_zHieght_2AB89084476E64255664E9B2D45E14C1;//[Offset: 0x238, Size: 4]
	byte CharacterSpawnInTimeline__Direction_2AB89084476E64255664E9B2D45E14C1;//[Offset: 0x23c, Size: 1]
	TimelineComponent* CharacterSpawnInTimeline;//[Offset: 0x240, Size: 8]
	SkeletalMeshComponent* Skeletal Mesh Duplicate;//[Offset: 0x248, Size: 8]
	bool Gun True;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	float BoundsRadius;//[Offset: 0x254, Size: 4]
	MaterialInstanceDynamic*[] MIDArray;//[Offset: 0x258, Size: 16]
	Vector World location for the dissolve location;//[Offset: 0x268, Size: 12]
	MaterialInstanceDynamic* Current MID;//[Offset: 0x278, Size: 8]
	float Head Space;//[Offset: 0x280, Size: 4]
	float Leg Space;//[Offset: 0x284, Size: 4]
	PointLightComponent* Spawn Light;//[Offset: 0x288, Size: 8]
	float light intensity;//[Offset: 0x290, Size: 4]
	int Number of Base skeletal mesh materials;//[Offset: 0x294, Size: 4]
	float FirstPassComplete;//[Offset: 0x298, Size: 4]
	SkeletalMeshComponent*[] ExternalSkeletalMeshComponent;//[Offset: 0x2a0, Size: 16]
	Transform Box Local Transform;//[Offset: 0x2b0, Size: 48]
	float Timeline Play Length;//[Offset: 0x2e0, Size: 4]
	bool TeleportOut?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Actor* ExternalActor;//[Offset: 0x2e8, Size: 8]
	SkeletalMeshComponent*[] InternalSkeletalMeshComponents;//[Offset: 0x2f0, Size: 16]
	int CurrentMeshMidIndex;//[Offset: 0x300, Size: 4]
	SkeletalMeshComponent* External Base Mesh Component;//[Offset: 0x308, Size: 8]
	MaterialInstanceDynamic*[] ExternalMidArray;//[Offset: 0x310, Size: 16]
	SkeletalMeshComponent* ExternalRootMeshComponent;//[Offset: 0x320, Size: 8]
	MaterialInterface*[] ListOfMaterialsExemptFromReparenting;//[Offset: 0x328, Size: 16]
	MaterialInstanceDynamic*[] Original_MIDs;//[Offset: 0x338, Size: 16]
	int Increment_End;//[Offset: 0x348, Size: 4]
	void RestoreInProgressRes(MaterialInstanceDynamic*[] CallFunc_External_Mesh_Masked_Setup_Corrected_Mid_Array);// 0xbbc0600
	void Store Original Material for Teleport In();// 0xbbc0600
	void External Mesh Masked Setup(out SkeletalMeshComponent*[] External MEsh Component Array, out MaterialInstanceDynamic*[] Corrected Mid Array, int Increment_MaskedSetup, MaterialInstanceDynamic*[] MID_Array_MaskedSetup, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SkeletalMeshComponent* CallFunc_Array_Get_Item, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MaterialInterface* CallFunc_Array_Get_Item, FString CallFunc_GetDisplayName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_Contains_ReturnValue, MaterialInstance* Temp_object_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInstance* Temp_object_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInstance* K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void ProcessSpawnInTimeline(float ZHeight, float LightIntensity, float DissolveGradientPercentage, float DissolveGradientDistance, LinearColor DissolveGradientBaseLocation, LinearColor DissolveGradientDirectionalColor, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, float CallFunc_VSize_ReturnValue, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Make internal mids and append external and intermal mids to mid array(SkeletalMeshComponent* CurrentExternalSkeletalMeshComponent, MaterialInstance* GunOrCharacterMaterialInstance, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstance* Temp_object_Variable, int CallFunc_Array_Add_ReturnValue, MaterialInstance* Temp_object_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, MaterialInstance* K2Node_Select_Default);// 0xbbc0600
	void Make and slave internal meshes(Transform Transform, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_Array_Get_Item, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* K2Node_Select_Default, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Spawn  Light(bool CallFunc_IsMobilePlatform_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, PointLightComponent* CallFunc_AddComponent_ReturnValue);// 0xbbc0600
	void Find Bounds(bool Temp_bool_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_BreakRotIntoAxes_X, Vector CallFunc_BreakRotIntoAxes_Y, Vector CallFunc_BreakRotIntoAxes_Z, Transform CallFunc_MakeTransform_ReturnValue, Rotator CallFunc_MakeRotationFromAxes_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Transform K2Node_Select_Default, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_GetActorBounds_Origin, Vector CallFunc_GetActorBounds_BoxExtent, float CallFunc_VSize_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0xbbc0600
	void initializeExternalSkeletalMeshArray(PlayerPawn_Athena_Generic_Parent_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena_Generic_Parent, bool K2Node_DynamicCast_bSuccess, FortAIPawn* K2Node_DynamicCast_AsFort_AIPawn, bool K2Node_DynamicCast_bSuccess, SkeletalMeshComponent*[] K2Node_MakeArray_Array, PlayerPawn_Generic_Parent_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic_Parent, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void CharacterSpawnInTimeline__FinishedFunc();// 0xbbc0600
	void CharacterSpawnInTimeline__UpdateFunc();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void UpdateExternalParameters(out const MaterialInstanceDynamic*[] MID Array, out const SkeletalMeshComponent*[] External MEsh Component Array);// 0xbbc0600
	void ExecuteUbergraph_DuplicateResOutMesh(int EntryPoint, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Event_DeltaSeconds, int CallFunc_Array_Length_ReturnValue, const MaterialInstanceDynamic*[] K2Node_CustomEvent_MID_Array, const SkeletalMeshComponent*[] K2Node_CustomEvent_External_MEsh_Component_Array, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, MaterialInstanceDynamic*[] CallFunc_External_Mesh_Masked_Setup_Corrected_Mid_Array, SkeletalMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortPlayerPawnStats.FortPawnStats.TableRowBase
	float MaxJumpTime;//[Offset: 0xb4, Size: 4]
	float MaxStamina;//[Offset: 0xb8, Size: 4]
	float StaminaRegenRate;//[Offset: 0xbc, Size: 4]
	float StaminaRegenDelay;//[Offset: 0xc0, Size: 4]
	float SprintingStaminaExpenditureRate;//[Offset: 0xc4, Size: 4]
	FName PersonalVehicleFallingDamageTableRow;//[Offset: 0xc8, Size: 8]

--------------------------------
Class: FortPawnStats.TableRowBase
	float MaximumHealth;//[Offset: 0x8, Size: 4]
	float SpeedWalk;//[Offset: 0xc, Size: 4]
	float SpeedRun;//[Offset: 0x10, Size: 4]
	float SpeedSprint;//[Offset: 0x14, Size: 4]
	float SpeedFly;//[Offset: 0x18, Size: 4]
	float SpeedCrouchedRun;//[Offset: 0x1c, Size: 4]
	float SpeedCrouchedSprint;//[Offset: 0x20, Size: 4]
	float SpeedBackwardsMultiplier;//[Offset: 0x24, Size: 4]
	float SpeedDBNO;//[Offset: 0x28, Size: 4]
	float AccelerationStrafeMultiplierSprint;//[Offset: 0x2c, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x30, Size: 4]
	float GroundFriction;//[Offset: 0x34, Size: 4]
	float BrakingDecelerationWalking;//[Offset: 0x38, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x3c, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x40, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x44, Size: 4]
	float MaxAcceleration;//[Offset: 0x48, Size: 4]
	float MaxAccelerationFlying;//[Offset: 0x4c, Size: 4]
	float JumpZVelocity;//[Offset: 0x50, Size: 4]
	CurveTable* FallingDamageTable;//[Offset: 0x58, Size: 8]
	FName FallingDamageTableRow;//[Offset: 0x60, Size: 8]
	CurveTable* VehicleEjectDamageTable;//[Offset: 0x68, Size: 8]
	float HealthRegenRate;//[Offset: 0x70, Size: 4]
	float HealthRegenDelay;//[Offset: 0x74, Size: 4]
	float HealthRegenThreshold;//[Offset: 0x78, Size: 4]
	float MaxShield;//[Offset: 0x7c, Size: 4]
	float ShieldRegenRate;//[Offset: 0x80, Size: 4]
	float ShieldRegenDelay;//[Offset: 0x84, Size: 4]
	float ShieldRegenThreshold;//[Offset: 0x88, Size: 4]
	float MaxControlResistance;//[Offset: 0x8c, Size: 4]
	float ControlResistanceRegenRate;//[Offset: 0x90, Size: 4]
	float ControlResistanceRegenDelay;//[Offset: 0x94, Size: 4]
	float ControlResistanceRegenThreshold;//[Offset: 0x98, Size: 4]
	float KnockbackMultiplier;//[Offset: 0x9c, Size: 4]
	float KnockbackThreshold;//[Offset: 0xa0, Size: 4]
	float PawnDamagedTeamNotificationDistance;//[Offset: 0xa4, Size: 4]
	bool bAllowChainStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	enum ControlRecoveryBehavior;//[Offset: 0xa9, Size: 1]
	GameplayTag CurieMaterialIdentifier;//[Offset: 0xac, Size: 8]

--------------------------------
Class: FortCharacterVehicle.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	bool bDestroyBuildingSMActorOnForceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d00, Size: 1]
	bool bDestroyOnLastExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d01, Size: 1]
	byte VTDMode;//[Offset: 0x3d06, Size: 1]
	AthenaItemWrapDefinition* SoftOverrideItemWrap;//[Offset: 0x3d18, Size: 40]
	AthenaItemWrapDefinition* OverrideItemWrap;//[Offset: 0x3d40, Size: 8]
	VehicleCosmeticInfo VehicleCosmeticInfo;//[Offset: 0x3d48, Size: 56]
	bool bForcedToAlwaysSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d80, Size: 1]
	bool bAllowInteractBetweenFortVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d81, Size: 1]
	SkeletalMeshComponent* EmoteMesh;//[Offset: 0x3d88, Size: 8]
	FortMontageItemDefinitionBase*[] SpecialVehicleEmotes;//[Offset: 0x3d90, Size: 16]
	float SpawnPropOnEmoteScalar;//[Offset: 0x3da0, Size: 4]
	FortSkeletalAudioComponent* EmoteFoleyAudioComponent;//[Offset: 0x3da8, Size: 8]
	float SeatSwitchCooldown;//[Offset: 0x3db0, Size: 4]
	MulticastInlineDelegateProperty OnMountedWeaponFiredEvent;//[Size: 16]
	FortVehicleSeatComponent* VehicleSeatComponent;//[Offset: 0x3dc8, Size: 8]
	FortAbilitySystemComponent* OverrideAbilitySystemComponent;//[Offset: 0x3dd0, Size: 8]
	FortAttributeInitializationKey AttributeInitKey;//[Offset: 0x3dd8, Size: 16]
	class AnimInstance* DriverAnimClass;//[Offset: 0x3de8, Size: 8]
	class AnimInstance* PassengerAnimClass;//[Offset: 0x3df0, Size: 8]
	FortOstrichSet* OstrichSet;//[Offset: 0x3df8, Size: 8]
	GameplayTagContainer VehicleTags;//[Offset: 0x3e00, Size: 32]
	FortAbilitySet* StartupAbilitySet;//[Offset: 0x3e20, Size: 8]
	MulticastInlineDelegateProperty OnHealthChanged;//[Size: 16]
	class FortCameraMode* CameraModeClass;//[Offset: 0x3e40, Size: 8]
	class FortCameraMode* PassengerCameraModeClass;//[Offset: 0x3e48, Size: 8]
	float MinBoostDuration;//[Offset: 0x3e50, Size: 4]
	float MaxBoostDuration;//[Offset: 0x3e54, Size: 4]
	float FullyChargedJumpTime;//[Offset: 0x3e58, Size: 4]
	float MinHoldDuration;//[Offset: 0x3e5c, Size: 4]
	float DriverExitLaunchScale;//[Offset: 0x3e60, Size: 4]
	float PassengerExitLaunchScale;//[Offset: 0x3e64, Size: 4]
	float ExtraInteractTraceRange;//[Offset: 0x3e68, Size: 4]
	float MinDistForInteract;//[Offset: 0x3e6c, Size: 4]
	float DashMovementLockDuration;//[Offset: 0x3e70, Size: 4]
	float SeatTransitionDuration;//[Offset: 0x3e74, Size: 4]
	float ClearMoveIgnoreActorsDelay;//[Offset: 0x3e78, Size: 4]
	float HealthIndicatorVerticalOffset;//[Offset: 0x3e7c, Size: 4]
	float SplashDamageMinPercent;//[Offset: 0x3e80, Size: 4]
	float SplashDamageFalloffRange;//[Offset: 0x3e84, Size: 4]
	GameplayTagContainer BlockEntry;//[Offset: 0x3e88, Size: 32]
	GameplayTagContainer IgnoreDamage;//[Offset: 0x3ea8, Size: 32]
	GameplayTagContainer IgnoreRiderDamageFalloff;//[Offset: 0x3ec8, Size: 32]
	float JumpPressTime;//[Offset: 0x3ee8, Size: 4]
	bool bDidChargeJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eec, Size: 1]
	FortPlayerController* LastController;//[Offset: 0x3ef0, Size: 8]
	FortOstrichAnimInstance* OstrichAnimInstance;//[Offset: 0x3f00, Size: 8]
	MulticastInlineDelegateProperty OnPawnEnteredVehicleAtSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnEnteredVehicleSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnExitedVehicleSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnPawnExitedVehicleFromSeat;//[Size: 16]
	MulticastInlineDelegateProperty OnSleepStateChangedDelegate;//[Size: 16]
	float IndicatorAudibleDistance;//[Offset: 0x3f5c, Size: 4]
	Texture* IndicatorIcon;//[Offset: 0x3f60, Size: 8]
	LinearColor IndicatorTint;//[Offset: 0x3f68, Size: 16]
	GameplayTag SpecialActorTag;//[Offset: 0x3f78, Size: 8]
	SlateBrush SpecialActorMinimapIconBrush;//[Offset: 0x3f80, Size: 136]
	Vector2D SpecialActorMinimapIconScale;//[Offset: 0x4008, Size: 8]
	FName SpecialActorID;//[Offset: 0x4010, Size: 8]
	ScalableFloat ReregisterSpecialActorIconDelay;//[Offset: 0x4018, Size: 40]
	void WeaponFired(FortVehicleSeatWeaponComponent* WeaponComponent, float Overheat);// 0xbbc0600
	void StopEmoting();// 0xcf49230
	bool ShouldShowSoundIndicator();// 0xcf491f0
	void SetAllowInteractionBetweenFortVolumes(bool bInteractBetweenVolumes);// 0xcf49138
	void OnShutdown();// 0xbbc0600
	void OnRep_OverrideWrap();// 0xcf49124
	void OnRep_OverrideAbilitySystemComponent();// 0xcf49110
	void OnPawnExitVehicle(FortPlayerPawn* PlayerPawn, FName ExitSocketName);// 0xcf49024
	void OnPawnEnterVehicle(FortPlayerPawn* PlayerPawn, const int SeatIdx);// 0xbbc0600
	void OnHoldExitStopped(FortPawn* ExitingPawn);// 0xbbc0600
	void OnHoldExitStarted(FortPawn* ExitingPawn, const float ExitDuration);// 0xbbc0600
	void K2_ApplyCosmeticWrap(const AthenaItemWrapDefinition* LoadedWrap);// 0xbbc0600
	void GunOverheat(FortVehicleSeatWeaponComponent* WeaponComponent);// 0xbbc0600
	SkeletalMeshComponent* GetSkeletalMeshComponent();// 0xcf48fe8
	SkeletalMeshComponent* GetMechMesh();// 0xcf48fcc
	bool GetIsChargedJumpActive();// 0xcf48f94
	bool GetHasGunner();// 0xcf48f5c
	SkeletalMeshComponent* GetEmoteMesh();// 0xcf48f40
	AbilitySystemComponent* GetAbilitySystemComponent();// 0xcf48f04
	FText FormatActionLabelText(out const FName ActionName, out const FText InActionLabel);// 0xbbc0600
	bool DoesDamageCauserPreventDamageFromBeingNulled(Actor* DamageCauser);// 0xcf48e48
	bool BP_CanInteract(FortPlayerController* FortPC);// 0xcf48d8c
	bool AllowInteractionBetweenFortVolume();// 0xcf48d4c

--------------------------------
Class: FortSkeletalAudioComponent.ActorComponent.Object
	FortSkeletalAudioAssetBank* AudioAssetBank;//[Offset: 0xb0, Size: 8]
	bool bShouldIgnoreDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float interpSpeed;//[Offset: 0xbc, Size: 4]
	bool bShouldAttachOneShots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	SkeletalAudioBoneInstance[] BoneInstances;//[Offset: 0xc8, Size: 16]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0xd8, Size: 8]
	MulticastInlineDelegateProperty OnLoopSoundTriggered;//[Size: 16]
	MulticastInlineDelegateProperty OnLoopSoundModulated;//[Size: 16]
	MulticastInlineDelegateProperty OnMediumSoundTriggered;//[Size: 16]
	MulticastInlineDelegateProperty OnHeavySoundTriggered;//[Size: 16]
	void SetVolumeMultiplier(float Multiplier);// 0xd1d0758
	void SetSkeletalMesh(SkeletalMeshComponent* NewSkeletalMesh);// 0xd1d06b0
	void SetCustomTrackedTransform(int Index, out const Transform Transform);// 0xd1d05a0
	void SetCanPlay(bool CanPlay);// 0xd1d04f0

--------------------------------
Class: FortSkeletalAudioAssetBank.DataAsset.Object
	SkeletalAudioBoneConfig[] BoneConfigs;//[Offset: 0x30, Size: 16]

--------------------------------
Class: SkeletalAudioBoneConfig
	FName BoneName;//[Offset: 0x0, Size: 8]
	SoundBase* SoundLoop;//[Offset: 0x8, Size: 8]
	SoundBase* SoundMediumDelta;//[Offset: 0x10, Size: 8]
	SoundBase* SoundHighDelta;//[Offset: 0x18, Size: 8]
	float ThresholdLoop;//[Offset: 0x20, Size: 4]
	float ThresholdMedium;//[Offset: 0x24, Size: 4]
	float ThresholdHigh;//[Offset: 0x28, Size: 4]
	float RetriggerDelay;//[Offset: 0x2c, Size: 4]
	enum TrackingSpace;//[Offset: 0x30, Size: 1]
	enum VelocityTrackingType;//[Offset: 0x31, Size: 1]

--------------------------------
Class: SkeletalAudioBoneInstance
	AudioComponent* LoopInstance;//[Offset: 0x10, Size: 8]
	float Delta;//[Offset: 0x18, Size: 4]

--------------------------------
Class: FortOstrichSet.FortAttributeSet.AttributeSet.Object
	FortGameplayAttributeData WalkSpeed;//[Offset: 0x30, Size: 40]
	FortGameplayAttributeData SprintSpeed;//[Offset: 0x58, Size: 40]

--------------------------------
Class: FortOstrichAnimInstance.FortAnimInstance.FortBaseAnimInstance.AnimInstance.Object
	AnimMontage* EmoteMeshSpecialMontage;//[Offset: 0x400, Size: 40]
	AnimMontage* MechMeshSpecialMontage;//[Offset: 0x428, Size: 8]
	bool bDoingSpecialEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool bIsCosmeticPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	FortAnimInput_VelocityImpact VelocityImpactInput;//[Offset: 0x434, Size: 188]
	bool bIsMoving2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f0, Size: 1]
	bool bWasMoving2DLastFrame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f0, Size: 1]
	bool bIsShotgunFired;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f0, Size: 1]
	bool bIsMechBeginFired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f0, Size: 1]
	bool bIsFallingWithDriver;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f0, Size: 1]
	bool bIsSkyTubingWithDriver;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4f0, Size: 1]
	bool bIsInAirWithDriver;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4f0, Size: 1]
	bool bStartTransitionTriggeredAndEnableStarts;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4f0, Size: 1]
	float MechWalkPlayRateValue;//[Offset: 0x4f4, Size: 4]
	float MechWalkSpeedWarpingValue;//[Offset: 0x4f8, Size: 4]
	float RocketCurveValueFloat;//[Offset: 0x4fc, Size: 4]
	float ShotgunAmmo_SlideValue;//[Offset: 0x500, Size: 4]
	FortCharacterVehicle_Ostrich* Ostrich;//[Offset: 0x508, Size: 8]
	SkeletalMeshComponent* EmoteMeshToCopy;//[Offset: 0x510, Size: 8]
	Vector ImpactDisplacement;//[Offset: 0x518, Size: 12]
	FortAnimInput_TurnInPlace TurnInPlaceInput;//[Offset: 0x528, Size: 112]
	float YawDeltaCurrentTick;//[Offset: 0x598, Size: 4]
	Vector ActorLocationLastTick;//[Offset: 0x59c, Size: 12]
	Rotator ActorRotationLastTick;//[Offset: 0x5a8, Size: 12]
	float SlopeWarpingAlpha;//[Offset: 0x5b4, Size: 4]
	Vector2D SlopeWarpingAlphaSpeedInputRange;//[Offset: 0x5b8, Size: 8]
	Vector2D SlopeWarpingAlphaSpeedOutputRange;//[Offset: 0x5c0, Size: 8]
	float SlopeWarpingAlphaInterpSpeed;//[Offset: 0x5c8, Size: 4]
	float Speed2D;//[Offset: 0x5cc, Size: 4]
	float LocalAimYaw;//[Offset: 0x5d0, Size: 4]
	float GunnerAimTargetDeltaYaw;//[Offset: 0x5d4, Size: 4]
	float GunnerAimTargetDeltaPitch;//[Offset: 0x5d8, Size: 4]
	enum LocalAimCardinalDirection;//[Offset: 0x5dc, Size: 1]
	float LocalAimYawDeadZoneAngle;//[Offset: 0x5e0, Size: 4]
	float LocalVelocityYawAngle;//[Offset: 0x5e4, Size: 4]
	FloatRK4SpringInterpolator LocalVelocityYawAngleInterpolator;//[Offset: 0x5e8, Size: 8]
	float LocalVelocityYawAngleInterpolated;//[Offset: 0x60c, Size: 4]
	float LocalAccelerationYawAngle;//[Offset: 0x610, Size: 4]
	enum LocomotionCardinalDirection;//[Offset: 0x614, Size: 1]
	float LocomotionDeadZoneAngle;//[Offset: 0x618, Size: 4]
	Vector WorldSpaceAimPoint;//[Offset: 0x61c, Size: 12]
	bool bIsDashing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x628, Size: 1]
	bool bIsDashAnimDurationElapsed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x628, Size: 1]
	bool bIsChargingJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x628, Size: 1]
	bool bHasDriver;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x628, Size: 1]
	bool bHasGunner;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x628, Size: 1]
	bool bIsEmoting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x628, Size: 1]
	bool bIsOnGround;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x628, Size: 1]
	bool bIsRocketOnCoolDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x628, Size: 1]
	bool bShouldApplyShoulderPadsAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x629, Size: 1]
	bool bInAir;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x629, Size: 1]
	bool bShouldRightArmLookAt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x629, Size: 1]
	bool bPassengerBootUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x629, Size: 1]
	bool bIsEmptyOnFirstLoad;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x629, Size: 1]
	bool bJustDidStompInAir;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x629, Size: 1]
	bool bIsStompInAir;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x629, Size: 1]
	bool bWasStompInAir;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x629, Size: 1]
	bool bShouldPlayJumpCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62a, Size: 1]
	bool bHadDriver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62a, Size: 1]
	bool bJustGotDriver;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62a, Size: 1]
	bool bJustLostDriver;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62a, Size: 1]
	bool bWasDashing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62a, Size: 1]
	bool bStartedDash;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62a, Size: 1]
	bool bHadGunner;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62a, Size: 1]
	bool bJustGotGunner;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62a, Size: 1]
	bool bJustLostGunner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62b, Size: 1]
	bool bShouldPlayJogStop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62b, Size: 1]
	bool bShouldBringAmmoBack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62b, Size: 1]
	bool bHasAnyPlayer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62b, Size: 1]
	bool bIsOnCoolDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62b, Size: 1]
	bool bShouldPlayNormalJump;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62b, Size: 1]
	bool bShouldPlayChargedJump;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62b, Size: 1]
	bool bIsSkyTubing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62b, Size: 1]
	bool bShouldPlaySkyTubingLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62c, Size: 1]
	bool bStartTransitionTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62c, Size: 1]
	bool bStartEarlyOut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62c, Size: 1]
	bool bPivotTransitionTriggered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62c, Size: 1]
	bool bPivotEarlyOut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x62c, Size: 1]
	bool bShouldEarlyOutStompLanding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62c, Size: 1]
	float JumpApexLoopAlphaValue;//[Offset: 0x630, Size: 4]
	float StatusStartPositionAlphaValue;//[Offset: 0x634, Size: 4]
	float InMotionAlphaValue;//[Offset: 0x638, Size: 4]
	float DashLeansAlphaValue;//[Offset: 0x63c, Size: 4]
	float ShotgunShellsAlphaValue;//[Offset: 0x640, Size: 4]
	float GunnerJogBounceAlphaValue;//[Offset: 0x644, Size: 4]
	Rotator AimYawRotationValue;//[Offset: 0x648, Size: 12]
	float GunnerAimYawBlendIn;//[Offset: 0x654, Size: 4]
	float GunnerAimYawBlendOut;//[Offset: 0x658, Size: 4]
	float RightArmNoAdditiveAlphaValue;//[Offset: 0x65c, Size: 4]
	float BaseAdditiveAlphaValue;//[Offset: 0x660, Size: 4]
	float GunnerAlphaValue;//[Offset: 0x664, Size: 4]
	float JoyStickAlphaValue;//[Offset: 0x668, Size: 4]
	float ShellOneAlphaValue;//[Offset: 0x66c, Size: 4]
	float ShellTwoAlphaValue;//[Offset: 0x670, Size: 4]
	float ShellThreeAlphaValue;//[Offset: 0x674, Size: 4]
	float ShellFourAlphaValue;//[Offset: 0x678, Size: 4]
	float ShellsPlayRateValue;//[Offset: 0x67c, Size: 4]
	float RecoilAmountAlphaValue;//[Offset: 0x680, Size: 4]
	float LowerBodyRecoilAdditiveAlphaValue;//[Offset: 0x684, Size: 4]
	float ChargeJumpFloatValue;//[Offset: 0x688, Size: 4]
	float InMotionAlphaInterpSpeed;//[Offset: 0x68c, Size: 4]
	float DashLeansAlphaInterpSpeed;//[Offset: 0x690, Size: 4]
	float GunnerJogBounceAlphaInterpSpeed;//[Offset: 0x694, Size: 4]
	float RightArmNoAdditiveInterpSpeed;//[Offset: 0x698, Size: 4]
	float JoyStickAlphaInterpSpeed;//[Offset: 0x69c, Size: 4]
	float GunnerAlphaInterpSpeed;//[Offset: 0x6a0, Size: 4]
	float StatusStartPositionAlphaWhemIsEmptyOnFirstLoad;//[Offset: 0x6a4, Size: 4]
	float DashLeansAlphaWhenGunner;//[Offset: 0x6a8, Size: 4]
	float DashLeansAlphaNoGunner;//[Offset: 0x6ac, Size: 4]
	float ShotgunShellsAlphaWhenShotgunFires;//[Offset: 0x6b0, Size: 4]
	float ShotgunShellsAlphaNoShotgunFiring;//[Offset: 0x6b4, Size: 4]
	float BaseAdditiveAlphaWhenMontageIsPlaying;//[Offset: 0x6b8, Size: 4]
	float BaseAdditiveAlphaNoMontagePlaying;//[Offset: 0x6bc, Size: 4]
	float JoyStickAlphaWithGunner;//[Offset: 0x6c0, Size: 4]
	float GunnerAlphaWithGunner;//[Offset: 0x6c4, Size: 4]
	float ShellOneAlphaAmmoCountAt3;//[Offset: 0x6c8, Size: 4]
	float ShellTwoAlphaAmmoCountAt2;//[Offset: 0x6cc, Size: 4]
	float ShellThreeAlphaAmmoCountAt1;//[Offset: 0x6d0, Size: 4]
	float ShellFourAlphaAmmoCountAt0;//[Offset: 0x6d4, Size: 4]
	float ShellsPlayRateWhenNoMoreAmmoAndShouldBringAmmo;//[Offset: 0x6d8, Size: 4]
	float RecoilAmountAlphaWhenMontagePlayingAndShotgunFires;//[Offset: 0x6dc, Size: 4]
	float LowerBodyRecoilAdditiveAlphaWithDriver;//[Offset: 0x6e0, Size: 4]
	float LowerBodyRecoilAdditiveAlphaNoDriver;//[Offset: 0x6e4, Size: 4]
	float JumpApexLoopAlphaNotChargingJump;//[Offset: 0x6e8, Size: 4]
	float JumpApexLoopAlphaWhenIsChargingJump;//[Offset: 0x6ec, Size: 4]
	float PlayRateSpeedWarpAlpha;//[Offset: 0x6f0, Size: 4]
	float RigidBodyAlpha;//[Offset: 0x6f4, Size: 4]
	AnimMontage* MechShotgunReload;//[Offset: 0x6f8, Size: 8]
	AnimMontage* MechShotgunFireA;//[Offset: 0x700, Size: 8]
	AnimMontage* MechShotgunFireB;//[Offset: 0x708, Size: 8]
	AnimMontage* MechRocketFire;//[Offset: 0x710, Size: 8]
	AnimMontage* MechRocketFireSettle;//[Offset: 0x718, Size: 8]
	AnimSequence* ChargedJumpApexSeq;//[Offset: 0x720, Size: 8]
	AnimSequence* ChargedJumpFallSeq;//[Offset: 0x728, Size: 8]
	BlendSpace1D* ChargedJumpLandSeq;//[Offset: 0x730, Size: 8]
	AnimSequence* ChargedJumpLandPredictedSeq;//[Offset: 0x738, Size: 8]
	AnimSequence* NormalJumpApexSeq;//[Offset: 0x740, Size: 8]
	AnimSequence* NormalJumpFallSeq;//[Offset: 0x748, Size: 8]
	BlendSpace1D* NormalJumpLandSeq;//[Offset: 0x750, Size: 8]
	AnimSequence* NormalJumpLandPredictedSeq;//[Offset: 0x758, Size: 8]
	AnimSequence* JumpBaseApexSeq;//[Offset: 0x760, Size: 8]
	AnimSequence* JumpBaseFallSeq;//[Offset: 0x768, Size: 8]
	BlendSpace1D* JumpBaseLandSeq;//[Offset: 0x770, Size: 8]
	AnimSequence* JumpBaseLandPredictedSeq;//[Offset: 0x778, Size: 8]
	bool bTransition_Idle_To_Movement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x780, Size: 1]
	bool bTransition_BootUp_To_Movement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x780, Size: 1]
	bool bTransition_Turn_To_Idle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x780, Size: 1]
	bool bTransition_Stop_To_Idle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x780, Size: 1]
	bool bTransition_DashLoop_To_Default;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x780, Size: 1]
	bool bTransition_DashLoop_To_DashOutro;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x780, Size: 1]
	float NotJustGotDriverFloat;//[Offset: 0x784, Size: 4]
	float IsShotgunFiredFloat;//[Offset: 0x788, Size: 4]
	Rotator UpperBodyLagOffset;//[Offset: 0x78c, Size: 12]
	float UpperBodyLagMaxRecoverySpeed;//[Offset: 0x798, Size: 4]
	float UpperBodyLagRecoverySmoothness;//[Offset: 0x79c, Size: 4]
	float UpperBodyLagRecoveryMass;//[Offset: 0x7a0, Size: 4]
	float UpperBodyLagRecoveryDelay;//[Offset: 0x7a4, Size: 4]
	float UpperBodyLagOffsetLimitDuringTurns;//[Offset: 0x7a8, Size: 4]
	float UpperBodyLagOffsetLimitDuringTurnsInterpSpeed;//[Offset: 0x7ac, Size: 4]
	float UpperBodyLagOffsetLimitWhileStill;//[Offset: 0x7b0, Size: 4]
	float UpperBodyLagOffsetLimitWhileStillInterpSpeed;//[Offset: 0x7b4, Size: 4]
	float CurrentUpperBodyLagRecoverySpeed;//[Offset: 0x7b8, Size: 4]
	float TimeUntilNextUpperBodyLagRecovery;//[Offset: 0x7bc, Size: 4]
	float CurrentUpperBodyLagOffsetLimit;//[Offset: 0x7c0, Size: 4]
	FortDistanceCurve DistanceCurve;//[Offset: 0x7c4, Size: 12]
	FortCachedFloatCurve PlayRateSpeedWarpAlphaCurve;//[Offset: 0x7d0, Size: 12]
	CachedAnimStateData PivotStateData;//[Offset: 0x7dc, Size: 28]
	AnimSequence* PivotAnimationLeft;//[Offset: 0x7f8, Size: 8]
	AnimSequence* PivotAnimationRight;//[Offset: 0x800, Size: 8]
	float PivotEarlyOutAngleThreshold;//[Offset: 0x808, Size: 4]
	FortAnimInput_TurnCorrection PivotTurnCorrection;//[Offset: 0x80c, Size: 52]
	Vector PivotLocation;//[Offset: 0x840, Size: 12]
	Vector PivotInitialFacingDir2D;//[Offset: 0x84c, Size: 12]
	AnimSequence* PivotAnimation;//[Offset: 0x858, Size: 8]
	float PivotAnimPosition;//[Offset: 0x860, Size: 4]
	CachedAnimStateData MovementStateData;//[Offset: 0x864, Size: 28]
	bool bEnableStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	CachedAnimStateData StartStateData;//[Offset: 0x884, Size: 28]
	FortDirectionalAnimRef DirectionalStartAnims;//[Offset: 0x8a0, Size: 40]
	float StartEarlyOutThresold;//[Offset: 0x8c8, Size: 4]
	FortAnimInput_TurnCorrection StartTurnCorrection;//[Offset: 0x8cc, Size: 52]
	float StartAnimDistanceFromMarker;//[Offset: 0x900, Size: 4]
	float ActualDistanceFromMarker;//[Offset: 0x904, Size: 4]
	float StartAnimTimeElapsed;//[Offset: 0x908, Size: 4]
	float StartInitialAccelYaw;//[Offset: 0x90c, Size: 4]
	float StartTurnDirection;//[Offset: 0x910, Size: 4]
	Vector StartAnimLocation;//[Offset: 0x914, Size: 12]
	enum StartCardinalDirection;//[Offset: 0x920, Size: 1]
	AnimSequenceBase* StartAnimation;//[Offset: 0x928, Size: 8]
	float StartAnimPosition;//[Offset: 0x930, Size: 4]
	void StopSeatTransition_PassengerExit();// 0xbbc0600
	void StopSeatTransition_PassengerEnter();// 0xbbc0600
	void StopSeatTransition_DriverExit();// 0xbbc0600
	void StopSeatTransition_DriverEnter();// 0xbbc0600
	void StartSeatTransition_PassengerExit();// 0xbbc0600
	void StartSeatTransition_PassengerEnter();// 0xbbc0600
	void StartSeatTransition_DriverExit();// 0xbbc0600
	void StartSeatTransition_DriverEnter();// 0xbbc0600
	void OnReloadShotgun();// 0xbbc0600
	void OnFireShotgun();// 0xbbc0600
	void OnFiredSingleRocket(out const int NumRocketsLeft);// 0xbbc0600
	void OnEmoteMontageStarted(AnimMontage* EmoteMontage);// 0xd0f8e30
	void OnEmoteMontageBlendingOut(AnimMontage* EmoteMontage, bool bInterrupted);// 0xd0f8d38
	void AnimNotify_MechBeginFire(const AnimNotify* Notify);// 0xd0f8c90
	void AnimNotify_JumpEnter(const AnimNotify* Notify);// 0xd0f8be8
	void AnimNotify_EmptyPoseState(const AnimNotify* Notify);// 0xd0f8b40
	void AnimNotify_AnimNotify_Mech_OnCoolDown(const AnimNotify* Notify);// 0xd0f8a98
	void AnimNotify_AnimNotify_AmmoHide(const AnimNotify* Notify);// 0xd0f89f0
	void AnimNotify_AnimNotify_AmmoCheck(const AnimNotify* Notify);// 0xd0f8948

--------------------------------
Class: FortAnimInput_VelocityImpact
	Vector LastVelocity;//[Offset: 0x0, Size: 12]
	Vector DeltaVelocityThreshold;//[Offset: 0xc, Size: 12]
	Vector ImpactScale;//[Offset: 0x18, Size: 12]
	InputRange ImpactLimitX;//[Offset: 0x24, Size: 8]
	InputRange ImpactLimitY;//[Offset: 0x2c, Size: 8]
	InputRange ImpactLimitZ;//[Offset: 0x34, Size: 8]
	FloatRK4SpringInterpolator SpringInterpolatorX;//[Offset: 0x3c, Size: 8]
	FloatRK4SpringInterpolator SpringInterpolatorY;//[Offset: 0x60, Size: 8]
	FloatRK4SpringInterpolator SpringInterpolatorZ;//[Offset: 0x84, Size: 8]
	bool bTestVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	Vector TestVelocity;//[Offset: 0xac, Size: 12]
	bool bIsForwardImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
	bool bIsBackwardImpact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 1]
	bool bIsLeftImpact;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 1]
	bool bIsRightImpact;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 1]
	bool bIsUpImpact;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 1]
	bool bIsDownImpact;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 1]

--------------------------------
Class: InputRange
	float min;//[Offset: 0x0, Size: 4]
	float max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FloatRK4SpringInterpolator
	float StiffnessConstant;//[Offset: 0x0, Size: 4]
	float DampeningRatio;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FortCharacterVehicle_Ostrich.FortCharacterVehicle.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	bool bExplodeOnDetonate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4058, Size: 1]
	Vector GunnerAimPoint;//[Offset: 0x405c, Size: 12]
	Actor* ShieldActor;//[Offset: 0x4068, Size: 8]
	AbilitySystemComponent* SelfDestructAbilityComp;//[Offset: 0x4070, Size: 8]
	TimerHandle DriverPrimaryCooldownHandle;//[Offset: 0x4078, Size: 8]
	TimerHandle DriverSecondaryCooldownHandle;//[Offset: 0x4080, Size: 8]
	class GameplayEffect[] KillExplosions;//[Offset: 0x4088, Size: 16]
	AnimMontage*[] StopMontagesOnGunnerExit;//[Offset: 0x4098, Size: 16]
	VehicleSpecificUIDetails[] CustomUI;//[Offset: 0x40a8, Size: 16]
	ActiveVehicleUI[] ActiveUI;//[Offset: 0x40b8, Size: 16]
	Vector ApproxGunnerCameraOffset;//[Offset: 0x40c8, Size: 12]
	float LandingMovementLockDurationMin;//[Offset: 0x40d4, Size: 4]
	float LandingMovementLockDurationMax;//[Offset: 0x40d8, Size: 4]
	float KneelingGunnerSeatVerticalOffset;//[Offset: 0x40dc, Size: 4]
	float KneelingDriverSeatVerticalOffset;//[Offset: 0x40e0, Size: 4]
	FName PassengerCameraSocket;//[Offset: 0x40e4, Size: 8]
	FName PassengerRootSocket;//[Offset: 0x40ec, Size: 8]
	FName BeamScaleName;//[Offset: 0x40f4, Size: 8]
	FName BeamLifeName;//[Offset: 0x40fc, Size: 8]
	FName BeamAttachName;//[Offset: 0x4104, Size: 8]
	FName OstrichShieldBoostStatName;//[Offset: 0x410c, Size: 8]
	float PassengerCameraFixedVerticalOffset;//[Offset: 0x4114, Size: 4]
	float PassengerCameraFixedVerticalOffsetNoDriver;//[Offset: 0x4118, Size: 4]
	float DriverPrimaryCooldownTime;//[Offset: 0x411c, Size: 4]
	float DriverSecondaryCooldownTime;//[Offset: 0x4120, Size: 4]
	float DetonateDelay;//[Offset: 0x4124, Size: 4]
	float DetonateDelaySelfDestruct;//[Offset: 0x4128, Size: 4]
	float DetonateRange;//[Offset: 0x412c, Size: 4]
	float DriverKickMoveLockDuration;//[Offset: 0x4130, Size: 4]
	float KickRootMotionDelay;//[Offset: 0x4134, Size: 4]
	float KickRootMotionDuration;//[Offset: 0x4138, Size: 4]
	float ShieldBoostCooldown;//[Offset: 0x413c, Size: 4]
	float ShieldRadius;//[Offset: 0x4140, Size: 4]
	float SelfDestructInteractDuration;//[Offset: 0x4144, Size: 4]
	float AccelFromIdle;//[Offset: 0x4148, Size: 4]
	float AccelFromIdleDuration;//[Offset: 0x414c, Size: 4]
	float IdleTimeThreshold;//[Offset: 0x4150, Size: 4]
	float LockoutDurationAfterRequestSeatChange;//[Offset: 0x4154, Size: 4]
	float MaxBeamLen;//[Offset: 0x4158, Size: 4]
	AnimMontage* DriverToGunnerTransition;//[Offset: 0x4160, Size: 8]
	AnimMontage* GunnerToDriverTransition;//[Offset: 0x4168, Size: 8]
	bool bChargingJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4170, Size: 1]
	bool bDriverLocalChargingJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4171, Size: 1]
	bool bChargingRockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4172, Size: 1]
	bool bAutomaticallyFiringShotgun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4173, Size: 1]
	enum DetonationState;//[Offset: 0x4174, Size: 1]
	bool bLocalSimulatedChargingJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4175, Size: 1]
	bool bDashing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4176, Size: 1]
	bool bKickRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4177, Size: 1]
	bool bLoadingRockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4178, Size: 1]
	bool bKickActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4179, Size: 1]
	bool bLocalJumpButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417a, Size: 1]
	bool bAllowEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417b, Size: 1]
	bool bAcceleratingFromIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417c, Size: 1]
	float IdleTime;//[Offset: 0x4180, Size: 4]
	float MovingTime;//[Offset: 0x4184, Size: 4]
	float RequestSeatChangeTime;//[Offset: 0x4188, Size: 4]
	float ChargeJumpStartTime;//[Offset: 0x418c, Size: 4]
	float GroundDashStartTime;//[Offset: 0x4190, Size: 4]
	float ShieldBoostStartTime;//[Offset: 0x4194, Size: 4]
	float KickStartTime;//[Offset: 0x4198, Size: 4]
	ParticleSystemComponent* SpawnedBeam;//[Offset: 0x41a0, Size: 8]
	ParticleSystemComponent* SpawnedImpact;//[Offset: 0x41a8, Size: 8]
	ParticleSystemComponent* SpawnedImpactEnemy;//[Offset: 0x41b0, Size: 8]
	ParticleSystemComponent* SpawnedSource;//[Offset: 0x41b8, Size: 8]
	float BlendedPassengerVerticalCamOffset;//[Offset: 0x41c0, Size: 4]
	float OverrideLandingMoveLockDuration;//[Offset: 0x41c4, Size: 4]
	int ShieldBoostResourceCost;//[Offset: 0x41c8, Size: 4]
	float KickAnimationDuration;//[Offset: 0x41cc, Size: 4]
	float DestroyDelayAfterExplosion;//[Offset: 0x41d0, Size: 4]
	float PawnRotationRate;//[Offset: 0x41d4, Size: 4]
	float AirDashOverrideAngle;//[Offset: 0x41d8, Size: 4]
	float GunnerAimPointUpdateRate;//[Offset: 0x41dc, Size: 4]
	float GunnerAimPointTraceRange;//[Offset: 0x41e0, Size: 4]
	float GroundDashAnimationDuration;//[Offset: 0x41e4, Size: 4]
	float GunnerAimPointUpdateDelay;//[Offset: 0x41e8, Size: 4]
	float MechMissileDamageToGunnerShield;//[Offset: 0x41ec, Size: 4]
	float SimulatedProxyFixupRange;//[Offset: 0x41f0, Size: 4]
	bool bEnableTargetingLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f4, Size: 1]
	bool bEnableSimulatedProxyFixup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41f5, Size: 1]
	GameplayTag RocketSettleCue;//[Offset: 0x41f8, Size: 8]
	GameplayTag RocketFireCue;//[Offset: 0x4200, Size: 8]
	GameplayTag RocketLoadingCue;//[Offset: 0x4208, Size: 8]
	GameplayTag ReloadShotgunTag;//[Offset: 0x4210, Size: 8]
	GameplayTag FireShotgunTag;//[Offset: 0x4218, Size: 8]
	GameplayTag MissilesTag;//[Offset: 0x4220, Size: 8]
	GameplayTagContainer KickStompTag;//[Offset: 0x4228, Size: 32]
	GameplayTag IndividualRocketFired;//[Offset: 0x4248, Size: 8]
	GameplayTag IndividualRocketLoaded;//[Offset: 0x4250, Size: 8]
	GameplayTag LocalSelfDestructPrimeUnderway;//[Offset: 0x4258, Size: 8]
	class FortCameraMode* DriverChargeJumpCamera;//[Offset: 0x4260, Size: 8]
	ParticleSystem* BeamTemplate;//[Offset: 0x4268, Size: 8]
	ParticleSystem* BeamHitTemplate;//[Offset: 0x4270, Size: 8]
	ParticleSystem* BeamHitEnemyTemplate;//[Offset: 0x4278, Size: 8]
	ParticleSystem* BeamSourceTemplate;//[Offset: 0x4280, Size: 8]
	float PassengerCamBlendTarget;//[Offset: 0x4288, Size: 4]
	float GunnerAimpointUpdateTimer;//[Offset: 0x428c, Size: 4]
	bool bDriverPrimaryCooldownReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4290, Size: 1]
	bool bDriverSecondaryCooldownReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4291, Size: 1]
	bool bBufferedDriverExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4292, Size: 1]
	bool bHoldingSelfDestruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4293, Size: 1]
	bool bLocalDriverRequestedExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4294, Size: 1]
	bool bLocalPrimaryFireButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4295, Size: 1]
	bool bLocalSecondaryFireButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4296, Size: 1]
	bool bEmoteAudioForceStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4297, Size: 1]
	bool bAimedAtEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4298, Size: 1]
	bool bAimedAtSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4299, Size: 1]
	FortVehicleAudioVoice* NativeLinearMovementAudio;//[Offset: 0x42a0, Size: 8]
	FortVehicleAudioVoice* NativeRotationalMovementAudio;//[Offset: 0x42a8, Size: 8]
	AudioComponent* NativeTargetingLaserAudio;//[Offset: 0x42b0, Size: 8]
	class FortOstrichVehicleConfigs* FortOstrichVehicleConfigsClass;//[Offset: 0x42b8, Size: 8]
	FortOstrichVehicleConfigs* FortOstrichVehicleConfigs;//[Offset: 0x42c0, Size: 8]
	OstrichWeapon_RetainedData CachedWeaponState;//[Offset: 0x4338, Size: 12]
	CapsuleComponent* PickupCapsuleComponent;//[Offset: 0x4348, Size: 8]
	BaseStatManager* OstrichCustomStats;//[Offset: 0x4350, Size: 8]
	ScalableFloat SelfDestructInStormDelay;//[Offset: 0x4358, Size: 40]
	void SetTargetingLaserAudioComp(AudioComponent* TargetingLaserAudio);// 0xcf4d2dc
	void SetShieldActor(Actor* InShieldActor);// 0xcf4d234
	void SetRotationalAudioComp(FortVehicleAudioVoice* RotAudio);// 0xcf4d190
	void SetLinearAudioComp(FortVehicleAudioVoice* LinearAudio);// 0xcf4d0ec
	void ServerSetJumpCharging(bool bNewCharging);// 0xcf4d008
	void ServerNotifyDriverInput(bool bIsPrimaryFire);// 0xcf4cf24
	void OnStartShotgunReload();// 0xcf4cf10
	void OnStartChargeJump();// 0xbbc0600
	void OnRep_Kick();// 0xcf4cefc
	void OnRep_IsDashing();// 0xcf4cee8
	void OnRep_Detonating();// 0xcf4ced4
	void OnRep_ChargeJump();// 0xcf4cec0
	void OnReleaseChargeJump(float ChargeAlpha);// 0xbbc0600
	void OnPressShieldBoost();// 0xbbc0600
	void OnPressHonk();// 0xbbc0600
	void OnPickupCapsuleBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xcf4ccac
	void OnLoadingRockets(bool bStarting);// 0xbbc0600
	void OnKickStomp();// 0xcf4cc98
	void OnKickFinished();// 0xcf4cc84
	void OnFailedShieldBoost();// 0xbbc0600
	void OnDriverSecondaryFire();// 0xbbc0600
	void OnDriverPrimaryFire();// 0xbbc0600
	void OnDetonateTimerStart(enum InDetonationState);// 0xbbc0600
	void OnDashStart();// 0xcf4cc70
	void OnDashFinished();// 0xcf4cc5c
	void NotifyBlueprintShotgunReload();// 0xbbc0600
	void NotiftyBlueprintShotgunFired();// 0xbbc0600
	void MulticastDriverInput(bool bIsPrimaryFire);// 0xcf4cba4
	bool IsShotgunReloading();// 0xcf4cb6c
	bool IsRocketOnCooldown();// 0xcf4cb34
	bool IsGunnerShieldActive();// 0xbbc0600
	bool IsFiringRockets();// 0xcf4cafc
	void GunnerShieldTakeDamage(float Damage);// 0xbbc0600
	float GetJumpChargeCursor();// 0xcf4cac8
	bool GetIsDashing();// 0xcf4ca90
	bool GetIsChargingJump();// 0xcf4ca58
	FortWeaponRanged_Ostrich* GetGunnerWeapon();// 0xcf4ca24
	float GetGunnerAimAngleDelta();// 0xcf4c9f0
	bool GetGroundSlamBool();// 0xbbc0600
	float GetDriverTurnAngleDelta();// 0xcf4c9bc
	bool GetDashAnimationActive();// 0xcf4c984
	float GetChargeJumpingFloat();// 0xbbc0600
	Vector GetAimPoint();// 0xcf4c94c
	void GameplayCue_Athena_Ostrich_Reload();// 0xcf4c938
	void GameplayCue_Athena_Ostrich_LoadSingleRocket(byte EventType, GameplayCueParameters Parameters);// 0xcf4c650
	void GameplayCue_Athena_Ostrich_Load();// 0xcf4c63c
	void GameplayCue_Athena_Ostrich_Fire_Stop();// 0xcf4c628
	void GameplayCue_Athena_Ostrich_Fire_Start();// 0xcf4c614
	void GameplayCue_Athena_Ostrich_Fire_Single(byte EventType, GameplayCueParameters Parameters);// 0xcf4c32c
	void ForceDetonate(bool bExplode);// 0xcf4c27c
	void AirDash(out const Vector InDirection, float Speed, float MinVerticalSpeed);// 0xcf4c14c

--------------------------------
Class: FortVehicleAudioVoice.AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* LoopingSound;//[Offset: 0x860, Size: 8]
	bool bFadeWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	float FadeTimeWhenOwnerDestroyed;//[Offset: 0x86c, Size: 4]
	FortVehicleAudioOneshotGate[] OneshotGates;//[Offset: 0x870, Size: 16]
	MulticastInlineDelegateProperty OnOneshotEvent;//[Size: 16]
	float OneShotGateInterpSpeed;//[Offset: 0x890, Size: 4]
	FortVehicleAudioParam VolumeParam;//[Offset: 0x8a8, Size: 32]
	FortVehicleAudioParam PitchParam;//[Offset: 0x8c8, Size: 32]
	FortVehicleAudioFloatParam[] FloatParams;//[Offset: 0x8e8, Size: 16]
	FortVehicleAudioFloatParam[] ExplicitFloatParams;//[Offset: 0x8f8, Size: 16]
	Vector2D ParamRange;//[Offset: 0x908, Size: 8]
	void StopAllAudio();// 0xb6d16e8
	void SetParamRange(float min, float max);// 0xd200d1c
	void SetParamExplicit(FName Name, float Param);// 0xd200c34
	void SetParam(float Param);// 0xb6d1640

--------------------------------
Class: FortVehicleAudioOneshotGate
	float GateValue;//[Offset: 0x0, Size: 4]
	enum Direction;//[Offset: 0x4, Size: 1]
	bool FadeWhenOutsideGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	SoundBase* Sound;//[Offset: 0x8, Size: 8]
	float MinTimeSinceTrigger;//[Offset: 0x10, Size: 4]
	float InterruptFadeTime;//[Offset: 0x14, Size: 4]
	AudioComponent* AudioComp;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortVehicleAudioParam
	float Value;//[Offset: 0x0, Size: 4]
	enum InterpType;//[Offset: 0x4, Size: 1]
	CurveFloat* Curve;//[Offset: 0x8, Size: 8]
	float AttackSpeed;//[Offset: 0x10, Size: 4]
	float ReleaseSpeed;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FortVehicleAudioFloatParam
	FName Name;//[Offset: 0x0, Size: 8]
	FortVehicleAudioParam Data;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FortWeaponRanged_Ostrich.FortWeaponRangedForVehicle.FortWeaponRanged.FortWeapon.Actor.Object
	class FortProjectileBase* ProjectileTemplate;//[Offset: 0x1188, Size: 8]
	bool bRocketsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1190, Size: 1]
	bool bLocalChargingRockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1198, Size: 1]
	bool bRocketFireButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1199, Size: 1]
	int RocketAmmoLocal;//[Offset: 0x119c, Size: 4]
	int ServerLoadedRockets;//[Offset: 0x11a0, Size: 4]
	bool bFiringRockets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a4, Size: 1]
	bool bUseShotgunSecondBarrel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a5, Size: 1]
	float RocketFireTimer;//[Offset: 0x11a8, Size: 4]
	float RocketChargeTimer;//[Offset: 0x11ac, Size: 4]
	ScalableFloat FireRate;//[Offset: 0x11b0, Size: 40]
	ScalableFloat AutofireDelay;//[Offset: 0x11d8, Size: 40]
	ScalableFloat RocketsCooldown;//[Offset: 0x1200, Size: 40]
	ScalableFloat TimeToLoadOneAmmoCharge;//[Offset: 0x1228, Size: 40]
	ScalableFloat AimPointCacheRange;//[Offset: 0x1250, Size: 40]
	ScalableFloat MinRocketsForFiring;//[Offset: 0x1278, Size: 40]
	ScalableFloat AmmoPerCharge;//[Offset: 0x12a0, Size: 40]
	ScalableFloat MaxRockets;//[Offset: 0x12c8, Size: 40]
	FName SecondaryFireMuzzleName;//[Offset: 0x12f0, Size: 8]
	FName SecondaryFireTraceSocket;//[Offset: 0x12f8, Size: 8]
	FName ShotgunSecondBarrelMuzzleName;//[Offset: 0x1300, Size: 8]
	FName StartLoadingSectionName;//[Offset: 0x1308, Size: 8]
	AnimMontage* RocketChargingLoop;//[Offset: 0x1310, Size: 8]
	AnimMontage* RocketFullyChargedLoop;//[Offset: 0x1318, Size: 8]
	AnimMontage* RocketFire;//[Offset: 0x1320, Size: 8]
	AnimMontage* RocketFireSettle;//[Offset: 0x1328, Size: 8]
	AnimMontage* RocketCooldownLoop;//[Offset: 0x1330, Size: 8]
	AnimMontage* RocketCooldownReady;//[Offset: 0x1338, Size: 8]
	AnimMontage* ShotgunFireSecondBarrel;//[Offset: 0x1340, Size: 8]
	WeaponHudData[] GamepadHudKeyActionData;//[Offset: 0x1348, Size: 16]
	GameplayTagContainer LoadRocketTag;//[Offset: 0x1358, Size: 32]
	TimerHandle AutoFireTimer;//[Offset: 0x1378, Size: 8]
	TimerHandle ReloadShotgunTimer;//[Offset: 0x1380, Size: 8]
	TimerHandle ServerSideRocketCooldownTimer;//[Offset: 0x1388, Size: 8]
	void ServerSetFiringRockets(bool bNewFiring, int NumToFire);// 0xd22578c
	void ServerSetCharging(bool bNewCharging);// 0xd2256a8
	void PlayReloadAnim();// 0xd225694
	void OnServerLoadSingleRocket();// 0xd225680
	void OnServerActivateSecondaryFire(FortGameplayAbility* SecondaryFire, out const Vector LaunchPosition);// 0xd225590
	void OnRocketLauncherSettle(SceneComponent* AttachToMesh, FName AttachToSocket);// 0xbbc0600
	void OnRocketFiringStarted(SceneComponent* AttachToMesh, FName AttachToSocket);// 0xbbc0600
	void OnRocketFired(SceneComponent* AttachToMesh, FName AttachToSocket);// 0xbbc0600
	void OnRep_RocketsCooldown();// 0xd22557c
	void OnLoadedRockets(int NumRocketsLoaded);// 0xbbc0600
	void LoadShotgunAmmo();// 0xd225568
	float GetTimeToLoadOneAmmoCharge();// 0xd225534
	float GetRocketsCooldown();// 0xd225500
	int GetMinRocketsForFiring();// 0xd2254cc
	int GetMaxRockets();// 0xd225498
	float GetFireRate();// 0xd225464
	float GetAutofireDelay();// 0xd225430
	int GetAmmoPerCharge();// 0xd2253fc
	float GetAimPointCacheRange();// 0xd2253c8

--------------------------------
Class: FortWeaponRangedForVehicle.FortWeaponRanged.FortWeapon.Actor.Object
	MountedWeaponInfo MountedWeaponInfo;//[Offset: 0x1128, Size: 48]
	MountedWeaponInfoRepped MountedWeaponInfoRepped;//[Offset: 0x1158, Size: 16]
	SkeletalMeshComponent* CachedWeaponMeshCompOnVehicle;//[Offset: 0x1168, Size: 8]
	Vector WeaponLoc;//[Offset: 0x1170, Size: 12]
	Rotator WeaponRot;//[Offset: 0x117c, Size: 12]
	void OnRep_MountedWeaponInfoRepped();// 0xd22790c
	void OnHostVehicleSetup();// 0xbbc0600

--------------------------------
Class: MountedWeaponInfo
	Actor*[] TraceIgnoreActors;//[Offset: 0x0, Size: 16]
	float ThirdPersonDistanceCorrection;//[Offset: 0x10, Size: 4]
	float ThirdPersonDistanceCorrectionPawn;//[Offset: 0x14, Size: 4]
	bool bDamageStartFromWeaponTowardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bTargetSourceFromVehicleMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	float MinReticleAlphaForAimInterpolation;//[Offset: 0x1c, Size: 4]
	float MinAimAngleDiffForReticleAlpha;//[Offset: 0x20, Size: 4]
	float MaxAimAngleDiffForReticleAlpha;//[Offset: 0x24, Size: 4]
	bool bNeedsVehicleAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int AttachAttemptCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: MountedWeaponInfoRepped
	Actor* HostVehicleCachedActor;//[Offset: 0x0, Size: 8]
	int HostVehicleSeatIndexCached;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleSpecificUIDetails
	class UserWidget* WidgetClass;//[Offset: 0x0, Size: 8]
	enum Slot;//[Offset: 0x8, Size: 1]
	enum[] ValidSeats;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ActiveVehicleUI
	UserWidget* ActiveWidget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: FortOstrichVehicleConfigs.FortVehicleConfigs.Object

--------------------------------
Class: OstrichWeapon_RetainedData
	int LoadedShotgunAmmo;//[Offset: 0x0, Size: 4]
	float RocketsCooldownElapsed;//[Offset: 0x4, Size: 4]
	bool bHasPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: FortAnimInput_TurnInPlace
	CachedAnimStateArray TurnInitiatingStates;//[Offset: 0x0, Size: 24]
	CachedAnimStateArray TurnTransitionStates;//[Offset: 0x18, Size: 24]
	FName TurnRotationAmountCurveName;//[Offset: 0x30, Size: 8]
	FName AllowTurnInPlaceCurveName;//[Offset: 0x38, Size: 8]
	Vector2D EmoteYawOffsetSofteningInputRange;//[Offset: 0x40, Size: 8]
	Vector2D EmoteYawOffsetSofteningOutputRange;//[Offset: 0x48, Size: 8]
	float TurnThreshold90;//[Offset: 0x50, Size: 4]
	float InitialTurnCurveValue;//[Offset: 0x54, Size: 4]
	float MaxAllowedRootYawOffset;//[Offset: 0x58, Size: 4]
	float RootYawOffset;//[Offset: 0x5c, Size: 4]
	float RootYawOffsetAlpha;//[Offset: 0x60, Size: 4]
	bool bWantsToTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 1]
	bool bWantsToTurnInVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 1]
	bool bWantsToTurnAgain;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 1]
	bool bTurningLeft;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 1]
	float LastTurnRotationAmount;//[Offset: 0x68, Size: 4]

--------------------------------
Class: CachedAnimStateArray
	CachedAnimStateData[] States;//[Offset: 0x0, Size: 16]

--------------------------------
Class: CachedAnimStateData
	FName StateMachineName;//[Offset: 0x0, Size: 8]
	FName StateName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]

--------------------------------
Class: FortDistanceCurve.FortCachedFloatCurve

--------------------------------
Class: FortCachedFloatCurve
	FName CurveName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortAnimInput_TurnCorrection
	FortCachedFloatCurve RotationCurve;//[Offset: 0x0, Size: 12]
	float YawCorrectionOffset;//[Offset: 0xc, Size: 4]
	float MaxYawCorrectionOffset;//[Offset: 0x10, Size: 4]
	float CharacterMeshYawOffset;//[Offset: 0x14, Size: 4]
	float CurveMultiplier;//[Offset: 0x18, Size: 4]
	float CharacterInitialWorldYaw;//[Offset: 0x1c, Size: 4]
	float CharacterWorldYawLastFrame;//[Offset: 0x20, Size: 4]
	float AccumulatedAnimationYaw;//[Offset: 0x24, Size: 4]
	float TotalYawFromCurve;//[Offset: 0x28, Size: 4]
	float RotationCurveYawLastFrame;//[Offset: 0x2c, Size: 4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bIsTurnFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: FortDirectionalAnimRef
	AnimSequenceBase* NorthAnim;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* SouthAnimLeft;//[Offset: 0x8, Size: 8]
	AnimSequenceBase* SouthAnimRight;//[Offset: 0x10, Size: 8]
	AnimSequenceBase* EastAnim;//[Offset: 0x18, Size: 8]
	AnimSequenceBase* WestAnim;//[Offset: 0x20, Size: 8]

--------------------------------
Class: FortAnimInput_Vitality
	bool bShieldsDecreased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShieldsIncreased;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bHealthDecreased;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bHealthIncreased;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bIsRagdolling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGainedRagdolling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bLostRagdolling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortPlayerAnimInstance.FortAnimInstance.FortBaseAnimInstance.AnimInstance.Object
	float EmoteForcedRootYaw;//[Offset: 0x408, Size: 4]
	float EmoteHipOffsetAlpha;//[Offset: 0x40c, Size: 4]
	Vector CurrentEmoteHipOffset;//[Offset: 0x410, Size: 12]
	float DeltaTime;//[Offset: 0x41c, Size: 4]
	FortPlayerPawn* FortPlayerPawn;//[Offset: 0x420, Size: 8]
	enum AnimBodyType;//[Offset: 0x428, Size: 1]
	byte Gender;//[Offset: 0x429, Size: 1]
	float FallAnimDuration;//[Offset: 0x42c, Size: 4]
	float FallPlayRate;//[Offset: 0x430, Size: 4]
	FortPlayerPawnAthena* FortPlayerPawnAthena;//[Offset: 0x438, Size: 8]
	float DefaultSprintingMaxPlayrate;//[Offset: 0x440, Size: 4]
	FortAnimInput_SpeedWarping SpeedWarping;//[Offset: 0x448, Size: 32]
	float JogStartSpeedWarpingAlpha;//[Offset: 0x468, Size: 4]
	FortAnimInput_SpeedWarping JogStartSpeedWarping;//[Offset: 0x470, Size: 32]
	FortAnimInput_ShoppingCart ShoppingCartInput;//[Offset: 0x490, Size: 92]
	FortAnimInput_GolfCart GolfCartInput;//[Offset: 0x4ec, Size: 84]
	FortAnimInput_Quad QuadBikeInput;//[Offset: 0x540, Size: 112]
	FortAnimInput_MountedTurret MountedTurretInput;//[Offset: 0x5b0, Size: 16]
	FortAnimInput_FerretVehicle FerretVehicleInput;//[Offset: 0x5c0, Size: 100]
	FortAnimInput_Zipline ZiplineInput;//[Offset: 0x624, Size: 32]
	FortAnimInput_Ragdoll RagdollInput;//[Offset: 0x644, Size: 24]
	FortAnimInput_Vitality VitalityInput;//[Offset: 0x65c, Size: 3]
	FortAnimInput_JackalVehicle JackalVehicleInput;//[Offset: 0x660, Size: 428]
	FortAnimInput_OctopusVehicle OctopusVehicleInput;//[Offset: 0x80c, Size: 1]
	FortAnimInput_CommonVehicle CommonVehicleInput;//[Offset: 0x810, Size: 12]
	FortAnimInput_CommonWeapon CommonWeaponInput;//[Offset: 0x81c, Size: 2]
	FortAnimInput_BowWeapon BowWeaponInput;//[Offset: 0x820, Size: 160]
	FortAnimInput_CreativeMoveTool CreativeMoveToolInput;//[Offset: 0x8c0, Size: 1]
	FortAnimInput_DBNOCarried DBNOCarriedInput;//[Offset: 0x8c8, Size: 200]
	FortAnimInput_RandomizeMontageSection RandomizeMontageSectionInput;//[Offset: 0x990, Size: 24]
	FortAnimInput_SlopeInfo SlopeInfoInput;//[Offset: 0x9a8, Size: 48]
	FortAnimInput_TransitionProperties TransitionPropertiesInput;//[Offset: 0x9d8, Size: 1]
	float SlopeWarpingAlpha;//[Offset: 0x9dc, Size: 4]
	float RootSlopeRotationAlpha;//[Offset: 0x9e0, Size: 4]
	Rotator RootSlopeRotationOffset;//[Offset: 0x9e4, Size: 12]
	float DBNOTurnPlayRate;//[Offset: 0x9f0, Size: 4]
	float DBNOTurnPlayRateAbs;//[Offset: 0x9f4, Size: 4]
	FortAnimInput_TurnInPlace TurnInPlaceInput;//[Offset: 0x9f8, Size: 112]
	Rotator TurnPelvisRotationOffset;//[Offset: 0xa68, Size: 12]
	Vector TurnPelvisTranslationOffset;//[Offset: 0xa74, Size: 12]
	Vector WholeAnimOffset;//[Offset: 0xa80, Size: 12]
	FortAnimInput_AdjustedAim AdjustedAimBase;//[Offset: 0xa8c, Size: 576]
	FortAnimInput_AdjustedAim AdjustedAimAthena;//[Offset: 0xccc, Size: 576]
	FortAnimInput_AdjustedAim AdjustedAim;//[Offset: 0xf0c, Size: 576]
	FortAnimInput_SpringGlider SpringGlider;//[Offset: 0x114c, Size: 116]
	FortAnimInput_HandIK HandIKInput;//[Offset: 0x11c0, Size: 28]
	float ADSToNonADSBlendTime;//[Offset: 0x11dc, Size: 4]
	float NonADSToADSBlendTime;//[Offset: 0x11e0, Size: 4]
	float BlendOutOfWallBlockTime;//[Offset: 0x11e4, Size: 4]
	float BlendOutOfWallBlockTimeRemaining;//[Offset: 0x11e8, Size: 4]
	float HandIKRetargetingWeight;//[Offset: 0x11ec, Size: 4]
	float RightHandIKAlpha;//[Offset: 0x11f0, Size: 4]
	float LeftHandIKAlpha;//[Offset: 0x11f4, Size: 4]
	float LeftHandFKAlpha;//[Offset: 0x11f8, Size: 4]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fc, Size: 1]
	bool bIsBodyTypeManuallySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fd, Size: 1]
	float SnapWeapon_LHandAlpha;//[Offset: 0x1200, Size: 4]
	float SnapWeapon_LHandAlphaSwitch;//[Offset: 0x1204, Size: 4]
	float LegIKAlpha;//[Offset: 0x1208, Size: 4]
	float PelvisAdjustmentCrouchAlpha;//[Offset: 0x120c, Size: 4]
	FortAnimInput_PelvisAdjustment PelvisAdjustmentInput;//[Offset: 0x1210, Size: 64]
	FortAnimInput_Skydiving Skydiving;//[Offset: 0x1250, Size: 96]
	bool bIsSlopeSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b0, Size: 1]
	float SlopeSlidingPitch;//[Offset: 0x12b4, Size: 4]
	float SlopeSlidingRoll;//[Offset: 0x12b8, Size: 4]
	float JumpAdditiveLayerAlpha;//[Offset: 0x12bc, Size: 4]
	CachedAnimRelevancyData SwimDiveLandOnGroundRelevancyData;//[Offset: 0x12c0, Size: 28]
	CachedAnimStateData JumpAdditiveLayerPassthrough;//[Offset: 0x12dc, Size: 28]
	float JumpAdditiveLeanAlpha;//[Offset: 0x12f8, Size: 4]
	float DisableRightArmAdditiveCurveAlpha;//[Offset: 0x12fc, Size: 4]
	float DisableArmsHeadAdditiveCurveAlpha;//[Offset: 0x1300, Size: 4]
	float DisableIKRootAdditiveCurveAlpha;//[Offset: 0x1304, Size: 4]
	float DisableUpperBodyAdditiveMeshSpaceCurveAlpha;//[Offset: 0x1308, Size: 4]
	FortAnimInput_PlayerAnimAsset CurrentAnimSet;//[Offset: 0x1310, Size: 704]
	FortAnimInput_PlayerGliderAnimAsset CurrentGliderAnimSet;//[Offset: 0x15d0, Size: 576]
	FortAnimInput_WeaponAdditiveAnimAsset CurrentWeaponAdditiveAnimSet;//[Offset: 0x1810, Size: 48]
	FName[] BonesHiddenByAnimSet;//[Offset: 0x1840, Size: 16]
	float AimPitchAdjustment;//[Offset: 0x1850, Size: 4]
	float AimYawAdjustment;//[Offset: 0x1854, Size: 4]
	float PlayMeleeAttackAO;//[Offset: 0x1858, Size: 4]
	Transform LastFramePawnTransform;//[Offset: 0x1860, Size: 48]
	float MaxAimYawAdjustment;//[Offset: 0x1890, Size: 4]
	float MaxPitch;//[Offset: 0x1894, Size: 4]
	float MaxYaw;//[Offset: 0x1898, Size: 4]
	float ReticleAimDistance;//[Offset: 0x189c, Size: 4]
	float AimAdjustmentInterpSpeed;//[Offset: 0x18a0, Size: 4]
	float AimTwistCorrectionExponent;//[Offset: 0x18a4, Size: 4]
	float AimDriverDownwardPitchCorrectionScale;//[Offset: 0x18a8, Size: 4]
	float AimDriverUpwardPitchCorrectionScale;//[Offset: 0x18ac, Size: 4]
	float RecentlyFiredAbilityTime;//[Offset: 0x18b0, Size: 4]
	Vector SlopeWarpingFloorOffset;//[Offset: 0x18b4, Size: 12]
	Rotator WeaponAimingFreezeInterpScale;//[Offset: 0x18c0, Size: 12]
	FName WeaponAimingCurveName;//[Offset: 0x18cc, Size: 8]
	FName WeaponAimingFreezeCurveName;//[Offset: 0x18d4, Size: 8]
	AnimSequence* ConsumableOffsetPose;//[Offset: 0x18e0, Size: 8]
	AnimSequence* MissingCosmeticUpperBodyOverride;//[Offset: 0x18e8, Size: 8]
	AnimSequence* MissingCosmeticLowerBodyOverride;//[Offset: 0x18f0, Size: 8]
	AnimSequence* MissingCosmeticLowerBodyInMotionOverride;//[Offset: 0x18f8, Size: 8]
	bool bEnableMissingCosmeticOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1900, Size: 1]
	bool bAimWeaponTowardsReticle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1900, Size: 1]
	bool bDebugWeaponAiming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1900, Size: 1]
	bool bCachedPawnTransform;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1900, Size: 1]
	bool bHasValidWeaponMuzzleSocket;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1900, Size: 1]
	bool bShouldUseCrouchUpperBodySlot;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1900, Size: 1]
	bool bShouldUseCrouchInPlaceAdditiveSlot;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1900, Size: 1]
	bool bUseCustomFloorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1900, Size: 1]
	bool bPlayConsumableOffsetPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1901, Size: 1]
	bool bIsOnGround;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1901, Size: 1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1901, Size: 1]
	bool bIsTargetingConsumableThrow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1901, Size: 1]
	bool bPlayUpperBodyTargeting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1901, Size: 1]
	bool bPlayingRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1901, Size: 1]
	bool bIsStunned;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1901, Size: 1]
	bool bIsMontagePlaying;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1901, Size: 1]
	bool bIsPlayingMeleeAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1902, Size: 1]
	bool bIsPlayingUpperBodySlot;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1902, Size: 1]
	bool bRecentlyFiredAbility;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1902, Size: 1]
	bool bIsGoingCommando;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1902, Size: 1]
	bool bDisableUpperBodySlotOnLowerBodyInIdle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1902, Size: 1]
	bool bWasRelaxedLevel1;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1902, Size: 1]
	bool bTempIsRelaxedLevel1;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1902, Size: 1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1902, Size: 1]
	bool bIsCrouchMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1903, Size: 1]
	bool bIsCrouchSprinting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1903, Size: 1]
	bool bIsSurfaceSwimming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1903, Size: 1]
	bool bIsInTetheredMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1903, Size: 1]
	bool bIsDiveJumping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1903, Size: 1]
	bool bSwimmingAllowSlowSprint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1903, Size: 1]
	bool bSwimmingIsWaterLanding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1903, Size: 1]
	bool bSwimmingHasReachedJumpApex;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1903, Size: 1]
	bool bSwimmingHeadUnderWaterDuringWaterLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1904, Size: 1]
	bool bSwimmingJumpInitiatedFromWater;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1904, Size: 1]
	bool bSwimmingIsJumpAscending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1904, Size: 1]
	bool bStoppedDivingWhileUnderWater;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1904, Size: 1]
	bool bSwimmingDoveIntoGround;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1904, Size: 1]
	bool bSwimmingPlayDBNOTurnEast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1904, Size: 1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1904, Size: 1]
	bool bIsAccelerating2D;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1904, Size: 1]
	bool bIsMoving2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1905, Size: 1]
	bool bWasMoving2D;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1905, Size: 1]
	bool bIsAboveMinimumLocomotionSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1905, Size: 1]
	bool bIsBackpedaling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1905, Size: 1]
	bool bShouldWalkRightFootFwd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1905, Size: 1]
	bool bShouldPlayJogStartTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1905, Size: 1]
	bool bShouldPlayJogStopTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1905, Size: 1]
	bool bShouldPlayJogPivotTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1905, Size: 1]
	bool bStartTransitionActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1906, Size: 1]
	bool bStopTransitionActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1906, Size: 1]
	bool bPivotTransitionActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1906, Size: 1]
	bool bShouldPlayPostPivotTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1906, Size: 1]
	bool bShouldEarlyOutStartState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1906, Size: 1]
	bool bShouldEarlyOutStopState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1906, Size: 1]
	bool bShouldEarlyOutPivotState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1906, Size: 1]
	bool bIsDBNO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1906, Size: 1]
	bool bIsInterrogating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1907, Size: 1]
	bool bIsBeingInterrogated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1907, Size: 1]
	bool bIsUsingJetpack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1907, Size: 1]
	bool bIsUsingRemoteControlPawn;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1907, Size: 1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1907, Size: 1]
	bool bIsValetDriver;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1907, Size: 1]
	bool bIsValetPassenger;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1907, Size: 1]
	bool bIsOstrichDriver;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1907, Size: 1]
	bool bIsOstrichGunner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1908, Size: 1]
	bool bIsInShoppingCart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1908, Size: 1]
	bool bIsShoppingCartFrontPassenger;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1908, Size: 1]
	bool bIsShoppingCartSidePassenger;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1908, Size: 1]
	bool bIsInCannon;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1908, Size: 1]
	bool bIsDBNOCarrying;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1908, Size: 1]
	bool bIsDBNOCarried;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1908, Size: 1]
	bool bIsFemale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1908, Size: 1]
	bool bHasFacialAnimationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1909, Size: 1]
	bool bStopJogDoOnceTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1909, Size: 1]
	bool bStartJogDoOnceTriggered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1909, Size: 1]
	bool bPivotTransitionDoOnceTriggered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1909, Size: 1]
	bool bPostPivotTransitionDoOnceTriggered;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1909, Size: 1]
	bool bIsFallingSlow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1909, Size: 1]
	bool bIsFloatingHigher;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1909, Size: 1]
	bool bIsFloatingHigherInAir;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1909, Size: 1]
	bool bIsBalloonInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190a, Size: 1]
	bool bHasBalloons;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190a, Size: 1]
	bool bIsGhost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x190a, Size: 1]
	bool bHasIcyFeet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x190a, Size: 1]
	bool bIsMovingAndInMotionEmote;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x190a, Size: 1]
	bool bIsPlayingEmote;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x190a, Size: 1]
	bool bIsGrappleRopeActive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x190a, Size: 1]
	byte BuildingState;//[Offset: 0x190b, Size: 1]
	float FullBodyInAirFallTimeThreshold;//[Offset: 0x190c, Size: 4]
	float LocalYawNormalizationDeadzone;//[Offset: 0x1910, Size: 4]
	float FullBodyInAirLowerBodyWeight;//[Offset: 0x1914, Size: 4]
	float TargetingWeight;//[Offset: 0x1918, Size: 4]
	float MeleeTwistCurveValue;//[Offset: 0x191c, Size: 4]
	float JumpUpperBodyBlendWeight;//[Offset: 0x1920, Size: 4]
	float RightArmMaskWeight;//[Offset: 0x1924, Size: 4]
	float LeftArmMaskWeight;//[Offset: 0x1928, Size: 4]
	float UpperBodyNoAdditivesMaskWeight;//[Offset: 0x192c, Size: 4]
	float FullBodyAimOffsetAlpha;//[Offset: 0x1930, Size: 4]
	float LocomotionAdditiveAlpha;//[Offset: 0x1934, Size: 4]
	float LocalAccelYawAngle;//[Offset: 0x1938, Size: 4]
	float LocalAccelYawAngleLastTick;//[Offset: 0x193c, Size: 4]
	float LocalAccelDeltaYawAngle;//[Offset: 0x1940, Size: 4]
	float MaxSpeed;//[Offset: 0x1944, Size: 4]
	float VelocityZ;//[Offset: 0x1948, Size: 4]
	float Speed2D;//[Offset: 0x194c, Size: 4]
	float LocalVelocityYawAngle;//[Offset: 0x1950, Size: 4]
	float LocalVelocityYawAngleMinusJogBlendSpaceRotation;//[Offset: 0x1954, Size: 4]
	float LocalVelocityYawAngleMinusMeleeTwist;//[Offset: 0x1958, Size: 4]
	float LocalAccelVelocityYawDelta;//[Offset: 0x195c, Size: 4]
	float SpeedAdjustedPlayrate;//[Offset: 0x1960, Size: 4]
	float LeanAdditiveAlpha;//[Offset: 0x1964, Size: 4]
	float LeanAngle;//[Offset: 0x1968, Size: 4]
	float SprintYawAngle;//[Offset: 0x196c, Size: 4]
	float LocomotionTransitionAdditiveAlpha;//[Offset: 0x1970, Size: 4]
	float StartStateWeight;//[Offset: 0x1974, Size: 4]
	float StartStateRotationMultiplier;//[Offset: 0x1978, Size: 4]
	float StartAnimDeltaAngleNorth;//[Offset: 0x197c, Size: 4]
	float StartAnimDeltaAngleEast;//[Offset: 0x1980, Size: 4]
	float StartAnimDeltaAngleSouth;//[Offset: 0x1984, Size: 4]
	float StartAnimDeltaAngleWest;//[Offset: 0x1988, Size: 4]
	float StopStateRotationMultiplier;//[Offset: 0x198c, Size: 4]
	float StopStateWeight;//[Offset: 0x1990, Size: 4]
	float StopAnimDeltaAngle;//[Offset: 0x1994, Size: 4]
	float JogPrePivotTimer;//[Offset: 0x1998, Size: 4]
	float PivotStateWeight;//[Offset: 0x199c, Size: 4]
	float PrePivotAnimDeltaAngle;//[Offset: 0x19a0, Size: 4]
	float PostPivotAnimDeltaAngle;//[Offset: 0x19a4, Size: 4]
	float TransitionPlayRate;//[Offset: 0x19a8, Size: 4]
	float YawDeltaCurrentTick;//[Offset: 0x19ac, Size: 4]
	float YawDeltaLastTick;//[Offset: 0x19b0, Size: 4]
	float YawDeltaSmoothed;//[Offset: 0x19b4, Size: 4]
	float AbsYawDeltaSmoothed;//[Offset: 0x19b8, Size: 4]
	float PawnToVehicleDeltaYawAngleDegrees;//[Offset: 0x19bc, Size: 4]
	float LastPawnToVehicleDeltaYawAngleDegrees;//[Offset: 0x19c0, Size: 4]
	float SavedWeaponAbilityLastFireTime;//[Offset: 0x19c4, Size: 4]
	float SwimDiveJumpLayerAlpha;//[Offset: 0x19c8, Size: 4]
	float FullBodyAdditiveLayerAlpha;//[Offset: 0x19cc, Size: 4]
	float SwimmingImmersionDepth;//[Offset: 0x19d0, Size: 4]
	float SwimmingYawDeltaRatePerSecond;//[Offset: 0x19d4, Size: 4]
	float SwimmingSpeedRelativeToFlow;//[Offset: 0x19d8, Size: 4]
	float SwimmingYawDeltaRatePerSecondSmooth;//[Offset: 0x19dc, Size: 4]
	float SwimmingYawDeltaRatePerSecondSmoothClamped;//[Offset: 0x19e0, Size: 4]
	float SwimmingSprintYawDeltaRatePerSecondSmooth;//[Offset: 0x19e4, Size: 4]
	float SwimmingDivePitch;//[Offset: 0x19e8, Size: 4]
	float SwimmingDivePitchDeltaRatePerSec;//[Offset: 0x19ec, Size: 4]
	float SwimmingVelocityAngle;//[Offset: 0x19f0, Size: 4]
	float SwimmingLocalAccelerationYawAngleSmooth;//[Offset: 0x19f4, Size: 4]
	float SwimmingResetStoppedDivingWhileUnderWaterTime;//[Offset: 0x19f8, Size: 4]
	float SwimmingResetDoveIntoGroundTime;//[Offset: 0x19fc, Size: 4]
	float SwimmingDiveJumpingBlendOutTime;//[Offset: 0x1a00, Size: 4]
	Vector WorldAcceleration;//[Offset: 0x1a04, Size: 12]
	Vector LocalAcceleration;//[Offset: 0x1a10, Size: 12]
	Vector WorldVelocity;//[Offset: 0x1a1c, Size: 12]
	Vector LocalVelocity;//[Offset: 0x1a28, Size: 12]
	Vector ActorSpaceVelocityDirPreTurn;//[Offset: 0x1a34, Size: 12]
	Vector SwimmingRelativeVelocityToWater;//[Offset: 0x1a40, Size: 12]
	Vector SwimmingWaterSurfaceNormal;//[Offset: 0x1a4c, Size: 12]
	Rotator ActorRotationLastTick;//[Offset: 0x1a58, Size: 12]
	byte WeaponCoreAnim;//[Offset: 0x1a64, Size: 1]
	byte WeaponCoreAnimForEmptyHands;//[Offset: 0x1a65, Size: 1]
	FortWeaponAnimSet* DefaultWeaponAnimSet;//[Offset: 0x1a68, Size: 8]
	FortWeaponAnimSet* WeaponAnimSet;//[Offset: 0x1a70, Size: 8]
	FortWeaponAnimSet* WeaponOverrideAnimSet;//[Offset: 0x1a78, Size: 8]
	FortWeaponAdditiveAnimSet* WeaponAdditiveAnimSet;//[Offset: 0x1a80, Size: 8]
	FortWeaponAnimSet* WeaponAnimSetForEmptyHands;//[Offset: 0x1a88, Size: 8]
	FortPlayerGliderAnimSet* CurrentGliderAnimSetDataAsset;//[Offset: 0x1a90, Size: 8]
	enum PreviousFrameLocomotionCardinalDirection;//[Offset: 0x1a98, Size: 1]
	enum LocomotionCardinalDirection;//[Offset: 0x1a99, Size: 1]
	enum StartTransitionInitialDirection;//[Offset: 0x1a9a, Size: 1]
	enum StopCardinalDirection;//[Offset: 0x1a9b, Size: 1]
	enum PrePivotCardinalDirection;//[Offset: 0x1a9c, Size: 1]
	enum PostPivotCardinalDirection;//[Offset: 0x1a9d, Size: 1]
	float LocomotionDeltaAngle_N;//[Offset: 0x1aa0, Size: 4]
	float LocomotionDeltaAngle_S;//[Offset: 0x1aa4, Size: 4]
	float LocomotionDeltaAngle_E;//[Offset: 0x1aa8, Size: 4]
	float LocomotionDeltaAngle_W;//[Offset: 0x1aac, Size: 4]
	float TargetingSpeed;//[Offset: 0x1ab0, Size: 4]
	float JumpUpperBodyBlendSpeed;//[Offset: 0x1ab4, Size: 4]
	float TargetingWeightInLocomotion;//[Offset: 0x1ab8, Size: 4]
	float MinimumLocomotionSpeed;//[Offset: 0x1abc, Size: 4]
	float BackpedalSpeedThresholdAngle;//[Offset: 0x1ac0, Size: 4]
	float SpeedAdjustedPlayratePivotSpeed;//[Offset: 0x1ac4, Size: 4]
	float AuthoredCrouchSprintSpeed;//[Offset: 0x1ac8, Size: 4]
	float AuthoredCrouchWalkSpeed;//[Offset: 0x1acc, Size: 4]
	float AuthoredCrouchJogSpeed;//[Offset: 0x1ad0, Size: 4]
	float AuthoredSprintSpeed;//[Offset: 0x1ad4, Size: 4]
	float AuthoredWalkSpeed;//[Offset: 0x1ad8, Size: 4]
	float AuthoredJogBwdSpeed;//[Offset: 0x1adc, Size: 4]
	float AuthoredJogFwdSpeed;//[Offset: 0x1ae0, Size: 4]
	float AuthoredJogStrafeSpeed;//[Offset: 0x1ae4, Size: 4]
	float LeanFadeInSpeed;//[Offset: 0x1ae8, Size: 4]
	float LeanFadeOutSpeed;//[Offset: 0x1aec, Size: 4]
	float LeanAngleMultiplier;//[Offset: 0x1af0, Size: 4]
	float LeanAngleBackpedalMultiplier;//[Offset: 0x1af4, Size: 4]
	float SprintYawAngleInterpSpeed;//[Offset: 0x1af8, Size: 4]
	float SprintYawAngleFadeOutSpeed;//[Offset: 0x1afc, Size: 4]
	float LocomotionDeadZoneAngle;//[Offset: 0x1b00, Size: 4]
	float StartStateRotationFadeInSpeed;//[Offset: 0x1b04, Size: 4]
	float StopStateRotationFadeOutSpeed;//[Offset: 0x1b08, Size: 4]
	float JogPivotTimeToPivot;//[Offset: 0x1b0c, Size: 4]
	float PostPivotAnimInterpSpeed;//[Offset: 0x1b10, Size: 4]
	float MaxAllowedPivotRotation;//[Offset: 0x1b14, Size: 4]
	FName MeleeTwistCurveValueName;//[Offset: 0x1b18, Size: 8]
	FName MeleeAnimCurveValueName;//[Offset: 0x1b20, Size: 8]
	FName AdditiveLayerCurveValueName;//[Offset: 0x1b28, Size: 8]
	FName MaskRightArmCurveValueName;//[Offset: 0x1b30, Size: 8]
	FName StartAnimCurveValueName;//[Offset: 0x1b38, Size: 8]
	FName StopAnimCurveValueName;//[Offset: 0x1b40, Size: 8]
	FName PivotAnimCurveValueName;//[Offset: 0x1b48, Size: 8]
	bool bShouldDisableJogTransitions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b50, Size: 1]
	bool bIsShieldUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b50, Size: 1]
	bool bIsJumpBoosting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b50, Size: 1]
	bool bShouldProcessFullAnimUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b50, Size: 1]
	bool bIsWaterJump;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b50, Size: 1]
	bool bIsWaterSprintBoostPending;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1b50, Size: 1]
	bool bIsWaterSprintBoosting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1b50, Size: 1]
	bool bIsRelaxedLevel1AndNotJumpBoosting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b50, Size: 1]
	bool bPlayWeaponInspect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b51, Size: 1]
	bool bInterruptWeaponInspect;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b51, Size: 1]
	bool bInterruptWeaponInspectNoBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b51, Size: 1]
	bool bPlayRelaxedEntry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b51, Size: 1]
	bool bInterruptRelaxedEntryNoBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b51, Size: 1]
	bool bIsGrapplerActive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1b51, Size: 1]
	bool bSwimmingSprintSlowEnoughTimePassed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1b51, Size: 1]
	bool bSwimmingIsJumpOrLanding;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b51, Size: 1]
	bool bSwimmingIsWaterPaddlingToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b52, Size: 1]
	bool bIsRelaxedLevel1AndNotJumpingFromWater;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b52, Size: 1]
	bool bIsRelaxedLevel2AndNotJumpingFromWater;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b52, Size: 1]
	bool bIsMeleeGuarding;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1b52, Size: 1]
	bool bIsMeleeDeflecting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1b52, Size: 1]
	bool bUsingUncleBrolly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1b52, Size: 1]
	bool bIsPlayingForwardMotionAnim;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1b52, Size: 1]
	bool bIsPatrolling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1b52, Size: 1]
	FName HeadTrackingReticleSocketName;//[Offset: 0x1b54, Size: 8]
	byte HeadTrackingReticleSocketLookAtAxis;//[Offset: 0x1b5c, Size: 1]
	float HeadTrackingReticleInterpSpeed;//[Offset: 0x1b60, Size: 4]
	Rotator HeadTrackingReticleAdjustment;//[Offset: 0x1b64, Size: 12]
	float HeadTrackingReticlePitchAlpha;//[Offset: 0x1b70, Size: 4]
	float HeadTrackingReticleAimDistance;//[Offset: 0x1b74, Size: 4]
	float HeadTrackingReticleAimDistanceDownsights;//[Offset: 0x1b78, Size: 4]
	GameplayTagAnimations GameplayTagAnimations;//[Offset: 0x1b80, Size: 16]
	Vector StandardIdlePelvisOffset;//[Offset: 0x1b90, Size: 12]
	Vector LargeFemaleIdlePelvisOffset;//[Offset: 0x1b9c, Size: 12]
	Vector IdlePelvisOffset;//[Offset: 0x1ba8, Size: 12]
	float IdlePelvisOffsetAlpha;//[Offset: 0x1bb4, Size: 4]
	int PawnLOD;//[Offset: 0x1bb8, Size: 4]
	float WeaponInspectDelayTimeRemaining;//[Offset: 0x1bbc, Size: 4]
	float MinDelayBetweenWeaponInspects;//[Offset: 0x1bc0, Size: 4]
	float ParaGliderTurnAlpha;//[Offset: 0x1bc4, Size: 4]
	float ParaGliderAddAlpha;//[Offset: 0x1bc8, Size: 4]
	float DisabledFullBodySprintTimeRemaining;//[Offset: 0x1bcc, Size: 4]
	bool bIsFullBodySprintTransitionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd0, Size: 1]
	bool bParaGlide_OpenGlider;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd0, Size: 1]
	bool bIsCharacterCustomizationLoaded;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bd0, Size: 1]
	bool bParaGlideSurferHipsAreLow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bd0, Size: 1]
	bool bWantsGliderAnimAssetUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bd0, Size: 1]
	bool bTransition_FullBody_Sprinting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1bd0, Size: 1]
	bool bTransition_Swimming_FullBody_Sprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bd0, Size: 1]
	bool bTransition_NewFallAditive_NewFallLandAdditive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bd0, Size: 1]
	bool bTransition_NewFallAditive_NewFallLandAdditive_Brolly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd1, Size: 1]
	bool bTransition_Sprinting_FullBody;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd1, Size: 1]
	bool bTransition_FullBody_SwimSprinting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bd1, Size: 1]
	bool bTransition_FullBody_Stunned;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bd1, Size: 1]
	bool bTransition_FullBody_DBNOMove;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bd1, Size: 1]
	bool bTransition_FullBody_DBNOTurn;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1bd1, Size: 1]
	bool bTransition_Fullbody_LaunchpadTakeOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bd1, Size: 1]
	bool bEarlyOut_Lowerbody_Turns;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bd1, Size: 1]
	bool bTransition_LowerBody_Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd2, Size: 1]
	bool bTransition_LowerBody_Movement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd2, Size: 1]
	bool bTransition_LocomotionAdditive_CrouchTurning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bd2, Size: 1]
	bool bLocomotion_Idles_to_Turns;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bd2, Size: 1]
	bool bFullBodyAdditives_NewFallAdditive_to_BalloonLoop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bd2, Size: 1]
	bool bTransition_IdleAdditive_to_SwimJumpStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1bd2, Size: 1]
	bool bTransition_SwimJumpStart_to_NewJumpAdditive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bd2, Size: 1]
	bool bTransition_DiveJumpLoop_to_DiveJumpFall;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bd2, Size: 1]
	bool bTransition_SwimDiveLandOnGround_to_SplitBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd3, Size: 1]
	bool bTransition_Sprinting_to_Conduit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd3, Size: 1]
	bool bTransition_DBNOSwimIdle_to_DBNOSwimTurn;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bd3, Size: 1]
	bool bTransition_SwimJumpSurfaceLoop_to_SwimJumpSurfaceEnd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bd3, Size: 1]
	bool bTransition_SwimJumpSurfaceLoop_to_IdleAdditive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bd3, Size: 1]
	bool bTransition_NewFallLandAdditive_to_SwimJumpFallLoop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1bd3, Size: 1]
	bool bTransition_NewJumpLoopAdditive_to_NewFallAdditive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bd3, Size: 1]
	bool bIsUmbrellaFailing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bd3, Size: 1]
	bool bEnableEmptyHands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd4, Size: 1]
	bool bHideWeaponForEmptyHands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd4, Size: 1]
	bool bSupressJogStartAdditiveForLiveEvent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bd4, Size: 1]
	Vector Ragdoll_InitialImpact_ThrowVelocity;//[Offset: 0x1bd8, Size: 12]
	void UpdateVitality(out const FortAnimInput_Vitality NewVitality);// 0xb6a3fb4
	void SetIsPatrolling(bool NewValue);// 0xd1257d8
	void OnPlayMontageFromGameplayTagQuery(out const GameplayTagQuery MatchingQuery, AnimMontage* MontagePlaying);// 0xbbc0600
	void HandleBeginSkydiving();// 0xb6a3fa0
	float GetRelativeAngle(float MovementAngle, enum Direction, bool bMirrorBackside);// 0xd1256a0
	AnimMontage* FindEmoteToPlay(FortPlayerController* FortPlayerController, byte InBodyType, byte InGender);// 0xd125570
	void AnimNotify_StopFireFX(const AnimNotify* Notify);// 0xd1254c8
	void AnimNotify_SkydiveAdditiveEnd(const AnimNotify* Notify);// 0xb6a3ef8
	void AnimNotify_PlayWeaponInspect(const AnimNotify* Notify);// 0xb6a3e50
	void AnimNotify_PlaySecondaryFireFX(const AnimNotify* Notify);// 0xd125420
	void AnimNotify_PlayFireFX(const AnimNotify* Notify);// 0xb6a3da8

--------------------------------
Class: FortAnimInput_SpeedWarping
	CurveFloat* PlayRateAdjustmentCurve;//[Offset: 0x0, Size: 8]
	Vector2D SpeedWarpingLimits;//[Offset: 0x8, Size: 8]
	Vector2D SpeedWarpingLimitsAddlRateScale;//[Offset: 0x10, Size: 8]
	float SpeedWarpingAmount;//[Offset: 0x18, Size: 4]
	float PlayRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FortAnimInput_ShoppingCart
	bool bIsUsingShoppingCart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsUsingVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum CoastState;//[Offset: 0x1, Size: 1]
	bool bIsCoastStatePedaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bIsCoastStateCoasting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bIsCoastStateDismount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bIsCoastStateIdle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bIsCoasting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bIsPedaling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bIsReadyToPedal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	float IsReadyToPedal;//[Offset: 0x4, Size: 4]
	bool bWantsToCoast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bIsCoastIdling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bIsStartCoasting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bIsEndCoasting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bIsDismountingFromCoast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bIsCoastingOrDismountingFromCoast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bIsStandingInPlace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bIsSprintingAndMovingForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bIsMovingForwardNotSprinting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bIsReversing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bIsMovingBackwards;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bIsMovingOrTurningInPlace;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bIsInAirSteady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bIsOnSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bAimFWD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAimBWD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bAimLFT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bAimRGT;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	float ForwardVelocity;//[Offset: 0xc, Size: 4]
	float ForwardSpeedKmH;//[Offset: 0x10, Size: 4]
	float CurrentBrakeForce;//[Offset: 0x14, Size: 4]
	float RunForwardAlpha;//[Offset: 0x18, Size: 4]
	bool bIsAcceleratingForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bIsAccelBreakingOrReversing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	float SteerAngle;//[Offset: 0x20, Size: 4]
	float SteerAngleInterpSpeed;//[Offset: 0x24, Size: 4]
	float CoastSteerAngleInterpSpeed;//[Offset: 0x28, Size: 4]
	float IsReadyToPedalInterpSpeed;//[Offset: 0x2c, Size: 4]
	float StandingInPlaceSteerAngle;//[Offset: 0x30, Size: 4]
	float SlopePitchDegreeAngle;//[Offset: 0x34, Size: 4]
	float SlopeRollDegreeAngle;//[Offset: 0x38, Size: 4]
	float PawnToVehicleDeltaYawAngleDegrees;//[Offset: 0x3c, Size: 4]
	float AimCardDirDeadZoneAngleDegrees;//[Offset: 0x40, Size: 4]
	float AimCardDirAngleOffsetDegrees;//[Offset: 0x44, Size: 4]
	float AimFWDDeltaAngleDegrees;//[Offset: 0x48, Size: 4]
	float AimBWDDeltaAngleDegrees;//[Offset: 0x4c, Size: 4]
	float AimLFTDeltaAngleDegrees;//[Offset: 0x50, Size: 4]
	float AimRGTDeltaAngleDegrees;//[Offset: 0x54, Size: 4]
	int LastCardDirIndex;//[Offset: 0x58, Size: 4]

--------------------------------
Class: FortAnimInput_GolfCart
	bool bIsUsingGolfCart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsDriver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bIsFrontPassenger;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bIsBackLeftPassenger;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bIsBackRightPassenger;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bIsFrontPassengerAndLeaning;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bIsBackPassengerAndLeaning;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bIsDrifting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bIsEBraking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bIsReversing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bIsPowerSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bIsLeaning;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bIsLeaningOrBouncing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bIsBounceCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bIsBounceCrouched;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bIsBounceJumping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bIsBounceRecoiling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bIsSteeringRight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bIsSteeringLeft;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	float RunForwardAlpha;//[Offset: 0x4, Size: 4]
	float BounceCompression;//[Offset: 0x8, Size: 4]
	Vector LeanPosition;//[Offset: 0xc, Size: 12]
	float LeanPositionX;//[Offset: 0x18, Size: 4]
	float LeanPositionY;//[Offset: 0x1c, Size: 4]
	float LeanPositionZ;//[Offset: 0x20, Size: 4]
	bool bAimFWD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bAimBWD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bAimLFT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	bool bAimRGT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 1]
	float PawnToVehicleDeltaYawAngleDegrees;//[Offset: 0x28, Size: 4]
	float AimCardDirDeadZoneAngleDegrees;//[Offset: 0x2c, Size: 4]
	float AimCardDirAngleOffsetDegrees;//[Offset: 0x30, Size: 4]
	int LastCardDirIndex;//[Offset: 0x34, Size: 4]
	float AimFWDDeltaAngleDegrees;//[Offset: 0x38, Size: 4]
	float AimBWDDeltaAngleDegrees;//[Offset: 0x3c, Size: 4]
	float AimLFTDeltaAngleDegrees;//[Offset: 0x40, Size: 4]
	float AimRGTDeltaAngleDegrees;//[Offset: 0x44, Size: 4]
	float SlopePitchDegreeAngle;//[Offset: 0x48, Size: 4]
	float SlopeRollDegreeAngle;//[Offset: 0x4c, Size: 4]
	float SteerAngle;//[Offset: 0x50, Size: 4]

--------------------------------
Class: FortAnimInput_Quad
	bool bIsUsingQuad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsDriver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bIsFrontPassenger;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bIsBackPassenger;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bIsBackPassengerAndLeaning;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bIsDrifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bIsReversing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bIsLeaning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bIsLeaningOrBouncing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bIsBounceCrouching;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bIsBounceCrouched;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bIsBounceJumping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bIsBounceRecoiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bIsSteeringRight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bIsSteeringLeft;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	float RunForwardAlpha;//[Offset: 0x4, Size: 4]
	float BounceCompression;//[Offset: 0x8, Size: 4]
	Vector LeanPosition;//[Offset: 0xc, Size: 12]
	float LeanPositionX;//[Offset: 0x18, Size: 4]
	float LeanPositionY;//[Offset: 0x1c, Size: 4]
	float LeanPositionZ;//[Offset: 0x20, Size: 4]
	float VerticalVelocity;//[Offset: 0x24, Size: 4]
	float VerticalAcceleration;//[Offset: 0x28, Size: 4]
	bool bAimFWD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bAimBWD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bAimLFT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bAimRGT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	float PawnToVehicleDeltaYawAngleDegrees;//[Offset: 0x30, Size: 4]
	float AimCardDirDeadZoneAngleDegrees;//[Offset: 0x34, Size: 4]
	float AimCardDirAngleOffsetDegrees;//[Offset: 0x38, Size: 4]
	int LastCardDirIndex;//[Offset: 0x3c, Size: 4]
	float AimFWDDeltaAngleDegrees;//[Offset: 0x40, Size: 4]
	float AimBWDDeltaAngleDegrees;//[Offset: 0x44, Size: 4]
	float AimLFTDeltaAngleDegrees;//[Offset: 0x48, Size: 4]
	float AimRGTDeltaAngleDegrees;//[Offset: 0x4c, Size: 4]
	float SlopePitchDegreeAngle;//[Offset: 0x50, Size: 4]
	float SlopeRollDegreeAngle;//[Offset: 0x54, Size: 4]
	float SteerAngle;//[Offset: 0x58, Size: 4]
	float SteerAlpha;//[Offset: 0x5c, Size: 4]
	float SteerAngleDeadZoneDegrees;//[Offset: 0x60, Size: 4]
	float SteeringRotation;//[Offset: 0x64, Size: 4]
	float VehiclePitch;//[Offset: 0x68, Size: 4]
	float VehicleRoll;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: FortAnimInput_MountedTurret
	bool bIsUsingMountedTurret;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float AimingYaw;//[Offset: 0x4, Size: 4]
	float AimingPitch;//[Offset: 0x8, Size: 4]
	float PedalScaler;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FortAnimInput_FerretVehicle
	bool bIsUsingFerretVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsDriver;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bIsFrontPassenger;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bIsBackLeftPassenger;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bIsBackRightPassenger;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bIsFrontPassengerAndLeaning;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bIsBackPassengerAndLeaning;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bIsDrifting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bIsReversing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bIsLeaning;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bIsLeaningOrBouncing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bIsBounceCrouching;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bIsBounceCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bIsBounceJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bIsBounceRecoiling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	byte bIsSteeringRight;//[Offset: 0x3, Size: 1]
	byte bIsSteeringLeft;//[Offset: 0x4, Size: 1]
	byte bIsShooting;//[Offset: 0x5, Size: 1]
	byte bIsFerretPassengerRotating;//[Offset: 0x6, Size: 1]
	float RunForwardAlpha;//[Offset: 0x8, Size: 4]
	float BounceCompression;//[Offset: 0xc, Size: 4]
	Vector LeanPosition;//[Offset: 0x10, Size: 12]
	float LeanPositionX;//[Offset: 0x1c, Size: 4]
	float LeanPositionY;//[Offset: 0x20, Size: 4]
	float LeanPositionZ;//[Offset: 0x24, Size: 4]
	bool bAimFWD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bAimBWD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bAimLFT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bAimRGT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	float PawnToVehicleDeltaYawAngleDegrees;//[Offset: 0x2c, Size: 4]
	float AimCardDirDeadZoneAngleDegrees;//[Offset: 0x30, Size: 4]
	float AimCardDirAngleOffsetDegrees;//[Offset: 0x34, Size: 4]
	int LastCardDirIndex;//[Offset: 0x38, Size: 4]
	float AimFWDDeltaAngleDegrees;//[Offset: 0x3c, Size: 4]
	float AimBWDDeltaAngleDegrees;//[Offset: 0x40, Size: 4]
	float AimLFTDeltaAngleDegrees;//[Offset: 0x44, Size: 4]
	float AimRGTDeltaAngleDegrees;//[Offset: 0x48, Size: 4]
	float SlopePitchDegreeAngle;//[Offset: 0x4c, Size: 4]
	float SlopeRollDegreeAngle;//[Offset: 0x50, Size: 4]
	float SteerAngle;//[Offset: 0x54, Size: 4]
	Vector SeatSwitchDirection;//[Offset: 0x58, Size: 12]

--------------------------------
Class: FortAnimInput_Zipline
	bool bIsZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShouldPlayPivotTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LeanYaw;//[Offset: 0x4, Size: 4]
	float PivotBlendDelayRemaining;//[Offset: 0x8, Size: 4]
	float PivotBlendDelay;//[Offset: 0xc, Size: 4]
	enum PivotCardinalDirection;//[Offset: 0x10, Size: 1]
	Vector WorldVelocityLastTick;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FortAnimInput_Ragdoll
	bool bIsRagdolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bTumbling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bStopped;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	Vector2D Impact;//[Offset: 0x4, Size: 8]
	Vector Facing;//[Offset: 0xc, Size: 12]

--------------------------------
Class: FortAnimInput_JackalVehicle
	bool bIsUsingJackalVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsSteeringLeft;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bIsSteeringRight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float SteerAngleDeadZoneDegrees;//[Offset: 0x4, Size: 4]
	float SteerAngle;//[Offset: 0x8, Size: 4]
	float LeanYaw;//[Offset: 0xc, Size: 4]
	float QuantizedSteerAngle;//[Offset: 0x10, Size: 4]
	float SteerAlpha;//[Offset: 0x14, Size: 4]
	float RunForwardAlpha;//[Offset: 0x18, Size: 4]
	float SlopePitchDegreeAngle;//[Offset: 0x1c, Size: 4]
	float SlopeRollDegreeAngle;//[Offset: 0x20, Size: 4]
	float DistanceFromGround;//[Offset: 0x24, Size: 4]
	float PivotPlayRate;//[Offset: 0x28, Size: 4]
	bool bIsReversing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bIsBraking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bIsMovingForward;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bInAir;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bIsRelaxed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bHasReachedJumpChargeStartThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bHasReachedJumpChargeMidThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bHasReachedJumpChargeFullThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bAdjustRootForFemaleRider;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bIsPlayingEmoteOnHoverboard;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bShouldApplyAdditive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]
	bool bPlayPivotOnGroundAndNotBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e, Size: 1]
	bool bIsOnLowerHill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e, Size: 1]
	bool bLowerBodyIdleToLoopTransition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e, Size: 1]
	bool bInterruptHoverboardFullybody;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e, Size: 1]
	bool bEnterFullBodyHoverboardState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e, Size: 1]
	bool bDefaultToJumpStartTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e, Size: 1]
	bool bLocomotionPoseToJumpTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e, Size: 1]
	bool bBoostingToBoostingJumpTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e, Size: 1]
	bool bJumpToLocomotionPoseTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f, Size: 1]
	bool bJumpApexToJumpFallTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f, Size: 1]
	bool bIdleToMovementStartTransition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f, Size: 1]
	bool bIdleToMovementLoopTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f, Size: 1]
	bool bMovementLoopToMovementStopTransition;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f, Size: 1]
	bool bMovementLoopToPivotTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f, Size: 1]
	bool bMovementLoopToIdleTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f, Size: 1]
	bool bIdleAdditiveToCollisionNTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f, Size: 1]
	bool bSplitBodyToHoverboardBRTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bHoverboardBRToSplitBodyTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bHoverboardBRMovementToJumpChargeTransition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bIdlesToJackalVehicleTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bPlayAdditiveLeans;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	bool bPlayBalloonLeans;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 1]
	bool bPlayJumpTrickVertical;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 1]
	bool bPlayJumpTrick;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 1]
	bool bPlayMovingFast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bPlayHipAdjustmentAdditive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bPlayDriveSouth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31, Size: 1]
	bool bPlayHeadAimOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 1]
	bool bPlaySlopeAimOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	float JumpCombatAdditiveWeight;//[Offset: 0x34, Size: 4]
	float MeleeTwistIdle;//[Offset: 0x38, Size: 4]
	float MeleeTwistLocomotionLoop;//[Offset: 0x3c, Size: 4]
	FortAnimInput_VelocityImpact VelocityImpact;//[Offset: 0x40, Size: 188]
	Vector ImpactDisplacement;//[Offset: 0xfc, Size: 12]
	float SteerYaw;//[Offset: 0x110, Size: 4]
	Vector EmoteHoverboardPosition;//[Offset: 0x114, Size: 12]
	Rotator EmoteHoverboardRotation;//[Offset: 0x120, Size: 12]
	bool bShouldAttachFeetToHoverboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c, Size: 1]
	Vector FootLeftLocationOffset;//[Offset: 0x130, Size: 12]
	Rotator FootLeftRotationOffset;//[Offset: 0x13c, Size: 12]
	Vector FootRightLocationOffset;//[Offset: 0x148, Size: 12]
	Rotator FootRightRotationOffset;//[Offset: 0x154, Size: 12]
	float StoppedThreshold;//[Offset: 0x160, Size: 4]
	float MovingForwardThreshold;//[Offset: 0x164, Size: 4]
	float MovingFowardFastThreshold;//[Offset: 0x168, Size: 4]
	float DefaultToJumpStartTransitionThreshold;//[Offset: 0x16c, Size: 4]
	float JumpTrickAngularVelocityThreshold;//[Offset: 0x170, Size: 4]
	float JumpDistanceFromGroundThreshold;//[Offset: 0x174, Size: 4]
	float VelocityStartThreshold;//[Offset: 0x178, Size: 4]
	float MovingFastThreshold;//[Offset: 0x17c, Size: 4]
	float RelaxedSpeedThreshold;//[Offset: 0x180, Size: 4]
	float JumpChargeStartThreshold;//[Offset: 0x184, Size: 4]
	float JumpChargeMidThreshold;//[Offset: 0x188, Size: 4]
	float JumpChargeFullThreshold;//[Offset: 0x18c, Size: 4]
	float RotatingAngularVelocityThreshold;//[Offset: 0x190, Size: 4]
	float IdleToLoopTransitionSpeedThreshold;//[Offset: 0x194, Size: 4]
	float IdleToMovementLoopTransitionThreshold;//[Offset: 0x198, Size: 4]
	float MeleeTwistIdleMultiplier;//[Offset: 0x19c, Size: 4]
	float MeleeTwistLocomotionLoopMultiplier;//[Offset: 0x1a0, Size: 4]
	float LeanYawForMaxPivotPlayRate;//[Offset: 0x1a4, Size: 4]
	float SteerAlphaForMaxPivotPlayRate;//[Offset: 0x1a8, Size: 4]

--------------------------------
Class: FortAnimInput_OctopusVehicle
	bool bIsUsingOctopusVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAnimInput_CommonVehicle
	bool bIsUsingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bIsJumpingVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanChargeJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bIsChargingJump;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bIsOnGround;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bCanDriverAimWeapon;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]

--------------------------------
Class: FortAnimInput_CommonWeapon
	bool bIsWeaponEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bForceUpperBodyTargeting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAnimInput_BowWeapon
	CurveFloat* BowChargeSpeedModifierCurve;//[Offset: 0x0, Size: 8]
	Transform RightHandIKExtraOffset;//[Offset: 0x10, Size: 48]
	Vector RightHandIKOffsetLocation;//[Offset: 0x40, Size: 12]
	Rotator RightHandIKOffsetRotation;//[Offset: 0x4c, Size: 12]
	FName WeaponAttachmentSocketName;//[Offset: 0x58, Size: 8]
	FName ArrowNockSocketName;//[Offset: 0x60, Size: 8]
	float BowAimYaw;//[Offset: 0x68, Size: 4]
	float BowAimPitch;//[Offset: 0x6c, Size: 4]
	float ChargeBlendSpaceCrouchSpeed;//[Offset: 0x70, Size: 4]
	float ChargeBlendSpaceCrouchSpeedInterpRate;//[Offset: 0x74, Size: 4]
	float ChargeBlendSpaceCrouchSpeedTarget;//[Offset: 0x78, Size: 4]
	float ChargePlayRate;//[Offset: 0x7c, Size: 4]
	float ChargeBlendInTime;//[Offset: 0x80, Size: 4]
	float FastChargeThreshold;//[Offset: 0x84, Size: 4]
	float ChargeBlendInTimeDefault;//[Offset: 0x88, Size: 4]
	float ChargeBlendInTimeFastCharge;//[Offset: 0x8c, Size: 4]
	float WeaponRaisedAdditiveLeanMultiplier;//[Offset: 0x90, Size: 4]
	bool bIsBowEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 1]
	bool bIsBowCharging;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 1]
	bool bIsBowAtMaxCharge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 1]
	bool bEnableRightHandIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 1]

--------------------------------
Class: FortAnimInput_CreativeMoveTool
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAnimInput_DBNOCarried
	CachedAnimStateData DropStateData;//[Offset: 0x0, Size: 28]
	FloatSpringState CarrierYawSpringState;//[Offset: 0x1c, Size: 8]
	FloatSpringState CarrierSpinePitchSpringState;//[Offset: 0x24, Size: 8]
	AnimMontage* CarrierDropMontage;//[Offset: 0x30, Size: 8]
	AnimMontage* CarrierPickupMontage;//[Offset: 0x38, Size: 8]
	FortPlayerPawn* CarrierPawn;//[Offset: 0x40, Size: 8]
	FortPlayerAnimInstance* CarrierAnimBP;//[Offset: 0x48, Size: 8]
	AnimMontage* CarrierInterrogationMontage;//[Offset: 0x50, Size: 8]
	Vector LHandIKLocation;//[Offset: 0x58, Size: 12]
	Rotator LHandIKRotation;//[Offset: 0x64, Size: 12]
	Vector TempAttachLocation;//[Offset: 0x70, Size: 12]
	Rotator TempAttachRotation;//[Offset: 0x7c, Size: 12]
	float SubAnimPhysicsWeight;//[Offset: 0x88, Size: 4]
	float DropMontagePosition;//[Offset: 0x8c, Size: 4]
	float PickupMontagePosition;//[Offset: 0x90, Size: 4]
	float InterrogationMontagePosition;//[Offset: 0x94, Size: 4]
	float PickupToIdleTransitionPosition;//[Offset: 0x98, Size: 4]
	float CarrierPawnVelocityZ;//[Offset: 0x9c, Size: 4]
	float CarrierYawDeltaSmoothed;//[Offset: 0xa0, Size: 4]
	float CarriedJogNAnimPosition;//[Offset: 0xa4, Size: 4]
	float CarriedJogSAnimPosition;//[Offset: 0xa8, Size: 4]
	float CarriedCrouchNAnimPosition;//[Offset: 0xac, Size: 4]
	float CarriedCrouchSAnimPosition;//[Offset: 0xb0, Size: 4]
	float CarriedSprintAnimPosition;//[Offset: 0xb4, Size: 4]
	float CarriedCrouchSprintAnimPosition;//[Offset: 0xb8, Size: 4]
	float CarrierSpinePitch;//[Offset: 0xbc, Size: 4]
	float DropStateWeight;//[Offset: 0xc0, Size: 4]
	bool bBeingCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bIsBeingPickedUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	bool bIsBeingDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 1]
	bool bCarrierIsCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 1]
	bool bCarrierIsMovingBackward;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc4, Size: 1]
	bool bCarrierHasSyncMarkers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc4, Size: 1]
	bool bTransitionFromPickupToIdle;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc4, Size: 1]
	bool bTransitionFromIdleToJogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc4, Size: 1]
	bool bTransitionFromJoggingToSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc5, Size: 1]
	bool bTransitionFromInAirToLanding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc5, Size: 1]
	bool bJackalPlayJumpTrickVertical;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc5, Size: 1]

--------------------------------
Class: FloatSpringState

--------------------------------
Class: FortAnimInput_SlopeInfo
	Vector RootSlopeTranslation;//[Offset: 0x0, Size: 12]
	Vector LeftFootSlopeTranslation;//[Offset: 0xc, Size: 12]
	Vector RightFootSlopeTranslation;//[Offset: 0x18, Size: 12]
	Rotator SlopeRotation;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FortAnimInput_TransitionProperties
	bool bTransition_DoubleJump_Fast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bTransition_DoubleJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]

--------------------------------
Class: FortAnimInput_AdjustedAim
	FortAnimInput_AdjustedAimOffset WeaponOffsets;//[Offset: 0x0, Size: 16]
	float YawOffset;//[Offset: 0x220, Size: 4]
	float PitchOffset;//[Offset: 0x224, Size: 4]
	float YawScale;//[Offset: 0x228, Size: 4]
	float PitchScale;//[Offset: 0x22c, Size: 4]
	float ResultingYaw;//[Offset: 0x230, Size: 4]
	float ResultingPitch;//[Offset: 0x234, Size: 4]
	FName ZeroOutPitchWeightCurveName;//[Offset: 0x238, Size: 8]

--------------------------------
Class: FortAnimInput_SpringGlider
	FloatSpringState GliderXRotationRightSpringLeg;//[Offset: 0x0, Size: 8]
	FloatSpringState GliderYRotationRightSpringLeg;//[Offset: 0x8, Size: 8]
	FloatSpringState GliderZLocationSpring;//[Offset: 0x10, Size: 8]
	FloatSpringState GliderXLocationSpring;//[Offset: 0x18, Size: 8]
	FloatSpringState GliderYLocationSpring;//[Offset: 0x20, Size: 8]
	Rotator GliderOffsetRotator;//[Offset: 0x28, Size: 12]
	Rotator GliderOffsetRotationRightLeg;//[Offset: 0x34, Size: 12]
	Rotator GliderOffsetRotationLeftLeg;//[Offset: 0x40, Size: 12]
	Vector GliderOffsetLocation;//[Offset: 0x4c, Size: 12]
	float GliderYOffsetRotationRightLeg;//[Offset: 0x58, Size: 4]
	float GliderYOffsetRotationLeftLeg;//[Offset: 0x5c, Size: 4]
	float GliderXOffsetRotationRightLeg;//[Offset: 0x60, Size: 4]
	float GliderXOffsetRotationLeftLeg;//[Offset: 0x64, Size: 4]
	float GliderZOffset;//[Offset: 0x68, Size: 4]
	float GliderXOffset;//[Offset: 0x6c, Size: 4]
	float GliderYOffset;//[Offset: 0x70, Size: 4]

--------------------------------
Class: CachedAnimRelevancyData
	FName StateMachineName;//[Offset: 0x0, Size: 8]
	FName StateName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AthenaAircraft_C.FortAthenaAircraft.FortAircraft.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x458, Size: 8]
	void PlayEffectsForPlayerJumped();// 0xbbc0600
	void ExecuteUbergraph_AthenaAircraft(int EntryPoint);// 0xbbc0600

--------------------------------
Class: B_StockBattleBus_C.BattleBusCosmeticInstanceBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 8]
	StaticMeshComponent* Bus;//[Offset: 0x238, Size: 8]
	SceneComponent* Scene;//[Offset: 0x240, Size: 8]
	StaticMeshComponent* BalloonFlame;//[Offset: 0x248, Size: 8]
	StaticMeshComponent* Balloon;//[Offset: 0x250, Size: 8]
	float Light_Flash_Timeline_Light3_7AB7DCFD4BB25B57EF475DAD841187C0;//[Offset: 0x258, Size: 4]
	float Light_Flash_Timeline_Light2_7AB7DCFD4BB25B57EF475DAD841187C0;//[Offset: 0x25c, Size: 4]
	float Light_Flash_Timeline_Light1_7AB7DCFD4BB25B57EF475DAD841187C0;//[Offset: 0x260, Size: 4]
	byte Light_Flash_Timeline__Direction_7AB7DCFD4BB25B57EF475DAD841187C0;//[Offset: 0x264, Size: 1]
	TimelineComponent* Light Flash Timeline;//[Offset: 0x268, Size: 8]
	float Bus_Music_Fader_Volume_A587597F47291E46479564BC14A7B45A;//[Offset: 0x270, Size: 4]
	byte Bus_Music_Fader__Direction_A587597F47291E46479564BC14A7B45A;//[Offset: 0x274, Size: 1]
	TimelineComponent* Bus Music Fader;//[Offset: 0x278, Size: 8]
	SoundBase* LoopingSound;//[Offset: 0x280, Size: 8]
	SoundBase* LoopingMusic;//[Offset: 0x288, Size: 8]
	AudioComponent* BusMusic_Inst;//[Offset: 0x290, Size: 8]
	AudioComponent* BusEngine_Inst;//[Offset: 0x298, Size: 8]
	MaterialInstanceDynamic* MaterialWindows;//[Offset: 0x2a0, Size: 8]
	int LightIndex;//[Offset: 0x2a8, Size: 4]
	FName[] ParamNames;//[Offset: 0x2b0, Size: 16]
	bool EnableNewBusFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	B_BusStorm_C* BusStormFX;//[Offset: 0x2c8, Size: 8]
	float MusicBPM;//[Offset: 0x2d0, Size: 4]
	void UserConstructionScript(Rotator CallFunc_K2_GetComponentRotation_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_VectorToNormalizedAngleInDegrees_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0xbbc0600
	void Bus Music Fader__FinishedFunc();// 0xbbc0600
	void Bus Music Fader__UpdateFunc();// 0xbbc0600
	void Light Flash Timeline__FinishedFunc();// 0xbbc0600
	void Light Flash Timeline__UpdateFunc();// 0xbbc0600
	void Light Flash Timeline__Loop__EventFunc();// 0xbbc0600
	void GrabAudioReferences();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void Start Audio();// 0xbbc0600
	void Game Phase Step Changed(out const interface class SafeZoneInterface, const enum GamePhaseStep);// 0xbbc0600
	void ExecuteUbergraph_B_StockBattleBus(int EntryPoint, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SoundBase* CallFunc_GetFlightLoopingSound_ReturnValue, SoundBase* CallFunc_GetFlightLoopingMusic_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, byte K2Node_Event_EndPlayReason, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_VectorToNormalizedAngleInDegrees_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FortGameStateAthena* K2Node_DynamicCast_AsFort_Game_State_Athena, bool K2Node_DynamicCast_bSuccess, FortSafeZoneIndicator* CallFunc_GetSafeZoneIndicator_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSafeZoneCenter_ReturnValue, float CallFunc_GetSafeZoneRadius_ReturnValue, float CallFunc_DistanceBetweenTwoVectors_Distance, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_DistanceBetweenTwoVectors_Distance, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, B_BusStorm_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, const interface class K2Node_CustomEvent_SafeZoneInterface, const enum K2Node_CustomEvent_GamePhaseStep, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600

--------------------------------
Class: B_BusStorm_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 8]
	ParticleSystemComponent* P_Storm_Rain_Athena_Bus;//[Offset: 0x228, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 8]
	float Lightinging_Flash_LERP_14AC5BBC43AB17F567EDE1A23F5904D2;//[Offset: 0x238, Size: 4]
	byte Lightinging_Flash__Direction_14AC5BBC43AB17F567EDE1A23F5904D2;//[Offset: 0x23c, Size: 1]
	TimelineComponent* Lightinging Flash;//[Offset: 0x240, Size: 8]
	float %ChanceOfLightningMesh;//[Offset: 0x248, Size: 4]
	Vector LightningSpawnLocation;//[Offset: 0x24c, Size: 12]
	float LightningFlashDiameter;//[Offset: 0x258, Size: 4]
	float LightningFlashHeight;//[Offset: 0x25c, Size: 4]
	PointLightComponent* RandomLightningLight;//[Offset: 0x260, Size: 8]
	float LightningIntensity;//[Offset: 0x268, Size: 4]
	float LightningIntensityMin;//[Offset: 0x26c, Size: 4]
	float LightningIntensityMax;//[Offset: 0x270, Size: 4]
	float LightningTimelinePlaySpeedMin;//[Offset: 0x274, Size: 4]
	float LightningTimelinePlaySpeedMax;//[Offset: 0x278, Size: 4]
	float LightningFlashRepeatDelayMin;//[Offset: 0x27c, Size: 4]
	float LightningFlashRepeatDelayMax;//[Offset: 0x280, Size: 4]
	interface class * CameraLensEffectInterface;//[Offset: 0x288, Size: 16]
	void Get Location in Circle XY(out Vector LocationLocalSpace, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_RandomFloat_ReturnValue, float CallFunc_GetPI_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Cos_ReturnValue, float CallFunc_Sin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue);// 0xbbc0600
	void Lightinging Flash__FinishedFunc();// 0xbbc0600
	void Lightinging Flash__UpdateFunc();// 0xbbc0600
	void StartRandomLightningFlashes();// 0xbbc0600
	void Play Lightning Flash Audio(Vector Location);// 0xbbc0600
	void Start Bus Storm();// 0xbbc0600
	void EndBusStorm();// 0xbbc0600
	void ExecuteUbergraph_B_BusStorm(int EntryPoint, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, interface class CallFunc_AddGenericCameraLensEffect_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Transform CallFunc_MakeTransform_ReturnValue, const Transform Temp_struct_Variable, Actor* CallFunc_SpawnPooledFXActor_ReturnValue, LightningLsystem_C* K2Node_DynamicCast_AsLightning_Lsystem, bool K2Node_DynamicCast_bSuccess, PointLightComponent* CallFunc_AddComponent_ReturnValue, float CallFunc_RandomFloat_ReturnValue, Vector K2Node_CustomEvent_Location, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Get_Location_in_Circle_XY_LocationLocalSpace, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, enum CallFunc_IsInterfaceValid_Result, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600

--------------------------------
Class: LightningLsystem_C.FortLightningActor.FortClientOnlyActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 8]
	StaticMeshComponent* Sm_LightningStrikes_C_01;//[Offset: 0x280, Size: 8]
	BillboardComponent* Base;//[Offset: 0x288, Size: 8]
	StaticMeshComponent* Sm_LightningStrikes_B_01;//[Offset: 0x290, Size: 8]
	StaticMeshComponent* Sm_LightningStrikes_A_01;//[Offset: 0x298, Size: 8]
	StaticMeshComponent* BoltMesh;//[Offset: 0x2a0, Size: 8]
	Vector Start Location;//[Offset: 0x2a8, Size: 12]
	Vector End Location;//[Offset: 0x2b4, Size: 12]
	bool isDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	float BoltLifetimeMin;//[Offset: 0x2c4, Size: 4]
	float BoltLifetimeMax;//[Offset: 0x2c8, Size: 4]
	float BoltLifetime;//[Offset: 0x2cc, Size: 4]
	MaterialInstanceDynamic* BoltMID;//[Offset: 0x2d0, Size: 8]
	void GetRandomMesh(int RandomMeshToUse, MaterialInstanceDynamic* CallFunc_Array_Get_Item, StaticMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue);// 0xbbc0600
	void CleanupMesh(bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void UserConstructionScript(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, StaticMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int CallFunc_Array_Add_ReturnValue, StaticMeshComponent*[] K2Node_MakeArray_Array, float CallFunc_RandomFloatInRange_ReturnValue);// 0xbbc0600
	void OnLightingCleanup();// 0xbbc0600
	void SetupLightning(Vector Start Location, Vector End Location);// 0xbbc0600
	void DebugStrike();// 0xbbc0600
	void OnLightingInitialized();// 0xbbc0600
	void EndLightning();// 0xbbc0600
	void ExecuteUbergraph_LightningLsystem(int EntryPoint, Vector K2Node_CustomEvent_Start_Location, Vector K2Node_CustomEvent_End_Location, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotFromZ_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_AddLocalRotation_SweepHitResult, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Lerp_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortLightningActor.FortClientOnlyActor.Actor.Object
	int MaxBoltMeshes;//[Offset: 0x224, Size: 4]
	float MaxBoltWidth;//[Offset: 0x228, Size: 4]
	FName BoltMaterialParamTopPct;//[Offset: 0x22c, Size: 8]
	FName BoltMaterialParamBottomPct;//[Offset: 0x234, Size: 8]
	Actor* ActorToNotify;//[Offset: 0x240, Size: 8]
	Vector[] BoltLocations;//[Offset: 0x248, Size: 16]
	StaticMeshComponent*[] BoltMeshes;//[Offset: 0x258, Size: 16]
	MaterialInstanceDynamic*[] BoltMIDs;//[Offset: 0x268, Size: 16]
	void OnLightingInitialized();// 0xbbc0600
	void OnLightingCleanup();// 0xbbc0600
	void InitializeLightning(Actor* InActorToNotify);// 0xd06ed00
	void GenerateBoltLocations(out const Vector StartLocation, out const Vector EndLocation, float MinLength, float MaxLength, float RandomVectorContribution, float MinSizeDecayRate, float MaxSizeDecayRate, float FalloffMultiplier);// 0xd06ea84
	void CleanupLightning();// 0xd06ea70

--------------------------------
Class: BP_PlayerPawn_Athena_Phoebe_C.PlayerPawn_Athena_C.PlayerPawn_Athena_Generic_C.PlayerPawn_Athena_Generic_Parent_C.FortPlayerPawnAthena.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x46c8, Size: 8]
	FName AIEvaluator_CharacterLaunchedKeyName;//[Offset: 0x46d0, Size: 8]
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0xbbc0600
	void ExecuteUbergraph_BP_PlayerPawn_Athena_Phoebe(int EntryPoint, Controller* CallFunc_GetController_ReturnValue, Vector K2Node_Event_LaunchVelocity, bool K2Node_Event_bXYOverride, bool K2Node_Event_bZOverride, FortAthenaAIBotController* K2Node_DynamicCast_AsFort_Athena_AIBot_Controller, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe48, Size: 8]
	ParticleSystemComponent* MeleeHeavy_PSC;//[Offset: 0xe50, Size: 8]
	enum IdleFX Location Rule;//[Offset: 0xe58, Size: 1]
	enum Idle FX Rotation Rule;//[Offset: 0xe59, Size: 1]
	enum Idle FX Scale Rule;//[Offset: 0xe5a, Size: 1]
	enum SwingFX Location Rule;//[Offset: 0xe5b, Size: 1]
	enum Swing FX Rotation Rule;//[Offset: 0xe5c, Size: 1]
	enum Swing FX Scale Rule;//[Offset: 0xe5d, Size: 1]
	ParticleSystem* MeleeHeavy_ParticleSystem;//[Offset: 0xe60, Size: 8]
	ParticleSystem* WeaponDurabilityDestroyEffect;//[Offset: 0xe68, Size: 8]
	ParticleSystem* WeaponDurabilityDestroyEffectIcon;//[Offset: 0xe70, Size: 8]
	bool UseDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe78, Size: 1]
	ParticleSystemComponent* Alteration Ambient PS;//[Offset: 0xe80, Size: 8]
	Vector Effects_Color_Level;//[Offset: 0xe88, Size: 12]
	bool Equipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe94, Size: 1]
	bool bEquipPendingInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe95, Size: 1]
	bool UseTimeofDayControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe96, Size: 1]
	bool Swing_Right?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe97, Size: 1]
	FXSystemComponent* Impact FX;//[Offset: 0xe98, Size: 8]
	Rotator Left Swing Rotation;//[Offset: 0xea0, Size: 12]
	Rotator Right Swing Rotation;//[Offset: 0xeac, Size: 12]
	void Melee_Effect_Color(out Vector Melee_Color_Set);// 0xbbc0600
	void Binding Time of Day Control(bool Bind / Unbind (T/F), FortTimeOfDayManager* CallFunc_GetTimeOfDayManagerFromContext_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPreviousDayPhase_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void UnbindSwingAnimTrailEvents(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Generic_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_ObjectToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void BindSwingAnimTrailEvents(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FString CallFunc_Conv_ObjectToString_ReturnValue, PlayerPawn_Generic_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void PlayCQCPickaxeEnemyAudio(HitResult Hit Result, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Pawn* CallFunc_GetInstigator_ReturnValue, BuildingActor* K2Node_DynamicCast_AsBuilding_Actor, bool K2Node_DynamicCast_bSuccess, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetLocalViewingPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetActorTeam_ReturnValue, byte CallFunc_GetTeamAffiliationToLocalPlayer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void SetActiveAlterationIdleParticles(bool Active, bool Reset, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void SetWpnRarity(enum Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, FortWeaponItemDefinition* CallFunc_GetWeaponData_ReturnValue, enum CallFunc_GetRarity_ReturnValue, byte K2Node_Select_Default, float CallFunc_Conv_ByteToFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue);// 0xbbc0600
	void UserConstructionScript();// 0xbbc0600
	void OnStatChanged_F171C56748FEA3E19F93088E968D3E21(FName StatName, int StatValue);// 0xbbc0600
	void OnLoaded_5BC5DA3B4E308BE7A188FBB2571333D2(Object* Loaded);// 0xbbc0600
	void MeleeSwingRight(bool First Right);// 0xbbc0600
	void MeleeSwingLeft(bool First Left);// 0xbbc0600
	void FootStepLeft();// 0xbbc0600
	void FootStepRight();// 0xbbc0600
	void MeleeSwingRight_End();// 0xbbc0600
	void MeleeSwingLeft_End();// 0xbbc0600
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void PlayRClickImpacts();// 0xbbc0600
	void OnEquippedWeaponDestory();// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void OnInitCosmeticAlterations(FortCosmeticModification CosmeticMod);// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnWeaponDetached();// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void HandleKillWatch();// 0xbbc0600
	void UpdateBasedOnKills(int Watched Kills);// 0xbbc0600
	void Anim Trails Notify(bool bActive);// 0xbbc0600
	void Anim Trails Disable();// 0xbbc0600
	void SwingRight();// 0xbbc0600
	void SwingLeft();// 0xbbc0600
	void SwingRightEnd();// 0xbbc0600
	void SwingLeftEnd();// 0xbbc0600
	void OnInstigatorSet();// 0xbbc0600
	void K2_OnUnEquip();// 0xbbc0600
	void TODCheck(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_Generic(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, FName Temp_name_Variable, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, float CallFunc_GetPI_ReturnValue, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_Event_First_Right, bool K2Node_Event_First_Left, bool K2Node_Event_bPersistentFire, bool K2Node_Event_bSecondaryFire, FName K2Node_CustomEvent_StatName, int K2Node_CustomEvent_StatValue, Vector CallFunc_GetSocketLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, Pawn* CallFunc_GetInstigator_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, FortCosmeticModification K2Node_Event_CosmeticMod, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FortWeaponItemDefinition* CallFunc_GetWeaponData_ReturnValue, Texture2D* CallFunc_GetSmallPreviewImage_ReturnValue, FName CallFunc_GetIdleFXSocketName_ReturnValue, Texture2D* CallFunc_GetOrLoadSynchronously_ReturnValue, FName CallFunc_GetSwingFXSocketName_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_IsClosed_Variable, FortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_Watched_Kills, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetUseAnimTrailsPSC_ReturnValue, FName CallFunc_GetAnimTrailsSecondSocketName_ReturnValue, FName CallFunc_GetAnimTrailsFirstSocketName_ReturnValue, float CallFunc_GetAnimTrailsWidth_ReturnValue, int Temp_int_Variable, bool CallFunc_GetUseAnimTrailsPSC_ReturnValue, int Temp_int_Variable, FXSystemComponent* CallFunc_GetAnimTrailVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, FXSystemComponent* CallFunc_GetAnimTrailVFXComponent_ReturnValue, bool K2Node_CustomEvent_bActive, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailsPSC_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, ParticleSystem* CallFunc_GetAnimTrailsPSCTemplate_ReturnValue, FName CallFunc_GetAnimTrailsFirstSocketName_ReturnValue, FName CallFunc_GetAnimTrailsSecondSocketName_ReturnValue, float CallFunc_GetAnimTrailsWidth_ReturnValue, NiagaraSystem* CallFunc_GetAnimTrailsNiagaraAsset_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailsPSC_ReturnValue, bool CallFunc_GetUseAnimTrailsPSC_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_AttachesAnimTrailsToWeapon_ReturnValue, int Temp_int_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, byte K2Node_CustomEvent_CurrentDayPhase, byte K2Node_CustomEvent_PreviousDayPhase, bool K2Node_CustomEvent_bAtCreation, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FortTimeOfDayManager* CallFunc_GetTimeOfDayManagerFromContext_ReturnValue, byte CallFunc_GetPreviousDayPhase_ReturnValue, const HitResult K2Node_Event_HitResult, byte K2Node_Event_ImpactPhysicalSurface, FXSystemComponent* K2Node_Event_SpawnedPSC, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Rotator CallFunc_MakeRotFromX_ReturnValue, int Temp_int_Variable, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, int Temp_int_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, Rotator K2Node_Select_Default, Rotator CallFunc_ComposeRotators_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Generic_Parent_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic_Parent, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_GetSocketTransform_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_VSize_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	FXSystemComponent* SwingVFX;//[Offset: 0xda0, Size: 8]
	FXSystemComponent* IdleVFX;//[Offset: 0xda8, Size: 8]
	FXSystemComponent* AnimTrailsPSC;//[Offset: 0xdb0, Size: 8]
	ParticleSystem* AnimTrailsPSCTemplate;//[Offset: 0xdb8, Size: 8]
	NiagaraSystem* AnimTrailsNiagaraAsset;//[Offset: 0xdc0, Size: 8]
	bool bUseAnimTrailsPSC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	FName AnimTrailsFirstSocketName;//[Offset: 0xdcc, Size: 8]
	FName AnimTrailsSecondSocketName;//[Offset: 0xdd4, Size: 8]
	float AnimTrailsWidth;//[Offset: 0xddc, Size: 4]
	FName IdleFXSocketName;//[Offset: 0xde0, Size: 8]
	FName SwingFXSocketName;//[Offset: 0xde8, Size: 8]
	SoundBase* GenericImpactSound;//[Offset: 0xdf0, Size: 8]
	MaterialInstanceDynamic* Material0MID;//[Offset: 0xdf8, Size: 8]
	bool bWatchKills;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe00, Size: 1]
	float WatchedKills;//[Offset: 0xe04, Size: 4]
	bool bCandyCaneKillReaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	SoundBase* CQCEnemyAudio;//[Offset: 0xe10, Size: 8]
	AnimMontage*[] PokeAnimationsToCheckForOnImpact;//[Offset: 0xe18, Size: 16]
	AnimMontage* PickaxeHarvestingMontage;//[Offset: 0xe28, Size: 8]
	MarshalledVFXRuntimeData[] RuntimeMarshalledData;//[Offset: 0xe30, Size: 16]
	AthenaPickaxeItemDefinition* CachedCosmeticItemDefinition;//[Offset: 0xe40, Size: 8]
	bool HasAuthoredData();// 0xd221c88
	bool GetUseAnimTrailsPSC();// 0xb6d8f74
	FXSystemComponent* GetSwingVFXComponent();// 0xb6d8f38
	ParticleSystemComponent* GetSwingPSC();// 0xb6d8f04
	FName GetSwingFXSocketName();// 0xb6d8ee8
	FXSystemComponent* GetIdleVFXComponent();// 0xb6d8eac
	ParticleSystemComponent* GetIdlePSC();// 0xb6d8e78
	FName GetIdleFXSocketName();// 0xb6d8e5c
	FXSystemComponent* GetAnimTrailVFXComponent();// 0xb6d8e20
	float GetAnimTrailsWidth();// 0xb6d8e04
	FName GetAnimTrailsSecondSocketName();// 0xb6d8de4
	ParticleSystem* GetAnimTrailsPSCTemplate();// 0xb6d8dc8
	FXSystemComponent* GetAnimTrailsPSC();// 0xb6d8dac
	NiagaraSystem* GetAnimTrailsNiagaraAsset();// 0xb6d8d90
	FName GetAnimTrailsFirstSocketName();// 0xb6d8d70
	FXSystemComponent* CreateAnimTrailFX();// 0xd221c54
	bool AttachesAnimTrailsToWeapon();// 0xb6d8d54

--------------------------------
Class: PlayerPawn_Generic_C.PlayerPawn_Generic_Parent_C.FortPlayerPawn.FortPawn.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3268, Size: 8]
	ParticleSystemComponent* SplashEffectsForEnteringOrExitingWater;//[Offset: 0x3270, Size: 8]
	ParticleSystemComponent* GamplayWindInteractionEffects;//[Offset: 0x3278, Size: 8]
	ParticleSystemComponent* Effect_Player_Run_Land;//[Offset: 0x3280, Size: 8]
	ParticleSystemComponent* Effect_Player_Walk_Land;//[Offset: 0x3288, Size: 8]
	ParticleSystemComponent* Effect_Player_Walk_Water;//[Offset: 0x3290, Size: 8]
	ParticleSystemComponent* Effect_Player_Run_Water;//[Offset: 0x3298, Size: 8]
	ParticleSystemComponent* Effect_WaterInteraction_FX;//[Offset: 0x32a0, Size: 8]
	ParticleSystemComponent* HitDamageParticles;//[Offset: 0x32a8, Size: 8]
	WidgetComponent* SpeechBubbleComponent;//[Offset: 0x32b0, Size: 8]
	SpotLightComponent* PlayerLight;//[Offset: 0x32b8, Size: 8]
	float ShatterShield_Push_3B96BD02488A8F69F3D086A2B7978EC8;//[Offset: 0x32c0, Size: 4]
	float ShatterShield_Opacity_3B96BD02488A8F69F3D086A2B7978EC8;//[Offset: 0x32c4, Size: 4]
	float ShatterShield_Highlight_Cracks_3B96BD02488A8F69F3D086A2B7978EC8;//[Offset: 0x32c8, Size: 4]
	byte ShatterShield__Direction_3B96BD02488A8F69F3D086A2B7978EC8;//[Offset: 0x32cc, Size: 1]
	TimelineComponent* ShatterShield;//[Offset: 0x32d0, Size: 8]
	SoundBase* HitByHuskRangedSound;//[Offset: 0x32d8, Size: 8]
	SoundBase* HitByHuskMeleeSound;//[Offset: 0x32e0, Size: 8]
	AnimMontage* SoulSuckVictimMontage;//[Offset: 0x32e8, Size: 8]
	float PlayerSpeed;//[Offset: 0x32f0, Size: 4]
	float Run_Particle_Activate_Speed;//[Offset: 0x32f4, Size: 4]
	float Walk_Dust_Activate_Speed;//[Offset: 0x32f8, Size: 4]
	float Walk_Particle_Reset_Speed;//[Offset: 0x32fc, Size: 4]
	Vector PreviousVelocityVector;//[Offset: 0x3300, Size: 12]
	bool CanSpawnRunKickupFX?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330c, Size: 1]
	bool CanSpawnWalkKickupFX?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330d, Size: 1]
	bool CanSpawnDustLandFX?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330e, Size: 1]
	Rotator RunWalkParticleRotation;//[Offset: 0x3310, Size: 12]
	bool IsNinjaInShadowStance?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331c, Size: 1]
	GameplayTagContainer GameplayTagsForHitByHuskMeleeSound;//[Offset: 0x3320, Size: 32]
	MaterialInterface* Shield Material;//[Offset: 0x3340, Size: 8]
	MaterialInstanceDynamic*[] BodyShieldMIDArray;//[Offset: 0x3348, Size: 16]
	MaterialInstanceDynamic*[] HeadShieldMIDArray;//[Offset: 0x3358, Size: 16]
	bool Shield Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3368, Size: 1]
	SoundBase* Sound_Shield_Impact;//[Offset: 0x3370, Size: 8]
	SoundBase* Sound_Shield_Destroyed;//[Offset: 0x3378, Size: 8]
	SoundBase* Sound_Shield_FullyCharged;//[Offset: 0x3380, Size: 8]
	float Shield Shatter Opacity;//[Offset: 0x3388, Size: 4]
	float Regen Opacity;//[Offset: 0x338c, Size: 4]
	float Damage Opacity;//[Offset: 0x3390, Size: 4]
	float Default Shield opacity;//[Offset: 0x3394, Size: 4]
	float Shield_PushMinValue;//[Offset: 0x3398, Size: 4]
	bool ShieldVisible_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339c, Size: 1]
	bool ShieldVisible_Recover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339d, Size: 1]
	bool ShieldVisible_Shatter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339e, Size: 1]
	bool ShieldVisible_FullHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339f, Size: 1]
	float Fully Regened Shield health Opacity;//[Offset: 0x33a0, Size: 4]
	GameplayTagContainer TC_GameplayCueDamageShielded;//[Offset: 0x33a8, Size: 32]
	bool LatestDamageIsShieldDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c8, Size: 1]
	float Damage_Taken;//[Offset: 0x33cc, Size: 4]
	float Last_Shield_Damage_Time;//[Offset: 0x33d0, Size: 4]
	MaterialInstanceDynamic*[] CharmShieldMIDArray;//[Offset: 0x33d8, Size: 16]
	bool BodyValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e8, Size: 1]
	bool BackpackValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e9, Size: 1]
	bool HatValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ea, Size: 1]
	bool FaceValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33eb, Size: 1]
	bool CharmValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ec, Size: 1]
	bool HeadValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ed, Size: 1]
	bool On_Player_Built_Floor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ee, Size: 1]
	GameplayTag Event_NeedRoadsActive;//[Offset: 0x33f0, Size: 8]
	GameplayTag Event_NeedRoadsDeactive;//[Offset: 0x33f8, Size: 8]
	GameplayTagContainer TC_WhereWereGoingWeNeedRoads;//[Offset: 0x3400, Size: 32]
	ParticleSystem* Effect_Player_LandedDust;//[Offset: 0x3420, Size: 8]
	SkeletalMeshComponent* Shield_BodySkeletalMesh;//[Offset: 0x3428, Size: 8]
	SkeletalMeshComponent* Shield_HeadSkeletalMesh;//[Offset: 0x3430, Size: 8]
	SkeletalMeshComponent* Shield_CharmSkeletalMesh;//[Offset: 0x3438, Size: 8]
	SceneComponent* Sound Player Hit;//[Offset: 0x3440, Size: 8]
	ForceFeedbackEffect* DamageForceFeedback;//[Offset: 0x3448, Size: 8]
	ParticleSystem* Effect_Player_Landed_WindVector_P;//[Offset: 0x3450, Size: 8]
	class UserWidget* SpeechBubbleWidgetClass;//[Offset: 0x3458, Size: 8]
	FText LastSpeechText;//[Offset: 0x3460, Size: 24]
	class MatineeCameraShake* DamageCameraShake;//[Offset: 0x3478, Size: 8]
	bool UseAnimTrailsNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3480, Size: 1]
	Vector StableVelocityVector;//[Offset: 0x3484, Size: 12]
	bool TickWaterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3490, Size: 1]
	TextureRenderTarget2D* WetnessDepthTexture;//[Offset: 0x3498, Size: 8]
	MaterialInstanceDynamic* WaterLevelMID;//[Offset: 0x34a0, Size: 8]
	MaterialInstanceDynamic* WaterDecayMID;//[Offset: 0x34a8, Size: 8]
	bool Was RTT Enabled Var Set;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b0, Size: 1]
	bool Is the Wind/Water Scene Capture Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b1, Size: 1]
	Actor* CachedEffect;//[Offset: 0x34b8, Size: 8]
	MaterialInstanceDynamic*[] WaterInteractionWakeMIDS;//[Offset: 0x34c0, Size: 16]
	LinearColor WaterTraceImpactNormalAndZHeightLocation;//[Offset: 0x34d0, Size: 16]
	Vector PlayerVelocity;//[Offset: 0x34e0, Size: 12]
	bool EnableRunWalkWaterGroundFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34ec, Size: 1]
	MaterialInstanceDynamic*[] Previous MID;//[Offset: 0x34f0, Size: 16]
	MaterialInstanceDynamic*[] Previous Weapon MID;//[Offset: 0x3500, Size: 16]
	SkeletalMeshComponent* DuplicateCharacterMesh;//[Offset: 0x3510, Size: 8]
	MaterialInstanceDynamic*[] Previous Head MID;//[Offset: 0x3518, Size: 16]
	MaterialInstanceDynamic*[] Previous Body MID;//[Offset: 0x3528, Size: 16]
	MaterialInstanceDynamic*[] Previous Hat MID;//[Offset: 0x3538, Size: 16]
	MaterialInstanceDynamic*[] Previous Backpack MID;//[Offset: 0x3548, Size: 16]
	MaterialInstanceDynamic*[] Previous Charm MID;//[Offset: 0x3558, Size: 16]
	MaterialInstanceDynamic*[] Previous Face MID;//[Offset: 0x3568, Size: 16]
	MulticastInlineDelegateProperty SwingRight;//[Size: 16]
	MulticastInlineDelegateProperty SwingRightEnd;//[Size: 16]
	MulticastInlineDelegateProperty SwingLeft;//[Size: 16]
	MulticastInlineDelegateProperty SwingLeftEnd;//[Size: 16]
	MulticastInlineDelegateProperty AnimNotify_Begin;//[Size: 16]
	MulticastInlineDelegateProperty AnimNotify_End;//[Size: 16]
	FXSystemComponent* OverrideAnimTrail;//[Offset: 0x35d8, Size: 8]
	MulticastInlineDelegateProperty SwingRight2;//[Size: 16]
	MulticastInlineDelegateProperty SwingLeft2;//[Size: 16]
	FXSystemComponent* AnimTrailFx;//[Offset: 0x3600, Size: 8]
	bool BlockedByPawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3608, Size: 1]
	GameplayAttribute Attribute CurrentShield Const;//[Offset: 0x3610, Size: 56]
	GameplayAttribute Attribute Shield Const;//[Offset: 0x3648, Size: 56]
	GameplayAttribute Attribute CurrentHealth Const;//[Offset: 0x3680, Size: 56]
	GameplayAttribute Attribute Max Health Const;//[Offset: 0x36b8, Size: 56]
	CameraLensInterfaceClassSupport LensEffectInterfaceClass_PlayerHealthDamage;//[Offset: 0x36f0, Size: 8]
	CameraLensInterfaceClassSupport LensEffectInterfaceClass_PlayerShieldDamage;//[Offset: 0x36f8, Size: 8]
	CameraLensInterfaceClassSupport LensEffectInterfaceClass_Directional_PlayerShieldDamage;//[Offset: 0x3700, Size: 8]
	CameraLensInterfaceClassSupport LensEffectInterfaceClass_Directional_PlayerHealthDamage;//[Offset: 0x3708, Size: 8]
	void Melee_Effect_Color(out Vector Melee_Color_Set);// 0xbbc0600
	float GetHealthPercent2(AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, bool CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute, float CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue, bool CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute, float CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0xbbc0600
	float GetShieldPercent2(AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, bool CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute, float CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue, bool CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute, float CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0xbbc0600
	void OnRep_BlockedByPawns(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte K2Node_Select_Default);// 0xbbc0600
	void PlayHitSound(FortPawn* Instigator, Actor* Damage Causer, Actor* HitSource, SoundBase* HitSound, bool Temp_bool_Variable, interface class K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface, bool K2Node_DynamicCast_bSuccess, interface class K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, bool CallFunc_HasAnyMatchingGameplayTags_ReturnValue, bool Temp_bool_Variable, SoundBase* K2Node_Select_Default, SoundBase* K2Node_Select_Default, bool CallFunc_HasAnyMatchingGameplayTags_ReturnValue, bool Temp_bool_Variable, SoundBase* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void EnableWaterAudio(bool IsEnteringWater, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, bool Temp_bool_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SoundBase* K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, SoundBase* K2Node_Select_Default);// 0xbbc0600
	void Set Body Type Sounds(byte CallFunc_GetCharacterBodyType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xbbc0600
	void Set Scalar Parameter on Duplicate Mesh MIDs(FName Parameter Name, float Parameter Value, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void Set Scalar Parameter on Character MIDs(FName Parameter Name, float Parameter Value, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void Restore Previous Materials on Weapons Mesh(FortWeapon* Weapon to Restore, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void Restore Previous Materials on Character Mesh(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int Temp_int_Loop_Counter_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMIDForSkeletalMeshComponent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xbbc0600
	void Override Materials and Copy Parameters on Weapons Mesh(MaterialInterface* Material to Apply, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void TriggerGameplayWindEmitter(byte Player Wind Particle Emitter To Fire, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Are the wind and water RTT passes enabled(out bool NewParam, float CallFunc_GetScalarParameterValue_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xbbc0600
	void DisableWaterLevelTick();// 0xbbc0600
	void OnRep_On_Player_Built_Floor(GameplayEventData K2Node_MakeStruct_GameplayEventData);// 0xbbc0600
	void Setup FX Mesh Duplicates(out MaterialInterface* Material to Apply, out MaterialInstanceDynamic*[] Charm MID Array, out SkeletalMeshComponent* Charm Mesh, out MaterialInstanceDynamic*[] Head MID Array, out SkeletalMeshComponent* Head Mesh, out MaterialInstanceDynamic*[] Body MID Array, out SkeletalMeshComponent* Body Mesh, int Translucent Sort Order, bool Transfer Material Parameters, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SkeletalMaterial[] CallFunc_GetMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SkeletalMaterial[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SkeletalMaterial[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool Temp_bool_Variable, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool Temp_bool_Variable, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Array_LastIndex_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Min_ReturnValue, int K2Node_Select_Default, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Min_ReturnValue, int K2Node_Select_Default, bool CallFunc_LessEqual_IntInt_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Min_ReturnValue, int K2Node_Select_Default, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0xbbc0600
	void Create and Duplicate Effect Poseable Skeletal Mesh(byte BodyType, MaterialInterface* Material to Apply, out MaterialInstanceDynamic*[] Empty MID Array, int TranslucentSortPriority, out PoseableMeshComponent* PoseableMesh, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, SceneComponent* K2Node_Select_Default, Transform CallFunc_GetRelativeTransform_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, const Transform Temp_struct_Variable, bool Temp_bool_Variable, PoseableMeshComponent* CallFunc_AddComponent_ReturnValue, SkinnedMeshComponent* K2Node_Select_Default);// 0xbbc0600
	void ToggleShieldVisibility(const Transform Temp_struct_Variable, const Transform Temp_struct_Variable, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, const Transform Temp_struct_Variable, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xbbc0600
	void SlaveAMeshToTheBody(SkeletalMeshComponent* Mesh, SkeletalMeshComponent* Master, SkinnedMeshComponent* MasterToUse, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_GetRelativeTransform_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult);// 0xbbc0600
	void SetShieldMids_InternalLoop(float Highlight Cracks, bool Set Highlight Cracks, float Push, bool Set Push, out MaterialInstanceDynamic*[] NewParam1, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item);// 0xbbc0600
	void SetShieldMids(float Highlight Cracks, bool Set Highlight Cracks, float Push, bool Set Push);// 0xbbc0600
	void FindShieldOpacity(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0xbbc0600
	void Create and Duplicate Effect Skeletal Meshes Parent(byte BodyType, out SkeletalMeshComponent* DuplicatedSkeletalMeshComponent, MaterialInterface* Material to Apply, out MaterialInstanceDynamic*[] Empty MID Array, int TranslucentSortPriority, int CallFunc_Array_LastIndex_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, SceneComponent* K2Node_Select_Default, Transform CallFunc_GetRelativeTransform_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, const Transform Temp_struct_Variable, bool Temp_bool_Variable, SkeletalMeshComponent* CallFunc_AddComponent_ReturnValue, SkeletalMeshComponent* K2Node_Select_Default, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0xbbc0600
	void UserConstructionScript(SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_Are_the_wind_and_water_RTT_passes_enabled_NewParam, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0xbbc0600
	void ShatterShield__FinishedFunc();// 0xbbc0600
	void ShatterShield__UpdateFunc();// 0xbbc0600
	void OnDamagePlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void OnLanded(out const HitResult Hit);// 0xbbc0600
	void OnWeaponEquipped(FortWeapon* NewWeapon, FortWeapon* PrevWeapon);// 0xbbc0600
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void FootStepLeft();// 0xbbc0600
	void FootStepRight();// 0xbbc0600
	void OnCharacterPartsReinitialized();// 0xbbc0600
	void GameplayCue.Abilities.Activation.Generic.HarvestBuff.Tier1(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Abilities.Activation.Generic.HarvestBuff.Tier2(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void SetFirstPersonCamera(bool bNewUseFirstPersonCamera);// 0xbbc0600
	void InternalSetFirstPersonCamera(bool NewUseFirstPersonCamera);// 0xbbc0600
	void OnBaseChanged(Actor* NewBase);// 0xbbc0600
	void ReceivePossessed(Controller* NewController);// 0xbbc0600
	void OnDisplaySentence(out const FText SpeechText);// 0xbbc0600
	void OnClearSentence();// 0xbbc0600
	void ClientBindWeaponSwap(FortWeapon* NewWeapon, FortWeapon* PrevWeapon);// 0xbbc0600
	void BindWeaponSwap(float InDuration);// 0xbbc0600
	void MultiSwapWeapon(FortWeapon* New, FortWeapon* Prev);// 0xbbc0600
	void UnBindWeaponSwap();// 0xbbc0600
	void MultiEndSwap(FortWeapon* CurrentWeapon);// 0xbbc0600
	void OnDeathServer(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void PlayGameplayWindEffect(byte Player Wind Particle Emitter To Fire);// 0xbbc0600
	void Exited/Entered Water Volume();// 0xbbc0600
	void Player Creates a Splash(out const Transform NewTransform);// 0xbbc0600
	void ReinitializeWeaponMaterials();// 0xbbc0600
	void OnDeathPlayEffects(float Damage, out const GameplayTagContainer DamageTags, Vector Momentum, out const HitResult HitInfo, FortPawn* InstigatedBy, Actor* DamageCauser, GameplayEffectContextHandle EffectContext);// 0xbbc0600
	void GameplayCue.Shield.FullyCharged(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Damage.Shielded(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Shield.Destroyed(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void GameplayCue.Damage(byte EventType, out const GameplayCueParameters Parameters);// 0xbbc0600
	void OnEnteredVehicle();// 0xbbc0600
	void OnExitedVehicle();// 0xbbc0600
	void MeleeSwingLeft(bool First Left);// 0xbbc0600
	void MeleeSwingRight(bool First Right);// 0xbbc0600
	void MeleeSwingLeft_End();// 0xbbc0600
	void MeleeSwingRight_End();// 0xbbc0600
	void OnEnteredWaterVolume();// 0xbbc0600
	void OnExitedWaterVolume();// 0xbbc0600
	void SetBlockedByPawns(bool bLocked);// 0xbbc0600
	void OnLand_CE();// 0xbbc0600
	void AnimTrailsDisable();// 0xbbc0600
	void AnimTrailsSetup(ParticleSystem* ParticleSystemReference, NiagaraSystem* NiagaraSystemReference, FName FirstSocketName, FName SecondSocketName, float Width, FXSystemComponent* OverrideParticleComp, FName OverideFirstSocketName, FName OverideSecondSocketName);// 0xbbc0600
	void AnimTrailsNotify(bool bActive);// 0xbbc0600
	void ExecuteUbergraph_PlayerPawn_Generic(int EntryPoint, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic*[] K2Node_MakeArray_Array, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, bool CallFunc_HasAuthority_ReturnValue, Canvas* CallFunc_BeginDrawCanvasToRenderTarget_Canvas, Vector2D CallFunc_BeginDrawCanvasToRenderTarget_Size, DrawToRenderTargetContext CallFunc_BeginDrawCanvasToRenderTarget_Context, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, FortWindManager* CallFunc_GetWindManager_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int Temp_int_Array_Index_Variable, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_Less_FloatFloat_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInstanceDynamic*[] K2Node_MakeArray_Array, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsValid_ReturnValue, FName Temp_name_Variable, FName Temp_name_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, FName Temp_name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FName Temp_name_Variable, int Temp_int_Variable, float CallFunc_MakeLiteralFloat_ReturnValue, MaterialInterface*[] K2Node_MakeArray_Array, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsMovingOnGround_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const Actor*[] Temp_object_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, FortPawn* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, const HitResult K2Node_Event_Hit, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, Rotator CallFunc_MakeRotFromX_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, FortWeapon* K2Node_Event_NewWeapon, FortWeapon* K2Node_Event_PrevWeapon, float CallFunc_RandomFloatInRange_ReturnValue, float K2Node_Event_DeltaSeconds, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_Event_bNewUseFirstPersonCamera, B_Ranged_Generic_C* K2Node_DynamicCast_AsB_Ranged_Generic, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, FortWeap_BuildingToolBase* K2Node_DynamicCast_AsFort_Weap_Building_Tool_Base, bool K2Node_DynamicCast_bSuccess, FortWeap_BuildingToolBase* K2Node_DynamicCast_AsFort_Weap_Building_Tool_Base, bool K2Node_DynamicCast_bSuccess, StaticMeshComponent* CallFunc_GetPencilMeshComponent_ReturnValue, StaticMeshComponent* CallFunc_GetPencilMeshComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerControlled_ReturnValue, bool CallFunc_IsUsingFirstPersonCamera_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, bool K2Node_CustomEvent_NewUseFirstPersonCamera, int CallFunc_Round_ReturnValue, bool CallFunc_IsWeaponHolstered_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Actor* K2Node_Event_NewBase, BuildingSMActor* K2Node_DynamicCast_AsBuilding_SMActor, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerBuilt_ReturnValue, Controller* K2Node_Event_NewController, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, const FText K2Node_Event_SpeechText, interface class CallFunc_HasAllMatchingGameplayTags_TagContainerInterface_CastInput, bool CallFunc_HasAllMatchingGameplayTags_ReturnValue, FortPlayerController*[] CallFunc_GetLocalFortPlayerControllers_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FortPlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FortPlayerPawn* CallFunc_GetPlayerPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool Temp_bool_True_if_break_was_hit_Variable, Rotator CallFunc_ComposeRotators_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* Temp_object_Variable, FortWeapon* K2Node_CustomEvent_NewWeapon, FortWeapon* K2Node_CustomEvent_PrevWeapon, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float K2Node_CustomEvent_InDuration, FortWeapon* K2Node_CustomEvent_New, FortWeapon* K2Node_CustomEvent_Prev, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortWeapon* K2Node_CustomEvent_CurrentWeapon, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, AnimMontage* Temp_object_Variable, UserWidget* CallFunc_Create_ReturnValue, interface class K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, AnimMontage* Temp_object_Variable, FortWindManager* CallFunc_GetWindManager_ReturnValue, WindManager_C* K2Node_DynamicCast_AsWind_Manager, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimer_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_Player_Wind_Particle_Emitter_To_Fire, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_BooleanOR_ReturnValue, const Transform K2Node_Event_NewTransform, HitResult CallFunc_K2_SetWorldTransform_SweepHitResult, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_Array_Add_ReturnValue, float K2Node_Event_Damage, const GameplayTagContainer K2Node_Event_DamageTags, Vector K2Node_Event_Momentum, const HitResult K2Node_Event_HitInfo, FortPawn* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, GameplayEffectContextHandle K2Node_Event_EffectContext, bool CallFunc_IsDBNO_ReturnValue, bool CallFunc_IsSkydiving_ReturnValue, AnimMontage* K2Node_Select_Default, bool CallFunc_ShouldPlayDeathAnimation_ReturnValue, AnimMontage* K2Node_Select_Default, float CallFunc_PlayLocalAnimMontage_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_SwitchEnum_CmpSuccess, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_GameplayCueEvent_EventType, const GameplayCueParameters K2Node_GameplayCueEvent_Parameters, bool K2Node_Event_First_Left, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_First_Right, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_K2_GetComponentLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FortGameState* K2Node_DynamicCast_AsFort_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_DBNOEnabledForGameMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, DuplicateResOutMesh_C* CallFunc_FinishSpawningActor_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool K2Node_CustomEvent_Blocked, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Vector CallFunc_GetVelocity_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Rotator CallFunc_MakeRotFromX_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, MaterialInterface* CallFunc_GetMaterial_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, Vector CallFunc_Cross_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, int CallFunc_Round_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_GetScalarParameterValue_ReturnValue, int CallFunc_Round_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int K2Node_Select_Default, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, const CameraLensInterfaceClassSupport K2Node_Select_Default, class Actor CallFunc_GetInterfaceClass_ReturnValue, interface class CallFunc_SpawnGenericCameraLensEffect_ReturnValue, Object* CallFunc_Conv_InterfaceToObject_ReturnValue, float CallFunc_GetHealthPercent2_ReturnValue, B_PlayerShieldDamage_CameraLensEffect_C* K2Node_DynamicCast_AsB_Player_Shield_Damage_Camera_Lens_Effect, bool K2Node_DynamicCast_bSuccess, B_PlayerHealthDamage_CameraLensEffect_C* K2Node_DynamicCast_AsB_Player_Health_Damage_Camera_Lens_Effect, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetShieldPercent2_ReturnValue, int Temp_int_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, interface class CallFunc_HasMatchingGameplayTag_self_CastInput, bool CallFunc_HasMatchingGameplayTag_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, interface class CallFunc_HasMatchingGameplayTag_self_CastInput, bool CallFunc_HasMatchingGameplayTag_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult, bool Temp_bool_IsClosed_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_Not_PreBool_ReturnValue, CameraLensInterfaceClassSupport K2Node_Select_Default, class Actor CallFunc_GetInterfaceClass_ReturnValue, interface class CallFunc_SpawnGenericCameraLensEffectDirectional_ReturnValue, bool CallFunc_HasAnyTags_ReturnValue, int CallFunc_RandomInteger_ReturnValue, FName K2Node_Select_Default, Controller* CallFunc_GetController_ReturnValue, float CallFunc_PlayLocalAnimMontage_ReturnValue, FortPlayerController* K2Node_DynamicCast_AsFort_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsLocalPlayerController_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsValid_ReturnValue, ParticleSystem* K2Node_Event_ParticleSystemReference, NiagaraSystem* K2Node_Event_NiagaraSystemReference, FName K2Node_Event_FirstSocketName, FName K2Node_Event_SecondSocketName, float K2Node_Event_Width, FXSystemComponent* K2Node_Event_OverrideParticleComp, FName K2Node_Event_OverideFirstSocketName, FName K2Node_Event_OverideSecondSocketName, bool CallFunc_IsValid_ReturnValue, FXSystemAsset* CallFunc_GetFXSystemAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_SetAssetOrSpawnAltFXAttached_ReturnValue, bool K2Node_Event_bActive, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xbbc0600
	void SwingLeft2__DelegateSignature();// 0xbbc0600
	void SwingRight2__DelegateSignature();// 0xbbc0600
	void AnimNotify_End__DelegateSignature();// 0xbbc0600
	void AnimNotify_Begin__DelegateSignature(bool bActive);// 0xbbc0600
	void SwingLeftEnd__DelegateSignature();// 0xbbc0600
	void SwingLeft__DelegateSignature();// 0xbbc0600
	void SwingRightEnd__DelegateSignature();// 0xbbc0600
	void SwingRight__DelegateSignature();// 0xbbc0600

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x461, Size: 1]
	enum TimingPolicy;//[Offset: 0x462, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x468, Size: 8]
	IntPoint DrawSize;//[Offset: 0x470, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	float RedrawTime;//[Offset: 0x47c, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x488, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	Vector2D Pivot;//[Offset: 0x494, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 1]
	enum WindowVisibility;//[Offset: 0x49e, Size: 1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x4a0, Size: 8]
	LinearColor BackgroundColor;//[Offset: 0x4a8, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x4b8, Size: 16]
	float OpacityFromTexture;//[Offset: 0x4c8, Size: 4]
	enum BlendMode;//[Offset: 0x4cc, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x4d0, Size: 8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4d8, Size: 8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4e0, Size: 8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x4e8, Size: 8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x4f0, Size: 8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x4f8, Size: 8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x500, Size: 8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x508, Size: 8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x510, Size: 8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	FName SharedLayerName;//[Offset: 0x51c, Size: 8]
	int LayerZOrder;//[Offset: 0x524, Size: 4]
	enum GeometryMode;//[Offset: 0x528, Size: 1]
	float CylinderArcAngle;//[Offset: 0x52c, Size: 4]
	enum TickMode;//[Offset: 0x530, Size: 1]
	UserWidget* Widget;//[Offset: 0x558, Size: 8]
	void SetWindowVisibility(enum InVisibility);// 0xa7e7b50
	void SetWindowFocusable(bool bInWindowFocusable);// 0xa7e7c14
	void SetWidgetSpace(enum NewSpace);// 0xa7e7e60
	void SetWidget(UserWidget* Widget);// 0xa7e874c
	void SetTwoSided(const bool bWantTwoSided);// 0xa7e8394
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0xa7e817c
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0xa7e82cc
	void SetTickMode(enum InTickMode);// 0xa7e7aa8
	void SetRedrawTime(float InRedrawTime);// 0xa7e7f20
	void SetPivot(out const Vector2D InPivot);// 0xa7e80a8
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0xa7e86a4
	void SetManuallyRedraw(bool bUseManualRedraw);// 0xa7e85d8
	void SetGeometryMode(enum InGeometryMode);// 0xa7e7da0
	void SetDrawSize(Vector2D Size);// 0xa7e8498
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0xa7e7fe0
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0xa7e7ce0
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0xa7e8224
	void RequestRenderUpdate();// 0xa7e8460
	void RequestRedraw();// 0xa7e847c
	bool IsWidgetVisible();// 0xa7e7a70
	enum GetWindowVisiblility();// 0xa7e7bf8
	bool GetWindowFocusable();// 0xa7e7cc4
	enum GetWidgetSpace();// 0xa7e7f04
	UserWidget* GetWidget();// 0xa7e87fc
	UserWidget* GetUserWidgetObject();// 0xa7e12f4
	bool GetTwoSided();// 0xa7e8444
	bool GetTickWhenOffscreen();// 0xa7e8378
	TextureRenderTarget2D* GetRenderTarget();// 0xa7e886c
	float GetRedrawTime();// 0xa7e7fc4
	Vector2D GetPivot();// 0xa7e815c
	LocalPlayer* GetOwnerPlayer();// 0xa7e85a4
	MaterialInstanceDynamic* GetMaterialInstance();// 0xa7e8838
	bool GetManuallyRedraw();// 0xa7e8688
	enum GetGeometryMode();// 0xa7e7e44
	Vector2D GetDrawSize();// 0xa7e8570
	bool GetDrawAtDesiredSize();// 0xa7e808c
	float GetCylinderArcAngle();// 0xa7e7d84
	Vector2D GetCurrentDrawSize();// 0xa7e853c

--------------------------------
Class: CameraLensInterfaceClassSupport
	class Actor* Class;//[Offset: 0x0, Size: 8]

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 8]

--------------------------------
Class: FortWeap_BuildingToolBase.FortWeapon.Actor.Object
	StaticMeshComponent* PencilMeshComponent;//[Offset: 0xd98, Size: 8]
	FName BlueprintPaperSocket;//[Offset: 0xda0, Size: 8]
	FName BlueprintPencilSocket;//[Offset: 0xda8, Size: 8]
	FortPlayerController* InstigatorController;//[Offset: 0xdb0, Size: 8]
	FortAthenaAIBotController* InstigatorBotController;//[Offset: 0xdb8, Size: 8]
	StaticMeshComponent* GetPencilMeshComponent();// 0xd21b264

--------------------------------
Class: B_PlayerShieldDamage_CameraLensEffect_C.B_PlayerHealthDamage_CameraLensEffect_C.EmitterCameraLensEffectBase.Emitter.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 8]
	void PassParticle_Parameter_Shield(float NewParam);// 0xbbc0600
	void ExecuteUbergraph_B_PlayerShieldDamage_CameraLensEffect(int EntryPoint, float K2Node_CustomEvent_NewParam, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_PlayerHealthDamage_CameraLensEffect_C.EmitterCameraLensEffectBase.Emitter.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 8]
	void PassParticle_Parameter(float NewParam, bool First_Hit);// 0xbbc0600
	void ExecuteUbergraph_B_PlayerHealthDamage_CameraLensEffect(int EntryPoint, float K2Node_CustomEvent_NewParam, bool K2Node_CustomEvent_First_Hit, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortAsyncAction_CosmeticAdaptiveStatWatcher.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnStatChanged;//[Size: 16]
	FortPlayerPawn* MyPawn;//[Offset: 0x40, Size: 8]
	static FortAsyncAction_CosmeticAdaptiveStatWatcher* WatchCosmeticStat(FortPlayerPawn* Pawn, FortStatManagerTag StatTag, int DefaultValue);// 0xb6156c0
	void OnWatchedStatChanged__DelegateSignature(FName StatName, int StatValue);// 0xbbc0600

--------------------------------
Class: GCN_RezIn_C.FortGameplayCueNotify_BurstLatent.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x450, Size: 8]
	float TFX_ResOutCharacterMesh_LightIntensity_81C5527F43A6972D94623590BA582E8C;//[Offset: 0x458, Size: 4]
	float TFX_ResOutCharacterMesh_ZHeightParam_81C5527F43A6972D94623590BA582E8C;//[Offset: 0x45c, Size: 4]
	float TFX_ResOutCharacterMesh_TransitionParam_81C5527F43A6972D94623590BA582E8C;//[Offset: 0x460, Size: 4]
	byte TFX_ResOutCharacterMesh__Direction_81C5527F43A6972D94623590BA582E8C;//[Offset: 0x464, Size: 1]
	TimelineComponent* TFX_ResOutCharacterMesh;//[Offset: 0x468, Size: 8]
	float TFX_GlowCharacterMesh_EmissiveWarp_9EA15145493A8F1A5915938D5529A028;//[Offset: 0x470, Size: 4]
	byte TFX_GlowCharacterMesh__Direction_9EA15145493A8F1A5915938D5529A028;//[Offset: 0x474, Size: 1]
	TimelineComponent* TFX_GlowCharacterMesh;//[Offset: 0x478, Size: 8]
	bool DEBUG_ANIMATION;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool SpawnDrone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	class BP_TeleportationDrone_C* Teleportation Drone;//[Offset: 0x488, Size: 8]
	float Teleport_Bot_AnimPlayRate;//[Offset: 0x490, Size: 4]
	float Teleport Bot Lifespan;//[Offset: 0x494, Size: 4]
	PointLightComponent* Teleportation Point Light;//[Offset: 0x498, Size: 8]
	Vector Teleportation Light Offset;//[Offset: 0x4a0, Size: 12]
	LinearColor Teleportation Light Color;//[Offset: 0x4ac, Size: 16]
	MaterialInstanceDynamic*[] DissolveMIDs;//[Offset: 0x4c0, Size: 16]
	MaterialInterface* Mat Chracter Dissolve;//[Offset: 0x4d0, Size: 8]
	PlayerPawn_Athena_C* Pawn;//[Offset: 0x4d8, Size: 8]
	<SkeletalMeshComponent*> Dissolve;//[Offset: 0x4e0, Size: 80]
	FName Socket Mesh Top;//[Offset: 0x530, Size: 8]
	float Max Light Intensity;//[Offset: 0x538, Size: 4]
	FName Socket Mesh Bottom;//[Offset: 0x53c, Size: 8]
	SkeletalMeshComponent*[] Meshes to Dissolve;//[Offset: 0x548, Size: 16]
	BP_TeleportationDrone_C* Drone;//[Offset: 0x558, Size: 8]
	bool DEBUG_CHILDCOMPONENTS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	FXSystemComponent*[] Particle Components;//[Offset: 0x568, Size: 16]
	NiagaraComponent* Spawned Teleport VFX;//[Offset: 0x578, Size: 8]
	NiagaraSystem* Teleport In Visual Effect;//[Offset: 0x580, Size: 8]
	FName Teleport In VFX Attach Point Name;//[Offset: 0x588, Size: 8]
	int Cur Dissolve Setup Attempt;//[Offset: 0x590, Size: 4]
	int AmountOfTimesToAttemptRestoreMats;//[Offset: 0x594, Size: 4]
	bool Spawn VFX Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	float Dissolve Timeline Playrate;//[Offset: 0x59c, Size: 4]
	float Glow Timeline Playrate;//[Offset: 0x5a0, Size: 4]
	NiagaraSystem* Drone Visual Effect;//[Offset: 0x5a8, Size: 8]
	bool DEBUG_TESTJANUSFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	FName Drone VFX Attach Point;//[Offset: 0x5b4, Size: 8]
	void Spawn Drone VFX(NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue);// 0xbbc0600
	void Set Timelines' Playrates();// 0xbbc0600
	void Spawn Teleport In VFX(Vector CallFunc_GetSocketLocation_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAtLocation_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue);// 0xbbc0600
	void Restore Character Materials(out bool Fully Completed, int CurrentReplacementIndex, int Itr, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, MaterialInstanceDynamic* Temp_object_Variable, bool Temp_bool_Variable, MaterialInstanceDynamic* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MaterialInstanceDynamic* K2Node_Select_Default, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, SkeletalMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbbc0600
	void Clean-Up Teleportation Light(bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void Spawn Teleportation Light(Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_IsMobilePlatform_ReturnValue, PointLightComponent* CallFunc_AddComponent_ReturnValue);// 0xbbc0600
	void Spawn Teleportation Drone(Transform CallFunc_K2_GetComponentToWorld_ReturnValue, FortGlobalUIContext* CallFunc_GetContext_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsInZone_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, BP_TeleportationDrone_C* CallFunc_FinishSpawningActor_ReturnValue);// 0xbbc0600
	void Stop Looping Audio(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void TFX_GlowCharacterMesh__FinishedFunc();// 0xbbc0600
	void TFX_GlowCharacterMesh__UpdateFunc();// 0xbbc0600
	void TFX_ResOutCharacterMesh__FinishedFunc();// 0xbbc0600
	void TFX_ResOutCharacterMesh__UpdateFunc();// 0xbbc0600
	void OnBurstGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void Pre-Sequence Change();// 0xbbc0600
	void Set Additional Niagara Parameters on Spawned FX(NiagaraComponent* Spawned Teleport In FX);// 0xbbc0600
	void Set Additional Niagara Parameter on Drone FX(NiagaraComponent* Drone FX);// 0xbbc0600
	void ExecuteUbergraph_GCN_RezIn(int EntryPoint, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const FXSystemComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, MatineeCameraShake* K2Node_Event_BurstCameraShakeInstance, DecalActor* K2Node_Event_BurstDecalInstance, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetupDissolveFx_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, NiagaraComponent* K2Node_CustomEvent_Spawned_Teleport_In_FX, NiagaraComponent* K2Node_CustomEvent_Drone_FX, bool CallFunc_Restore_Character_Materials_Fully_Completed, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortGameplayCueNotify_BurstLatent.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	FortBurstEffectData BurstEffectData;//[Offset: 0x310, Size: 248]
	FortGameplayCueSpawnResult BurstResult;//[Offset: 0x408, Size: 64]
	float MaxBurstLatentLifetime;//[Offset: 0x448, Size: 4]
	void OnBurstNiagara(Actor* MyTarget, out const GameplayCueParameters Parameters, out const NiagaraComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnBurstGeneric(Actor* MyTarget, out const GameplayCueParameters Parameters, out const FXSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void OnBurst(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600

--------------------------------
Class: FortGlobalUIContext.FortLocalPlayerSubsystem.LocalPlayerSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty SubGameChanged;//[Size: 16]
	MulticastInlineDelegateProperty PlayerControllerChanged;//[Size: 16]
	bool bShouldSubgameSelectStartOnCampaignUpsell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	MulticastInlineDelegateProperty OnKeybindsChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnInputActionHoldStarted;//[Size: 16]
	MulticastInlineDelegateProperty OnInputActionHoldStopped;//[Size: 16]
	MulticastInlineDelegateProperty OnRefreshHUDForRespawn;//[Size: 16]
	MulticastInlineDelegateProperty OnEnterVehicleDriver;//[Size: 16]
	MulticastInlineDelegateProperty OnEnterVehiclePassenger;//[Size: 16]
	MulticastInlineDelegateProperty OnExitVehicle;//[Size: 16]
	MulticastInlineDelegateProperty OnTetherChanged;//[Size: 16]
	MulticastInlineDelegateProperty DragAndDropStartedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty DragAndDropEndedDelegate;//[Size: 16]
	MulticastInlineDelegateProperty OnScoreReportChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnContextHelpChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnItemReceivedNotificationShown;//[Size: 16]
	MulticastInlineDelegateProperty OnQueryFortBackendVersionComplete;//[Size: 16]
	MulticastInlineDelegateProperty OnLoadingScreenVisibilityChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnLocalPlayerControllerConnectionChanged;//[Size: 16]
	<FName,FortUIMessageManager*> MessageManagersByName;//[Offset: 0x198, Size: 80]
	<enum,FortUIFeatureStruct> Features;//[Offset: 0x1e8, Size: 80]
	AthenaMatchReadyDesktopPopup* AthenaMatchReadyNotificationWidget;//[Offset: 0x378, Size: 8]
	FortHelpItem* ActiveContextSpecificHelpItem;//[Offset: 0x390, Size: 8]
	bool bIsUIVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool bShowRateWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	<enum,bool> IsAllContentInstalledCacheMap;//[Offset: 0x3a0, Size: 80]
	FText FeedbackTitle;//[Offset: 0x3f0, Size: 24]
	DateTime FirstLoginTime;//[Offset: 0x408, Size: 8]
	TimerHandle AddictionMsgTimer;//[Offset: 0x410, Size: 8]
	UniqueNetIdRepl CurrentLocalPlayerUniqueNetId;//[Offset: 0x418, Size: 40]
	bool bQuestMapTabRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	GameplayTag QuestMapChallengeTabRequested;//[Offset: 0x458, Size: 8]
	void UnregisterScriptedActions(class FortScriptedAction[] ScriptedActions);// 0xe04ad28
	void UnregisterScriptedAction(class FortScriptedAction ScriptedAction);// 0xe04ac80
	void UnregisterInputAction(const UserWidget* UserWidget, DataTableRowHandle InputActionRow);// 0xe04ab98
	void UnbindToFeatureState(enum Feature, delegate Delegate);// 0xe04aaa0
	void TriggerUIFeedbackEvent(FName EventName);// 0xe04a9f8
	void TetherChanged(bool bIsTethered);// 0xe04a948
	bool ShowWebURL(FString URL, const enum URLType);// 0xe04a848
	bool ShowVehicleHealthBarOnPlayerHUD();// 0xe04a810
	bool ShowCreativeContentDownloadDialog(out const delegate OnSubGameContentReadyCallback, out const delegate OnSubGameContentCanceledCallback);// 0xe04a6c4
	void ShowConsoleAccountPicker(const int ControllerIndex, out const delegate CompletionDelegate);// 0xe04a5b4
	void ShowBang(enum Type);// 0xe04a50c
	void ShowAthenaMatchReadyExternalNotificationWindow();// 0xe04a4f8
	bool ShouldShowRateWidget();// 0xe04a4dc
	bool ShouldShowPhoenixDisplay();// 0xe04a4a4
	bool ShouldCloseMenuOnEscape();// 0xe04a46c
	void SetSubGame(enum SubGame);// 0xe04a3c4
	void SetRatingWidgetFeedbackTitle(out const FText Title);// 0xe04a2b4
	void SetInputMode(enum InMode);// 0xe04a20c
	void SetHideStwItemRefundHelp(bool bInHideHelp);// 0xe04a15c
	void SetHidePerkRecombobulatorHelp(bool bInHideHelp);// 0xe04a0ac
	void SetCurrentInputPresetName(FString InputPresetName);// 0xe049fb0
	void SetCurrentCustomInputTemplatePresetName(FString InputPresetName);// 0xe049eb4
	void SetCreativeMode(bool IsCreativeMode);// 0xe049e04
	void SetContextHelpItem(FortHelpItem* ContextSpecificHelpItem);// 0xe049d5c
	void SetBangFromCount(enum Type, int Count);// 0xe049c74
	void SendUINavigationAnalytic(FString Destination, bool bUserInitiated);// 0xe049b78
	void SendLeaveZoneAnalytic();// 0xe049b64
	void SendExperienceRatingAnalytic(FString RatingType, FString FeedbackSentBy, out const FText RatingQuestion, out const int StarCount, FString GameSessionId, FString Comment);// 0xe0498c8
	void RunLauncherWithOptions(FString Options);// 0xe049814
	void ReturnToSubGameSelect();// 0xe049800
	void RegisterScriptedActions(class FortScriptedAction[] ScriptedActions);// 0xe049724
	void RegisterScriptedAction(class FortScriptedAction ScriptedAction);// 0xe04967c
	void RegisterInputAction(const UserWidget* UserWidget, DataTableRowHandle InputActionRow, delegate CommitedEvent, int InFilterPriority);// 0xe049504
	void RefreshHUDForRespawn();// 0xe0494f0
	void QuitGame();// 0xe0494dc
	void QueryGameBackendVersion();// 0xe0494c8
	void ProcessConfirmationResult(enum InResult, FName InResultName, out const FortDialogDescription_NUI ConfirmationDescription, bool bWaitingForLatentAction, out FortDialogExternalLatentActionHandle WaitingDialogHandle);// 0xe0492e4
	void OnQueryFortBackendVersionDelegate__DelegateSignature(FortBackendVersion FortBackendVersion);// 0xbbc0600
	void OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature(bool bConnected);// 0xbbc0600
	void OnLoadingScreenVisibilityChangedDelegate__DelegateSignature(bool IsVisible);// 0xbbc0600
	void Logout();// 0xe0492d0
	bool IsUsingGamepad();// 0xe049298
	bool IsUIVisible();// 0xe049260
	bool IsPendingLogout();// 0xe049228
	bool IsMobileApp();// 0xe0491f0
	bool IsInZone();// 0xbac8404
	bool IsInOutpostZone();// 0xe0491b8
	bool IsHUDVisible();// 0xe049180
	bool IsGamepadAttached();// 0xe049148
	bool IsDesktopPlatform();// 0xe049110
	bool IsCustomGamepadConfig(const int ConfigIndex);// 0xe04905c
	bool IsCurrentlyShowingLoadingScreen();// 0xe049024
	bool IsCreativeModeAccessLimited();// 0xe048fec
	bool IsBluGloEnabled();// 0xe048fb4
	bool IsBattleRoyaleMatchmakingEnabled();// 0xe048f7c
	bool IsAllContentInstalled(const enum SubGame);// 0xe048ec8
	void InputActionHoldStopped(FName InputActionName, bool bCompletedSuccessfully);// 0xbac8314
	void InputActionHoldStarted(FName InputActionName, float HoldDuration);// 0xe048de0
	void HideBang(enum Type);// 0xe048d38
	bool HasAccesstoMultipleSubGames();// 0xe048d00
	FName GetUseActionName(const enum OverrideInputType);// 0xe048c50
	FName GetTrapPickerActionName(const enum OverrideInputType);// 0xe048ba0
	FName GetTrapHotbarActionName(const enum OverrideInputType);// 0xe048af0
	FName GetTrapConfirmActionName(const enum OverrideInputType);// 0xe048a40
	void GetTopLevelHelpItems(out FortHelpItem*[] ActiveHelpEntries);// 0xe048980
	FName GetToggleInventoryActionName();// 0xe04894c
	FName GetToggleFullscreenMapActionName();// 0xe048918
	FName GetTargetActionName(const enum OverrideInputType);// 0xe048868
	FName GetSwitchQuickBarActionName(enum OverrideInputType);// 0xe0487b8
	enum GetSubGame();// 0xe048784
	FName GetShoppingCartCoastActionName();// 0xe048750
	FString GetSessionId();// 0xe0486b0
	FString GetSessionConnectString();// 0xe048610
	FortSeasonalEventManager* GetSeasonalEventManager();// 0xe0485dc
	FortUIScoreReport* GetScoreReport();// 0xe0485a8
	FName GetRotatePrimitiveClockwiseActionName(const enum OverrideInputType);// 0xe0484f8
	FortQuestManager* GetQuestManager(enum SubGame);// 0xe048448
	FName GetQuadCrasherBoostActionName(const enum OverrideInputType);// 0xe048398
	int GetPlayerInfiltrationFaction();// 0xe048364
	FText GetPlatformDisplayName();// 0xe048294
	FName GetPickerConfirmActionName(enum PickerMode);// 0xe0481e4
	FName GetPickerCancelActionName(enum PickerMode);// 0xe048134
	FName GetPerformBuildingImprovementInteractionActionName(const enum OverrideInputType);// 0xe048084
	FName GetPerformBuildingEditInteractionActionName(const enum OverrideInputType);// 0xe047fd4
	FName GetOstrichShieldBoostName(const enum OverrideInputType);// 0xe047f24
	FName GetOstrichSelfDestructName(const enum OverrideInputType);// 0xe047e74
	FName GetOstrichSecondaryFireName(const enum OverrideInputType);// 0xe047dc4
	FName GetOstrichPrimaryFireName(const enum OverrideInputType);// 0xe047d14
	FName GetOstrichJumpActionName(const enum OverrideInputType);// 0xe047c64
	FName GetOstrichBoostActionName(const enum OverrideInputType);// 0xe047bb4
	FortUIMessageManager* GetMessageManager(FName ManagerName, out bool bCreatedNew);// 0xe047ab8
	FortUIRewardReport* GetLastMissionRewardReport();// 0xe047a84
	void GetLastMissionInfo(out FortLastMissionInfo LastMissionInfo);// 0xe0478b0
	GameSummaryInfo GetLastGameSummaryInfo();// 0xe047800
	FText GetKeyTextForAxis(FName Axis, const float AxisScale, bool bIsUsingGamepad, bool bUseAbbreviatedText);// 0xe04760c
	FText GetKeyTextForAction(FName Action, out FText ButtonActionType, bool bUseAbbreviatedText);// 0xe0473f4
	Key GetKeyForAxis(FName Axis, const float Scale, const bool bIsUsingGamepad);// 0xe0471d8
	Key GetKeyForAction(FName Action, const bool bForceGamepadKey, FName PresetNameOverride);// 0xe046fb4
	void GetKBMPlayerInputPresetNamesForSubGame(enum SubGame, out FString[] InputPresetNames, out FText[] InputPresetFriendlyNames);// 0xe046e04
	void GetKBMPlayerInputPresetDescriptionForSubGame(enum SubGame, int CurrentPreset, out FText InputPresetDescription, out FText InputPresetSubDescription);// 0xe046bc8
	FName GetJumpActionName();// 0xe046b94
	FName GetJackalUseOrExitActionName(const enum OverrideInputType);// 0xe046ae4
	FName GetJackalJumpActionName(const enum OverrideInputType);// 0xe046a34
	FName GetJackalBoostActionName(const enum OverrideInputType);// 0xe046984
	Texture2D* GetInputTypeIcon(enum InputType);// 0xe0468d4
	int GetInputPriority(enum Priority);// 0xbac8264
	bool GetInputDetailsForAction(FName Action, out FortInputActionDetails InputActionDetails);// 0xe046774
	bool GetInputActionGroup(out const FName ActionName, out enum OutInputActionGroup);// 0xe04665c
	FName GetHoagieBoostName(const enum OverrideInputType);// 0xe0465ac
	bool GetHideStwItemRefundHelp();// 0xe046574
	bool GetHidePerkRecombobulatorHelp();// 0xe04653c
	FName GetHamsterballShootActionName(const enum OverrideInputType);// 0xe04648c
	FName GetHamsterballExtendActionName(const enum OverrideInputType);// 0xe0463dc
	FName GetHamsterballBoostActionName(const enum OverrideInputType);// 0xe04632c
	FName GetGolfCartReverseActionName(const enum OverrideInputType);// 0xe04627c
	FName GetGolfCartForwardActionName(const enum OverrideInputType);// 0xe0461cc
	FName GetGolfCartEBrakeActionName(const enum OverrideInputType);// 0xe04611c
	FName GetGamepadJackalExitActionName(const enum OverrideInputType);// 0xe04606c
	FName GetGadget2ActionName();// 0xe046038
	FName GetGadget1ActionName();// 0xe046004
	FName GetFireActionName();// 0xe045fd0
	FText GetFeedbackTitle();// 0xe045f1c
	FText GetFeatureStateReasonText(const enum Reason);// 0xe045e00
	void GetFeatureState(const enum Feature, out enum OutFeatureState, out enum OutReason);// 0xe045cbc
	FString GetCustomGamepadInputPresetName();// 0xe045c1c
	FString GetCurrentInputPresetName();// 0xe045b7c
	FString GetCurrentCustomInputTemplatePresetName();// 0xe045adc
	FName GetCrouchActionName(const enum OverrideInputType);// 0xe045a2c
	FName GetCreativeToggleInvulnerablityName();// 0xe0459f8
	FName GetCreativeToggleHeatmapName();// 0xe0459c4
	FName GetCreativeToggleGhostName();// 0xe045990
	FName GetCreativeQuickbarActivateClutchName();// 0xe04595c
	FName GetCreativePossessPropActivateName();// 0xe045928
	FName GetCreativeMoveToolMultiSelectName();// 0xe0458f4
	FName GetCreativeMoveToolEquippedGrabOrLetGoName();// 0xe0458c0
	FName GetCreativeMoveToolEquippedDeleteName();// 0xe04588c
	FName GetCreativeMoveToolEquippedCopyGrabOrDuplicateName();// 0xe045858
	FName GetCreativeMoveToolClearMultiSelectName();// 0xe045824
	FName GetCreativeMoveObjectsFreelySwitchAxisName();// 0xe0457f0
	FName GetCreativeMoveObjectsFreelyRotateCounterclockwiseName();// 0xe0457bc
	FName GetCreativeMoveObjectsFreelyRotateClockwiseName();// 0xe045788
	FName GetCreativeMoveObjectsFreelyPushName();// 0xe045754
	FName GetCreativeMoveObjectsFreelyPullName();// 0xe045720
	FName GetCreativeMoveObjectsFreelyLetGoName();// 0xe0456ec
	FName GetCreativeMoveObjectsFreelyExitName();// 0xe0456b8
	FName GetCreativeMoveObjectsFreelyDuplicateName();// 0xe045684
	FName GetCreativeMoveObjectsFreelyDropToFloorName();// 0xe045650
	FName GetCreativeMoveObjectsFreelyChangePrecisionLevelName();// 0xe04561c
	FName GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName();// 0xe0455e8
	FName GetCreativeMoveBuildingsOnGridRotateClockwiseName();// 0xe0455b4
	FName GetCreativeMoveBuildingsOnGridMirrorName();// 0xe045580
	FName GetCreativeMoveBuildingsOnGridLetGoName();// 0xe04554c
	FName GetCreativeMoveBuildingsOnGridExitName();// 0xe045518
	FName GetCreativeMoveBuildingsOnGridDuplicateName();// 0xe0454e4
	FName GetCreativeMoveBuildingsOnGridChangePrecisionLevelName();// 0xe0454b0
	DateTime GetCreativeModeLimitedAccessEndTime();// 0xe04547c
	bool GetCreativeMode();// 0xe045460
	FName GetCreativeIslandPanelToggleDetailsName();// 0xe04542c
	FName GetCreativeIslandPanelSupportAffiliateName();// 0xe0453f8
	FName GetCreativeIslandPanelStartMinigameName();// 0xe0453c4
	FName GetCreativeFlyUpActionName();// 0xe045390
	FName GetCreativeFlyDownActionName();// 0xe04535c
	FText GetConningXpModifierMessage(int TotalSkillPoints, int ContentDifficulty);// 0xe045204
	float GetConningDifficultyXpModifier(int TotalSkillPoints, int ContentDifficulty);// 0xe045118
	FortCollectionBookManager* GetCollectionBookManager();// 0xe0450e4
	FName GetChangeMaterialActionName();// 0xe0450b0
	FName GetCannonShootActionName(const enum OverrideInputType);// 0xe045000
	FName GetCannonCoastActionName(const enum OverrideInputType);// 0xe044f50
	FName GetBuildConfirmActionName(const enum OverrideInputType);// 0xe044ea0
	bool GetBrushForKeyWithCustomInput(Key Key, out SlateBrush Brush, enum InputType, enum GamepadType);// 0xe044b00
	bool GetBrushForKey(Key Key, out SlateBrush Brush);// 0xe0447ec
	FName GetBiplaneTaxiBackwardsName(const enum OverrideInputType);// 0xe04473c
	FName GetBiplaneStopEngineName(const enum OverrideInputType);// 0xe04468c
	FName GetBiplaneStartEngineName(const enum OverrideInputType);// 0xe0445dc
	FName GetBiplaneShootName(const enum OverrideInputType);// 0xe04452c
	FName GetBiplaneRollRightName(const enum OverrideInputType);// 0xe04447c
	FName GetBiplaneRollLeftName(const enum OverrideInputType);// 0xe0443cc
	FName GetBiplaneRollInvertName(const enum OverrideInputType);// 0xe04431c
	FName GetBiplaneFreelookName(const enum OverrideInputType);// 0xe04426c
	FName GetBiplaneBoostName(const enum OverrideInputType);// 0xe0441bc
	FString GetBackendName();// 0xe044148
	FName GetAltInteractionActionName(const enum OverrideInputType);// 0xe044098
	void GetAllPlayerInputPresetNamesForSubGame(enum SubGame, out FString[] InputPresetNames, out FText[] InputPresetFriendlyNames);// 0xe043ee8
	void GetAllPlayerInputPresetNames(out FString[] InputPresetNames, out FText[] InputPresetFriendlyNames);// 0xe043d78
	FName GetActionForKey(const FName PresetName, const Key Key, const enum InputActionGroup, const bool bIsUsingGamepad);// 0xe043b24
	FortGlobalActionDetails GetActionDetails(enum Action, out const FortGlobalActionDetailsFunctionContext Context);// 0xe043a20
	FText GetAccountGameplayRestrictionText();// 0xe043950
	enum GetAccessReason(const enum SubGame);// 0xe0438a0
	FName GetAbility3ActionName();// 0xe04386c
	FName GetAbility2ActionName(const enum OverrideInputType);// 0xe0437bc
	FName GetAbility1ActionName(const enum OverrideInputType);// 0xe04370c
	void ForceSetFeatureState(enum Feature, enum ForcedState, enum Reason);// 0xe0435e4
	void ExitVehicle();// 0xe0435d0
	void EnterVehiclePassenger();// 0xe0435bc
	void EnterVehicleDriver();// 0xe0435a8
	static void DrawAttention(Widget* BaseWidget);// 0xe043510
	void DisplayStateContent(bool bDisplay);// 0xe043460
	void CopyToClipboard(FString ClipboardText);// 0xe0433ac
	float ContentInstallationProgress(const enum SubGame);// 0xe0432fc
	void CloseExternalNotificationWindowIfOpen();// 0xe0432e8
	void ClearSelectionGroup(FName SelectionGroup);// 0xe043240
	void ClearRatingWidgetInfo();// 0xe04322c
	void ClearLastMissionReports();// 0xe043218
	void ClearLastGameSummaryInfo();// 0xe043204
	void ClearForceSetFeatureState(enum Feature);// 0xe04315c
	static void CheckFlag(FString FlagName, out enum OutStatus);// 0xe04306c
	bool CanPlay(enum SubGame, out FText DenialReason);// 0xe042f10
	bool CanMatchmake(enum SubGame, out FText DenialReason);// 0xe042db4
	static void CancelDrawAttention(Widget* BaseWidget);// 0xe042d1c
	void BroadcastItemReceivedNotificationShown(bool IsActive);// 0xe042c64
	void BindToFeatureStateAndInitialize(enum Feature, delegate Delegate);// 0xe042b6c
	bool AllowQuit();// 0xe042b34
	bool AllowLogout();// 0xe042afc

--------------------------------
Class: FortLocalPlayerSubsystem.LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: FortHelpItem.DataAsset.Object
	enum ItemType;//[Offset: 0x30, Size: 1]
	FName ItemId;//[Offset: 0x34, Size: 8]
	FText HeaderName;//[Offset: 0x40, Size: 24]
	FText BodyText;//[Offset: 0x58, Size: 24]
	FortHelpAdditionalContent AdditionalContent;//[Offset: 0x70, Size: 160]
	FortHelpItem*[] GetSubItems();// 0xd029ee0
	FortHelpItem* GetItemWithID(const FName _ItemID);// 0xd029e28

--------------------------------
Class: FortHelpAdditionalContent
	enum ContentLocation;//[Offset: 0x0, Size: 1]
	bool ShowAdditionalImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	SlateBrush ImageToDisplay;//[Offset: 0x8, Size: 136]
	bool ShowAdditionalWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	class UserWidget* WidgetToDisplay;//[Offset: 0x98, Size: 8]

--------------------------------
Class: FortDialogDescription_NUI
	SlateBrush Icon;//[Offset: 0x0, Size: 136]
	FText MessageHeader;//[Offset: 0x88, Size: 24]
	FText MessageBody;//[Offset: 0xa0, Size: 24]
	ConfirmationDialogAction[] ConfirmButtonInputActions;//[Offset: 0xb8, Size: 16]
	FName DeclineButtonInputAction;//[Offset: 0xc8, Size: 8]
	Widget* AdditionalContent;//[Offset: 0xd0, Size: 8]
	Widget* LeftAdditionalContent;//[Offset: 0xd8, Size: 8]
	float DisplayTime;//[Offset: 0xe0, Size: 4]
	bool Dismissable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool Cancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	bool bShouldWaitForLatentActionOnConfirmAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 1]
	FortNotificationHandler* NotificationHandler;//[Offset: 0xe8, Size: 8]
	SoundBase* ShowSound;//[Offset: 0xf0, Size: 8]

--------------------------------
Class: ConfirmationDialogAction
	FText DisplayName;//[Offset: 0x0, Size: 24]
	FName ResultName;//[Offset: 0x18, Size: 8]
	SlateBrush Icon;//[Offset: 0x20, Size: 136]
	FName ActionName;//[Offset: 0xa8, Size: 8]

--------------------------------
Class: FortNotificationHandler.Object
	MulticastInlineDelegateProperty OnNotificationCleared;//[Size: 16]
	bool bNotificationCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	void NotificationShown();// 0xd0f6984
	UserWidget* CreateWidget(PlayerController* OwningPlayer);// 0xbbc0600
	void ClearNotification();// 0xd0f6968

--------------------------------
Class: FortDialogExternalLatentActionHandle
	int Handle;//[Offset: 0x0, Size: 4]

--------------------------------
Class: FortBackendVersion
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString App;//[Offset: 0x8, Size: 16]
	FString ModuleName;//[Offset: 0x18, Size: 16]
	FString Branch;//[Offset: 0x28, Size: 16]
	FString BuildDate;//[Offset: 0x38, Size: 16]
	FString ServerDate;//[Offset: 0x48, Size: 16]
	FString Build;//[Offset: 0x58, Size: 16]
	FString Changelist;//[Offset: 0x68, Size: 16]
	FString OverridePropertiesVersion;//[Offset: 0x78, Size: 16]
	FString Version;//[Offset: 0x88, Size: 16]

--------------------------------
Class: FortSeasonalEventManager.Object
	MulticastInlineDelegateProperty OnActiveEventFlagsChanged;//[Size: 16]
	bool IsEventFlagActive(FString QueriedEventFlagName);// 0xd1ce260
	int GetBRXPBonusPoints();// 0xd1ce224

--------------------------------
Class: FortUIMessageManager.Object
	MulticastInlineDelegateProperty OnMessageAvailable;//[Size: 16]
	FortUIMessageItemWidget*[] MessageQueue;//[Offset: 0x38, Size: 16]
	FortUIMessageItemWidget*[] CurrentlyDisplayedMessages;//[Offset: 0x48, Size: 16]
	void HandleMessageRemoved(FortUIMessageItemWidget* MessageItem);// 0xe10db88
	void HandleMessageDisplayed(FortUIMessageItemWidget* MessageItem);// 0xe10dae0
	int GetNumDisplayedItems();// 0xe10daac
	FortUIMessageItemWidget* GetNextMessageInQueue();// 0xe10da78
	FortUIMessageItemWidget* AddMessageItem(class FortUIMessageItemWidget MessageItemClass, PlayerController* OwningPlayer, FName MessageID, int StackCount);// 0xe10d90c

--------------------------------
Class: FortUIMessageItemWidget.CommonUserWidget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnMessageDisplayed;//[Size: 16]
	MulticastInlineDelegateProperty OnMessageRemoved;//[Size: 16]
	FName MessageID;//[Offset: 0x2a8, Size: 8]
	int StackSize;//[Offset: 0x2b0, Size: 4]
	float DisplayDuration;//[Offset: 0x2b4, Size: 4]
	float RemoveDuration;//[Offset: 0x2b8, Size: 4]
	void OnStackSizeChanged(int OldStackSize);// 0xbbc0600
	void OnReturnedToPool();// 0xbbc0600
	void OnBeginRemove();// 0xbbc0600

--------------------------------
Class: CommonUserWidget.UserWidget.Widget.Visual.Object
	bool bConsumePointerInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	void SetConsumePointerInput(bool bInConsumePointerInput);// 0x7178ea8

--------------------------------
Class: FortUIFeatureStruct
	enum CurrentState;//[Offset: 0x0, Size: 1]
	enum ForcedState;//[Offset: 0x1, Size: 1]
	enum ForcedStateReason;//[Offset: 0x2, Size: 1]
	MulticastInlineDelegateProperty ChangeDelegate;//[Size: 16]

--------------------------------
Class: AthenaMatchReadyDesktopPopup.UserWidget.Widget.Visual.Object
	void UserDismissedDialog(bool bBringToFront);// 0xdfba3d0

--------------------------------
Class: FortUIScoreReport.Object
	FortLocalPlayer* LocalPlayer;//[Offset: 0x28, Size: 8]
	bool IsLocalPlayer(int ScoreReportIndex);// 0xe110c18
	int GetXpToCompleteLevel(int Level);// 0xe110b68
	bool GetXpInfo(int ScoreReportIndex, out FortUIXpInfo OutXpInfo);// 0xe110a5c
	int GetTeamScore(byte ScoreType);// 0xe1109ac
	void GetScoreReportIndicesByPlayerID(out int[] SortedScoreReportIndices);// 0xe1108ec
	int GetScoreReportIndex(out const UniqueNetIdRepl PlayerID);// 0xe11079c
	int GetPlayerScore(int ScoreReportIndex, byte ScoreType);// 0xe1106ac
	FString GetPlayerPlatform(int ScoreReportIndex);// 0xe1105c0
	FText GetPlayerName(int ScoreReportIndex);// 0xe1104a4
	void GetPlayerIDFromScoreReportIndex(int ScoreReportIndex, out UniqueNetIdRepl OutUniqueNetIdRepl);// 0xe110324
	int GetPlayerCount();// 0xe1102f0
	float GetLevelProgress(int Level, int DisplayXp);// 0xe110204
	int GetDifficultBonusScore();// 0xe1101d0
	float GetDifficultBonusMultiplier();// 0xe11019c
	FortPlayerState* GetCurrentPlayerState(int ScoreReportIndex);// 0xe1100ec
	FortPlayerPawn* GetCurrentPlayerPawn(int ScoreReportIndex);// 0xe11003c
	int GetBadgeScore(FortItem* BadgeItem);// 0xe10ff8c

--------------------------------
Class: FortUIXpInfo
	int InitialLevel;//[Offset: 0x0, Size: 4]
	int InitialDisplayXp;//[Offset: 0x4, Size: 4]
	FortExperienceDelta ChangeInXp;//[Offset: 0x8, Size: 36]

--------------------------------
Class: FortLocalPlayer.LocalPlayer.Player.Object
	FortOnlineAccount* FortOnlineAccount;//[Offset: 0x288, Size: 8]
	FortRewardReport CachedRewardReport;//[Offset: 0x2a0, Size: 112]
	FortPlayerScoreReport[] CachedScoreReports;//[Offset: 0x310, Size: 16]
	FortClientSettingsRecord* ClientSettingsRecord;//[Offset: 0x320, Size: 8]
	FortContentControlsManager* ContentControlsManager;//[Offset: 0x328, Size: 8]
	bool bControllerAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	UniqueNetIdRepl PlatformUID;//[Offset: 0x438, Size: 40]
	PlayerReportingInfoContainer PlayerReportingInfoContainer;//[Offset: 0x460, Size: 96]
	FortPoiTracker* PoiTracker;//[Offset: 0x4c0, Size: 8]
	FortGameUserSettings* GetLocalSettings();// 0xd077cd0
	FortContentControlsManager* GetContentControlsManagerEvenIfUninitialized();// 0xd077cb4
	FortContentControlsManager* GetContentControlsManager();// 0xd077c80
	FortClientSettingsRecord* GetClientSettings();// 0xd077c4c

--------------------------------
Class: FortContentControlsManager.Object
	FortLocalPlayer* OwningPlayer;//[Offset: 0x120, Size: 8]
	void SetVoiceChatSettings(enum InSetting);// 0xcf8e6fc
	void SetUserGeneratedContentViewable(FString InValue);// 0xcf8e648
	void SetPurchaseReportingEnabled(bool bInValue);// 0xcf8e59c
	void SetPlaytimeReportingFrequency(FString InValue);// 0xcf8e498
	void SetCanVoiceChatWithUnknowns(bool bInValue);// 0xcf8e3ec
	void SetCanUseVoiceChat(bool bInValue);// 0xcf8e340
	void SetCanUseTextChat(bool bInValue);// 0xcf8e294
	void SetCanSeeThirdPartyNames(bool bInValue);// 0xcf8e1e8
	void SetCanSeeOtherPlayersNames(bool bInValue);// 0xcf8e13c
	void SetCanSeeMatureLanguage(bool bInValue);// 0xcf8e090
	void SetCanReceiveInGameItems(bool bInValue);// 0xcf8dfe4
	void SetCanDisplayMyUserName(bool bInValue);// 0xcf8df38
	void SetCanCastHouseparty(bool bInValue);// 0xcf8de8c
	void SetCanAcceptFriendRequest(bool bInValue);// 0xcf8dde0
	void SetAllowedToMakePurchases(bool bInValue);// 0xcf8dd34
	void SetAllowedToAcquire(bool bInValue);// 0xcf8dc88
	enum GetVoiceChatSettings();// 0xcf8dc54
	FString GetUserGeneratedContentViewable();// 0xcf8dbd0
	bool GetPurchaseReportingEnabled();// 0xcf8dbb4
	FString GetPlaytimeReportingFrequency();// 0xcf8db30
	bool GetCanVoiceChatWithUnknowns();// 0xcf8db14
	bool GetCanUseVoiceChat();// 0xcf8daf8
	bool GetCanUseTextChat();// 0xcf8dadc
	bool GetCanSeeThirdPartyNames();// 0xcf8dac0
	bool GetCanSeeOtherPlayersNames();// 0xcf8daa4
	bool GetCanSeeMatureLanguage();// 0xcf8da88
	bool GetCanReceiveInGameItems();// 0xcf8da6c
	bool GetCanDisplayMyUserName();// 0xcf8da50
	bool GetCanCastHouseparty();// 0xcf8da34
	bool GetCanAcceptFriendRequest();// 0xcf8da18
	bool GetAllowedToMakePurchases();// 0xcf8d9fc
	bool GetAllowedToAcquire();// 0xcf8d9e0

--------------------------------
Class: FortClientSettingsRecord.FortGenericRecord.Object
	FortGamepadUserOptions LocalGamepadUserOptions;//[Offset: 0xf0, Size: 76]
	float HUDScale;//[Offset: 0x2a8, Size: 4]
	float InitialHUDScale;//[Offset: 0x2b0, Size: 4]
	bool bAutoHideBuildingMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	enum ShowPickupDotsOnMapByRarity;//[Offset: 0x2b5, Size: 1]
	FortGamepadUserOptions GamepadUserOptions;//[Offset: 0x2b8, Size: 76]
	Vector2D GamepadLookSensitivity;//[Offset: 0x304, Size: 8]
	float GamepadMoveStickDeadZone;//[Offset: 0x30c, Size: 4]
	float GamepadLookStickDeadZone;//[Offset: 0x310, Size: 4]
	float TargetingSlow;//[Offset: 0x314, Size: 4]
	float ScopedSlow;//[Offset: 0x318, Size: 4]
	float GamepadTargetingSlow;//[Offset: 0x31c, Size: 4]
	float GamepadScopedSlow;//[Offset: 0x320, Size: 4]
	float GamepadBuildingMultiplier;//[Offset: 0x324, Size: 4]
	float GamepadEditModeMultiplier;//[Offset: 0x328, Size: 4]
	float MotionTargetingSlow;//[Offset: 0x32c, Size: 4]
	float MotionScopedSlow;//[Offset: 0x330, Size: 4]
	float MotionHarvestingToolSlow;//[Offset: 0x334, Size: 4]
	float MouseSensitivity;//[Offset: 0x338, Size: 4]
	float MouseSensitivityX;//[Offset: 0x33c, Size: 4]
	float MouseSensitivityY;//[Offset: 0x340, Size: 4]
	float MouseSensitivityMultiplierForAircraftValue;//[Offset: 0x344, Size: 4]
	float InitialMouseSensitivityMultiplierForAircraft;//[Offset: 0x348, Size: 4]
	float TouchLookAccelerationMultiplier;//[Offset: 0x34c, Size: 4]
	float TouchLookSensitivitySetting;//[Offset: 0x350, Size: 4]
	float TouchTargetingSlow;//[Offset: 0x354, Size: 4]
	float TouchScopedSlow;//[Offset: 0x358, Size: 4]
	float TouchBuildingMultiplier;//[Offset: 0x35c, Size: 4]
	float TouchEditModeMultiplier;//[Offset: 0x360, Size: 4]
	float TouchVerticalMultiplier;//[Offset: 0x364, Size: 4]
	bool bMotionControlsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	enum MotionYawAxis;//[Offset: 0x369, Size: 1]
	enum MotionYawAxisMobile;//[Offset: 0x36a, Size: 1]
	float GyroSensitivity;//[Offset: 0x36c, Size: 4]
	FString ControllerPlatform;//[Offset: 0x370, Size: 16]
	FString InputKBMPresetNameForCampaign;//[Offset: 0x380, Size: 16]
	FString InputKBMPresetNameForAthena;//[Offset: 0x390, Size: 16]
	FString InputPresetNameForCampaign;//[Offset: 0x3a0, Size: 16]
	FString InputPresetNameForAthena;//[Offset: 0x3b0, Size: 16]
	FString InputPresetNameForAthenaMobile;//[Offset: 0x3c0, Size: 16]
	FString InputTemplatePresetNameForCampaign;//[Offset: 0x3d0, Size: 16]
	FString InputTemplatePresetNameForAthena;//[Offset: 0x3e0, Size: 16]
	float XboxSafeZone;//[Offset: 0x3f0, Size: 4]
	FString PendingCulture;//[Offset: 0x3f8, Size: 16]
	FortActionKeyMapping[] UserActionBindings;//[Offset: 0x410, Size: 16]
	<enum,UserActionBindings> UserBindingsPerSubGame;//[Offset: 0x420, Size: 80]
	FortActionKeyMapping[] DisabledActionBindings;//[Offset: 0x470, Size: 16]
	FortActionKeyMapping[] CustomGamepadActionBindings;//[Offset: 0x480, Size: 16]
	bool bInvertedLook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bInvertedLookMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bInvertedPitchForMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool bInvertedPitchForAircraftPrimary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	bool bInvertedPitchForAircraftSecondary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool bInvertedYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	bool bInvertedYawMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 1]
	bool bInvertedYawForMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497, Size: 1]
	bool bToggleSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool bSprintByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	bool bSprintByDefaultMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 1]
	bool bSprintCancelsReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 1]
	bool bTapInteractEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	enum TouchInteractionMode;//[Offset: 0x49d, Size: 1]
	bool bTargetingToggleable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 1]
	bool bTargetingToggleableMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 1]
	bool bAutoEquipBetterItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	bool bAimAssistEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 1]
	bool bTouchAimAssistEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a2, Size: 1]
	bool bTouchEditEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a3, Size: 1]
	bool bEditConfirmOnReleaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	bool bQuickEditEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a6, Size: 1]
	bool bTriggerHapticsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a7, Size: 1]
	bool bTriggerPullUsesHapticThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	byte TriggerHapticStrength;//[Offset: 0x4a9, Size: 1]
	byte TriggerHapticStartPosition;//[Offset: 0x4aa, Size: 1]
	bool bDeviceFeedbackBlockedWithAttachedController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ab, Size: 1]
	bool bContextTutorialEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	bool bBuildingPossessionShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 1]
	bool bLocalNotificationsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 1]
	bool bUseFirstPersonCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4af, Size: 1]
	bool bUseGamepadEditModeAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool bUseHoldToSwapPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	bool bUseGamepadAutoRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 1]
	bool bFocusOnFirstBuildingPieceWhenQuickbarSwapped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b3, Size: 1]
	bool bNewFocusOnFirstBuildingPieceWhenQuickbarSwapped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	bool bFocusOnFirstBuildingPieceWhenQuickbarSwappedAthena;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	bool bNewFocusOnFirstBuildingPieceWhenQuickbarSwappedAthena;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b6, Size: 1]
	bool bDisablePreEditsWhenPlacingBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b7, Size: 1]
	bool bTurboBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	bool bTurboBuildMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 1]
	bool bCreativeTurboDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	bool bAutoChangeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bb, Size: 1]
	bool bAutoChangeMaterialMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool bAutoOpenDoors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	bool bAutoOpenDoorsNonMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 1]
	bool bAutoPickupWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bf, Size: 1]
	bool bAutoPickupWeaponsConsolePC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	bool bAutoSortConsumablesToRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 1]
	bool bEnableTryBuildOnFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2, Size: 1]
	float EditButtonHoldTime;//[Offset: 0x4c4, Size: 4]
	bool bUnlockConsoleFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool bConsoleFPS60;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	<GameplayTag,bool> UserHUDVisibiltyMappings;//[Offset: 0x4d0, Size: 80]
	<GameplayTag,bool> UserHUDDefaultMappings;//[Offset: 0x520, Size: 80]
	enum LastPartyType;//[Offset: 0x570, Size: 1]
	bool bLastLeaderInvitesOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	bool bLastLeaderFriendsOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	bool bAudioVolumesInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x573, Size: 1]
	float MusicVolume;//[Offset: 0x574, Size: 4]
	float SoundFXVolume;//[Offset: 0x578, Size: 4]
	float PIPVolume;//[Offset: 0x57c, Size: 4]
	float DialogVolume;//[Offset: 0x580, Size: 4]
	float ChatVolume;//[Offset: 0x584, Size: 4]
	float CinematicsVolume;//[Offset: 0x588, Size: 4]
	bool bEnableSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	enum SubtitleTextSize;//[Offset: 0x58d, Size: 1]
	enum SubtitleTextColor;//[Offset: 0x58e, Size: 1]
	enum SubtitleTextBorder;//[Offset: 0x58f, Size: 1]
	enum SubtitleBackgroundOpacity;//[Offset: 0x590, Size: 1]
	bool bEnableVoiceChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	bool bEnableVoiceChat3D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 1]
	bool bEnableVoiceChatPTT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 1]
	bool bCanVoiceChatWithUnknowns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool bEnableHousepartyCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	bool bEnablePeripheralLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x596, Size: 1]
	bool bShowViewerCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x597, Size: 1]
	bool bAnonymousMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	bool bAnonymousCharacterMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	bool bShowSeasonLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59a, Size: 1]
	bool bHideOtherPlayerNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59b, Size: 1]
	int HiddenMatchmakingDelayMaxSeconds;//[Offset: 0x59c, Size: 4]
	bool bReplayRecordingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bLargeTeamReplayRecordingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	bool bCreativeModeReplayRecordingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 1]
	bool bShadowPlayHighlightsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 1]
	bool bPlaceDangerMarkerWhenTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool bShowGlobalChatEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	float InitialGammaValue;//[Offset: 0x5a8, Size: 4]
	bool bInitialUseTapToShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	bool bInitialAutoOpenDoors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 1]
	bool bInitialAutoPickupWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ae, Size: 1]
	bool bInitialAutoPickupWeaponsConsolePC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 1]
	bool bInitialAutoSortConsumablesToRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bInitialEnableTryBuildOnFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	float InitialEditButtonHoldTime;//[Offset: 0x5b4, Size: 4]
	bool bStWQuickbarUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool bShouldShowBothQuickbars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	enum LicensedAudioTreatment;//[Offset: 0x5ba, Size: 1]
	enum ColorBlindMode;//[Offset: 0x5bb, Size: 1]
	float ColorBlindStrength;//[Offset: 0x5bc, Size: 4]
	bool bVisualizeAudioSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	enum InitialColorBlindMode;//[Offset: 0x5c1, Size: 1]
	float InitialColorBlindStrength;//[Offset: 0x5c4, Size: 4]
	bool bIgnoreGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool bInitialIgnoreGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	bool bLockPrimaryInputMethodToMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 1]
	bool bLockPrimaryInputMethodToMouseInitial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 1]
	bool bEnableRudderControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	float RudderDeadZone;//[Offset: 0x5d0, Size: 4]
	float RudderMaxThrottle;//[Offset: 0x5d4, Size: 4]
	FString SelectedRegionId;//[Offset: 0x5d8, Size: 16]
	FString PrevSavedRegion;//[Offset: 0x5e8, Size: 16]
	FString LastKnownBestRegionId;//[Offset: 0x5f8, Size: 16]
	int CrossplayPreference;//[Offset: 0x608, Size: 4]
	<enum> CustomInventoryFilterSet;//[Offset: 0x610, Size: 80]
	FName[] WatchedVideoIDs;//[Offset: 0x660, Size: 16]
	bool bAllowAudioInBackground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	enum AllowAudioInBackground;//[Offset: 0x671, Size: 1]
	bool bUsePowerSavingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 1]
	bool bHidePerkRecombobulatorHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x673, Size: 1]
	bool bHideStwItemRefundHelp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	enum SelectedAndroidAppStore;//[Offset: 0x675, Size: 1]
	int AndroidStoreSelectionRevision;//[Offset: 0x678, Size: 4]
	bool bHasDisabledAutoSlottingOfSurvivorSquadsAfterQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	bool bHasEnabledAutoSlottingOfSurvivorSquadsDuringOnboarding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	bool bWantsAutoSlottingOfSurvivorSquads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67e, Size: 1]
	HUDLayoutData[] CustomHUDLayoutData;//[Offset: 0x680, Size: 16]
	bool bRequiresHUDConversion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	FortMobileHUDProfileContainer HUDProfileContainer;//[Offset: 0x698, Size: 40]
	enum QuestMapMode;//[Offset: 0x6c0, Size: 1]
	FString QuestMapEventName;//[Offset: 0x6c8, Size: 16]
	bool bAutoJoinGameServerChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool bEnablePartyVoiceChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 1]
	bool bEnableGameVoiceChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6da, Size: 1]
	bool bAllowSidekickFeature1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6db, Size: 1]
	bool bShowVoiceIndicatorsNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	<FString> SeenEventFlags;//[Offset: 0x6e0, Size: 80]
	<int,int> ContextTutorialSeenCount;//[Offset: 0x730, Size: 80]
	<GameplayTag,int> ContextTutorialSeenCountGameplayTag;//[Offset: 0x780, Size: 80]
	bool bHasCompletedGuidedTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	int CapMipsExperimentVersion;//[Offset: 0x7d4, Size: 4]
	bool bHasCompletedHUDLayoutToolV2Tutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	bool FortClientSettingRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 1]
	bool bShowTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7da, Size: 1]
	bool bNotifyUsersWhenPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7db, Size: 1]
	bool bAllowFriendSubscriptionNudges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7dd, Size: 1]
	bool bPlayerSurveysAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7de, Size: 1]
	DateTime FlagSelectionLastUpdated;//[Offset: 0x7e0, Size: 8]
	bool bUseSmallInventoryTiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	<byte,uint32> LastSeenHashByShopSection;//[Offset: 0x7f0, Size: 80]
	<FName,uint32> LastSeenHashByShopSectionId;//[Offset: 0x840, Size: 80]
	bool HasSeenCommunityVotingTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	int LastSeenCommunityVotingTutorialVersion;//[Offset: 0x894, Size: 4]
	FString LastSeenCommunityVotingVersion;//[Offset: 0x898, Size: 16]
	int LastSeenReloadMtxIntroVersion;//[Offset: 0x8a8, Size: 4]
	FString LastSeenStandaloneOfferId;//[Offset: 0x8b0, Size: 16]
	<enum,enum> AutoMulchModeMap;//[Offset: 0x8c0, Size: 80]
	PlayerLastSelectedPreferredProvider[] LastPlayerSelectedPreferredProvider;//[Offset: 0x910, Size: 16]
	byte QuestListSortType;//[Offset: 0x920, Size: 1]
	GameplayTag QuestScreenTabGameplayTag;//[Offset: 0x924, Size: 8]
	byte InZoneMapScreenTab;//[Offset: 0x92c, Size: 1]
	bool bAutoExposureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92d, Size: 1]
	float ManualExposureBias;//[Offset: 0x930, Size: 4]
	float FocalLength;//[Offset: 0x934, Size: 4]
	float Aperture;//[Offset: 0x938, Size: 4]
	bool bAutoFocusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	float ManualFocusDistance;//[Offset: 0x940, Size: 4]
	bool bPlayerOutlinesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 1]
	bool bStormEffectsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x945, Size: 1]
	float SafeZoneOpacity;//[Offset: 0x948, Size: 4]
	bool bRelevancyZoneVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94c, Size: 1]
	bool bHighQualityFxEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94d, Size: 1]
	bool bDamageFxEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94e, Size: 1]
	enum ThirdPersonAutoFollowMode;//[Offset: 0x94f, Size: 1]
	float ThirdPersonDistanceToSubject;//[Offset: 0x950, Size: 4]
	bool bThirdPersonCameraCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	bool bShareLensSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 1]
	bool bDroneIgnoreJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x956, Size: 1]
	bool bShowSessionIDWatermark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x957, Size: 1]
	bool bBattleMapShowTimeIndicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 1]
	bool bBattleMapShowNearbyChests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x959, Size: 1]
	bool bBattleMapShowAllSquadMembers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95a, Size: 1]
	bool bBattleMapAutomaticCameraPlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95b, Size: 1]
	bool bNamePlatesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 1]
	bool bShowTeamColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95d, Size: 1]
	float ViewDistance;//[Offset: 0x960, Size: 4]
	float LowDetailDistance;//[Offset: 0x964, Size: 4]
	float ArrowDistance;//[Offset: 0x968, Size: 4]
	bool bScalingOptionsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
	float HighDetailScaleMin;//[Offset: 0x970, Size: 4]
	float HighDetailScaleMax;//[Offset: 0x974, Size: 4]
	float LowDetailScaleMin;//[Offset: 0x978, Size: 4]
	float LowDetailScaleMax;//[Offset: 0x97c, Size: 4]
	float ArrowScaleMin;//[Offset: 0x980, Size: 4]
	float ArrowScaleMax;//[Offset: 0x984, Size: 4]
	bool bArrowColorEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 1]
	enum SquadIdMode;//[Offset: 0x989, Size: 1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98a, Size: 1]
	bool bSaveToCloud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98b, Size: 1]
	enum CloudFileState;//[Offset: 0x98c, Size: 1]
	uint32 bDisableCloudSave;//[Offset: 0x990, Size: 4]
	int LastRequestSaveCount;//[Offset: 0x994, Size: 4]
	int LastAttemptedSaveCount;//[Offset: 0x998, Size: 4]
	double LastSaveAttemptTime;//[Offset: 0x9a0, Size: 8]
	double NextCloudSaveTime;//[Offset: 0x9a8, Size: 8]
	void SetVoiceChatWithUnknownsEnabled(bool bEnable);// 0xcf83760
	void SetVoiceChatPTTEnabled(bool bEnable);// 0xcf836b0
	void SetVoiceChatEnabled(bool bEnable);// 0xcf83600
	void SetVoiceChat3DEnabled(bool bEnable);// 0xcf83550
	void SetVisualizeAudioSources(bool bEnable);// 0xcf834a0
	void SetViewDistance(float InViewDistance);// 0xcf833f8
	void SetUsePowerSavingMode(bool bNewUsePowerSavingMode);// 0xcf83330
	void SetUseLegacyControls(bool NewUseLegacyControls);// 0xcf83280
	void SetUseHoldToSwapPickup(bool InUseHoldToSwapPickup);// 0xcf831b8
	void SetUseGamepadEditModeAimAssist(bool InUseGamepadEditModeAimAssist);// 0xcf830f0
	void SetUseGamepadAutoRun(bool InUseGamepadAutoRun);// 0xcf83028
	void SetUseFirstPersonCamera(bool bUseFirstPerson);// 0xcf82f60
	void SetUseAdvancedOptions(bool NewUseAdvancedOptions);// 0xcf82eb0
	void SetTurboBuild(const bool bNewValue);// 0xcf82e00
	void SetTriggerHapticsUseThreshold(bool bNewTriggerPullUsesHapticThreshold);// 0xcf82d38
	void SetTriggerHapticsStrength(byte NewTriggerHapticStrength);// 0xcf82c80
	void SetTriggerHapticsStartPosition(byte NewTriggerHapticStartPosition);// 0xcf82bc8
	void SetTriggerHapticsEnabled(bool bNewTriggerHapticsEnabled);// 0xcf82b00
	void SetTouchVerticalMultiplier(float InMultiplier);// 0xcf82a48
	void SetTouchTargetingMultiplier(float InMultiplier);// 0xcf82990
	void SetTouchScopedMultiplier(float InMultiplier);// 0xcf828d8
	void SetTouchLookSensitivitySetting(float InSetting);// 0xcf82820
	void SetTouchLookAccelerationMultiplier(float InSetting);// 0xcf82768
	void SetTouchInteractMode(const enum bNewMode);// 0xcf826b0
	void SetTouchEditModeMultiplier(float InMultiplier);// 0xcf825f8
	void SetTouchEditEnabled(bool bTouchEdit);// 0xcf82530
	void SetTouchBuildingMultiplier(float InMultiplier);// 0xcf82478
	void SetToggleSprint(bool bToggle);// 0xcf823b0
	void SetThirdPersonDistanceToSubject(float InThirdPersonDistanceToSubject);// 0xcf82308
	void SetThirdPersonCameraCollision(bool bInThirdPersonCameraCollision);// 0xcf82258
	void SetThirdPersonAutoFollowMode(enum InThirdPersonAutoFollowMode);// 0xcf821b0
	void SetTargetingToggleableWithTouch(bool bToggle);// 0xcf82100
	void SetTargetingToggleable(bool bToggle);// 0xcf82050
	void SetTargetingMultiplier(float InMultiplier);// 0xcf81f98
	void SetTapInteract(bool bTapInteract);// 0xcf81ed0
	void SetSubtitlesTextSize(enum Value);// 0xcf81e10
	void SetSubtitlesTextColor(enum Value);// 0xcf81d50
	void SetSubtitlesTextBorder(enum Value);// 0xcf81c90
	void SetSubtitlesEnabled(bool Value);// 0xcf81bd0
	void SetSubtitlesBackgroundOpacity(enum Value);// 0xcf81b10
	void SetStormEffectsEnabled(bool bInStormEffectsEnabled);// 0xcf81a60
	void SetSquadIdMode(enum InSquadIdMode);// 0xcf819b8
	void SetSprintCancelsReload(bool bInSprintCancelsReload);// 0xcf818f0
	void SetSoundFXVolume(float InVolume);// 0xcf81848
	void SetShowVoiceIndicators(bool bNewValue);// 0xcf81798
	void SetShowViewerCountEnabled(bool bEnable);// 0xcf816e8
	void SetShowTemperature(bool bNewValue);// 0xcf81638
	void SetShowTeamColor(bool bInShowTeamColor);// 0xcf81588
	void SetShowSessionIDWatermark(bool bInSessionIDWatermark);// 0xcf814d8
	void SetShowSeasonLevel(bool bEnable);// 0xcf81428
	void SetShowPickupDotsOnMapByRarity(enum InRarity);// 0xcf81380
	void SetShowGlobalChatEnabled(bool bEnable);// 0xcf812d0
	void SetShouldSprintByDefault(bool bShouldSprintByDefault);// 0xcf81220
	void SetShouldShowBothQuickbars(bool bNewValue);// 0xcf81170
	void SetShareLensSettings(bool bInShareLensSettings);// 0xcf810c0
	void SetShadowPlayHighlightsEnabled(bool bEnable);// 0xcf81010
	void SetScopedMultiplier(float InMultiplier);// 0xcf80f58
	void SetScalingOptionsEnabled(bool bInScalingOptionsEnabled);// 0xcf80ea8
	void SetSafeZoneOpacity(float InSafeZoneOpacity);// 0xcf80e00
	void SetRudderMaxThrottle(float NewValue);// 0xcf80d58
	void SetRudderDeadZone(float NewValue);// 0xcf80cb0
	void SetReplayRecordingEnabled(bool bEnable);// 0xcf80c00
	void SetRelevancyZoneVisible(bool bInRelevancyZoneVisible);// 0xcf80b50
	void SetQuickEditEnabled(bool bNewQuickEditEnabled);// 0xcf80a88
	void SetPlayerSurveysAllowed(bool Value);// 0xcf809d8
	void SetPlayerOutlinesEnabled(bool bInPlayerOutlinesEnabled);// 0xcf80928
	void SetPlaceDangerMarkerWhenTargeting(bool bEnable);// 0xcf80878
	void SetPIPVolume(float InVolume);// 0xcf807d0
	void SetPeripheralLightingEnabled(bool bEnable);// 0xcf80720
	void SetNotifyUsersWhenPlaying(const bool Value);// 0xcf80670
	void SetNameplatesEnabled(bool bInNameplatesEnabled);// 0xcf805c0
	void SetMusicVolume(float InVolume);// 0xcf80518
	void SetMouseSensitivityY(float InSensitivityY);// 0xcf80450
	void SetMouseSensitivityX(float InSensitivityX);// 0xcf80388
	void SetMouseSensitivityMultiplierForAircraft(float InSensitivityMultiplier);// 0xcf802c0
	void SetMotionYawAxisSetting(enum InSetting);// 0xcf80218
	void SetMotionTargetingMultiplier(float InMultiplier);// 0xcf80160
	void SetMotionScopedMultiplier(float InMultiplier);// 0xcf800a8
	void SetMotionHarvestingToolMultiplier(float InMultiplier);// 0xcf7fff0
	void SetMotionControlsEnabledSetting(bool InSetting);// 0xcf7ff30
	void SetManualFocusDistance(float InManualFocusDistance);// 0xcf7fe88
	void SetManualExposureBias(float InManualExposureBias);// 0xcf7fde0
	void SetLowDetailScaleMin(float InLowDetailScaleMin);// 0xcf7fd38
	void SetLowDetailScaleMax(float InLowDetailScaleMax);// 0xcf7fc90
	void SetLowDetailDistance(float InLowDetailDistance);// 0xcf7fbe8
	void SetLookVerticalSpeedAds(uint32 NewValue);// 0xcf7fb40
	void SetLookVerticalSpeed(uint32 NewValue);// 0xcf7fa98
	void SetLookVerticalBoostSpeedAds(uint32 NewValue);// 0xcf7f9f0
	void SetLookVerticalBoostSpeed(uint32 NewValue);// 0xcf7f948
	void SetLookSensitivityPresetAds(enum NewPreset);// 0xcf7f8a0
	void SetLookSensitivityPreset(enum NewPreset);// 0xcf7f7f8
	void SetLookInputCurve(enum NewValue);// 0xcf7f750
	void SetLookHorizontalSpeedAds(uint32 NewValue);// 0xcf7f6a8
	void SetLookHorizontalSpeed(uint32 NewValue);// 0xcf7f600
	void SetLookHorizontalBoostSpeedAds(uint32 NewValue);// 0xcf7f558
	void SetLookHorizontalBoostSpeed(uint32 NewValue);// 0xcf7f4b0
	void SetLookEditModeMultiplier(float NewValue);// 0xcf7f408
	void SetLookEaseTime(float NewValue);// 0xcf7f360
	void SetLookBuildModeMultiplier(float NewValue);// 0xcf7f2b8
	void SetLookBoostAccelerationTimeAds(float NewValue);// 0xcf7f210
	void SetLookBoostAccelerationTime(float NewValue);// 0xcf7f168
	void SetLockPrimaryInputMethodToMouse(bool bLock);// 0xcf7f0b8
	void SetLocalNotificationsEnabled(bool bEnabled);// 0xcf7f008
	void SetLicensedAudioTreatment(enum InLicensedAudioTreatment);// 0xcf7ef60
	void SetLargeTeamReplayRecordingEnabled(bool bEnable);// 0xcf7eeb0
	void SetInvertedYawForMotion(bool bInvert);// 0xcf7ee00
	void SetInvertedYaw(bool bInvert);// 0xcf7ed50
	void SetInvertedPitchForMotion(bool bInvert);// 0xcf7eca0
	void SetInvertedPitchForAircraftSecondary(bool bInvert);// 0xcf7ebf0
	void SetInvertedPitchForAircraftPrimary(bool bInvert);// 0xcf7eb40
	void SetInvertedPitch(bool bInvert);// 0xcf7ea90
	void SetInstantBoostWhenBuilding(bool NewValue);// 0xcf7e9e0
	void SetIgnoreGamepadInput(bool bIgnore);// 0xcf7e930
	void SetHUDScaleMultiplier(float InHUDScaleMultiplier);// 0xcf7e888
	void SetHUDScale(float InScale);// 0xcf7e7e0
	void SetHousepartyCastingEnabled(bool bEnable);// 0xcf7e730
	void SetHighQualityFxEnabled(bool bInHighQualityFxEnabled);// 0xcf7e680
	void SetHighDetailScaleMin(float InHighDetailScaleMin);// 0xcf7e5d8
	void SetHighDetailScaleMax(float InHighDetailScaleMax);// 0xcf7e530
	void SetHideOtherPlayerNames(bool bEnable);// 0xcf7e480
	void SetHiddenMatchmakingDelayMax(int Value);// 0xcf7e3d8
	void SetGyroLookSensitivitySetting(float InSetting);// 0xcf7e320
	void SetGamepadTargetingMultiplier(float InMultiplier);// 0xcf7e268
	void SetGamepadScopedMultiplier(float InMultiplier);// 0xcf7e1b0
	void SetGamepadMoveStickDeadZone(const float NewValue);// 0xcf7e108
	void SetGamepadLookStickDeadZone(const float NewValue);// 0xcf7e060
	void SetGamepadLookSensitivityY(float InSensitivity);// 0xcf7df98
	void SetGamepadLookSensitivityX(float InSensitivity);// 0xcf7ded0
	void SetGamepadEditModeMultiplier(float InMultiplier);// 0xcf7de18
	void SetGamepadBuildingMultiplier(float InMultiplier);// 0xcf7dd60
	void SetFromVoiceChatSettings(enum InSetting);// 0xcf7dcb8
	void SetForceFeedbackEnabled(bool bForceFeedback);// 0xcf7dbf0
	void SetFocusOnFirstBuildingPieceWhenQuickbarSwappedAthena(bool InFocusOnFirstBuildingPieceWhenQuickbarSwapped);// 0xcf7db28
	void SetFocusOnFirstBuildingPieceWhenQuickbarSwapped(bool InFocusOnFirstBuildingPieceWhenQuickbarSwapped);// 0xcf7da60
	void SetFocalLength(float InFocalLength);// 0xcf7d9b8
	void SetEnableTryBuildOnFocus(const bool bNewValue);// 0xcf7d908
	void SetEnableRudderControl(bool bEnable);// 0xcf7d858
	void SetEnablePartyVoiceChannel(bool bNewValue);// 0xcf7d7a8
	void SetEnableGameVoiceChannel(bool bNewValue);// 0xcf7d6f8
	void SetEditConfirmOnReleaseEnabled(bool bNewEditConfirmOnRelease);// 0xcf7d630
	void SetEditButtonHoldTime(const float NewValue);// 0xcf7d588
	void SetDroneIgnoreJump(bool bInDroneIgnoreJump);// 0xcf7d4d8
	void SetDisablePreEditsWhenPlacingBuilding(bool InDisablePreEditsWhenPlacingBuilding);// 0xcf7d410
	void SetDialogueVolume(float InVolume);// 0xcf7d368
	void SetDeviceFeedbackBlockedWithAttachedController(bool bForceFeedbackBlocked);// 0xcf7d2a0
	void SetDamageFxEnabled(bool bInDamageFxEnabled);// 0xcf7d1f0
	void SetCrossplayPreference(enum NewPreference);// 0xcf7d148
	void SetCreativeTurboDelete(const bool bNewValue);// 0xcf7d098
	void SetCreativeModeReplayRecordingEnabled(bool bEnabled);// 0xcf7cfe8
	void SetContextTutorialEnabled(bool bEnabled);// 0xcf7cf20
	void SetConsoleFPSUnlocked(bool bNewValue);// 0xcf7ce58
	void SetColorBlindStrength(int InColorBlindStrength);// 0xcf7cdb0
	void SetColorBlindMode(enum InMode);// 0xcf7cd08
	void SetCinematicsVolume(float InVolume);// 0xcf7cc60
	void SetChatVolume(float InVolume);// 0xcf7cbb8
	void SetBuildingPossessionShown(bool bShown);// 0xcf7caf0
	void SetBattleMapShowTimeIndicator(bool bInBattleMapShowTimeIndicator);// 0xcf7ca40
	void SetBattleMapShowNearbyChests(bool bInBattleMapShowNearbyChests);// 0xcf7c990
	void SetBattleMapShowAllSquadMembers(bool bInBattleMapShowAllSquadMembers);// 0xcf7c8e0
	void SetBattleMapAutomaticCameraPlacement(bool bInBattleMapAutomaticCameraPlacement);// 0xcf7c830
	void SetAutoSortConsumablesToRight(const bool bNewValue);// 0xcf7c780
	void SetAutoPickupWeaponsConsolePC(const bool bNewValue);// 0xcf7c6d0
	void SetAutoPickupWeapons(const bool bNewValue);// 0xcf7c620
	void SetAutoOpenDoors(const bool bNewValue);// 0xcf7c570
	void SetAutoMulchMode(enum Category, enum NewMode);// 0xcf7c488
	void SetAutoJoinGameVoiceChannel(bool bNewValue);// 0xcf7c3d8
	void SetAutoHideBuildingMaterials(bool InAutoHideBuildingMats);// 0xcf7c328
	void SetAutoFocusEnabled(bool bInAutoFocusEnabled);// 0xcf7c278
	void SetAutoExposureEnabled(bool bInAutoExposureEnabled);// 0xcf7c1c8
	void SetAutoEquipBetterItems(bool bAutoEquip);// 0xcf7c100
	void SetAutoChangeMaterial(const bool bNewValue);// 0xcf7c050
	void SetArrowScaleMin(float InArrowDetailScaleMin);// 0xcf7bfa8
	void SetArrowScaleMax(float InArrowScaleMax);// 0xcf7bf00
	void SetArrowDistance(float InArrowDistance);// 0xcf7be58
	void SetArrowColorEnabled(bool bInArrowColorEnabled);// 0xcf7bda8
	void SetAperture(float InAperture);// 0xcf7bd00
	void SetAnonymousModeEnabled(bool bEnable);// 0xcf7bc50
	void SetAnonymousCharacterModeEnabled(bool bEnable);// 0xcf7bba0
	void SetAllowSidekickFeature1(bool bNewValue);// 0xcf7baf0
	void SetAllowFriendSubscriptionNudges(bool bAllow);// 0xcf7ba40
	void SetAllowAudioInBackgroundSetting(enum Value);// 0xcf7b998
	void SetAimAssistStrength(uint32 NewValue);// 0xcf7b8f0
	void SetAimAssistEnabled(const bool bNewValue);// 0xcf7b840
	bool IsUsingHoldToSwapPickup();// 0xcf7b824
	bool IsUsingGamepadEditModeAimAssist();// 0xcf7b808
	bool IsUsingGamepadAutoRun();// 0xcf7b7ec
	bool GetVoiceChatWithUnknownsEnabled();// 0xcf7b7b4
	enum GetVoiceChatSettings();// 0xcf7b780
	bool GetVoiceChatPTTEnabled();// 0xcf7b748
	bool GetVoiceChatEnabled();// 0xcf7b710
	bool GetVoiceChat3DEnabled();// 0xcf7b6d8
	bool GetVisualizeAudioSources();// 0xcf7b6a0
	bool GetUsePowerSavingMode();// 0xcf7b684
	bool GetUseFirstPersonCamera();// 0xcf7b668
	bool GetTurboBuild();// 0xcf7b630
	bool GetTriggerHapticsUseThreshold();// 0xcf7b618
	byte GetTriggerHapticsStrength();// 0xcf7b600
	byte GetTriggerHapticsStartPosition();// 0xcf7b5e8
	bool GetTriggerHapticsEnabled();// 0xcf7b5d0
	float GetTouchVerticalMultiplier();// 0xcf7b5b4
	float GetTouchTargetingMultiplier();// 0xcf7b598
	float GetTouchScopedMultiplier();// 0xcf7b57c
	float GetTouchLookSensitivitySetting();// 0xcf7b560
	float GetTouchLookAccelerationMultiplier();// 0xcf7b544
	enum GetTouchInteractionMode();// 0xcf7b528
	float GetTouchEditModeMultiplier();// 0xcf7b50c
	bool GetTouchEditEnabled();// 0xcf7b4f0
	float GetTouchBuildingMultiplier();// 0xcf7b4d4
	bool GetToggleSprint();// 0xcf7b4b8
	bool GetTargetingToggleableWithTouch();// 0xcf7b480
	bool GetTargetingToggleable();// 0xcf7b448
	float GetTargetingMultiplier();// 0xcf7b42c
	bool GetTapInteract();// 0xcf7b410
	enum GetSubtitlesTextSize();// 0xcf7b3f4
	enum GetSubtitlesTextColor();// 0xcf7b3d8
	enum GetSubtitlesTextBorder();// 0xcf7b3bc
	bool GetSubtitlesEnabled();// 0xcf7b3a0
	enum GetSubtitlesBackgroundOpacity();// 0xcf7b384
	bool GetSprintCancelsReload();// 0xcf7b368
	float GetSoundFXVolume();// 0xcf7b334
	bool GetShowVoiceIndicators();// 0xcf7b2fc
	bool GetShowViewerCountEnabled();// 0xcf7b2c4
	bool GetShowTemperature();// 0xcf7b28c
	bool GetShowSeasonLevel();// 0xcf7b254
	enum GetShowPickupDotsOnMapByRarity();// 0xcf7b238
	bool GetShowGlobalChatEnabled();// 0xcf7b200
	bool GetShouldSprintByDefault();// 0xcf7b1c8
	bool GetShouldShowBothQuickbars();// 0xcf7b190
	bool GetShadowPlayHighlightsEnabled();// 0xcf7b158
	float GetScopedMultiplier();// 0xcf7b13c
	float GetRudderMaxThrottle();// 0xcf7b108
	float GetRudderDeadZone();// 0xcf7b0d4
	bool GetReplayRecordingEnabled();// 0xcf7b09c
	bool GetQuickEditEnabled();// 0xcf7b080
	bool GetPlayerSurveysAllowed();// 0xcf7b048
	bool GetPlaceDangerMarkerWhenTargeting();// 0xcf7b010
	float GetPIPVolume();// 0xcf7afdc
	bool GetPeripheralLightingEnabled();// 0xcf7afa4
	bool GetNotifyUsersWhenPlaying();// 0xcf7af88
	float GetMusicVolume();// 0xcf7af54
	float GetMouseSensitivityY();// 0xcf7af38
	float GetMouseSensitivityX();// 0xcf7af1c
	float GetMouseSensitivityMultiplierForAircraft();// 0xcf7af00
	enum GetMotionYawAxisSetting();// 0xcf7aecc
	float GetMotionTargetingMultiplier();// 0xcf7aeb0
	float GetMotionScopedMultiplier();// 0xcf7ae94
	float GetMotionHarvestingToolMultiplier();// 0xcf7ae78
	bool GetMotionControlsEnabledSetting();// 0xcf7ae5c
	bool GetLockPrimaryInputMethodToMouse();// 0xcf7ae24
	bool GetLocalNotificationsEnabled();// 0xcf7adec
	enum GetLicensedAudioTreatmentInternal();// 0xcf7adb8
	enum GetLicensedAudioTreatment(bool bIgnoreGameStreamingCheck);// 0xcf7ad00
	bool GetLargeTeamReplayRecordingEnabled();// 0xcf7acc8
	bool GetInvertedYawForMotion();// 0xcf7ac90
	bool GetInvertedYaw();// 0xcf7ac58
	bool GetInvertedPitchForMotion();// 0xcf7ac20
	bool GetInvertedPitchForAircraftSecondary();// 0xcf7abe8
	bool GetInvertedPitchForAircraftPrimary();// 0xcf7abb0
	bool GetInvertedPitch();// 0xcf7ab78
	bool GetIgnoreGamepadInput();// 0xcf7ab40
	float GetHUDScaleRaw();// 0xcf7ab24
	float GetHUDScaleMultiplier();// 0xcf7ab08
	float GetHUDScale();// 0xcf7aae4
	bool GetHousepartyCastingEnabled();// 0xcf7aaac
	bool GetHideOtherPlayerNames();// 0xcf7aa74
	int GetHiddenMatchmakingDelayMax();// 0xcf7aa40
	float GetGyroLookSensitivitySetting();// 0xcf7aa24
	float GetGamepadTargetingMultiplier();// 0xcf7aa08
	float GetGamepadScopedMultiplier();// 0xcf7a9ec
	float GetGamepadMoveStickDeadZone();// 0xcf7a9d0
	float GetGamepadLookStickDeadZone();// 0xcf7a9b4
	float GetGamepadLookSensitivityY();// 0xcf7a998
	float GetGamepadLookSensitivityX();// 0xcf7a97c
	float GetGamepadEditModeMultiplier();// 0xcf7a960
	float GetGamepadBuildingMultiplier();// 0xcf7a944
	bool GetForceFeedbackEnabled();// 0xcf7a90c
	bool GetFocusOnFirstBuildingPieceWhenQuickbarSwappedAthena();// 0xcf7a8f0
	bool GetFocusOnFirstBuildingPieceWhenQuickbarSwapped();// 0xcf7a8d4
	bool GetEnableTryBuildOnFocus();// 0xcf7a89c
	bool GetEnableRudderControl();// 0xcf7a864
	bool GetEnablePartyVoiceChannel();// 0xcf7a82c
	bool GetEnableGameVoiceChannel();// 0xcf7a7f4
	bool GetEditConfirmOnReleaseEnabled();// 0xcf7a7d8
	float GetEditButtonHoldTime();// 0xcf7a7a4
	bool GetDisablePreEditsWhenPlacingBuilding();// 0xcf7a788
	float GetDialogueVolume();// 0xcf7a754
	bool GetDeviceFeedbackBlockedWithAttachedController();// 0xcf7a738
	enum GetCrossplayPreference();// 0xcf7a704
	bool GetCreativeTurboDelete();// 0xcf7a6cc
	bool GetCreativeModeReplayRecordingEnabled();// 0xcf7a694
	bool GetContextTutorialEnabled();// 0xcf7a678
	bool GetConsoleFPSUnlocked();// 0xcf7a65c
	int GetColorBlindStrength();// 0xcf7a628
	enum GetColorBlindMode();// 0xcf7a5f4
	float GetCinematicsVolume();// 0xcf7a5c0
	float GetChatVolume();// 0xcf7a58c
	bool GetChatDisabledForPlatform();// 0xcf7a554
	bool GetBuildingPossessionShown();// 0xcf7a538
	bool GetAutoSortConsumablesToRight();// 0xcf7a500
	bool GetAutoPickupWeaponsConsolePC();// 0xcf7a4c8
	bool GetAutoPickupWeapons();// 0xcf7a490
	bool GetAutoOpenDoors();// 0xcf7a458
	enum GetAutoMulchMode(enum Category);// 0xcf7a3a8
	bool GetAutoJoinGameVoiceChannel();// 0xcf7a370
	bool GetAutoHideBuildingMaterials();// 0xcf7a354
	bool GetAutoEquipBetterItems();// 0xcf7a338
	bool GetAutoChangeMaterial();// 0xcf7a300
	bool GetAnonymousModeEnabled();// 0xcf7a2c8
	bool GetAnonymousCharacterModeEnabled();// 0xcf7a290
	bool GetAllowSidekickFeature1();// 0xcf7a258
	bool GetAllowFriendSubscriptionNudges();// 0xcf7a220
	enum GetAllowAudioInBackgroundSetting();// 0xcf7a204
	bool GetAimAssistEnabled();// 0xcf7a1cc
	void ForceToggleHousepartyCastingEnabled();// 0xcf7a1b8

--------------------------------
Class: FortGamepadUserOptions
	FortGamepadBasicOptions Basic;//[Offset: 0x0, Size: 16]
	FortGamepadAdvancedOptions Advanced;//[Offset: 0x10, Size: 60]

--------------------------------
Class: FortGamepadBasicOptions
	enum LookSensitivityPreset;//[Offset: 0x0, Size: 1]
	enum LookSensitivityPresetAds;//[Offset: 0x1, Size: 1]
	float LookBuildModeMultiplier;//[Offset: 0x4, Size: 4]
	float LookEditModeMultiplier;//[Offset: 0x8, Size: 4]
	bool bUseAdvancedOptions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: FortGamepadAdvancedOptions
	uint32 LookHorizontalSpeed;//[Offset: 0x0, Size: 4]
	uint32 LookVerticalSpeed;//[Offset: 0x4, Size: 4]
	uint32 LookHorizontalSpeedAds;//[Offset: 0x8, Size: 4]
	uint32 LookVerticalSpeedAds;//[Offset: 0xc, Size: 4]
	uint32 LookHorizontalBoostSpeed;//[Offset: 0x10, Size: 4]
	uint32 LookVerticalBoostSpeed;//[Offset: 0x14, Size: 4]
	float LookBoostAccelerationTime;//[Offset: 0x18, Size: 4]
	uint32 LookHorizontalBoostSpeedAds;//[Offset: 0x1c, Size: 4]
	uint32 LookVerticalBoostSpeedAds;//[Offset: 0x20, Size: 4]
	float LookBoostAccelerationTimeAds;//[Offset: 0x24, Size: 4]
	bool bInstantBoostWhenBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float LookEaseTime;//[Offset: 0x2c, Size: 4]
	enum LookInputCurve;//[Offset: 0x30, Size: 1]
	uint32 AimAssistStrength;//[Offset: 0x34, Size: 4]
	bool bUseLegacyControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: FortActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 8]
	enum ActionGroup;//[Offset: 0x8, Size: 1]
	enum SubGameUsedIn;//[Offset: 0x9, Size: 1]
	FText LocalizedCategory;//[Offset: 0x10, Size: 24]
	FText LocalizedName;//[Offset: 0x28, Size: 24]
	Key KeyBind1;//[Offset: 0x40, Size: 24]
	Key KeyBind2;//[Offset: 0x58, Size: 24]
	float InputScale;//[Offset: 0x70, Size: 4]
	bool bIsAxisMapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]

--------------------------------
Class: UserActionBindings
	FortActionKeyMapping[] UserActionBindings;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortMobileHUDProfileContainer
	FortMobileHUDProfileIdentifier ActiveHUDProfileIdentifier;//[Offset: 0x0, Size: 24]
	FortMobileCustomHUDProfile[] CustomHUDProfiles;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FortMobileCustomHUDProfile.FortMobileHUDProfileBase
	FortMobileSchemaModificationContainer Modifications;//[Offset: 0x40, Size: 16]

--------------------------------
Class: FortMobileHUDProfileBase
	FortMobileHUDProfileIdentifier HUDProfileIdentifier;//[Offset: 0x8, Size: 24]
	FText HUDProfileName;//[Offset: 0x20, Size: 24]
	GameplayTag HUDProfileBaseType;//[Offset: 0x38, Size: 8]

--------------------------------
Class: FortMobileSchemaModificationContainer
	FortMobileSchemaModification[] Modifications;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FortMobileSchemaModification
	GUID GUID;//[Offset: 0x0, Size: 16]
	enum ModificationType;//[Offset: 0x10, Size: 1]
	GameplayTag OwningContextTag;//[Offset: 0x14, Size: 8]
	FortMobileHUDWidgetSchemaSave ModifiedSchema;//[Offset: 0x20, Size: 88]

--------------------------------
Class: FortMobileHUDWidgetSchemaSave
	GameplayTag HUDWidgetClassTag;//[Offset: 0x0, Size: 8]
	GameplayTag BehaviorClassTag;//[Offset: 0x8, Size: 8]
	GUID GUID;//[Offset: 0x10, Size: 16]
	FortMobileHUDWidgetLayoutSave HUDWidgetLayout;//[Offset: 0x20, Size: 56]

--------------------------------
Class: FortMobileHUDWidgetLayoutSave
	AnchorData LayoutData;//[Offset: 0x0, Size: 40]
	FortMobileHUDWidgetCustomPropertySave[] CustomProperties;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FortMobileHUDWidgetCustomPropertySave
	GameplayTag PropertyTag;//[Offset: 0x0, Size: 8]
	FString PropertyValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PlayerLastSelectedPreferredProvider
	UniqueNetIdRepl LocalUserId;//[Offset: 0x0, Size: 40]
	enum PreferredProvider;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FortOnlineAccount.OnlineAccountCommon.Object
	bool bEnableEulaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 1]
	bool bShouldAthenaQueryRecentPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x753, Size: 1]
	bool bHadLoginPurchaseCheckFailure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	FString[] IgnoreProducts;//[Offset: 0x770, Size: 16]
	FString[] ResubmitProducts;//[Offset: 0x780, Size: 16]
	<FString,RestrictedCountry> RestrictedCountries;//[Offset: 0x790, Size: 80]
	bool bShouldClientForcePartnerId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e2, Size: 1]
	FString ClientForcePartnerId;//[Offset: 0x7e8, Size: 16]
	bool bDisablePurchasingOnRedemptionFailure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85a, Size: 1]
	double MinimumSecondsBetweenPurchaseRedemptionAttempts;//[Offset: 0x860, Size: 8]
	bool bPromptUserAndReverifyAuthToken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	float RefreshConnectionTimerDuration;//[Offset: 0x86c, Size: 4]
	FString[] RealMoneyPurchaseBlockedCountryCodes;//[Offset: 0x888, Size: 16]

--------------------------------
Class: OnlineAccountCommon.Object
	FString AvailabilityServiceGameName;//[Offset: 0x38, Size: 16]
	bool bRequireLightswitchAtStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	FString EulaKey;//[Offset: 0x50, Size: 16]
	<FString,FString> EulaKeyMapping;//[Offset: 0x60, Size: 80]
	bool bEnableWaitingRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	WebEnvUrl[] WebCreateEpicAccountUrl;//[Offset: 0xb8, Size: 16]
	bool bAllowLocalLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bAllowLocalLogoutKairos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	FString RedeemAccessUrl;//[Offset: 0x100, Size: 16]
	FString RequestFreeAccessUrl;//[Offset: 0x110, Size: 16]
	FString RealGameAccessUrl;//[Offset: 0x120, Size: 16]
	float SkipRedeemOfflinePurchasesChance;//[Offset: 0x130, Size: 4]
	bool bUseFreeAccessInsteadOfGameAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bShouldGrantFreeAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool bAllowHomeSharingAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 1]
	bool bRequireUGCPrivilege;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	float AccessGrantDelaySeconds;//[Offset: 0x3d8, Size: 4]
	WaitingRoomState* WaitingRoomState;//[Offset: 0x3e0, Size: 8]
	bool bAutoCreateHeadlessAccount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]

--------------------------------
Class: WebEnvUrl
	FString URL;//[Offset: 0x0, Size: 16]
	FString RedirectUrl;//[Offset: 0x10, Size: 16]
	FString Environment;//[Offset: 0x20, Size: 16]

--------------------------------
Class: RestrictedCountry
	bool bHealthWarningShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAntiAddictionMessageShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bRealMoneyStoreRestriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bGameplayRestrictions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: WaitingRoomState.Object
	int GracePeriodMins;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: PlayerReportingInfoContainer
	FortLocalPlayer* Owner;//[Offset: 0x0, Size: 8]
	ReportablePlayerInfo*[] AllPlayerInfo;//[Offset: 0x8, Size: 16]
	ReportablePlayerInfo*[] AllIslandInfo;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ReportablePlayerInfo.Object

--------------------------------
Class: FortPoiTracker.Object
	void HandleEndSkydiving();// 0xd1a1b3c

--------------------------------
Class: FortUIRewardReport.Object
	FortLocalPlayer* LocalPlayer;//[Offset: 0x28, Size: 8]
	int RewardDisplayLevel;//[Offset: 0x30, Size: 4]
	int GetRewardedChestIndex();// 0xe10fab0

--------------------------------
Class: FortLastMissionInfo
	FText TheaterName;//[Offset: 0x0, Size: 24]
	FText MissionName;//[Offset: 0x18, Size: 24]
	FText Difficulty;//[Offset: 0x30, Size: 24]

--------------------------------
Class: GameSummaryInfo
	FString GameSessionId;//[Offset: 0x0, Size: 16]
	bool Completed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: FortInputActionDetails
	enum InputActionType;//[Offset: 0x0, Size: 1]
	Key ActionKey;//[Offset: 0x8, Size: 24]

--------------------------------
Class: FortGlobalActionDetailsFunctionContext
	enum OverrideInputType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FortGlobalActionDetails
	FName ActionName;//[Offset: 0x0, Size: 8]
	bool HoldStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: BP_TeleportationDrone_C.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 8]
	SkeletalMeshComponentBudgeted* SkeletalMeshComponentBudgeted;//[Offset: 0x288, Size: 8]
	SceneComponent* Scene;//[Offset: 0x290, Size: 8]
	float AnimPlayRate;//[Offset: 0x298, Size: 4]
	MaterialInstanceDynamic* StaticMeshMID;//[Offset: 0x2a0, Size: 8]
	bool TeleportIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	ParticleSystemComponent* CharacterAttached;//[Offset: 0x2b0, Size: 8]
	bool InLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	SkeletalMeshComponent* Mesh for Attachment;//[Offset: 0x2c0, Size: 8]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	void PlaySpawnAnim(AnimationAsset* Temp_object_Variable, bool Temp_bool_Variable, AnimationAsset* Temp_object_Variable, AnimationAsset* Temp_object_Variable, bool Temp_bool_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimationAsset* K2Node_Select_Default, AnimationAsset* K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void OnSpawnOutAnimEnded(AnimMontage* Montage, bool bInterrupted);// 0xbbc0600
	void ReceiveTick(float DeltaSeconds);// 0xbbc0600
	void ExecuteUbergraph_BP_TeleportationDrone(int EntryPoint, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, float K2Node_Event_DeltaSeconds, Rotator CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, MaterialInterface* CallFunc_GetMaterial_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_SetActorRotation_ReturnValue, float CallFunc_K2_GetScalarParameterValue_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_DonutPlate1H_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	void UserConstructionScript(ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void FrontEndIdle();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_DonutPlate1H(int EntryPoint, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, const HitResult K2Node_Event_HitResult, byte K2Node_Event_ImpactPhysicalSurface, FXSystemComponent* K2Node_Event_SpawnedPSC, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool Temp_bool_IsClosed_Variable, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly, bool Temp_bool_Has_Been_Initd_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, Galileo_Ferry_Axe_AnimBP_C* K2Node_DynamicCast_AsGalileo_Ferry_Axe_Anim_BP, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_GetSwingPSC_ReturnValue, ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue, ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue, byte K2Node_Event_EndPlayReason, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600

--------------------------------
Class: Galileo_Ferry_Axe_AnimBP_C.AnimInstance_GalileoFerryAxe.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 8]
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2e8, Size: 48]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x318, Size: 72]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x360, Size: 160]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x400, Size: 128]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x480, Size: 128]
	void AnimGraph(out PoseLink AnimGraph);// 0xbbc0600
	void ExecuteUbergraph_Galileo_Ferry_Axe_AnimBP(int EntryPoint);// 0xbbc0600

--------------------------------
Class: AnimInstance_GalileoFerryAxe.AnimInstance.Object
	float TimeBeforeFolding;//[Offset: 0x2b8, Size: 4]
	float VFXDisableTimeOffset;//[Offset: 0x2bc, Size: 4]
	bool ShouldFoldBackWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bDesiredIdleParticleVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	MulticastInlineDelegateProperty FrontEndIdle;//[Size: 16]

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 16]
	FName Name;//[Offset: 0x20, Size: 8]
	FName Group;//[Offset: 0x28, Size: 8]

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 16]
	FName SlotName;//[Offset: 0x20, Size: 8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 16]
	float[] BlendTime;//[Offset: 0x20, Size: 16]
	enum TransitionType;//[Offset: 0x30, Size: 1]
	enum BlendType;//[Offset: 0x31, Size: 1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 8]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 8]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x38, Size: 8]
	float PlayRateBasis;//[Offset: 0x40, Size: 4]
	float PlayRate;//[Offset: 0x44, Size: 4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x48, Size: 48]
	float StartPosition;//[Offset: 0x78, Size: 4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	FName GroupName;//[Offset: 0x10, Size: 8]
	byte GroupRole;//[Offset: 0x18, Size: 1]
	enum GroupScope;//[Offset: 0x19, Size: 1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	float BlendWeight;//[Offset: 0x1c, Size: 4]
	float InternalTimeAccumulator;//[Offset: 0x20, Size: 4]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	InputRange InRange;//[Offset: 0x4, Size: 8]
	InputRange OutRange;//[Offset: 0xc, Size: 8]
	float Scale;//[Offset: 0x14, Size: 4]
	float Bias;//[Offset: 0x18, Size: 4]
	float ClampMin;//[Offset: 0x1c, Size: 4]
	float ClampMax;//[Offset: 0x20, Size: 4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 4]

--------------------------------
Class: B_Melee_Impact_Cube_Ninja_Male_Pickaxe_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	NiagaraComponent* NS_Pickaxe_Cube_Ninja_Male_Idle;//[Offset: 0xec0, Size: 8]
	float Timeline_CubeninjaFX_Alpha2_A992319A413838A753FF58985C27C0B7;//[Offset: 0xec8, Size: 4]
	float Timeline_CubeninjaFX_Dissolve_A992319A413838A753FF58985C27C0B7;//[Offset: 0xecc, Size: 4]
	float Timeline_CubeninjaFX_Alpha_A992319A413838A753FF58985C27C0B7;//[Offset: 0xed0, Size: 4]
	float Timeline_CubeninjaFX_Size_A992319A413838A753FF58985C27C0B7;//[Offset: 0xed4, Size: 4]
	byte Timeline__Direction_A992319A413838A753FF58985C27C0B7;//[Offset: 0xed8, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xee0, Size: 8]
	void Timeline__FinishedFunc();// 0xbbc0600
	void Timeline__UpdateFunc();// 0xbbc0600
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void ExecuteUbergraph_B_Melee_Impact_Cube_Ninja_Male_Pickaxe(int EntryPoint, bool K2Node_Event_bPersistentFire, bool K2Node_Event_bSecondaryFire, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_DualWield_Generic_C.FortWeaponPickaxeDualWieldAthena.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10c8, Size: 8]
	bool Equipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	enum IdleFX Location Rule;//[Offset: 0x10d1, Size: 1]
	enum Idle FX Rotation Rule;//[Offset: 0x10d2, Size: 1]
	enum Idle FX Scale Rule;//[Offset: 0x10d3, Size: 1]
	enum SwingFX Location Rule;//[Offset: 0x10d4, Size: 1]
	enum Swing FX Rotation Rule;//[Offset: 0x10d5, Size: 1]
	enum Swing FX Scale Rule;//[Offset: 0x10d6, Size: 1]
	ParticleSystemComponent* Alteration Ambient PS;//[Offset: 0x10d8, Size: 8]
	ParticleSystem* MeleeHeavy_ParticleSystem;//[Offset: 0x10e0, Size: 8]
	ParticleSystemComponent* MeleeHeavy_PSC;//[Offset: 0x10e8, Size: 8]
	bool UseDestroyEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 1]
	ParticleSystem* WeaponDurabilityDestroyEffect;//[Offset: 0x10f8, Size: 8]
	ParticleSystem* WeaponDurabilityDestroyEffectIcon;//[Offset: 0x1100, Size: 8]
	ParticleSystemComponent* Offhand Alteration Ambient PS;//[Offset: 0x1108, Size: 8]
	bool bEquipPendingInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 1]
	FName Offhand Socket Name;//[Offset: 0x1114, Size: 8]
	AnimMontage* MontageReference;//[Offset: 0x1120, Size: 8]
	bool UseTimeofDayControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1128, Size: 1]
	FXSystemComponent* Impact FX;//[Offset: 0x1130, Size: 8]
	bool Swing Right?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1138, Size: 1]
	Rotator Left Swing Rotation;//[Offset: 0x113c, Size: 12]
	Rotator Right Swing Rotation;//[Offset: 0x1148, Size: 12]
	void Binding Time of Day Control(bool Bind / Unbind (T/F), FortTimeOfDayManager* CallFunc_GetTimeOfDayManagerFromContext_ReturnValue, byte CallFunc_GetPreviousDayPhase_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600
	void SetWpnRarity(enum Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, FortWeaponItemDefinition* CallFunc_GetWeaponData_ReturnValue, enum CallFunc_GetRarity_ReturnValue, byte K2Node_Select_Default, float CallFunc_Conv_ByteToFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue);// 0xbbc0600
	void Unbind Dual Melee Swing Events(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Generic_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_ObjectToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void Bind Dual Melee Swing Events(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, FString CallFunc_Conv_ObjectToString_ReturnValue, PlayerPawn_Generic_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void Set Active Alteration Idle Particles(bool Active, bool Reset, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void UserConstructionScript();// 0xbbc0600
	void OnStatChanged_9F72D14C4573F491E38302B51F08A0B8(FName StatName, int StatValue);// 0xbbc0600
	void OnLoaded_F1C7B8E24518F4F2DE2C8DBABB95E06D(Object* Loaded);// 0xbbc0600
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void PlayRClickImpacts();// 0xbbc0600
	void OnEquippedWeaponDestory();// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void OnInitCosmeticAlterations(FortCosmeticModification CosmeticMod);// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnWeaponDetached();// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void Swing Left End();// 0xbbc0600
	void Swing Right End();// 0xbbc0600
	void OnInstigatorSet();// 0xbbc0600
	void K2_OnUnEquip();// 0xbbc0600
	void SwingRight_Common();// 0xbbc0600
	void SwingLeft_Common();// 0xbbc0600
	void Swing Left();// 0xbbc0600
	void Swing Right();// 0xbbc0600
	void Swing Left 2();// 0xbbc0600
	void Swing Right 2();// 0xbbc0600
	void Anim Trails Notify(bool bActive);// 0xbbc0600
	void Anim Trails Disable();// 0xbbc0600
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void TODCheck(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	void HandleKillWatch();// 0xbbc0600
	void UpdateBasedOnKills(int Watched Kills);// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_DualWield_Generic(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetPI_ReturnValue, enum CallFunc_GetWieldStance_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_GetPI_ReturnValue, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, FName K2Node_CustomEvent_StatName, int K2Node_CustomEvent_StatValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, byte CallFunc_GetCoreAnimation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool Temp_bool_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_Event_bPersistentFire, bool K2Node_Event_bSecondaryFire, enum CallFunc_GetWieldStance_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, int Temp_int_Variable, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FortCosmeticModification K2Node_Event_CosmeticMod, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsAssetNull_ReturnValue, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FName Temp_name_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, FortWeaponItemDefinition* CallFunc_GetWeaponData_ReturnValue, Texture2D* CallFunc_GetSmallPreviewImage_ReturnValue, FName CallFunc_GetIdleFXSocketName_ReturnValue, Texture2D* CallFunc_GetOrLoadSynchronously_ReturnValue, FName CallFunc_GetSwingFXSocketName_ReturnValue, byte CallFunc_GetCoreAnimation_ReturnValue, enum CallFunc_GetWieldStance_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FName CallFunc_GetIdleFXOffhandSocketName_ReturnValue, FName CallFunc_GetSwingFXOffhandSocketName_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, Pawn* CallFunc_GetInstigator_ReturnValue, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailsPSC_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailsOffhandPSC_ReturnValue, int Temp_int_Variable, bool CallFunc_DoesSocketExist_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int Temp_int_Variable, bool CallFunc_K2_AttachToComponent_ReturnValue, int Temp_int_Variable, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetIdleOffhandVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetIdleOffhandVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetIdleOffhandVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetSwingOffhandVFXComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetSwingOffhandVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetSwingOffhandVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, enum CallFunc_GetCurrentSwingState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_CustomEvent_bActive, bool CallFunc_GetUseAnimTrailsPSC_ReturnValue, FName CallFunc_GetAnimTrailsSecondSocketName_ReturnValue, FName CallFunc_GetAnimTrailsFirstSocketName_ReturnValue, float CallFunc_GetAnimTrailsWidth_ReturnValue, bool CallFunc_GetUseAnimTrailsOffhandPSC_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailsOffhandPSC_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetAnimTrailsOffhandSecondSocketName_ReturnValue, FName CallFunc_GetAnimTrailsOffhandFirstSocketName_ReturnValue, float CallFunc_GetAnimTrailsOffhandWidth_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_GetUseAnimTrailsOffhandPSC_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailsOffhandPSC_ReturnValue, bool CallFunc_GetUseAnimTrailsPSC_ReturnValue, bool CallFunc_IsValid_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FXSystemComponent* CallFunc_GetAnimTrailVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailVFXComponent_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetCurrentSwingState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, enum CallFunc_GetCurrentSwingState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, const HitResult K2Node_Event_HitResult, byte K2Node_Event_ImpactPhysicalSurface, FXSystemComponent* K2Node_Event_SpawnedPSC, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, int Temp_int_Variable, Rotator CallFunc_MakeRotFromX_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte K2Node_CustomEvent_CurrentDayPhase, byte K2Node_CustomEvent_PreviousDayPhase, bool K2Node_CustomEvent_bAtCreation, byte CallFunc_GetCoreAnimation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FortTimeOfDayManager* CallFunc_GetTimeOfDayManagerFromContext_ReturnValue, byte CallFunc_GetPreviousDayPhase_ReturnValue, Rotator K2Node_Select_Default, Rotator CallFunc_ComposeRotators_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, int Temp_int_Variable, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_Watched_Kills, FortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, int Temp_int_Variable, FXSystemComponent* CallFunc_GetIdleOffhandVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetSwingOffhandVFXComponent_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, int Temp_int_Variable, Transform CallFunc_GetSocketTransform_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_VSize_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, byte Temp_byte_Variable, bool CallFunc_BooleanAND_ReturnValue, int K2Node_Select_Default, Pawn* CallFunc_GetInstigator_ReturnValue, PlayerPawn_Generic_Parent_C* K2Node_DynamicCast_AsPlayer_Pawn_Generic_Parent, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_GetSocketTransform_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_VSize_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortWeaponPickaxeDualWieldAthena.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	SkeletalMeshComponentBudgeted* WeaponMeshOffhand;//[Offset: 0xe50, Size: 8]
	FXSystemComponent* SwingOffhandVFX;//[Offset: 0xe58, Size: 8]
	FXSystemComponent* IdleOffhandVFX;//[Offset: 0xe60, Size: 8]
	FXSystemComponent* AnimTrailsOffhandPSC;//[Offset: 0xe68, Size: 8]
	ParticleSystem* AnimTrailsOffhandPSCTemplate;//[Offset: 0xe70, Size: 8]
	NiagaraSystem* AnimTrailsOffhandNiagaraAsset;//[Offset: 0xe78, Size: 8]
	bool bUseAnimTrailsOffhandPSC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	FName AnimTrailsOffhandFirstSocketName;//[Offset: 0xe84, Size: 8]
	FName AnimTrailsOffhandSecondSocketName;//[Offset: 0xe8c, Size: 8]
	float AnimTrailsOffhandWidth;//[Offset: 0xe94, Size: 4]
	FName IdleFXOffhandSocketName;//[Offset: 0xe98, Size: 8]
	FName SwingFXOffhandSocketName;//[Offset: 0xea0, Size: 8]
	SoundBase* OffhandGenericImpactSound;//[Offset: 0xea8, Size: 8]
	AnimMontage* PickaxeOffhandHarvestingMontage;//[Offset: 0xeb0, Size: 8]
	AnimMontage* PickaxeOffhandEquipMontage;//[Offset: 0xeb8, Size: 8]
	NiagaraSystem*[] OffhandImpactNiagaraPhysicalSurfaceEffectInstances;//[Offset: 0xec8, Size: 16]
	SoundBase* OffhandImpactPhysicalSurfaceSounds;//[Offset: 0xed8, Size: 8]
	ParticleSystem* OffhandImpactPhysicalSurfaceEffects;//[Offset: 0xfb0, Size: 8]
	NiagaraSystem*[] OffhandImpactNiagaraPhysicalSurfaceEffects;//[Offset: 0x1088, Size: 16]
	enum CurrentWieldStance;//[Offset: 0x1098, Size: 1]
	FortWeaponAdditionalData_SingleWieldState* EffectiveSingleWieldState;//[Offset: 0x10a0, Size: 8]
	FortWeaponAdditionalData_SingleWieldState* LastAppliedWieldState;//[Offset: 0x10a8, Size: 8]
	AnimMontage* OriginalEquipAnimation;//[Offset: 0x10b8, Size: 8]
	void SetCurrentSwingState(enum NewState);// 0xd2222f4
	void OnRep_WieldStance();// 0xd2222e0
	enum GetWieldStance();// 0xb6d92f4
	SkeletalMeshComponentBudgeted* GetWeaponMeshOffhand();// 0xd2222c4
	bool GetUseAnimTrailsOffhandPSC();// 0xb6d92d8
	FXSystemComponent* GetSwingOffhandVFXComponent();// 0xb6d92a4
	ParticleSystemComponent* GetSwingOffhandPSC();// 0xd222290
	FName GetSwingFXOffhandSocketName();// 0xd222274
	FXSystemComponent* GetIdleOffhandVFXComponent();// 0xb6d9270
	ParticleSystemComponent* GetIdleOffhandPSC();// 0xd222240
	FName GetIdleFXOffhandSocketName();// 0xb6d9254
	enum GetCurrentSwingState();// 0xb6d9238
	float GetAnimTrailsOffhandWidth();// 0xb6d921c
	FName GetAnimTrailsOffhandSecondSocketName();// 0xb6d91fc
	ParticleSystem* GetAnimTrailsOffhandPSCTemplate();// 0xd222224
	FXSystemComponent* GetAnimTrailsOffhandPSC();// 0xb6d91e0
	NiagaraSystem* GetAnimTrailsOffhandNiagaraAsset();// 0xd222208
	FName GetAnimTrailsOffhandFirstSocketName();// 0xb6d91c0
	FXSystemComponent* CreateAnimTrailOffhandFX();// 0xd2221d4

--------------------------------
Class: FortWeaponAdditionalData_SingleWieldState.FortWeaponAdditionalData.Object
	GameplayTag AssociatedTagVariant;//[Offset: 0x28, Size: 8]
	class FortGameplayAbility* PrimaryFireAbility_InState;//[Offset: 0x30, Size: 40]
	FortWeaponAnimSet* AnimSet_InState;//[Offset: 0x58, Size: 40]
	AnimMontage* EquipMontage_InState;//[Offset: 0x80, Size: 40]
	bool bHideOffhandMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bUseSeparatePreviewOffsets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	Vector ImpactFxPreviewOffset;//[Offset: 0xac, Size: 12]
	Vector OffHandPreviewOffset;//[Offset: 0xb8, Size: 12]
	Rotator OffHandPreviewRotation;//[Offset: 0xc4, Size: 12]
	Rotator InitialPreviewRotation;//[Offset: 0xd0, Size: 12]
	float FrontendPreviewScale;//[Offset: 0xdc, Size: 4]
	FortUICameraFrameTargetBounds CameraFramingBounds;//[Offset: 0xe0, Size: 20]
	byte AnimationStyleToUse;//[Offset: 0xf4, Size: 1]
	class FortGameplayAbility* LiveAbility;//[Offset: 0xf8, Size: 8]
	FortWeaponAnimSet* LiveAnimSet;//[Offset: 0x100, Size: 8]
	AnimMontage* LiveMontage;//[Offset: 0x108, Size: 8]

--------------------------------
Class: B_Melee_Impact_Pickaxe_Athena_StarWand_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	ParticleSystemComponent* P_StarWand_PickAxe_Impact;//[Offset: 0xec0, Size: 8]
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void ExecuteUbergraph_B_Melee_Impact_Pickaxe_Athena_StarWand(int EntryPoint, const HitResult K2Node_Event_HitResult, byte K2Node_Event_ImpactPhysicalSurface, FXSystemComponent* K2Node_Event_SpawnedPSC);// 0xbbc0600

--------------------------------
Class: B_Melee_Impact_Pickaxe_Angel_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);// 0xbbc0600
	void ExecuteUbergraph_B_Melee_Impact_Pickaxe_Angel(int EntryPoint, bool K2Node_Event_bPersistentFire, bool K2Node_Event_bSecondaryFire, ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_LexaFemale1H_C.B_Athena_Pickaxe_DualWield_Generic_C.FortWeaponPickaxeDualWieldAthena.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1158, Size: 8]
	void Swing Left 2();// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_LexaFemale1H(int EntryPoint, FXSystemComponent* CallFunc_GetAnimTrailsOffhandPSC_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailVFXComponent_ReturnValue);// 0xbbc0600

--------------------------------
Class: CCPM_Hightower_Tapas_Backpack_C.CCPM_Base_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 8]
	NiagaraComponent* Backpack_Lightning;//[Offset: 0x408, Size: 8]
	NiagaraComponent* Backpack_Sparkles;//[Offset: 0x410, Size: 8]
	void OnPawnAndPartChanged();// 0xbbc0600
	void ExecuteUbergraph_CCPM_Hightower_Tapas_Backpack(int EntryPoint, bool CallFunc_IsValid_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xbbc0600

--------------------------------
Class: CCPM_Base_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x398, Size: 8]
	StaticMeshComponent*[] StaticMeshComponents;//[Offset: 0x3a0, Size: 16]
	ParticleSystemComponent*[] CascadeComponents;//[Offset: 0x3b0, Size: 16]
	PlayerPawn_Athena_C* Last Pawn;//[Offset: 0x3c0, Size: 8]
	bool Disable Particles during Skydive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool Disable Particles in Vehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool bIsDriving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	LinearColor Event Log Color;//[Offset: 0x3cc, Size: 16]
	FString[] Hidding prefixes;//[Offset: 0x3e0, Size: 16]
	MeshComponent* Character Part Type;//[Offset: 0x3f0, Size: 8]
	bool Enable Debug Printing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	void overrideCharacterPartType(byte Part Type, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue);// 0xbbc0600
	void attachParticleSystem(ParticleSystemComponent* Particle System Component, FName Socket Name, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0xbbc0600
	void UserConstructionScript(FString ComponentName, ParticleSystemComponent* cascadeComponent, StaticMeshComponent* MeshComponent, int Temp_int_Array_Index_Variable, FString CallFunc_GetDisplayName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SceneComponent*[] CallFunc_GetChildrenComponents_Children, FString[] K2Node_MakeArray_Array, SceneComponent* CallFunc_Array_Get_Item, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, FString CallFunc_Conv_NameToString_ReturnValue, FName[] K2Node_MakeArray_Array, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbc0600
	void Reset Exit Vehicle();// 0xbbc0600
	void Reset Enter Vehicle();// 0xbbc0600
	void OnBeginSkydiving();// 0xbbc0600
	void OnEndSkydiving();// 0xbbc0600
	void Close();// 0xbbc0600
	void OnTargetingOrFirstPersonCameraChanged();// 0xbbc0600
	void EnteringHidingProp();// 0xbbc0600
	void ExitingHidingProp();// 0xbbc0600
	void Open();// 0xbbc0600
	void EnterVehicle();// 0xbbc0600
	void ExitVehicle();// 0xbbc0600
	void PlayerMovementTick(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0xbbc0600
	void isHiddingInProp(bool IsHidden);// 0xbbc0600
	void OnPawnAndPartChanged();// 0xbbc0600
	void Attachment();// 0xbbc0600
	void ExecuteUbergraph_CCPM_Base(int EntryPoint, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInVehicle_ReturnValue, bool CallFunc_IsDrivingVehicle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float K2Node_CustomEvent_DeltaSeconds, Vector K2Node_CustomEvent_OldLocation, Vector K2Node_CustomEvent_OldVelocity, bool K2Node_CustomEvent_isHidden, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, bool CallFunc_IsInFrontend_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSkydiving_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_CCPM_Base_Niagara_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x398, Size: 8]
	GameplayTag Niagara;//[Offset: 0x3a0, Size: 8]
	MeshComponent* Character Part Type;//[Offset: 0x3a8, Size: 8]
	bool Activate Particles During Skydive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool isDriving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool Disable Particles in Vehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	PlayerPawn_Athena_C* Last Pawn;//[Offset: 0x3b8, Size: 8]
	PlayerPawn_Athena_C* PlayerPawn;//[Offset: 0x3c0, Size: 8]
	bool Enable Stats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	FortStatManagerTag Stat Tag;//[Offset: 0x3cc, Size: 8]
	bool Activate Particles After Skydive End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool Debug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	bool Activate Particles on Vehicle Exit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 1]
	bool Activate Particles in Front End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d7, Size: 1]
	bool Debug Res;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	LinearColor Debug Color;//[Offset: 0x3dc, Size: 16]
	float Time;//[Offset: 0x3ec, Size: 4]
	bool Activate Particles on Res In;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bIsLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	GameplayTagContainer getNiagaraSuperLevelParticles(const GameplayTag[] K2Node_MakeArray_Array, GameplayTagContainer CallFunc_MakeGameplayTagContainerFromArray_ReturnValue);// 0xbbc0600
	void debug FX(FString Print String);// 0xbbc0600
	void getIsFrontEnd(out bool IsInFrontEnd, bool CallFunc_IsInFrontend_ReturnValue);// 0xbbc0600
	void isStageStatRequirementsMet();// 0xbbc0600
	void set Niagara System User Variable (Bool)(FName Name, bool Value, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void set Niagara System User Variable (Color)(FName Name, LinearColor Value, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void set Niagara System User Variable (Vector)(FName Name, Vector Value, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void set Niagara System User Variable (Int)(FName Name, int Value, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void set Niagara System User Variable (Float)(FName Name, float Value, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void getIsDriving(out bool isDriving);// 0xbbc0600
	void getNiagaraParticles(out GameplayTagContainer Gameplay Tag Container, const GameplayTag[] K2Node_MakeArray_Array, GameplayTagContainer CallFunc_MakeGameplayTagContainerFromArray_ReturnValue);// 0xbbc0600
	void OnStatChanged_B170ACAB47DC1A9DBE8D138BF0A01420(FName StatName, int StatValue);// 0xbbc0600
	void OnComponentsReady_697782874F9B58BD916BDBA30537E29E();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ResOut();// 0xbbc0600
	void ResIn();// 0xbbc0600
	void OnTargetingOrFirstPersonCameraChanged();// 0xbbc0600
	void Watch Stats();// 0xbbc0600
	void On Stat Canged(const FName Stat Name, int Stat Value);// 0xbbc0600
	void Morning Phase(bool At Creation);// 0xbbc0600
	void Day Phase(bool At Creation);// 0xbbc0600
	void Evening Phase(bool At Creation);// 0xbbc0600
	void Night Phase(bool At Creation);// 0xbbc0600
	void OnDayPhaseChanged(byte CurrentDayPhase, byte PreviousDayPhase, bool bAtCreation);// 0xbbc0600
	void Reset Exit Vehicle();// 0xbbc0600
	void Reset Enter Vehicle();// 0xbbc0600
	void Vehicle Entry();// 0xbbc0600
	void OnExitVehicle();// 0xbbc0600
	void OnEnterVehicle(out const interface class VehicleEntered);// 0xbbc0600
	void OnPawnAndPartChanged();// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void Character Movement Updated(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0xbbc0600
	void OnBeginSkydiving();// 0xbbc0600
	void OnEndSkydiving();// 0xbbc0600
	void isHiddenInProp(bool IsHidden);// 0xbbc0600
	void Enter Vehicle();// 0xbbc0600
	void Exit Vehicle();// 0xbbc0600
	void Manage Particles();// 0xbbc0600
	void ExecuteUbergraph_B_CCPM_Base_Niagara(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_StatName, int K2Node_CustomEvent_StatValue, int Temp_int_Variable, FName Temp_name_Variable, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FortAsyncAction_WaitManagedParticles* CallFunc_SpawnManagedParticlesWithCallback_ReturnValue, byte K2Node_Event_EndPlayReason, bool CallFunc_IsValid_ReturnValue, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container, bool CallFunc_IsInFrontend_ReturnValue, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, const FName K2Node_CustomEvent_Stat_Name, int K2Node_CustomEvent_Stat_Value, FortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue, bool K2Node_CustomEvent_At_Creation, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_At_Creation, bool K2Node_CustomEvent_At_Creation, bool K2Node_CustomEvent_At_Creation, byte K2Node_Event_CurrentDayPhase, byte K2Node_Event_PreviousDayPhase, bool K2Node_Event_bAtCreation, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_getIsDriving_isDriving, const interface class K2Node_Event_VehicleEntered, bool CallFunc_getIsDriving_isDriving, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_CustomEvent_DeltaSeconds, Vector K2Node_CustomEvent_OldLocation, Vector K2Node_CustomEvent_OldVelocity, bool Temp_bool_Has_Been_Initd_Variable, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container, bool K2Node_CustomEvent_isHidden, bool CallFunc_BooleanAND_ReturnValue, FXSystemComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FXSystemComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, FXSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container, bool Temp_bool_IsClosed_Variable, bool CallFunc_getIsFrontEnd_IsInFrontEnd, bool Temp_bool_IsClosed_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortAsyncAction_WaitManagedParticles.BlueprintAsyncActionBase.Object
	MulticastInlineDelegateProperty OnComponentsReady;//[Size: 16]
	Object* MyContext;//[Offset: 0x40, Size: 8]
	static FortAsyncAction_WaitManagedParticles* SpawnManagedParticlesWithCallback(Object* ParticleOwner);// 0xb6d3bb8

--------------------------------
Class: CCPM_Backpack_M_MED_Viper_Glitch_C.CCPM_Base_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 8]
	ParticleSystemComponent* P_Backpack_M_MED_Viper_Glitch;//[Offset: 0x408, Size: 8]
	PlayerPawn_Athena_C* LastPawn;//[Offset: 0x410, Size: 8]
	void OnPawnAndPartChanged();// 0xbbc0600
	void ExecuteUbergraph_CCPM_Backpack_M_MED_Viper_Glitch(int EntryPoint, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, const byte CallFunc_GetCharacterPartType_ReturnValue, SkeletalMeshComponent* CallFunc_GetSkeletalMeshForPartType_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0xbbc0600

--------------------------------
Class: FortQuickBarsAthena.FortQuickBars.FortClientOnlyActor.Actor.Object
	float ServerPrimarySlotsUpdateDelay;//[Offset: 0x4d8, Size: 4]

--------------------------------
Class: GC_Athena_OutsideSafeZone_C.FortGameplayCueNotify_Loop.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7b8, Size: 8]
	PointLightComponent* Random Lighting Light;//[Offset: 0x7c0, Size: 8]
	float LightningFlashTL_LERP_3FDEC95248645BE865DCD0840F99915A;//[Offset: 0x7c8, Size: 4]
	byte LightningFlashTL__Direction_3FDEC95248645BE865DCD0840F99915A;//[Offset: 0x7cc, Size: 1]
	TimelineComponent* LightningFlashTL;//[Offset: 0x7d0, Size: 8]
	SoundBase* Storm Sound;//[Offset: 0x7d8, Size: 8]
	float LightningFlashDiameter;//[Offset: 0x7e0, Size: 4]
	float LightningFlashHeight;//[Offset: 0x7e4, Size: 4]
	Vector Lightning Spawn Location;//[Offset: 0x7e8, Size: 12]
	float %ChanceOfLightningMesh;//[Offset: 0x7f4, Size: 4]
	float Lightning Intensity;//[Offset: 0x7f8, Size: 4]
	float LightningIntensityMin;//[Offset: 0x7fc, Size: 4]
	float LightningIntensityMax;//[Offset: 0x800, Size: 4]
	float LightningTimelinePlaySpeedMin;//[Offset: 0x804, Size: 4]
	float LightningTimelinePlaySpeedMax;//[Offset: 0x808, Size: 4]
	PlayerPawn_Athena_C* Player Pawn;//[Offset: 0x810, Size: 8]
	float LightningFlashRepeatDelayMin;//[Offset: 0x818, Size: 4]
	float LightningFlashRepeatDelayMax;//[Offset: 0x81c, Size: 4]
	int Storm Stage;//[Offset: 0x820, Size: 4]
	GameplayTag StormAudioTag_Low;//[Offset: 0x824, Size: 8]
	GameplayTag StormAudioTag_Medium;//[Offset: 0x82c, Size: 8]
	GameplayTag StormAudioTag_High;//[Offset: 0x834, Size: 8]
	void Random Lighting Flashes(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Get_Location_in_Circle_XY_Location_Local_Space, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xbbc0600
	void Get Location in Circle XY(out Vector Location Local Space, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_RandomFloat_ReturnValue, float CallFunc_GetPI_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Cos_ReturnValue, float CallFunc_Sin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue);// 0xbbc0600
	void RemoveStormAudio(PlayerPawn_Athena_C* PlayerPawnAthena, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void AddStormAudio(PlayerPawn_Athena_C* PlayerPawnAthena, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void LightningFlashTL__FinishedFunc();// 0xbbc0600
	void LightningFlashTL__UpdateFunc();// 0xbbc0600
	void OnLoopingStart(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents);// 0xbbc0600
	void OnRemoval(Actor* MyTarget, out const GameplayCueParameters Parameters, out const ParticleSystemComponent*[] ParticleComponents, out const AudioComponent*[] AudioComponents, MatineeCameraShake* BurstCameraShakeInstance, DecalActor* BurstDecalInstance);// 0xbbc0600
	void FlashTimeline();// 0xbbc0600
	void ExecuteUbergraph_GC_Athena_OutsideSafeZone(int EntryPoint, float CallFunc_RandomFloatInRange_ReturnValue, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const ParticleSystemComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, MatineeCameraShake* K2Node_Event_BurstCameraShakeInstance, DecalActor* K2Node_Event_BurstDecalInstance, int CallFunc_Subtract_IntInt_ReturnValue, AmbientAudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, Actor* K2Node_Event_MyTarget, const GameplayCueParameters K2Node_Event_Parameters, const ParticleSystemComponent*[] K2Node_Event_ParticleComponents, const AudioComponent*[] K2Node_Event_AudioComponents, ParticleSystemComponent* CallFunc_Array_Get_Item, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, float CallFunc_Lerp_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GameplayTag K2Node_Select_Default, AmbientAudioSubsystem* CallFunc_GetWorldSubsystem_ReturnValue);// 0xbbc0600

--------------------------------
Class: AmbientAudioSubsystem.WorldSubsystem.Subsystem.Object
	MulticastInlineDelegateProperty OnTagChanged;//[Size: 16]
	MulticastInlineDelegateProperty OnEntryChanged;//[Size: 16]
	AmbientVolume*[] GlobalVolumes;//[Offset: 0x50, Size: 16]
	void RemoveGameplayTag(GameplayTag GameplayTag);// 0x7f6a800
	void RemoveAmbientEntry(FName AmbientName);// 0x7f6ae0c
	void AddGameplayTag(GameplayTag GameplayTag);// 0x7f6ad64
	void AddAmbientEntry(FName AmbientName, AmbientAudioDataAsset* Asset, int Priority, float CrossfadeTime);// 0x7f6a8a8

--------------------------------
Class: AmbientVolume.Volume.Brush.Actor.Object
	AmbientAudioDataAsset* AmbientAsset;//[Offset: 0x258, Size: 8]
	int Priority;//[Offset: 0x260, Size: 4]
	float CrossfadeTime;//[Offset: 0x264, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bGlobal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	void SetPriority(int NewPriority);// 0x7f6b70c
	void SetEnabled(bool bNewEnabled);// 0x7f6b5b4
	void SetCrossfadeTime(float NewCrossfadeTime);// 0x7f6b664
	void SetAmbientAsset(AmbientAudioDataAsset* NewAmbientAsset);// 0x7f6b50c
	void OnRep_bEnabled();// 0x7f6b4f0

--------------------------------
Class: B_Athena_Pickaxe_Elastic_Cosmic_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	void UserConstructionScript(ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void FrontEndIdle();// 0xbbc0600
	void ReceiveEndPlay(byte EndPlayReason);// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_Elastic_Cosmic(int EntryPoint, FXSystemComponent* CallFunc_GetSwingVFXComponent_ReturnValue, bool Temp_bool_IsClosed_Variable, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly, bool Temp_bool_Has_Been_Initd_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, Galileo_Ferry_Axe_AnimBP_C* K2Node_DynamicCast_AsGalileo_Ferry_Axe_Anim_BP, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue, byte K2Node_Event_EndPlayReason, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Pistol_Light_PDW_Athena_C.B_Pistol_Auto_C.B_Pistol_Generic_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object

--------------------------------
Class: B_Pistol_Auto_C.B_Pistol_Generic_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object

--------------------------------
Class: B_Pistol_Generic_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object

--------------------------------
Class: CCPM_M_HenchmanTough_C.CCPM_Base_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 8]
	ParticleSystemComponent* P_BlankEffect_Idle;//[Offset: 0x408, Size: 8]
	PlayerPawn_Athena_C* LastPawn;//[Offset: 0x410, Size: 8]
	AthenaItemWrapDefinition* WeaponWrapToUse;//[Offset: 0x418, Size: 40]
	int SL_LastValue;//[Offset: 0x440, Size: 4]
	TimerHandle SL_RefreshTimeHandler;//[Offset: 0x448, Size: 8]
	int SL_StartLevel;//[Offset: 0x450, Size: 4]
	int SL_EndLevel;//[Offset: 0x454, Size: 4]
	float EndRadius;//[Offset: 0x458, Size: 4]
	void ApplyLevelParam(int Level, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue);// 0xbbc0600
	void ApplyOverrideToItems(out FortItem*[] Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FortItem* CallFunc_Array_Get_Item, GUID CallFunc_GetItemGuid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FortPlayerControllerAthena* CallFunc_GetAssociatedAthenaController_AsFort_Player_Controller_Athena, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void GetAssociatedAthenaController(out FortPlayerControllerAthena* AsFort Player Controller Athena, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, Controller* CallFunc_GetController_ReturnValue, Actor* CallFunc_GetVehicleActor_ReturnValue, FortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, FortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void Death Check(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void UserConstructionScript(float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue);// 0xbbc0600
	void OnStatChanged_C1F573F044C3FF9843EFC3B1C5BCF9DD(FName StatName, int StatValue);// 0xbbc0600
	void OnPawnAndPartChanged();// 0xbbc0600
	void OnActualStatChange();// 0xbbc0600
	void HackyWorkaroundRefreshTimerGuy();// 0xbbc0600
	void ResetSafetyGate();// 0xbbc0600
	void OnPostResIn();// 0xbbc0600
	void InitializeVariabels();// 0xbbc0600
	void ExecuteUbergraph_CCPM_M_HenchmanTough(int EntryPoint, float CallFunc_Conv_IntToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, float CallFunc_GetGameTimeInSeconds_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, FortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_IsClosed_Variable, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, FName Temp_name_Variable, int Temp_int_Variable, int CallFunc_Max_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, FName K2Node_CustomEvent_StatName, int K2Node_CustomEvent_StatValue, float CallFunc_Conv_IntToFloat_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600

--------------------------------
Class: CCPM_M_HenchmanTough_FX_C.CCPM_Base_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 8]
	ParticleSystemComponent* P_Player_Super_LevelUp;//[Offset: 0x408, Size: 8]
	ParticleSystemComponent* P_BlankEffect_Idle;//[Offset: 0x410, Size: 8]
	PlayerPawn_Athena_C* LastPawn;//[Offset: 0x418, Size: 8]
	AthenaItemWrapDefinition* WeaponWrapToUse;//[Offset: 0x420, Size: 40]
	int SL_LastValue;//[Offset: 0x448, Size: 4]
	TimerHandle SL_RefreshTimeHandler;//[Offset: 0x450, Size: 8]
	int SL_StartLevel;//[Offset: 0x458, Size: 4]
	int SL_EndLevel;//[Offset: 0x45c, Size: 4]
	float EndRadius;//[Offset: 0x460, Size: 4]
	void ApplyLevelParam(int Level, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue);// 0xbbc0600
	void ApplyOverrideToItems(out FortItem*[] Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FortItem* CallFunc_Array_Get_Item, GUID CallFunc_GetItemGuid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FortPlayerControllerAthena* CallFunc_GetAssociatedAthenaController_AsFort_Player_Controller_Athena, bool CallFunc_IsValid_ReturnValue);// 0xbbc0600
	void GetAssociatedAthenaController(out FortPlayerControllerAthena* AsFort Player Controller Athena, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, Controller* CallFunc_GetController_ReturnValue, Actor* CallFunc_GetVehicleActor_ReturnValue, FortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, FortPlayerControllerAthena* K2Node_DynamicCast_AsFort_Player_Controller_Athena, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	void Death Check(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, PlayerPawn_Athena_C* K2Node_DynamicCast_AsPlayer_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbc0600
	void UserConstructionScript(float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue);// 0xbbc0600
	void OnStatChanged_2E79BA2044449410FBBC4F88F309DC3B(FName StatName, int StatValue);// 0xbbc0600
	void OnPawnAndPartChanged();// 0xbbc0600
	void OnActualStatChange();// 0xbbc0600
	void HackyWorkaroundRefreshTimerGuy();// 0xbbc0600
	void ResetSafetyGate();// 0xbbc0600
	void OnPostResIn();// 0xbbc0600
	void InitializeVariabels();// 0xbbc0600
	void ExecuteUbergraph_CCPM_M_HenchmanTough_FX(int EntryPoint, float CallFunc_Conv_IntToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, float CallFunc_GetGameTimeInSeconds_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, FortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_IsClosed_Variable, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, FName Temp_name_Variable, int Temp_int_Variable, int CallFunc_Max_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, FName K2Node_CustomEvent_StatName, int K2Node_CustomEvent_StatValue, float CallFunc_Conv_IntToFloat_ReturnValue, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0xbbc0600

--------------------------------
Class: B_CCPM_Backpack_AncientGladiator_Niagara_C.B_CCPM_Base_Niagara_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 8]
	NiagaraComponent* NS_Idle;//[Offset: 0x400, Size: 8]
	void getIsFrontEnd(out bool IsInFrontEnd, bool CallFunc_getIsFrontEnd_IsInFrontEnd);// 0xbbc0600
	void getNiagaraParticles(out GameplayTagContainer Gameplay Tag Container, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void set Niagara System User Variable (Bool)(FName Name, bool Value);// 0xbbc0600
	void set Niagara System User Variable (Vector)(FName Name, Vector Value);// 0xbbc0600
	void set Niagara System User Variable (Int)(FName Name, int Value);// 0xbbc0600
	void set Niagara System User Variable (Float)(FName Name, float Value);// 0xbbc0600
	void set Niagara System User Variable (Color)(FName Name, LinearColor Value);// 0xbbc0600
	void getIsDriving(out bool isDriving, bool CallFunc_getIsDriving_isDriving);// 0xbbc0600
	void Morning Phase(bool At Creation);// 0xbbc0600
	void Day Phase(bool At Creation);// 0xbbc0600
	void Evening Phase(bool At Creation);// 0xbbc0600
	void Night Phase(bool At Creation);// 0xbbc0600
	void OnHitPawn(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xbbc0600
	void Exit Vehicle();// 0xbbc0600
	void OnTargetingOrFirstPersonCameraChanged();// 0xbbc0600
	void Enter Vehicle();// 0xbbc0600
	void ResOut();// 0xbbc0600
	void ResIn();// 0xbbc0600
	void OnEndSkydiving();// 0xbbc0600
	void OnBeginSkydiving();// 0xbbc0600
	void Character Movement Updated(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0xbbc0600
	void OnPawnAndPartChanged();// 0xbbc0600
	void ExecuteUbergraph_B_CCPM_Backpack_AncientGladiator_Niagara(int EntryPoint, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, bool K2Node_Event_At_Creation, bool K2Node_Event_At_Creation, bool K2Node_Event_At_Creation, bool K2Node_Event_At_Creation, Actor* K2Node_Event_SelfActor, Actor* K2Node_Event_OtherActor, Vector K2Node_Event_NormalImpulse, const HitResult K2Node_Event_Hit, float K2Node_Event_DeltaSeconds, Vector K2Node_Event_OldLocation, Vector K2Node_Event_OldVelocity, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Revolver_Scrap_Athena_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1348, Size: 8]
	StaticMeshComponent* Reload_QuickReload;//[Offset: 0x1350, Size: 8]
	StaticMeshComponent* Reload_Ammo;//[Offset: 0x1358, Size: 8]
	void ReceiveBeginPlay();// 0xbbc0600
	void ExecuteUbergraph_B_Revolver_Scrap_Athena(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_SoundIndicator_01_C.FortSoundCameraLensEffect.FortEmitterCameraLensEffectDirectional.EmitterCameraLensEffectBase.Emitter.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390, Size: 8]
	RuntimeFloatCurve Gunshot Falloff Long Range;//[Offset: 0x398, Size: 136]
	RuntimeFloatCurve Chest Falloff;//[Offset: 0x420, Size: 136]
	RuntimeFloatCurve Footsteps Falloff;//[Offset: 0x4a8, Size: 136]
	RuntimeFloatCurve Gunshot Falloff Mid Range;//[Offset: 0x530, Size: 136]
	RuntimeFloatCurve Gunshot Falloff Melee;//[Offset: 0x5b8, Size: 136]
	RuntimeFloatCurve Glider Falloff;//[Offset: 0x640, Size: 136]
	RuntimeFloatCurve Plane Falloff;//[Offset: 0x6c8, Size: 136]
	RuntimeFloatCurve GetStrengthCurveForActiveType(enum Temp_byte_Variable, RuntimeFloatCurve Temp_struct_Variable, RuntimeFloatCurve CallFunc_GetWeaponCurve_ReturnValue, RuntimeFloatCurve K2Node_Select_Default);// 0xbbc0600
	LinearColor GetDefaultTint(enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor K2Node_Select_Default);// 0xbbc0600
	Texture* GetDefaultIcon(enum Temp_byte_Variable, Texture* Temp_object_Variable, Texture* Temp_object_Variable, Texture* Temp_object_Variable, Texture* Temp_object_Variable, Texture* Temp_object_Variable, Texture* Temp_object_Variable, Texture* Temp_object_Variable, Texture* K2Node_Select_Default);// 0xbbc0600
	RuntimeFloatCurve GetWeaponCurve(bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, RuntimeFloatCurve K2Node_Select_Default, RuntimeFloatCurve K2Node_Select_Default);// 0xbbc0600
	void ExecuteUbergraph_B_SoundIndicator_01(int EntryPoint);// 0xbbc0600

--------------------------------
Class: B_CCPM_Base_Niagara_TarBackpack_C.B_CCPM_Base_Niagara_C.CustomCharacterPartModifier.CustomCosmeticModifierBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 8]
	NiagaraComponent* PersistentBack;//[Offset: 0x400, Size: 8]
	int CosmeticLoadoutInt;//[Offset: 0x408, Size: 4]
	void getIsFrontEnd(out bool IsInFrontEnd, bool CallFunc_getIsFrontEnd_IsInFrontEnd);// 0xbbc0600
	void getNiagaraParticles(out GameplayTagContainer Gameplay Tag Container, GameplayTagContainer CallFunc_getNiagaraParticles_Gameplay_Tag_Container);// 0xbbc0600
	void set Niagara System User Variable (Bool)(FName Name, bool Value);// 0xbbc0600
	void set Niagara System User Variable (Vector)(FName Name, Vector Value);// 0xbbc0600
	void set Niagara System User Variable (Int)(FName Name, int Value);// 0xbbc0600
	void set Niagara System User Variable (Float)(FName Name, float Value);// 0xbbc0600
	void set Niagara System User Variable (Color)(FName Name, LinearColor Value);// 0xbbc0600
	void getIsDriving(out bool isDriving, bool CallFunc_getIsDriving_isDriving);// 0xbbc0600
	void OnStatChanged_75BB69D4490A5D5611BD2191568B0FDF(FName StatName, int StatValue);// 0xbbc0600
	void Morning Phase(bool At Creation);// 0xbbc0600
	void Day Phase(bool At Creation);// 0xbbc0600
	void Evening Phase(bool At Creation);// 0xbbc0600
	void Night Phase(bool At Creation);// 0xbbc0600
	void OnHitPawn(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0xbbc0600
	void Exit Vehicle();// 0xbbc0600
	void OnTargetingOrFirstPersonCameraChanged();// 0xbbc0600
	void Enter Vehicle();// 0xbbc0600
	void ResOut();// 0xbbc0600
	void ResIn();// 0xbbc0600
	void OnEndSkydiving();// 0xbbc0600
	void OnBeginSkydiving();// 0xbbc0600
	void Character Movement Updated(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0xbbc0600
	void OnPawnAndPartChanged();// 0xbbc0600
	void ExecuteUbergraph_B_CCPM_Base_Niagara_TarBackpack(int EntryPoint, FName K2Node_CustomEvent_StatName, int K2Node_CustomEvent_StatValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, FName Temp_name_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Variable, NiagaraSystem* Temp_object_Variable, NiagaraSystem* Temp_object_Variable, bool K2Node_Event_At_Creation, NiagaraSystem* K2Node_Select_Default, bool K2Node_Event_At_Creation, bool K2Node_Event_At_Creation, bool K2Node_Event_At_Creation, Actor* K2Node_Event_SelfActor, Actor* K2Node_Event_OtherActor, Vector K2Node_Event_NormalImpulse, const HitResult K2Node_Event_Hit, float K2Node_Event_DeltaSeconds, Vector K2Node_Event_OldLocation, Vector K2Node_Event_OldVelocity, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, FortPlayerPawn* CallFunc_GetAssociatedPlayerPawn_ReturnValue, FortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue, bool CallFunc_IsValid_ReturnValue, const GameplayTag[] K2Node_MakeArray_Array, int CallFunc_GetVariantChannelActiveIndexForSlot_Index, bool CallFunc_GetVariantChannelActiveIndexForSlot_bIndexIsValid, bool CallFunc_GetVariantChannelActiveIndexForSlot_bFoundChannel, MeshComponent* CallFunc_GetSkeletalMeshForAssociatedPlayerPawnPartType_ReturnValue, NiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue);// 0xbbc0600

--------------------------------
Class: GCL_Cornfield_Movement_C.FortGameplayCueNotify_Loop.FortGameplayCueNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7b8, Size: 8]
	FortPlayerPawn* TargetPawn;//[Offset: 0x7c0, Size: 8]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters, FortPlayerPawn* K2Node_DynamicCast_AsFort_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0xbbc0600
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, Actor* PlayerPawn, delegate K2Node_CreateDelegate_OutputDelegate, FortPlayerPawnAthena* K2Node_DynamicCast_AsFort_Player_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0xbbc0600
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, delegate K2Node_CreateDelegate_OutputDelegate, FortPlayerPawnAthena* K2Node_DynamicCast_AsFort_Player_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void On Player Step();// 0xbbc0600
	void ExecuteUbergraph_GCL_Cornfield_Movement(int EntryPoint, bool Temp_bool_Variable, SoundBase* Temp_object_Variable, SoundBase* Temp_object_Variable, FortPlayerPawnAthena* K2Node_DynamicCast_AsFort_Player_Pawn_Athena, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, SoundBase* K2Node_Select_Default);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_DualWield_Generic_IceClaw1H_C.B_Athena_Pickaxe_DualWield_Generic_C.FortWeaponPickaxeDualWieldAthena.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1158, Size: 8]
	void OnInitWeaponCosmetics();// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_DualWield_Generic_IceClaw1H(int EntryPoint, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetIdleOffhandVFXComponent_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_MainFrame_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	NiagaraComponent* NS_Pickaxe_Mainframe_Male_idle;//[Offset: 0xec0, Size: 8]
	Vector4 Morning;//[Offset: 0xed0, Size: 16]
	Vector4 Day;//[Offset: 0xee0, Size: 16]
	Vector4 Evening;//[Offset: 0xef0, Size: 16]
	Vector4 Night;//[Offset: 0xf00, Size: 16]
	SkeletalMeshComponent* InstigatorSkeletalMesh;//[Offset: 0xf10, Size: 8]
	Rotator Left Rotation;//[Offset: 0xf18, Size: 12]
	Rotator Right Rotation;//[Offset: 0xf24, Size: 12]
	bool Right ?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf30, Size: 1]
	void UserConstructionScript(ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue);// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_MainFrame(int EntryPoint, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_HIstorianMale_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	NiagaraComponent* NS_Pickaxe_HistorianMale_Frontend;//[Offset: 0xec0, Size: 8]
	float Timeline_3_Time_E064B26D400361528D5B68857C3508FF;//[Offset: 0xec8, Size: 4]
	byte Timeline_3__Direction_E064B26D400361528D5B68857C3508FF;//[Offset: 0xecc, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xed0, Size: 8]
	float Timeline_2_frostAlpha_D84B604B4DF782514CBF48826B72EF2D;//[Offset: 0xed8, Size: 4]
	float Timeline_2_IceMesh_D84B604B4DF782514CBF48826B72EF2D;//[Offset: 0xedc, Size: 4]
	byte Timeline_2__Direction_D84B604B4DF782514CBF48826B72EF2D;//[Offset: 0xee0, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xee8, Size: 8]
	float Timeline_1_Icemesh_91656C4D46CE94B98485508E3FDAA3D5;//[Offset: 0xef0, Size: 4]
	float Timeline_1_frost_91656C4D46CE94B98485508E3FDAA3D5;//[Offset: 0xef4, Size: 4]
	byte Timeline_1__Direction_91656C4D46CE94B98485508E3FDAA3D5;//[Offset: 0xef8, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xf00, Size: 8]
	float Timeline_0_frostAlpha_B5DAD1124F380E43EB083D839E509CCC;//[Offset: 0xf08, Size: 4]
	float Timeline_0_IceMesh_B5DAD1124F380E43EB083D839E509CCC;//[Offset: 0xf0c, Size: 4]
	float Timeline_0_Time_B5DAD1124F380E43EB083D839E509CCC;//[Offset: 0xf10, Size: 4]
	byte Timeline_0__Direction_B5DAD1124F380E43EB083D839E509CCC;//[Offset: 0xf14, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xf18, Size: 8]
	Vector4 Morning;//[Offset: 0xf20, Size: 16]
	Vector4 Day;//[Offset: 0xf30, Size: 16]
	Vector4 Evening;//[Offset: 0xf40, Size: 16]
	Vector4 Night;//[Offset: 0xf50, Size: 16]
	SkeletalMeshComponent* InstigatorSkeletalMesh;//[Offset: 0xf60, Size: 8]
	Rotator Left Rotation;//[Offset: 0xf68, Size: 12]
	Rotator Right Rotation;//[Offset: 0xf74, Size: 12]
	bool Right ?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 1]
	int HitWeakPoint;//[Offset: 0xf84, Size: 4]
	byte Current Impact Physical Surface;//[Offset: 0xf88, Size: 1]
	byte[] WeakPoint Physical Surface;//[Offset: 0xf90, Size: 16]
	bool Is WeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 1]
	void OnRep_Is WeakPoint();// 0xbbc0600
	void OnRep_Current Impact Physical Surface();// 0xbbc0600
	void OnRep_HitWeakPoint(bool CallFunc_IsDedicatedServer_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0xbbc0600
	void UserConstructionScript(ParticleSystemComponent* CallFunc_GetIdlePSC_ReturnValue);// 0xbbc0600
	void Timeline_0__FinishedFunc();// 0xbbc0600
	void Timeline_0__UpdateFunc();// 0xbbc0600
	void Timeline_1__FinishedFunc();// 0xbbc0600
	void Timeline_1__UpdateFunc();// 0xbbc0600
	void Timeline_2__FinishedFunc();// 0xbbc0600
	void Timeline_2__UpdateFunc();// 0xbbc0600
	void Timeline_3__FinishedFunc();// 0xbbc0600
	void Timeline_3__UpdateFunc();// 0xbbc0600
	void Timeline_3__Active__EventFunc();// 0xbbc0600
	void OnWeaponAttached();// 0xbbc0600
	void OnInstigatorSet();// 0xbbc0600
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);// 0xbbc0600
	void OnInitWeaponCosmetics();// 0xbbc0600
	void OnPlayImpactFX(out const HitResult HitResult, byte ImpactPhysicalSurface, FXSystemComponent* SpawnedPSC);// 0xbbc0600
	void ReceiveBeginPlay();// 0xbbc0600
	void Stage 3();// 0xbbc0600
	void Stage 4();// 0xbbc0600
	void CE_FX(byte Impact Physical Surface);// 0xbbc0600
	void CE_FX_Client(byte Impact Physical Surface);// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_HIstorianMale(int EntryPoint, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue, int Temp_int_Variable, int CallFunc_Clamp_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, Pawn* CallFunc_GetInstigator_ReturnValue, NiagaraComponent* K2Node_DynamicCast_AsNiagara_Particle_System, bool K2Node_DynamicCast_bSuccess, FortPawn* K2Node_DynamicCast_AsFort_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_bVisible, bool K2Node_Event_bSetForLocalControllerOnly, const HitResult K2Node_Event_HitResult, byte K2Node_Event_ImpactPhysicalSurface, FXSystemComponent* K2Node_Event_SpawnedPSC, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetAnimTrailVFXComponent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, byte K2Node_CustomEvent_Impact_Physical_Surface, byte K2Node_CustomEvent_Impact_Physical_Surface, bool CallFunc_Array_Contains_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Athena_Pickaxe_Jupiter_C.B_Athena_Pickaxe_Generic_C.FortWeaponPickaxeAthena.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb8, Size: 8]
	void OnInitWeaponCosmetics();// 0xbbc0600
	void ExecuteUbergraph_B_Athena_Pickaxe_Jupiter(int EntryPoint, FXSystemComponent* CallFunc_GetIdleVFXComponent_ReturnValue, bool CallFunc_IsCosmeticObjectDisplayedInFrontendContext_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_Assault_Scrap_Athena_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1348, Size: 8]
	void ReceiveBeginPlay();// 0xbbc0600
	void ExecuteUbergraph_B_Assault_Scrap_Athena(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue);// 0xbbc0600

--------------------------------
Class: B_SMG_Scrap_Athena_C.B_Ranged_Generic_C.FortWeaponRanged.FortWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1348, Size: 8]
	void ReceiveBeginPlay();// 0xbbc0600
	void ExecuteUbergraph_B_SMG_Scrap_Athena(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue);// 0xbbc0600

--------------------------------
