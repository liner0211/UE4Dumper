Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 16]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 16]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 16]
	FString StreamingLevelsPrefix;//[Offset: 0x98, Size: 16]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xa8, Size: 8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xb0, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xb8, Size: 8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xc0, Size: 8]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0xc8, Size: 184]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x188, Size: 8]
	NavigationSystem* NavigationSystem;//[Offset: 0x210, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x218, Size: 8]
	GameStateBase* GameState;//[Offset: 0x220, Size: 8]
	AISystemBase* AISystem;//[Offset: 0x228, Size: 8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x230, Size: 8]
	Level*[] Levels;//[Offset: 0x238, Size: 16]
	LevelCollection[] LevelCollections;//[Offset: 0x248, Size: 16]
	Level* CurrentLevel;//[Offset: 0x260, Size: 8]
	GameInstance* OwningGameInstance;//[Offset: 0x268, Size: 8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x270, Size: 16]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x280, Size: 8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x288, Size: 8]
	WorldComposition* WorldComposition;//[Offset: 0x9c0, Size: 8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa12, Size: 1]

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 8]
	Model* Model;//[Offset: 0xc8, Size: 8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 16]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 16]
	float LightmapTotalSize;//[Offset: 0x118, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 16]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 16]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1dc, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1f0, Size: 8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1f8, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 8]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 16]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x6b8, Size: 8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2d8, Size: 4]
	float MinDrawDistance;//[Offset: 0x2dc, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x2e0, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x2e4, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x2e8, Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x2ec, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ed, Size: 1]
	enum LightmapType;//[Offset: 0x2ee, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ef, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ef, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ef, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ef, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f0, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f1, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f1, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f1, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f1, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f1, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f1, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f1, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f1, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2f4, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x308, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x30d, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x310, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x320, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x331, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x331, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x331, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x331, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x331, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x332, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x332, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x332, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x332, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x332, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x332, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x332, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x332, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x333, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x333, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x333, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x333, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x333, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x334, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x336, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x337, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x338, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x33c, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x340, Size: 4]
	int VisibilityId;//[Offset: 0x344, Size: 4]
	bool bUseAsyncCompilePSO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x354, Size: 4]
	float BoundsScale;//[Offset: 0x35c, Size: 4]
	float OCBoundsScale;//[Offset: 0x360, Size: 4]
	int OCBoundsExtent;//[Offset: 0x364, Size: 4]
	float LastSubmitTime;//[Offset: 0x368, Size: 4]
	float LastRenderTime;//[Offset: 0x36c, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x370, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x374, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x378, Size: 16]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x388, Size: 16]
	MaterialInterface*[] LODDefault;//[Offset: 0x3a8, Size: 16]
	BodyInstance BodyInstance;//[Offset: 0x3c8, Size: 384]
	delegate OnComponentHit;//[Offset: 0x548, Size: 16]
	delegate OnComponentBeginOverlap;//[Offset: 0x558, Size: 16]
	delegate OnComponentEndOverlap;//[Offset: 0x568, Size: 16]
	delegate OnComponentWake;//[Offset: 0x578, Size: 16]
	delegate OnComponentSleep;//[Offset: 0x588, Size: 16]
	delegate OnBeginCursorOver;//[Offset: 0x5a8, Size: 16]
	delegate OnEndCursorOver;//[Offset: 0x5b8, Size: 16]
	delegate OnClicked;//[Offset: 0x5c8, Size: 16]
	delegate OnReleased;//[Offset: 0x5d8, Size: 16]
	delegate OnInputTouchBegin;//[Offset: 0x5e8, Size: 16]
	delegate OnInputTouchEnd;//[Offset: 0x5f8, Size: 16]
	delegate OnInputTouchEnter;//[Offset: 0x608, Size: 16]
	delegate OnInputTouchLeave;//[Offset: 0x618, Size: 16]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x640, Size: 8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x648, Size: 88]
	void WakeRigidBody(FName BoneName);// 0x559f084
	void WakeAllRigidBodies();// 0x559f068
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x559efd4
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x559ef4c
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x559eed0
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x559ee4c
	void SetSimulatePhysics(bool bSimulate);// 0x559edc0
	void SetRenderInMono(bool bValue);// 0x559ed3c
	void SetRenderInMainPass(bool bValue);// 0x559ecb8
	void SetRenderCustomDepth(bool bValue);// 0x559ec34
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x559ebb0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x559eb2c
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x559ea28
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x559e918
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x559e808
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x559e704
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x559e600
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x559e4e8
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x559e3d0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x559e34c
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x559e2c8
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x559e240
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x559e1b4
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x559e030
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x559debc
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x559de00
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x559dd40
	void SetMassScale(FName BoneName, float InMassScale);// 0x559dc80
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x559db7c
	void SetMaskFilter(int InMaskFilter);// 0x559db00
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x559da48
	void SetLockedAxis(byte LockedAxis);// 0x559d9c4
	void SetLinearDamping(float InDamping);// 0x559d940
	void SetEnableGravity(bool bGravityEnabled);// 0x559d8b4
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x559d830
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x559d7b4
	void SetDrawDyeing(bool bNewDrawOutline);// 0x559d730
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x559d6b4
	void SetCustomDepthStencilValue(int Value);// 0x559d638
	void SetCullDistance(float NewCullDistance);// 0x559d5bc
	void SetConstraintMode(byte ConstraintMode);// 0x559d538
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x559d478
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x559d3f4
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x559d370
	void SetCollisionObjectType(byte Channel);// 0x559d2ec
	void SetCollisionEnabled(byte NewType);// 0x559d268
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x559d1b0
	void SetCastShadow(bool NewCastShadow);// 0x559d124
	void SetBoundsScale(float NewBoundsScale);// 0x559d0a8
	void SetAngularDamping(float InDamping);// 0x559d024
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x559cf5c
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x559ce7c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x559cd78
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x559cc98
	void SetAllMassScale(float InMassScale);// 0x559cc14
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x559cb40
	void PutRigidBodyToSleep(FName BoneName);// 0x559cac4
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x559c9fc
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x559c928
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x559c8b0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x559c5fc
	bool K2_IsQueryCollisionEnabled();// 0x559c5b4
	bool K2_IsPhysicsCollisionEnabled();// 0x559c56c
	bool K2_IsCollisionEnabled();// 0x559c528
	int K2_GetMoveIgnoreMask();// 0x559c50c
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x559c47c
	bool IsOverlappingActor(const Actor* Other);// 0x559c3ec
	bool IsGravityEnabled();// 0x559c3ac
	bool IsAnyRigidBodyAwake();// 0x559c36c
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x559c2ac
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x559c1ec
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x559c1a4
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x559c0d8
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x559c048
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x559bfb8
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x559bf14
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x559be70
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x559bdb8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x559bcb4
	int GetNumMaterials();// 0x559bc78
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x559bb98
	MaterialInterface* GetMaterial(int ElementIndex);// 0x559bb04
	float GetMassScale(FName BoneName);// 0x559ba70
	float GetMass();// 0x559ba34
	int GetMaskFilter();// 0x559ba18
	float GetLinearDamping();// 0x559b9dc
	Vector GetInertiaTensor(FName BoneName);// 0x559b944
	byte GetCollisionResponseToChannel(byte Channel);// 0x559b8b0
	FName GetCollisionProfileName();// 0x559b87c
	byte GetCollisionObjectType();// 0x559b840
	byte GetCollisionEnabled();// 0x559b804
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x559b6d8
	Vector GetCenterOfMass(FName BoneName);// 0x559b648
	float GetAngularDamping();// 0x559b60c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x559b53c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x559b46c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x559b3d8
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x559b334
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x559b290
	void ClearMoveIgnoreComponents();// 0x559b264
	void ClearMoveIgnoreActors();// 0x559b250
	bool CanCharacterStepUp(Pawn* Pawn);// 0x559b1b8
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x559b0bc
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x559afac
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x559aeb0
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x559ad38
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x559abc0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x559aac4
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x559a9c0
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x559a8c4
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x559a7c8
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x559a6c4
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x559a5c0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x559a4a8
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x559a3a4

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x118, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0x120, Size: 8]
	FName AttachSocketName;//[Offset: 0x128, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0x130, Size: 16]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x140, Size: 16]
	Vector RelativeLocation;//[Offset: 0x17c, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x188, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x194, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x200, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x210, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x218, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x220, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x228, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x230, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x238, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	byte Mobility;//[Offset: 0x23d, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x240, Size: 4]
	byte DetailMode;//[Offset: 0x244, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x290, Size: 16]
	void ToggleVisibility(bool bPropagateToChildren);// 0x55b49b0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x55b48e8
	void SetWorldScale3D(Vector NewScale);// 0x55b486c
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x55b4794
	void SetRelativeScale3D(Vector NewScale3D);// 0x55b4710
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x55b463c
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x55b4528
	void ResetRelativeTransform();// 0x55b4514
	void OnRep_Visibility(bool OldValue);// 0x55b4490
	void OnRep_Transform();// 0x55b447c
	void OnRep_AttachSocketName();// 0x55b4468
	void OnRep_AttachParent();// 0x55b4454
	void OnRep_AttachChildren();// 0x55b4440
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b4298
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b4128
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b3f7c
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b3e0c
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b3c64
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b3af4
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b3948
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b37d8
	Transform K2_GetComponentToWorld();// 0x55b3784
	Vector K2_GetComponentScale();// 0x55b374c
	Rotator K2_GetComponentRotation();// 0x55b3714
	Vector K2_GetComponentLocation();// 0x55b36dc
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x55b35a4
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x55b33e4
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x55b329c
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b30f4
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b2f84
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b2e14
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b2ca4
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b2b34
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b298c
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b281c
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x55b26ac
	bool IsVisible();// 0x55b266c
	bool IsSimulatingPhysics(FName BoneName);// 0x55b25d4
	bool IsAnySimulatingPhysics();// 0x55b2594
	Vector GetUpVector();// 0x55b255c
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x55b2474
	Rotator GetSocketRotation(FName InSocketName);// 0x55b23dc
	Quat GetSocketQuaternion(FName InSocketName);// 0x55b2340
	Vector GetSocketLocation(FName InSocketName);// 0x55b22a8
	Vector GetRightVector();// 0x55b2270
	Transform GetRelativeTransform();// 0x55b221c
	PhysicsVolume* GetPhysicsVolume();// 0x55b21e8
	void GetParentComponents(out SceneComponent*[] Parents);// 0x55b2130
	int GetNumChildrenComponents();// 0x55b20fc
	Vector GetForwardVector();// 0x55b20c4
	Vector GetComponentVelocity();// 0x55b2084
	Transform GetComponentTransformViewTranslatedBP();// 0x55b2060
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x55b1f94
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x55b1e8c
	SceneComponent* GetChildComponent(int ChildIndex);// 0x55b1e00
	FName GetAttachSocketName();// 0x55b1de4
	SceneComponent* GetAttachParent();// 0x55b1dc8
	FName[] GetAllSocketNames();// 0x55b1d24
	bool DoesSocketExist(FName InSocketName);// 0x55b1c8c
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x55b1bb4

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 88]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	FName[] ComponentTags;//[Offset: 0x90, Size: 16]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float NetUpdateFrequency;//[Offset: 0xa4, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0xb0, Size: 16]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc2, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc2, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc3, Size: 1]
	enum CreationMethod;//[Offset: 0xc5, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xc8, Size: 16]
	delegate OnComponentActivated;//[Offset: 0xe0, Size: 16]
	delegate OnComponentDeactivated;//[Offset: 0xf0, Size: 16]
	void ToggleActive();// 0x542e91c
	void SetTickGroup(byte NewTickGroup);// 0x542e8a0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x542e81c
	void SetIsReplicated(bool ShouldReplicate);// 0x542e798
	void SetComponentTickInterval(float TickInterval);// 0x542e71c
	void SetComponentTickEnabled(bool bEnabled);// 0x542e690
	void SetAutoActivate(bool bNewAutoActivate);// 0x542e604
	void SetActive(bool bNewActive, bool bReset);// 0x542e52c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x542e4a8
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x542e424
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void ReceiveEndPlay(byte EndPlayReason);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnRep_Replicates();// 0x542e410
	void OnRep_IsActive();// 0x542e3fc
	void K2_DestroyComponent(Object* Object);// 0x542e380
	bool IsComponentTickEnabled();// 0x542e348
	bool IsBeingDestroyed();// 0x542e328
	bool IsActive();// 0x542e2e8
	Actor* GetOwner();// 0x542e2cc
	float GetComponentTickInterval();// 0x542e298
	void ForceNetUpdate();// 0x542e27c
	void Deactivate();// 0x542e260
	bool ComponentHasTag(FName Tag);// 0x542e1d0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x542e14c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x542e0c8
	void Activate(bool bReset);// 0x542e03c

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x3d0, Size: 4]
	int Priority;//[Offset: 0x3d4, Size: 4]
	float FluidFriction;//[Offset: 0x3d8, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x398, Size: 1]
	Color BrushColor;//[Offset: 0x39c, Size: 4]
	int PolyFlags;//[Offset: 0x3a0, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a4, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a4, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a4, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a4, Size: 1]
	Model* Brush;//[Offset: 0x3a8, Size: 8]
	BrushComponent* BrushComponent;//[Offset: 0x3b0, Size: 8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x3c0, Size: 16]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 88]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float CustomTimeDilation;//[Offset: 0x84, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x88, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x88, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b, Size: 1]
	byte RemoteRole;//[Offset: 0x8c, Size: 1]
	Actor* Owner;//[Offset: 0x90, Size: 8]
	byte WorldParallelismID;//[Offset: 0x98, Size: 1]
	FName NetDriverName;//[Offset: 0xa8, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0xb0, Size: 52]
	float InitialLifeSpan;//[Offset: 0xe4, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xe8, Size: 64]
	byte Role;//[Offset: 0x128, Size: 1]
	byte NetDormancy;//[Offset: 0x129, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x12a, Size: 1]
	int InputPriority;//[Offset: 0x12c, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x130, Size: 8]
	float NetCullDistanceSquared;//[Offset: 0x138, Size: 4]
	int NetTag;//[Offset: 0x13c, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x144, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x148, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x14c, Size: 4]
	float NetPriority;//[Offset: 0x154, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15c, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15d, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15d, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15d, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15d, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15d, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x15e, Size: 1]
	Pawn* Instigator;//[Offset: 0x170, Size: 8]
	Actor*[] Children;//[Offset: 0x178, Size: 16]
	SceneComponent* RootComponent;//[Offset: 0x188, Size: 8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x190, Size: 16]
	FName[] Layers;//[Offset: 0x1a8, Size: 16]
	ChildActorComponent* ParentComponent;//[Offset: 0x1b8, Size: 8]
	FName[] Tags;//[Offset: 0x1c0, Size: 16]
	uint64 HiddenEditorViews;//[Offset: 0x1d0, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x1d8, Size: 16]
	delegate OnTakePointDamage;//[Offset: 0x1e8, Size: 16]
	delegate OnActorBeginOverlap;//[Offset: 0x1f8, Size: 16]
	delegate OnActorEndOverlap;//[Offset: 0x208, Size: 16]
	delegate OnBeginCursorOver;//[Offset: 0x218, Size: 16]
	delegate OnEndCursorOver;//[Offset: 0x228, Size: 16]
	delegate OnClicked;//[Offset: 0x238, Size: 16]
	delegate OnReleased;//[Offset: 0x248, Size: 16]
	delegate OnInputTouchBegin;//[Offset: 0x258, Size: 16]
	delegate OnInputTouchEnd;//[Offset: 0x268, Size: 16]
	delegate OnInputTouchEnter;//[Offset: 0x278, Size: 16]
	delegate OnInputTouchLeave;//[Offset: 0x288, Size: 16]
	delegate OnActorHit;//[Offset: 0x298, Size: 16]
	delegate OnDestroyed;//[Offset: 0x2a8, Size: 16]
	delegate OnEndPlay;//[Offset: 0x2b8, Size: 16]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x368, Size: 16]
	ActorComponent*[] InstanceComponents;//[Offset: 0x378, Size: 16]
	bool WasRecentlyRendered(float Tolerance);// 0x542b2c0
	void UserConstructionScript();// 0x3b98fe4
	void TearOff();// 0x542b2a4
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x542b1f0
	void SetTickGroup(byte NewTickGroup);// 0x542b174
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x542b0f0
	void SetReplicates(bool bInReplicates);// 0x542b06c
	void SetReplicateMovement(bool bInReplicateMovement);// 0x542afe0
	void SetOwner(Actor* NewOwner);// 0x542af5c
	void SetNetDormancy(byte NewDormancy);// 0x542aee0
	void SetLifeSpan(float InLifespan);// 0x542ae5c
	void SetActorTickInterval(float TickInterval);// 0x542ade0
	void SetActorTickEnabled(bool bEnabled);// 0x542ad5c
	void SetActorScale3D(Vector NewScale3D);// 0x542ace0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x542ac64
	void SetActorHiddenInGame(bool bNewHidden);// 0x542abd8
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x542ab54
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x542aad0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x542aa4c
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void ReceiveReInitForReplay();// 0x3b98fe4
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x3b98fe4
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x3b98fe4
	void ReceiveEndPlay(byte EndPlayReason);// 0x3b98fe4
	void ReceiveDestroyed();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x3b98fe4
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x3b98fe4
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x3b98fe4
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x3b98fe4
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x3b98fe4
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x3b98fe4
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x3b98fe4
	void ReceiveActorEndCursorOver();// 0x3b98fe4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x3b98fe4
	void ReceiveActorBeginCursorOver();// 0x3b98fe4
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x542a940
	void OnRep_ReplicateMovement();// 0x542a924
	void OnRep_ReplicatedMovement();// 0x542a908
	void OnRep_Owner();// 0x542a8ec
	void OnRep_Instigator();// 0x542a8d0
	void OnRep_AttachmentReplication();// 0x542a8b4
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x542a748
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x542a6bc
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x542a5f0
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x542a434
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x542a360
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x542a1b8
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x542a048
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5429ed8
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5429d18
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5429b94
	void K2_OnReset();// 0x3b98fe4
	void K2_OnEndViewTarget(PlayerController* PC);// 0x3b98fe4
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x3b98fe4
	SceneComponent* K2_GetRootComponent();// 0x5429b78
	Rotator K2_GetActorRotation();// 0x5429aac
	Vector K2_GetActorLocation();// 0x5429a68
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5429974
	void K2_DestroyComponent(ActorComponent* Component);// 0x54298f8
	void K2_DestroyActor();// 0x54298dc
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5429730
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5429584
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5429450
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x542931c
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5429174
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5429004
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5428e94
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5428cec
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5428b7c
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5428a0c
	bool IsOverlappingActor(const Actor* Other);// 0x542897c
	bool IsChildActor();// 0x5428944
	bool IsActorTickEnabled();// 0x542890c
	bool IsActorBeingDestroyed();// 0x54288ec
	bool HasAuthority();// 0x54288c8
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x542883c
	Vector GetVelocity();// 0x54287fc
	Transform GetTransform();// 0x54287c0
	bool GetTickableWhenPaused();// 0x5428788
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x54286fc
	byte GetRole();// 0x54286c8
	byte GetRemoteRole();// 0x54286ac
	ChildActorComponent* GetParentComponent();// 0x5428678
	Actor* GetParentActor();// 0x5428644
	Actor* GetOwner();// 0x5428628
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x5428570
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x542846c
	float GetLifeSpan();// 0x5428430
	Controller* GetInstigatorController();// 0x54283fc
	Pawn* GetInstigator();// 0x54283c8
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x5428178
	float GetInputAxisValue(const FName InputAxisName);// 0x54280ec
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x5427ea0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x5427e14
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x5427d88
	float GetGameTimeSinceCreation();// 0x5427d54
	float GetDotProductTo(const Actor* OtherActor);// 0x5427cc8
	float GetDistanceTo(const Actor* OtherActor);// 0x5427c3c
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x5427b10
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x5427a1c
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x5427990
	FName GetAttachParentSocketName();// 0x542795c
	Actor* GetAttachParentActor();// 0x5427928
	void GetAttachedActors(out Actor*[] OutActors);// 0x5427870
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x5427764
	Vector GetActorUpVector();// 0x5427710
	float GetActorTimeDilation();// 0x54276dc
	float GetActorTickInterval();// 0x54276a8
	Vector GetActorScale3D();// 0x5427670
	Vector GetActorRightVector();// 0x542761c
	Vector GetActorRelativeScale3D();// 0x54275e4
	Vector GetActorForwardVector();// 0x5427590
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x54274ac
	bool GetActorEnableCollision();// 0x542748c
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x542736c
	void ForceNetUpdate();// 0x5427350
	void ForceNetConsider();// 0x5427334
	void FlushNetDormancy();// 0x5427320
	void EnableInput(PlayerController* PlayerController);// 0x542729c
	void DisableInput(PlayerController* PlayerController);// 0x5427218
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x5427194
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5427110
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x542708c
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x5426f10
	bool ActorHasTag(FName Tag);// 0x5426e80

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x6a0, Size: 8]
	BodySetup* BrushBodySetup;//[Offset: 0x6a8, Size: 8]
	Vector PrePivot;//[Offset: 0x6b0, Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 72]
	FName BoneName;//[Offset: 0x70, Size: 8]
	byte PhysicsType;//[Offset: 0x78, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x79, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x79, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x79, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x79, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x80, Size: 8]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x88, Size: 16]
	byte CollisionReponse;//[Offset: 0x98, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0xa0, Size: 16]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0xb0, Size: 16]
	byte[] BoxCollisionEnabledList;//[Offset: 0xc0, Size: 16]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xd0, Size: 16]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xe0, Size: 16]
	byte CollisionTraceFlag;//[Offset: 0xf0, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xf8, Size: 384]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x278, Size: 16]
	float BuildScale;//[Offset: 0x288, Size: 4]
	Vector BuildScale3D;//[Offset: 0x28c, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float Restitution;//[Offset: 0x30, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float Density;//[Offset: 0x38, Size: 4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	float TireFrictionScale;//[Offset: 0x54, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 16]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: StaticMesh.Object
	MaterialInterface* ReplaceMaterial;//[Offset: 0x40, Size: 8]
	int MinLOD;//[Offset: 0x48, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x50, Size: 16]
	StaticMaterial[] StaticMaterials;//[Offset: 0x60, Size: 16]
	float LightmapUVDensity;//[Offset: 0x70, Size: 4]
	int LightMapResolution;//[Offset: 0x74, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x78, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x7c, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 8]
	int LODForCollision;//[Offset: 0x90, Size: 4]
	float CullingScreenSize;//[Offset: 0x94, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9b, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xe0, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x120, Size: 16]
	Vector PositiveBoundsExtension;//[Offset: 0x140, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x14c, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x158, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x178, Size: 16]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x188, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x198, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1a0, Size: 16]
	NavCollision* NavCollision;//[Offset: 0x1b0, Size: 8]
	int GetNumSections(int InLOD);// 0x55d8c20
	int GetNumLODs();// 0x55d8bec
	int GetMaterialIndex(FName MaterialSlotName);// 0x55d8b60
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x55d8ad4
	BoxSphereBounds GetBounds();// 0x55d8a88
	Box GetBoundingBox();// 0x55d8a3c

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x30, Size: 8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x48, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 16]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x5544bf0
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x5544aa0
	PhysicalMaterial* GetPhysicalMaterial();// 0x5544a64
	Material* GetBaseMaterial();// 0x5544a30

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 36]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 8]
	ColorMaterialInput DiffuseColor;//[Offset: 0x80, Size: 64]
	ColorMaterialInput SpecularColor;//[Offset: 0xc0, Size: 64]
	ColorMaterialInput BaseColor;//[Offset: 0x100, Size: 64]
	ScalarMaterialInput Metallic;//[Offset: 0x140, Size: 64]
	ScalarMaterialInput Specular;//[Offset: 0x180, Size: 64]
	ScalarMaterialInput Roughness;//[Offset: 0x1c0, Size: 64]
	VectorMaterialInput Normal;//[Offset: 0x200, Size: 72]
	ColorMaterialInput EmissiveColor;//[Offset: 0x248, Size: 64]
	ScalarMaterialInput Opacity;//[Offset: 0x288, Size: 64]
	ScalarMaterialInput OpacityMask;//[Offset: 0x2c8, Size: 64]
	byte MaterialDomain;//[Offset: 0x308, Size: 1]
	byte BlendMode;//[Offset: 0x309, Size: 1]
	byte DecalBlendMode;//[Offset: 0x30a, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x30b, Size: 1]
	byte ShadingModel;//[Offset: 0x30c, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x310, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x314, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	byte OITBlendMode;//[Offset: 0x319, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x320, Size: 72]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x368, Size: 72]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x3b0, Size: 64]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x3f0, Size: 64]
	ScalarMaterialInput ClearCoat;//[Offset: 0x430, Size: 64]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x470, Size: 64]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x4b0, Size: 64]
	ScalarMaterialInput Refraction;//[Offset: 0x4f0, Size: 64]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x530, Size: 72]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x770, Size: 64]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x7b0, Size: 64]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x7f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x840, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x890, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x890, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x890, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x890, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x890, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x890, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x890, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x894, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x898, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x89c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x8a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x8a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x8ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x8b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x8b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x8b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x8c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cf, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d0, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d1, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d1, Size: 1]
	byte ShadowOverride;//[Offset: 0x8d2, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x8d3, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d4, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d4, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d4, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d4, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d4, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d4, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d4, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d4, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x8d5, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d6, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d6, Size: 1]
	float MaxDisplacement;//[Offset: 0x8d8, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8dc, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8dc, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8dc, Size: 1]
	int EditorX;//[Offset: 0x8e0, Size: 4]
	int EditorY;//[Offset: 0x8e4, Size: 4]
	int EditorPitch;//[Offset: 0x8e8, Size: 4]
	int EditorYaw;//[Offset: 0x8ec, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x8f0, Size: 16]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x900, Size: 16]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x910, Size: 16]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x920, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x920, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x920, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x920, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x920, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x920, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x920, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x920, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x921, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x921, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x924, Size: 4]
	byte BlendableLocation;//[Offset: 0x928, Size: 1]
	int BlendablePriority;//[Offset: 0x92c, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 1]
	byte RefractionMode;//[Offset: 0x931, Size: 1]
	float RefractionDepthBias;//[Offset: 0x934, Size: 4]
	Guid stateID;//[Offset: 0x938, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0xa40, Size: 16]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Color Constant;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	float Constant;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Vector Constant;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	float ConstantX;//[Offset: 0x3c, Size: 4]
	float ConstantY;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x38, Size: 4]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 8]
	FString Desc;//[Offset: 0x38, Size: 16]
	Color BorderColor;//[Offset: 0x48, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x50, Size: 16]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x28, Size: 16]
	FString Description;//[Offset: 0x38, Size: 16]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x50, Size: 16]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 16]
	int LODBias;//[Offset: 0x40, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x44, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 16]
	int CachedCombinedLODBias;//[Offset: 0x60, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 1]
	byte CompressionSettings;//[Offset: 0x65, Size: 1]
	byte Filter;//[Offset: 0x66, Size: 1]
	byte LODGroup;//[Offset: 0x67, Size: 1]
	byte CrunchSetting;//[Offset: 0x68, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x6c, Size: 4]
	byte BasisSetting;//[Offset: 0x70, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x74, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	FString Tag;//[Offset: 0x58, Size: 16]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x78, Size: 16]
	NavCollisionBox[] BoxCollision;//[Offset: 0x88, Size: 16]
	class NavArea* AreaClass;//[Offset: 0x98, Size: 8]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x28, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x2c, Size: 4]
	Color DrawColor;//[Offset: 0x30, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x34, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39, Size: 1]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x54c70d8
	bool WasControllerKeyJustPressed(Key Key);// 0x54c6e88
	bool IsControllerKeyDown(Key Key);// 0x54c6c38
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x54c6ac8
	Vector GetControllerVectorKeyState(Key Key);// 0x54c6878
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x54c6794
	float GetControllerKeyTimeDown(Key Key);// 0x54c6548
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x54c6428
	float GetControllerAnalogKeyState(Key Key);// 0x54c61dc

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a0, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a0, Size: 1]
	float BaseEyeHeight;//[Offset: 0x3a4, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x3a8, Size: 1]
	enum AutoPossessAI;//[Offset: 0x3a9, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x3b0, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x3b8, Size: 8]
	byte RemoteViewPitch;//[Offset: 0x3c0, Size: 1]
	Controller* LastHitBy;//[Offset: 0x3c8, Size: 8]
	Controller* Controller;//[Offset: 0x3d0, Size: 8]
	Vector ControlInputVector;//[Offset: 0x3e0, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x3ec, Size: 12]
	void SpawnDefaultController();// 0x557ad38
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x557acac
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x557abdc
	void ReceiveUnpossessed(Controller* OldController);// 0x3b98fe4
	void ReceivePossessed(Controller* NewController);// 0x3b98fe4
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x557aaa0
	void OnRep_PlayerState();// 0x557aa84
	void OnRep_Controller();// 0x557aa68
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x557a95c
	Vector K2_GetMovementInputVector();// 0x557a924
	bool IsPlayerControlled();// 0x557a8e4
	bool IsMoveInputIgnored();// 0x557a8a4
	bool IsLocallyControlled();// 0x557a864
	bool IsControlled();// 0x557a82c
	Vector GetPendingMovementInputVector();// 0x557a7f4
	Vector GetNavAgentLocation();// 0x557a7b4
	PawnMovementComponent* GetMovementComponent();// 0x557a778
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x557a6fc
	Vector GetLastMovementInputVector();// 0x557a6c4
	Rotator GetControlRotation();// 0x557a684
	Controller* GetController();// 0x557a668
	Rotator GetBaseAimRotation();// 0x557a628
	void DetachFromControllerPendingDestroy();// 0x557a60c
	Vector ConsumeMovementInputVector();// 0x557a5cc
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x557a4c8
	void AddControllerYawInput(float Val);// 0x557a444
	void AddControllerRollInput(float Val);// 0x557a3c0
	void AddControllerPitchInput(float Val);// 0x557a33c

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x3a0, Size: 8]
	Character* Character;//[Offset: 0x3b0, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x3b8, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x3c0, Size: 8]
	Rotator ControlRotation;//[Offset: 0x3c8, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4, Size: 1]
	FName StateName;//[Offset: 0x3e0, Size: 8]
	Actor* ObservedActor;//[Offset: 0x3e8, Size: 8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x3f0, Size: 16]
	void UnPossess();// 0x547c148
	void StopMovement();// 0x547c12c
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x547c048
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x547bfbc
	void SetIgnoreLookInput(bool bNewLookInput);// 0x547bf30
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x547be28
	void ResetIgnoreMoveInput();// 0x547be0c
	void ResetIgnoreLookInput();// 0x547bdf0
	void ResetIgnoreInputFlags();// 0x547bdd4
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x3b98fe4
	void Possess(Pawn* InPawn);// 0x547bd50
	void OnRep_PlayerState();// 0x547bd34
	void OnRep_Pawn();// 0x547bd18
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x547bc00
	Pawn* K2_GetPawn();// 0x547bbcc
	bool IsPlayerController();// 0x547bbac
	bool IsMoveInputIgnored();// 0x547bb6c
	bool IsLookInputIgnored();// 0x547bb2c
	bool IsLocalPlayerController();// 0x547badc
	bool IsLocalController();// 0x547ba9c
	Actor* GetViewTarget();// 0x547ba60
	Rotator GetDesiredRotation();// 0x547ba20
	Rotator GetControlRotation();// 0x547b9e0
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x547b918
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x547b858
	PlayerController* CastToPlayerController();// 0x547b824

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x3f8, Size: 8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x400, Size: 8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x408, Size: 8]
	BasedMovementInfo BasedMovement;//[Offset: 0x410, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x440, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x470, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x474, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x480, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x490, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x4a0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x4a4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x4a8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x4ac, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x4b0, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x4b8, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bc, Size: 1]
	byte Ping;//[Offset: 0x4bd, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4be, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4be, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4be, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4be, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4be, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4be, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4be, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4be, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x4c0, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x4c4, Size: 4]
	int JumpMaxCount;//[Offset: 0x4c8, Size: 4]
	int JumpCurrentCount;//[Offset: 0x4cc, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d0, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x4d8, Size: 16]
	delegate MovementModeChangedDelegate;//[Offset: 0x4f8, Size: 16]
	delegate OnCharacterMovementUpdated;//[Offset: 0x508, Size: 16]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x518, Size: 256]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x620, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x660, Size: 16]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x670, Size: 352]
	void UnCrouch(bool bClientSimulation);// 0x5471158
	void StopJumping();// 0x547113c
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x54710b8
	void SetReplicateMovement(bool bInReplicateMovement);// 0x547102c
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x5470f7c
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5470e70
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x5470cf8
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x5470ce4
	void OnRep_RootMotion();// 0x5470cd0
	void OnRep_ReplicatedBasedMovement();// 0x5470cb4
	void OnRep_IsCrouched();// 0x5470c98
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x3b98fe4
	void OnLanded(out const HitResult Hit);// 0x3b98fe4
	void OnJumped();// 0x5470c7c
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5470b68
	void K2_UpdateCustomMovement(float DeltaTime);// 0x3b98fe4
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x3b98fe4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x3b98fe4
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x3b98fe4
	void Jump();// 0x5470b4c
	bool IsPlayingRootMotion();// 0x5470b14
	bool IsPlayingNetworkedRootMotionMontage();// 0x5470adc
	bool IsJumpProvidingForce();// 0x5470a9c
	AnimMontage* GetCurrentMontage();// 0x5470a68
	Vector GetBaseTranslationOffset();// 0x5470a40
	Rotator GetBaseRotationOffsetRotator();// 0x54709ec
	float GetAnimRootMotionTranslationScale();// 0x54709b8
	void Crouch(bool bClientSimulation);// 0x547092c
	void ClientCheatWalk();// 0x5470910
	void ClientCheatGhost();// 0x54708f4
	void ClientCheatFly();// 0x54708d8
	bool CanJumpInternal();// 0x5470898
	bool CanJump();// 0x5470860
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x54707a0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x830, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x838, Size: 8]
	class AnimInstance* AnimClass;//[Offset: 0x840, Size: 8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x848, Size: 8]
	AnimInstance*[] SubInstances;//[Offset: 0x850, Size: 16]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x860, Size: 8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x868, Size: 24]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x8b8, Size: 16]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x8c8, Size: 16]
	float GlobalAnimRateScale;//[Offset: 0x8f8, Size: 4]
	enum UseAsyncScene;//[Offset: 0x8fc, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8fd, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x8fe, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8ff, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x900, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x900, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x900, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x900, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x900, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x900, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x908, Size: 16]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x918, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x918, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x918, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x918, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x918, Size: 1]
	float ClothBlendWeight;//[Offset: 0x91c, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x924, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x930, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x930, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x930, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x931, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x932, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x938, Size: 8]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x941, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x941, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x941, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x941, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x941, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x941, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x941, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x941, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x942, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x944, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x958, Size: 16]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xa50, Size: 8]
	float TeleportDistanceThreshold;//[Offset: 0xa58, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0xa5c, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xb98, Size: 16]
	AnimSequence* SequenceToPlay;//[Offset: 0xc78, Size: 8]
	AnimationAsset* AnimToPlay;//[Offset: 0xc80, Size: 8]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc88, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc88, Size: 1]
	float DefaultPosition;//[Offset: 0xc8c, Size: 4]
	float DefaultPlayRate;//[Offset: 0xc90, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xc94, Size: 4]
	float LastPoseTickTime;//[Offset: 0xc98, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd0, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd2, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x55bd270
	void SuspendClothingSimulation();// 0x55bd25c
	void Stop();// 0x55bd248
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x55bd160
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x55bd0dc
	void SetTeleportRotationThreshold(float Threshold);// 0x55bd060
	void SetTeleportDistanceThreshold(float Threshold);// 0x55bcfe4
	void SetPosition(float InPos, bool bFireNotifies);// 0x55bcf24
	void SetPlayRate(float Rate);// 0x55bcea8
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x55bce2c
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x55bcd18
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x55bcc1c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x55bcb98
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x55bca8c
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x55bc9c4
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x55bc940
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x55bc880
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x55bc788
	void SetClothMaxDistanceScale(float Scale);// 0x55bc70c
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x55bc63c
	void SetAnimInstanceClass(class Object NewClass);// 0x55bc5c0
	void SetAnimationMode(byte InAnimationMode);// 0x55bc544
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x55bc4c8
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x55bc39c
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x55bc290
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x55bc20c
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x55bc0f8
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x55bbfe4
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x55bbeb0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x55bbe2c
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x55bbd6c
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x55bbc4c
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x55bbaf0
	void ResumeClothingSimulation();// 0x55bbadc
	void ResetClothTeleportMode();// 0x55bbac8
	void ResetAllowedAnimCurveEvaluation();// 0x55bbab4
	void ResetAllBodiesSimulatePhysics();// 0x55bbaa0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x55bb9e0
	void Play(bool bLooping);// 0x55bb95c
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x55bb7dc
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x55bb5f8
	bool IsPlaying();// 0x55bb5c0
	bool IsClothingSimulationSuspended();// 0x55bb588
	bool IsBodyGravityEnabled(FName BoneName);// 0x55bb4f8
	float GetTeleportRotationThreshold();// 0x55bb4c4
	float GetTeleportDistanceThreshold();// 0x55bb490
	AnimInstance*[] GetSubAnimInstances();// 0x55bb3ec
	Vector GetSkeletalCenterOfMass();// 0x55bb3b4
	AnimInstance* GetPostProcessInstance();// 0x55bb380
	float GetPosition();// 0x55bb34c
	float GetPlayRate();// 0x55bb318
	float GetMorphTarget(FName MorphTargetName);// 0x55bb28c
	bool GetDisableAnimCurves();// 0x55bb268
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x55bb0f8
	float GetClothMaxDistanceScale();// 0x55bb0c4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x55baff4
	AnimInstance* GetAnimInstance();// 0x55bafc0
	byte GetAnimationMode();// 0x55baf8c
	bool GetAllowedAnimCurveEvaluate();// 0x55baf6c
	void ForceClothNextUpdateTeleportAndReset();// 0x55baf58
	void ForceClothNextUpdateTeleport();// 0x55baf44
	FName FindConstraintBoneName(int ConstraintIndex);// 0x55baeb8
	void ClearMorphTargets();// 0x55baea4
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x55badb0
	void BindClothToMasterPoseComponent();// 0x55bad9c
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x55bacdc
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x55bab8c
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x55baa3c
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x55ba924

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x6c8, Size: 8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x6d0, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x738, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x760, Size: 8]
	int ForcedLodModel;//[Offset: 0x768, Size: 4]
	int MinLodModel;//[Offset: 0x76c, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x780, Size: 16]
	float StreamingDistanceMultiplier;//[Offset: 0x790, Size: 4]
	Color WireframeColor;//[Offset: 0x794, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x798, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x798, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x798, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x798, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b0, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b0, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b0, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x7b1, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b3, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b3, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c0, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c0, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x7c1, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c2, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c2, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x7c4, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x7e4, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x802, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x803, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x55c0e18
	void UnHideBoneByName(FName BoneName);// 0x55c0d9c
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x55c0c0c
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x55c0a7c
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x55c0984
	bool SetSkinWeightProfile(FName InProfileName);// 0x55c08f4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x55c07fc
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x55c0734
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x55c066c
	void SetMinLOD(int InNewMinLOD);// 0x55c05f0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x55c0574
	void SetForcedLOD(int InNewForcedLOD);// 0x55c04f8
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x55c0474
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x55c03f0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x55c0374
	bool IsUsingSkinWeightProfile();// 0x55c0354
	bool IsBoneHiddenByName(FName BoneName);// 0x55c02c4
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x55c020c
	FName GetSocketBoneName(FName InSocketName);// 0x55c0180
	FName GetParentBone(FName BoneName);// 0x55c00f4
	int GetNumLODs();// 0x55c00c0
	int GetNumBones();// 0x55c008c
	FName GetCurrentSkinWeightProfileName();// 0x55c0070
	FName GetBoneName(int BoneIndex);// 0x55bffe4
	int GetBoneIndex(FName BoneName);// 0x55bff58
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x55bfe00
	void ClearVertexColorOverride(int LODIndex);// 0x55bfd84
	void ClearSkinWeightProfile();// 0x55bfd70
	void ClearSkinWeightOverride(int LODIndex);// 0x55bfcf4
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x55bfc2c

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x6a0, Size: 16]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x5547d3c
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x5547c84
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x5547b70
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x5547a98
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x55479d0
	void SetLayerCastShadowEnable(bool Enable);// 0x5547944
	void SetCastShadow(bool NewCastShadow);// 0x55478b8
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x55477ac
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x5547714
	FName[] GetMaterialSlotNames();// 0x5547668
	MaterialInterface*[] GetMaterials();// 0x55475bc
	int GetMaterialIndex(FName MaterialSlotName);// 0x5547528
	bool GetLayerVisibilityValue(byte Layer);// 0x5547490
	bool GetLayerCastShadowValue(byte Layer);// 0x55473f8

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 8]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x54, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x70, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x8c, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x98, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xa4, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 16]
	MaterialInterface* ReplaceMaterialInterface;//[Offset: 0xe8, Size: 8]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xf0, Size: 16]
	byte SkelMirrorAxis;//[Offset: 0x100, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x101, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x108, Size: 16]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x120, Size: 8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x128, Size: 8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x130, Size: 8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x138, Size: 16]
	MorphTarget*[] MorphTargets;//[Offset: 0x148, Size: 16]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x2c8, Size: 16]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2d8, Size: 8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2e0, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x2f0, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x308, Size: 16]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x328, Size: 16]
	int NumSockets();// 0x55b78b0
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x55b77dc
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x55b7750
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x55b76c4
	BoxSphereBounds GetImportedBounds();// 0x55b7678
	BoxSphereBounds GetBounds();// 0x55b762c
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x55b7554
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x55b74c8

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x30, Size: 16]
	Transform[] RefLocalPoses;//[Offset: 0x40, Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0x160, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x170, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x180, Size: 16]
	SmartNameContainer SmartNames;//[Offset: 0x1e0, Size: 80]
	BlendProfile*[] BlendProfiles;//[Offset: 0x248, Size: 16]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x258, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x330, Size: 16]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	FName BoneName;//[Offset: 0x30, Size: 8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 12]
	Vector RelativeScale;//[Offset: 0x50, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x55bed0c
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x55bec7c

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 16]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x28, Size: 16]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x38, Size: 16]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x48, Size: 16]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x100, Size: 8]
	BodySetup*[] BodySetup;//[Offset: 0x108, Size: 16]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x358, Size: 16]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 440]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 16]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 260]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x28, Size: 80]
	Blueprint* SourceAsset;//[Offset: 0x78, Size: 40]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	class Object* ParentClass;//[Offset: 0x50, Size: 8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 16]
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 16]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 8]
	byte BlueprintType;//[Offset: 0x98, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 16]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 16]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 8]
	SCS_Node* RootNode;//[Offset: 0x50, Size: 8]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x58, Size: 16]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 80]
	FName VariableName;//[Offset: 0x88, Size: 8]
	FName AttachToName;//[Offset: 0x90, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x98, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0xa0, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xb0, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xc0, Size: 16]
	Guid VariableGuid;//[Offset: 0xd0, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	FName NativeComponentName;//[Offset: 0xe8, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	FName InternalVariableName;//[Offset: 0xf8, Size: 8]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 4]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 16]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 16]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 16]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 16]
	Guid TimelineGuid;//[Offset: 0x80, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 112]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float GetFloatValue(float InTime);// 0x5480264

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x547fc40
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x547fb5c

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 1]
	float DefaultValue;//[Offset: 0x5c, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 112]
	Vector GetVectorValue(float InTime);// 0x54814f8

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 112]
	LinearColor GetLinearColorValue(float InTime);// 0x5480704

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 16]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 8]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x28, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x30, Size: 8]
	byte RootMotionMode;//[Offset: 0x38, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x40, Size: 16]
	delegate OnMontageStarted;//[Offset: 0x50, Size: 16]
	delegate OnMontageEnded;//[Offset: 0x60, Size: 16]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x70, Size: 16]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x180, Size: 16]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x543aeec
	Pawn* TryGetPawnOwner();// 0x543aeb0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x543adf8
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x543ad08
	void SetRootMotionMode(byte Value);// 0x543ac84
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x543abcc
	void SavePoseSnapshot(FName SnapshotName);// 0x543ab48
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x543a924
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x543a774
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x543a6bc
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x543a604
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x543a54c
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x543a45c
	void Montage_Resume(const AnimMontage* Montage);// 0x543a3e0
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x543a298
	void Montage_Pause(const AnimMontage* Montage);// 0x543a21c
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x543a168
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x543a0b4
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x543a024
	bool Montage_IsActive(const AnimMontage* Montage);// 0x5439f94
	float Montage_GetPosition(const AnimMontage* Montage);// 0x5439f08
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x5439e7c
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x5439db8
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x5439d28
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x5439c9c
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x5439c10
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x5439b40
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x54399f8
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x5439930
	bool IsAnyMontagePlaying();// 0x54398f8
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x5439830
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x543971c
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x5439680
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x54395bc
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x54394f8
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x5439434
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x5439370
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x54392ac
	SkeletalMeshComponent* GetOwningComponent();// 0x5439278
	Actor* GetOwningActor();// 0x5439244
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x5439180
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x54390bc
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x5438ff8
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x5438f34
	float GetInstanceMachineWeight(int MachineIndex);// 0x5438ea8
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x5438e1c
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x5438d90
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x5438d04
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x5438c78
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x5438bec
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x5438b60
	float GetCurveValue(FName CurveName);// 0x5438ad4
	FName GetCurrentStateName(int MachineIndex);// 0x5438a48
	AnimMontage* GetCurrentActiveMontage();// 0x5438a14
	void ClearMorphTargets();// 0x5438a00
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x543891c
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x3b98fe4
	void BlueprintPostEvaluateAnimation();// 0x3b98fe4
	void BlueprintInitializeAnimation();// 0x3b98fe4
	void BlueprintBeginPlay();// 0x3b98fe4

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 4]
	FName NotifyName;//[Offset: 0x40, Size: 8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 8]
	float Duration;//[Offset: 0x58, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 48]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3b98fe4
	FString GetNotifyName();// 0x5442f70

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x78, Size: 16]
	float SequenceLength;//[Offset: 0x88, Size: 4]
	float RateScale;//[Offset: 0x8c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x90, Size: 16]
	float GetPlayLength();// 0x5444e9c

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x30, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x58, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 16]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x3b98fe4
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3b98fe4
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x3b98fe4
	FString GetNotifyName();// 0x5443af8

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa0, Size: 56]
	float BlendInTime;//[Offset: 0xd8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 56]
	float BlendOutTime;//[Offset: 0x118, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 4]
	FName SyncGroup;//[Offset: 0x120, Size: 8]
	int SyncSlotIndex;//[Offset: 0x128, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 32]
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 16]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 16]
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 16]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x188, Size: 16]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x198, Size: 16]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a8, Size: 40]
	FName TimeStretchCurveName;//[Offset: 0x1d0, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 8]
	float StartTime;//[Offset: 0x38, Size: 4]
	FName NextSectionName;//[Offset: 0x40, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 16]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 8]
	float DisplayTime;//[Offset: 0x38, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 16]
	Guid AssetGuid;//[Offset: 0x38, Size: 16]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa0, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xa8, Size: 16]
	float StreamableFirstChunkSize;//[Offset: 0xc8, Size: 4]
	float StreamableFollowingChunkSize;//[Offset: 0xcc, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x16c, Size: 1]
	byte RefPoseType;//[Offset: 0x16d, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x170, Size: 8]
	int RefFrameIndex;//[Offset: 0x178, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x17c, Size: 4]
	FName RetargetSource;//[Offset: 0x180, Size: 8]
	enum Interpolation;//[Offset: 0x188, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x18a, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x190, Size: 16]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x1a0, Size: 8]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 1]
	float GravityScale;//[Offset: 0x1ac, Size: 4]
	float MaxStepHeight;//[Offset: 0x1b0, Size: 4]
	float JumpZVelocity;//[Offset: 0x1b4, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x1b8, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x1bc, Size: 4]
	float WalkableFloorZ;//[Offset: 0x1c0, Size: 4]
	byte MovementMode;//[Offset: 0x1c4, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1c5, Size: 1]
	float GroundFriction;//[Offset: 0x1f0, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x1f4, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1f8, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1fc, Size: 4]
	float MaxFlySpeed;//[Offset: 0x200, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x204, Size: 4]
	float MaxAcceleration;//[Offset: 0x208, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x20c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x210, Size: 4]
	float BrakingFriction;//[Offset: 0x214, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x21c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x220, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x224, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x228, Size: 4]
	float AirControl;//[Offset: 0x22c, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x230, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x234, Size: 4]
	float FallingLateralFriction;//[Offset: 0x238, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x23c, Size: 4]
	float Buoyancy;//[Offset: 0x240, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x244, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x248, Size: 4]
	Rotator RotationRate;//[Offset: 0x24c, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x260, Size: 8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x268, Size: 4]
	float OutofWaterZ;//[Offset: 0x26c, Size: 4]
	float Mass;//[Offset: 0x270, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x27c, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x280, Size: 4]
	float PushForceFactor;//[Offset: 0x284, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x288, Size: 4]
	float TouchForceFactor;//[Offset: 0x28c, Size: 4]
	float MinTouchForce;//[Offset: 0x290, Size: 4]
	float MaxTouchForce;//[Offset: 0x294, Size: 4]
	float RepulsionForce;//[Offset: 0x298, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x2a0, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x2a4, Size: 4]
	Vector Acceleration;//[Offset: 0x2a8, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x2b4, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x2c0, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x2d0, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2dc, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x2e0, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x2ec, Size: 12]
	float AnalogInputModifier;//[Offset: 0x2f8, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x304, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x308, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x30c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x310, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x314, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x318, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x31c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x320, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x324, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x328, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x32c, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x330, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x334, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x338, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x33d, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x340, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x344, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x348, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x3e0, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x3e1, Size: 1]
	byte GroundMovementMode;//[Offset: 0x3e2, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e3, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e3, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e3, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e3, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e4, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e4, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e4, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e4, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e4, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e4, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e5, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e5, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e5, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e5, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e5, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e5, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e5, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e6, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e6, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e6, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3f8, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x3fc, Size: 12]
	int AvoidanceUID;//[Offset: 0x408, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x40c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x410, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x414, Size: 4]
	float AvoidanceWeight;//[Offset: 0x418, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x41c, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x4c8, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x4cc, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4d0, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4d4, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4d8, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4dc, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4e0, Size: 88]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x548, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x550, Size: 256]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x6e0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x720, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x5474b08
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x5474a8c
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x54749cc
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x5474944
	void SetGroupsToIgnore(int GroupFlags);// 0x54748c8
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5474840
	void SetGroupsToAvoid(int GroupFlags);// 0x54747c4
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x547473c
	void SetAvoidanceGroup(int GroupFlags);// 0x54746c0
	void SetAvoidanceEnabled(bool bEnable);// 0x547463c
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x5474508
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x547414c
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5473d90
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5473ae8
	float K2_GetWalkableFloorZ();// 0x5473ab4
	float K2_GetWalkableFloorAngle();// 0x5473a80
	float K2_GetModifiedMaxAcceleration();// 0x5473a44
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x547395c
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x54737c4
	bool IsWalking();// 0x5473784
	bool IsWalkable(out const HitResult Hit);// 0x54736c8
	float GetValidPerchRadius();// 0x5473694
	float GetPerchRadiusThreshold();// 0x5473660
	PrimitiveComponent* GetMovementBase();// 0x547362c
	float GetMinAnalogSpeed();// 0x54735f0
	float GetMaxJumpHeightWithJumpTime();// 0x54735b4
	float GetMaxJumpHeight();// 0x5473578
	float GetMaxBrakingDeceleration();// 0x547353c
	float GetMaxAcceleration();// 0x5473500
	Vector GetImpartedMovementBaseVelocity();// 0x54734c0
	Vector GetCurrentAcceleration();// 0x5473488
	Character* GetCharacterOwner();// 0x547346c
	float GetAnalogInputModifier();// 0x5473438
	void DisableMovement();// 0x547341c
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x547321c
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5472e8c
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5472be0
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x54729a4
	void ClientAckGoodMove(float TimeStamp);// 0x5472920
	void ClearAccumulatedForces();// 0x5472904
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5472724
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x54725e0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x5472518
	void AddForce(Vector force);// 0x5472494

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x188, Size: 8]
	Vector K2_GetInputVector();// 0x557d274
	bool IsMoveInputIgnored();// 0x557d234
	Vector GetPendingInputVector();// 0x557d1fc
	Pawn* GetPawnOwner();// 0x557d1c8
	Vector GetLastInputVector();// 0x557d190
	Vector ConsumeInputVector();// 0x557d150
	void AddInputVector(Vector WorldVector, bool bForce);// 0x557d088

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x150, Size: 32]
	float FixedPathBrakingDistance;//[Offset: 0x170, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x174, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 1]
	MovementProperties MovementState;//[Offset: 0x178, Size: 4]
	void StopMovementKeepPathing();// 0x5558848
	void StopActiveMovement();// 0x555882c
	bool IsSwimming();// 0x55587ec
	bool IsMovingOnGround();// 0x55587ac
	bool IsFlying();// 0x555876c
	bool IsFalling();// 0x555872c
	bool IsCrouching();// 0x55586ec

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0x110, Size: 8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x118, Size: 8]
	Vector Velocity;//[Offset: 0x124, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x131, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0x134, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0x140, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	void StopMovementImmediately();// 0x554ccf8
	void SnapUpdatedComponentToPlane();// 0x554ccdc
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x554cc58
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x554cbd4
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x554cb50
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x554ca90
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x554ca04
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x554c980
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x554c8fc
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x554c73c
	float K2_GetModifiedMaxSpeed();// 0x554c700
	float K2_GetMaxSpeedModifier();// 0x554c6c4
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x554c62c
	Vector GetPlaneConstraintOrigin();// 0x554c5ec
	Vector GetPlaneConstraintNormal();// 0x554c5ac
	enum GetPlaneConstraintAxisSetting();// 0x554c590
	PhysicsVolume* GetPhysicsVolume();// 0x554c554
	float GetMaxSpeed();// 0x554c518
	float GetGravityZ();// 0x554c4dc
	Vector ConstrainNormalToPlane(Vector Normal);// 0x554c444
	Vector ConstrainLocationToPlane(Vector Location);// 0x554c3ac
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x554c314

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x18, Size: 8]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x398, Size: 8]
	NavDataConfig NavDataConfig;//[Offset: 0x3a0, Size: 88]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x3f9, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x3fc, Size: 4]
	uint32 DataVersion;//[Offset: 0x400, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x4d8, Size: 16]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x20, Size: 8]
	Color Color;//[Offset: 0x28, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x2c, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x38, Size: 8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x40, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x6c0, Size: 4]
	float CapsuleRadius;//[Offset: 0x6c4, Size: 4]
	float CapsuleHeight;//[Offset: 0x6c8, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x546f65c
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x546f598
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x546f4d4
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x546f3e4
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x546f2fc
	float GetUnscaledCapsuleRadius();// 0x546f2e0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x546f2bc
	float GetUnscaledCapsuleHalfHeight();// 0x546f2a0
	float GetShapeScale();// 0x546f240
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x546f100
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x546efc8
	float GetScaledCapsuleRadius();// 0x546ef60
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x546eef0
	float GetScaledCapsuleHalfHeight();// 0x546ee88

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x6a0, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x6a8, Size: 8]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b0, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b0, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b0, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x6b8, Size: 8]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x398, Size: 4]
	byte Ping;//[Offset: 0x39c, Size: 1]
	FString PlayerName;//[Offset: 0x3a0, Size: 16]
	int PlayerID;//[Offset: 0x3c0, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c4, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c4, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c4, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c4, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c4, Size: 1]
	int StartTime;//[Offset: 0x3c8, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x3d0, Size: 8]
	FString SavedNetworkAddress;//[Offset: 0x3e0, Size: 16]
	UniqueNetIdRepl UniqueId;//[Offset: 0x3f0, Size: 24]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x3b98fe4
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x3b98fe4
	void OnRep_UniqueId();// 0x55964f8
	void OnRep_Score();// 0x55964dc
	void OnRep_PlayerName();// 0x55964c0
	void OnRep_bIsInactive();// 0x55964a4

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 4]
	float DamageFalloff;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x400, Size: 8]
	Pawn* AcknowledgedPawn;//[Offset: 0x410, Size: 8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x418, Size: 8]
	HUD* MyHUD;//[Offset: 0x428, Size: 8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x430, Size: 8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x438, Size: 8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x444, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x45c, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x460, Size: 16]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x470, Size: 16]
	float LastSpectatorStateSynchTime;//[Offset: 0x484, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x488, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x494, Size: 12]
	int ClientCap;//[Offset: 0x4a0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x4a8, Size: 8]
	class CheatManager* CheatClass;//[Offset: 0x4b0, Size: 8]
	PlayerInput* PlayerInput;//[Offset: 0x4b8, Size: 8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x4c0, Size: 16]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x562, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x563, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x5a0, Size: 8]
	NetConnection* NetConnection;//[Offset: 0x5a8, Size: 8]
	float InputYawScale;//[Offset: 0x5bc, Size: 4]
	float InputPitchScale;//[Offset: 0x5c0, Size: 4]
	float InputRollScale;//[Offset: 0x5c4, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c8, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c8, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c8, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c8, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c8, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x5cc, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x5d0, Size: 16]
	byte DefaultMouseCursor;//[Offset: 0x5e0, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x5e1, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x5e2, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x5e3, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x5e4, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x670, Size: 8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x678, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x690, Size: 8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x6d8, Size: 8]
	Vector SpawnLocation;//[Offset: 0x6e0, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x6f2, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x6f4, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x55913ac
	bool WasInputKeyJustPressed(Key Key);// 0x559115c
	void ToggleSpeaking(bool bInSpeaking);// 0x55910d0
	void SwitchLevel(FString URL);// 0x5591020
	void StopHapticEffect(enum Hand);// 0x5590fa4
	void StartFire(byte FireModeNum);// 0x5590f20
	void SetVirtualJoystickVisibility(bool bVisible);// 0x5590e94
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x5590d18
	void SetName(FString S);// 0x5590c68
	void SetMouseLocation(const int X, const int Y);// 0x5590bb4
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x5590afc
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x5590a0c
	void SetControllerLightColor(Color Color);// 0x5590994
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x55907e8
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x55906f4
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x55905e0
	void ServerViewPrevPlayer();// 0x5590580
	void ServerViewNextPlayer();// 0x5590520
	void ServerVerifyViewTarget();// 0x55904c0
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x55903cc
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x55902d8
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x558ff20
	void ServerToggleAILogging();// 0x558fec0
	void ServerShortTimeout();// 0x558fe60
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x558fd9c
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x558fca4
	void ServerRestartPlayer();// 0x558fc44
	void ServerPause();// 0x558fbe4
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x558fb44
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x558f78c
	void ServerCheckClientPossessionReliable();// 0x558f72c
	void ServerCheckClientPossession();// 0x558f6cc
	void ServerChangeName(FString S);// 0x558f5f0
	void ServerCamera(FName NewMode);// 0x558f540
	void ServerAcknowledgePossession(Pawn* P);// 0x558f490
	void SendToConsole(FString Command);// 0x558f3e0
	void RestartLevel();// 0x558f3c4
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x558f2a4
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x558f16c
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x558eefc
	void Pause();// 0x558eee0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x558ee54
	void LocalTravel(FString URL);// 0x558eda4
	bool IsInputKeyDown(Key Key);// 0x558eb54
	void GetViewportSize(out int SizeX, out int SizeY);// 0x558ea70
	SpectatorPawn* GetSpectatorPawn();// 0x558ea54
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x558e964
	Vector GetInputVectorKeyState(Key Key);// 0x558e714
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x558e5a4
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x558e4c0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x558e344
	float GetInputKeyTimeDown(Key Key);// 0x558e0f8
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x558dfd8
	float GetInputAnalogKeyState(Key Key);// 0x558dd8c
	HUD* GetHUD();// 0x558dd58
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x558db9c
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x558da2c
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x558d8bc
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x558d73c
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x558d608
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x558d4d4
	Vector GetFocalLocation();// 0x558d494
	void FOV(float NewFOV);// 0x558d410
	void EnableCheats();// 0x558d3f4
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x558d294
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x558d1ac
	void ConsoleKey(Key Key);// 0x558cf5c
	void ClientWasKicked(const FText KickReason);// 0x558ce10
	void ClientVoiceHandshakeComplete();// 0x558cdf4
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x558cc58
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x558c9c8
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x558c850
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x558c6e0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x558c578
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x558c4bc
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x558c3f4
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x558c370
	void ClientStartOnlineSession();// 0x558c354
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x558c2d0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x558c1c4
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x558c138
	void ClientSetHUD(class HUD NewHUDClass);// 0x558c0b4
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x558bfb8
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x558be50
	void ClientSetCameraMode(FName NewCamMode);// 0x558bdcc
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x558bc48
	void ClientSetBlockOnAsyncLoading();// 0x558bc2c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x558bb7c
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x558baf8
	void ClientRestart(Pawn* NewPawn);// 0x558ba74
	void ClientReset();// 0x558ba58
	void ClientRepObjRef(Object* Object);// 0x558b9d4
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x558b864
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x558b71c
	void ClientPrepareMapChange(FName levelName, bool bFirst, bool bLast);// 0x558b608
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x558b4d4
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x558b3dc
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x558b28c
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x558b154
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x558aee0
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x558ac50
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x558ab24
	void ClientIgnoreMoveInput(bool bIgnore);// 0x558aa98
	void ClientIgnoreLookInput(bool bIgnore);// 0x558aa0c
	void ClientGotoState(FName NewState);// 0x558a988
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x558a8c0
	void ClientForceGarbageCollection();// 0x558a8a4
	void ClientFlushLevelStreaming();// 0x558a890
	void ClientEndOnlineSession();// 0x558a874
	void ClientEnableNetworkVoice(bool bEnable);// 0x558a7e8
	void ClientCommitMapChange();// 0x558a7cc
	void ClientClearCameraLensEffects();// 0x558a7b0
	void ClientCapBandwidth(int Cap);// 0x558a72c
	void ClientCancelPendingMapChange();// 0x558a710
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x558a614
	void ClearAudioListenerOverride();// 0x558a600
	void Camera(FName NewMode);// 0x558a57c
	void AddYawInput(float Val);// 0x558a4f8
	void AddRollInput(float Val);// 0x558a474
	void AddPitchInput(float Val);// 0x558a3f0
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x558a36c

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x398, Size: 8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a0, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a0, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a0, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a0, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x3a8, Size: 16]
	FName[] DebugDisplay;//[Offset: 0x3c0, Size: 16]
	FName[] ToggledDebugCategories;//[Offset: 0x3d0, Size: 16]
	Canvas* Canvas;//[Offset: 0x3e0, Size: 8]
	Canvas* DebugCanvas;//[Offset: 0x3e8, Size: 8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x3f0, Size: 16]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x400, Size: 8]
	Actor* ShowDebugTargetActor;//[Offset: 0x408, Size: 8]
	Actor* UpdateShowDebugTargetActor();// 0x3b98fe4
	void ShowHUD();// 0x54c0c1c
	void ShowDebugToggleSubCategory(FName Category);// 0x54c0ba0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x54c0b24
	void ShowDebugForMoifiedTargetActor();// 0x54c0b10
	void ShowDebug(FName DebugType);// 0x54c0a8c
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x54c09cc
	void RemoveAllDebugStrings();// 0x54c09b8
	void ReceiveHitBoxRelease(const FName BoxName);// 0x3b98fe4
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x3b98fe4
	void ReceiveHitBoxClick(const FName BoxName);// 0x3b98fe4
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x3b98fe4
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x3b98fe4
	Vector Project(Vector Location);// 0x54c0928
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x54c075c
	PlayerController* GetOwningPlayerController();// 0x54c0728
	Pawn* GetOwningPawn();// 0x54c06f4
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x54c04c8
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x54c0358
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x54bff84
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x54bfd6c
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x54bfc08
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x54bf968
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x54bf784
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x54bf430
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x54bf288
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x54bf134
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x54befc0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x54bec54

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 4]
	float OrgY;//[Offset: 0x2c, Size: 4]
	float ClipX;//[Offset: 0x30, Size: 4]
	float ClipY;//[Offset: 0x34, Size: 4]
	Color DrawColor;//[Offset: 0x38, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 4]
	int SizeY;//[Offset: 0x44, Size: 4]
	Plane ColorModulate;//[Offset: 0x50, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x546de78
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x546dd80
	Vector K2_Project(Vector WorldLocation);// 0x546dcf0
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x546db78
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x546d920
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x546d5e8
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x546d484
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x546d30c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x546d134
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x546d004
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x546cf18
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x546cb28
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x546ca14

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xd8, Size: 4]
	int LevelIndex;//[Offset: 0xdc, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xe0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xe4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xf0, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfa, Size: 1]
	byte AddressX;//[Offset: 0xfb, Size: 1]
	byte AddressY;//[Offset: 0xfc, Size: 1]
	int Blueprint_GetSizeY();// 0x55e0788
	int Blueprint_GetSizeX();// 0x55e0754

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 16]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 16]
	int IsRemapped;//[Offset: 0x58, Size: 4]
	float EmScale;//[Offset: 0x5c, Size: 4]
	float Ascent;//[Offset: 0x60, Size: 4]
	float Descent;//[Offset: 0x64, Size: 4]
	float Leading;//[Offset: 0x68, Size: 4]
	int Kerning;//[Offset: 0x6c, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 168]
	int NumCharacters;//[Offset: 0x118, Size: 4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 16]
	float ScalingFactor;//[Offset: 0x130, Size: 4]
	int LegacyFontSize;//[Offset: 0x134, Size: 4]
	FName LegacyFontName;//[Offset: 0x138, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 32]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x398, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x3a0, Size: 8]
	float DefaultFOV;//[Offset: 0x3b0, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x3b8, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x3c0, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x410, Size: 1472]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x9d0, Size: 1472]
	TViewTarget ViewTarget;//[Offset: 0xf90, Size: 1488]
	TViewTarget PendingViewTarget;//[Offset: 0x1560, Size: 1488]
	CameraModifier*[] ModifierList;//[Offset: 0x1b48, Size: 16]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1b58, Size: 16]
	float FreeCamDistance;//[Offset: 0x1b68, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1b6c, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x1b78, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1b98, Size: 16]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1ba8, Size: 8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1bb0, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1bf0, Size: 16]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1c10, Size: 16]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1c20, Size: 16]
	CameraActor* AnimCameraActor;//[Offset: 0x1c30, Size: 8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c38, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c38, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c38, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c39, Size: 1]
	float ViewPitchMin;//[Offset: 0x1c3c, Size: 4]
	float ViewPitchMax;//[Offset: 0x1c40, Size: 4]
	float ViewYawMin;//[Offset: 0x1c44, Size: 4]
	float ViewYawMax;//[Offset: 0x1c48, Size: 4]
	float ViewRollMin;//[Offset: 0x1c4c, Size: 4]
	float ViewRollMax;//[Offset: 0x1c50, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x5587db8
	void StopCameraFade();// 0x5587d9c
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x5587cd4
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x5587c0c
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x5587b44
	void StopAllCameraShakes(bool bImmediately);// 0x5587ab8
	void StopAllCameraAnims(bool bImmediate);// 0x5587a2c
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x5587868
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x5587764
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x55876cc
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x5587648
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5587500
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5587240
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x55870f4
	void OnPhotographySessionStart();// 0x55870d8
	void OnPhotographySessionEnd();// 0x55870bc
	void OnPhotographyMultiPartCaptureStart();// 0x55870a0
	void OnPhotographyMultiPartCaptureEnd();// 0x5587084
	PlayerController* GetOwningPlayerController();// 0x5587048
	float GetFOVAngle();// 0x558700c
	Rotator GetCameraRotation();// 0x5586fd4
	Vector GetCameraLocation();// 0x5586f9c
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x5586f08
	void ClearCameraLensEffects();// 0x5586eec
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x3b98fe4
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x5586e58
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x5586dc4

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x29, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 8]
	float AlphaInTime;//[Offset: 0x38, Size: 4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 4]
	float Alpha;//[Offset: 0x40, Size: 4]
	bool IsDisabled();// 0x5468918
	Actor* GetViewTarget();// 0x54688dc
	void EnableModifier();// 0x54688c0
	void DisableModifier(bool bImmediate);// 0x5468834
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x3b98fe4
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x3b98fe4

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x3e8, Size: 8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x3f0, Size: 8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x3f8, Size: 8]
	Transform RelativeTransform;//[Offset: 0x400, Size: 48]
	float BaseFOV;//[Offset: 0x430, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x434, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x434, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x438, Size: 16]
	float DistFromCamera;//[Offset: 0x448, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x398, Size: 8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x3a8, Size: 16]
	delegate OnParticleBurst;//[Offset: 0x3b8, Size: 16]
	delegate OnParticleDeath;//[Offset: 0x3c8, Size: 16]
	delegate OnParticleCollide;//[Offset: 0x3d8, Size: 16]
	void ToggleActive();// 0x5494250
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5494198
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5494114
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5494060
	void SetFloatParameter(FName ParameterName, float Param);// 0x5493fa8
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5493ef0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5493e3c
	void OnRep_bCurrentlyActive();// 0x5493e20
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x5493d9c
	bool IsActive();// 0x5493d64
	void Deactivate();// 0x5493d50
	void Activate();// 0x5493d3c

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 4]
	float WarmupTime;//[Offset: 0x34, Size: 4]
	float WarmupTickRate;//[Offset: 0x38, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 16]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	byte LODMethod;//[Offset: 0x69, Size: 1]
	float[] LODDistances;//[Offset: 0x70, Size: 16]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 16]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 1]
	float Delay;//[Offset: 0xc0, Size: 4]
	float DelayLow;//[Offset: 0xc4, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xcc, Size: 4]
	enum InsignificantReaction;//[Offset: 0xd0, Size: 1]
	float InsignificanceDelay;//[Offset: 0xd4, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xd8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xdc, Size: 12]
	float MacroUVRadius;//[Offset: 0xe8, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xec, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xf0, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0x110, Size: 16]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x120, Size: 16]
	bool ContainsEmitterType(class Object TypeData);// 0x5576b18

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x38, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	int PeakActiveParticles;//[Offset: 0x4c, Size: 4]
	int InitialAllocationCount;//[Offset: 0x50, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x54, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x5c, Size: 4]
	byte DetailMode;//[Offset: 0x60, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	enum SignificanceLevel;//[Offset: 0x62, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 16]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 16]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 16]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 16]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 16]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 12]
	byte ScreenAlignment;//[Offset: 0x50, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	byte SortMode;//[Offset: 0x5d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 1]
	float EmitterDuration;//[Offset: 0x60, Size: 4]
	float EmitterDurationLow;//[Offset: 0x64, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	int EmitterLoops;//[Offset: 0x6c, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 56]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 16]
	float EmitterDelay;//[Offset: 0xc0, Size: 4]
	float EmitterDelayLow;//[Offset: 0xc4, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xc9, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 4]
	int SubImages_Vertical;//[Offset: 0xd0, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	float RandomImageTime;//[Offset: 0xd8, Size: 4]
	int RandomImageChanges;//[Offset: 0xdc, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 12]
	float MacroUVRadius;//[Offset: 0xf0, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	int MaxDrawCount;//[Offset: 0xf8, Size: 4]
	enum UVFlippingMode;//[Offset: 0xfc, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 8]
	byte BoundingMode;//[Offset: 0x108, Size: 1]
	byte OpacitySourceMode;//[Offset: 0x109, Size: 1]
	float AlphaThreshold;//[Offset: 0x10c, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x110, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x114, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0x118, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x11c, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x138, Size: 16]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x148, Size: 16]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 4]
	float MaxValue;//[Offset: 0x2c, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 56]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 56]
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 16]
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 56]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 16]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 80]
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 80]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 80]
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 4]
	float MaxValue;//[Offset: 0x2c, Size: 4]
	Vector MinValueVec;//[Offset: 0x30, Size: 12]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 1]
	FName EventName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x6a0, Size: 8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x6a8, Size: 16]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x6b8, Size: 16]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c8, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c9, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c9, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c9, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c9, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ca, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ca, Size: 1]
	byte LODMethod;//[Offset: 0x6cc, Size: 1]
	enum RequiredSignificance;//[Offset: 0x6cd, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6d0, Size: 16]
	delegate OnParticleSpawn;//[Offset: 0x6e0, Size: 16]
	delegate OnParticleBurst;//[Offset: 0x6f0, Size: 16]
	delegate OnParticleDeath;//[Offset: 0x700, Size: 16]
	delegate OnParticleCollide;//[Offset: 0x710, Size: 16]
	Vector OldPosition;//[Offset: 0x720, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x72c, Size: 12]
	float WarmupTime;//[Offset: 0x738, Size: 4]
	float WarmupTickRate;//[Offset: 0x73c, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x744, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x74c, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x770, Size: 16]
	float CustomTimeDilation;//[Offset: 0x788, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x7e0, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x7e8, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x7f0, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x7f1, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x7f2, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x820, Size: 16]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5579350
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5579224
	void SetTemplate(ParticleSystem* NewTemplate);// 0x55791a8
	void SetSocketName(FName InSocketName);// 0x557912c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5579078
	void SetLODLevel(int InLODLevel);// 0x5578ff4
	void SetFloatParameter(FName ParameterName, float Param);// 0x5578f3c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x5578e74
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5578dbc
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x5578cc0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x5578bc4
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x5578ac8
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x55789cc
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x55788d0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x55787d4
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x5578714
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x5578604
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x557847c
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x55783c8
	int GetNumActiveParticles();// 0x5578394
	MaterialInterface* GetNamedMaterial(FName InName);// 0x5578300
	int GetLODLevel();// 0x55782c4
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x55781ac
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x5578090
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x5577f78
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x5577e60
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x5577d44
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x5577c2c
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x5577b4c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x55779dc
	void EndTrails();// 0x55779c8
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x55778fc
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x55777d0

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x554423c
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x5544188
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x55440d0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x5543fe0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x5543f50
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x5543ec4
	float K2_GetScalarParameterValue(FName ParameterName);// 0x5543e38
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x5543dbc
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x5543d40
	void CopyInterpParameters(MaterialInstance* Source);// 0x5543cc4

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 8]
	MaterialInterface* Parent;//[Offset: 0x80, Size: 8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 16]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa0, Size: 16]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xb0, Size: 16]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 16]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0xd0, Size: 80]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x124, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0x158, Size: 16]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 16]
	int ActiveTab;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 16]
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float OscillationDuration;//[Offset: 0x2c, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 12]
	float AnimPlayRate;//[Offset: 0x8c, Size: 4]
	float AnimScale;//[Offset: 0x90, Size: 4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 8]
	float ShakeScale;//[Offset: 0x148, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 8]
	void ReceiveStopShake(bool bImmediately);// 0x3b98fe4
	void ReceivePlayShake(float Scale);// 0x3b98fe4
	bool ReceiveIsFinished();// 0x5469ad4
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x3b98fe4

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 8]
	float AnimLength;//[Offset: 0x30, Size: 4]
	Box BoundingBox;//[Offset: 0x34, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1376]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 16]
	FName GroupName;//[Offset: 0x40, Size: 8]
	Color GroupColor;//[Offset: 0x48, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 16]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 8]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 16]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 8]
	float PlayRate;//[Offset: 0x50, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 8]
	byte PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x5466f60
	void SetScale(float NewDuration);// 0x5466ee4
	void SetDuration(float NewDuration);// 0x5466e68
	void SetCurrentTime(float NewTime);// 0x5466dec

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 8]
	Actor* GroupActor;//[Offset: 0x30, Size: 8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 16]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 24]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 24]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 16]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 8]
	float LinCurveTension;//[Offset: 0xb8, Size: 4]
	float AngCurveTension;//[Offset: 0xbc, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc1, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 12]
	Rotator ResetRotation;//[Offset: 0x34, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x398, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x3a0, Size: 8]
	SceneComponent* SceneComponent;//[Offset: 0x3a8, Size: 8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 1]
	float AspectRatio;//[Offset: 0x3bc, Size: 4]
	float FOVAngle;//[Offset: 0x3c0, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x3c4, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x3d0, Size: 1376]
	int GetAutoActivatePlayerIndex();// 0x5466768

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2cc, Size: 4]
	float OrthoWidth;//[Offset: 0x2d0, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2d4, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x2d8, Size: 4]
	float AspectRatio;//[Offset: 0x2dc, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	byte ProjectionMode;//[Offset: 0x2e1, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x2e4, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 1376]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a8, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x5467d58
	void SetProjectionMode(byte InProjectionMode);// 0x5467ce0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x5467c68
	void SetOrthoWidth(float InOrthoWidth);// 0x5467bf0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x5467b78
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x5467b00
	void SetFieldOfView(float InFieldOfView);// 0x5467a7c
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x54679f0
	void SetAspectRatio(float InAspectRatio);// 0x5467978
	void SetActive(bool bNewActive, bool bReset);// 0x54678a0
	void RemoveBlendable(interface classNone InBlendableObject);// 0x54677a4
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x5467604
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x5467588
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5467448

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 8]
	void Walk();// 0x54783ec
	void ViewSelf();// 0x54783d0
	void ViewPlayer(FString S);// 0x5478320
	void ViewClass(class Actor DesiredClass);// 0x547829c
	void ViewActor(FName actorName);// 0x5478218
	void TriggerCrash();// 0x5478204
	void ToggleDebugCamera();// 0x54781e8
	void ToggleAILogging();// 0x54781cc
	void TestCollisionDistance();// 0x54781b0
	void Teleport();// 0x5478194
	void Summon(FString ClassName);// 0x54780e4
	void StreamLevelOut(FName PackageName);// 0x5478060
	void StreamLevelIn(FName PackageName);// 0x5477fdc
	void Slomo(float NewTimeDilation);// 0x5477f58
	void SetWorldOrigin();// 0x5477f44
	void SetNavDrawDistance(float DrawDistance);// 0x5477ec8
	void SetMouseSensitivityToDefault();// 0x5477eb4
	void ServerToggleAILogging();// 0x5477e54
	void ReceiveInitCheatManager();// 0x3b98fe4
	void ReceiveEndPlay();// 0x3b98fe4
	void RebuildNavigation();// 0x5477e38
	void PlayersOnly();// 0x5477e1c
	void OnlyLoadLevel(FName PackageName);// 0x5477d98
	void LogLoc();// 0x5477d7c
	void InvertMouse();// 0x5477d68
	void God();// 0x5477d4c
	void Ghost();// 0x5477d30
	void FreezeFrame(float Delay);// 0x5477cac
	void Fly();// 0x5477c90
	void FlushLog();// 0x5477c74
	void EnableDebugCamera();// 0x5477c58
	void DumpVoiceMutingState();// 0x5477c3c
	void DumpPartyState();// 0x5477c20
	void DumpOnlineSessionState();// 0x5477c04
	void DumpChatState();// 0x5477be8
	void DisableDebugCamera();// 0x5477bcc
	void DestroyTarget();// 0x5477bb0
	void DestroyPawns(class Pawn aClass);// 0x5477b2c
	void DestroyAllPawnsExceptTarget();// 0x5477b10
	void DestroyAll(class Actor aClass);// 0x5477a8c
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x54779d0
	void DebugCapsuleSweepPawn();// 0x54779b4
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x5477928
	void DebugCapsuleSweepClear();// 0x547790c
	void DebugCapsuleSweepChannel(byte Channel);// 0x5477888
	void DebugCapsuleSweepCapture();// 0x547786c
	void DebugCapsuleSweep();// 0x5477850
	void DamageTarget(float DamageAmount);// 0x54777cc
	void CheatScript(FString ScriptName);// 0x5477698
	void ChangeSize(float F);// 0x5477614
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x5477458
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x54772b0
	void BugIt(FString ScreenShotDescription);// 0x5477200

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6fd, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6fd, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x700, Size: 8]
	float SpeedScale;//[Offset: 0x728, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x72c, Size: 4]
	float InitialAccel;//[Offset: 0x730, Size: 4]
	float InitialDecel;//[Offset: 0x734, Size: 4]
	void ToggleDisplay();// 0x548316c
	void ShowDebugSelectedInfo();// 0x5483150
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x54830d4
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x3b98fe4
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x3b98fe4
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x3b98fe4
	Actor* GetSelectedActor();// 0x54830a0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x6a0, Size: 4]
	float FrustumAngle;//[Offset: 0x6a4, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x6a8, Size: 4]
	float FrustumStartDist;//[Offset: 0x6ac, Size: 4]
	float FrustumEndDist;//[Offset: 0x6b0, Size: 4]
	Texture* Texture;//[Offset: 0x6b8, Size: 8]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x198, Size: 16]
	FName[] InvertedAxis;//[Offset: 0x1d8, Size: 16]
	void SetMouseSensitivity(const float Sensitivity);// 0x5595bbc
	void SetBind(FName BindName, FString Command);// 0x5595ad4
	void InvertAxisKey(const Key AxisKey);// 0x559588c
	void InvertAxis(const FName AxisName);// 0x5595810
	void ClearSmoothing();// 0x55957fc

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 16]
	NetDriver* Driver;//[Offset: 0x58, Size: 8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 16]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 16]
	Actor* ViewTarget;//[Offset: 0x90, Size: 8]
	Actor* OwningActor;//[Offset: 0x98, Size: 8]
	Actor* ObserveTarget;//[Offset: 0xa0, Size: 8]
	int MaxPacket;//[Offset: 0xa8, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x160, Size: 24]
	double LastReceiveTime;//[Offset: 0x1e0, Size: 8]
	Channel*[] ChannelsToTick;//[Offset: 0x33668, Size: 16]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x336a8, Size: 8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 16]
	int MaxDownloadSize;//[Offset: 0x40, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x48, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x4c, Size: 4]
	int MaxClientRate;//[Offset: 0x50, Size: 4]
	float ServerTravelPause;//[Offset: 0x54, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x58, Size: 4]
	float RelevantTimeout;//[Offset: 0x5c, Size: 4]
	float KeepAliveTime;//[Offset: 0x60, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x64, Size: 4]
	float ConnectionTimeout;//[Offset: 0x68, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x6c, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x78, Size: 8]
	NetConnection*[] ClientConnections;//[Offset: 0x80, Size: 16]
	World* World;//[Offset: 0xa8, Size: 8]
	class Object* NetConnectionClass;//[Offset: 0xd0, Size: 8]
	Property* RoleProperty;//[Offset: 0xd8, Size: 8]
	Property* RemoteRoleProperty;//[Offset: 0xe0, Size: 8]
	FName NetDriverName;//[Offset: 0xe8, Size: 8]
	float Time;//[Offset: 0x138, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x520, Size: 80]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 16]
	float ActiveOpacity;//[Offset: 0x38, Size: 4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 4]
	float TimeUntilReset;//[Offset: 0x44, Size: 4]
	float ActivationDelay;//[Offset: 0x48, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 4]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x3f8, Size: 4]
	float BaseLookUpRate;//[Offset: 0x3fc, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x400, Size: 8]
	SphereComponent* CollisionComponent;//[Offset: 0x408, Size: 8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x410, Size: 8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	void TurnAtRate(float Rate);// 0x5485c20
	void MoveUp_World(float Val);// 0x5485b9c
	void MoveRight(float Val);// 0x5485b18
	void MoveForward(float Val);// 0x5485a94
	void LookUpAtRate(float Rate);// 0x5485a18

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x6c0, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x55cdb88
	float GetUnscaledSphereRadius();// 0x55cdb6c
	float GetShapeScale();// 0x55cdb0c
	float GetScaledSphereRadius();// 0x55cdaa4

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x6c8, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x6cc, Size: 4]
	int PreviousLODLevel;//[Offset: 0x6d0, Size: 4]
	int MinLOD;//[Offset: 0x6d4, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x6d8, Size: 8]
	byte TileLength;//[Offset: 0x6e0, Size: 1]
	byte TileNum;//[Offset: 0x6e1, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x6e8, Size: 8]
	Vector2D TileLocalMin;//[Offset: 0x6f0, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f8, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f8, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f8, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f8, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f8, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f8, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f8, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f9, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f9, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f9, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f9, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f9, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f9, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f9, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x6fc, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x700, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x708, Size: 16]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x718, Size: 16]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x730, Size: 80]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x780, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x798, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x7b0, Size: 16]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x7c0, Size: 16]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x55d9a34
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x55d99b0
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x55d9934
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x55d98b8
	void SetForcedLodModel(int NewForcedLodModel);// 0x55d983c
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x55d97c0
	void SetDirty();// 0x55d97ac
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x55d9730
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x55d9654

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x108, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x118, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0x128, Size: 40]
	delegate ForegroundColorDelegate;//[Offset: 0x150, Size: 16]
	Margin Padding;//[Offset: 0x160, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x170, Size: 16]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x180, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 16]
	WidgetTree* WidgetTree;//[Offset: 0x1a0, Size: 8]
	int Priority;//[Offset: 0x1a8, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ac, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x1b0, Size: 16]
	InputComponent* InputComponent;//[Offset: 0x1c0, Size: 8]
	void UnregisterInputComponent();// 0x4974304
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x3b98fe4
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x4974244
	void StopListeningForAllInputActions();// 0x4974230
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x49741b4
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x49740f8
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x4974040
	void SetPadding(Margin InPadding);// 0x4973fc4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x4973f48
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x4973ecc
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x4973e14
	void SetInputActionPriority(int NewPriority);// 0x4973d98
	void SetInputActionBlocking(bool bShouldBlock);// 0x4973d14
	void SetForegroundColor(SlateColor InForegroundColor);// 0x4973abc
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x4973a38
	void SetDesiredSizeInViewport(Vector2D Size);// 0x49739c0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4973944
	void SetAnchorsInViewport(Anchors Anchors);// 0x49738c8
	void SetAlignmentInViewport(Vector2D Alignment);// 0x4973850
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x49737d4
	void RemoveFromViewport();// 0x49737c0
	void RegisterInputComponent();// 0x49737ac
	void PreConstruct(bool IsDesignTime);// 0x3b98fe4
	void PlaySound(SoundBase* SoundToPlay);// 0x4973730
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x497358c
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x4973420
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x4973394
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x3b98fe4
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x3b98fe4
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x3b98fe4
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x3b98fe4
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x3b98fe4
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x3b98fe4
	void OnPaint(out PaintContext Context);// 0x3b98fe4
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x3b98fe4
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	void OnMouseCaptureLost();// 0x3b98fe4
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x3b98fe4
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x3b98fe4
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x3b98fe4
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x3b98fe4
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x3b98fe4
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x3b98fe4
	void OnFocusLost(FocusEvent InFocusEvent);// 0x3b98fe4
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x3b98fe4
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x3b98fe4
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x3b98fe4
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x3b98fe4
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x3b98fe4
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x3b98fe4
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x4973310
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x497328c
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x3b98fe4
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x3b98fe4
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x4973128
	bool IsPlayingAnimation();// 0x4973104
	bool IsListeningForInputAction(FName ActionName);// 0x4973074
	bool IsInViewport();// 0x497303c
	bool IsInteractable();// 0x3b98fe4
	bool IsAnyAnimationPlaying();// 0x4973004
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x4972f74
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x4972ee4
	Widget* GetWidgetFromName(out const FName Name);// 0x4972e48
	Pawn* GetOwningPlayerPawn();// 0x4972e14
	PlayerController* GetOwningPlayer();// 0x4972dd8
	LocalPlayer* GetOwningLocalPlayer();// 0x4972da4
	bool GetIsVisible();// 0x4972d6c
	bool GetDontPaintWhenChildEmpty();// 0x4972d34
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x4972ca8
	Anchors GetAnchorsInViewport();// 0x4972c70
	Vector2D GetAlignmentInViewport();// 0x4972c3c
	void Destruct();// 0x3b98fe4
	void Construct();// 0x3b98fe4
	void AddToViewport(int ZOrder);// 0x4972bc0
	bool AddToPlayerScreen(int ZOrder);// 0x4972b30

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 16]
	FText ToolTipText;//[Offset: 0x40, Size: 24]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0xb5, Size: 1]
	byte PreservedLayerNum;//[Offset: 0xb6, Size: 1]
	byte Cursor;//[Offset: 0xb7, Size: 1]
	enum Clipping;//[Offset: 0xb8, Size: 1]
	enum Visibility;//[Offset: 0xb9, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xc0, Size: 8]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf0, Size: 16]
	void SetVisibility(enum InVisibility);// 0x4979090
	void SetUserFocus(PlayerController* PlayerController);// 0x4979014
	void SetToolTipText(out const FText InToolTipText);// 0x4978ec0
	void SetToolTip(Widget* Widget);// 0x4978e44
	void SetRenderTranslation(Vector2D Translation);// 0x4978dcc
	void SetRenderTransformPivot(Vector2D Pivot);// 0x4978d54
	void SetRenderTransform(WidgetTransform InTransform);// 0x4978ca8
	void SetRenderShear(Vector2D Shear);// 0x4978c30
	void SetRenderScale(Vector2D Scale);// 0x4978bb8
	void SetRenderAngle(float Angle);// 0x4978b3c
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x4978a48
	void SetKeyboardFocus();// 0x4978a34
	void SetIsEnabled(bool bInIsEnabled);// 0x49789a8
	void SetCursor(byte InCursor);// 0x497892c
	void SetClipping(enum InClipping);// 0x49788b0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x49787f8
	void ResetCursor();// 0x49787e4
	void RemoveFromParent();// 0x49787c8
	EventReply OnReply__DelegateSignature();// 0x3b98fe4
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x3b98fe4
	bool IsVisible();// 0x4978790
	bool IsHovered();// 0x4978758
	void InvalidateLayoutAndVolatility();// 0x4978744
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x49786b4
	bool HasUserFocus(PlayerController* PlayerController);// 0x4978624
	bool HasMouseCapture();// 0x49785ec
	bool HasKeyboardFocus();// 0x49785b4
	bool HasFocusedDescendants();// 0x497857c
	bool HasAnyUserFocus();// 0x4978544
	Widget* GetWidget__DelegateSignature();// 0x3b98fe4
	enum GetVisibility();// 0x4978510
	Widget* GetTheTemplate();// 0x49784dc
	FText GetText__DelegateSignature();// 0x3b98fe4
	enum GetSlateVisibility__DelegateSignature();// 0x3b98fe4
	SlateColor GetSlateColor__DelegateSignature();// 0x3b98fe4
	SlateBrush GetSlateBrush__DelegateSignature();// 0x3b98fe4
	PanelWidget* GetParent();// 0x49784a8
	PlayerController* GetOwningPlayer();// 0x497846c
	byte GetMouseCursor__DelegateSignature();// 0x3b98fe4
	LinearColor GetLinearColor__DelegateSignature();// 0x3b98fe4
	bool GetIsEnabled();// 0x4978434
	int GetInt32__DelegateSignature();// 0x3b98fe4
	float GetFloat__DelegateSignature();// 0x3b98fe4
	Vector2D GetDesiredSize();// 0x4978400
	enum GetClipping();// 0x49783cc
	enum GetCheckBoxState__DelegateSignature();// 0x3b98fe4
	Geometry GetCachedGeometry();// 0x4978394
	Geometry GetCachedAllottedGeometry();// 0x497835c
	bool GetBool__DelegateSignature();// 0x3b98fe4
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x3b98fe4
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x3b98fe4
	void ForceVolatile(bool bForce);// 0x49782d8
	void ForceLayoutPrepass();// 0x49782c4
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x497823c

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 8]
	Widget* Content;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x100, Size: 16]
	bool RemoveChildAt(int Index);// 0x495ec54
	bool RemoveChild(Widget* Content);// 0x495ebc4
	bool HasChild(Widget* Content);// 0x495eb34
	bool HasAnyChildren();// 0x495eafc
	int GetChildrenCount();// 0x495eac8
	int GetChildIndex(Widget* Content);// 0x495ea3c
	Widget* GetChildAt(int Index);// 0x495e9b0
	void ClearChildren();// 0x495e99c
	PanelSlot* AddChild(Widget* Content);// 0x495e910

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 8]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x2e0, Size: 16]
	delegate OnAnimationFinished;//[Offset: 0x2f0, Size: 16]
	MovieScene* MovieScene;//[Offset: 0x300, Size: 8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x308, Size: 16]
	float GetStartTime();// 0x4979e58
	float GetEndTime();// 0x4979e24

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x50, Size: 544]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x270, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x278, Size: 80]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 16]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 16]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 16]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 16]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 16]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 8]
	FloatRange SelectionRange;//[Offset: 0x98, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0xa8, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float FixedFrameInterval;//[Offset: 0xbc, Size: 4]
	float InTime;//[Offset: 0xc0, Size: 4]
	float OutTime;//[Offset: 0xc4, Size: 4]
	float StartTime;//[Offset: 0xc8, Size: 4]
	float EndTime;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 4]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x40, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x58, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x70, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x88, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0xa0, Size: 24]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 16]
	FName DestinationProperty;//[Offset: 0x40, Size: 8]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 8]
	Widget*[] AllWidgets;//[Offset: 0x30, Size: 16]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x58, Size: 8]
	byte AspectRatioAxisConstraint;//[Offset: 0x7c, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x80, Size: 8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	int ControllerId;//[Offset: 0x108, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x38, Size: 8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x40, Size: 16]
	World* World;//[Offset: 0x78, Size: 8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 8]
	void SSSwapControllers();// 0x54bd734
	void ShowTitleSafeArea();// 0x54bd718
	void SetConsoleTarget(int PlayerIndex);// 0x54bd694

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 16]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x38, Size: 16]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x48, Size: 16]
	OnlineSession* OnlineSession;//[Offset: 0x58, Size: 8]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	void ReceiveShutdown();// 0x3b98fe4
	void ReceiveInit();// 0x3b98fe4
	void HandleTravelError(byte FailureType);// 0x3b98fe4
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x3b98fe4
	int GetDeviceLevel();// 0x54a6e3c
	void DebugRemovePlayer(int ControllerId);// 0x54a6db8
	void DebugCreatePlayer(int ControllerId);// 0x54a6d34

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 8]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x4c, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x50, Size: 4]
	float Duration;//[Offset: 0x54, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x58, Size: 8]
	float Priority;//[Offset: 0x60, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 16]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 16]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 16]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 16]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 8]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 12]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 696]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa4, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa4, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa4, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa4, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 1]
	byte DistanceType;//[Offset: 0xa6, Size: 1]
	float OmniRadius;//[Offset: 0xa8, Size: 4]
	float StereoSpread;//[Offset: 0xac, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0xb0, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0xb8, Size: 8]
	float RadiusMin;//[Offset: 0xc0, Size: 4]
	float RadiusMax;//[Offset: 0xc4, Size: 4]
	float LPFRadiusMin;//[Offset: 0xc8, Size: 4]
	float LPFRadiusMax;//[Offset: 0xcc, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd8, Size: 120]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 120]
	float LPFFrequencyAtMin;//[Offset: 0x1c8, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x1cc, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x1d0, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x1d4, Size: 4]
	float FocusAzimuth;//[Offset: 0x1d8, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x1dc, Size: 4]
	float FocusDistanceScale;//[Offset: 0x1e0, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x1e4, Size: 4]
	float FocusPriorityScale;//[Offset: 0x1e8, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x1ec, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x1f0, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x1f4, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x1f8, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x1fc, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x200, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x204, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x208, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x20c, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x210, Size: 8]
	enum ReverbSendMethod;//[Offset: 0x218, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x220, Size: 8]
	float ReverbWetLevelMin;//[Offset: 0x228, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x22c, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x230, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x234, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 120]
	float ManualReverbSendLevel;//[Offset: 0x2b0, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 16]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 16]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 16]
	Object* Payload;//[Offset: 0x38, Size: 8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 8]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 8]
	delegate OnDrop;//[Offset: 0x58, Size: 16]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 16]
	delegate OnDragged;//[Offset: 0x78, Size: 16]
	void Drop(out const PointerEvent PointerEvent);// 0x4954470
	void Dragged(out const PointerEvent PointerEvent);// 0x49542b8
	void DragCancelled(out const PointerEvent PointerEvent);// 0x4954100

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 16]
	float Duration;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x398, Size: 8]
	FName MatineeControllerName;//[Offset: 0x3a0, Size: 8]
	float PlayRate;//[Offset: 0x3a8, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ac, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ac, Size: 1]
	float ForceStartPosition;//[Offset: 0x3b0, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b4, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b4, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b4, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b4, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b4, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b4, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b4, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x3b8, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3bc, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3bc, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3bc, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3bc, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x3c0, Size: 16]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x3d8, Size: 16]
	CameraCutInfo[] CameraCuts;//[Offset: 0x3e8, Size: 16]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f8, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f8, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f8, Size: 1]
	float InterpPosition;//[Offset: 0x3fc, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x404, Size: 1]
	delegate OnPlay;//[Offset: 0x408, Size: 16]
	delegate OnStop;//[Offset: 0x418, Size: 16]
	delegate OnPause;//[Offset: 0x428, Size: 16]
	void Stop();// 0x554672c
	void SetPosition(float NewPosition, bool bJump);// 0x554666c
	void SetLoopingState(bool bNewLooping);// 0x55465e0
	void Reverse();// 0x55465c4
	void Play();// 0x55465a8
	void Pause();// 0x554658c
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x5546414
	void ChangePlaybackDirection();// 0x55463f8

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 4]
	float PathBuildTime;//[Offset: 0x2c, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 16]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 8]
	float EdSectionStart;//[Offset: 0x48, Size: 4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 16]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2d0, Size: 8]
	Actor* ChildActor;//[Offset: 0x2d8, Size: 8]
	Actor* ChildActorTemplate;//[Offset: 0x2e0, Size: 8]
	void SetChildActorClass(class Actor InClass);// 0x5479554

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x3b98fe4
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5525e44
	bool RemoteEvent(FName EventName);// 0x5525dac
	void LevelReset();// 0x3b98fe4

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3a0, Size: 8]
	BillboardComponent* GoodSprite;//[Offset: 0x3a8, Size: 8]
	BillboardComponent* BadSprite;//[Offset: 0x3b0, Size: 8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x6a0, Size: 8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6a8, Size: 1]
	float ScreenSize;//[Offset: 0x6ac, Size: 4]
	float U;//[Offset: 0x6b0, Size: 4]
	float UL;//[Offset: 0x6b4, Size: 4]
	float V;//[Offset: 0x6b8, Size: 4]
	float VL;//[Offset: 0x6bc, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x545732c
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x54571c0
	void SetSprite(Texture2D* NewSprite);// 0x545713c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x3a8, Size: 16]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b8, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b8, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b8, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b8, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b8, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b8, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b8, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b9, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b9, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b9, Size: 1]
	float KillZ;//[Offset: 0x3bc, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x3c0, Size: 8]
	float WorldGravityZ;//[Offset: 0x3c8, Size: 4]
	float GlobalGravityZ;//[Offset: 0x3cc, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x3d0, Size: 8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x3d8, Size: 8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x3e0, Size: 8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x3e8, Size: 8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x3f0, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x3f8, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x404, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x408, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	float MaxWorldSize;//[Offset: 0x410, Size: 4]
	int RegionSizeNear;//[Offset: 0x414, Size: 4]
	int RegionSizeFar;//[Offset: 0x418, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	int Graduation;//[Offset: 0x420, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x424, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x428, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x428, Size: 1]
	int VisibilityCellSize;//[Offset: 0x42c, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x430, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x431, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x434, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x484, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x4e8, Size: 24]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x500, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x528, Size: 8]
	float WorldToMeters;//[Offset: 0x530, Size: 4]
	float MonoCullingDistance;//[Offset: 0x534, Size: 4]
	BookMark* BookMarks;//[Offset: 0x538, Size: 8]
	float TimeDilation;//[Offset: 0x588, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x58c, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x590, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x594, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x598, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x59c, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x5a0, Size: 4]
	PlayerState* Pauser;//[Offset: 0x5a8, Size: 8]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b0, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b0, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x5b8, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x5c8, Size: 16]
	float[] LODRelativeDistances;//[Offset: 0x5d8, Size: 16]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	int WorldCompositionNums;//[Offset: 0x5ec, Size: 4]
	int CompositionBlockLength;//[Offset: 0x5f0, Size: 4]
	void OnRep_WorldGravityZ();// 0x55ecdec

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x398, Size: 16]
	class GameSession* GameSessionClass;//[Offset: 0x3a8, Size: 8]
	class GameStateBase* GameStateClass;//[Offset: 0x3b0, Size: 8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x3b8, Size: 8]
	class PlayerState* PlayerStateClass;//[Offset: 0x3c0, Size: 8]
	class HUD* HUDClass;//[Offset: 0x3c8, Size: 8]
	class Pawn* DefaultPawnClass;//[Offset: 0x3d0, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x3d8, Size: 8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x3e0, Size: 8]
	GameSession* GameSession;//[Offset: 0x3e8, Size: 8]
	GameStateBase* GameState;//[Offset: 0x3f0, Size: 8]
	FText DefaultPlayerName;//[Offset: 0x3f8, Size: 24]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x410, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x410, Size: 1]
	void StartPlay();// 0x54a9318
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x54a924c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x54a9154
	bool ShouldReset(Actor* ActorToReset);// 0x54a90bc
	void ReturnToMainMenuHost();// 0x54a90a0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x54a8fb8
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x54a8efc
	void RestartPlayer(Controller* NewPlayer);// 0x54a8e78
	void ResetLevel();// 0x54a8e5c
	bool PlayerCanRestart(PlayerController* Player);// 0x54a8dc4
	bool MustSpectate(PlayerController* NewPlayerController);// 0x54a8d2c
	void K2_PostLogin(PlayerController* NewPlayer);// 0x3b98fe4
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x3b98fe4
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x3b98fe4
	void K2_OnLogout(Controller* ExitingController);// 0x3b98fe4
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x3b98fe4
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x54a8c34
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x54a8b78
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x54a8af4
	bool HasMatchStarted();// 0x54a8ab4
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x54a8a30
	int GetNumSpectators();// 0x54a89f4
	int GetNumPlayers();// 0x54a89b8
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x54a8924
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x54a8824
	Actor* ChoosePlayerStart(Controller* Player);// 0x54a8790
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x54a865c
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x54a858c

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x398, Size: 4]
	int MaxPlayers;//[Offset: 0x39c, Size: 4]
	int MaxPartySize;//[Offset: 0x3a0, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x3a4, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	FName SessionName;//[Offset: 0x3a8, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x398, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x3a0, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x3a8, Size: 8]
	PlayerState*[] PlayerArray;//[Offset: 0x3b0, Size: 16]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x3c4, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x3c8, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x3cc, Size: 4]
	void OnRep_SpectatorClass();// 0x54ba894
	void OnRep_ReplicatedWorldTimeSeconds();// 0x54ba878
	void OnRep_ReplicatedHasBegunPlay();// 0x54ba85c
	void OnRep_GameModeClass();// 0x54ba840
	bool HasMatchStarted();// 0x54ba800
	bool HasBegunPlay();// 0x54ba7c0
	float GetServerWorldTimeSeconds();// 0x54ba784
	float GetPlayerStartTime(Controller* Controller);// 0x54ba6f0
	float GetPlayerRespawnDelay(Controller* Controller);// 0x54ba65c

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x398, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x39c, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x3a0, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x3a4, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x3a8, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ac, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ac, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x3b0, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x3b4, Size: 4]
	int BadPingThreshold;//[Offset: 0x3b8, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x3bc, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x3c0, Size: 4]
	float PercentForBadPing;//[Offset: 0x3c4, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x3c8, Size: 4]
	float MoveRepSize;//[Offset: 0x3cc, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x3d0, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x3d4, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x3d8, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x3dc, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x3e0, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x3e4, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x3e8, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x3ec, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x3f0, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x3f4, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x3fc, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x404, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x408, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x40c, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x410, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 16]
	float InitialDelay;//[Offset: 0x78, Size: 4]
	float FadeInTime;//[Offset: 0x7c, Size: 4]
	float Duration;//[Offset: 0x80, Size: 4]
	float FadeOutTime;//[Offset: 0x84, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 16]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x28, Size: 8]
	World* WorldAsset;//[Offset: 0x30, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x58, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 16]
	Transform LevelTransform;//[Offset: 0x80, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	int LevelLODIndex;//[Offset: 0xb4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 1]
	Color DrawColor;//[Offset: 0xbc, Size: 4]
	LinearColor LevelColor;//[Offset: 0xc0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 16]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 4]
	FString[] Keywords;//[Offset: 0xe8, Size: 16]
	delegate OnLevelLoaded;//[Offset: 0xf8, Size: 16]
	delegate OnLevelUnloaded;//[Offset: 0x108, Size: 16]
	delegate OnLevelShown;//[Offset: 0x118, Size: 16]
	delegate OnLevelHidden;//[Offset: 0x128, Size: 16]
	delegate OnStatusChanged;//[Offset: 0x138, Size: 16]
	Level* LoadedLevel;//[Offset: 0x148, Size: 8]
	Level* PendingUnloadLevel;//[Offset: 0x150, Size: 8]
	Level*[] UnloadingLevels;//[Offset: 0x158, Size: 16]
	bool IsStreamingStatePending();// 0x5526820
	bool IsLevelVisible();// 0x55267e8
	bool IsLevelLoaded();// 0x55267c4
	FName GetWorldAssetPackageFName();// 0x5526790
	LevelScriptActor* GetLevelScriptActor();// 0x552675c
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x5526620

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x3d0, Size: 16]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0, Size: 1]
	byte StreamingUsage;//[Offset: 0x3e1, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x6a0, Size: 80]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9ec, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 1]
	GameInstance* GameInstance;//[Offset: 0xa40, Size: 8]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x38, Size: 8]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	enum DataGatheringMode;//[Offset: 0x41, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x44, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x48, Size: 16]
	float UpdateInterval;//[Offset: 0x58, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x5c, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x60, Size: 16]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x70, Size: 16]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xe0, Size: 16]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xf0, Size: 16]
	enum OperationMode;//[Offset: 0x1cc, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x5555068
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x5554fec
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x5554f30
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x5554e84
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x5554e08
	void SetGeometryGatheringMode(enum NewMode);// 0x5554d8c
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x5554d78
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x5554c88
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x5554b04
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x5554a88
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x55548a0
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x55546d0
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5554500
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5554330
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x55542b0
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x5554230
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x55540ac
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5553f28
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5553d40
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5553b58
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x5553adc
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x555394c
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x5553790

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 16]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x3d0, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 16]
	Vector[] PathPoints;//[Offset: 0x38, Size: 16]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 1]
	bool IsValid();// 0x554fff8
	bool IsStringPulled();// 0x554ffc0
	bool IsPartial();// 0x554ff88
	float GetPathLength();// 0x554ff54
	float GetPathCost();// 0x554ff20
	FString GetDebugString();// 0x554fe7c
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x554fdf8
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x554fd30

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 24]
	FName AISystemModuleName;//[Offset: 0x40, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 4]
	float TestHeightDifference;//[Offset: 0x44, Size: 4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x5456c68
	int GetObjectCount();// 0x5456c34
	int GetNewAvoidanceUID();// 0x5456c00
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x5456b70

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 8]
	World* World;//[Offset: 0x38, Size: 8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x28, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 16]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 16]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xd0, Size: 16]
	double TilesStreamingTimeThreshold;//[Offset: 0xe0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xec, Size: 4]
	FString PVEBordersName;//[Offset: 0xf0, Size: 16]
	FString[] UnloadTileOnServer;//[Offset: 0x100, Size: 16]
	<FString> UnloadTileSet;//[Offset: 0x110, Size: 80]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: Water_C.OceanManager.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x460, Size: 8]

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	Vector2D GlobalWaveDirection;//[Offset: 0x39c, Size: 8]
	float GlobalWaveSpeed;//[Offset: 0x3a4, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x3a8, Size: 4]
	float DistanceCheck;//[Offset: 0x3ac, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x3b0, Size: 16]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x3c0, Size: 16]
	float NetWorkTimeOffset;//[Offset: 0x3d0, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float ModulationStartHeight;//[Offset: 0x3d8, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x3dc, Size: 4]
	float ModulationPower;//[Offset: 0x3e0, Size: 4]
	Landscape* Landscape;//[Offset: 0x3e8, Size: 8]
	Texture2D* HeightmapTexture;//[Offset: 0x3f0, Size: 8]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x428, Size: 16]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x440, Size: 16]
	Vector[] WaterBoxExtends;//[Offset: 0x450, Size: 16]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x617d908
	Vector GetWaveHeightValue(out const Vector Location, const World* World, bool HeightOnly, bool TwoIterations);// 0x617d79c
	LinearColor GetHeightmapPixel(float U, float V);// 0x617d6d4

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x398, Size: 8]
	Guid LandscapeGuid;//[Offset: 0x3a0, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x3b0, Size: 8]
	int MaxLODLevel;//[Offset: 0x3b8, Size: 4]
	float LODDistanceFactor;//[Offset: 0x3bc, Size: 4]
	byte LODFalloff;//[Offset: 0x3c0, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x3c4, Size: 4]
	float LODDistributionSetting;//[Offset: 0x3c8, Size: 4]
	int StaticLightingLOD;//[Offset: 0x3cc, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3d0, Size: 8]
	float StreamingDistanceMultiplier;//[Offset: 0x3d8, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3e0, Size: 8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3e8, Size: 8]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x3f0, Size: 80]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x448, Size: 16]
	float MinGrassWeightThreshold;//[Offset: 0x458, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x45c, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x460, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x468, Size: 8]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x470, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x478, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x480, Size: 16]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x490, Size: 16]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x4a0, Size: 16]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float StaticLightingResolution;//[Offset: 0x514, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x518, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x518, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x518, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x519, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51a, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51a, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x51c, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x520, Size: 24]
	int CollisionMipLevel;//[Offset: 0x538, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x53c, Size: 4]
	float CollisionThickness;//[Offset: 0x540, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x548, Size: 384]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c8, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c8, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c8, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x6cc, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x6d0, Size: 4]
	int NumSubsections;//[Offset: 0x6d4, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d8, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x6d9, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6da, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x4710818
	void ChangeLODDistributionSettingConsoleVariable();// 0x47107fc
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x4710778
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x471075c
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x47106d0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x6a0, Size: 16]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x6b0, Size: 16]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x6c0, Size: 16]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	float Width;//[Offset: 0x40, Size: 4]
	float SideFalloff;//[Offset: 0x44, Size: 4]
	float EndFalloff;//[Offset: 0x48, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 16]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 16]
	Box Bounds;//[Offset: 0x70, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 24]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 24]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 16]
	Box Bounds;//[Offset: 0x80, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x7d8, Size: 88]
	Vector SplineUpDir;//[Offset: 0x830, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 1]
	byte ForwardAxis;//[Offset: 0x83d, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x840, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x844, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x848, Size: 8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x850, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 1]
	void UpdateMesh();// 0x55d69e4
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x55d6924
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x55d6868
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x55d67a8
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x55d66e8
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x55d662c
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x55d64a8
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x55d63d0
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x55d6310
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x55d6250
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x55d6194
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x55d60d4
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x55d6014
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x55d5f58
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x55d5e98
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x55d5dd8
	Vector GetStartTangent();// 0x55d5da0
	Vector2D GetStartScale();// 0x55d5d6c
	float GetStartRoll();// 0x55d5d38
	Vector GetStartPosition();// 0x55d5d00
	Vector2D GetStartOffset();// 0x55d5ccc
	Vector GetSplineUpDir();// 0x55d5c94
	byte GetForwardAxis();// 0x55d5c60
	Vector GetEndTangent();// 0x55d5c28
	Vector2D GetEndScale();// 0x55d5bf4
	float GetEndRoll();// 0x55d5bc0
	Vector GetEndPosition();// 0x55d5b88
	Vector2D GetEndOffset();// 0x55d5b54
	float GetBoundaryMin();// 0x55d5b20
	float GetBoundaryMax();// 0x55d5aec

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 16]
	StaticMesh* GrassMesh;//[Offset: 0x38, Size: 8]
	float GrassDensity;//[Offset: 0x40, Size: 4]
	float PlacementJitter;//[Offset: 0x44, Size: 4]
	int StartCullDistance;//[Offset: 0x48, Size: 4]
	int EndCullDistance;//[Offset: 0x4c, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x6a0, Size: 4]
	int SectionBaseY;//[Offset: 0x6a4, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x6a8, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x6ac, Size: 4]
	int NumSubsections;//[Offset: 0x6b0, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x6b8, Size: 8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x6c0, Size: 8]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x6c8, Size: 80]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x718, Size: 32]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x738, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x740, Size: 16]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x750, Size: 16]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x760, Size: 80]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x7b0, Size: 16]
	Texture2D*[] WeightmapTextures;//[Offset: 0x7c0, Size: 16]
	int VisibilityLayerChannel;//[Offset: 0x7d0, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x7d8, Size: 8]
	Vector4 WeightmapScaleBias;//[Offset: 0x7e0, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x7f0, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x800, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x810, Size: 8]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x820, Size: 80]
	FString VisibleVisibilityLayer;//[Offset: 0x870, Size: 16]
	Box CachedLocalBox;//[Offset: 0x880, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x89c, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x8b8, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x8c8, Size: 16]
	int CollisionMipLevel;//[Offset: 0x8d8, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x8dc, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x8e0, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x8e4, Size: 4]
	float StaticLightingResolution;//[Offset: 0x8e8, Size: 4]
	int ForcedLOD;//[Offset: 0x8ec, Size: 4]
	int LODBias;//[Offset: 0x8f0, Size: 4]
	Guid stateID;//[Offset: 0x8f4, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x904, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x918, Size: 8]
	StaticMesh* OccluderMesh;//[Offset: 0x920, Size: 8]
	byte MobileBlendableLayerMask;//[Offset: 0x928, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x930, Size: 8]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x938, Size: 80]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x988, Size: 16]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x998, Size: 8]
	uint16[] CachedHeightData;//[Offset: 0x9a0, Size: 16]
	FName UsedOtherMaterialName;//[Offset: 0xa18, Size: 8]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x6a0, Size: 16]
	int SectionBaseX;//[Offset: 0x6b0, Size: 4]
	int SectionBaseY;//[Offset: 0x6b4, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x6b8, Size: 4]
	float CollisionScale;//[Offset: 0x6bc, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x6c0, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x6c8, Size: 16]
	Guid HeightfieldGuid;//[Offset: 0x6d8, Size: 16]
	Box CachedLocalBox;//[Offset: 0x6e8, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x704, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x730, Size: 16]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 8]
	float Hardness;//[Offset: 0x38, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x928, Size: 16]
	int NumBuiltInstances;//[Offset: 0x938, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x940, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x95c, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x978, Size: 16]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x988, Size: 16]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x998, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x9c0, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x9c4, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x9e8, Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x54be508

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x7d0, Size: 16]
	int InstancingRandomSeed;//[Offset: 0x7e0, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x7e4, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x7e8, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x7f0, Size: 16]
	int[] RemovedInstances;//[Offset: 0x800, Size: 16]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x8a0, Size: 8]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x8a8, Size: 80]
	int NumPendingLightmaps;//[Offset: 0x900, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x908, Size: 16]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x54c9efc
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x54c9e48
	bool RemoveInstance(int InstanceIndex);// 0x54c9db0
	bool HideInstance(out const int[] InstanceIndices);// 0x54c9cdc
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x54c9ba0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x54c9a14
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x54c989c
	int GetInstanceCount();// 0x54c9868
	void ClearInstances();// 0x54c984c
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x54c979c
	int AddInstance(out const Transform InstanceTransform);// 0x54c96e4

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x6a0, Size: 96]
	InterpCurveVector SplineInfo;//[Offset: 0x700, Size: 24]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x718, Size: 24]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x730, Size: 24]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x748, Size: 24]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x764, Size: 4]
	float Duration;//[Offset: 0x768, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76e, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76f, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	float LoopPosition;//[Offset: 0x774, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x778, Size: 12]
	void UpdateSpline();// 0x55d2894
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x55d27c8
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x55d2678
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x55d25f0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x55d2454
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x55d2304
	void SetSplineWorldPoints(out const Vector[] Points);// 0x55d2244
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x55d2148
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x55d2000
	void SetSplineLocalPoints(out const Vector[] Points);// 0x55d1f40
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x55d1eb8
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x55d1d68
	void SetDrawDebug(bool bShow);// 0x55d1ce4
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x55d1c14
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x55d1b08
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x55d1a38
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x55d1978
	bool IsClosedLoop();// 0x55d1940
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x55d18ac
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x55d17d4
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x55d1740
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x55d1668
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x55d15d4
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x55d1540
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x55d1468
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x55d13d4
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55d12c4
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55d11f8
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55d112c
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x55d0fc4
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x55d0ea0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x55d0d7c
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55d0c6c
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55d0ba0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55d0ad4
	byte GetSplinePointType(int PointIndex);// 0x55d0a48
	float GetSplineLength();// 0x55d0a14
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x55d0940
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x55d08b0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x55d0820
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55d0710
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55d0644
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55d0578
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55d046c
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55d03a4
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55d02dc
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55d01cc
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55d0100
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55d0034
	int GetNumberOfSplinePoints();// 0x55d0000
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55cfef0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55cfe24
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55cfd58
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x55cfc00
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x55cfae4
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55cfa18
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x55cf98c
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x55cf900
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x55cf7f0
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55cf724
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x55cf658
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x55cf5c8
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x55cf4fc
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55cf420
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x55cf2ec
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55cf210
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x55cf174
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55cf098
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55cefc0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55ceee4
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55cee08
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x55ced70
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x55cec94
	void ClearSplinePoints(bool bUpdateSpline);// 0x55cec10
	void AddSplineWorldPoint(out const Vector Position);// 0x55ceb80
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x55cea30
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x55ce91c
	void AddSplineLocalPoint(out const Vector Position);// 0x55ce88c
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x55ce780
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x55ce688

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x398, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	void OnRep_bEnabled();// 0x54a2b98

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2cc, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2d0, Size: 16]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x2e4, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2e8, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2ec, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x2fc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x300, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x304, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x314, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x328, Size: 8]
	float InscatteringColorCubemapAngle;//[Offset: 0x330, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x334, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x344, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x348, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x34c, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x350, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x354, Size: 16]
	float FogHeightFalloff;//[Offset: 0x364, Size: 4]
	float FogMaxOpacity;//[Offset: 0x368, Size: 4]
	float StartDistance;//[Offset: 0x36c, Size: 4]
	float FogCutoffDistance;//[Offset: 0x370, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x378, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x37c, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x380, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x390, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x394, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x398, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x3a0, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x3a8, Size: 8]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3b0, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x54a3cb8
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x54a3c3c
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x54a3b98
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x54a3b1c
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x54a3aa0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x54a3a24
	void SetVolumetricFogDistance(float NewValue);// 0x54a39a8
	void SetVolumetricFogAlbedo(Color NewValue);// 0x54a3930
	void SetVolumetricFog(bool bNewValue);// 0x54a38ac
	void SetStartDistance(float Value);// 0x54a3830
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x54a37b4
	void SetInscatteringTextureTint(LinearColor Value);// 0x54a3738
	void SetInscatteringColorCubemapAngle(float Value);// 0x54a36bc
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x54a3640
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x54a35c4
	void SetFogMaxOpacity(float Value);// 0x54a3548
	void SetFogInscatteringColor(LinearColor Value);// 0x54a34cc
	void SetFogHeightFalloff(float Value);// 0x54a3450
	void SetFogDensity(float Value);// 0x54a33d4
	void SetFogCutoffDistance(float Value);// 0x54a3358
	void SetDirectionalInscatteringStartDistance(float Value);// 0x54a32dc
	void SetDirectionalInscatteringExponent(float Value);// 0x54a3260
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x54a31e4
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x54a312c
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x54a3074

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: BP_STPlayerStart_C.STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x3cc, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	int PlayerBornPointID;//[Offset: 0x3d4, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	int CampID;//[Offset: 0x3dc, Size: 4]
	int TeamID;//[Offset: 0x3e0, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	void SetMarkOccupied();// 0x321b334
	bool IsMarkOccupied();// 0x321b2fc

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x3c0, Size: 8]

--------------------------------
Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d0, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ExecuteUbergraph_BP_MiniMapStandardPoint(int EntryPoint, float CallFunc_MakeLiteralFloat_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d8, Size: 8]

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x398, Size: 4]
	float EachTileExtent;//[Offset: 0x39c, Size: 4]
	FString levelName;//[Offset: 0x3a0, Size: 16]
	float FakeEdgeExtent;//[Offset: 0x3b0, Size: 4]
	enum GameModeType;//[Offset: 0x3b4, Size: 1]
	Vector2D AirDropBoundOffset;//[Offset: 0x3b8, Size: 8]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x3c0, Size: 16]

--------------------------------
Class: PostProcessMgr_C.PostProcessManager.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x400, Size: 8]

--------------------------------
Class: PostProcessManager.Actor.Object
	LinearColor OutlineColor;//[Offset: 0x398, Size: 16]
	float OutlineThickness;//[Offset: 0x3a8, Size: 4]
	bool IsPPEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	<enum,OutlineConfig> DifferentOutline;//[Offset: 0x3b0, Size: 80]
	void SetMobileCustomDepth(bool IsEnable, int Depth);// 0x30ce73c
	PostProcessVolume* GetPPVByTag(FName TagName);// 0x30ce6b0
	static PostProcessManager* GetInstance();// 0x30ce67c
	PostProcessVolume* GetActivePPV();// 0x30ce648
	void EnableDrawOutlineEffect(bool IsEnable);// 0x30ce5c4

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x3e0, Size: 1376]
	float Priority;//[Offset: 0x940, Size: 4]
	float BlendRadius;//[Offset: 0x944, Size: 4]
	float BlendWeight;//[Offset: 0x948, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94c, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x55990b8
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5598f78

--------------------------------
Class: SociallandWaterSwimObject_C.WaterSwimObject_C.WaterSwimActor.Actor.Object
	void HandleWaterSwimObject();// 0x3b98fe4
	void SetWaterPos(Vector Offset, HitResult CallFunc_K2_AddLocalOffset_SweepHitResult);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e8, Size: 8]
	void SetWaterMaterial(int NewParam, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x3b98fe4
	void RefreshWaterMaterial(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFight_ReturnValue);// 0x3b98fe4
	void DoTrySetWaterMaterial(int NewParam, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void TrySetWaterMaterial(int NewParam);// 0x3b98fe4
	void IsSupportIndex(int NewParam, out bool NewParam1, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetWaterReflectionSetting_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, bool CallFunc_IsOpenMSAA_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSupportLDR_ReturnValue, bool CallFunc_IsOpenHDR_ReturnValue);// 0x3b98fe4
	void isNewIphone(out bool isNewIphone, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x3b98fe4
	void SetWateMaterial(bool bHDR, bool CallFunc_IsNewIphone_isNewIphone, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x3b98fe4
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x3b98fe4
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x3b98fe4
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b98fe4
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void CustomEvent(byte gamePawnEvent);// 0x3b98fe4
	void CustomEvent(int UserQualitySettingLevel);// 0x3b98fe4
	void ReceiveEndPlay(byte EndPlayReason);// 0x3b98fe4
	void CustomEvent(bool UserMsaaSetting);// 0x3b98fe4
	void CustomEvent(bool bOpenWaterReflection);// 0x3b98fe4
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, interface classNone K2Node_DynamicCast_AsPet_Swim_Interface, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character2, bool K2Node_DynamicCast_bSuccess4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess5, interface classNone K2Node_DynamicCast_AsPet_Swim_Interface2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, byte K2Node_CustomEvent_gamePawnEvent, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess7, int K2Node_CustomEvent_UserQualitySettingLevel, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool K2Node_CustomEvent_UserMsaaSetting, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess8, bool K2Node_CustomEvent_bOpenWaterReflection, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x3b98fe4
	GameEventListener* GameEventListener;//[Offset: 0x3f0, Size: 8]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x3f8, Size: 8]
	AkComponent* Ak;//[Offset: 0x400, Size: 8]
	PostProcessComponent* PostProcess;//[Offset: 0x408, Size: 8]
	BoxComponent* PostSceneBox;//[Offset: 0x410, Size: 8]
	StaticMeshComponent* watermesh;//[Offset: 0x418, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x420, Size: 8]
	float Gamma;//[Offset: 0x428, Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x430, Size: 1376]
	STExtraBaseCharacter*[] playerList;//[Offset: 0x990, Size: 16]
	byte NewVar;//[Offset: 0x9a0, Size: 1]
	float FogDensity;//[Offset: 0x9a4, Size: 4]
	ExponentialHeightFog* HeightFog;//[Offset: 0x9a8, Size: 8]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x9b0, Size: 8]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x9b8, Size: 8]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x9c0, Size: 8]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x9c8, Size: 8]
	MaterialInterface* SUPHDROceanMaterial;//[Offset: 0x9d0, Size: 8]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0x9d8, Size: 8]
	MaterialInterface* SUPHDRSwampMaterial;//[Offset: 0x9e0, Size: 8]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0x9e8, Size: 8]
	int CurrentMaterialIndex;//[Offset: 0x9f0, Size: 4]
	MaterialInterface*[] MaterialList;//[Offset: 0x9f8, Size: 16]
	bool IsSetSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 1]
	<FString> newIOSDevice;//[Offset: 0xa10, Size: 80]
	MaterialInterface* WaterMaterial_SUP_HDR;//[Offset: 0xa60, Size: 8]
	MaterialInterface* WaterMaterial_HDR;//[Offset: 0xa68, Size: 8]
	MaterialInterface* WaterMaterial_Normal;//[Offset: 0xa70, Size: 8]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x398, Size: 4]
	float interval;//[Offset: 0x39c, Size: 4]
	class DamageType* DamageType;//[Offset: 0x3a0, Size: 8]
	class Pawn[] DamageFilters;//[Offset: 0x3a8, Size: 16]
	int[] BuffIDs;//[Offset: 0x3b8, Size: 16]
	int[] SkillBuffIDs;//[Offset: 0x3c8, Size: 16]
	BoxComponent* WaterBoxComp;//[Offset: 0x3d8, Size: 8]
	bool IsLocationInWater(out const Vector Location);// 0x3310bb8
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x3310ac8

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x6c0, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x5464fe4
	Vector GetUnscaledBoxExtent();// 0x5464fbc
	Vector GetScaledBoxExtent();// 0x5464f84

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xf6c, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xf70, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xf78, Size: 80]
	byte OnFireTouchFingerIndex;//[Offset: 0xfc8, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0xfc9, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xfcc, Size: 4]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x1038, Size: 80]
	FName FeatureActorName;//[Offset: 0x1088, Size: 8]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x1090, Size: 16]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0x10a0, Size: 16]
	byte[] AddTouchMoveFingerArray;//[Offset: 0x10b0, Size: 16]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0x10c1, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0x10c4, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0x10c8, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0x10cc, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0x10d0, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0x10d4, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0x10d8, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0x10dc, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0x10e0, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0x10e4, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0x10e8, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0x10ec, Size: 4]
	Vector2D StartPosition;//[Offset: 0x10f0, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0x10f8, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0x1100, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0x110c, Size: 12]
	FString FollowCandidateName;//[Offset: 0x1120, Size: 16]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0x1130, Size: 80]
	Rotator FreeCameraStartRotation;//[Offset: 0x1180, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0x1190, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0x11c0, Size: 1]
	bool GMShowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c1, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0x11c2, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0x11c4, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ca, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x11d0, Size: 16]
	LinearColor CrossHairColor;//[Offset: 0x11e0, Size: 16]
	byte AutoAimType;//[Offset: 0x11f0, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1200, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1201, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1211, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1212, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x1218, Size: 16]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1228, Size: 16]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x1238, Size: 216]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1310, Size: 216]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e8, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e9, Size: 1]
	int UseMotionControlType;//[Offset: 0x13ec, Size: 4]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x13f0, Size: 16]
	delegate OnPlayerEnterFlying;//[Offset: 0x1400, Size: 16]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1410, Size: 16]
	delegate OnPlayerExitFlying;//[Offset: 0x1420, Size: 16]
	delegate OnPlayerEnterJumping;//[Offset: 0x1430, Size: 16]
	delegate OnPlayerExitJumping;//[Offset: 0x1440, Size: 16]
	delegate OnPlayerEnterParachute;//[Offset: 0x1450, Size: 16]
	delegate OnPlayerExitParachute;//[Offset: 0x1460, Size: 16]
	delegate OnPlayerEnterWater;//[Offset: 0x1470, Size: 16]
	delegate OnPlayerExitWater;//[Offset: 0x1480, Size: 16]
	delegate OnPlayerEnterFighting;//[Offset: 0x1490, Size: 16]
	delegate OnPlayerExitFighting;//[Offset: 0x14a0, Size: 16]
	delegate OnPlayerEnterFinished;//[Offset: 0x14b0, Size: 16]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x14c0, Size: 16]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x14d0, Size: 16]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x14e0, Size: 16]
	delegate OnCharacterBreathChange;//[Offset: 0x14f0, Size: 16]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x1500, Size: 16]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x1510, Size: 16]
	delegate OnCharacterAntidoteChange;//[Offset: 0x1520, Size: 16]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1530, Size: 16]
	delegate OnNightBeggan;//[Offset: 0x1540, Size: 16]
	delegate OnNightEnded;//[Offset: 0x1550, Size: 16]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x1560, Size: 16]
	int SelectedNightRenderConfig;//[Offset: 0x1570, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x1578, Size: 16]
	delegate OnInitCollectionData;//[Offset: 0x1588, Size: 16]
	delegate OnPlayerDoEmote;//[Offset: 0x1598, Size: 16]
	delegate OnPlayerEnterArea;//[Offset: 0x15a8, Size: 16]
	delegate OnPlayerKilling;//[Offset: 0x15b8, Size: 16]
	delegate OnPickupItem;//[Offset: 0x15c8, Size: 16]
	delegate OnDropItem;//[Offset: 0x15d8, Size: 16]
	delegate OnDeathBoxSpawned;//[Offset: 0x15e8, Size: 16]
	delegate OnTaskConditionActived;//[Offset: 0x15f8, Size: 16]
	delegate OnTaskConditionDeactived;//[Offset: 0x1608, Size: 16]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1658, Size: 96]
	delegate OnKillOrPutDownMessage;//[Offset: 0x16b8, Size: 16]
	delegate OnStartFireEvent;//[Offset: 0x16c8, Size: 16]
	delegate OnStopFireEvent;//[Offset: 0x16d8, Size: 16]
	delegate OnReleaseFireBtn;//[Offset: 0x16e8, Size: 16]
	delegate OnReleaseScreen;//[Offset: 0x16f8, Size: 16]
	delegate OnFingerMove;//[Offset: 0x1708, Size: 16]
	delegate OnHandleCameraModeChanged;//[Offset: 0x1718, Size: 16]
	delegate OnSwitchCameraModeStart;//[Offset: 0x1728, Size: 16]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1738, Size: 16]
	delegate OnPlayerPickUpActor;//[Offset: 0x1748, Size: 16]
	delegate OnPlayerPutDownActor;//[Offset: 0x1758, Size: 16]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1768, Size: 16]
	delegate OnSwitchWeapon;//[Offset: 0x1778, Size: 16]
	delegate OnEquipWeaponDel;//[Offset: 0x1788, Size: 16]
	delegate OnUnequipWeaponDel;//[Offset: 0x1798, Size: 16]
	delegate OnUseInventoryItem;//[Offset: 0x17a8, Size: 16]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x17b8, Size: 16]
	delegate OnDamageToOther;//[Offset: 0x17c8, Size: 16]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x17d8, Size: 16]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x17e8, Size: 16]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x17f8, Size: 16]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x1808, Size: 16]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1818, Size: 16]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1828, Size: 16]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1838, Size: 16]
	delegate OnRank;//[Offset: 0x1848, Size: 16]
	delegate OnGameStartDelegate;//[Offset: 0x1858, Size: 16]
	delegate OnPlayerNameChange;//[Offset: 0x1868, Size: 16]
	delegate OnUseMainSlot;//[Offset: 0x1878, Size: 16]
	delegate OnBackpackMainSlot;//[Offset: 0x1888, Size: 16]
	delegate OnRemoveMainSlot;//[Offset: 0x1898, Size: 16]
	delegate OnRepPlayerState;//[Offset: 0x18a8, Size: 16]
	delegate OnRepTeammateChange;//[Offset: 0x18b8, Size: 16]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x18c8, Size: 16]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x18e0, Size: 16]
	delegate OnShowSkillPrompt;//[Offset: 0x18f0, Size: 16]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1900, Size: 16]
	delegate OnShowAutoSprintButton;//[Offset: 0x1910, Size: 16]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x1920, Size: 16]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1930, Size: 16]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1940, Size: 16]
	delegate OnConsumableAvatarChange;//[Offset: 0x1950, Size: 16]
	delegate OnEquipmentAvatarChange;//[Offset: 0x1960, Size: 16]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1970, Size: 16]
	delegate OnGameStateChange;//[Offset: 0x1980, Size: 16]
	delegate OnSelfPlayerKilledOthersPlayer;//[Offset: 0x1990, Size: 16]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x19a0, Size: 16]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x19b0, Size: 16]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x19c0, Size: 16]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x19d0, Size: 16]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x1a00, Size: 16]
	delegate OpenSequencerDelegate;//[Offset: 0x1a10, Size: 16]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1a30, Size: 8]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1a38, Size: 16]
	delegate OnAutoSprintActive;//[Offset: 0x1a48, Size: 16]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1a58, Size: 16]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1a80, Size: 16]
	delegate OnLostConnection;//[Offset: 0x1a90, Size: 16]
	delegate OnReconnected;//[Offset: 0x1aa0, Size: 16]
	delegate OnExitGame;//[Offset: 0x1ab0, Size: 16]
	delegate OnSpectatorChange;//[Offset: 0x1ac0, Size: 16]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1ad0, Size: 16]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1ae0, Size: 16]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1af0, Size: 8]
	int MaternalZombieWeight;//[Offset: 0x1af8, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x1b00, Size: 8]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1b08, Size: 8]
	HiggsBosonComponent* HiggsBosonComponent;//[Offset: 0x1b10, Size: 8]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1b18, Size: 8]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b20, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1d68, Size: 16]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x1d78, Size: 16]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8c, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8d, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8e, Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8f, Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d90, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d91, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d92, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1d94, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1d98, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1d9c, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1da0, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1da8, Size: 8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1db0, Size: 8]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db8, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1dbc, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1de0, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1e04, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1e0c, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1e14, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1e38, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1e40, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x1e48, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x1e70, Size: 80]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1ec0, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1ec4, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x1ec8, Size: 80]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x1f18, Size: 16]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f28, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f29, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1f30, Size: 8]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f38, Size: 1]
	byte CurCameraMode;//[Offset: 0x1f39, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1f40, Size: 16]
	FName AutoScopeAimCompName;//[Offset: 0x1f50, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1f58, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5c, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5d, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5e, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5f, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1f60, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1f64, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1f68, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1f6c, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1f70, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1f74, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f78, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1f7c, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1f88, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1f8c, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1f90, Size: 80]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe0, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe1, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe2, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1fe8, Size: 8]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff0, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff1, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1ff8, Size: 16]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2008, Size: 1]
	float AccumulateYawInput;//[Offset: 0x200c, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x2010, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2014, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2015, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2016, Size: 1]
	float NoRespondArea;//[Offset: 0x2018, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x201c, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2020, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2021, Size: 1]
	byte sprintOptType;//[Offset: 0x2022, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x2024, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x2028, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x202c, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x2030, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2034, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x2035, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x2038, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203c, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x2040, Size: 80]
	float TouchForceFireThreshold;//[Offset: 0x2090, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x2094, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x2098, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x209c, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x20a0, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a4, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x20a8, Size: 4]
	byte TouchFireType;//[Offset: 0x20ac, Size: 1]
	float TestForce;//[Offset: 0x20b0, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x20b8, Size: 16]
	delegate OnDoubleClickCheck;//[Offset: 0x20c8, Size: 16]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d8, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d9, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20da, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20db, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x20dc, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x20e0, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x20e4, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x20e8, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x20ec, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x20f0, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f4, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x20f8, Size: 4]
	float MinFovChangeView;//[Offset: 0x20fc, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x2100, Size: 48]
	int GameTipMsgID;//[Offset: 0x2130, Size: 4]
	FString GameTipParam1;//[Offset: 0x2138, Size: 16]
	FString GameTipParam2;//[Offset: 0x2148, Size: 16]
	float AutoSprintCD;//[Offset: 0x21a8, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x21b0, Size: 80]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x2200, Size: 80]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x2250, Size: 80]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a4, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x22a8, Size: 16]
	delegate OnReceiveHasSignal;//[Offset: 0x22b8, Size: 16]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x22f0, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x23b8, Size: 8]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x23c0, Size: 8]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x23c8, Size: 8]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x23d0, Size: 8]
	PlayerTombBox* DeadTombBox;//[Offset: 0x23e8, Size: 8]
	FString[] ForbitPickList;//[Offset: 0x23f8, Size: 16]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2418, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x241c, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2420, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2421, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x2424, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x2428, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242c, Size: 1]
	float FreeViewUpRate;//[Offset: 0x2430, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x2434, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x2438, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243c, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243e, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2440, Size: 12]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x244c, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2460, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x2461, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2462, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2463, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x24b0, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2520, Size: 8]
	BackpackComponent* BackpackComponent;//[Offset: 0x25b0, Size: 8]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x25b8, Size: 8]
	ChatComponent* ChatComponent;//[Offset: 0x25c0, Size: 8]
	GuideComponent* GuideComponent;//[Offset: 0x25c8, Size: 8]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x25d0, Size: 8]
	BaseTaskComponent* TaskComponent;//[Offset: 0x25d8, Size: 8]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x25e8, Size: 16]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2605, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x2606, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x2608, Size: 16]
	BattleItemData[] ObservedItemList;//[Offset: 0x2638, Size: 16]
	uint32[] FiringPlayerList;//[Offset: 0x2718, Size: 16]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x2728, Size: 16]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x2738, Size: 16]
	delegate OnCharacterStatesChange;//[Offset: 0x2748, Size: 16]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x2758, Size: 16]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2768, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x2770, Size: 16]
	float GotoSpectatingDelayTime;//[Offset: 0x2784, Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x2788, Size: 16]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x2798, Size: 16]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x27a8, Size: 16]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x27b8, Size: 16]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x27c8, Size: 16]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x27d8, Size: 80]
	ObservedData ObservedData;//[Offset: 0x2828, Size: 80]
	delegate OnSignalHPChanged;//[Offset: 0x2888, Size: 16]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289d, Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x28a0, Size: 16]
	delegate OnToggleOBMapShowHide;//[Offset: 0x28b8, Size: 16]
	delegate OnInterruptGameButtonShow;//[Offset: 0x28c8, Size: 16]
	delegate OnToggleOBPlayerList;//[Offset: 0x28e0, Size: 16]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x28f0, Size: 16]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2900, Size: 16]
	delegate OnToggleOBTeamList;//[Offset: 0x2910, Size: 16]
	delegate WeaponEquipAttachment;//[Offset: 0x2920, Size: 16]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x2930, Size: 16]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2940, Size: 16]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2960, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2964, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x2968, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x296c, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296d, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296e, Size: 1]
	int FireMode;//[Offset: 0x2970, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2974, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2975, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2976, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2977, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2978, Size: 16]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2988, Size: 16]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2998, Size: 16]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x29a8, Size: 16]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x29b8, Size: 16]
	Actor*[] nowGrenadeList;//[Offset: 0x29c8, Size: 16]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d8, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x29e0, Size: 16]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x29f0, Size: 16]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2a00, Size: 16]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2a10, Size: 16]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2a20, Size: 16]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a31, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2a38, Size: 16]
	delegate OnPlayerCannotJump;//[Offset: 0x2a48, Size: 16]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a58, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2a60, Size: 16]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x2a70, Size: 16]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a80, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x2a84, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x2a88, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x2a8c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x2a90, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x2a94, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x2aa4, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x2ac0, Size: 24]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2ad8, Size: 16]
	Actor* ThePlane;//[Offset: 0x2ae8, Size: 8]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2af8, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x2b00, Size: 16]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x2b10, Size: 16]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b20, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x2b24, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x2b40, Size: 16]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2b58, Size: 8]
	FString LastBreathMurder;//[Offset: 0x2b68, Size: 16]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b78, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x2b80, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x2b88, Size: 8]
	FString murderName;//[Offset: 0x2b90, Size: 16]
	FString FinalMurderName;//[Offset: 0x2ba0, Size: 16]
	uint64 MurderUID;//[Offset: 0x2bb0, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb8, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bb9, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bba, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x2c18, Size: 80]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x2c68, Size: 80]
	float OceanSideDetectDistance;//[Offset: 0x2cc0, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x2cc4, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2cc8, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x2cd0, Size: 80]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x2e30, Size: 8]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e38, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x2e40, Size: 16]
	float ZMoveDisCalcThreshold;//[Offset: 0x2ea0, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ea4, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x2ea8, Size: 8]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eb0, Size: 1]
	enum ServerStateType;//[Offset: 0x2eb1, Size: 1]
	enum ClientStateType;//[Offset: 0x2eb2, Size: 1]
	bool bRepServerMsgType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eb3, Size: 1]
	enum GameStateMsgType;//[Offset: 0x2eb4, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed4, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed5, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed6, Size: 1]
	float ObservingTime;//[Offset: 0x2ed8, Size: 4]
	KillerTracker* tracker;//[Offset: 0x2ee0, Size: 8]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2efc, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2efd, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x2f60, Size: 8]
	FString DefaultHUDClassPath;//[Offset: 0x2f68, Size: 16]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2f90, Size: 16]
	STExtraPlayerController* DieInstigator;//[Offset: 0x2fa0, Size: 8]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa8, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa9, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x2fb0, Size: 8]
	int BOptimizeBulletHit;//[Offset: 0x2fb8, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x2fc0, Size: 80]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x3010, Size: 16]
	int MaxTeamFootprintCount;//[Offset: 0x3020, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x3024, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x3028, Size: 80]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x3078, Size: 80]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x30d0, Size: 8]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x30d8, Size: 16]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x30e8, Size: 80]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x3160, Size: 8]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x3168, Size: 8]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x3170, Size: 8]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x31c8, Size: 16]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x31d8, Size: 16]
	delegate OnEnterVehicleDelegate;//[Offset: 0x3228, Size: 16]
	delegate ClientOnEnterVehicle;//[Offset: 0x3238, Size: 16]
	delegate ClientOnLeaveVehicle;//[Offset: 0x3248, Size: 16]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x3258, Size: 16]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x3268, Size: 16]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3278, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3279, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x327c, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x3280, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x328c, Size: 8]
	int IdCardMarkType;//[Offset: 0x3298, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b8, Size: 1]
	int VehicleControlMode;//[Offset: 0x32bc, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c0, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x32c8, Size: 16]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x32d8, Size: 16]
	float StreamingDistanceScaleFlying;//[Offset: 0x32e8, Size: 4]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32ec, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x32f0, Size: 16]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3300, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x3308, Size: 16]
	float MoveDistanceThreshold;//[Offset: 0x3318, Size: 4]
	float SpeedRecordTime;//[Offset: 0x331c, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x3320, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x3328, Size: 16]
	delegate OnChangeToWalkingDead;//[Offset: 0x3338, Size: 16]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3348, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x3350, Size: 16]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x3360, Size: 16]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3370, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3371, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x3378, Size: 16]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x3388, Size: 16]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x3398, Size: 16]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x33a8, Size: 16]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x33b8, Size: 16]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x33c8, Size: 8]
	uint32 LastKillerKey;//[Offset: 0x33d0, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d4, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d5, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e0, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e1, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e2, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x33e4, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x33e8, Size: 16]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x33f8, Size: 16]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x3408, Size: 16]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3418, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x3420, Size: 16]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x3430, Size: 16]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x3440, Size: 16]
	delegate OnMemberVoiceDelegate;//[Offset: 0x3450, Size: 16]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x3460, Size: 16]
	Actor* InteractiveActor;//[Offset: 0x3470, Size: 8]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x3478, Size: 16]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x3488, Size: 16]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x3498, Size: 16]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x34a8, Size: 16]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x34b8, Size: 8]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x34d8, Size: 16]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x34e8, Size: 80]
	enum CurrentWeaponFunction;//[Offset: 0x3538, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x353c, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3540, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x3544, Size: 4]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x3548, Size: 8]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x3550, Size: 8]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3560, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3570, Size: 1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x3578, Size: 16]
	double LastFlyLeapPlatfromTime;//[Offset: 0x3b88, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be0, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be1, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x3be8, Size: 80]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x3c50, Size: 24]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x3c68, Size: 24]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x3c80, Size: 56]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb8, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cba, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cbb, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x3cbc, Size: 4]
	<int,enum> PlayerAvatarHideState;//[Offset: 0x3cc0, Size: 80]
	void VW_Seat(int change);// 0x320a8e8
	void VisualizeItem();// 0x320a8d4
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x320a7e0
	void ViewPlane();// 0x320a7cc
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x3b98fe4
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation);// 0x320a750
	void VehicleResetTo(float X, float Y, float Z);// 0x320a660
	void VehicleMoveTo(float X, float Y, float Z);// 0x320a570
	void UseZombieModeSkill();// 0x320a55c
	void UserDropItemOperation(ItemDefineID DefineID);// 0x320a4d0
	void UseItem(int ID);// 0x320a454
	void UpdateSurfboardUI();// 0x320a440
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x320a3bc
	void UpdatePoseViewPitchLimit();// 0x320a3a8
	void UpdatePoseState(byte PoseType);// 0x320a32c
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x320a268
	void UnLoadAllCollision(bool Unload);// 0x320a1e4
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x320a070
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x3209f7c
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x3209df8
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x3209d04
	void TriggerHunterRevival();// 0x3209cf0
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x3209c38
	void TouchMove(Vector Loc, byte FingerIndex);// 0x3209b80
	bool TouchEnd(byte PressType);// 0x3209af0
	void TouchBegin(byte PressType);// 0x3209a74
	void ToggleVehicleSync(bool Val);// 0x32099f0
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x320996c
	void ToggleUserCmdDeltaFlag(bool Val);// 0x32098e8
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x3209864
	void ToggleUserCmdDelta(bool Val);// 0x32097e0
	void ToggleServerAcknowledgePossession(bool Val);// 0x320975c
	void ToggleOBTPPFollowFreeView();// 0x3209748
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x32096c4
	void ToggleCheatLocation(bool Val);// 0x3209640
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x3209550
	void TestLowProbCircle(bool UseLowProb, int LoopCount);// 0x3209488
	void TestLaunchFly(float Speed);// 0x320940c
	void TestGlueHia(int GlueType, int GlueValue);// 0x3209358
	void TestBiAim();// 0x3209344
	void TestAutoMoveToShootingMachine();// 0x3209330
	void TestAutoMoveToLocation(float X, float Y, float Z);// 0x3209240
	void TestAutoMoveToCharacter(FString TargetPlayerUID);// 0x320910c
	void TempleStopMoving();// 0x32090f8
	void TempleStartMoving();// 0x32090e4
	void TempleSpawnBoss();// 0x32090d0
	void TempleDisappear();// 0x32090bc
	void TeleportToTemple(byte bOutCollisionTeleportPoint);// 0x3209040
	void TeleportAIToLoc(float X, float Y, float Z);// 0x3208f50
	void TeamNoAlwaysRelevant();// 0x3208f3c
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x3208e68
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, byte HealthBYTE, int VoiceID);// 0x3208cb8
	void SwitchViewTarget();// 0x3208ca4
	void SwitchToTeamByNumPressed();// 0x3208c90
	void SwitchToPlayerByNumPressed();// 0x3208c7c
	void SwitchToDeadBox();// 0x3208c68
	void SwitchShowUI();// 0x3208c54
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x3208b64
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x3208a2c
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x320896c
	void SwitchMouseCursorShowState();// 0x3208958
	void SwitchGenerateItem();// 0x32088f8
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x3208840
	void SwitchCameraModeByOrder();// 0x320882c
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x32086e4
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x32085e8
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x3208510
	void StopAbsorb();// 0x32084b0
	void StartReadyCountDown();// 0x320849c
	void StartLandOnGroundAfterJumpPlane();// 0x3208488
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x320837c
	void StartGame();// 0x3208368
	void StartFreeCamera(byte FigerIndex);// 0x32082ec
	void StartAirDropSpecified(float X, float Y);// 0x3208238
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x3208148
	void StartAirDrop(int Index);// 0x32080cc
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x3207fdc
	void StartAirAttack(int Index);// 0x3207f60
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x3207e9c
	void SpawnVehicleWithPath(FString Path, int Num);// 0x3207db4
	void SpawnVehicle();// 0x3207da0
	void SpawnFloatingTemple();// 0x3207d8c
	void SpawnAllVehicle(FString Path);// 0x3207ce4
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x3207bf4
	void SpawnAI(int Num);// 0x3207b78
	void SpawnActorWithPath(FString Path, float X, float Y, float Z);// 0x3207a1c
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x32079a0
	void ShutDownItemGenerate(bool IsOpen);// 0x320791c
	void ShowWeaponRecordInfo();// 0x3207908
	void ShowVaultEnable();// 0x32078f4
	void ShowStringMsg(const FString Message, FString FromPlayerName, int MsgID);// 0x32076a8
	void ShowResultWeaponRecordInfo();// 0x3207694
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x320756c
	void ShowOpenSequence(float Time);// 0x32074f0
	void ShowNavOperator();// 0x32074dc
	void ShowMovePath(const Vector[] Path);// 0x320742c
	void ShowGameTips(int TipsID, FString Params);// 0x320733c
	void ShowFireBtn(bool bShow);// 0x3b98fe4
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x320727c
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x32071ac
	void ShowAllRoles();// 0x3207198
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x3207108
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x3207084
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x3207000
	void SetViewYawLimit(float YawMin, float YawMax);// 0x3206f4c
	void SetViewTargetTest(Actor* NewViewTarget);// 0x3206ed0
	void SetVehicleWeakTickEnable(bool InVal);// 0x3206e4c
	void SetUAETriggerEnable(bool IsEnbale);// 0x3206dc8
	void SetTimeSpeedFactor(float Val);// 0x3206d4c
	void SetTimeSpeedCheck(bool Val);// 0x3206cc8
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x3206bc4
	void SetStateLeftTime(int leftTime);// 0x3206b48
	void SetSpeed(float Modifier);// 0x3206acc
	void SetSnowBoradRotationInAir(float Pitch, float Yaw, float Roll);// 0x32069dc
	void SetSkillFingerIndex(byte FingerIndex);// 0x3206960
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x32068dc
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x3206814
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x3206790
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x32066c8
	void SetReconnectZombieWaveDataToClient(const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x3206548
	void SetPoisonFogEnable(bool IsEnbale);// 0x32064c4
	void SetPlayerTeamBodyInstMask(int Mask);// 0x3206448
	void SetPlayerMark(Vector Loc);// 0x3206394
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x3206200
	void SetPlayerBodyInstMask(int Mask);// 0x3206184
	void SetPlaneEnabled(bool InEnable);// 0x3206100
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x3205ff4
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x3205f34
	void SetObservingTime(float Time);// 0x3205eb8
	void SetMovable(bool IsMovable);// 0x3205e34
	void SetMaxHealth(float HP);// 0x3205db8
	void SetLowProbCircle(float X, float Y, float R, float Prob);// 0x3205c90
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x3205bc0
	void SetLaunchFlyStateOnServer(enum StateType);// 0x3205b44
	void SetLaunchFlyState(enum StateType);// 0x3205ac8
	void SetJoyStickScale(float JSScale);// 0x3205a4c
	void SetJoyStickPtrFireMode(int FireMode);// 0x32059d0
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x3205918
	void SetJoyStickOpacity(float JSOpacity);// 0x320589c
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x3205824
	void SetJoyStickCenter(Vector2D JSCenter);// 0x32057ac
	void SetIsSnowy(bool bSnowy);// 0x3205728
	void SetIsShowBlood(bool InIsShowBlood);// 0x32056a4
	void SetIsRainy(bool bRainy);// 0x3205620
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x320559c
	void SetIsBlizzard(bool bBlizzard);// 0x3205518
	void SetInfectResetPlayerInterTime(float InterTime);// 0x320549c
	void SetHasResultState(bool InState);// 0x3205418
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x32052a8
	void SetFuelByPercent(float percent);// 0x320522c
	void SetEnterInteractiveActor(Actor* IActor, bool IsIn);// 0x320516c
	void SetEnableWingAvatar(bool Val);// 0x32050e8
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x3205028
	void SetDisableTouchMoveInput(bool bDisable);// 0x3204fa4
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x3204eb4
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x3204d8c
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x3204c9c
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x3204b94
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x3204a34
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x32048e8
	void SetCircleCenter(FString PointString);// 0x3204840
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x3204740
	void SetCanDropItem(bool bCanDrop);// 0x32046bc
	void SetBeKickedPlayerName(FString InPlayerName);// 0x3204588
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x32044c0
	void SetAllInfectedAreaLevel(int LevelId);// 0x3204444
	void SetAirDropEnable(bool Enable);// 0x32043c0
	void SetAirAttackEnable(bool Enable);// 0x320433c
	void Set2x2ForceCircleLastR(float R);// 0x32042c0
	void Set2x2ForceCircle(float X, float Y, float R);// 0x32041d0
	void Set2x2CircleCenter(int Index, float X, float Y);// 0x32040e0
	void Set2x2Circle3Center(float x1, float y1, float x2, float y2, float x3, float y3);// 0x3203f40
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3203db0
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x3203c78
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x3203bc8
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x3203b18
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x3203a68
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x32039b8
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x320384c
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x320355c
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x320326c
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x32031bc
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x32030cc
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x3202e8c
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x3202ce4
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x3202bb0
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x3202b00
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x3202a18
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x3202968
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType);// 0x3202878
	void ServerSetSelfForceHideState(int SlotID, bool bSelfHide);// 0x3202774
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x3202644
	void ServerSetObsverLocation(const Vector locat);// 0x3202598
	void ServerSetIsFreeView(bool isFreeView);// 0x32024d4
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x32023cc
	void ServerSetFreeCamera(Rotator InRotation);// 0x3202318
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x3202210
	void ServerSetControlRotation(const Rotator NewRotation);// 0x3202164
	void ServerSendLogToLobby(FString ErrorLog);// 0x32020bc
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x3201f94
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x3201db4
	void ServerRemoteDestroyAllActor();// 0x3201da0
	void ServerRemoteDestroyActor(int SingleId);// 0x3201d24
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x3201be4
	void ServerReceiveThePlane(int64 TimeStamp);// 0x3201b34
	void ServerReceiveServerStateType(enum ReceivedType, enum ClientType, int64 TimeStamp);// 0x3201a04
	void ServerQuitSpectating();// 0x32019a4
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x3201630
	void ServerOpenParachute();// 0x32015d0
	void ServerObserveKiller();// 0x3201570
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x32014c0
	void ServerObserveAirDropBox(int boxId);// 0x3201410
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x320130c
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x320125c
	void ServerJumpFromPlane();// 0x32011fc
	void ServerInterruptGame();// 0x320119c
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x32010b0
	void ServerHandleMsg(enum Msg);// 0x3201000
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x3200ee4
	void ServerGetTotalPlayers();// 0x3200e84
	void ServerGetPlayerAliasInfoList();// 0x3200e24
	void ServerGetCircleInfo();// 0x3200dc4
	void ServerFight();// 0x3200d64
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x3200cb4
	void ServerExitFreeCamera();// 0x3200c54
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x3200b08
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x3200a04
	void ServerDoPickupRevivalFlag();// 0x32009a4
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x3200898
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x32007a8
	void ServerCMD_RPC(FString Cmd);// 0x32006cc
	void ServerCMD(FString Cmd);// 0x3200624
	void ServerClearTeammatesCache();// 0x32005c4
	void ServerChangeWeaponScheme(int Index);// 0x3200514
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x3200464
	void ServerChangeStatePC(enum TargetStateType);// 0x32003e8
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x320029c
	void SendStringMsg(FString Message, int MsgID, int ItemID, FString PlayerKeyString);// 0x3200118
	void SendLogToLobbyOnece(byte LogType);// 0x320009c
	void SendGameStateInitOK();// 0x320003c
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x31fff84
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x31ffe44
	void ScopeOut();// 0x31ffe30
	void ScopeIn();// 0x31ffe1c
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x31ffc68
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x31ffb24
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x31ff9e0
	void RunOnNextFrameEvent();// 0x31ff9cc
	void RunOnNextFrame__DelegateSignature();// 0x3b98fe4
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x31ff90c
	void RPC_UseInteractiveActor();// 0x31ff8ac
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x31ff84c
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x31ff724
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x31ff454
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x31ff1c8
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x31fef3c
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x31fee8c
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x31feddc
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x31fed28
	void RPC_Server_SendLog(FString ErrorLog);// 0x31fec4c
	void RPC_Server_ReqHealth();// 0x31febec
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x31feb10
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x31fea4c
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x31fe8cc
	void RPC_Server_PrintHP();// 0x31fe86c
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x31fe77c
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x31fe6cc
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x31fe61c
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x31fe530
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x31fe444
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x31fe310
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x31fe188
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x31fe0ac
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x31fddf8
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x31fdd98
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x31fdc24
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray);// 0x31fdaf0
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x31fda14
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x31fd938
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x31fd85c
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x31fd76c
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x31fd654
	void RPC_Server_ClientHasReactivated();// 0x31fd5f4
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x31fd4b0
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x31fd36c
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x31fd27c
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x31fd1cc
	void RPC_ReviveState_GiveUpRevive();// 0x31fd16c
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x31fd0bc
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x31fcefc
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x31fcd74
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x31fcc2c
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x31fcb4c
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x31fca9c
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x31fc958
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x31fc820
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x31fc660
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x31fc4a0
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x31fc3dc
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x31fc240
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x31fc14c
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x31fc05c
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x31fbf6c
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x31fbe24
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x31fbd2c
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x31fbbfc
	void RPC_GiveUpGame();// 0x31fbb9c
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x31fba6c
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x31fb940
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x31fb8bc
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x31fb7cc
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x31fb614
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x31fb498
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x31fb31c
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x31fb178
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeID);// 0x31fb080
	void RPC_Client_RemoteDestroyAllActor();// 0x31fb064
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x31fafe0
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x31fae70
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x31fac18
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x31fab20
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x31fa8dc
	void RPC_Client_NotifyHealth(float Health);// 0x31fa82c
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x31fa7a8
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x31fa660
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x31fa584
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x31fa49c
	void RPC_Client_BeginInteractiveProcess();// 0x31fa480
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc);// 0x31fa384
	void RPC_CancelUseInteractiveActor();// 0x31fa324
	void RevivalTemateSuccess();// 0x31fa308
	void RevivalTemateFail(FString Reason);// 0x31fa258
	float RetriveMobileContentScaleFactor();// 0x31fa224
	void RetrievePlayerBattleResultData();// 0x31fa210
	void RestoreDefaultInteractionSize(int JSIndex);// 0x31fa194
	void RespHasSignalBar(bool bHas);// 0x31fa108
	void RespawnRecoverData(UAEPlayerController* PC);// 0x31fa08c
	void ResetVehicleEngine();// 0x31fa078
	void ResetMissingUIUpdate();// 0x3b98fe4
	void RequireNetCullingDistanceByDevice();// 0x31fa018
	void RequireDeviceInfo();// 0x31f9ffc
	void RequestServerHandleMsg();// 0x31f9f9c
	void RequestPlayerNewbieInfo();// 0x31f9f88
	void RequestHasSignalBar();// 0x31f9f28
	bool RequestChangeWearInBattle(int NewIndex);// 0x31f9e98
	bool RequestChangeWear(int NewIndex);// 0x31f9e08
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x31f9d44
	void ReqRecordEnterIceMountain();// 0x31f9ce4
	void ReqLeaveVehicle();// 0x31f9cd0
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x31f9c20
	void ReqExchangeVehicleCharacter(int Param);// 0x31f9ba4
	void ReqEnterVehicle(float dis);// 0x31f9b28
	void ReqEnterSnowBoard();// 0x31f9b14
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x31f9a98
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x31f996c
	void ReportAntiCheatInfo();// 0x31f9958
	void ReplaceVehicleWithPath(FString Path);// 0x31f98b0
	void ReplaceVehicle();// 0x31f989c
	void Rep_RefreshInteractiveActor();// 0x31f9888
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x31f980c
	void RemoveAllDoors();// 0x31f97f8
	void ReleaseFire();// 0x3b98fe4
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x31f977c
	void ReInitParachuteItem();// 0x31f9768
	void RefreshTopMostUIPanel(byte Type);// 0x3b98fe4
	void RefreshShootDetailInfo();// 0x31f9754
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x3b98fe4
	void RecoverStatusAfterReconnecting();// 0x31f9738
	void RecordPathPoint();// 0x31f9724
	void ReceiveClientRestart();// 0x3b98fe4
	void ReceiveBackpackComponent();// 0x31f9708
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x31f95e4
	void PrintMovementLog(int PrintLog);// 0x31f9568
	void PrintDownCollision();// 0x31f9554
	void PrintAllPickupWarpper();// 0x31f9540
	void PressGrenade(bool isThrow);// 0x3b98fe4
	void PressFire(int FingerIndex);// 0x3b98fe4
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x31f9488
	void PlayerKillingDelegate__DelegateSignature();// 0x3b98fe4
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x3b98fe4
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x3b98fe4
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x3b98fe4
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x3b98fe4
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x3b98fe4
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x3b98fe4
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x3b98fe4
	void PlayBattleSound(FString BankName, FString SoundName);// 0x31f9378
	void OpenParachute();// 0x31f9364
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x3b98fe4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x3b98fe4
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x3b98fe4
	void OnWallFeedBack(bool _WallFeedBack);// 0x31f92e0
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x31f9264
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x31f91ac
	void OnViewTargetPlayerStateChanged();// 0x31f9198
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x31f911c
	void OnViewTargetChangeVehicleSeat();// 0x31f9108
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x31f908c
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x3b98fe4
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x3b98fe4
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x3b98fe4
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x3b98fe4
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x3b98fe4
	void OnUseVehicleWarWeapon();// 0x31f9078
	void OnUseVehicleWarItem();// 0x31f9064
	void OnUseVehicleWarEyes();// 0x31f9050
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x3b98fe4
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x3b98fe4
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x3b98fe4
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x3b98fe4
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x31f8ea4
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x3b98fe4
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x3b98fe4
	void OnTeammatesAllDie();// 0x31f8e90
	void OnTeammateLogin(int InTeamID);// 0x31f8e14
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x3b98fe4
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x3b98fe4
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x3b98fe4
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x3b98fe4
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x3b98fe4
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x3b98fe4
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x3b98fe4
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x3b98fe4
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x3b98fe4
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x3b98fe4
	void OnStopFireDelegate__DelegateSignature();// 0x3b98fe4
	void OnStartFireDelegate__DelegateSignature();// 0x3b98fe4
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x3b98fe4
	void OnSpectatorChange__DelegateSignature();// 0x3b98fe4
	void OnSpectatorCameraChange(bool bDie);// 0x3b98fe4
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x3b98fe4
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime, bool bCanCancelSkill);// 0x3b98fe4
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x3b98fe4
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x3b98fe4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x31f8d44
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x3b98fe4
	void OnServerFinishPickupRevivalFlag();// 0x31f8d28
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0x3b98fe4
	void OnSelfPlayerKilledOthersPlayer__DelegateSignature(int CauserWeaponAvatarID);// 0x3b98fe4
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x3b98fe4
	void OnRepTeammateChange__DelegateSignature();// 0x3b98fe4
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x3b98fe4
	void OnRepPlayerState__DelegateSignature();// 0x3b98fe4
	void OnRepNotify_SetBattleOwner();// 0x31f8d14
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x31f8d00
	void OnRep_WeatherFog();// 0x31f8cec
	void OnRep_WeaponSystemReconnectReplicateData();// 0x31f8cd8
	void OnRep_WeaponFunctionChanged();// 0x31f8cc4
	void OnRep_WeaponAvatarDataList();// 0x31f8ca8
	void OnRep_UsedSimulation();// 0x31f8c8c
	void OnRep_SwitchWeather();// 0x31f8c78
	void OnRep_STExtraBaseCharacter();// 0x31f8c64
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x31f8c50
	void OnRep_ShowWeaponHitDetailInfo();// 0x31f8c3c
	void OnRep_ServerStateType();// 0x31f8c28
	void OnRep_RefreshTotalPlayers();// 0x31f8c14
	void OnRep_RefreshAirDropBox();// 0x31f8c00
	void OnRep_Plane();// 0x31f8bec
	void OnRep_ObservedItemList();// 0x31f8bd8
	void OnRep_InWateringRangeBP();// 0x3b98fe4
	void OnRep_InWateringCRange();// 0x31f8b74
	void OnRep_InitialEquipmentAvatar();// 0x31f8b58
	void OnRep_InitialConsumableAvatar();// 0x31f8b3c
	void OnRep_ImprisonmentTeammateSucess();// 0x31f8b28
	void OnRep_GameStateMsgType();// 0x31f8b14
	void OnRep_ForbitPickEffect();// 0x31f8b00
	void OnRep_ForbitPick();// 0x31f8aec
	void OnRep_FiringPlayerList();// 0x31f8ad8
	void OnRep_EnableDeathPlaybackDelay();// 0x31f8ac4
	void OnRep_DeadTombBox();// 0x31f8ab0
	void OnRep_CanOpenParachute();// 0x31f8a9c
	void OnRep_CanJump();// 0x31f8a88
	void OnRep_CanImprisonmentTeammate();// 0x31f8a74
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x31f8a60
	void OnRep_BackpackComponent();// 0x31f8a4c
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x3b98fe4
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x3b98fe4
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x3b98fe4
	void OnReleaseFire();// 0x31f8a38
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x3b98fe4
	void OnReconnected__DelegateSignature();// 0x3b98fe4
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0x3b98fe4
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x3b98fe4
	void OnPressVehicleWarMatchData();// 0x31f8a24
	void OnPressVampireClothSlotBtn();// 0x31f8a10
	void OnPressTurnplateQuickMsgBtn();// 0x31f89fc
	void OnPressTriggerEntireMapBtn();// 0x31f89e8
	void OnPressShowTagVehileSeatListBtn();// 0x31f89d4
	void OnPressRolewearChangeBtn(int Index);// 0x31f8958
	void OnPressItemSKillBtn();// 0x31f8944
	void OnPressFire();// 0x31f8930
	void OnPressBackpackBtn();// 0x31f891c
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x3b98fe4
	void OnPlayerUseRecoverItem();// 0x31f8908
	void OnPlayerStateChanged();// 0x31f88f4
	void OnPlayerReConnected(int LostPlayerKey);// 0x31f8844
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x3b98fe4
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x3b98fe4
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x3b98fe4
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x3b98fe4
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x3b98fe4
	void OnPlayerLostConnection(int LostPlayerKey);// 0x31f8794
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x3b98fe4
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x3b98fe4
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x3b98fe4
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x31f8710
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x3b98fe4
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x3b98fe4
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x3b98fe4
	void OnPlayerClickDriveBtn();// 0x31f86fc
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x3b98fe4
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x3b98fe4
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x31f859c
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x3b98fe4
	void OnPickUpExpand();// 0x31f8538
	void OnPickUpCollapsed(bool isCollapsed);// 0x31f84b4
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x3b98fe4
	void OnOneFloatValueDelegate__DelegateSignature(float TheValue);// 0x3b98fe4
	void OnOccupyNewbieGuide(int inGuideID);// 0x31f8438
	void OnObserverLevelLoaded();// 0x31f8424
	void OnObservedUsingWeaponChanged();// 0x31f8410
	void OnObservedPoisonFogStageChanged();// 0x31f83fc
	void OnObservedItemsChanged();// 0x31f83e8
	void OnObservedBulletNumChanged();// 0x31f83d4
	void OnNightStateChangedDelegate__DelegateSignature();// 0x3b98fe4
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x31f8358
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x3b98fe4
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x3b98fe4
	void OnLostConnection__DelegateSignature();// 0x3b98fe4
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x3b98fe4
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0x3b98fe4
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float RatioSignalHP);// 0x3b98fe4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x3b98fe4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x3b98fe4
	void OnKillerNotify(Actor* Killer);// 0x31f82dc
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x31f81d8
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x31f8100
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x31f7ffc
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x3b98fe4
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x3b98fe4
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x3b98fe4
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x3b98fe4
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x3b98fe4
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x3b98fe4
	void OnGameStartDelegate__DelegateSignature();// 0x3b98fe4
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x3b98fe4
	void OnGameModeStateChanged();// 0x3b98fe4
	void OnFingerMove__DelegateSignature(Vector Loc);// 0x3b98fe4
	void OnExitGame__DelegateSignature();// 0x3b98fe4
	void OnEquipWeaponDelegate__DelegateSignature();// 0x3b98fe4
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x3b98fe4
	void OnEquipmentAvatarChange__DelegateSignature();// 0x3b98fe4
	void OnEnterBattleResultStep();// 0x31f7fe8
	void OnDropItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x3b98fe4
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x3b98fe4
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x3b98fe4
	void OnDeadBoxExpand();// 0x31f7fd4
	void OnDeadBoxCollapsed(bool isCollpased);// 0x31f7f50
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x3b98fe4
	void OnConsumableAvatarChange__DelegateSignature();// 0x3b98fe4
	void OnClientWillGotoSpectating();// 0x31f7f3c
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamId, Actor*[] PeerVisualFieldActorList);// 0x3b98fe4
	void OnClickVehicleWarBuff();// 0x31f7f28
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x3b98fe4
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x3b98fe4
	void OnCharacterRecoveryHealthEvent();// 0x31f7f14
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x3b98fe4
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x3b98fe4
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x3b98fe4
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x3b98fe4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x31f7e90
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x3b98fe4
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x3b98fe4
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x3b98fe4
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x3b98fe4
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x31f7e0c
	void OnBuyRevivalSign();// 0x31f7df0
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x3b98fe4
	void OnAutoSprintActive__DelegateSignature();// 0x3b98fe4
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x31f7ca0
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x3b98fe4
	void ObserveWhoKilledMe();// 0x31f7c8c
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x31f7bdc
	void ObserveCharacter(FString InPlayerName);// 0x31f7aa8
	void ObserveAirDropBox(int boxId);// 0x31f7a2c
	void OBCameraTurnSlower();// 0x31f7a18
	void OBCameraTurnFaster();// 0x31f7a04
	void OBCameraMoveSlower();// 0x31f79f0
	void OBCameraMoveNear();// 0x31f79dc
	void OBCameraMoveFaster();// 0x31f79c8
	void OBCameraMoveFar();// 0x31f79b4
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x31f7818
	void NotifyIsInResultView(bool isInResultView);// 0x31f7794
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x3b98fe4
	void MoveUp(float Rate);// 0x31f7718
	void MoveToVehicle(int ItemID);// 0x31f769c
	void MoveToNearestVehicle(float IgnoreDistance);// 0x31f7620
	void MoveToItem(int ItemID);// 0x31f75a4
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x31f7448
	void MoveToAIByDropItem(int ItemID);// 0x31f73cc
	void MoveToAI();// 0x31f73b8
	void MoveTo(float X, float Y, float Z);// 0x31f72c8
	void MoveTempleToSelf();// 0x31f72b4
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x31f71fc
	void ModifyStreamingDistance(int Distance);// 0x31f7180
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x31f7090
	void MemberVoice(int member, int Status);// 0x3b98fe4
	void MarkStartFireFrame();// 0x31f707c
	void MakeVehicleFly(int isFly, bool bIsUp);// 0x31f6fbc
	void LogAIItemCount(int ItemID, float Distance);// 0x31f6f04
	void LocalProfileFootprint();// 0x31f6ef0
	void LocalGetGameStateReconnectInfo();// 0x31f6edc
	void LoadAllLand(bool bLoadAll);// 0x31f6e58
	void LerpFPPCamera();// 0x31f6e44
	void KillSomeOne(FString InPlayerName);// 0x31f6d9c
	void KillAllEnermyVehicle();// 0x31f6d88
	void KillAll();// 0x31f6d74
	void Kill(int GivenNumber);// 0x31f6cf8
	void KickPlayerFromGame();// 0x31f6ce4
	void JumpFromPlane();// 0x31f6cd0
	void JoystickTriggerSprint(bool bIsSprint);// 0x3b98fe4
	bool IsViewTarget(const Actor* pActor);// 0x31f6c38
	bool IsUse3DTouch();// 0x31f6c00
	bool IsTouchToRotControl();// 0x31f6bc0
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x31f6b30
	bool IsToggleOBBulletTrackEffect();// 0x31f6af8
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x31f6a68
	bool IsStandalone();// 0x31f6a2c
	bool IsShowBlood();// 0x31f6a0c
	bool IsSameTeam(Pawn* Other);// 0x31f697c
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x31f68e4
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x31f6854
	bool IsMurderSelfDefense(FString InformMurderName);// 0x31f6798
	bool IsMoveable_DontConsiderFollowingState();// 0x31f6760
	bool IsMoveable();// 0x31f6728
	bool IsLastBreathOrRescueingOther();// 0x31f66f0
	bool IsInRevival();// 0x31f66b8
	bool IsInPlane();// 0x31f6680
	bool IsInParachuteOpen();// 0x31f6648
	bool IsInParachuteJump();// 0x31f6610
	bool IsInParachute();// 0x31f65d8
	bool IsInObservingPlayback();// 0x31f65a0
	bool IsInInitial();// 0x31f6568
	bool IsInFreeCameraView();// 0x31f6548
	bool IsInFinish();// 0x31f6510
	bool IsInFight();// 0x31f64d8
	bool IsInDeathReplay();// 0x31f64a0
	bool IsInDead();// 0x31f6468
	bool IsForbitPickMakeEffect();// 0x31f6430
	bool IsForbitPick(out const FName TombName);// 0x31f6390
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x31f62bc
	bool IsCanViewEnemy();// 0x31f6284
	bool IsCanSpectateTeammate();// 0x31f624c
	bool IsCanImprisonmentTeammate();// 0x31f6214
	bool IsCacheReceiveRespawnZombie();// 0x31f61dc
	bool IsAllowActorTouchMove();// 0x31f61a4
	bool IsAGMPlayer();// 0x31f616c
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x31f60b4
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x31f6038
	void InputCameraMoveTest(float DeltaSeconds);// 0x31f5fbc
	void InitWeatherConfigComponent();// 0x31f5fa8
	void InitTaskDatas(uint32 InPlayerKey);// 0x31f5f2c
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0x3b98fe4
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x31f5d74
	void InitTaskComponent();// 0x31f5d60
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x3b98fe4
	void InitJoyStickAfterActivation();// 0x3b98fe4
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0x3b98fe4
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x31f5c70
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x3b98fe4
	void InfectionEndRound();// 0x31f5c5c
	void ImprisonmentTeammate(FString TeammateName, bool IsSelfDef);// 0x31f5b28
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x3b98fe4
	void HandleUpdateShovelingRelease();// 0x31f5b14
	void HandleUpdateShovelingPressed();// 0x31f5b00
	void HandleUpdateShoveling();// 0x31f5aec
	void HandleTogglePlayerListInOB();// 0x31f5ad8
	void HandleToggleOBTeamList(bool InShow);// 0x31f5a54
	void HandleToggleMapInOB();// 0x31f5a40
	void HandleToggleHitDamageDisplay();// 0x31f5a2c
	void HandleToggleBulletTrack();// 0x31f5a18
	void HandleTipInfo(FString FullMsg);// 0x31f5970
	void HandleSwitchToTeammatePrev();// 0x31f595c
	void HandleSwitchToTeammateNext();// 0x31f5948
	void HandleSwitchToTeam(int InTeamID);// 0x31f58cc
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x31f5850
	void HandleLeaveFreeViewInOB();// 0x31f583c
	void HandleLandOnGroundEnd();// 0x31f5828
	void HandleFlyLeapPlatform();// 0x31f57c8
	void HandleEnterFreeViewInOB();// 0x31f57b4
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x31f56e8
	void HandleClientHasReactivated();// 0x31f56d4
	void HandleChangeRolewearDone();// 0x3b98fe4
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x31f561c
	int GotoSpectating(int TeammatePlayerid);// 0x31f5588
	void GotoFlying();// 0x31f5574
	void GotoDoubleCircleEdge(float Z);// 0x31f54f8
	void GMTeleport(FName Teleporter);// 0x31f547c
	void GMSpawnTrueAI(int playerCount);// 0x31f5400
	void GMSetScalarParam(FString Name, FString ShaderName, float Value);// 0x31f51b4
	void GMSetCampId(int CamId);// 0x31f5138
	void GMSetBoolPoisonCircle();// 0x31f5124
	void GMSetBoolAirDrop();// 0x31f5110
	void GMSetBoolAirAttack();// 0x31f50fc
	void GMSetBoolAI();// 0x31f50e8
	void GMSendDailyTaskReport();// 0x31f50d4
	void GMOpenWeather(int OpenWeatherID);// 0x31f5058
	void GMFormationAITeam();// 0x31f5044
	void GMEnableRandom();// 0x31f5030
	void GMEnableAllComponent();// 0x31f501c
	void GMDisableRandom();// 0x31f5008
	void GMDisableAllComponent();// 0x31f4ff4
	void GMCloseWeather(int CloseWeatherID);// 0x31f4f78
	void GMChangeFinalCircleAI();// 0x31f4f64
	void GMBroastSyncTaskInfo();// 0x31f4f50
	int GetWriteCircleDistance();// 0x31f4f1c
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x31f4ee8
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x31f4df4
	int GetWeaponDIYPlanID(int WeaponId);// 0x31f4d68
	int GetWeaponAvatarItemId(int BPID);// 0x31f4cd4
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x31f4c04
	float GetViewPortDPIScale();// 0x31f4bc8
	VehicleUserComponent* GetVehicleUserComp();// 0x31f4b94
	bool GetUseMotionControlLog();// 0x31f4b5c
	bool GetUseMotionControlEnable();// 0x31f4b24
	int GetUnlockWearCount();// 0x31f4af0
	float GetTouchForce(byte FingerIndex);// 0x31f4a64
	Actor* GetThePlane();// 0x31f4a48
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x31f49bc
	SpringArmComponent* GetTargetedSpringArm();// 0x31f4988
	int GetStatTriangles();// 0x31f4954
	FString GetStatMemory();// 0x31f48b0
	int GetStatDrawCalls();// 0x31f487c
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x31f471c
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x31f4628
	int[] GetSpecialAreaList();// 0x31f4584
	int GetSpecialAreaID();// 0x31f4550
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x31f451c
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x31f4484
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x31f435c
	int GetRevivalCountDownTime();// 0x31f4328
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x3b98fe4
	QuickSignComponent* GetQuickSignComponent();// 0x31f42f4
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x31f42c0
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x31f41e4
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x31f41b0
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x31f40e8
	Transform GetPaintDecalTargetTransform();// 0x31f4094
	ObservingReplay* GetObservingPlayback();// 0x31f4060
	Vector GetNewestAirDropBoxPos();// 0x31f4028
	PlayerInfoInOB[] GetNearPlayerList();// 0x31f3f10
	FString GetMurderUIDStr();// 0x31f3e58
	FString GetMurderName();// 0x31f3db4
	bool GetMurderIsAI();// 0x31f3d7c
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x31f3b74
	byte GetMaxTouchForceFinger();// 0x31f3b30
	Vector2D GetJoyStickVisualSize();// 0x31f3afc
	Vector2D GetJoyStickCenter();// 0x31f3ac8
	int GetItemUseSpecialAreaID(int ItemID);// 0x31f3a3c
	bool GetIsRespawn();// 0x31f3a1c
	bool GetIsMurderSameTeam();// 0x31f39e4
	bool GetIsFreeCamera();// 0x31f39c4
	enum GetInfectionPawnSubType();// 0x31f3990
	enum GetInfectionPawnMainType();// 0x31f395c
	IdeaDecalManager* GetIdeaDecalManager();// 0x31f3928
	void GetGameStateReconnectInfoOnServer();// 0x31f38c8
	void GetGameScreenSize();// 0x31f38b4
	void GetGameResult();// 0x31f38a0
	LastGameRemainItemData GetGameRemainItems();// 0x31f37c8
	int GetFriendDistance();// 0x31f3794
	Vector GetFocalLocation();// 0x31f3754
	FString GetFinalMurderName();// 0x31f3654
	WeaponHitDetailInfo GetDetailHitInfo();// 0x31f353c
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x31f33f8
	enum GetCurrentStateType();// 0x31f33c4
	Vector GetCurrentLevelOffset();// 0x31f338c
	STExtraPlayerState* GetCurPlayerState();// 0x31f3358
	int GetCurPlayerId();// 0x31f3324
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x31f32f0
	Vector GetCurPawnLocation();// 0x31f32b8
	Pawn* GetCurPawn();// 0x31f3284
	float GetCurFPS();// 0x31f3250
	Rotator GetControlLookRotation();// 0x31f3210
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x31f312c
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x31f2fcc
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x31f2f40
	ChatComponent* GetChatComponent();// 0x31f2f0c
	BackpackComponent* GetBackpackComponent();// 0x31f2ed8
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x31f2d74
	void GameModeGotoNextState();// 0x31f2d60
	void GameModeGotoFightingState();// 0x31f2d4c
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x31f2c94
	void ForceServerSetControlRotationOnVehicle();// 0x31f2c80
	void ForceReleaseCurTouchMoveFinger();// 0x31f2c6c
	void ForceDropItemsWithType(int TypeItem);// 0x31f2bf0
	void ForceDropItems(out const int[] ItemTableList);// 0x31f2b38
	void ForceDropAllItem();// 0x31f2b24
	void FlushItem(int onlyStatic);// 0x31f2aa8
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x31f2a2c
	void FireOrGrenade();// 0x31f2a18
	void FindAIDropItem(int ItemID);// 0x31f299c
	void Fight();// 0x31f2988
	void FadeSceneToGrayOnDeath(bool bSet);// 0x31f2904
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x31f278c
	void ExitNightState();// 0x31f2778
	void ExitFreeCamera(bool IsForceReset);// 0x31f26f4
	void ExecDSCommand(const FString DSCommand);// 0x31f2644
	void EquipIceDrinkItems(out const int[] ItemList);// 0x31f258c
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x3b98fe4
	void EnterNightState();// 0x31f2578
	void EnterExtreme(bool enterOrQuit);// 0x31f24f4
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x31f23f8
	void EndForceTouchFire(Vector Loc);// 0x31f237c
	void EnablePlayerInHouse(bool bIsIn);// 0x31f22f8
	void EnableMyLandscapeDraw();// 0x31f22e4
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x3b98fe4
	void DynamicCreateComponents();// 0x31f22d0
	void DsLuaGM(const FString CMDString);// 0x31f219c
	void DsLuaDoString(FString LuaString);// 0x31f20f4
	void DropItemsWithType(int TypeItem);// 0x31f2078
	void DropItem(int ID);// 0x31f1ffc
	void DropAllItem();// 0x31f1fe8
	void DoUITouchMove(Vector Loc);// 0x3b98fe4
	void DoubleClickCancel(const byte FingerIndex);// 0x31f1f6c
	void DoTouchMove(float Yaw, float Pitch);// 0x3b98fe4
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x31f1ebc
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x31f1e0c
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x3b98fe4
	void DisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x31f1c5c
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x31f1a0c
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x31f17bc
	void DisplayGameTipWithMsgID(int ID);// 0x31f1740
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x31f14f0
	void DisplayBattleGeneralTip(int ID, FString param1, FString param2);// 0x31f12a0
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x31f1224
	void DispatchPlayerReconnectedEvent();// 0x31f1210
	void DispatchPlayerLostEvent();// 0x31f11fc
	void DispatchPlayerExitEvent();// 0x31f11e8
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x31f116c
	void DisableMyLandscapeDraw();// 0x31f1158
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x3b98fe4
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x3b98fe4
	void DelayGotoSpectating();// 0x31f1144
	void DelayForceExitFreeCamera();// 0x31f1130
	void DebugWorldPlayerAvatarInfo();// 0x31f111c
	void DebugSetUIVisibility(bool bUIVisibility);// 0x3b98fe4
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x31f1098
	void DebugEnableDrawSearchLine(int bEnabled);// 0x31f101c
	void DebugEnableBulletImpact(int bEnabled);// 0x31f0fa0
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x31f0e3c
	void DealGetAllNearShotWeapon(float disRate);// 0x31f0dc0
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x31f0d0c
	void DealGetAllNearMoveCharacter(float checkDis);// 0x31f0c90
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x31f0bd0
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x31f0a30
	void ConsumeRevivalSign();// 0x31f0a14
	void CollectAllPlayerWeaponPosInfo();// 0x31f0a00
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x31f0908
	void ClientStopShoveling();// 0x31f08a8
	void ClientStartOnlineGame();// 0x31f088c
	void ClientShowInfectAreaWarning();// 0x31f082c
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x31f06c4
	void ClientSetPoisonSmogStage(int SmogStage);// 0x31f0614
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x31f051c
	void ClientSetControlRotation(const Rotator NewRotation);// 0x31f049c
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x31f03b4
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x31f02f4
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x31f01f0
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x31f0120
	void ClientQuitViewEnemy();// 0x31f0104
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x31f0010
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x3b98fe4
	void ClientOnHurt();// 0x31efff4
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x3b98fe4
	void ClientOnDamageToOther(float _DamageToOther);// 0x31eff70
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x3b98fe4
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x31efe64
	void ClientInterruptGame();// 0x31efe04
	void ClientInitIngameUIAfterRespawn();// 0x31efda4
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x31efce8
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x31efc28
	void ClientGotoSpectating();// 0x31efc0c
	void ClientGiveUpRevivalTemmates();// 0x31efbf8
	void ClientGameStarted();// 0x31efbdc
	void ClientFriendBattleEnd();// 0x31efbc0
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x31efb34
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x31efaa8
	void ClientEnterViewBox(int boxId);// 0x31efa24
	void ClientEndOnlineGame();// 0x31efa08
	void ClientDisplayNormalTips(FString Content);// 0x31ef958
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x31ef7a0
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x31ef618
	void ClientDisplayGameTipWithMsgID(int ID);// 0x31ef568
	void ClientCheckStartShovelingFail();// 0x31ef508
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x31ef458
	void ClientChangeStatePC(enum TargetStateType);// 0x31ef3d4
	void ClearParachuteAnimAssetCache();// 0x31ef3c0
	void ClearBossBornPoint();// 0x31ef3ac
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x31ef30c
	bool CientRevivalTemmates();// 0x31ef2d4
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x31ef208
	void CheckConsumeGlideItem();// 0x31ef1f4
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x31ef15c
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x31ef0cc
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x31ef050
	void ChangeToWalkingDead();// 0x31ef03c
	void ChangeStatePC(enum TargetStateType);// 0x31eefc0
	void ChangeSpectatorStateToFreeView();// 0x31eefac
	bool ChangeRolewearIndex(int NewIndex);// 0x31eef1c
	void ChangePVELevel(int Lv);// 0x31eeea0
	void ChangeFinishTime(int RestTime);// 0x31eee24
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x3b98fe4
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x3b98fe4
	void ChangeAIBehaviorTree(int TreeIndex);// 0x31eeda8
	void CanSeeAllUI(bool bUIVisibility);// 0x31eed24
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x31eec78
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x31eeb6c
	void CallZombieFlowAirDrop(int ZombieID);// 0x31eeaf0
	void CallZombieAirDrop(int ZombieID);// 0x31eea74
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x31ee9cc
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x31ee824
	void CallShowTouchInterface(bool InShow);// 0x31ee798
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x31ee274
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x31ee13c
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x31ee0c0
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x31ee044
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x3b98fe4
	void C2S_RequestSkillPrompt();// 0x31edfe4
	void C2S_RequestBeingRescuedRemainingTime();// 0x31edf84
	void BroadcastFatalDamageToClient(FString CauserName, FString VictimName, FString FuzzyCauserName, FString FuzzyVictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int Relationship, int PreviousHealthStatus, FString RealKillerName, int realKillerNewKillNum, FString CauserNation, FString VictimNation, uint32 causerKey, uint32 victimKey, int causerAnchorPlatformResID, int causerAnchorPlatformColorID, int victimAnchorPlatformResID, int victimAnchorPlatformColorID, int realKillerAnchorPlatformResID, int realKillerAnchorPlatformColorID, int CauserWeaponAvatarID, int CauserClothAvatarID, int CauserType, int VictimType);// 0x31ed7c0
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x31ed5e0
	bool BPGetIsAndroidSimulator();// 0x31ed5a8
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x31ed3d0
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x31ed25c
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x3b98fe4
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x31ed1e0
	void BindVoiceCheckFunction();// 0x31ed1cc
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x31ed114
	void BeginAbsorb();// 0x31ed0b4
	void BackToGameDataRefresh();// 0x31ed0a0
	bool AutoSelectViewTarget();// 0x31ed068
	void AutoSelectTeammateToView();// 0x31ed054
	void AddWeaponPendantItem(int WeaponId, int pendantID);// 0x31ecfa0
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x31ecea0
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x31ecdac
	void AddItemAttachList(int BaseItemID);// 0x31ecd30
	void AddItem(int ID, int Count, int PickupType);// 0x31ecc40
	void AddBossBornPoint(float BornX, float BornY);// 0x31ecb8c
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x31eca64
	void AddAIItem(int ID, int Count, float Distance);// 0x31ec974
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x31ec8b4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x31ec830

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x7c8, Size: 8]
	FString PlayerName;//[Offset: 0x7d0, Size: 16]
	uint32 PlayerKey;//[Offset: 0x7e0, Size: 4]
	uint64 UId;//[Offset: 0x7e8, Size: 8]
	int TeamID;//[Offset: 0x800, Size: 4]
	int CampID;//[Offset: 0x804, Size: 4]
	Vector CharacterLocation;//[Offset: 0x808, Size: 12]
	int RoomMode;//[Offset: 0x814, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x818, Size: 24]
	int planeAvatarId;//[Offset: 0x830, Size: 4]
	int DyeDebugFlag;//[Offset: 0x834, Size: 4]
	int PlayerStartID;//[Offset: 0x838, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x840, Size: 64]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	FString PlanetailResLink;//[Offset: 0x888, Size: 16]
	int InPacketLossRate;//[Offset: 0x898, Size: 4]
	int OutPacketLossRate;//[Offset: 0x89c, Size: 4]
	int ClientNetworkType;//[Offset: 0x8a0, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	int GameReplayType;//[Offset: 0x8cc, Size: 4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x8d0, Size: 48]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x900, Size: 16]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x910, Size: 16]
	int LobbyShowWeaponID;//[Offset: 0x920, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	FString Nation;//[Offset: 0x928, Size: 16]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x940, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x944, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x948, Size: 16]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x958, Size: 16]
	int RolewearIndex;//[Offset: 0x968, Size: 4]
	int[] equip_plating_list;//[Offset: 0x970, Size: 16]
	int VehicleSkinInReady;//[Offset: 0x980, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x984, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x988, Size: 16]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x998, Size: 32]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x9b8, Size: 16]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x9c8, Size: 16]
	delegate OnInitialWeaponScheme;//[Offset: 0x9d8, Size: 16]
	int CurWeaponSchemeIndex;//[Offset: 0x9e8, Size: 4]
	int PveLevel;//[Offset: 0x9ec, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x9f0, Size: 16]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0xa00, Size: 16]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0xa10, Size: 16]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0xa20, Size: 16]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0xa30, Size: 16]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0xa40, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0xa50, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0xa60, Size: 80]
	<int,int> GrenadeAvatarItemList;//[Offset: 0xb00, Size: 80]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0xb50, Size: 16]
	<int,int> VehicleAvatarList;//[Offset: 0xb60, Size: 80]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0xbb0, Size: 80]
	int[] VehicleMusicList;//[Offset: 0xc00, Size: 16]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xc10, Size: 16]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xc20, Size: 16]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xc30, Size: 80]
	<int,int> InitialWeaponPendantList;//[Offset: 0xc80, Size: 80]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xcd0, Size: 16]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xce0, Size: 16]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xcf0, Size: 16]
	uint32 TaskSyncToDsTs;//[Offset: 0xd00, Size: 4]
	BornItem[] BornItems;//[Offset: 0xd08, Size: 16]
	int AnchorPlatResID;//[Offset: 0xd18, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xd1c, Size: 4]
	int64 LastGameResultTime;//[Offset: 0xd40, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd49, Size: 1]
	FString IpCountryStr;//[Offset: 0xd50, Size: 16]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd61, Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd62, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd63, Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0xd64, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd68, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xd6c, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xd70, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	FString[] FriendObservers;//[Offset: 0xd78, Size: 16]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd94, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xdf0, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfd, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xe10, Size: 16]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xe20, Size: 16]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xe30, Size: 16]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xe40, Size: 16]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xe50, Size: 16]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xe60, Size: 16]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xe70, Size: 16]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xe80, Size: 16]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xe90, Size: 16]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xea0, Size: 16]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xed8, Size: 16]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	float NotifyTimeOut;//[Offset: 0xeec, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xef0, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xef8, Size: 16]
	int AntiDataCD;//[Offset: 0xf18, Size: 4]
	int ModeID;//[Offset: 0xf1c, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xf50, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xf54, Size: 4]
	bool UseingWeaponScheme();// 0x37b2984
	void TestShowLongTimeNoOperation();// 0x37b2944
	void TestShowConfirmDialogOfMisKill();// 0x37b2930
	void TestRespawn();// 0x37b291c
	void TestLogout();// 0x37b2908
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x37b27bc
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x37b2684
	void SetUsedSimulationCVar(bool Value);// 0x37b2600
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x37b2530
	void SetPanels(out const UAEUserWidget*[] panels);// 0x37b2470
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x37b23dc
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x37b230c
	void ServerTestLogout();// 0x37b22ac
	void ServerSetVoiceId(int VoiceID);// 0x37b21fc
	void ServerKickSelf();// 0x37b219c
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x37b20ec
	void ServerExitGame();// 0x37b208c
	void ServerAcknowledgeReconnection(uint32 Token);// 0x37b1fdc
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x37b1ee4
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x37b1dec
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x37b1cc4
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x37b1a24
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x37b1904
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x37b17e4
	void Respawn();// 0x37b17c8
	void ResetUsedSimulationCVar();// 0x37b17b4
	void ReleaseInGameUI();// 0x37b1798
	void ReceivePostLoginInit();// 0x3b98fe4
	void PrintStatistics();// 0x37b1784
	void PlayerStartIDReceived();// 0x37b1770
	void OnRep_WeaponAvatarDataList();// 0x37b1754
	void OnRep_WatchPlayerKey();// 0x37b1738
	void OnRep_UsedSimulation();// 0x37b171c
	void OnRep_PveLevel();// 0x37b1700
	void OnRep_PlayerOBInfoList();// 0x37b16ec
	void OnRep_LastGameResultTime();// 0x37b16d0
	void OnRep_IsSpectatingEnemy();// 0x37b16b4
	void OnRep_IsSpectating();// 0x37b1698
	void OnRep_IsObserver();// 0x37b167c
	void OnRep_InitialWeaponSchemeInfo();// 0x37b1668
	void OnRep_InitialEquipmentAvatar();// 0x37b164c
	void OnRep_InitialConsumableAvatar();// 0x37b1630
	void OnRep_FriendObservers();// 0x37b1614
	void OnRep_CurWeaponSchemeIndex();// 0x37b1600
	void OnRep_bRoomOwner();// 0x37b15e4
	void NotifyEnterBattle();// 0x37b15d0
	void LuaDoString(FString LuaString);// 0x37b1520
	void KickSelf();// 0x37b150c
	bool IsSpectator();// 0x37b14d4
	bool IsRoomMode();// 0x37b14b0
	bool IsPureSpectator();// 0x37b1478
	bool IsObserver();// 0x37b1440
	bool IsInSpectatingEnemy();// 0x37b1408
	bool IsInSpectating();// 0x37b13d0
	bool IsFriendOrEnemySpectator();// 0x37b1398
	bool IsFriendObserver();// 0x37b1360
	bool IsExited();// 0x37b1328
	bool IsDemoRecSpectator();// 0x37b12f0
	bool IsDemoPlaySpectator();// 0x37b12b8
	bool IsDemoPlayGlobalObserver();// 0x37b1280
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x37b11cc
	void InitWeaponAvatarItems();// 0x37b11b0
	void InitVehicleMusicList();// 0x37b1194
	void InitVehicleAvatarList();// 0x37b1178
	void InitVehicleAdvanceAvatarList();// 0x37b115c
	void InitIngameUI();// 0x37b1140
	void InitGrenadeAvatarList(bool ReInitial);// 0x37b10b4
	int GotoSpectating(int PlayerID);// 0x37b1020
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x37b0f44
	int GetWeaponAvatarItemId(int ID);// 0x37b0eb0
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskID);// 0x37b0e20
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x37b0dec
	uint32 GetCurrentOBPlayerKey();// 0x37b0db0
	int GetCurrentOBPlayerInfoIndex();// 0x37b0d7c
	void ForceNetReady();// 0x37b0d68
	void ExitGame();// 0x37b0d54
	void ExhaustCPU();// 0x37b0d40
	void ExecDSCommand(const FString DSCommand);// 0x37b0c90
	void ExcuteIntRecord(FString Key, int Count);// 0x37b0b20
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x37b09b0
	void EnableInGameUI();// 0x37b099c
	void DumpUAENetActors();// 0x37b0988
	void DumpRegions();// 0x37b0974
	void DumpNetActors();// 0x37b0960
	void DumpCharacters();// 0x37b094c
	void DumpAllUI();// 0x37b0938
	void DumpAllObjects();// 0x37b0924
	void DumpAllActors();// 0x37b0910
	void DoLuaFile(FString Filename);// 0x37b0860
	void DoCrash();// 0x37b084c
	void DisableInGameUI();// 0x37b0838
	void ClientShowTeammateEscapeNotice();// 0x37b081c
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString param1, FString param2);// 0x37b0600
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x37b04ac
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x37b0394
	void ClientInitPlayerOBInfoButton();// 0x37b0378
	void ClientBroadcastRespawnComplete();// 0x37b035c
	void ClientBroadcastReconnectionSuccessful();// 0x37b0340
	void ClientAcknowledgeReconnection(uint32 Token);// 0x37b02bc
	void CheckPlayerOBInfoButtonInit();// 0x37b02a0
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x37b0208
	void CastUIMsg(FString strMsg, FString module);// 0x37b00f0
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x37affd8
	void CallLuaGlobalFunction(FString FunctionName);// 0x37aff28

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x758, Size: 80]
	FString LuaFilePath;//[Offset: 0x7a8, Size: 16]

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xf48, Size: 16]
	delegate OnDeath;//[Offset: 0xf58, Size: 16]
	delegate OnBulletChange;//[Offset: 0xf68, Size: 16]
	delegate OnPlayerPoseChange;//[Offset: 0xf78, Size: 16]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xf88, Size: 16]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xf98, Size: 16]
	delegate OnPlayerPickUp;//[Offset: 0xfa8, Size: 16]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xfb8, Size: 16]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xfc8, Size: 16]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xfd8, Size: 16]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xfe8, Size: 16]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xff8, Size: 16]
	delegate OnFollowStateChanged;//[Offset: 0x1008, Size: 16]
	delegate OnCharacterAimModeChanged;//[Offset: 0x1040, Size: 16]
	delegate OnPerspectiveChanged;//[Offset: 0x1050, Size: 16]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x1060, Size: 16]
	delegate OnDeathDelegate;//[Offset: 0x1070, Size: 16]
	delegate OnPostTakeDamage;//[Offset: 0x1080, Size: 16]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x1090, Size: 16]
	delegate OnStartInitDelegate;//[Offset: 0x10a0, Size: 16]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0x10b0, Size: 16]
	delegate OnUpdateForSleepComponent;//[Offset: 0x10c0, Size: 16]
	delegate AnimMontagePlayDelegate;//[Offset: 0x1110, Size: 16]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x1120, Size: 16]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0x1130, Size: 16]
	delegate OnCharacterStartFireDelegate;//[Offset: 0x1140, Size: 16]
	delegate OnCharacterStopFireDelegate;//[Offset: 0x1150, Size: 16]
	delegate OnCharacterShootDelegate;//[Offset: 0x1160, Size: 16]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0x1170, Size: 16]
	delegate OnCharacterEndViewTarget;//[Offset: 0x1180, Size: 16]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0x1190, Size: 16]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0x11a0, Size: 16]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0x11b0, Size: 16]
	delegate OnPawnRespawnDelegate;//[Offset: 0x11c0, Size: 16]
	AkAudioEvent* DeathSound;//[Offset: 0x11d0, Size: 8]
	AkAudioEvent* PickupSound;//[Offset: 0x11d8, Size: 8]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0x11e0, Size: 8]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0x11e8, Size: 8]
	AkAudioEvent* SwitchSightSound;//[Offset: 0x11f0, Size: 8]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0x11f8, Size: 8]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1200, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1200, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1200, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0x1204, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 1]
	float Money;//[Offset: 0x120c, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1211, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1211, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1212, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1213, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0x1214, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1218, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1219, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121a, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121b, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0x1220, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0x1228, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0x122c, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0x1230, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0x1234, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0x1238, Size: 4]
	FName HeadSocketName;//[Offset: 0x1240, Size: 8]
	FName LFootSocketName;//[Offset: 0x1248, Size: 8]
	FName RFootSocketName;//[Offset: 0x1250, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1258, Size: 8]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x1260, Size: 8]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0x1268, Size: 8]
	EffectComponent* NewEffectComponent;//[Offset: 0x1270, Size: 8]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1278, Size: 8]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x1280, Size: 8]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x1288, Size: 8]
	GroupPhysicsComponent* GroupPhysics;//[Offset: 0x1290, Size: 8]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0x129c, Size: 12]
	byte PoseState;//[Offset: 0x12a8, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0x12ac, Size: 4]
	Actor* ThePlane;//[Offset: 0x12b0, Size: 8]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x12b8, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x12bc, Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c8, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c9, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d8, Size: 1]
	float RadialDamageScale;//[Offset: 0x12e0, Size: 4]
	byte LastPoseState;//[Offset: 0x12e4, Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e5, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x12e8, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f0, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f1, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f2, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x12f4, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f8, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x1300, Size: 8]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x1308, Size: 16]
	Actor*[] PlayerSlotData;//[Offset: 0x1318, Size: 16]
	Actor*[] InventoryData;//[Offset: 0x1328, Size: 16]
	AkComponent* SoundComp;//[Offset: 0x1390, Size: 8]
	AkComponent* AmbientSoundComp;//[Offset: 0x1398, Size: 8]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a0, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a1, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x13a8, Size: 8]
	AkAudioEvent* AmbientSound;//[Offset: 0x13b0, Size: 8]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x13b8, Size: 80]
	SceneComponent* MeshContainer;//[Offset: 0x1408, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x1410, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0x1414, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x1418, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x141c, Size: 4]
	float HearRadius;//[Offset: 0x1420, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1429, Size: 1]
	Actor* WaterObj;//[Offset: 0x1430, Size: 8]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1438, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0x143a, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x1440, Size: 8]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x1448, Size: 8]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x1450, Size: 8]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1458, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x145c, Size: 4]
	float NearDeathBreath;//[Offset: 0x1460, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1464, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x1468, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x1474, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x1478, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1480, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1488, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1490, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1498, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x14a0, Size: 80]
	Vector ScopeNewIdleLoc;//[Offset: 0x14f0, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x14fc, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1508, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x150c, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1518, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x151c, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1520, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1528, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1534, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1538, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x153c, Size: 4]
	float ScopeLagScale;//[Offset: 0x1544, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1548, Size: 4]
	float ScopeFov;//[Offset: 0x154c, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1558, Size: 8]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x1560, Size: 8]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1568, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x156c, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1570, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x1574, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x1580, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158c, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x1590, Size: 8]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x1598, Size: 8]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x15a0, Size: 8]
	CameraComponent* FPPCameraComp;//[Offset: 0x15a8, Size: 8]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x15b0, Size: 8]
	CameraComponent* ScopeCameraComp;//[Offset: 0x15b8, Size: 8]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x15c0, Size: 8]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c8, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x15cc, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x15e0, Size: 16]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x15f0, Size: 16]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1600, Size: 16]
	delegate OnMovementBaseChanged;//[Offset: 0x1610, Size: 16]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1620, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1621, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1622, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x1628, Size: 8]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1630, Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1640, Size: 16]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x1650, Size: 16]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x1660, Size: 8]
	float PickUpRadius;//[Offset: 0x1668, Size: 4]
	SimViewData SimulateViewData;//[Offset: 0x166c, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1672, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x1674, Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1680, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x16a8, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x16c0, Size: 16]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x16d0, Size: 16]
	float MaxDispalyFootprintDistance;//[Offset: 0x16e4, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x16e8, Size: 12]
	KilledTipsBlock BlockData;//[Offset: 0x16f8, Size: 56]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x1730, Size: 8]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x1738, Size: 8]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1748, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x174c, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x1758, Size: 16]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x1768, Size: 16]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x1778, Size: 16]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1788, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x17b0, Size: 8]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x17b8, Size: 4]
	float AIThrowPitch;//[Offset: 0x17c0, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x17c4, Size: 8]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x17d0, Size: 80]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x1820, Size: 16]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1830, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1831, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x1838, Size: 8]
	Vector CurInputVector;//[Offset: 0x1840, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x1850, Size: 8]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x1868, Size: 8]
	float voiceCheckCD;//[Offset: 0x1870, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1874, Size: 4]
	float VoiceCheckDis;//[Offset: 0x1878, Size: 4]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x187c, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1898, Size: 80]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x18e8, Size: 8]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x1900, Size: 8]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1908, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x190c, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1910, Size: 8]
	int HandFolderRatio;//[Offset: 0x1918, Size: 4]
	float SwimUpRate;//[Offset: 0x191c, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x1920, Size: 8]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1928, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1929, Size: 1]
	Vector MoveInputState;//[Offset: 0x1964, Size: 12]
	float SwitchPoseCD;//[Offset: 0x1990, Size: 4]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b0, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x19cc, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x19d4, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x19f0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1a20, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1a68, Size: 8]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1a70, Size: 8]
	float DelayHideDuration;//[Offset: 0x1a78, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1a7c, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1a80, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a84, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1a88, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a94, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1a98, Size: 280]
	AnimParamList CurAnimParamList;//[Offset: 0x1bb0, Size: 284]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1cd0, Size: 232]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1db8, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1de8, Size: 40]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1e10, Size: 40]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1e38, Size: 16]
	byte ThrowGrenadeMode;//[Offset: 0x1e48, Size: 1]
	byte PrevThrowGrenadeMode;//[Offset: 0x1e49, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e58, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e59, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1e5c, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e64, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1e68, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1e6c, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1e84, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1e88, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1e8c, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1e90, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1e94, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1e98, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1e9c, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1ea0, Size: 4]
	float HealthPredict;//[Offset: 0x1ea4, Size: 4]
	float BreathAmount;//[Offset: 0x1ea8, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eac, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1eb0, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1eb4, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1eb8, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x1ebc, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1ec0, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1ec4, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1ec8, Size: 16]
	byte HealthStatus;//[Offset: 0x1ed8, Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1ee0, Size: 80]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f30, Size: 1]
	float SpeedRate;//[Offset: 0x1f34, Size: 4]
	float EnergySpeedScale;//[Offset: 0x1f38, Size: 4]
	float RecoveryScale;//[Offset: 0x1f3c, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1f40, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1f44, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x1f48, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x1f50, Size: 56]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1f88, Size: 16]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f98, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1f9c, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1fa0, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1fa4, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1fa8, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1fb0, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1fb4, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1fbc, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc0, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1fc4, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1fc8, Size: 8]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1fd0, Size: 8]
	float StandHalfHeight;//[Offset: 0x1fd8, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1fdc, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1fe0, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1fe4, Size: 4]
	float StandRadius;//[Offset: 0x1fe8, Size: 4]
	float DyingRadius;//[Offset: 0x1fec, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1ff0, Size: 16]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x2000, Size: 16]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x2010, Size: 16]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x2020, Size: 8]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2038, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x2040, Size: 16]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2050, Size: 1]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x2058, Size: 8]
	float LastVehicleDamageCD;//[Offset: 0x2060, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x2068, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2072, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x2074, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2090, Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x2098, Size: 8]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x20a0, Size: 8]
	<enum,int> AvatarRectifyData;//[Offset: 0x20a8, Size: 80]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x20f8, Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x2100, Size: 16]
	delegate OnDetachedFromVehicle;//[Offset: 0x2110, Size: 16]
	delegate OnChangedVehicleSeat;//[Offset: 0x2120, Size: 16]
	delegate OnPlayerStateUpdated;//[Offset: 0x2130, Size: 16]
	float MaxLeaveVehicleVelocity;//[Offset: 0x214c, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x2160, Size: 16]
	Rotator AngledSightRotOffset;//[Offset: 0x2170, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2288, Size: 8]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2290, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2294, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x2298, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x22a0, Size: 80]
	STParachuteState STReplicateParchuteState;//[Offset: 0x22f0, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x2308, Size: 8]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x2310, Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2330, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x2334, Size: 4]
	float MoveRightInputValue;//[Offset: 0x2338, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233c, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2340, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2344, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2345, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2348, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x234c, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2358, Size: 8]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2360, Size: 16]
	STExtraBaseCharacter* Leader;//[Offset: 0x2370, Size: 8]
	enum FollowState;//[Offset: 0x2378, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x2380, Size: 16]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x2390, Size: 16]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x23a0, Size: 16]
	FString LatestInviter;//[Offset: 0x23b0, Size: 16]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c0, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x23c8, Size: 4]
	float maxShowAlpha;//[Offset: 0x23d0, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x23d4, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x23d8, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x23dc, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2418, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x241c, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2420, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x247c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x248c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x251c, Size: 4]
	Vector EmoteColBox;//[Offset: 0x2558, Size: 12]
	int IsEnableLogAIPlayerPos;//[Offset: 0x256c, Size: 4]
	float CompVisionOpDis;//[Offset: 0x2570, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x2574, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2578, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2588, Size: 80]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d8, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x25e0, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x25e4, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x25e8, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x25ec, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x25f0, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x25f4, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x25f8, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x25fc, Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2600, Size: 1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x2610, Size: 8]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261c, Size: 1]
	float EquipingScopeDelay;//[Offset: 0x2620, Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2625, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x2628, Size: 16]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x263c, Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x2654, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x2664, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2698, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2699, Size: 1]
	int AloneDistance;//[Offset: 0x269c, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x26a0, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x26a8, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x26d0, Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x26d4, Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x26d8, Size: 16]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x26e8, Size: 8]
	delegate WearingMontageFinishedEvent;//[Offset: 0x26f0, Size: 16]
	Vector ChangeWearingColBox;//[Offset: 0x273c, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x2748, Size: 4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x274c, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2750, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2751, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x2754, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x2758, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x2760, Size: 8]
	Actor* DecalActor;//[Offset: 0x2768, Size: 8]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x2770, Size: 8]
	Actor* PuzzleTraceLineActor;//[Offset: 0x2778, Size: 8]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2780, Size: 1]
	float OutBattleStateTime;//[Offset: 0x2784, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x2790, Size: 16]
	BonfireActor* CurBonfire;//[Offset: 0x27a0, Size: 8]
	BonfireActor* BuiltBonfire;//[Offset: 0x27a8, Size: 8]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x27b0, Size: 40]
	delegate OnCharacterPlayEmote;//[Offset: 0x27d8, Size: 16]
	delegate OnCharacterWin;//[Offset: 0x27e8, Size: 16]
	delegate OnCharacterFallingModeChange;//[Offset: 0x27f8, Size: 16]
	Vector LastServerHitImpactPoint;//[Offset: 0x2808, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x2814, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x2815, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2816, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x2818, Size: 16]
	int MonsterDamageReduceSkillID;//[Offset: 0x2828, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x2830, Size: 80]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x2880, Size: 8]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289a, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x28a0, Size: 16]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x28b0, Size: 8]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x28b8, Size: 8]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x28c0, Size: 152]
	byte MeleeAutoAimType;//[Offset: 0x2958, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296c, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x2970, Size: 28]
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298c, Size: 1]
	TimerHandle CharacterShowWeaponTimerHandle;//[Offset: 0x2990, Size: 8]
	float CharacterShowWeaponTime;//[Offset: 0x2998, Size: 4]
	enum CharacterMainType;//[Offset: 0x299c, Size: 1]
	enum CharacterSubType;//[Offset: 0x299d, Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x29a0, Size: 16]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x29b0, Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x29b4, Size: 4]
	delegate BulletTrackShowDelegate;//[Offset: 0x29b8, Size: 16]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x29c8, Size: 16]
	delegate MarkPlayerPosDelegate;//[Offset: 0x29d8, Size: 16]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x29e8, Size: 4]
	PlayerVaultComponent* VaultControllerComp;//[Offset: 0x29f0, Size: 8]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f8, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f9, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x2a00, Size: 16]
	float LastSprintTriggerTime;//[Offset: 0x2a10, Size: 4]
	float FallingTime;//[Offset: 0x2a18, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1c, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1d, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x2a20, Size: 4]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a24, Size: 1]
	Actor* MyConstActor;//[Offset: 0x2a28, Size: 8]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a30, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x2a38, Size: 16]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x2a48, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x2a50, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x2a5c, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x2a60, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x2a64, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x2a78, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7c, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7d, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7e, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x2a80, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x2a88, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x2a90, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x2ac0, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x2ac8, Size: 16]
	float ParticleShowingInterval;//[Offset: 0x2ad8, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae0, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae1, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2ae8, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x2b10, Size: 12]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2b20, Size: 8]
	float RTNoDamageTime;//[Offset: 0x2b28, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2c, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b34, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x2b40, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x2b48, Size: 8]
	FString DebugInfoWidgetPath;//[Offset: 0x2b50, Size: 16]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x2b60, Size: 16]
	Vector DebugInfoLocation;//[Offset: 0x2b70, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x2b7c, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b84, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b85, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x2b88, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x2b8c, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x2b90, Size: 16]
	Actor*[] OverlapDarkAreas;//[Offset: 0x2ba0, Size: 16]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x2bb0, Size: 4]
	int PrepareEmoteId;//[Offset: 0x2bb8, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x2bc0, Size: 16]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2bd0, Size: 8]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd8, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd9, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bda, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x2bdc, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be1, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be2, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be3, Size: 1]
	bool bRepShoulderState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be4, Size: 1]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be5, Size: 1]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x31820ac
	void VaultFailPawnCPP(const FString Content);// 0x3181ffc
	void VaultFailPawnBluePrint(out const FString Content);// 0x3181f3c
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x3181e88
	void UseSpringJump(int SpringID);// 0x3181e0c
	void UserCancelRescue();// 0x3181df8
	void UpdateUnderGroundArea(bool bEnterUnderGroundArea);// 0x3181d74
	bool UpdateShovelingState();// 0x3181d3c
	void UpdateShovelingHoldStateRelease();// 0x3181d28
	void UpdateShovelingHoldStatePressed();// 0x3181d14
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x3181c5c
	void UpdateFallingTime(float Delta);// 0x3181be0
	void UpdateDynamicHoldGunOption();// 0x3181bcc
	void UpdateCurrentShootWeaponTick();// 0x3181bb8
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x3181a50
	void UpdateAllInstanceBodyTransform(int Type);// 0x31819d4
	void UnequipWeaponFinish();// 0x31819c0
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x3181900
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x318175c
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x318168c
	void TryFollowInitialParachuteLeader(FString Name);// 0x3181558
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x318147c
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x31813e4
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x3b98fe4
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x3b98fe4
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x31812a8
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x3181224
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x3181148
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3180ff8
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x3180f28
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x3180e58
	void SwitchShoulderStateServer(bool bShoulder);// 0x3180d94
	void SwitchShoulderStateLocal(bool bShoulder);// 0x3180d08
	void SwitchShoulderState(bool bShoulder);// 0x3180c84
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x3180adc
	void SwapMainWeapon();// 0x3180ac8
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x318095c
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x318085c
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x31807cc
	void StopMove();// 0x31807b8
	bool StopFireFilter();// 0x3180778
	void StopFire();// 0x3180764
	void StopFillGas();// 0x3180750
	bool StopChangeWearingAnim();// 0x3180718
	void StartWaitRefreshShootDetailInfo();// 0x3180704
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x3180674
	void StartFireSimple(byte ShootMode);// 0x31805f0
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x3180558
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x3180398
	void StartFillGas();// 0x3180384
	bool StartChangeWearingAnim();// 0x318034c
	void SpawnFootprint(enum FootprintType);// 0x31802d0
	void SpawnAndSwithToGrenadeServerCall(byte grenadeType);// 0x3180220
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x3180194
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x3180108
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x317ff58
	void ShowPlayerDebugInfo(bool bShow);// 0x317fed4
	void ShowNightVisionFrame();// 0x317feb8
	void ShowInjuryScreenEffect();// 0x317fea4
	void ShowDebugRole();// 0x317fe90
	void ShowDebugRecordData();// 0x317fe7c
	void ShowDebugPickUpFlow();// 0x317fe68
	void ShowDebugEquipOrUnequipFlow();// 0x317fe54
	void ShowDebugBornLandFlow();// 0x317fe40
	void ShowConfirmDialogOfMisKill();// 0x317fe24
	bool ShouldUpdateHPOnUI();// 0x317fde4
	bool ShouldShowCorp();// 0x317fdac
	bool ShouldShowAnchor();// 0x317fd74
	bool ShouldAutoScopeWhenPeek();// 0x317fd34
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x317fb88
	void SetWeaponShootType(byte shootType);// 0x317fb0c
	void SetViewTargetAgainForOB();// 0x317faf8
	void SetThrowGrenadeMode(byte ThrowMode);// 0x317fa7c
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x317fa00
	void SetSightVision(bool Enable, enum Flag);// 0x317f938
	void SetSightCondition(bool Enable, enum Flag);// 0x317f870
	void SetRTNoDamageTimer(float Timer);// 0x317f7f4
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x317f734
	void SetPrepareEmoteId(int InEmoteID);// 0x317f6b8
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x317f5f8
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x317f56c
	void SetIsDuringTransferLeader(bool isTransfer);// 0x317f4e8
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x317f420
	void SetInsectCameraEnable(bool bEnable);// 0x317f39c
	void SetHighWalkSpeed(float WalkSpeed);// 0x317f320
	void SetHealthSafety(float NewHealth, byte Reason);// 0x317f268
	void SetHandFoldRatio(int Ratio);// 0x317f1ec
	void SetExitingParachute(bool ExitParachute);// 0x317f168
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x317f0e4
	void SetEmoteSouceEventName(FString EventName);// 0x317efb0
	void SetDelayStateSwitchTime(float DelayTime);// 0x317ef38
	void SetCurScopeFov(float InFov);// 0x317eebc
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x317ede0
	void SetCurrentFloor(Actor* floor);// 0x317ed64
	void SetCurBonfire(BonfireActor* newBonfire);// 0x317ece8
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x317ec20
	void SetCheatSpeedModifier(float NewModifier);// 0x317eb9c
	void SetCharacterHideInGame(bool bHide);// 0x317eb18
	void SetChangeWearingPromptEnable(bool bShow);// 0x317ea94
	void SetAntidoteMaxTime(float MaxTime);// 0x317ea1c
	void SetAntidoteExeTime(float ExeTime);// 0x317e9a4
	void SetAnimParamIsRescueing(bool Val);// 0x317e920
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x317e89c
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x317e818
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x317e760
	void SetAmbientRTPC(FString RTPC, float Value);// 0x317e5f0
	void SetAIActive(bool bActive);// 0x317e56c
	void SetActorLocationServerAndClient(Vector Location);// 0x317e4f0
	void ServerUpdateShovelingHoldState(bool ishold);// 0x317e42c
	void ServerTriggerJump();// 0x317e3cc
	void ServerSetPoisonSmogStage(int SmogStage);// 0x317e350
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x317e240
	void ServerSetPeekCollision(bool HasCollision);// 0x317e17c
	void ServerSetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x317e078
	void ServerSetMovementState(Vector Input);// 0x317dfc4
	void ServerSendToLobbyServerUseItem(int ItemID, int Count);// 0x317df10
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x317dd5c
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x317dbf0
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x317dad0
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x317d9cc
	void ServerFollowTeammate(FString Name);// 0x317d8f0
	void ServerEndZombieModePropSkill();// 0x317d8dc
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x317d82c
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x317d77c
	void ServerCancelFollow();// 0x317d71c
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x317d5f0
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x317d48c
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x317d328
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x317d204
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x317d104
	void Scoping(byte NewType);// 0x317d088
	void ScopeOut(byte NewType);// 0x317d00c
	void ScopeInterrupt(byte NewType);// 0x317cf90
	void ScopeIn(byte NewType);// 0x317cf14
	void SaveMeshUpdateFlag();// 0x317cef4
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x317ce44
	void RspPlayInteractionEmote(int EmoteId);// 0x317cd94
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x317cd08
	void RPC_Server_UseZombieModeSkill();// 0x317cca8
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x317cba4
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x317caf4
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x317c950
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x317c8a0
	void RPC_Server_SwapMainWeapon();// 0x317c840
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x317c790
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x317c6e0
	void RPC_Server_SetCurScopeFov(float InFov);// 0x317c630
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x317c5d0
	void RPC_Server_ChangeToShootGrenade();// 0x317c570
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x317c4c0
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x317c410
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x317c26c
	void RPC_Client_SwapMainWeapon();// 0x317c20c
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x317c15c
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x317c034
	void RPC_Client_ShootVertifyRes(const byte VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x317be64
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x317bdb4
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x317bd04
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x317bc54
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x317bb3c
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x317ba08
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x317b8f0
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x317b770
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x317b52c
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x317b450
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x317b220
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x317b028
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x317afc8
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x317ae84
	void RestoreMeshUpdateFlag();// 0x317ae64
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x317acfc
	void ResetValueLimitForHealthPredict();// 0x317ace8
	void ResetSignalOnServer(bool bRescued);// 0x317ac64
	void ResetCharacterEnergy();// 0x317ac50
	void ResetCharacter();// 0x317ac34
	void ResetCamera();// 0x317ac20
	void RequestUserCancleRescue();// 0x317abc0
	void RequestServerSureLeaveVehicle();// 0x317ab60
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x317aa9c
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x317a998
	bool RequestPaintDecal(int DecalId);// 0x317a908
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x317a820
	void ReqStartPlayEmote(int EmoteIndex);// 0x317a770
	void ReqStartChangeWearing();// 0x317a710
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x317a64c
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x317a59c
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x317a474
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x317a3c4
	void ReqInteruptChangeWearing();// 0x317a364
	void ReqEmotePlayFinished(int EmoteIndex);// 0x317a2b4
	void ReqChangeWearingFinished(int Index);// 0x317a204
	void ReqAcceptInteractionEmote();// 0x317a1a4
	void ReportAntiCheatInfo();// 0x317a190
	void RemoveClientLeaveStateCheck(enum State);// 0x317a114
	void RemoveBuffWhenGotoPlane();// 0x317a100
	bool ReloadWeaponFilter();// 0x317a0c0
	bool ReloadCurrentWeapon();// 0x317a088
	void RegisterPlayerPickUpList();// 0x317a074
	void RefreshPersonPerspective();// 0x317a060
	void RefreshPawnVaultTypeServer();// 0x317a000
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x3179f74
	void RefreshMoveAttrModifier();// 0x3179f60
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemID);// 0x3179e5c
	void RecordFinalParachuteLeader();// 0x3179e48
	void PrintAIPolicyDecisionData();// 0x3179e34
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x3179db8
	void PostGetPlayerAnimation();// 0x3b98fe4
	void PlaySwitchSightSound();// 0x3179da4
	void PlaySwitchFireModeSound();// 0x3179d90
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x3179d14
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x3179bdc
	void PlaySelfThrowAwayWeaponSound();// 0x3179bc8
	void PlayPullBoltSound();// 0x3179bb4
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x31799a4
	void PlayMountAccessoriesSound();// 0x3179990
	void PlayMagOUTSound();// 0x317997c
	void PlayMagINSound();// 0x3179968
	void PlayLocalShellDropFX();// 0x3179954
	void PlayLoadBulletSound();// 0x3179940
	void PlayFootstepSound(byte FootStepState);// 0x31798bc
	bool PlayerConfirmToRescue();// 0x3179884
	void PlayChangeMagazineSound();// 0x3179870
	void PlayAmbientSound();// 0x317985c
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x317965c
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x3179478
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x317934c
	void PawnVaultStopCPP();// 0x3179330
	void PawnVaultStopBluePrint();// 0x3179314
	void PawnVaultServerStopCheckCPP();// 0x31792b4
	void PawnVaultServerStopCheckBluePrint();// 0x3179298
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3178f14
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3178be4
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x317890c
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3178618
	void PawnLeaveState(enum State);// 0x3178594
	bool PawnHasState(enum PawnState);// 0x31784fc
	bool PawnEnterState(enum State);// 0x3178464
	bool PawnAllowState(enum State, bool withLog);// 0x3178388
	void OnWeaponEquipmentUpdateHandled();// 0x317836c
	void OnWeaponEquipmentUpdate();// 0x3178350
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x31782d4
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x3178258
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x3178198
	void OnUnEquipWeapon();// 0x3b98fe4
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x31780a8
	void OnStateLeave(enum EnteredState);// 0x3178024
	void OnStateEnter(enum EnteredState);// 0x3177fa0
	void OnShowName(bool _IsShow, FString _Name);// 0x3b98fe4
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x3177f1c
	void OnScopeNotHandFold();// 0x3177f08
	void OnScopeHandFold();// 0x3177ef4
	void OnRepAttachmentDelegate__DelegateSignature();// 0x3b98fe4
	void OnRep_ZombieModeSkillPropLevel();// 0x3177ee0
	void OnRep_ZombieModeSkillPropChanged();// 0x3177ecc
	void OnRep_WaterObj();// 0x3177eb8
	void OnRep_VehicleSeatIdx();// 0x3177ea4
	void OnRep_UnmannedVehicleSyncData();// 0x3177e88
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x3177e0c
	void OnRep_Temperature(float LastValue);// 0x3177d88
	void OnRep_SwitchWeaponSpeedScale();// 0x3177d74
	void OnRep_StatusChanged(byte prevStatus);// 0x3177cf0
	void OnRep_SignalHPRemainingTime();// 0x3177cdc
	void OnRep_SignalHP(float PrevVal);// 0x3177c58
	void OnRep_SightVisionMask();// 0x3177c44
	void OnRep_ShowRevivalPointIcon();// 0x3177c30
	void OnRep_ShoulderStateChanged();// 0x3177c14
	void OnRep_ScopeFov();// 0x3177c00
	void OnRep_ResetDataOnRespawn();// 0x3177bec
	void OnRep_ReplicatedParachuteState();// 0x3177bd8
	void OnRep_ReplicatedMoveState();// 0x3177bc4
	void OnRep_ReplicatedIsStartParachute();// 0x3177bb0
	void OnRep_RemainUseSupplySpotTimes();// 0x3177b9c
	void OnRep_RemainUseEnhancerSpotTimes();// 0x3177b88
	void OnRep_PoseStateNotify(byte LastState);// 0x3177b0c
	void OnRep_PoisonFogStageChange();// 0x3177af8
	void OnRep_PlayerKey();// 0x3177adc
	void OnRep_PeekHasCollision();// 0x3177ac8
	void OnRep_MoneyNotify();// 0x3177ab4
	void OnRep_KillTipsNotify();// 0x3177aa0
	void OnRep_IsWingUpControl();// 0x3177a8c
	void OnRep_IsRescueingOtherStatusChange();// 0x3177a78
	void OnRep_IsInvincible();// 0x3177a5c
	void OnRep_IsFPPChanged();// 0x3177a48
	void OnRep_IsFakeOnVehicle();// 0x3177a2c
	void OnRep_IsBeingRescuedStatusChange();// 0x3177a18
	void OnRep_InAssistantState();// 0x3177a04
	void OnRep_HealthPredict();// 0x31779f0
	void OnRep_Health(float PrevHealth);// 0x317796c
	void OnRep_HandFolderRatio();// 0x3177958
	void OnRep_FollowState();// 0x3177944
	void OnRep_EnergyChange();// 0x3177930
	void OnRep_DisabledPawnStates();// 0x3177914
	void OnRep_DamageMagnifierIdx();// 0x3177900
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x3177884
	void OnRep_CurrentStates(uint64 prevStates);// 0x3177800
	void OnRep_CurBonFire();// 0x31777ec
	void OnRep_CharacterHideInGame();// 0x31777d8
	void OnRep_CharacterFallingVelocityZFactor();// 0x31777c4
	void OnRep_ChangeHalloweenVampireCloth();// 0x31777b0
	void OnRep_BreathAmmountChange();// 0x317779c
	void OnRep_bIsCallingForRevival();// 0x3177788
	void OnRep_AntidoteMaxTimeSync();// 0x3177774
	void OnRep_AntidoteExeTimeSync();// 0x3177760
	void OnRep_AngleSightRotOffsetChanged();// 0x317774c
	void OnRep_AnchorPlat();// 0x3177738
	void OnRep_AKEventNotify();// 0x3177724
	void OnPoseStateChange(byte LastState, byte CurState);// 0x3b98fe4
	void OnPlayEmoteStop(int EmoteIndex);// 0x31776a8
	void OnPlayEmoteEnd(int EmoteIndex);// 0x317762c
	bool OnPlayEmote(int EmoteId);// 0x317759c
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x31774d4
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x3177414
	void OnNotifyHurt();// 0x3b98fe4
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex);// 0x317735c
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x31771c8
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x317714c
	void OnInterruptCurrentEmote();// 0x3177138
	void OnInterruptChangeWearing();// 0x3177124
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x3177070
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x3b98fe4
	void OnFollowStateChange();// 0x317705c
	void OnEquipWeapon(byte Slot);// 0x3b98fe4
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x3176fe0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x3176f2c
	void OnEndChangeWearing(int StopReason);// 0x3176eb0
	void OnDetectPaintDecalTarget(bool bStart);// 0x3b98fe4
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x3176df8
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x3176d08
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x3176c18
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x3176b9c
	bool OnChangeWearing(int Index);// 0x3176b0c
	void OnBPMoneyChange();// 0x3b98fe4
	void OnBPIsInvincibleChange();// 0x3b98fe4
	void OnBPHealthChange();// 0x3b98fe4
	void OnBeforeGetUp();// 0x3b98fe4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex);// 0x3176954
	void OnAsyncLoadChangeWearingAnim();// 0x3176940
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x31767f0
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x3176718
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x3176630
	void MulticastStartPlayEmote(int EmoteIndex);// 0x3176580
	void MulticastStartChangeWearing();// 0x3176520
	void MulticastPlayerSoundByID(int SoundID);// 0x3176470
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x31763c0
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x3176310
	void MulticastInteruptChangeWearingOnServer();// 0x31762b0
	void MulticastInteruptChangeWearing();// 0x3176250
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x31761c0
	void MeleeServer();// 0x3176160
	void MeleeReleased();// 0x317614c
	void MeleeLocal();// 0x3b98fe4
	void MeleeBroadcastOtherClients();// 0x31760ec
	void Melee(bool IsForCE);// 0x3176068
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x3176054
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x3175fd8
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x3175eb0
	bool LocalStartPlayEmote(int EmoteIndex);// 0x3175e20
	bool LocalStartChangeWearing();// 0x3175de8
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x3175d58
	bool LocalInteruptChangeWearing();// 0x3175d20
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x3175c68
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x3175be4
	void LeaveState(enum State);// 0x3175b60
	void LeaveServerState(enum State);// 0x3175ab0
	void LeaveBattleState();// 0x3175a9c
	bool IsWeaponOwnerLocallyControlled();// 0x3175a5c
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x3175908
	bool IsValidPaintDecalTarget_Simple();// 0x31758e8
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x31757a8
	bool IsUsingGrenade();// 0x3175770
	bool IsThermalImagingValid();// 0x3175738
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x31756a8
	bool IsSameTeamWithLocal();// 0x3175670
	bool IsSameTeam(Pawn* Other);// 0x31755d8
	bool IsReplayViewTarget();// 0x31755a0
	bool IsProneMove();// 0x3175568
	bool IsOnVehicleNotUAV();// 0x317552c
	bool IsOnVehicle();// 0x3175508
	bool IsOnFireBalloon();// 0x31754d0
	bool IsNowUpWater();// 0x3175498
	bool IsNightVisionValid();// 0x3175460
	bool IsNearDeath();// 0x3175428
	bool IsLocalViewed();// 0x31753e8
	bool IsLocalControlorView();// 0x31753b0
	bool IsInFlyingTeam();// 0x3175378
	bool IsInExtreme();// 0x3175340
	bool IsInEditor();// 0x3175308
	bool IsHealthyAlive();// 0x31752d0
	bool IsHandleInFold();// 0x3175298
	bool IsGunADS();// 0x3175258
	bool IsFirstPerson();// 0x3175220
	bool IsExitingParachute();// 0x31751e8
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x3175158
	bool IsEnableBulletFlySound();// 0x3175118
	bool IsDetectingPaintDecalTarget();// 0x31750f8
	bool IsDefaultCharType();// 0x31750b8
	bool IsClient_WeaponOwner();// 0x3175078
	bool IsCharacterSprinting();// 0x3175040
	bool IsChangeWearingState();// 0x3175008
	bool IsCanDriveSnowBoard();// 0x3174fd0
	bool IsBattleState();// 0x3174f98
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x3174f00
	bool IsAngledSight();// 0x3174ec8
	bool IsAllowScopeIn();// 0x3174e90
	bool IsAlive();// 0x3174e50
	void InviteTeammate(FString Name, enum InvitationType);// 0x3174d68
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x3174cb0
	void InitCharacterSkillList();// 0x3174c9c
	bool InDarkArea();// 0x3174c64
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x3174bb0
	void HidePlayerMagOnGunReload();// 0x3174b9c
	void HideNightVisionFrame();// 0x3174b80
	bool HaveAngledSight();// 0x3174b48
	bool HasState(enum State);// 0x3174ab0
	bool HasSightCondition(enum Flags);// 0x3174a20
	bool HasAnySightVision(enum Flags);// 0x3174990
	void HandleWeaponShootLost();// 0x3174974
	void HandleWeaponOnShoot();// 0x3174960
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x317486c
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x31747e8
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3174764
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x31746e0
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x3174628
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x31745a4
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x31744ec
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x3174434
	void HandleOpenPickUpBoxAction();// 0x3174420
	void HandleOnCharAnimLoadingFinished();// 0x3174404
	void HandleMoveAntiShootVerifyMiss();// 0x31743e8
	void HandleConsumeItemSkillBreak();// 0x31743d4
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x317432c
	void HandleAutoSwitchWeaponDelay();// 0x3174318
	void GrenadeBackToWeaponServerCall();// 0x31742b8
	void GMTestZengzuo();// 0x31742a4
	void GMShowName();// 0x3174290
	Actor* GetWeaponUserConst();// 0x3174254
	float GetWeaponOwnerPawnHealth();// 0x3174218
	WeaponManagerComponent* GetWeaponManager();// 0x31741dc
	Rotator GetViewRotation();// 0x317419c
	PlayerVaultComponent* GetVaultComponent();// 0x3174168
	float GetValueLimitForHealthPredict();// 0x3174134
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x3174100
	Vector GetUIHelmetPosition();// 0x31740c0
	enum GetUAVState();// 0x31740a4
	byte GetThrowGrenadeMode();// 0x3174084
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x3173ff8
	STExtraBaseCharacter* GetTargetPlayer();// 0x3173fdc
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x3173fa0
	AkComponent* GetSoundComponent();// 0x3173f6c
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x3173dd0
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x3b98fe4
	SecuryInfoComponent* GetSecuryComponent();// 0x3173d9c
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x3173d80
	int GetRedClothIDByEmote(int EmoteIndex);// 0x3173cec
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x3173c5c
	BoxComponent* GetProneShapeComponent();// 0x3173c40
	byte GetPlayerWeaponFireMode();// 0x3173c0c
	byte GetPlayerWeaponEquipSlot();// 0x3173bd8
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x3173b10
	PlayerVehAnimList GetPlayerVehAnimation();// 0x3173ad4
	int GetPlayerTeamIndex();// 0x3173aa0
	STExtraPlayerState* GetPlayerStateSafety();// 0x3173a6c
	STExtraPlayerState* GetPlayerState();// 0x3173a30
	FString GetPlayerNameSafety();// 0x3173984
	Vector GetPlayerMovementDir();// 0x3173944
	FString GetPlayerDetailInfo();// 0x31738a0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3173864
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x3173830
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x31736f4
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x3173664
	PlayerAnimList GetPlayerAnimation();// 0x317357c
	Vector GetOwnerShootStartLocation();// 0x317353c
	int GetNearTeamPlayerNum();// 0x3173508
	Vector GetMoveInputLocalDir();// 0x31734d0
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x3173494
	FString GetLatestInviter();// 0x31733f0
	STExtraPlayerState* GetLastInviterPlayerState();// 0x31733bc
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x3173380
	float GetKdValue();// 0x317334c
	bool GetIsPlayingEmote();// 0x317332c
	bool GetIsFPP();// 0x31732ec
	bool GetIsChangeWearing();// 0x31732cc
	float GetInjuryFreeRate(int BodyPart);// 0x3173238
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x31730d4
	Vector GetHeadLocation(bool bUseHeadBone);// 0x317303c
	int GetHandFolderRatio();// 0x3173000
	Vector GetGunOwnerHeadLocation();// 0x3172fc0
	GroupPhysicsComponent* GetGroupPhysicsComponent();// 0x3172fa4
	FString GetGrenadeNameByGrenadeType(byte grenadeType);// 0x3b98fe4
	enum GetGender();// 0x3172f88
	BaseFPPComponent* GetFPPComp();// 0x3172f54
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x3172ec4
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x3172e34
	float GetExtraDamageBySignalHP(float InDamge);// 0x3172da8
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x3b98fe4
	FString GetEmote(int ItemDefineID);// 0x3b98fe4
	STExtraWeapon* GetCurrentWeapon();// 0x3172d74
	int GetCurrentVehicleAnimVehicleType();// 0x3172d40
	STExtraVehicleBase* GetCurrentVehicle();// 0x3172d04
	uint64 GetCurrentStatesInterface();// 0x3172cc8
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x3172c94
	STExtraWeapon* GetCurrentShieldWeapon();// 0x3172c60
	int GetCurrentFloorType();// 0x3172c2c
	FString GetCorpName();// 0x3172b88
	Controller* GetControllerSafety();// 0x3172b4c
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x3172b18
	float GetCharacterXYPlaneVelocity();// 0x3172ae4
	enum GetCharacterSubType();// 0x3172ab0
	enum GetCharacterMainType();// 0x3172a7c
	CharacterEnergyData GetCharacterEnergy();// 0x31728e4
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x31728a8
	CapsuleComponent* GetCapsuleComponentInterface();// 0x317286c
	Rotator GetCachedControlRotation();// 0x3172834
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x3172800
	CharacterAvatarComponent2* getAvatarComponent2();// 0x31727cc
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x3172740
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x3172678
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x31725bc
	SpringArmComponent* GetActiveSpringArm();// 0x3172580
	void GeneratePlayerBackpackWrappersToGround();// 0x3172564
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3172304
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3172100
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x317207c
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x3171fb4
	void ForcePlayerUpdateAnimation();// 0x3171fa0
	void ForceDestroyWeaponInventoryAndClearData();// 0x3171f8c
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x3171e9c
	void FollowTeammate(FString Name);// 0x3171d68
	enum FindBuffRelatedPawnState(FName _buffName);// 0x3171cdc
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x3171b74
	bool FillGasWeaponFilter();// 0x3171b3c
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x3171a7c
	void ExecFollowTeammate(FString Name);// 0x3171948
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x3171894
	void EquipWeaponFinish();// 0x3171880
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x31717c0
	bool EnterState(enum State);// 0x3171728
	void EnterServerState(enum State);// 0x3171678
	void EnterFire();// 0x317165c
	void EnterBattleState();// 0x3171648
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x31715c4
	void EnableStanbyAnim(bool bIsEnable);// 0x3171540
	bool EmoteAnimFinishedSuccessfully();// 0x3171508
	void DoPuzzleActorTickable(bool bStart);// 0x3171484
	void DoDetectPaintDecalTarget(bool bStart);// 0x3171400
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x3171384
	void DisappearOnDeath();// 0x3171370
	void DettachWeapon();// 0x317135c
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x3171288
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x31711b4
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x31711a0
	void DelayResetStandState();// 0x317118c
	void DelayMoveEnd();// 0x3171178
	void DelayMove(float Time);// 0x31710fc
	void DelayHidden();// 0x31710e0
	void DelayCustomDepth(float Time);// 0x3171064
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x3170f2c
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x3170e98
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x3170e0c
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x3170d80
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x3170cf4
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x3170bac
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x3170a80
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x3170990
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString param1, FString param2);// 0x317083c
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x317073c
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x31706b8
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x31705fc
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x3170534
	void ClientResponseFeedback(enum res);// 0x31704b0
	void ClientPlayVehicleOverlapCameraShake();// 0x3170450
	void ClientPlayInteractEmote(int EmoteId);// 0x31703cc
	void ClientOnPossessBy(Controller* NewController);// 0x317031c
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x317016c
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x316ffa8
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShot);// 0x316fdf8
	void ClientChangeCharacterMesh(int MeshID);// 0x316fd74
	void ClientBulletLineTrace(Vector BornPos, Vector EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x316fc3c
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x316fb8c
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x316fad8
	void ClearHPUI();// 0x316fabc
	void ClearClientJump();// 0x316faa8
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x316fa10
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x316f968
	bool CheckPickWeaponCanAutoUse();// 0x316f928
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x316f86c
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x316f7a0
	bool CheckIsWearingThisCloth(int InClothID);// 0x316f710
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x316f678
	void CheckCharacterDelayHide();// 0x316f664
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x316f5cc
	bool CheckBuffTarget(STBuff* Buff);// 0x316f534
	bool CheckBaseIsMoving();// 0x316f4fc
	bool CheckBaseIsMoveable();// 0x316f4c4
	void CharacterStateReset();// 0x316f4b0
	void CharacterShowWeaponDelay();// 0x316f49c
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x316f420
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x316f32c
	bool ChangeWearingAnimFinishedSuccessfully();// 0x316f2f4
	void ChangeVehWeaponCameraData(bool Enable);// 0x316f270
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x316f174
	bool CanRegisterToPickUpList(Actor* Actor);// 0x316f0dc
	bool CanPaintDecal(int DecalId);// 0x316f04c
	bool CanHearWeaponLockSound();// 0x316f00c
	bool CanEnterWaterArea(enum[] disallowedState);// 0x316eecc
	bool CanEnterState(enum NewState);// 0x316ee3c
	bool CanChangeThrowMode();// 0x316ee04
	void CancelFollow();// 0x316edf0
	void CalculateUseBuffFlow(int InBuffID);// 0x316ed74
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x316ecc0
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x316eb64
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x316e9c4
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x316e85c
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x316e7a8
	void CalculateBornLandThrowGrenade(int ID);// 0x316e72c
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x316e66c
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x316e5b8
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x316e4f4
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x316e3c8
	void BulletChange();// 0x316e368
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x316e144
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x316ded8
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x316dd4c
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316dac4
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316d880
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316d52c
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316d274
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316cffc
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316cd74
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316cb30
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316c8a8
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316c664
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316c3c8
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316c170
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316bee8
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316bca4
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316ba1c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316b7d8
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316b54c
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316b304
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316b070
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316ae20
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x316ab64
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x316a8e8
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x316a788
	void BPResetCharacter();// 0x3b98fe4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x3b98fe4
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x3b98fe4
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3b98fe4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3b98fe4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x316a638
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x3b98fe4
	int BP_GetWeaponSyncTicket();// 0x316a5fc
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x316a568
	void AutoScopeWhenPeek();// 0x316a554
	void AttachWeapon();// 0x316a540
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x316a4c4
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x316a448
	bool AllowState(enum State, bool withLog);// 0x316a36c
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x316a234
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x316a098
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x3169fa8
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3169e14
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x3169d5c
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x3169ce0

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0xae0, Size: 16]
	delegate CharacterCommonEventDelegate;//[Offset: 0xaf0, Size: 16]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0xb30, Size: 16]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0xb40, Size: 16]
	uint64 CurrentStates;//[Offset: 0xbf8, Size: 8]
	float Health;//[Offset: 0xc00, Size: 4]
	float HealthMax;//[Offset: 0xc04, Size: 4]
	float SignalHP;//[Offset: 0xc08, Size: 4]
	float PreSignalHP;//[Offset: 0xc0c, Size: 4]
	float PreviousSignalHP;//[Offset: 0xc10, Size: 4]
	float SignalHPMax;//[Offset: 0xc14, Size: 4]
	FString EnergyBuffListName;//[Offset: 0xc18, Size: 16]
	float ResetSignalHP_FatalDamage;//[Offset: 0xc28, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0xc2c, Size: 4]
	int[] TypeIds;//[Offset: 0xc30, Size: 16]
	float SwimSpeedDynamicScale;//[Offset: 0xc40, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc44, Size: 1]
	float threatenValue;//[Offset: 0xc48, Size: 4]
	float HurtParticleOffset;//[Offset: 0xc4c, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0xc60, Size: 16]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xc70, Size: 16]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xc80, Size: 8]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xc88, Size: 16]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xc98, Size: 16]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xca8, Size: 8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xcb0, Size: 8]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 1]
	FString CharacterStateType;//[Offset: 0xcc8, Size: 16]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 1]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xd40, Size: 16]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xd50, Size: 16]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xd80, Size: 8]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xd88, Size: 8]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xd90, Size: 8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xd98, Size: 8]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xda0, Size: 8]
	delegate StateEnterHandler;//[Offset: 0xda8, Size: 16]
	delegate StateLeaveHandler;//[Offset: 0xdb8, Size: 16]
	delegate StateInterruptedHandlerBP;//[Offset: 0xde0, Size: 16]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xdf0, Size: 16]
	PartHitComponent* PartHitComponent;//[Offset: 0xe00, Size: 8]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 1]
	byte TeamNum;//[Offset: 0xe20, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xe28, Size: 8]
	float SpeedScale;//[Offset: 0xe38, Size: 4]
	float SpeedValue;//[Offset: 0xe3c, Size: 4]
	float Temperature;//[Offset: 0xe40, Size: 4]
	float TemperatureMax;//[Offset: 0xe44, Size: 4]
	float TemperatureMin;//[Offset: 0xe48, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe61, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xe70, Size: 8]
	float VehicleDetailedTraceDist;//[Offset: 0xe78, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xe7c, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0xe80, Size: 80]
	ActivitySyncData ActicitySyncData;//[Offset: 0xed0, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x31a9444
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x31a9370
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x31a9294
	bool TriggerEntryEventWithID_Implementation(int SkillID, byte SkillEventType);// 0x31a91c0
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x31a9128
	void TriggerCustomEvent_Implementation(byte EventType);// 0x31a90a4
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x31a8fd0
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x31a8f14
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x31a8e64
	void ResetPawnStateDisabled(enum State);// 0x31a8de8
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x31a8cdc
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x31a8b94
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x31a8a7c
	void RemoveBaseBuffSystemComponent();// 0x31a8a68
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x31a8920
	void OnRep_UnmannedVehicleSyncData();// 0x31a8904
	void OnRep_Temperature(float LastValue);// 0x31a8880
	void OnRep_SignalHP(float PrevVal);// 0x31a87fc
	void OnRep_HealthMax();// 0x31a87e0
	void OnRep_Health(float PrevHealth);// 0x31a875c
	void OnRep_DisabledPawnStates();// 0x31a8740
	void OnRep_CurrentStates(uint64 prevStates);// 0x31a86bc
	void OnRep_ActivitySyncData();// 0x31a86a8
	void OnLeaveStateForBp(enum State);// 0x3b98fe4
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x3b98fe4
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x3b98fe4
	void OnEnterStateForBp(enum State);// 0x3b98fe4
	void LeaveState(enum State);// 0x31a8624
	bool IsPawnStateDisabledByWeapon(enum State);// 0x31a858c
	bool IsPawnStateDisabled(enum State);// 0x31a84fc
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x31a8454
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x31a83ac
	bool IsAlive();// 0x31a836c
	bool HasState(enum State);// 0x31a82d4
	bool HasBuffID(int BuffID);// 0x31a823c
	bool HasBuff(FName BuffName);// 0x31a81a4
	STExtraVehicleBase* GetUnmannedVehicle();// 0x31a8188
	UTSkillManagerComponent* GetSkillManager();// 0x31a814c
	float GetScaledSpeed();// 0x31a8110
	FString GetPlayerNameSafety();// 0x31a8064
	STExtraPlayerController* GetPlayerControllerSafety();// 0x31a8028
	enum GetObserverType();// 0x31a7fec
	enum[] GetDamageableGameObjectType();// 0x31a7f40
	UTSkill* GetCurSkill();// 0x31a7f04
	STExtraVehicleBase* GetCurrentVehicle();// 0x31a7ec8
	float GetBuffExpiry(FName BuffName);// 0x31a7e34
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x31a7d68
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x31a7cdc
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x31a7b5c
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x31a7a28
	bool EnterState(enum State);// 0x31a7990
	void DelayHidden();// 0x31a7974
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x31a77d4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x31a76a0
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x31a756c
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x31a73c0
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x31a71d0
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x31a704c
	void ClearBuff();// 0x31a7030
	void CheckSignalHP();// 0x31a701c
	bool CanBeAttackedByWeapon(int WeaponId);// 0x31a6f84
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	bool AllowState(enum State, bool withLog);// 0x31a6ea8
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x31a6d9c
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x31a6c54
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x31a6ad8

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x830, Size: 4]
	FName PlayerType;//[Offset: 0x838, Size: 8]
	FString PlayerName;//[Offset: 0x840, Size: 16]
	FString Nation;//[Offset: 0x850, Size: 16]
	uint32 PlayerKey;//[Offset: 0x860, Size: 4]
	FString PlayerUID;//[Offset: 0x868, Size: 16]
	int TeamID;//[Offset: 0x878, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	int CampID;//[Offset: 0x880, Size: 4]
	int resID;//[Offset: 0x884, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x888, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x890, Size: 16]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x8a0, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x8d0, Size: 32]
	int planeAvatarId;//[Offset: 0x8f0, Size: 4]
	int DyeDebugFlag;//[Offset: 0x8f4, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x8f8, Size: 16]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x909, Size: 1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x921, Size: 1]
	FString LuaFilePath;//[Offset: 0x930, Size: 16]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x940, Size: 80]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3799be4
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3799ac4
	void OnRep_UseWholeModel();// 0x3799ab0
	void OnRep_TeamID();// 0x3799a9c
	void OnRep_PlayerUID();// 0x3799a88
	void OnRep_PlayerKey();// 0x3799a6c
	void OnRep_CampID();// 0x3799a58
	bool IsDefaultCharType();// 0x3799a18
	int GetTeamId();// 0x37999fc
	FString GetPlayerKey();// 0x3799958
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x37998ac
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x3799800
	ActorComponent*[] GetNonSimulatedComponents();// 0x3799754
	ActorComponent*[] GetNonDedicatedComponents();// 0x37996a8
	int GetCampId();// 0x3799674
	void ClientAcknowledgeReconnection(uint32 Token);// 0x37995f0

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	float MinimumDuration;//[Offset: 0x38, Size: 4]
	float MaximumDuration;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0x114, Size: 4]
	int MaxCheatTimes;//[Offset: 0x118, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0x11c, Size: 4]
	float MaxPacketLossRate;//[Offset: 0x120, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x124, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0x128, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0x12c, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0x130, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0x138, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x13c, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x140, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x144, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x148, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x14c, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x150, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x154, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x158, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x15c, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x168, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x174, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x180, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x18c, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x198, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x1a4, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x1b0, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x1bc, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x1c8, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x1d4, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x1e0, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x1ec, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1f8, Size: 12]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x278, Size: 144]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x308, Size: 88]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x360, Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x398, Size: 136]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x420, Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x488, Size: 32]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x4a8, Size: 1396]
	float MaxJumpHeight;//[Offset: 0xa20, Size: 4]
	Character* CharacterOwner;//[Offset: 0xa28, Size: 8]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0xaa4, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x307b0e4
	void RefreshRealMaxJumpHeight();// 0x307b0d0
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x307af74
	void Ping2Client(float ServerTime);// 0x307aef8
	void OnPreReconnectOnServer();// 0x307aee4
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x307ac90
	void DebugDrawLine(const Vector Start, const Vector End);// 0x307abe0
	void ClearJumpLimit();// 0x307abcc

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x364, Size: 44]
	int KeepStillMinTime;//[Offset: 0x390, Size: 4]
	float StillMaxSpeed;//[Offset: 0x394, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x398, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x3a4, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x3b0, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x3bc, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x3c8, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x3d4, Size: 12]
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x3045720
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x30455d0
	float SimulatedCharacterServerTime();// 0x3045594

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x128, Size: 16]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x138, Size: 16]
	float fRewindMaxSeconds;//[Offset: 0x148, Size: 4]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0x154, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0x158, Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x160, Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0x164, Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float TolerateFlyTime;//[Offset: 0x174, Size: 4]
	float TolerateFlyDis;//[Offset: 0x178, Size: 4]
	bool bOpenStillLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x180, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x184, Size: 4]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x18c, Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x190, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x194, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x198, Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x19c, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x1a0, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x1a4, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x1a8, Size: 4]
	float TolerateShootRange;//[Offset: 0x1ac, Size: 4]
	byte[] traceObjectTypes;//[Offset: 0x1b0, Size: 16]
	float ShooterWeaponRange;//[Offset: 0x1c0, Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x1c4, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1cc, Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x1d0, Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x1d8, Size: 4]
	float TolerateLocusDist;//[Offset: 0x1dc, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x1e0, Size: 4]
	float TolerateBoxExpand;//[Offset: 0x1e4, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x1e8, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x1ec, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x1f0, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x1f4, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x1f8, Size: 4]
	float MaxGunPosLength;//[Offset: 0x1fc, Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x200, Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x20c, Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	float BonePointTorelate;//[Offset: 0x21c, Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x220, Size: 12]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x22c, Size: 4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	Character* CharacterOwner;//[Offset: 0x238, Size: 8]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x244, Size: 4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x248, Size: 4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x250, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x254, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x258, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x25c, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x260, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x264, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x268, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x26c, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x270, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x274, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x278, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x27c, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x280, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x284, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x288, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x28c, Size: 4]
	float TolerateNetDelay;//[Offset: 0x290, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x294, Size: 4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x29c, Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x2a0, Size: 4]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x2a4, Size: 4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x2a8, Size: 4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x2ac, Size: 4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x2b0, Size: 4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x2b4, Size: 4]
	float VerifyDownShootCD;//[Offset: 0x2b8, Size: 4]
	bool GM_VerifyActorPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	float GrayWeaponAndShootAngle;//[Offset: 0x2c8, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x2cc, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x2d0, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x2d4, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x2d8, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x2f0, Size: 12]
	byte VertifyMuzzleHeight(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x3046cc0
	byte VertifyImpactActorPosWithNoLagCompensation(STExtraShootWeapon* ShootWeapon, Pawn* VictmPawn, out const Vector InImpactActorPos);// 0x3046bb4
	byte VertifyClientAntiCheatResult(uint16 ClientAntiCheatResult, STExtraShootWeapon* ShootWeapon);// 0x3046aec
	byte VerityOwnerAndGunBlock(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x30469dc
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x30468c4
	byte VerifyWeaponOwnerPos(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x30467ac
	byte VerifyWeaponOwnerAndMuzzleDis(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x3046694
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x3046544
	float SimulatedCharacterServerTimeHighPrecision();// 0x3046508
	float SimulatedCharacterServerTime();// 0x30464cc
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x3046408
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x304630c
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x3046244
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x3046180
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x30460bc
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x3046030
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x3045f68
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x3045ea0
	float GetNearAvgNetDelay(Pawn* TargetPawn, float NearNum);// 0x3045dd8

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x114, Size: 16]
	float TolerateOwnerAndBulletDist;//[Offset: 0x124, Size: 4]

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 1]
	float voiceCheckCD;//[Offset: 0x9a4, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x9a8, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ac, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x9c8, Size: 60]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa05, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0xa08, Size: 16]
	delegate OnCurBulletChange;//[Offset: 0xa18, Size: 16]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0xa28, Size: 16]
	delegate OnStartFireDelegate;//[Offset: 0xa38, Size: 16]
	delegate OnStopFireDelegate;//[Offset: 0xa48, Size: 16]
	delegate OnWeaponShootDelegate;//[Offset: 0xa58, Size: 16]
	delegate OnWeaponShootHitDelegate;//[Offset: 0xa68, Size: 16]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa78, Size: 16]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa88, Size: 16]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa98, Size: 16]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xaa8, Size: 16]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xab8, Size: 16]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xac8, Size: 16]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xad8, Size: 16]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xae8, Size: 16]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xb08, Size: 16]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xb18, Size: 16]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xb28, Size: 16]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xb38, Size: 16]
	delegate OnWeaponDropStart;//[Offset: 0xb48, Size: 16]
	delegate OnWeaponDropFinished;//[Offset: 0xb58, Size: 16]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xb68, Size: 8]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xb70, Size: 8]
	delegate OnScopeIn;//[Offset: 0xb78, Size: 16]
	delegate OnScopeOut;//[Offset: 0xb88, Size: 16]
	delegate OnScopeInContinue;//[Offset: 0xb98, Size: 16]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xba8, Size: 8]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xbb0, Size: 8]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xbb8, Size: 8]
	FillGasComponent* FillGasComponent;//[Offset: 0xbc0, Size: 8]
	int CurBulletNumInClip;//[Offset: 0xbc8, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xbd0, Size: 24]
	int CurMaxBulletNumInOneClip;//[Offset: 0xbe8, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xbec, Size: 4]
	byte ShootMode;//[Offset: 0xbf0, Size: 1]
	byte CurShootType;//[Offset: 0xbf1, Size: 1]
	int CurShootTotalType;//[Offset: 0xbf4, Size: 4]
	float VoiceCheckDis;//[Offset: 0xbf8, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xbfc, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xc00, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xc04, Size: 12]
	int AngledSightID;//[Offset: 0xc1c, Size: 4]
	byte TraceChannel;//[Offset: 0xc20, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xc24, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xc30, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xc38, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xc40, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	int ClientShootTimes;//[Offset: 0xc74, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xc78, Size: 8]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xc80, Size: 8]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xc88, Size: 8]
	AkAudioEvent* MagazineINSound;//[Offset: 0xc90, Size: 8]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xc98, Size: 8]
	AkAudioEvent* PullBoltSound;//[Offset: 0xca0, Size: 8]
	Vector BulletDecalScale;//[Offset: 0xca8, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xcb8, Size: 24]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd1, Size: 1]
	float DropDuration;//[Offset: 0xcd4, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xcd8, Size: 8]
	float AIShootLoudness;//[Offset: 0xce0, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xce4, Size: 4]
	float AIShootMaxDis;//[Offset: 0xce8, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xcec, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xcf0, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xcf4, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xcf9, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xd08, Size: 8]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xd10, Size: 8]
	int md_MaxBulletArraySize;//[Offset: 0xd18, Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1d, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1e, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xd20, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xd2c, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xd38, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xd44, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xd50, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xd5c, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xd68, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xd74, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xd80, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xd8c, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xd98, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xda4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xdb0, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xdbc, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xdd8, Size: 16]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xde8, Size: 8]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xdf0, Size: 16]
	int[] AttachedAttachmentID;//[Offset: 0xe00, Size: 16]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xe10, Size: 16]
	uint32 ShootID;//[Offset: 0xe20, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xe28, Size: 8]
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0xe30, Size: 16]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xe40, Size: 16]
	bool UseNewSimulateHitInfoData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 1]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe59, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	bool UseNewShotGunDevation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf59, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf61, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xf68, Size: 16]
	int WeaponDurability;//[Offset: 0xf78, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xf7c, Size: 1]
	void UpdateComponentTick();// 0x3227a4c
	bool StopFireFilter();// 0x3227a0c
	void StopFire(byte ToState);// 0x3227988
	void StopFillGas();// 0x3227974
	int StartReload();// 0x3227938
	bool StartFireFilter();// 0x32278f8
	void StartFire();// 0x32278dc
	void StartFillGas();// 0x32278c8
	void StartDoPreBarrel(float HandledTime);// 0x3227844
	void StartDoBarrel();// 0x3227828
	void ShowDefaultScope(bool bShow);// 0x32277a4
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x32276e4
	void ShootIDIsNotValid();// 0x32276c8
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x322758c
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x3227508
	void SetRearSightIndex(int Index);// 0x322748c
	void SetCurShootType(byte shootType);// 0x3227410
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x32272d0
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x3227190
	void SetCurReloadMethod(byte method);// 0x3227114
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x3227010
	void SetBaseImpactDamageEntity(float Damage);// 0x3226f94
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x3226e94
	bool ScopeOut();// 0x3226e54
	void ScopeInContinue();// 0x3226e40
	bool ScopeIn();// 0x3226e00
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x3226d7c
	void RPC_ServerStopReload(int InterruptState);// 0x3226ccc
	void RPC_ServerSetMaxBulletNum();// 0x3226c6c
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x3226bbc
	void RPC_Server_SetRearSightIndex(int Index);// 0x3226b0c
	void RPC_ClientSetCurShootType(byte shootType);// 0x3226a5c
	void RPC_ClientSetCurReloadMethod(byte method);// 0x32269ac
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x3226928
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x3226838
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x3226630
	void RotateCrossHair(Rotator Rot);// 0x32265b4
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x3226530
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x32263f0
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x3226374
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x32262b4
	void RefreshBulletInClip(int Count);// 0x3226238
	void ReduceWeaponDurability(int ReduceAmount);// 0x32261bc
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x322607c
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x3b98fe4
	void OnWeaponShootDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x3b98fe4
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x3b98fe4
	void OnWeaponEquipDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x3b98fe4
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x3b98fe4
	void OnStopFireDelegate__DelegateSignature();// 0x3b98fe4
	void OnStartFireDelegate__DelegateSignature();// 0x3b98fe4
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x3b98fe4
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x3b98fe4
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x3b98fe4
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x3b98fe4
	void OnScopeInContinue__DelegateSignature();// 0x3b98fe4
	void OnRep_WeaponDurability();// 0x3226068
	void OnRep_SimulateHitDataArray();// 0x3226054
	void OnRep_HitDataArray();// 0x3226040
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x3225fc4
	void OnRep_CurMaxBulletNumChange();// 0x3225fb0
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x3225f9c
	void OnMaxBulletChange__DelegateSignature();// 0x3b98fe4
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x3b98fe4
	void OnCurBulletChange__DelegateSignature();// 0x3b98fe4
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x3b98fe4
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x3b98fe4
	void NotifyServerNoneShootAction();// 0x3225f3c
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x3225ec0
	void NotifyClientNoneShootAction();// 0x3225e60
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x3225d20
	bool IsWeaponDurabilityLoss();// 0x3225ce8
	bool IsWeaponAttachmentFullEquiped();// 0x3225cb0
	bool IsVehicleWeapon();// 0x3225c78
	bool IsUsingGrenadeLaunch();// 0x3225c40
	bool IsSupportAutoAim();// 0x3225c08
	bool IsInPreFire();// 0x3225bd0
	static bool IsGHasInfiniteBullets();// 0x3225b98
	bool IsEnableReloadADS();// 0x3225b7c
	bool IsEnableDropBullet();// 0x3225b44
	bool IsDriverVehicleWeapon();// 0x3225b0c
	bool IsAutoDrop();// 0x3225ad4
	void InitWeaponDurability(int NewVal);// 0x3225a58
	bool HasMultiBullet();// 0x3225a20
	void HandleWeaponScopeUnEquiped(enum Type);// 0x32259a4
	void HandleWeaponScopeEquiped(enum Type);// 0x3225928
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x322585c
	void HandleAllWeaponAvatarLoaded();// 0x3225848
	byte GetWeaponReloadType();// 0x3225814
	int GetWeaponIDFromEntity();// 0x32257e0
	int GetWeaponID();// 0x32257ac
	int GetWeaponDurability();// 0x3225778
	float GetWeaponBodyLength();// 0x3225744
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x32255e8
	ParticleSystem* GetVisualBulletTrackFX();// 0x32255b4
	bool GetVisualBulletTrackEnabled();// 0x322557c
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x3225548
	FName GetVerifyScopeSocketNameFromEntity();// 0x3225514
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x32254dc
	float GetTraceDistanceFromEntity();// 0x32254a8
	FName GetSilencerSocketNameFromEntity();// 0x3225474
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x3225440
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x322540c
	byte GetShootTypeFromEntity();// 0x32253d8
	int GetShootReduceDurabilityAmount();// 0x32253a4
	float GetShootIntervalFromEntity();// 0x3225370
	FName GetShellDropSocketNameFromEntity();// 0x322533c
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x3225238
	int GetScopeID(bool bIsAngledOpticalSight);// 0x32251a4
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x3225098
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x3224f94
	bool GetReloadWithNoCostFromEntity();// 0x3224f5c
	float GetReloadTimeMagOutFromEntity();// 0x3224f28
	float GetReloadTimeMagInFromEntity();// 0x3224ef4
	float GetReloadTimeFromEntity();// 0x3224ec0
	FName GetReloadTIDName(byte method);// 0x3224e2c
	float GetReloadTacticalTimeFromEntity();// 0x3224df8
	int GetReloadSpecificBulletNumFromEntity();// 0x3224dc4
	float GetReloadRateFromEntity();// 0x3224d90
	float GetReloadDurationStartFromEntity();// 0x3224d5c
	float GetReloadDurationLoopFromEntity();// 0x3224d28
	Transform GetRelativeMuzzleTransform();// 0x3224ccc
	float GetReferenceDistance();// 0x3224c98
	FName GetRearSightSocket(int Index);// 0x3224c0c
	Rotator GetRearSightRot();// 0x3224bd4
	int GetRearSightIndex();// 0x3224ba0
	Rotator GetRearSightHandRotOffset();// 0x3224b68
	float GetRangeModifier();// 0x3224b34
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x3224a90
	float GetPreFireTimeFromEntity();// 0x3224a5c
	float GetPostFireTimeFromEntity();// 0x3224a28
	float GetPostFillGasTime();// 0x32249f4
	FName GetOverrideScopeAimSocketName();// 0x32249c0
	Transform GetMuzzleTransform();// 0x3224964
	FName GetMuzzleSocketNameFromEntity();// 0x3224928
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x32248f4
	float GetMaxValidHitTimeFromEntity();// 0x32248c0
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x322488c
	int GetMaxBulletNumInOneClipFromEntity();// 0x3224858
	int GetMaxBulletNumInBarrelFromEntity();// 0x3224824
	bool GetIsNeedOffsetVelocityFromEntity();// 0x32247ec
	bool GetIsEnableScopeInFromEntity();// 0x32247b4
	float GetImpactEffectSkipDistanceFromEntity();// 0x3224780
	float GetIgnoreRangeAttenuatDis();// 0x322474c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x32246b0
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x322467c
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x322454c
	float GetGasAddDamageRate();// 0x3224518
	float GetGameDeviationFactor();// 0x32244e4
	FName GetFiringSuppressorSocketNameFromEntity();// 0x32244b0
	float GetFireSensitiveYawRate();// 0x322447c
	float GetFireSensitivePitchRate();// 0x3224448
	<int,bool> GetEquipAttachSlotMap();// 0x32242d0
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x3224244
	byte GetCurSightVisionType();// 0x3224210
	byte GetCurSightType();// 0x32241dc
	int GetCurrentBulletNumInClip();// 0x32241c0
	float GetCurReloadTime();// 0x322418c
	byte GetCurReloadMethod();// 0x3224158
	float GetCurGasRate();// 0x3224124
	float GetCurGasAngle();// 0x32240f0
	float GetCrossHairInitSize();// 0x32240bc
	float GetCrossHairBurstSpeed();// 0x3224088
	float GetCrossHairBurstIncreaseSpeed();// 0x3224054
	byte GetControllerRole();// 0x3224020
	int GetConstantWeaponDurabilityFromEntity();// 0x3223fec
	bool GetClipHasInfiniteBulletsFromEntity();// 0x3223fb4
	MeshComponent* GetChildMeshComp(FName compTag);// 0x3223f28
	bool GetCanRecordHitDetailFromEntity();// 0x3223ef0
	float GetBurstShootIntervalFromEntity();// 0x3223ebc
	float GetBurstShootCDFromEntity();// 0x3223e88
	int GetBurstShootBulletsNumFromEntity();// 0x3223e54
	ItemDefineID GetBulletTypeFromEntity();// 0x3223e08
	float GetBulletRangeEntity();// 0x3223dd4
	float GetBulletNumSingleShotFromEntity();// 0x3223da0
	float GetBulletMomentumFromEntity();// 0x3223d6c
	float GetBulletFireSpeedFromEntity();// 0x3223d38
	float GetBaseReloadTime(bool bTactical);// 0x3223ca4
	float GetBaseImpactDamageEntity();// 0x3223c70
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x3223b70
	bool GetAutoReloadFromEntity();// 0x3223b38
	bool GetADSManualStop();// 0x3223b00
	float GetAccessoriesVRecoilFactor();// 0x3223acc
	float GetAccessoriesRecoveryFactor();// 0x3223a98
	float GetAccessoriesHRecoilFactor();// 0x3223a64
	float GetAccessoriesDeviationFactor();// 0x3223a30
	void ForceSyncAllClientsBulletsNumOnServer();// 0x3223a1c
	void FixBulletNumWithValideData();// 0x3223a08
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x3223984
	void DoGrenadeLaunchStartReload();// 0x3223970
	void CostGasByOneShoot();// 0x322395c
	void ClearWeaponAttrModifier();// 0x3223948
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x3223894
	void CheckReloadAttr();// 0x3223880
	bool CheckNeedClientSetMaxBulletNum();// 0x3223848
	bool CanSwitchToGrenade();// 0x322382c
	void BP_OnSyncSimulatedClientsCurBullets();// 0x3b98fe4
	void AddWeaponDurability(int AddAmount);// 0x32237b0
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x3223728
	void AddFillGas(float AddTime);// 0x32236ac
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x322353c

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x430, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x434, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x440, Size: 24]
	Transform WeaponAttachMeshOffset;//[Offset: 0x460, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x490, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x4c0, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x4f0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x520, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x550, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x580, Size: 48]
	int CrossHairType;//[Offset: 0x5b0, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x5b4, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x5b8, Size: 8]
	PredictLineComponent* PredictLine;//[Offset: 0x5c0, Size: 8]
	FName WeaponStaticMeshCompTag;//[Offset: 0x5c8, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x5d0, Size: 8]
	delegate WeaponEffectActionDelegate;//[Offset: 0x5d8, Size: 16]
	delegate FireOneShotEffectDelegate;//[Offset: 0x5e8, Size: 16]
	delegate OnShootWeaponChangeState;//[Offset: 0x5f8, Size: 16]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x608, Size: 16]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x618, Size: 16]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x628, Size: 16]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x638, Size: 16]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x648, Size: 16]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x658, Size: 16]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x668, Size: 16]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x678, Size: 8]
	byte CurFreshWeaponState;//[Offset: 0x680, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x688, Size: 16]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x698, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x6a0, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6aa, Size: 1]
	float MaxReconnectTime;//[Offset: 0x6ac, Size: 4]
	float StartReconnectTime;//[Offset: 0x6b0, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x6b8, Size: 128]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x740, Size: 16]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x758, Size: 96]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x7c0, Size: 8]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x7d0, Size: 8]
	byte CurWeaponState;//[Offset: 0x7d8, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x7e0, Size: 8]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x7e8, Size: 8]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x7f8, Size: 80]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x858, Size: 8]
	MeshSynData[] synData;//[Offset: 0x868, Size: 16]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x87c, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x880, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x888, Size: 16]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x8a8, Size: 8]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x8b8, Size: 16]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x8d0, Size: 16]
	byte WeaponUIType;//[Offset: 0x8e0, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x8f0, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x920, Size: 12]
	int FuncFlag;//[Offset: 0x92c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x939, Size: 1]
	FString LuaFilePath;//[Offset: 0x940, Size: 16]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x3b98fe4
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x3b98fe4
	void UpdateWeaponAvatar(float DeltaTime);// 0x3b98fe4
	void TriggerWeaponEvent(enum Event);// 0x3252040
	void SpecialResetForWeaponCrosshair();// 0x3b98fe4
	void SetWeaponMeshHidden(bool Hidden, bool CastShadow);// 0x3251f70
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x3251ec0
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x3251e10
	void RespawnData();// 0x3b98fe4
	void ResetData();// 0x3b98fe4
	void PlayLocalShellDropFX();// 0x3b98fe4
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x3b98fe4
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x3b98fe4
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x3b98fe4
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x3b98fe4
	void OnRep_WeaponReconnectReplicateData();// 0x3251dfc
	void OnRep_WeaponAttachSocketName();// 0x3251de8
	void OnRep_SimulatedOwnerPawn();// 0x3251dd4
	void OnRep_OwnerClientCreateWeaponData();// 0x3251dc0
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x3251dac
	void OnRep_AvatarMeshChanged();// 0x3251d98
	void OnRep_AttachmentReplication();// 0x3251d7c
	void OnReleaseTrigger();// 0x3251d60
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x3b98fe4
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x3b98fe4
	void OnPushTrigger();// 0x3251d44
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x3b98fe4
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x3b98fe4
	void NewInitWeapon();// 0x3251d30
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x3251ca0
	bool IsSimulated();// 0x3251c68
	bool IsLocalOrSpectorPlayer();// 0x3251c30
	bool IsAutonomous();// 0x3251bf8
	void InitWeapon();// 0x3251be4
	bool HasComponentSlot(byte Slot);// 0x3251b54
	void HandleReconnectNew(Actor* WeaponOwner);// 0x3251ad8
	byte GetWeaponTypeNew();// 0x3251aa4
	byte GetWeaponType();// 0x3251a70
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x3251a3c
	byte GetWeaponStateType();// 0x3251a08
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x32519d4
	enum GetWeaponOwnerObserverType();// 0x32519a0
	FString GetWeaponName();// 0x32518fc
	MeshComponent* GetWeaponMeshComponent();// 0x32518c0
	byte GetWeaponHoldType();// 0x325188c
	byte GetWeaponFireMode();// 0x3251850
	WeaponEntity* GetWeaponEntityComponent();// 0x325181c
	FString GetWeaponDetailInfo();// 0x3251778
	FName GetWeaponAttachSocket();// 0x325173c
	WeaponSpecificHandler* GetSpecificHandler();// 0x3251708
	FString GetOwnerPlayerName();// 0x3251664
	PlayerController* GetOwnerPlayerController();// 0x3251628
	Pawn* GetOwnerPawn();// 0x32515f4
	FString GetOwnerName();// 0x3251550
	Controller* GetOwnerController();// 0x3251514
	Actor* GetOwnerActor();// 0x32514d8
	ItemDefineID GetItemDefineID();// 0x325148c
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x3251458
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x3251328
	LinearColor GetColorByTeamID(int TeamID);// 0x3b98fe4
	ItemHandleBase* GetBackpackItemHandle();// 0x32512f4
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x3b98fe4
	void DelayHandleAvatarMeshChanged();// 0x32512e0
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x3251218
	void ClientLoadDefaultMesh();// 0x3251204
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x3251188
	bool CheckHasFuncByInt(int Func);// 0x32510f8
	bool CheckHasFunc(enum Func);// 0x3251068
	void ChangeSequenceState(byte StateType);// 0x3250fe4
	void CallForceHideWeaponWidgetDel();// 0x3250fd0

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	bool SetAutonomousLoadRes();// 0x3315f20
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x3315ea4
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x3315dd4

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x570, Size: 8]
	delegate OnScopeEquipDelegate;//[Offset: 0x580, Size: 16]
	delegate OnScopeUnequipDelegate;//[Offset: 0x590, Size: 16]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x5a0, Size: 16]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x5b0, Size: 16]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x5c0, Size: 16]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x5d8, Size: 16]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x600, Size: 80]
	MeshSynData[] DefaultSynData;//[Offset: 0x650, Size: 16]
	WeaponDIYData WeaponDIYData;//[Offset: 0x680, Size: 80]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x6e0, Size: 16]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x6f8, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x331857c
	void SetPendantSocketType(enum SocketType);// 0x3318500
	bool SetAutonomousLoadRes();// 0x33184c0
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x3318350
	void ResetAttachmentSocket();// 0x331833c
	void ResetAttachmentParent();// 0x3318328
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x3318208
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x3318148
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x33180bc
	void RefreshAvatarStateChanged();// 0x33180a0
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x3318024
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x3317f94
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x3317ee0
	bool PutOnEquipmentByResID(int resID);// 0x3317e48
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3317db8
	bool PutOffEquimentByResID(int resID);// 0x3317d20
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x3317c6c
	void ProcessLoadAllMesh();// 0x3317c50
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x3317b70
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x3b98fe4
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x3b98fe4
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x3b98fe4
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x3b98fe4
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x3b98fe4
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x3b98fe4
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x3317ab8
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x33179b8
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x33178bc
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x331779c
	bool IsTeammate();// 0x331775c
	bool IsSelf();// 0x331771c
	void InitMasterComponent();// 0x3317708
	void InitialAvatarParam();// 0x33176f4
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3317678
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x33175fc
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x3317580
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x33174a4
	Controller* GetWeaponController();// 0x3317470
	STExtraWeapon* GetOwnerWeapon();// 0x331743c
	STExtraBaseCharacter* GetOwnerCharacter();// 0x3317408
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x331736c
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x33172e0
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x33171e4
	AvatarDIYEntityFactory* GetEntityFactory();// 0x33171a8
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x331711c
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x3317054
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x3316fc8
	void DestroyWeapon();// 0x3316fb4
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x3316ea0
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3316e1c
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x3316d48
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x3316ca8
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x3316bf0
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x33169d8
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x331695c
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x3316838

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x248, Size: 16]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x258, Size: 80]
	int[] PendingDeleteSlotID;//[Offset: 0x2a8, Size: 16]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x2b8, Size: 8]
	<int,FName> SlotToSocket;//[Offset: 0x2c0, Size: 80]
	int StepCount;//[Offset: 0x310, Size: 4]
	delegate asyncLoadAssetsDelegate;//[Offset: 0x318, Size: 16]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x328, Size: 16]
	int AsyncLoadReqID;//[Offset: 0x408, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x40c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	enum DisplayQuality;//[Offset: 0x421, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x428, Size: 80]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x4a0, Size: 80]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x4f8, Size: 80]
	int CurrentDecalBakingRequestID;//[Offset: 0x548, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x550, Size: 16]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x560, Size: 16]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x2eed6cc
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x2eed60c
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x2eed4ec
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x2eed3fc
	void SetDisplayQuality(enum Quality);// 0x2eed384
	bool SetAutonomousLoadRes();// 0x2eed344
	void RequestSyncLoadMeshes();// 0x2eed330
	void RequestSyncLoadHandles();// 0x2eed31c
	void RequestAsyncLoadMeshes();// 0x2eed300
	void RequestAsyncLoadHandles();// 0x2eed2e4
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x2eed268
	void RemoveAllDIYRTCacheInBattle();// 0x2eed254
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x2eed158
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x2eed060
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x2eecfdc
	void RefreshAvatarStateChanged();// 0x2eecfc0
	void ProcessLoadAllMesh();// 0x2eecfa4
	void PreProcessBeforeLoadMesh();// 0x2eecf88
	void PostProcessAfterLoadMesh();// 0x2eecf6c
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x2eecea0
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x3b98fe4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x3b98fe4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x2eece1c
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x2eecd5c
	void OnAllAvatarHandleLoadedDone();// 0x2eecd40
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x2eecc44
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x2eecb70
	bool IsAutonomousAvatar();// 0x2eecb38
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x2eeca74
	<int,MeshComponent*> GetMeshComponentList();// 0x2eec92c
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x2eec8a0
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x2eec814
	AvatarDIYEntityFactory* GetEntityFactory();// 0x2eec7d8
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x2eec74c
	enum GetDisplayQuality();// 0x2eec730
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x2eec670
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x2eec5ac
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x2eec4e4
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x2eec460
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x2eec390
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x2eec2cc
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x2eec20c
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x2eec154
	int AddAction_Modle(int SlotID, int ModleID);// 0x2eec090
	int AddAction_Material(int SlotID, int MaterialID);// 0x2eebfcc
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x2eebf04
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x2eebda8
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x2eebca0
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x2eebb98
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x2eebaac

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x198, Size: 8]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a3, Size: 1]
	FName LightVectorName;//[Offset: 0x1a8, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x1b0, Size: 8]
	delegate OnItemDownloadDelegate;//[Offset: 0x1b8, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x1c8, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x1d8, Size: 80]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	FString LuaFilePath;//[Offset: 0x230, Size: 16]
	void RequestDownloadItemInBattle(int InItemID);// 0x2ee7d18
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x2ee7c58
	bool IsTeammate();// 0x2ee7c18
	bool IsServerMode();// 0x2ee7be0
	bool IsSelf();// 0x2ee7ba0
	bool IsLogicRunningMode();// 0x2ee7b68
	bool IsLobbyAvatar();// 0x2ee7b4c
	bool IsLobbyActor();// 0x2ee7b30
	bool IsForceClientMode();// 0x2ee7b14
	uint32 GetPlayerKey();// 0x2ee7ad8
	GameInstance* GetGameInstance();// 0x2ee7a9c
	void DownloadItemInBattleCallBack(uint32 ItemID, uint32 ErrorCode);// 0x2ee79e0
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x2ee77c8

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x398, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	void ToggleEnabled();// 0x5527be8
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x5527b6c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5527af0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x5527a74
	void SetLightColor(LinearColor NewLightColor);// 0x55279f8
	void SetEnabled(bool bSetEnabled);// 0x5527974
	void SetCastShadows(bool bNewValue);// 0x55278f0
	void SetBrightness(float NewBrightness);// 0x5527874
	void SetAffectTranslucentLighting(bool bNewValue);// 0x55277f0
	void OnRep_bEnabled();// 0x55277d4
	bool IsEnabled();// 0x552779c
	LinearColor GetLightColor();// 0x5527764
	float GetBrightness();// 0x5527730

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2f4, Size: 4]
	float MaxDrawDistance;//[Offset: 0x2f8, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2fc, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	int ShadowMapChannel;//[Offset: 0x304, Size: 4]
	float MinRoughness;//[Offset: 0x30c, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x310, Size: 4]
	int LightPriority;//[Offset: 0x314, Size: 4]
	float ShadowBias;//[Offset: 0x318, Size: 4]
	float ShadowSharpen;//[Offset: 0x31c, Size: 4]
	float ContactShadowLength;//[Offset: 0x320, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x325, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x328, Size: 8]
	Vector LightFunctionScale;//[Offset: 0x330, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x340, Size: 8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	float IESBrightnessScale;//[Offset: 0x34c, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x350, Size: 4]
	float DisabledBrightness;//[Offset: 0x354, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	float BloomScale;//[Offset: 0x35c, Size: 4]
	float BloomThreshold;//[Offset: 0x360, Size: 4]
	Color BloomTint;//[Offset: 0x364, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x36c, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x5528a8c
	void SetTemperature(float NewTemperature);// 0x5528a10
	void SetShadowBias(float NewValue);// 0x5528994
	void SetLightPriority(int Priority);// 0x5528918
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x552889c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5528820
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x55287a4
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x5528728
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x5528668
	void SetIntensity(float NewIntensity);// 0x55285ec
	void SetIndirectLightingIntensity(float NewIntensity);// 0x5528570
	void SetIESTexture(TextureLightProfile* NewValue);// 0x55284f4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x5528470
	void SetBloomTint(Color NewValue);// 0x55283f8
	void SetBloomThreshold(float NewValue);// 0x552837c
	void SetBloomScale(float NewValue);// 0x5528300
	void SetAffectTranslucentLighting(bool bNewValue);// 0x552827c
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x55281f8
	void ForceUpdateShadowState();// 0x55281e4

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2cc, Size: 16]
	float Brightness;//[Offset: 0x2dc, Size: 4]
	float Intensity;//[Offset: 0x2e0, Size: 4]
	Color LightColor;//[Offset: 0x2e4, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e8, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x2ec, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x2f0, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x552b29c
	void SetCastShadows(bool bNewValue);// 0x552b218
	LinearColor GetLightColor();// 0x552b1e0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x11c, Size: 4]
	float TextureMultiplier;//[Offset: 0x120, Size: 4]

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x28, Size: 8]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 8]
	MeshGroup MeshGroup;//[Offset: 0x38, Size: 48]
	ItemDefineID ParentDefineID;//[Offset: 0x68, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x80, Size: 80]
	int SlotID;//[Offset: 0xf0, Size: 4]
	int SubSlotID;//[Offset: 0xf4, Size: 4]
	FName SocketName;//[Offset: 0xf8, Size: 8]
	enum meshType;//[Offset: 0x100, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x108, Size: 8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x110, Size: 8]
	MeshData EntityMeshData;//[Offset: 0x118, Size: 128]
	MeshData CachedEntityMeshData;//[Offset: 0x198, Size: 128]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x220, Size: 16]
	SoftObjectPath MeshAssetPath;//[Offset: 0x230, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x248, Size: 80]
	void UpdateVisibility();// 0x2eef5c8
	void UnRegisterTick();// 0x2eef5ac
	void TickEntity(float DeltaTime);// 0x2eef528
	void SetSocketName(FName InName);// 0x2eef4a4
	void SetParentDefineID(ItemDefineID ParentID);// 0x2eef414
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x2eef33c
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x2eef2b0
	void RevertEntityMeshData();// 0x2eef29c
	void RenderEntity();// 0x2eef280
	void RegisterTick();// 0x2eef264
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x2eef1cc
	void PutOnDefaultEquipment(int InSlotID);// 0x2eef148
	void PrepareEntity();// 0x2eef12c
	void OnPreRender();// 0x2eef110
	void OnPostRender();// 0x2eef0f4
	void MaskActionDirty(bool bFlag);// 0x2eef070
	bool IsEntityAvailable(enum VisibilityType);// 0x2eeefd8
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x2eeef0c
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x2eeee14
	bool HasSomeAction(enum InActionType);// 0x2eeed84
	bool HasMainAction();// 0x2eeed4c
	FName GetSocketName();// 0x2eeed10
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x2eeec7c
	ItemDefineID GetParentDefineID();// 0x2eeec28
	MeshData GetMeshData();// 0x2eeebc4
	BattleItemHandleBase* GetLoadedHandle();// 0x2eeeb90
	ItemDefineID GetDefineID();// 0x2eeeb3c
	void EnterRenderPipeline();// 0x2eeeb20
	void EnterLogicPipeline();// 0x2eeeb04
	void DrawOutline(bool bEnable);// 0x2eeea78
	bool CreateAndApplyResource();// 0x2eeea38
	void ClearRenderEntity();// 0x2eeea1c
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x2eee954
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x2eee87c
	void ClearEntity(bool ForceClear);// 0x2eee7f0

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	enum ItemStoreArea;//[Offset: 0xa9, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0xb0, Size: 16]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	float UnitWeight;//[Offset: 0xc4, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	void UpdateAttributeModify(bool bEnable);// 0x33e46a0
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x33e4574
	bool HanldeDropAssociationData();// 0x33e4534
	bool HanldeCleared();// 0x33e44f4
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x33e43f8
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x33e4144
	bool HandleEnable(bool bEnable);// 0x33e40a4
	bool HandleDrop(int InCount, enum Reason);// 0x33e3fd0
	bool HandleDisuse(enum Reason);// 0x33e3f38
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x33e3ea0
	bool HandleBindToTargetItem();// 0x33e3e60
	World* GetWorldInternal();// 0x33e3e24
	BattleItemData ExtractItemData();// 0x33e3db8
	void ClearAdditionalData();// 0x33e3da4
	bool CheckCanUse(out const interface classNone ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x33e3c50

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x28, Size: 4]
	int MaxCount;//[Offset: 0x2c, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x38, Size: 80]
	ItemDefineID DefineID;//[Offset: 0x88, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x33ee21c
	void RemoveAssociation(FName Name);// 0x33ee1a0
	void Init(ItemDefineID InDefineID);// 0x33ee10c
	ItemDefineID GetDefineID();// 0x33ee0bc
	<FName,ItemAssociation> GetAssociationMap();// 0x33edf7c
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x33ede88
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x33eddd4
	ItemAssociation GetAssociation(FName Name);// 0x33edd30
	void Constuct(out const ItemDefineID InDefineID);// 0x33edc98
	void AddAssociation(FName Name, ItemAssociation Association);// 0x33edba0

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x58, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x60, Size: 16]
	int Durability;//[Offset: 0x70, Size: 4]
	enum ItemStoreArea;//[Offset: 0x74, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x78, Size: 40]
	ItemAssociation[] Associations;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x7e8, Size: 8]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x7f0, Size: 8]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x7f8, Size: 8]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x800, Size: 8]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x2f93124
	Actor* GetBindOwner();// 0x2f93108
	MeshComponent* GetAttachedMeshComponent();// 0x2f930ec
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x2f92f98
	void BindOwner(Actor* Owner);// 0x2f92f20
	void BindEvent(bool bShowWidget);// 0x2f92e94

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x6c5, Size: 1]
	enum TimingPolicy;//[Offset: 0x6c6, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x6c8, Size: 8]
	IntPoint DrawSize;//[Offset: 0x6d0, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 1]
	float RedrawTime;//[Offset: 0x6dc, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x6e8, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	Vector2D Pivot;//[Offset: 0x6f4, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x700, Size: 8]
	LinearColor BackgroundColor;//[Offset: 0x708, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x718, Size: 16]
	float OpacityFromTexture;//[Offset: 0x728, Size: 4]
	enum BlendMode;//[Offset: 0x72c, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 1]
	UserWidget* Widget;//[Offset: 0x730, Size: 8]
	BodySetup* BodySetup;//[Offset: 0x758, Size: 8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x760, Size: 8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x768, Size: 8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x770, Size: 8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x778, Size: 8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x780, Size: 8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x788, Size: 8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x790, Size: 8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x798, Size: 8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 1]
	FName SharedLayerName;//[Offset: 0x7a8, Size: 8]
	int LayerZOrder;//[Offset: 0x7b0, Size: 4]
	enum GeometryMode;//[Offset: 0x7b4, Size: 1]
	float CylinderArcAngle;//[Offset: 0x7b8, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x497fae0
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x497fa64
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x497f9e8
	void SetDrawSize(Vector2D Size);// 0x497f970
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x497f8f4
	void RequestRedraw();// 0x497f8d8
	UserWidget* GetUserWidgetObject();// 0x497f8a4
	TextureRenderTarget2D* GetRenderTarget();// 0x497f870
	LocalPlayer* GetOwnerPlayer();// 0x497f83c
	MaterialInstanceDynamic* GetMaterialInstance();// 0x497f808
	Vector2D GetDrawSize();// 0x497f7d4

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xe0, Size: 4]
	int SizeY;//[Offset: 0xe4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xe8, Size: 16]
	byte AddressX;//[Offset: 0xf8, Size: 1]
	byte AddressY;//[Offset: 0xf9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xfb, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	byte OverrideFormat;//[Offset: 0xfd, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xd8, Size: 4]

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x2ef01c4

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0x10, Size: 16]
	int[] MatParam;//[Offset: 0x20, Size: 16]
	int[] MirroParam;//[Offset: 0x30, Size: 16]
	int[] SlotMatParam;//[Offset: 0x40, Size: 16]

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x3319a00
	void SetSocketName(FName InName);// 0x331997c
	void RenderEntity();// 0x3319960
	void RemoveParticleEffect();// 0x3319944
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x33198ac
	void PrepareEntity();// 0x3319890
	void OnPreRender();// 0x3319874
	void OnPostRender();// 0x3319858
	bool IsForceEnableAnim();// 0x3319818
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x3319784
	ItemDefineID GetDefineID();// 0x3319730
	void EnterLogicPipeline();// 0x3319714
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x331963c
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x33195b8
	void ApplyParticleEffect();// 0x331959c
	void AddWeaponHandleAction();// 0x3319588

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Actor* PredictActorTemplate;//[Offset: 0x788, Size: 8]
	StaticMesh* MeshTemplate;//[Offset: 0x790, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x7b8, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x7e0, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x808, Size: 120]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x880, Size: 16]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x890, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x8a0, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x8b0, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x8c0, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x8d0, Size: 16]
	PredictProjectilePathResult PredictResult;//[Offset: 0x8f0, Size: 184]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x9a8, Size: 8]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x9b0, Size: 8]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x9b8, Size: 8]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x9c8, Size: 16]
	int RedrawCounter;//[Offset: 0x9d8, Size: 4]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity);// 0x30cefc4
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x30cef48

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x38, Size: 8]
	Pawn* OwnerPawn;//[Offset: 0x40, Size: 8]
	Controller* OwnerController;//[Offset: 0x48, Size: 8]
	STExtraWeapon* BindedWeapon;//[Offset: 0x50, Size: 8]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x3b98fe4
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x3327c2c
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x3327b74
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x3327b40
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x3327b0c
	PlayerController* GetOwnerPlayerController();// 0x3327ad8
	Pawn* GetOwnerPawn();// 0x3327aa4
	Controller* GetOwnerController();// 0x3327a70
	Actor* GetOwnerActor();// 0x3327a54

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0x130, Size: 4]
	byte WeaponType;//[Offset: 0x134, Size: 1]
	byte weaponTypeNew;//[Offset: 0x135, Size: 1]
	byte WeaponHoldType;//[Offset: 0x136, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x138, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x148, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x154, Size: 4]
	float LaunchGravityScale;//[Offset: 0x158, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x160, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x168, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	int UnablePeekTipID;//[Offset: 0x170, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x178, Size: 80]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x1c8, Size: 80]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x218, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x21c, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x220, Size: 16]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x230, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x234, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x240, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x270, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x2a0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x2d0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x300, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x330, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x360, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x390, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x3c0, Size: 80]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x410, Size: 80]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x460, Size: 8]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 1]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x470, Size: 16]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x118, Size: 8]
	STExtraPlayerController* GlobalController;//[Offset: 0x128, Size: 8]
	void UpdateComponentTick();// 0x331e464
	STExtraWeapon* TryGetOwnerWeapon();// 0x331e430
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x331e3fc
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x331e33c
	bool IsWeaponOwnerOBTarget();// 0x331e304
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x331e274
	bool IsWeaponLogicComponentTickEnabled();// 0x331e23c
	bool IsLocalOrSpectorPlayer();// 0x331e204
	FString GetWeaponDetailInfo();// 0x331e160
	byte GetOwnerPawnRole();// 0x331e12c

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x332a608
	static int[] GetWeaponSkillIDList(STExtraWeapon* Weapon);// 0x332a524

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x3329f8c
	void ProcessTriggerEvent(enum Event);// 0x3329f08

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x130, Size: 8]
	WeaponStateBase* DefaultState;//[Offset: 0x138, Size: 8]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x140, Size: 80]
	WeaponStateBase* GetCurrentState();// 0x3329aac
	byte GetCurrentFreshWeaponStateType();// 0x3329a78

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x130, Size: 16]
	delegate OnEndState;//[Offset: 0x140, Size: 16]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0x151, Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x428, Size: 16]
	void PreChangeGrenadeAvatar(int InItemID);// 0x30212b8
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x302122c
	FString GetItemAvatarHandlePath(int ItemID);// 0x3b98fe4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x3b98fe4
	int GetDefaultAvatarID(int InAvatarID);// 0x3b98fe4
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x302110c

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x240, Size: 16]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x258, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x278, Size: 8]
	NetItemAvatarData NetAvatarData;//[Offset: 0x280, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x370, Size: 8]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x378, Size: 8]
	int itemType;//[Offset: 0x380, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x388, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x3b0, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x3d8, Size: 80]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x3b98fe4
	void SyncChangeItemAvatar(int InItemID);// 0x303fe80
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x303fd90
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x303fca0
	void ResetItemAvatar();// 0x303fc8c
	void RequestDownloadItemInBattle(int InItemID);// 0x303fc08
	void PreChangeItemAvatar(int InItemID);// 0x303fb84
	void OnRep_ItemAvatarChanged();// 0x303fb70
	bool IsValidAvatar();// 0x303fb38
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x303fafc
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x303fa2c
	MeshComponent* GetItemBodyMesh();// 0x303fa10
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x303f94c
	void DownloadItemInBattleCallBack(uint32 ItemID, uint32 ErrorCode);// 0x303f890
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x303f770
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x303f6a8
	void AsyncChangeItemAvatar(int InItemID);// 0x303f624
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x303f518
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x303f418
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x303f2f8

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xd0, Size: 16]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xe0, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x108, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x130, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x2f07158
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x2f06ea4
	bool HandleDrop(int InCount, enum Reason);// 0x2f06dd0
	bool HandleDisuse(enum Reason);// 0x2f06d38
	BackpackComponent* GetBackpackComponent();// 0x2f06d04
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x2f06c38

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x178, Size: 16]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x188, Size: 16]
	delegate SingleItemDeleteDelegate;//[Offset: 0x198, Size: 16]
	delegate CapacityUpdatedDelegate;//[Offset: 0x1a8, Size: 16]
	delegate ItemOperationDelegate;//[Offset: 0x1b8, Size: 16]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1c8, Size: 16]
	delegate AssociationOperationDelegate;//[Offset: 0x1d8, Size: 16]
	delegate ItemOperCountDelegate;//[Offset: 0x1e8, Size: 16]
	delegate ItemOperationFailedDelegate;//[Offset: 0x1f8, Size: 16]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x208, Size: 16]
	delegate ItemHandleAddDelegate;//[Offset: 0x218, Size: 16]
	delegate ItemUpdatedDelegate;//[Offset: 0x228, Size: 16]
	delegate ItemRemovedDelegate;//[Offset: 0x238, Size: 16]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x248, Size: 16]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x258, Size: 16]
	IncNetArray ItemListNet;//[Offset: 0x278, Size: 32]
	BattleItemData[] CachItemList;//[Offset: 0x298, Size: 16]
	IncNetArray ItemListNetCache;//[Offset: 0x2a8, Size: 32]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x2d0, Size: 16]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x2e0, Size: 80]
	int CapacityThreshold;//[Offset: 0x330, Size: 4]
	float Capacity;//[Offset: 0x334, Size: 4]
	float OccupiedCapacity;//[Offset: 0x338, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x33c, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x340, Size: 4]
	int virtualitemid;//[Offset: 0x35c, Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x368, Size: 16]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x378, Size: 16]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x398, Size: 16]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x3b0, Size: 16]
	FString LuaFilePath;//[Offset: 0x3c0, Size: 16]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3759f10
	float UpdateCapacity();// 0x3759ed4
	void UnequipItem(ItemDefineID DefineID);// 0x3759e48
	void TryMergeItemHandles(ItemDefineID DefineID, enum InItemStoreArea);// 0x3759d80
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x3759c60
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x3759b6c
	void ServerSetShowBounty(bool bInShowBounty);// 0x3759aa8
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x3759980
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x3759860
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x37597b8
	void ReceiveItemList();// 0x375979c
	void ReceiveCapacity();// 0x3759780
	bool PickupItemFromWrapperDetail(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x37594a0
	bool PickUpItem_Default(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x37591fc
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3758f1c
	void PickupBattleItemOnPlane();// 0x3758f08
	bool PickItem_IntoSafetyBox(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x3758c64
	bool PickItem_IntoBackpack(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x37589c0
	void OnRep_specialCountLimit();// 0x37589ac
	void OnRep_ItemListNet();// 0x3758998
	void OnRep_ItemList();// 0x3758984
	void OnRep_Capacity();// 0x3758970
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x37588dc
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x3758848
	void NotifyItemListUpdated();// 0x375882c
	void NotifyCapacityUpdated();// 0x3758810
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x375876c
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x37586ac
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x37585f4
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x3758544
	void ModifyAimNotAutoUse(bool bAdd);// 0x3758480
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x37582f8
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x3758268
	bool IsItemExist(out const ItemDefineID DefineID);// 0x37581bc
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x375817c
	bool IsAutoUse(int ItemID);// 0x3b98fe4
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x37580b4
	bool HasTagSub(int ItemID, out const FName TagName);// 0x3b98fe4
	bool HasItemBySubType(int SubType);// 0x3758024
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x3757f84
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x3757ebc
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x3757d64
	World* GetWorld_BP();// 0x3757d30
	int GetUnEquipItemNumByItemId(int ItemID);// 0x3757ca4
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x3757c04
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x3757b74
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x37579c4
	int GetItemSubType(int ItemID);// 0x3b98fe4
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x3757854
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x3757814
	ItemHandleBase*[] GetItemHandleList();// 0x3757788
	int GetItemCountByType(int InItemType);// 0x37576fc
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x3757670
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x37575ac
	float GetItemAssociateWeights(BattleItemData InItemData);// 0x37574dc
	BattleItemData GetFirstItemBySubType(int SubType);// 0x3757428
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x3757364
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x37572a8
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x3757148
	enum GetAIPickupType(int ItemID);// 0x37570b4
	void ForceNetUpdate();// 0x3757098
	void EquipItem(ItemDefineID DefineID);// 0x375700c
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x3756eec
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x3756e08
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x3756d64
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x3756cc0
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x3756be8
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x3756b60
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x3756abc
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x3756a18
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x375690c
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3756800
	int CheckSpecialMaxCountForItem(ItemDefineID DefineID, int Count);// 0x3756728
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x3756640
	int CheckCapacityForItem(ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x375652c
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x375640c
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x3756364
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x3756280
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int Count);// 0x375617c
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x37560e0
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3755fdc
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3755ed8
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x3755df4
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3755b94

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x898, Size: 80]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x8e8, Size: 80]
	int gender;//[Offset: 0x938, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x940, Size: 16]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x950, Size: 160]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x9f0, Size: 80]
	int HeadAvatarID;//[Offset: 0xa50, Size: 4]
	int PreHeadAvatarID;//[Offset: 0xa54, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0xa78, Size: 80]
	enum[] OpenResetHideBone;//[Offset: 0xac8, Size: 16]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0xad8, Size: 80]
	int[] ignoreSlots;//[Offset: 0xb28, Size: 16]
	int WholeBodyModelID;//[Offset: 0xb38, Size: 4]
	int CurrentClothID;//[Offset: 0xb3c, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0xb40, Size: 16]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0xb58, Size: 80]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0xba8, Size: 80]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xbf8, Size: 80]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xc48, Size: 80]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xc98, Size: 80]
	delegate OnAvatarAttachEquipped;//[Offset: 0xce8, Size: 16]
	delegate OnClothParticleEquipped;//[Offset: 0xcf8, Size: 16]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xd08, Size: 80]
	int ConfigMinDistFromMainChar;//[Offset: 0xd58, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xd5c, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xd60, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xd68, Size: 16]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xd78, Size: 16]
	int EnableEquipAvatarPendant;//[Offset: 0xd88, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8c, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8d, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xd90, Size: 80]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xde0, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xe18, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xe44, Size: 4]
	int TypeToInt(enum InSlotType);// 0x2f6f8fc
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x2f6f878
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x2f6f758
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x2f6f698
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x2f6f5d8
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x2f6f4b8
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x2f6f34c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x2f6f22c
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x2f6f1b0
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x2f6f0a4
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x2f6ef64
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x2f6ee58
	void SetAvatarGender(int AGender);// 0x2f6eddc
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x2f6ed24
	void SetAllMeshCharMode(bool bMainChar);// 0x2f6eca0
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x2f6ebe8
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x2f6eb64
	void ResetAllAnimDynamics();// 0x2f6eb48
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x2f6ea90
	void RemoveClothParticleEffect(int SlotID);// 0x2f6ea14
	void RemoveAttachMesh(int SlotID);// 0x2f6e998
	void ProcessClothSuits();// 0x2f6e97c
	void ProcessAvatarRectify();// 0x2f6e960
	void PreProcessBeforeLoadMesh();// 0x2f6e944
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x3b98fe4
	void PostProcessAfterLoadMesh();// 0x2f6e928
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x2f6e870
	void OnRep_BodySlotStateChangedInternal();// 0x2f6e85c
	void OnRep_BodySlotStateChanged();// 0x2f6e840
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x2f6e770
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x2f6e6b0
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x2f6e598
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x3b98fe4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x2f6e478
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x2f6e3a4
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x2f6e274
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemID);// 0x2f6e170
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x3b98fe4
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x3b98fe4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x2f6e0ec
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x2f6dfec
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles);// 0x2f6deec
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x2f6ddc8
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x2f6dca0
	bool IsTeammate();// 0x2f6dc60
	bool IsSelf();// 0x2f6dc20
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x2f6db20
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x2f6da20
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x2f6d990
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x2f6d8bc
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x2f6d78c
	enum IntToType(int InSlotID);// 0x2f6d714
	void InitMasterComponent();// 0x2f6d700
	void Initialize();// 0x2f6d6e4
	void InitialAvatarParam(int AGender);// 0x2f6d668
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x2f6d5ec
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x2f6d4fc
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x2f6d410
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x3b98fe4
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x2f6d36c
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x2f6d288
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x2f6d20c
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x2f6d190
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x2f6d0ac
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x2f6cfc8
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x2f6cf0c
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x2f6ce04
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x2f6cd48
	enum GetPendantSlotType();// 0x2f6cd0c
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x2f6cc78
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x2f6cbb0
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x2f6caf4
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x2f6ca68
	int GetEquipmentSkinItemID(int InItemID);// 0x2f6c9d4
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x2f6c8d8
	int[] GetDefaultBodyItemIDList();// 0x2f6c834
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x2f6c764
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x2f6c694
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x2f6c590
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x3b98fe4
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x2f6c490
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x2f6c3c8
	enum GetAttachPartSlotType();// 0x2f6c38c
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x2f6c2f8
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x2f6c190
	void GetAllEquipItems(out int[] EquipItems);// 0x2f6c0d8
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x3b98fe4
	bool EnableEquipAvatarPendantFeature();// 0x2f6c0a0
	bool DeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x2f6bfc4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x3b98fe4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x3b98fe4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x2f6bedc
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x2f6be44
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x2f6bdac
	bool CheckIsHiddenByOther(int InItemResID);// 0x2f6bd1c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x2f6bc5c
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x2f6bba4
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x2f6baec
	void ApplyMeshCompCollision(int SlotID);// 0x2f6ba70
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x2f6b9a0
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x2f6b8e8
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x2f6b7bc
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x2f6b704
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x2f6b63c
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x2f6b5b8

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x4f8, Size: 80]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x548, Size: 80]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x598, Size: 80]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x5e8, Size: 80]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x638, Size: 16]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x648, Size: 16]
	delegate OnAvatarMeshEquipped;//[Offset: 0x658, Size: 16]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x668, Size: 16]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x680, Size: 16]
	int AsyncLoadReqID;//[Offset: 0x760, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x764, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x780, Size: 16]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x790, Size: 80]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x7e0, Size: 8]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x311c3dc
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x311c31c
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x311c25c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x311c13c
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x311c0b8
	void ResetSlotSyncData();// 0x311c09c
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x311bf84
	void RequestSyncLoadMeshes();// 0x311bf70
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x311beb0
	void RequestAsyncLoadMeshes();// 0x311be9c
	void RequestAsyncLoadHandles();// 0x311be88
	void RemoveEquippedAvatar(int InSlotID);// 0x311be04
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x311bd78
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x311bc74
	void ReloadAllLogicAvatar(enum ReloadType);// 0x311bbf0
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x311bb6c
	bool PutOnEquipmentByResID(int resID);// 0x311bad4
	bool PutOffEquimentByResID(int resID);// 0x311ba3c
	void PreProcessBeforeLoadMesh();// 0x311ba20
	void PostProcessAfterLoadMesh();// 0x311ba04
	void OnSyncLoadMeshesDone();// 0x311b9f0
	void OnRep_BodySlotStateChanged();// 0x311b9d4
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x311b914
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x3b98fe4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x311b7f4
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemID);// 0x3b98fe4
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x3b98fe4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x3b98fe4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x311b770
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x311b6b0
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x311b5f0
	void OnAllAvatarHandleLoadedDoneSync();// 0x311b5dc
	void OnAllAvatarHandleLoadedDone();// 0x311b5c8
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x311b4a4
	bool IsValidStateToRequestDownload();// 0x311b46c
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x311b398
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x311b2c4
	bool IsItemHasEquipped(int InItemID);// 0x311b234
	bool IsEnableItemDownload(int ItemID);// 0x3b98fe4
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x311b188
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x311b0f0
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x311b058
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x311af98
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x311ae90
	enum GetMeshTypeBySlot(int InSlotID);// 0x311ae04
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x311ad78
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x311ace4
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x311ac58
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x311ab50
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x311aa48
	AvatarEntityFactory* GetEntityFactory();// 0x311aa0c
	SoftObjectPath GetBatchDefaultBodyPath();// 0x3b98fe4
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x311a924
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x311a820
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x311a78c
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x311a690
	int GetAdvanceVehicleInsideSlotID();// 0x311a654
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x3b98fe4
	bool DeleteAvatarMeshData(int InSlotID, bool DestroyComp);// 0x311a578
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x311a490
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x311a3cc
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x311a1f4
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x311a134
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x3119ff0
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x3119ee8
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x3b98fe4
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x3119cd0

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x240, Size: 80]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x290, Size: 80]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x2e0, Size: 32]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x300, Size: 16]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x310, Size: 16]
	delegate OnAvatarEquippedEvent;//[Offset: 0x320, Size: 16]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x330, Size: 16]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x340, Size: 16]
	int itemType;//[Offset: 0x350, Size: 4]
	enum CustomType;//[Offset: 0x354, Size: 1]
	<int,AvatarSlotDesc> ForceEquipItemLogic;//[Offset: 0x358, Size: 80]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	int SubSlotStartNum;//[Offset: 0x3b4, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x3b8, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x3c0, Size: 80]
	int[] AlawysHideResetOperation;//[Offset: 0x4c0, Size: 16]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x4d8, Size: 16]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x3118390
	void RemoveForceEquipItem(int SlotID);// 0x3118314
	void RemoveAllEquippedItem();// 0x3118300
	void OnRep_BodySlotStateChanged();// 0x31182e4
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x3118214
	void OnHandleUnequipSlot(int InSlotID);// 0x3118198
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x31180f4
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x3118050
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x3117f38
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x3b98fe4
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x3117e64
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x3117d34
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x3b98fe4
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x3b98fe4
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x3b98fe4
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x3117c28
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x3117b1c
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x3117a48
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x311793c
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x3117830
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x3117764
	int MakeStateInfo(out const int[] InSlotDesc);// 0x311769c
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x31175cc
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x31174cc
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x31173e4
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x31172b4
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x31171e8
	bool IsEquippedItemID(int InItemID);// 0x3117158
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x31170b4
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x3117008
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x3116f64
	bool HandleUnequipSlot(int InSlotID);// 0x3116ed4
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x3116e30
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x3116c9c
	void HandleItemResetOrderDesc();// 0x3116c88
	void HandleItemResetOperation();// 0x3116c74
	void HandleItemReplaceRelation();// 0x3116c60
	void HandleItemHideRelation();// 0x3116c4c
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x3116b50
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x31169d8
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x3116860
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x3116780
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x3116670
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x31164f8
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x3116380
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x31162a0
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x31161ac
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x311610c
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x3116064
	enum GetForceHideState(int InSlotID);// 0x3115fd0
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x3115ea8
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x3115e0c
	int GetAvatarSlotID(int InSubSlotID);// 0x3115d80
	void ClientPostProcessViewDataMiddle();// 0x3115d64
	void ClientPostProcessViewDataBefore();// 0x3115d48
	void ClientPostProcessViewDataAfter();// 0x3115d2c
	void ClientBuildAvatarRelationData();// 0x3115d18
	void ClientBodySlotStateChanged();// 0x3115d04
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x3115be8
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x3115a54
	bool BPClientPostProcessViewDataMiddle();// 0x3115a14
	bool BPClientPostProcessViewDataBefore();// 0x31159d4
	bool BPClientPostProcessViewDataAfter();// 0x3115994
	void AddForceEquipItem(int SlotID, int ItemID);// 0x31158e0

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x28, Size: 4]
	int SubSlotID;//[Offset: 0x2c, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x30, Size: 8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x38, Size: 8]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x40, Size: 8]
	MeshComponent* MeshComponent;//[Offset: 0x48, Size: 8]
	MeshData EntityMeshData;//[Offset: 0x50, Size: 128]
	MeshData CachedEntityMeshData;//[Offset: 0xd0, Size: 128]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	FName SocketName;//[Offset: 0x158, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x160, Size: 16]
	SoftObjectPath MeshAssetPath;//[Offset: 0x170, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x188, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x1a0, Size: 80]
	void UpdateVisibility();// 0x2ef2e58
	void UnRegisterTick();// 0x2ef2e3c
	void TickEntity();// 0x2ef2e20
	void SetSocketName();// 0x2ef2e04
	void SetParentDefineID(ItemDefineID ParentID);// 0x2ef2d70
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x2ef2c98
	void RevertEntityMeshData();// 0x2ef2c84
	void RenderEntity(out SoftObjectPath SoftPath);// 0x2ef2bbc
	void RegisterTick();// 0x2ef2ba0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x2ef2b08
	void PutOnDefaultEquipment(enum SlotType);// 0x2ef2a84
	void OnPostRender();// 0x2ef2a68
	bool IsEntityAvailable(enum VisibilityType);// 0x2ef29d0
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x2ef2904
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x2ef280c
	enum GetMeshType();// 0x2ef27d0
	MeshData GetMeshData();// 0x2ef276c
	BattleItemHandleBase* GetLoadedHandle();// 0x2ef2738
	ItemDefineID GetDefineID();// 0x2ef26e4
	void EnterRenderPipeline();// 0x2ef26c8
	void EnterLogicPipeline();// 0x2ef26ac
	void DrawOutline(bool bEnable);// 0x2ef2620
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x2ef2544
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x2ef247c
	void ClearEquipmentLogic(bool putDefault);// 0x2ef23f0
	void ClearEntity(bool ForceClear);// 0x2ef2364
	void ApplyAnimation();// 0x2ef2348
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x2ef22c4

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0xcb, Size: 1]
	enum SubSlot;//[Offset: 0xcc, Size: 1]
	enum specialType;//[Offset: 0xcd, Size: 1]
	enum ForceMeshType;//[Offset: 0xce, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xcf, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xd0, Size: 80]
	MeshPackage MeshPack;//[Offset: 0x120, Size: 600]
	MeshPackage replacedMeshPack;//[Offset: 0x378, Size: 600]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x5d0, Size: 16]
	enum[] hiddenFlags;//[Offset: 0x5e0, Size: 16]
	enum[] subHiddenFlags;//[Offset: 0x5f0, Size: 16]
	enum[] ReplaceFlags;//[Offset: 0x600, Size: 16]
	enum[] ignoreFlags;//[Offset: 0x610, Size: 16]
	AvatarPostOperation[] postOperation;//[Offset: 0x620, Size: 16]
	BackpackComponent* pBackpackComp;//[Offset: 0x630, Size: 8]
	int ItemCapacity;//[Offset: 0x638, Size: 4]
	int Durability;//[Offset: 0x63c, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x648, Size: 56]
	enum hideBoneSlot;//[Offset: 0x680, Size: 1]
	FName hideBoneName;//[Offset: 0x688, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x690, Size: 16]
	enum HideBoneType;//[Offset: 0x6a0, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x6a8, Size: 80]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x6f8, Size: 16]
	int PendantConfigIndex;//[Offset: 0x708, Size: 4]
	float PendantScale;//[Offset: 0x70c, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x710, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x718, Size: 16]
	byte CharacterAnimOverrideType;//[Offset: 0x728, Size: 1]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x730, Size: 88]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x788, Size: 16]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x798, Size: 16]
	void SetItemDurability(int InDurability);// 0x2f04c30
	void SetItemCapacity(int InCapacity);// 0x2f04bb4
	void PreLocalHandleDisuse();// 0x2f04ba0
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x2f04a44
	bool HasCustomInfo();// 0x2f04a0c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x2f04910
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x2f047fc
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x2f04548
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x2f043fc
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x2f042ec
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x2f04170
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x2f040a0
	bool HandleEnable(bool bEnable);// 0x2f04000
	bool HandleDrop(int InCount, enum Reason);// 0x2f03f2c
	bool HandleDisuse(enum Reason);// 0x2f03e94
	BackpackComponent* GetBackpackComponent();// 0x2f03e60
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x2f03d14
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x2f03c7c
	void AutoEquipChips();// 0x2f03c60

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 16]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a8, Size: 16]
	MaterialInterface* baseMat;//[Offset: 0x1b8, Size: 8]
	class AnimInstance* animBP;//[Offset: 0x1c0, Size: 8]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1c8, Size: 40]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	enum EffectCreateType;//[Offset: 0x1f1, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1f8, Size: 16]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x208, Size: 16]
	class AnimInstance* animBPClass;//[Offset: 0x218, Size: 40]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 8]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x2ef4cec

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x40, Size: 16]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x2f8a768
	void AsyncLoadCustomAssetDone();// 0x2f8a754
	bool ApplyCustomInfo();// 0x2f8a714

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x28, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x2c, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x34, Size: 8]
	void SetCustomID(int InCustomID);// 0x2f8a3e8
	MeshComponent* GetOwnerMeshComp();// 0x2f8a3b4
	ActorComponent* GetOwnerComp();// 0x2f8a380
	bool ClearCustomInfo();// 0x2f8a340
	bool ApplyCustomInfo();// 0x2f8a300

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x30, Size: 16]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x2f05e44
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x2f05d8c

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x28, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x2f05860
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x2f05770
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x2f05680
	CharacterAvatarComponent2* GetOwnerComponent();// 0x2f0564c

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x30, Size: 16]
	SoftObjectPath SoftRefPath1;//[Offset: 0x40, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x58, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x2f06638
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x2f06580
	bool IsPatternNumMode();// 0x2f0655c
	void InitPatternNumID(int InNumID);// 0x2f064e4
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x3b98fe4

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x28, Size: 4]
	Vector2D Position;//[Offset: 0x2c, Size: 8]
	Vector2D Size;//[Offset: 0x34, Size: 8]
	Vector2D Origin;//[Offset: 0x3c, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x44, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	float Opacity;//[Offset: 0x50, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x58, Size: 8]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x60, Size: 8]
	Pawn* CharacterOwner;//[Offset: 0x68, Size: 8]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	float LastRenderTime;//[Offset: 0x74, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x78, Size: 8]
	Vector2D RenderSize;//[Offset: 0x80, Size: 8]
	float RenderScale;//[Offset: 0x88, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x8c, Size: 8]
	Canvas* Canvas;//[Offset: 0x98, Size: 8]
	float AspectScale;//[Offset: 0xa0, Size: 4]
	Vector2D CanvasClip;//[Offset: 0xa4, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0xb0, Size: 16]
	bool ShouldDraw(bool bShowScores);// 0x30320ac
	void SetHidden(bool bIsHidden);// 0x3032020
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x3031e14
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x3031cb8
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x3031b7c
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x3031a7c
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x30316a8
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x30310e8
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x3030d58
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x3030c9c
	void Draw(float DeltaTime);// 0x3030c18
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x3030b80

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 1]
	Vector MarkerPosition;//[Offset: 0x484, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x498, Size: 136]
	Texture2D* HUDMainTexture;//[Offset: 0x520, Size: 8]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x528, Size: 8]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x530, Size: 8]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x540, Size: 16]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x550, Size: 16]
	Texture2D* HUDPlayerTexture;//[Offset: 0x570, Size: 8]
	CanvasIcon Crosshair;//[Offset: 0x578, Size: 24]
	CanvasIcon ProgreesBar;//[Offset: 0x5f0, Size: 24]
	CanvasIcon BKProgreesBar;//[Offset: 0x608, Size: 24]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x620, Size: 24]
	CanvasIcon Marker;//[Offset: 0x650, Size: 24]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x668, Size: 8]
	CanvasIcon WORLDMAP;//[Offset: 0x670, Size: 24]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x688, Size: 8]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x3260b50
	void OnAsyncLoadingFinished();// 0x3260b3c
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x3260a68
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x32609d0
	LinearColor GetColorByTeamID(int TeamID);// 0x3260938
	void EnableCrosshair(bool bEnable);// 0x32608b8
	void DrawScreenString(FText Text, float X, float Y);// 0x3260634
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x3260480

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 8]
	TextureUVs UVs;//[Offset: 0x40, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 16]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 8]
	float Rotation;//[Offset: 0x74, Size: 4]
	Vector2D RotPivot;//[Offset: 0x78, Size: 8]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 24]
	Font* Font;//[Offset: 0x60, Size: 8]
	float TextScale;//[Offset: 0x68, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x78, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 16]
	byte HorzPosition;//[Offset: 0x9c, Size: 1]
	byte VertPosition;//[Offset: 0x9d, Size: 1]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x130, Size: 24]
	FName LogicSocket;//[Offset: 0x148, Size: 8]
	FName AttachSocket;//[Offset: 0x150, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x158, Size: 1]
	float AIMinAttackDist;//[Offset: 0x15c, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x160, Size: 4]
	float AIAttackDist;//[Offset: 0x164, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x33293b0
	int GetAvailableBulletsNumInBackpack();// 0x332937c

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x130, Size: 80]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x180, Size: 16]
	float PistolCenterDownDis;//[Offset: 0x190, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x198, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x1a0, Size: 4]
	float RotateAngle;//[Offset: 0x1a4, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x1a8, Size: 8]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x1b0, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1b8, Size: 8]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x1c0, Size: 8]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x1c8, Size: 8]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x1d0, Size: 8]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x1d8, Size: 8]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x1e0, Size: 8]
	Texture2D* CrossHairShotGun;//[Offset: 0x1e8, Size: 8]
	void UpdateComponentTick();// 0x2f8544c
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x2f8538c
	void DrawSpreadEnd();// 0x2f85378
	void DrawDebugPointEnd();// 0x2f85364

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x488, Size: 8]
	float BulletFireSpeed;//[Offset: 0x490, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x498, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x49c, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x4a0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4a4, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x4a8, Size: 16]
	float ShootInterval;//[Offset: 0x4b8, Size: 4]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bf, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x4c0, Size: 4]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x4c8, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x4cc, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x4d0, Size: 16]
	float BurstShootInterval;//[Offset: 0x4e0, Size: 4]
	float BurstShootCD;//[Offset: 0x4e4, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x4e8, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x4f0, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x4f8, Size: 8]
	FName SilencerSocketName;//[Offset: 0x500, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x508, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x510, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x518, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x520, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x524, Size: 4]
	byte shootType;//[Offset: 0x528, Size: 1]
	int ShootTotalType;//[Offset: 0x52c, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x534, Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x538, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x54c, Size: 20]
	float BaseImpactDamage;//[Offset: 0x560, Size: 4]
	float BulletMomentum;//[Offset: 0x564, Size: 4]
	float BulletRange;//[Offset: 0x568, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x570, Size: 8]
	byte ImpactDirType;//[Offset: 0x578, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x580, Size: 16]
	float RangeModifier;//[Offset: 0x590, Size: 4]
	float ReferenceDistance;//[Offset: 0x594, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x598, Size: 4]
	class DamageType* DamageType;//[Offset: 0x5a0, Size: 8]
	ItemDefineID BulletType;//[Offset: 0x5a8, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x5c0, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 1]
	int InitBulletInClip;//[Offset: 0x5dc, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	float TraceDistance;//[Offset: 0x5e4, Size: 4]
	float MaxValidHitTime;//[Offset: 0x5e8, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x5f0, Size: 80]
	float MaxDamageRate;//[Offset: 0x640, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x648, Size: 80]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x6a0, Size: 8]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x6a8, Size: 112]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x718, Size: 8]
	float DamageImpulse;//[Offset: 0x720, Size: 4]
	byte ReloadType;//[Offset: 0x724, Size: 1]
	float PreFireTime;//[Offset: 0x728, Size: 4]
	float PostFireTime;//[Offset: 0x72c, Size: 4]
	float PostReloadTime;//[Offset: 0x730, Size: 4]
	float ReloadDurationStart;//[Offset: 0x734, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x738, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x73c, Size: 4]
	float ReloadTime;//[Offset: 0x740, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x744, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x748, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x74c, Size: 4]
	float ReloadRate;//[Offset: 0x750, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x758, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x760, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x76c, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	float DropDuration;//[Offset: 0x774, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x77c, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x780, Size: 152]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x818, Size: 16]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x830, Size: 112]
	float AccessoriesVRecoilFactor;//[Offset: 0x8a0, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x8a4, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x8a8, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x8ac, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x8f0, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x8f4, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x8f8, Size: 4]
	float GameDeviationFactor;//[Offset: 0x8fc, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x900, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x904, Size: 4]
	byte CrossHairType;//[Offset: 0x908, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x90c, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x910, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x914, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x918, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x920, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x928, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x930, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x938, Size: 8]
	float WeaponBodyLength;//[Offset: 0x940, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x948, Size: 16]
	float WeaponAimFOV;//[Offset: 0x95c, Size: 4]
	float WeaponAimInTime;//[Offset: 0x960, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x964, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x968, Size: 4]
	float GameMotionYawRate;//[Offset: 0x96c, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x970, Size: 4]
	float ForegripParam;//[Offset: 0x974, Size: 4]
	float MagParam;//[Offset: 0x978, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x980, Size: 4]
	byte SightType;//[Offset: 0x984, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0x988, Size: 4]
	byte SightVisionType;//[Offset: 0x98c, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x990, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x9a8, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x9ac, Size: 4]
	float RecoilKickADS;//[Offset: 0x9b0, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x9b4, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x9b8, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 1]
	enum ReleaseFireType;//[Offset: 0x9bd, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9be, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bf, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x9c0, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x9c4, Size: 4]
	float AnimationKick;//[Offset: 0x9c8, Size: 4]
	int ReloadAnimSlot;//[Offset: 0x9cc, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0x9d4, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d9, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0x9dc, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x9e0, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0x9e8, Size: 16]
	FName[] RearSightSocketConfig;//[Offset: 0x9f8, Size: 16]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xa08, Size: 16]
	int RearSightRotIndex;//[Offset: 0xa18, Size: 4]
	byte[] CoronaEffectCfg;//[Offset: 0xa20, Size: 16]
	ItemDefineID GetBulletType();// 0x31058e8

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x3b0, Size: 8]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x3bc, Size: 4]
	float LaunchGravityScale;//[Offset: 0x3c0, Size: 4]
	int PunctureTimes;//[Offset: 0x3c4, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x3c8, Size: 8]
	class DamageType* DamageType;//[Offset: 0x3d0, Size: 8]
	ParticleSystem* NormalTailFX;//[Offset: 0x3d8, Size: 8]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x3e8, Size: 8]
	Vector RootScale;//[Offset: 0x3f0, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	Vector ShootDir;//[Offset: 0x400, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x500, Size: 8]
	delegate OnResetBullet;//[Offset: 0x508, Size: 16]
	delegate OnBulletImpact;//[Offset: 0x518, Size: 16]
	delegate OnLaunchBullet;//[Offset: 0x528, Size: 16]
	delegate OnRecycleBullet;//[Offset: 0x538, Size: 16]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x548, Size: 8]
	Actor* WeaponOwnerPawn;//[Offset: 0x550, Size: 8]
	float WeaponFloorHeight;//[Offset: 0x618, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x61c, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x628, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x62c, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	int MaxTraceTimes;//[Offset: 0x634, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x3b98fe4
	void ReloadNoEncodeAttr();// 0x322b864
	void OnRecycleBulletDelegate__DelegateSignature();// 0x3b98fe4
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x322b7bc
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x3b98fe4
	void OnImpact(out const HitResult _ImpactResult);// 0x322b714
	bool NeedCheckBulletFlySound();// 0x322b6d4
	void LaunchBulletDelegate__DelegateSignature();// 0x3b98fe4
	float GetMaxBulletFlySpeed();// 0x322b698
	Controller* GetInstigatorControllerSafe();// 0x322b664
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x322b630
	bool ClientVerifyBlock(out Vector MuzzlePos, out Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x322b4c8

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x1c0, Size: 8]
	void ResumeMoveAfterImpactWithNoLost();// 0x2f66874
	void ResetTickDelay();// 0x2f6685c
	void IgnoreBounceReflectOnce();// 0x2f66840
	void ForceStop();// 0x2f6682c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x150, Size: 4]
	float MaxSpeed;//[Offset: 0x154, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 1]
	float PreviousHitTime;//[Offset: 0x15c, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x160, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x16c, Size: 4]
	float Buoyancy;//[Offset: 0x170, Size: 4]
	float Bounciness;//[Offset: 0x174, Size: 4]
	float Friction;//[Offset: 0x178, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x17c, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x180, Size: 16]
	delegate OnProjectileStop;//[Offset: 0x190, Size: 16]
	float HomingAccelerationMagnitude;//[Offset: 0x1a0, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x1a4, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x1ac, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x1b0, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x1b4, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x55a4804
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x55a4780
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x3b98fe4
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x3b98fe4
	Vector LimitVelocity(Vector NewVelocity);// 0x55a46f0

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x398, Size: 80]
	ParticleSystem* DefaultFX;//[Offset: 0x3e8, Size: 8]
	ParticleSystem* ConcreteFX;//[Offset: 0x3f0, Size: 8]
	ParticleSystem* DirtFX;//[Offset: 0x3f8, Size: 8]
	ParticleSystem* WaterFX;//[Offset: 0x400, Size: 8]
	ParticleSystem* MetalFX;//[Offset: 0x408, Size: 8]
	ParticleSystem* WoodFX;//[Offset: 0x410, Size: 8]
	ParticleSystem* GlassFX;//[Offset: 0x418, Size: 8]
	ParticleSystem* GrassFX;//[Offset: 0x420, Size: 8]
	ParticleSystem* FleshFX;//[Offset: 0x428, Size: 8]
	ParticleSystem* SteelFX;//[Offset: 0x430, Size: 8]
	ParticleSystem* SandbagFX;//[Offset: 0x438, Size: 8]
	ParticleSystem* SandFX;//[Offset: 0x440, Size: 8]
	ParticleSystem* ClothFX;//[Offset: 0x448, Size: 8]
	ParticleSystem* PlasticFX;//[Offset: 0x450, Size: 8]
	ParticleSystem* LeatherFX;//[Offset: 0x458, Size: 8]
	ParticleSystem* CeramicsFX;//[Offset: 0x460, Size: 8]
	ParticleSystem* PaperFX;//[Offset: 0x468, Size: 8]
	ParticleSystem* StoneFX;//[Offset: 0x470, Size: 8]
	ParticleSystem* SnowFX;//[Offset: 0x478, Size: 8]
	ParticleSystem* PopCanFX;//[Offset: 0x480, Size: 8]
	ParticleSystem* PyreflyFX;//[Offset: 0x488, Size: 8]
	ParticleSystem* LeafFX;//[Offset: 0x490, Size: 8]
	ParticleSystem* CarFX;//[Offset: 0x498, Size: 8]
	ParticleSystem* AsphaltFX;//[Offset: 0x4a0, Size: 8]
	ParticleSystem* IceFX;//[Offset: 0x4a8, Size: 8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x4b8, Size: 8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x4c0, Size: 8]
	AkAudioEvent* DirtSound;//[Offset: 0x4c8, Size: 8]
	AkAudioEvent* WaterSound;//[Offset: 0x4d0, Size: 8]
	AkAudioEvent* MetalSound;//[Offset: 0x4d8, Size: 8]
	AkAudioEvent* WoodSound;//[Offset: 0x4e0, Size: 8]
	AkAudioEvent* GlassSound;//[Offset: 0x4e8, Size: 8]
	AkAudioEvent* GrassSound;//[Offset: 0x4f0, Size: 8]
	AkAudioEvent* FleshSound;//[Offset: 0x4f8, Size: 8]
	AkAudioEvent* SteelSound;//[Offset: 0x500, Size: 8]
	AkAudioEvent* SandbagSound;//[Offset: 0x508, Size: 8]
	AkAudioEvent* SandSound;//[Offset: 0x510, Size: 8]
	AkAudioEvent* ClothSound;//[Offset: 0x518, Size: 8]
	AkAudioEvent* PlasticSound;//[Offset: 0x520, Size: 8]
	AkAudioEvent* LeatherSound;//[Offset: 0x528, Size: 8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x530, Size: 8]
	AkAudioEvent* PaperSound;//[Offset: 0x538, Size: 8]
	AkAudioEvent* StoneSound;//[Offset: 0x540, Size: 8]
	AkAudioEvent* SnowSound;//[Offset: 0x548, Size: 8]
	AkAudioEvent* PopCanSound;//[Offset: 0x550, Size: 8]
	AkAudioEvent* PyreflySound;//[Offset: 0x558, Size: 8]
	AkAudioEvent* LeafSound;//[Offset: 0x560, Size: 8]
	AkAudioEvent* CarSound;//[Offset: 0x568, Size: 8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x570, Size: 8]
	AkAudioEvent* IceSound;//[Offset: 0x578, Size: 8]
	AkAudioEvent* WindBreakSound;//[Offset: 0x580, Size: 8]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x588, Size: 8]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x590, Size: 8]
	DecalData DefaultDecal;//[Offset: 0x598, Size: 32]
	DecalData ConcreteDecal;//[Offset: 0x5b8, Size: 32]
	DecalData DirtDecal;//[Offset: 0x5d8, Size: 32]
	DecalData WaterDecal;//[Offset: 0x5f8, Size: 32]
	DecalData MetalDecal;//[Offset: 0x618, Size: 32]
	DecalData WoodDecal;//[Offset: 0x638, Size: 32]
	DecalData GrassDecal;//[Offset: 0x658, Size: 32]
	DecalData GlassDecal;//[Offset: 0x678, Size: 32]
	DecalData FleshDecal;//[Offset: 0x698, Size: 32]
	DecalData SteelDecal;//[Offset: 0x6b8, Size: 32]
	DecalData SandbagDecal;//[Offset: 0x6d8, Size: 32]
	DecalData SandDecal;//[Offset: 0x6f8, Size: 32]
	DecalData ClothDecal;//[Offset: 0x718, Size: 32]
	DecalData PlasticDecal;//[Offset: 0x738, Size: 32]
	DecalData LeatherDecal;//[Offset: 0x758, Size: 32]
	DecalData CeramicsDecal;//[Offset: 0x778, Size: 32]
	DecalData PaperDecal;//[Offset: 0x798, Size: 32]
	DecalData StoneDecal;//[Offset: 0x7b8, Size: 32]
	DecalData SnowDecal;//[Offset: 0x7d8, Size: 32]
	DecalData PopCanDecal;//[Offset: 0x7f8, Size: 32]
	DecalData PyreflyDecal;//[Offset: 0x818, Size: 32]
	DecalData LeafDecal;//[Offset: 0x838, Size: 32]
	DecalData CarDecal;//[Offset: 0x858, Size: 32]
	DecalData AsphaltDecal;//[Offset: 0x878, Size: 32]
	DecalData IceDecal;//[Offset: 0x898, Size: 32]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x8c0, Size: 240]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b2, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x9b8, Size: 8]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x9c0, Size: 8]
	SceneComponent* TargetImpactComp;//[Offset: 0x9e8, Size: 8]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0xa40, Size: 8]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0xa48, Size: 80]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9d, Size: 1]
	void TimerHideDecal();// 0x3159480
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x31592cc
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x31591d8
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x3159054

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2d0, Size: 8]
	int SortOrder;//[Offset: 0x2d8, Size: 4]
	float FadeScreenSize;//[Offset: 0x2dc, Size: 4]
	float FadeStartDelay;//[Offset: 0x2e0, Size: 4]
	float FadeDuration;//[Offset: 0x2e4, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	Vector DecalSize;//[Offset: 0x2ec, Size: 12]
	void SetSortOrder(int Value);// 0x5485524
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x54854a8
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x54853b0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x5485334
	float GetFadeStartDelay();// 0x5485300
	float GetFadeDuration();// 0x54852cc
	MaterialInterface* GetDecalMaterial();// 0x5485298
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x548525c

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x130, Size: 8]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x138, Size: 8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x140, Size: 8]
	int UseTss;//[Offset: 0x1a8, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x1b8, Size: 112]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x228, Size: 68]
	void OnWeaponStopFire();// 0x2f67098
	void OnWeaponStartFire();// 0x2f67084
	void OnWeaponShoot();// 0x2f67070
	void GetDataFromWeaponEntity();// 0x2f6705c
	Vector GetCurRecoilInfo();// 0x2f67024
	float GetCurDeviation();// 0x2f66ff0
	void CheckComponentTick();// 0x2f66fdc

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x130, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x140, Size: 8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x1c0, Size: 8]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	void HandleOnWeaponStopFire();// 0x2f65718
	void HandleOnWeaponStartFire();// 0x2f65704
	bool CheckCloseDSTick();// 0x2f656cc
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x2f65578

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0x130, Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0x138, Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	float DrawShootLineTime;//[Offset: 0x144, Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0x14c, Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0x150, Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0x154, Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x158, Size: 8]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0x160, Size: 8]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x168, Size: 8]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x174, Size: 4]
	delegate OnShoot;//[Offset: 0x178, Size: 16]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x188, Size: 8]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x500, Size: 16]
	void VehicleShoot();// 0x322c680
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x322c514
	void ShootDelegate__DelegateSignature();// 0x3b98fe4
	void ReInitWeaponOwnerData();// 0x322c500
	void OnWeaponClipMaxBulletChanged();// 0x322c4ec
	void OnWeaponBulletChanged();// 0x322c4d8
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x3b98fe4
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x3b98fe4
	void LocalShowDamageFloatingText(Actor* AttackWeaponOwner, Actor* VictimeActor, float Damage, byte HitBodyType, Vector ImpactPoint);// 0x322c36c
	float GetDamageAfterModify(float Damage, out const DamageEvent DamageEvent, Actor* AttackActor, Actor* VictimActor);// 0x322c210
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x322c134
	bool CheckShootState();// 0x322c0f4
	Vector CalcShootTargetLocByStartAndRot(Vector Start, Rotator ShootRot, out HitResult OutHitResult);// 0x322bfc8

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x130, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x138, Size: 16]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x148, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x160, Size: 8]
	void SetFirstAddBullet(int BulletID);// 0x307c328
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x307c1b0
	void SetBulletAttr(int ReloadBulletID);// 0x307c134
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x307bfec
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x307bef4
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x307bdb8
	bool HasMultiBullet();// 0x307bd80
	int GetShootBulletType();// 0x307bd4c
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x307bcc0
	int GetNextBulletID();// 0x307bc8c
	BackpackComponent* GetBackpackComponent();// 0x307bc58
	float GetAdjustBulletMomentum();// 0x307bc24
	float GetAdjustBulletDamage();// 0x307bbf0
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x307baac
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x307b8c4

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x130, Size: 8]
	float BulletSpeed;//[Offset: 0x138, Size: 4]
	int CurBulletNum;//[Offset: 0x13c, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x144, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x148, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x168, Size: 16]
	class CameraShake* ShootCameraShake;//[Offset: 0x178, Size: 8]
	float CameraShakeInnerRadius;//[Offset: 0x180, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x184, Size: 4]
	float CameraShakFalloff;//[Offset: 0x188, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x190, Size: 8]
	float ReloadTime;//[Offset: 0x198, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x19c, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x1a0, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x1a4, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1a8, Size: 8]
	BackpackComponent* OwnerBackPack;//[Offset: 0x1b0, Size: 8]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x3021bbc
	void SetUseGreanadeLaunch(bool bIsUse);// 0x3021b38
	void RemoveBullet(int RemoveNum);// 0x3021abc
	int ReloadGrenadeLaunch();// 0x3021a88
	void OnRep_UseGrenadeLaunchState();// 0x3021a74
	void OnRep_CurBulletNum();// 0x3021a60
	void OnRep_CanUseGrenadeLaunch();// 0x3021a4c
	void LaunchGrenadeBullet(Transform Trans, uint32 ShootID, int Pellet);// 0x3021934
	bool JudgeMustReload();// 0x30218fc
	bool IsUseGreanadeLaunch();// 0x30218c4
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x3021840
	BackpackComponent* GetBackpackComp();// 0x302180c
	void DoGrenadeLaunchStartReload();// 0x30217f8
	bool CheckCanReload();// 0x30217c0

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x130, Size: 4]
	float DownGasSpeed;//[Offset: 0x134, Size: 4]
	float CostGasOneShoot;//[Offset: 0x138, Size: 4]
	float MaxGas;//[Offset: 0x13c, Size: 4]
	float GasAddDamageRate;//[Offset: 0x140, Size: 4]
	float MaxGasAngle;//[Offset: 0x144, Size: 4]
	float PostFillGasTime;//[Offset: 0x148, Size: 4]
	float GasUpdateInterval;//[Offset: 0x14c, Size: 4]
	int CurGas;//[Offset: 0x150, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x158, Size: 8]
	void OnRep_CurGas();// 0x2fea9cc
	void CostGassByShoot();// 0x2fea9b8
	void CheckNeedRep();// 0x2fea9a4
	void AddFillGass(float AddFillGasTime);// 0x2fea928

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x538, Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x53c, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x568, Size: 16]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	float CurShootLockInterval;//[Offset: 0x580, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x3093324
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x3b98fe4
	bool CheckShootState();// 0x30932e4

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x528, Size: 16]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x198, Size: 8]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x1a0, Size: 8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x1a8, Size: 8]
	float CameraShakeInnerRadius;//[Offset: 0x1b0, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x1b4, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1b8, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x1c0, Size: 8]
	Vector LocalMuzzelFXScale;//[Offset: 0x1c8, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x1d8, Size: 8]
	Vector ScopeMuzzelFXScale;//[Offset: 0x1e0, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x1f0, Size: 8]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1f8, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x204, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x218, Size: 8]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x220, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x230, Size: 8]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x238, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x248, Size: 8]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x250, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x25c, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x270, Size: 8]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x278, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x288, Size: 8]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x290, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x2a0, Size: 8]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x2a8, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x2b4, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x2c8, Size: 8]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x2d0, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x2e0, Size: 8]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x2e8, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x2f8, Size: 8]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x300, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x310, Size: 8]
	Vector ShellDropFXScale;//[Offset: 0x318, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x328, Size: 8]
	Vector FPPShellDropFXScale;//[Offset: 0x330, Size: 12]
	float ShootLightCD;//[Offset: 0x33c, Size: 4]
	float LastShootLightTime;//[Offset: 0x340, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x348, Size: 8]
	int MaxOBBulletTrackCompNum;//[Offset: 0x350, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x358, Size: 8]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x360, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x368, Size: 8]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x370, Size: 8]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x378, Size: 16]
	Vector MuzzleFXOriginalScale;//[Offset: 0x388, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x394, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x3a8, Size: 16]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x3bc, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x3c8, Size: 8]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	void ReloadAttr(int WeaponId);// 0x31051ac
	void OnWeaponUnEquiped();// 0x3105198
	void OnWeaponEuiped();// 0x3105184
	void HandleWeaponAction(byte Action);// 0x3105100
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x31050cc
	OBEffectBullet* GetOBEffectBullet();// 0x3105098
	int GetAvailableOBEffectBulletNum();// 0x3105064
	void CheckOptimizeMuzzleFX();// 0x3105048
	void ChangeShellDropFx();// 0x3105034
	void ActiveShootLight();// 0x3105020
	void ActiveLocalShellDropFX();// 0x310500c

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x130, Size: 80]
	AkAudioEvent* ShellDropSound;//[Offset: 0x180, Size: 8]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x188, Size: 8]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x190, Size: 8]
	void HandleWeaponAction(byte Action);// 0x331b9cc

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x398, Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x3a0, Size: 16]
	ParticleSystem* CurFXTemplate;//[Offset: 0x3b8, Size: 8]
	float CurMovingTime;//[Offset: 0x3e8, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x3f0, Size: 8]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	delegate OnAttrModified;//[Offset: 0x120, Size: 16]
	uint32 AttrModifyStateList;//[Offset: 0x130, Size: 4]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x138, Size: 16]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x148, Size: 24]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x160, Size: 16]
	AttributeExpand[] AttributeExpands;//[Offset: 0x338, Size: 16]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x348, Size: 168]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x3f0, Size: 80]
	enum ActorAttrType;//[Offset: 0x440, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x550, Size: 16]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x33e0adc
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x33e09f4
	void SetAttrModifyStateValue(int Index, bool Value);// 0x33e0934
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x33e084c
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x33e072c
	void RequestAttrValue(FString AttrName);// 0x33e0650
	void RemoveDynamicModifyItemForLua(uint32 ModifyUID);// 0x33e05d4
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x33e0468
	void OnRep_ModSimulateSyncList();// 0x33e0454
	void OnRep_DynamicModifierList();// 0x33e0440
	void OnRep_DynamicModifier();// 0x33e042c
	void OnRep_AttrModifyStateList();// 0x33e0418
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x3b98fe4
	bool IsAttrModifyStateValidIndex(int Index);// 0x33e0388
	bool HasDynamicModifier(FString AttrModifyId);// 0x33e02cc
	bool GetAttrModifyStateValue(int Index);// 0x33e023c
	int GetAttrModifyStateNum();// 0x33e0220
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x33dffd4
	float GetAttributeValue(FString AttrName);// 0x33dff1c
	float GetAttributeOrignalValue(FString AttrName);// 0x33dfe64
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x33dfdd4
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x33dfc94
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x33dfc04
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x33dfac4
	void AddValueToAttribute(FString AttrName, float Value);// 0x33df9dc
	uint32 AddDynamicModifyItemForLua(FString AttrName, byte ModifyType, float Value, bool bEnable, Object* Causer);// 0x33df828
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x33df704

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x130, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x15c, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x164, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x16c, Size: 4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float MaxParachuteHeightDist;//[Offset: 0x174, Size: 4]
	float MaxParachutePlaneDist;//[Offset: 0x178, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x1d4, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x1d8, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x1dc, Size: 4]
	float ShootTimeGunPosMaxZDif;//[Offset: 0x1e0, Size: 4]
	float ShootTimeGunPosMaxForwadDif;//[Offset: 0x1e4, Size: 4]
	float ShootTimeGunPosMaxForwadDifInVehicle;//[Offset: 0x1e8, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x1ec, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x1f0, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x1f4, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x1f8, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x1fc, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x204, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x208, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x20c, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x214, Size: 4]
	float TolerateFlyTime;//[Offset: 0x218, Size: 4]
	float TolerateFlyDis;//[Offset: 0x21c, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x3314bd4

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xad, Size: 1]
	float DamageImpulse;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemID;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 12]
	HitResult HitInfo;//[Offset: 0x20, Size: 136]

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0x110, Size: 8]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x118, Size: 8]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x2f2be10

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x2fb1c1c
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x2fb1a44
	void S2A_EndEffectGraph(int UId);// 0x2fb19c0
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x2fb17b0

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x118, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0x12c, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x130, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x134, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x138, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x13c, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x140, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x144, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x148, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x14c, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x150, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x154, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x158, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x15c, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x160, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x164, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x168, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x16c, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float Opened_AcceFall;//[Offset: 0x174, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x178, Size: 4]
	float Opened_AcceForward;//[Offset: 0x17c, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x180, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x184, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x188, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x18c, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x190, Size: 4]
	float Opened_AcceRight;//[Offset: 0x194, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x198, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x19c, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x1a0, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x1a4, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1a8, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1ac, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1b0, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x1b4, Size: 12]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x1c0, Size: 12]
	Vector Launch_Accel;//[Offset: 0x1cc, Size: 12]
	float Launch_YawRandomDelta;//[Offset: 0x1d8, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x1dc, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x1e0, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x1e4, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x1e8, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x1ec, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x1f0, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x1f4, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x1f8, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x1fc, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x200, Size: 16]
	delegate OnResetLaunch;//[Offset: 0x210, Size: 16]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x220, Size: 16]
	float CurrentFallSpeed;//[Offset: 0x230, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x234, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x238, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	float FollowerDist;//[Offset: 0x260, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x264, Size: 4]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x2b0, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x2d8, Size: 8]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x2f76fac
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x2f76e38
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x2f76d0c
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x2f76b98
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x2f76aa8
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x2f769b8
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x2f7688c
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x2f76754
	void StopParachute();// 0x2f76740
	void StartParachute();// 0x2f7672c
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x2f766a8
	void ResetVelocity();// 0x2f76694
	void RemoveRadiouBlur();// 0x2f76680
	void PostNetReceiveNewState();// 0x2f7666c
	void OnPreReconnectOnServer();// 0x2f76658
	void OnAsyncLoadRadiouBlurDone();// 0x2f76644
	void InvalidateAdjustFollowerLocation();// 0x2f76630
	void InitRadiouBlurMat();// 0x2f7661c
	float GetReplicatedRightInput();// 0x2f765e8
	float GetReplicatedForwardInput();// 0x2f765b4
	Vector GetParachuteVelocity();// 0x2f7657c
	Vector GetLaunchInitVelocity();// 0x2f7653c
	void ClearParachuteStatusCache();// 0x2f76528
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x2f7641c
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x2f76318
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x2f7620c
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x2f76108
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x2f75fd0
	void AdjustFollowerLocation();// 0x2f75fbc
	void AddRadiouBlur(float InWeight);// 0x2f75f40

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0x110, Size: 4]
	float TileRemovalRadius;//[Offset: 0x114, Size: 4]

--------------------------------
Class: GroupPhysicsComponent.ActorComponent.Object
	PrimitiveComponent*[] PrimitiveComponents;//[Offset: 0x140, Size: 16]
	void ResetPhysicsGroup();// 0x30232fc
	void K2_GroupPhysics(int InMaskFilter, bool EnableCache);// 0x3023234
	int K2_GetQueryMask();// 0x3023200
	int K2_GetPhysicsGroup();// 0x30231cc
	bool IsPhysicsGrouped();// 0x30231b0
	void GroupPhysics(byte MaskFilter, bool EnableCache);// 0x30230e8
	byte GetQueryMask();// 0x30230b4
	byte GetPhysicsGroup();// 0x3023080

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x558, Size: 4]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	enum VehicleType;//[Offset: 0x55d, Size: 1]
	enum VehicleShapeType;//[Offset: 0x55e, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x560, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x578, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x590, Size: 8]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x598, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x5c0, Size: 8]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x5c8, Size: 80]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x618, Size: 80]
	Texture2D* VehicleIcon;//[Offset: 0x668, Size: 8]
	byte CameraDataType;//[Offset: 0x670, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x673, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x674, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x678, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x680, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x688, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x690, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x698, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 1]
	int MainMaterialIndex;//[Offset: 0x6a0, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x6a8, Size: 24]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x6c4, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x6d0, Size: 8]
	FName AirDropParachuteSocketName;//[Offset: 0x6d8, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 1]
	float BackpackCapacity;//[Offset: 0x6e4, Size: 4]
	FName BackpackName;//[Offset: 0x6e8, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x6f0, Size: 16]
	int[] marr_MidIndexes;//[Offset: 0x700, Size: 16]
	float EnterVehicleCameraBlendTime;//[Offset: 0x710, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x714, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x718, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x720, Size: 4]
	float voiceCheckCD;//[Offset: 0x724, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x728, Size: 4]
	float VoiceCheckDis;//[Offset: 0x72c, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x730, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x734, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	delegate OnSeatAttached;//[Offset: 0x758, Size: 16]
	delegate OnSeatDetached;//[Offset: 0x768, Size: 16]
	delegate OnSeatChange;//[Offset: 0x778, Size: 16]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	FString LuaFilePath;//[Offset: 0x790, Size: 16]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x7a4, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	ParticleSystem* ParticleExplosion;//[Offset: 0x7e8, Size: 8]
	enum VehicleHealthState;//[Offset: 0x7f0, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f2, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f3, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x7f8, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x808, Size: 8]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x810, Size: 8]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x818, Size: 8]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x820, Size: 8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x828, Size: 8]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x830, Size: 8]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x838, Size: 8]
	VehicleComponent*[] VehicleComps;//[Offset: 0x840, Size: 16]
	float EnActiveTimeThreshold;//[Offset: 0x858, Size: 4]
	float VehicleHitThreshold;//[Offset: 0x878, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x87c, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x88c, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x898, Size: 16]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x8b0, Size: 16]
	delegate OnClientExitVehicleEvent;//[Offset: 0x8c0, Size: 16]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x8d4, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x8d8, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x8dc, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x8ec, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x8f0, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x8fc, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x900, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x904, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x910, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x91c, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x920, Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x930, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x934, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x938, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x970, Size: 8]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x978, Size: 8]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x980, Size: 8]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x988, Size: 8]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x990, Size: 8]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x998, Size: 8]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x9a0, Size: 8]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x9a8, Size: 8]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x9b0, Size: 8]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x9b8, Size: 8]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x9c0, Size: 8]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x9c8, Size: 8]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x9d0, Size: 8]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x9d8, Size: 8]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x9e0, Size: 8]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x9e8, Size: 8]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x9f0, Size: 8]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0x9f8, Size: 16]
	float EngineSfxEndDelayTime;//[Offset: 0xa08, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0xa10, Size: 112]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0xa80, Size: 112]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0xaf0, Size: 112]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0xb60, Size: 112]
	AkComponent* SoundComponent;//[Offset: 0xbd0, Size: 8]
	float RPMSfxScale;//[Offset: 0xc0c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xc10, Size: 4]
	float PlayMusicChance;//[Offset: 0xc1c, Size: 4]
	int CurMusicIndex;//[Offset: 0xc20, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xc39, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc3c, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0xc50, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xc54, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xc58, Size: 8]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xca0, Size: 16]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xcb4, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc5, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xcc8, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xccc, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 1]
	float StuckMinImpulse;//[Offset: 0xcf4, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xcf8, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xcfc, Size: 4]
	float StuckResovingTime;//[Offset: 0xd00, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xd08, Size: 4]
	float StuckResovingTimer;//[Offset: 0xd0c, Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xd64, Size: 4]
	float RespawnTickInterval;//[Offset: 0xd68, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6c, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe00, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xe08, Size: 16]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xe18, Size: 16]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xe28, Size: 16]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe68, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xe88, Size: 8]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xe90, Size: 8]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xe98, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xec0, Size: 8]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xf9c, Size: 12]
	FName SeekLockSocket;//[Offset: 0xfa8, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xfb0, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xfb8, Size: 16]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xfc8, Size: 8]
	delegate OnEnterVehicle;//[Offset: 0xfd0, Size: 16]
	float OverlapCameraShakeInterval;//[Offset: 0xff0, Size: 4]
	float OverlapDamageRate;//[Offset: 0xff8, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xffc, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0x1000, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0x1004, Size: 4]
	float MinOverlapSpeed;//[Offset: 0x1008, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0x100c, Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0x1014, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0x1018, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0x1020, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0x1030, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0x1038, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0x103c, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104d, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0x1050, Size: 8]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0x1058, Size: 8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x1060, Size: 8]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0x1068, Size: 8]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x1070, Size: 16]
	bool bEnterSocketChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0x1088, Size: 16]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x1098, Size: 8]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x10a0, Size: 8]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 1]
	int nAvatarID;//[Offset: 0x10ac, Size: 4]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	int CandidateAvatarID;//[Offset: 0x10b4, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0x10c4, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	float MaxLinearVelocity;//[Offset: 0x10e0, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	int TeamID;//[Offset: 0x10e8, Size: 4]
	int CampID;//[Offset: 0x10ec, Size: 4]
	float VehicleGoStraight;//[Offset: 0x10f0, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f4, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0x10f8, Size: 8]
	float ExchangeVehicleSeatInterval;//[Offset: 0x1100, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0x1108, Size: 16]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0x1118, Size: 8]
	EffectComponent* NewEffectComponent;//[Offset: 0x1120, Size: 8]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1128, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1129, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0x112c, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x1130, Size: 8]
	enum UAVOperateState;//[Offset: 0x113c, Size: 1]
	float SingleMoveRate;//[Offset: 0x1140, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0x1148, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0x1160, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0x1178, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0x1190, Size: 16]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0x11a0, Size: 16]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0x11b8, Size: 8]
	float TombBoxTraceLength;//[Offset: 0x11c0, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0x11c4, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c9, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ca, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0x11cc, Size: 4]
	float StaticFixAngel;//[Offset: 0x11d0, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0x11d4, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0x11d8, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x11e0, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x11e4, Size: 4]
	int CannotEnterTips;//[Offset: 0x11f0, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0x11f8, Size: 16]
	Vector AttachedRelLoc;//[Offset: 0x1208, Size: 12]
	Actor* AttachedActor;//[Offset: 0x1218, Size: 8]
	int HasAttachedActorTips;//[Offset: 0x1220, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122c, Size: 1]
	void WeakTick(float DeltaTime);// 0x32492e8
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x324926c
	void TickEnableAvatarOutline();// 0x3249258
	void StartFireSimple(byte ShootMode);// 0x32491dc
	void StartAirDrop();// 0x32491c8
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x3249124
	void ShowBoostingEffect(bool bShow);// 0x3b98fe4
	bool ShouldUseSpecialHitEffect();// 0x32490e4
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x3248f38
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x3248eb4
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x3248db0
	void SetUsingHorn(bool bUse);// 0x3248d2c
	void SetUAVOperateState(enum NewState);// 0x3248cb0
	void SetSpawnedInReady(bool bFlag);// 0x3248c2c
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x3248bb4
	void ServerSetUsingHorn(bool bUse);// 0x3248af0
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x3248a2c
	void ServerSetBoosting(bool bEnalbed);// 0x3248968
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x32488ec
	void ServerSetAirControlF(float Rate);// 0x324883c
	void ServerSetAirControlB(float Rate);// 0x324878c
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x32486bc
	void SendVehicleInAirChangedTimeToServer();// 0x324865c
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x32485ac
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x32484fc
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x32484e0
	void ResetJoystickMove();// 0x32484cc
	void RequestChangeVehicleAvatar();// 0x324846c
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x3248360
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x3248218
	void RemoveAntiStuckBox();// 0x3248204
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x3248188
	void ProcessAvatarOutline();// 0x324816c
	void PrintStats();// 0x3248150
	bool PreChangeVehicleFPPAvatar();// 0x3248118
	bool PreChangeVehicleBrokenMat();// 0x32480e0
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x3248018
	void PostLoadFPPMesh();// 0x3247ffc
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x3247f80
	bool PawnHasState(enum PawnState);// 0x3247ee8
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x3247e28
	void OnUpdateEffects();// 0x3b98fe4
	void OnStopFire();// 0x3b98fe4
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x3247d74
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x3247cc0
	void OnSetTailLightValue(float LightValue);// 0x3b98fe4
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x3b98fe4
	void OnRep_VehicleSyncFlag();// 0x3247cac
	void OnRep_VehicleHealthState();// 0x3247c98
	void OnRep_TeamID();// 0x3247c7c
	void OnRep_SimulateViewData();// 0x3247c68
	void OnRep_SimulateFreeCameraViewData();// 0x3247c54
	void OnRep_ServerLastReplicatedServer();// 0x3247c40
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x3247c2c
	void OnRep_IsForbidNightVehicle();// 0x3247c18
	void OnRep_IsEngineStarted();// 0x3247c04
	void OnRep_IsBoosting();// 0x3247bf0
	void OnRep_IsAirdroppingVehicle();// 0x3247bdc
	void OnRep_FrozenStatic();// 0x3247bc8
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x3247b4c
	void OnRep_CandidateAvatar();// 0x3b98fe4
	void OnRep_CampID();// 0x3247b38
	void OnRep_AttachedRelLoc();// 0x3247b24
	void OnRep_AttachedActor();// 0x3247b10
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x3247a8c
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x3b98fe4
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x3b98fe4
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x3247950
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x32478d4
	void OnEngineStop();// 0x3b98fe4
	void OnEngineStart();// 0x3b98fe4
	void OnBoostingChanged();// 0x3b98fe4
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x32477fc
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x3247708
	void LoadFPPVehicleModel();// 0x32476f4
	bool IsVehicleWarVehicle();// 0x32476b4
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x32475e0
	bool IsUsingFPPModel();// 0x32475a8
	bool IsUCAV();// 0x3247584
	bool IsUAV();// 0x324755c
	bool IsSpawnedInReady();// 0x324753c
	bool IsNotInWater();// 0x32474fc
	bool IsMotorbike();// 0x32474c4
	bool IsInMidAir();// 0x3247484
	bool IsInBuffSpeedState();// 0x3247464
	bool IsHelicopter();// 0x324742c
	bool IsEntirelyUnderWater();// 0x32473f4
	bool IsElectronic_Failure();// 0x32473bc
	bool IsClient_WeaponOwner();// 0x324737c
	bool IsCanEnter();// 0x324733c
	bool IsArmedVehicle();// 0x3247304
	bool IsAmphibiousVehicle();// 0x32472cc
	bool IsAlive();// 0x324728c
	bool IsAirVehicle();// 0x324724c
	bool IsAI();// 0x324720c
	bool IsActiveEffect(FName EffectName);// 0x324717c
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x3247068
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x3246fdc
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x3246f14
	bool HasSkillID(int SkillID);// 0x3246e84
	bool HasBuffID(int BuffID);// 0x3246dec
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x3246d68
	void HandleOnVehicleAvatarDataCopied();// 0x3246d54
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3246c58
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x3246ae4
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x32469e8
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3246854
	void HandleMoveAntiShootVerifyMiss();// 0x3246838
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x32467b4
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x3246730
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x32466b4
	Actor* GetWeaponUserConst();// 0x3246678
	Actor* GetWeaponUser();// 0x324663c
	int GetWeaponReconnectIdx();// 0x3246600
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x32465c4
	uint32 GetWeaponOwnerPlayerKey();// 0x3246588
	float GetWeaponOwnerPawnHealth();// 0x324654c
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x3246510
	WeaponManagerComponent* GetWeaponManager();// 0x32464d4
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x32464a0
	VehicleShootWeapon* GetVehicleWeapon(int SeatId, int WeaponListID);// 0x32463dc
	VehicleSyncComponent* GetVehicleSync();// 0x32463c0
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x324638c
	int GetVehicleSkinItemID();// 0x3246358
	VehicleSeatComponent* GetVehicleSeats();// 0x324633c
	VehicleDamageComponent* GetVehicleDamage();// 0x3246320
	VehicleCommonComponent* GetVehicleCommon();// 0x3246304
	VehicleAvatarComponent* GetVehicleAvatar();// 0x32462d0
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x324629c
	bool GetUsingHorn();// 0x3246264
	int GetTeamId();// 0x3246230
	MaterialInstanceDynamic* GetTailLightDIM();// 0x32461fc
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x324612c
	Vector GetRotationInputDir();// 0x32460ec
	float GetReloadAllWeaponTime();// 0x32460b8
	SkeletalMeshComponent* GetMesh();// 0x324609c
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x3246060
	BattleItemHandleBase* GetItemHandle();// 0x3246044
	bool GetIsOpenVertify();// 0x3246024
	Vector GetGunOwnerHeadLocation();// 0x3245fe4
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x3245fb0
	float GetForwardSpeed();// 0x3245f74
	STExtraPlayerCharacter* GetFirstPassenger();// 0x3245f40
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x3245f0c
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x3245ed0
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x3245eb4
	STExtraPlayerCharacter* GetDriver();// 0x3245e80
	uint64 GetCurrentStatesInterface();// 0x3245e44
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x3245d8c
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x3245c08
	int GetCampId();// 0x3245bd4
	BuoyancyForceComponent* GetBuoyancyForce();// 0x3245bb8
	int GetAvatarID();// 0x3245b9c
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x3245ae4
	void ExitFPPVehicle();// 0x3245ad0
	void EnterFPPVehicle();// 0x3245abc
	void EnableWeakTick(bool Enabled);// 0x3245a30
	void EnablePlayMusic(bool InEnable);// 0x32459b0
	void EnableAvatarOutline(enum OutlineType);// 0x3245934
	void DestroyAndRespawnSelf();// 0x3245920
	void DeactiveEffect(FName EffectName);// 0x32458a4
	void CreateAntiStuckBox();// 0x3245890
	void ClientPlayVehicleCameraShake();// 0x3245830
	void ClientFeedbackPointDamage(Actor* DamageCauser);// 0x3245780
	void ClearInputs();// 0x324576c
	void ClearBuff();// 0x3245750
	bool CheckHaveSpecialAttachActor();// 0x3245710
	void CheckEnableAvatarOutline();// 0x3b98fe4
	void CheckAvatarModifyEnterSocket(STExtraBaseCharacter* InCharacter, bool UseInCharacter, int InAvatarID);// 0x324560c
	bool CheckAllWeaponIsReadyForFire();// 0x32455d4
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x3245550
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x32454d4
	bool CanVehicleJump();// 0x324549c
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x3245404
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x324533c
	void BroadcastClientVehicleExplosionEffect();// 0x3245320
	void BPPostLoadFPPMesh();// 0x3b98fe4
	void BPPlayOverlapDamageCameraShake();// 0x3b98fe4
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x324529c
	void AutoLoadEffect();// 0x3245288
	bool ApplyAnimation();// 0x3245250
	void AfterBeginPlay();// 0x3b98fe4
	void AddHealthSafety(float AddVal);// 0x32451cc
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x32450c0
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x3244f78
	void ActiveEffectAsync(FName EffectName);// 0x3244efc
	void ActiveEffect(FName EffectName);// 0x3244e80

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	STExtraVehicleSeat[] Seats;//[Offset: 0x110, Size: 16]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x120, Size: 16]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x130, Size: 16]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x140, Size: 16]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x150, Size: 16]
	delegate OnSeatOccupiersChanged;//[Offset: 0x160, Size: 16]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x170, Size: 16]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x180, Size: 16]
	float LeaveVehicleVelocityScale;//[Offset: 0x190, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x1a0, Size: 16]
	delegate OnSeatAttached;//[Offset: 0x1b0, Size: 16]
	delegate OnSeatDetached;//[Offset: 0x1c0, Size: 16]
	delegate OnSeatChanged;//[Offset: 0x1d0, Size: 16]
	delegate OnUpdateSeatGUI;//[Offset: 0x1e0, Size: 16]
	FString LatestDriverPlayerName;//[Offset: 0x1f0, Size: 16]
	delegate OnDriverChange;//[Offset: 0x200, Size: 16]
	FString LatestDriverPlayerUID;//[Offset: 0x210, Size: 16]
	int MaxInUseSeatGUIIndex;//[Offset: 0x224, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x230, Size: 8]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x240, Size: 8]
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x3b98fe4
	void ReAttachCharacterOnSeat(STExtraBaseCharacter* InCharacter);// 0x32ee6b0
	void ReAttachAllCharacters();// 0x32ee69c
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x32ee5e8
	void OnRep_VehicleWeapons();// 0x32ee5d4
	void OnRep_Occupiers();// 0x32ee5c0
	void OnRep_Attachments();// 0x32ee5ac
	bool IsSeatIndexAvailable(int SeatIndex);// 0x32ee51c
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x32ee48c
	bool IsSeatAvailable(enum SeatType);// 0x32ee3fc
	int GetSeatNum();// 0x32ee3e0
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x32ee22c
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x32ee1a0
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x32ee114
	STExtraPlayerCharacter* GetFirstPassenger();// 0x32ee0e0
	STExtraPlayerCharacter* GetDriver();// 0x32ee0ac
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x32ee020
	int GetAvailableSeatIndex(enum SeatType);// 0x32edf94
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x32edeac
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x32eddec
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x32edcc4
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x32edc0c

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x2c38, Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2c60, Size: 16]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x2c70, Size: 16]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2c80, Size: 16]
	delegate OnPlayerInteractiveStateChange;//[Offset: 0x2c90, Size: 16]
	delegate OnScopeOutDelegate;//[Offset: 0x2ca0, Size: 16]
	delegate OnScopeInDelegate;//[Offset: 0x2cb0, Size: 16]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2cc0, Size: 16]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2cd0, Size: 16]
	delegate OnParachuteStateChanged;//[Offset: 0x2ce0, Size: 16]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x2cf0, Size: 8]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x2cf8, Size: 8]
	BoxComponent* BoxEar;//[Offset: 0x2d00, Size: 8]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2d08, Size: 8]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x2d10, Size: 8]
	float IndoorCheckDistance;//[Offset: 0x2d18, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2d1c, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x2d20, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x2d24, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d28, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x2d2c, Size: 4]
	float fTickDuration;//[Offset: 0x2d30, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x2d38, Size: 24]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d50, Size: 1]
	enum ParachuteState;//[Offset: 0x2d60, Size: 1]
	enum LastParachuteState;//[Offset: 0x2d62, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2d64, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d68, Size: 1]
	float SwimZDir;//[Offset: 0x2d6c, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d70, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d71, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x2d74, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x2d78, Size: 8]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x2d80, Size: 8]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x2d88, Size: 8]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x2d90, Size: 8]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2d98, Size: 8]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2da0, Size: 8]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2da8, Size: 8]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x2db0, Size: 8]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2db8, Size: 8]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2dc0, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x2e10, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x2e60, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x2eb0, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x2f18, Size: 8]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f20, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f21, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x2f24, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x2f28, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2c, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x2f40, Size: 8]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x2fa0, Size: 8]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb3, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb4, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x2fb8, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fbc, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x2fbd, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x2fc0, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x2fc4, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x2fc8, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x2fd0, Size: 80]
	FName FeatureActorName;//[Offset: 0x3088, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3090, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3091, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3092, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x3094, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x30a0, Size: 8]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x30b0, Size: 16]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c0, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c1, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x30c2, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x30c4, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x30d0, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x30d4, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d8, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d9, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x30dc, Size: 4]
	bool bRecommendSignalRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e9, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f0, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x30f8, Size: 16]
	int CurrentActivityID;//[Offset: 0x3108, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x310c, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x3110, Size: 8]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3118, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x3120, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x3130, Size: 16]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x31dea58
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x31de988
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x31de90c
	void UpdateIndoorState(bool IsInDoor);// 0x31de848
	void UpdateEnableGoldenSuitCheck();// 0x31de82c
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x31de768
	void TriggerZombieBornSkills();// 0x31de754
	void TouchCancelSkillLock();// 0x31de740
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x31de690
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x31de60c
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x31de508
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x31de440
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x31de380
	void SwitchCameraToParachuteOpening();// 0x31de364
	void SwitchCameraToParachuteFalling();// 0x31de348
	void SwitchCameraToNormal();// 0x31de32c
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x31de2b0
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x3b98fe4
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x31de29c
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x3b98fe4
	void StopCamShake();// 0x31de280
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x31de204
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x31de188
	void StartCamShake();// 0x31de16c
	void ShowNightVisionFrame();// 0x31de150
	void ShowConfirmDialogOfMisKill();// 0x31de134
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x31de0a4
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x31de000
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x31ddf84
	void SetSpecifiedItemConsumed(int ItemID);// 0x3b98fe4
	void SetSelfAndVehicleShadow(bool IsShow);// 0x31ddf00
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x31dde48
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x31ddd44
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x31ddc88
	void SetParachuteState(enum State);// 0x31ddc04
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x31ddb4c
	void SetFPPDeafultFov(float InFov);// 0x31ddad0
	void SetBodyIndoor(bool IsInDoor);// 0x31dda4c
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x31dd960
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x31dd834
	void ServerOnApplicationactivated(bool bActive);// 0x31dd770
	void RPC_Server_OnMiniGameEnd(int Score, int Duration, ActivityActorBase* ActiveActor);// 0x31dd648
	void RPC_Server_CheckActivityOverlap(ActivityActorBase* ActiveActor, bool IsBeginOverlap);// 0x31dd544
	void RPC_Client_NotifyActivityOverlap(ActivityActorBase* ActiveActorn, bool IsBeginOverlap);// 0x31dd440
	void RPC_Client_CheckedActivityOverlap(ActivityActorBase* ActiveActorn, bool IsOverlaped, bool IsBegin);// 0x31dd2f0
	void ResetCharacter();// 0x31dd2d4
	void RequestLoadParachuteAnim();// 0x31dd2b8
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x31dd1f4
	void RemoveParachuteAnim();// 0x31dd1e0
	void ReleaseTrigger(enum Hand);// 0x31dd15c
	void PushTrigger(enum Hand);// 0x31dd0d8
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x31dcf9c
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x3b98fe4
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x3b98fe4
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x3b98fe4
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x3b98fe4
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x3b98fe4
	void OnRep_STPlayerController();// 0x31dcf88
	void OnRep_ParachuteState(enum State);// 0x31dcf04
	void OnRep_InjuryFreeData();// 0x31dcef0
	void OnRep_CurrentActivityID();// 0x31dcedc
	void OnRep_AngleSightStateChanged();// 0x31dcec8
	void OnRep_ActivityAnimationRepData();// 0x31dceb4
	void OnRank(int Kills, int Rank);// 0x31dce00
	void OnPlayerInteractiveStateChange__DelegateSignature(STExtraBaseCharacter* BaseCharacter, ActivityActorBase* ActivityActor, enum Status);// 0x3b98fe4
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x31dcd84
	void OnPlayerControllerStateChanged(enum TargetStateType);// 0x31dcd00
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x3b98fe4
	void OnMiniTreeTriggerServerLogicCPP();// 0x31dcce4
	void OnLockUpdateAroundPickupEnd();// 0x31dccd0
	void OnLoadParachuteAnimCompleted();// 0x31dccbc
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x3b98fe4
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x3b98fe4
	void OnBPStateCheckIn();// 0x3b98fe4
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x31dcbb8
	void OnAllAvatarEquippedSucc();// 0x31dcba4
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x31dcb18
	void MiniTreeTriggerServerLogic();// 0x31dcab8
	bool IsSwitchCoolingDownFinish();// 0x31dca94
	bool IsSpecifiedItemInCD(int ItemID);// 0x31dc9fc
	bool IsInLaunchSeat();// 0x31dc9bc
	bool IsGrenadeEmpty();// 0x31dc984
	bool IsBodyIndoorFuc();// 0x31dc964
	bool IsBodyIndoorCheck();// 0x31dc92c
	bool IsAllowSyncControllerRotationInActived();// 0x31dc8f4
	bool IsAllowPickupActor();// 0x31dc8bc
	void InitAirAttackLocatorComponent();// 0x31dc8a8
	void HideNightVisionFrame();// 0x31dc88c
	bool HasParachuteAnimLoaded();// 0x31dc854
	void HandleParachuteStateChanged(enum NewState);// 0x31dc7d0
	void HandleParachuteAnimChanged(enum TargetStateType, bool bIsReconnecting);// 0x31dc710
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x31dc5ac
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x31dc448
	SpringArmComponent* GetThirdPersonSpringArm();// 0x3b98fe4
	CameraComponent* GetThirdPersonCamera();// 0x3b98fe4
	float GetSwimRotateX_Ex();// 0x31dc414
	int GetSkillIndexByActivityID();// 0x3b98fe4
	SpringArmComponent* GetScopeSpringArm();// 0x3b98fe4
	CameraComponent* GetScopeCamera();// 0x3b98fe4
	bool GetPlayerVisibile();// 0x31dc3dc
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x31dc350
	STExtraPlayerController* GetPlayerControllerSafety();// 0x31dc314
	void GetOnVehicleDelegate__DelegateSignature();// 0x3b98fe4
	SceneComponent* GetMoveableComp();// 0x31dc2e0
	bool GetIsInDoor();// 0x31dc2a0
	bool GetIsGunADS();// 0x31dc260
	float GetInjuryFreeRate(int BodyPart);// 0x31dc1cc
	SpringArmComponent* GetFPPSpringArm();// 0x3b98fe4
	float GetFPPDeafultFov();// 0x31dc198
	CameraComponent* GetFPPCamera();// 0x3b98fe4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x3b98fe4
	CameraComponent* GetFirstPersonCamera();// 0x3b98fe4
	enum[] GetDisallowedStates(int ActivityID);// 0x3b98fe4
	Vector GetBonePos(FName BoneName);// 0x31dc108
	void FreeFallShakeCam();// 0x31dc0f4
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x31dc078
	void EnablePet(bool Enable);// 0x31dbfec
	void DynamicCreateComponents();// 0x31dbfd8
	void DumpCharacterAnimBPVars();// 0x31dbfc4
	void DelayRemoveParachuteAnim();// 0x31dbfb0
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x31dbebc
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x31dbe38
	void ClearHPUI();// 0x31dbe1c
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x31dbd8c
	void CallRefreshBPStateCheckIn();// 0x31dbd78
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x31dbc3c
	void AnimInstanceCacheParachuteAnimVars();// 0x31dbc28
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x31dbb90

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x130, Size: 24]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0x148, Size: 24]
	Vector2D AimTargetScreenPos;//[Offset: 0x160, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x170, Size: 8]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x178, Size: 8]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x190, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x194, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x198, Size: 4]
	FName[] Bones;//[Offset: 0x1b8, Size: 16]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x1d0, Size: 8]
	void OnUnEquipWeapon();// 0x3315810
	void OnShoot(STExtraWeapon* Weapon);// 0x3315794
	void OnEquipWeapon();// 0x3315780
	bool IsCurrentWeaponSupportAutoAim();// 0x3315748
	void Init(Controller* Controller);// 0x33156cc
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x33155f8
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x33154ec
	bool CheckBuffStun();// 0x33154b4
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x33153e0

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0x110, Size: 8]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x118, Size: 16]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x128, Size: 8]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x130, Size: 16]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x140, Size: 16]
	FName ScreenPlane;//[Offset: 0x150, Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x158, Size: 16]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x168, Size: 16]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x178, Size: 8]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x190, Size: 16]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x325a718
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x325a670
	void StopScreenParticleEffect(byte EffectType);// 0x325a5f4
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x325a504
	void StopAllScreenParticleEffect();// 0x325a4f0
	void StopAllScreenAppearance();// 0x325a4dc
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x325a3bc
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x325a304
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x325a1cc
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x325a0ac
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x3259fdc
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x3259f58
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x3259e70
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x3259db8
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x3259c7c
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x3259ad4
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x32598f0
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x3259704
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x3259688
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x32595cc
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x3259498
	void HandleEffectLoadFinish(byte EffectType);// 0x325941c
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x32592d4

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x7d0, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x800, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x830, Size: 48]
	void SetActivate(bool _IsActivate);// 0x308e124

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x8e8, Size: 16]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x2f8dffc

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0x110, Size: 4]
	float AALOpenSensibility;//[Offset: 0x114, Size: 4]
	float OpenAALFOV;//[Offset: 0x118, Size: 4]
	int MaxDist;//[Offset: 0x11c, Size: 4]
	int minDist;//[Offset: 0x120, Size: 4]
	int DangerDist;//[Offset: 0x124, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0x128, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x150, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x178, Size: 8]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x180, Size: 8]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x188, Size: 8]
	float FixArrowScaleDistance;//[Offset: 0x194, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x198, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x19c, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x1a0, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x1a4, Size: 4]
	float ShortDis;//[Offset: 0x1a8, Size: 4]
	byte ChannelType;//[Offset: 0x1ac, Size: 1]
	Vector TargetLocation;//[Offset: 0x1b0, Size: 12]
	void SetItemExsist(bool bExsist);// 0x2ec5500
	void SetFinalLocation();// 0x2ec54ec
	void SetAALFov(bool bOpen);// 0x2ec5468
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x2ec5370
	void OnFreeArrowLoadFinsh();// 0x2ec535c
	void OnCalledActorLoadFinsh(Vector Location);// 0x2ec52e0
	float GetTargetDistance();// 0x2ec52ac
	bool GetAALAvaliable();// 0x2ec5274

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x3f8, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x3fc, Size: 4]
	int SkillID;//[Offset: 0x400, Size: 4]
	int IconID;//[Offset: 0x404, Size: 4]
	float AttackAreaRadius;//[Offset: 0x408, Size: 4]

--------------------------------
Class: ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	Character* ClientMainCharacter;//[Offset: 0x4c0, Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x4c8, Size: 8]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	bool bClientActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d2, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d3, Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 1]
	MeshComponent* Mesh;//[Offset: 0x4d8, Size: 8]
	ShapeComponent* ShapeCollision;//[Offset: 0x4e0, Size: 8]
	delegate OnActorReset;//[Offset: 0x4e8, Size: 16]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	bool bUseDSOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 1]
	bool bEanbleSimulatedInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fa, Size: 1]
	FString actorName;//[Offset: 0x500, Size: 16]
	FString ActivityName;//[Offset: 0x510, Size: 16]
	int SkillIndex;//[Offset: 0x520, Size: 4]
	enum SkillEntry;//[Offset: 0x524, Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x528, Size: 40]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	int ButtonShowTextID;//[Offset: 0x554, Size: 4]
	FString ButtonShowAdditionalTextString;//[Offset: 0x558, Size: 16]
	Object* ButtonShowPic;//[Offset: 0x568, Size: 40]
	int ButtonShowConsumeItemID;//[Offset: 0x590, Size: 4]
	int CancleButtonShowTextID;//[Offset: 0x594, Size: 4]
	Object* CancleButtonShowPic;//[Offset: 0x598, Size: 40]
	enum[] SpecialInteractivePawnState;//[Offset: 0x5c0, Size: 16]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	bool bEnablePickupInActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	bool bEnableSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 1]
	bool bButtonShowCheckObstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d3, Size: 1]
	float CoolDownTime;//[Offset: 0x5d4, Size: 4]
	int ConsumeItemType;//[Offset: 0x5d8, Size: 4]
	int ConsumeItemID;//[Offset: 0x5dc, Size: 4]
	int ConsumeItemNum;//[Offset: 0x5e0, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x5e8, Size: 4]
	int NetRegionSize;//[Offset: 0x5ec, Size: 4]
	bool bUseDefautInteractiveBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	int CodeKey;//[Offset: 0x5f4, Size: 4]
	delegate OnOccupyDelegate;//[Offset: 0x610, Size: 16]
	delegate OnCoolDownDelegate;//[Offset: 0x620, Size: 16]
	delegate OnUpdateButton;//[Offset: 0x630, Size: 16]
	delegate OnActivityEnableUpdated;//[Offset: 0x640, Size: 16]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x2eb10d8
	void TriggerSkillEvent(Character* Character);// 0x2eb1054
	void StartOccupied();// 0x2eb1040
	void StartCoolDown();// 0x2eb102c
	void SetEnable(bool bIsEnable);// 0x2eb0fa8
	void OnRep_bIsOccupied();// 0x2eb0f94
	void OnRep_bIsCoolingDown();// 0x2eb0f80
	void OnRep_bActivityEnable();// 0x2eb0f6c
	void OnRep_bActived();// 0x2eb0f58
	void OnOccupyFinished();// 0x2eb0f44
	void OnNotifyActivityOverlap(Character* Character, bool IsBegin);// 0x2eb0e84
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x2eb0d88
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2eb0c54
	void OnCoolDownFinished();// 0x2eb0c40
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2eb0a60
	void NotifyActivityOverlap(Character* Character, bool IsBegin);// 0x2eb09a0
	bool LocalStartActive(Character* Character);// 0x2eb0908
	void LocalReset(Character* Character);// 0x2eb0884
	bool LocalInterruptActive(Character* Character);// 0x2eb07ec
	bool LocalActiveFinished(Character* Character);// 0x2eb0754
	bool IsOccupied();// 0x2eb071c
	bool IsCoolingDown();// 0x2eb06e4
	bool IsConsumeItemEnough();// 0x2eb06ac
	bool IsCharaterInActived(Character* InCharacter);// 0x2eb0614
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x2eb04f0
	void GetRegionID(out RegionID OutRegionID);// 0x2eb0450
	bool GetRegionBasedNetConsideration();// 0x2eb0410
	MeshComponent* GetMesh();// 0x2eb03f4
	Character* GetMainCharacter();// 0x2eb03c0
	byte GetIsWeakNetUpdate();// 0x2eb0384
	int GetConsumeItemNum();// 0x2eb0350
	int GetConsumeItemID();// 0x2eb031c
	int GetConsumeItemCurCount();// 0x2eb02e8
	Character* GetActivedCharacter();// 0x2eb02b0
	void ForceNetConsider();// 0x2eb0294
	bool ClientClickCancleButton(Character* Character, out int OutReason);// 0x2eb01b8
	bool ClientClickButton(Character* Character, out int OutReason);// 0x2eb00d4
	void CheckedActivityOverlap(Character* Character, bool IsServerOverlaped, bool IsBegin);// 0x2eaffc0
	void CheckActivityOverlap(Character* Character, bool IsBegin);// 0x2eaff00
	void BPUpdateInteractiveUI(Character* Character);// 0x2eafe7c
	void BPUpdateButtonInfo();// 0x3b98fe4
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x2eafd5c
	bool BPShowButton(Character* Character, bool bShow);// 0x2eafc80
	void BPReset(Character* Character);// 0x2eafbfc
	void BPOnCharacterAttached(Character* InCharacter);// 0x2eafb78
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x2eafa58
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x2eaf96c
	bool BPClientClickCancleButton(Character* Character, int Reason);// 0x3b98fe4
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x3b98fe4
	bool BPClickButton(Character* Character, int Reason);// 0x2eaf898
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x2eaf7b4
	bool BPAllowInteractive(Character* Character);// 0x2eaf71c
	bool BPAllowClickButton(Character* Character);// 0x2eaf684
	void BPActiveStateChange();// 0x3b98fe4
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x2eaf564
	bool AllowShowButton(Character* Character, out int Reason);// 0x2eaf480
	bool AllowInteractive(Character* Character, out int Reason);// 0x2eaf39c
	bool AllowClickButton(Character* Character, out int Reason);// 0x2eaf2b8

--------------------------------
Class: CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	int[] CustomIntValueArray;//[Offset: 0x4a8, Size: 16]
	bool SetCustomIntValue(int Index, int Value);// 0x2f8cddc
	int GetCustomIntValue(int Index);// 0x2f8cd50

--------------------------------
Class: DecoratorActor.LuaActor.Actor.Object
	int resID;//[Offset: 0x478, Size: 4]
	int TlogID;//[Offset: 0x47c, Size: 4]
	int Health;//[Offset: 0x480, Size: 4]
	int TeamID;//[Offset: 0x484, Size: 4]
	int IconID;//[Offset: 0x488, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool bDisableCollisionOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	delegate OnHealthChangeNotify;//[Offset: 0x490, Size: 16]
	bool bShowBulletImpactEffectInOnlyAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a2, Size: 1]
	void ShowIconInPlayerMap(uint32 PlayerKey);// 0x2fa07c4
	void ShowIconInMap();// 0x2fa07b0
	bool ShouldTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2fa0648
	void SetHealth(int ToHealth);// 0x2fa05d0
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x2fa04d8
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x2fa03b8
	void OnRep_Health();// 0x2fa03a4
	void OnDie();// 0x2fa0388
	void OnBPRespawned();// 0x2fa036c
	bool IsDead();// 0x2fa0348
	void HideIconInMap();// 0x2fa0334
	int GetHitBodyType(FString HitPart);// 0x2fa01e8
	int GetActorResId();// 0x2fa01cc
	void EatEffectMulticast(FString DriverKey);// 0x2fa011c
	void Client_OnEatEffect(FString DriverKey);// 0x3b98fe4

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x3f0, Size: 80]
	FString LuaFilePath;//[Offset: 0x440, Size: 16]
	void UnRegistLuaTick();// 0x61678a0
	void RegistLuaTick(float TickInterval);// 0x6167824

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x418, Size: 16]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x428, Size: 16]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x438, Size: 16]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x44c, Size: 12]
	float CurrentScale;//[Offset: 0x458, Size: 4]
	int CurActTime;//[Offset: 0x45c, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x460, Size: 16]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	FName SocketBaseTags;//[Offset: 0x478, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x480, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x484, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x488, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x48c, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x490, Size: 16]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x4a0, Size: 16]
	int AttachedNumber;//[Offset: 0x4b4, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x4b8, Size: 80]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x508, Size: 16]
	Vector[] DropOffLocations;//[Offset: 0x528, Size: 16]
	enum DropOffLocationType;//[Offset: 0x538, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x53c, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x540, Size: 16]
	byte IsDayTime;//[Offset: 0x550, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x558, Size: 16]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x569, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x570, Size: 16]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool UseDropFixedPosition();// 0x330fda4
	void StopDancing_Multicast(const Actor*[] Players);// 0x330fcc8
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x330fba8
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x330faf8
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x330fa08
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x330f98c
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x3b98fe4
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x330f8d4
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x330f834
	void OnStopDancing(out const Actor*[] Players);// 0x330f774
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x330f674
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x330f5f0
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x3b98fe4
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x3b98fe4
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x330f558
	void OnRep_SkeletalAnimationSyncData();// 0x330f544
	void OnRep_ShowRabbitAnim();// 0x330f528
	void OnRep_PawnDoneList();// 0x330f50c
	void OnRep_IsDayTime();// 0x330f4f0
	void OnRep_CurrentScaleCPP();// 0x330f4dc
	void OnRep_CurrentScaleBP();// 0x3b98fe4
	void OnRep_CurrentInteractingPlayerCount();// 0x330f478
	void OnRep_CurActTimeCPP();// 0x330f414
	void OnRep_CurActTimeBP();// 0x3b98fe4
	void OnRep_AttachedNumber();// 0x330f3b0
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x330f268
	void OnPlayerNumberChanged(int Number);// 0x3b98fe4
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x3b98fe4
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x3b98fe4
	void OnPCCDCleared(PlayerController* PlayerController);// 0x3b98fe4
	void OnClientCurrentInteractingPlayerCountChanged();// 0x3b98fe4
	bool IsDropFixedRelativePositionSetUp();// 0x330f228
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x330f198
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x330f100
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x330efa0
	bool CanTriggertEvent(Pawn* CurPawn);// 0x3b98fe4
	int CacheAssociatedSkillIndex();// 0x3b98fe4

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	enum RegionSize;//[Offset: 0x3a1, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x460, Size: 16]
	FName TombName;//[Offset: 0x470, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x480, Size: 8]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x488, Size: 8]
	ItemDefineID KillByItemDefineID;//[Offset: 0x490, Size: 24]
	int DeadTime;//[Offset: 0x4a8, Size: 4]
	int BoxLifeSpan;//[Offset: 0x4ac, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x4b4, Size: 12]
	byte AttackRules;//[Offset: 0x4c0, Size: 1]
	Actor* AttachedActor;//[Offset: 0x4c8, Size: 8]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	enum BoxType;//[Offset: 0x4d1, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x4d8, Size: 16]
	uint32 OwnerUniqueID;//[Offset: 0x4e8, Size: 4]
	int TargetPlayerKey;//[Offset: 0x4ec, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x4f4, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 1]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x4fc, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x504, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x510, Size: 8]
	void SwitchToDeadTombBox();// 0x30bf9a4
	void SetVisible(bool IsVisible);// 0x30bf924
	void RegisterToPlayerPickUpList();// 0x30bf910
	void OnRep_VisibilityChange();// 0x30bf8fc
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x30bf8e8
	void OnRep_BoxLifeSpan();// 0x30bf8d4
	void OnRep_AttachmentReplication();// 0x30bf8b8
	void OnRep_AttachedActor();// 0x30bf8a4
	void OnRefreshItemEffect();// 0x30bf890
	void HideDeadTombApparence();// 0x30bf874
	int GetUniqueInstanceID();// 0x30bf840
	int GetTombboxLifespan();// 0x30bf80c
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x30bf7f0
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x30bf74c
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x30bf714
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x30bf608
	void GeneratePlayerBackpackWrappers();// 0x30bf5f4
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x30bf47c
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x30bf384
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x30bf294
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x30bf14c

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x7a0, Size: 16]
	enum BoxType;//[Offset: 0x7c0, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x30a9028
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x30a8f60
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x3b98fe4
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x3b98fe4
	void OnRep_PickUpDataList();// 0x30a8f4c
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x3b98fe4
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x3b98fe4
	PickUpItemData[] GetDataList();// 0x30a8ee0
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x30a8dac

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x498, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x4a0, Size: 24]
	int Count;//[Offset: 0x4b8, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x4c0, Size: 16]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	FName OwnerName;//[Offset: 0x4d8, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x4e0, Size: 4]
	float OwnerTime;//[Offset: 0x4e4, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x4ec, Size: 12]
	Actor* AttachedActor;//[Offset: 0x4f8, Size: 8]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x500, Size: 16]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x514, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x518, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x540, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x548, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x550, Size: 8]
	FString ItemValue;//[Offset: 0x558, Size: 16]
	FString ItemCategory;//[Offset: 0x568, Size: 16]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x580, Size: 16]
	StaticMeshComponent* PickupMesh;//[Offset: 0x598, Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x5a0, Size: 8]
	int ObjectPoolSize;//[Offset: 0x5a8, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x5b0, Size: 4]
	FString EffectPath;//[Offset: 0x5b8, Size: 16]
	FString DurationTime;//[Offset: 0x5c8, Size: 16]
	int ItemID;//[Offset: 0x5d8, Size: 4]
	Color DefaultColor;//[Offset: 0x5dc, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x5f0, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x670, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x6f0, Size: 8]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x740, Size: 8]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x750, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x768, Size: 8]
	int SpotDataIndex;//[Offset: 0x774, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	int DropGroupID;//[Offset: 0x78c, Size: 4]
	Vector DropStartLocation;//[Offset: 0x790, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x30ad390
	FString ToDetailString();// 0x30ad2e4
	void ShowMesh(bool bShow);// 0x30ad260
	void ShowActor();// 0x30ad24c
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x30ad104
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x30ad074
	void SetDefineID(out const ItemDefineID DID);// 0x30acfe4
	void SetCountOnServerAfterSpawn(int _Count);// 0x30acf68
	void SetActorToGround(Actor* IgnoreActor);// 0x30aceb8
	void ServerResetShowActor();// 0x30acea4
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x30acd68
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x30accb8
	void RegisterToCurveAnimComponent();// 0x30acca4
	void PickUpWrapperShow__DelegateSignature();// 0x3b98fe4
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x3b98fe4
	void OnWrapperPickedDelegate__DelegateSignature();// 0x3b98fe4
	void OnRespawnedEvent();// 0x30acc88
	void OnRep_PickUpColdCountDown();// 0x30acc74
	void OnRep_DropGroundEffectInfo();// 0x30acc60
	void OnRep_AttachmentReplication();// 0x30acc44
	void OnRep_AttachedActor();// 0x30acc30
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x30acaa4
	void OnHideActor(bool bHide);// 0x30aca18
	void OnActorDestroyed();// 0x30ac9fc
	void ModifyData(int _Count);// 0x30ac980
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x30ac904
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x30ac83c
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x30ac750
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x30ac464
	bool HasWrapperContainsAttachment(int AttachmentID);// 0x30ac3cc
	StaticMeshComponent* GetPickupMesh();// 0x30ac398
	int GetNetGUIDOffsetValue();// 0x30ac364
	bool GetHasBeenPickedUp();// 0x30ac324
	PickUpItemData[] GetDataList();// 0x30ac2b8
	void ForceNetUpdate();// 0x30ac29c
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x30ac168
	void ColdTimeCountDown();// 0x30ac154
	void ClientResetShowActor();// 0x30ac140
	bool CheckPickUpDataIsWeapon();// 0x30ac108
	void BroadcastResetShowActor();// 0x30ac0a8
	void BroadcastDataToAllClients(int Count_New);// 0x30abff8
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x30abf74
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x30abda0

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x460, Size: 4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2e0, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	byte SpotGroupType;//[Offset: 0x2e6, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x2e8, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2f0, Size: 8]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2f8, Size: 16]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x308, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0x310, Size: 80]
	Actor*[] CacheItems;//[Offset: 0x360, Size: 16]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x3784f80
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x3784ed4
	bool GenerateSpot();// 0x3784e94
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x3784d90
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x3784b80
	int CountCacheItemValeCategory();// 0x3784b4c
	void ClearCacheItems();// 0x3784b38

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2c9, Size: 1]
	int WorldCompositionID;//[Offset: 0x2cc, Size: 4]
	float HalfHeight;//[Offset: 0x2d0, Size: 4]
	int SpotProbability;//[Offset: 0x2d4, Size: 4]
	float LineOffsetZ;//[Offset: 0x2d8, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 1]
	void SetSpotValid(bool Valid);// 0x37978d4
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x3797644
	bool IsSpotValid();// 0x3797604
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3797478
	bool GenerateSpot();// 0x3797438
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x37972c8

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x208, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x214, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x218, Size: 272]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x328, Size: 80]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x378, Size: 16]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	FString[] AreaIDList;//[Offset: 0x390, Size: 16]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x3a0, Size: 16]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x3b0, Size: 16]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x3c0, Size: 16]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x3d0, Size: 80]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x420, Size: 40]
	CurveFloat* SpotRateCurve;//[Offset: 0x448, Size: 8]
	CurveFloat* ItemRateCurve;//[Offset: 0x450, Size: 8]
	<FString,float> CategoryRates;//[Offset: 0x458, Size: 80]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x4a8, Size: 80]
	Actor*[] BornIslandItems;//[Offset: 0x4f8, Size: 16]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x508, Size: 16]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x520, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x528, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x588, Size: 16]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x5a8, Size: 16]
	FString CookedBandFilePath;//[Offset: 0x608, Size: 16]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x670, Size: 16]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x680, Size: 80]
	void WriteItemSpotStatisticsDatas();// 0x3783090
	void WriteItemClassStatisticsDatas_V15();// 0x378307c
	void WriteItemClassStatisticsDatas();// 0x3783068
	void WriteGroupStatisticsDatas();// 0x3783054
	void WriteBuildingStatisticsDatas();// 0x3783040
	void WriteAreaItemStatisticsDatas();// 0x378302c
	void WriteAllStatisticsDatasToLog();// 0x3783010
	void WriteAllStatisticsDatas();// 0x3782ff4
	void SetCatetoryRate(<FString,float> Rates);// 0x3782e9c
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x3782dd4
	void RegisterBornIslandItem(Actor* Item);// 0x3782d50
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x3782bc0
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x37829b0
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x37828a0
	void RandomGroups();// 0x3782884
	void RandomBornIslandGroups();// 0x3782868
	void LoadItemGenerateTable();// 0x378284c
	bool IsCatetoryEnabled();// 0x3782814
	void InitCatetorys();// 0x3782800
	void InitCategoryEx();// 0x37827ec
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x37826a0
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x3782408
	int GetItemDefineID(class Object PickUpClass);// 0x3b98fe4
	float GetCatetoryRate(FString Catetory);// 0x3782350
	void GenerateSpotOnTick(float DeltaTime);// 0x37822cc
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x3782200
	void DeleteValidGroups();// 0x37821ec
	void DeleteBornIslandItems();// 0x37821d8
	bool CheckShouldGenerateItem(int ItemID);// 0x3782140
	void CheckRecoverItems();// 0x378212c
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x3782018

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x114, Size: 4]
	FString ItemTableName;//[Offset: 0x118, Size: 16]
	UAEDataTable* ItemTable;//[Offset: 0x128, Size: 8]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x138, Size: 80]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x188, Size: 16]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x198, Size: 80]
	FString CookedFilePath;//[Offset: 0x1e8, Size: 16]
	FString[] CookedFileAddPathArray;//[Offset: 0x1f8, Size: 16]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x375c0f8
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x375c074
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x375bff0
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x375be64
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x375bda8
	void GenerateSpots();// 0x375bd8c
	void GenerateSpotOnTick(float DeltaTime);// 0x375bd08
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x375bad4
	void CheckTileLevelsVisible();// 0x375bac0

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0xa8, Size: 80]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2c9, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]
	int WorldCompositionID;//[Offset: 0x2cc, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x2d0, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x2d4, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 1]
	void SetGroupValid(bool Valid);// 0x377f1d8
	bool IsValidGroup();// 0x377f198
	int FindWorldCompositionID();// 0x377f164
	void DoPickUp();// 0x377f150

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2e0, Size: 8]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2e8, Size: 16]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2f8, Size: 16]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x37845f4
	void RepeatSpots();// 0x37845e0
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x3784564
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x37843f4
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x37842c8
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x37841b0

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x684, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e8, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x5ec, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x608, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x60c, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x610, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x614, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x678, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x67c, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2cc, Size: 4]
	Vector SocketOffset;//[Offset: 0x2d0, Size: 12]
	Vector TargetOffset;//[Offset: 0x2dc, Size: 12]
	float ProbeSize;//[Offset: 0x2e8, Size: 4]
	byte ProbeChannel;//[Offset: 0x2ec, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ed, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ed, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ed, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ed, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ed, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ed, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ed, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ed, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ee, Size: 1]
	float CameraLagSpeed;//[Offset: 0x2f0, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x2f4, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x2f8, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2fc, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x55d7c38
	Rotator GetTargetRotation();// 0x55d7bf8

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x700, Size: 1264]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xbf4, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xc00, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc11, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc12, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc13, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc14, Size: 1]
	Rotator SwimRotate;//[Offset: 0xc18, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc24, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc25, Size: 1]
	float C_SwimSpeed;//[Offset: 0xc28, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xc2c, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xc34, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc39, Size: 1]
	byte C_SeatSpecialType;//[Offset: 0xc3a, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xc3c, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc41, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xc44, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xc48, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xc4c, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xc50, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xc54, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xc58, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xc5c, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xc60, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xc64, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xc68, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xc6c, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xc70, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xc74, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xc78, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xc7c, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xc80, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xc84, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xc88, Size: 4]
	enum C_ParachuteState;//[Offset: 0xc8c, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xc90, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xc9c, Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca8, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca9, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcaa, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcab, Size: 1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcac, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xcb0, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xcb4, Size: 4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xcb8, Size: 8]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xcc0, Size: 8]
	AnimMontage* C_RevivalMontage;//[Offset: 0xcc8, Size: 8]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xcd0, Size: 8]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xcd8, Size: 8]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xce0, Size: 8]
	BlendSpace* C_BSParachute;//[Offset: 0xce8, Size: 8]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xcf0, Size: 8]
	AnimSequence* C_ParachuteLand;//[Offset: 0xcf8, Size: 8]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xd00, Size: 8]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd09, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xd0c, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xd18, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xd24, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xd30, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3c, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3d, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3e, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3f, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd41, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd42, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd43, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd45, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd46, Size: 1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd47, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd48, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd49, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xd4c, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xd50, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd54, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd55, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd56, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd57, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xd60, Size: 16]
	float C_LeanOut_AimAngle;//[Offset: 0xd70, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xd78, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xd7c, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdaa, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdab, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xdac, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xdb0, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xdb4, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xdb8, Size: 16]
	int[] ColdGameModeIDList;//[Offset: 0xdc8, Size: 16]
	enum[] StandbyGameModeType;//[Offset: 0xdd8, Size: 16]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xdf8, Size: 8]
	void TryToFireFlareGun();// 0x315c7cc
	void TryPlayStandbyAnim();// 0x315c7b8
	bool ShouldDestoryParachuteAnimAsset();// 0x315c780
	void SetVelocityZFactor(float NewFactor);// 0x315c704
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x315c644
	void PostCacheParamList(float DeltaSeconds);// 0x3b98fe4
	void PendingKillParachuteAnim(Object* InObject);// 0x315c5c8
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x315c514
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x315c498
	void DumpAllProperties();// 0x315c484
	void DumpAllAnimInstancesInThisWorld();// 0x315c470
	void ClearStandbyAnimState();// 0x315c45c
	void ClearParachuteAnimVars();// 0x315c448
	AnimParamList CacheParamList(float DeltaSeconds);// 0x315c30c
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x315c288
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x315c1c0
	PlayerAnimList CacheAnimVarList();// 0x315c0d0
	void AsyncAnimStandbyCallback(AnimationAsset* retAsset);// 0x315c054

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x436, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x437, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43e, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43f, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x443, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x446, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x447, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44e, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44f, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452, Size: 1]
	byte C_LODLevel;//[Offset: 0x453, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x454, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x458, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x460, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x46c, Size: 4]
	byte C_PoseType;//[Offset: 0x470, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x471, Size: 1]
	byte C_WeaponType;//[Offset: 0x472, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x473, Size: 1]
	byte C_WeaponState;//[Offset: 0x474, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x478, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47e, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47f, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x484, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x488, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x48c, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x490, Size: 4]
	float C_FireAlpha;//[Offset: 0x494, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x498, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x49c, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x4a0, Size: 4]
	float PeekFrameRate;//[Offset: 0x4a4, Size: 4]
	float PeekSpeed;//[Offset: 0x4a8, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x4ac, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x4b0, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x4b4, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x4b8, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x4bc, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x4c0, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x4c8, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x4d4, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x4e0, Size: 12]
	Vector C_MoveDir;//[Offset: 0x4ec, Size: 12]
	Vector C_HurtDir;//[Offset: 0x4f8, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x504, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x510, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x51c, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x528, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x534, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x540, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x54c, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x558, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x564, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x570, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x57c, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x588, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x594, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x5a0, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x5ac, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x5b8, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x5c4, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x5d0, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x5dc, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x5e8, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x5f8, Size: 8]
	Rotator OwnerRotation;//[Offset: 0x600, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x610, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x61c, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x620, Size: 12]
	Rotator FloorRotation;//[Offset: 0x62c, Size: 12]
	byte Role;//[Offset: 0x638, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63b, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x640, Size: 8]
	BlendSpace* C_MovementBSCache;//[Offset: 0x648, Size: 8]
	BlendSpace* C_MovementBSCache_Dest;//[Offset: 0x650, Size: 8]
	AnimSequence* C_IdleAddtive;//[Offset: 0x658, Size: 8]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x660, Size: 8]
	BlendSpace1D* C_FallingBS;//[Offset: 0x668, Size: 8]
	AnimSequence* C_JumpStart;//[Offset: 0x670, Size: 8]
	AnimSequence* C_LandLight;//[Offset: 0x678, Size: 8]
	AnimSequence* C_LandHeavy;//[Offset: 0x680, Size: 8]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x688, Size: 8]
	AnimSequence* C_TurnAnim;//[Offset: 0x690, Size: 8]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x698, Size: 8]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x6a0, Size: 8]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x6a8, Size: 8]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x6b0, Size: 8]
	AnimMontage* C_MontageRescue;//[Offset: 0x6b8, Size: 8]
	AnimMontage* C_MontageDead;//[Offset: 0x6c0, Size: 8]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x6c8, Size: 8]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x6d0, Size: 8]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x6d8, Size: 8]
	enum AnimInstanceType;//[Offset: 0x6e0, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x6e4, Size: 4]
	byte LastPoseTypeCache;//[Offset: 0x6e8, Size: 1]
	int ForceLODLevel;//[Offset: 0x6f8, Size: 4]
	void RefreshPeekState();// 0x3161080
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x3160ffc
	void PlayPostReloadWeaponAnimation();// 0x3160fe8
	void PlayPostFillGasWeaponAnimation();// 0x3160fd4
	void PlayPlayerDeadAnimation();// 0x3160fc0
	void PlayAnimationByEventType(byte Type);// 0x3160f44
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x3160ec0
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x3160e00
	void HandlePlayerPickUp();// 0x3160de4
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x3160d58
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x3b98fe4
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x3160bd4
	void HandleOwnerAnimEvent(FName EventMsg);// 0x3160b50
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x31609d0
	byte GetRole();// 0x316099c
	void EnableAnimFlag(enum PlayFlag);// 0x3160920
	void DisableAnimFlag(enum PlayFlag);// 0x31608a4

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x410, Size: 8]
	FString LuaFilePath;//[Offset: 0x418, Size: 16]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x3b98fe4
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x3257c84
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x3257b00
	void HandleOwnerAnimEvent(FName EventMsg);// 0x3257a7c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x32578fc

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x140, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float AnimLength;//[Offset: 0x84, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x88, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa0, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0xa4, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xa8, Size: 16]
	int SampleIndexWithMarkers;//[Offset: 0xb8, Size: 4]
	BlendSample[] SampleData;//[Offset: 0xc0, Size: 16]
	EditorElement[] GridSamples;//[Offset: 0xd0, Size: 16]
	BlendParameter BlendParameters;//[Offset: 0xe0, Size: 32]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x4c8, Size: 8]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x4d0, Size: 8]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float HitSelfModifier;//[Offset: 0x3ac, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x3b0, Size: 4]
	float HitOthersModifier;//[Offset: 0x3b4, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x3b8, Size: 4]
	float HitCharacterModifier;//[Offset: 0x3bc, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xf80, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf85, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf86, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xf88, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xf90, Size: 28]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0xfb0, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xfb8, Size: 8]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xfc0, Size: 8]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xfc8, Size: 8]
	float VehicleWeaponReloadRate;//[Offset: 0xfd0, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xfd8, Size: 8]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xfe8, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xff0, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff9, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffa, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffb, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffc, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100c, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100d, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100e, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1011, Size: 1]
	FName CharacterSocket;//[Offset: 0x1018, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1021, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1022, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1023, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1024, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1025, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x1028, Size: 8]
	FName GrenadePredictLineSocket;//[Offset: 0x1030, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x1038, Size: 8]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x1044, Size: 4]
	float StartReloadDelayTime;//[Offset: 0x1060, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x1070, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x1078, Size: 8]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1088, Size: 8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1090, Size: 8]
	int BulletTypeTipMsgID;//[Offset: 0x109c, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x10a0, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x10a4, Size: 4]
	void StartReloadAnim();// 0x32ef944
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x32ef838
	void OnVehicleExplode();// 0x32ef81c
	void OnRep_OwnerActor();// 0x32ef808
	void NetMulticastReturnBullets();// 0x32ef7a8
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x32ef664
	void K2_SetSpecialMeshHide(bool isHide);// 0x3b98fe4
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x3b98fe4
	void K2_OnReturnBullets();// 0x3b98fe4
	MeshComponent* K2_GetWeaponMeshComp();// 0x3b98fe4
	void HnadleScopeInAfterReload();// 0x32ef650
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x32ef598
	void HandleWeaponStartReload();// 0x32ef584
	void HandleWeaponEndReload();// 0x32ef570
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x32ef4ec
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x32ef464
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x32ef430
	STExtraVehicleBase* GetOwnerVehicle();// 0x32ef3fc
	Rotator GetOwnerCameraRotator();// 0x32ef3c4
	Transform GetCharacterSocketTransform();// 0x32ef370
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x32ef2f4
	bool CheckIsAutonomousOrObTarget();// 0x32ef2bc
	void AfterReloadEnd();// 0x32ef2a8

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x398, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x3a4, Size: 12]
	byte ThrowMode;//[Offset: 0x3b0, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x3b4, Size: 4]
	float MaxSimTime;//[Offset: 0x3b8, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x3c0, Size: 48]
	float GrenadeRadius;//[Offset: 0x3f0, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x3f4, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x400, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x40c, Size: 12]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x110, Size: 8]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x118, Size: 4]
	float ImpactModifier;//[Offset: 0x11c, Size: 4]
	float ImpactAbsorption;//[Offset: 0x120, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x124, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x128, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x12c, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x130, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x134, Size: 4]
	float DamageCharacterCD;//[Offset: 0x138, Size: 4]
	float DamageSelfCD;//[Offset: 0x140, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x14c, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x150, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x158, Size: 4]
	float DamageReduce;//[Offset: 0x15c, Size: 4]
	float ExplosionBaseDamage;//[Offset: 0x160, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x164, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x168, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x16c, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x170, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x174, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x178, Size: 8]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x188, Size: 8]
	float HitStoneVelocityDamp;//[Offset: 0x190, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x1a0, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x1e8, Size: 8]
	Vector2D ImpactModifierVehicle;//[Offset: 0x1f0, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x1f8, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x200, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x204, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x208, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x20c, Size: 4]
	float ImpactModifierFront;//[Offset: 0x210, Size: 4]
	float ImpactModifierRear;//[Offset: 0x214, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x218, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x21c, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x220, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x228, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x22c, Size: 4]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x32e73c8
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x32e7278

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x110, Size: 16]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x120, Size: 16]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x130, Size: 16]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x140, Size: 16]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x150, Size: 16]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x160, Size: 16]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float HPMax;//[Offset: 0x174, Size: 4]
	float HP;//[Offset: 0x178, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x180, Size: 16]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float FuelMax;//[Offset: 0x194, Size: 4]
	float Fuel;//[Offset: 0x198, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x19c, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x1a0, Size: 4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x1a8, Size: 16]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x32e5964
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x32e578c
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x32e5598
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x32e53a4
	void SetHPFuel(float InHp, float InFuel);// 0x32e52f0
	void RefreshWheelState();// 0x32e52dc
	void OnRep_WheelsCurrentHP();// 0x32e52c8
	void OnRep_HP();// 0x32e52b4
	void OnRep_Fuel();// 0x32e52a0
	bool NoFuel();// 0x32e5268
	void Maintenance(float addpercenthp, bool fixtire);// 0x32e51a8
	bool IsDontDamage();// 0x32e518c
	bool IsDontConsumeFuel();// 0x32e5170
	bool IsDestroyed();// 0x32e5138
	int GetWheelsHPNum();// 0x32e5104
	float GetWheelHPMax(int WheelIdx);// 0x32e5078
	float GetWheelHP(int WheelIdx);// 0x32e4fec
	float GetVehicleHPMax();// 0x32e4fb8
	float GetVehicleHP();// 0x32e4f84
	float GetFuelMax();// 0x32e4f50
	float GetFuelConsumeFactor();// 0x32e4f1c
	float GetFuel();// 0x32e4ee8
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x32e4e6c

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x2d0, Size: 8]
	float MeshDensity;//[Offset: 0x2d8, Size: 4]
	float FluidDensity;//[Offset: 0x2dc, Size: 4]
	float FluidLinearDamping;//[Offset: 0x2e0, Size: 4]
	float FluidAngularDamping;//[Offset: 0x2e4, Size: 4]
	Vector VelocityDamper;//[Offset: 0x2e8, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x2f8, Size: 4]
	float TestPointRadius;//[Offset: 0x2fc, Size: 4]
	Vector[] TestPoints;//[Offset: 0x300, Size: 16]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x318, Size: 16]
	StructBoneOverride[] BoneOverride;//[Offset: 0x328, Size: 16]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	float StayUprightStiffness;//[Offset: 0x33c, Size: 4]
	float StayUprightDamping;//[Offset: 0x340, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x344, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x354, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x358, Size: 8]
	byte TickGroup;//[Offset: 0x360, Size: 1]
	bool IsEntirelyUnderWater();// 0x617c548
	bool IsContactedWater();// 0x617c524

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x110, Size: 16]
	float MinCorrectionInterval;//[Offset: 0x120, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x124, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x128, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x12c, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x130, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x134, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x138, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x13c, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x140, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x144, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x148, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x14c, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x150, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x154, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x158, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	float StaticFixLocation;//[Offset: 0x160, Size: 4]
	float StaticFixAngel;//[Offset: 0x164, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x168, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x16c, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x174, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x178, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x280, Size: 88]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x32f37f0
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x32f3650
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x32f3480
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x32f32b0
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x32f3064
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x32f2e70
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x32f2c74
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x32f29c8
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x32f271c
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x32f25cc
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x32f247c
	void OnDriverRide();// 0x32f2468
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x32f236c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x32f21f8
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x32f20fc
	STExtraBaseCharacter*[] GetRiders();// 0x32f2058
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x32f1fc0
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x32f1ed8
	void DragUnderGround();// 0x32f1ec4
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x32f1db8
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x32f1c88
	bool CheckAndLoadLandscape(float DeltaTime);// 0x32f1bf8
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x32f1b54
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x32f19e4

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x58, Size: 8]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2d0, Size: 8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2d8, Size: 16]
	int EarlyReflectionOrder;//[Offset: 0x2e8, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2ec, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2f0, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fa, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fa, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x2fc, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x300, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x308, Size: 8]
	FString EventName;//[Offset: 0x310, Size: 16]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x5fe8a84
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x5fe8798
	void Stop();// 0x5fe8784
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x5fe856c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x5fe84e8
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x5fe8378
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x5fe81cc
	void SetOutputBusVolume(float BusVolume);// 0x5fe8150
	void SetListeners(out const AkComponent*[] Listeners);// 0x5fe8098
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x5fe801c
	void SetAutoDestroy(bool in_AutoDestroy);// 0x5fe7f9c
	void SetAttenuationScalingFactor(float Value);// 0x5fe7f20
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x5fe7e28
	void PostTrigger(FString Trigger);// 0x5fe7cf4
	int PostAssociatedAkEvent();// 0x5fe7cc0
	int PostAkEventByName(FString in_EventName);// 0x5fe7c08
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x5fe7b10
	float GetAttenuationRadius();// 0x5fe7adc

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 8]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x378, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x37c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x380, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	Rotator RelativeToOwnerRotator;//[Offset: 0x388, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x394, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float MinPitch;//[Offset: 0x3ac, Size: 4]
	float MaxPitch;//[Offset: 0x3b0, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x3b8, Size: 4]
	float ResultMinPitch;//[Offset: 0x3fc, Size: 4]
	float ResultMaxPitch;//[Offset: 0x400, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x404, Size: 4]
	float LeaveMaxTime;//[Offset: 0x408, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x414, Size: 4]
	float ApproachTime;//[Offset: 0x41c, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x430, Size: 8]
	float FreeCamRotationReturnRate;//[Offset: 0x438, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x32f0830
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x32f07ac
	void SetFreeCameraInput(Rotator deltaRot);// 0x32f0730
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x32f06ac
	void ResetSmartCamera();// 0x32f0698
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x32f0540
	void DelayRotationLagEnabledEnd();// 0x32f052c
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x32f0428
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x32f0374

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0x110, Size: 16]
	FString OneceBuffTableName;//[Offset: 0x120, Size: 16]
	FString ConditionBuffTableName;//[Offset: 0x130, Size: 16]
	float RPCSyncInterval;//[Offset: 0x140, Size: 4]
	bool IsPreloadUClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	int[] PreloadBuffIDList;//[Offset: 0x148, Size: 16]
	delegate OnClientAddBuffEvent;//[Offset: 0x158, Size: 16]
	delegate OnClientRemoveBuffEvent;//[Offset: 0x168, Size: 16]
	delegate OnClientUpdateBuffEvent;//[Offset: 0x178, Size: 16]
	STBuff*[] Buffs;//[Offset: 0x188, Size: 16]
	int SyncBriefNum;//[Offset: 0x198, Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0x1a0, Size: 40]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x290, Size: 40]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x380, Size: 80]
	<int> BriefRemoveInstIds;//[Offset: 0x3d0, Size: 80]
	bool UpdateServerSyncBuff(STBuff* Buff);// 0x33ffccc
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID, Actor* CauseActor, float DSEndTime);// 0x33ffb28
	void UpdateBriefs();// 0x33ffb14
	void RPC_Server_ReqBriefs();// 0x33ffab4
	void RPC_Client_SyncBrief(ClientSyncBrief Brief);// 0x33ffa10
	void RPC_Client_RspBriefs(const ClientSyncBrief[] Briefs);// 0x33ff960
	void RemoveClientBuff(int InstID);// 0x33ff8e4
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x33ff7a8
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x33ff678
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x33ff5fc
	void RemoveAllBuffs();// 0x33ff5e8
	void OnRep_SyncBriefs();// 0x33ff5d4
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x3b98fe4
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x3b98fe4
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x3b98fe4
	bool HasSkillID(int SkillID);// 0x33ff544
	bool HasBuff(int BuffID);// 0x33ff4b4
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x33ff3fc
	bool HandleBuffTypeMutex(int BuffID);// 0x33ff36c
	void HandleBuffTypeExclude(int BuffID);// 0x33ff2f0
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x33ff1f4
	BuffTableConfig* GetTableConfig();// 0x33ff1c0
	STBuff*[] GetBuffs();// 0x33ff11c
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x33ff058
	STBuff* GetBuffByBuffID(int BuffID);// 0x33fefcc
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x33fee90
	void CompareBuffPower(STBuff* Buff);// 0x33fee14
	bool ClientGetBuffInfo(int BuffID, out ClientSyncBrief OutBuff);// 0x33fed2c
	void ClearBuffs(bool IsClearAll);// 0x33feca8
	bool CheckBuffTargetClient(STBuff* Buff);// 0x33fec18
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x33fead8

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x28, Size: 16]
	FString Desc;//[Offset: 0x38, Size: 16]
	int LayerMax;//[Offset: 0x48, Size: 4]
	int InitialLayerCount;//[Offset: 0x4c, Size: 4]
	float Duration;//[Offset: 0x50, Size: 4]
	float ClientSyncInterval;//[Offset: 0x54, Size: 4]
	enum ClientSyncType;//[Offset: 0x58, Size: 1]
	enum TargetType;//[Offset: 0x59, Size: 1]
	enum RefreshType;//[Offset: 0x5a, Size: 1]
	enum ReActionType;//[Offset: 0x5b, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x5c, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x5d, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x60, Size: 16]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int LocalizeDescID;//[Offset: 0x74, Size: 4]
	FString IconPath;//[Offset: 0x78, Size: 16]
	int TipsOnAddBuff;//[Offset: 0x88, Size: 4]
	DataProviderBase*[] DataProviders;//[Offset: 0x90, Size: 16]
	int InstID;//[Offset: 0xa0, Size: 4]
	int BuffID;//[Offset: 0xa4, Size: 4]
	int LayerCount;//[Offset: 0xa8, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	float EndTime;//[Offset: 0xb0, Size: 4]
	float DSEndTime;//[Offset: 0xb4, Size: 4]
	Actor* Causer;//[Offset: 0xb8, Size: 8]
	Actor* Owner;//[Offset: 0xc0, Size: 8]
	int CauseSkillID;//[Offset: 0xc8, Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0xcc, Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	float PowerValue;//[Offset: 0xd8, Size: 4]
	float LastSyncClientTime;//[Offset: 0xdc, Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	UAEBlackboard* Blackborad;//[Offset: 0xe8, Size: 8]
	int LastLayerCount;//[Offset: 0x190, Size: 4]
	void Tick(float DetalTime, float TimeSeconds);// 0x33fc228
	void ResetActionExecute();// 0x33fc214
	void RefreshEndTime();// 0x33fc200
	void Initialize();// 0x33fc1ec
	void HandleLayer(int AddLayerCount, bool IsNewBuff);// 0x33fc12c
	void End();// 0x33fc118
	void EnabledRemove();// 0x33fc104
	void Destroy();// 0x33fc0f0
	bool CopyActions();// 0x33fc0b8
	void CheckOnceBuffForClient();// 0x33fc0a4
	void ChangeNotify();// 0x33fc090
	void ChangeDuration(float NewDuration);// 0x33fc014

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x28, Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x2c, Size: 8]
	int ArrayIndex;//[Offset: 0x34, Size: 4]
	void Tick(float DetalTime);// 0x33fce78
	void SetEnabled(bool Enabled);// 0x33fcdf4
	void ResetExecute(bool IgnoreEnd);// 0x33fcd68
	void OnTick(float DetalTime);// 0x33fcce4
	void OnInitialize();// 0x33fccc8
	void OnExecute();// 0x33fccac
	void OnEnd();// 0x33fcc90
	void OnDestroy();// 0x33fcc74
	void OnChangeNotify();// 0x33fcc58
	void Initialize();// 0x33fcc44
	STBuff* GetOwnerBuff();// 0x33fcc10
	Actor* GetOwner();// 0x33fcbdc
	bool GetIsExecute();// 0x33fcbc0
	Actor* GetCauser();// 0x33fcb8c
	void End();// 0x33fcb78
	void Destroy();// 0x33fcb64
	STBuffAction* CopyAction(Object* Outer);// 0x33fcad0
	void ChangeNotify();// 0x33fcabc

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x28, Size: 960]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x60c1398
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x60c12c4
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x60c1140
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x60c106c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x60c0f98
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x60c0ec4
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x60c0df0
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x60c0d1c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x60c0c48
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x60c0b74
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x60c0a98
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x60c09f8
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x60c0958
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x60c08b8
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x60c0818
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x60c0778
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x60c06d8
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x60c0638
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x60c0598
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x60c04f8
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x60c0458
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x60c03b8
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x60c031c
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x60c0234
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x60c0194
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x60c0090
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x60bfff0
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x60bff54
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x60bfeb8
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x60bfe1c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x60bfd80
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x60bfce4
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x60bfc48
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x60bfba8
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x60bfac0
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x60bf974

--------------------------------
Class: BuffTableConfig.Object
	<int,BuffTableRow> Table;//[Offset: 0x58, Size: 80]
	<FString,class Object> BuffClassMap;//[Offset: 0xa8, Size: 80]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x488, Size: 16]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x498, Size: 16]
	delegate OnEndChangeItemAvatar;//[Offset: 0x4a8, Size: 16]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x4c0, Size: 16]
	bool bFPPMeshLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x4d8, Size: 16]
	FName FrontMatSlotName;//[Offset: 0x4e8, Size: 8]
	FName TailMatSlotName;//[Offset: 0x4f0, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x4f8, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x500, Size: 8]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x508, Size: 8]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x510, Size: 8]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x518, Size: 8]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	void WakeUpVehicle();// 0x32e13f8
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x3b98fe4
	void PreChangeVehicleFPPMode();// 0x32e13e4
	void PreChangeVehicleBrokenMataterial();// 0x32e13d0
	void PreChangeVehicleAvatar(int InItemID);// 0x32e1354
	void PreChangeItemAvatar(int InItemID);// 0x32e12d0
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x32e1244
	void OverrideVehiclePhysX();// 0x32e1230
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x32e11b8
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x32e1140
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x32e10dc
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x32e1078
	FName GetReflectionCubeName_Lobby();// 0x3b98fe4
	FName GetReflectionCubeName();// 0x32e1044
	FString GetItemAvatarHandlePath(int ItemID);// 0x3b98fe4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x3b98fe4
	int GetDefaultAvatarID();// 0x32e1010
	int GetCurrentAvatarID();// 0x32e0ff4
	void ExitFPPVehicle();// 0x32e0fe0
	void EnterFPPVehicle();// 0x32e0fcc
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x3b98fe4
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x32e0eac
	void ClearVehicleLightEffect();// 0x3b98fe4
	bool CheckIsNeedEnterFPPVehicle();// 0x32e0e74
	bool CheckAvatarChanged();// 0x32e0e3c
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x32e0dc0
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x32e0cc0

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x30, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x38, Size: 176]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0xe8, Size: 40]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x84c, Size: 4]
	int VehicleSkinID;//[Offset: 0x850, Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x858, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x880, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x8a8, Size: 16]
	delegate OnStyleEquippedEvent;//[Offset: 0x8b8, Size: 16]
	delegate OnStyleUnequippedEvent;//[Offset: 0x8c8, Size: 16]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x8d8, Size: 16]
	FName FrontMatSlotName;//[Offset: 0x8e8, Size: 8]
	FName TailMatSlotName;//[Offset: 0x8f0, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x8f8, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x900, Size: 8]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x908, Size: 8]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x910, Size: 8]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x918, Size: 8]
	void WakeUpVehicle();// 0x32de09c
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x32de020
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x32ddf00
	void SetVehicleAvatarNormalMode();// 0x32ddeec
	void SetVehicleAvatarFPPMode();// 0x32dded8
	void SetVehicleAvatarBroken();// 0x32ddec4
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x32ddda4
	void SetMasterBaseMeshPath(FString InPath);// 0x32ddcfc
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x32ddc54
	void ResetAdvanceVehicleSkinID();// 0x32ddc38
	void RemoveAllEquippedStyle();// 0x32ddc24
	bool ProcessHandleUnequip(enum InSlotType);// 0x32ddb94
	bool ProcessHandleEquip(enum InSlotType);// 0x32ddb04
	void PreProcessBeforeLoadMesh();// 0x32ddae8
	void PostProcessAfterLoadMesh();// 0x32ddacc
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x32dda50
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x32dd9d4
	void OverrideVehiclePhysX();// 0x32dd9c0
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x3b98fe4
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x3b98fe4
	void OnRep_BodySlotStateChanged();// 0x32dd9a4
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x3b98fe4
	bool IsValidAvatar();// 0x32dd96c
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x32dd898
	bool IsAvatarFPPMode();// 0x32dd860
	bool IsAvatarBroken();// 0x32dd828
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x32dd790
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x32dd6f8
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x32dd660
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x32dd5c8
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x32dd4d0
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x32dd390
	void InitMasterComponent();// 0x32dd37c
	void Initialize();// 0x32dd360
	void InitialAvatarParam();// 0x32dd34c
	int HasStyleEquipped(int InStyleID);// 0x32dd2c0
	int HasEquippedSameStyle(int InStyleID);// 0x32dd234
	bool HandleUnequipStyle(int InStyleID);// 0x32dd1a4
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x32dd0e4
	bool HandleEquipStyle(int InStyleID);// 0x32dd054
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x32dd020
	MeshComponent* GetVehicleBodyMeshComp();// 0x32dcfec
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x32dcee4
	FName GetReflectionCubeName_Lobby();// 0x3b98fe4
	FName GetReflectionCubeName();// 0x32dceb0
	bool CanBeMeshMerge(int SlotID);// 0x32dce20
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x32dcd6c

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x5c0, Size: 16]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x5d0, Size: 16]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x5e0, Size: 16]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x331f784
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x331f708
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x331f670
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x331f5b8
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x331f3a8
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x331f1a0
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x331f108
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x331f078
	void OnRep_CurrentWeaponReplicated();// 0x331f05c
	void OnReconnectOnServer();// 0x331f040
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x331efc4
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x331ee98
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x331ee1c
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x331ed70
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x331ecb8
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x331ec3c
	void DelayFire(float DelayTime, byte ShootMode);// 0x331eb7c

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0x110, Size: 80]
	FName LeftLogicSocketName;//[Offset: 0x160, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x168, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x170, Size: 80]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x1c0, Size: 80]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x210, Size: 80]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x260, Size: 4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x268, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x270, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x280, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x288, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	float ResyncTimeBias;//[Offset: 0x294, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x298, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x2a0, Size: 16]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x2b0, Size: 16]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x2c0, Size: 16]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x2d0, Size: 16]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x2e0, Size: 16]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x310, Size: 80]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x360, Size: 80]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x3b0, Size: 16]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x3c8, Size: 16]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x3e0, Size: 16]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x3f0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x428, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x460, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x498, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x4d0, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x510, Size: 8]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x518, Size: 8]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x520, Size: 8]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x528, Size: 8]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x530, Size: 8]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x570, Size: 8]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x3b98fe4
	void UpdateOwnerClientCreateWeapon();// 0x3321e14
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x3321d54
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x3321d40
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x3b98fe4
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3321b38
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x3b98fe4
	void SetGrenadeLogicSocketToWeaponClassMap(<FName,class STExtraWeapon> GrenadeLogicToWeaponClass);// 0x33219e0
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x3321920
	void SetAllWeaponMeshsHidden(bool bHidden, bool bCastShadow, bool bCacheHidden, bool bIgnoreCharHide);// 0x33217c0
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x3321744
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x332166c
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x3321658
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x3321644
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x3321630
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x332161c
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x3321608
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x332158c
	void OnRep_CurrentWeaponReplicated();// 0x3321570
	void OnRep_CurrentWeaponLogicSocket();// 0x332155c
	void OnRep_CurrentShieldWeaponReplicated();// 0x3321548
	void OnReconnectOnServer();// 0x332152c
	void OnReconnectOnClient();// 0x3321510
	void LogInventoryDataInfo();// 0x33214fc
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x33213ec
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x3321340
	void LocalForceFinishSwitchWeapon();// 0x332132c
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x3b98fe4
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x3321318
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x332123c
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x3321228
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x3b98fe4
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x3321204
	bool IsCreatingWeaponOnServer();// 0x33211cc
	static void InitializeTable(FString MainWeaponTableName);// 0x33210a8
	void HandleGetWeaponFinished(byte Slot);// 0x3321024
	FName GetShieldWeaponSlot();// 0x3320ff0
	STExtraWeapon* GetShieldWeapon();// 0x3320fbc
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x3320f30
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x3320e44
	FName GetLogicSocketBySlot(byte Slot);// 0x3320db8
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x3320d2c
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x3320ca0
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x3320c14
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x3320b78
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x3320aec
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x3320a50
	STExtraWeapon* GetCurrentUsingWeapon();// 0x3320a1c
	byte GetCurrentUsingPropSlot();// 0x33209e8
	FName GetCurrentUsingLogicSocketOnServer();// 0x33209b4
	FName GetCurrentUsingLogicSocket();// 0x3320980
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x332094c
	int GetBagLevel();// 0x3320910
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x3320814
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x3320718
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x3320704
	void EnableAllBroadcast(bool bEnable);// 0x3320684
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x33205c4
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x3320548
	void DebugReconnectToClientOnServer();// 0x3320534
	void DebugDisconnetToServerOnClient();// 0x3320520
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x3b98fe4
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x3b98fe4
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x3320454

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2cc, Size: 4]
	float TriggerInterval;//[Offset: 0x2d0, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x2d4, Size: 4]
	void OnTriggered();// 0x3b98fe4

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0x1008, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0x100c, Size: 4]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1011, Size: 1]
	delegate OnDeath;//[Offset: 0x1018, Size: 16]
	float DelayHideDuration;//[Offset: 0x1028, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0x102c, Size: 4]
	float DelayHideDurationByHeadShoot;//[Offset: 0x1030, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0x1034, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0x1038, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0x103c, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0x1040, Size: 8]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0x1048, Size: 8]
	class PlayerTombBox* DropTomb;//[Offset: 0x1050, Size: 8]
	int MonsterSpawnTime;//[Offset: 0x1058, Size: 4]
	int MonsterDeathTime;//[Offset: 0x105c, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x1060, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0x1068, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106c, Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0x1070, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0x1074, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0x1078, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x1094, Size: 88]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x10ec, Size: 4]
	float MinTimeLockTarget;//[Offset: 0x10f0, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x10f4, Size: 4]
	float SensedRadius;//[Offset: 0x10f8, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0x10fc, Size: 4]
	float HeardRadius;//[Offset: 0x1100, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0x1104, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x1108, Size: 8]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0x1110, Size: 8]
	MobPerceptionController* MobPerceptionController;//[Offset: 0x1118, Size: 8]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0x1120, Size: 8]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0x1128, Size: 8]
	CircleMgrComponent* CircleMgr;//[Offset: 0x1140, Size: 8]
	int SyncAIState;//[Offset: 0x1148, Size: 4]
	int AIState;//[Offset: 0x1154, Size: 4]
	float HurtAnimTime;//[Offset: 0x1158, Size: 4]
	float BackAnimPerc;//[Offset: 0x115c, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1160, Size: 4]
	delegate OnEnterAIState;//[Offset: 0x1170, Size: 16]
	delegate OnLeaveAIState;//[Offset: 0x1180, Size: 16]
	delegate OnBPEnterAIState;//[Offset: 0x1190, Size: 16]
	delegate OnBPLeaveAIState;//[Offset: 0x11a0, Size: 16]
	delegate OnChangeAnimParam;//[Offset: 0x11b0, Size: 16]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0x11c0, Size: 16]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0x11d0, Size: 16]
	delegate OnCharacterHitPointDelgate;//[Offset: 0x11f8, Size: 16]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 1]
	int FlowId;//[Offset: 0x120c, Size: 4]
	FString MonsterName;//[Offset: 0x1210, Size: 16]
	FString MonsterNameID;//[Offset: 0x1220, Size: 16]
	int MonsterSyncID;//[Offset: 0x1230, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1234, Size: 1]
	int Gold;//[Offset: 0x1238, Size: 4]
	int SuperGold;//[Offset: 0x123c, Size: 4]
	int[] BornSkill;//[Offset: 0x1240, Size: 16]
	int[] AloneSkillIdList;//[Offset: 0x1250, Size: 16]
	int HealthBarCount;//[Offset: 0x1260, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1264, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0x1268, Size: 4]
	float TakeDamageScale;//[Offset: 0x126c, Size: 4]
	Actor* AttackTarget;//[Offset: 0x1270, Size: 8]
	int[] DecalIndexArray;//[Offset: 0x1278, Size: 16]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0x1288, Size: 80]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0x12d8, Size: 80]
	byte HitPartJudgment;//[Offset: 0x1328, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1330, Size: 80]
	BodyTypeDef StandBodyDef;//[Offset: 0x1380, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0x1388, Size: 8]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x1390, Size: 8]
	float IdleWalkSpeedRatio;//[Offset: 0x1398, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0x139c, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0x13a0, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0x13a4, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0x13a8, Size: 4]
	float[] CircleDamageRate;//[Offset: 0x13b0, Size: 16]
	int ObjectPoolSize;//[Offset: 0x13c0, Size: 4]
	int LifePeriodTime;//[Offset: 0x13c4, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0x13c8, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0x13cc, Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d0, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0x13d4, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e0, Size: 1]
	int RageLevel;//[Offset: 0x1404, Size: 4]
	float AloneRageTimerRate;//[Offset: 0x1410, Size: 4]
	float ImpluseScale;//[Offset: 0x1414, Size: 4]
	float ImpluseZScale;//[Offset: 0x1418, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141c, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141d, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0x1420, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x1424, Size: 4]
	float MinDamageInterval;//[Offset: 0x1428, Size: 4]
	float MovementTickInterval;//[Offset: 0x142c, Size: 4]
	float DsActorTickInterval;//[Offset: 0x1430, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x1440, Size: 8]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x1448, Size: 8]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x1450, Size: 8]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x1458, Size: 8]
	float NoPathToTargetTimer;//[Offset: 0x1460, Size: 4]
	enum AnimGroupMask;//[Offset: 0x1464, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1465, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1466, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	int ExplodeSkillID;//[Offset: 0x1474, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0x1478, Size: 4]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c, Size: 1]
	float LagCompensationRecordInterval;//[Offset: 0x1548, Size: 4]
	float HearRadius;//[Offset: 0x15a0, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x15a4, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ac, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ad, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ae, Size: 1]
	bool TestPathSyncToLocation(Vector Location);// 0x3232684
	bool TestPathSyncToActor(Actor* Actor);// 0x32325f4
	void StopMovementMode();// 0x32325d8
	void StartMovementMode();// 0x32325bc
	void ShowHeadShootDeadEffect();// 0x32325a8
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x323252c
	void ResetCharAnimParam();// 0x3232518
	void OnSmoothComponentSnapshotPreReplicate();// 0x3232504
	void OnRep_SyncAIState();// 0x32324f0
	void OnRep_ReplicatedMovement();// 0x32324d4
	void OnRep_RageLevel();// 0x32324c0
	void OnRep_MonsterSyncID();// 0x32324ac
	void OnRep_MonsterNameID();// 0x3232498
	void OnRep_IsLeftRightMove();// 0x3232484
	void OnRep_IdleBlendSpaceValue();// 0x3232470
	void NotifyInitial();// 0x323245c
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x323239c
	bool IsSameTeam(Pawn* Other);// 0x3232304
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x3232218
	bool IsCanCopyBone();// 0x32321e0
	bool IsBoss();// 0x32321a8
	bool IsBigBoss();// 0x3232170
	bool IsBehemoth();// 0x3232138
	void InitCharAnimParam();// 0x3232124
	bool HasAIState(enum NewState);// 0x3232094
	void HandleHitByBullet(Actor* Causer);// 0x3232018
	void GotoEarthAndDie();// 0x3231ffc
	Vector GetServerHeadLocation();// 0x3231fc4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3231f88
	int GetMonsterType();// 0x3231f6c
	FString GetMonsterName();// 0x3231ec0
	float GetHitBoxRadius();// 0x3231ea4
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x3231d40
	ExFootIKComponent* GetExFootIKComponent();// 0x3231d04
	class PlayerTombBox GetDropTomb();// 0x3231cc8
	byte GetCurHitPartJugementType();// 0x3231c94
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x3231c60
	SimpleCharAnimParamList GetAnimParam();// 0x3231bf0
	int GetAliveTimeSeconds();// 0x3231bd4
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x3231950
	void EnterAIState(enum NewState, bool bIsNotify);// 0x3231890
	void EnableDSAnim(bool bEnable);// 0x323180c
	void DisappearOnDeath();// 0x32317f8
	void DieAfterExplode();// 0x32317e4
	void DelayHidden();// 0x32317c8
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x32316f4
	bool CheckPlayerNeedUpdateAnimation();// 0x32316bc
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x32315c8
	void ChangeSourceType(byte NewSourceType);// 0x323154c
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x3231448
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x3231344
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3231100
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3230e88
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3230c44
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3230a00
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x32307a8
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3230564
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3230320
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x32300dc
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x322fe8c
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x322fc10
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x322faa8
	void BroadcastClientsDebugSpeed(float Speed);// 0x322f9f8
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x322f948
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x3b98fe4
	void BPPreRespawned();// 0x322f92c
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3b98fe4
	void BPNotifyInitial();// 0x3b98fe4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3b98fe4
	void BPMonsterInitTableDone();// 0x3b98fe4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x322f7dc
	bool BP_HasAIState(enum NewState);// 0x322f74c
	RoadPointInfo[] BleCallGetRoadPoints();// 0x322f6a0
	bool AllowAIState(enum NewState);// 0x322f610
	void AddWeaponDamageAddition(byte WeaponType);// 0x322f594

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0x110, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0x148, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x180, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x184, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x188, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x18c, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x190, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x194, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x198, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x19c, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x1a0, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x1a8, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x1ac, Size: 4]
	delegate OnSnapshotPreReplicate;//[Offset: 0x1b0, Size: 16]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x1c4, Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x2a0, Size: 16]
	void TeleportNextSync();// 0x310bc68
	void StopPredict();// 0x310bc54
	void SetVelocity(out const Vector Velocity);// 0x310bbcc
	void SetEnable(bool bInEnable);// 0x310bb4c
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x310ba5c
	void OnRep_Snapshot();// 0x310ba48
	Vector GetVelocity();// 0x310ba10
	bool GetEnable();// 0x310b9f4
	Vector FindFloor(const Vector InLocation);// 0x310b964

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0x110, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0x114, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0x118, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0x11c, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0x120, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0x124, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0x128, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0x12c, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0x130, Size: 8]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0x138, Size: 8]
	float WallJump_JumpSpeed;//[Offset: 0x140, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0x144, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0x148, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0x14c, Size: 4]
	float Stride_Duration;//[Offset: 0x150, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0x154, Size: 4]
	float Stride_HeightOffset;//[Offset: 0x158, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x15c, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x160, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x168, Size: 8]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x170, Size: 8]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	int iWallClimbState;//[Offset: 0x17c, Size: 4]
	int iWallJumpState;//[Offset: 0x180, Size: 4]
	int iStrideState;//[Offset: 0x184, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x306594c
	void WallJump(Vector DstLocation);// 0x30658d0
	void WallClimbExit();// 0x30658bc
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x30657c8
	void TickWallJump_Turn(float DeltaTime);// 0x306574c
	void TickWallJump(float DeltaTime);// 0x30656d0
	void TickWallClimb_Turn(float DeltaTime);// 0x3065654
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x30655d8
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x306555c
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x30654e0
	void TickWallClimb(float DeltaTime);// 0x3065464
	void TickStride_Turn(float DeltaTime);// 0x30653e8
	void TickStride_Stride(float DeltaTime);// 0x306536c
	void TickStride_MoveToWall(float DeltaTime);// 0x30652f0
	void TickStride(float DeltaTime);// 0x3065274
	void StrideJump();// 0x3065260
	void StrideExit();// 0x306524c
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x3065170
	void OnMobDie();// 0x306515c
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x3065060
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x3064f64
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x3064e68
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x3064c68
	bool IsInAdvancedMovement();// 0x3064c30
	int GetWallJumpState();// 0x3064bfc
	int GetWallClimbState();// 0x3064bc8
	int GetStrideState();// 0x3064b94
	void BPWallJump(Vector DstLocation);// 0x3064b10
	void BPWallClimb(Vector DstLocation);// 0x3064a8c

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0x110, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0x118, Size: 16]
	enum NoiseAttenuationModel;//[Offset: 0x128, Size: 1]
	int NoisePoolSize;//[Offset: 0x12c, Size: 4]
	float NoiseRememberTime;//[Offset: 0x130, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0x134, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x306982c
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x3069734
	void OnMobDie();// 0x3069720
	void ClearNoisePool();// 0x306970c
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x30695a8
	float Attenuation(out AIStimulus Stimulus);// 0x3069444
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x3069268

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x190, Size: 16]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4af5cf8
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x4af5c6c
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x4af5b70

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x118, Size: 8]
	AIController* AIOwner;//[Offset: 0x120, Size: 8]
	void StopLogic(FString Reason);// 0x4af9c4c
	void RestartLogic();// 0x4af9c30
	bool IsRunning();// 0x4af9bf0
	bool IsPaused();// 0x4af9bb0

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0x110, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x118, Size: 8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x140, Size: 16]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x4af7a10
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x4af788c
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x4af77b8
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x4af76e4
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x4af7610
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x4af753c
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x4af7468
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x4af7394
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x4af72c0
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x4af71e4
	bool IsVectorValueSet(out const FName KeyName);// 0x4af7144
	Vector GetValueAsVector(out const FName KeyName);// 0x4af70a4
	FString GetValueAsString(out const FName KeyName);// 0x4af6fa0
	Rotator GetValueAsRotator(out const FName KeyName);// 0x4af6f00
	Object* GetValueAsObject(out const FName KeyName);// 0x4af6e64
	FName GetValueAsName(out const FName KeyName);// 0x4af6dc8
	int GetValueAsInt(out const FName KeyName);// 0x4af6d2c
	float GetValueAsFloat(out const FName KeyName);// 0x4af6c90
	byte GetValueAsEnum(out const FName KeyName);// 0x4af6bf4
	class Object GetValueAsClass(out const FName KeyName);// 0x4af6b58
	bool GetValueAsBool(out const FName KeyName);// 0x4af6ab8
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x4af69cc
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x4af68e0
	void ClearValue(out const FName KeyName);// 0x4af6854

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 16]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 8]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 16]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 8]
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 16]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 16]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 16]
	BTService*[] Services;//[Offset: 0x68, Size: 16]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x58, Size: 4]
	float RandomDeviation;//[Offset: 0x5c, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 1]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x440, Size: 8]
	BrainComponent* BrainComponent;//[Offset: 0x448, Size: 8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x450, Size: 8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x458, Size: 8]
	BlackboardComponent* Blackboard;//[Offset: 0x460, Size: 8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x468, Size: 8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x470, Size: 8]
	delegate ReceiveMoveCompleted;//[Offset: 0x478, Size: 16]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x48c, Size: 12]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4aea6a8
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4aea62c
	void SetMoveBlockDetection(bool bEnable);// 0x4aea5a8
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x4aea510
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x3b98fe4
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x3b98fe4
	void OnPossess(Pawn* PossessedPawn);// 0x3b98fe4
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x4aea450
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4aea1d8
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4ae9fbc
	void K2_SetFocus(Actor* NewFocus);// 0x4ae9f40
	void K2_SetFocalPoint(Vector FP);// 0x4ae9ec4
	void K2_ClearFocus();// 0x4ae9eb0
	bool HasPartialPath();// 0x4ae9e78
	PathFollowingComponent* GetPathFollowingComponent();// 0x4ae9e5c
	byte GetMoveStatus();// 0x4ae9e28
	Vector GetImmediateMoveDestination();// 0x4ae9df0
	Actor* GetFocusActor();// 0x4ae9dbc
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x4ae9d24
	Vector GetFocalPoint();// 0x4ae9cec
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x4ae9cd0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4ae9c54

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x158, Size: 8]
	NavigationData* MyNavData;//[Offset: 0x168, Size: 8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x4b116b8
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4b11560
	Vector GetPathDestination();// 0x4b11528
	byte GetPathActionType();// 0x4b114f4

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0x110, Size: 16]
	class AISense* DominantSense;//[Offset: 0x120, Size: 8]
	AIController* AIOwner;//[Offset: 0x138, Size: 8]
	delegate OnPerceptionUpdated;//[Offset: 0x1c0, Size: 16]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1d0, Size: 16]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x4aec468
	void RequestStimuliListenerUpdate();// 0x4aec454
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x4aec39c
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x4aec2e4
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4aec1ec
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4aec0f4
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4aebffc
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x4aebee0

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 4]
	float MaxAge;//[Offset: 0x2c, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 4]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 8]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x80, Size: 16]
	float PerceptionAgingRate;//[Offset: 0x90, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x4aed438
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x4aed3bc
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x4aed2c8
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x4aed210
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x4aed07c

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x110, Size: 8]
	PawnActionStack[] ActionStacks;//[Offset: 0x118, Size: 16]
	PawnActionEvent[] ActionEvents;//[Offset: 0x128, Size: 16]
	PawnAction* CurrentAction;//[Offset: 0x138, Size: 8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x4b12f14
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x4b12e18
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x4b12d8c
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x4b12d00

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 8]
	Object* Instigator;//[Offset: 0x40, Size: 8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x4b11d38
	void Finish(byte WithResult);// 0x4b11cac
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x4b11bf8

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0x118, Size: 16]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x128, Size: 16]
	GameplayTask*[] TickingTasks;//[Offset: 0x148, Size: 16]
	GameplayTask*[] KnownTasks;//[Offset: 0x158, Size: 16]
	delegate OnClaimedResourcesChange;//[Offset: 0x170, Size: 16]
	void OnRep_SimulatedTasks();// 0x4a39de0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x4a39ae8

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 8]
	void ReadyForActivation();// 0x4a37e9c
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x3b98fe4
	void EndTask();// 0x4a37e88

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0x110, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0x114, Size: 4]
	float StepHeight;//[Offset: 0x118, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0x11c, Size: 4]
	float VehicleImpluseScale;//[Offset: 0x120, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0x124, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0x128, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x168, Size: 8]
	bool StopSkillSimulate();// 0x3237f94
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x3237ec0
	void SetVelocity(Vector InVelocity);// 0x3237e44
	void SetSimulatePhysics(bool bInEnabled);// 0x3237dc4
	void SetEnabled(bool InEnabled);// 0x3237d44
	void SetCharacterMovementActive(bool _bIsActive);// 0x3237cc0
	bool IsOnGround();// 0x3237c88
	Vector GetVelocity();// 0x3237c50
	bool FindGround();// 0x3237c18
	void AddVelocity(Vector InVelocity);// 0x3237b9c
	void ActivatePhysics();// 0x3237b88

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0x110, Size: 1]
	byte Type;//[Offset: 0x111, Size: 1]
	int TypeID;//[Offset: 0x114, Size: 4]
	void SetActorVisible(bool bEnable);// 0x32d2730

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x1c0, Size: 16]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	bool bMakePainToHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 1]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x1d8, Size: 16]
	float DestinyThreshold;//[Offset: 0x1e8, Size: 4]
	int RoundNum;//[Offset: 0x1ec, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x1f4, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x1fc, Size: 4]
	float LowProbRatio;//[Offset: 0x200, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x208, Size: 8]
	float TimeForForbidMakePain;//[Offset: 0x210, Size: 4]
	Actor* InnerCircle;//[Offset: 0x218, Size: 8]
	Vector InnerCircleInfo;//[Offset: 0x220, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	Vector BlueCircle;//[Offset: 0x264, Size: 12]
	Vector WhiteCircle;//[Offset: 0x270, Size: 12]
	int CurrentIndex;//[Offset: 0x27c, Size: 4]
	Actor* ContainActor;//[Offset: 0x280, Size: 8]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	delegate OnCircleBegin;//[Offset: 0x3a8, Size: 16]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x3b8, Size: 16]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x3c8, Size: 16]
	delegate OnCircleInfoChanged;//[Offset: 0x3d8, Size: 16]
	delegate OnWaveEnded;//[Offset: 0x3e8, Size: 16]
	delegate OnCircleEnded;//[Offset: 0x3f8, Size: 16]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x408, Size: 8]
	bool WhitCircleIsOutOfBlueCircle();// 0x2f801e8
	void StartCircleFromBegin();// 0x2f801d4
	void SetGMCicleTime(float cdTime, float LastTime);// 0x2f800ec
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x2f80034
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x2f7ff74
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int Index);// 0x2f7fe70
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x2f7fda8
	void MakePain(Actor* _actor, float _desireDamage);// 0x2f7fcf0
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x2f7fc38
	bool MakeCurrentWhiteCircle(int Index);// 0x2f7fba0
	bool IsUseCustomWhiteCircle();// 0x2f7fb68
	bool IsPositionInBlueCircle(out const Vector Position);// 0x2f7facc
	bool IsInBlueCircle(Actor* _actor);// 0x2f7fa3c
	bool HasDoubleCircleEnabled();// 0x2f7fa20
	Vector GetWhiteCircle(int Index);// 0x2f7f990
	Vector GetInnerCircleInfo();// 0x2f7f968
	Vector GetCustomWhiteCircleConfigByIndex(int Index, int RandomIndex);// 0x2f7f8a0
	Vector GetCustomBlueCircleConfigByIndex(int Index);// 0x2f7f810
	Vector GetCurrentWhiteCircle();// 0x2f7f7e8
	int GetCurrentCircleIndex();// 0x2f7f7b4
	Vector GetCurrentBlueCircle();// 0x2f7f78c
	void ApplyCircleOffset(Vector InOffset);// 0x2f7f710

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0x118, Size: 16]
	FString TimerName;//[Offset: 0x128, Size: 16]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x398, Size: 8]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool IsInWater(Vector Position);// 0x2f80de4
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x2f80cd4

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float SimulatedCharacterServerTimeHighPrecision();// 0x30e311c
	float SimulatedCharacterServerTime();// 0x30e30e0
	byte ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* shooter, out const BulletHitInfoUploadData ShootData);// 0x30e2f9c

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x6a4, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x6a8, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x6ac, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x6b0, Size: 1]
	float InterpSpeed;//[Offset: 0x6b4, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 1]
	float ScaleOfPawn;//[Offset: 0x6bc, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x6c0, Size: 80]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x714, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x71c, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x2fded38
	Vector GetIKEffectorOffsetMinValue();// 0x2fded10
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x2fdeb38

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x10, Size: 20]
	Vector Origin;//[Offset: 0x24, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x30, Size: 16]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63b, Size: 1]
	Vector ServerShootPos;//[Offset: 0x63c, Size: 12]
	float ServerShootTime;//[Offset: 0x648, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x650, Size: 96]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x6d0, Size: 8]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x30d25f4
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x30d2578
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x30d24a4
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x30d23fc
	void OnImpact(out const HitResult _ImpactResult);// 0x30d2354
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x30d217c

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x160, Size: 16]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x170, Size: 16]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x180, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x1a8, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x1d0, Size: 16]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x1e0, Size: 80]
	ParticleSystem* ExplosionParticle;//[Offset: 0x230, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x258, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x280, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x2a8, Size: 80]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	<int,FName> SeatSockets;//[Offset: 0x300, Size: 80]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x130, Size: 16]
	float SeekAreaPixelSize;//[Offset: 0x140, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x144, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x14c, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x154, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x158, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x15c, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x160, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x164, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x168, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x16c, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x170, Size: 4]
	float TraceTargetInterval;//[Offset: 0x174, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x178, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x180, Size: 80]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x1d0, Size: 80]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x220, Size: 80]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x270, Size: 8]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x278, Size: 8]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x280, Size: 8]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x288, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x290, Size: 8]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x2a0, Size: 16]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x2b0, Size: 16]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x2c0, Size: 16]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x2e0, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x2e4, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x2e8, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ef, Size: 1]
	void ShowEnemyLaunchRocketTips();// 0x30fee10
	void SetCurrentLockTarget(Actor* InTarget);// 0x30fed94
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x30feca4
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x30febf4
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x30feb04
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x30fea54
	void RemoveTargetList(Actor*[] TargetList);// 0x30fe920
	void RemoveTarget(Actor* Target);// 0x30fe8a4
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x3b98fe4
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x3b98fe4
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x3b98fe4
	void InitComplete();// 0x30fe890
	void HandleTargetOutOfSeekArea();// 0x30fe87c
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x30fe7f8
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x30fe774
	enum GetCurrentSeekAndLockStage();// 0x30fe738
	Actor* GetCurrentLockTarget();// 0x30fe704
	bool CheckTargetIsVisible(Actor* Target);// 0x30fe66c
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x30fe5dc
	void AddTarget(Actor* Target);// 0x30fe560

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0x130, Size: 16]
	delegate OnBuffDetached;//[Offset: 0x140, Size: 16]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x1a8, Size: 16]
	FString ServerBuffString;//[Offset: 0x1b8, Size: 16]
	float BuffSyncRemainingPeriod;//[Offset: 0x1c8, Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x1d0, Size: 16]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x33fb3fc
	void ResetForDeath();// 0x33fb3e8
	void RepBuffSyncList();// 0x33fb3d4
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x33fb2c4
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x33fb17c
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x33fb06c
	void RefreshAllBuffs();// 0x33fb050
	bool IsBufferMutexed(FName NewBuffName);// 0x33fafc0
	bool HasBuffID(int BuffID);// 0x33faf30
	bool HasBuff(FName BuffName);// 0x33faea0
	Pawn* GetPawnOwner();// 0x33fae6c
	FName GetBuffName(int BuffID);// 0x33fade0
	int GetBuffID(FName BuffName);// 0x33fad54
	float GetBuffExpiry(out const FName BuffName);// 0x33facb8
	STBaseBuff* GetBuffByName(FName BuffName);// 0x33fac2c
	Actor* GetActorOwner();// 0x33fabf8
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x33faaf4
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x33fa9c8
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x33fa8c4
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x33fa798
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x33fa6e0
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x33fa610
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x33fa534
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x3b98fe4
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x3b98fe4
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x33fa468
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x33fa39c
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x33fa254
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x33fa0e0

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x38, Size: 16]
	FString DisplayName;//[Offset: 0x48, Size: 16]
	FString Message;//[Offset: 0x58, Size: 16]
	Texture2D* Icon;//[Offset: 0x68, Size: 8]
	SoundBase* SoundData;//[Offset: 0x70, Size: 8]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	int LayerMax;//[Offset: 0x80, Size: 4]
	int InitialLayerCount;//[Offset: 0x84, Size: 4]
	int LayerCount;//[Offset: 0x88, Size: 4]
	float ValidityTime;//[Offset: 0x8c, Size: 4]
	float Internal;//[Offset: 0x90, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x98, Size: 16]
	float Expiry;//[Offset: 0xa8, Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0xb0, Size: 16]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0xc2, Size: 1]
	FName[] MutexBuffers;//[Offset: 0xc8, Size: 16]
	BuffActionItem[] BuffActions;//[Offset: 0xd8, Size: 16]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xe8, Size: 16]
	float fADScale;//[Offset: 0xf8, Size: 4]
	float fAPScale;//[Offset: 0xfc, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	Controller* CauserPawnController;//[Offset: 0x108, Size: 8]
	Actor* CauserPawnActor;//[Offset: 0x110, Size: 8]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0x128, Size: 16]
	Actor* BuffApplier;//[Offset: 0x138, Size: 8]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x140, Size: 80]
	int InstancedNodesTotalSize;//[Offset: 0x190, Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x608ce88
	bool IsOK_Internal();// 0x608ce14
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x608cd24
	UTSkill* GetOwnerSkill();// 0x608ccbc

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	FString EffectName;//[Offset: 0x120, Size: 16]
	Actor* BuffTargetActor;//[Offset: 0x130, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x138, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x140, Size: 8]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x60905f0
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x6090474
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x6090284
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x6090108
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x608ff88
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x608fdec
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x608fc70
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x608faf4
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x608f974
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x608f7f4
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x608f654
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x608f538
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x608f41c
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x608f300
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x608f1e4
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x608f0c8
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x608efac
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x608ee90
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x608ed74
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x608ec58
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x608eb3c
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x608ea20
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x608e908
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x608e7a0
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x608e660
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x608e51c
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x608e3dc
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x608e2c4
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x608e19c
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x608e084
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x608df6c
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x608de54
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x608dd3c
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x608dc20
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x608dab8
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x608d9cc
	UAEBlackboard* GetUAEBlackboard();// 0x608d95c
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x608d8ec
	Actor* GetOwnerPawn();// 0x608d87c
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x608d760
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x608d6cc

--------------------------------
Class: UTSkill.Actor.Object
	Pawn* OwnerPawn;//[Offset: 0x3a8, Size: 8]
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	FString SkillName;//[Offset: 0x3c0, Size: 16]
	FName SkillGroup;//[Offset: 0x3d0, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bOBResimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	enum SkillCastType;//[Offset: 0x3da, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3db, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	int SkillID;//[Offset: 0x3e0, Size: 4]
	enum SkillTargetType;//[Offset: 0x3e4, Size: 1]
	FString SkillDescription;//[Offset: 0x3e8, Size: 16]
	FString SkillDetailDes;//[Offset: 0x3f8, Size: 16]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40a, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40b, Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x410, Size: 400]
	int SkillCategory;//[Offset: 0x5a0, Size: 4]
	Texture2D* SkillIcon;//[Offset: 0x5a8, Size: 8]
	Texture2D* SkillVehicleIcon;//[Offset: 0x5b0, Size: 8]
	FString SkillVehicleName;//[Offset: 0x5b8, Size: 16]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 1]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cb, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x5d0, Size: 16]
	bool IsCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x5e8, Size: 16]
	Actor* LastSpawnedActor;//[Offset: 0x5f8, Size: 8]
	Pawn* LastSpawnedPawn;//[Offset: 0x600, Size: 8]
	float PhasePercentage;//[Offset: 0x624, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x628, Size: 80]
	int InstancedNodesTotalSize;//[Offset: 0x678, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x680, Size: 16]
	int64 LastEditBluePrintTime;//[Offset: 0x690, Size: 8]
	int CurComponentNameIndex;//[Offset: 0x698, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	SkillGlobalUIDDataAsset* LoadedGlobalUIDDataAsset;//[Offset: 0x6a8, Size: 8]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x6b0, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x6b8, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x6084c24
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x6084ae0
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x6084918
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x6084828
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x60847c0
	UAEBlackboard* GetSpecificBlackboard();// 0x6084758
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x6084678
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x6084590
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x6084408
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x60842b8
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x6084138

--------------------------------
Class: SkillGlobalUIDDataAsset.DataAsset.Object
	<FString,int> AllSkillUIDMap;//[Offset: 0x30, Size: 80]
	<int,FString> AllSkillPathMap;//[Offset: 0x80, Size: 80]

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x1e0, Size: 8]
	Actor* OwnerActor;//[Offset: 0x1f8, Size: 8]
	int[] SkillInitIndices;//[Offset: 0x200, Size: 16]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 1]
	bool NeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x218, Size: 80]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x268, Size: 16]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x278, Size: 8]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x280, Size: 8]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x288, Size: 80]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x2d8, Size: 80]
	delegate ChangeActorBlackboard;//[Offset: 0x328, Size: 16]
	Actor* Target;//[Offset: 0x338, Size: 8]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x340, Size: 80]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x390, Size: 16]
	delegate OnSkillHit;//[Offset: 0x3a0, Size: 16]
	delegate OnSkillCast;//[Offset: 0x3b0, Size: 16]
	float PhasePercentage;//[Offset: 0x3e0, Size: 4]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x3e8, Size: 80]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x438, Size: 16]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x448, Size: 80]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x498, Size: 16]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x4b0, Size: 48]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x4e0, Size: 48]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x510, Size: 16]
	FString LastESkillTargetDesc;//[Offset: 0x528, Size: 16]
	int SkillSynRandomSeed;//[Offset: 0x538, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x53c, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x544, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x548, Size: 80]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	float ZombieModeUseSkillCD;//[Offset: 0x5a4, Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x5ac, Size: 4]
	SkillParamater[] SkillParamaters;//[Offset: 0x5c8, Size: 16]
	UTMutilSkillSynData[] SkillSynData;//[Offset: 0x5d8, Size: 16]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x5f8, Size: 16]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x620, Size: 80]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x670, Size: 80]
	delegate OnSkillInitSignature;//[Offset: 0x720, Size: 16]
	delegate SkillStartEvent;//[Offset: 0x730, Size: 16]
	delegate SkillStopEvent;//[Offset: 0x740, Size: 16]
	delegate SkillNormalStopEvent;//[Offset: 0x750, Size: 16]
	int[] PendingRemoveSkillID;//[Offset: 0x760, Size: 16]
	<int,byte> CurSKillLevels;//[Offset: 0x770, Size: 80]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x7c0, Size: 16]
	void UpdateSyncSkillCDData(int SkillID);// 0x609f7f4
	void UpdateSyncSkillActiveState(int SkillID);// 0x609f720
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x609f648
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x609f4e4
	void TryAddOneSkill(int SkillID, bool bActive);// 0x609f380
	void TriggerEvent(int SkillID, byte EventType);// 0x609f234
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x609ef40
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x609ed4c
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x609ebf4
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x609eaac
	void StopSkillAll(enum StopReason);// 0x609e9c8
	void StopSkill_WithID(int SkillID, enum StopReason);// 0x609e878
	int StopSkill_Mutil(int SkillID, enum StopReason);// 0x609e720
	void StopSkill(int SkillID, enum StopReason);// 0x609e5d0
	bool ShouldTriggerEvent_WithID(int SkillID, byte EventType);// 0x609e478
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x609e320
	bool SetupOwnerAndSystem();// 0x609e2b4
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x609e170
	void SetSkillOwner(Actor* tempActor);// 0x609e08c
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x609df4c
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x609de08
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x609dcc4
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet);// 0x609dab8
	void SetCurSkill(int SkillID, int SkillSlot);// 0x609d978
	void ServerTriggerEvent_WithID(int SkillID, byte EventType);// 0x609d7fc
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x609d680
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x609d504
	void ServerNotifyRandomSeed(int Seed);// 0x609d3f8
	void ResimulateAllSynData();// 0x609d390
	void ResetSkillCollDown(int SkillID);// 0x609d2b0
	void ResetAllSkillCollDown();// 0x609d248
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestIDs);// 0x609cf9c
	void RepSkillHitInfo();// 0x609cf3c
	void RepOneSkillSynData(int SkillSlot, int InLastSkillID);// 0x609cdfc
	void RepLastCastTime();// 0x609cd9c
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x609cc5c
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath ObjPath);// 0x609ca4c
	void RemoveReplacedSkill(int OldSkillID);// 0x609c978
	void RemoveAllSkillUIWidget();// 0x609c918
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath ObjPath);// 0x609c708
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x609c5c0
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x609c478
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x609c340
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x609c1ec
	static bool OnSameTeam(Actor* A, Actor* B);// 0x609c0a4
	void OnRep_SkillSynSinglePhaseData();// 0x609c03c
	void OnRep_SkillSynData();// 0x609bfd4
	void OnRep_SkillHitInfo();// 0x609bf6c
	void OnRep_SkillCDDatas();// 0x609bf0c
	void OnRep_SkillActiveState();// 0x609beac
	void OnRep_ReplaceSkill();// 0x609be4c
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x609bcf8
	bool IsUsingSkill(int SkillID);// 0x609bc18
	bool IsSkillActived(int SkillID);// 0x609bb38
	bool IsReadyToCastSkill(int SkillID);// 0x609ba4c
	bool IsCurrentUseSkillID(int InSkillID);// 0x609b96c
	bool IsCastingSkill();// 0x609b8f8
	void InitSkillSystem_WithID(bool IsDedicateServer);// 0x609b7f4
	void InitSkillSystem(bool IsDedicateServer);// 0x609b6f0
	UAEBlackboard* GetUAEBlackboardBySkillId(int SkillID);// 0x609b608
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x609b528
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x609b440
	UTSkillStateSyncData[] GetSkillState();// 0x609b3ac
	int GetSkillSlotBySkillID(int SkillID);// 0x609b2d0
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x609b1f0
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x609b0b8
	int GetSkillLevel(int SkillID);// 0x609afdc
	int GetSkillLastPhase(UTSkill* Skill);// 0x609aefc
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x609ae14
	int GetSkillIDByClass(class Object SkillClass);// 0x609ad28
	int GetSkillCurPhase(UTSkill* Skill);// 0x609ac48
	UTSkill* GetSkillByName(FString SkillName);// 0x609aae0
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x609a978
	UTSkillCreateData GetSkillBaseDataBySkill(UTSkill* Skill);// 0x609a880
	UTSkillCreateData GetSkillBaseDataByClass(class Object SkillClass);// 0x609a788
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x609a694
	UTSkill* GetSkill(int SkillID);// 0x609a5ac
	int GetReplacedSkill(int OldSkillID);// 0x609a4d0
	byte GetRealOwnerRoleSafety();// 0x609a448
	float GetLastCastTime_WithID(int SkillID);// 0x609a36c
	float GetLastCastFinishTime_WithID(int SkillID);// 0x609a290
	int[] GetCurUsingSkillIDS();// 0x609a1fc
	UTSkill*[] GetCurSkills();// 0x609a168
	UTSkillPhase*[] GetCurSkillPhases();// 0x609a0d4
	UTSkillPhase* GetCurSkillPhase_Mutil(int SkillSlot);// 0x6099ff8
	UTSkillPhase* GetCurSkillPhase(int SkillSlot);// 0x6099f1c
	int[] GetCurSkillIDs();// 0x6099e9c
	int GetCurSkillID(UTSkill* Skill);// 0x6099dbc
	UTSkill* GetCurSkill_Mutil(int SkillSlot);// 0x6099ce0
	UTSkill* GetCurSkill(int SkillSlot);// 0x6099c04
	int[] GetCurMonopolizeSkills();// 0x6099b70
	int FindRelatedCurSkillID(int SkillID, out int OutRelatedSkillSlot, bool bPeekSlotIndex);// 0x6099964
	UTSkill* FetchSkill_WithID(out int SkillID);// 0x6099848
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x60996d8
	void ClearSkill();// 0x6099670

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x168, Size: 80]
	FString LuaFilePath;//[Offset: 0x1b8, Size: 16]
	void UnRegistLuaTick();// 0x6167c4c
	void RegistLuaTick(float TickInterval);// 0x6167bd0

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x218, Size: 8]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x220, Size: 8]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x228, Size: 8]
	UAEUserWidget* ParentWidget;//[Offset: 0x230, Size: 8]
	Property*[] Params;//[Offset: 0x2d8, Size: 16]
	delegate widgetSizeNofity;//[Offset: 0x2f8, Size: 16]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x308, Size: 40]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x330, Size: 40]
	float TickRate;//[Offset: 0x358, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x360, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x368, Size: 8]
	enum FadingStatus;//[Offset: 0x378, Size: 1]
	float CurrentOpacity;//[Offset: 0x37c, Size: 4]
	float FadingInTime;//[Offset: 0x380, Size: 4]
	float FadingOutTime;//[Offset: 0x384, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x390, Size: 16]
	FString[] UIMsgFunctionList;//[Offset: 0x3a0, Size: 16]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x3b8, Size: 16]
	bool Visible();// 0x56badcc
	void UnRegistFromGameFrontendHUD();// 0x56badb8
	void SynchronizeBlueprintProperties();// 0x3b98fe4
	void Show();// 0x56bada4
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x56bad28
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x56bacac
	static void SetOnWidgetShow(delegate onShow);// 0x56bac18
	static void SetOnWidgetHide(delegate OnHide);// 0x56bab84
	static void SetOnClearUIStack(delegate onClear);// 0x56baaf0
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x56ba9c4
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x56ba948
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x56ba888
	void ReceiveShow();// 0x3b98fe4
	void ReceiveHide();// 0x3b98fe4
	void ReceivedMountWidget();// 0x56ba86c
	void ReceivedInitWidget();// 0x3b98fe4
	void ReCachedUIMsgFunction();// 0x56ba858
	static void PushOpenedUIStack(FString Name);// 0x56ba7b8
	static void PopOpenedUIStack(FString curOpen);// 0x56ba718
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x3b98fe4
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x3b98fe4
	void OnRightClicked(Vector2D TempScreenPos);// 0x3b98fe4
	void OnFadeOutFinished();// 0x56ba6fc
	void OnFadeInFinished();// 0x56ba6e0
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x3b98fe4
	void OnClicked(Vector2D TempScreenPos);// 0x3b98fe4
	void OnClearUIStack__DelegateSignature();// 0x3b98fe4
	bool IntCompare(int A, int B, enum CompareType);// 0x56ba5dc
	void InitWidget(bool Recursive);// 0x56ba558
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x56ba49c
	void Hide();// 0x56ba488
	void HandleUIMessageBattle(FString UIMessage);// 0x56ba3e0
	void HandleUIMessage(FString UIMessage);// 0x56ba338
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x56ba1d4
	Widget* GetWidgetContainsName(FString Name);// 0x56ba11c
	UAEUserWidget* GetParentWidget();// 0x56ba0e8
	PlayerController* GetOwningPlayer();// 0x56ba0ac
	LogicManagerBase* GetOwningLogicManager();// 0x56ba078
	FrontendHUD* GetOwningFrontendHUD();// 0x56ba044
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x56b9fb8
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x56b9e84
	UserWidget* GetChildWidget(FString WName);// 0x56b9dcc
	Margin GetAdapation();// 0x56b9da8
	bool FloatCompare(float A, float B, enum CompareType);// 0x56b9ca4
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x56b9c28
	void DestroyWidget();// 0x56b9c14
	static void ClearOpenedUIStack();// 0x56b9c00
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x56b9b58
	void ClearFunctionCache();// 0x56b9b44
	void ClearClassWidgetTree();// 0x56b9b30
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x56b9a74

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 8]
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 16]
	FrontendUtils* Utils;//[Offset: 0x60, Size: 8]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x68, Size: 16]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x78, Size: 80]
	int UnusedWidgetMinCount;//[Offset: 0xd8, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0xdc, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xe0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xe4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xe8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xec, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xf0, Size: 8]
	FName LastGameStatus;//[Offset: 0xf8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	FName PendingGameStatus;//[Offset: 0x108, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0x110, Size: 16]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0x120, Size: 16]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0x130, Size: 16]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0x140, Size: 16]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x160, Size: 16]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x170, Size: 16]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x180, Size: 16]
	delegate OnSetGameStatusEvent;//[Offset: 0x190, Size: 16]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x1a0, Size: 16]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x1b0, Size: 16]
	World* CurrentGameStatusWorld;//[Offset: 0x1c0, Size: 8]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x56b55c4
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x56b5440
	void OnPreLoadMap(FString MapName);// 0x56b5390
	void OnPostLoadMapWithWorld(World* World);// 0x56b530c
	void OnGameViewportClientCreated();// 0x56b52f8
	World* GetWorld();// 0x56b52bc
	FrontendUtils* GetUtils();// 0x56b5288
	PlayerController* GetPlayerController();// 0x56b5254
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x56b5118
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x56b508c
	GameViewportClient* GetGameViewportClient();// 0x56b5058
	GameMode* GetGameMode();// 0x56b5024
	GameInstance* GetGameInstance();// 0x56b4ff0
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x56b4e70
	void EnableGuiTest(bool bEnable);// 0x56b4dec
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x56b4d04
	void ClearLogicManagerByName(FString managerName);// 0x56b4bd0

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 8]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x30, Size: 16]
	FName CurrentSceneCameraName;//[Offset: 0x40, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x48, Size: 16]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x58, Size: 80]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0xa8, Size: 16]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0xb8, Size: 80]
	PointLight*[] ScenePointLightList;//[Offset: 0x108, Size: 16]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0x118, Size: 80]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x168, Size: 80]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x220, Size: 16]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x230, Size: 8]
	Object* GlobalUIEventDispatcher;//[Offset: 0x238, Size: 8]
	FString GlobalUIContainerClassName;//[Offset: 0x240, Size: 16]
	FName[] GlobalUIContainerNames;//[Offset: 0x250, Size: 16]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x260, Size: 80]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x2b0, Size: 16]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x2c0, Size: 80]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x348, Size: 80]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x56b6d14
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x56b6c18
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x56b6ac0
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x56b68f0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x56b6758
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x56b66a4
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x56b65f0
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x56b653c
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x56b6488
	void PopAllPushedUI();// 0x56b6474
	void OnAllSceneCamerasRegistered();// 0x56b6458
	bool IsPushedPanel(out const FName managerName);// 0x56b63b8
	bool IsNoRenderClient();// 0x56b6380
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x56b6240
	FString GetUIStackTopSrcTag();// 0x56b619c
	FString GetUIStackTopDstTag();// 0x56b60f8
	FString GetUIStackTop();// 0x56b6054
	CameraActor* GetSceneCamera();// 0x56b6020
	FrontendHUD* GetOwningFrontendHUD();// 0x56b5fec
	Object* GetGlobalUIEventDispatcher();// 0x56b5fb8
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x56b5f2c
	void EnableLobbyMainLight(bool NewEnable);// 0x56b5ea8
	void ClearAllSceneCameras();// 0x56b5e94

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x3a8, Size: 8]
	void SetRadius(float NewRadius);// 0x5596b6c
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x5596af0

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3fc, Size: 4]
	float AttenuationRadius;//[Offset: 0x400, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 1]
	float LightFalloffExponent;//[Offset: 0x408, Size: 4]
	float SourceRadius;//[Offset: 0x40c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x410, Size: 4]
	float SourceLength;//[Offset: 0x414, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x41c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x420, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x428, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x559735c
	void SetSourceLength(float NewValue);// 0x55972e0
	void SetSoftSourceRadius(float bNewValue);// 0x5597264
	void SetSimulateRectLight(bool NewValue);// 0x55971e0
	void SetSimulatePortalLight(bool NewValue);// 0x559715c
	void SetRectLightSourceWidth(float NewValue);// 0x55970e0
	void SetRectLightSourceHeight(float NewValue);// 0x5597064
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x5596fe8
	void SetAttenuationRadius(float NewRadius);// 0x5596f6c

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x398, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	void OnRep_bEnabled();// 0x55c3424

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2f4, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x2f8, Size: 8]
	float SourceCubemapAngle;//[Offset: 0x300, Size: 4]
	int CubemapResolution;//[Offset: 0x304, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x308, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x310, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x320, Size: 4]
	float Contrast;//[Offset: 0x324, Size: 4]
	float OcclusionExponent;//[Offset: 0x328, Size: 4]
	float MinOcclusion;//[Offset: 0x32c, Size: 4]
	Color OcclusionTint;//[Offset: 0x330, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x334, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3d8, Size: 8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x55c3db0
	void SetOcclusionTint(out const Color InTint);// 0x55c3d28
	void SetOcclusionExponent(float InOcclusionExponent);// 0x55c3cac
	void SetOcclusionContrast(float InOcclusionContrast);// 0x55c3c30
	void SetMinOcclusion(float InMinOcclusion);// 0x55c3bb4
	void SetLightColor(LinearColor NewLightColor);// 0x55c3b38
	void SetIntensity(float NewIntensity);// 0x55c3abc
	void SetIndirectLightingIntensity(float NewIntensity);// 0x55c3a40
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x55c3950
	void SetCubemap(TextureCube* NewCubemap);// 0x55c38d4
	void RecaptureSky();// 0x55c38c0

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x3d0, Size: 16]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x56bc348
	void RemoveWidget(UserWidget* Widget);// 0x56bc2cc
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x56bc20c
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x56bc154
	void AddWidgetInternal(UserWidget* Widget);// 0x56bc0d0
	void AddWidget(UserWidget* Widget);// 0x56bc054

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 8]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	int iUIControlState;//[Offset: 0x54, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x58, Size: 4]
	FName[] GameStatusList;//[Offset: 0x70, Size: 16]
	class Object[] WidgetUClassList;//[Offset: 0xb0, Size: 16]
	UAEUserWidget*[] WidgetList;//[Offset: 0xc0, Size: 16]
	Object*[] DelayMessage_Obj;//[Offset: 0xe8, Size: 16]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x56b7ff0
	bool IsEnableRemoveDynamicWidgets();// 0x56b7fb8
	UAEUserWidget*[] GetWidgetList();// 0x56b7f14
	UAEUserWidget* GetWidgetByName(FString InName);// 0x56b7e5c
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x56b7dd0
	FrontendHUD* GetOwningFrontendHUD();// 0x56b7d9c
	int GetDefaultSceneCamera();// 0x56b7d68
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x56b7bc0

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x428, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 1]
	int NumSpectators;//[Offset: 0x434, Size: 4]
	int NumPlayers;//[Offset: 0x438, Size: 4]
	int NumBots;//[Offset: 0x43c, Size: 4]
	float MinRespawnDelay;//[Offset: 0x440, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x444, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x448, Size: 8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x450, Size: 16]
	float InactivePlayerStateLifeSpan;//[Offset: 0x460, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	void StartMatch();// 0x54a77fc
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x54a7778
	void Say(FString Msg);// 0x54a76c8
	void RestartGame();// 0x54a76ac
	bool ReadyToStartMatch();// 0x54a766c
	bool ReadyToEndMatch();// 0x54a762c
	void K2_OnSetMatchState(FName NewState);// 0x3b98fe4
	bool IsMatchInProgress();// 0x54a75ec
	bool HasMatchEnded();// 0x54a75ac
	FName GetMatchState();// 0x54a7590
	void EndMatch();// 0x54a7574
	void AbortMatch();// 0x54a7558

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x100, Size: 184]
	delegate BrushDelegate;//[Offset: 0x1b8, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	FString imageSrcPath;//[Offset: 0x1f0, Size: 16]
	float HitTestAreaRadius;//[Offset: 0x200, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x208, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	void SetOpacity(float InOpacity);// 0x4959afc
	void SetDontPaintWhenColorZero(bool Enable);// 0x4959a78
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x49599f4
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4959978
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x49598b8
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x49597f8
	void SetBrushFromPathAsync(FString ResourcePath);// 0x4959750
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x49596d4
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x4959658
	void SetBrush(out const SlateBrush InBrush);// 0x4959528
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x49594f4
	bool GetDontPaintWhenColorZero();// 0x49594bc
	bool GetDontPaintWhenAlphaZero();// 0x4959484

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 184]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x440, Size: 8]
	int SkillID;//[Offset: 0x448, Size: 4]
	float TickInterval;//[Offset: 0x44c, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	void TriggerPassiveEvent(byte SkillEvent);// 0x60add3c
	void TriggerEvent(byte SkillEvent);// 0x60adc68
	void SetSkillManager(UTSkillManagerComponent* manager);// 0x60adb90
	void SetSkillID(int InSkillID);// 0x60adabc
	void RemoveSkillUI();// 0x60ada54
	void RemoveFromUIManager();// 0x60ad9f4
	void OnSkillStopEvent(int InSkillID, enum InStopReason);// 0x60ad8a4
	void OnSkillStartEvent(int InSkillID);// 0x60ad7c4
	bool IsTickFinish();// 0x60ad758
	bool IsCDReady();// 0x60ad6ec
	FString GetSkillName();// 0x60ad658
	UTSkillManagerComponent* GetSkillManager();// 0x60ad5f0
	int GetSkillID();// 0x60ad588
	float[] GetSkillCDProgess();// 0x60ad4f4
	float[] GetSkillCDByType(int Type);// 0x60ad3ec
	UTSkillCDBase*[] GetSkillCDBases();// 0x60ad358
	UTSkill* GetSkill();// 0x60ad2f0
	float GetMaxEnergy(int Index);// 0x60ad214
	PlayerController* GetLocalPlayerController();// 0x60ad1ac
	float GetEnergyValue(int Index);// 0x60ad0d0
	float GetEnergyThreshold(int Index);// 0x60acff4
	float GetDeltaEnergy(int Index);// 0x60acf18
	void DoRemove();// 0x60aceb8

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x428, Size: 16]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x90, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x98, Size: 8]
	enum cdType;//[Offset: 0xa0, Size: 1]
	FString cdTypeStr;//[Offset: 0xa8, Size: 16]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0xb8, Size: 8]
	bool StopConsumCD();// 0x608c174
	bool IsTickFinish();// 0x608c100
	bool IsCDReady();// 0x608c08c
	float GetCurrentTime();// 0x608c01c
	bool ForceConsumCD();// 0x608bfa8
	bool ConsumCD();// 0x608bf34

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x80, Size: 16]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0x118, Size: 16]
	FString PhaseDescription;//[Offset: 0x128, Size: 16]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x13c, Size: 8]
	int ActionsTopHalfCount;//[Offset: 0x15c, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x160, Size: 136]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x1e8, Size: 8]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x60aa9c0
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x60aa8dc
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x60aa7f8
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x60aa714
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x60aa5b4
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x60aa454
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x60aa370
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x60aa214
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x60aa0b8
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x60a9fd8
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x60a9ee8
	bool ClearAttachments();// 0x60a9e7c

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x148, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x178, Size: 16]
	Actor*[] IgnoreTargets;//[Offset: 0x188, Size: 16]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0x110, Size: 16]
	void UpdateAttribute(int TemplateID);// 0x2eb4b58
	void InitializeFollow();// 0x2eb4b3c
	void Initialize(Actor* Actor);// 0x2eb4ab8

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0x110, Size: 8]
	float UpdateHitBoxDeltaTime;//[Offset: 0x118, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0x120, Size: 16]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0x130, Size: 16]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0x140, Size: 16]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0x150, Size: 16]
	FString HitBox_Stand_Tag;//[Offset: 0x168, Size: 16]
	FString HitBox_Prone_Tag;//[Offset: 0x178, Size: 16]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x190, Size: 16]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x1a0, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x1a4, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x1a8, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x1ac, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x1b4, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1bc, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1c4, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1cc, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1d4, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1e0, Size: 80]
	float PawnCollisionCountdown;//[Offset: 0x230, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x238, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x309e620
	void UpdateAllInstanceBodyTransform(int Type);// 0x309e59c
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x309e510
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x309e470
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x309e3b0
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x309e24c
	byte GetCurHitPartJugementType();// 0x309e218
	void CloseBodyBulletCollision();// 0x309e1fc
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x309e06c

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0x110, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0x118, Size: 80]
	TickListItem[] NeedTickComponentList;//[Offset: 0x168, Size: 16]
	byte RoleBits;//[Offset: 0x178, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0x124, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x128, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x12c, Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x138, Size: 8]
	int MaxDeathTimes;//[Offset: 0x140, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x148, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x150, Size: 8]
	float EnterNearDeathSeconds;//[Offset: 0x158, Size: 4]
	float Breath;//[Offset: 0x15c, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x160, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x164, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x170, Size: 8]
	Actor* DamageCauserRecorded;//[Offset: 0x178, Size: 8]
	DamageEvent DamageEventRecorded;//[Offset: 0x180, Size: 16]
	float SetHealthSafety(float AddVal);// 0x3153bd0
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x3153ac4
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x31539b8
	void ResetDataOnRespawn();// 0x31539a4
	void RescueFinishSuccessfully();// 0x3153990
	void OnRep_BreathChanged();// 0x315397c
	bool IsNearDeathInvincible();// 0x3153944
	bool IsHealthAlive();// 0x315390c
	bool IsHaveLastBreathStatus();// 0x31538d4
	bool IsFinishedLastBreathStatus();// 0x315389c
	void InitializeOwner(Pawn* TempPawn);// 0x3153820
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x315367c
	Controller* GetRecordedEventInstigator();// 0x3153660
	float GetBreathMax();// 0x3153644
	float GetBreath();// 0x3153628
	void EnterSwimWhileDying();// 0x3153614
	void EnableDirectlyDie(bool bEnable);// 0x3153590
	void DoFinishLastBreath();// 0x315357c
	void ClearNearDeathTeammate();// 0x3153568
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x3153498
	void AddDeadBuff();// 0x3153484

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0x110, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x114, Size: 4]
	anPickerData FanData;//[Offset: 0x118, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x148, Size: 8]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x150, Size: 4]
	float RestoringDuration;//[Offset: 0x16c, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x170, Size: 16]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x180, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x188, Size: 8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x3154be0
	void WaitingConfirmState_ActOnUnsatisfied();// 0x3154bcc
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x3154b50
	void TickAsHelper(float DeltaTime);// 0x3154ad4
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x3154a24
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x31549a8
	bool RescueingState_IsConditionSatisfied();// 0x3154970
	void RescueingState_ActOnUnsatisfied();// 0x315495c
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x31548e0
	void RescueingProcessFinished();// 0x31548cc
	bool PlayerConfirmToRescueClientSide();// 0x3154894
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x31547c8
	void OnRep_IsRescueingOtherStatusChange();// 0x31547b4
	bool IsInRescueingStatus();// 0x315477c
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x31546c8
	float GetRestoringDuration();// 0x3154694
	void DrawDebugFan();// 0x3154680

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0x110, Size: 8]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0x118, Size: 8]
	STExtraBaseCharacter* Target;//[Offset: 0x128, Size: 8]
	float CanFollowDist;//[Offset: 0x130, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0x134, Size: 4]
	float QuitFollowDist;//[Offset: 0x138, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0x13c, Size: 4]
	float DistThrehold;//[Offset: 0x140, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x148, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x150, Size: 8]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x190, Size: 16]
	TargetKeyOperation* CurOp;//[Offset: 0x1a0, Size: 8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x314fda8
	void WaitingConfirmState_ActOnUnsatisfied();// 0x314fd94
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x314fd18
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x314fc8c
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x314fc10
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x314fb94
	bool PlayerStopFollow();// 0x314fb5c
	bool PlayerConfirmToFollow();// 0x314fb24
	void InitializeOwner(Pawn* _TempPawn);// 0x314faa8
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x314fa2c
	bool FollowingState_IsConditionSatisfied();// 0x314f9f4
	void FollowingState_ActOnUnsatisfied();// 0x314f9e0
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x314f964

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x3264600
	byte Start();// 0x32645c4
	bool IsValidate();// 0x3264584
	void DebugDraw(Color DebugColor, bool isPersist);// 0x32644c0
	void Awake();// 0x32644a4

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x88, Size: 8]
	STExtraBaseCharacter* Target;//[Offset: 0x90, Size: 8]
	byte Update(float DeltaTime);// 0x3263410
	FString ToString();// 0x326336c
	void TaskRemoved();// 0x3263350
	byte Start();// 0x3263314
	bool IsValidate();// 0x32632d4
	bool IsReachable();// 0x3263294
	byte Finish();// 0x3263258
	void DebugDraw(Color DebugColor, bool isPersist);// 0x3263194
	void Awake();// 0x3263178

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x418, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x41c, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x420, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x428, Size: 8]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452, Size: 1]
	float ResultMinPitch;//[Offset: 0x454, Size: 4]
	float ResultMaxPitch;//[Offset: 0x458, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x460, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x464, Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x480, Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x49c, Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x4b8, Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x4d4, Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x4f0, Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x50c, Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x528, Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x544, Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x560, Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x57c, Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x598, Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x5b4, Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x5d0, Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x5ec, Size: 28]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x608, Size: 28]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x624, Size: 28]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x640, Size: 28]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x65c, Size: 28]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x678, Size: 28]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x694, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x698, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x69c, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x6a0, Size: 28]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x6c0, Size: 28]
	float AdditionalSocketOffetZMax;//[Offset: 0x6e0, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x6e4, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x6f0, Size: 8]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x6f8, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x6fc, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x706, Size: 1]
	float OffsetCountTime;//[Offset: 0x708, Size: 4]
	float OffSetDurTime;//[Offset: 0x70c, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x710, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x718, Size: 8]
	Transform PrevRelativeTrans;//[Offset: 0x720, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x750, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x760, Size: 16]
	void SetSelfieCameraDefRotation();// 0x2f923a8
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x2f922a4
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x2f921e4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x2f9208c
	void DelayRotationLagEnabledEnd();// 0x2f92078
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x2f91fb0

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x378, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x37c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x380, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3d0, Size: 28]
	CameraOffsetData DefaultCameraData;//[Offset: 0x3ec, Size: 28]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x410, Size: 8]
	void OnRespawned();// 0x323a250
	Rotator GetTargetRotation();// 0x323a210
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x323a0b8
	void ClearCameraData();// 0x323a09c

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x7a8, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x7ac, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x7b0, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x7b4, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x7d4, Size: 4]
	float EnterShovelCD;//[Offset: 0x7d8, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x7dc, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x7e0, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x7e4, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x7e8, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x7ec, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x7f0, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x7f4, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x7f8, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x7fc, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x800, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x804, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x808, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x80c, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x810, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x818, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x81c, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x820, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x824, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x828, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x82c, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x830, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x834, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x838, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x83c, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x840, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x844, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x848, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x84c, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x850, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x858, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x870, Size: 8]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x878, Size: 8]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x880, Size: 8]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x888, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x88c, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x890, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x89f, Size: 1]
	float PreShovelFov;//[Offset: 0x8a0, Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x8d8, Size: 8]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x8e4, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x8ec, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f1, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f2, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x8f4, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x8fc, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x900, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x900, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x904, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x908, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x90c, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x910, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x914, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x918, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x91c, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x920, Size: 8]
	float ProneFloorAngle;//[Offset: 0x928, Size: 4]
	float ProneFloorZ;//[Offset: 0x92c, Size: 4]
	float JumpFloorAngle;//[Offset: 0x930, Size: 4]
	float JumpFloorZ;//[Offset: 0x934, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x938, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x93c, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x944, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x948, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x964, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x965, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x966, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x968, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xa6c, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xa74, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xa8c, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xa90, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0xa94, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xa98, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xaa0, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xaa4, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0xaa8, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xab0, Size: 16]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xad0, Size: 16]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xae0, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0xaf8, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xb00, Size: 8]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19, Size: 1]
	float MaxFlyAcceleration;//[Offset: 0xb20, Size: 4]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x31522e4
	void ToggleUserCmdDelta(bool Val);// 0x3152230
	void TimeSpeedCheck(bool Val);// 0x315217c
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x31520d0
	void SetProneFloorZ(float InProneFloorZ);// 0x3152054
	void SetProneFloorAngle(float InProneFloorAngle);// 0x3151fd8
	void SetJumpFloorZ(float InJumpFloorZ);// 0x3151f5c
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x3151ee0
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x3151de0
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x3151cd0
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x3151ae0
	void ServerUserMoveCmd(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x3151950
	void RefreshCharacterWithBase();// 0x315193c
	void Ping2Server(float ServerTime, float ClientTime);// 0x3151864
	void Ping2Client(float ServerTime);// 0x31517e8
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x3151724
	void OnRecoverOnServer();// 0x3151708
	void OnPreReconnectOnServer();// 0x31516f4
	void OnClientCloseUserCmdDelta();// 0x31516e0
	float K2_GetProneFloorZ();// 0x31516ac
	float K2_GetProneFloorAngle();// 0x3151678
	float K2_GetJumpFloorZ();// 0x3151644
	float K2_GetJumpFloorAngle();// 0x3151610
	bool IsWalkable(out const HitResult Hit);// 0x3151554
	bool IsProning();// 0x315151c
	STExtraBaseCharacter* GetSTCharacter();// 0x31514e8
	Vector GetPendingImpulse();// 0x31514c0
	Vector GetLocationOffsetToBase();// 0x3151488
	float GetLastServerMoveTime();// 0x3151454
	bool GetIsOpenShovelingAbility();// 0x315141c
	Vector GetBaseLocation();// 0x31513e4
	bool DragOnGround(float DeltaTime);// 0x3151354
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3151118
	void ClientUserMoveCmdAck(int Sequence);// 0x315109c
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3150e20
	void ChangePhysxShapeFlag();// 0x3150e0c

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x398, Size: 4]
	float MaxQuadLength;//[Offset: 0x39c, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x3a0, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x3a8, Size: 8]
	float DefaultTrailWidth;//[Offset: 0x3b0, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	float DefaultTrailLength;//[Offset: 0x3b8, Size: 4]
	float TextureLength;//[Offset: 0x3bc, Size: 4]
	int USegmentNum;//[Offset: 0x3c0, Size: 4]
	int CoordU;//[Offset: 0x3c4, Size: 4]
	int SlippingCoordU;//[Offset: 0x3c8, Size: 4]
	int BrokenCoordU;//[Offset: 0x3cc, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x3d4, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x3d8, Size: 4]
	int AdditionalCoordU;//[Offset: 0x3dc, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x3e0, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x3e4, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x3f0, Size: 8]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x3272c60
	void StopUpdate();// 0x3272c4c
	bool IsUpdating();// 0x3272c14

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x6d0, Size: 16]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 1]
	enum CollisionMode;//[Offset: 0x6e3, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x6e8, Size: 8]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x720, Size: 16]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x730, Size: 16]
	BoxSphereBounds LocalBounds;//[Offset: 0x740, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x760, Size: 88]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x7b8, Size: 16]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x64acbb8
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x64aca70
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x64ac9b0
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x64ac8f0
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x64ac830
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x64ac6b8
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x3b98fe4
	bool IsMeshSectionVisible(int SectionIndex);// 0x64ac628
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x64ac598
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x64ac508
	int GetNumSections();// 0x64ac4d4
	int GetLastSectionIndex();// 0x64ac4a0
	int FirstAvailableMeshSectionIndex();// 0x64ac46c
	void EndBatchUpdates();// 0x64ac458
	bool DoesSectionExist(int SectionIndex);// 0x64ac3c8
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x64abeb8
	void CookCollisionNow();// 0x64abea4
	void ClearMeshSection(int SectionIndex);// 0x64abe28
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x64abdac
	void ClearCollisionConvexMeshes();// 0x64abd98
	void ClearAllMeshSections();// 0x64abd84
	void ClearAllMeshCollisionSections();// 0x64abd70
	void BeginBatchUpdates();// 0x64abd54
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x64abc1c

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0x110, Size: 4]
	int DetectThreshold;//[Offset: 0x114, Size: 4]
	float FoldFactor;//[Offset: 0x118, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0x120, Size: 8]
	Vector BoxHalfSize;//[Offset: 0x130, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x13c, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x148, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x154, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x160, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x16c, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x170, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x17c, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x188, Size: 12]
	int FoldFactorDelt;//[Offset: 0x194, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x198, Size: 4]
	int TraceDis;//[Offset: 0x19c, Size: 4]
	float TickDeltTime;//[Offset: 0x1a0, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x1b0, Size: 16]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x30b78a4
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x30b7770

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xf10, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0xf18, Size: 16]
	enum LiveState;//[Offset: 0xf28, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xf30, Size: 16]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xf40, Size: 8]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xf48, Size: 8]
	float PlayerHealth;//[Offset: 0xf50, Size: 4]
	float PlayerHealthMax;//[Offset: 0xf54, Size: 4]
	float PlayerTemperature;//[Offset: 0xf58, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xf5c, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xf60, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xf78, Size: 24]
	enum EUAVUseType;//[Offset: 0xf90, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf91, Size: 1]
	enum eCurVehicleType;//[Offset: 0xf92, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xf93, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xf94, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xfa0, Size: 12]
	Vector MapMark;//[Offset: 0xfac, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 1]
	Vector RestartLocation;//[Offset: 0xfbc, Size: 12]
	Rotator RestartRotate;//[Offset: 0xfc8, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xfd8, Size: 80]
	<int,int> UseWheelMsgMap;//[Offset: 0x1028, Size: 80]
	byte PlayerUseQuickSight;//[Offset: 0x1078, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x1079, Size: 1]
	byte ShowMsgCnt;//[Offset: 0x107a, Size: 1]
	byte UserConfirmCnt;//[Offset: 0x107b, Size: 1]
	byte UserCancelCnt;//[Offset: 0x107c, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0x107d, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0x1080, Size: 4]
	float FPSAfterAdapt;//[Offset: 0x1084, Size: 4]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x10a8, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0x10b0, Size: 16]
	int TeamMatePlayerStateIndex;//[Offset: 0x10c0, Size: 4]
	int PlayerLayerID;//[Offset: 0x10c4, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x10c8, Size: 24]
	int Breath;//[Offset: 0x10e0, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x10e8, Size: 24]
	float EnegyBuffStage1;//[Offset: 0x1100, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x1104, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x1108, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x110c, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x1110, Size: 4]
	float CurEnegyBuff;//[Offset: 0x1114, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x1118, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x111c, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x1120, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x1124, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x1128, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x112c, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x1130, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x1134, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1138, Size: 16]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x1148, Size: 16]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1159, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1164, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1165, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x1168, Size: 16]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1178, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1179, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117a, Size: 1]
	int PlayersCountOnPlane;//[Offset: 0x1184, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x1188, Size: 16]
	float SingleRoundTotalDamage;//[Offset: 0x1198, Size: 4]
	int ContinuousKillsNum;//[Offset: 0x119c, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0x11a0, Size: 16]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x11b0, Size: 16]
	int MonsterTreasureBoxGetNum;//[Offset: 0x11c0, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x11c4, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x11c8, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cc, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x11d0, Size: 16]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x11e0, Size: 16]
	int MaxDecalCount;//[Offset: 0x1210, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x1218, Size: 16]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0x1298, Size: 16]
	float SignalHP;//[Offset: 0x12a8, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0x12b0, Size: 16]
	float SignalHPRemainingTime;//[Offset: 0x12c0, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0x12c4, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x12c8, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x12d0, Size: 16]
	int RemainingRevivalTime;//[Offset: 0x12e0, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e4, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e5, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e6, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e7, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e8, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x12ec, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f0, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x12f8, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1300, Size: 16]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1310, Size: 16]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x1320, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x1330, Size: 16]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x1340, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1350, Size: 16]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1360, Size: 16]
	float KdValue;//[Offset: 0x1370, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x1384, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x1398, Size: 16]
	Vector[] MapMultiMark;//[Offset: 0x13a8, Size: 16]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x13bc, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x13c8, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x13d4, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x13e0, Size: 12]
	Actor* Plane;//[Offset: 0x13f0, Size: 8]
	int FlightNo;//[Offset: 0x13f8, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13fc, Size: 1]
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x321eaf4
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x321e9b4
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x321e86c
	void SetPlayerGiveUp(bool InGiveUp);// 0x321e7e8
	void SetForceSyncTeammateData(bool IsForCE);// 0x321e764
	void SetAirplaneStopLoc(Vector StopLoc);// 0x321e6e4
	void SetAirplaneStartLoc(Vector StarLoc);// 0x321e664
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x321e5e4
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x321e564
	void SaveBuffData();// 0x321e548
	void RestoreBuffData();// 0x321e52c
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x321e3ac
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x321e2b4
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x321e1c0
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x321e144
	void RefreshRevivalState();// 0x321e130
	void RefreshFollowMark();// 0x321e11c
	void RefreshAirplaneRoute();// 0x321e108
	int PlayersCountOnMyPlane();// 0x321e0d4
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x3b98fe4
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x3b98fe4
	void OnRep_VisualFieldInfo();// 0x321e0c0
	void OnRep_UpdateKillMonsterNum();// 0x321e0a4
	void OnRep_TeamMatePlayerStateList();// 0x321e090
	void OnRep_TeamMatePlayerStateIndex();// 0x321e07c
	void OnRep_SingleRoundTotalDamage();// 0x321e068
	void OnRep_SignalHP();// 0x321e054
	void OnRep_RemainingRevivalTime();// 0x321e040
	void OnRep_RankNotify();// 0x321e02c
	void OnRep_PlayerTemperatureChanged();// 0x321e018
	void OnRep_PlayersCountOnPlane();// 0x321e004
	void OnRep_PlayerReconnectEvent();// 0x321dff0
	void OnRep_PlayerName();// 0x321dfd4
	void OnRep_PlayerLostConnectionEvent();// 0x321dfc0
	void OnRep_PlayerLiveStateInternal();// 0x321dfac
	void OnRep_PlayerLiveState();// 0x321df90
	void OnRep_PlayerKillsChange();// 0x321df74
	void OnRep_PlayerIsFollowing();// 0x321df60
	void OnRep_PlayerGiveUp();// 0x321df44
	void OnRep_PlayerGameOver();// 0x321df30
	void OnRep_PlayerExitGameEvent();// 0x321df1c
	void OnRep_PlayerAliasShowInfoList();// 0x321df08
	void OnRep_Plane();// 0x321def4
	void OnRep_MarkSyncData();// 0x321dee0
	void OnRep_MarkSelfSyncData();// 0x321decc
	void OnRep_MapMarkNotify();// 0x321deb8
	void OnRep_LastVehicleLocation();// 0x321dea4
	void OnRep_IsIDCardCaptured();// 0x321de90
	void OnRep_HPChanged();// 0x321de7c
	void OnRep_HasRevivalSign();// 0x321de60
	void OnRep_HasEscaped();// 0x321de4c
	void OnRep_ChangeRevivalState();// 0x321de30
	void OnRep_ChangeInRevivingState();// 0x321de1c
	void OnRep_BreathChanged();// 0x321de08
	void OnRep_BPS();// 0x321ddf4
	void OnRep_AirplaneStopLoc();// 0x321dde0
	void OnRep_AirplaneStartLoc();// 0x321ddcc
	void OnRep_AirplaneForceJumpLoc();// 0x321ddb8
	void OnRep_AirplaneCanJumpLoc();// 0x321dda4
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x3b98fe4
	void OnNewRound();// 0x321dd88
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x3b98fe4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x3b98fe4
	void OnClientVeteranRecruitIndexUpdated();// 0x321dd6c
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x321dcb0
	void OnClientAddBuff(int BuffID, int SkillID);// 0x321dbf4
	void LuaReceiveBeginPlay();// 0x321dbd8
	bool IsSinglePlayer();// 0x321dba0
	bool IsLocalPlayerState();// 0x321db68
	bool IsInGame();// 0x321db28
	bool IsInBetrayState();// 0x321dae8
	bool IsAlive();// 0x321dab0
	uint32 GetUserIDByMemberID(int memberID);// 0x321da1c
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x321d908
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x321d87c
	int GetTeamMateIndexByName(FString TeammateName);// 0x321d7c4
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x321d738
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x321d680
	FString GetStringPlayerKey();// 0x321d5dc
	float GetPlayerTemperature();// 0x321d5a8
	int GetPlayerTeamIndex2();// 0x321d574
	int GetPlayerTeamIndex();// 0x321d540
	float GetPlayerMaxTemperature();// 0x321d50c
	float GetPlayerMaxHealth();// 0x321d4d8
	float GetPlayerHealthPercent();// 0x321d4a4
	float GetPlayerHealth();// 0x321d470
	STExtraBaseCharacter* GetPlayerCharacter();// 0x321d43c
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x321d398
	float GetMaxEnegyBuff();// 0x321d364
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x321d210
	Vector GetForceJumpLoc();// 0x321d1e8
	Vector GetCanJumpLoc();// 0x321d1c0
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x321d0b4
	float GetBreathPercentage();// 0x321d080
	int GetBountyGold();// 0x3b98fe4
	MarkSyncData[] GetAllSelfMarkData();// 0x321d01c
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x321cf64
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x321ce50
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x321cd9c
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x321cbd8
	Vector GetAirplaneStopLoc();// 0x321cbb0
	Vector GetAirplaneStartLoc();// 0x321cb88
	void ForceNotifyAlertUpdate();// 0x321cb74
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x321ca40
	void FadeTeammatesMapMark();// 0x321ca2c
	void DispatchPlayerExitEvent();// 0x321ca10
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x321c950
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x321c7c8
	void ChangeFadeMapMarkDist(float NewDist);// 0x321c748
	bool CanSelfRevive();// 0x321c708
	bool CanRevivalTeammate();// 0x321c6d0
	bool CanBeRevival();// 0x321c698
	byte CalculateEnegyStage();// 0x321c664
	void BPKill(Character* VictimPawn);// 0x321c5e0
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x321c520
	void AddEnegySafety(float AddVal);// 0x321c4a4
	void AddDamager(STExtraBaseCharacter* Damager);// 0x321c420
	void AddDamageAmount(Character* VictimPawn, out const DamageEvent DamageEvent, float FinalDamage, bool bHitHead);// 0x321c2b8

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x4d8, Size: 4]
	float Pronetime;//[Offset: 0x4dc, Size: 4]
	float marchDistance;//[Offset: 0x4e8, Size: 4]
	float travelDistance;//[Offset: 0x4ec, Size: 4]
	float DriveDistance;//[Offset: 0x4f0, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x4f4, Size: 4]
	int destroyVehicleNum;//[Offset: 0x4f8, Size: 4]
	int rescueTimes;//[Offset: 0x4fc, Size: 4]
	int NormalItemsNum;//[Offset: 0x500, Size: 4]
	int SeniorItemsNum;//[Offset: 0x504, Size: 4]
	int GVMemberID;//[Offset: 0x508, Size: 4]
	FName PlayerType;//[Offset: 0x510, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x518, Size: 8]
	uint32 PlayerKey;//[Offset: 0x520, Size: 4]
	FString PlayerUID;//[Offset: 0x528, Size: 16]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	FString iconUrl;//[Offset: 0x540, Size: 16]
	int gender;//[Offset: 0x550, Size: 4]
	int PlayerLevel;//[Offset: 0x554, Size: 4]
	int SegmentLevel;//[Offset: 0x558, Size: 4]
	int AceImprintShowId;//[Offset: 0x55c, Size: 4]
	int AvatarBoxId;//[Offset: 0x560, Size: 4]
	int CampID;//[Offset: 0x564, Size: 4]
	int resID;//[Offset: 0x568, Size: 4]
	uint64 UId;//[Offset: 0x570, Size: 8]
	FString OpenID;//[Offset: 0x578, Size: 16]
	FString Nation;//[Offset: 0x588, Size: 16]
	int TeamID;//[Offset: 0x598, Size: 4]
	int PlayerBornPointID;//[Offset: 0x59c, Size: 4]
	int Kills;//[Offset: 0x5a0, Size: 4]
	int KillsBeforeDie;//[Offset: 0x5a4, Size: 4]
	int Knockouts;//[Offset: 0x5a8, Size: 4]
	int Assists;//[Offset: 0x5b4, Size: 4]
	byte PlatformGender;//[Offset: 0x5b8, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x5bc, Size: 4]
	int MatchLabel;//[Offset: 0x5c0, Size: 4]
	uint32 Killer;//[Offset: 0x5c4, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x5c8, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x5d0, Size: 16]
	FString KillerName;//[Offset: 0x5e0, Size: 16]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x5f0, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x5f8, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x5fc, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x600, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x604, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x608, Size: 4]
	int HeadShotNum;//[Offset: 0x60c, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x610, Size: 4]
	int KillNumByGrende;//[Offset: 0x614, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x618, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x61c, Size: 4]
	int MaxKillDistance;//[Offset: 0x620, Size: 4]
	int HealTimes;//[Offset: 0x624, Size: 4]
	float DamageAmount;//[Offset: 0x628, Size: 4]
	float HealAmount;//[Offset: 0x62c, Size: 4]
	FString[] KillFlow;//[Offset: 0x630, Size: 16]
	FString[] KnockOutFlow;//[Offset: 0x640, Size: 16]
	KnockOutData[] KnockOutList;//[Offset: 0x650, Size: 16]
	float InDamageAmount;//[Offset: 0x660, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x678, Size: 16]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x690, Size: 80]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x6e0, Size: 88]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x740, Size: 80]
	GameModeLikeResultData[] Like;//[Offset: 0x790, Size: 16]
	uint32 Switch;//[Offset: 0x7a0, Size: 4]
	uint32[] Self;//[Offset: 0x7a8, Size: 16]
	UseItemFlow[] UseItemFlow;//[Offset: 0x7b8, Size: 16]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x7c8, Size: 16]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x7d8, Size: 16]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x7e8, Size: 16]
	<int,int> TLog_BulletCount;//[Offset: 0x7f8, Size: 80]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x848, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x854, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x858, Size: 16]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x868, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x86c, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x870, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x874, Size: 4]
	int[] BuildFlow;//[Offset: 0x878, Size: 16]
	int[] DestroyShelterFlow;//[Offset: 0x888, Size: 16]
	float ShelterTakeDamage;//[Offset: 0x898, Size: 4]
	float HitShelterDamage;//[Offset: 0x89c, Size: 4]
	Vector LandLocation;//[Offset: 0x8a0, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x8ac, Size: 12]
	int LandTime;//[Offset: 0x8b8, Size: 4]
	Vector DeadLocation;//[Offset: 0x8bc, Size: 12]
	FString DeadDamangeType;//[Offset: 0x8c8, Size: 16]
	int PveDeadAttacker;//[Offset: 0x8d8, Size: 4]
	int PveStageId;//[Offset: 0x8dc, Size: 4]
	FString DeadTimeStr;//[Offset: 0x8e0, Size: 16]
	int NearDeathDamageType;//[Offset: 0x8f0, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x8f4, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	EquipmentData EquipmentData;//[Offset: 0x908, Size: 112]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 1]
	int GamePlayingTime;//[Offset: 0x984, Size: 4]
	int ObserverTime;//[Offset: 0x988, Size: 4]
	int TouchDownAreaID;//[Offset: 0x98c, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x990, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x998, Size: 16]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x9b0, Size: 16]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x9c0, Size: 16]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x9d0, Size: 16]
	int[] SecretAreaIDList;//[Offset: 0x9e0, Size: 16]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x9f0, Size: 16]
	float DrivingHelicopterTime;//[Offset: 0xa00, Size: 4]
	float InHelicopterTime;//[Offset: 0xa04, Size: 4]
	int RevivalNum;//[Offset: 0xa08, Size: 4]
	int BeRevivedNum;//[Offset: 0xa0c, Size: 4]
	int KillNumInVehicle;//[Offset: 0xa10, Size: 4]
	int KillPlayerNum;//[Offset: 0xa14, Size: 4]
	int KillAINum;//[Offset: 0xa18, Size: 4]
	float TotalSprintDistance;//[Offset: 0xa1c, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xa20, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0xa24, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0xa28, Size: 16]
	int ProneTimes;//[Offset: 0xa38, Size: 4]
	int CrouchTimes;//[Offset: 0xa3c, Size: 4]
	int JumpTimes;//[Offset: 0xa40, Size: 4]
	int KillMonsterNum;//[Offset: 0xa44, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xa48, Size: 80]
	float TotalDamageAmountToMonsters;//[Offset: 0xa98, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0xa9c, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0xaa0, Size: 80]
	<int,float> DamageAmountFromMonsters;//[Offset: 0xaf0, Size: 80]
	int MonsterHeadShotKilledTimes;//[Offset: 0xb40, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0xb44, Size: 4]
	int LightCandleNum;//[Offset: 0xb48, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xb50, Size: 80]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xba0, Size: 16]
	float BattleStateTime;//[Offset: 0xbb0, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0xbb8, Size: 4]
	int FistKillingCount;//[Offset: 0xbbc, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0xbc0, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xbc8, Size: 80]
	FString[] DestroyVehicleFlow;//[Offset: 0xc18, Size: 16]
	int UseHelicoperNum;//[Offset: 0xc28, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xc30, Size: 16]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xc40, Size: 16]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xc50, Size: 40]
	float UseHelicoperDistance;//[Offset: 0xc78, Size: 4]
	byte CharmRankIndex;//[Offset: 0xc7c, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xc80, Size: 80]
	int SnowBoardJumpActionCount;//[Offset: 0xcd4, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xcd8, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xcdc, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xce0, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xce8, Size: 16]
	int KillSnowManCount;//[Offset: 0xcf8, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xd00, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xd08, Size: 80]
	int VeteranRecruitIndex;//[Offset: 0xd58, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xd60, Size: 16]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xd70, Size: 72]
	int MemberIdInVoiceRoom;//[Offset: 0xdb8, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xdc0, Size: 48]
	int UpassShow;//[Offset: 0xdf0, Size: 4]
	int upassKeepBuy;//[Offset: 0xdf4, Size: 4]
	int upassCurValue;//[Offset: 0xdf8, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xe00, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xe18, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xe1c, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xe20, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xe24, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xe28, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xe2c, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xe30, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xe34, Size: 4]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe90, Size: 128]
	void SetGVMemberIDServerCall(int memberID);// 0x37b7598
	void SetGVMemberID(int memberID);// 0x37b751c
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess);// 0x37b745c
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x37b7364
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x37b7244
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x37b70d0
	void ReportTaskData(int TaskID, int process);// 0x37b701c
	void ReportSpecialCollection(int ItemID, int Count);// 0x37b6f68
	void ReportSecretAreaID(int SecretAreaID);// 0x37b6eec
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x37b6e34
	void ReportLikeSwitch(int SwitchSetting);// 0x37b6db8
	void ReportLikeSelf(int LikeType);// 0x37b6d3c
	void ReportLandLocType(int TouchDownLocType);// 0x37b6cc0
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x37b6c08
	void ReportLandArea(int TouchDownArea);// 0x37b6b8c
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x37b6b10
	void OnRepCampIDBP();// 0x3b98fe4
	void OnRep_VeteranRecruitIndex();// 0x37b6afc
	void OnRep_UpdateKillMonsterNum();// 0x37b6ae0
	void OnRep_UID();// 0x37b6acc
	void OnRep_PlayerKillsChange();// 0x37b6ab0
	void OnRep_MatchLabel();// 0x37b6a9c
	void OnRep_CollectItemRecord();// 0x37b6a88
	void OnRep_CampID();// 0x37b6a74
	void OnRep_AliasInfo();// 0x37b6a60
	void OnClientVeteranRecruitIndexUpdated();// 0x37b6a44
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x37b69b4
	bool IsSpecialPickItem(int ItemID);// 0x37b6924
	bool IsItemForbidMerge(int ItemResId);// 0x37b688c
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x37b67b4
	int GetVeteranPlayerLevel();// 0x37b6778
	uint32 GetUserIDByMemberID(int memberID);// 0x37b66e4
	FString GetUIDString();// 0x37b6640
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x37b65d4
	uint32 GetPlayerKey();// 0x37b65a0
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x37b64dc
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x37b6470
	enum GetMentorPlayerType();// 0x37b6434
	void ForceUpdateCampCharacterList();// 0x37b6418
	void ClearTlogData();// 0x37b63fc
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x37b633c
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x37b6240

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x478, Size: 80]
	FString LuaFilePath;//[Offset: 0x4c8, Size: 16]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x398, Size: 8]
	int DecalId;//[Offset: 0x3a0, Size: 4]
	int TeamID;//[Offset: 0x3a4, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x3b0, Size: 128]
	STExtraPlayerState* OwnerPS;//[Offset: 0x430, Size: 8]
	STExtraVehicleBase* Vehicle;//[Offset: 0x438, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x440, Size: 8]
	int PostEventID;//[Offset: 0x448, Size: 4]
	void OnRep_DecalInfo();// 0x303571c

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x158, Size: 16]
	float MaxBreathAmount;//[Offset: 0x168, Size: 4]
	float DrowningHurtHight;//[Offset: 0x16c, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x170, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x174, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x178, Size: 4]
	float BreathDeltaTime;//[Offset: 0x17c, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x180, Size: 4]
	float MinSpeedScale;//[Offset: 0x184, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x188, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x18c, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x190, Size: 4]
	float RollMaxAngle;//[Offset: 0x194, Size: 4]
	float DistoVolume;//[Offset: 0x198, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x1b8, Size: 8]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x1c4, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x1c8, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x1d0, Size: 8]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x1d8, Size: 8]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x1e0, Size: 8]
	void UpdateSwimCollisionHeightCpp();// 0x30be83c
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x30be7c0
	void LeaveWater();// 0x30be7ac
	Actor* GetWaterObject();// 0x30be778
	void EnterWater_BluePrint();// 0x3b98fe4
	void EnterWater(Actor* WaterObject);// 0x30be6fc
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x3b98fe4

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x28, Size: 8]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x608, Size: 4]
	float AttachCheckDistance;//[Offset: 0x60c, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x610, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x614, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x618, Size: 8]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x638, Size: 16]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x648, Size: 16]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2f78ba0
	void UpdateDataWhenBagChangedOnAutonomous();// 0x2f78b8c
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x2f78a50
	void OnRecoverOnServer();// 0x2f78a34
	void OnReconnectOnServer();// 0x2f78a18
	void OnReconnectOnClient();// 0x2f789fc
	void OnDisconnectToClientOnServer();// 0x2f789e8
	int GetBagLevel();// 0x2f789ac

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x158, Size: 128]
	UAEGameMode* UAEGM;//[Offset: 0x1d8, Size: 8]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x30fa3b8
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x30fa2fc
	void ReportVerifyInfoFlow();// 0x30fa29c
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x30fa1c4
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x30fa0d8
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x30f9ff4
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x30f9f1c
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x30f9e3c
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x30f9d34
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x30f9c2c
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x30f9b54
	void ReportGameSetting(const GameSetting GameSetting);// 0x30f9a60
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x30f9980
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x30f98a8
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x30f97c8
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x30f96e8
	void ReportAimFlow(const AimFlow AimFlow);// 0x30f9608
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x30f957c
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x30f93d4
	void CheckSendGameStartFlow();// 0x30f93c0
	void CheckSendGameEndFlow();// 0x30f93ac

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x4d0, Size: 8]
	float GridCheckSize;//[Offset: 0x4d8, Size: 4]
	float DeepCheckSize;//[Offset: 0x4dc, Size: 4]
	float HeightCheckSize;//[Offset: 0x4e0, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x4e4, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f6, Size: 1]
	int AntiDataCD;//[Offset: 0x4f8, Size: 4]
	int WeatherID;//[Offset: 0x4fc, Size: 4]
	FString WeatherName;//[Offset: 0x500, Size: 16]
	int RoomMode;//[Offset: 0x510, Size: 4]
	int SeasonIdx;//[Offset: 0x514, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x518, Size: 4]
	FString ItemTableName;//[Offset: 0x520, Size: 16]
	FString ItemClassPath;//[Offset: 0x530, Size: 16]
	FString ReplayPushURL;//[Offset: 0x540, Size: 16]
	int ReplayType;//[Offset: 0x550, Size: 4]
	FString ReplayTitle;//[Offset: 0x558, Size: 16]
	enum EnableObserverEnemyTrace;//[Offset: 0x568, Size: 1]
	FString[] IgnoreItemClassPathList;//[Offset: 0x570, Size: 16]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x580, Size: 16]
	uint32 ServerStartTime;//[Offset: 0x590, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x598, Size: 16]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x5b0, Size: 16]
	FString VehicleTableName;//[Offset: 0x5c0, Size: 16]
	FString VehicleClassPath;//[Offset: 0x5d0, Size: 16]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	Vector RegionCenter;//[Offset: 0x5e4, Size: 12]
	float RegionRadius;//[Offset: 0x5f0, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x5f8, Size: 80]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x648, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x64c, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x650, Size: 8]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x65c, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x660, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x664, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x668, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x66c, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x678, Size: 16]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x688, Size: 8]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x690, Size: 16]
	Actor*[] DynamicTriggers;//[Offset: 0x6a0, Size: 16]
	int IsGameModeFpp;//[Offset: 0x6b0, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x6b8, Size: 16]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x6c8, Size: 80]
	BornItem[] BornItems;//[Offset: 0x718, Size: 16]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x730, Size: 16]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x740, Size: 16]
	int[] DynamicLevelArray;//[Offset: 0x750, Size: 16]
	FString RoomType;//[Offset: 0x760, Size: 16]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	int ZoneID;//[Offset: 0x774, Size: 4]
	int nClientType;//[Offset: 0x778, Size: 4]
	int nBattleType;//[Offset: 0x77c, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0xcf0, Size: 16]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xe18, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0xe48, Size: 16]
	uint32[] FiringPlayerList;//[Offset: 0xe58, Size: 16]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xe68, Size: 16]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xf50, Size: 16]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xf60, Size: 16]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xf70, Size: 16]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xf88, Size: 16]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xf98, Size: 16]
	FString GrenadeEffectPath;//[Offset: 0xfa8, Size: 16]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb9, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfba, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbb, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbc, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbd, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xfc0, Size: 16]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xfd4, Size: 4]
	float MonsterDropPar;//[Offset: 0xfd8, Size: 4]
	float SceneDropParam;//[Offset: 0xfdc, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xfe0, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xfe8, Size: 8]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xff0, Size: 8]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0x1000, Size: 16]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0x1010, Size: 16]
	FString SeasonStatueClassPath;//[Offset: 0x1020, Size: 16]
	FString StatueBaseClassPath;//[Offset: 0x1030, Size: 16]
	StatueBaseData StatueBaseInfo;//[Offset: 0x1040, Size: 104]
	int BattleStopJoin;//[Offset: 0x10a8, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0x10b0, Size: 16]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1160, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0x1168, Size: 16]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e9, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0x11ec, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0x11f0, Size: 8]
	void WriteStatistics();// 0x37a9868
	void SyncPlayerNames();// 0x37a984c
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x37a972c
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x37a9634
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x37a9544
	void SetGameEndReportData();// 0x37a9528
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x37a946c
	void RetrieveBattleData(out BattleData OutBattleData);// 0x37a93d8
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x37a931c
	void ResetGameParamsFromGameMode();// 0x37a9300
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x37a9244
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x37a911c
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x37a8ff4
	bool ReportCollectedEventData(out const FString UId, byte EventId, out const CollectedEventData Data);// 0x37a8e3c
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x37a8d80
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x37a8cfc
	void RefreshWorldActiveRange();// 0x37a8ce0
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x37a8c20
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UId);// 0x37a89e0
	int RecoardAlivePlayerNum();// 0x37a89a4
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x37a8910
	void OnStandAloneGameEnd();// 0x37a88f4
	void OnReportNetworkData();// 0x37a88d8
	void OnPlayerFiring(uint32 InPlayerKey);// 0x37a885c
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x37a87d8
	void OnObserverLogout(UAEPlayerController* InController);// 0x37a875c
	void OnObserverLogin(UAEPlayerController* InController);// 0x37a86e0
	void OnMsg(FString Msg);// 0x37a8630
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x37a8564
	void OnAirDropBoxEmpty(int boxId);// 0x37a84e0
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x37a83b4
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x37a8114
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x37a8054
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x37a7fc0
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x37a7f04
	void NotifyGameModeInit();// 0x37a7ee8
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x37a7e64
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x37a7de0
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x37a7cd8
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x37a7b38
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x37a7998
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x37a7848
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x37a77ac
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x37a771c
	bool IsCollectedEventEnabled(byte EventId);// 0x37a768c
	void InitWorldActiveRange();// 0x37a7670
	void InitSeasonStatue();// 0x37a7654
	void InitMissionBoard();// 0x37a7638
	void InitGenerator();// 0x37a761c
	void InitGameParamsFromGameMode();// 0x37a7600
	void InitDynamicTriggers();// 0x37a75e4
	void InitDynamicBuildingGroups();// 0x37a75c8
	void InitBornWithApple();// 0x37a75ac
	void InitAdvertisement();// 0x37a7590
	void Heartbeat();// 0x37a757c
	bool HasDynamicBuildingGroup();// 0x37a7544
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x37a73d4
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x37a7318
	int GetSurvivingTeamCount();// 0x37a72dc
	int GetSurvivingCharacterCount();// 0x37a72a0
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x37a7170
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x37a7040
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x37a6fa8
	UAEPlayerController*[] GetObserverControllerList();// 0x37a6f04
	void GetMonsterNum(out HeartBeatData Data);// 0x37a6e6c
	Vector GetClassicPlaneDirection();// 0x37a6e2c
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x37a6d64
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x37a6c9c
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x37a6c08
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x37a6b20
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x37a6a9c
	void DestroyAllPickUpObjs();// 0x37a6a88
	void DeleteSeasonStatue();// 0x37a6a6c
	void DeleteDynamicLoadItem();// 0x37a6a50
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x37a69cc
	void CreateDynamicBuildingGroups(Vector Offset);// 0x37a6950
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x3b98fe4
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x37a6888
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x37a6754
	void AddAirDropBox(int boxId, out const Vector pos);// 0x37a6688

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x4c0, Size: 16]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x3a8, Size: 8]
	FString StaticMeshPath;//[Offset: 0x3b0, Size: 16]
	FString PicUrl;//[Offset: 0x3c0, Size: 16]
	int ID;//[Offset: 0x3d0, Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x3d8, Size: 8]
	float NetCullDistance;//[Offset: 0x3e4, Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x3798164
	void OnRep_PicURL();// 0x3798150
	void OnRep_MeshPath();// 0x379813c
	void OnRep_Id();// 0x3798128

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x398, Size: 8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x3a1, Size: 1]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x210, Size: 16]
	byte RegionType;//[Offset: 0x220, Size: 1]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x228, Size: 16]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x238, Size: 16]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x250, Size: 80]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x2a0, Size: 80]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2f0, Size: 80]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x340, Size: 96]
	UAEDataTable* VehicleDataTable;//[Offset: 0x3a0, Size: 8]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x37bc6f8
	void WriteVehicleSpotStatisticsDatas();// 0x37bc6e4
	void WriteVehicleClassStatisticsDatas_V15();// 0x37bc6d0
	void WriteVehicleClassStatisticsDatas();// 0x37bc6bc
	void WriteAllVehicleStatisticsDatasToLog();// 0x37bc6a8
	void WriteAllVehicleStatisticsDatas_V15();// 0x37bc694
	void WriteAllVehicleStatisticsDatas();// 0x37bc680
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x37bc55c
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x37bc4d8
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x37bc344
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x37bc1b4
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x37bc020
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x37bbe90
	void RandomGroups();// 0x37bbe74
	void LoadVehicleGenerateTable();// 0x3b98fe4
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x37bbd10
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x37bbb24
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x37bb938
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x37bb72c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x37bb5a0
	void GenerateSpotOnTick(float DeltaTime);// 0x37bb51c
	void DeleteGroups();// 0x37bb508
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x37bb2e0
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x37bb12c

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2e8, Size: 1]
	byte RegionType;//[Offset: 0x2e9, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ea, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eb, Size: 1]
	float RandomRotationMin;//[Offset: 0x2ec, Size: 4]
	float RandomRotationMax;//[Offset: 0x2f0, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x2f8, Size: 40]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x324, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x37c4c98
	bool GenerateSpot();// 0x37c4c58

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x2d0, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x2d8, Size: 8]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x2e0, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x310, Size: 8]
	AkAudioEvent* SfxOutWater;//[Offset: 0x318, Size: 8]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x320, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x324, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x328, Size: 8]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x330, Size: 16]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x340, Size: 16]
	CameraComponent* LastActiveCamComp;//[Offset: 0x350, Size: 8]
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x324183c
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x32417c0

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x218, Size: 16]
	void ReleaseParachuteAnimAssets();// 0x3798cc4
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x3798b90
	void OnAnimListAsyncLoadingFinished();// 0x3798b7c
	bool HasAnimAsyncLoadingFinished();// 0x3798b44
	void HandleAsyncLoadingFinishedEvent();// 0x3798b30
	FString GetOwnerName();// 0x3798a84
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x37989f8

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x208, Size: 16]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x178, Size: 80]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x1c8, Size: 16]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x218, Size: 16]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x228, Size: 16]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x238, Size: 16]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x248, Size: 16]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x258, Size: 16]
	CurveFloat* FallingIKCurve;//[Offset: 0x268, Size: 8]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x270, Size: 16]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x280, Size: 16]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x293, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x379b1b8
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x379af68
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x379ad18
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x379ac24
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x379aad4

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x3a8, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x3b0, Size: 8]
	void RemingLifeTimeChanged(float previousRemaining);// 0x2f40264
	void RecordBonFireSuccess();// 0x2f40250
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x2f401d4
	void OnRep_HasBurnOut();// 0x2f401c0
	void OnRep_HasBeenLit();// 0x2f401ac
	void OnRep_CurRoastMeat();// 0x2f40198
	void IsBurnOutChanged();// 0x2f4017c
	FString CastMsg_Implementation(FString Msg);// 0x2f40058

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x398, Size: 8]
	Controller* GetTheInstigatorController();// 0x37985ac

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x398, Size: 8]
	enum AnimalType;//[Offset: 0x3a0, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	void RecordRoastMeatSuccess();// 0x30ef648
	void OnRep_IsDone();// 0x30ef634
	void CastActorMsg(FString Msg);// 0x30ef584

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0x110, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0x124, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x12c, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0x138, Size: 16]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x314f464
	void InitializeOwner(Pawn* _TempPawn);// 0x314f3e8
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x314f36c

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	<byte,VaultAnimData> VaultAnimSoftPtrMap;//[Offset: 0x160, Size: 80]
	AnimMontage* VaultMontage;//[Offset: 0x1b0, Size: 8]
	AnimMontage* TeamVaultMontage;//[Offset: 0x1b8, Size: 8]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x1c8, Size: 8]
	bool VaultFromCPP();// 0x30cd2a4
	void UpdateVault_BluePrint();// 0x30cd288
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x30cd204
	void StartAsyncLoadTeamVaultAnimRes();// 0x30cd1f0
	FString GetVaultKeyByBlockHeight(float Height);// 0x30cd0f4
	Rotator GetRelicateRotator();// 0x30cd0bc
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x30cceb8
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x30cccb4
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x30ccc38

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x4d4, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x4dc, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x4e4, Size: 4]
	float autoOpenAngel;//[Offset: 0x4e8, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x4ec, Size: 4]
	int doorState;//[Offset: 0x4f0, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	float DoorOperateTime;//[Offset: 0x4f8, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x500, Size: 8]
	BoxComponent* interactionBox;//[Offset: 0x508, Size: 8]
	BoxComponent* interForceBox;//[Offset: 0x510, Size: 8]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	int DoorStateEx;//[Offset: 0x51c, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x528, Size: 8]
	BoxComponent* interactionBoxEx;//[Offset: 0x530, Size: 8]
	BoxComponent* interForceBoxEx;//[Offset: 0x538, Size: 8]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x542, Size: 1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x548, Size: 16]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x558, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55e, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55f, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x568, Size: 8]
	float autoOpenAngelCosinValue;//[Offset: 0x570, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x580, Size: 8]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x590, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x598, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x5a8, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	void SetDoorBroken(bool bExtraDoor);// 0x30d53d0
	void RefreshUIOnClient();// 0x30d53bc
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x30d52fc
	void OnRep_RepDoorStateEx();// 0x30d52e8
	void OnRep_RepDoorState();// 0x30d52d4
	void OnRep_RepDoorBrokenEx();// 0x30d52c0
	void OnRep_RepDoorBroken();// 0x30d52ac
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x30d5180
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x30d5054
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x30d4f94
	void OnBPRespawned();// 0x30d4f78
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x30d4da0
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x30d4bc8
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x30d4b08
	bool IsSameDoorState(int ClientState);// 0x30d4a78
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x30d488c
	enum[] GetDamageableGameObjectType();// 0x30d47e0
	void ForceNetUpdate();// 0x30d47c4
	void DeCodeKey();// 0x30d47a8
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x30d46e8
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x30d4598
	void BPSetObjectPoolInitialData();// 0x30d457c
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x3b98fe4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x3b98fe4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x3b98fe4

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xd0, Size: 40]
	float blendTime;//[Offset: 0xf8, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x100, Size: 16]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x110, Size: 16]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x120, Size: 16]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x130, Size: 16]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x140, Size: 8]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x148, Size: 8]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x158, Size: 16]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x168, Size: 16]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x2f08434
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x2f08180
	bool HandleDrop(int InCount, enum Reason);// 0x2f080ac
	bool HandleDisuse(enum Reason);// 0x2f08014
	BackpackComponent* GetBackpackComponent();// 0x2f07fe0
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x2f07f14

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x28, Size: 4]
	float PropEndShowTime;//[Offset: 0x2c, Size: 4]
	delegate OnActionReady;//[Offset: 0x40, Size: 16]
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x2fbfcf8
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x2fbfc28
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x2fbfb58
	void Destroy();// 0x2fbfb3c
	void DelayShow();// 0x2fbfb20

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x120, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x128, Size: 8]
	FName FPPSocketName;//[Offset: 0x130, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x138, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0x140, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x148, Size: 4]
	float BoltActionFov;//[Offset: 0x14c, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x150, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x158, Size: 80]
	float ScopeZoomSpeed;//[Offset: 0x1a8, Size: 4]
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x1b0, Size: 80]
	int CurrentPlayAnimIndex;//[Offset: 0x200, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x204, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x218, Size: 80]
	<FName,float> ScopeZoomMap;//[Offset: 0x268, Size: 80]
	float TanHalfFOV;//[Offset: 0x2bc, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x2c8, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x2d0, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x2f2ddd0
	float SwitchSightConfigMaterial();// 0x3b98fe4
	void SwitchScopeMeshAnim(byte Type);// 0x2f2dd54
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x2f2dcd8
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x2f2dc5c
	void SwitchRearSight(bool IsBegin);// 0x2f2dbd0
	void SwitchCameraMode(byte Mode);// 0x2f2db54
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x3b98fe4
	void StopScopeIn();// 0x3b98fe4
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x3b98fe4
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x3b98fe4
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x2f2da8c
	void SetTagCulling(bool IsUse);// 0x3b98fe4
	void SetNearClipPlane(bool EnableNearClip);// 0x2f2da08
	void ScopingChange(bool InValue);// 0x2f2d984
	void Scoping(byte NewType);// 0x2f2d908
	void ScopeZoomUpdate(float Alpha);// 0x2f2d88c
	void ScopeZoomTick(float DeltaTime);// 0x2f2d810
	void ScopeTimelineUpdate(float Alpha);// 0x2f2d794
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x2f2d6e0
	void ScopeOutLogic();// 0x2f2d6cc
	void ScopeOutEnd();// 0x3b98fe4
	void ScopeOut(byte NewType);// 0x2f2d650
	void ScopeNotHandFold();// 0x2f2d63c
	void ScopeInterrupt(byte NewType);// 0x2f2d5c0
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x2f2d50c
	void ScopeInLogic();// 0x2f2d4f8
	void ScopeInEnd();// 0x3b98fe4
	void ScopeInContinue();// 0x2f2d4e4
	void ScopeInAfterTimeline();// 0x2f2d4d0
	void ScopeIn(byte NewType);// 0x2f2d454
	void ScopeHandFold();// 0x2f2d440
	void PlayScopeInTimeline();// 0x3b98fe4
	bool IsUseZoomScope();// 0x2f2d408
	bool IsRPGScopeIn();// 0x2f2d3d0
	bool IsCurWeaponAttachedAngledSight();// 0x2f2d398
	bool IsAngledSightBySlot(byte Slot);// 0x2f2d308
	bool IsAngledSight();// 0x2f2d2c8
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x2f2d214
	bool HaveAngledSightBySlot(byte Slot);// 0x2f2d184
	bool HaveAngledSight();// 0x2f2d14c
	byte GetSightType();// 0x2f2d118
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x2f2d054
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x2f2cf90
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled);// 0x3b98fe4
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x2f2cef4
	FName GetScopeAimCameraSocketName();// 0x2f2cec0
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x2f2cddc
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x2f2cc9c
	void BoltAction(float DeltaSeconds);// 0x2f2cc20
	void AttachToSightKeepTransform();// 0x3b98fe4
	void AttachToSight();// 0x3b98fe4
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x2f2cb40
	void ActiveComponentTickable();// 0x2f2cb2c

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0x110, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	float GuideInterval;//[Offset: 0x118, Size: 4]
	int MaxGuideLevel;//[Offset: 0x11c, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0x120, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0x148, Size: 16]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x158, Size: 16]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x168, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x190, Size: 16]
	STExtraPlayerController* OwnerController;//[Offset: 0x1a0, Size: 8]
	int[] FinishedTips;//[Offset: 0x1a8, Size: 16]
	int[] FinishedCounts;//[Offset: 0x1b8, Size: 16]
	int PlayerLevel;//[Offset: 0x1c8, Size: 4]
	byte curPlayerCategory;//[Offset: 0x1cc, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x3087648
	void ShowHideGuide(int TipsID, bool bShow);// 0x3087588
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x3087484
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x3087408
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x3b98fe4
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x30872c8
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x3087000
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x3086ef0
	void HandleNewbieGuideBegin(FString GuideID);// 0x3086e48
	bool GetIsAllowNewGuide();// 0x3086e10
	bool GetIsAllowLuaNewGuide();// 0x3086dd8
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x3086c98

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x28, Size: 16]

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x3270b90
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x3270aa8
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x3270938
	void RPC_GetClientTimeRequest(int Index);// 0x3270888
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x3270798
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x32706e8
	void ReportDebugInfo(int RporetedId);// 0x3270638
	void OnServerAboutToReconnect();// 0x3270624
	void GetClientTimeInterval();// 0x3270610
	void CheckTimeLine();// 0x32705fc

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float TimeStartDelay;//[Offset: 0x114, Size: 4]
	float SyncInterval;//[Offset: 0x118, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x3271b20
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x3271a9c
	void OnTimeInspectorColdMove_Vehicle();// 0x3271a88
	void OnTimeInspectorColdMove_Own();// 0x3271a74
	void OnServerAboutToReconnect();// 0x3271a60
	void CheckTimeLine();// 0x3271a4c

--------------------------------
Class: HiggsBosonComponent.ActorComponent.Object
	FString TraceData;//[Offset: 0x220, Size: 16]
	FString GameTraceData;//[Offset: 0x230, Size: 16]
	uint32 HeartBreaks;//[Offset: 0x240, Size: 4]
	FString HeartInfo;//[Offset: 0x248, Size: 16]
	delegate OnSwiftHawkDelegate;//[Offset: 0x258, Size: 16]
	delegate OnGlueHiaRayResult;//[Offset: 0x268, Size: 16]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x278, Size: 8]
	STExtraPlayerController* PlayerController;//[Offset: 0x280, Size: 8]
	void SwiftHawk(const byte[] Hawks, uint32 Magic);// 0x302f128
	void RPC_ServerGlueHiaPark(int8 HeShui, const byte[] GlueHiaParkArr, uint32 HiaStatus, const byte[] GlueArg);// 0x302ef60
	void RPC_ServerCapbo(int8 BoCapC, int8 InBoType, const byte[] BoDataArr);// 0x302ee00
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x302eca0
	void OnWeaponAimInput(float InDistToEnemy, float InYaw, float InPitch, float InRoll);// 0x302eb78
	void OnTouchInput(float InYaw, float InPitch, float InRoll);// 0x302ea88
	void OnStopFireEvent();// 0x302ea74
	void OnStartFireEvent();// 0x302ea60
	void OnSkillEndVisual(const Actor* InTarget, const Actor* InCauser);// 0x302e9ac
	void OnSkillEndTrans(const Actor* InTarget, const Actor* InCauser);// 0x302e8f8
	void OnSkillBeginVisual(const Actor* InTarget, const Actor* InCauser);// 0x302e844
	void OnSkillBeginTrans(const Actor* InTarget, const Actor* InCauser);// 0x302e790
	void OnPlayerScopeOut(bool bBegan);// 0x302e70c
	void OnPlayerScopeIn(bool bBegan);// 0x302e688
	void OnMyPawnRespawn(UAEPlayerController* InPlayerController);// 0x302e60c
	void OnKillSomeOneEvent(const Actor* InSomeOne);// 0x302e590
	void OnGyroInput(float InYaw, float InPitch, float InRoll);// 0x302e4a0
	void OnCapboReturn(int BoCapC, int InBoType, out const byte[] RetData);// 0x302e36c
	void OnBulletImpactEvent(const Actor* InCauser, out const HitResult InImpactResult);// 0x302e290
	void FlushGameEnd();// 0x302e27c
	void ClientSwiftHawk(int SequenceID);// 0x302e1f8

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x188, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x194, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x1a0, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x1ac, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x1b8, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x1c4, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x1d0, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x1dc, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x1e8, Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1f4, Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x200, Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x20c, Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x218, Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x224, Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x230, Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x248, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x254, Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x260, Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x278, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x284, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x290, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x2b4, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x2c0, Size: 12]
	VerifySwitch VsBulletID;//[Offset: 0x2cc, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x2d8, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x2e4, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x2f0, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2fc, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x308, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x314, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x318, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x31c, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x320, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x324, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x328, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x32c, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x330, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x334, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x338, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x33c, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x348, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x354, Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x360, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x36c, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x378, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x384, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x390, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x39c, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x3a8, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x3b4, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x3c0, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x3cc, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x3d8, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x3e4, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x3f0, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3fc, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x400, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x404, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x410, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x41c, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x428, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x434, Size: 12]
	float MaxFuelConsume;//[Offset: 0x440, Size: 4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x4c4, Size: 12]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x4d0, Size: 12]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x4dc, Size: 12]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x4e8, Size: 12]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x4f4, Size: 12]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x500, Size: 12]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x50c, Size: 12]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x518, Size: 12]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x524, Size: 12]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x534, Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x540, Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x54c, Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x558, Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x564, Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x570, Size: 12]
	VerifySwitch FarJump;//[Offset: 0x57c, Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x588, Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x594, Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x5a0, Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x5ac, Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x5b8, Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x5c4, Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x5d0, Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x5dc, Size: 12]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x5e8, Size: 40]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x610, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x614, Size: 12]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x63c, Size: 12]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x648, Size: 12]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x654, Size: 12]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x660, Size: 12]
	VerifySwitch BulletDirError;//[Offset: 0x66c, Size: 12]
	void ReportAntiCheatDetailData();// 0x30b373c
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x30b36ac
	void OnRecoverOnServer();// 0x30b3698
	void OnPreReconnectOnServer();// 0x30b3684

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0x110, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0x118, Size: 8]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0x120, Size: 8]
	void SetAutoOpenDoorMode(int Mode);// 0x2f83994
	void SetAutoOpenDoorEnable(bool bEnable);// 0x2f83910
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x2f83820
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int doorState);// 0x2f83730
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x2f836a0
	PUBGDoor* GetPriorityDoor();// 0x2f8366c
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x2f83528
	void BP_SimulateUIClick(bool bExtraDoor);// 0x3b98fe4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x3b98fe4

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0x114, Size: 4]
	FString Reason;//[Offset: 0x118, Size: 16]
	int[] audioChat;//[Offset: 0x128, Size: 16]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x138, Size: 16]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x148, Size: 16]
	QuickChatOption[] allChatOption;//[Offset: 0x158, Size: 16]
	FString TeammateColor;//[Offset: 0x168, Size: 16]
	FString MyColor;//[Offset: 0x178, Size: 16]
	<int,FString> ActorNameList;//[Offset: 0x188, Size: 80]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1d8, Size: 80]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x228, Size: 16]
	float SendMsgCD;//[Offset: 0x238, Size: 4]
	float lastShowChatTime;//[Offset: 0x23c, Size: 4]
	float ShowChatDuration;//[Offset: 0x240, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x248, Size: 16]
	FString EndChar;//[Offset: 0x258, Size: 16]
	FString ColonChar;//[Offset: 0x268, Size: 16]
	<int,int> TextID2AudioID;//[Offset: 0x278, Size: 80]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x2c8, Size: 16]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2d8, Size: 8]
	int itemIDOnGround;//[Offset: 0x2f8, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x2fc, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x300, Size: 8]
	Vector hitItemPosition;//[Offset: 0x308, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x318, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x328, Size: 16]
	FString CongregationPlayerKey;//[Offset: 0x338, Size: 16]
	InGameChatMsg CurrMsg;//[Offset: 0x348, Size: 96]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x3b98fe4
	void ShowTeamMsg(out const InGameChatMsg msgItem, bool isMe, bool ShowChat);// 0x2f7babc
	void ShowQuickPanel(bool bShow);// 0x2f7ba38
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x2f7b904
	void SendDirtyFilterContent(FString Content);// 0x3b98fe4
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x3b98fe4
	void ReportBattleChat(int MsgID, FString Msg);// 0x3b98fe4
	void OnInviteNextBattle(FString gid, FString Name);// 0x2f7b7f4
	void OnFilterFinish(FString filterText);// 0x3b98fe4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x3b98fe4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x3b98fe4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x3b98fe4
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x2f7b6e4
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x2f7b590
	void FindTextIDByAudioID();// 0x3b98fe4
	void CloseChatHistoryList();// 0x3b98fe4
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x2f7b440
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x2f7b388
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemID, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat);// 0x3b98fe4
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x2f7b058

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0x110, Size: 4]
	float PickUpZLimit;//[Offset: 0x114, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x120, Size: 16]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x130, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x134, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x138, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x13c, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x144, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x150, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x15c, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x160, Size: 4]
	float DrawTime;//[Offset: 0x164, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x170, Size: 8]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x178, Size: 16]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x188, Size: 16]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x30aaab8
	void ServerPutDownTarget(Actor* Target);// 0x30aaa08
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x30aa8a0
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x30aa660
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x30aa5a8
	void PutDownTarget(Actor* Target);// 0x30aa52c
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x30aa32c
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x30aa200
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x30aa184
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x30aa0c4
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x30aa034
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x30a9f50
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x30a9e5c
	void ControlClientPutDownTarget(Actor* Target);// 0x30a9dac
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x30a9cbc
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x30a9b10
	void ClampWorldLocation(out Vector OutVector);// 0x30a9a88

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0x110, Size: 16]
	Widget* MaskWidget;//[Offset: 0x120, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x302ab00
	void CreateGuideUI();// 0x3b98fe4

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x110, Size: 16]
	delegate OnDelSignMarkDelegate;//[Offset: 0x120, Size: 16]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int TextID_OutRange;//[Offset: 0x134, Size: 4]
	FString PreFix_Command;//[Offset: 0x138, Size: 16]
	FString PreFix_Command_Res;//[Offset: 0x148, Size: 16]
	FString PreFix_Mark;//[Offset: 0x158, Size: 16]
	int MinTraceDist;//[Offset: 0x168, Size: 4]
	int MaxTraceDist;//[Offset: 0x16c, Size: 4]
	int ItemTraceDist;//[Offset: 0x170, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x174, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x178, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x17c, Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x180, Size: 8]
	<int,FString> CommandTypeIDMap;//[Offset: 0x188, Size: 80]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x1d8, Size: 80]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x228, Size: 80]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x278, Size: 80]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x2c8, Size: 80]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x318, Size: 80]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x368, Size: 16]
	FString[] TempIDArray;//[Offset: 0x378, Size: 16]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x388, Size: 80]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x3d8, Size: 80]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x428, Size: 80]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x478, Size: 80]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x30e7afc
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x3b98fe4
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x30e79d0
	void ServerDelMsg(FString MsgID);// 0x30e78f4
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x3b98fe4
	void RemoveActorMask(int ActorNetGUID);// 0x30e7844
	void OperMark(FString MsgID);// 0x30e779c
	void MakeQuickNeed(enum SignSubType);// 0x30e7720
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x30e76a4
	void MakeQuickMark();// 0x30e7690
	void MakeQuickCommand(byte SignType);// 0x30e7614
	bool IsSelfMark(FString MsgID);// 0x30e7558
	int GetVoiceAudioID(enum MsgType);// 0x3b98fe4
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x3b98fe4
	void DelMarkFromPool(FString MsgMark);// 0x30e74b0
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool IsSelf, bool ShowChat);// 0x30e7354
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool IsSelf);// 0x30e7250
	void ClientDelMsg(FString MsgID);// 0x30e71a0
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x30e7090
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x30e6fdc
	void AddActorMask(int ActorNetGUID);// 0x30e6f2c

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0x110, Size: 8]
	FString OwningPlayerName;//[Offset: 0x118, Size: 16]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0x128, Size: 16]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x138, Size: 80]
	int RetrieveUseItemAreaType(int ItemID, Vector PlayerLocation);// 0x2f33d0c
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x2f33c80
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x2f33b8c
	int RetrieveLandLocType(FString TargetName);// 0x2f33a50
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x2f33958
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x2f3384c
	bool IsTriggerActive(int InTaskID);// 0x2f337bc
	bool IsSpecialPickItem(int InItemID);// 0x2f3372c
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x2f333dc
	void HandlePlayerPickupItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x2f332ec
	void HandlePlayerKilling();// 0x2f332d8
	void HandlePlayerEnterArea(int AreaID);// 0x2f3325c
	void HandlePlayerDropItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x2f3316c
	void HandlePlayerDoEmote(int EmoteIndex);// 0x2f330f0
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x2f32f38
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x2f32e48
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x2f32da4
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x2f32d18
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x3b98fe4
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x3b98fe4
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x2f32bbc
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x2f32a84
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x3b98fe4
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x3b98fe4
	FString GetOwningPlayerName();// 0x2f329e0
	FString GetMapName();// 0x2f3293c
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x3b98fe4
	int GetItemUseAreaIDFromDataTable(int ItemID, Vector InPlayerLocation);// 0x3b98fe4
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x2f32784
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x2f326c4
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x2f325f4
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x2f323ec
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x2f322f4
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x2f32234

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x28, Size: 1]
	enum TriggerObjectType;//[Offset: 0x29, Size: 1]
	int EventDelayTime;//[Offset: 0x2c, Size: 4]
	int ActionDelayTime;//[Offset: 0x30, Size: 4]
	FString TriggerName;//[Offset: 0x38, Size: 16]
	Actor* OuterActor;//[Offset: 0x48, Size: 8]
	class Object[] TriggerEventsClass;//[Offset: 0x50, Size: 16]
	TriggerAction*[] TriggerActions;//[Offset: 0x60, Size: 16]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x70, Size: 16]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x80, Size: 8]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0xa0, Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0xa8, Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0xb0, Size: 8]
	FString DelayEventName;//[Offset: 0xb8, Size: 16]
	FString FiredEventName;//[Offset: 0xc8, Size: 16]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0xd8, Size: 80]
	<TriggerAction*> CompleteActions;//[Offset: 0x128, Size: 80]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x180, Size: 8]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float TickInterval;//[Offset: 0x1a4, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	Property*[] eventParams;//[Offset: 0x1b0, Size: 16]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 8]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	enum ExecPolicy;//[Offset: 0x39, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x40, Size: 8]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x48, Size: 8]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x78, Size: 88]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x3a0, Size: 16]
	FString[] ClassPaths;//[Offset: 0x3b0, Size: 16]
	FString ConfigFilePath;//[Offset: 0x3c0, Size: 16]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x3d0, Size: 8]
	FString ClientConfigFilePath;//[Offset: 0x3d8, Size: 16]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x3e8, Size: 24]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x400, Size: 80]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x450, Size: 16]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x460, Size: 8]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x468, Size: 80]
	VariableSet* AllVariableSet;//[Offset: 0x4b8, Size: 8]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x4c0, Size: 8]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x4c8, Size: 8]
	FString DescData;//[Offset: 0x4d0, Size: 16]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x4e0, Size: 8]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x4e8, Size: 80]
	TaskRepData TaskData;//[Offset: 0x540, Size: 24]
	bool StartLevelDirector();// 0x61cecc4
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x61ceb54
	void SetEnable(bool Enab);// 0x61cead4
	void S2Sim_CallExcuteAction();// 0x61ceab8
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x61cea08
	void OnRep_LevelDirectorData();// 0x61ce9f4
	bool InitialLevelDirector();// 0x61ce9b4
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x61ce79c
	bool GetHasBeenInit();// 0x61ce764
	VariableSet* GetDataSet();// 0x61ce730
	int GetCurTaskID();// 0x61ce6fc
	void ForceExecuteTrigger(FString TriggerName);// 0x61ce5c8
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x61ce3b0
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x61ce198
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x61cdf7c
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x61cdd64
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x61cdb08
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x61cd8f8
	void DeactiveNode(FString NodeName);// 0x61cd7c4
	void ClientExecuteAction(FString ActionClassName, int64 UId, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x61cd5b8
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x61cd448
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x61cd2d0
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x61cd158
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x61ccf48
	void ActiveNode(FString NodeName);// 0x61cce14

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x398, Size: 16]
	uint32 UniqueId;//[Offset: 0x3a8, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x3b0, Size: 8]
	void OnRep_LevelDirector();// 0x61cfaec
	void OnRep_ActionRepDatas();// 0x61cfad8
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x61cfa08

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x28, Size: 16]
	VariableSet* DataSet;//[Offset: 0x38, Size: 8]
	Actor* GetLastIteratorActor();// 0x61d110c

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x30, Size: 8]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x38, Size: 80]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x28, Size: 8]
	UFlowNodeRepData RepData;//[Offset: 0x30, Size: 24]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x68, Size: 8]
	enum NodeType;//[Offset: 0x70, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x78, Size: 16]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x38, Size: 80]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x90, Size: 80]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x28, Size: 16]
	Object* EventInstigator;//[Offset: 0x38, Size: 8]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x50, Size: 80]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 8]
	TriggerCondition*[] ChildConditions;//[Offset: 0x30, Size: 16]
	UAETriggerObject* ParentTrigger;//[Offset: 0x50, Size: 8]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x61cb9ec

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x1c8, Size: 8]
	byte[] TaskEventTypes;//[Offset: 0x1d0, Size: 16]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x1e0, Size: 16]
	int TaskID;//[Offset: 0x1f0, Size: 4]
	byte TaskType;//[Offset: 0x1f4, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x32c62b0
	void RedoAction();// 0x32c6294
	void NofityTriggerComplete();// 0x32c6278
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x32c61e0
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x32c6030
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x32c5f68
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x32c5ed4
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x32c5e48
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x32c5db4
	TriggerAction* CreateRedoAction(byte ActionType);// 0x32c5d20
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x32c5be4
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x32c5a60
	TriggerCondition* CreateKillPlayerCondition();// 0x32c5a2c
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x32c59a0
	TriggerAction* CreateDoAction(byte ActionType);// 0x32c590c
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x32c5880
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x32c57bc
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x32c5680
	TriggerAction* CreateAction(byte ActionType);// 0x32c55ec
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x32c53ec
	byte[] ConstructRedoActions();// 0x3b98fe4
	byte[] ConstructEvents();// 0x3b98fe4
	TriggerCondition* ConstructConditions();// 0x3b98fe4
	byte[] ConstructActions();// 0x3b98fe4
	void AddEventTypes(byte[] EventTypes);// 0x32c52b8
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x32c51dc

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x58, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	void SetTargetParam(int Value);// 0x3286748
	void SetConditionParam(int Value);// 0x32866c4
	bool IsSatisfy(const TriggerEvent* Event);// 0x328662c
	bool IsSameCondition(byte InTaskConditionType);// 0x3286594
	bool FillDataSource(VariableSet* InDataSource);// 0x32864fc
	bool DeactiveCondition(VariableSet* InDataSource);// 0x3286464
	bool CompareParam(VariableSet* InDataSource);// 0x32863cc
	bool ActiveCondition(VariableSet* InDataSource);// 0x3286334

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UId;//[Offset: 0x80, Size: 8]
	FString PlayerName;//[Offset: 0x88, Size: 16]
	FString PlayerOpenID;//[Offset: 0x98, Size: 16]
	FString PicUrl;//[Offset: 0xa8, Size: 16]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int TeamID;//[Offset: 0xbc, Size: 4]
	FString TeamName;//[Offset: 0xc0, Size: 16]
	Pawn* Character;//[Offset: 0xd0, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x398, Size: 8]
	Rotator TargetKillerRotation;//[Offset: 0x3a0, Size: 12]
	Actor* ReturnActor;//[Offset: 0x3b0, Size: 8]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x3d8, Size: 8]
	CameraComponent* ObservingCamera;//[Offset: 0x3e0, Size: 8]
	delegate OnTrackingEnd;//[Offset: 0x3e8, Size: 16]
	float MinMovingSpeed;//[Offset: 0x3f8, Size: 4]
	float MaxMovingTime;//[Offset: 0x3fc, Size: 4]
	float ObservingTime;//[Offset: 0x400, Size: 4]
	float TrackingDelay;//[Offset: 0x404, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x408, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x40c, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x414, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x41c, Size: 4]
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x3044fd0
	void ForceEnd();// 0x3044fbc

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x118, Size: 24]
	float LastFinishCD;//[Offset: 0x130, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0x138, Size: 8]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x140, Size: 8]
	STExtraPlayerCharacter* Character;//[Offset: 0x148, Size: 8]
	enum VehicleUserState;//[Offset: 0x150, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x158, Size: 8]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x160, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x168, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x178, Size: 16]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x188, Size: 16]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x198, Size: 8]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x1b4, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x1c8, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x1d8, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x1e8, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x1ec, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x1f0, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x1f4, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x1fc, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x200, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x204, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x208, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x210, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x220, Size: 8]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x228, Size: 8]
	Rotator InputExtraRot;//[Offset: 0x230, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x23c, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x24c, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x284, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x28c, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x294, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x298, Size: 4]
	enum CurrentSeatType;//[Offset: 0x29c, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x2d0, Size: 8]
	float FastestAllowDistance;//[Offset: 0x2d8, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x2dc, Size: 4]
	int VehicleIconID;//[Offset: 0x2e0, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x2fc, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x310, Size: 16]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x320, Size: 16]
	void UseVehicleWeaponOrNot();// 0x32f97dc
	void UpdateVehWeaponPassengerViewLimit();// 0x32f97c8
	void UpdatePassengerViewPitchLimit();// 0x32f97b4
	void TurnVehicle(float Rate);// 0x32f9738
	void TryUseHorn(bool bUse);// 0x32f96b4
	void TryShutDownUnmannedVehicle();// 0x32f96a0
	void TryPauseUnmannedVehicle();// 0x32f968c
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x32f95b0
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x32f9534
	void TryLaunchCurrentUnmannedVehicle();// 0x32f9514
	void TryExitVehicle();// 0x32f9500
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x32f9448
	void TryChangeVehicleSeat();// 0x32f9434
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x32f93a4
	bool TryChangeFreeFireSeatAndScopeIn();// 0x32f936c
	bool TryChangeFreeFireSeatAndLeanOut();// 0x32f9334
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x3b98fe4
	void TestMoveVehicleRight(float Rate);// 0x32f92b8
	void TestMoveVehicleForward(float Rate);// 0x32f923c
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x32f917c
	void StopFireVehicleWeapon();// 0x32f9168
	bool ShowVehicleWeaponUI();// 0x32f9130
	void SetVehicleUserState(enum UserState);// 0x32f90b8
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x32f9034
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x32f8fb8
	void SetIsAutoMoveForward(bool IsEnable);// 0x32f8f34
	void SetBrake(float Rate);// 0x32f8eb8
	void SetBoosting(bool bEnabled);// 0x32f8e34
	void SetAirControlF(float Rate);// 0x32f8db8
	void SetAirControlB(float Rate);// 0x32f8d3c
	void ServerUseVehicleWeaponOrNot(int SeatId, bool bUse);// 0x32f8c38
	void ServerStopFireVehicleWeapon();// 0x32f8bd8
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x32f8b28
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x32f8a5c
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x32f89e0
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x32f891c
	void Server_JoystickCenterClickHandler();// 0x32f88bc
	void SendToServerUnmannedVehicleUse();// 0x32f885c
	void SendToServerUnmannedVehicleRecall();// 0x32f87fc
	void SendToServerUnmannedVehiclePause();// 0x32f879c
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x32f8710
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x32f8648
	void RspLeanOut(bool bOut);// 0x32f85bc
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x32f84f4
	void RspExitVehicle(bool bSuccess);// 0x32f8468
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x32f8364
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x32f821c
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);// 0x32f8088
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x32f7fa0
	void ReqShutDownUnmannedVehicle();// 0x32f7f40
	void ReqQuickSwitchSeat();// 0x32f7f2c
	void ReqPauseUnmannedVehicle();// 0x32f7ecc
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x32f7de4
	void ReqLeanOut(bool IsLeanOut);// 0x32f7d20
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x32f7c70
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x32f7bbc
	void ReqExchangeVehicleSeat();// 0x32f7b5c
	void ReqEraseLastDriveVehicle();// 0x32f7afc
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x32f7a0c
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x32f795c
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x32f7898
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x32f77d4
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x32f7710
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x32f7694
	void OnUnmannedVehicle_Standby_Reconnet();// 0x3b98fe4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x3b98fe4
	void OnServerReconnected();// 0x32f7680
	void OnScopeInAfterChangeSeat();// 0x32f766c
	void OnRep_DefineID();// 0x32f7658
	void OnRep_BornInVehicle();// 0x32f7644
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x3b98fe4
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x3b98fe4
	void OnPauseUnmannedVehicleCompleted();// 0x3b98fe4
	void OnLeanOutAfterChangeSeat();// 0x32f7630
	void OnLaunchUnmannedVehicleCompleted();// 0x3b98fe4
	void OnInputAxisMoveRight(float Rate);// 0x3b98fe4
	void OnInputAxisMoveForward(float Rate);// 0x3b98fe4
	void OnExitVehicleCompleted();// 0x3b98fe4
	void OnEnterVehicleCompleted(enum SeatType);// 0x3b98fe4
	void OnCurrrentClosestVehicleChanged();// 0x3b98fe4
	void OnClientReconnected();// 0x32f761c
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x3b98fe4
	void NotifyLeaveVehicleFailed();// 0x32f7600
	void MoveVehicleUp(float Rate);// 0x32f7584
	void MoveVehicleRight(float Rate);// 0x32f7508
	void MoveVehicleForward(float Rate);// 0x32f748c
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x32f73cc
	bool IsControllingUnmannedVehicle();// 0x32f739c
	bool IgnoreVehicleLookInput();// 0x32f7364
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x32f72e8
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x32f72d4
	void HandleLocalBackpackCurrentWeaponFinished();// 0x32f72c0
	bool HandleClientReconnecting();// 0x32f7288
	enum GetVehicleUserState();// 0x32f726c
	STExtraVehicleBase* GetVehicle();// 0x32f7250
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x32f7234
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x32f7200
	bool GetAssistantState();// 0x32f71c8
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x32f708c
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x32f6f44
	void FlipTrackVehicleDirection();// 0x32f6f30
	void FireVehicleWeapon();// 0x32f6f1c
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x32f6e4c
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x32f6d9c
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x32f6d18
	void Client_UnbindTouchEvents();// 0x32f6cb8
	void Client_ShouldBindTouchEvents();// 0x32f6c58
	bool CheckCanLeanOutVehicle();// 0x32f6c20
	void ChangeAssistantState(bool bEnter);// 0x32f6b9c
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x32f6b0c
	bool CanUseVehicleHorn();// 0x32f6ad4
	void BrakeTrackVehicle(bool bIsBrake);// 0x32f6a50
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x32f69cc
	void AddVehicleFuel(float amount);// 0x32f6950

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x110, Size: 16]
	enum StartStateType;//[Offset: 0x120, Size: 1]
	enum FinishStateType;//[Offset: 0x121, Size: 1]
	State* CurrentState;//[Offset: 0x128, Size: 8]
	enum CurrentStateType;//[Offset: 0x130, Size: 1]
	enum LastStateType;//[Offset: 0x131, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x5c0, Size: 16]
	FString TreasureBoxName;//[Offset: 0x5d0, Size: 16]
	float TotalHP;//[Offset: 0x5e0, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x5e4, Size: 4]
	float TotalTime;//[Offset: 0x5e8, Size: 4]
	int boxId;//[Offset: 0x5ec, Size: 4]
	Vector GroupLoc;//[Offset: 0x5f0, Size: 12]
	float DestroyTime;//[Offset: 0x5fc, Size: 4]
	float OperationalDistance;//[Offset: 0x600, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x604, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x608, Size: 8]
	Transform StandbyEffectTrans;//[Offset: 0x610, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x640, Size: 8]
	Transform OpenningEffectTrans;//[Offset: 0x650, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x680, Size: 8]
	Transform OpennedEffectTrans;//[Offset: 0x690, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x6c0, Size: 8]
	Transform BrokenEffect1Trans;//[Offset: 0x6d0, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x700, Size: 8]
	Transform BrokenEffect2Trans;//[Offset: 0x710, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x740, Size: 8]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x748, Size: 8]
	SceneComponent* DefaultRoot;//[Offset: 0x750, Size: 8]
	class Controller[] InstigatorList;//[Offset: 0x758, Size: 16]
	class Actor[] DamageCauserList;//[Offset: 0x768, Size: 16]
	enum PickUpBoxType;//[Offset: 0x778, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 1]
	int IconID;//[Offset: 0x77c, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ea, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7eb, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x7ec, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x7f0, Size: 4]
	int HideLightColumn;//[Offset: 0x7f4, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x7f8, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x7fc, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x800, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x808, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x80c, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x810, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x81c, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82a, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x830, Size: 8]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x838, Size: 8]
	float StartedTime;//[Offset: 0x858, Size: 4]
	enum CurState;//[Offset: 0x85c, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x860, Size: 4]
	int StartedTeamId;//[Offset: 0x864, Size: 4]
	float CountdownTime;//[Offset: 0x868, Size: 4]
	float StartDestroytime;//[Offset: 0x86c, Size: 4]
	int MonsterBoxId;//[Offset: 0x870, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x874, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x878, Size: 80]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x8d0, Size: 8]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x8d8, Size: 8]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x8e0, Size: 8]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x8e8, Size: 8]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x8f0, Size: 8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x8f8, Size: 8]
	Object* TriggerActionHost;//[Offset: 0x938, Size: 8]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x3b98fe4
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x306da6c
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x3b98fe4
	void SetClientClientAutoActiveBoxCD(int CD);// 0x306d9f0
	void SetAutoActiveBoxCD(int leftTime);// 0x306d974
	void OnTreasureBoxPicked__DelegateSignature();// 0x3b98fe4
	void OnSomeonePickItem(uint32 InPC);// 0x306d8f8
	void OnRep_HideLightColumn();// 0x306d8e4
	void OnRep_CurState();// 0x306d8d0
	void OnBoxEmpty();// 0x306d8bc
	void OnAnimationStop();// 0x306d8a8
	bool IsShowIcon();// 0x306d870
	int GetMonsterBoxId();// 0x306d83c
	enum[] GetDamageableGameObjectType();// 0x306d790
	enum GetCurState();// 0x306d75c
	int GetClientClientAutoActiveBoxCD();// 0x306d728
	void DeActiveMonsterTreasureBox();// 0x306d714
	bool CanBeDamaged();// 0x306d6dc
	void BPRepCurState();// 0x3b98fe4
	void BPOnStopMonsterTreasureBox();// 0x3b98fe4
	void BPOnStartMonsterTreasureBox();// 0x3b98fe4
	void BPOnHideLightColumn();// 0x3b98fe4
	void BPOnCountdownEnd();// 0x3b98fe4
	void BPOnBreakMonsterTreasureBox();// 0x3b98fe4
	void BPOnAnimationStop();// 0x3b98fe4
	void BPOnAnimationAkAudioStop();// 0x3b98fe4
	void BPOnAnimationAkAudioStart();// 0x3b98fe4
	FString BPGetTreasureBoxName();// 0x3b98fe4

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x468, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x46c, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x470, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x474, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x478, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x480, Size: 16]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x490, Size: 80]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	byte[] SerializeData;//[Offset: 0x550, Size: 16]
	void OnRep_WindowList();// 0x37ad65c
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x37ad4d4

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x118, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0x120, Size: 136]
	int produceID;//[Offset: 0x1a8, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x1ac, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x1b8, Size: 16]
	int GridStep;//[Offset: 0x1c8, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x1d0, Size: 8]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x1e0, Size: 16]
	int[] NightDropPlanIDList;//[Offset: 0x1f0, Size: 16]
	int[] DayDropPlanIDList;//[Offset: 0x200, Size: 16]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x210, Size: 8]
	ParticleSystem* DropGroundEffect;//[Offset: 0x228, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x260, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x290, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x298, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x2a0, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x2ac, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x2b0, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x2b4, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x2b8, Size: 4]
	int OpenDropGroundEffect;//[Offset: 0x2bc, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x2c0, Size: 4]
	float MaxTraceDist;//[Offset: 0x2c4, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x2d0, Size: 16]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x2e0, Size: 8]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x30d15c8
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x30d1514
	void SetProduceID(int produceID);// 0x30d149c
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x30d1360
	void SetDropPlanIDList(out int[] IDList);// 0x30d12a8
	void SetDropItemLifeSpan(int ItemTime);// 0x30d122c
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x30d1098
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x30d0ec4
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x30d0da4
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x30d0c98
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x30d0bf4
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x30d0af4
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x30d09c0
	int GetCountStrNum(FString CountStr);// 0x30d0884
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x30d0758
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x30d062c
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x30d0314
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x30d021c
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x30d0110
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x30cfee8
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x30cfddc
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x30cfc98
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x30cfb74
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x30cfa68

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0x110, Size: 8]
	Vector CustomStartOffset;//[Offset: 0x118, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0x128, Size: 4]
	float CustomGravity;//[Offset: 0x12c, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0x130, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0x134, Size: 4]
	float ParticleScale;//[Offset: 0x138, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0x140, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x168, Size: 8]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x174, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x178, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1a0, Size: 8]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1a8, Size: 16]
	CurveFloat* AnimCurve;//[Offset: 0x1b8, Size: 8]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x2fa78e8
	void OnDropGroundLoadFinsh();// 0x2fa78d4
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x2fa77a4
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x2fa76b0

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x7d0, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x7d8, Size: 8]
	StaticMesh* BrokenMesh;//[Offset: 0x7e0, Size: 8]
	ParticleSystem* BrokenEffect;//[Offset: 0x7e8, Size: 8]
	void NotifyServerBroken();// 0x3b98fe4
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x37ba67c
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x3b98fe4
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x37ba5ac
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x37ba4ec
	UAEWindowRepData GetRepData();// 0x37ba420

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x398, Size: 8]
	MeshComponent* WeaponMesh;//[Offset: 0x3a0, Size: 8]
	STExtraPlayerController* ASTPC;//[Offset: 0x3a8, Size: 8]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x3b0, Size: 16]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x3c0, Size: 80]
	class AnimInstance* animBP;//[Offset: 0x410, Size: 8]
	delegate OnWeaponBlendAnim;//[Offset: 0x418, Size: 16]
	int CurUseWeaponSkinID;//[Offset: 0x428, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x430, Size: 80]
	FName OBPlayerName;//[Offset: 0x480, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x488, Size: 8]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x490, Size: 8]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x498, Size: 8]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x4a0, Size: 16]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x4b0, Size: 16]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x4c0, Size: 8]
	FName[] HideBoneNames;//[Offset: 0x4c8, Size: 16]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x4d8, Size: 16]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x4e8, Size: 16]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x4f8, Size: 8]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x500, Size: 8]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x2ee69cc
	void SetEnable(bool IsEnable);// 0x2ee6948
	void ResetWeaponPendant(int WeaponId);// 0x2ee68cc
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x2ee6850
	void RenderCaptureScene();// 0x2ee683c
	void RefreshAvatar();// 0x2ee6828
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x2ee6784
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x2ee66b8
	void OnSimulatedWeaponChanged();// 0x2ee66a4
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemID);// 0x2ee65a0
	void OnAvatarAllMeshLoaded();// 0x2ee658c
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x2ee6480
	int[] GetWeaponSkinIDs();// 0x2ee63dc
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x2ee63a8
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x2ee6264
	void EquipWeapon();// 0x2ee6250
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x2ee61d4
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x2ee610c
	void CreateWeapon(bool IsSkeletalMesh);// 0x2ee6088
	void BluePrintSetEnable(bool IsEnable);// 0x3b98fe4
	void ApplyAnimation();// 0x2ee6074

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x350, Size: 1]
	float FOVAngle;//[Offset: 0x354, Size: 4]
	float OrthoWidth;//[Offset: 0x358, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x360, Size: 8]
	byte CaptureSource;//[Offset: 0x368, Size: 1]
	byte CompositeMode;//[Offset: 0x369, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x370, Size: 1376]
	float PostProcessBlendWeight;//[Offset: 0x8d0, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x8e0, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x924, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x930, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93c, Size: 1]
	void CaptureScene();// 0x55b1220
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x55b10e0

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2c9, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2d0, Size: 16]
	Actor*[] HiddenActors;//[Offset: 0x2e0, Size: 16]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2f0, Size: 16]
	Actor*[] ShowOnlyActors;//[Offset: 0x300, Size: 16]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	float LODDistanceFactor;//[Offset: 0x314, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x318, Size: 4]
	int CaptureSortPriority;//[Offset: 0x31c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x320, Size: 16]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x55b0b64
	void ShowOnlyActorComponents(Actor* InActor);// 0x55b0ae8
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x55b0a6c
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x55b09f0
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x55b0974
	void HideComponent(PrimitiveComponent* InComponent);// 0x55b08f8
	void HideActorComponents(Actor* InActor);// 0x55b087c
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x55b0800
	void ClearHiddenComponents();// 0x55b07ec

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f9, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x3fc, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x400, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x404, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x410, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x414, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x418, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x41c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x420, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x424, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x428, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x430, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x434, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x43c, Size: 4]
	float FarShadowDistance;//[Offset: 0x440, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x444, Size: 4]
	float LightSourceAngle;//[Offset: 0x448, Size: 4]
	float TraceDistance;//[Offset: 0x44c, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x450, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x464, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x468, Size: 16]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x478, Size: 1]
	float ShadowControl;//[Offset: 0x47c, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x480, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x488, Size: 8]
	float CloudShadowTileSize;//[Offset: 0x490, Size: 4]
	float CloudShadowDensity;//[Offset: 0x494, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x498, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x548c158
	void SetOcclusionMaskDarkness(float NewValue);// 0x548c0dc
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x548c060
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x548bfdc
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x548bf60
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x548bee4
	void SetDynamicShadowCascades(int NewValue);// 0x548be68
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x548bde0
	void SetCloudShadowTileSize(float InValue);// 0x548bd64
	void SetCloudShadowTexture(Texture* InTexture);// 0x548bce8
	void SetCloudShadowDensity(float InDensity);// 0x548bc6c
	void SetCastsCloudShadow(bool InValue);// 0x548bbe8
	void SetCascadeTransitionFraction(float NewValue);// 0x548bb6c
	void SetCascadeDistributionExponent(float NewValue);// 0x548baf0

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x398, Size: 80]
	class Actor[] IgnoreActorClass;//[Offset: 0x3e8, Size: 16]
	float DecalLongestDistance;//[Offset: 0x3f8, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x438, Size: 16]
	RuntimeMeshComponent* Decal;//[Offset: 0x700, Size: 8]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x3036274
	bool RemoveDecal(const int ID);// 0x30361e4
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x3035ee0

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xd0, Size: 8]
	Texture* DecalTexure;//[Offset: 0xd8, Size: 8]
	int CoordX;//[Offset: 0xe0, Size: 4]
	int CoordY;//[Offset: 0xe4, Size: 4]
	Vector2D DecalSize;//[Offset: 0xe8, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	int GifDecalFrameNum;//[Offset: 0xf4, Size: 4]
	float GifDecalFrameTime;//[Offset: 0xf8, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x100, Size: 8]
	float AttenuationRadius;//[Offset: 0x108, Size: 4]
	float OutputVolume;//[Offset: 0x10c, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x398, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x39c, Size: 4]
	int SupplyBulletNum;//[Offset: 0x3a0, Size: 4]
	float ValidDistance;//[Offset: 0x3a4, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x3a8, Size: 16]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x325f088

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x398, Size: 16]
	int AddMonsterExpNum;//[Offset: 0x3a8, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x3ac, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x3b0, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x3b4, Size: 4]
	float ValidDistance;//[Offset: 0x3b8, Size: 4]
	float SelfResetTime;//[Offset: 0x3bc, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	enum EnhancerState;//[Offset: 0x3c1, Size: 1]
	float ReadyTime;//[Offset: 0x3c4, Size: 4]
	float FixReadyTime;//[Offset: 0x3c8, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x3d0, Size: 16]
	void StateChangeDelegate();// 0x2fc1588
	void SetReadyTime(float SReadyTime);// 0x2fc150c
	void SetEState(enum EState);// 0x2fc1490
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x2fc13a0
	void ResetTimes();// 0x2fc138c
	void ResetSelf();// 0x2fc1378
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x2fc12f4
	void ReadyTimeChangeDelegate();// 0x2fc12d8
	void OpenEffect();// 0x2fc12bc
	void OnRep_StateChange();// 0x2fc12a8
	void OnRep_ReadyTimeChange();// 0x2fc1294
	void OnRep_FixReadyTimeChange();// 0x2fc1280
	enum GetSpotState();// 0x2fc1264
	void DelayResetSelf();// 0x2fc1250
	void CloseEffect();// 0x2fc1234

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x110, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x114, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x118, Size: 8]
	int64 StartObserverTime;//[Offset: 0x120, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x128, Size: 8]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x130, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x138, Size: 128]
	DateTime BePickupTime;//[Offset: 0x1b8, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x30bd314
	void SetRemainingRevivalTime(int InValue);// 0x30bd298
	void SetCaptureIDCardStatus(bool InValue);// 0x30bd214
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x30bd198
	void OnPlayerQuitSpectating();// 0x30bd184
	void OnPlayerGotoSpectating();// 0x30bd170
	void OnPlayerExitGame();// 0x30bd15c
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x30bd0d8
	void LeaveRevivalState(uint32 SaviorKey);// 0x30bd05c
	bool IsInWaittingRevivalState();// 0x30bd024
	int GetRevivalCountDownTime();// 0x30bd008
	int GetRemainingRevivalTime();// 0x30bcfd4
	bool GetCaptureIDCardStatus();// 0x30bcf9c
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x30bcf10
	void EnterRevivalState();// 0x30bcefc
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x30bce1c
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x30bcd3c

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x398, Size: 8]
	float SmokeStartScaleDistance;//[Offset: 0x3a0, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x3a4, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x3a8, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x3ac, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	float RevivalCDTime;//[Offset: 0x3b4, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	int RevivalCount;//[Offset: 0x3bc, Size: 4]
	int ID;//[Offset: 0x3c0, Size: 4]
	enum CurState;//[Offset: 0x3c4, Size: 1]
	enum PreState;//[Offset: 0x3c5, Size: 1]
	int RevivalTime;//[Offset: 0x3c8, Size: 4]
	int CurRevivalTime;//[Offset: 0x3cc, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	int OperationalDistance;//[Offset: 0x3d4, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x3d8, Size: 80]
	Transform PTowEleTransform;//[Offset: 0x430, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x460, Size: 80]
	FString ExParticleComponentTag;//[Offset: 0x4b0, Size: 16]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x4c0, Size: 80]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x510, Size: 8]
	int SmokingdisappearTime;//[Offset: 0x518, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	int IconID;//[Offset: 0x520, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x528, Size: 16]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x538, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x540, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x558, Size: 8]
	void StartRevival();// 0x30eebe8
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x30eeb58
	bool RecheckCurrentRevivingPlayers();// 0x30eeb20
	void OnRep_ShowSmoking();// 0x30eeb0c
	void OnRep_RevivalPointState(enum LastPreState);// 0x30eea90
	void OnRep_RevivalCDTimeCur();// 0x30eea7c
	void OnRep_CurrentRevivingPlayers();// 0x30eea68
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x30ee9d8
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x30ee948
	float GetRevivalCDTimeCurPercent();// 0x30ee914
	float GetRevivalCDTimeCur();// 0x30ee8e0
	float GetRevivalCDTime();// 0x30ee8ac
	int GetId();// 0x30ee878
	void DistanceChangedEvent(float Scale);// 0x3b98fe4

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0x128, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0x130, Size: 8]
	CurveFloat* OffsetYCurve;//[Offset: 0x138, Size: 8]
	Vector RandomVector;//[Offset: 0x140, Size: 12]
	float TextScale;//[Offset: 0x14c, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0x150, Size: 16]
	float HeadShotTextScale;//[Offset: 0x160, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x164, Size: 16]
	float BigDamageTextScale;//[Offset: 0x174, Size: 4]
	float BigDamage;//[Offset: 0x178, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x17c, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x18c, Size: 4]
	int FloatTextZorder;//[Offset: 0x190, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x198, Size: 16]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x1a8, Size: 16]
	float[] RecycleTimeList;//[Offset: 0x1b8, Size: 16]
	float RecycleTime;//[Offset: 0x1c8, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x1d0, Size: 8]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x2fed550
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x2fed4c0
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x3b98fe4
	void ReycleFloatingTextWidget();// 0x2fed4ac
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadShot);// 0x2fed390
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x2fed1c4
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x2fed10c
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x2fed030

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0x118, Size: 24]
	FString LastLoadedWeatherLevelName;//[Offset: 0x130, Size: 16]
	FString DefaultWeatherLevelName;//[Offset: 0x140, Size: 16]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	void UnloadStreamLevel(FString levelName);// 0x37c5860
	void SyncWeatherLevelInfo();// 0x37c584c
	void OnWeatherLevelChanged();// 0x3b98fe4
	void OnUnLoadStreamLevelCompleted();// 0x37c5838
	void OnRep_WeatherSyncCount();// 0x37c5824
	void OnLoadStreamLevelCompleted();// 0x37c5810
	void LoadWeatherLevel();// 0x37c57fc
	void LoadStreamLevel(FString levelName, int WeatherID);// 0x37c568c
	void LoadDefaultWeatherLevel();// 0x37c5678
	void Init();// 0x37c565c

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	int CircleIndex;//[Offset: 0x4f0, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x4f4, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x510, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x530, Size: 40]
	float TickOBPlayerCD;//[Offset: 0x558, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x55c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x560, Size: 8]
	DynamicWeatherController* DstController;//[Offset: 0x568, Size: 8]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x570, Size: 8]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x580, Size: 80]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x5e0, Size: 16]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x5f0, Size: 16]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x2faf09c
	void BlendToWeather(bool bDstWeather);// 0x2faf018

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x398, Size: 80]
	int CurUseFixWeatherIndex;//[Offset: 0x3e8, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x3ec, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x408, Size: 80]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x458, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x474, Size: 28]
	float ServerElapsedTime;//[Offset: 0x490, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x499, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x49c, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x4a8, Size: 16]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x4d0, Size: 8]
	enum UICountDownType;//[Offset: 0x4ea, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 1]
	void StartTransition();// 0x2faff54
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x2fafed8
	void RPCRequireControl();// 0x2fafec4
	void RPCRequire();// 0x2fafeb0
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x2fafe2c
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x2fafe10
	void ReinitInDemoReplay();// 0x2fafdfc
	void RefreshWeatherPredictionUI();// 0x2fafde8
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x2fafd58
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x2fafcc8
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x2fafc38
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x2fafba8
	void OnRep_NextWeatherCountDownTime();// 0x2fafb94
	void OnRep_ControllerDataForReplay();// 0x2fafb80
	void OnRep_ControllerData();// 0x2fafb6c
	void OnRep_bEnableWeatherPredictionUI();// 0x2fafb58
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x3b98fe4
	void HandleClientHasReactivated();// 0x2fafb44
	void GotoSpecificWeather(int WeatherIndex);// 0x2fafac8
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x2faf9e8
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x2faf948
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x2faf8bc
	float GetInProgressElapsedTimeSecWithWeather();// 0x2faf888
	float GetGlobalWeatherSystemTimeOnServer();// 0x2faf854
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x2faf81c
	void ForceStopDynamicWeatherChangeOnServer();// 0x2faf808
	void ForceStartNextWeatherChangeOnServer();// 0x2faf7f4
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x2faf750

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0x110, Size: 16]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0x120, Size: 16]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0x130, Size: 16]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0x140, Size: 16]
	delegate WeatherRecover;//[Offset: 0x150, Size: 16]
	enum DynamicWeatherType;//[Offset: 0x160, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x168, Size: 8]
	CurveFloat* LightCurve;//[Offset: 0x170, Size: 8]
	float TargetLightValue;//[Offset: 0x178, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x180, Size: 8]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x188, Size: 8]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x190, Size: 8]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x198, Size: 8]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x1a0, Size: 8]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x1a8, Size: 8]
	float UINotifyTimeBeforeStart;//[Offset: 0x1b0, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x1b8, Size: 16]
	int ChangeStartUINotifyID;//[Offset: 0x1c8, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x1cc, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x1d0, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x1d8, Size: 8]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x1e0, Size: 8]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x1e8, Size: 8]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x1f4, Size: 28]
	float RuningDirection;//[Offset: 0x210, Size: 4]
	float RuningTime;//[Offset: 0x214, Size: 4]
	float LerpTotalTime;//[Offset: 0x218, Size: 4]
	FString WeatherName;//[Offset: 0x220, Size: 16]
	DirectionalLight* MainLight;//[Offset: 0x230, Size: 8]
	SkyLight* SkyLight;//[Offset: 0x238, Size: 8]
	ExponentialHeightFog* Fog;//[Offset: 0x240, Size: 8]
	WeatherObject ObjectValues;//[Offset: 0x248, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x2b0, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x31c, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x384, Size: 12]
	void UINotifyCallbackOnServer();// 0x2fac7cc
	void OnUserQualitySettingChanged(int renderlevel);// 0x2fac748

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x550, Size: 72]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	Vector BlueCircle;//[Offset: 0x59c, Size: 12]
	Vector WhiteCircle;//[Offset: 0x5a8, Size: 12]
	float CirclePain;//[Offset: 0x5b4, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	AirAttackOrder AirAttackOrder;//[Offset: 0x5c0, Size: 64]
	Vector AirAttackArea;//[Offset: 0x600, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x610, Size: 16]
	delegate OnHideCircle;//[Offset: 0x620, Size: 16]
	delegate OnBlueCirclePreWarning;//[Offset: 0x630, Size: 16]
	delegate OnBlueCircleRun;//[Offset: 0x640, Size: 16]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x650, Size: 16]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x660, Size: 16]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x670, Size: 16]
	delegate VehicleDestroyedDelegate;//[Offset: 0x680, Size: 16]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x690, Size: 16]
	delegate STExtraCharacterDestroyed;//[Offset: 0x6a0, Size: 16]
	int PlayerNum;//[Offset: 0x6c0, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x6c8, Size: 16]
	delegate OnBeKilledNumChange;//[Offset: 0x6d8, Size: 16]
	delegate OnGameEnd;//[Offset: 0x6e8, Size: 16]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fa, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fb, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fe, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ff, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x702, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x703, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x706, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x707, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x710, Size: 16]
	int TrainingCountdownTimer;//[Offset: 0x720, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x728, Size: 16]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73a, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73b, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x740, Size: 16]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7aa, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ab, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x7b0, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x7b4, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x7b8, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x7bc, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c2, Size: 1]
	delegate OnAirAttack;//[Offset: 0x7c8, Size: 16]
	delegate OnInfectedAreaWarn;//[Offset: 0x7d8, Size: 16]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x7e8, Size: 16]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x800, Size: 16]
	FName[] EnableMapLayers;//[Offset: 0x810, Size: 16]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x820, Size: 8]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x828, Size: 8]
	class ModAdapter* ModAdapterClass;//[Offset: 0x830, Size: 8]
	ModAdapter* ModAdapter;//[Offset: 0x838, Size: 8]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x844, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x848, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x850, Size: 48]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x880, Size: 8]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	int ReadyStateTime;//[Offset: 0x898, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x8a0, Size: 16]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x8b8, Size: 16]
	int CurCircleWave;//[Offset: 0x8c8, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cd, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x8d0, Size: 4]
	FName GameModeState;//[Offset: 0x8e8, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	float timeFromLessen;//[Offset: 0x8f4, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x8f8, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x904, Size: 12]
	float timeForLessen;//[Offset: 0x910, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x920, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x924, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x928, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x92c, Size: 4]
	byte CurAirAttackType;//[Offset: 0x930, Size: 1]
	int CurAirAttackWave;//[Offset: 0x934, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x93c, Size: 4]
	float ExtraRadius;//[Offset: 0x940, Size: 4]
	int AlivePlayerNum;//[Offset: 0x944, Size: 4]
	int AliveTeamNum;//[Offset: 0x948, Size: 4]
	int NoneAIGameTime;//[Offset: 0x94c, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x950, Size: 16]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x960, Size: 16]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x970, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x978, Size: 16]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x988, Size: 160]
	enum GameModeType;//[Offset: 0xca8, Size: 1]
	enum GameModeConfigType;//[Offset: 0xca9, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xcaa, Size: 1]
	enum GameModeSubType;//[Offset: 0xcab, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xcac, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xcb0, Size: 16]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc1, Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc2, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xcd8, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xcdc, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xce0, Size: 16]
	delegate OnWeatherStateChange;//[Offset: 0xcf0, Size: 16]
	delegate OnWeatherSpeedChange;//[Offset: 0xd00, Size: 16]
	enum CurDynamicWeatherState;//[Offset: 0xd10, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xd18, Size: 80]
	float InviteCountDownTime;//[Offset: 0xd68, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xd70, Size: 16]
	Vector[] CircleArray;//[Offset: 0xd80, Size: 16]
	GameDataMining GameDataMining;//[Offset: 0xd90, Size: 72]
	uint64 GameID;//[Offset: 0xdd8, Size: 8]
	FString GameModeID;//[Offset: 0xde0, Size: 16]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xdf0, Size: 16]
	FString ModLogicSwitchTag;//[Offset: 0xe00, Size: 16]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xe10, Size: 16]
	bool bClientEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	bool bServerEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	FString GameScriptPath;//[Offset: 0xe28, Size: 16]
	FString LuaFileEntryFile;//[Offset: 0xe38, Size: 16]
	FString PreloadLuaFile;//[Offset: 0xe48, Size: 16]
	GameLuaEnv* LuaEnv;//[Offset: 0xe58, Size: 8]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xe60, Size: 8]
	Character* CurCastActorMsgOwner;//[Offset: 0xe68, Size: 8]
	float StartFlyTime;//[Offset: 0xe70, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xe78, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xe80, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xe88, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea1, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea2, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xea4, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xeac, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xeb0, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xed8, Size: 16]
	uint32[] FinalWinPlayers;//[Offset: 0xee8, Size: 16]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xef8, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefd, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xf00, Size: 16]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xf10, Size: 16]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf21, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf22, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf23, Size: 1]
	FString GuideImageName;//[Offset: 0xf28, Size: 16]
	FString GuideLuaTableName;//[Offset: 0xf38, Size: 16]
	FString GuideLuaFunctionName;//[Offset: 0xf48, Size: 16]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xf5c, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xf60, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf64, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xf68, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf71, Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0xf78, Size: 8]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xf80, Size: 8]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xf88, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xf98, Size: 16]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xfa8, Size: 16]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xfb8, Size: 16]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xfc8, Size: 8]
	class Actor* PreloadPoolActorClass;//[Offset: 0xfd0, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xff8, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0x1020, Size: 16]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0x1030, Size: 80]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0x1080, Size: 8]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x1088, Size: 8]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1090, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1091, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x1098, Size: 16]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a9, Size: 1]
	bool bEnableVehicleDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10aa, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0x10b0, Size: 16]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 1]
	FString FServerStartTime;//[Offset: 0x10c8, Size: 16]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0x10dc, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x10e0, Size: 16]
	FString MainWeaponTableName;//[Offset: 0x10f0, Size: 16]
	class Object[] PlaneAvatarClassArray;//[Offset: 0x1100, Size: 16]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0x1120, Size: 80]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0x1170, Size: 80]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0x11c0, Size: 8]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0x11c8, Size: 8]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d0, Size: 1]
	bool bEnablePlayerEventSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d1, Size: 1]
	bool bEnableAttrMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d2, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d3, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d4, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d5, Size: 1]
	int PlayerAddonCount;//[Offset: 0x11d8, Size: 4]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x3b98fe4
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x3b98fe4
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x31c2f84
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x31c2dd4
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x31c2ae8
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x31c2974
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x31c2838
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x31c2764
	void StartGameLua(out FString TGameScriptPath, out FString TLuaFileEntryFile, out FString TPreloadLuaFile);// 0x31c25b0
	void SimulateAirAttackOver();// 0x31c2550
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x31c242c
	void SetTagCulling(bool IsUse);// 0x31c23a8
	void SetServerStartTime(uint32 nServerStartTime);// 0x31c232c
	void SetSendStartFlow(uint32 PlayerKey);// 0x31c22b0
	void SetSendEndFlow(uint32 PlayerKey);// 0x31c2234
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x31c2138
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x31c20a4
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x31c2010
	void SetIsLowMatch(int nClientType);// 0x31c1f94
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x31c1eb8
	void SetCurAirAttackWave(int AirAttackWave);// 0x31c1e3c
	void SetCurAirAttackType(byte airattacktype);// 0x31c1dc0
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x31c1ce8
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x31c1c64
	void ServerRemoteDestroyAllActor();// 0x31c1c50
	void ServerRemoteDestroyActor(int SingleId);// 0x31c1bd4
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x31c1a94
	void RPC_Client_RemoteDestroyAllActor();// 0x31c1a78
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x31c19f4
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x31c1884
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x31c170c
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x3b98fe4
	void OnRep_WeatherStateChanged();// 0x31c16f8
	void OnRep_VisualFieldFeatureParam();// 0x31c16e4
	void OnRep_VeteranRecruitListUpdate();// 0x31c16d0
	void OnRep_UpassInfoList();// 0x31c16bc
	void OnRep_StartFlyTime();// 0x31c16a8
	void OnRep_ResetWeatherPlaySpeed();// 0x31c1694
	void OnRep_ReadyStateTime();// 0x31c1678
	void OnRep_ReadyStateCountingDown();// 0x31c1664
	void OnRep_PlayerNumChange();// 0x31c1650
	void OnRep_PlayerAddonCount();// 0x31c1634
	void OnRep_MarkSyncData();// 0x31c1620
	void OnRep_IsTrainingMode();// 0x31c160c
	void OnRep_IsShowDeadBox();// 0x31c15f8
	void OnRep_IsOpenDuelMode();// 0x31c15e4
	void OnRep_IsFPPMode();// 0x31c15d0
	void OnRep_IsDark();// 0x31c15bc
	void OnRep_GameTerminatorPlayerKey();// 0x31c15a8
	void OnRep_GameModeType();// 0x31c1594
	void OnRep_GameModeSubType();// 0x31c1580
	void OnRep_GameModeState();// 0x31c1564
	void OnRep_GameModeFeatureSet();// 0x31c1550
	void OnRep_FinalWinTeams();// 0x31c153c
	void OnRep_FinalWinPlayers();// 0x31c1528
	void OnRep_EnableSignalSystem();// 0x31c1514
	void OnRep_DynamicWeatherState();// 0x31c1500
	void OnRep_CircleArray();// 0x31c14ec
	void OnRep_AliveTeamNum();// 0x31c14d8
	void OnRep_AlivePlayerNum();// 0x31c14c4
	void OnRep_AirDropPathData();// 0x31c14b0
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x31c13f0
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x31c1338
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x3b98fe4
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x3b98fe4
	void OnGameModeDisplayNameChange();// 0x31c1324
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x31c1268
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x31c1170
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x31c10b8
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x31c1034
	bool IsSendStartFlow(uint32 PlayerKey);// 0x31c0fa4
	bool IsSendEndFlow(uint32 PlayerKey);// 0x31c0f14
	bool IsRevivalGame();// 0x31c0edc
	bool IsPVEMode();// 0x31c0ea4
	bool IsNoCircleInfo();// 0x31c0e6c
	bool IsMapUseTeamPattern();// 0x31c0e2c
	bool IsInNight();// 0x31c0dec
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x31c0d5c
	bool IsInBlueCircle(out const Vector pos);// 0x31c0cc0
	bool IsFeatureSupported(enum SubSystemType);// 0x31c0c28
	bool IsEnableDamageInfo();// 0x31c0be8
	GameLuaEnv* InitGameLua();// 0x31c0bb4
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x31c0b80
	int GetServerStartUnixTimestamp();// 0x31c0b4c
	FString GetServerStartTime();// 0x31c0aa8
	float GetRepServerWorldTimeSeconds();// 0x31c0a74
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x31c09f8
	int GetPVEWeatherPhaseIndex();// 0x31c09c4
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x31c0938
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x31c0904
	bool GetIsReadyStateReport();// 0x31c08c4
	FName GetGameModeState();// 0x31c0890
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x31c085c
	FString GetDSSwitchValue(const int InSwitchId);// 0x31c0768
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x31c0734
	enum GetCurWeatherState();// 0x31c0700
	enum GetCurDynamicWeatherState();// 0x31c06cc
	int GetCurCircleWave();// 0x31c06b0
	byte GetCurCircleState();// 0x31c066c
	int GetCurCircleIndex();// 0x31c0638
	GetCircleInfo GetCircleStateInfo();// 0x31c05cc
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x31c0518
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x31c0464
	int GetAlivePlayerNum();// 0x31c0430
	AirDropPathData3D GetAirDropPathData();// 0x31c02c0
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x31c0184
	void ExecuteCVarConfig();// 0x31c0170
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x31c00ac
	void ClearAirDropPathData();// 0x31c0098
	bool CheckIsLowMatch();// 0x31c0060
	void CheckInitLuaRemoteEvent();// 0x31c004c
	bool CheckDSSwitchOpen(const int SwitchId);// 0x31bffbc
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x31bfeec
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x31bfe70
	void ChangeDynamicWeatherState(enum DayState);// 0x31bfdf4
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x31bfd04
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x31bfb4c
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x31bf9d0
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x31bf854
	void BroadcastTemporaryMessage(FString Message);// 0x31bf7a4
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x31bf6b4
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x31bf4fc
	void BroadcastEndCircle();// 0x31bf49c
	void BroadcastCircleWaveOver(int Index);// 0x31bf3ec
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x31bf154
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex);// 0x31befac
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex);// 0x31beef0
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex);// 0x31bedb4
	void AsyncLoadResFinishCallback();// 0x31beda0
	void AsyncLoadCommonResFinishCallback();// 0x31bed8c
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x31becd0
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x31bec14
	void AddPveZombieGrenadeCount(int Value);// 0x31beb98
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x31beb1c
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x31be920

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x508, Size: 16]
	FString VehicleAttrReloadTableName;//[Offset: 0x518, Size: 16]
	FString DamageSearchTableName;//[Offset: 0x528, Size: 16]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x37ab604
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x37ab4e4
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x37ab438
	static VehicleAttrReloadTableStruct GetVehicleAttrReloadTableRow(int ID);// 0x37ab3b8

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x450, Size: 80]
	FString LuaFilePath;//[Offset: 0x4a0, Size: 16]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x3d8, Size: 8]
	FName PreviousMatchState;//[Offset: 0x3e0, Size: 8]
	int ElapsedTime;//[Offset: 0x3e8, Size: 4]
	void OnRep_MatchState();// 0x54ba27c
	void OnRep_ElapsedTime();// 0x54ba260

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x28, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x30, Size: 16]
	void SetViewMaskType(enum NewMaskType);// 0x3304368
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x33042d8
	void Init();// 0x33042c4
	int ClearViewMaskForActor(Actor* MaskActor);// 0x3304238
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x33041ac
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x33040e8

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x306a17c
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x306a014

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x58, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x60, Size: 80]
	<int,float> VisualAngleLimitMap;//[Offset: 0xb0, Size: 80]
	STExtraPlayerController* CachedLocalController;//[Offset: 0x100, Size: 8]

--------------------------------
Class: GameLuaEnv.Object
	FString GameScriptPath;//[Offset: 0x28, Size: 16]
	FString LuaFileEntryFile;//[Offset: 0x38, Size: 16]
	FString PreloadLuaFile;//[Offset: 0x48, Size: 16]
	FString[] ExportClasses;//[Offset: 0x58, Size: 16]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x68, Size: 8]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x78, Size: 8]
	LuaTimerManager* LuaTimerMgr;//[Offset: 0x88, Size: 8]
	LuaTriggerManager* LuaTriggerMgr;//[Offset: 0x90, Size: 8]
	GameLuaAPI* GameLuaAPI;//[Offset: 0x98, Size: 8]
	void SetStepGCLimitTime(double GCLimitTime);// 0x3001d54
	void PullLevelActors(Level* InLevel);// 0x3001cd8
	void PullDynamicLevelActors(Level* InLevel);// 0x3001c5c
	void LuaDoString(FString LuaString);// 0x3001bb4
	void InitLuaGlobalVariable();// 0x3001ba0
	void InitLuaGlobalTools();// 0x3001b8c
	void InitLuaFile();// 0x3001b78
	LuaEventBridge* GetLuaEventBridge();// 0x3001b44
	void CheckCreateSluaState();// 0x3001b30
	void CallLuaWaitGlobalScriptFunction(FString InFunctionName);// 0x3001a88
	void CallLuaGlobalScriptFunction(FString InFunctionName);// 0x30019e0

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x28, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x38, Size: 80]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x88, Size: 80]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xd8, Size: 80]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0x128, Size: 16]
	Property*[] Params;//[Offset: 0x138, Size: 16]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x33eff84
	LuaTemBPData*[] GetCurrentParam();// 0x33eff00
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x33efe74
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId);// 0x33efd0c

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: LuaTimerManager.Object
	STExtraGameInstance* GameInstance;//[Offset: 0x28, Size: 8]
	<int,TimerHandle> _timers;//[Offset: 0x38, Size: 80]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x460, Size: 16]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x470, Size: 16]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x480, Size: 16]
	delegate OnCampRoomChanged;//[Offset: 0x490, Size: 16]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x4a0, Size: 16]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x4b0, Size: 3]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x4b3, Size: 3]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x4b6, Size: 3]
	UserDetailSetting UserDetailSetting;//[Offset: 0x4bc, Size: 100]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	int iEnableRegionID;//[Offset: 0x558, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x560, Size: 16]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x570, Size: 16]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x580, Size: 16]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x590, Size: 16]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x5a0, Size: 16]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x5b0, Size: 16]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x5c0, Size: 16]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x5d0, Size: 16]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x5e0, Size: 16]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x5f0, Size: 16]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x600, Size: 16]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x610, Size: 16]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x620, Size: 16]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x630, Size: 16]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x640, Size: 16]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x650, Size: 16]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x660, Size: 16]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x670, Size: 16]
	FString[] RePairDeleteDir;//[Offset: 0x680, Size: 16]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x690, Size: 16]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x6a0, Size: 16]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x6b0, Size: 16]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x6c0, Size: 16]
	FString AutoTestMissionType;//[Offset: 0x6e0, Size: 16]
	FString CustomLineStr;//[Offset: 0x6f0, Size: 16]
	enum GamePlayMode;//[Offset: 0x700, Size: 4]
	Vector2D FOVRange;//[Offset: 0x704, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x70c, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x715, Size: 1]
	float SwimRotateX;//[Offset: 0x718, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c, Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x740, Size: 8]
	DeathPlayback* DeathPlayback;//[Offset: 0x748, Size: 8]
	CompletePlayback* CompletePlayback;//[Offset: 0x750, Size: 8]
	ObservingReplay* ObservingReplay;//[Offset: 0x758, Size: 8]
	ReplayUIManager* ReplayUIManager;//[Offset: 0x760, Size: 8]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x768, Size: 8]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x7e8, Size: 8]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x7f0, Size: 8]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x7f8, Size: 12]
	float DefaultGray;//[Offset: 0x804, Size: 4]
	RemoteControlManager* RemoteControlManager;//[Offset: 0x858, Size: 8]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x3b98fe4
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x3b98fe4
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x3b98fe4
	void UpdateWorldCullDistanceVolumes();// 0x31b6230
	void TestAyncLoad();// 0x31b621c
	void SuperBattle(FString IP);// 0x31b60e8
	void StopRemoteControl();// 0x31b60d4
	void StartRemoteControlWithFile();// 0x31b60c0
	void StartRemoteControl(FString Name, FString Host, int Port);// 0x31b5e74
	void SetWorldDoorCullDistance(int Distance);// 0x31b5df8
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x31b5c88
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x31b5bd0
	void SetWaterReflectionSetting(bool bDoOpen);// 0x31b5b4c
	void SetUserVulkanSetting(bool Enable);// 0x31b5ac8
	void SetUserSetingShadowQuality(bool bShadow);// 0x31b5a44
	void SetUserSetingMobilceContentSCale(float mcs);// 0x31b59c8
	bool SetSoundEffectQuality(int Type);// 0x31b5938
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x31b58a0
	void SetKillZValue(float KillZ);// 0x31b5824
	void SetHZBMobileState();// 0x31b5810
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x31b5794
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x31b561c
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x31b54a4
	static void SetCustomRouteLine();// 0x31b5490
	static void SetAutoMissionType();// 0x31b547c
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x3b98fe4
	void ReSetFOVScreenSizeCullingFactor();// 0x31b5468
	void RenderForLowFPS();// 0x31b5454
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x31b53d8
	void RefuseRenderForLowFPS();// 0x31b53c4
	void QuitGame();// 0x31b53b0
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x31b52cc
	void OnStopAutoTest();// 0x31b52b8
	void OnStartAutoTest();// 0x31b52a4
	void ObjectPoolServerSwitch(bool bOn);// 0x31b5220
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x31b51a4
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x31b5190
	bool IsViewedByReplay(const Actor* InActor);// 0x31b5100
	bool isUsingAssumedNameInReplay();// 0x31b50c8
	bool IsSupportTagCulling();// 0x31b50ac
	bool IsSupportSwitchSoundEffectQuality();// 0x31b5074
	bool IsSupportSwitchRenderLevelRuntime();// 0x31b503c
	bool IsSupportMSAA();// 0x31b5018
	bool IsSupportLDR();// 0x31b4ff4
	static bool IsSecAutoRunTest();// 0x31b4fbc
	bool IsRunningOnVulkan();// 0x31b4f84
	bool IsPVENightChangeCullDistance();// 0x31b4f4c
	bool IsPlayingObservingReplay();// 0x31b4f14
	bool IsOpenMSAA();// 0x31b4ee0
	bool IsOpenHDR();// 0x31b4ea8
	bool IsIOSOneGigabyteDevice();// 0x31b4e70
	static bool IsGAutomatorTest();// 0x31b4e38
	static bool IsAutoRunTestGamePVEProfile();// 0x31b4e00
	static bool IsAutoRunTestGamePVE();// 0x31b4dc8
	static bool IsAutoRunTestGameBindCompoment();// 0x31b4d90
	static bool IsAutoRunTestGame();// 0x31b4d58
	void GVoiceCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x3b98fe4
	void GMStandalone(FString Map);// 0x31b4c24
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x31b4bf0
	bool GetWaterReflectionSetting();// 0x31b4bb8
	bool GetUserVulkanSetting();// 0x31b4b80
	bool GetUserSetingShadowQuality();// 0x31b4b48
	int GetUserQualitySettingLevel();// 0x31b4b2c
	int GetSoundEffectQuality();// 0x31b4af8
	ReplayUIManager* GetReplayUIManager();// 0x31b4ac4
	RenderQualitySettings GetRenderQualityLastSet();// 0x31b4a70
	RenderQualitySettings GetRenderQualityApplying();// 0x31b4a1c
	ObservingReplay* GetObservingReplay();// 0x31b49e8
	bool GetIsFirstInitWaterReflectionSetting();// 0x31b49b0
	static STExtraGameInstance* GetInstance();// 0x31b498c
	int GetExactDeviceLevel();// 0x31b4958
	int GetDeviceUpdateVersionFlag();// 0x31b491c
	FString GetDeviceProfilerLevel();// 0x31b4878
	byte GetDeviceMaxSupportSoundEffect();// 0x31b4844
	byte GetDeviceMaxSupportLevel();// 0x31b4810
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x31b4784
	int GetDeviceLimit();// 0x31b4750
	int GetDeviceLevel();// 0x31b4714
	bool GetDefaultSoundEffectQuality();// 0x31b46dc
	DeathPlayback* GetDeathPlayback();// 0x31b46a8
	FString GetCurrentRHI();// 0x31b4604
	CompletePlayback* GetCompletePlayback();// 0x31b45d0
	static int GetAutoRunTestServerIdx();// 0x31b459c
	static FString GetAutoRunPassWD();// 0x31b44f8
	static FString GetAutoRunLuaTest();// 0x31b4454
	static FString GetAutoRunAccount();// 0x31b43b0
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x31b437c
	bool GetApplyingShadowQuality();// 0x31b4344
	FString GetActiveDeviceProfile();// 0x31b42a0
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x31b4090
	void EnableStreamingLevelLOD(bool bEnable);// 0x31b400c
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x31b3f1c
	bool DeleteSavedFiles(bool allfilesSaved);// 0x31b3e84
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x31b3dc0
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x31b3cfc
	void ChangeLevelFXActor(FString levelName, bool isLoad);// 0x31b3c0c
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x31b3b88
	void bHideGroundLevels(bool Disable);// 0x31b3b04
	void AutoActiveUltralHighRenderItems();// 0x31b3af0
	void AutoActiveLDR();// 0x31b3adc
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x31b3a60
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x31b39a8
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x31b389c
	void ActiveStyle_PP(byte Level);// 0x31b3818
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x31b370c
	void ActiveStyle(byte Level);// 0x31b3688
	void ActiveNightVision(bool bSet);// 0x31b3604
	void ActiveMSAA(bool bOpenMSAA);// 0x31b3580
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x31b3430

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x2a0, Size: 296]
	delegate EnginePreTick;//[Offset: 0x3c8, Size: 16]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x408, Size: 8]
	UIMsgBus* AssociatedUIMsgBus;//[Offset: 0x418, Size: 8]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x420, Size: 8]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x450, Size: 16]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x3404070
	void OpenAssetLoadLog();// 0x340405c
	void OnPreBattleResult__DelegateSignature();// 0x3b98fe4
	void LuaLeakDetect();// 0x3404048
	void LuaDoString(FString LuaString);// 0x3403fa0
	float GetWeatherTime();// 0x3403f84
	int GetWeatherID();// 0x3403f68
	UIMsgBus* GetUIMsgBus();// 0x3403f34
	LuaStateWrapper* GetLuaStateWrapper();// 0x3403f00
	FString GetGameID();// 0x3403e50
	int GetDeviceLevel();// 0x3403e14
	UAEDataTable* GetDataTable(FString tableName);// 0x3403d5c
	FrontendHUD* GetAssociatedFrontendHUD();// 0x3403d28
	void CloseAssetLoadLog();// 0x3403d14

--------------------------------
Class: UIMsgBus.CustomMsgBus.BlueprintFunctionLibrary.Object
	static UIMsgBus* GetUIMsgBus(Object* WorldContextObj);// 0x33ed380

--------------------------------
Class: CustomMsgBus.BlueprintFunctionLibrary.Object
	<FString,CustomGameMsgGroup*> MsgListenerGroupMap;//[Offset: 0x28, Size: 80]
	<FString,CustomTaggedGameMsgGroup*> TaggedMsgListenerGroupMap;//[Offset: 0x78, Size: 80]
	void UnRegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, const Object* InMsgLisenter);// 0x33ecd98
	void UnRegistMsgListener(FString InMsgName, const Object* InMsgLisenter);// 0x33ecc20
	void RegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, Object* InMsgLisenter);// 0x33ec9cc
	void RegistMsgListener(FString InMsgName, Object* InMsgLisenter);// 0x33ec854
	void PushTaggedMsg(FString InMsgName, FString InMsgTagName, CustomGameMsg* InTargetMsg, int TaggedMsgMaxProcessCount);// 0x33ec5c4
	void PushMsg(FString InMsgName, CustomGameMsg* InTargetMsg);// 0x33ec44c

--------------------------------
Class: CustomGameMsgGroup.Object
	FString MsgName;//[Offset: 0x28, Size: 16]
	Object*[] MsgListenerGroup;//[Offset: 0x38, Size: 16]

--------------------------------
Class: CustomTaggedGameMsgGroup.CustomGameMsgGroup.Object
	FString MsgTagName;//[Offset: 0x48, Size: 16]
	GameMsgCache[] CachedMsgList;//[Offset: 0x58, Size: 16]

--------------------------------
Class: CustomGameMsg.Object

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x28, Size: 16]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x38, Size: 16]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x78, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x80, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x88, Size: 16]
	void StopRecord(bool bRankFirst);// 0x332bcb0
	void StartRecord();// 0x332bc9c
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x332bab0
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x332b998
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x332b708
	void BuildOutputData();// 0x332b6f4
	void BuildContinuousKillOutputData();// 0x332b6e0

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool IsNewDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0x138, Size: 232]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x220, Size: 8]
	void SetReplayTimeDilation(float InDilation);// 0x2f9dbf0
	void SetMurderInfo();// 0x2f9dbdc
	void SetDeathReplayStatus(enum InDeathReplayStatus);// 0x2f9db60
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x2f9da6c
	void PlayReplayInTeam();// 0x2f9da50
	void OnKillOrPutDownMessageEvent();// 0x2f9da3c
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x2f9d9c0
	void OnClientObserveCharacterEvent();// 0x2f9d9ac
	bool IsSwitchedOffByDevice();// 0x2f9d974
	bool IsDeathReplayStatus(enum InDeathReplayStatus);// 0x2f9d8e4
	bool HaveRecordingData_New();// 0x2f9d8ac
	FString GetReplayTargetName();// 0x2f9d808
	STExtraPlayerCharacter* GetDeadCharacter();// 0x2f9d7d4
	void EnableSwitchBattleResultUI(bool Enable);// 0x2f9d750
	void EnableDeathPlayback(bool bEnable);// 0x2f9d6cc

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x38, Size: 8]
	class UserWidget* GMUIClass;//[Offset: 0x40, Size: 40]
	enum ReplayType;//[Offset: 0x68, Size: 1]
	ReplayUIManager* pReplayUIMgr;//[Offset: 0x80, Size: 8]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0x110, Size: 8]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0x120, Size: 16]
	bool StopRecordingReplay();// 0x3007404
	bool StopPlay();// 0x30073c4
	bool StartRecordingReplay();// 0x3007384
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x300720c
	void SetReplayStreamer(FString InReplayStreamer);// 0x3007098
	void SetIsGMSpectator(bool bGM);// 0x3007018
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x3006f9c
	void SetCanChangeViewTarget(bool bCanChange);// 0x3006f18
	void ResetPlaybackData();// 0x3006f04
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x3006e88
	void ReplayOnWeaponChanged();// 0x3006e74
	void ReplayOnSimulatedWeaponChanged();// 0x3006e60
	void ReplayOnBulletNumChanged();// 0x3006e4c
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x3006dd0
	bool PlayReplay();// 0x3006d90
	bool PauseReplay(bool bPaused);// 0x3006cf0
	bool IsInRecordState();// 0x3006cb8
	bool IsInPlayState();// 0x3006c80
	bool IsFastForwarding();// 0x3006c48
	bool HaveRecordingData();// 0x3006c08
	void HandleChangeStatePC();// 0x3006bf4
	STExtraBaseCharacter* GetViewCharacter();// 0x3006bc0
	FString GetSpectatorName();// 0x3006b1c
	PlayerCameraManager* GetPlayerCameraManager();// 0x3006ae8
	float GetCurrentReplayTotalTimeInSeconds();// 0x3006ab4
	float GetCurrentReplayCurTimeInSeconds();// 0x3006a80
	bool GetCanChangeViewTarget();// 0x3006a48

--------------------------------
Class: ReplayUIManager.Object
	STExtraPlayerController* pSTExtraPC;//[Offset: 0x30, Size: 8]
	STExtraGameInstance* pExtraInst;//[Offset: 0x38, Size: 8]
	STExtraPlayerState* pExtraPS;//[Offset: 0x40, Size: 8]
	STExtraBaseCharacter* pViewCharacter;//[Offset: 0x48, Size: 8]
	class UserWidget* ReplayUIPath;//[Offset: 0x50, Size: 40]
	ReplayUserWidget* pReplayUserWidget;//[Offset: 0x78, Size: 8]
	ReplayTeammateInfo[] SavedTeammateInfoArray;//[Offset: 0x80, Size: 16]
	<uint32,FString> AssumedMap_Key2name;//[Offset: 0x90, Size: 80]
	<FString,FString> AssumedMap_Name2name;//[Offset: 0xe0, Size: 80]
	int ReplayTargetTeamID;//[Offset: 0x148, Size: 4]
	FString ReplayTargetName;//[Offset: 0x150, Size: 16]
	void UpdateReplayUI();// 0x30eb5ac
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x30eb530
	void ReplayOnWeaponChanged();// 0x30eb51c
	void ReplayOnSimulatedWeaponChanged();// 0x30eb508
	void ReplayOnBulletNumChanged();// 0x30eb4f4
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x30eb478
	void ReleaseManager();// 0x30eb464
	void InitManager();// 0x30eb450
	void ChangeProgress();// 0x30eb43c

--------------------------------
Class: ReplayUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	byte DemoType;//[Offset: 0x3d0, Size: 1]
	FString ReplayNameStr;//[Offset: 0x3d8, Size: 16]
	int ReplayTeamID;//[Offset: 0x3e8, Size: 4]
	ReplayUIManager* pReplayUIManager;//[Offset: 0x3f0, Size: 8]
	Vector UIOffsetVec;//[Offset: 0x3f8, Size: 12]
	<int,ReplayEnemyUIInfo> CurEnemyUIMapTable;//[Offset: 0x408, Size: 80]
	void UpdateWeaponUI();// 0x30ec1bc
	void UpdateReplayUI();// 0x30ec1a0
	void UpdateOneEnemyUI(int _Index, ReplayEnemyUIInfo inUIInfo);// 0x30ec0c4
	void UpdateBulletUI();// 0x30ec0a8
	void OnReplayProgressChange();// 0x30ec08c
	void InitIngameUI();// 0x30ec070
	void HideUnnecessaryUI();// 0x30ec054
	void HideOneEnemyUI(int _Index);// 0x30ebfd0
	void ForceUpdateUI();// 0x30ebfb4
	void ClearLastReplayUI();// 0x30ebf98
	int AddOneEnemyUI(STExtraPlayerState* InPlayerState);// 0x30ebf04

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x3f0, Size: 16]
	void StopCameraShot();// 0x2f9eac8
	void StartCameraShot(PlayerController* PlayerController);// 0x2f9ea44

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x130, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x158, Size: 8]
	int MaxHoursForKeepingFiles;//[Offset: 0x160, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x168, Size: 16]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x180, Size: 16]
	bool PlayDemoWithFilename(FString DemoName);// 0x2f84274
	FString GetDemoPlayTime();// 0x2f841d0

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0x130, Size: 16]
	FString ReplayServerURL;//[Offset: 0x178, Size: 16]
	void RequestReplaysFromServer(FString URLString);// 0x309606c
	void ClearStreams();// 0x3096058

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x28, Size: 16]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x38, Size: 16]

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x28, Size: 4]
	void StartDownloadItem(uint32 ItemID, uint32 Priority, delegate OnItemDownloadDelegate);// 0x2ef5f44
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x2ef5d70
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x2ef5cec
	int GetDisableInBattleThreshold();// 0x2ef5cb0

--------------------------------
Class: RemoteControlManager.Object
	bool Tick(float DeltaTime);// 0x30ead80
	void Stop();// 0x30ead6c
	bool BeginWithFile();// 0x30ead34
	bool Begin(FString Name, FString Host, int Port);// 0x30eaadc

--------------------------------
Class: LuaTriggerManager.Object
	<FString,int> EventListenMap;//[Offset: 0x28, Size: 80]
	bool SetEventListen(FString EventString, int EventNum);// 0x305adbc
	bool RemoveEventListen(FString EventString, int EventNum);// 0x305ac40
	void Init();// 0x305ac2c
	bool AddEventListen(FString EventString, int EventNum);// 0x305aab0

--------------------------------
Class: GameLuaAPI.Object
	void UIShowTips(FString FunctionName, uint32 PlayerKey, int TipType, FString Params1, FString Params2, bool IsToAll);// 0x2ffda54
	void UISetWidgetVisibility(uint32 PlayerKey, FString WidgetTag, int Visibility, bool IsToAll);// 0x2ffd858
	void UISetWidgetText(uint32 PlayerKey, FString WidgetTag, FString SText, int TextId, FString Params, bool IsToAll);// 0x2ffd4a0
	void UIOperateWidget(uint32 PlayerKey, FString WidgetTag, FString SOperation, FString Params, bool IsToAll);// 0x2ffd128
	void UICustomBehavior(uint32 PlayerKey, FString UIBehavior, int TipType, FString Params, bool IsToAll);// 0x2ffce4c
	bool TeleportPlayerToVehicle(STExtraBaseCharacter* Player, STExtraVehicleBase* Vehicle, int SeatIdx);// 0x2ffcd48
	bool TeleportPawn(STExtraBaseCharacter* Player, Vector Position, Rotator Rotation);// 0x2ffcc40
	void TaskModifyTaskExtraSyncData(uint32 PlayerKey, XTaskExtraSyncData ExtraData);// 0x2ffcb54
	void TaskModifyTaskBySaveData(uint32 PlayerKey, XTaskSaveData SaveData);// 0x2ffca84
	void TaskModifyTask(uint32 PlayerKey, int TaskID, int Progress, int State);// 0x2ffc95c
	XTaskExtraSyncData TaskGetTaskExtraDataByTaskId(uint32 PlayerKey, int TaskID);// 0x2ffc884
	void TaskDeleteTask(uint32 PlayerKey, int TaskID);// 0x2ffc7d0
	void TaskAddTask(uint32 PlayerKey, int TaskID, int Aim);// 0x2ffc6e0
	void StopPlayerJoin();// 0x2ffc6cc
	STExtraVehicleBase* SpawnVehicle(int resID, Vector Position, Rotator Rotation);// 0x2ffc5c8
	void ShowMessage(FString Message);// 0x2ffc494
	void SetTeamID(Actor* TActor, int TeamID);// 0x2ffc3dc
	int SetHealth(Pawn* Player, float SetHealth);// 0x2ffc314
	void RevivePlayerAtPosition(uint32 PlayerKey, Vector Position, Rotator Rotation);// 0x2ffc220
	void RevivePlayer(uint32 PlayerKey);// 0x2ffc1a4
	bool RemoveBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x2ffc0a0
	bool RemoveActor(Actor* TActor);// 0x2ffc010
	void RemoteDestroyAllActor(uint32 PlayerKey, bool IsToAll);// 0x2ffbf50
	void RemoteDestroyActor(uint32 PlayerKey, int SingleId, bool IsToAll);// 0x2ffbe58
	int RemoteCreateActor(uint32 PlayerKey, int TeamID, int resID, Vector Position, Rotator Rotation, bool IsToAll);// 0x2ffbc9c
	void RegisterComponent(ActorComponent* Component);// 0x2ffbc20
	STExtraSimpleCharacter*[] QueryRingMobCharacters(out const Vector Center, float RangeMin, float RangeMax);// 0x2ffbaa8
	STExtraBaseCharacter*[] QueryRingCharacters(out const Vector Center, float RangeMin, float RangeMax);// 0x2ffb930
	Vector[] QueryOcclusionPoints(out const Vector Center, float Range, const byte AcceptableOcclusionPoseFlag);// 0x2ffb7b4
	STExtraBaseCharacter*[] QueryCharacters(out const Vector Center, float Range);// 0x2ffb674
	bool ProjectPointToNavigation(out const Vector Point, out Vector ProjectedLocation, out const Vector QueryExtent);// 0x2ffb538
	void MulticastSoundByID(STExtraBaseCharacter* MyPawn, int SoundID);// 0x2ffb480
	Object* LoadOjectFromPath(FString InObjectPath);// 0x2ffb3c8
	Object* LoadOjectFromBPPath(FString InBPPath, Object* InOuter);// 0x2ffb2d0
	class Object LoadClassFromBPPath(FString InBPPath, Object* InOuter);// 0x2ffb1d8
	bool KillPawn(STExtraCharacter* Pawn);// 0x2ffb148
	bool IsVehicle(Actor* TActor);// 0x2ffb0b8
	bool IsValid(Object* TObject);// 0x2ffb028
	bool IsTargetPosVisible(Vector PosSource, Vector PosTarget);// 0x2ffaf5c
	bool IsPlayerAlive(uint32 PlayerKey);// 0x2ffaecc
	bool IsPlayer(Actor* TActor);// 0x2ffae3c
	bool IsInArea(Vector Position, int AreaID);// 0x2ffad70
	bool IsFileExists(FString Filename);// 0x2ffacb4
	bool IsEditor();// 0x2ffac7c
	bool IsDamageOfType(out const DamageEvent DamageEvent, int DamageEventClassId);// 0x2ffab90
	static bool IsClassOf(const Object* Object, const class Object Class);// 0x2ffaad8
	bool HasBuff(int ID, Pawn* TargetPawn);// 0x2ffaa0c
	void GrenadeLastGameRemainItems(LastGameRemainItemData LastGameRemainItemData);// 0x2ffa8fc
	int GetWeaponBulletResId(STExtraWeapon* TWeapon);// 0x2ffa870
	int64 GetUnixTimestamp();// 0x2ffa83c
	STExtraPlayerState*[] GetTeamMatePlayerStateList(uint32 PlayerKey, bool ExcludeSelf);// 0x2ffa704
	FString GetSubLevel();// 0x2ffa660
	Vector GetRandomPosForTeleport(Pawn* TargetPawn, float MinRadius, float MaxRadius, int InMaxTryNum);// 0x2ffa520
	STExtraPlayerCharacter*[] GetPlayersOnVehicle(STExtraVehicleBase* Vehicle);// 0x2ffa42c
	float GetPlayerRealSpeed(STExtraBaseCharacter* Character);// 0x2ffa3a0
	STExtraPlayerController* GetPlayerControllerByUID(uint64 UId);// 0x2ffa314
	STExtraPlayerController* GetPlayerControllerByPlayerKey(uint32 PlayerKey);// 0x2ffa288
	STExtraBaseCharacter* GetPlayerByPlayerKey(uint32 PlayerKey);// 0x2ffa1fc
	FString GetPlainName(Object* Object);// 0x2ffa108
	STExtraBaseCharacter* GetOneRealPlayer();// 0x2ffa0d4
	STExtraBaseCharacter* GetOnePlayerBase();// 0x2ffa0a0
	STExtraPlayerCharacter* GetOnePlayer();// 0x2ffa06c
	UAENetConnection* GetNetConnection(STExtraPlayerController* PlayerController);// 0x2ff9fe0
	FString GetMapName();// 0x2ff9f3c
	FString GetLuaRootDir();// 0x2ff9e98
	FString GetLevelPath(Level* Level);// 0x2ff9da4
	uint64 GetItemReviseInstanceId(ItemDefineID ItemDefineID);// 0x2ff9d08
	int GetItemNumByResID(STExtraBaseCharacter* Player, int resID);// 0x2ff9c40
	uint64 GetItemInstanceId(ItemDefineID ItemDefineID);// 0x2ff9ba4
	Vector GetGroundLocation(Vector TraceStart, float TranceLength);// 0x2ff9ad8
	LastGameRemainItemData GetGameRemainItems(PlayerController* PC);// 0x2ff99b8
	int[] GetEquipWeaponList(STExtraBaseCharacter* Pawn);// 0x2ff98c4
	FString GetDSSwitchValue(const int InSwitchId);// 0x2ff97d0
	STExtraBaseCharacter*[] GetDistanceEnemies(STExtraBaseCharacter* MyPawn, float FDistance);// 0x2ff96a0
	DecoratorActor*[] GetDecratorActorsByVolume(int resID, AreaVolume* VolumeSphere);// 0x2ff9570
	DecoratorActor*[] GetDecratorActorsByShpere(int resID, AreaSphere* PointSphere);// 0x2ff9440
	DecoratorActor*[] GetDecratorActors(int resID, AreaBase* Area);// 0x2ff9310
	STExtraWeapon* GetCurrentUseWeapon(STExtraBaseCharacter* Pawn);// 0x2ff9284
	Actor* GetAttachParentActor(Actor* TActor);// 0x2ff91f8
	STExtraVehicleBase*[] GetAllVehicles();// 0x2ff9154
	STExtraPlayerState*[] GetAllPlayerStates();// 0x2ff90b0
	STExtraPlayerCharacter*[] GetAllPlayerPawns();// 0x2ff900c
	STExtraPlayerController*[] GetAllPlayerControllers();// 0x2ff8f68
	Actor*[] GetAllChildActorsByClass(Actor* pActor, class Object Class, bool bIncludeDescendants);// 0x2ff8df8
	Actor*[] GetAllChildActors(Actor* pActor, bool bIncludeDescendants);// 0x2ff8cc0
	Actor*[] GetActorsInSphere(const Vector SpherePos, float SphereRadius, class Object ActorClass);// 0x2ff8b54
	Actor*[] GetActorsInActorBoundingBox(Actor* TargetActor, class Object ActorClass);// 0x2ff8a28
	Actor*[] GetActorsByTag(FName Tag);// 0x2ff8934
	Actor*[] GetActorsByClass(class Object TargetClass);// 0x2ff8840
	int GetActorResId(Actor* TActor);// 0x2ff87b4
	float GetActorDistance(Actor* fromActor, Actor* toActor);// 0x2ff86f0
	uint64 GenerateRandomInstanceID();// 0x2ff86bc
	STExtraBaseCharacter* FindFakePlayer();// 0x2ff8688
	void EndMatch(int TeamID, int Reason);// 0x2ff85d4
	bool DropItemsInBackpackWithTypes(STExtraBaseCharacter* Player, int[] FilterTypeList);// 0x2ff844c
	void DamageTarget(Actor* SourceActor, Actor* TargetActor, float Damage, int TypeID);// 0x2ff8320
	PickUpWrapperActor* CreatePickup(int TeamID, int resID, Vector Position, Rotator Rotation, int Num);// 0x2ff81a4
	STExtraCharacter* CreatePawn(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x2ff8064
	STExtraBaseCharacter* CreateFakePlayer(int TeamID, int resID, Vector Posi, Rotator Rota, int AttributeID, bool bUsePool, int CampID);// 0x2ff7e6c
	AreaVolume* CreateAreaVolume(Vector Posi, Rotator Rota, Vector Volume);// 0x2ff7d60
	AreaSphere* CreateAreaSphere(Vector Posi, float Radius);// 0x2ff7c98
	Actor* CreateActor(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x2ff7b58
	bool CheckDSSwitchOpen(const int SwitchId);// 0x2ff7ac8
	STExtraVehicleBase* CastToVehicle(Actor* TActor);// 0x2ff7a3c
	STExtraPlayerState* CastToPlayerState(Actor* TActor);// 0x2ff79b0
	STExtraPlayerCharacter* CastToPlayer(Actor* TActor);// 0x2ff7924
	void AttachToActor(Actor* ParentActor, Actor* ChildActor);// 0x2ff7870
	bool AddWeaponPack(STExtraBaseCharacter* Player, GameModePlayerWeaponPackInfo WeaponData, enum PickupType);// 0x2ff7684
	bool AddItemPack(STExtraBaseCharacter* Player, GameModePlayerItemPackInfo ArmorData, enum PickupType);// 0x2ff7498
	bool AddItemByResID(STExtraBaseCharacter* Player, int resID, int Num, bool bWithTips, uint64 InstanceID, int Durability, enum PickupType, bool bAutoEquip);// 0x2ff7250
	int AddHealth(Pawn* Player, float AddHealth);// 0x2ff7188
	bool AddBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x2ff7084
	bool AddArmorPack(STExtraBaseCharacter* Player, GameModePlayerArmorPackInfo ArmorData, enum PickupType);// 0x2ff6e98

--------------------------------
Class: UAENetConnection.IpConnection.NetConnection.Player.Object
	int InitialHandshakeTimeoutNumThreshold;//[Offset: 0x337cc, Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Server_Global;//[Offset: 0x337d4, Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_Global;//[Offset: 0x337d8, Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_PerActor;//[Offset: 0x337dc, Size: 4]
	bool bEnableHTTPDNS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33830, Size: 1]
	FString HTTPDNSServerAddr;//[Offset: 0x33838, Size: 16]
	float HTTPDNSResponseTimeout;//[Offset: 0x33848, Size: 4]
	NetRelevancyGroup* RelevancyGroup;//[Offset: 0x33858, Size: 8]
	PendingRegionNetworkObject[] PendingRegionNetworkObjects;//[Offset: 0x33940, Size: 16]
	float MinRegionActorTickDelta;//[Offset: 0x33950, Size: 4]
	float MaxRegionActorTickDelta;//[Offset: 0x33954, Size: 4]
	bool EnableWeakNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33964, Size: 1]
	float MinWeakNetUpdateDelay;//[Offset: 0x33968, Size: 4]
	float MaxWeakNetUpdateDelay;//[Offset: 0x3396c, Size: 4]
	float SquareSegmentSize;//[Offset: 0x33970, Size: 4]
	float MaxSegmentDistance;//[Offset: 0x33974, Size: 4]
	int MaxObjectNumInSegments;//[Offset: 0x33978, Size: 4]
	bool bRecreateSocketOnLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33991, Size: 1]
	float UpdateClientPingTimeThreshold;//[Offset: 0x339a4, Size: 4]

--------------------------------
Class: IpConnection.NetConnection.Player.Object

--------------------------------
Class: NetRelevancyGroup.Object
	NetRelevancyGroupID GroupID;//[Offset: 0x28, Size: 4]
	UAENetConnection*[] Connections;//[Offset: 0x30, Size: 16]

--------------------------------
Class: AreaVolume.AreaBase.Object
	Vector Position;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Volume;//[Offset: 0x40, Size: 12]

--------------------------------
Class: AreaBase.Object

--------------------------------
Class: AreaSphere.AreaBase.Object
	Vector Position;//[Offset: 0x28, Size: 12]
	float Radius;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0x110, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0x114, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0x118, Size: 16]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x128, Size: 16]
	int MarkCountProcessed;//[Offset: 0x138, Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x305d8bc
	int GenerateNewLocalInstanceID();// 0x305d888
	int GenerateNewInstanceID();// 0x305d864
	void DispatchMarkData(MarkDispatchAction Data);// 0x305d6f4
	void ClearMarkDataByTypeID(int TypeID, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x305d600

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0x110, Size: 80]
	float EventCDTime;//[Offset: 0x160, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x3332d14

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x28, Size: 16]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x38, Size: 16]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2fea298
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2fea214
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x2fea154
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x2fea0d8
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x3b98fe4
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x3b98fe4

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0x110, Size: 16]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0x120, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0x124, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0x130, Size: 1]
	bool IsNotificationWorking();// 0x2fe9cf4
	static int IsGlobalDebugLineTraceDrawn();// 0x2fe9cbc
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x3b98fe4
	enum GetFieldOfViewNotificationStatus();// 0x2fe9c88

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x3b8, Size: 16]
	float DamageFieldUpdatePeriod;//[Offset: 0x440, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x444, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x328a5a0
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x328a494
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x328a3dc
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x328a260

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x398, Size: 8]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x3a0, Size: 8]
	float NearToFarDistance;//[Offset: 0x3a8, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x3b0, Size: 8]
	float PlayEffectDelayTime;//[Offset: 0x3b8, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x3c0, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x400, Size: 8]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x408, Size: 8]
	FireBalloonMovementComponent* Movement;//[Offset: 0x410, Size: 8]
	int MapMarkTypeID;//[Offset: 0x418, Size: 4]
	enum MapMarkFlag;//[Offset: 0x41c, Size: 1]
	Pawn* Driver;//[Offset: 0x428, Size: 8]
	float MoveUpValue;//[Offset: 0x430, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x470, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x474, Size: 4]
	float MoveUpScale;//[Offset: 0x478, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x480, Size: 4]
	Vector ControlInputVector;//[Offset: 0x484, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x490, Size: 12]
	float TickInterval;//[Offset: 0x49c, Size: 4]
	FString LuaFilePath;//[Offset: 0x4a8, Size: 16]
	Vector2D FObservationArea;//[Offset: 0x4b8, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x31b0894
	void SetMoveUpValue(float InMoveUpValue);// 0x31b0818
	void SetDriver(Pawn* InPawn);// 0x31b0794
	void OnRep_Driver(Pawn* PrevDriver);// 0x31b0710
	Pawn* GetDriver();// 0x31b06f4
	void CheckWishTask();// 0x3b98fe4
	bool CanBeDriver(Pawn* InPawn);// 0x31b065c
	void BPUpdateUIVisible();// 0x3b98fe4
	void BPUpdateObservationArea();// 0x3b98fe4
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x3b98fe4
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x3b98fe4

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x1a1, Size: 1]
	float MaxFlyHeight;//[Offset: 0x1a4, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x1a8, Size: 4]
	Vector InitialLocation;//[Offset: 0x1ac, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x1b8, Size: 16]
	Actor* ActorOwner;//[Offset: 0x1c8, Size: 8]
	void SetSkipUpdate(bool bNewValue);// 0x31b0138
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x3b98fe4
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x3b98fe4
	float GetMaxFlyHeight();// 0x31b0104

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x190, Size: 4]
	float Acceleration;//[Offset: 0x194, Size: 4]
	float Deceleration;//[Offset: 0x198, Size: 4]
	float TurningBoost;//[Offset: 0x19c, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 1]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x518, Size: 16]
	int MiniMapIconID;//[Offset: 0x528, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x52c, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x30bbc68
	void HandleBoxIsSearched();// 0x30bbc4c

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0x110, Size: 4]
	float InactiveCheckGap;//[Offset: 0x114, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0x11c, Size: 4]
	float PreActiveTime;//[Offset: 0x120, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0x128, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	enum SIslandActiveType;//[Offset: 0x12d, Size: 1]
	Vector PrePawnLoc;//[Offset: 0x130, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0x13c, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0x148, Size: 16]
	void ServerMarkPlayerActive();// 0x310ff58
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x3b98fe4
	void MarkPlayerActive();// 0x310ff44
	void KickOutPlayer();// 0x310ff30
	void ClientShowKickOutTip(float RemainTime);// 0x310feac
	void ClientCachedActiveState();// 0x310fe98
	bool CheckForMovement();// 0x310fe60
	void CheckForInactive();// 0x310fe44

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x31b0, Size: 8]
	void OnRep_Cache(ForceStill)();// 0x3b98fe4
	void SetCapsuleParentBounds(bool UseParentBounds);// 0x3b98fe4
	void ClearDecalBakingRTCache(GameStateBase* CallFunc_GetGameState_ReturnValue, DecalBakingActorMgr* CallFunc_GetWorldInstance_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x3b98fe4
	void GetGrenadeWeaponMap(out <FName,class STExtraWeapon> OutWeaponMap, <FName,class STExtraWeapon> CallFunc_GetGrenadeLogicSocketToWeaponClassMap_ReturnValue, bool CallFunc_EnableLoadWeaponClassMapOptimize_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, <FName,FString> CallFunc_GetGrenadeLogicSocketToWeaponPathMap_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, class STExtraWeapon CallFunc_GetWeaponClassFromPath_ReturnValue);// 0x3b98fe4
	void TriggerActivityByID(bool GetNameOnly, out FString UIName, out int ActivityID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BattleInteractiveDataStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x3b98fe4
	void RegisterInitGrenadeMap(delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void InitGrenadeMapData(<FName,class STExtraWeapon> CallFunc_GetGrenadeWeaponMap_OutWeaponMap, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, int[] CallFunc_GetGrenadeIDsOrder_ReturnValue, bool CallFunc_IsValid_ReturnValue, <int,FName> CallFunc_GetGrenadeIDToNameDict_ReturnValue, <byte,FString> CallFunc_GetGrenadeToSlotIndexDict_ReturnValue);// 0x3b98fe4
	bool IsAngledSightAvailable(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x3b98fe4
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ShowAngledSightState(bool IsAngled, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x3b98fe4
	void GetAngledSightRotator(STExtraShootWeapon* NewParam, out Rotator NewParam1, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x3b98fe4
	void AngledSightAnimLogic(byte Selection, STExtraShootWeapon* ShootWeapon, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetAngledSightRotator_NewParam1, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, DollyZoomParam CallFunc_UpdateScopeCameraOffsets_Param, float CallFunc_GetScopeFov_ReturnValue, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2);// 0x3b98fe4
	void AngledSightAnimUpdate(float InputPin, bool bIsOnlyTurn, Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsAngledSightAvailable_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_SwitchSightConfigMaterial_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, bool CallFunc_IsAngledSight_ReturnValue2, Rotator CallFunc_RLerp_ReturnValue);// 0x3b98fe4
	void Replay_CreateEnemyFrameUI(bool isPlayingCompletePlayback, bool is enemy, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x3b98fe4
	void Replay_SetVisiableOfFrameUI(bool is Visiable, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void UpdateEmoteWeaponIdInfo(int ID, out bool Ret, int Length, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon*[] CallFunc_GetAllInventoryWeaponList_ReturnValue, int CallFunc_Array_Length_ReturnValue, STExtraWeapon* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x3b98fe4
	void AllowWater(out bool bCanEnter, bool CallFunc_CanEnterWaterArea_ReturnValue);// 0x3b98fe4
	bool ShouldRedBlood(bool CallFunc_GetRedBloodSwitch_ReturnValue);// 0x3b98fe4
	void CheckHasVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* PlayerCharacter, out int InItemID, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x3b98fe4
	void ChangeCurVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsDedicatedServer_ReturnValue, STExtraPlayerController* CallFunc_GetController_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsDriver_ReturnValue);// 0x3b98fe4
	void HandleOnChangedVehicleSeat(STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void GetMasterBoneComponent(out MeshComponent* MasterBoneComponent);// 0x3b98fe4
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x3b98fe4
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	BackpackEmoteHandle* GetEmoteHandle(int ItemID, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2, BackpackEmoteHandle* CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x3b98fe4
	FString GetShootWeaponNameByWeapon(int ItemDefineID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x3b98fe4
	CameraComponent* GetThirdPersonCamera();// 0x3b98fe4
	SpringArmComponent* GetThirdPersonSpringArm();// 0x3b98fe4
	CameraComponent* GetFPPCamera();// 0x3b98fe4
	SpringArmComponent* GetFPPSpringArm();// 0x3b98fe4
	CameraComponent* GetFirstPersonCamera();// 0x3b98fe4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x3b98fe4
	CameraComponent* GetScopeCamera();// 0x3b98fe4
	SpringArmComponent* GetScopeSpringArm();// 0x3b98fe4
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x3b98fe4
	bool ShouldAutoScopeWhenPeek(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	FString GetGrenadeNameByGrenadeType(byte grenadeType, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x3b98fe4
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x3b98fe4
	void GetControllerViewCamera(out CameraComponent* Camera, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x3b98fe4
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x3b98fe4
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x3b98fe4
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x3b98fe4
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	SpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x3b98fe4
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x3b98fe4
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x3b98fe4
	void ResetBPCameraSetting();// 0x3b98fe4
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x3b98fe4
	void IsAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void PickUp(PickUpWrapperActor* NewParam);// 0x3b98fe4
	void DoPickUpTarget();// 0x3b98fe4
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x3b98fe4
	void SetAllCollisionEnabled(bool bEnable);// 0x3b98fe4
	void MoveOutScope();// 0x3b98fe4
	void MoveInScope(bool bHasSetMesh);// 0x3b98fe4
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x3b98fe4
	void SwitchCrouch(byte NewParam, byte PreState, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);// 0x3b98fe4
	void UserConstructionScript(CameraComponent* ___object_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6);// 0x3b98fe4
	void ParachuteCamBlend__FinishedFunc();// 0x3b98fe4
	void ParachuteCamBlend__UpdateFunc();// 0x3b98fe4
	void LerpAlpha__FinishedFunc();// 0x3b98fe4
	void LerpAlpha__UpdateFunc();// 0x3b98fe4
	void ScopeTimeline__FinishedFunc();// 0x3b98fe4
	void ScopeTimeline__UpdateFunc();// 0x3b98fe4
	void AngledSigntTimeline__FinishedFunc();// 0x3b98fe4
	void AngledSigntTimeline__UpdateFunc();// 0x3b98fe4
	void RearSightTimeline__FinishedFunc();// 0x3b98fe4
	void RearSightTimeline__UpdateFunc();// 0x3b98fe4
	void TurnLerpAlpha__FinishedFunc();// 0x3b98fe4
	void TurnLerpAlpha__UpdateFunc();// 0x3b98fe4
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Vault_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_V_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_C_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_F10_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void CE(ForceStill)(bool ForceStill);// 0x3b98fe4
	void CE(ForceStill(ServerOnly))(bool ForceStill);// 0x3b98fe4
	void OnPetOwnerPossessed();// 0x3b98fe4
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x3b98fe4
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x3b98fe4
	void ReloadEvent();// 0x3b98fe4
	void OnEquipWeapon(byte Slot);// 0x3b98fe4
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x3b98fe4
	void OnNotifyHurt();// 0x3b98fe4
	void NotifyPickUp(bool bIsAvailable);// 0x3b98fe4
	void OnLanded(out const HitResult Hit);// 0x3b98fe4
	void OnPoseStateChange(byte LastState, byte CurState);// 0x3b98fe4
	void K2_UpdateCustomMovement(float DeltaTime);// 0x3b98fe4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x3b98fe4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	void ParachuteOnWater();// 0x3b98fe4
	void NotifyTombBox(bool bIsAvailable);// 0x3b98fe4
	void DoAutoReloadCurrentWeapon();// 0x3b98fe4
	void OnUnEquipWeapon();// 0x3b98fe4
	void BPResetCharacter();// 0x3b98fe4
	void OnInitGrenadeData();// 0x3b98fe4
	void VaultFailPawnBluePrint(out const FString Content);// 0x3b98fe4
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3b98fe4
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3b98fe4
	void ScopeInStop();// 0x3b98fe4
	void PlayScopeInTimeline(float Rate);// 0x3b98fe4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x3b98fe4
	void ReceivePossessed(Controller* NewController);// 0x3b98fe4
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x3b98fe4
	void OnWeaponEquipmentUpdate();// 0x3b98fe4
	void BindAndExecStateChanged();// 0x3b98fe4
	void StateEnterHandler_Event(enum State);// 0x3b98fe4
	void OnHitByCake();// 0x3b98fe4
	void EnablePet(bool Enable);// 0x3b98fe4
	void OnEnterStateForBp(enum State);// 0x3b98fe4
	void OnLeaveStateForBp(enum State);// 0x3b98fe4
	void ReceiveDestroyed();// 0x3b98fe4
	void PawnVaultServerStopCheckBluePrint();// 0x3b98fe4
	void PawnVaultStopBluePrint();// 0x3b98fe4
	void OnMiniTreeTriggerServerLogicCPP();// 0x3b98fe4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x3b98fe4
	void DoAngledSight(bool IsPush);// 0x3b98fe4
	void DoNormalSight(bool IsPush);// 0x3b98fe4
	void StopSwitchAngledSight();// 0x3b98fe4
	void CustomEvent(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x3b98fe4
	void CustomEvent(bool bIsBegin);// 0x3b98fe4
	void CustomEvent();// 0x3b98fe4
	void OnBPStateCheckIn();// 0x3b98fe4
	void DynamicHoldGun(bool BoolValue);// 0x3b98fe4
	void LuaReceiveBeginPlay();// 0x3b98fe4
	void SwitchRearSight(int PrevIndex, int NewIndex, Rotator AngleRotator);// 0x3b98fe4
	void StopTurningInPlace();// 0x3b98fe4
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x3b98fe4
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, Key K2Node_InputKeyEvent_Key13, Key ___struct_Variable, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, Key K2Node_InputKeyEvent_Key14, Key K2Node_InputKeyEvent_Key15, bool ___bool_IsClosed_Variable2, bool ___bool_Has_Been_Initd_Variable2, bool K2Node_CustomEvent_ForceStill2, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_ForceStill, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, byte K2Node_Event_slot, delegate K2Node_CreateDelegate_OutputDelegate, STExtraShootWeapon* CallFunc_GetShootWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate2, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_bIsAvailable2, HitResult K2Node_Event_Hit, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Controller* CallFunc_GetController_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, byte K2Node_Event_LastState, byte K2Node_Event_CurState, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Key K2Node_InputActionEvent_Key, float K2Node_Event_DeltaTime, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_Not_PreBool_ReturnValue2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, bool K2Node_CustomEvent_bIsAvailable, const TemBPDataAddr[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Controller* CallFunc_GetController_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, int CallFunc_PostEvent_ReturnValue3, int CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, bool K2Node_SwitchEnum2_CmpSuccess, Controller* CallFunc_GetController_ReturnValue5, int CallFunc_PostEvent_ReturnValue5, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, bool K2Node_SwitchInteger_CmpSuccess, Key ___struct_Variable2, Key K2Node_InputActionEvent_Key2, bool CallFunc_IsLocalControlOrView_ReturnValue, CameraComponent* CallFunc_GetControllerViewCamera_Camera, Controller* CallFunc_GetController_ReturnValue6, bool CallFunc_IsValid_ReturnValue4, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess6, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess7, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess8, Key K2Node_InputActionEvent_Key3, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, Controller* CallFunc_GetController_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate6, Controller* CallFunc_GetController_ReturnValue8, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess10, FString CallFunc_GetPlayerKey_ReturnValue, bool CallFunc_HaveAngledSightBySlot_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, Key K2Node_InputKeyEvent_Key16, delegate K2Node_CreateDelegate_OutputDelegate7, bool CallFunc_SetCurrentPersonPerspective_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue2, float K2Node_CustomEvent_Rate, bool CallFunc_IsCharacterSprinting_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, bool CallFunc_IsValid_ReturnValue7, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess11, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess12, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, bool CallFunc_IsValid_ReturnValue8, CameraShake* CallFunc_PlayCameraShake_ReturnValue, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue9, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue10, int CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate8, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsLocalControlOrView_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue2, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue12, Actor* CallFunc_GetOwner_ReturnValue2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess13, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate10, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_ShouldRedBlood_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue7, bool CallFunc_IsValid_ReturnValue15, enum K2Node_CustomEvent_state, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue8, bool CallFunc_AllowWater_bCanEnter, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess14, int ___int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsLocalControlOrView_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraComponent* CallFunc_GetControllerViewCamera_Camera2, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_IsValid_ReturnValue16, bool CallFunc_BooleanAND_ReturnValue4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsShowBlood_ReturnValue, bool K2Node_Event_Enable, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_IsValid_ReturnValue17, enum K2Node_Event_State2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_IsValid_ReturnValue18, enum K2Node_Event_State, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_IsValid_ReturnValue19, bool CallFunc_IsValid_ReturnValue20, byte ___byte_Variable, int ___int_Array_Index_Variable2, int CallFunc_Array_Get_Item2, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_IsValid_ReturnValue22, Controller* CallFunc_GetController_ReturnValue9, bool CallFunc_IsAngledSight_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess16, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_IsAngledSight_ReturnValue2, byte K2Node_Event_type, bool K2Node_Event_IsOnlyTurn, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool K2Node_CustomEvent_IsPush2, Controller* CallFunc_GetController_ReturnValue10, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_Not_PreBool_ReturnValue6, bool K2Node_SwitchInteger2_CmpSuccess, int CallFunc_PostEvent_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue8, byte ___byte_Variable2, bool ___bool_Variable, bool CallFunc_IsAngledSight_ReturnValue4, bool K2Node_CustomEvent_IsPush, Controller* CallFunc_GetController_ReturnValue11, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess18, bool CallFunc_Not_PreBool_ReturnValue9, bool K2Node_SwitchInteger3_CmpSuccess, bool CallFunc_IsAngledSight_ReturnValue5, bool CallFunc_IsAngledSight_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue8, bool CallFunc_IsAngledSight_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue9, delegate K2Node_CreateDelegate_OutputDelegate11, int CallFunc_PostEvent_ReturnValue7, bool CallFunc_IsAngledSightAvailable_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsAngledSightAvailable_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue11, STExtraShootWeapon* K2Node_CustomEvent_Weapon, enum K2Node_CustomEvent_type, bool K2Node_CustomEvent_bEquip, bool CallFunc_IsAngledSightBySlot_ReturnValue, byte K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, Controller* CallFunc_GetController_ReturnValue12, bool K2Node_CustomEvent_bIsBegin, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess19, Controller* CallFunc_GetController_ReturnValue13, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller13, bool K2Node_DynamicCast_bSuccess20, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue12, bool CallFunc_IsAngledSight_ReturnValue11, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkComponent* CallFunc_GetAkComponent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue12, int CallFunc_PostAkEvent_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue13, bool CallFunc_IsValid_ReturnValue23, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_BooleanAND_ReturnValue14, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue15, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsAngledSight_ReturnValue13, bool CallFunc_HaveAngledSight_ReturnValue2, bool CallFunc_IsValid_ReturnValue24, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, bool K2Node_CustomEvent_BoolValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue3, FString CallFunc_GetPlayerNameSafety_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, Key ___struct_Variable3, Controller* CallFunc_GetControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue25, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller14, bool K2Node_DynamicCast_bSuccess21, bool CallFunc_IsLocallyControlled_ReturnValue3, int K2Node_CustomEvent_PrevIndex, int K2Node_CustomEvent_NewIndex, Rotator K2Node_CustomEvent_AngleRotator, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue26, FName CallFunc_GetRearSightSocket_ReturnValue, FName CallFunc_GetRearSightSocket_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue27, Key K2Node_InputKeyEvent_Key2, bool CallFunc_IsLocalControlorView_ReturnValue4, bool CallFunc_EnterState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue16, Key K2Node_InputKeyEvent_Key3, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key5, Key K2Node_InputKeyEvent_Key6, Key ___struct_Variable4, Key K2Node_InputKeyEvent_Key7, Key K2Node_InputKeyEvent_Key8, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, Key K2Node_InputKeyEvent_Key9, Rotator CallFunc_RLerp_ReturnValue, Key K2Node_InputKeyEvent_Key10, Key K2Node_InputKeyEvent_Key11, Key ___struct_Variable5, Key K2Node_InputKeyEvent_Key12);// 0x3b98fe4
	void OnCakePlacement__DelegateSignature(bool Success);// 0x3b98fe4
	void UnequipWeaponComplete__DelegateSignature();// 0x3b98fe4
	void EquipWeaponComplete__DelegateSignature();// 0x3b98fe4
	HoldComponent_C* ShoulderHoldComp;//[Offset: 0x31b8, Size: 8]
	BP_SkillManagerComponent_C* BP_SkillManagerComponent;//[Offset: 0x31c0, Size: 8]
	CustomCameraComponent* Camera;//[Offset: 0x31c8, Size: 8]
	CapsuleComponent* ShareBounds;//[Offset: 0x31d0, Size: 8]
	ChildActorComponent* BP_PaintDecalDetectLine1;//[Offset: 0x31d8, Size: 8]
	CapsuleComponent* Capsule;//[Offset: 0x31e0, Size: 8]
	HoldComponent_C* AngledSightHoldComp;//[Offset: 0x31e8, Size: 8]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x31f0, Size: 8]
	CharacterAnimList_Parachute_C* CharacterAnimList_Parachute;//[Offset: 0x31f8, Size: 8]
	StaticMeshComponent* Scope;//[Offset: 0x3200, Size: 8]
	PostProcessComponent* PostProcess;//[Offset: 0x3208, Size: 8]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x3210, Size: 8]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x3218, Size: 8]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x3220, Size: 8]
	SplineComponent* PetParachuteSpline;//[Offset: 0x3228, Size: 8]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x3230, Size: 8]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x3238, Size: 8]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x3240, Size: 8]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x3248, Size: 8]
	HoldComponent_C* AimHoldComp;//[Offset: 0x3250, Size: 8]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x3258, Size: 8]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x3260, Size: 8]
	FPPComponent_C* FPPComponent;//[Offset: 0x3268, Size: 8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x3270, Size: 8]
	CameraComponent* ScopingCamera;//[Offset: 0x3278, Size: 8]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x3280, Size: 8]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x3288, Size: 8]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x3290, Size: 8]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x3298, Size: 8]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x32a0, Size: 8]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x32a8, Size: 8]
	CharacterWeaponManagerComponent* CharacterWeaponManager;//[Offset: 0x32b0, Size: 8]
	PickupManagerComponent* PickupManager;//[Offset: 0x32b8, Size: 8]
	SceneComponent* CameraRoot;//[Offset: 0x32c0, Size: 8]
	CustomSpringArmComponent* CustomSpringArm;//[Offset: 0x32c8, Size: 8]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x32d0, Size: 8]
	float RearSightTimeline_RearSightUpdate_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x32d8, Size: 4]
	byte RearSightTimeline__Direction_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x32dc, Size: 1]
	TimelineComponent* RearSightTimeline;//[Offset: 0x32e0, Size: 8]
	float AngledSigntTimeline_NewTrack_0_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x32e8, Size: 4]
	byte AngledSigntTimeline__Direction_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x32ec, Size: 1]
	TimelineComponent* AngledSigntTimeline;//[Offset: 0x32f0, Size: 8]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x32f8, Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x32fc, Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x3300, Size: 8]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x3308, Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x330c, Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x3310, Size: 8]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x3318, Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x331c, Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x3320, Size: 8]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x3328, Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x332c, Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x3330, Size: 8]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x3338, Size: 8]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3340, Size: 1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3341, Size: 1]
	float ReloadingCDMax;//[Offset: 0x3344, Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x3348, Size: 12]
	Vector VelocityVector;//[Offset: 0x3354, Size: 12]
	float Speed;//[Offset: 0x3360, Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3364, Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x3368, Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x3374, Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x3380, Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x338c, Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3398, Size: 1]
	byte LocomotionState;//[Offset: 0x3399, Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339a, Size: 1]
	float ProneCameraHeight;//[Offset: 0x339c, Size: 4]
	float CameraMoveSpeed;//[Offset: 0x33a0, Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a4, Size: 1]
	float MeleeAttackRange;//[Offset: 0x33a8, Size: 4]
	Vector Melee Attack Location;//[Offset: 0x33ac, Size: 12]
	float MeleeAttackDamage;//[Offset: 0x33b8, Size: 4]
	byte CurCameraMode;//[Offset: 0x33bc, Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x33c0, Size: 20]
	Rotator TerreneNormal;//[Offset: 0x33d4, Size: 12]
	Vector Normal;//[Offset: 0x33e0, Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x33f0, Size: 8]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f8, Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x3400, Size: 16]
	delegate UnequipWeaponComplete;//[Offset: 0x3410, Size: 16]
	float CrouchCameraHeight;//[Offset: 0x3420, Size: 4]
	float PickupDelayTime;//[Offset: 0x3424, Size: 4]
	float DefaultCapsuleRadius;//[Offset: 0x3428, Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x3430, Size: 8]
	float SwimCameraHeight;//[Offset: 0x3438, Size: 4]
	float SwimTargetRoll;//[Offset: 0x343c, Size: 4]
	float SwimUpRateFix;//[Offset: 0x3440, Size: 4]
	float SwimRotateSpeed;//[Offset: 0x3444, Size: 4]
	<byte,FString> GrenadeToSlotIndexDict;//[Offset: 0x3448, Size: 80]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3498, Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x34a0, Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x34b8, Size: 16]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c8, Size: 1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x34d0, Size: 16]
	CameraComponent*[] Cameras;//[Offset: 0x34e0, Size: 16]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x34f0, Size: 8]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f8, Size: 1]
	<int,FName> GrenadeIDToNameDict;//[Offset: 0x3500, Size: 80]
	int[] GrenadeIDsOrder;//[Offset: 0x3550, Size: 16]
	float ElapseTime;//[Offset: 0x3560, Size: 4]
	float SwimRotateX;//[Offset: 0x3564, Size: 4]
	SpringArmComponent* NewVar;//[Offset: 0x3568, Size: 8]
	byte CurPoseState;//[Offset: 0x3570, Size: 1]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x3578, Size: 80]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x35c8, Size: 8]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x35d0, Size: 8]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x35d8, Size: 8]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x35e0, Size: 8]
	enum[] DisallowedWateringStates;//[Offset: 0x35e8, Size: 16]
	delegate OnCakePlacement;//[Offset: 0x35f8, Size: 16]
	Actor* PaintDecalDetector;//[Offset: 0x3608, Size: 8]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x3610, Size: 8]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3618, Size: 1]
	Actor* CurEmoteActor;//[Offset: 0x3620, Size: 8]
	STExtraWeapon* CurUseingEmoteWeapon;//[Offset: 0x3628, Size: 8]
	MaterialBillboardComponent* FrameUIBillboard;//[Offset: 0x3630, Size: 8]
	bool bIsAngledSightOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3638, Size: 1]
	MeshComponent* OriginAttachComponent;//[Offset: 0x3640, Size: 8]
	MeshComponent* TargetAttachComponent;//[Offset: 0x3648, Size: 8]
	Rotator OriginRotOffset;//[Offset: 0x3650, Size: 12]
	DollyZoomParam OriginDollyZoomParam;//[Offset: 0x365c, Size: 12]
	DollyZoomParam TargetDollyZoomParam;//[Offset: 0x3668, Size: 12]
	<FName,class STExtraWeapon> GrenadeWeaponMaps;//[Offset: 0x3678, Size: 80]
	bool Cache(ForceStill);//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c8, Size: 1]

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x3e0, Size: 16]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x3f0, Size: 16]
	float RTCacheLifeTime;//[Offset: 0x400, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x404, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x408, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x40c, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x410, Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x2f9f894
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x2f9f818
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x2f9f708
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x2f9f614
	static DecalBakingActorMgr* GetInstance();// 0x2f9f5e0
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x2f9f4ec
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x2f9f3f8
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x2f9f334
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x2f9f234
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x2f9f11c
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x2f9efa8
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x2f9ede8

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x398, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x3a0, Size: 16]
	void SetMaxDecalProcessPerFame(int InValue);// 0x54845f8
	int GetMaxDecalProcessPerFame();// 0x54845dc
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x5484550
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x54844d4
	void CancelDecalBakingRequest(int RequestID);// 0x5484458
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x54843dc
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x54841d4
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x5483fcc

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x2d0, Size: 8]
	Vector DecalSize;//[Offset: 0x2d8, Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x2f0, Size: 16]
	LinearColor TintColor;//[Offset: 0x300, Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x310, Size: 16]
	float CropRotation;//[Offset: 0x320, Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	LinearColor GetUVScaleBias();// 0x5484f04
	BoxSphereBounds GetDecalBounds();// 0x5484eb8
	LinearColor GetCropUVScaleBias();// 0x5484e88

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x398, Size: 8]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d10, Size: 8]
	void InitLocalHelmetDisplay(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void MapFromCBToESBH(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x3b98fe4
	void ReceiveLuaTick();// 0x3b98fe4
	void ReceiveLuaBeginPlay();// 0x3b98fe4
	void StopAvatarDownload(GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void SetMultiVersionRedSwitchConfig(SettingConfig_C* SettingConfig, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void MapFromCBToESGlobal(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x3b98fe4
	void MapFromCBToESVN(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x3b98fe4
	void MapFromCBToESJK(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool K2Node_SwitchInteger3_CmpSuccess, FString CallFunc_GetAccountRegion_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void MapFromCBToES(SettingConfig_C* SettingConfig, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ReadConfigEffectSettingColorSingleLayer(int NewParam, LinearColor LayerColor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHurtEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHurtEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, BP_STRUCT_JapanHurtEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, BP_STRUCT_VNHurtEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, BP_STRUCT_GlobalHurtEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue17, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue18, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue19, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue20, LinearColor CallFunc_MakeColor_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, FString CallFunc_GetPublishRegion_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void ReadConfigEffectSettingColorMultiLayer(int NewParam, EffectSettingMgr* EffectSettingMgr, LinearColor Layer4Color, LinearColor Layer3Color, LinearColor Layer2Color, LinearColor Layer1Color, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHitEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHitEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, float CallFunc_Conv_StringToFloat_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue18, LinearColor CallFunc_MakeColor_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue20, float CallFunc_Conv_StringToFloat_ReturnValue21, LinearColor CallFunc_MakeColor_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue22, float CallFunc_Conv_StringToFloat_ReturnValue23, float CallFunc_Conv_StringToFloat_ReturnValue24, float CallFunc_Conv_StringToFloat_ReturnValue25, LinearColor CallFunc_MakeColor_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue26, float CallFunc_Conv_StringToFloat_ReturnValue27, float CallFunc_Conv_StringToFloat_ReturnValue28, float CallFunc_Conv_StringToFloat_ReturnValue29, LinearColor CallFunc_MakeColor_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue30, float CallFunc_Conv_StringToFloat_ReturnValue31, float CallFunc_Conv_StringToFloat_ReturnValue32, BP_STRUCT_JapanHitEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue8, BP_STRUCT_VNHitEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue33, float CallFunc_Conv_StringToFloat_ReturnValue34, float CallFunc_Conv_StringToFloat_ReturnValue35, float CallFunc_Conv_StringToFloat_ReturnValue36, float CallFunc_Conv_StringToFloat_ReturnValue37, float CallFunc_Conv_StringToFloat_ReturnValue38, float CallFunc_Conv_StringToFloat_ReturnValue39, LinearColor CallFunc_MakeColor_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue40, float CallFunc_Conv_StringToFloat_ReturnValue41, float CallFunc_Conv_StringToFloat_ReturnValue42, float CallFunc_Conv_StringToFloat_ReturnValue43, LinearColor CallFunc_MakeColor_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue44, float CallFunc_Conv_StringToFloat_ReturnValue45, float CallFunc_Conv_StringToFloat_ReturnValue46, float CallFunc_Conv_StringToFloat_ReturnValue47, LinearColor CallFunc_MakeColor_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue48, float CallFunc_Conv_StringToFloat_ReturnValue49, float CallFunc_Conv_StringToFloat_ReturnValue50, float CallFunc_Conv_StringToFloat_ReturnValue51, LinearColor CallFunc_MakeColor_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue52, LinearColor CallFunc_MakeColor_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue53, float CallFunc_Conv_StringToFloat_ReturnValue54, float CallFunc_Conv_StringToFloat_ReturnValue55, float CallFunc_Conv_StringToFloat_ReturnValue56, float CallFunc_Conv_StringToFloat_ReturnValue57, LinearColor CallFunc_MakeColor_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue58, float CallFunc_Conv_StringToFloat_ReturnValue59, float CallFunc_Conv_StringToFloat_ReturnValue60, float CallFunc_Conv_StringToFloat_ReturnValue61, LinearColor CallFunc_MakeColor_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue62, float CallFunc_Conv_StringToFloat_ReturnValue63, float CallFunc_Conv_StringToFloat_ReturnValue64, BP_STRUCT_GlobalHitEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue65, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue66, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue67, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue68, LinearColor CallFunc_MakeColor_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue69, float CallFunc_Conv_StringToFloat_ReturnValue70, float CallFunc_Conv_StringToFloat_ReturnValue71, float CallFunc_Conv_StringToFloat_ReturnValue72, float CallFunc_Conv_StringToFloat_ReturnValue73, LinearColor CallFunc_MakeColor_ReturnValue18, float CallFunc_Conv_StringToFloat_ReturnValue74, float CallFunc_Conv_StringToFloat_ReturnValue75, float CallFunc_Conv_StringToFloat_ReturnValue76, float CallFunc_Conv_StringToFloat_ReturnValue77, LinearColor CallFunc_MakeColor_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue78, float CallFunc_Conv_StringToFloat_ReturnValue79, float CallFunc_Conv_StringToFloat_ReturnValue80, LinearColor CallFunc_MakeColor_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x3b98fe4
	void InitNewbieCounts(FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, bool CallFunc_IsValid_ReturnValue, NewbieGuideItem CallFunc_Array_Get_Item, NewbieGuideItem CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_GuideText_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, NewbieGuideItem K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x3b98fe4
	void AddIgnoreCameraMoveIndex(byte _Index, int CallFunc_Array_AddUnique_ReturnValue);// 0x3b98fe4
	void ReadConfigColorBlindnessTypeBoolDelegate(bool NewParam);// 0x3b98fe4
	void ReadConfigColorBlindnessTypeIntDelegate(int NewParam);// 0x3b98fe4
	void CheckGlobalReadRed(FString StrID, out bool bIsRed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void CheckIsBood(FString StrID, out bool bIsBlood, int CallFunc_FindSubstring_ReturnValue, int CallFunc_FindSubstring_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void CheckJapnReadRed(FString StrID, out bool bIsRed, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood);// 0x3b98fe4
	void GetJKCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_JKColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x3b98fe4
	void GetVNCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_VNColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x3b98fe4
	void GetCBColor(BP_STRUCT_ColorBlindnessConfig_type tempCBData, out LinearColor Color, BP_STRUCT_ColorBlindnessConfig_type localTempCBData, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetVNCBColor_bFind, LinearColor CallFunc_GetVNCBColor_Color, bool CallFunc_CheckGlobalReadRed_bIsRed, bool CallFunc_CheckJapnReadRed_bIsRed, bool CallFunc_GetJKCBColor_bFind, LinearColor CallFunc_GetJKCBColor_Color);// 0x3b98fe4
	void ReadConfigColorBlindnessType(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetGameFrontendHUDByGameInstance_ReturnValue, ColorBlindnessMgr* CallFunc_GetColorBlindnessMgr_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_ColorBlindnessConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor CallFunc_GetCBColor_color, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void CurGameMode(out int GameMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x3b98fe4
	void IsFPP(out bool IsFPP, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void OnRep_InWateringRange();// 0x3b98fe4
	void LoadAllBattleSound(FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, FName CallFunc_Array_Get_Item, BP_STRUCT_BattleSound_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x3b98fe4
	void AsyncLoadBattleSound(Object* Object, int SoundID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void LoadBattleSound(FString BankName, FString EventName, int SoundID, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Map_Contains_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Map_Contains_ReturnValue2);// 0x3b98fe4
	void SetAlwaysHideTouchInterface(bool Hide);// 0x3b98fe4
	void PlayBattleSoundInBP(int SoundID, bool bPlayed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, AkAudioEvent* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_PostEvent_ReturnValue);// 0x3b98fe4
	bool IsReleasePosInAimBtnRange(Vector Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x3b98fe4
	void ReadEmoteDataRowPC(int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int ___int_Loop_Counter_Variable, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int ___int_Loop_Counter_Variable2, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, FName CallFunc_Array_Get_Item2, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x3b98fe4
	void IsAtaptation(out bool adaptation);// 0x3b98fe4
	void ReadAdaptationTable(bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_Array_Get_Item, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x3b98fe4
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x3b98fe4
	void SetMotionParam(float GravityX, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x3b98fe4
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x3b98fe4
	void ShowFightingUI();// 0x3b98fe4
	void ShowAutoSprintBtn(bool Visible, Vector2D showPos_, bool inside, Vector iPhoneXWidgetOffset, Vector2D touchPos);// 0x3b98fe4
	void ReadConfigCrossHairColor(int NewParam, int ___int_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable2, LinearColor ___struct_Variable3, LinearColor ___struct_Variable4, LinearColor ___struct_Variable5, LinearColor ___struct_Variable6, LinearColor ___struct_Variable7, LinearColor ___struct_Variable8, LinearColor ___struct_Variable9, LinearColor ___struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x3b98fe4
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ReadConfigFromHUD(float CallFunc_Get3DTouchValue_TouchValue, bool CallFunc_Get3DTouchSwitch_TouchSwitch, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, SensibilityMode K2Node_MakeStruct_SensibilityMode, SensibilityMode K2Node_MakeStruct_SensibilityMode2, SensibilityMode K2Node_MakeStruct_SensibilityMode3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig2, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig4, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig5, <int,SightMaterialConfig> K2Node_MakeMap_Map, SensibilityConfig K2Node_MakeStruct_SensibilityConfig);// 0x3b98fe4
	void MakeFireModeEffect(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFPP_IsFPP, BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSGBySetting_SaveGame, float CallFunc_GetRushTriggerLengthByType_RushTriggerLength);// 0x3b98fe4
	void DebugNotDrawGuideLine();// 0x3b98fe4
	void ShowBackpackTombBox(bool Show);// 0x3b98fe4
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x3b98fe4
	void CreateRank(int Kills, int Rank);// 0x3b98fe4
	void DisableAimIfUnEquipWeapon(byte WeaponType);// 0x3b98fe4
	void SwitchAimMode();// 0x3b98fe4
	void DoInitUI(bool CallFunc_IsInFight_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x3b98fe4
	void HandleJumpBtnPressEvent();// 0x3b98fe4
	void OnRep_bInCar();// 0x3b98fe4
	void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void UpdateInputPanel();// 0x3b98fe4
	void ShowBackpackIconSplash(bool bShow);// 0x3b98fe4
	void RefreshWeaponPanel();// 0x3b98fe4
	void SetTouchInputEnabled(bool bEnabled);// 0x3b98fe4
	void ShowMainInputControl(bool bShow);// 0x3b98fe4
	void ShowTouchInterface(bool bShow, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x3b98fe4
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	void SetDeathGrayLerpValue(float Lerp);// 0x3b98fe4
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void GrayToOne__FinishedFunc();// 0x3b98fe4
	void GrayToOne__UpdateFunc();// 0x3b98fe4
	void GrayToZero__FinishedFunc();// 0x3b98fe4
	void GrayToZero__UpdateFunc();// 0x3b98fe4
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent(Key Key);// 0x3b98fe4
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x3b98fe4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnSpectatorCameraChange(bool bDie);// 0x3b98fe4
	void OnStopFireEventHandle();// 0x3b98fe4
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x3b98fe4
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x3b98fe4
	void OnSwitchWeaponHandle();// 0x3b98fe4
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void OnUseInventoryitemHandle();// 0x3b98fe4
	void ServerStartBattle();// 0x3b98fe4
	void ServerAfterLand();// 0x3b98fe4
	void ClientAfterLand();// 0x3b98fe4
	void RefreshTopMostUIPanel(byte Type);// 0x3b98fe4
	void GameStart();// 0x3b98fe4
	void RemoveWeaponAim(byte Slot);// 0x3b98fe4
	void SetMoveableAirborne(bool NewParam);// 0x3b98fe4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x3b98fe4
	void JoystickTriggerSprint(bool bIsSprint);// 0x3b98fe4
	void OnPlane();// 0x3b98fe4
	void SetPanels(out const UAEUserWidget*[] panels);// 0x3b98fe4
	void InitOprate();// 0x3b98fe4
	void OnFiremodeChange(int IntValue);// 0x3b98fe4
	void ChangeToMale();// 0x3b98fe4
	void ChangeToFemale();// 0x3b98fe4
	void DoUITouchMove(Vector Loc);// 0x3b98fe4
	void PressFire(int FingerIndex);// 0x3b98fe4
	void ShowFireBtn(bool bShow);// 0x3b98fe4
	void PressGrenade(bool isThrow);// 0x3b98fe4
	void InitJoyStickAfterActivation();// 0x3b98fe4
	void MemberVoice(int member, int Status);// 0x3b98fe4
	void ReceiveClientRestart();// 0x3b98fe4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x3b98fe4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x3b98fe4
	void ResetMissingUIUpdate();// 0x3b98fe4
	void MotionControliOS(Vector AxisValue);// 0x3b98fe4
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x3b98fe4
	void MotionControlAndroidTick();// 0x3b98fe4
	void MotionControlAndroid(Vector AxisValue);// 0x3b98fe4
	void ReceiveBackpackComponent();// 0x3b98fe4
	void InitWallFeedBack();// 0x3b98fe4
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x3b98fe4
	void DebugOpenGuide();// 0x3b98fe4
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x3b98fe4
	void CallShowTouchInterface(bool InShow);// 0x3b98fe4
	void OnGameModeStateChanged();// 0x3b98fe4
	void ReleaseFire();// 0x3b98fe4
	void OnFireModeChangeTD(int IntValue);// 0x3b98fe4
	void OnRep_InWateringRangeBP();// 0x3b98fe4
	void PlayerExitJumpEvent();// 0x3b98fe4
	void EnterFightingStateDelegate();// 0x3b98fe4
	void GameStartCountDownDelegate(float CountdownTime);// 0x3b98fe4
	void LuaReceiveBeginPlay();// 0x3b98fe4
	void AddPubgmAutoComp();// 0x3b98fe4
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key3, bool ___bool_Variable, FString ___string_Variable, FString ___string_Variable2, Key K2Node_InputActionEvent_Key5, Key K2Node_InputActionEvent_Key4, Key ___struct_Variable, Key K2Node_InputActionEvent_Key3, Key K2Node_InputActionEvent_Key2, Key K2Node_InputActionEvent_Key, int ___int_Variable, byte ___byte_Variable, byte ___byte_Variable2, byte ___byte_Variable3, byte ___byte_Variable4, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key, FString CallFunc_Conv_IntToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Transform ___struct_Variable2, delegate K2Node_CreateDelegate_OutputDelegate6, PubgmAutoRun* CallFunc_AddComponent_ReturnValue, Transform ___struct_Variable3, Transform ___struct_Variable4, AutoTestInterface* CallFunc_AddComponent_ReturnValue2, AutoRunTest* CallFunc_AddComponent_ReturnValue3, Transform ___struct_Variable5, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_CurrentActivityID, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, BP_PlayerPawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess3, delegate K2Node_CreateDelegate_OutputDelegate7, byte K2Node_Event_type, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Slot, Pawn* CallFunc_K2_GetPawn_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_CustomEvent_NewParam, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue2, FString CallFunc_Conv_IntToString_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess5, delegate K2Node_CreateDelegate_OutputDelegate8, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess6, Vector K2Node_Event_Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int K2Node_Event_fingerIndex, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate9, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate13, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, int K2Node_Event_member, int K2Node_Event_status, bool CallFunc_IsOnVehicle_ReturnValue, bool K2Node_Event_IsShow, int K2Node_Event_NewUIType, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, delegate K2Node_CreateDelegate_OutputDelegate14, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, Vector K2Node_CustomEvent_AxisValue2, int CallFunc_Divide_IntInt_ReturnValue, Vector K2Node_InputVectorAxisEvent_AxisValue, int ___int_Array_Index_Variable, BP_PlayerPawn_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_AxisValue, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate16, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess7, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, byte K2Node_Select2_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsObserver_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, bool K2Node_Event_InShow, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess8, FName CallFunc_GetGameModeState_ReturnValue, bool K2Node_SwitchName_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_IsObserver_ReturnValue2, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess10, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess11, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, bool CallFunc_IsInSpectating_ReturnValue, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsOnVehicle_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue4, GameStateBase* CallFunc_GetGameState_ReturnValue2, bool CallFunc_IsWindowOB_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate17, bool CallFunc_IsFPP_IsFPP, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger2_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue3, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance3, bool K2Node_DynamicCast_bSuccess14, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue3, int CallFunc_CurGameMode_GameMode, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue3, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager3, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsFPP_IsFPP2, int K2Node_CustomEvent_IntValue, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Conv_IntToString_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate18, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate19, delegate K2Node_CreateDelegate_OutputDelegate20, delegate K2Node_CreateDelegate_OutputDelegate21, GameInstance* CallFunc_GetGameInstance_ReturnValue4, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance4, bool K2Node_DynamicCast_bSuccess16, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate22, bool CallFunc_IsValid_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate23, Rotator CallFunc_GetControlRotation_ReturnValue, float K2Node_CustomEvent_CountDownTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_IsAutoRunTestGameBindCompoment_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x3b98fe4
	void VaultFailDS__DelegateSignature();// 0x3b98fe4
	void BindEventToBackpackComponent__DelegateSignature();// 0x3b98fe4
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x3b98fe4
	void PlayerEnterWater__DelegateSignature();// 0x3b98fe4
	void AirborneLanded__DelegateSignature();// 0x3b98fe4
	void ReloadingCDEnd__DelegateSignature();// 0x3b98fe4
	void ReloadingCDStart__DelegateSignature(float CD);// 0x3b98fe4
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x3d18, Size: 8]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x3d20, Size: 8]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x3d28, Size: 8]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x3d30, Size: 8]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x3d38, Size: 8]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x3d40, Size: 8]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x3d48, Size: 8]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x3d50, Size: 8]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x3d58, Size: 8]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x3d60, Size: 8]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3d68, Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3d6c, Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x3d70, Size: 8]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3d78, Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3d7c, Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x3d80, Size: 8]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x3d88, Size: 8]
	byte LastCameraMode;//[Offset: 0x3d90, Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x3d98, Size: 8]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da0, Size: 1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x3da4, Size: 4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x3da8, Size: 4]
	Object* WaitingUI;//[Offset: 0x3db0, Size: 8]
	Object* SimulatePlane;//[Offset: 0x3db8, Size: 8]
	float PlaneStartYaw;//[Offset: 0x3dc0, Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x3dc8, Size: 16]
	delegate ReloadingCDEnd;//[Offset: 0x3dd8, Size: 16]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de8, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x3df0, Size: 8]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x3df8, Size: 16]
	float CloseDistance;//[Offset: 0x3e08, Size: 4]
	byte AutoAimDrawType;//[Offset: 0x3e0c, Size: 1]
	delegate AirborneLanded;//[Offset: 0x3e10, Size: 16]
	float MotionRate_Yaw;//[Offset: 0x3e20, Size: 4]
	float MotionRate_Pitch;//[Offset: 0x3e24, Size: 4]
	float MotionAimRate_Pitch;//[Offset: 0x3e28, Size: 4]
	float MotionAimRate_Yaw;//[Offset: 0x3e2c, Size: 4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x3e30, Size: 4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x3e34, Size: 4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x3e38, Size: 4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x3e3c, Size: 4]
	float MotionTouchRate_Yaw;//[Offset: 0x3e40, Size: 4]
	float MotionTouchRate_Pitch;//[Offset: 0x3e44, Size: 4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e48, Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e49, Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4a, Size: 1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4b, Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x3e50, Size: 16]
	delegate PlayerLeaveWater;//[Offset: 0x3e60, Size: 16]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e70, Size: 1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e71, Size: 1]
	float PitchReverce;//[Offset: 0x3e74, Size: 4]
	float Left;//[Offset: 0x3e78, Size: 4]
	float Right;//[Offset: 0x3e7c, Size: 4]
	float LastTime;//[Offset: 0x3e80, Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x3e88, Size: 16]
	Vector CurMotionData;//[Offset: 0x3e98, Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x3ea8, Size: 16]
	delegate VaultFailDS;//[Offset: 0x3eb8, Size: 16]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x3ec8, Size: 80]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x3f18, Size: 32]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x3f38, Size: 32]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f58, Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f59, Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5a, Size: 1]
	FString ActiveDevicProfileName;//[Offset: 0x3f60, Size: 16]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f70, Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f71, Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f72, Size: 1]
	float UITouchMoveX;//[Offset: 0x3f74, Size: 4]
	float UITouchMoveY;//[Offset: 0x3f78, Size: 4]
	int PressFireFingerIndex;//[Offset: 0x3f7c, Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f80, Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f81, Size: 1]
	int VoiceMemberID;//[Offset: 0x3f84, Size: 4]
	int VoiceMemberStatus;//[Offset: 0x3f88, Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x3f8c, Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x3f90, Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x3fa8, Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb0, Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb1, Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb2, Size: 1]
	byte UnequipWeaponType;//[Offset: 0x3fb3, Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb4, Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x3fb8, Size: 8]
	int InputTeamID;//[Offset: 0x3fc0, Size: 4]
	int EmoteItemType;//[Offset: 0x3fc4, Size: 4]
	ItemRecordData[] EmoteDataRow;//[Offset: 0x3fc8, Size: 16]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd8, Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd9, Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x3fdc, Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x3fe4, Size: 8]
	int PeekMode;//[Offset: 0x3fec, Size: 4]
	int AimMode;//[Offset: 0x3ff0, Size: 4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x3ff8, Size: 80]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x4048, Size: 80]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x4098, Size: 80]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x40e8, Size: 80]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4138, Size: 1]
	<int,AkAudioEvent*> BattleSoundMap;//[Offset: 0x4140, Size: 80]
	<int,FString> BattleBankMap;//[Offset: 0x4190, Size: 80]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e0, Size: 1]
	BP_SAVEGAME_UIElemLayout_C* SaveGameUIElemLayout;//[Offset: 0x41e8, Size: 8]
	int GameMode;//[Offset: 0x41f0, Size: 4]
	int currentColorBlindnessType;//[Offset: 0x41f4, Size: 4]
	int CurrentHitEffectIndex;//[Offset: 0x41f8, Size: 4]
	int CurrentHurtEffectIndex;//[Offset: 0x41fc, Size: 4]
	Rotator CurControllerRotation;//[Offset: 0x4200, Size: 12]
	bool IsCurExitJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420c, Size: 1]
	bool bStopDownloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420d, Size: 1]
	int ShoulderMode;//[Offset: 0x4210, Size: 4]

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x35ff098
	static GameBackendHUD* GetInstance();// 0x35ff064
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x35fefd8
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x35fef4c

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x28, Size: 8]
	FString BackendUtilsClassName;//[Offset: 0x30, Size: 16]
	BackendUtils* Utils;//[Offset: 0x40, Size: 8]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x48, Size: 16]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x58, Size: 80]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x56b4244
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x56b41b8

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x35febd0

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x28, Size: 8]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x28, Size: 16]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x38, Size: 16]
	FString ManualTableDirectory;//[Offset: 0x48, Size: 16]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0xb0, Size: 16]
	World* CurWorld;//[Offset: 0xc0, Size: 8]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0xc8, Size: 80]
	FString PathCompressionConfigsPath;//[Offset: 0x1b8, Size: 16]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x1cc, Size: 4]
	FString BaseTableRelativeDir;//[Offset: 0x1d8, Size: 16]
	FString ModTableRelativeDir;//[Offset: 0x1e8, Size: 16]
	<FName,ModTable*> ModTableMap;//[Offset: 0x1f8, Size: 80]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x248, Size: 80]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x298, Size: 16]
	<FName,bool> CheckNeedModMap;//[Offset: 0x2a8, Size: 80]
	FString CurrentModName;//[Offset: 0x2f8, Size: 16]
	FString EmptyModName;//[Offset: 0x308, Size: 16]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x318, Size: 80]
	<FString,bool> CheckMapTable;//[Offset: 0x368, Size: 80]
	void ReleaseTable(FName tableName);// 0x3407d7c
	UAEDataTable* GetTablePtr(FName tableName);// 0x3407cf0
	BaseTableResMap* GetTableMap(FString tableName);// 0x3407c38
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x34074c4
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x340741c

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x80, Size: 8]

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 24]
	Font* SmallFont;//[Offset: 0x70, Size: 8]
	SoftObjectPath SmallFontName;//[Offset: 0x78, Size: 24]
	Font* MediumFont;//[Offset: 0x90, Size: 8]
	SoftObjectPath MediumFontName;//[Offset: 0x98, Size: 24]
	Font* LargeFont;//[Offset: 0xb0, Size: 8]
	SoftObjectPath LargeFontName;//[Offset: 0xb8, Size: 24]
	Font* SubtitleFont;//[Offset: 0xd0, Size: 8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xd8, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xf0, Size: 16]
	FString[] AdditionalFontNames;//[Offset: 0x108, Size: 16]
	class Console* ConsoleClass;//[Offset: 0x118, Size: 8]
	SoftClassPath ConsoleClassName;//[Offset: 0x120, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x138, Size: 8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x140, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x158, Size: 8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x160, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x178, Size: 8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x180, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x198, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x1b0, Size: 8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 24]
	Object* GameSingleton;//[Offset: 0x288, Size: 8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 8]
	Texture2D* DefaultTexture;//[Offset: 0x2b0, Size: 8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b8, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2d0, Size: 8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d8, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2f0, Size: 8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f8, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x310, Size: 8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x318, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x330, Size: 8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x338, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x350, Size: 8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x358, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x370, Size: 8]
	FString WireframeMaterialName;//[Offset: 0x378, Size: 16]
	Material* DebugMeshMaterial;//[Offset: 0x388, Size: 8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x390, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x3a8, Size: 8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3b0, Size: 16]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3c0, Size: 8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3c8, Size: 16]
	Material* LightingTexelDensityMaterial;//[Offset: 0x3d8, Size: 8]
	FString LightingTexelDensityName;//[Offset: 0x3e0, Size: 16]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x3f0, Size: 8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x3f8, Size: 16]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x408, Size: 8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x410, Size: 16]
	Material* RemoveSurfaceMaterial;//[Offset: 0x420, Size: 8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x428, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x440, Size: 8]
	FString VertexColorMaterialName;//[Offset: 0x448, Size: 16]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x458, Size: 8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x460, Size: 16]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x470, Size: 8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x478, Size: 16]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x488, Size: 8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x490, Size: 16]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4a0, Size: 8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4a8, Size: 16]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4b8, Size: 8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4c0, Size: 16]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4d0, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x4e8, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x4f0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x4f8, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x500, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x508, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x510, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x518, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x520, Size: 8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x528, Size: 8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x530, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x548, Size: 8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x550, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x568, Size: 8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x570, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x588, Size: 8]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x590, Size: 24]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x5a8, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x5c0, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x5d8, Size: 8]
	Texture2D* SmaaSearchTex;//[Offset: 0x5e0, Size: 8]
	Material* DyeingColorMaterial;//[Offset: 0x5e8, Size: 8]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x5f0, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x608, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x618, Size: 16]
	LinearColor[] QuadComplexityColors;//[Offset: 0x628, Size: 16]
	LinearColor[] LightComplexityColors;//[Offset: 0x638, Size: 16]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x648, Size: 16]
	LinearColor[] LODColorationColors;//[Offset: 0x658, Size: 16]
	LinearColor[] HLODColorationColors;//[Offset: 0x668, Size: 16]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x678, Size: 16]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x688, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x68c, Size: 4]
	float MinLightMapDensity;//[Offset: 0x690, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x694, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x698, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69c, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x6a0, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x6a4, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x6a8, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x6b8, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x6c8, Size: 16]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6d8, Size: 8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6e0, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6f8, Size: 16]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x708, Size: 16]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x718, Size: 16]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x728, Size: 16]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x738, Size: 8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x740, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x758, Size: 8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x760, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x778, Size: 8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x780, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x798, Size: 8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7a0, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x7c0, Size: 8]
	FString[] DeferredCommands;//[Offset: 0x7c8, Size: 16]
	int TickCycles;//[Offset: 0x7d8, Size: 4]
	int GameCycles;//[Offset: 0x7dc, Size: 4]
	int ClientCycles;//[Offset: 0x7e0, Size: 4]
	float NearClipPlane;//[Offset: 0x7e4, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e8, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e8, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e8, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x7ec, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f0, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7f0, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7f0, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7f0, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7f0, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7f0, Size: 1]
	float FixedFrameRate;//[Offset: 0x7f4, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7f8, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x80c, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x810, Size: 1]
	Color C_WorldBox;//[Offset: 0x814, Size: 4]
	Color C_BrushWire;//[Offset: 0x818, Size: 4]
	Color C_AddWire;//[Offset: 0x81c, Size: 4]
	Color C_SubtractWire;//[Offset: 0x820, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x824, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x828, Size: 4]
	Color C_WireBackground;//[Offset: 0x82c, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x830, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x834, Size: 4]
	Color C_BSPCollision;//[Offset: 0x838, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x83c, Size: 4]
	Color C_Volume;//[Offset: 0x840, Size: 4]
	Color C_BrushShape;//[Offset: 0x844, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x848, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x850, Size: 16]
	byte TransitionType;//[Offset: 0x860, Size: 1]
	FString TransitionDescription;//[Offset: 0x868, Size: 16]
	FString TransitionGameMode;//[Offset: 0x878, Size: 16]
	float MeshLODRange;//[Offset: 0x888, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x890, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x894, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x898, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x89c, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 1]
	int MaxParticleResize;//[Offset: 0x8a4, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x8a8, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8b0, Size: 16]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x8c0, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x8dc, Size: 4]
	float DisplayGamma;//[Offset: 0x8e0, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x8e4, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x8e8, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x8ec, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x8fc, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x90c, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x91c, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x92c, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93c, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93d, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x93d, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x93d, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x93d, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x940, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x948, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94c, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x950, Size: 16]
	float SelectionHighlightIntensity;//[Offset: 0x970, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x974, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x978, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x97c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x980, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xb70, Size: 16]
	FString[] ServerActors;//[Offset: 0xb80, Size: 16]
	FString[] RuntimeServerActors;//[Offset: 0xb90, Size: 16]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba0, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xbb8, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x78, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x7c, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x80, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x84, Size: 4]
	int WindowPosX;//[Offset: 0x88, Size: 4]
	int WindowPosY;//[Offset: 0x8c, Size: 4]
	int FullscreenMode;//[Offset: 0x90, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x94, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x98, Size: 4]
	uint32 Version;//[Offset: 0x9c, Size: 4]
	int AudioQualityLevel;//[Offset: 0xa0, Size: 4]
	float FrameRateLimit;//[Offset: 0xa4, Size: 4]
	int DesiredScreenWidth;//[Offset: 0xac, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int DesiredScreenHeight;//[Offset: 0xb4, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xb8, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xbc, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xc0, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xc4, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xc8, Size: 16]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xd8, Size: 16]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xe8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xf0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xf8, Size: 16]
	void ValidateSettings();// 0x54bc3ec
	bool SupportsHDRDisplayOutput();// 0x54bc3ac
	void SetVSyncEnabled(bool bEnable);// 0x54bc328
	void SetVisualEffectQuality(int Value);// 0x54bc2ac
	void SetViewDistanceQuality(int Value);// 0x54bc230
	void SetToDefaults();// 0x54bc214
	void SetTextureQuality(int Value);// 0x54bc198
	void SetShadowQuality(int Value);// 0x54bc11c
	void SetScreenResolution(IntPoint Resolution);// 0x54bc0a4
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x54bc028
	void SetResolutionScaleValue(int NewScaleValue);// 0x54bbfac
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x54bbf30
	void SetPostProcessingQuality(int Value);// 0x54bbeb4
	void SetOverallScalabilityLevel(int Value);// 0x54bbe30
	void SetFullscreenMode(byte InFullscreenMode);// 0x54bbdb4
	void SetFrameRateLimit(float NewLimit);// 0x54bbd38
	void SetFoliageQuality(int Value);// 0x54bbcbc
	void SetBenchmarkFallbackValues();// 0x54bbca8
	void SetAudioQualityLevel(int QualityLevel);// 0x54bbc2c
	void SetAntiAliasingQuality(int Value);// 0x54bbbb0
	void SaveSettings();// 0x54bbb94
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x54bba9c
	void RevertVideoMode();// 0x54bba88
	void ResetToCurrentSettings();// 0x54bba6c
	void LoadSettings(bool bForceReload);// 0x54bb9e0
	bool IsVSyncEnabled();// 0x54bb9a8
	bool IsVSyncDirty();// 0x54bb970
	bool IsScreenResolutionDirty();// 0x54bb938
	bool IsHDREnabled();// 0x54bb900
	bool IsFullscreenModeDirty();// 0x54bb8c8
	bool IsDirty();// 0x54bb888
	int GetVisualEffectQuality();// 0x54bb854
	int GetViewDistanceQuality();// 0x54bb820
	int GetTextureQuality();// 0x54bb7ec
	int GetShadowQuality();// 0x54bb7b8
	IntPoint GetScreenResolution();// 0x54bb780
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x54bb5f4
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x54bb468
	float GetRecommendedResolutionScale();// 0x54bb42c
	byte GetPreferredFullscreenMode();// 0x54bb3f8
	int GetPostProcessingQuality();// 0x54bb3c4
	int GetOverallScalabilityLevel();// 0x54bb390
	IntPoint GetLastConfirmedScreenResolution();// 0x54bb358
	byte GetLastConfirmedFullscreenMode();// 0x54bb324
	static GameUserSettings* GetGameUserSettings();// 0x54bb2f0
	byte GetFullscreenMode();// 0x54bb2bc
	float GetFrameRateLimit();// 0x54bb288
	int GetFoliageQuality();// 0x54bb254
	IntPoint GetDesktopResolution();// 0x54bb21c
	static IntPoint GetDefaultWindowPosition();// 0x54bb1e4
	static byte GetDefaultWindowMode();// 0x54bb1b0
	float GetDefaultResolutionScale();// 0x54bb174
	static IntPoint GetDefaultResolution();// 0x54bb13c
	int GetCurrentHDRDisplayNits();// 0x54bb108
	int GetAudioQualityLevel();// 0x54bb0ec
	int GetAntiAliasingQuality();// 0x54bb0b8
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x54baff0
	void ConfirmVideoMode();// 0x54bafdc
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x54baf50
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x54baecc
	void ApplyNonResolutionSettings();// 0x54baeb0
	void ApplyHardwareBenchmarkResults();// 0x54bae94

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x258, Size: 16]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x274, Size: 4]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x1d0, Size: 16]
	delegate OnHandleServerListDownload;//[Offset: 0x1e0, Size: 16]
	FString CSVTableRelativeDir;//[Offset: 0x1f0, Size: 16]
	<FName,FString> GameStatusMap;//[Offset: 0x200, Size: 80]
	<FString,bool> LanguageMap;//[Offset: 0x250, Size: 80]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x2a8, Size: 8]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	BugReporter* BugReporter;//[Offset: 0x2b8, Size: 8]
	GMLogShare* logShare;//[Offset: 0x2c0, Size: 8]
	int MaxUpdateRetryTimes;//[Offset: 0x2c8, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x2d8, Size: 8]
	Translator* Translator;//[Offset: 0x2e0, Size: 8]
	GCPufferDownloader* GPuffer;//[Offset: 0x2e8, Size: 8]
	LaggingReporter* LaggingReporter;//[Offset: 0x2f0, Size: 8]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x300, Size: 8]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x360, Size: 8]
	int ODPaksPoolSize;//[Offset: 0x368, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x36c, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x370, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x3a8, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x3c8, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x3e8, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x3f0, Size: 16]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x408, Size: 8]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x410, Size: 8]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x418, Size: 8]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x420, Size: 8]
	FString ScriptBPRelativeDir;//[Offset: 0x430, Size: 16]
	FString ScriptRelativeDir;//[Offset: 0x440, Size: 16]
	FString InGameLuaDir;//[Offset: 0x450, Size: 16]
	FString PreloadLuaFileRelativePath;//[Offset: 0x460, Size: 16]
	FString[] LuaDirList;//[Offset: 0x470, Size: 16]
	FString[] NoGCPackage;//[Offset: 0x480, Size: 16]
	float LuaTickTime;//[Offset: 0x490, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x4c0, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x4c4, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x4c8, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x4cc, Size: 4]
	TssManager* TssMgr;//[Offset: 0x4d0, Size: 8]
	float PingReportInterval;//[Offset: 0x4f8, Size: 4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x5cc, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x5d0, Size: 16]
	delegate UIStackRecoverDelegate;//[Offset: 0x5e0, Size: 16]
	delegate GetUserSettingsDelegate;//[Offset: 0x5f0, Size: 16]
	delegate SaveUserSettingsDelegate;//[Offset: 0x600, Size: 16]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x610, Size: 16]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x620, Size: 16]
	FString UserSettingsClassName;//[Offset: 0x630, Size: 16]
	FString LanguageSettingsClassName;//[Offset: 0x640, Size: 16]
	FString ActiveSaveGameName;//[Offset: 0x650, Size: 16]
	FString CachedSaveGameName;//[Offset: 0x660, Size: 16]
	FString LanguageSaveGameName;//[Offset: 0x670, Size: 16]
	class Object* UserSettingsClass;//[Offset: 0x680, Size: 8]
	SaveGame* UserSettings;//[Offset: 0x688, Size: 8]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x690, Size: 16]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x750, Size: 8]
	int FpsForWindowClient;//[Offset: 0x758, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x760, Size: 8]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76a, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76b, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76e, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76f, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	int GDPRUserType;//[Offset: 0x774, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x77c, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x780, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x784, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x788, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x78c, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x790, Size: 4]
	float fFPSReportInterval;//[Offset: 0x794, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x7a8, Size: 16]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bb, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x878, Size: 8]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x880, Size: 8]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x888, Size: 16]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x89c, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x8a0, Size: 8]
	FString BattleUtilsClassName;//[Offset: 0x8a8, Size: 16]
	BattleUtils* BattleUtils;//[Offset: 0x8b8, Size: 8]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x3603088
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x3602f54
	void TimeStatisticStop(int Type, FString Name);// 0x3602de0
	void TimeStatisticStart(int Type);// 0x3602d64
	void TickUdpCollector(float DeltaTime);// 0x3602ce8
	void StatisVisibilityWidget(Widget* Widget);// 0x3602c6c
	void StatisLoadedTexture(Texture* Texture);// 0x3602bf0
	bool StartGrayUpdate();// 0x3602bb8
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x3602ba4
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x3602b90
	void ShutdownUnrealNetwork();// 0x3602b74
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x3602af0
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x3602998
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x36027ac
	bool SaveUserSettingsByDelegate(SaveGame* SaveGame, FString LayoutName);// 0x36026b0
	void RetryDownload();// 0x360269c
	void RetryCDNDownload();// 0x3602688
	void ResetUserSettings();// 0x3602674
	void ReleaseBattleUtils();// 0x3602660
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x36024d0
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x3602340
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x36021b0
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x3602020
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3601f84
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x3601df4
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x3601d14
	void OnWebviewActionNotify(FString URL);// 0x3601be0
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x3601afc
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x3601a18
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x360195c
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x360179c
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x36016b8
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x36015c8
	void OnNotUpdateFinished();// 0x36015b4
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x36013fc
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x3601348
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x3601294
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x3601120
	void OnGetCountryNoNotify(int country);// 0x36010a4
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x3600f80
	void OnGCloudNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x3600e58
	void OnGameMasterEvent(FString EventName, int Ret);// 0x3600ce8
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x3600c08
	void NotifyLoadingUIOperation(int OperationType);// 0x3600b8c
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x3600b10
	void LuaDoString(FString LuaString);// 0x3600a60
	bool IsWindowOB();// 0x3600a28
	bool IsInstallPlatform(FString Platform);// 0x36008e8
	bool IsCEHideLobbyUI();// 0x36008b0
	bool HasAnyNetMsgToHandle();// 0x3600878
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x36007c0
	SaveGame* GetUserSettings();// 0x3600784
	GDolphinUpdater* GetUpdater();// 0x3600768
	Translator* GetTranslator();// 0x360074c
	bool GetShouldShowAdaptTipInLobby();// 0x3600714
	GCPufferDownloader* GetPufferDownloader();// 0x36006f8
	FString GetPingReportInfo();// 0x3600654
	FString GetPacketLossReportInfo();// 0x36005b0
	LuaStateWrapper* GetLuaStateWrapper();// 0x360057c
	LuaEventBridge* GetLuaEventBridge();// 0x3600548
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x3600514
	GVoiceInterface* GetGVoiceInterface();// 0x36004d8
	GameStateBase* GetGameState();// 0x36004a4
	FString GetFPSReportInfo();// 0x3600400
	EffectSettingMgr* GetEffectSettingMgr();// 0x36003c4
	int GetDetailNetInfoFromGCloud();// 0x3600390
	SaveGame* GetCustomSetting(FString InSlotName);// 0x36002d8
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x360029c
	Object* GetClientNetObj();// 0x3600268
	BugReporter* GetBugReporter();// 0x3600234
	BattleUtils* GetBattleUtils();// 0x3600200
	FString GetBattleIDHexStr();// 0x360015c
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x3600128
	void FinishModifyUserSettings();// 0x3600114
	void EnableFPSAndMemoryLog(bool bEnable);// 0x3600090
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x3600004
	void DispatchConfirmMisKill(FString KillerName);// 0x35fff5c
	void CreateBattleUtils();// 0x35fff48
	void ClearUIElemSettings();// 0x35fff34
	void CheckLocalizationLanguage();// 0x35fff20
	void CallGlobalScriptFunction(FString InFunctionName);// 0x35ffe70
	void BeginModifyUserSettings();// 0x35ffe5c
	void BattleUtilsGameEnd();// 0x35ffe48
	void AfterLoadedEditorLogin();// 0x35ffe34
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x35ffd4c
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x35ffcd0
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x35ffc54

--------------------------------
Class: GVoiceInterface.Object
	int lbsRoomMemberID;//[Offset: 0x74, Size: 4]
	delegate CheckTempLbsRoomOnJoinRoom;//[Offset: 0xb0, Size: 16]
	delegate CheckTempLbsRoomOnQuitRoom;//[Offset: 0xc0, Size: 16]
	delegate OnSTTReportCallback;//[Offset: 0xd0, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0xe0, Size: 16]
	FString ServerInfo;//[Offset: 0xf0, Size: 16]
	uint32 openGvoiceLog;//[Offset: 0x100, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0x104, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0x108, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x120, Size: 8]
	void UploadRecordFile();// 0x3612a34
	void TestMic();// 0x3612a20
	bool TeamSpeakerEnable();// 0x3612a04
	bool TeamMicphoneEnable();// 0x36129e8
	void SwitchMode(enum CharMode);// 0x361296c
	void SwitchMicphoneWhenCorpsMode();// 0x3612958
	void SwitchCampRoom(enum campMode);// 0x36128dc
	void StopRecord();// 0x36128c8
	void StopPlayRecordFile();// 0x36128b4
	void StopInterphone();// 0x36128a0
	void StopCampMode();// 0x361288c
	void StartRecord();// 0x3612878
	void StartInterphone();// 0x3612864
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x36126f0
	void SpeechToText();// 0x36126dc
	void ShowOpenSpeakerAtFirstMsg();// 0x36126c8
	void ShowCorpsModeCannotUseLBSVoice();// 0x36126b4
	void SetVoiceMode(int Type);// 0x3612638
	void SetSpeakerVolum(float Value);// 0x36125bc
	void SetSpeakerStatus(bool Flag);// 0x3612538
	void SetPlayerVolume(FString InPlayerid, int InVol);// 0x36123c8
	void SetMicphoneVolum(float Value);// 0x361234c
	void SetMicphoneStatus(bool Flag);// 0x36122c8
	void SetLbsVoiceRadius(float Radius);// 0x3612250
	void SetLbsRoomEnableStatus(bool Flag);// 0x36121cc
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x3612150
	void SetCurrentDownloadFieldID(FString filedId);// 0x3612018
	void SetAllVoiceStatus(bool Flag);// 0x3611f94
	void ResetWhenLogOut();// 0x3611f80
	bool ReportPlayers(FString InExtraInfo);// 0x3611e40
	void ReactiveLbsStatus();// 0x3611e2c
	void QuitTempLbsRoom(FString roomStr);// 0x3611cf8
	void QuitRoom();// 0x3611ce4
	void PlayRecordFile();// 0x3611cd0
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x3611c4c
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x3611bb8
	int OpenTeamInterphone();// 0x3611b84
	void OpenSpeakerByTempLbs(bool Open);// 0x3611b00
	int OpenSpeaker();// 0x3611acc
	void OpenMicByTempLbs(bool Open);// 0x3611a48
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x3611a34
	int OpenMic();// 0x3611a00
	void OpenIngameSpeaker();// 0x36119ec
	int OpenIngameMicphone();// 0x36119b8
	void OpenAllSpeaker(bool ShowTips);// 0x3611934
	int OpenAllMicphone(bool ShowTips);// 0x36118a0
	int OpenAllInterphone();// 0x361186c
	void OnRoomTypeChanged(FString itemtext);// 0x3611738
	bool LbsSpeakerEnable();// 0x361171c
	bool LbsMicphoneEnable();// 0x3611700
	void JoinTempLbsRoom(FString room, FString userId);// 0x36114f0
	void JoinRoom(FString room, FString userId);// 0x36112e0
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x36110d0
	bool IsTeamInterphoneOpenned();// 0x36110b4
	bool IsLbsInterphoneOpenned();// 0x3611098
	bool IsInterphoneMode();// 0x3611068
	void InitGVoiceComponent(FString userId);// 0x3610f34
	bool HaveTeamRoom();// 0x3610efc
	bool HaveLbsRoom();// 0x3610ec4
	float GetVoiceLength();// 0x3610e90
	int GetPlayerVolume(FString InPlayerid);// 0x3610d54
	void GetAuthKey();// 0x3610d40
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x3610c80
	void EnbleMicAndSpeakerByRoomName(FString roomName, bool Enable);// 0x3610b08
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x36109e8
	void DownloadRecordFile();// 0x36109d4
	void CommonTestMic();// 0x36109c0
	void CloseSpeaker();// 0x36109ac
	void CloseMic();// 0x3610998
	void CloseIngameSpeaker();// 0x3610984
	void CloseIngameMicphone();// 0x3610970
	void CloseAllSpeaker(bool ShowTips);// 0x36108ec
	void CloseAllMicphone(bool ShowTips);// 0x3610868
	void CheckAndEnableRoomSpeaker();// 0x3610854
	void ChatShowAgeRestrictionMsgInLobby();// 0x3610840
	void ChatShowAgeRestrictionMsgInFighting();// 0x361082c
	void ChatShowAgeRestrictionMsgInChat();// 0x3610818
	void ChatRequestPrivacyInSetting();// 0x3610804
	void ChatRequestPrivacyInGame();// 0x36107f0

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x35f3c80
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x35f3930
	void ReadZipLog(FString Filename);// 0x35f37fc
	byte[] CompressLog(bool pullAllLog);// 0x35f3700

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x3610418
	static void Init();// 0x3610404

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x68, Size: 80]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x184, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x188, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x18c, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x1a8, Size: 16]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	void StartAppUpdate();// 0x360a13c
	void SetEnableCDNGetVersion(bool Enable);// 0x360a0b8
	void OnDolphinBGDownloadDone();// 0x360a0a4
	bool IsUpdating();// 0x360a06c
	bool IsGrayUpdate();// 0x360a034
	bool IsExamine();// 0x3609ffc
	void Install();// 0x3609fe8
	int GetTotalValue();// 0x3609fb4
	int GetCurValue();// 0x3609f80
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3609e3c
	float GetCurPercent();// 0x3609e08
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x3609d7c
	uint32 GetChannelID();// 0x3609d48
	void FinishUpdate();// 0x3609d34
	void FinishPufferUpdate();// 0x3609d20
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x3609c9c
	bool EnableCDNGetVersion();// 0x3609c64
	void ContinueUpdate();// 0x3609c50
	void CancelUpdate();// 0x3609c3c
	void CancelAppUpdate();// 0x3609c28

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x28, Size: 16]
	FString StoredAccessToken;//[Offset: 0x38, Size: 16]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x48, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x58, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x68, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xf8, Size: 8]
	void TranslateV2(int Channel, int ID, FString Text);// 0x3619270
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3618fec
	void PostMsg(FString URL, FString Content);// 0x3618edc
	void OnTranslateV2(bool Success, FString Data);// 0x3618de4
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x3b98fe4
	void OnTranslate(bool Success, FString Data);// 0x3618cec
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x3618bf4
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x3b98fe4
	void OnGetAccessToken(bool Success, FString Data);// 0x3618afc
	void OnDetectV2(bool Success, FString Data);// 0x3618a04
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x3b98fe4
	void OnDetect(bool Success, FString Data);// 0x361890c
	bool HasTranslating();// 0x36188d4
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3618604
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3618380

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	FString DownloadDir;//[Offset: 0x378, Size: 16]
	FString PufferTmpDir;//[Offset: 0x388, Size: 16]
	uint32 CleanFlagVer;//[Offset: 0x398, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x3a0, Size: 16]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x3b8, Size: 16]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x3c8, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x3d0, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x3d4, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x3d8, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x3dc, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x3e0, Size: 16]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x3f4, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x3f8, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x3fc, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x404, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x408, Size: 16]
	bool StopTask(uint64 TaskID);// 0x360f11c
	int StopMergeBinDiffPak(int outterTaskID);// 0x360f090
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x360f000
	void StopBGDownloadNotification();// 0x360efec
	bool StopAllTask();// 0x360efb4
	void StartDownloadItem(uint32 ItemID, uint32 Priority, delegate downloadDelegate);// 0x360eea4
	void StartBGDownloadNotification(uint32 InDownloadedSize);// 0x360ee28
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x360ec5c
	void SetTempProductIdBase(int ProductIdRaw);// 0x360ebe0
	void SetTempProductId(FString ProductIdRaw);// 0x360eaac
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x360e7e8
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x360e6a4
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x360e614
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x360e5fc
	static int ReturnLocalFiles_LuaState();// 0x360e5e4
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x360e45c
	bool RemountPakFiles();// 0x360e424
	FString ReadFile(FString Filename);// 0x360e288
	bool PreFetchPakFiles();// 0x360e250
	int PreFetchODPakFilesUpdate();// 0x360e21c
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x360e184
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x360e0f4
	bool PreFetchODPakFiles(bool Start);// 0x360e05c
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x360de4c
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x360dcd8
	int MoveFileTo(FString Filename, FString from, FString to);// 0x360d9e4
	int MoveFile(FString from, FString to);// 0x360d7cc
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x360d44c
	bool IsODPaks(FString FilePath);// 0x360d30c
	bool IsODFileExists(FString Path);// 0x360d250
	bool IsInitSuccess();// 0x360d218
	bool IsFileReady(FString FilePath);// 0x360d0d8
	bool IsFileExist(FString Filename, FString extension);// 0x360cebc
	bool InitializeODPaks();// 0x360ce84
	FString GetTempWorkPath();// 0x360cde0
	void GetProductIDBase(out int[] ProductIDs);// 0x360cd28
	void GetProductID(out int[] ProductIDs);// 0x360cc70
	int GetODPakNum();// 0x360cc3c
	FString GetODPakName(FString Path);// 0x360cb20
	uint32 GetInitErrcode();// 0x360caec
	uint32 GetFileSizeCompressed(FString FilePath);// 0x360c9b0
	float GetFileSize(FString Filename);// 0x360c874
	FString GetDownloadPath();// 0x360c7d0
	float GetCurrentSpeed();// 0x360c79c
	int GetBatchODPaksDownloadList_LuaState();// 0x360c784
	void EnableUseOldInterface(bool Enable);// 0x360c700
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x360c5c0
	static bool DeleteFile(FString fullPath);// 0x360c488
	bool ConvertPreFetchFiles();// 0x360c450
	FString ConvertItemIdToPakName(uint32 ItemID);// 0x360c35c
	bool ClearUselessODPaks();// 0x360c324
	bool ClearPreFetchODPaksFiles();// 0x360c2ec
	bool ClearPreFetchFiles();// 0x360c2b4
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x360c0f0

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x48, Size: 8]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x58, Size: 16]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x35ef9e8

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x545936c

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 8]
	void StartUpdateApp();// 0x35fcb1c
	void StartAppUpdate(bool StartGrayUpdate);// 0x35fca98
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x35fc9dc
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x35fc920
	bool IsUpdating();// 0x35fc8e8
	bool IsGrayUpdate();// 0x35fc8b0
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x35fc76c
	void FinishUpdate();// 0x35fc758
	void ContinueUpdate();// 0x35fc744
	void CancelUpdate();// 0x35fc730

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x28, Size: 8]
	FString LuaManagerName;//[Offset: 0x30, Size: 16]
	FString ShowUI;//[Offset: 0x40, Size: 16]
	FString HideUI;//[Offset: 0x50, Size: 16]
	FString CheckWindowOpen;//[Offset: 0x60, Size: 16]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x28, Size: 80]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x361ea08
	void AddSystem(const FString SystemName, const FString BPPath);// 0x361e7f8

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x80, Size: 16]
	void Init();// 0x3b98fe4

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x28, Size: 16]
	FString TssBuildInIpInfo;//[Offset: 0x38, Size: 16]
	static int SendSkdData_LuaState();// 0x36581b4
	static int SendEigeninfoData_LuaState();// 0x365819c
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x3658184
	static int OnRecvData_LuaState();// 0x365816c
	static int GetUserTag4Lua_LuaState();// 0x3658154
	static int GetDeviceFeature_LuaState();// 0x365813c
	static int EigenArrayObfuscationVerify_LuaState();// 0x3658124

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 16]
	delegate OnFail;//[Offset: 0x38, Size: 16]
	FString FileURL;//[Offset: 0x48, Size: 16]
	FString FileSavePath;//[Offset: 0x58, Size: 16]
	FString UrlHash;//[Offset: 0x68, Size: 16]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	void Start(FString URL);// 0x3619c24
	static ImageDownloader* MakeDownloaderInGame();// 0x3619bf0
	static ImageDownloader* MakeDownloader();// 0x3619bbc
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x3619a80

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x58, Size: 80]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0xc8, Size: 16]
	void TickUDPPing(float DeltaTime);// 0x365c57c
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x365c2f8
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x365c14c
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x3b98fe4
	bool IsChooingZoneAccess();// 0x365c114
	bool isAllZoneHasPingValue();// 0x365c0dc
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x365bf78
	float GetZoneServerDelay(FString ServerAddress);// 0x365be3c
	int GetMinDealyAddress();// 0x365be08
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x365bc94

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x28, Size: 80]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x78, Size: 80]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0xc8, Size: 80]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0x118, Size: 80]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x168, Size: 80]
	void Reset();// 0x2f82d6c
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x2f82cf0
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x2f82c74
	void RemoveImage(Image* Image);// 0x2f82bf8
	void HandleUserSettingChange();// 0x2f82be4
	LinearColor GetColorByType(int Type);// 0x2f82b54
	void Clear();// 0x2f82b40
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x2f82a88
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x2f829d0
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x2f828dc
	void AddColorByType(FString Type, LinearColor Color);// 0x2f8276c

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x28, Size: 16]
	FString MultiLayerColorTable;//[Offset: 0x38, Size: 16]
	void UpdateSingleLayerColor(LinearColor Color);// 0x2fb25d0
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x2fb2460
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x2fb23e4
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x2fb2368

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x28, Size: 80]
	void SetMaxTaskNum(int Num);// 0x35eeae0
	void RunNextTask();// 0x35eeacc
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x35ee990
	void ClearOneTask(FString ObjectPath);// 0x35ee85c
	void ClearAllTask();// 0x35ee848
	void AddTask(FString ObjectPath, int LoadPriority);// 0x35ee6d8

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x80, Size: 8]
	UAEGameMode* BattleGameMode;//[Offset: 0x98, Size: 8]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0xa0, Size: 16]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0xb0, Size: 56]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xe8, Size: 912]
	FString LuaFilePath;//[Offset: 0x478, Size: 16]
	uint32 SyncNewBattlePlayer(uint64 UId, out const PlayerInfoData Info);// 0x35f2410
	void SyncGameInfo(out const BattleGameInfo Info);// 0x35f2328
	void SyncGameExit();// 0x35f2314
	void SyncBattlePlayerExit(uint64 UId, FName PlayerType, FString Reason);// 0x35f215c
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x35f2098
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x35f1fcc
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x35f1ec0
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x35f1d50
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x35f1c60
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x35f1ba8
	void RequestAllPlayersBattleData(byte DataType);// 0x35f1b2c
	void OnPostLoadMapWithWorld(World* World);// 0x35f1ab0
	BattlePlayer* NewBattlePlayer();// 0x35f1a7c
	BattleAIPlayer* NewBattleAIPlayer();// 0x35f1a48
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x35f19bc
	UAEGameMode* GetBattleGameMode();// 0x35f1988
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x35f1884
	BattlePlayer* FindPlayerByUID(uint64 UId, FName PlayerType);// 0x35f17c0
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x35f1648
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x35f1580

--------------------------------
Class: BattlePlayer.Object
	uint64 UId;//[Offset: 0x28, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x30, Size: 192]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xf0, Size: 24]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0x108, Size: 80]
	BattleUtils* OwningBattleUtils;//[Offset: 0x158, Size: 8]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x35f0c0c

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x8, Size: 16]
	FString PlayerName;//[Offset: 0x18, Size: 16]
	uint32 PlayerKey;//[Offset: 0x28, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte PlayerGender;//[Offset: 0x2d, Size: 1]
	int TeamID;//[Offset: 0x30, Size: 4]
	int64 CampID;//[Offset: 0x38, Size: 8]
	int PlayerBornPointID;//[Offset: 0x40, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x48, Size: 16]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x58, Size: 16]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x68, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x78, Size: 16]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x88, Size: 48]
	int planeAvatarId;//[Offset: 0xb8, Size: 4]
	int RolewearIndex;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x388, Size: 1]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x35f1128

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x3b98fe4
	int CrossHairColor;//[Offset: 0x28, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 1]
	int LeftHandFire;//[Offset: 0x30, Size: 4]
	int Gyroscope;//[Offset: 0x34, Size: 4]
	int ArtQuality;//[Offset: 0x38, Size: 4]
	float ViewPercentage;//[Offset: 0x3c, Size: 4]
	int FireMode;//[Offset: 0x40, Size: 4]
	int VehicleControlMode;//[Offset: 0x44, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	int CameraLensSensibility;//[Offset: 0x4c, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x50, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x58, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x5c, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x60, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x64, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x70, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x74, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x78, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x7c, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x88, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x8c, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x90, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float MainVolumValue;//[Offset: 0x98, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float EffectVolumValue;//[Offset: 0xa0, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float UIVolumValue;//[Offset: 0xa8, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	float BGMVolumValue;//[Offset: 0xb0, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	int VoiceChannel;//[Offset: 0xb8, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xc0, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float SpeakerVolumValue;//[Offset: 0xc8, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	int LimitBandage;//[Offset: 0xe0, Size: 4]
	int LimitMedical;//[Offset: 0xe4, Size: 4]
	int LimitAnodyne;//[Offset: 0xe8, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xec, Size: 4]
	int LimitAdrenaline;//[Offset: 0xf0, Size: 4]
	int LimitShouliudan;//[Offset: 0xf4, Size: 4]
	int LimitYanwudan;//[Offset: 0xf8, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xfc, Size: 4]
	int LimitRanshaodan;//[Offset: 0x100, Size: 4]
	int LimitBullet9mm;//[Offset: 0x104, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x108, Size: 4]
	int Limit12koujing;//[Offset: 0x10c, Size: 4]
	int Limit45koujing;//[Offset: 0x110, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x114, Size: 4]
	int Limitbolt;//[Offset: 0x118, Size: 4]
	int LimitBullet5;//[Offset: 0x11c, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	int FPSLevel;//[Offset: 0x124, Size: 4]
	int ArtStyle;//[Offset: 0x128, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x12c, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x130, Size: 80]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x180, Size: 80]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1d8, Size: 80]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x230, Size: 16]
	int[] ChatOptiongList1;//[Offset: 0x240, Size: 16]
	int LRShootMode;//[Offset: 0x250, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x258, Size: 16]
	int[] ChatOptiongList3;//[Offset: 0x268, Size: 16]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	int NewGetActorID;//[Offset: 0x27c, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	float 3DTouchValue;//[Offset: 0x284, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int ShotGunShootMode;//[Offset: 0x28c, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x290, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x294, Size: 4]
	float VehicleEye;//[Offset: 0x298, Size: 4]
	float ParachuteEye;//[Offset: 0x29c, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x2a0, Size: 16]
	int RepeatingWeaponShootMode;//[Offset: 0x2b0, Size: 4]
	int DrivingViewMode;//[Offset: 0x2b4, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	int FpViewValue;//[Offset: 0x2bc, Size: 4]
	float CamFpFreeEye;//[Offset: 0x2c0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x2c4, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x2c8, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x2cc, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x2d4, Size: 4]
	FString currentLanguage;//[Offset: 0x2d8, Size: 16]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	FString lastViewDayTime;//[Offset: 0x2f0, Size: 16]
	FString lastViewWeekTime;//[Offset: 0x300, Size: 16]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x314, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x318, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x31c, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x320, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x324, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x328, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	int RedDotCHColor;//[Offset: 0x330, Size: 4]
	int RedDotCHType;//[Offset: 0x334, Size: 4]
	int HolographicCHColor;//[Offset: 0x338, Size: 4]
	int HolographicCHType;//[Offset: 0x33c, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x340, Size: 4]
	int Sinper2xCHType;//[Offset: 0x344, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x348, Size: 4]
	int Sniper3xCHType;//[Offset: 0x34c, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x358, Size: 80]
	int LimitFirstAidKit;//[Offset: 0x3a8, Size: 4]
	FString XGLanguageTag;//[Offset: 0x3b0, Size: 16]
	FString XGTimezoneTag;//[Offset: 0x3c0, Size: 16]
	FString XGPushNightTag;//[Offset: 0x3d0, Size: 16]
	FString XGPushDayTag;//[Offset: 0x3e0, Size: 16]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x3f4, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x3f8, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x3fc, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	int LimitSniper2X;//[Offset: 0x404, Size: 4]
	int LimitSniper3X;//[Offset: 0x408, Size: 4]
	int LimitSniper4X;//[Offset: 0x40c, Size: 4]
	int LimitSniper6X;//[Offset: 0x410, Size: 4]
	int LimitSniper8X;//[Offset: 0x414, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	int SidewaysMode;//[Offset: 0x41c, Size: 4]
	int OpenMirrorMode;//[Offset: 0x420, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x426, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x427, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int LobbyStyleID;//[Offset: 0x42c, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	float ScreenLightness;//[Offset: 0x434, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x440, Size: 16]
	FString RechargePosSave;//[Offset: 0x450, Size: 16]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x468, Size: 80]
	int LimitZombieGrenade;//[Offset: 0x4b8, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x4c0, Size: 4]
	int SideMirrorMode;//[Offset: 0x4c4, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x4c8, Size: 16]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4da, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4db, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x4dc, Size: 4]
	int LimitAntidote;//[Offset: 0x4e0, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x4e8, Size: 16]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x4fc, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 1]
	int FPPFireMode;//[Offset: 0x504, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x508, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x50c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x510, Size: 4]
	byte TurboLastQuality;//[Offset: 0x514, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x518, Size: 80]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x568, Size: 80]
	int[] UselessWeakGuidIDs;//[Offset: 0x5b8, Size: 16]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x5d0, Size: 16]
	int[] ChatOptiongList6;//[Offset: 0x5e0, Size: 16]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	int TD_FireMode;//[Offset: 0x5f4, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x5f8, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x600, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x608, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	int LimitSnowMan;//[Offset: 0x610, Size: 4]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	int ColorBlindnessType;//[Offset: 0x618, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x620, Size: 4]
	float UAVScopePercent;//[Offset: 0x624, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 1]
	int SideMirrorType;//[Offset: 0x62c, Size: 4]
	int SideMirrorColor;//[Offset: 0x630, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x638, Size: 16]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64a, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64b, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64e, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64f, Size: 1]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	int AutoPickClipType;//[Offset: 0x654, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x658, Size: 16]
	int[] QuickSignWheelIDList;//[Offset: 0x668, Size: 16]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	int HitEffectColor;//[Offset: 0x67c, Size: 4]
	int HurtEffectColor;//[Offset: 0x680, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x688, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	int BuildDoubleClick;//[Offset: 0x690, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x694, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x698, Size: 4]
	int DoubleClickDistance;//[Offset: 0x69c, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	int BattleFPS;//[Offset: 0x6a4, Size: 4]
	int BattleRenderStyle;//[Offset: 0x6a8, Size: 4]
	int BattleRenderQuality;//[Offset: 0x6ac, Size: 4]
	int LobbyFPS;//[Offset: 0x6b0, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x6b4, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x6b8, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6be, Size: 1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bf, Size: 1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x6c8, Size: 80]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x718, Size: 80]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x768, Size: 80]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x7b8, Size: 80]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x808, Size: 80]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x858, Size: 80]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8aa, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ab, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ad, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ae, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x8b0, Size: 80]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x900, Size: 80]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x950, Size: 80]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x9a0, Size: 80]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 1]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f5, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x9f8, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x9fc, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0xa00, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0xa04, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0xa08, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0xa0c, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 1]
	int ShoulderMode;//[Offset: 0xa14, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19, Size: 1]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	void Init();// 0x377e6b0

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x28, Size: 80]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x78, Size: 80]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0xc8, Size: 80]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	float RushTriggerLength1;//[Offset: 0x11c, Size: 4]
	float RushTriggerLength2;//[Offset: 0x120, Size: 4]
	float RushTriggerLength3;//[Offset: 0x124, Size: 4]
	FString SaveSlotName;//[Offset: 0x128, Size: 16]
	FString LayoutName1;//[Offset: 0x138, Size: 16]
	FString LayoutName2;//[Offset: 0x148, Size: 16]
	FString LayoutName3;//[Offset: 0x158, Size: 16]
	int TimeTag;//[Offset: 0x168, Size: 4]
	int[] InvalidArray1;//[Offset: 0x170, Size: 16]
	int[] InvalidArray2;//[Offset: 0x180, Size: 16]
	int[] InvalidArray3;//[Offset: 0x190, Size: 16]

--------------------------------
Class: PubgmAutoRun.ActorComponent.Object
	delegate PubgmAutoRunSimulateAction;//[Offset: 0x110, Size: 16]
	bool bRoutePointInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	XTPoint*[] RoutePoints;//[Offset: 0x128, Size: 16]
	void VehicleTowardTo(float X, float Y, float Z);// 0x30d7a80
	void VehicleMoveTo(float X, float Y, float Z);// 0x30d7990
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float x1, float y1, float Z1);// 0x30d77f0
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);// 0x3b98fe4
	static bool NeedCmdAutoRun();// 0x30d77b8
	void NativeSimulateAction(int SimActionType);// 0x30d773c
	void InitRoutePoint();// 0x30d7728
	void GMGotoPosition(int X, int Y, int Z);// 0x30d7638
	Vector[] GetRangeActorsPostions(int ActorType, Vector OriginPos, float RangeRadius);// 0x30d74cc
	Vector GetPoisonCircleLocation();// 0x30d7494
	static float GetPlayerSpeed(int SpeedIdx);// 0x30d7410
	bool GetNearestXTPointToVehicle(out Transform FirstPoint, out Transform SecendPoint, bool bNext);// 0x30d729c
	float ForceVehiclePosPull(bool bNext);// 0x30d7208

--------------------------------
Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x398, Size: 4]
	int GetIntValueTwo();// 0x33328e4
	int GetIntValueThree();// 0x33328a8
	int GetIntValueOne();// 0x333286c

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StarJumpPlane();// 0x2edb74c

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]

--------------------------------
Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x178, Size: 16]
	<FString,UAEUserWidget*> WidgetsMap;//[Offset: 0x1f0, Size: 80]
	<int,DynamicWidgetAsyncLoadData> PandingAsyncLoadRequests;//[Offset: 0x240, Size: 80]
	void SubUIWidgetListWithMountData(out const InGameWidgetData[] InGameWidgetDataList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly, int inUIControlState);// 0x361ac84
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x361aa2c
	void SubDynamicUIWidgetList(out const DynamicWidgetData[] DynamicWidgetMap);// 0x361a904
	void OnAsyncLoadWidgetClassObj(Object* ClassObj, int RequestID);// 0x361a84c
	void HandleUIMessage(FString UIMessage);// 0x361a7a4
	void HandleMountWidget(InGameUIManager* IngameManager);// 0x361a728
	void HandleDynamicDestroy();// 0x361a714
	void HandleDynamicCreation(bool isAsyncLoad);// 0x361a690
	void GetWidgetHandleAsyncWithCallBack(FString WidgetKey, delegate Callback);// 0x361a588
	UAEUserWidget* GetWidgetHandle(FString WidgetKey);// 0x361a4d0
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x361a42c

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xf8, Size: 16]
	UAEPlayerController* OwningController;//[Offset: 0x158, Size: 8]
	LuaClassObj* LuaObject;//[Offset: 0x168, Size: 8]
	UAEUserWidget* GetWidget(int Index);// 0x35ff628
	LuaClassObj* GetLuaObject();// 0x35ff5f4
	GameFrontendHUD* GetGameFrontendHUD();// 0x35ff5c0

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x3b0, Size: 8]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x361fea0
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x361fd8c
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x361fd10
	void SubDefaultChildUI(out const FString[] childList);// 0x361fbfc
	void SubDefaultBaseUI(FString baseUI);// 0x361fb54
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x361f9d8
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x361f924
	void RestoreWidgetZorder(const int Index);// 0x361f8a8
	void RestoreAllWidgetZorder();// 0x361f894
	bool IsTopStackPanel();// 0x361f85c
	bool IsPushedPanel();// 0x361f824
	bool InCombatState();// 0x361f7ec
	void HandleUIMessageNoFetch(FString UIMessage);// 0x361f744
	void HandleUIMessage(FString UIMessage);// 0x361f69c
	void HandleStopAsyncLoad();// 0x361f688
	void HandleDynamicDestroy();// 0x361f674
	void HandleDynamicCreationInternal(bool isAsyncLoad);// 0x361f5f0
	void HandleDynamicCreation(bool isAsyncLoad);// 0x361f56c
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x361f4c4
	FString GetTopStackPanelSrcTag();// 0x361f420
	FString GetTopStackPanelDstTag();// 0x361f37c
	FString GetGameStatus();// 0x361f2d8
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x361f234
	void AddToTopStackPanel();// 0x361f220

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x398, Size: 8]
	Object* OwningObject;//[Offset: 0x3a0, Size: 8]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x3a8, Size: 8]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x118, Size: 8]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x6016314
	void PushOneScriptPropertyValues(FString ParamName);// 0x60161d8
	void PushAllScriptPropertyValues();// 0x60161bc
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x601604c
	void FetchOneScriptPropertyValues(FString ParamName);// 0x6015f10
	void FetchAllScriptPropertyValues();// 0x6015ef4
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x6015dc0
	void CallScriptFunction(FString FunctionName);// 0x6015c8c

--------------------------------
Class: QuickSignComponent_BP_C.QuickSignComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 8]
	void GetAudioEventAndBank(int audioID, int ActorId, out FString OutBankName, out FString OutEventName, FString BankName, FString EventName, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Format_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetActorBankByID_BankName);// 0x3b98fe4
	void GetLocalizeActorID(int AudioKey, out int ActorId, int CallFunc_Divide_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBankExistByActorID_bExist, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void PlayVoiceAndText(QuickSignMsg msgItem, bool IsSelf, int SignType, int TextId, int audioID, int ActorId, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetLocalizeActorID_ActorID, FString CallFunc_GetAudioEventAndBank_OutBankName, FString CallFunc_GetAudioEventAndBank_OutEventName, QuickSignMsg K2Node_MakeStruct_QuickSignMsg, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_GetQuickSignText_TextID, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetAudioIDSignType_AudioID, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString);// 0x3b98fe4
	int GetVoiceAudioID(enum MsgType, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetQuickSignAudio_AudioID);// 0x3b98fe4
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, FString CallFunc_GetLocalizeBattleText_Text, FString CallFunc_GetLocalizeBattleText_Text2, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetLocalizeBattleText_Text3, FString CallFunc_GetLocalizeBattleText_Text4, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue5, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue3, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text5, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x3b98fe4
	void OrganizeMsg(int TextId, FString PlayerName, bool IsSelf, FString StrParam, out FString MsgString, FString msgContent, bool CallFunc_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_GetLocalizeText_Text, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_SelectString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10);// 0x3b98fe4
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x3b98fe4
	bool GenerateMarkInfo(out QuickSignMsg msgItem, out QuickSignMark MarkInfo, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x3b98fe4
	void LoadConfig(int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_QuickSignTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int CallFunc_Array_Length_ReturnValue2, FName CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, BP_STRUCT_QuickSignCfg_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x3b98fe4
	void PlayVoiceCD(float Duration);// 0x3b98fe4
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x3b98fe4
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, int ___int_Variable, QuickSignMsg K2Node_Event_MsgItem2, bool K2Node_Event_IsSelf, float K2Node_CustomEvent_Duration, QuickSignMsg K2Node_Event_MsgItem, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x3b98fe4
	UAEDataTable* QuickSignDataTable;//[Offset: 0x4d0, Size: 8]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x4d8, Size: 80]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x528, Size: 80]
	FString TeammateColor;//[Offset: 0x578, Size: 16]
	FString SelfColor;//[Offset: 0x588, Size: 16]
	FString ColonChar;//[Offset: 0x598, Size: 16]
	FString EndChar;//[Offset: 0x5a8, Size: 16]
	FString SelfName;//[Offset: 0x5b8, Size: 16]
	QuickSignMsg CurrMsg;//[Offset: 0x5c8, Size: 104]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	<enum,int> WeaponAttachmentSocketTextIDMap;//[Offset: 0x638, Size: 80]
	<int,int> DefaultAudioMap;//[Offset: 0x688, Size: 80]

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a8, Size: 8]
	void GetActorNameByID(int ActorId, out FString actorName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x3b98fe4
	void GetLocalText(int MsgID, int ItemID, FString PlayerKeyString, out FString ContentMsg, FString Msg2Split, int RealTextID, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_GetLocalizeVoiceText_Text, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Divide_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, int ___int_Array_Index_Variable, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_TextMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int ___int_Loop_Counter_Variable, STExtraPlayerState* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeVoiceText_Text2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, FString CallFunc_SelectString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x3b98fe4
	void LoadVehicleModeQuickMsg(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int ___int_Array_Index_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable3, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleWarModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3);// 0x3b98fe4
	void IsVehicleWarMode(out bool IsVehicleWarMode, GameStateBase* CallFunc_GetGameState_ReturnValue, VehicleWarGameState* K2Node_DynamicCast_AsVehicle_War_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void InitActorIDList(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x3b98fe4
	void UpdateInfectModeMsgByPlayerType(enum PlayerType, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Loop_Counter_Variable4, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ConvertSubTypeToMainType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Percent_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Percent_IntInt_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio3, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Percent_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio4, int CallFunc_Array_AddUnique_ReturnValue2);// 0x3b98fe4
	void LoadInfectModeQuickMsg(FString NewLocalVar, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Loop_Counter_Variable4, int ___int_Loop_Counter_Variable5, int CallFunc_Add_IntInt_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue5, int ___int_Array_Index_Variable3, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVEInfectionGameState* K2Node_DynamicCast_AsPVEInfection_Game_State, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable4, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Array_Index_Variable5, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_GetMainType_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STRUCT_InfectModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue4, FString CallFunc_Array_Get_Item4, FString CallFunc_Array_Get_Item5, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue5);// 0x3b98fe4
	void IsInfectMode(out bool IsInfectMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	void InitChatFlagList(enum ___byte_Variable, enum ___byte_Variable2, enum ___byte_Variable3, int ___int_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_FlagIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item2, enum K2Node_Select_Default, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, QuickChatFlag K2Node_MakeStruct_QuickChatFlag, int CallFunc_Array_AddUnique_ReturnValue2);// 0x3b98fe4
	void SetTurnplateQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_TextMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	void GetActorBankByID(int ActorId, out FString BankName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x3b98fe4
	void SwitchActorAudio(int ActorId, int LocalActorID);// 0x3b98fe4
	void LoadSingleAudio(int chatTextID, FString CallFunc_Conv_IntToString_ReturnValue, QuickChatOption K2Node_MakeStruct_QuickChatOption, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Add_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);// 0x3b98fe4
	void LoadAllAudio(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, int ___int_Loop_Counter_Variable4, int CallFunc_Add_IntInt_ReturnValue4, int ___int_Loop_Counter_Variable5, int ___int_Loop_Counter_Variable6, int CallFunc_Add_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue6, int ___int_Array_Index_Variable5, int ___int_Array_Index_Variable6, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, int CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Array_Get_Item6, int CallFunc_Array_Length_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue6);// 0x3b98fe4
	void CreateAudio(Object* audio, int resID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void SetQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int chatQuickID, bool bFind, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, const TemBPDataAddr[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_TextMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	void InitFromSetting(FString CallFunc_GetPublishRegion_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x3b98fe4
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void PlaySound(int MsgID, int ActorId, int LocalActorID, bool CallFunc_IsBankExistByActorID_bExist, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Set_Contains_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Set_Contains_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_GetActorBankByID_BankName, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_GetPublishRegion_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x3b98fe4
	void AddToArray(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x3b98fe4
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemID, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat);// 0x3b98fe4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x3b98fe4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x3b98fe4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x3b98fe4
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x3b98fe4
	void OnFilterFinish(FString filterText);// 0x3b98fe4
	void CloseChatHistoryList();// 0x3b98fe4
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ReportBattleChat(int MsgID, FString Msg);// 0x3b98fe4
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue2, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller2, bool K2Node_DynamicCast_bSuccess2, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, Actor* CallFunc_GetOwner_ReturnValue3, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller3, bool K2Node_DynamicCast_bSuccess3, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, Actor* CallFunc_GetOwner_ReturnValue4, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_name, FString K2Node_Event_content, bool K2Node_Event_isMe, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Event_name2, FString K2Node_Event_content2, int K2Node_Event_msgID3, int K2Node_Event_audioID, int K2Node_Event_itemID, FString K2Node_Event_PlayerKeyString, bool K2Node_Event_isMe2, bool K2Node_Event_playSound, bool K2Node_Event_ShowChat, FString CallFunc_GetLocalText_ContentMsg, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString K2Node_Event_filterText, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID2, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue3, FString CallFunc_GetLocalizeText_Text, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_GetLocalizeText_Text4, FString CallFunc_GetLocalizeText_Text5, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue17, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess9, BP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizeText_Text7, FString CallFunc_Concat_StrStr_ReturnValue18, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_GetLocalizeText_Text9, FString CallFunc_Concat_StrStr_ReturnValue19, FString CallFunc_Concat_StrStr_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue21, FString CallFunc_Concat_StrStr_ReturnValue22, bool CallFunc_IsInfectMode_IsInfectMode, bool CallFunc_IsVehicleWarMode_IsVehicleWarMode, int K2Node_Event_MsgID, FString K2Node_Event_msg, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess10, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess11);// 0x3b98fe4
	FString addToUIText;//[Offset: 0x3b0, Size: 16]
	FString[] UITextArray;//[Offset: 0x3c0, Size: 16]
	int FirstIndex;//[Offset: 0x3d0, Size: 4]
	FString currContentMsg;//[Offset: 0x3d8, Size: 16]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	FString FriendChatStrGid;//[Offset: 0x3f0, Size: 16]
	FString FriendChatSenderName;//[Offset: 0x400, Size: 16]
	FString FriendChatContent;//[Offset: 0x410, Size: 16]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x428, Size: 16]
	FString FriendInviteSenderName;//[Offset: 0x438, Size: 16]
	FString FriendInviteBattleTextValue;//[Offset: 0x448, Size: 16]
	FString FriendReplyStrGid;//[Offset: 0x458, Size: 16]
	FString FriendReplySenderName;//[Offset: 0x468, Size: 16]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	int UI_MsgID;//[Offset: 0x47c, Size: 4]
	FString UI_ItemName;//[Offset: 0x480, Size: 16]
	int UI_AlternateMsgID;//[Offset: 0x490, Size: 4]
	SettingConfig_C* SettingConfig;//[Offset: 0x498, Size: 8]
	int[] ChatFlagTypeList;//[Offset: 0x4a0, Size: 16]
	int[] TmpChatIDList;//[Offset: 0x4b0, Size: 16]
	bool bIsInfectMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	int[] ChatQuikcTextIDList_HumanMenu;//[Offset: 0x4c8, Size: 16]
	int[] ChatQuikcTextIDList_HumanTurnplate;//[Offset: 0x4d8, Size: 16]
	int[] ChatQuikcTextIDList_ZombieMenu;//[Offset: 0x4e8, Size: 16]
	int[] ChatQuikcTextIDList_ZombieTurnplate;//[Offset: 0x4f8, Size: 16]
	int[] InfectModePlayerType;//[Offset: 0x508, Size: 16]
	enum CurInfectModePlayerType;//[Offset: 0x518, Size: 1]
	QuickChatIDAndAudio QuickChat;//[Offset: 0x51c, Size: 12]
	<int> GlobalActorIDList;//[Offset: 0x528, Size: 80]
	bool bIsVehicleWarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	int[] ChatQuikcTextIDList_VWMenu;//[Offset: 0x580, Size: 16]
	int[] ChatQuikcTextIDList_VWTurnplate;//[Offset: 0x590, Size: 16]
	int TraceItemID;//[Offset: 0x5a0, Size: 4]
	<int> MuteOnGlobal;//[Offset: 0x5a8, Size: 80]

--------------------------------
Class: VehicleWarGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int MatchCountDownTime;//[Offset: 0x11e4, Size: 4]
	VehicleBattleResultData CurResultData;//[Offset: 0x11e8, Size: 104]
	delegate OnShowGeneralTip;//[Offset: 0x1260, Size: 16]
	delegate OnMatchCountDownTime;//[Offset: 0x1270, Size: 16]
	float FightStartTime;//[Offset: 0x1280, Size: 4]
	int RoundNum;//[Offset: 0x1284, Size: 4]
	int IconID;//[Offset: 0x1288, Size: 4]
	int InstanceID;//[Offset: 0x128c, Size: 4]
	Vector CircleCenter;//[Offset: 0x1290, Size: 12]
	float Radius;//[Offset: 0x129c, Size: 4]
	VehicleGemRoundData[] RoundData;//[Offset: 0x12a0, Size: 16]
	Vector[] TreasureLocations;//[Offset: 0x12b0, Size: 16]
	delegate OnGemStoneNumChangeDelegate;//[Offset: 0x12c0, Size: 16]
	delegate OnDestoryVehicleCountDelegate;//[Offset: 0x12d0, Size: 16]
	int GemStoneForMatchPoint;//[Offset: 0x12e0, Size: 4]
	delegate OnGemStoneForMatchPointChangedDelegate;//[Offset: 0x12e8, Size: 16]
	delegate OnVehicleEatSuperDelegate;//[Offset: 0x12f8, Size: 16]
	VehicleWarRankData[] TeamRankData;//[Offset: 0x1308, Size: 16]
	delegate OnVehicleWarRankDataDelegate;//[Offset: 0x1318, Size: 16]
	<int,VehicleWarRouteDetailData> RouteDetailMap;//[Offset: 0x1328, Size: 80]
	VehicleWarRouteDetailData[] TeamRankDetailData;//[Offset: 0x1378, Size: 16]
	XTPoint*[] RoutePoints;//[Offset: 0x1388, Size: 16]
	float RouteLength;//[Offset: 0x1398, Size: 4]
	VehicleWarTeamKillData[] VehicleWarTeamKillDataArray;//[Offset: 0x13a0, Size: 16]
	delegate OnVehicleWarTeamKillDataDelegate;//[Offset: 0x13b0, Size: 16]
	VehicleWarCampGroup[] VehicleWarCampGroupArray;//[Offset: 0x13c0, Size: 16]
	delegate OnVehicleWarCampGroupArrayDelegate;//[Offset: 0x13d0, Size: 16]
	VehicleWarGemMatchState VehicleWarGemMatchState;//[Offset: 0x13e0, Size: 12]
	delegate VehicleWarGemMatchStateDelegate;//[Offset: 0x13f0, Size: 16]
	delegate VehicleWarKillInfoDelegate;//[Offset: 0x1400, Size: 16]
	delegate BoxRoundNumDelegate;//[Offset: 0x1410, Size: 16]
	delegate FightStartTimeDelegate;//[Offset: 0x1420, Size: 16]
	delegate OnTeamContinueKillNumChangedDelegate;//[Offset: 0x1430, Size: 16]
	int MatchPointContinueTime;//[Offset: 0x1440, Size: 4]
	int ShowContinueKillEffectNumV1;//[Offset: 0x1444, Size: 4]
	int ShowContinueKillEffectNumV2;//[Offset: 0x1448, Size: 4]
	bool IsCampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144c, Size: 1]
	int RemainMatchTime;//[Offset: 0x1450, Size: 4]
	delegate OnRemainMatchTimeDelegate;//[Offset: 0x1458, Size: 16]
	delegate OnVehicleAddHPDelegate;//[Offset: 0x1468, Size: 16]
	BattleOpenSequencerInfo OpenSequencerInfo;//[Offset: 0x1480, Size: 80]
	delegate OpenSequencerStartVehicleDelegate;//[Offset: 0x14d0, Size: 16]
	FString SequenceName;//[Offset: 0x14e8, Size: 16]
	<int,uint32> TeamVehicleDriverMap;//[Offset: 0x14f8, Size: 80]
	<int,TeamMedalTotalKillData> TeamTotalKillMap;//[Offset: 0x1548, Size: 80]
	<int,int> TeamContinueKillMap;//[Offset: 0x1598, Size: 80]
	<int,TeamMedalBeAttackedData> TeamRecentBeAttackedMap;//[Offset: 0x15e8, Size: 80]
	<int,VehicleBeAttackMapData> TeamBeAttackedMap;//[Offset: 0x1638, Size: 80]
	float FarMedalRadius;//[Offset: 0x1688, Size: 4]
	float AssistMedalTime;//[Offset: 0x168c, Size: 4]
	float CooperationMedalTime;//[Offset: 0x1690, Size: 4]
	AutoChangeSeatData[] AutoChangeSeatDataArray;//[Offset: 0x1698, Size: 16]
	int WinCampID;//[Offset: 0x16a8, Size: 4]
	float GamePlayTime;//[Offset: 0x16ac, Size: 4]
	int MatchPointNum;//[Offset: 0x16b0, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x16b4, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x16b8, Size: 4]
	<int,VehicleBattleVehicleStatiscs> VehicleStaticsMap;//[Offset: 0x16c0, Size: 80]
	<int,VehicleBattleWeaponStatiscs> WeaponStatiscsMap;//[Offset: 0x1710, Size: 80]
	int VehicleStuckResetTimes;//[Offset: 0x1760, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x1764, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x1768, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x176c, Size: 4]
	<int,int> TeamLastChooseVehicleIDMap;//[Offset: 0x1770, Size: 80]
	<int,int> TeamLastChooseVehicleShapeMap;//[Offset: 0x17c0, Size: 80]
	VehicleCampKills[] VehicleCampsKills;//[Offset: 0x1810, Size: 16]
	delegate OnVehicleCampsKillsChangedDelegate;//[Offset: 0x1820, Size: 16]
	TireConfig*[] TireConfigCahce;//[Offset: 0x1830, Size: 16]
	void VehicleTakeDamageForMedal(uint32 KillerPlayKey, int VictimTeamID, float Damage);// 0x32fee28
	void UpdateRank();// 0x32fee14
	void ShowOpenSequencer(float showTime);// 0x32fed98
	void ShowBoxWarning();// 0x32fed84
	void SetWinCamp(int InCampId);// 0x32fed08
	void SetUseWeaponID(uint32 PlayerKey, int FirstWeaponID, int SecondWeaponID);// 0x32fec18
	void SetGemMatchState(int GemMatchState, int CampID, float ServerEndTime);// 0x32feb28
	void SetCanAutoChangeSeat(int TeamID, bool bCanAutoChangeSeat);// 0x32fea68
	void ServerUpdateVechicleResult();// 0x32fea54
	void RecordTeamChooseVehicle(int TeamID, int VehicleId, int VehicleShapeType);// 0x32fe964
	void OnRep_VehicleWarTeamRankData();// 0x32fe950
	void OnRep_VehicleWarTeamKillDataArray();// 0x32fe93c
	void OnRep_VehicleWarRemainMatchTime();// 0x32fe928
	void OnRep_VehicleWarGemMatchState();// 0x32fe914
	void OnRep_VehicleWarCampGroupArray();// 0x32fe900
	void OnRep_VehicleCampsKills();// 0x32fe8ec
	void OnRep_RoundNum();// 0x32fe8d8
	void OnRep_MatchPointContinueTime();// 0x32fe8c4
	void OnRep_MatchCountDownTime();// 0x32fe8b0
	void OnRep_GemStoneForMatchPoint();// 0x32fe89c
	void OnRep_FightStartTime();// 0x32fe888
	void OnContinueKillNumChanged(int CampID, int TeamID);// 0x32fe7d4
	void InitRoutePoint();// 0x32fe7c0
	void HideBoxWarning();// 0x32fe7ac
	float GetVehicleTotalDamageByPlayerKey(int VictimTeamID, uint32 KillerPlayerKey);// 0x32fe6e8
	int GetTotalContinueKillNum(int CampID, int TeamID);// 0x32fe624
	VehicleWarRankData GetTeamRankDataByTeamId(int TeamID);// 0x32fe588
	int GetTeamKillDataIndexByTeamID(int TeamID);// 0x32fe4fc
	bool GetTeamKillDataByTeamID(int TeamID, out VehicleWarTeamKillData TeamKillData);// 0x32fe418
	STExtraPlayerState*[] GetPlayerStateListByTeamId(int TeamID);// 0x32fe324
	bool GetPlayersByCampAndTeamID(int CampID, int TeamID, out VehicleWarTeamGroupInfo OutPlayers);// 0x32fe1e0
	int GetPlayerChoose(uint32 PlayerKey);// 0x32fe154
	bool GetIsCooperationKill(int VicTeamId, int KillerTeamId, uint32 KillerPlayerKey);// 0x32fe050
	FString GetFormatRemainTimeText();// 0x32fdfac
	Vector GetFootOfPerpendicularXY(out Vector OutPoint, out Vector BeginPoint, out Vector EndPoint);// 0x32fde70
	VehicleWarRankData[] GetCampSortedTeamRankData();// 0x32fddcc
	int GetCampKillNum(int CampID);// 0x32fdd40
	bool GetCampGroupByCampID(int CampID, out VehicleWarCampGroup VehicleWarCampGroup);// 0x32fdbdc
	void GenerateVehicleRole(VehicleWarPlayerState* PS);// 0x32fdb60
	void GenerateCampInfo();// 0x32fdb4c
	void FinishTeamRoute(int TeamID);// 0x32fdad0
	void DropWeapons(uint32 PlayerKey);// 0x32fda54
	void CountAttackForMedal(int KillerTeamId, STExtraBaseCharacter* Killer, int VictimTeamID, int DamageType);// 0x32fd928
	void ClearAllPlayerStateChoose();// 0x32fd914
	void CheckPlayIsDriver(VehicleWarPlayerState* PS);// 0x32fd898
	void ChangeMatchCountDownTime();// 0x32fd884
	bool CanAutoChangeSeat(int TeamID);// 0x32fd7f4
	void BroadcastTemporaryMessage(FString Message);// 0x32fd744
	void BroadcastGeneralTip(int TipType, FString AdditionParam);// 0x32fd654
	void BroadCast_OnVehicleEatSuper(int CampID);// 0x32fd5d0
	void BroadCast_OnVehicleAddHP(STExtraVehicleWarVehicle* Vehicle);// 0x32fd54c
	void BeginMatchCountDown(int TimeSeconds);// 0x32fd4d0
	void AddWeaponKillTimes(int WeaponId, int Num);// 0x32fd41c
	void AddWeaponDamage(int WeaponId, float Damage);// 0x32fd364
	void AddWeaponChooseTimes(int WeaponId, int Num);// 0x32fd2b0
	void AddVehicleWeaponDamage(int VehicleType, float Damage);// 0x32fd1f8
	void AddVehicleKillTimes(int VehicleType, int Num);// 0x32fd144
	void AddVehicleHitDamage(int VehicleType, float Damage);// 0x32fd08c
	void AddVehicleDeadTimes(int VehicleType, int Num);// 0x32fcfd8
	void AddVehicleChooseTimes(int VehicleType, int Num);// 0x32fcf24
	void AddTeamBeDestoryedNum(int TeamID, int AddDestoryCount);// 0x32fce70
	void AddMedalForPlayer(STExtraBaseCharacter* Killer, FString MedalMessage);// 0x32fcd88
	void AddCooperationBuffToTeam(int TeamID);// 0x32fcd0c
	void AddCampKillNum(int CampID, int Num);// 0x32fcc58

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 16]

--------------------------------
Class: VehicleWarPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	NetVehilceProps NetVehicleProps;//[Offset: 0x1400, Size: 56]
	delegate OnVehilcePropsChangeDel;//[Offset: 0x1438, Size: 16]
	int GemStoneNum;//[Offset: 0x1448, Size: 4]
	delegate OnPlayerGemStoneNumChangeDelegate;//[Offset: 0x1450, Size: 16]
	int TeamGemStoneNum;//[Offset: 0x1460, Size: 4]
	delegate OnTeamGemStoneNumChangeDelegate;//[Offset: 0x1468, Size: 16]
	int DestoryVehicleCount;//[Offset: 0x1478, Size: 4]
	delegate OnDestoryVehicleCountChangeDelegate;//[Offset: 0x1480, Size: 16]
	int BeDestoryedCount;//[Offset: 0x1490, Size: 4]
	int DriverKillNum;//[Offset: 0x1494, Size: 4]
	int ShooterKillNum;//[Offset: 0x1498, Size: 4]
	int AssistKillNum;//[Offset: 0x149c, Size: 4]
	int ContinueDestoryVehicleCount;//[Offset: 0x14a0, Size: 4]
	delegate OnContinueDestoryVehicleCountChangeDelegate;//[Offset: 0x14a8, Size: 16]
	STExtraVehicleWarVehicle* CurAttackSignTarget;//[Offset: 0x14b8, Size: 8]
	STExtraVehicleWarVehicle* CurAttackTarget;//[Offset: 0x14c0, Size: 8]
	float CurCumulativeDamage;//[Offset: 0x14c8, Size: 4]
	float CumulativeDamageForSign;//[Offset: 0x14cc, Size: 4]
	float CurCumulativeDamageTime;//[Offset: 0x14d0, Size: 4]
	float CumulativeDamageCalcuTime;//[Offset: 0x14d4, Size: 4]
	float SignExistTime;//[Offset: 0x14d8, Size: 4]
	float SignStartTime;//[Offset: 0x14dc, Size: 4]
	delegate OnCurAttackSignTargetChangeDelegate;//[Offset: 0x14e0, Size: 16]
	int OpenTreasureNum;//[Offset: 0x14f0, Size: 4]
	int ShootTreasureNum;//[Offset: 0x14f4, Size: 4]
	int StrikeKillVehicleNum;//[Offset: 0x14f8, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x14fc, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x1500, Size: 4]
	float TotalCauseDamage;//[Offset: 0x1504, Size: 4]
	int ClientTotalDamage;//[Offset: 0x1508, Size: 4]
	delegate OnClientTotalDamageChangeDelegate;//[Offset: 0x1510, Size: 16]
	delegate OnBeDestoryedCountChangeDelegate;//[Offset: 0x1520, Size: 16]
	bool PlayerIsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1530, Size: 1]
	delegate OnPlayerDriverStateChanged;//[Offset: 0x1538, Size: 16]
	float VehicleSpawnServerTime;//[Offset: 0x1548, Size: 4]
	bool PlayerHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154c, Size: 1]
	float VehicleMoveRecordInstance;//[Offset: 0x1550, Size: 4]
	int VehicleMoveFlowCount;//[Offset: 0x1558, Size: 4]
	int VehicleN2oSkillId;//[Offset: 0x155c, Size: 4]
	int VehicleCarPetSkillId;//[Offset: 0x1560, Size: 4]
	bool CanShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588, Size: 1]
	bool FinishedShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1589, Size: 1]
	bool CanShowUseItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158a, Size: 1]
	bool CanShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158b, Size: 1]
	bool FinishedShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158c, Size: 1]
	bool CanShowEyesGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158d, Size: 1]
	bool CanShowBuffGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158e, Size: 1]
	bool CanShowAnimFrameGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158f, Size: 1]
	float PlayerExitTime;//[Offset: 0x1590, Size: 4]
	bool PlayerHasExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1594, Size: 1]
	void SetVehicleSpawnServerTime(float STime);// 0x3302080
	void OnRep_VehicleProps();// 0x330206c
	void OnRep_TeamGemStoneNum();// 0x3302058
	void OnRep_PlayerIsDriver();// 0x3302044
	void OnRep_GemStoneNum();// 0x3302030
	void OnRep_DestoryVehicleCount();// 0x330201c
	void OnRep_CurAttackSignTarget();// 0x3302008
	void OnRep_ContinueDestoryVehicleCount();// 0x3301ff4
	void OnRep_ClientTotalDamage();// 0x3301fe0
	void OnRep_BeDestoryedCount();// 0x3301fcc
	int GetVehiclePropsItem(int Index);// 0x3301f40
	void DispatchPlayerExitEvent();// 0x3301f24

--------------------------------
Class: STExtraVehicleWarVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	VehicleWarLockData VehicleWarLockData;//[Offset: 0x1560, Size: 16]
	byte CurVehicleWarBeLockedState;//[Offset: 0x1570, Size: 1]
	delegate OnVehicleWarBeLockedStateChangedDelegate;//[Offset: 0x1578, Size: 16]
	delegate OnVehicleWarKillInfoDelegate;//[Offset: 0x1588, Size: 16]
	VehicleWarVehicleReceiveDamageRecord[] VehicleWarVehicleReceiveDamageRecordArray;//[Offset: 0x1598, Size: 16]
	delegate ForceShowVehicleHPBarDelegate;//[Offset: 0x15a8, Size: 16]
	float DamageRecordExitTime;//[Offset: 0x15b8, Size: 4]
	float TickVehicleTireFrictionInterval;//[Offset: 0x15bc, Size: 4]
	float DefaultTurnOverBroadcastTime;//[Offset: 0x15c4, Size: 4]
	float CurTurnOverBroadcastTime;//[Offset: 0x15c8, Size: 4]
	delegate OnVehicleWarVehicleTurnOver;//[Offset: 0x15d0, Size: 16]
	float MinTurnOverDegree;//[Offset: 0x15e0, Size: 4]
	float CheckBlockInterval;//[Offset: 0x15e4, Size: 4]
	float BlockResetInterval;//[Offset: 0x15ec, Size: 4]
	float MaxBlockVelocity;//[Offset: 0x15f0, Size: 4]
	float MaxBlockNotInAirWheelNums;//[Offset: 0x15f4, Size: 4]
	int MaxCheckTurnOverCount;//[Offset: 0x15fc, Size: 4]
	int MaxCheckBlockCount;//[Offset: 0x1604, Size: 4]
	delegate OnVehicleWarVehicleBlockedDelegate;//[Offset: 0x1610, Size: 16]
	bool bOpenShieldHitProtectEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1620, Size: 1]
	int ShieldSkillID;//[Offset: 0x1624, Size: 4]
	SoftObjectPath ShieldHitProtectEffectPath;//[Offset: 0x1628, Size: 24]
	bool bTeammateVehicleDamageFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1640, Size: 1]
	bool bEnableActivePhysicsWhenChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1641, Size: 1]
	PhysicsAsset* SimplePhysicsAsset;//[Offset: 0x1648, Size: 8]
	bool bEnableCheckBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1650, Size: 1]
	void UpdateOwnerLockedState();// 0x324ff28
	void TickCheckBlockAndAutoTurn();// 0x324ff14
	void StartAllowAvatarOutline();// 0x324ff00
	void SetVehicleMass(float NewMass, bool bAddToCurrent);// 0x324fe40
	void ServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator InRot);// 0x324fd80
	void Server_ChangeLockState(byte InState, Actor* CurLockTarget);// 0x324fc90
	void RPCServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator Rot);// 0x324fb9c
	void ReqResetBlockPosition();// 0x324fb3c
	void RemoveOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x3b98fe4
	void ProcessAvatarOutline();// 0x324fb20
	void OnVehicleWarKillInfoDelegate__DelegateSignature(out const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x3b98fe4
	void OnVehicleWarBeLockedStateChangedDelegate__DelegateSignature(byte VehicleWarBeLockedState);// 0x3b98fe4
	void OnRep_VehicleWarVehicleReceiveDamageRecordArray();// 0x324fb0c
	void OnRep_VehicleWarLockData();// 0x324faf8
	bool IsVehicleTurnOver();// 0x324fac0
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x324f94c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x324f850
	void ForceShowVehicleHPBarDelegate__DelegateSignature(bool bNewShow);// 0x3b98fe4
	void DelayNotifyClientVehicleWarRespawnCallback();// 0x324f83c
	void CheckOnePlayerInFighting();// 0x324f828
	void ChangeToSimplePhysicsAsset();// 0x324f814
	void BroadCastFatalDamage(const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x324f734
	void BPTickCheckBlockAndAutoTurn();// 0x3b98fe4
	void AddOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x3b98fe4

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x1230, Size: 8]
	ParticleSystemComponent* DustPSC;//[Offset: 0x1238, Size: 8]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x1258, Size: 16]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x1268, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x1290, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x1298, Size: 8]
	float TorqueMultiplierforBoosting;//[Offset: 0x12a4, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0x12a8, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ac, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0x12b0, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0x12b8, Size: 16]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x12c8, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x12d0, Size: 16]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x12e8, Size: 8]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x12f0, Size: 8]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x12f8, Size: 8]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1300, Size: 8]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x1308, Size: 8]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1310, Size: 8]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1318, Size: 8]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1320, Size: 8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x1328, Size: 8]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1330, Size: 112]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x13a0, Size: 112]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1410, Size: 8]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1428, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x142c, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x1454, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1460, Size: 8]
	FString LoopSmokeCmpName;//[Offset: 0x1468, Size: 16]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1478, Size: 5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147d, Size: 1]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x325492c
	void PostLoadFPPMesh();// 0x3254910
	void OnWheelsLanded();// 0x32548fc
	void OnRep_ReplicatedState();// 0x32548e8
	void OnGearChanged(bool bIsUp);// 0x3254864
	float GetVehicleSpeed();// 0x3254830
	float GetVehicleSlip();// 0x32547f4
	Vector GetRotationInputDir();// 0x32547b4
	void BroadcastClientVehicleWheelDestroyEffect();// 0x3254798

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x30, Size: 16]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x450, Size: 16]
	FName[] ExtraOptBoneNames;//[Offset: 0x460, Size: 16]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x484, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x488, Size: 16]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x4a0, Size: 8]
	float MaxRPMLimit;//[Offset: 0x618, Size: 4]
	float TorqueRate;//[Offset: 0x61c, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x620, Size: 16]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x630, Size: 16]
	FName RootBodyName;//[Offset: 0x640, Size: 8]
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x324dbcc
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x324db50
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x324da10
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x324d988
	void RefreshBodyCollision();// 0x324d974
	void OnExpoldeStopWheel();// 0x324d960
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x324d86c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x324d700
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x324d60c
	int GetSuspensionIgnoreMask();// 0x324d5d8
	void ForceWheelsRotate(float DriveTorque);// 0x324d55c
	void ClearDestroyedWheel();// 0x324d548

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x2f0, Size: 144]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x380, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x3a0, Size: 48]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x3d0, Size: 120]
	float AckermannAccuracy;//[Offset: 0x448, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x1a0, Size: 16]
	float Mass;//[Offset: 0x1b0, Size: 4]
	float DragCoefficient;//[Offset: 0x1b4, Size: 4]
	float ChassisWidth;//[Offset: 0x1b8, Size: 4]
	float ChassisHeight;//[Offset: 0x1bc, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	float DragArea;//[Offset: 0x1c4, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x1c8, Size: 4]
	float MaxEngineRPM;//[Offset: 0x1cc, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x1d0, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x1d4, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x1e0, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x1e4, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x1e8, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x1ec, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x1f0, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x1f4, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1f8, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x200, Size: 16]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x22c, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x230, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x234, Size: 4]
	float RVOSteeringStep;//[Offset: 0x238, Size: 4]
	float RVOThrottleStep;//[Offset: 0x23c, Size: 4]
	int AvoidanceUID;//[Offset: 0x240, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x244, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x248, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x24c, Size: 4]
	float AvoidanceWeight;//[Offset: 0x250, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x254, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x260, Size: 20]
	float RawSteeringInput;//[Offset: 0x278, Size: 4]
	float RawThrottleInput;//[Offset: 0x27c, Size: 4]
	float RawBrakeInput;//[Offset: 0x280, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x284, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x284, Size: 1]
	float SteeringInput;//[Offset: 0x288, Size: 4]
	float ThrottleInput;//[Offset: 0x28c, Size: 4]
	float BrakeInput;//[Offset: 0x290, Size: 4]
	float HandbrakeInput;//[Offset: 0x294, Size: 4]
	float IdleBrakeInput;//[Offset: 0x298, Size: 4]
	float StopThreshold;//[Offset: 0x29c, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x2a0, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x2a4, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x2ac, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x2b4, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x2bc, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x668b39c
	void SetThrottleInput(float Throttle);// 0x668b318
	void SetTargetGear(int GearNum, bool bImmediate);// 0x668b258
	void SetSteeringInput(float Steering);// 0x668b1d4
	void SetPhysActive(bool bActive);// 0x668b150
	void SetHandbrakeInput(bool bNewHandbrake);// 0x668b0c4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x668b03c
	void SetGroupsToIgnore(int GroupFlags);// 0x668afc0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x668af38
	void SetGroupsToAvoid(int GroupFlags);// 0x668aebc
	void SetGearUp(bool bNewGearUp);// 0x668ae38
	void SetGearDown(bool bNewGearDown);// 0x668adb4
	void SetBrakeInput(float Brake);// 0x668ad30
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x668aca8
	void SetAvoidanceGroup(int GroupFlags);// 0x668ac2c
	void SetAvoidanceEnabled(bool bEnable);// 0x668aba8
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x668aa00
	bool GetUseAutoGears();// 0x668a9c8
	int GetTargetGear();// 0x668a994
	float GetForwardSpeed();// 0x668a960
	float GetEngineRotationSpeed();// 0x668a92c
	float GetEngineMaxRotationSpeed();// 0x668a8f8
	int GetCurrentGear();// 0x668a8c4

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 8]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector Offset;//[Offset: 0x34, Size: 12]
	float ShapeRadius;//[Offset: 0x40, Size: 4]
	float ShapeWidth;//[Offset: 0x44, Size: 4]
	float Mass;//[Offset: 0x48, Size: 4]
	float DampingRate;//[Offset: 0x4c, Size: 4]
	float SteerAngle;//[Offset: 0x50, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	TireType* TireType;//[Offset: 0x58, Size: 8]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 8]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 4]
	float LatStiffValue;//[Offset: 0x6c, Size: 4]
	float LongStiffValue;//[Offset: 0x70, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 4]
	byte SweepType;//[Offset: 0x88, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 8]
	int WheelIndex;//[Offset: 0xa0, Size: 4]
	float DebugLongSlip;//[Offset: 0xa4, Size: 4]
	float DebugLatSlip;//[Offset: 0xa8, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 4]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 4]
	float DebugLongForce;//[Offset: 0xb8, Size: 4]
	float DebugLatForce;//[Offset: 0xbc, Size: 4]
	Vector Location;//[Offset: 0xc0, Size: 12]
	Vector OldLocation;//[Offset: 0xcc, Size: 12]
	Vector Velocity;//[Offset: 0xd8, Size: 12]
	bool IsInAir();// 0x668a06c
	float GetSuspensionOffset();// 0x668a038
	float GetSteerAngle();// 0x668a004
	float GetRotationAngle();// 0x6689fd0

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x30, Size: 16]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x58, Size: 8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x60, Size: 8]

--------------------------------
Class: PVEInfectionPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float CurExp;//[Offset: 0x1458, Size: 4]
	int CurLevel;//[Offset: 0x1460, Size: 4]
	int MainSkillId;//[Offset: 0x1464, Size: 4]
	bool IsUseMainSkillInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 1]
	int CurAssistLevel;//[Offset: 0x146c, Size: 4]
	delegate OnPlayerLevelChanged;//[Offset: 0x1470, Size: 16]
	delegate OnPlayerExpChanged;//[Offset: 0x1480, Size: 16]
	int SelectCombieCount;//[Offset: 0x14a0, Size: 4]
	delegate InfectionClientOnRespawn;//[Offset: 0x14a8, Size: 16]
	delegate InfectionClientOnBeKilled;//[Offset: 0x14b8, Size: 16]
	bool bSwitchTeammateStateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c8, Size: 1]
	enum PawnSubType;//[Offset: 0x14c9, Size: 1]
	int ShowKillNum;//[Offset: 0x14cc, Size: 4]
	delegate OnInfectionKillNumChanged;//[Offset: 0x14d0, Size: 16]
	enum RespawnBeforeType;//[Offset: 0x14e0, Size: 1]
	float PlayerRoundStartTime;//[Offset: 0x14e4, Size: 4]
	float PlayerMoveDistance;//[Offset: 0x14e8, Size: 4]
	float PlayerMoveTime;//[Offset: 0x14ec, Size: 4]
	float[] PlayerMoveSpeedArray;//[Offset: 0x14f0, Size: 16]
	int PlayerJumpHeightMax;//[Offset: 0x1500, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x1504, Size: 4]
	uint32 RoundStartTime;//[Offset: 0x1508, Size: 4]
	int8 RoleTypeStart;//[Offset: 0x150c, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x150d, Size: 1]
	int RoleTypeSwitchTime;//[Offset: 0x1510, Size: 4]
	float AbsorbTime;//[Offset: 0x1514, Size: 4]
	bool IsInAbsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1518, Size: 1]
	bool IsInfectionDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1519, Size: 1]
	bool IsClientChangeDeathPosi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151a, Size: 1]
	void StartMainSkill();// 0x30e2378
	void SetPawnSubType(enum SubType);// 0x30e22fc
	void ServerRPC_ClientStartRound(int64 ClientRoundStartTime);// 0x30e224c
	void ServerRPC_ActorGuidTrigger_TLog(int GuidID);// 0x30e219c
	void ServerRPC_ActorGuidClose_TLog(int GuidID, bool bArriveClose);// 0x30e2098
	void RespawnBufferReplay();// 0x30e2084
	void ResetOnRoundStart();// 0x30e2070
	void OnRep_ShowKillNum();// 0x30e205c
	void OnRep_PawnSubType();// 0x30e2048
	void OnRep_CurLevel();// 0x30e2034
	void OnRep_CurExp();// 0x30e2020
	void OnRep_CurAssistLevel();// 0x30e200c
	void OnNewRound();// 0x30e1ff0
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x30e1f34
	void OnClientAddBuff(int BuffID, int SkillID);// 0x30e1e78
	bool IsPlayer();// 0x30e1e40
	bool IsCanUseMainSkill();// 0x30e1e08
	int GetShowKillNum();// 0x30e1dd4
	enum GetMainType();// 0x30e1da0
	float GetMainSkillInterval();// 0x30e1d6c
	int GetMainSkillId();// 0x30e1d38
	float GetMainSkillCD();// 0x30e1d04
	float GetExpPercent();// 0x30e1cd0
	enum ConvertSubTypeToMainType(enum SubType);// 0x30e1c44
	void ClientRPC_OnRevengerSpawn();// 0x30e1c28
	void ClientRPC_OnRespawnInfectionPawn(enum PrevType, enum NewType);// 0x30e1b68
	void ClientRPC_OnKilled(Pawn* VictimPawn, const DamageType* DamageType, bool bIsRoundEnd);// 0x30e1a68
	void ClientRPC_OnGeneraterMaternalZombies(enum CurSubType);// 0x30e19e4
	void ClientRPC_OnBeKilled(Pawn* KillerPawn, bool bIsRoundEnd);// 0x30e191c
	void ClientRPC_BroadcastInfectionLevelUp(int Level);// 0x30e1898
	void ClientRoundStart();// 0x30e1884
	void AddShowKillNum(int AddNum);// 0x30e1808
	void AddExpOnNextFrame();// 0x30e17f4
	void AddCurLevelUpBuffCallback();// 0x30e17e0

--------------------------------
Class: PVEInfectionGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int RespawnInvincibleTime;//[Offset: 0x11e4, Size: 4]
	delegate OnInfectionTeamMarkGlobalNotifyDelegate;//[Offset: 0x11e8, Size: 16]
	delegate GameStart;//[Offset: 0x11f8, Size: 16]
	delegate GameEnd;//[Offset: 0x1208, Size: 16]
	delegate RoundStart;//[Offset: 0x1218, Size: 16]
	delegate RoundEnd;//[Offset: 0x1228, Size: 16]
	delegate RoundCountDownEnd;//[Offset: 0x1238, Size: 16]
	delegate OnPlayerPawnActive;//[Offset: 0x1248, Size: 16]
	delegate OnInfectionSelfChangeType;//[Offset: 0x1258, Size: 16]
	delegate OnPlayerUseSkill;//[Offset: 0x1268, Size: 16]
	delegate OnInfectionPlayerAssistNumChanged;//[Offset: 0x1278, Size: 16]
	InfectionGainExpInfo PlayerGainExpConfig;//[Offset: 0x1288, Size: 28]
	InfectionGainExpInfo ZombieGainExpConfig;//[Offset: 0x12a4, Size: 28]
	<int,InfectionRoleLevelMap> RoleLevelConfig;//[Offset: 0x12c0, Size: 80]
	int CurRoundNum;//[Offset: 0x1310, Size: 4]
	enum CurRoundState;//[Offset: 0x1314, Size: 1]
	enum CurInfectionBGMStateType;//[Offset: 0x1315, Size: 1]
	int MaxRoundNum;//[Offset: 0x1318, Size: 4]
	delegate OnCurRoundNumChanged;//[Offset: 0x1320, Size: 16]
	float BeforeRoundTime;//[Offset: 0x1330, Size: 4]
	FString RoleInfoTablePath;//[Offset: 0x1338, Size: 16]
	FString ScoreInfoTablePath;//[Offset: 0x1348, Size: 16]
	int MaxPersonScore;//[Offset: 0x1358, Size: 4]
	int MaxMonsterScore;//[Offset: 0x135c, Size: 4]
	float RoundEndWorldTimeSeconds;//[Offset: 0x1360, Size: 4]
	int RoundPlayerNum;//[Offset: 0x1364, Size: 4]
	int RoundZombieNum;//[Offset: 0x1368, Size: 4]
	int RoundAllPlayerNum;//[Offset: 0x136c, Size: 4]
	int RoundAllZombieNum;//[Offset: 0x1370, Size: 4]
	int PersonWinRoundNum;//[Offset: 0x1374, Size: 4]
	int ZombieWinRoundNum;//[Offset: 0x1378, Size: 4]
	int KillZombieNum;//[Offset: 0x137c, Size: 4]
	int InfectedHumanNum;//[Offset: 0x1380, Size: 4]
	int BecomeHeroNum;//[Offset: 0x1384, Size: 4]
	int CurRoundWinRole;//[Offset: 0x1388, Size: 4]
	float CurRoundStartTime;//[Offset: 0x138c, Size: 4]
	delegate ShowRoundResultDelegate;//[Offset: 0x1390, Size: 16]
	InfectionRoundResultData CurRoundResultData;//[Offset: 0x13a0, Size: 280]
	int CurRoundResultShowTime;//[Offset: 0x14b8, Size: 4]
	delegate OnInfectionKillInfoChanged;//[Offset: 0x14c0, Size: 16]
	<uint32,InfectionPlayerScoreData> InfectionPlayerStateDataMap;//[Offset: 0x14d0, Size: 80]
	<int,InfectionRoundTlogCountData> InfectionRoundTlogCountDataMap;//[Offset: 0x1520, Size: 80]
	<int,InfectionRoleTableRow> RoleTableMap;//[Offset: 0x1570, Size: 80]
	delegate RoundPlayerNumChanged;//[Offset: 0x15c0, Size: 16]
	delegate RoundZombieNumChanged;//[Offset: 0x15d0, Size: 16]
	<FString,InfectionScoreTableRow> ScoreTableMap;//[Offset: 0x15e0, Size: 80]
	delegate ShowInfectionKillTipsDelegate;//[Offset: 0x1630, Size: 16]
	delegate InfectionRoundStateChanged;//[Offset: 0x1640, Size: 16]
	delegate InfectionBGMStateChanged;//[Offset: 0x1650, Size: 16]
	int HaveShowRoundResultNum;//[Offset: 0x1660, Size: 4]
	void ShowRoundResult(InfectionRoundResultData RoundData, int showTime);// 0x30dcf18
	void ShowInfectionKillTips__DelegateSignature(FString KillerName, FString VictimName, FString killerKey, FString victimKey, enum killerSubType, enum victimSubType);// 0x3b98fe4
	void SetRoundZombieNum(int Num);// 0x30dce9c
	void SetRoundPlayerNum(int Num);// 0x30dce20
	void ServerOnRoundStart(int RoundNum);// 0x30dcda4
	void ServerOnRoundEnd(int RoundNum);// 0x30dcd28
	void OnUseSpringJump(STExtraPlayerCharacter* Character, int SpringID);// 0x30dcc70
	void OnRoundZombieNumChange();// 0x30dcc5c
	void OnRoundPlayerNumChange();// 0x30dcc48
	void OnRep_RoundZombieNumChange();// 0x30dcc34
	void OnRep_RoundStateChanged();// 0x30dcc20
	void OnRep_RoundPlayerNumChange();// 0x30dcc0c
	void OnRep_ReadyStateTime();// 0x30dcbf0
	void OnRep_InfectionBGMStateChanged();// 0x30dcbdc
	void OnRep_CurRoundNum();// 0x30dcbc8
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x30dcb08
	void OnKillInfoChanged(out const InfectionContinuousKillInfo Info);// 0x30dca3c
	void OnKilledTlog(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x30dc90c
	void OnKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x30dc7dc
	void OnFinishRestartPlayer(Controller* NewPlayer, out const Rotator StartRotation);// 0x30dc718
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x30dc65c
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x30dc564
	void MulticastRPC_InfectionKillInfoChanged(const InfectionContinuousKillInfo Info);// 0x30dc4a0
	void MulticastRPC_InfectionCharacterList(const STExtraBaseCharacter*[] CharacterList);// 0x30dc3f0
	void MulticastRPC_BroadcastTeamMarkNotify(const PVEInfectionPlayerState*[] PlayerStateArray);// 0x30dc340
	bool IsVisibleType(enum OriginType, enum TargetType);// 0x30dc274
	void InitScoreTable();// 0x30dc260
	void InitRoleTable();// 0x30dc24c
	FString GetSkillIcon(enum SubType);// 0x30dc158
	InfectionRoundResultPlayerShowData GetRoundResultByPlayerKey(FString PlayerKey);// 0x30dbf20
	int GetRoundPlayerNum();// 0x30dbeec
	InfectionPlayerScoreData GetPlayerScoreData(uint32 PlayerKey);// 0x30dbde8
	InfectionRoundScoreData GetPlayerRoundScoreData(uint32 PlayerKey, int RoundNum);// 0x30dbd18
	float GetLeftRoundTime();// 0x30dbce4
	InfectionRoleTableRow GetInfectionRoleInfo(enum FindPawnType);// 0x30dbc30
	enum GetCurRoundWinCamp();// 0x30dbbfc
	InfectionRoundTlogCountData GetCurRoundTlogCountData();// 0x30dbbc4
	STExtraBaseCharacter* GetCharacterByPlayerKey(FString PlayerKey);// 0x30dba88
	<STExtraBaseCharacter*> GetAllCharacterSetWithoutSelf();// 0x30db948
	<STExtraBaseCharacter*> GetAllCharacterSet();// 0x30db808
	STExtraBaseCharacter*[] GetAllCharacter();// 0x30db764
	enum ConvertSubTypeToMainType(enum SubType);// 0x30db6d8
	STExtraBaseCharacter* ClientGetCharacterByPlayerKey(FString PlayerKey);// 0x30db59c
	void ClientBroadcast_InfectionShowKilledTip(FString KillerName, FString VictimName, uint32 killerKey, uint32 victimKey, enum killerSubType, enum victimSubType);// 0x30db398
	void CheckInitMatrixEffect(PlayerState* PState);// 0x30db31c
	void BroadcastClientOnRoundStart(int RoundNum);// 0x30db298
	void BroadcastClientOnRoundEnd(int RoundNum);// 0x30db214
	void BeginShowRoundResult(int RoundNum, int showTime);// 0x30db160
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x30db0a4
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x30dafe8
	void AddRoundWinScore();// 0x30dafd4
	void AddRevengerPlayerKillWinTimes(uint32 PlayerKey, int Times);// 0x30daf20
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x30dad24
	void AddDamageToRevengerPlayer(uint32 PlayerKey, int Damage);// 0x30dac70
	void AddDamageToMonster(uint32 PlayerKey, int Damage);// 0x30dabbc
	void AddChooseZombieTimes(uint32 PlayerKey, enum SubType, int Times);// 0x30daac8
	void AddBeRevengerPlayerTimes(uint32 PlayerKey, int Times);// 0x30daa14
	void AddBePersonWinTimes(uint32 PlayerKey, int Times);// 0x30da960
	void AddBeMonsterWinTimes(uint32 PlayerKey, int Times);// 0x30da8ac
	void AddBeMatrixMonsterTimes(uint32 PlayerKey, int Times);// 0x30da7f8

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.ActorComponent.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x118, Size: 16]
	MapUIBase* m_pMiniMap;//[Offset: 0x128, Size: 8]
	MapUIBase* m_pEntireMap;//[Offset: 0x130, Size: 8]
	int[] CurMarkInstList;//[Offset: 0x138, Size: 16]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x1e8, Size: 16]
	delegate OnMiniMapPointerException;//[Offset: 0x1f8, Size: 16]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x208, Size: 8]
	STExtraPlayerController* pExtraPC;//[Offset: 0x210, Size: 8]
	float TickRate_Internal;//[Offset: 0x24c, Size: 4]
	float TickRate_Callback;//[Offset: 0x250, Size: 4]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x3060d38
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x3b98fe4
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x3b98fe4

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x28, Size: 16]
	delegate OnUpdateMark;//[Offset: 0x38, Size: 16]
	delegate OnUpdateMultiMark;//[Offset: 0x48, Size: 16]
	delegate OnRepositionItemOnMap;//[Offset: 0x58, Size: 16]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x68, Size: 8]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x70, Size: 16]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x80, Size: 80]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	Vector LevelLandScapeCenterC;//[Offset: 0xd4, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0xe0, Size: 8]
	Image* Image_Inner;//[Offset: 0xe8, Size: 8]
	Image* Image_CarTips;//[Offset: 0xf0, Size: 8]
	Image* Image_AirIcon;//[Offset: 0xf8, Size: 8]
	Image* Image_PassedRoute;//[Offset: 0x100, Size: 8]
	Image* Image_LineUV;//[Offset: 0x108, Size: 8]
	CanvasPanel* CanvasPanel_Airline;//[Offset: 0x110, Size: 8]
	bool bFixedAirlineScaleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x120, Size: 16]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x130, Size: 8]
	Border* Border_RingFX;//[Offset: 0x138, Size: 8]
	Border* Border_FullRing;//[Offset: 0x140, Size: 8]
	float ImageBlueCircleScale;//[Offset: 0x148, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x150, Size: 240]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x240, Size: 240]
	MapDataBase* CurrentMapData;//[Offset: 0x330, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x338, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x340, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x348, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x354, Size: 4]
	float MapScaleCpp;//[Offset: 0x358, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x35c, Size: 8]
	float MapScalingRadio;//[Offset: 0x364, Size: 4]
	delegate OnDrawOrHideAirDropPath;//[Offset: 0x368, Size: 16]
	int LocalPlayerIndexC;//[Offset: 0x378, Size: 4]
	float MapImageExtentC;//[Offset: 0x37c, Size: 4]
	float MapWindowExtentC;//[Offset: 0x380, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x388, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x398, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x3ac, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x3b0, Size: 4]
	Vector2D MapAdjustLocation;//[Offset: 0x3b4, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x3bc, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x3c4, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x3cc, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	int AirDropIndex;//[Offset: 0x3d8, Size: 4]
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x305eab0
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x305e92c
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x305e7f0
	void UpdateLeftRouteLengthC();// 0x305e7d4
	void UpdateLastDriveVehicleC();// 0x305e7c0
	void UpdateAirIconC();// 0x305e7ac
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x305e6cc
	bool TickInnerCircleC();// 0x305e68c
	void TickCircleC();// 0x305e678
	void SetupUIMarkRoot();// 0x305e664
	void RepositionMapMultiMarkC(int PlayerIndex, Vector2D CurSize);// 0x305e5b0
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x305e4c4
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x305e44c
	void ReCalMapInfoC();// 0x305e438
	void OnUpdateUIMarks();// 0x305e41c
	void OnPaint(PaintContext InContext);// 0x305e384
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x305e2c8
	void HideAllMapMarkC();// 0x305e2b4
	World* GetWorldInternal();// 0x305e280
	float GetLevelToMapScale();// 0x305e244
	void DrawOrHideAirDropPath();// 0x305e230

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x4950570
	bool GetDontPaintWhenChildEmpty();// 0x4950538
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x49504ac

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 4]
	void SetZOrder(int InZOrder);// 0x4951234
	void SetSupportNotch(bool InSupportNotch);// 0x49511b0
	void SetSize(Vector2D InSize);// 0x4951138
	void SetPosition(Vector2D InPosition);// 0x49510c0
	void SetOffsets(Margin InOffset);// 0x4951044
	void SetMinimum(Vector2D InMinimumAnchors);// 0x4950fcc
	void SetMaximum(Vector2D InMaximumAnchors);// 0x4950f54
	void SetLayout(out const AnchorData InLayoutData);// 0x4950ec4
	void SetAutoSize(bool InbAutoSize);// 0x4950e40
	void SetAnchors(Anchors InAnchors);// 0x4950dc4
	void SetAlignment(Vector2D InAlignment);// 0x4950d4c
	int GetZOrder();// 0x4950d18
	Vector2D GetSize();// 0x4950ce4
	Vector2D GetPosition();// 0x4950cb0
	Margin GetOffsets();// 0x4950c78
	AnchorData GetLayout();// 0x4950c24
	bool GetAutoSize();// 0x4950bec
	Anchors GetAnchors();// 0x4950bb4
	Vector2D GetAlignment();// 0x4950b80
	bool GeSupportNotch();// 0x4950b48

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x3ec, Size: 8]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x30602e0
	void UpdateMarkSize(float inScale);// 0x306025c
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x3060130
	bool ShouldLimitedInMinimap();// 0x30600f8
	void SetWidgetCurRotation(Rotator WorldRot3D);// 0x306007c
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x3060000
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x305ff28
	void OnUIBPDestroy();// 0x305ff0c
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x305fde8
	void OnEnterEntireMap();// 0x3b98fe4
	Rotator GetWidgetCurWorldRot();// 0x305fdb0
	Vector GetWidgetCurWorldPos();// 0x305fd78

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x111, Size: 1]
	byte VerticalAlignment;//[Offset: 0x112, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x113, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x114, Size: 16]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x128, Size: 16]
	Margin Padding;//[Offset: 0x138, Size: 16]
	SlateBrush Background;//[Offset: 0x148, Size: 184]
	delegate BackgroundDelegate;//[Offset: 0x200, Size: 16]
	LinearColor BrushColor;//[Offset: 0x210, Size: 16]
	delegate BrushColorDelegate;//[Offset: 0x220, Size: 16]
	Vector2D DesiredSizeScale;//[Offset: 0x230, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x238, Size: 16]
	delegate OnMouseButtonUpEvent;//[Offset: 0x248, Size: 16]
	delegate OnMouseMoveEvent;//[Offset: 0x258, Size: 16]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x268, Size: 16]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x494e6d4
	void SetPadding(Margin InPadding);// 0x494e658
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x494e5dc
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x494e558
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x494e4d4
	void SetDesiredSizeScale(Vector2D inScale);// 0x494e45c
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x494e3e0
	void SetBrushFromTexture(Texture2D* Texture);// 0x494e364
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x494e2e8
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x494e26c
	void SetBrushColor(LinearColor InBrushColor);// 0x494e1f0
	void SetBrush(out const SlateBrush InBrush);// 0x494e0c0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x494e08c
	bool GetDontPaintWhenChildEmpty();// 0x494e054
	bool GetDontPaintWhenAlphaZero();// 0x494e01c

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x49534e8
	PanelSlot* GetContentSlot();// 0x49534b4
	Widget* GetContent();// 0x4953480

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x28, Size: 16]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x38, Size: 16]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x48, Size: 16]
	MapUIBase* CurrentMapUI;//[Offset: 0x58, Size: 8]
	void Init(MapUIBase* INMapUI);// 0x305dd00
	World* GetWorldInternal();// 0x305dccc

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x80, Size: 16]
	World* GetWorldInternal();// 0x305f6d8

--------------------------------
Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0x110, Size: 4]
	float CoolDownTime;//[Offset: 0x114, Size: 4]
	float SocialIslandCoolDownTime;//[Offset: 0x118, Size: 4]
	float LastChangeWearTime;//[Offset: 0x11c, Size: 4]
	void ServerRequestChangeWear(int Index);// 0x2f6a3f4
	bool RequestChangeWearInBattle(int Index);// 0x2f6a364
	bool RequestChangeWear(int Index);// 0x2f6a2d4
	void RealChangeWearInBattle(int Index);// 0x2f6a258
	bool IsInCoolDownTime(bool bWithLog);// 0x2f6a1c0
	bool IsInBattleState(bool bWithLog);// 0x2f6a128
	bool IsChangeWearingOpend();// 0x2f6a0f0
	bool IsAllowChangeWearingState(bool bWithLog);// 0x2f6a058
	float GetCoolDownTime();// 0x2f6a024
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x2f69f0c
	bool CheckCanChangeWearing(bool bWithLog);// 0x2f69e74

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e0, Size: 8]
	void SetDefaultNearClipPlane(bool CallFunc_IsIOSPlatform_IsIOS);// 0x3b98fe4
	void IsIOSPlatform(out bool IsIOS, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x3b98fe4
	void SetDefaultRendering();// 0x3b98fe4
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ChangeStreamingLevel(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x3b98fe4
	void InitIncaseReconnect(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void CustomEvent(byte gamePawnEvent);// 0x3b98fe4
	void ReceiveEndPlay(byte EndPlayReason);// 0x3b98fe4
	void UnloadTree();// 0x3b98fe4
	void LoadTree();// 0x3b98fe4
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess3);// 0x3b98fe4

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0x110, Size: 16]
	float HeightCheck_High;//[Offset: 0x120, Size: 4]
	float HeightCheck_Mid;//[Offset: 0x124, Size: 4]
	float HeightCheck_Low;//[Offset: 0x128, Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0x130, Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0x134, Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0x138, Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0x13c, Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0x140, Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0x144, Size: 4]
	float HighFastSpeedMoveScreenFactor;//[Offset: 0x148, Size: 4]
	float HighFastSpeedMoveCullFactor;//[Offset: 0x14c, Size: 4]
	float MidLowFastSpeedScreenFactor;//[Offset: 0x150, Size: 4]
	float MidLowFastSpeedMoveCullFactor;//[Offset: 0x154, Size: 4]
	float DelaySecondsForExitNgiht;//[Offset: 0x15c, Size: 4]
	float[] LODDistanceScaleAtNight;//[Offset: 0x160, Size: 16]
	float[] ViewDistanceScaleAtNight;//[Offset: 0x178, Size: 16]
	float[] FoliageViewDistanceScaleAtNight;//[Offset: 0x190, Size: 16]
	float[] ScreenSizeCullingFactorAtNight;//[Offset: 0x1a8, Size: 16]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	int NearClipLanded;//[Offset: 0x1c0, Size: 4]
	int NearClipFlying;//[Offset: 0x1c4, Size: 4]
	void StarCalcJump();// 0x2ff2c7c
	void SetClearPlaneFast(int Val);// 0x2ff2c00
	void ScaleScreenSizeCulling(byte pawnevent);// 0x2ff2b84
	void ScaleCullingFastMode(byte pawnevent);// 0x2ff2b08
	bool ScaleCullingFast(float ScreenSize, float Distance);// 0x2ff2a40
	void OnChangeViewTarget();// 0x2ff2a2c
	bool IsPlayerLandFromTheAir();// 0x2ff29f4
	bool IsPlayerLanded();// 0x2ff29bc
	bool IsPlayerFlying();// 0x2ff2984
	void HeightCheck();// 0x2ff2970
	void GameEventReBirth();// 0x2ff295c
	void GameEventPlane_KeepNearClipNotChanged();// 0x2ff2948
	void GameEventPlane();// 0x2ff2934
	void GameEventParachute();// 0x2ff2920
	void GameEventLanded();// 0x2ff290c
	void GameEventJump();// 0x2ff28f8
	void GameEventFinished();// 0x2ff28e4
	void GameEventFighting();// 0x2ff28d0
	void GameEventExitNight();// 0x2ff28bc
	void GameEventEnterNight();// 0x2ff28a8
	void GameEventDie(float currentHP, float ratioHP);// 0x2ff27f4
	void GameEventBirth();// 0x2ff27e0
	void ChangeViewtargetToPlane();// 0x2ff27cc

--------------------------------
Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 8]
	void ShowGuideByStep(int Data, Vector2D Offset, Vector2D focusAbsPos, Vector2D focusAbsSize, Widget* FocusWidget, Image* guideImage, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void AddUIGuide(Widget* widget1, int guildUI1, Vector2D offset1, Vector2D size1, int childData1, GuideInfo K2Node_MakeStruct_GuideInfo, int CallFunc_Array_Add_ReturnValue);// 0x3b98fe4
	void InitUIGuide(Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void CreateGuideUI();// 0x3b98fe4
	void ExecuteUbergraph_GuideComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	int guideStep;//[Offset: 0x140, Size: 4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x178, Size: 8]
	void ReceiveBeginPlay();// 0x3b98fe4
	void CustomEvent(bool BoolValue);// 0x3b98fe4
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0x110, Size: 16]
	delegate OnFPSLowWarning;//[Offset: 0x120, Size: 16]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0x130, Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0x144, Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0x148, Size: 16]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	void RequireConfigRPC();// 0x3101934
	void OnUserQualitySettingChanged(int renderlevel);// 0x31018b8
	void MakeLowFPSWarningEx();// 0x31018a4
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x31017f0
	void CountingDown();// 0x31017dc
	void CloseFPSCheck();// 0x31017c8
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x3101718

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 8]
	void OnChangeOpenDoorMode(int openmode);// 0x3b98fe4
	void UnRegistShowDoorButton();// 0x3b98fe4
	void OnShowDoorButton(byte Type);// 0x3b98fe4
	void RegistShowDoorButton();// 0x3b98fe4
	void ShowDoorButton(bool Show, bool Open, int openmode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x3b98fe4
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x3b98fe4
	void PlayerControllerReconnectedDelegate_Event();// 0x3b98fe4
	void UI_Click(bool bSimulateExtraDoor);// 0x3b98fe4
	void ToogleDoor();// 0x3b98fe4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x3b98fe4
	void AutoOpenDoor(bool BoolValue);// 0x3b98fe4
	void BP_SimulateUIClick(bool bExtraDoor);// 0x3b98fe4
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAimingExtraDoor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool ___bool_Has_Been_Initd_Variable, bool ___bool_Variable, bool ___bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, bool CallFunc_IsValid_ReturnValue3, BP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue4, BP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue5, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_BoolValue, bool K2Node_Event_bExtraDoor, bool ___bool_Variable2, bool K2Node_Select_Default);// 0x3b98fe4
	int openmode;//[Offset: 0x138, Size: 4]
	byte BtnType;//[Offset: 0x13c, Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]

--------------------------------
Class: BP_DoorMetallic_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5d0, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void Timeline_0__FinishedFunc();// 0x3b98fe4
	void Timeline_0__UpdateFunc();// 0x3b98fe4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x3b98fe4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b98fe4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b98fe4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnBPRespawned();// 0x3b98fe4
	void ExecuteUbergraph_BP_DoorMetallic(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor2, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4);// 0x3b98fe4
	BoxComponent* InterForce;//[Offset: 0x5d8, Size: 8]
	BoxComponent* Interaction;//[Offset: 0x5e0, Size: 8]
	SceneComponent* Scene;//[Offset: 0x5e8, Size: 8]
	BoxComponent* Box;//[Offset: 0x5f0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x5f8, Size: 8]
	float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x600, Size: 4]
	byte Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x604, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x608, Size: 8]
	float from;//[Offset: 0x610, Size: 4]
	float to;//[Offset: 0x614, Size: 4]
	int FromState;//[Offset: 0x618, Size: 4]
	int ToState;//[Offset: 0x61c, Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x620, Size: 8]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x628, Size: 8]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0x110, Size: 160]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 1]
	void Stop();// 0x55e2cf0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x55e2c3c
	void SetTimelineLengthMode(byte NewLengthMode);// 0x55e2bc0
	void SetTimelineLength(float NewLength);// 0x55e2b44
	void SetPlayRate(float NewRate);// 0x55e2ac8
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x55e29bc
	void SetNewTime(float NewTime);// 0x55e2940
	void SetLooping(bool bNewLooping);// 0x55e28bc
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x55e2808
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x55e2784
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x55e26d0
	void ReverseFromEnd();// 0x55e26bc
	void Reverse();// 0x55e26a8
	void PlayFromStart();// 0x55e2694
	void Play();// 0x55e2680
	void OnRep_Timeline();// 0x55e266c
	bool IsReversing();// 0x55e2634
	bool IsPlaying();// 0x55e25fc
	bool IsLooping();// 0x55e25c4
	float GetTimelineLength();// 0x55e2590
	float GetPlayRate();// 0x55e255c
	float GetPlaybackPosition();// 0x55e2528
	bool GetIgnoreTimeDilation();// 0x55e24f0

--------------------------------
Class: BP_DoorNormal_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5d0, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void ZeroToOne__FinishedFunc();// 0x3b98fe4
	void ZeroToOne__UpdateFunc();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x3b98fe4
	void EventTimer();// 0x3b98fe4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b98fe4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b98fe4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x3b98fe4
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x3b98fe4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x3b98fe4
	void OnBPRespawned();// 0x3b98fe4
	void ExecuteUbergraph_BP_DoorNormal(int EntryPoint, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, FString CallFunc_Concat_StrStr_ReturnValue, const BP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_HasState_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, bool K2Node_Event_isBeginPlay, bool K2Node_Event_bExtraDoor2, bool CallFunc_SetStaticMesh_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue5, int CallFunc_PostEventAtLocation_ReturnValue3);// 0x3b98fe4
	BoxComponent* InterForce;//[Offset: 0x5d8, Size: 8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x5e0, Size: 8]
	BoxComponent* Interaction;//[Offset: 0x5e8, Size: 8]
	SceneComponent* Scene;//[Offset: 0x5f0, Size: 8]
	BoxComponent* Box;//[Offset: 0x5f8, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x600, Size: 8]
	float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x608, Size: 4]
	byte ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x60c, Size: 1]
	TimelineComponent* ZeroToOne;//[Offset: 0x610, Size: 8]
	StaticMesh* BrokenMesh;//[Offset: 0x618, Size: 8]
	float HP;//[Offset: 0x620, Size: 4]
	float HPTimer;//[Offset: 0x624, Size: 4]
	float to;//[Offset: 0x628, Size: 4]
	float from;//[Offset: 0x62c, Size: 4]
	float HPDummy;//[Offset: 0x630, Size: 4]
	TimerHandle DummyTimerHandler;//[Offset: 0x638, Size: 8]
	float GrenadeDamageRatio;//[Offset: 0x640, Size: 4]
	int FromState;//[Offset: 0x644, Size: 4]
	int ToState;//[Offset: 0x648, Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x650, Size: 8]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x658, Size: 8]

--------------------------------
Class: BP_GrenadeDamageType_C.DamageType.Object

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x330, Size: 8]
	void EditorAxisMoveFreezed();// 0x3b98fe4
	void SetUAVSpeedPercent(float SpeedPercent);// 0x3b98fe4
	void SetUAVCameraMode(bool FreeCamera);// 0x3b98fe4
	void OnUnmanedVehicleHPChanged(float HP, float MaxHp, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void OnUnmanedVehicleFuelChanged(float Fuel, float MacFuel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_PostEvent_ReturnValue, STExtraUAVVehicleBase* K2Node_DynamicCast_AsSTExtra_UAVVehicle_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3);// 0x3b98fe4
	void SendUIMsgWhenChangeSeatCompleted(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void SendUIMsgWhenEnterVehicleCompleted(bool CallFunc_IsUAV_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	void SendUIMsgWhenExitVehicleCompleted(class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsUAV_ReturnValue, FString CallFunc_GetClassDisplayName_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	void GetVehicleGoStraight(out float VehicleGoStraight, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x3b98fe4
	void HandleCharacterUnequipWeapon(STExtraWeapon* NewParam);// 0x3b98fe4
	void HandleCharacterEquipWeapon(STExtraWeapon* NewWeapon, byte Slot);// 0x3b98fe4
	void SwitchToLastWeapon(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void CacheLastUseWeaponSlot(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue);// 0x3b98fe4
	void SetPlayMusic(bool Enabled);// 0x3b98fe4
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x3b98fe4
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ExitVehicle();// 0x3b98fe4
	void EnterVehicle(bool IsDriver, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void OnEnterVehicleCompleted(enum SeatType);// 0x3b98fe4
	void OnExitVehicleCompleted();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x3b98fe4
	void OnCurrrentClosestVehicleChanged();// 0x3b98fe4
	void EventSetDrivingViewMode(int IntValue);// 0x3b98fe4
	void OnInputAxisMoveForward(float Rate);// 0x3b98fe4
	void OnInputAxisMoveRight(float Rate);// 0x3b98fe4
	void EventSetCarMusicSwitch(bool BoolValue);// 0x3b98fe4
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x3b98fe4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x3b98fe4
	void OnLaunchUnmannedVehicleCompleted();// 0x3b98fe4
	void OnPauseUnmannedVehicleCompleted();// 0x3b98fe4
	void EventSetUAVFreeCamera(bool BoolValue);// 0x3b98fe4
	void EventSetSpeedPercent(float FloatValue);// 0x3b98fe4
	void EventUAVSingleOperate(bool BoolValue);// 0x3b98fe4
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, enum K2Node_Event_SeatType2, enum K2Node_Event_SeatType, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate3, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate4, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, bool CallFunc_IsValid_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate8, GameBackendHUD* CallFunc_GetInstance_ReturnValue, int K2Node_CustomEvent_IntValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, float K2Node_Event_rate2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, float K2Node_Event_rate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool K2Node_CustomEvent_BoolValue4, bool CallFunc_IsValid_ReturnValue9, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue10, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate10, bool K2Node_CustomEvent_BoolValue3, float CallFunc_GetVehicleGoStraight_VehicleGoStraight, float CallFunc_FixGoStraight_OutMoveRightRate, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate11, float K2Node_Event_cdTime, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, bool K2Node_CustomEvent_BoolValue2, float K2Node_CustomEvent_FloatValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController7, bool K2Node_CustomEvent_BoolValue, bool CallFunc_IsValid_ReturnValue12, delegate K2Node_CreateDelegate_OutputDelegate12, delegate K2Node_CreateDelegate_OutputDelegate13, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate14, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_GetActorEnableCollision_ReturnValue);// 0x3b98fe4
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	float Fuel;//[Offset: 0x33c, Size: 4]
	float FuelMax;//[Offset: 0x340, Size: 4]
	float HP;//[Offset: 0x344, Size: 4]
	float HPMax;//[Offset: 0x348, Size: 4]
	float OutMoveRightRate;//[Offset: 0x34c, Size: 4]
	float RawSpeed;//[Offset: 0x350, Size: 4]
	enum SeatType;//[Offset: 0x354, Size: 1]
	byte LastWeaponSlot;//[Offset: 0x355, Size: 1]
	float UnmanedFuel;//[Offset: 0x358, Size: 4]
	float UnmanedFuelMax;//[Offset: 0x35c, Size: 4]
	float UnmanedHP;//[Offset: 0x360, Size: 4]
	float UnmanedHPMax;//[Offset: 0x364, Size: 4]
	float UnmanedCallBackTime;//[Offset: 0x368, Size: 4]
	bool bShowUnmanedLowPowerTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]

--------------------------------
Class: STExtraUAVVehicleBase.STExtraVehicleBase.Pawn.Actor.Object
	VehicleUserComponent* UAVVehicleUserComponent;//[Offset: 0x1238, Size: 8]
	CameraComponent* CameraComponent;//[Offset: 0x1240, Size: 8]
	SpringArmComponent* SpringArmComp;//[Offset: 0x1248, Size: 8]
	FName CameraBoneName;//[Offset: 0x1250, Size: 8]
	delegate OnVehicleUAVStateChanged;//[Offset: 0x1260, Size: 16]
	float FPP_TargetArmLength;//[Offset: 0x1270, Size: 4]
	float TPP_TargetArmLength;//[Offset: 0x1274, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0x1278, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127c, Size: 1]
	enum UAVVehicleState;//[Offset: 0x1284, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0x1288, Size: 4]
	float CoolDownTimeMin;//[Offset: 0x128c, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0x1290, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0x1294, Size: 4]
	float LowFuelWarning;//[Offset: 0x1298, Size: 4]
	float SkillRecallingTime;//[Offset: 0x129c, Size: 4]
	float SkillDisappearingTime;//[Offset: 0x12a0, Size: 4]
	float SkillDestoryTime;//[Offset: 0x12a4, Size: 4]
	float MaxCameraFOV;//[Offset: 0x12c4, Size: 4]
	float MinCameraFOV;//[Offset: 0x12c8, Size: 4]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0x12d0, Size: 16]
	void SetViewTargetAgainForOB();// 0x323cb70
	void SetUAVVehicleState(enum NewState);// 0x323caf4
	void SetFPPCameraFov(float factor);// 0x323ca78
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x323c99c
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x323c8ec
	void SendToServerIsFPP(bool IsFirstPerson);// 0x323c828
	void SendToServerClientInitOK();// 0x323c7c8
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x323c704
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x323c678
	void OnRep_UAVVehicleState();// 0x323c65c
	void OnRep_IsFPPChanged();// 0x323c648
	void OnRep_FPPCameraFovChanged();// 0x323c634
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x323c50c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x323c378
	float GetDisToPlayer();// 0x323c344
	bool CheckCanSwitchFPP();// 0x323c304

--------------------------------
Class: SurfBoardComp.ActorComponent.Object
	float SpeedThresholds;//[Offset: 0x110, Size: 4]
	float JumpImpulse;//[Offset: 0x114, Size: 4]
	float JumpImpulseBig;//[Offset: 0x118, Size: 4]
	float MaxStateTime_Jump;//[Offset: 0x11c, Size: 4]
	float RealStateTime_Jump;//[Offset: 0x120, Size: 4]
	float FloorInWaterLow;//[Offset: 0x124, Size: 4]
	float HalfInWaterLow;//[Offset: 0x128, Size: 4]
	float RealInWaterLow;//[Offset: 0x12c, Size: 4]
	float MaxHalfInWaterLowTime;//[Offset: 0x130, Size: 4]
	float JumpCeilingHeight;//[Offset: 0x134, Size: 4]
	float HalfJumpHeight;//[Offset: 0x138, Size: 4]
	float RealJumpHeight;//[Offset: 0x13c, Size: 4]
	float MaxInHalfJumpHeightTime;//[Offset: 0x140, Size: 4]
	float MaxSpeed;//[Offset: 0x144, Size: 4]
	float RealMaxSpeed;//[Offset: 0x148, Size: 4]
	float InWaterTolerance;//[Offset: 0x14c, Size: 4]
	int LeaveFlyPointNum;//[Offset: 0x15c, Size: 4]
	int PersistanceFrameThreshold;//[Offset: 0x160, Size: 4]
	float AutoExitHeightThreshold;//[Offset: 0x164, Size: 4]
	float HitTestToSeaLevelBias;//[Offset: 0x168, Size: 4]
	enum SurfBoardState;//[Offset: 0x16c, Size: 1]
	void ServerSetSurfBoardState(enum InState);// 0x325fbe8
	void OnRep_SurfBoardState();// 0x325fbd4
	void ClientSetSurfBoardState(enum InState);// 0x325fb24

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x14d0, Size: 8]
	void OnClientVehicleHealthStateChangedToDestory();// 0x3b98fe4
	void CreateDMI();// 0x3b98fe4
	void SetDMIParam(MaterialInstanceDynamic* Dim, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void UpdateExhaustFx(FName ExhaustName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSoftWrapperArray CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSoftWrapper CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x3b98fe4
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3b98fe4
	void OnSetTailLightValue(float LightValue);// 0x3b98fe4
	void OnBoostingChanged();// 0x3b98fe4
	void OnEngineStart();// 0x3b98fe4
	void OnEngineStop();// 0x3b98fe4
	void VehicleMeshChanged();// 0x3b98fe4
	void BPPlayOverlapDamageCameraShake();// 0x3b98fe4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x3b98fe4
	void AdvanceVehicleMeshChanged();// 0x3b98fe4
	void OnRep_CandidateAvatar();// 0x3b98fe4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_1_DriverChangeDelegate__DelegateSignature(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x3b98fe4
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, BP_STExtraWheeledVehicle_C* ___object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_STExtraWheeledVehicle_C* ___object_Variable2, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, float K2Node_Event_LightValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraShake* CallFunc_PlayCameraShake_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* K2Node_Event_OtherActor, VehicleAdvanceAvatarComponent* CallFunc_GetVehicleAdvanceAvatar_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetTailLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_OldChara, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_NewChara, bool CallFunc_NotEqual_IntInt_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x3b98fe4
	BP_VehicleShowFrameComp_C* BP_VehicleShowFrameComp;//[Offset: 0x14d8, Size: 8]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x14e0, Size: 8]
	CameraComponent* Camera;//[Offset: 0x14e8, Size: 8]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x14f0, Size: 8]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f8, Size: 1]
	FName TailLightParamName;//[Offset: 0x1500, Size: 8]
	FName FrontLightParamName;//[Offset: 0x1508, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x1510, Size: 8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1518, Size: 1]
	float LastOverlapShakeTime;//[Offset: 0x151c, Size: 4]
	float OverlapShakeInterval;//[Offset: 0x1520, Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1524, Size: 1]

--------------------------------
Class: BP_VehicleShowFrameComp_C.ShowActorFrameComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x2d0, Size: 64]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x310, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x318, Size: 4]
	MaterialInterface* Material;//[Offset: 0x320, Size: 8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x328, Size: 8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x338, Size: 8]
	FString FrameDetailsUIPath;//[Offset: 0x340, Size: 16]
	FString FrameDetailsParentWidgetName;//[Offset: 0x350, Size: 16]
	FString FrameDetailsParentOuterName;//[Offset: 0x360, Size: 16]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x370, Size: 16]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x380, Size: 16]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x390, Size: 8]
	ActorPositionWidget* GetDetailsWidget();// 0x31062c4
	void DestroyFrameUI();// 0x31062b0
	bool CreateFrameUI(int ParamIfNecessary);// 0x3106220

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x6a0, Size: 16]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x552e074
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x552dec4

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x3d0, Size: 8]
	TextBlock* TextBlockDist;//[Offset: 0x3d8, Size: 8]
	Actor* AttachedActor;//[Offset: 0x3e0, Size: 8]
	Vector4 Limit;//[Offset: 0x3f0, Size: 16]
	Vector2D UIOffset;//[Offset: 0x400, Size: 8]
	Vector LocOffset;//[Offset: 0x408, Size: 12]
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	float AlphaBegin;//[Offset: 0x418, Size: 4]
	float AlphaEnd;//[Offset: 0x41c, Size: 4]
	float AlphaStep;//[Offset: 0x420, Size: 4]
	float AlphaBeginDistance;//[Offset: 0x424, Size: 4]
	float AlphaEndDistance;//[Offset: 0x428, Size: 4]
	float ScaleBegin;//[Offset: 0x42c, Size: 4]
	float ScaleEnd;//[Offset: 0x430, Size: 4]
	float ScaleStep;//[Offset: 0x434, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x438, Size: 4]
	float ScaleEndDistance;//[Offset: 0x43c, Size: 4]
	float MaxShowDistance;//[Offset: 0x440, Size: 4]
	int TargetDistance;//[Offset: 0x444, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x458, Size: 8]
	void ShowArrowAngle(bool Visible, float Angle);// 0x3b98fe4
	void SetCurrentWidgetVisible(bool Visible);// 0x3b98fe4
	void SetActorImage(Texture2D* Texture);// 0x3b98fe4
	void PostAttachmentChanged();// 0x3b98fe4
	void DetachFromActor(Actor* InActor);// 0x2eb5aa8
	void AttachToActor(Actor* InActor);// 0x2eb5a2c

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 24]
	delegate TextDelegate;//[Offset: 0x140, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 40]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x188, Size: 40]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x1b0, Size: 40]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	SlateFontInfo Font;//[Offset: 0x1e0, Size: 88]
	Vector2D ShadowOffset;//[Offset: 0x238, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x240, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x250, Size: 16]
	float MinDesiredWidth;//[Offset: 0x260, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x496ac2c
	void SetText(FText InText);// 0x496aa14
	void SetShadowOffset(Vector2D InShadowOffset);// 0x496a99c
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x496a920
	void SetSelectColor(bool bIsSelect);// 0x496a89c
	void SetOpacity(float InOpacity);// 0x496a820
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x496a7a4
	void SetJustification(byte InJustification);// 0x496a728
	void SetFont(SlateFontInfo InFontInfo);// 0x496a4bc
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x496a264
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x496a1e0
	FText GetText();// 0x496a0d4

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x100, Size: 4]
	byte Justification;//[Offset: 0x104, Size: 1]
	byte VerticalJustification;//[Offset: 0x105, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	float WrapTextAt;//[Offset: 0x108, Size: 4]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 1]
	Margin Margin;//[Offset: 0x110, Size: 16]
	float LineHeightPercentage;//[Offset: 0x120, Size: 4]

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 8]
	FName GetReflectionCubeName_Lobby();// 0x3b98fe4
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x3b98fe4
	FString GetItemAvatarHandlePath(int ItemID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x3b98fe4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, bool NewLocalVar, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue2, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x3b98fe4
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void VehicleAvatarEquiped();// 0x3b98fe4
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x3b98fe4
	void VehicleFPPMeshLoaded();// 0x3b98fe4
	void LoadedBrokenMat();// 0x3b98fe4
	void ClearVehicleLightEffect();// 0x3b98fe4
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	ParticleSystem* CurLightEffect;//[Offset: 0x548, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x570, Size: 8]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]

--------------------------------
Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x28, Size: 80]
	<int,FString> BPTableNameMap;//[Offset: 0x78, Size: 80]
	FString LoadedClassManagerClassName;//[Offset: 0xc8, Size: 16]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x298, Size: 80]
	void InitTableData();// 0x34060a8
	void InitBPTableMap();// 0x3b98fe4
	FString GetWrapperPath(FString BPTableName, int ID);// 0x3405f50
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x3405e58
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x3405c78
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby);// 0x3405b00
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x3405a08
	class Object GetClass(FString BPTableName, int ID, bool IsLobby);// 0x34058cc
	FString GetBPTableName(int Type);// 0x34057d8
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x3405640
	static UAELoadedClassManager* Get();// 0x340560c
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x3405554
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x34054b8
	void ClearAllData();// 0x34054a4

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x28, Size: 16]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x38, Size: 80]
	FString GetWrapperPath(int ID);// 0x3404e38
	class Object GetWrapperClass(int ID);// 0x3404dac
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x3404c30
	Object* GetObject(int ID, Object* Outer, bool IsLobby);// 0x3404b24
	class Object GetCustom1Class(int ID);// 0x3404a98
	class Object GetClass(int ID, bool IsLobby);// 0x34049c8
	void ConvertPath(int ID);// 0x340494c

--------------------------------
Class: HoldComponent_C.ActorComponent.Object
	void HoldTime(out float Time, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	void Release(byte FingerIndex, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_HoldTime_Time, PlayerController* CallFunc_GetPlayerController_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	void Push(int FingerIndex, float CallFunc_GetTimeSeconds_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void HoldAndRelease__DelegateSignature(int FingeerIndex);// 0x3b98fe4
	delegate HoldAndRelease;//[Offset: 0x110, Size: 16]
	float HoldTimeThreshold;//[Offset: 0x120, Size: 4]
	int HoldFingerIndex;//[Offset: 0x124, Size: 4]
	byte HoldMode;//[Offset: 0x128, Size: 1]
	float PushTime;//[Offset: 0x12c, Size: 4]
	bool IsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]

--------------------------------
Class: BP_SkillManagerComponent_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	void TriggerEvent(int SkillID, byte EventType);// 0x328cc84
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x328cbc4
	void SetSkillOwner(Actor* Pawn);// 0x328cb40

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	<int,int> IndexOfMapID;//[Offset: 0x7d0, Size: 80]
	UAESkillPoolManager* SkillPoolManager;//[Offset: 0x870, Size: 8]
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x878, Size: 16]
	FString SkillTableName;//[Offset: 0x888, Size: 16]
	FString SkillBuffTableName;//[Offset: 0x898, Size: 16]
	FString PropSkillMapTableName;//[Offset: 0x8a8, Size: 16]
	byte TriggerSkillEventFromRole;//[Offset: 0x8d0, Size: 1]
	GSListenerBase* CurrentGSListener;//[Offset: 0x8d4, Size: 8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0x8e0, Size: 16]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0x8f0, Size: 16]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0x900, Size: 16]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0x910, Size: 16]
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x32b171c
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillID, byte InFromRole);// 0x32b1620
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillID, byte InFromRole);// 0x32b14f4
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillID, byte InFromRole);// 0x32b13f8
	void TriggerEvent(int SkillID, byte EventType);// 0x32b1338
	void TriggerCurSkillEvent_Mutil(byte UAEEvent, int SkillID);// 0x32b1278
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x32b11b8
	void SetIsAutoAddSkill(bool InAutoAdd);// 0x32b1134
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x32b1014
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x32b0f24
	void OnSkillManagerInitFinish();// 0x32b0f10
	void OnRep_SkillSynSinglePhaseData();// 0x32b0ef4
	void OnRep_SkillSynData();// 0x32b0ed8
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x32b0e5c
	void InitSkillSystem_WithID(bool IsDedicateServer);// 0x32b0dd0
	void InitSkillSystem(bool IsDedicateServer);// 0x32b0d44
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x32b0cb0
	FString GetSkillIconBySkillID(int SkillID);// 0x32b0bbc
	UTSkill* GetSkillByEntry(enum Entry);// 0x32b0b28
	byte GetRealOwnerRoleSafety();// 0x32b0aec
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x32b0a28
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x32b088c
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x32b07c8
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x32b06c4

--------------------------------
Class: UAESkillPoolManager.Object
	AESkillPool* Pool;//[Offset: 0x28, Size: 8]
	AESkillPool* ClientPool;//[Offset: 0x30, Size: 8]
	bool IsCurAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	AESkillPool*[] DirtyPools;//[Offset: 0x40, Size: 16]

--------------------------------
Class: AESkillPool.Object
	World* CurWorldRef;//[Offset: 0x28, Size: 8]
	<int,UTSkillWidget*> SkillWidgetCaches;//[Offset: 0x80, Size: 80]
	<int,SkillInstArrayTemplate> SkillInstanceTeamplates;//[Offset: 0x120, Size: 80]
	UAESkillPoolManager* SkillManager;//[Offset: 0x178, Size: 8]
	void OnAsyncLoadingFinished(SkillPoolAysncLoadParams loadParams);// 0x32b7020

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x28, Size: 16]
	Controller* OwnerController;//[Offset: 0x38, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float DelayTime;//[Offset: 0x44, Size: 4]
	bool ReconnectRecover();// 0x302a65c
	void OnEventTrigger();// 0x302a640
	Actor* GetCurrentEventOwnerActor();// 0x302a604
	bool EnableListener();// 0x302a5c4
	bool DisableListener();// 0x302a584

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	FString EventString;//[Offset: 0x190, Size: 16]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0x148, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x150, Size: 16]
	FName PreEventActionTag;//[Offset: 0x160, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x168, Size: 8]
	SkillConditionWarpper[] Conditions;//[Offset: 0x170, Size: 16]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x180, Size: 16]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0x148, Size: 4]
	float fAPScale;//[Offset: 0x14c, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x150, Size: 16]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x6091e6c
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x6091d88
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x6091c34
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x6091ae0
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x609198c
	void OnAsyncLoadSoftPathDone();// 0x609192c
	UTSkill* GetOwnerSkill();// 0x60918c4
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x6091770
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x6091680

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte UAESkillEventType;//[Offset: 0x190, Size: 1]

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0x190, Size: 8]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);// 0x2f8ac58

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CharacterAnimList_Parachute_C.UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x2e0, Size: 1376]
	float Priority;//[Offset: 0x840, Size: 4]
	float BlendRadius;//[Offset: 0x844, Size: 4]
	float BlendWeight;//[Offset: 0x848, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84c, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5598c24

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 8]
	void IsFppMode(out bool Out, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void GetPetOwnerPlayerPawn(out BP_PlayerPawn_C* Out, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void GetPetPawn(out BasePetCharacter_BP_C* Out, BasePetCharacter_BP_C* K2Node_DynamicCast_AsBase_Pet_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void SetPetPawn(STExtraPetCharacter* InPetPawn, out STExtraPetCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x3b98fe4
	void SetPetOwnerPlayerPawn(STExtraBaseCharacter* InPlayerPawn, out STExtraBaseCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x3b98fe4
	void ResetAttachTrans(BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x3b98fe4
	void SpawnPetWithInfo(GameModePlayerPetInfo Info, bool ___bool_Variable, bool CallFunc_IsFppMode_Out, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Select_Default, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class BasePetCharacter_BP_C K2Node_ClassDynamicCast_AsBase_Pet_Character_BP, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x3b98fe4
	void SpawnPet(class BasePetCharacter_BP_C PetClass);// 0x3b98fe4
	void RemovePet();// 0x3b98fe4
	void PlayerStateChange(enum State, byte changeType);// 0x3b98fe4
	void OnOwnerPlayerPossessed(GameModePlayerPetInfo PetInfo);// 0x3b98fe4
	void OnOwnerDetachedVehicle();// 0x3b98fe4
	void OnRep_PetPawn();// 0x3b98fe4
	void OnRep_PetOwnerPlayerPawn();// 0x3b98fe4
	void ExecuteUbergraph_PetComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, Actor*[] K2Node_MakeArray_Array, STExtraBaseCharacter* CallFunc_SetPetOwnerPlayerPawn_out, class BasePetCharacter_BP_C K2Node_CustomEvent_PetClass, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, enum K2Node_Event_State, byte K2Node_Event_changeType, FString CallFunc_Concat_StrStr_ReturnValue, GameModePlayerPetInfo K2Node_CustomEvent_PetInfo, STExtraPetCharacter* CallFunc_SetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsPlayer_Event_for_Pet, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out5, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out6, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out7, FString CallFunc_Concat_StrStr_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out8, bool CallFunc_IsValid_ReturnValue8, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out9, FString CallFunc_Conv_BoolToString_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out2, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out3, bool CallFunc_IsValid_ReturnValue10, FString CallFunc_Conv_BoolToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue8, PetLevelInfo K2Node_MakeStruct_PetLevelInfo, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, BasePetCharacter_BP_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, STExtraPetCharacter* CallFunc_SetPetPawn_Out2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, Vector CallFunc_Add_VectorVector_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, Transform CallFunc_MakeTransform_ReturnValue);// 0x3b98fe4
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x2e8, Size: 8]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x2f0, Size: 32]
	Transform SpawnTrans;//[Offset: 0x310, Size: 48]
	Actor*[] NewVar;//[Offset: 0x340, Size: 16]

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x2d0, Size: 8]
	STExtraPetCharacter* PetPawn;//[Offset: 0x2d8, Size: 8]
	void OnRep_PetPawn();// 0x3b98fe4
	void OnRep_PetOwnerPlayerPawn();// 0x3b98fe4

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0xf18, Size: 16]
	bool[] ClientDiffPetStateList;//[Offset: 0xf28, Size: 16]
	float MovementTickInterval;//[Offset: 0xf38, Size: 4]
	int PetStateNum;//[Offset: 0xf3c, Size: 4]
	int RelevantCloseTime;//[Offset: 0xf40, Size: 4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0xf44, Size: 8]
	PetLevelInfo PetLevelInfo;//[Offset: 0xf4c, Size: 8]
	bool OwnerPlayerIsOnMoveBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf54, Size: 1]
	float OwnerPlayerMoveBaseCheckTime;//[Offset: 0xf58, Size: 4]
	float OwnerPlayerCurMoveBaseCheckTime;//[Offset: 0xf5c, Size: 4]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf60, Size: 1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0xf68, Size: 8]
	byte PetRelevantType;//[Offset: 0xf70, Size: 1]
	byte CurPetState;//[Offset: 0xf71, Size: 1]
	delegate OnPetStateChangeDelegate;//[Offset: 0xf78, Size: 16]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0xf88, Size: 16]
	delegate OnPetMontageDelegate;//[Offset: 0xf98, Size: 16]
	PetEventItem* CurExecuteEvent;//[Offset: 0xfa8, Size: 8]
	PetMontageData PetCurMontage;//[Offset: 0xfb0, Size: 8]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x3b98fe4
	void SetPetVisibility(bool Visible);// 0x3b98fe4
	void SetPetMontage(out const PetMontageData Data);// 0x31d8e34
	void SetCurExecuteEvent(PetEventItem* Event);// 0x31d8db8
	bool PetOwnerIsAutonomous();// 0x31d8d80
	void PetOwnerCharacterBecomeValid();// 0x3b98fe4
	void PetLeaveState(byte State);// 0x31d8d04
	bool PetHasState(byte State);// 0x31d8c74
	bool PetEnterState(byte ToState);// 0x31d8be4
	void OwnerPlayerMoveBaseCheck();// 0x31d8bd0
	void OnRep_PetVisibilityInfo();// 0x31d8bbc
	void OnRep_PetStateList();// 0x31d8ba8
	void OnRep_PetStateChange();// 0x31d8b94
	void OnRep_PetOwnerCharacter();// 0x31d8b80
	void OnRep_PetCurMontageChange();// 0x31d8b6c
	void OnRep_CurExecuteEvent();// 0x31d8b58
	void OnRep_AttachmentReplication();// 0x31d8b3c
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x31d8a30
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x3b98fe4
	bool IsPetCanAppear();// 0x31d89f0
	bool IsAnimLimited(int AnimId);// 0x31d8958
	int[] GetPetUnlockAnimIds();// 0x3b98fe4
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x3b98fe4
	FString GetPetAnimLimitePlayerState(int AnimId);// 0x3b98fe4
	bool ClientPredictEnterState(byte ToState);// 0x31d88c8
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x31d8830
	void BroadcastPetLeaveDisappear();// 0x31d8814
	void BindDelegateInCpp();// 0x31d87f8

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x28, Size: 1]
	int EventPriority;//[Offset: 0x2c, Size: 4]
	float EventExecTime;//[Offset: 0x30, Size: 4]
	float EventMaxWaitTime;//[Offset: 0x34, Size: 4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	byte EnterPetState;//[Offset: 0x39, Size: 1]
	byte LeavePetState;//[Offset: 0x3a, Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x40, Size: 8]
	int AnimationAssetId;//[Offset: 0x48, Size: 4]
	PetMontageConfig[] MontageList;//[Offset: 0x50, Size: 16]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x60, Size: 16]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x70, Size: 16]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	delegate OnPetEventStartDelegate;//[Offset: 0x88, Size: 16]
	delegate OnPetEventEndDelegate;//[Offset: 0x98, Size: 16]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xa8, Size: 8]
	void UpdateCanPlayMontageList();// 0x30a3b74
	void SelectRandomMontage();// 0x30a3b58
	void OnEventStart(STExtraPetCharacter* Pet);// 0x30a3ad4
	void OnEventEnd();// 0x30a3ab8
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x30a3a20

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x28, Size: 1]
	float EventMaxWaitTime;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xfe0, Size: 8]
	void GetGameModeType(out enum GameModeType, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void HandleOnOwnerWin(int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	void OnPetOwnerFallingModeChange(bool IsFalling, Vector PlayerLoc, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x3b98fe4
	void StopCurMontage(AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void ChangeToDefaultAttachInfo(PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult);// 0x3b98fe4
	void OnDelayLeaveDisappear();// 0x3b98fe4
	void OnPetLeaveState(byte LeaveState, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPetDefaultFollowType_FollowType, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void OnPetEnterState(byte EnterState, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x3b98fe4
	void OnPetAppearAnimEnd();// 0x3b98fe4
	void OnPetDisappearStateChange(bool IsEnter, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void GetPetParachuteEquipments(out int[] Out);// 0x3b98fe4
	void HandlePetStopParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	void HandlePetStartParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x3b98fe4
	void DetachFromOwnerPlayer();// 0x3b98fe4
	void InitPetAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x3b98fe4
	void SetPetFollowType(byte Type, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue);// 0x3b98fe4
	void PetHasDisappearState(out bool Out, bool CallFunc_PetHasState_ReturnValue, bool CallFunc_PetHasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void OnPetFlyAroundStateChange(bool IsEnter, bool CallFunc_IsServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	void OnPetFollowStateChange(bool IsEnter, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	void UpdateAttachInfoByOwnerDefaultAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, AvatarSlotDesc[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, AvatarSlotDesc CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x3b98fe4
	void ResetAttachInfo(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x3b98fe4
	void GetPetInfo(out GameModePlayerPetInfo PetInfo);// 0x3b98fe4
	void GetPetEntity(out PetEntityComponent_BP_C* PetEntity);// 0x3b98fe4
	void DisableUnuseComponent();// 0x3b98fe4
	void CalcInAirAttackArea(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	void OnAirAttackOver();// 0x3b98fe4
	void OnAirAttackWarning(GameStateBase* CallFunc_GetGameState_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void SelfPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue);// 0x3b98fe4
	void OtherPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue);// 0x3b98fe4
	void PetOtherVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void PetSelfVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, bool ___bool_Variable, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_Select_Default, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void GetPetDefaultFollowType(out byte FollowType);// 0x3b98fe4
	void DrawPetDebugInfo(bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x3b98fe4
	void OnRep_AttachToOwner(Transform TempTrans, bool CallFunc_PetEnterState_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_K2_SetActorRotation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Transform CallFunc_GetFollowPos_out);// 0x3b98fe4
	void AttachToOwnerPlayer(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x3b98fe4
	void PetOwnerStopEmote(int EmoteId, int StopReason, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void PetOwnerPlayEmote(int EmoteId, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetEmotionEventInfo* CallFunc_SpawnObject_ReturnValue, bool CallFunc_PetEnterState_ReturnValue, DateTime CallFunc_Now_ReturnValue, int CallFunc_GetSecond_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PetVisibilityInfo K2Node_MakeStruct_PetVisibilityInfo, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AnimIdIsValid_IsValid);// 0x3b98fe4
	void AnimIdIsValid(int AnimId, out bool IsValid, int[] CallFunc_GetPetUnlockAnimIds_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsAnimLimited_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void GetPetRspInfoWithPlayerEmoteId(int PlayerEmoteId, out BP_STRUCT_PetPlayerEmoteTable_type Out Row, out bool found, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x3b98fe4
	FString GetPetAnimLimitePlayerState(int AnimId, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetActPlayerStateTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x3b98fe4
	int[] GetPetUnlockAnimIds(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x3b98fe4
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x3b98fe4
	void GetPetAttachInfo(out PetAttachInfo AttachInfo, PetAttachInfo CallFunc_GetCurrentAttachInfo_ReturnValue);// 0x3b98fe4
	void GetPetEventManager(out PetEventManagerComponent* PetEventManager);// 0x3b98fe4
	void SetOwnerCharacterPC(STExtraPlayerController* CallFunc_GetController_ReturnValue);// 0x3b98fe4
	void GetOwnerCharacter(out BP_PlayerPawn_C* OwnerCharacter, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void SetOwnerCharacter(BP_PlayerPawn_C* Owner, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Controller* CallFunc_GetController_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetPetDefaultFollowType_FollowType, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x3b98fe4
	void GetFollowPos(float MinRadius, float MaxRadius, out Transform Out, WaterSwimActor* NewLocalVar, Vector ActorLoc, Rotator ActorRot, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue2, Rotator CallFunc_MakeRotFromZY_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector K2Node_MathExpression_ReturnValue, Actor*[] ___object_Variable, Vector K2Node_MathExpression_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, WaterSwimActor* K2Node_DynamicCast_AsWater_Swim_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void Timeline_0__FinishedFunc();// 0x3b98fe4
	void Timeline_0__UpdateFunc();// 0x3b98fe4
	void PlayerStateChange(enum State, byte changeType);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void PetOwnerCharacterBecomeValid();// 0x3b98fe4
	void UpdateSplineInfo();// 0x3b98fe4
	void PetStopParchute();// 0x3b98fe4
	void PetStartParachute();// 0x3b98fe4
	void BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature(PetWaitEventInfo* EventInfo);// 0x3b98fe4
	void OnPetStateChangeEvent(byte State, bool IsEnter);// 0x3b98fe4
	void BindEvent();// 0x3b98fe4
	void OnPetMontageEvent(PetMontageData MontageData);// 0x3b98fe4
	void OnAsyncLoadPetAnimRes(Object* LoadObject);// 0x3b98fe4
	void SetPetVisibility(bool Visible);// 0x3b98fe4
	void OnOwnerWinEvent();// 0x3b98fe4
	void OnOwnerKillSomeone();// 0x3b98fe4
	void OnOwnerAssistKill();// 0x3b98fe4
	void OnMoveVoiceAround(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x3b98fe4
	void OnShotVoiceAround(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x3b98fe4
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x3b98fe4
	void OnAirAttackEvent(byte airattacktype, int waveindex);// 0x3b98fe4
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x3b98fe4
	void DebugLineTimerEvent();// 0x3b98fe4
	void OnPetOwnerStateInterruptEvent(enum State, enum InterruptedBy);// 0x3b98fe4
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x3b98fe4
	void PetEnterPlane();// 0x3b98fe4
	void OnPetOwnerFallingModeChangeEvent(bool IsFalling);// 0x3b98fe4
	void OnOwnerPerspectiveChanged(bool IsFPP);// 0x3b98fe4
	void OnOwnerHoldGrenadeStateChange();// 0x3b98fe4
	void OnPetOwnerShoot(enum State);// 0x3b98fe4
	void OnPetVisibility_EnterHide();// 0x3b98fe4
	void OnPetVisibility_EnterVisible();// 0x3b98fe4
	void OnPlayerEnterParachute();// 0x3b98fe4
	void OnPlayerExitParachute();// 0x3b98fe4
	void ExecuteUbergraph_BasePetCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, enum K2Node_Event_State, byte K2Node_Event_changeType, delegate K2Node_CreateDelegate_OutputDelegate8, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate9, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, delegate K2Node_CreateDelegate_OutputDelegate10, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, SplineComponent*[] CallFunc_GetComponentsByTag_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate13, SplineComponent* CallFunc_Array_Get_Item, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager2, PetWaitEventInfo* K2Node_ComponentBoundEvent_EventInfo, byte K2Node_CustomEvent_State3, bool K2Node_CustomEvent_IsEnter, delegate K2Node_CreateDelegate_OutputDelegate14, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, PetMontageData K2Node_CustomEvent_MontageData, Object* K2Node_CustomEvent_LoadObject, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetActionTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool K2Node_Event_Visible, bool CallFunc_IsServer_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_PetSelfVisibleSetting_out, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue2, bool CallFunc_PetOtherVisibleSetting_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate15, delegate K2Node_CreateDelegate_OutputDelegate16, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue4, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager5, STExtraBaseCharacter* K2Node_CustomEvent_nowCharacter, Vector K2Node_CustomEvent_posVector2, float K2Node_CustomEvent_showTime2, Vector CallFunc_GetLocationAtTime_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, STExtraShootWeapon* K2Node_CustomEvent_nowWeapon, Vector K2Node_CustomEvent_posVector, float K2Node_CustomEvent_showTime, bool K2Node_CustomEvent_isslience, bool K2Node_CustomEvent_isExplosion, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager6, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue5, PetWaitEventInfo* K2Node_Event_Event, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager7, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, byte K2Node_CustomEvent_airattacktype, int K2Node_CustomEvent_waveindex, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_IsServer_ReturnValue3, bool K2Node_Event_Draw, bool CallFunc_IsServer_ReturnValue4, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager8, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue6, enum K2Node_Event_slotType, bool K2Node_Event_isEquipped, int K2Node_Event_InItemID, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, delegate K2Node_CreateDelegate_OutputDelegate17, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter3, bool CallFunc_PetHasDisappearState_out, bool CallFunc_IsHiddenByOtherSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter4, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_HasState_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate18, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate19, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType4, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, FixPetAttachInfo K2Node_MakeStruct_FixPetAttachInfo, delegate K2Node_CreateDelegate_OutputDelegate20, bool CallFunc_IsServer_ReturnValue5, bool CallFunc_PetOwnerIsAutonomous_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager9, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue5, PetEventPlayerStateTypeSt K2Node_MakeStruct_PetEventPlayerStateTypeSt, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager10, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, byte CallFunc_GetPredictPetOwnerState_Enter, byte CallFunc_GetPredictPetOwnerState_Leave, bool CallFunc_GetPredictPetOwnerState_ReturnValue, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_ClientPredictEnterState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue6, bool K2Node_CustomEvent_IsFalling, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_PetEnterState_ReturnValue2, bool K2Node_CustomEvent_IsFPP, delegate K2Node_CreateDelegate_OutputDelegate21, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_PetSelfVisibleSetting_out2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter5, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate22, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue13, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue7, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager11, bool CallFunc_PetEnterState_ReturnValue3, bool CallFunc_PetEnterState_ReturnValue4, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x3b98fe4
	void PetOwnerStateChangeDispatcher__DelegateSignature(enum State, byte changeType);// 0x3b98fe4
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0xfe8, Size: 8]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0xff0, Size: 8]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0xff8, Size: 8]
	PetEventManagerComponent* PetEventManager;//[Offset: 0x1000, Size: 8]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x1008, Size: 4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x100c, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x1010, Size: 8]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0x1018, Size: 8]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0x1020, Size: 16]
	int[] UnlockAnimIds;//[Offset: 0x1030, Size: 16]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040, Size: 1]
	SplineComponent* PetParachuteSpline;//[Offset: 0x1048, Size: 8]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0x1050, Size: 8]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x1060, Size: 8]
	Vector CurAttackArea;//[Offset: 0x1068, Size: 12]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1074, Size: 1]
	TimerHandle DebugLineTimer;//[Offset: 0x1078, Size: 8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	float PetAppearTime;//[Offset: 0x1084, Size: 4]
	float PetDelayLeaveDisappearTime;//[Offset: 0x1088, Size: 4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0x1090, Size: 8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 1]
	enum TPlayerState;//[Offset: 0x1099, Size: 1]
	byte TChangeType;//[Offset: 0x109a, Size: 1]
	float TeleportMinAngle;//[Offset: 0x109c, Size: 4]
	float TeleportMaxAngle;//[Offset: 0x10a0, Size: 4]
	bool ShouldHideOnFirstPersonView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a4, Size: 1]
	Vector SwimOffset;//[Offset: 0x10a8, Size: 12]
	int CountToPlayWinAnim;//[Offset: 0x10b4, Size: 4]
	int MaxCountToPlayWinAnim;//[Offset: 0x10b8, Size: 4]
	float IntervalToPlayWinAnim;//[Offset: 0x10bc, Size: 4]

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb9, Size: 1]
	float DefaultTraceDeltaTime;//[Offset: 0xfbc, Size: 4]
	float TraceLength;//[Offset: 0xfc0, Size: 4]
	float CurrentTraceDeltaTime;//[Offset: 0xfc4, Size: 4]
	byte[] TraceTypeConfig;//[Offset: 0xfc8, Size: 16]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0xfd8, Size: 8]
	void TraceForward();// 0x31af800
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x31af7cc

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0x110, Size: 16]
	PetEventItemIns[] EventConfigs;//[Offset: 0x120, Size: 16]
	BehaviorTree* DefaultBT;//[Offset: 0x130, Size: 8]
	BehaviorTree* CurrentBT;//[Offset: 0x138, Size: 8]
	STExtraPetController* PetController;//[Offset: 0x140, Size: 8]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x148, Size: 8]
	PetEventItem* CurExecuteEvent;//[Offset: 0x150, Size: 8]
	int MaxWaitEventNum;//[Offset: 0x158, Size: 4]
	delegate OnPetEventDelegate;//[Offset: 0x160, Size: 16]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x30a53f0
	void StartEventExecTimer(float ExecTime);// 0x30a5374
	void ProcessWaitEvent(float Delta);// 0x30a52f8
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x30a51c0
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x30a5134
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x30a50b8
	void DequeueWaitEvent(bool bNeedExec);// 0x30a5034
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x30a4fa4
	bool CanResponseEvent();// 0x30a4f6c

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x31d9958

--------------------------------
Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, FString CallFunc_Array_Get_Item5, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, FString CallFunc_Array_Get_Item6, float CallFunc_Conv_StringToFloat_ReturnValue6, Rotator CallFunc_MakeRotator_ReturnValue, PetAttachInfo K2Node_MakeStruct_PetAttachInfo);// 0x3b98fe4

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0x110, Size: 8]
	PetAttachInfo AttachInfo;//[Offset: 0x118, Size: 32]
	PetAttachInfo FollowAttachInfo;//[Offset: 0x138, Size: 32]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x158, Size: 32]
	PetAttachInfo CurAttachInfo;//[Offset: 0x178, Size: 32]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x198, Size: 16]
	byte FollowType;//[Offset: 0x1a8, Size: 1]
	int[] ParachuteEquipItems;//[Offset: 0x1b0, Size: 16]
	enum[] PredictOwnerStates;//[Offset: 0x1c0, Size: 16]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x30a3520
	void OnPetStateChanged(byte State, bool IsEnter);// 0x30a3458
	STExtraPetCharacter* GetPetCharacter();// 0x30a3424
	PetAttachInfo GetCurrentAttachInfo();// 0x30a33d8
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x3b98fe4

--------------------------------
Class: BasePetController_BP_C.STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a8, Size: 8]
	void CalcInAirAttackArea();// 0x3b98fe4
	void OnPlayerStopEmote(int EmoteId, int Reason, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x3b98fe4
	void OnPlayerPlayEmote(int Emote, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnAirAttackEvent(byte airattacktype, int waveindex);// 0x3b98fe4
	void ExecuteUbergraph_BasePetController_BP(int EntryPoint, BehaviorTreeComponent* CallFunc_GetComponentByClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_airattacktype, int K2Node_CustomEvent_waveindex, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue2, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue3, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess2);// 0x3b98fe4
	BehaviorTree* CurBT;//[Offset: 0x4b0, Size: 8]
	FName PetOwnerEmoteId;//[Offset: 0x4b8, Size: 8]
	FName IsAirAttacking;//[Offset: 0x4c0, Size: 8]
	FName AirAttackArea;//[Offset: 0x4c8, Size: 8]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x4d0, Size: 8]
	Vector CurAttackArea;//[Offset: 0x4d8, Size: 12]

--------------------------------
Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	float PetBlockDetectionDistance;//[Offset: 0x49c, Size: 4]
	float PetBlockDetectionInterval;//[Offset: 0x4a0, Size: 4]
	int PetBlockDetectionSampleCount;//[Offset: 0x4a4, Size: 4]

--------------------------------
Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x30, Size: 4]

--------------------------------
Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x30, Size: 1]
	byte StateChangeType;//[Offset: 0x31, Size: 1]

--------------------------------
Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void PetHasEquippedItem(int ID, out bool Out, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HasLogicEquipped_ReturnValue);// 0x3b98fe4
	void PetUnequipItemById(int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x3b98fe4
	void PetEquipItemById(int ID, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x3b98fe4
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x3b98fe4

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void InitMasterComponent();// 0x30a1308
	void Initialize();// 0x30a12ec
	void InitialAvatarParam();// 0x30a12d8

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe48, Size: 8]
	enum GetForceHideState(int InSlotID, Actor* CallFunc_GetOwner_ReturnValue, enum CallFunc_GetForceHideState_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x3b98fe4
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	bool IsEnableItemDownload(int ItemID);// 0x3b98fe4
	SoftObjectPath GetBatchDefaultBodyPath(int ___int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x3b98fe4
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x3b98fe4
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnequipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x3b98fe4
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x3b98fe4
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x3b98fe4
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, int ___int_Variable2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, int ___int_Variable3);// 0x3b98fe4
	bool BPClientPostProcessViewDataMiddle();// 0x3b98fe4
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x3b98fe4
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x3b98fe4
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x3b98fe4
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum ___byte_Variable, enum CallFunc_IntToType_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int ___int_Variable7, int ___int_Variable8, int ___int_Variable9, int ___int_Variable10, int ___int_Variable11, int ___int_Variable12, int ___int_Variable13, int ___int_Variable14, int ___int_Variable15, int ___int_Variable16, int ___int_Variable17, int ___int_Variable18, int K2Node_Select_Default);// 0x3b98fe4
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x3b98fe4
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x3b98fe4
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x3b98fe4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x3b98fe4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x3b98fe4
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x3b98fe4
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x3b98fe4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x3b98fe4
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x3b98fe4
	void ClearEventFromOnAvatarEquippedEvent();// 0x3b98fe4
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason);// 0x3b98fe4
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xe50, Size: 8]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xe58, Size: 8]
	int[] HoodClothSubTypeMap;//[Offset: 0xe60, Size: 16]
	enum PreEquipClothReason;//[Offset: 0xe70, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0xe78, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0xea0, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x3b98fe4
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x3b98fe4
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x3b98fe4
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x3b98fe4
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x3b98fe4
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x3b98fe4
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_WrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x3b98fe4
	bool HandlePickup(out interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x3b98fe4
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, ItemAssociation K2Node_MakeStruct_ItemAssociation, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue3, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x3b98fe4
	STExtraPlayerController* OwningPlayerController;//[Offset: 0xa00, Size: 8]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xa08, Size: 8]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0xa10, Size: 8]
	Transform SourceWrapperTrans;//[Offset: 0xa20, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0xa50, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xa80, Size: 8]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0xa88, Size: 8]
	byte SlotNameConfig;//[Offset: 0xa90, Size: 1]
	byte ForceGender;//[Offset: 0xa91, Size: 1]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xf8, Size: 16]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x108, Size: 80]
	<int,enum> TClipTypeMap;//[Offset: 0x158, Size: 80]
	<int,ItemRecordData> mapItemRecord;//[Offset: 0x1a8, Size: 80]
	<FString,ItemBeOverrideRecordData> BeOverrideMapItemMap;//[Offset: 0x1f8, Size: 80]
	<int,int> mapPickupBullet;//[Offset: 0x248, Size: 80]
	<int,enum> mapAttachPos;//[Offset: 0x298, Size: 80]
	PickupSetting PickupSetting;//[Offset: 0x2e8, Size: 456]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x4b0, Size: 488]
	PickupProposeData proposeData;//[Offset: 0x698, Size: 384]
	int[] NeedToShowTypeList;//[Offset: 0x818, Size: 16]
	int[] ConsumeableMissionItemID;//[Offset: 0x828, Size: 16]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x838, Size: 16]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x848, Size: 80]
	<FName,TagItemList> ItemTag;//[Offset: 0x898, Size: 80]
	<int,ItemTagList> ItemTagMap;//[Offset: 0x8e8, Size: 80]
	enum CurrentGameModeType;//[Offset: 0x948, Size: 1]
	FString ItemTableName;//[Offset: 0x950, Size: 16]
	FString ItemTagTableName;//[Offset: 0x960, Size: 16]
	FString AttachTableName;//[Offset: 0x970, Size: 16]
	FString SuitEmoteTableName;//[Offset: 0x980, Size: 16]
	FString OccupationTableName;//[Offset: 0x990, Size: 16]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x9a0, Size: 16]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x9b0, Size: 80]
	ActivityItemData ActivityData;//[Offset: 0xa00, Size: 48]
	ActivityConfigData ActivityConfig;//[Offset: 0xa30, Size: 80]
	SpecialItemData SpecialData;//[Offset: 0xa80, Size: 1]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa81, Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0xa88, Size: 80]
	<int,int> gunMainTypeUseful;//[Offset: 0xad8, Size: 80]
	<int,int> attachMainTypeUseful;//[Offset: 0xb28, Size: 80]
	<int,int> bulletMainTypeUseful;//[Offset: 0xb78, Size: 80]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0xbc8, Size: 80]
	<int,int> constructTypeUseful;//[Offset: 0xc18, Size: 80]
	<int,int> skillpropsTypeUseful;//[Offset: 0xc68, Size: 80]
	<int,bool> itemPathExist;//[Offset: 0xcb8, Size: 80]
	int[] ItemToDownload;//[Offset: 0xd08, Size: 16]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0xd18, Size: 4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 1]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0xd20, Size: 80]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd71, Size: 1]
	int[] TombBoxItemBlackList;//[Offset: 0xd78, Size: 16]
	int CharacterVirtualItem_Type;//[Offset: 0xd88, Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0xd8c, Size: 4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0xd90, Size: 80]
	<int> NoUseVirtualItemIDs;//[Offset: 0xde0, Size: 80]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 1]
	void ResetItemToDownload();// 0x2f20c44
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x2f20bb4
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x2f20b0c
	void OnGameModeTypeChanged();// 0x2f20af0
	void ItemTableAdditiveOverride(FString OverrideItemTableName, bool bOverride);// 0x2f20a00
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x2f20938
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x2f207fc
	bool IsParachuteItemType(int ItemID);// 0x2f20764
	bool IsInPveMode();// 0x3b98fe4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x2f20694
	bool IsGrenadeCanAutoSwitch(int ItemID);// 0x2f205fc
	bool IsGlideItemType(int ItemID);// 0x2f20564
	bool IsGhillieSuitItemType(int ItemID);// 0x2f204cc
	bool IsEquipmentItem(int ItemID);// 0x2f20434
	bool IsConsumableMissionItemType(int ItemID);// 0x2f2039c
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x2f202e0
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache, bool bLobby, bool bForceLobby);// 0x2f20164
	bool Is3BackpackID(int ID);// 0x3b98fe4
	void Initialize();// 0x2f20150
	void InitialItemTable();// 0x2f20134
	bool HasTagSub(int ItemID, out const FName TagName);// 0x2f20058
	bool HasTag(int ItemID, out const FName TagName);// 0x2f1ff7c
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x3b98fe4
	FString GetRawBattleTextByType(enum Type, int InSubType);// 0x2f1fe44
	FString GetRawBattleTextByRawTextID(int ID);// 0x2f1fd48
	int GetPendantIDByWeaponID(int WeaponId);// 0x2f1fcb4
	int GetItemSubTypeID(int SpecificID);// 0x3b98fe4
	ItemRecordData GetItemRecord(int ItemID);// 0x2f1fc00
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x3b98fe4
	int GetGrenadePriorityByType(const byte grenadeType);// 0x2f1fb6c
	int GetEquipmentLevel(int ItemID);// 0x2f1fad8
	int GetEquipmentBagLevel(int ItemID);// 0x2f1fa44
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x2f1f988
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x2f1f8f4
	FString GetBPTableNameByItemID(out const ItemDefineID DefineID);// 0x2f1f7e4
	int GetBPIDByResID(int resID);// 0x2f1f750
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out const ItemDefineID DefineID);// 0x2f1f5f8
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID);// 0x2f1f4f0
	FString GetBattleItemHandlePath(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x2f1f34c
	class Object GetBattleItemHandleClass(out const ItemDefineID DefineID);// 0x2f1f2a4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x2f1f1e4
	int[] GetAttachOfWeapon(int WeaponId);// 0x2f1f0f0
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x2f1efc8
	TagItemList FindItemTag(out const FName TagName);// 0x2f1eeec
	BattleItemHandleBase* CreateVirtualItemHandle(out const ItemDefineID DefineID, Object* Outer);// 0x2f1ee04
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer);// 0x2f1ed24
	BattleItemHandleBase* CreateBattleItemHandle(out const ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x2f1ebf8
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x2f1eb3c
	BattleItemData ConstructBattleItemDataByDefineID(out const ItemDefineID DefineID);// 0x2f1ea6c
	void ClearItemRecord();// 0x2f1ea58
	bool CheckItem(int ItemTableID);// 0x2f1e9c0
	bool CheckHasItemRecord(int ItemID);// 0x2f1e930
	bool CanNotAutoSwitchToGrenade(int InGrenadeID);// 0x2f1e898
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x2f1e7dc

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe38, Size: 8]
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue);// 0x3b98fe4
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x3b98fe4
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int ___int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x3b98fe4
	bool IsConsumableMissionItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x3b98fe4
	int GetGrenadePriorityByType(byte grenadeType, int CallFunc_MakeLiteralInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_MakeLiteralInt_ReturnValue2, int CallFunc_MakeLiteralInt_ReturnValue3, int CallFunc_MakeLiteralInt_ReturnValue4, int CallFunc_MakeLiteralInt_ReturnValue5, int CallFunc_MakeLiteralInt_ReturnValue6, int CallFunc_MakeLiteralInt_ReturnValue7, int CallFunc_MakeLiteralInt_ReturnValue8, int CallFunc_MakeLiteralInt_ReturnValue9, int CallFunc_MakeLiteralInt_ReturnValue10, int CallFunc_MakeLiteralInt_ReturnValue11, int CallFunc_MakeLiteralInt_ReturnValue12, int CallFunc_MakeLiteralInt_ReturnValue13, int CallFunc_MakeLiteralInt_ReturnValue14, int CallFunc_MakeLiteralInt_ReturnValue15);// 0x3b98fe4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	bool IsEquipmentItem(int ItemID, bool CallFunc_Map_Contains_ReturnValue);// 0x3b98fe4
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	int GetPendantIDByWeaponID(int WeaponId, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x3b98fe4
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x3b98fe4
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x3b98fe4
	bool IsGlideItemType(int ItemID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	bool IsGhillieSuitItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x3b98fe4
	int GetEquipmentBagLevel(int ItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetGameStatus_ReturnValue, FString CallFunc_ToLower_ReturnValue, bool K2Node_SwitchString_CmpSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x3b98fe4
	int GetEquipmentLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x3b98fe4
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x3b98fe4
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	void ModifySetting();// 0x3b98fe4
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x3b98fe4
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FName CallFunc_Array_Get_Item, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x3b98fe4
	int GetBPIDByResID(int resID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x3b98fe4
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x3b98fe4
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x3b98fe4
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x3b98fe4
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x3b98fe4
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x3b98fe4
	int GetItemSubTypeID(int SpecificID, ItemRecordData CallFunc_GetItemRecord_ReturnValue);// 0x3b98fe4
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x3b98fe4
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x3b98fe4
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x3b98fe4
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface classNone CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x3b98fe4
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x3b98fe4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x3b98fe4
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle);// 0x3b98fe4
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x3b98fe4
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x3b98fe4
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x3b98fe4
	void GetItemTableRowByItemTableID(int ID, out ItemRecordData ItemTableRow, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x3b98fe4
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x3b98fe4
	void InitialItemTable();// 0x3b98fe4
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x3b98fe4
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0xe40, Size: 16]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0xe50, Size: 80]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xea0, Size: 16]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xeb0, Size: 80]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xf00, Size: 80]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xf50, Size: 80]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xfa0, Size: 80]
	int[] GhillieSuitItem;//[Offset: 0xff0, Size: 16]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x3b98fe4

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x8ac, Size: 4]
	float FreeCameraOffsetRadius;//[Offset: 0x8cc, Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x8d0, Size: 80]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x924, Size: 12]
	float ProbeRadius;//[Offset: 0x930, Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x934, Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x938, Size: 4]
	float DefaultFieldOfView;//[Offset: 0x93c, Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x940, Size: 4]
	bool EnableUsePawnRotationCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 1]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x3095a28

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x418, Size: 28]
	Transform InVehicleCameraTrans;//[Offset: 0x440, Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x470, Size: 28]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x2ff1d00

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d8, Size: 8]
	void ResetScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x3b98fe4
	void DownScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x3b98fe4
	void ChangeScopeTPPGlassMat(MeshComponent* ScopeMeshComp, int ScopeID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_WeaponScopeGlassMat_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x3b98fe4
	void GetScopeMatTableKey(STExtraPlayerController* PlayerController, STExtraShootWeapon* Weapon, enum ScopeType, out FString Key, int MatTableKey, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsScopeSpecialMatExist_exist, int CallFunc_IsScopeSpecialMatExist_MatTableKey, int CallFunc_GetScopeID_ReturnValue, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x3b98fe4
	void IsScopeSpecialMatExist(STExtraWeapon* Weapon, enum ScopeType, out bool exist, out int MatTableKey, int ___int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AvatarDIYEntity* CallFunc_GetAvatarEntity_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_GetLoadedHandle_ReturnValue, BackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable2, WeaponAttachmentConfig CallFunc_GetAttachmentConfig_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x3b98fe4
	float SwitchAngledSightConfigMaterial(bool forceSwitch, MeshComponent* ScopeMeshComp, int AngledSightID, bool CallFunc_IsServer_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue3, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, MaterialInterface* CallFunc_GetMaterial_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x3b98fe4
	float ShowAngledSightTPPMaterial(bool forceADSState, float CallFunc_SwitchAngledSightConfigMaterial_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	float SwitchSightConfigMaterial(int SpecialMatFlag, STExtraShootWeapon* CurShootWeapon, MeshComponent* ScopeMeshComp, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x3b98fe4
	float ShowReflectorSightTPPMaterial(bool forceADSState, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, float CallFunc_SwitchSightConfigMaterial_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, byte CallFunc_GetCurSightType_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetScopeID_ReturnValue);// 0x3b98fe4
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled, float CallFunc_GetCurrentScopeZoomFov_MinFov, float CallFunc_GetCurrentScopeZoomFov_CurFov, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, byte CallFunc_GetSightType_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FName CallFunc_GetFNameFromTwoID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, int CallFunc_GetPlatformInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue);// 0x3b98fe4
	void ReloadEvent();// 0x3b98fe4
	void SetTagCulling(bool IsUse);// 0x3b98fe4
	void PlayScopeInTimeline();// 0x3b98fe4
	void ScopeInEnd();// 0x3b98fe4
	void ScopeOutEnd();// 0x3b98fe4
	void StopScopeIn();// 0x3b98fe4
	void AttachToSight();// 0x3b98fe4
	void AttachTo(SceneComponent* NewParam);// 0x3b98fe4
	void Detach(SceneComponent* NewParam);// 0x3b98fe4
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void AutoReloadEvent(STExtraShootWeapon* ShootWeapon);// 0x3b98fe4
	void AttachToSightKeepTransform();// 0x3b98fe4
	void ExecuteUbergraph_FPPComponent(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetSightType_ReturnValue, bool K2Node_Event_IsUse, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue3, bool CallFunc_IsValid_ReturnValue, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, SceneComponent* K2Node_CustomEvent_NewParam2, SceneComponent* K2Node_CustomEvent_NewParam, float K2Node_Event_DeltaSeconds, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_K2_AttachToComponent_ReturnValue2);// 0x3b98fe4
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x2e0, Size: 8]
	float DeltaTime;//[Offset: 0x2e8, Size: 4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x2f0, Size: 8]
	StaticMesh* SightLens;//[Offset: 0x2f8, Size: 8]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xe8, Size: 552]
	class AnimInstance* animBP;//[Offset: 0x310, Size: 8]
	class AnimInstance* animBPClass;//[Offset: 0x318, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x340, Size: 16]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x350, Size: 16]
	BackpackComponent* BackpackComp;//[Offset: 0x360, Size: 8]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x2f275c8
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x2f275ac
	bool IsVirtualAvatarHandle();// 0x2f2756c
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x2f274f0
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x2f27430
	int GetSubSlotID();// 0x2f273f4
	int GetSlotID();// 0x2f273b8
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x2f2734c
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x2f271dc
	WeaponAttachmentConfig GetAttachmentConfig();// 0x2f27170
	class Object GetAnimationBP();// 0x2f27134
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x2f27024

--------------------------------
Class: Vault_Controller_C.PlayerVaultComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d0, Size: 8]
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart, Vector CurPosition, bool CallFunc_IsVaultOnBase_ShouldVault, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetBaseLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue);// 0x3b98fe4
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos, bool CallFunc_IsVaultOnBase_ShouldVault, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x3b98fe4
	void PrintStartPosition(FString Prefix, Vector Position, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x3b98fe4
	void IsVaultOnBase(out bool ShouldVault, bool CallFunc_CheckBaseIsMoveable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void PrintHeight(float ShouldHeight, float NowHeight, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x3b98fe4
	void GetRealStartZHeight(out float ResStartZ, bool CallFunc_IsVaultOnBase_ShouldVault, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_Conv_TextToString_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2);// 0x3b98fe4
	void GetDataStartPosition(out Vector StartPos, bool CallFunc_IsVaultOnBase_ShouldVault, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_Conv_TextToString_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2);// 0x3b98fe4
	void PrintDebugString(float shoulddis, float nowDis, float ZOffset, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x3b98fe4
	void EnsurePawnClientLeaveVault();// 0x3b98fe4
	void JumpVaultCheck(out bool Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	void SetShouldAdjustHeight(int CallFunc_FindSubstring_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x3b98fe4
	void SetNowUseFpsVault(STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void ServerCrossingBlockCheck(Vector StartPos, float distoblock, float blockheight, Rotator movedir, out bool Result, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, Actor*[] K2Node_MakeArray_Array, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x3b98fe4
	void UpdateMoveMode(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	FString GetVaultKeyByBlockHeight(float Height, float CallFunc_GetJumpLengthByHeight_length);// 0x3b98fe4
	void fpsVaultGetRotaion(out Rotator rotion, Rotator CallFunc_GetRelicateRotator_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void SetFpsVaultSpeed(float nowDataHeight, float nowfpsBlockheight, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x3b98fe4
	void FpsVaultGetTppAnimationInfo(out FString AnimationName, out float animationTime, out float PlayRate, float animationrate, float nowfpsBlockheight, float nowDataHeight, float nowTime, FString nowAnimationName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x3b98fe4
	void FpsGetTotalTime(out float TotalTime, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue2, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue2);// 0x3b98fe4
	void FpsTestLimitPostion(Vector nowPostion, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x3b98fe4
	void FpsVaultTrigger(Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_GetPlayerStartPositionInternal_StartPos);// 0x3b98fe4
	void FpsVaultServerCheating(Vector playerpos, Vector topPos, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void FpsVaultStart(Vector StartPos, Vector topPos, float offsetMaxX, float offsetMaxY, bool isjump, Rotator palyerRtion, float blocklength, Vector toblockHitVec, float CallFunc_VSize_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_FpsVaultGetTppAnimationInfo_animationname, float CallFunc_FpsVaultGetTppAnimationInfo_animationTime, float CallFunc_FpsVaultGetTppAnimationInfo_playrate, FName CallFunc_Conv_StringToName_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_FpsGetTotalTime_totalTime, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Normal_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_PlayAnimMontage_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue2, float CallFunc_PlayAnimMontage_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_EnterState_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_HasState_ReturnValue);// 0x3b98fe4
	void FpsVaultGetNowPostion(float nowPastTime, out Vector nowPostion, out bool IsGet, float OnBlockTime, float DownTotalTime, float UpTotalTime, float PastTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_VLerp_ReturnValue2, float CallFunc_VSize_ReturnValue2, bool CallFunc_FpsTestLimitPostion_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue5, Vector CallFunc_VLerp_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue6);// 0x3b98fe4
	void FpsVualtUpdate(Vector NowTargetPostion, float nowPastTime, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_FpsVaultGetNowPostion_nowPostion, bool CallFunc_FpsVaultGetNowPostion_isGet, Rotator CallFunc_fpsVaultGetRotaion_rotion, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, Actor*[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x3b98fe4
	void SetStopForwardDis(float shoulddis, out float Result, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void DealBrokenWindows(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable2, BP_WindowCompBase_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_WindowCompBase_C* CallFunc_Array_Get_Item2, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_VSize2D_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	bool VaultFromCPP(bool CallFunc_CheckCanVault_isActive);// 0x3b98fe4
	void CheckVaultWindows(Vector CheckStart, Vector CheckEnd, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_SphereTraceMultiForObjects_OutHits, bool CallFunc_SphereTraceMultiForObjects_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_WindowCompBase_C* K2Node_DynamicCast_AsBP_Window_Comp_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x3b98fe4
	void EnableCulling(bool bEnable, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void GetCliblastCheckDis(out float Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x3b98fe4
	void NowStateCheck(bool sprint, bool Walk, bool stand, out bool Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x3b98fe4
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation, float nowtestHeight, float nowSelectThickLength, FString nowkey, float nowThcklength, float NowHeight, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4);// 0x3b98fe4
	void CheckIsValidByHeightCheckDis(float NowHeight, float checkDis, out bool isVaild, float nowChckDis, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, vaultCheckRule CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	void IsValidVault(out bool IsValid, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_GetRealStartZHeight_ResStartZ, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2);// 0x3b98fe4
	void GetTestObjectChannels(out byte[] Channels, byte[] K2Node_MakeArray_Array);// 0x3b98fe4
	void UpdateMontageSpeed(bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3);// 0x3b98fe4
	void ServerCheckBlockDis(Vector HitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float blocklength, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_VSize_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Abs_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_LessEqual_FloatFloat_ReturnValue5);// 0x3b98fe4
	void GetNowOppSideDis(out float Result, float totalLength, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x3b98fe4
	void CheckUpLengthBlock(out bool Result, float nowHeightTestHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue);// 0x3b98fe4
	void GetCrossMaxBlockDisOffsset(out bool Result, float TestCrossBlockMaxDis, float NowTestHalfHeight, Actor*[] ___object_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetNowOppSideDis_result, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue4, float CallFunc_VSize_ReturnValue);// 0x3b98fe4
	void SetLimitPostion(float XValue, float ZVaule, Vector realPos, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_GetRealStartZHeight_ResStartZ, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x3b98fe4
	void CheckForward(out bool IsActive, float nowCheckDis, Vector nowNormal, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_MakeVector_ReturnValue3, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_NotEqual_ObjectObject_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos2, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue4, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit2, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_ForwardTestObjectType_result, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x3b98fe4
	void CheckHeight(float Height, out bool IsActive, out Vector Point, float nowminheight, float testCapsuleRadius, Vector nowHitPoint, float nowCheckHeight, float nowHeightTestHeight, int ___int_Array_Index_Variable, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] K2Node_MakeArray_Array, float CallFunc_Add_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, byte[] CallFunc_GetTestObjectChannels_channels2, byte[] CallFunc_GetTestObjectChannels_channels3, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_Not_PreBool_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue3, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Actor*[] K2Node_MakeArray_Array3, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, int ___int_Loop_Counter_Variable, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X7, float CallFunc_BreakVector_Y7, float CallFunc_BreakVector_Z7, float CallFunc_BreakVector_X8, float CallFunc_BreakVector_Y8, float CallFunc_BreakVector_Z8, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x3b98fe4
	void GetJumpLengthByHeight(float Height, out float Length, float TestHeight, float NowHeight, FString nowkey, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x3b98fe4
	void printReason(FString Result);// 0x3b98fe4
	void PrintEnable(PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_BoolToText_ReturnValue);// 0x3b98fe4
	void CacultLimitData(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4);// 0x3b98fe4
	void GetCrossMaxBlockDisForward(out bool Result, float NowTestHalfHeight, float CallFunc_GetNowOppSideDis_result, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetParentActor_ReturnValue, Actor*[] K2Node_MakeArray_Array, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x3b98fe4
	void GetPlayerStartZ(out float Result, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x3b98fe4
	void GetCrossBlockMaxFallingHeight(float capsuleTestLefHeight, Actor*[] ___object_Variable, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_GetPlayerStartZ_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x3b98fe4
	void ForwardTestObjectType(Actor* Actor, out bool Result, Actor* NewLocalVar, LandscapeStreamingProxy* K2Node_DynamicCast_AsLandscape_Streaming_Proxy, bool K2Node_DynamicCast_bSuccess, Landscape* K2Node_DynamicCast_AsLandscape, bool K2Node_DynamicCast_bSuccess2, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess3);// 0x3b98fe4
	void SetEnd(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValidVault_isvalid, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir, bool CallFunc_IsValid_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue);// 0x3b98fe4
	void UpdatePostion2(float testhalfHeight, float ZOffset, Vector nowmoveOffset, float preTime, bool isUping, float ShouldHeight, float NowHeight, float shoulddis, float nowDis, bool CallFunc_Not_PreBool_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float CallFunc_GetRealStartZHeight_ResStartZ, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_SetStopForwardDis_result, float CallFunc_GetAnimMontagePlayRate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Actor*[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, float CallFunc_GetTimeSeconds_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue4, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue5, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array3, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue4, float CallFunc_GetFloatValue_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue5, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_IsStandalone_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, HitResult CallFunc_UpdatedComponentWithBase_OutHit, bool CallFunc_UpdatedComponentWithBase_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue6, float CallFunc_Subtract_FloatFloat_ReturnValue7, float CallFunc_Subtract_FloatFloat_ReturnValue8, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x3b98fe4
	void GetNowData(bool IsInFalling, out bool IsGet, float nowtestHeight, float nowSelectThickLength, float TestHeight, bool IsGetData, int ___int_Array_Index_Variable, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, FString CallFunc_Array_Get_Item, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_EqualEqual_BoolBool_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue5, int ___int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x3b98fe4
	void CheckCanVault(out bool IsActive, bool IsInFalling, float nowHeightTestHeight, Vector nowHeightHitPoint, bool nowResult, Actor*[] ___object_Variable, int ___int_Array_Index_Variable, bool CallFunc_JumpVaultCheck_result, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckBaseIsMoving_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GetNowData_IsGet, bool CallFunc_CheckHeight_isActive, Vector CallFunc_CheckHeight_point, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_CheckHeight_isActive2, Vector CallFunc_CheckHeight_point2, float CallFunc_GetCliblastCheckDis_result, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_CheckNowisJumpAnimation_result, bool CallFunc_CheckNowisJumpAnimation_ishasAnimation, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_CheckIsValidByHeightCheckDis_isVaild, byte[] CallFunc_GetTestObjectChannels_channels2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] ___object_Variable2, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_CheckUpLengthBlock_result, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, bool CallFunc_GetCrossMaxBlockDisOffsset_result, bool CallFunc_CheckHeight_isActive3, Vector CallFunc_CheckHeight_point3, bool CallFunc_CheckForward_isActive, bool CallFunc_CheckHeight_isActive4, Vector CallFunc_CheckHeight_point4, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GetCrossMaxBlockDisForward_result, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue3, int ___int_Loop_Counter_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_AllowState_ReturnValue, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x3b98fe4
	void StartVault();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void JumpVault();// 0x3b98fe4
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3b98fe4
	void vaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir);// 0x3b98fe4
	void jumpfromUI();// 0x3b98fe4
	void VaultFail(FString Reason);// 0x3b98fe4
	void UpdateVault_BluePrint();// 0x3b98fe4
	void interrupted(enum State, enum InterruptedBy);// 0x3b98fe4
	void vaultLeave(enum State);// 0x3b98fe4
	void DsCheckStopVault();// 0x3b98fe4
	void StopVault();// 0x3b98fe4
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3b98fe4
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3b98fe4
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, bool CallFunc_AllowState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_AllowState_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_HasAuthority_ReturnValue3, bool CallFunc_EnterState_ReturnValue, bool CallFunc_HasState_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, bool CallFunc_IsStandalone_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess2, Vector CallFunc_GetBaseLocation_ReturnValue, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, bool CallFunc_IsLocallyControlled_ReturnValue2, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_HitPoint, Rotator K2Node_CustomEvent_movedir, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess3, UAEGameMode* K2Node_DynamicCast_AsUAEGame_Mode, bool K2Node_DynamicCast_bSuccess4, Controller* CallFunc_GetController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess5, FString K2Node_CustomEvent_reason, bool CallFunc_CheckAcknowledgedPawn_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess6, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsLocallyControlled_ReturnValue4, bool CallFunc_EnterState_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, Vector K2Node_Event_startPos2, Vector K2Node_Event_topPos2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, bool K2Node_Event_isjump2, Rotator K2Node_Event_movedir2, float K2Node_Event_blobkthick2, Vector K2Node_Event_startPos, Vector K2Node_Event_topPos, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, bool K2Node_Event_isjump, Rotator K2Node_Event_movedir, float K2Node_Event_blobkthick, Vector CallFunc_Subtract_VectorVector_ReturnValue3, bool CallFunc_FpsVaultServerCheating_result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue3, float CallFunc_VSize2D_ReturnValue, bool CallFunc_ServerCrossingBlockCheck_result, bool CallFunc_BooleanAND_ReturnValue3, float CallFunc_GetAnimMontagePlayRate_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos2, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector CallFunc_GetPlayerStartPositionInternal_StartPos3, bool CallFunc_IsStandalone_ReturnValue2, bool CallFunc_ServerCrossingBlockCheck_result2, bool CallFunc_ServerCheckBlockDis_Result, bool CallFunc_BooleanAND_ReturnValue4);// 0x3b98fe4
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x1d8, Size: 8]
	float DeltaTime;//[Offset: 0x1e0, Size: 4]
	float NowBlockDis;//[Offset: 0x1e4, Size: 4]
	float NowBlockHeight;//[Offset: 0x1e8, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x1ec, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x1f0, Size: 4]
	float NowBlockLength;//[Offset: 0x1f4, Size: 4]
	float maxCheckDis;//[Offset: 0x1f8, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x1fc, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x200, Size: 4]
	float MaxCheckHeight;//[Offset: 0x204, Size: 4]
	Actor* checkActor;//[Offset: 0x208, Size: 8]
	Vector PlayerStartPostion;//[Offset: 0x210, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x21c, Size: 12]
	Vector HitPoint;//[Offset: 0x228, Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x238, Size: 8]
	float CapsuleRadius;//[Offset: 0x240, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x244, Size: 4]
	Vector blockDir;//[Offset: 0x248, Size: 12]
	VaultData NowVaultData;//[Offset: 0x258, Size: 96]
	float MaxJumpLength;//[Offset: 0x2b8, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	float CountTime;//[Offset: 0x2c0, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	byte NowDrawDebugType;//[Offset: 0x2c5, Size: 1]
	float realStartTime;//[Offset: 0x2c8, Size: 4]
	Vector DataStartpos;//[Offset: 0x2cc, Size: 12]
	FString nowVaultKey;//[Offset: 0x2d8, Size: 16]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x2e8, Size: 80]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float nowMaxX;//[Offset: 0x33c, Size: 4]
	float nowMinFallingY;//[Offset: 0x340, Size: 4]
	float realStartZ;//[Offset: 0x344, Size: 4]
	float offsetSpeed;//[Offset: 0x348, Size: 4]
	byte gunSlot;//[Offset: 0x34c, Size: 1]
	Vector oppsiteHitPoint;//[Offset: 0x350, Size: 12]
	Vector uphitPoint;//[Offset: 0x35c, Size: 12]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float heightoffsetcheck;//[Offset: 0x36c, Size: 4]
	float HeightFowardCheck;//[Offset: 0x370, Size: 4]
	float minVaultHeight;//[Offset: 0x374, Size: 4]
	float nowAnimSpeed;//[Offset: 0x378, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x37c, Size: 4]
	float animChangegSpeedRate;//[Offset: 0x380, Size: 4]
	bool ischangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	vaultCheckRule[] checkRuleList;//[Offset: 0x388, Size: 16]
	float laststandDis;//[Offset: 0x398, Size: 4]
	float lastwalkDis;//[Offset: 0x39c, Size: 4]
	float lastsprintDis;//[Offset: 0x3a0, Size: 4]
	BP_WindowCompBase_C*[] VaultWindows;//[Offset: 0x3a8, Size: 16]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x3bc, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	Vector PlayerStartDir;//[Offset: 0x3c4, Size: 12]
	bool waitStopvaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	float stopVaultOppDis;//[Offset: 0x3d4, Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x3d8, Size: 4]
	float FpsVaultSpeed;//[Offset: 0x3dc, Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x3e0, Size: 12]
	Vector FpsvVaultTopoffsetPostion;//[Offset: 0x3ec, Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x3f8, Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x404, Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float FpsVaultMontangeTotalTime;//[Offset: 0x414, Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x418, Size: 16]
	float FpsVaultMontageTopTime;//[Offset: 0x428, Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x42c, Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x430, Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x434, Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	float FpsCheatingVaule;//[Offset: 0x43c, Size: 4]
	float FpsMinHtight;//[Offset: 0x440, Size: 4]
	FpsVaultData[] FpsVaultAnimationList;//[Offset: 0x448, Size: 16]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x45c, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x460, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x464, Size: 4]
	float blockledgeZ;//[Offset: 0x468, Size: 4]
	float MoveSeconds;//[Offset: 0x46c, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x470, Size: 12]
	float StartZToBase;//[Offset: 0x47c, Size: 4]

--------------------------------
Class: BP_WindowCompBase_C.UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x840, Size: 8]
	void callvoicecheck(Vector CallFunc_K2_GetComponentLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue);// 0x3b98fe4
	void NotifyServerBroken();// 0x3b98fe4
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x3b98fe4
	void ExecuteUbergraph_BP_WindowCompBase(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, UAEHouseActor* K2Node_DynamicCast_AsUAEHouse_Actor, bool K2Node_DynamicCast_bSuccess, UAEWindowRepData CallFunc_GetRepData_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_Event_bInitial, bool K2Node_Event_bLocal, AkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue3, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_OnSameTeam_ReturnValue, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	AkAudioEvent* BrokenSound;//[Offset: 0x848, Size: 8]
	float voiceShowTime;//[Offset: 0x850, Size: 4]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x7d0, Size: 28]

--------------------------------
Class: CH_Base_AnimBP_C.STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe00, Size: 8]
	void InitAnimVarDefaultValue();// 0x3b98fe4
	void OnLoaded_07E11265406458F82393EB8FC1226A75(Object* Loaded);// 0x3b98fe4
	void OnLoaded_5940795549B02FD11AE012AECD0C8F1D(Object* Loaded);// 0x3b98fe4
	void OnLoaded_07E11265406458F82393EB8F6614FD3E(Object* Loaded);// 0x3b98fe4
	void OnLoaded_5940795549B02FD11AE012AE6A3A1856(Object* Loaded);// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_F424266543();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2206D95943();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_97C9DD7042();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_32DC37424DD();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6CF6435B47C();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_ABEDB0A44F8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_437BD5D743();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_53B0BE0449();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1A0C29A443();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_837F227A49();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B21C791E4F6();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_221FDF904E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B4BEF55F4CD();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_294C9DA24DC8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A36E11F8481();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_685FBAA748B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E984013F46EB();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E70758DA4530();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_4FC4303F434A();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_BDDF4979418();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E2AD35CF44C3();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_6D4489FE4834();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A6095F204D7();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_206FE734463();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_B2AE2791460F();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A7C68107474();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FE75F6FF482D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByInt_0EE19D1F4FA5();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6FF139464B0();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9C71DC8F4C33B19();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B809929A4E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_78C7AFFE461E9736();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6AE6DAEC4BF();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3C1C448E4BF();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_8CB4644A4B0();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_92AE7AD9406();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E44874194BB();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4CCED32C412();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_6D0039F746();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_C9E5C2DD4EE03();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA0526D343();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_43D12E0C4B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_99A0D43B46();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_3BF44D68441();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_308955ED4D3EEBF();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_152281A847();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_9AA3C81A4813();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B59343664AC();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_FFBFF4D34DF();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B682FC3D408();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_072677AC41();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_71504472478();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_6E46129C4B61CAA4();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F645305E417();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EBA89DFF4E8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_0923836A4A1();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_9E98E94647();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F7();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5BC93D324FE();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_CB4E3CD2403();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_618C7B784C8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_F034CE2B40();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_7FF39F494AA();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0A3738E649();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_AF7A57D443();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_DAC68D834D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA5DE6F9455();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_59FA3FD140F();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E5D2926F471();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D9EA1E284D0();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6904FBD042F();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C3774AAD495();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_4C();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D87B9FFF40B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_AnimDynamics_B24FC8AA42B8AD();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_94723F30492();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_48F9D2164A0();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_B7();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_839E288E459();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4DBD0FB34AC9AE0D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_CopyBone_1F1A7FFD4436DA20E2();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_CopyBone_C4BA145E4DC4ACE6C8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_7BF763274431A1A8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_44B488A74A6F8181();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5712297844B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_834824394BB861D5();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C83EC5E2446();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9691FE64441FA81C();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4D371676441();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DC60C41B4AC();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_D136BCBC4F26DC28();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3F9623C4422();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_351245E0496();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_18375F964C();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_764410DB4E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_12BAF2314F2();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DBE3C8ED47E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_8919B31E42985B72();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_DCFFAEA6498F4FAD();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_5556764F492E2C6D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6585C49F4E4();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_31DAF3FB48F3FEDE();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotateRootBone_3379463249DB();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_6BCD08EB410E0();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_C85B89004FD20DB2();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C489CE0542F6();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EC58EF22440();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C042155F4FE();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4546C2E14396773A();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_06F8D9E54D6A();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_665225D3426();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_437A1FA2477();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_5D86B57B40F();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F4();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_5DD0B0D24ED8();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_B5E3D5F54B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FFF262E84F13();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_6EC9AC294C();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DCA0AEF54F2();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA8D769941();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_506C44CC40();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4CB09782415();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5728823B46D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0D5DE5104B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_613B68EF42();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2223AA0840();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_9E88F58F4A();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F2A9F84DD();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_0E34DB824E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AFABCF7848();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6DBDD079430();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9629294C46AC6A26();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F88A7F4A4();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_201A359C4C0();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1873132544();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_51F2F2CE4F9();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA59500540C();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_326A87BA48();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1CA6B8D549();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_80DFA2864D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FE06234541();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_8E329B0A47();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_895296D24A();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4B9202814E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_76B99DC840();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_73F3E7F249();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B50C1AE84D();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_61316C7E46();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_A056BFBD46();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_99288328421();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_EC7772CA47();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_8CCABF8A43();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_BB16DD9C481();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F246D3BC436();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FD44ACE04895();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_923ECC9946();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FD5B9C494E();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_EA8583CF48();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_ACDC5F0141();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1B8C2144F2();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_D3DD31C0472B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_A39C00F94B();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_693DD741490F();// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4A2747AE48();// 0x3b98fe4
	void BlueprintInitializeAnimation();// 0x3b98fe4
	void HandleMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3b98fe4
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x3b98fe4
	void AnimNotify_TakeOutPhone();// 0x3b98fe4
	void AnimNotify_DestroyPhone();// 0x3b98fe4
	void DelayLeaveCallingState();// 0x3b98fe4
	void CustomEvent(Rotator Rot);// 0x3b98fe4
	void CE(ShowOrHideCurrentWeapon)(bool Visibility);// 0x3b98fe4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_70C7519648();// 0x3b98fe4
	void AnimNotify_SpawnRFootprint();// 0x3b98fe4
	void AnimNotify_SpawnLFootprint();// 0x3b98fe4
	void AnimNotify_PlayFallSound();// 0x3b98fe4
	void AnimNotify_PlayShellDropFX();// 0x3b98fe4
	void AnimNotify_PlayMagOUTSound();// 0x3b98fe4
	void AnimNotify_PlayMagINSound();// 0x3b98fe4
	void AnimNotify_PlayBoltSound();// 0x3b98fe4
	void AnimNotify_PlayChangeMagazineSound();// 0x3b98fe4
	void AnimNotify_PlayLoadBulletSound();// 0x3b98fe4
	void AnimNotify_PlayCrawlSound();// 0x3b98fe4
	void AnimNotify_PlaySquatSound();// 0x3b98fe4
	void AnimNotify_PlayRunSound();// 0x3b98fe4
	void AnimNotify_PlayWalkSound();// 0x3b98fe4
	void AnimNotify_LandHardCameraShake();// 0x3b98fe4
	void AnimNotify_LandCameraShake();// 0x3b98fe4
	void ExecuteUbergraph_CH_Base_AnimBP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_MapRangeClamped_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue3, float CallFunc_BreakRotator_Roll5, float CallFunc_BreakRotator_Pitch5, float CallFunc_BreakRotator_Yaw5, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue5, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue5, bool CallFunc_Greater_FloatFloat_ReturnValue6, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_BreakRotator_Roll6, float CallFunc_BreakRotator_Pitch6, float CallFunc_BreakRotator_Yaw6, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue7, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, bool CallFunc_Greater_FloatFloat_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool ___bool_Variable, bool ___bool_Variable2, float CallFunc_BreakRotator_Roll7, float CallFunc_BreakRotator_Pitch7, float CallFunc_BreakRotator_Yaw7, bool ___bool_Variable3, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_EqualEqual_RotatorRotator_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate3, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate4, Object* ___object_Variable, FString CallFunc_GetDisplayName_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, Object* K2Node_CustomEvent_Loaded, float CallFunc_BreakRotator_Roll8, float CallFunc_BreakRotator_Pitch8, float CallFunc_BreakRotator_Yaw8, Rotator CallFunc_MakeRotator_ReturnValue2, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Object* ___object_Variable2, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, Object* K2Node_CustomEvent_Loaded2, bool CallFunc_BooleanAND_ReturnValue5, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, Object* ___object_Variable3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, AnimMontage* K2Node_DynamicCast_AsAnim_Montage2, bool K2Node_DynamicCast_bSuccess5, Object* K2Node_CustomEvent_Loaded3, Object* ___object_Variable4, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh2, bool K2Node_DynamicCast_bSuccess6, Object* K2Node_CustomEvent_Loaded4, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate5, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_BooleanAND_ReturnValue6, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue9, bool K2Node_Event_bBeginCalling, Actor* CallFunc_GetOwningActor_ReturnValue, SkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue3, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_RevivalPhone_C* CallFunc_FinishSpawningActor_ReturnValue, SkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue2, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate6, float CallFunc_Montage_Play_ReturnValue, bool CallFunc_IsValid_ReturnValue5, FString CallFunc_GetDisplayName_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue7, Rotator K2Node_CustomEvent_rot, bool K2Node_CustomEvent_Visibility, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue8, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess7, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess8, Pawn* CallFunc_TryGetPawnOwner_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess9, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character4, bool K2Node_DynamicCast_bSuccess10, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character5, bool K2Node_DynamicCast_bSuccess11, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character6, bool K2Node_DynamicCast_bSuccess12, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character7, bool K2Node_DynamicCast_bSuccess13, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character8, bool K2Node_DynamicCast_bSuccess14, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character9, bool K2Node_DynamicCast_bSuccess15, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character10, bool K2Node_DynamicCast_bSuccess16, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character11, bool K2Node_DynamicCast_bSuccess17, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character12, bool K2Node_DynamicCast_bSuccess18, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character13, bool K2Node_DynamicCast_bSuccess19, delegate K2Node_CreateDelegate_OutputDelegate7, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue9, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue8);// 0x3b98fe4
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_7F8BF32A483C05C104D27D84BDDB8047;//[Offset: 0xe08, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1B8C2144F2B644B0EDF5890856C8E8F;//[Offset: 0xe88, Size: 208]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6E2A7352482A91283D96DEA609E8844D;//[Offset: 0xf58, Size: 176]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_ACDC5F01413E6CDDD5E26290FB0D2A28;//[Offset: 0x1008, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_EA8583CF48558D8742D60989B755AECF;//[Offset: 0x1050, Size: 72]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_923ECC9946F87BD9304658A4C6C371E1;//[Offset: 0x1098, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_7D4B6F6A41970A5756B8039B8D969461;//[Offset: 0x11c0, Size: 80]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8CCABF8A4335407291BE5F82A4F2DF4C;//[Offset: 0x1210, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_E36EB3AF45864D643ACA079211777C8E;//[Offset: 0x1338, Size: 80]
	AnimNode_StateMachine AnimGraphNode_StateMachine_BD0EC74E47B535EF6B18C4A8DED838DD;//[Offset: 0x1388, Size: 216]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_61316C7E46619171838C3F963F405D2A;//[Offset: 0x1460, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_73F3E7F2496DAAE3A9468BA610F07723;//[Offset: 0x14a8, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_76B99DC84072BA3C0786C29E9E29BB65;//[Offset: 0x14f0, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3;//[Offset: 0x1538, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69;//[Offset: 0x1580, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2;//[Offset: 0x15c8, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1CA6B8D5497E74E6F43CAEB6DDEFBBC5;//[Offset: 0x1610, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781;//[Offset: 0x1658, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_9E88F58F4AB6EE52BA9A69BFC886550A;//[Offset: 0x16a0, Size: 72]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5728823B46DD91085913488705443014;//[Offset: 0x16e8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A7D241414814F8E5A09B52966CE404BD;//[Offset: 0x17b8, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9F72D4B94021E469192C2CBDEFA3A310;//[Offset: 0x1828, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4CB09782415875D7C20612AB985BF542;//[Offset: 0x1898, Size: 208]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E863709E496990EBB00A21AAF576AFA8;//[Offset: 0x1968, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8D7C844E4C2FC5B9D1C4E6BDF1AA520A;//[Offset: 0x1a50, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_6EE4B10C4F3719B4949ABCA78FCDF831;//[Offset: 0x1aa8, Size: 232]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_506C44CC40D48CDDB51D41AD425CF6AD;//[Offset: 0x1b90, Size: 296]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DCA0AEF54F2D744F5E49D4BD5D4E8A18;//[Offset: 0x1cb8, Size: 208]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6EC9AC294CDBB6CEEDC18296B5CAB9B0;//[Offset: 0x1d88, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_4F9BC4314BE4DA84F20AD4A27AAC395A;//[Offset: 0x1eb0, Size: 80]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696;//[Offset: 0x1f00, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_9D9D8FCC441A7F05532D81BE6C797E4A;//[Offset: 0x1f70, Size: 80]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5DD0B0D24ED85ACF9D4CB39EE7DC6F51;//[Offset: 0x1fc0, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_6E1D113D4A61E2CDD8D86989D7072B12;//[Offset: 0x2030, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_437A1FA247704E25D96300A58FFE1BEA;//[Offset: 0x2080, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3DD0E8F5448E61732836FBAFB99C3779;//[Offset: 0x2150, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_665225D34261C82C7467159E69A783C4;//[Offset: 0x21c0, Size: 208]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_908E083B49E7626C7EEE2792B56CF70A;//[Offset: 0x2290, Size: 232]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_DD3620824CBA4C8FF8D92F862EBF2307;//[Offset: 0x2378, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_06F8D9E54D6A670C97160781AAC21798;//[Offset: 0x23e8, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_A5BBC01C4E35430A5EA3F7B595589567;//[Offset: 0x2458, Size: 80]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36577154A84E9638340B19CB439624A;//[Offset: 0x24a8, Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1CF150234CC2C8D35D381F9C7E447C27;//[Offset: 0x2500, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B;//[Offset: 0x2570, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28;//[Offset: 0x2640, Size: 112]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228;//[Offset: 0x26b0, Size: 128]
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE;//[Offset: 0x2730, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_B02F45DC49034869CCF72E8A45EDDEDA;//[Offset: 0x2798, Size: 80]
	AnimNode_StateMachine AnimGraphNode_StateMachine_58F3F41C45E674D0FEBB6DAE55DA0751;//[Offset: 0x27e8, Size: 216]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA0526D343FA015B28DF25921C724329;//[Offset: 0x28c0, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_6D0039F746DBFEE3FB7C8793D9CC4D70;//[Offset: 0x2908, Size: 72]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3C1C448E4BFC14F4DF9541BD7B686D80;//[Offset: 0x2950, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_5E984FB544A69AFB45E68B8479EA9A9D;//[Offset: 0x2a20, Size: 112]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B370B18543B80658FC331D8359BDA455;//[Offset: 0x2a90, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8886315C46DC93464C7004BEE2E45D9B;//[Offset: 0x2ae8, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2F713306402D4EB35FA74BA217F872DE;//[Offset: 0x2b40, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3E7F3743411A3726D8BD919415CBB1AE;//[Offset: 0x2c28, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A7754639472ADB097643B9B30CBCBC66;//[Offset: 0x2c80, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_528D52F7443BB34F0313688FCBD2C6F0;//[Offset: 0x2cd8, Size: 232]
	AnimNode_Slot AnimGraphNode_Slot_60E3C51F409D1CB237D47FADD6617FFD;//[Offset: 0x2dc0, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_D4B28F76445E4C2A222EAD9D1E15415D;//[Offset: 0x2e30, Size: 80]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9C71DC8F4C33B198444F7C860CA9B2D8;//[Offset: 0x2e80, Size: 128]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_B05C2817432BE401F7B2AA8B35E660D7;//[Offset: 0x2f00, Size: 232]
	AnimNode_Slot AnimGraphNode_Slot_ADFECE884DDFA760BE194D95CF505B1B;//[Offset: 0x2fe8, Size: 112]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9C97AC3A4768C65F9848A6B45C8A2CE8;//[Offset: 0x3058, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F76A1B564C0AB0CDC902FDADE5EB1D8E;//[Offset: 0x30b0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_621247A0484FCFD01F297BB0395CB22C;//[Offset: 0x3108, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6FF139464B00144F23F55998D70D7E1C;//[Offset: 0x3160, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_C38330AC46F4FC63A1076BBA42F95A8F;//[Offset: 0x3230, Size: 112]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8DCD1B664029019AAAC154833EBBBF51;//[Offset: 0x32a0, Size: 88]
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt_0EE19D1F4FA55EE1D1B16C98C0B0100C;//[Offset: 0x32f8, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6EA8DDAA431D79F20387029260BDEF69;//[Offset: 0x33c8, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_523A3E6E4683C51F1E5CC4AF6807DE0F;//[Offset: 0x3420, Size: 112]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_392FC0DA47DC7390C0A0749B48807A2A;//[Offset: 0x3490, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E7271F7D49FEFD1AEED08FB827CB3FC5;//[Offset: 0x34e8, Size: 232]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B21C791E4F6507EE4B837EA53759AC45;//[Offset: 0x35d0, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_35D89A8B46E713CE1BA82A841A699365;//[Offset: 0x36a0, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_3CF398DD455CB914F5F554A6ED9CDF19;//[Offset: 0x36f8, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_D7000B504F670B39E309E4AA59C5664A;//[Offset: 0x3768, Size: 80]
	AnimNode_StateMachine AnimGraphNode_StateMachine_49DA45D64C0BEAD52ED89AA2C5B48025;//[Offset: 0x37b8, Size: 216]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0D5DE5104BA2B987043F35BB5E86F0F4;//[Offset: 0x3890, Size: 296]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F2A9F84DD9DFF0A114D6921E50F2C3;//[Offset: 0x39b8, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_174894E5463498BD5CE2C58529C87F63;//[Offset: 0x3a88, Size: 112]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_458080404F9C55B75C14EF80F4847606;//[Offset: 0x3af8, Size: 232]
	AnimNode_Slot AnimGraphNode_Slot_319716464D13C4ECDD98CB9595742352;//[Offset: 0x3be0, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA59500540C87D28E005F0BD7F172675;//[Offset: 0x3c50, Size: 208]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_43A9039E41EF41FC5803878ECCF2115F;//[Offset: 0x3d20, Size: 176]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C52841094FE8E562E2A56D8B627DB87F;//[Offset: 0x3dd0, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_E94CE6A24C14A812C27178A06F48CDC2;//[Offset: 0x3e80, Size: 112]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_669C6C0C4F1D960F8CF708B30A34DE05;//[Offset: 0x3ef0, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DE00E31C423EDB53B1E7F4A812674E66;//[Offset: 0x3fd8, Size: 88]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_80DFA2864DFC581215F60B95F7DC9380;//[Offset: 0x4030, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_8E329B0A47E416418324F99CE29A2401;//[Offset: 0x4078, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_B50C1AE84D9436FFBC33709F6F0EB106;//[Offset: 0x40c0, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FD5B9C494EBA47F8974327B3D99915E2;//[Offset: 0x4108, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_A39C00F94B8B17F3DF23A99C3DDB2E88;//[Offset: 0x4150, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_70C75196485F1D5760DEEA95ED192B22;//[Offset: 0x4198, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4A2747AE48EAD59BF53D288CCDE102BD;//[Offset: 0x41e0, Size: 72]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_693DD741490FB5D23D825FBDF1CAF303;//[Offset: 0x4228, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_04DFCD6146926108DD38F59F6296BDC1;//[Offset: 0x4298, Size: 80]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D3DD31C0472B6C0F4726D7BCD13BE4FD;//[Offset: 0x42e8, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_32A4049D45BACC2F0CF64A83AC96F015;//[Offset: 0x4358, Size: 80]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FD44ACE0489529B1B1E3468593ABF6EC;//[Offset: 0x43a8, Size: 112]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_3C4F258E4B055030C88841AC216C055E;//[Offset: 0x4418, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F246D3BC43638C1E4A0CD7A4093ECFE3;//[Offset: 0x4498, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_61E0CF97485E1F3792FC1AA15BF9199A;//[Offset: 0x4568, Size: 112]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_6D8F6D4B44582CFC42357EA838EF8EBA;//[Offset: 0x45d8, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_41FE3C53498375A67AA95F8E978689DD;//[Offset: 0x4628, Size: 192]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6F58BAA54B219C34FE70588BF70586AC;//[Offset: 0x46e8, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_CED299CA481478CB316239B95C32C8B6;//[Offset: 0x4738, Size: 192]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_BB16DD9C48109CFD1788B3B60A435C67;//[Offset: 0x47f8, Size: 208]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_EC7772CA4717595422791DB0356E7446;//[Offset: 0x48c8, Size: 296]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_99288328421057D37BB1198AA773CFA8;//[Offset: 0x49f0, Size: 208]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_A056BFBD463DEDE48A2C01ADD882CC16;//[Offset: 0x4ac0, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_E61FA9B94E955F50CF334983A7D033E8;//[Offset: 0x4be8, Size: 80]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_326A87BA48D64DA8E0BC20B8D64A8B2D;//[Offset: 0x4c38, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_3DD95A6A4389DA801A52ADA435C84617;//[Offset: 0x4d60, Size: 80]
	AnimNode_StateMachine AnimGraphNode_StateMachine_D405617F41B462783757E3BD69CB5422;//[Offset: 0x4db0, Size: 216]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_51F2F2CE4F9082CAD0AD7189F7934CB0;//[Offset: 0x4e88, Size: 232]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4B788175470581A209B76B973D807262;//[Offset: 0x4f70, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_FF22DAD4497C34327A559AA3DCF2AE45;//[Offset: 0x4fc0, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_201A359C4C06F74821DF918ED7086E55;//[Offset: 0x5010, Size: 208]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_E1876D99465C1BE509443BAE29D33409;//[Offset: 0x50e0, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_3C5A5896446BC6123B3769AAE4322641;//[Offset: 0x5190, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F88A7F4A4C63B386ED5BBFAFF8ABCE;//[Offset: 0x5200, Size: 208]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_9629294C46AC6A26181183837695EE4C;//[Offset: 0x52d0, Size: 192]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2A1F872D45E5392E9F1F09A1B323C944;//[Offset: 0x5390, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E6B21B0C4937DF1281AB46ACB479F1A8;//[Offset: 0x53e0, Size: 80]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3CF2A8814FF520521F709DB0D580B2AA;//[Offset: 0x5430, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6DBDD07943048BB8FB1AB1872A66392C;//[Offset: 0x54e0, Size: 208]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AFABCF7848AD1903BD064AA242AF9E4F;//[Offset: 0x55b0, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_0E34DB824EFF3ABFE5A086B6B6631475;//[Offset: 0x55f8, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_2223AA0840552DE31079948F03279486;//[Offset: 0x5640, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_613B68EF425D2703703F949AFD400692;//[Offset: 0x5688, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA8D769941A6176D083567B1DEC7F88E;//[Offset: 0x56d0, Size: 72]
	AnimNode_Root AnimGraphNode_StateResult_2D0E9935487AC2B8048629B6F4680D07;//[Offset: 0x5718, Size: 80]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5591C71F4B499957FC9875869010AFBD;//[Offset: 0x5768, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_06C18A774D8A7CAF0CEA61B5AAF8FE06;//[Offset: 0x57d8, Size: 80]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_B5E3D5F54BF49B7FEA2836B43904823D;//[Offset: 0x5828, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_FD74DAEC46FC936302EAC2AA96FE5A26;//[Offset: 0x5950, Size: 80]
	AnimNode_StateMachine AnimGraphNode_StateMachine_5E1D47794DDE33EFBAA0658413060407;//[Offset: 0x59a0, Size: 216]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_334079BF4A13B2F29708F5AD7E43BC4C;//[Offset: 0x5a78, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7797FEE34831097BF63BF69B63F59DA9;//[Offset: 0x5ad0, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3719DDAD40D1FF3394A7D0B80B9261EB;//[Offset: 0x5b80, Size: 88]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F4294E2340D99B17779EAAB0ED7F1A6D;//[Offset: 0x5bd8, Size: 344]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5D86B57B40F785D5CBDD7FAFDEB10D85;//[Offset: 0x5d30, Size: 232]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_4546C2E14396773A08760F87EC7A5030;//[Offset: 0x5e18, Size: 192]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DF0B9A3F4A87F2F63283E3B7F893A693;//[Offset: 0x5ed8, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D45B3A8B440B8F75AC62669D80085DEC;//[Offset: 0x5f88, Size: 88]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_EE180C9B4A80C7B3A22DAEA399479C78;//[Offset: 0x5fe0, Size: 80]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C22296634B3329DCD18642899124C07B;//[Offset: 0x6030, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9078DB934183E6FE05BE3281437127A2;//[Offset: 0x60e0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_71F7B5004EAE8C9FAD7F5EB7EAB7B2B7;//[Offset: 0x6138, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C042155F4FEE0D669BE9538048391AEC;//[Offset: 0x6190, Size: 208]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_C85B89004FD20DB22B7620BCA4F74F9B;//[Offset: 0x6260, Size: 192]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7CF1CF344753662A1160AE885528C832;//[Offset: 0x6320, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_31DAF3FB48F3FEDEE067079557EEB502;//[Offset: 0x6370, Size: 192]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_329338674411ED2637246E918B0C8247;//[Offset: 0x6430, Size: 88]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_A208C4634FF28D66ADBE8894952EBF91;//[Offset: 0x6488, Size: 80]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6A4D4BB543581CEA78717FAE00540633;//[Offset: 0x64d8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7598CC394959662FCA78AC8C45BFA981;//[Offset: 0x6530, Size: 88]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_AB1D4C514AD9020A44FE8E99D5E88556;//[Offset: 0x6588, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4E98CC1C42BDBE0649258FB8F995D839;//[Offset: 0x65d8, Size: 80]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_622244D444EE7EE65F88C8957C185EEF;//[Offset: 0x6628, Size: 88]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8EB0E4584E691BA977D67E8623780010;//[Offset: 0x6680, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_433E01AA46322548F90AAC9A54AA867B;//[Offset: 0x6730, Size: 176]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0DEEA3AF4E997C82A08BD2BB8D58B653;//[Offset: 0x67e0, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6585C49F4E4165EE151CC2B97C7B2F66;//[Offset: 0x6830, Size: 208]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_13AC8CA44937FBA30AB9C392D3298681;//[Offset: 0x6900, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_5556764F492E2C6DA3D2878EEAC0F256;//[Offset: 0x6950, Size: 192]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_DCFFAEA6498F4FADF4518C97538818ED;//[Offset: 0x6a10, Size: 192]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_457372C34A3A70E9726335ABBA036702;//[Offset: 0x6ad0, Size: 80]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_93C780F94070F509C4F343B8D8068090;//[Offset: 0x6b20, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_8919B31E42985B72D0E33C8776686E74;//[Offset: 0x6b70, Size: 192]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1112DC0A47EE06CCC0FB99A6D56C5D7E;//[Offset: 0x6c30, Size: 80]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2E8B4E54AF4690FC6B;//[Offset: 0x6c80, Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_8E1711044635813E18A35BABACA19DF6;//[Offset: 0x6d00, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B682FC3D408904703D3DECB95804E4C6;//[Offset: 0x6d70, Size: 208]
	bool __SUBINSTANCE_IsFPPVehicleAnimInstace_B6EA793741EF081F1D4B18BE9B29A9E8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e40, Size: 1]
	AnimNode_SubInstance AnimGraphNode_SubInstance_B6EA793741EF081F1D4B18BE9B29A9E8;//[Offset: 0x6e48, Size: 208]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_16B201EE496A66D027E50CB55A8ABD62;//[Offset: 0x6f18, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F75C21C84EB4D615E9FC2F9A9D8853F5;//[Offset: 0x6fc8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9101E8B941BCBB1C76031A872C91A3FC;//[Offset: 0x7020, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_FFBFF4D34DF5B64FD6C889BE58395DC3;//[Offset: 0x7078, Size: 208]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_43D12E0C4B649EFEFCAA0AAD51F83A9F;//[Offset: 0x7148, Size: 296]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_C9E5C2DD4EE0358504AB258E8E111BFB;//[Offset: 0x7270, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6AE6DAEC4BF6E0703556299166FEC2E0;//[Offset: 0x72f0, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A143725F42DD4467D41CA0BFB906A522;//[Offset: 0x73c0, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_0712F5734AC37790D9A12F8096EE9C4E;//[Offset: 0x7418, Size: 112]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_0F051A204E1F9A9172B92E86CB305A1E;//[Offset: 0x7488, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D9BDED8D4B7DE338450804B21CB65D90;//[Offset: 0x7570, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1DB39F3145453030AB0728B31A1B2049;//[Offset: 0x75c8, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F70F6EE744718CA0AA76638976CD41C5;//[Offset: 0x7620, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A31BBF2D4CD8CE0BDF9AEB9FDDF8B096;//[Offset: 0x76d0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45E193384DE39BDB8BF5949428D8CDC4;//[Offset: 0x7728, Size: 88]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_78C7AFFE461E973613B6EB970B5A2AB8;//[Offset: 0x7780, Size: 192]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_115F73CC4F4EB99D57153CA9C0B25298;//[Offset: 0x7840, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5E08C82C430E1441B11FF599B3529D1D;//[Offset: 0x7890, Size: 80]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_B809929A4E022092F286288F5F93A314;//[Offset: 0x78e0, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_221FDF904EABAA8FD8141FA5D0EB8FB9;//[Offset: 0x7928, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_837F227A4947B468B67220AC380EAAD1;//[Offset: 0x7970, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_072677AC41CA4240D324B3930D3EA4DB;//[Offset: 0x79b8, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_F4242665439204DAB075CC98D620A811;//[Offset: 0x7a00, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_2206D959438B4BEE00C4CEAEB75AAAE1;//[Offset: 0x7a48, Size: 72]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_97C9DD70426F218F493E08BA6BD0BD12;//[Offset: 0x7a90, Size: 72]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_32DC37424DD152B3F8EF3DBEAB4EBF83;//[Offset: 0x7ad8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_29DD2E28468591C6095CD7A3AD6DAC18;//[Offset: 0x7ba8, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_120389DF411D33D4B2E752AA77D6B104;//[Offset: 0x7c18, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A3D4D5BC4BCF44C5A7625D9CDDDAA43E;//[Offset: 0x7c88, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6CF6435B47C6D6FA3E03ADA3649C655E;//[Offset: 0x7cf8, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_ABEDB0A44F8378AFF796BB96A50F800D;//[Offset: 0x7dc8, Size: 208]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_CDA7A21E4F4C6B5DBD1DED83EA2E76DF;//[Offset: 0x7e98, Size: 232]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_437BD5D7434D51A4298EF0BAD81ECCEB;//[Offset: 0x7f80, Size: 296]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_53B0BE04494EF67E8FDEB6A1DF81C855;//[Offset: 0x80a8, Size: 296]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_C82BDE6C463D87DBEED7D19513DDEC60;//[Offset: 0x81d0, Size: 232]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1A0C29A443C740127B2ED82398261E2;//[Offset: 0x82b8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_7BACE1B54980ADF59D47668BB5013453;//[Offset: 0x8388, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_EF5795A34020DD57DA2077ABB2721FF8;//[Offset: 0x83f8, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_5C6E456F49E65EDD6DCFC48A3EDC66DE;//[Offset: 0x8468, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B4BEF55F4CD7EBFFAF3567ABC6561FB6;//[Offset: 0x84b8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_294C9DA24DC88217804F21B0B768EF06;//[Offset: 0x8588, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A36E11F848104874004A0EA937685026;//[Offset: 0x85f8, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_685FBAA748B657A5F1CA91AB9A06340F;//[Offset: 0x86c8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E984013F46EBA945E02060B22F1CA22D;//[Offset: 0x8798, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E70758DA45306D77E11E48B00883A1A7;//[Offset: 0x8808, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4FC4303F434A7C649A1850B8F7105593;//[Offset: 0x8878, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_BDDF49794188B0D27505648D4FF4BDFE;//[Offset: 0x88e8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E2AD35CF44C3089D183CE08C5BE5D76E;//[Offset: 0x89b8, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6D4489FE4834A16A5FD0EA8B24C4CD81;//[Offset: 0x8a28, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A6095F204D70BB6F5571BA9939AF7E9B;//[Offset: 0x8a98, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_206FE7344638CC583269308655C407B0;//[Offset: 0x8b68, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_B2AE2791460FFB0402C9CEA62019090F;//[Offset: 0x8c38, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A7C68107474558727766BD9DB8D6D4AB;//[Offset: 0x8ca8, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FE75F6FF482D51621CACB29FCA2B53F1;//[Offset: 0x8d78, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_8761D4234454F907141A9DB6AE9ADF6E;//[Offset: 0x8de8, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8CB4644A4B07CDC406F3949F2594A013;//[Offset: 0x8e38, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_92AE7AD94067F32AC1E7AE9100083522;//[Offset: 0x8f08, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2765085C404B221C695CFC8DB0FB5A77;//[Offset: 0x8fd8, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_09660AB141D61DA80F17428B3C121C7A;//[Offset: 0x9048, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_968A01664DCDBB3075404780A3342A5F;//[Offset: 0x90b8, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_8381DEC7439769A10C5C5D923B0F25ED;//[Offset: 0x9128, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E44874194BB77928CBDB14BFDB186BC0;//[Offset: 0x9198, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4CCED32C412BFA9309CCE8A02CB8259B;//[Offset: 0x9268, Size: 208]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C35E23A14E85719855687CAD78D326FB;//[Offset: 0x9338, Size: 112]
	AnimNode_Root AnimGraphNode_StateResult_ED1DED144668BF6F586CBCA6FA9D0E02;//[Offset: 0x93a8, Size: 80]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_99A0D43B4625DB28C707B296F897BFAD;//[Offset: 0x93f8, Size: 296]
	AnimNode_Root AnimGraphNode_StateResult_A7C94BC84D1B4DE1402B89BCA46090CB;//[Offset: 0x9520, Size: 80]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_3BF44D684416DBC0C708E58C7CD4A7C2;//[Offset: 0x9570, Size: 232]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4811E10648172D98758E1381F6F55E0D;//[Offset: 0x9658, Size: 112]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_308955ED4D3EEBF6702EBDAF6A6919F3;//[Offset: 0x96c8, Size: 128]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A39D5C2A4186712ECAE4069B55FBDACC;//[Offset: 0x9748, Size: 112]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_152281A847360EF3EF568390687AFDDF;//[Offset: 0x97b8, Size: 296]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9AA3C81A481374C893DB60AC7BD47D37;//[Offset: 0x98e0, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B59343664AC4B234A509C6A416B8827B;//[Offset: 0x9950, Size: 208]
	AnimNode_Root AnimGraphNode_StateResult_5FA6ECDD4695357A89E7C290FB015914;//[Offset: 0x9a20, Size: 80]
	AnimNode_StateMachine AnimGraphNode_StateMachine_27FA876E4F2C51AB4FBB54A4314A9AF1;//[Offset: 0x9a70, Size: 216]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6B33B0BF4CFBDF576C90BD8B97298239;//[Offset: 0x9b48, Size: 176]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_220F99A04986C25E9539B2A92C64D7A8;//[Offset: 0x9bf8, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0DA5260C449DE23EFBC503A7C77F7E00;//[Offset: 0x9ca8, Size: 88]
	AnimNode_Fabrik AnimGraphNode_Fabrik_7A8F51D9413B323BAE44DE93B45D3E3F;//[Offset: 0x9d00, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_FF7C88124B1026BF8DCDC88396D68D5B;//[Offset: 0x9eb0, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_50B56FAC4284F32E25CFCEB28B6C5E3A;//[Offset: 0x9f60, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_E5E672DB4B056FA5A45612B8931A18B6;//[Offset: 0xa010, Size: 432]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8D15414541B3EB717FE0CF94A60DBD3B;//[Offset: 0xa1c0, Size: 232]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_71504472478A09FF13DFE68B69DFEF98;//[Offset: 0xa2a8, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E1808C9D43A40CE46EB8F6A534DC1ABC;//[Offset: 0xa378, Size: 88]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_6E46129C4B61CAA43CEB07ADE4C3FD59;//[Offset: 0xa3d0, Size: 192]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F95908034B8D9CFB2B155BB5933D94A9;//[Offset: 0xa490, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0AFC812147DFC014CDE3A3825EA3CBE5;//[Offset: 0xa4e0, Size: 80]
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_8CF51CA948DE444C840E599C64AC2CEE;//[Offset: 0xa530, Size: 128]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8DBC60DEB297EA85BE;//[Offset: 0xa5b0, Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_DDA68583465674C7C37912B7D4A4E50F;//[Offset: 0xa630, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F645305E41722890FC22B391480ADEBD;//[Offset: 0xa6a0, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EBA89DFF4E86CAD0DB7051A88EA338B1;//[Offset: 0xa770, Size: 208]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_0923836A4A1516BEF39634B6DCB6E5B2;//[Offset: 0xa840, Size: 208]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_66CC0D1349829696746E958E9ACAFC19;//[Offset: 0xa910, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8B02E1854C22FFA0A02A53B3DC679824;//[Offset: 0xa9c0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6BFA14514C88A4E80BBF529D327F9E58;//[Offset: 0xaa18, Size: 88]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_9E98E946479BB6F25CF86B8F6C0246AD;//[Offset: 0xaa70, Size: 296]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F73C783C46F301367C465EAFEBA8559A;//[Offset: 0xab98, Size: 344]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DCFADC264F289627ED48DF95EF386452;//[Offset: 0xacf0, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B070AF83456F0A61C74614987FAE7C80;//[Offset: 0xada0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_500C364647FAF281EAF7EEB643A787BE;//[Offset: 0xadf8, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5BC93D324FE71B76644074976E6CC454;//[Offset: 0xae50, Size: 208]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C5A628AA4F9EFD70D6EA9BBA06098B5C;//[Offset: 0xaf20, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F1AEDBA24520120F9AAA378FB7CD4DA9;//[Offset: 0xafd0, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_8BC235B84F01BD46AFCB7E8A2C2DCBF0;//[Offset: 0xb028, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_CB4E3CD2403BE017D2C5D89D248B5649;//[Offset: 0xb098, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E4815A17400837DC67A56FBF630677D7;//[Offset: 0xb168, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_94FCE2534A41922F6EE0ADA29204CE8A;//[Offset: 0xb1c0, Size: 232]
	AnimNode_Fabrik AnimGraphNode_Fabrik_7B2D93424224E2D8E11889A1FEEFC604;//[Offset: 0xb2b0, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8C883397463C220B272CCABCB5D4D97B;//[Offset: 0xb460, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_99AA80B74BFC6E1FE4D50E87F3928EE6;//[Offset: 0xb510, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_0FC7D45C43128D12BE8455A82451691C;//[Offset: 0xb6c0, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_B87ABCF942126AAD092D9CB6CD312ABE;//[Offset: 0xb770, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_F4E64E8C460933CD02F14487E409ECDE;//[Offset: 0xb7c0, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_618C7B784C8FE43D3670018E65458BAA;//[Offset: 0xb810, Size: 208]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_F034CE2B40AD3A98AA00AB94BA8C47A0;//[Offset: 0xb8e0, Size: 296]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0D4679C242F79898D029EBB785DC10B3;//[Offset: 0xba08, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C4F7B15F4B32CBCC8519998F035B4536;//[Offset: 0xba60, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F4FF06B9462B60471B5E3393887C9E40;//[Offset: 0xbab8, Size: 88]
	AnimNode_Fabrik AnimGraphNode_Fabrik_9FE09B1343F08E378CD23D91CD58C223;//[Offset: 0xbb10, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_732A767340B20CBF50397390E4CEDBA3;//[Offset: 0xbcc0, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_1671B2AE4B1E0D2F8E9B769F78DAEA52;//[Offset: 0xbd70, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4C4DC3E64381363E5EB6DC83B485A653;//[Offset: 0xbf20, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_45B840D54A0CF19F97483E8C8401F0F4;//[Offset: 0xbfd0, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D5C6F74A469FBCDA23ED1A86EF582F78;//[Offset: 0xc020, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7FF39F494AAC7A8DAF913B9B553FA09E;//[Offset: 0xc070, Size: 208]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0A3738E649065C63DAA33B871C8BF5F4;//[Offset: 0xc140, Size: 296]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F5AB53FE422F92A928203CA78734E9FD;//[Offset: 0xc268, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0F0A9BAD4E606ACC202A4DB1099E3308;//[Offset: 0xc318, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5E6F01C2463734AFD033FAA526A4C777;//[Offset: 0xc370, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_0855A2E34D22984F160B23AF245637C9;//[Offset: 0xc3c8, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_195026BB4D191A5BA75F678ED0E00504;//[Offset: 0xc478, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_860DABD84F12647CE8D454BD09849965;//[Offset: 0xc4d0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8D5A1C1D46D889D39B5C94B51A8DEDBC;//[Offset: 0xc528, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7FABE8F146269258F98D4DB2127E44F5;//[Offset: 0xc580, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_AF7A57D443A79482DEF1D6ACDD5C6523;//[Offset: 0xc5d8, Size: 232]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_ACF67F1E415D08A812090AB622DCCD30;//[Offset: 0xc6c0, Size: 232]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_48F0801842A1711B2F754F9B57EB1D49;//[Offset: 0xc7a8, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_99EE1C4C462B5FAF5497CC8797147246;//[Offset: 0xc7f8, Size: 80]
	AnimNode_CopyBone AnimGraphNode_CopyBone_66D65871430ED6892C1881A104B0E942;//[Offset: 0xc848, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E1359FE7442EFE77E9A20CA77B1E7F9C;//[Offset: 0xc8f8, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_F8FEDE8E49559DF8564C41AC8B4D4EA7;//[Offset: 0xc9a8, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_7559E28148D5A1854B4449AFE35775A4;//[Offset: 0xca58, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_31EC7AC7485DA0182DF0B6BDAA97518B;//[Offset: 0xcaa8, Size: 80]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8F1F12BC4AC3516664F4FA94842EB52B;//[Offset: 0xcaf8, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_40675A604F741DE7D23CDCB96236DFDE;//[Offset: 0xcba8, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_224B6CE84DED53427C30A5B097637DC3;//[Offset: 0xcc58, Size: 176]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_A1C2F7C94638F977D5756296C143FD33;//[Offset: 0xcd08, Size: 232]
	AnimNode_Fabrik AnimGraphNode_Fabrik_2E172EDF47AD035573128B9FD045F96D;//[Offset: 0xcdf0, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_D20A990341B6273527E362A8003BAD4B;//[Offset: 0xcfa0, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_E87DE78A49CA468213C3F39A2BC45209;//[Offset: 0xd050, Size: 80]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_DAC68D834DE4C43D88EE82BD65EE333D;//[Offset: 0xd0a0, Size: 296]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1C330930432AD1BE3D174BA53AEBB464;//[Offset: 0xd1c8, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_EAE8A28B4FAA1B286FE8D082AFE9C15D;//[Offset: 0xd218, Size: 80]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E41F37504D764B67A0181BAEA80B1467;//[Offset: 0xd268, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E6DB53504F13AB2A5A80CCBB5D8730E8;//[Offset: 0xd318, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4DD8DC06479B8335789C08914DFAD26C;//[Offset: 0xd3c8, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_87C9E41347749FE2FC4E23A0FA1BA51A;//[Offset: 0xd480, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_FB9B34734FB8B82EAE8AE3B24B7B289F;//[Offset: 0xd630, Size: 176]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_44DA701B440A2261258F17B3DE55970B;//[Offset: 0xd6e0, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA5DE6F9455753B758D53EA53E0A6DE8;//[Offset: 0xd730, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_C090D630420677578B2503A4E2194A6E;//[Offset: 0xd800, Size: 112]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12CEB9124449465AF873EC9C930C2384;//[Offset: 0xd870, Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_81B7406A4DB3C66810974698CE096CB7;//[Offset: 0xd8c8, Size: 112]
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_3BC5777744E78472F0CFDC86099EBC4A;//[Offset: 0xd938, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_69EE9A0448E1F9BF4DA327809542DE2A;//[Offset: 0xd9b8, Size: 176]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_68FDCC6744F4FA2465AC5E8899EBEB74;//[Offset: 0xda68, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_64F01EC84D64FFCA245AA69D6B25BC20;//[Offset: 0xdb18, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E5A32E2F4A834F3E591E16BAA9B687C5;//[Offset: 0xdb70, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0750FAD645DF45DCE778BD8D2FF74FCD;//[Offset: 0xdbc8, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E96936184419968456EAF08AA37E47CD;//[Offset: 0xdc20, Size: 232]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_777AB74C446D5144FF93159CB523BE1E;//[Offset: 0xdd08, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_59FA3FD140FC92E48DC88B84BC476BF9;//[Offset: 0xdd78, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C2CE9AD3498C3538A6EE53B91B22A2A2;//[Offset: 0xde48, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F32ADA954F63A00AFD64EC946F11CBDF;//[Offset: 0xdea0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E5D2926F471A9EFFAAA308A0F6E4EC6C;//[Offset: 0xdef8, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_FB6CC4D741D5FDCBC54FA2A5A47A7363;//[Offset: 0xdfc8, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D9EA1E284D09B9B6E286988290F65187;//[Offset: 0xe038, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6B3D2423482F7E30EE4DB883F5218900;//[Offset: 0xe108, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6904FBD042F55B5E17696E9EFB800E69;//[Offset: 0xe160, Size: 208]
	AnimNode_Root AnimGraphNode_Root_54C1F0ED422F557A3D58A1B8B79F8C7E;//[Offset: 0xe230, Size: 80]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C444C4FD4729985BDCCDED9E316E8717;//[Offset: 0xe280, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_62837EB942922DA14A60FB885FE8903E;//[Offset: 0xe330, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D4154717432C4F79E3AD4A9D4CB7023A;//[Offset: 0xe388, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9EE7DC224B48B5460FE2C39B9BF71043;//[Offset: 0xe438, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_94656FBC478E9C84F652EF9CF4358064;//[Offset: 0xe490, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7C8105A245E522BB023434A9626A1857;//[Offset: 0xe4e8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B811170549581ECAF70A6AB4EDF14F79;//[Offset: 0xe540, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C3774AAD49537B5E5580C8AD7B82845A;//[Offset: 0xe598, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8678E8794F2ADC6611F61EB69D756B81;//[Offset: 0xe668, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_1E2AC0854DB34634B8628FA06761103D;//[Offset: 0xe6c0, Size: 112]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_4C594B0E4880E2C129748CAC58560FFD;//[Offset: 0xe730, Size: 344]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4A1B031341D802FD273D66A0FE2D12E4;//[Offset: 0xe888, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_FA9D1FF8475F807E37176089F0E37413;//[Offset: 0xe970, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EFA5139944DB2CCA9CF74F9D66E75FBA;//[Offset: 0xe9c8, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D87B9FFF40BE0E4CA6C92F8D7E97DD44;//[Offset: 0xea20, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_A0EFD9664DD84B310B99C984DD6A4AAA;//[Offset: 0xeaf0, Size: 112]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45D324AB4849DA27CD476BB1276165C7;//[Offset: 0xeb60, Size: 88]
	AnimNode_AnimDynamics AnimGraphNode_AnimDynamics_B24FC8AA42B8ADDB9CEA3B85CCF3783A;//[Offset: 0xebb8, Size: 704]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_39BC5C5244C7C0702026B984069F9592;//[Offset: 0xee78, Size: 176]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_7517B75048FFBB6AF0EFE6BBF40B008E;//[Offset: 0xef28, Size: 232]
	AnimNode_Slot AnimGraphNode_Slot_1484B1BF4561229759BC4591C997673F;//[Offset: 0xf010, Size: 112]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_1F8EEC8D4046BCC5598106B3F45CF06D;//[Offset: 0xf080, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C6C90C5D464FD0A38F2B69A4744AE086;//[Offset: 0xf130, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A930BC944D56D9E49F368FBACB3C47CB;//[Offset: 0xf188, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2BD588374099005EAEDF26833F93BB85;//[Offset: 0xf1e0, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_858FC7BB46C4EEE973537F842BB8D43A;//[Offset: 0xf290, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_94723F3049227328EB601682845C07E6;//[Offset: 0xf2e8, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E340BD354BE2DE050CCBDD859EEDD74B;//[Offset: 0xf3b8, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_5697A2704506EC1D37930782F5E89BA1;//[Offset: 0xf410, Size: 112]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_142C4AFB42245BCB34C928AF4E1E45A9;//[Offset: 0xf480, Size: 112]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_04984E4D4F3C30CF30CAF792C054BE5B;//[Offset: 0xf4f0, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E601DF6741CF7C3CF12C739C05B0606C;//[Offset: 0xf5d8, Size: 88]
	AnimNode_Fabrik AnimGraphNode_Fabrik_F77B751A43E602B81F3D04BEFF0CE731;//[Offset: 0xf630, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E518F09D4602077F30BFE39254041671;//[Offset: 0xf7e0, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_46D5A9EA4C1CDC66134D089C80FDAFC2;//[Offset: 0xf890, Size: 432]
	AnimNode_CopyBone AnimGraphNode_CopyBone_9F139F6C4C558D3A1E6AE1A6B6463A78;//[Offset: 0xfa40, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_40D4ED794CEBF824F7E90895F02C15A3;//[Offset: 0xfaf0, Size: 80]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6677BDA045FF9B2BDFAD97B5A7020449;//[Offset: 0xfb40, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_48F9D2164A0C89EA4899B2833EC5E91C;//[Offset: 0xfbf0, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C48B4F5540F59FEA77ABCA91A94ACDB0;//[Offset: 0xfcc0, Size: 88]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_B7DCB1F545BBA03C6F70009ECBE46581;//[Offset: 0xfd18, Size: 344]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_BA6CBBAC4A94CB17AFD44CAF9033BAC2;//[Offset: 0xfe70, Size: 176]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D168967647B889BED6C4A193DBCAA5C7;//[Offset: 0xff20, Size: 80]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_366EE6DE4B8C3E772CD8A5B06B7C4016;//[Offset: 0xff70, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_839E288E459F37C0A34590A3ABC589A6;//[Offset: 0xffc8, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2C6839A2476C41A5BC7041A4922C0BE8;//[Offset: 0x10098, Size: 88]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2A8BCC054AC3D281CAA6A4BFCCAF87B7;//[Offset: 0x100f0, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_4DBD0FB34AC9AE0D9F7FCA85FC9441E4;//[Offset: 0x10140, Size: 192]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5C66128947FE3D52CD27B8A88E67845A;//[Offset: 0x10200, Size: 80]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B8DDB48247B9D99582285799A6065950;//[Offset: 0x10250, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_866C9DE74ECB92FB2890369644C0F642;//[Offset: 0x102a8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EBADCBDF4A69491C77469FB34974ADEC;//[Offset: 0x10300, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_44DFDE8D470A517B52C6B386662E0FE8;//[Offset: 0x10358, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5B41CD394E15933CC2B93E84F85859CE;//[Offset: 0x10408, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D55BADD744107EEFD6387E96310F553A;//[Offset: 0x10460, Size: 176]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_72A4A7894E234479B2E6D5A835D302F4;//[Offset: 0x10510, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_07C4529D4CA3F2473FEF8AB06DD3C672;//[Offset: 0x105c0, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F5490B6042F791766F79608C0C916C9F;//[Offset: 0x10618, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_9CEF7C4F422C35E8CBA17197CFFCE062;//[Offset: 0x10670, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_47F5E8B740E6125B1C5BB2B657D51286;//[Offset: 0x10720, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F122FFAF47B7AB324070E687EE3295EA;//[Offset: 0x10778, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_B2F5526743D81C1EA005C2B0D35B5BA3;//[Offset: 0x107d0, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DD2F1D7B4E912E680D078795D5161F4E;//[Offset: 0x10880, Size: 88]
	AnimNode_CopyBone AnimGraphNode_CopyBone_1F1A7FFD4436DA20E26672AEFD579C4A;//[Offset: 0x108d8, Size: 176]
	AnimNode_CopyBone AnimGraphNode_CopyBone_C4BA145E4DC4ACE6C892259348091355;//[Offset: 0x10988, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9C28ED25440F0CA694235F92AD6D2523;//[Offset: 0x10a38, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A0F2B2244E4EAA661F8B0CBFE29D0E82;//[Offset: 0x10a90, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_580A0C09416E430F2C16F393FA7E3591;//[Offset: 0x10ae8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C1BBBC8E4CD4089C7C0496AE32ECD5DE;//[Offset: 0x10b40, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C2ECF66D425B817D7167C4938789E2CC;//[Offset: 0x10b98, Size: 88]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2B8F937349EA6ECF964E5DAF74BEFB84;//[Offset: 0x10bf0, Size: 80]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_7BF763274431A1A8A12D8FBE09000DF7;//[Offset: 0x10c40, Size: 192]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_44B488A74A6F8181701D71BD7B808C4C;//[Offset: 0x10d00, Size: 192]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_56BEB7194549CB12B5813AA01F0AF407;//[Offset: 0x10dc0, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5712297844B4AD111AFC43BD00B534C1;//[Offset: 0x10e10, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_101514FB4670448CA055E0A7EE93E0CE;//[Offset: 0x10ee0, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_0EEB1C9F4D53FF1CC39F39914A4AC99B;//[Offset: 0x10f38, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6C44F45D4971E8198A94E9BE929900D6;//[Offset: 0x10fe8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_33DC962B431C5ADD456E7881DE870123;//[Offset: 0x11040, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_20196C9C44B0597A14C9A6BB5B8B9BF6;//[Offset: 0x11098, Size: 88]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_834824394BB861D5963F2692C8CF823C;//[Offset: 0x110f0, Size: 192]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_D57EB48D428FD4F7F348E2AB8B5AB544;//[Offset: 0x111b0, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C83EC5E2446D282877E71DB92A10B997;//[Offset: 0x11200, Size: 208]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_42303ED043F46ABF72C219A17D37F6E5;//[Offset: 0x112d0, Size: 80]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_076BA5F64300538E5CFE1FB1CB904F07;//[Offset: 0x11320, Size: 88]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_9691FE64441FA81C8F7E7EB9270605DA;//[Offset: 0x11378, Size: 192]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E742431245294D20A869D08063C84107;//[Offset: 0x11438, Size: 80]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_DD7D8AFD4EDD6AA0FB861695CF9A3B57;//[Offset: 0x11488, Size: 80]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4D3716764417292D20F5F0AE5A0DCBC0;//[Offset: 0x114d8, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_030CAE2840F90981DC4A87A7FCD7F793;//[Offset: 0x115a8, Size: 112]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D1F16F664D6EC308C0F82D8DFF839601;//[Offset: 0x11618, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DC60C41B4AC8D48B0D3D148DE1347F29;//[Offset: 0x116c8, Size: 208]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_D136BCBC4F26DC28695C49BC65316E5B;//[Offset: 0x11798, Size: 192]
	AnimNode_Slot AnimGraphNode_Slot_2B912B2843A2AC19C6B24B81629AED79;//[Offset: 0x11858, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3F9623C4422821095FBBD8B1564675C0;//[Offset: 0x118c8, Size: 208]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_27F9605F4A457C959C1206B8E5518E7D;//[Offset: 0x11998, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_BCC00FA0442E3027321663ABB638CFA5;//[Offset: 0x11a80, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_9CB5DD4A480E01C81156FF82401F76F6;//[Offset: 0x11ad8, Size: 112]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_351245E0496727C1BEDBD7883F6B168E;//[Offset: 0x11b48, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_00459A0141F9186700C690B4A57B99F0;//[Offset: 0x11c18, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_18375F964C0C7DB2B9734D8DB9465D04;//[Offset: 0x11c70, Size: 232]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_349F6B894877B31B66CB2ABB12A9BB0E;//[Offset: 0x11d58, Size: 88]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_764410DB4ED190224CDE6B9836782122;//[Offset: 0x11db0, Size: 296]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_EFCCB34248FA1B28FCB2D0B61343EABB;//[Offset: 0x11ed8, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_26D571DF49CD11A390229AB538452139;//[Offset: 0x11f88, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_BECB92E745B35326503FB38AE94CA14C;//[Offset: 0x11fe0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_12BAF2314F226FBCBCE26E928230FC34;//[Offset: 0x12038, Size: 208]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1A6FDE8D41457834579D2583193492A0;//[Offset: 0x12108, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_EEE8FB7449C423BCF447CD9007C94405;//[Offset: 0x12160, Size: 112]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_F5F055884EF50CC6A9FC4F810A8B70D6;//[Offset: 0x121d0, Size: 232]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DBE3C8ED47EF28AA01ECC187CCDD952E;//[Offset: 0x122b8, Size: 208]
	AnimNode_Slot AnimGraphNode_Slot_86D3E42E474A250DF34A9B8986E0F1DC;//[Offset: 0x12388, Size: 112]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8CE5B2584A68A7A6619A73A3D8D0E203;//[Offset: 0x123f8, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_05C3EBED44C7FA5BC74573A0B46AC77A;//[Offset: 0x124a8, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F07606C642AECA9DD806B6AE08C69770;//[Offset: 0x12500, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5D49D5704D8235EB5903B4998023720C;//[Offset: 0x12558, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_41D14A4A477961FEFE6638BFB4EA8258;//[Offset: 0x125b0, Size: 176]
	float MoveRight;//[Offset: 0x12660, Size: 4]
	float MoveForward;//[Offset: 0x12664, Size: 4]
	float AnimRate;//[Offset: 0x12668, Size: 4]
	float HandFavoring;//[Offset: 0x1266c, Size: 4]
	float HandIKWeight;//[Offset: 0x12670, Size: 4]
	float FallingVelocityZFactor;//[Offset: 0x12674, Size: 4]
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0x12678, Size: 12]
	Vector FirstAimSpine_Prone;//[Offset: 0x12684, Size: 12]
	Object* SpecialRescueMontageAsset;//[Offset: 0x12690, Size: 40]
	Object* PhoneMeshAsset;//[Offset: 0x126b8, Size: 40]
	StaticMesh* PhoneMesh;//[Offset: 0x126e0, Size: 8]
	BP_RevivalPhone_C* PhoneActor;//[Offset: 0x126e8, Size: 8]
	TimerHandle TimerHandle_DelayLeaveCallingState;//[Offset: 0x126f0, Size: 8]
	float LeaveShovel_Rate;//[Offset: 0x126f8, Size: 4]
	bool RevivalPhoneCanDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126fc, Size: 1]

--------------------------------
Class: BP_RevivalPhone_C.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* StaticMesh;//[Offset: 0x398, Size: 8]

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x38, Size: 24]
	PoseLink Additive;//[Offset: 0x50, Size: 24]
	float Alpha;//[Offset: 0x68, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x6c, Size: 8]
	int LODThreshold;//[Offset: 0x74, Size: 4]
	float ActualAlpha;//[Offset: 0x78, Size: 4]

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x38, Size: 16]
	float[] blendTime;//[Offset: 0x48, Size: 16]
	enum BlendType;//[Offset: 0x58, Size: 1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x60, Size: 8]
	BlendProfile* BlendProfile;//[Offset: 0x68, Size: 8]
	AlphaBlend[] Blends;//[Offset: 0x70, Size: 16]
	float[] BlendWeights;//[Offset: 0x80, Size: 16]
	float[] RemainingBlendTimes;//[Offset: 0x90, Size: 16]
	int LastActiveChildIndex;//[Offset: 0xa0, Size: 4]
	BlendSampleData[] PerBoneSampleData;//[Offset: 0xa8, Size: 16]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]

--------------------------------
Class: AnimNode_SaveCachedPose.AnimNode_Base
	PoseLink Pose;//[Offset: 0x38, Size: 24]
	FName CachePoseName;//[Offset: 0x50, Size: 8]
	float GlobalWeight;//[Offset: 0x58, Size: 4]

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x58, Size: 4]
	float Y;//[Offset: 0x5c, Size: 4]
	float Z;//[Offset: 0x60, Size: 4]
	float PlayRate;//[Offset: 0x64, Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	float StartPosition;//[Offset: 0x6c, Size: 4]
	BlendSpaceBase* BlendSpace;//[Offset: 0x70, Size: 8]
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	BlendFilter BlendFilter;//[Offset: 0x80, Size: 144]
	BlendSampleData[] BlendSampleDataCache;//[Offset: 0x110, Size: 16]
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0x120, Size: 8]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	int GroupIndex;//[Offset: 0x34, Size: 4]
	byte GroupRole;//[Offset: 0x38, Size: 1]
	float BlendWeight;//[Offset: 0x3c, Size: 4]
	float InternalTimeAccumulator;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x38, Size: 24]

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x34, Size: 4]
	int MaxTransitionsPerFrame;//[Offset: 0x38, Size: 4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	int CurrentState;//[Offset: 0x48, Size: 4]
	float ElapsedTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x58, Size: 8]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float PlayRate;//[Offset: 0x64, Size: 4]
	float StartPosition;//[Offset: 0x68, Size: 4]

--------------------------------
Class: AnimNode_LayeredBoneBlend.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x38, Size: 24]
	PoseLink[] BlendPoses;//[Offset: 0x50, Size: 16]
	InputBlendPose[] LayerSetup;//[Offset: 0x60, Size: 16]
	float[] BlendWeights;//[Offset: 0x70, Size: 16]
	bool bMeshSpaceRotationBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	byte CurveBlendOption;//[Offset: 0x81, Size: 1]
	bool bBlendRootMotionBasedOnRootBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	bool bHasRelevantPoses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 1]
	PerBoneBlendWeight[] PerBoneBlendWeights;//[Offset: 0x88, Size: 16]
	Guid SkeletonGuid;//[Offset: 0x98, Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: AnimNode_UseCachedPose.AnimNode_Base
	PoseLink LinkToCachingNode;//[Offset: 0x38, Size: 24]
	FName CachePoseName;//[Offset: 0x50, Size: 8]

--------------------------------
Class: AnimNode_RotateRootBone.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x38, Size: 24]
	float Pitch;//[Offset: 0x50, Size: 4]
	float Yaw;//[Offset: 0x54, Size: 4]
	Rotator MeshToComponent;//[Offset: 0x58, Size: 12]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x38, Size: 24]
	FName SlotName;//[Offset: 0x50, Size: 8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: AnimNode_TwoWayBlend.AnimNode_Base
	PoseLink A;//[Offset: 0x38, Size: 24]
	PoseLink B;//[Offset: 0x50, Size: 24]
	float Alpha;//[Offset: 0x68, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x6c, Size: 8]
	float InternalBlendAlpha;//[Offset: 0x74, Size: 4]
	bool bAIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bBIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]

--------------------------------
Class: AnimNode_BlendListByInt.AnimNode_BlendListBase.AnimNode_Base
	int ActiveChildIndex;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x38, Size: 24]

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0x78, Size: 24]
	Vector Translation;//[Offset: 0x90, Size: 12]
	Rotator Rotation;//[Offset: 0x9c, Size: 12]
	Vector Scale;//[Offset: 0xa8, Size: 12]
	byte TranslationMode;//[Offset: 0xb4, Size: 1]
	byte RotationMode;//[Offset: 0xb5, Size: 1]
	byte ScaleMode;//[Offset: 0xb6, Size: 1]
	byte TranslationSpace;//[Offset: 0xb7, Size: 1]
	byte RotationSpace;//[Offset: 0xb8, Size: 1]
	byte ScaleSpace;//[Offset: 0xb9, Size: 1]

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x38, Size: 24]
	float Alpha;//[Offset: 0x50, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x54, Size: 8]
	int LODThreshold;//[Offset: 0x5c, Size: 4]
	float ActualAlpha;//[Offset: 0x60, Size: 4]

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x38, Size: 24]

--------------------------------
Class: AnimNode_BlendListByEnum.AnimNode_BlendListBase.AnimNode_Base
	int[] EnumToPoseIndex;//[Offset: 0xd0, Size: 16]
	byte ActiveEnumValue;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: AnimNode_RotationOffsetBlendSpace.AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x128, Size: 24]
	int LODThreshold;//[Offset: 0x140, Size: 4]
	bool bIsLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	float Alpha;//[Offset: 0x148, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x14c, Size: 8]
	float ActualAlpha;//[Offset: 0x154, Size: 4]

--------------------------------
Class: AnimNode_CopyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference SourceBone;//[Offset: 0x78, Size: 24]
	BoneReference TargetBone;//[Offset: 0x90, Size: 24]
	bool bCopyTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bCopyRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	bool bCopyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 1]
	byte ControlSpace;//[Offset: 0xab, Size: 1]

--------------------------------
Class: AnimNode_SubInstance.AnimNode_Base
	PoseLink InPose;//[Offset: 0x38, Size: 24]
	class AnimInstance* InstanceClass;//[Offset: 0x50, Size: 8]
	AnimInstance* InstanceToRun;//[Offset: 0x58, Size: 8]
	Property*[] InstanceProperties;//[Offset: 0x60, Size: 16]
	Property*[] SubInstanceProperties;//[Offset: 0x70, Size: 16]
	FName[] SourcePropertyNames;//[Offset: 0x80, Size: 16]
	FName[] DestPropertyNames;//[Offset: 0x90, Size: 16]

--------------------------------
Class: AnimNode_Fabrik.AnimNode_SkeletalControlBase.AnimNode_Base
	Transform EffectorTransform;//[Offset: 0x80, Size: 48]
	byte EffectorTransformSpace;//[Offset: 0xb0, Size: 1]
	BoneReference EffectorTransformBone;//[Offset: 0xb8, Size: 24]
	bool bUseIKFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	Vector PositionFreeze;//[Offset: 0xd4, Size: 12]
	Vector RotationFreeze;//[Offset: 0xe0, Size: 12]
	Vector ScaleFeeze;//[Offset: 0xec, Size: 12]
	BoneSocketTarget EffectorTarget;//[Offset: 0x100, Size: 96]
	byte EffectorRotationSource;//[Offset: 0x160, Size: 1]
	BoneReference TipBone;//[Offset: 0x168, Size: 24]
	BoneReference RootBone;//[Offset: 0x180, Size: 24]
	float Precision;//[Offset: 0x198, Size: 4]
	int MaxIterations;//[Offset: 0x19c, Size: 4]
	bool bEnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]

--------------------------------
Class: AnimNode_ApplyMeshSpaceAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x38, Size: 24]
	PoseLink Additive;//[Offset: 0x50, Size: 24]
	float Alpha;//[Offset: 0x68, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x6c, Size: 8]
	int LODThreshold;//[Offset: 0x74, Size: 4]
	float ActualAlpha;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AnimNode_AnimDynamics.AnimNode_SkeletalControlBase.AnimNode_Base
	enum SimulationSpace;//[Offset: 0x78, Size: 1]
	BoneReference RelativeSpaceBone;//[Offset: 0x80, Size: 24]
	bool bChain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	BoneReference BoundBone;//[Offset: 0xa0, Size: 24]
	BoneReference ChainEnd;//[Offset: 0xb8, Size: 24]
	Vector BoxExtents;//[Offset: 0xd0, Size: 12]
	Vector LocalJointOffset;//[Offset: 0xdc, Size: 12]
	Vector OldLocalJointOffset;//[Offset: 0xe8, Size: 12]
	float GravityScale;//[Offset: 0xf4, Size: 4]
	bool bLinearSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bAngularSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	float LinearSpringConstant;//[Offset: 0xfc, Size: 4]
	float AngularSpringConstant;//[Offset: 0x100, Size: 4]
	bool bEnableWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bWindWasEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	float WindScale;//[Offset: 0x108, Size: 4]
	bool bOverrideLinearDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	float LinearDampingOverride;//[Offset: 0x110, Size: 4]
	bool bOverrideAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float AngularDampingOverride;//[Offset: 0x118, Size: 4]
	bool bOverrideAngularBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	float AngularBiasOverride;//[Offset: 0x120, Size: 4]
	bool bDoUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bDoEval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	int NumSolverIterationsPreUpdate;//[Offset: 0x128, Size: 4]
	int NumSolverIterationsPostUpdate;//[Offset: 0x12c, Size: 4]
	AnimPhysConstraintSetup ConstraintSetup;//[Offset: 0x130, Size: 92]
	bool bUseDynamicAngularLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	Vector Dynamic_AngularLimitsMin;//[Offset: 0x190, Size: 12]
	Vector Dynamic_AngularLimitsMax;//[Offset: 0x19c, Size: 12]
	bool bUsePlanarLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	AnimPhysPlanarLimit[] PlanarLimits;//[Offset: 0x1b0, Size: 16]
	bool bUseSphericalLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	AnimPhysSphericalLimit[] SphericalLimits;//[Offset: 0x1c8, Size: 16]
	enum CollisionType;//[Offset: 0x1d8, Size: 1]
	float SphereCollisionRadius;//[Offset: 0x1dc, Size: 4]
	int NonEvaluateFrameNum;//[Offset: 0x1e0, Size: 4]
	Vector ExternalForce;//[Offset: 0x1e8, Size: 12]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e8, Size: 8]
	void EnterWater_BluePrint();// 0x3b98fe4
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x3b98fe4
	void ExecuteUbergraph_BP_SwimController(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool ___bool_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkAudioEvent* ___object_Variable, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AkAudioEvent* ___object_Variable2, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_Event_bEnterWater, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2);// 0x3b98fe4

--------------------------------
Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn, Actor*[] ___object_Variable, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x3b98fe4
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn, Vector CallFunc_GetSocketLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Actor*[] ___object_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, STExtraVehicleWarVehicle* K2Node_DynamicCast_AsSTExtra_Vehicle_War_Vehicle, bool K2Node_DynamicCast_bSuccess, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, STExtraFloatingVehicle* K2Node_DynamicCast_AsSTExtra_Floating_Vehicle, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess4);// 0x3b98fe4
	byte DrawDebugType;//[Offset: 0x318, Size: 1]

--------------------------------
Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0x1230, Size: 4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0x1238, Size: 8]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x31b1c18
	Vector GetRotationInputDir();// 0x31b1bd8

--------------------------------
Class: STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x190, Size: 4]
	float StartAccelerationRate;//[Offset: 0x194, Size: 4]
	float StopAccelerationRate;//[Offset: 0x198, Size: 4]
	float MaxRotationYawAngle;//[Offset: 0x19c, Size: 4]
	float RotationYawRate;//[Offset: 0x1a0, Size: 4]
	float BackwardForceScale;//[Offset: 0x1a4, Size: 4]
	float Acceleration;//[Offset: 0x1a8, Size: 4]
	float RotationYawAngle;//[Offset: 0x1ac, Size: 4]
	FName ApplyForceSocketName;//[Offset: 0x1b0, Size: 8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x1b8, Size: 8]
	bool bClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	float STThrottleInput;//[Offset: 0x1cc, Size: 4]
	float STSteeringInput;//[Offset: 0x1d0, Size: 4]
	BuoyancyForceComponent* buoyancyForce;//[Offset: 0x1d8, Size: 8]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float MinTurnOverDegree;//[Offset: 0x1e8, Size: 4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x31b2040
	float GetThrottleInput();// 0x31b2024
	float GetSteeringInput();// 0x31b2008

--------------------------------
Class: CameraSettingComponent_C.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x3b98fe4
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x3b98fe4
	float Current Target Arm Length;//[Offset: 0x110, Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0x114, Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0x118, Size: 12]

--------------------------------
Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 8]
	void OnAreaOverlapEnd(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);// 0x3b98fe4
	void OnAreaOverlapBegin(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllowWater_bCanEnter, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_Contains_ReturnValue);// 0x3b98fe4
	void StartDrop(Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, WaitDropData K2Node_MakeStruct_WaitDropData, bool CallFunc_IsValid_ReturnValue, ItemDropMgrComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b98fe4
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b98fe4
	void ShowAnimationButton(BP_PlayerPawn_C* PlayerPawn, bool IsShow);// 0x3b98fe4
	void ServerDoWaterLogic(out const PlayerController* PlayerController);// 0x3b98fe4
	void OnWateringUIChanged(bool Show);// 0x3b98fe4
	void DelayResetParticleCD();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void SpawnTreeParticle();// 0x3b98fe4
	void CustomEvent();// 0x3b98fe4
	void ExecuteUbergraph_BP_WateringArea(int EntryPoint, BP_WateringArea_C* ___object_Variable, int ___int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString ___string_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_CustomEvent_PlayerPawn, bool K2Node_CustomEvent_IsShow, const PlayerController* K2Node_CustomEvent_PlayerController, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_CustomEvent_Show, FString ___string_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue4, FString K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool ___bool_Variable2, BP_WateringArea_C* K2Node_Select2_Default, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, int CallFunc_PostAkEvent_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2);// 0x3b98fe4
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x3a0, Size: 8]
	StaticMeshComponent* FormerMesh;//[Offset: 0x3a8, Size: 8]
	SceneComponent* LoopParticlePoint;//[Offset: 0x3b0, Size: 8]
	AkComponent* Ak;//[Offset: 0x3b8, Size: 8]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x3c0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3c8, Size: 8]
	SphereComponent* Sphere;//[Offset: 0x3d0, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d8, Size: 8]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x3e0, Size: 8]
	PlayerController*[] WaterDoneList;//[Offset: 0x3e8, Size: 16]
	TimerHandle TimerHandle;//[Offset: 0x3f8, Size: 8]
	int[] DropPlanIDList;//[Offset: 0x400, Size: 16]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	FString ShowButtonTextID;//[Offset: 0x418, Size: 16]
	PaperSprite* ShowButtonPic;//[Offset: 0x428, Size: 8]
	ParticleSystem* ParticleTrigger;//[Offset: 0x430, Size: 8]
	Vector ParticleTriggerPos;//[Offset: 0x438, Size: 12]
	ParticleSystem* ParticleLoop;//[Offset: 0x448, Size: 8]
	Vector ParticleLoopPos;//[Offset: 0x450, Size: 12]
	float ParticleLoopWait;//[Offset: 0x45c, Size: 4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x460, Size: 8]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x468, Size: 8]
	AkAudioEvent* AudioLoop;//[Offset: 0x470, Size: 8]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	int ActivityButtonId;//[Offset: 0x47c, Size: 4]

--------------------------------
Class: ItemDropMgrComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x168, Size: 16]
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	int GM_SpawnItemFrame;//[Offset: 0x17c, Size: 4]
	bool bEnableAIBulletDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	class PlayerTombBox* DefaultTomb;//[Offset: 0x188, Size: 8]
	class PlayerRemainTombBox* LastGameRemainTomb;//[Offset: 0x190, Size: 8]
	FString DropItemCfgTableName;//[Offset: 0x198, Size: 16]
	FString DropItemRuleTableName;//[Offset: 0x1a8, Size: 16]
	int GridStep;//[Offset: 0x1b8, Size: 4]
	WaitDropData[] WaitDropList;//[Offset: 0x1c0, Size: 16]
	int MaxRandomWeight;//[Offset: 0x1d0, Size: 4]
	float RadiusStep;//[Offset: 0x1d4, Size: 4]
	float ZBias;//[Offset: 0x1d8, Size: 4]
	float LookUpDistance;//[Offset: 0x1dc, Size: 4]
	UAEDataTable* DropRuleTable;//[Offset: 0x1e0, Size: 8]
	Property*[] DropRuleTablePropertys;//[Offset: 0x1e8, Size: 16]
	int CurSpawnItemFrame;//[Offset: 0x1f8, Size: 4]
	<int,DropIDData> DropIDMap;//[Offset: 0x200, Size: 80]
	FString RemainItemRuleTableName;//[Offset: 0x250, Size: 16]
	RemainItemRuleDataRow[] RemainItemRuleList;//[Offset: 0x260, Size: 16]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x3043350
	int PickItemByUnionRandom(float WeightCount, out RandomDropData[] WeightMap);// 0x304325c
	int PickItemByIndependentRandom(float Weight);// 0x30431d0
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x3043074
	void InitRemainItemRuleTable();// 0x3043060
	void InitDropIDMap();// 0x304304c
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x3042f98
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x3042e8c
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x3042de8
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x3042be8
	LastGameRemainItemData GetRemainItemData(out PickUpItemData[] ItemDataList, STExtraPlayerController* PC);// 0x3042a5c
	void GetMonsterBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x3042844
	FString GetDropItemCfgList(out DropItemConfig[] DropList, int DropConfigID);// 0x30426d8
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIds);// 0x3042488
	int GetCountStrNum(FString CountStr);// 0x304234c
	void GetBulletDropListByPlanIDs(Actor* Killer, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList);// 0x304215c
	PickUpItemData[] GeneratePickupListByDropID(int DropConfigID);// 0x30420a8
	DropPropData[] GenerateItemAttachments(int ItemID, int MinNum, int MaxNum);// 0x3041f38
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x3041de0
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x3041cdc
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer);// 0x3041afc
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x3041994
	void DropLastGameRemainTombBox(LastGameRemainItemData LastGameRemainItemData);// 0x3041884
	void CheckNeedDropItem();// 0x3041870
	void CheckMonsterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x3041740
	void CheckCharacterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x3041610
	bool CheckCanRemain(ItemRecordData ItemRecord);// 0x3041508
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x3041404
	void CalcDropItemListByDropCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] ItemList);// 0x30412e8
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x3040fbc
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x3040e44
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x3040d5c

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 8]
	Vector2D SourceDimension;//[Offset: 0x40, Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 16]
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 16]
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 8]
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x3e0, Size: 16]
	FString HousePathFilePath;//[Offset: 0x3f0, Size: 16]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x408, Size: 16]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x468, Size: 80]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x4b8, Size: 8]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x2ed0694
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x2ed05d4
	void BreakHouse(Vector LogicAreaLoc);// 0x2ed0558
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x2ed04dc

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x3d0, Size: 4]

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x398, Size: 4]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x3a0, Size: 16]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3b0, Size: 8]
	BillboardComponent* ShowSprite;//[Offset: 0x3b8, Size: 8]

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x2f946a0
	int GetVehicleDamagedSpeed();// 0x3b98fe4
	int GetVehicleDamagedCoefficient();// 0x3b98fe4
	<enum,float> GetTargetDamageRateMap();// 0x2f94560
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x2f943fc
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x2f94364
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x2f941d0
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x2f94124
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x2f94090
	enum[] CPP_GetDamageableGameObjectType();// 0x2f93fe4
	bool CPP_GetCanBePicked();// 0x2f93fa4
	FName CPP_GetBulletBlockComponentTag();// 0x2f93f68
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x2f93ebc
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x2f93dec
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x2f93cfc
	void BroadcastDamageState(int DState);// 0x2f93c4c
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x3b98fe4
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x3b98fe4
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x3b98fe4
	float BP_GetMaxHP();// 0x3b98fe4
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x3b98fe4
	float BP_GetDamageRateByTarget(Actor* Target);// 0x3b98fe4
	enum[] BP_GetDamageableGameObjectType();// 0x3b98fe4
	float BP_GetCurrentHP();// 0x3b98fe4
	bool BP_GetCanBePicked();// 0x3b98fe4
	FName BP_GetBulletBlockComponentTag();// 0x3b98fe4
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x3b98fe4
	void BP_DamageStateChange(int DState);// 0x3b98fe4
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x3b98fe4
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x3b98fe4

--------------------------------
Class: Socialland_ObjectPoolMgr_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4d0, Size: 8]

--------------------------------
Class: AObjectPoolManager.Actor.Object
	PoolPreloadObjectItem[] Preloads;//[Offset: 0x398, Size: 16]
	PoolPreloadClassItem[] PreloadClasses;//[Offset: 0x3a8, Size: 16]
	PoolPreloadObjectItem[] PreloadTblRes;//[Offset: 0x3b8, Size: 16]
	PoolPreloadTableConfigItem[] PreLoadConfigTable;//[Offset: 0x3c8, Size: 16]
	Object*[] PreLoadQuotes;//[Offset: 0x3d8, Size: 16]
	UAEDataTable*[] LoadedTableArray;//[Offset: 0x4c0, Size: 16]
	void PreSpawnToPool(out const PoolPreloadObjectItem Item, out SoftObjectPath SoftObjectPath);// 0x2ed6cbc
	void PreLocalSpawnToPool(out const PoolPreloadClassItem Item, out SoftObjectPath SoftObjectPath);// 0x2ed6b58
	void PreLoadObjectsFinish(PoolPreloadAysncLoadParams loadParams);// 0x2ed6adc
	void PreLoadClassesFinish();// 0x2ed6ac8
	void OnOpenObjectPool();// 0x2ed6ab4

--------------------------------
Class: BP_LevelGenerator_C.DynamicSublevelGenerator.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x468, Size: 8]
	BP_LevelStreamVolumeContainer_C*[] LevelStreamVolumeContainer;//[Offset: 0x470, Size: 16]
	BP_MiniMapStandardPoint_C*[] MinimapStandportArray;//[Offset: 0x480, Size: 16]

--------------------------------
Class: DynamicSublevelGenerator.LuaActor.Actor.Object
	void OnLevelStreamStatusChanged(LevelStreaming* LevelStream);// 0x3b98fe4
	void InitializeLevelInfo();// 0x2fac270
	Vector GetOffsetLocation(int subIndex);// 0x3b98fe4
	void CreateSubLevel();// 0x3b98fe4
	LevelStreaming* CopyLevelStreamVolume(LevelStreamingVolume* OriginalStreamVolume, LevelStreamingVolume* TargetStreamVolume, FString LvPackageName, Vector Location, bool bMainVolume);// 0x2fac0bc

--------------------------------
Class: BP_LevelStreamVolumeContainer_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x458, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void ExecuteUbergraph_BP_LevelStreamVolumeContainer(int EntryPoint);// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x460, Size: 8]
	LevelStreamingVolume*[] LevelStreamVolumes;//[Offset: 0x468, Size: 16]

--------------------------------
Class: SocialIsland_Main_C.LuaLevelScriptActor.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 8]
	void ReceiveBeginPlay();// 0x3b98fe4
	void ExecuteUbergraph_SocialIsland_Main(int EntryPoint);// 0x3b98fe4

--------------------------------
Class: LuaLevelScriptActor.LevelScriptActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x3f8, Size: 16]

--------------------------------
Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	BP_WeatherConfig_C* BP_WeatherConfig;//[Offset: 0x3a8, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b0, Size: 8]

--------------------------------
Class: BP_WeatherConfig_C.WeatherConfigComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x158, Size: 8]
	void ReceiveBeginPlay();// 0x3b98fe4
	void DelaySyncWeatherLevelInfo();// 0x3b98fe4
	void OnWeatherLevelChanged();// 0x3b98fe4
	void ExecuteUbergraph_BP_WeatherConfig(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, STExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameMode* K2Node_DynamicCast_AsBattle_Royale_Game_Mode, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue3, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_HasAuthority_ReturnValue2, DirectionalLight* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, FString CallFunc_Conv_ColorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x3b98fe4

--------------------------------
Class: STExtraDelegateMgr.BlueprintFunctionLibrary.Object
	delegate OnPlayerStateNameChange;//[Offset: 0x28, Size: 16]
	delegate OnHPChange;//[Offset: 0x38, Size: 16]
	delegate OnCanRescueOtherChange;//[Offset: 0x48, Size: 16]
	delegate OnRescueingStatusChangeChange;//[Offset: 0x58, Size: 16]
	delegate OnBreathChange;//[Offset: 0x68, Size: 16]
	delegate OnKilledTips;//[Offset: 0x78, Size: 16]
	delegate OnVehicleHPChange;//[Offset: 0x88, Size: 16]
	delegate OnCharacterStateChangeDelegate;//[Offset: 0x98, Size: 16]
	delegate OnEnterBornIsland;//[Offset: 0xa8, Size: 16]
	delegate OnCorpsOutGame;//[Offset: 0xb8, Size: 16]
	delegate OnCorpsJoinGame;//[Offset: 0xc8, Size: 16]
	static STExtraDelegateMgr* STExtraDelegateMgrInstance();// 0x31ae5a8

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1e50, Size: 16]
	delegate OnGameModeExitFlying;//[Offset: 0x1e60, Size: 16]
	FString LogicAreaDataPath;//[Offset: 0x1e70, Size: 16]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8c, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea0, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea1, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea2, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x1ea4, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea8, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x1eac, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x1eb0, Size: 8]
	float DragOnGroundDownTraceDistance;//[Offset: 0x1eb8, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x1ebc, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec0, Size: 1]
	class ChallengeLevelRules* ChallengeLevelRulesClass;//[Offset: 0x1ee0, Size: 8]
	ChallengeLevelRules* ChallengeLevelRules;//[Offset: 0x1ee8, Size: 8]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x1ef0, Size: 8]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef8, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x1f00, Size: 16]
	ChallengeLevelRules* GetChallengeLevelRules();// 0x2f36b40

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120c, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120d, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120e, Size: 1]
	bool bConfigEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120f, Size: 1]
	bool bIsRevivalGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0x1218, Size: 432]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0x13c8, Size: 16]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0x13d8, Size: 80]
	enum GameModeType;//[Offset: 0x1428, Size: 1]
	enum GameModeSubType;//[Offset: 0x1429, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0x1430, Size: 8]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x1438, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x143c, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1440, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x1444, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x1448, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x144c, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1450, Size: 1]
	FString SubAISuffix;//[Offset: 0x1458, Size: 16]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x1468, Size: 8]
	class AIController* AIControllerClass;//[Offset: 0x1470, Size: 8]
	class AIController* NewAIControllerClass;//[Offset: 0x1478, Size: 8]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0x1480, Size: 8]
	UAELevelDirector* LevelDirector;//[Offset: 0x1488, Size: 8]
	byte WorldLoadedType;//[Offset: 0x1490, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0x1494, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x1498, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x149c, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a1, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x14a8, Size: 16]
	float CircleSpeedMultiplicator;//[Offset: 0x14b8, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bc, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bd, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14be, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bf, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c0, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c1, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c2, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c3, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c4, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c5, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c6, Size: 1]
	float ResetSignalHP_FatalDamage;//[Offset: 0x14c8, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x14cc, Size: 4]
	<float,float> SignalHPApplyExtraDamageConfigMap;//[Offset: 0x14d0, Size: 80]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1520, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1521, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x1528, Size: 16]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x1538, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153c, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153d, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x1540, Size: 16]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1551, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1552, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1553, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1554, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1555, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x1558, Size: 88]
	Vector BornLocation;//[Offset: 0x15b0, Size: 12]
	Vector AIBornLocation;//[Offset: 0x15bc, Size: 12]
	float BornRadius;//[Offset: 0x15c8, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x15cc, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x15cd, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x15d0, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x15d4, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x15d8, Size: 8]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e0, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1600, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x1604, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1608, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x1610, Size: 8]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1618, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1619, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x1620, Size: 8]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1628, Size: 8]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x1630, Size: 8]
	float OverrideBackpackCapacity;//[Offset: 0x1638, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163c, Size: 1]
	FString GameScriptPath;//[Offset: 0x1668, Size: 16]
	FString LuaFileEntryFile;//[Offset: 0x1678, Size: 16]
	FString PreloadLuaFile;//[Offset: 0x1688, Size: 16]
	FString LuaModPath;//[Offset: 0x1698, Size: 16]
	FString LuaSubMod;//[Offset: 0x16a8, Size: 16]
	double StepGCTimeLimit;//[Offset: 0x16b8, Size: 8]
	GameLuaEnv* LuaEnv;//[Offset: 0x16c0, Size: 8]
	FString[] CustomWidgets;//[Offset: 0x16c8, Size: 16]
	FString CustomUIName;//[Offset: 0x16d8, Size: 16]
	GameModeState* CurrentState;//[Offset: 0x16e8, Size: 8]
	GameModeState*[] AllGameModeStates;//[Offset: 0x16f0, Size: 16]
	GameModeState* GameModeStateActive;//[Offset: 0x1700, Size: 8]
	GameModeState* GameModeStateReady;//[Offset: 0x1708, Size: 8]
	GameModeState* GameModeStateFighting;//[Offset: 0x1710, Size: 8]
	GameModeState* GameModeStateFinished;//[Offset: 0x1718, Size: 8]
	FName CurGameModeState;//[Offset: 0x1720, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1738, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x1740, Size: 8]
	Actor* PlanePawn;//[Offset: 0x1748, Size: 8]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1750, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x1758, Size: 16]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x1768, Size: 8]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x1770, Size: 8]
	float OutBoundDamage;//[Offset: 0x1778, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x1818, Size: 8]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1820, Size: 8]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1828, Size: 80]
	PlaneComponent* PlaneComp;//[Offset: 0x1878, Size: 8]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x1880, Size: 8]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x1888, Size: 8]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x1890, Size: 8]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x1988, Size: 16]
	int MatchGoal;//[Offset: 0x19f4, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f8, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1a18, Size: 80]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x1a68, Size: 16]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a78, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1a80, Size: 16]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1a90, Size: 8]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1a98, Size: 8]
	FName FeatureDefaultPawnName;//[Offset: 0x1aa0, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1aa8, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1ab0, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab8, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab9, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x1abc, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac0, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac1, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac2, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac3, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac4, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac5, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1ac8, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1ad8, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x1adc, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1ae0, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae4, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1ae8, Size: 80]
	int MaxVehiclesInReady;//[Offset: 0x1b38, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x1b3c, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b40, Size: 1]
	int SuperCarNum;//[Offset: 0x1b44, Size: 4]
	int MaxGroups;//[Offset: 0x1b48, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x1b4c, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x1b50, Size: 80]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d30, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x1d38, Size: 16]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x1d48, Size: 16]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d58, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x1d60, Size: 80]
	bool IsInitGameTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db0, Size: 1]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db1, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db2, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x1db8, Size: 80]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x1e08, Size: 16]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e18, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x1e1c, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x1e20, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x1e24, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x1e28, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x1e30, Size: 16]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e40, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e41, Size: 1]
	float DistanceCullFactor;//[Offset: 0x1e44, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x1e48, Size: 4]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4c, Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x2f3915c
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x2f39018
	void UnregisterFromGroup(STExtraPlayerController* InController);// 0x2f38f94
	void StopAllFakePlayerAIBehaviorTree();// 0x2f38f80
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser);// 0x2f38e84
	void SpawnAI(int Num);// 0x2f38e08
	void SetStateLeftTime(int leftTime);// 0x2f38d84
	void SetGameEndReportData();// 0x2f38d68
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x2f38cec
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x2f38c34
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x2f38ac4
	void RestartPlayer(Controller* NewPlayer);// 0x2f38a40
	void ResetGameMode();// 0x2f38a24
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x2f38970
	bool RegisterSpawnedVehicle(int InGroupIndex);// 0x2f388d8
	int RegisterInGroupByPlayerKey(uint32 InPlayerKey);// 0x2f3884c
	int RegisterInGroup(STExtraPlayerController* InController);// 0x2f387b8
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x2f386b4
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x2f385f4
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x2f38534
	void OnReportNetworkData();// 0x2f38518
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x2f38494
	void OnGameModeStateChange();// 0x2f38478
	void OnGameEnterReady();// 0x2f3845c
	void OnGameEnterFinish();// 0x2f38440
	void OnGameEnterFight();// 0x2f38424
	void OnGameEnterActive();// 0x2f38408
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x2f38300
	bool IsVisualFieldFeatureSupported();// 0x2f382c8
	bool IsSubAIMode();// 0x2f38290
	bool IsRevivalGameMode();// 0x2f38250
	bool IsFeatureSupported(enum SubSystemType);// 0x2f381c0
	bool IsCanJump(PlayerController* PC);// 0x2f38128
	void InitlializeRespawnItemConfig();// 0x2f38114
	void InitialGameModeState();// 0x2f38100
	void HandleGameEnd();// 0x2f380e4
	void GotoReadyState();// 0x2f380d0
	void GotoFinishedState();// 0x2f380b4
	void GotoFightingState();// 0x2f38098
	void GotoActiveState();// 0x2f38084
	int GetMonsterCount();// 0x2f38050
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x2f37fc4
	byte GetDefaultAIType(uint32 PlayerKey);// 0x2f37f38
	int GetCurWeatherPhaseIndex();// 0x2f37efc
	GameModeParam GetCurPlaneRouteData();// 0x2f37e18
	FName GetCurGameModeState();// 0x2f37dfc
	AIWorldVolume* GetAIWorldVolume();// 0x2f37dc8
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x2f37d94
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x2f37cc4
	void GenerateRespawnItemsForAllPlayers();// 0x2f37cb0
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x2f37c1c
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x2f37b90
	void ExecuteCVarConfig();// 0x2f37b7c
	void CreateGameModeComponents();// 0x2f37b60
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x2f37a9c
	void ClearGroupsInReady(out const GameModeStateChangedParams InParams);// 0x2f37a10
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x2f3797c
	bool CheckNoHumanExist();// 0x2f3793c
	bool CheckMatchGoalAchieved();// 0x2f378fc
	void CheckInitGameTriggerEnv();// 0x2f378e8
	bool CheckGameEnd();// 0x2f378a8
	void ChangeStateGM(FName TargetGameModeState);// 0x2f3782c
	bool CanCharacterCircleTakePain(STExtraCharacter* Character);// 0x2f37794
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x2f376d8
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x2f3765c
	void BPSpawnAI(int Num);// 0x2f375e0

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x30, Size: 16]
	float RandomStartJumpTime;//[Offset: 0x40, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x44, Size: 4]
	float JumpRadius;//[Offset: 0x48, Size: 4]
	float JumpHeight;//[Offset: 0x4c, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x50, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x54, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x58, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x5c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x60, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x64, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x68, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x6c, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x70, Size: 4]
	float StopdeliverTime;//[Offset: 0x74, Size: 4]
	float NoCirlceRadius;//[Offset: 0x78, Size: 4]
	float TraceHeight;//[Offset: 0x7c, Size: 4]
	float RangeMin;//[Offset: 0x80, Size: 4]
	float RangeMax;//[Offset: 0x84, Size: 4]
	float OriginCheckSquare;//[Offset: 0x88, Size: 4]
	float DestCheckSquare;//[Offset: 0x8c, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x90, Size: 8]
	float FlyToCircleRadius;//[Offset: 0x98, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: ChallengeLevelRules.Object
	UAELevelDirector* LevelDirector;//[Offset: 0x28, Size: 8]
	void SpawnLevelDirector(class UAELevelDirector LevelDirectorClass);// 0x2f68d54
	void OnReceiveTriggerMsg(TriggerAction* TriggerAction, FString Msg);// 0x2f68bd0
	void InitLevel();// 0x2f68bb4

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0x110, Size: 4]
	float AvoidanceWeight;//[Offset: 0x114, Size: 4]
	float CohesionWeight;//[Offset: 0x118, Size: 4]
	float AlignmentWeight;//[Offset: 0x11c, Size: 4]
	float ArriveWeight;//[Offset: 0x120, Size: 4]
	float PushedWeight;//[Offset: 0x124, Size: 4]
	float SeparationWeight;//[Offset: 0x128, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0x130, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0x134, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0x138, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x958, Size: 80]
	void SetQueryInterfaceBlueprint(AIWorldVolume* query);// 0x2f888d8
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x2f8885c
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x2f88750
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x2f8853c

--------------------------------
Class: AIActingComponent.ActorComponent.Object
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x130, Size: 16]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x148, Size: 16]
	AIEquipSpawnItem[] SpecialAISpawnItems;//[Offset: 0x220, Size: 16]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int MaxActiveAI;//[Offset: 0x234, Size: 4]
	int ActiveAI_n;//[Offset: 0x238, Size: 4]
	int ActiveAI_m;//[Offset: 0x23c, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x240, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x244, Size: 4]
	float SelectActionPeriod;//[Offset: 0x248, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x24c, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x250, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x258, Size: 16]
	int SimulateKillMinIntervalNum;//[Offset: 0x2bc, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x2c0, Size: 16]
	float MinKilledFreqScale;//[Offset: 0x2d0, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x2d4, Size: 4]
	int FullFeedLimit;//[Offset: 0x2d8, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x2e0, Size: 16]
	float DeliveryBeginTime;//[Offset: 0x2f0, Size: 4]
	float DeliveryFreq;//[Offset: 0x2f4, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x2f8, Size: 4]
	float MinimumWarmScore;//[Offset: 0x2fc, Size: 4]
	float[] SpecialAIProp;//[Offset: 0x300, Size: 16]
	float SpecialAIHpCondition;//[Offset: 0x310, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x314, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x318, Size: 16]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x328, Size: 16]
	bool bUseSpecialAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	SpecialAINumConfig[] SpecialAINumCfg;//[Offset: 0x340, Size: 16]
	float SpecialDeliveryBeginTime;//[Offset: 0x350, Size: 4]
	float TeammateDistanceThresholdSqr;//[Offset: 0x354, Size: 4]
	float SpecialDeliveryInterval;//[Offset: 0x358, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x35c, Size: 4]
	int DeliveryTargetNumPerRoundForSpecialAI;//[Offset: 0x364, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x368, Size: 4]
	float SpecialDeliveryCoolDown;//[Offset: 0x36c, Size: 4]
	bool bForceDeliveryInWholeTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	FString HotValuePrefix;//[Offset: 0x378, Size: 16]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x388, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x394, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x3a0, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x3a4, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x3a8, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x3d8, Size: 16]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x3e8, Size: 16]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x3f8, Size: 16]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x408, Size: 16]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x418, Size: 16]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x428, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x42c, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x430, Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x438, Size: 8]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x440, Size: 8]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x51c, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x520, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x54c, Size: 4]
	bool EnableFinalCircleSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	int FinalCircleSpawnTrueAINum;//[Offset: 0x564, Size: 4]
	float FinalCircleNoMarkAIDistance;//[Offset: 0x568, Size: 4]
	float FinalCircleSpawnTrueAITime;//[Offset: 0x56c, Size: 4]
	int TurnOnFinalCircleAINumber;//[Offset: 0x570, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x580, Size: 8]
	FString AIActingBPAssitClassPath;//[Offset: 0x588, Size: 16]
	Actor*[] WaterSwimActors;//[Offset: 0x598, Size: 16]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x5e0, Size: 16]
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x2eb9cf4
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x2eb9c50
	float GetNoWhiteCirclesRadius();// 0x2eb9c34
	void CollectAndReportAIStrategyInfo();// 0x2eb9c20
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x2eb9818
	bool AdjustAIAttackAnimalRatingDamage(AnimalAIController* AIC);// 0x2eb9788

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x3b98fe4
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x3b98fe4
	float GetRealTimeSeconds();// 0x2eb6954

--------------------------------
Class: AnimalAIController.BasicAIController.AIController.Controller.Actor.Object
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x750, Size: 8]
	float TurnVelocity;//[Offset: 0x758, Size: 4]
	float SetAirDropTargetInterval;//[Offset: 0x75c, Size: 4]
	float IgnoreMoveCollisionTimeWhenBlocked;//[Offset: 0x760, Size: 4]
	float IgnoreMoveCollisionSetInterval;//[Offset: 0x764, Size: 4]
	float DragOnGroundCheckInterval;//[Offset: 0x768, Size: 4]
	float DragOnGroundMaxOverGroundHeight;//[Offset: 0x76c, Size: 4]
	float DragOnGroundMaxRayLen;//[Offset: 0x770, Size: 4]
	float DragOnGroundMaxFloorThickness;//[Offset: 0x774, Size: 4]
	float DragOnGroundMaxSubsidenceDepth;//[Offset: 0x778, Size: 4]
	float DragOnGroundNavRandomRadius;//[Offset: 0x77c, Size: 4]
	bool EnableUpdateRotatition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	Box[] FindMovePointLimitArea;//[Offset: 0x7c8, Size: 16]
	TickControlComponent* TickControlComp;//[Offset: 0x7d8, Size: 8]
	void SetMoveTargetLoc(out const Vector TargetLoc);// 0x2ed127c
	void SetCaughtOwner(Actor* CaughtOwner);// 0x2ed11f8
	void RunBehaviorTreeWithIndex(int TreeIndex);// 0x2ed1174
	void OnAirDropLandGroup(Actor* AirDropBoxActor, bool bIsInWater);// 0x2ed10b4

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x4a0, Size: 8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x4a8, Size: 8]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x4b0, Size: 8]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x4b8, Size: 16]
	float ActorLocationTetherDistance;//[Offset: 0x4c8, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x4d0, Size: 8]
	FString AIFeatureInfoTableName;//[Offset: 0x4d8, Size: 16]
	FString AIWeaponRangeTableName;//[Offset: 0x4e8, Size: 16]
	int HitRateConfigNum;//[Offset: 0x4f8, Size: 4]
	int AIFeatureID;//[Offset: 0x4fc, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0x550, Size: 160]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x5f0, Size: 56]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x678, Size: 112]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x6e9, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x6ec, Size: 4]
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x2f34e54
	void InitAIFeatureInfo(int InID);// 0x2f34dd8
	int GetCurrentOrder();// 0x2f34da4
	Pawn* GetCurEnemy();// 0x2f34d68
	BlackboardComponent* GetBlackboardComponent();// 0x2f34d4c

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x3f0, Size: 8]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x3f8, Size: 8]
	FString LuaFilePath;//[Offset: 0x400, Size: 16]
	Pawn*[] AliveBots;//[Offset: 0x410, Size: 16]
	void Stop();// 0x3128944
	Actor* SpawnUnit();// 0x3128908
	void Run();// 0x31288ec
	void RemoveAliveBot(Pawn* BotPawn);// 0x3128870
	GameLevelManagerComponent* GetGameLevelManager();// 0x312883c
	Pawn*[] GetAliveBots();// 0x3128798
	void AddAliveBot(Pawn* BotPawn);// 0x312871c

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x80, Size: 16]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	SpawnerBase* GetSpawner();// 0x32d3080
	Transform Generate();// 0x32d3024

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x80, Size: 16]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	void PostConfig(Actor* Actor);// 0x32d2ba0
	SpawnerBase* GetSpawner();// 0x32d2b6c

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0x110, Size: 16]
	delegate OnRemoveEliteGroup;//[Offset: 0x120, Size: 16]
	int EliteWarningItemIconID;//[Offset: 0x130, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0x138, Size: 80]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x188, Size: 16]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x198, Size: 16]
	int TotalAliveMonsterNum;//[Offset: 0x1a8, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x1ac, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x1b0, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x1b8, Size: 80]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x208, Size: 16]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x218, Size: 24]
	float LevelBeginTime;//[Offset: 0x230, Size: 4]
	float LevelEndTime;//[Offset: 0x234, Size: 4]
	int GM_Diffcult;//[Offset: 0x238, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	float NavTickInterval;//[Offset: 0x240, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x248, Size: 16]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x260, Size: 16]
	FString MonsterTableName;//[Offset: 0x270, Size: 16]
	FString MonsterBPTableName;//[Offset: 0x280, Size: 16]
	FString MonsterSpecialStateTableName;//[Offset: 0x290, Size: 16]
	FString DecoratorTableName;//[Offset: 0x2a0, Size: 16]
	FString MonsterDropTableName;//[Offset: 0x2b0, Size: 16]
	int RelifePosOffsetZ;//[Offset: 0x2c0, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x2ff5a38
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x2ff5884
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x2ff57c0
	void RegisterGameEvent();// 0x2ff57ac
	void OnRep_CurGameLevelChanged();// 0x2ff5798
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x2ff568c
	void OnGameStart();// 0x2ff5678
	void OnGameEnd();// 0x2ff5664
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x2ff55b0
	void OnBotBorn(Actor* Actor);// 0x2ff5534
	void OnActorUniqueIdRemove(uint32 SId);// 0x2ff54b8
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x2ff5400
	void OnActorSpawn(Actor* Actor);// 0x2ff5384
	void OnActorDespawn(Actor* Actor);// 0x2ff5308
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x2ff5234
	bool KillUnitBySelf(Actor* TActor);// 0x2ff51a4
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x2ff5094
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x2ff4fc0
	void InitUnit(Actor* TActor, byte Category);// 0x2ff4f08
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x2ff4d28
	void InitLuaLevelActors();// 0x2ff4d14
	void InitLevelAddObjs(out LevelData LevelData);// 0x2ff4c38
	void Init();// 0x2ff4c24
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x2ff4b60
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x2ff4a54
	Actor* GetUnit(byte Category, int TypeID);// 0x2ff498c
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x2ff4888
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x2ff4678
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x2ff4358
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x2ff4264
	int GetAliveMonsterNum(byte SourceType);// 0x2ff41d8
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x2ff40e4
	void EndLevelAddObjs(out LevelData LevelData);// 0x2ff4008
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x2ff3f50
	void BroadRemoveEliteGroup(int LevelId, Vector pos);// 0x2ff3e90
	void BroadAppendEliteGroup(int LevelId, Vector pos);// 0x2ff3dd0
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x2ff3c84
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x2ff3b34

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0x110, Size: 80]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x160, Size: 16]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0x110, Size: 1]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	float maxCheckDis;//[Offset: 0x318, Size: 4]
	float maxCheckDisTime;//[Offset: 0x31c, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x328, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x32c, Size: 4]
	float MaxTransferDis;//[Offset: 0x330, Size: 4]

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x30, Size: 8]
	FString TablePath;//[Offset: 0x38, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x48, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x58, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x68, Size: 16]
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x30445ec
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x3044450
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x30443ac
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x3044308

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x30, Size: 16]
	GameModeParam[] GameModeParams;//[Offset: 0x40, Size: 16]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0x110, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0x118, Size: 16]
	<int,SpawnTableData> PawnTableData;//[Offset: 0x128, Size: 80]
	void InitialItemTable();// 0x306c828

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0x110, Size: 80]
	enum[] HearSoundCharacterTypes;//[Offset: 0x160, Size: 16]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x170, Size: 8]
	void ProduceSoundInPos(enum soundType, out const Vector pos, Actor* SourceActor);// 0x2ecffa4
	void OnProjectileExplode(Actor* Projectile);// 0x2ecff28

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x30f6168

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x38, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x40, Size: 8]
	GameStateBase* OwningGameState;//[Offset: 0x48, Size: 8]
	void GotoNextState();// 0x30036d0

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0x110, Size: 16]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0x110, Size: 16]
	AIActingComponent* AIActingComp;//[Offset: 0x1c0, Size: 8]

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0x118, Size: 16]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0x128, Size: 16]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0x138, Size: 16]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0x148, Size: 16]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0x158, Size: 16]
	AIActingComponent* AIActingComp;//[Offset: 0x168, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x170, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x178, Size: 8]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x180, Size: 8]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x188, Size: 80]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x1d8, Size: 80]
	<enum,int> DeleverCountPerWave;//[Offset: 0x370, Size: 80]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x28, Size: 16]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x38, Size: 16]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x28, Size: 1]
	enum SortStrategy;//[Offset: 0x80, Size: 1]
	enum SelectStrategy;//[Offset: 0x81, Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0x110, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0x118, Size: 80]
	class Pawn* PlaneClass;//[Offset: 0x168, Size: 8]
	BehaviorTree* PlaneBT;//[Offset: 0x170, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x180, Size: 16]
	AIController*[] CachedTotalAI;//[Offset: 0x190, Size: 16]
	int FlightTimes;//[Offset: 0x1a0, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x1a4, Size: 4]
	int CustomFlightTimes;//[Offset: 0x1b0, Size: 4]
	void StartFlight(int FlightNo);// 0x30b063c
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x30b040c
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x30b0208
	void NotifyEndFlight();// 0x30b01f4
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x30b0128

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0x114, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0x118, Size: 4]
	enum RespawnPointType;//[Offset: 0x11c, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0x120, Size: 16]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0x130, Size: 16]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0x140, Size: 16]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0x150, Size: 80]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x1a0, Size: 32]
	int[] DefaultWeaponList;//[Offset: 0x1c0, Size: 16]
	float bRestoreDataDelay;//[Offset: 0x1d0, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5, Size: 1]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x2c8, Size: 8]
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x30bc798
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x30bc6cc
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x30bc614
	void ChangeWeaponSchemeIndex(int InIndex);// 0x30bc590

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: ShowVehicleComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0x110, Size: 8]
	float DropHeightOffset;//[Offset: 0x118, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x11c, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0x120, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0x128, Size: 16]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x158, Size: 80]
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x31068a4
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x3106818
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x310679c

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0x110, Size: 16]
	FString FakePlayerCampNameTableName;//[Offset: 0x120, Size: 16]
	FString FakePlayerRandomNameTableName;//[Offset: 0x130, Size: 16]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0x140, Size: 80]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x190, Size: 80]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x1e0, Size: 16]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x1f0, Size: 16]
	void InitRowDataMap();// 0x2fe5760
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x2fe5670
	FString GetControllerPath(int resID);// 0x2fe557c

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xc08, Size: 8]
	delegate OnEnterJumping;//[Offset: 0xc10, Size: 16]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xc30, Size: 8]
	int PlayerTeamId;//[Offset: 0xc38, Size: 4]
	uint32 PlayerKey;//[Offset: 0xc3c, Size: 4]
	FString PlayerName;//[Offset: 0xc40, Size: 16]
	byte AIType;//[Offset: 0xc50, Size: 1]
	int resID;//[Offset: 0xc54, Size: 4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xc60, Size: 16]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xc70, Size: 8]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc79, Size: 1]
	int GetResId();// 0x2fe5138

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	float CheckPeriod;//[Offset: 0x750, Size: 4]
	float RandomDeviation;//[Offset: 0x754, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x758, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x75c, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x760, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x764, Size: 8]
	float TurnVelocity;//[Offset: 0x76c, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x770, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x778, Size: 80]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	byte AIActionType;//[Offset: 0xb68, Size: 1]
	BackpackComponent* BackpackComponent;//[Offset: 0xb70, Size: 8]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0xb78, Size: 48]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0xba8, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0xbc0, Size: 8]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0xbc8, Size: 8]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0xbd0, Size: 8]
	float SpecialDamageScale;//[Offset: 0xbe4, Size: 4]
	FString BPClassOverrideTag;//[Offset: 0xbe8, Size: 16]
	Actor* Plane;//[Offset: 0xbf8, Size: 8]
	int FlightNo;//[Offset: 0xc00, Size: 4]
	void Respawn();// 0x2f2b77c
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x2f2b6f0
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x2f2b664
	Pawn* GetCurEnemy();// 0x2f2b628
	void ChangeAIActionType(byte InAIActionType);// 0x2f2b5a4

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0x110, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x2ebae58

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x398, Size: 16]
	Actor*[] AIPawns;//[Offset: 0x3a8, Size: 16]
	int MaxCacheNum;//[Offset: 0x3b8, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x31282c8
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x3128208
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x3128138

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0x160, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x164, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x168, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0x140, Size: 80]
	float TotalCD;//[Offset: 0x190, Size: 4]
	float SoloCD;//[Offset: 0x194, Size: 4]

--------------------------------
Class: BP_PlayerController_SI_C.BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4218, Size: 8]
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, SocialIslandPlayerState* K2Node_DynamicCast_AsSocial_Island_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasInteractiveState_ReturnValue, bool CallFunc_HasInteractiveState_ReturnValue2);// 0x3b98fe4
	void PlayerInteractExtreme(bool bEnterOrExit);// 0x3b98fe4
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnSocialIslandCanAcceptDuelChanged(bool BoolValue);// 0x3b98fe4
	void EnterFightingStateDelegate();// 0x3b98fe4
	void LuaReceiveBeginPlay();// 0x3b98fe4
	void ExecuteUbergraph_BP_PlayerController_SI(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, RankBoard_C*[] CallFunc_GetAllActorsOfClass_OutActors, RankBoard_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_CustomEvent_BoolValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, int ___int_Loop_Counter_Variable, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x3b98fe4
	void OnOpenTask__DelegateSignature();// 0x3b98fe4
	void OnPlayerInteractExtreme__DelegateSignature(bool bEnterOrExit);// 0x3b98fe4
	void OnOpenTop10RankWindow__DelegateSignature();// 0x3b98fe4
	void OnOpenRankBoard__DelegateSignature();// 0x3b98fe4
	SoundFilterComponent* SoundFilter;//[Offset: 0x4220, Size: 8]
	BP_IslandInteractEmoteCom_C* BP_IslandInteractEmoteCom;//[Offset: 0x4228, Size: 8]
	BP_TouchSelectComponent_C* BP_TouchSelectComponent;//[Offset: 0x4230, Size: 8]
	TargetTrainComponent* TargetTrain;//[Offset: 0x4238, Size: 8]
	BP_AutoNav_C* BP_AutoNav;//[Offset: 0x4240, Size: 8]
	BP_IslandInactiveClearCom_C* BP_IslandInactiveClearCom;//[Offset: 0x4248, Size: 8]
	LuaTaskComponent* LuaTask;//[Offset: 0x4250, Size: 8]
	delegate OnOpenRankBoard;//[Offset: 0x4258, Size: 16]
	bool bCanAcceptSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4268, Size: 1]
	delegate OnOpenTop10RankWindow;//[Offset: 0x4270, Size: 16]
	delegate OnPlayerInteractExtreme;//[Offset: 0x4280, Size: 16]
	bool bExtremeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4290, Size: 1]
	delegate OnOpenTask;//[Offset: 0x4298, Size: 16]
	bool bSportCarOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a8, Size: 1]

--------------------------------
Class: SocialIslandPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	delegate OnInteractiveStateChange;//[Offset: 0x1400, Size: 16]
	uint64 RoomId;//[Offset: 0x1410, Size: 8]
	int RoomMode;//[Offset: 0x1418, Size: 4]
	int LandId;//[Offset: 0x141c, Size: 4]
	uint64 FollowUID;//[Offset: 0x1420, Size: 8]
	int FollowType;//[Offset: 0x1428, Size: 4]
	int EndStateTime;//[Offset: 0x142c, Size: 4]
	bool bIsInExtreme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1430, Size: 1]
	int TeamState;//[Offset: 0x1434, Size: 4]
	Actor* Character;//[Offset: 0x1438, Size: 8]
	int EnterTime;//[Offset: 0x1440, Size: 4]
	SocialIslandGameResult GameResult;//[Offset: 0x1448, Size: 112]
	int LBSMemberID;//[Offset: 0x14b8, Size: 4]
	int InteractiveState;//[Offset: 0x14bc, Size: 4]
	int BattleID;//[Offset: 0x14c0, Size: 4]
	IslandDuelData DuelData;//[Offset: 0x14c8, Size: 16]
	IslandBattleData BattleData;//[Offset: 0x14d8, Size: 16]
	void SetRepDuelState(int iState, float EndTime);// 0x3124684
	void SetRepDuelData(int iState, float EndTime, STExtraBaseCharacter* DuelPlayer);// 0x3124590
	void SetRepBattleState(int iState, float EndTime);// 0x31244d8
	void SetRepBattleData(int iState, float EndTime, STExtraBaseCharacter* BattlePlayer);// 0x31243e4
	void ServerSetLBSMemberId(int memberID);// 0x3124334
	void OnRep_LandId();// 0x3124320
	void OnRep_InteractiveState(int OldState);// 0x31242a4
	void OnRep_FollowType();// 0x3124290
	void OnRep_DuelData(out const IslandDuelData PreDuelData);// 0x3124200
	void OnRep_BattleData(out const IslandBattleData PreBattleData);// 0x3124170
	void OnDuelDataChange(out const IslandDuelData PreDuelData);// 0x31240d8
	void OnBattleDataChange(out const IslandBattleData PreBattleData);// 0x3124040
	bool HasInteractiveState(enum StateType);// 0x3123fb0
	void HandleFollowReq();// 0x3123f9c
	enum GetRepBattleState();// 0x3123f68
	void ExitInteractiveState(enum StateType);// 0x3123eec
	bool EqualInteractiveState(int InState);// 0x3123e5c
	void EnterInteractiveState(enum StateType);// 0x3123de0
	void EnableDuelOutline(bool bEnable);// 0x3123d5c
	void ClientPreEnterInteractiveState(enum StateType, float Duration);// 0x3123ca4
	void ClearDuelData();// 0x3123c90
	void ClearBattleData();// 0x3123c7c
	bool CanPlayerStartDuel();// 0x3123c3c
	bool CanPlayerStartBattle();// 0x3123bfc
	void BP_PlayerInfoNotify(int LandId);// 0x3b98fe4
	void AddDuelDuelApplyCount(int numb);// 0x3123b80

--------------------------------
Class: RankBoard_C.ClientActivityActor.ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x658, Size: 8]
	void Create3DWidget(bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_CreateWidgetByPathName_ReturnValue);// 0x3b98fe4
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ExecuteUbergraph_RankBoard(int EntryPoint);// 0x3b98fe4
	WidgetComponent* Widget;//[Offset: 0x660, Size: 8]
	BoxComponent* Box;//[Offset: 0x668, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x670, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x678, Size: 8]
	bool bWidgetCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]

--------------------------------
Class: ClientActivityActor.ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	bool bEanbleBlueprintClickButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2f81488
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2f812a8
	bool ClientClickButton(Character* Character, out int OutReason);// 0x2f811c4
	bool BPClientClickButton(Character* Character);// 0x3b98fe4

--------------------------------
Class: SoundFilterComponent.ActorComponent.Object
	void SetFilterActor(Actor* Filter, bool bSet);// 0x3127e28

--------------------------------
Class: BP_IslandInteractEmoteCom_C.SIslandInteractEmoteComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x180, Size: 8]
	void ClearOldSelect(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void OnTargetEmoteMontageFinished(int EmoteIndex, int StopReason, bool CallFunc_Greater_IntInt_ReturnValue);// 0x3b98fe4
	void ResponseInteractEmote(STExtraBaseCharacter* OrignPlayer, SocialIslandInteractEmoteData EmoteData, bool bRespone, bool bIsDelayResponse, byte CurResponseType, int ___int_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Variable2, bool ___bool_Variable, byte ___byte_Variable, byte ___byte_Variable2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_Select_Default, byte ___byte_Variable3, int ___int_Variable3, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, int ___int_Variable4, bool CallFunc_HasState_ReturnValue, bool CallFunc_OnPlayEmote_ReturnValue, int ___int_Variable5, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, int ___int_Variable6, int K2Node_Select2_Default, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x3b98fe4
	void RotatorToInteractTarget(STExtraBaseCharacter* Target, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x3b98fe4
	void ClearInteractData(SocialIslandInteractEmoteData K2Node_MakeStruct_SocialIslandInteractEmoteData);// 0x3b98fe4
	void OnSelfEmoteStart(int EmoteIndex, BackpackEmoteHandle* Handle, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_Array_Contains_ReturnValue2);// 0x3b98fe4
	void CheckCanRequreInteract(STExtraBaseCharacter* Target, out bool res, out int TipId, float CurDistance, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_HasState_ReturnValue3, bool CallFunc_HasState_ReturnValue4, bool CallFunc_HasState_ReturnValue5, bool CallFunc_HasState_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue);// 0x3b98fe4
	void OnSelfEmoteFinished(int EmoteIndex, int StopReason, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	void TryGetOwnerPlayerAndBindDel(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void RequreInteractEmote(STExtraPlayerCharacter* TargetPlayer, int EmoteId, bool CallFunc_CheckCanRequreInteract_res, int CallFunc_CheckCanRequreInteract_TipID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasState_ReturnValue, SocialIslandInteractEmoteData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_OnPlayEmote_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnServerReqPlayInteractEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID, int EmoteId, int TargetEmoteID);// 0x3b98fe4
	void OnClientRecInteractEmoteReq(STExtraBaseCharacter* OrignTarget, out const SocialIslandInteractEmoteData EmoteDat);// 0x3b98fe4
	void OnServerResponseInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x3b98fe4
	void OnClientRecResponseInteractEmoteResponse(STExtraBaseCharacter* EmoteTarget, out const SocialIslandInteractEmoteData EmoteData, int IslandInteractEmoteResponse);// 0x3b98fe4
	void OnServerStopReqInteractEmote(int EmoteDataID);// 0x3b98fe4
	void OnClientStopReqInteractEmote(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x3b98fe4
	void ExecuteUbergraph_BP_IslandInteractEmoteCom(int EntryPoint, bool ___bool_True_if_break_was_hit_Variable, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SocialIslandInteractEmoteData[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, STExtraBaseCharacter* K2Node_Event_SelectTarget, int K2Node_Event_EmoteDataID4, int K2Node_Event_EmoteID, int K2Node_Event_TargetEmoteID, SocialIslandInteractEmoteData K2Node_MakeStruct_SocialIslandInteractEmoteData, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI, bool K2Node_DynamicCast_bSuccess, byte ___byte_Variable, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue2, STExtraBaseCharacter* K2Node_Event_OrignTarget3, SocialIslandInteractEmoteData K2Node_Event_EmoteDat, bool CallFunc_IsValid_ReturnValue3, int ___int_Variable, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, STExtraBaseCharacter* K2Node_Event_OrignTarget2, int K2Node_Event_EmoteDataID3, int K2Node_Event_IslandInteractEmoteResponse2, byte CallFunc_Conv_IntToByte_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI2, bool K2Node_DynamicCast_bSuccess2, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue3, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, int ___int_Variable2, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue4, int ___int_Variable3, STExtraBaseCharacter* K2Node_Event_EmoteTarget, SocialIslandInteractEmoteData K2Node_Event_EmoteData, int K2Node_Event_IslandInteractEmoteResponse, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, FString CallFunc_GetPlayerNameSafety_ReturnValue, int ___int_Variable4, bool CallFunc_IsValid_ReturnValue6, int ___int_Variable5, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_HasState_ReturnValue, bool CallFunc_OnPlayEmote_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_Event_EmoteDataID2, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue8, SocialIslandInteractEmoteData CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, STExtraBaseCharacter* K2Node_Event_OrignTarget, int K2Node_Event_EmoteDataID, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI4, bool K2Node_DynamicCast_bSuccess4, int ___int_Variable6, int K2Node_Select_Default);// 0x3b98fe4
	void OnRecStopInteractEmoteEvent__DelegateSignature(STExtraBaseCharacter* OrignPlayer);// 0x3b98fe4
	void OnRecInteractEmoteEvent__DelegateSignature(STExtraBaseCharacter* OrignTarget, SocialIslandInteractEmoteData LocalData);// 0x3b98fe4
	STExtraBaseCharacter* OwnerPlayerCharacter;//[Offset: 0x188, Size: 8]
	byte InteractEmoteState;//[Offset: 0x190, Size: 1]
	float MaxInteractAllowDistance;//[Offset: 0x194, Size: 4]
	float MinInteractAllowDistance;//[Offset: 0x198, Size: 4]
	SocialIslandInteractEmoteData CurEmoteDataSave;//[Offset: 0x1a0, Size: 40]
	int[] PrepareEmotes;//[Offset: 0x1c8, Size: 16]
	STExtraBaseCharacter* CurSelectTarget;//[Offset: 0x1d8, Size: 8]
	delegate OnRecInteractEmoteEvent;//[Offset: 0x1e0, Size: 16]
	delegate OnRecStopInteractEmoteEvent;//[Offset: 0x1f0, Size: 16]
	int[] ResponseEmotes;//[Offset: 0x200, Size: 16]
	STExtraBaseCharacter* IntertactOrign;//[Offset: 0x210, Size: 8]
	int ResponseEmoteID;//[Offset: 0x218, Size: 4]
	STExtraBaseCharacter* CurEmoteOrignInResponse;//[Offset: 0x220, Size: 8]
	BP_IslandInteractEmoteCom_C* SelfInteractCom;//[Offset: 0x228, Size: 8]
	BP_IslandInteractEmoteCom_C* OrignInteractCom;//[Offset: 0x230, Size: 8]
	bool bIsInteractStopAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	bool bIsAgreeAndDelayResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 1]

--------------------------------
Class: SIslandInteractEmoteComponent.ActorComponent.Object
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x110, Size: 8]
	<int,SocialIslandInteractEmoteData> SIslandInteractEmoteTableMap;//[Offset: 0x118, Size: 80]
	FString SIslandInteractEmoteTablePath;//[Offset: 0x168, Size: 16]
	float InteactViewPitch;//[Offset: 0x178, Size: 4]
	void SetInteractEmoteRotation(STExtraBaseCharacter* Target);// 0x311154c
	void ServerStopReqInteractEmote(int EmoteDataID);// 0x311149c
	void ServerResponseInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x3111374
	void ServerReqPlayInteractEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID, int EmoteId, int TargetEmoteID);// 0x311120c
	void ServerFinishEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID);// 0x311111c
	void OnServerStopReqInteractEmote(int EmoteDataID);// 0x3111098
	void OnServerResponseInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x3110fa0
	void OnServerReqPlayInteractEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID, int EmoteId, int TargetEmoteID);// 0x3110e6c
	void OnClientStopReqInteractEmote(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x3110dac
	void OnClientRecResponseInteractEmoteResponse(STExtraBaseCharacter* EmoteTarget, out const SocialIslandInteractEmoteData EmoteData, int IslandInteractEmoteResponse);// 0x3110c5c
	void OnClientRecInteractEmoteReq(STExtraBaseCharacter* OrignTarget, out const SocialIslandInteractEmoteData EmoteDat);// 0x3110b54
	bool IsPlayerCurStateCanInteractEmote(STExtraPlayerController* STPlayer);// 0x3110abc
	void InitSIslandInteractEmoteTable();// 0x3110aa8
	void ClientStopReqInteractEmote(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x31109e8
	void ClientRecResponseInteractEmoteResponse(STExtraBaseCharacter* EmoteTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x31108f0
	void ClientRecInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x3110830

--------------------------------
Class: BP_TouchSelectComponent_C.STTouchSelectComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x198, Size: 8]
	Vector2D ModifyTouchLoc(out Geometry MyGeometry, out Vector2D TouchLoc, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetWidgetsByName_ReturnValue, Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ExecuteUbergraph_BP_TouchSelectComponent(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	Vector2D ViewportLocalSize;//[Offset: 0x1a0, Size: 8]

--------------------------------
Class: STTouchSelectComponent.ActorComponent.Object
	float TouchMoveDistanceAllow;//[Offset: 0x160, Size: 4]
	float TouchEndGapAllow;//[Offset: 0x164, Size: 4]
	float TraceSelectCD;//[Offset: 0x168, Size: 4]
	float TraceRange;//[Offset: 0x16c, Size: 4]
	byte CollisionChannel;//[Offset: 0x170, Size: 1]
	class Actor* SelectTargetClass;//[Offset: 0x178, Size: 8]
	delegate OnTouchSelectActorEvent;//[Offset: 0x180, Size: 16]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x190, Size: 8]
	Actor* TraceForTarget(out const Vector2D TouchLoc);// 0x325e50c
	void OnJoystickTouchEvent(out const Geometry MyGeometry, out const Vector2D TouchLoc, int FingerIndex, bool bIsStart);// 0x325e3a4
	Vector2D ModifyTouchLoc(out const Geometry MyGeometry, out const Vector2D TouchLoc);// 0x325e2b0
	void BindTouchDelegate();// 0x325e29c

--------------------------------
Class: TargetTrainComponent.ActorComponent.Object
	TargetTrainData[] TrainDataRank;//[Offset: 0x110, Size: 16]
	TargetTrainData[] TrainDataList;//[Offset: 0x120, Size: 16]
	int InAreaID;//[Offset: 0x130, Size: 4]
	bool IsBanned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 1]
	delegate OnUpdateRankData;//[Offset: 0x138, Size: 16]
	delegate OnFullRankUpdate;//[Offset: 0x148, Size: 16]
	delegate OnTrainDataListUpdate;//[Offset: 0x158, Size: 16]
	delegate OnInAreaIDUpdate;//[Offset: 0x168, Size: 16]
	delegate OnEndPlay;//[Offset: 0x178, Size: 16]
	int CurrentCanDamagePart;//[Offset: 0x188, Size: 4]
	int ShootingAreaID;//[Offset: 0x18c, Size: 4]
	void SubmitRecentTrain();// 0x3267a2c
	void OnRep_TrainDataRank();// 0x3267a18
	void OnRep_TrainDataList();// 0x3267a04
	void OnRep_InAreaID();// 0x32679f0
	FString GetNowTimeStamp();// 0x326794c
	static DateTime GetDateTime(int TimeStamp);// 0x32678d0
	void ClientUpdateRankData(TargetTrainData NewData);// 0x326778c
	void ClientUpdateFullRank(const TargetTrainData[] Rank);// 0x3267680
	bool CheckNeedShowHitDamage(out bool OutHitHead, enum HitBodyType, const ShootingPracticeScoreTarget* HitScoreTarget);// 0x3267564
	void AddTrainData(int Score, int Duration);// 0x32674b0

--------------------------------
Class: ShootingPracticeScoreTarget.DecoratorActor.LuaActor.Actor.Object
	SceneComponent* MoveRoot;//[Offset: 0x4a8, Size: 8]
	<FString,TargetBodyData> TargetBodyDataMap;//[Offset: 0x4b0, Size: 80]
	int CurrentWave;//[Offset: 0x500, Size: 4]
	bool bIsUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool bIsRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	float UpDownChangeSpeed;//[Offset: 0x508, Size: 4]
	Rotator HorizontalMeshRelativeRot;//[Offset: 0x50c, Size: 12]
	Rotator VerticalMeshRelativeRot;//[Offset: 0x518, Size: 12]
	bool bMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool bClearBulletHole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	Vector Point1;//[Offset: 0x528, Size: 12]
	Vector Point2;//[Offset: 0x534, Size: 12]
	float centerZ;//[Offset: 0x540, Size: 4]
	int nPosX;//[Offset: 0x544, Size: 4]
	float nMoveSpeed;//[Offset: 0x548, Size: 4]
	float nRandomPosition;//[Offset: 0x54c, Size: 4]
	int nCurrentIndex;//[Offset: 0x550, Size: 4]
	bool bSetDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	void ShowUpAndPos(int PosX);// 0x3102adc
	void ShowUp(float MoveSpeed);// 0x3102a60
	void SetUpOrDown(bool bUp);// 0x31029dc
	int SetProperty(int Index, float RandomPosition, bool retRandom);// 0x31028d0
	void SetDebug();// 0x31028bc
	void RotateUp(bool IsUp);// 0x3102838
	void OnUp();// 0x3b98fe4
	int GetHitBodyType(FString HitPart);// 0x31026ec
	void ClientHitEffect(int Score);// 0x3b98fe4
	void ClearBulletHoles();// 0x31026d8
	bool CheckDebug();// 0x31026a0

--------------------------------
Class: BP_AutoNav_C.PlayerAutoNavComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1f0, Size: 8]
	bool IsSwim(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x3b98fe4
	void GetLastMinDistance(out float Distance, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x3b98fe4
	bool CheckCharacterPoseState(STExtraPlayerController* PC, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, SocialIslandPlayerState* K2Node_DynamicCast_AsSocial_Island_Player_State, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_HasInteractiveState_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x3b98fe4
	void StopPlayerAutoSprint(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ShowStopMoveResult(enum Result, FText CallFunc_Conv_ByteToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_IsAutoSpint_bAutoSprint);// 0x3b98fe4
	void ShowTips(int ID, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void CallSetPlayerAutoSprint(STExtraPlayerController* Target, STExtraBaseCharacter* Character, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x3b98fe4
	void IsAutoSpint(out bool bAutoSprint, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	Rotator GetRotatorToDesc(Vector ActorLocation, Vector CallFunc_GetDesc_Desc, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue);// 0x3b98fe4
	void ResetMinDistanceToDesc(Vector ActorLocation, float CallFunc_GetDescDistance_ReturnValue);// 0x3b98fe4
	float GetDescDistance(Vector ActorLocation, Vector CallFunc_GetDesc_Desc, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue);// 0x3b98fe4
	bool IsLastPoint(int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x3b98fe4
	void GotoNextPoint();// 0x3b98fe4
	bool IsArrivalDesc(Vector ActorLocation, float CallFunc_GetLastMinDistance_Distance, bool CallFunc_IsLastPoint_ReturnValue, Vector CallFunc_GetDesc_Desc, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x3b98fe4
	void GetDesc(out Vector Desc, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x3b98fe4
	void TickCloseToTarget(STExtraPlayerController* PC, float DeltaTime);// 0x3b98fe4
	void OnStartAutoMove(STExtraPlayerController* PC);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void CustomEvent(enum FindResult);// 0x3b98fe4
	void StopMove();// 0x3b98fe4
	void OnRepPlayerState();// 0x3b98fe4
	void ExecuteUbergraph_BP_AutoNav(int EntryPoint, bool CallFunc_IsSwim_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraPlayerController* K2Node_Event_PC2, float K2Node_Event_DeltaTime, Rotator CallFunc_GetControlRotation_ReturnValue, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsOnVehicle_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_GetRotatorToDesc_ReturnValue, float CallFunc_GetDescDistance_ReturnValue, bool CallFunc_IsArrivalDesc_ReturnValue, bool CallFunc_IsLastPoint_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, STExtraPlayerController* K2Node_Event_PC, bool CallFunc_IsValid_ReturnValue2, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsOnVehicle_ReturnValue2, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_RInterpTo_ReturnValue, bool CallFunc_IsAutoSpint_bAutoSprint, bool CallFunc_EqualEqual_RotatorRotator_ReturnValue, bool CallFunc_IsAutoSpint_bAutoSprint2, bool CallFunc_IsAutoSpint_bAutoSprint3, enum K2Node_CustomEvent_FindResult, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetMoveParam_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x3b98fe4
	float MinDistanceToDesc;//[Offset: 0x1f8, Size: 4]
	float MaxFailMoveDescTime;//[Offset: 0x1fc, Size: 4]
	float CurFailMoveDescTime;//[Offset: 0x200, Size: 4]
	float RotationSpeed;//[Offset: 0x204, Size: 4]
	<enum,int> ResultTipMap;//[Offset: 0x208, Size: 80]

--------------------------------
Class: PlayerAutoNavComponent.ActorComponent.Object
	delegate OnPlayerAutoNavStartMoveDelegate;//[Offset: 0x110, Size: 16]
	delegate OnPlayerAutoNavFindPathDelegate;//[Offset: 0x120, Size: 16]
	delegate OnPlayerAutoNavFinishDelegate;//[Offset: 0x130, Size: 16]
	Vector[] PathPoints;//[Offset: 0x140, Size: 16]
	enum CurMode;//[Offset: 0x150, Size: 1]
	PlayerAutoNavOperator NavOperator;//[Offset: 0x158, Size: 40]
	float CheckPathLastPointDistance;//[Offset: 0x180, Size: 4]
	float RandomPointInNavigableRadius;//[Offset: 0x184, Size: 4]
	float CharacterModeRefreshInterval;//[Offset: 0x188, Size: 4]
	float MinPointDistance;//[Offset: 0x1c0, Size: 4]
	float LastMinPointDistance;//[Offset: 0x1c4, Size: 4]
	float LastMinLocationPointDistance;//[Offset: 0x1c8, Size: 4]
	bool IsAutoMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x1d0, Size: 12]
	Vector[] ShootingMachineLocationList;//[Offset: 0x1e0, Size: 16]
	void TryReqMoveToLocationByParam(Vector Desc, FString Param);// 0x30b4d54
	void TryReqMoveToLocation(Vector Desc);// 0x30b4cd8
	void TryReqMoveToCharacter(FString PlayerUID);// 0x30b4c30
	void TickCloseToTarget(STExtraPlayerController* PC, float DeltaTime);// 0x30b4b70
	void StopMove();// 0x30b4b54
	void ServerCacheMoveToLocationByParam(Vector Desc, FString Param);// 0x30b4a6c
	void ServerCacheMoveToCharacter(FString PlayerUID);// 0x30b49c4
	void RspGetPath(const Vector[] RspPathPoints, enum FindResult, FString PlayerName);// 0x30b4870
	void RspGetMoveOperatorCache(PlayerAutoNavOperator Operator);// 0x30b4714
	void ReqMoveToLocation(Vector Desc);// 0x30b4660
	void ReqMoveToCharacter(FString PlayerUID);// 0x30b4584
	void ReqMoveOperatorCache();// 0x30b4524
	void OnStartAutoMove(STExtraPlayerController* PC);// 0x30b44a0
	Vector GetNearestShootingMachineLocation();// 0x30b4468
	FString GetMoveParam();// 0x30b43c4
	bool CheckCharacterPoseState(STExtraPlayerController* PC);// 0x30b432c

--------------------------------
Class: BP_IslandInactiveClearCom_C.SIslandInactiveClearComponent.ActorComponent.Object

--------------------------------
Class: LuaTaskComponent.ActorComponent.Object
	XTaskSyncData[] TaskSyncList;//[Offset: 0x110, Size: 16]
	XTaskSaveData[] TaskList;//[Offset: 0x120, Size: 16]
	DailyTaskAwardInfo[] RewardList;//[Offset: 0x130, Size: 16]
	delegate TaskSyncListRefreshDelegate;//[Offset: 0x140, Size: 16]
	delegate OnEndPlay;//[Offset: 0x150, Size: 16]
	delegate TaskAreaStateChangeDelegate;//[Offset: 0x160, Size: 16]
	XTaskExtraSyncData[] TaskExtraSyncData;//[Offset: 0x170, Size: 16]
	delegate TaskExtraSyncDataRefreshDelegate;//[Offset: 0x180, Size: 16]
	void SyncTaskList(out XTaskSaveData[] SyncList);// 0x3059fa8
	void SetTestTaskReportData();// 0x3059f94
	void RPC_Server_GetReward(int TaskID);// 0x3059ee4
	void RPC_Client_GetRewardRes(bool IsSuccess);// 0x3059e58
	void RPC_Client_ExitTaskArea(int TaskID);// 0x3059dd4
	void RPC_Client_EnterTaskArea(int TaskID, float Duration);// 0x3059d14
	void RefreshSyncTaskList();// 0x3059d00
	void RefreshPlayerDailyTaskStoreInfo();// 0x3059cec
	void RecordRewardInfo(int TaskID, TaskAwardItemInfo[] AwardList);// 0x3059b78
	void OnRep_TaskSyncList();// 0x3059b64
	void OnRep_TaskExtraSyncData();// 0x3059b50
	void ModifyTaskExtraSyncData(int TaskID, XTaskExtraSyncData SaveData);// 0x3059a64
	void ModifyTaskBySaveData(int TaskID, XTaskSaveData SaveData);// 0x3059994
	void ModifyTask(int TaskID, int Progress, int State);// 0x30598a4
	void ModifySyncTask(int TaskID);// 0x3059828
	bool IsTaskDone(int TaskID);// 0x3059798
	enum GetTaskStateByTaskId(int TaskID);// 0x305970c
	XTaskExtraSyncData GetTaskExtraDataByTaskId(int TaskID);// 0x3059670
	XTaskSyncData GetTaskDataByTaskId(int TaskID);// 0x30595d8
	DailyTaskReportInfo GetDailyTaskReportData();// 0x305944c
	void DeleteTask(int TaskID);// 0x30593d0
	void CollapseTaskInfo();// 0x30593bc
	void AddTask(int TaskID, int Aim);// 0x3059308

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	bool InVehicleFPPViewPitchLimitMinPositiveDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c54, Size: 1]
	bool InVehicleFPPViewPitchLimitMaxDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c55, Size: 1]
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x1c58, Size: 4]
	float InVehicleFPPViewPitchLimitMax;//[Offset: 0x1c5c, Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x1c60, Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x1c64, Size: 4]

--------------------------------
Class: BP_HUD_SocialIsland_C.SurviveHUD.HUD.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6c0, Size: 8]

--------------------------------
Class: BP_PlayerPawn_SI_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x36d0, Size: 8]
	bool CheckIsValidEmoteIDBP(int EmoteIndex, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnBPIsInvincibleChange();// 0x3b98fe4
	void OnIsInvincibleChange();// 0x3b98fe4
	void RefreshPetInfo();// 0x3b98fe4
	void HandleParachuteStateChanged(enum NewState);// 0x3b98fe4
	void ReceiveDestroyed();// 0x3b98fe4
	void LuaReceiveBeginPlay();// 0x3b98fe4
	void OnSelfPerspectiveChanged(bool IsFPP);// 0x3b98fe4
	void ExecuteUbergraph_BP_PlayerPawn_SI(int EntryPoint, BP_PlayerPawn_SI_C* ___object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, CharacterAvatarComponent2* CallFunc_getAvatarComponent2_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone CallFunc_OnIsInvincibleChange_self_CastInput, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, enum K2Node_Event_NewState, bool CallFunc_IsValid_ReturnValue3, BP_PlayerPawn_SI_C* ___object_Variable2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr[] K2Node_MakeArray_Array2, bool K2Node_CustomEvent_IsFPP, Actor* CallFunc_GetAttachParentActor_ReturnValue, ActivityActorBase* K2Node_DynamicCast_AsActivity_Actor_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_ClientClickCancleButton_OutReason, bool CallFunc_ClientClickCancleButton_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue);// 0x3b98fe4
	BP_PlayerWing_C* BP_PlayerWing;//[Offset: 0x36d8, Size: 8]
	BP_EmoteBubbleCom_C* BP_EmoteBubbleCom;//[Offset: 0x36e0, Size: 8]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x36e8, Size: 8]
	SkeletalMeshComponent* CurEmotePropMesh;//[Offset: 0x36f0, Size: 8]
	TimerHandle ClearPropHandle;//[Offset: 0x36f8, Size: 8]
	DJStageBaseActor* currDJStage;//[Offset: 0x3700, Size: 8]

--------------------------------
Class: BP_PlayerWing_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x110, Size: 8]
	void EnableWingAvatar(bool IsEnable, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void ResetWingUpCloud(Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void PlayLaunchMontage(Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, float CallFunc_PlayAnimMontage_ReturnValue);// 0x3b98fe4
	void OnParachuteStateChanged(enum State, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void OnParachuteLaunch();// 0x3b98fe4
	void InitParachuteComponent(CharacterParachuteComponent* ParachuteComponent, delegate K2Node_CreateDelegate_OutputDelegate);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ChangeParachuteAvatar(bool IsEnable);// 0x3b98fe4
	void OnExitParachute();// 0x3b98fe4
	void ExecuteUbergraph_BP_PlayerWing(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_CustomEvent_IsEnable, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue2, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3);// 0x3b98fe4
	CharacterParachuteComponent* CharacterParachuteComponent;//[Offset: 0x118, Size: 8]
	bool IsWingAvatarEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	int WingAvatarId;//[Offset: 0x124, Size: 4]
	int WingParticleAvatarId;//[Offset: 0x128, Size: 4]
	AnimMontage* LaunchMontage;//[Offset: 0x130, Size: 8]
	ParticleSystem* WingUpCloud;//[Offset: 0x138, Size: 8]
	float LaunchPitchInput;//[Offset: 0x140, Size: 4]
	LaunchOverrideParam ParachuteLaunchParam;//[Offset: 0x144, Size: 136]
	int ParachuteAvatarID;//[Offset: 0x1cc, Size: 4]
	bool HasBindExitParachuteDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]

--------------------------------
Class: BP_EmoteBubbleCom_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x110, Size: 8]
	void SpawnEmoteBubble(int BubbleID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_IngameBubbleCfg_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_AsyncLoadAssetInstWithCallback_ReturnValue);// 0x3b98fe4
	void OnLoadBubbleTextureCallBack(Object* Asset, int ID);// 0x3b98fe4
	void OnLoadEffect(Object* LoadedObject, FName TexParamName);// 0x3b98fe4
	void CustomEvent(Object* LoadedObject, int RequestID);// 0x3b98fe4
	void CustomEvent(Object* LoadedObject, int RequestID);// 0x3b98fe4
	void ExecuteUbergraph_BP_EmoteBubbleCom(int EntryPoint, Object* K2Node_CustomEvent_LoadedObject, int K2Node_CustomEvent_RequestID, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_AsyncLoadAssetInstWithCallback_ReturnValue, Object* K2Node_CustomEvent_Asset, int K2Node_CustomEvent_id, Actor* CallFunc_GetOwner_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Texture* K2Node_DynamicCast_AsTexture, bool K2Node_DynamicCast_bSuccess2, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate2, Object* K2Node_CustomEvent_LoadedObject3, FName K2Node_CustomEvent_TexParamName, int CallFunc_AsyncLoadAssetInstWithCallback_ReturnValue2, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess3, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool K2Node_SwitchInteger_CmpSuccess, Object* K2Node_CustomEvent_LoadedObject2, int K2Node_CustomEvent_RequestID2);// 0x3b98fe4
	ParticleSystemComponent* BubbleParticle;//[Offset: 0x118, Size: 8]
	int CurBubbleType;//[Offset: 0x120, Size: 4]
	Texture* BubbleTexture;//[Offset: 0x128, Size: 8]

--------------------------------
Class: DJStageBaseActor.STExtraHouseActor.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int DJStageID;//[Offset: 0x5a4, Size: 4]

--------------------------------
Class: STExtraHouseActor.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	Vector[] itemSpotPosList;//[Offset: 0x560, Size: 16]
	BuildingSearchPath[] searchPathList;//[Offset: 0x570, Size: 16]
	Vector[] cornerPointList;//[Offset: 0x580, Size: 16]
	Vector centerPoint;//[Offset: 0x590, Size: 12]
	bool isAddInAIList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bDebugReplicateOnEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	void SetShareBoundsEnable_New(SceneComponent* Root, bool Val);// 0x31c876c
	void SetGStreaingDistanceScale(float Scale);// 0x31c86f0

--------------------------------
Class: BP_PaintDecalDetectLine1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 8]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void StopDetecting();// 0x3b98fe4
	void StartDetecting();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ExecuteUbergraph_BP_PaintDecalDetectLine1(int EntryPoint, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x3b98fe4
	StaticMeshComponent* StaticMesh;//[Offset: 0x3a0, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a8, Size: 8]
	Vector CachePos;//[Offset: 0x3b0, Size: 12]

--------------------------------
Class: BP_PlayerState_SocialIsland_C.SocialIslandPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1538, Size: 8]
	void CheckAndSetDuelMap(IslandBattleData BattleData, float DuelMapScale, FString DuelMapTexture, float Zero, FString EmptyString, bool K2Node_SwitchEnum_CmpSuccess, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue5, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue6, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x3b98fe4
	void HandleBattleStateChange(IslandBattleData BattleData, bool CallFunc_IsValid_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, TemBPDataAddr[] K2Node_MakeArray_Array, const TemBPDataAddr[] K2Node_MakeArray_Array2, const TemBPDataAddr[] K2Node_MakeArray_Array3);// 0x3b98fe4
	void EnableInvincible(STExtraBaseCharacter* Pawn, float InvincibleTime, BP_PlayerPawn_SI_C* K2Node_DynamicCast_AsBP_Player_Pawn_SI, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x3b98fe4
	void ClearInvincible(bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void HandleDuelStateChange(IslandDuelData NewDuelData, LuaBPVar CallFunc_BoolToLVar_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool CallFunc_IsValid_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerState* CallFunc_GetPlayerStateSafety_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue3, SocialIslandPlayerState* K2Node_DynamicCast_AsSocial_Island_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool K2Node_SwitchEnum2_CmpSuccess, LuaBPVar CallFunc_BoolToLVar_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void BP_PlayerInfoNotify(int LandId);// 0x3b98fe4
	void OnDuelDataChange(out const IslandDuelData PreDuelData);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnBattleDataChange(out const IslandBattleData PreBattleData);// 0x3b98fe4
	void OnReconnectResetUIByPlayerControllerStateDelegate_Event();// 0x3b98fe4
	void ExecuteUbergraph_BP_PlayerState_SocialIsland(int EntryPoint, GameStateBase* CallFunc_GetGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_GameState_SocialIsland_C* K2Node_DynamicCast_AsBP_Game_State_Social_Island, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_LandID, GameInstance* CallFunc_GetGameInstance_ReturnValue, IslandDuelData K2Node_Event_PreDuelData, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, IslandBattleData K2Node_Event_PreBattleData, PlayerController* CallFunc_GetPlayerController_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_MakeLiteralBool_ReturnValue, bool CallFunc_MakeLiteralBool_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr[] K2Node_MakeArray_Array2, TemBPDataAddr[] K2Node_MakeArray_Array3, PlayerController* CallFunc_GetPlayerController_ReturnValue3, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3);// 0x3b98fe4
	void OnDuelStateChangedEvent__DelegateSignature(bool IsInDuel);// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1540, Size: 8]
	int iShootScoreSum;//[Offset: 0x1548, Size: 4]
	int[] iShootScoreArray;//[Offset: 0x1550, Size: 16]
	BP_PlayerPawn_SI_C* PreInvincible;//[Offset: 0x1560, Size: 8]
	TimerHandle IncincibleProtectTimer;//[Offset: 0x1568, Size: 8]
	delegate OnDuelStateChangedEvent;//[Offset: 0x1570, Size: 16]
	FString CachDuelTargetUID;//[Offset: 0x1580, Size: 16]
	float DuelInvincibleTime;//[Offset: 0x1590, Size: 4]
	float BattleInvincibleTime;//[Offset: 0x1594, Size: 4]
	bool bMapReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1598, Size: 1]

--------------------------------
Class: BP_GameState_SocialIsland_C.SocialIslandGameState.IslandGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	void NotifyUpdateExtremeRankButton(bool Show);// 0x3b98fe4
	void NotifyUpdateExtremeWeaponButton(bool Show);// 0x3b98fe4
	void NotifyUpdateExtremeButton(bool Show);// 0x3b98fe4
	void NotifyUpdateIceDrinkButton(bool bShow);// 0x3b98fe4
	void NotifyDuelEnd(FString OrignUID, FString TargetUID, int DuelType, FString WinnerUID);// 0x3b98fe4
	void NotifyPlayerGetNewAlias(FString UId, int AliasID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x3b98fe4
	void NotifyUpdateTrainButton(bool bShow, int iMachineID);// 0x3b98fe4
	void NewPlayerState(BP_PlayerState_SocialIsland_C* PlayerState);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void OnUpdateExtremeRankButton__DelegateSignature(bool Show);// 0x3b98fe4
	void OnUpdateExtremeWeaponButton__DelegateSignature(bool Show);// 0x3b98fe4
	void OnUpdateExtremeButton__DelegateSignature(bool Show);// 0x3b98fe4
	void OnUpdateIceDrinkButton__DelegateSignature(bool bShow);// 0x3b98fe4
	void NotifyDuelResult__DelegateSignature(FString OrignUID, FString TargetUID, int DuelType, FString WinnerUID);// 0x3b98fe4
	void OnPlayerGetNewAlias__DelegateSignature(FString UId, int AliasID);// 0x3b98fe4
	void OnUpdateTrainButton__DelegateSignature(bool bShow, int iMachineID);// 0x3b98fe4
	void OnNewPlayerState__DelegateSignature(BP_PlayerState_SocialIsland_C* PlayerState);// 0x3b98fe4
	GameLevelManagerComponent* GameLevelManager;//[Offset: 0x12e8, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x12f0, Size: 8]
	delegate OnNewPlayerState;//[Offset: 0x12f8, Size: 16]
	delegate OnUpdateTrainButton;//[Offset: 0x1308, Size: 16]
	delegate OnPlayerGetNewAlias;//[Offset: 0x1318, Size: 16]
	delegate NotifyDuelResult;//[Offset: 0x1328, Size: 16]
	delegate OnUpdateIceDrinkButton;//[Offset: 0x1338, Size: 16]
	delegate OnUpdateExtremeButton;//[Offset: 0x1348, Size: 16]
	delegate OnUpdateExtremeWeaponButton;//[Offset: 0x1358, Size: 16]
	delegate OnUpdateExtremeRankButton;//[Offset: 0x1368, Size: 16]

--------------------------------
Class: SocialIslandGameState.IslandGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int CheckPlayerNumTimeInter;//[Offset: 0x1244, Size: 4]
	int RankLimit;//[Offset: 0x1248, Size: 4]
	bool ShowDuelEnemyInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124c, Size: 1]
	int FirstShowEnemyTime;//[Offset: 0x1250, Size: 4]
	int EnemyShowingTimes;//[Offset: 0x1254, Size: 4]
	int EnemyShowingInterval;//[Offset: 0x1258, Size: 4]
	TargetTrainData[] Rank1;//[Offset: 0x1260, Size: 16]
	TargetTrainData[] Rank2;//[Offset: 0x1270, Size: 16]
	TargetTrainData[] Rank3;//[Offset: 0x1280, Size: 16]
	TargetTrainData[] Rank4;//[Offset: 0x1290, Size: 16]
	delegate OnBroadcastHighTargetScore;//[Offset: 0x12a0, Size: 16]
	delegate OnIslandPlayerChangeDelegate;//[Offset: 0x12b0, Size: 16]
	delegate OnIslandPlayerTeamInfoChangedDelegate;//[Offset: 0x12c0, Size: 16]
	delegate OnIslandAIMarkInfoChangedDelegate;//[Offset: 0x12d0, Size: 16]
	bool bIsSystemIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e0, Size: 1]
	bool bEnabeleNetPriorityModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e1, Size: 1]
	void TestSislandPlayerTeam(FString mate1, FString mate2, FString mate, FString mate4);// 0x3122e30
	void SyncPlayerExit(STExtraPlayerController* NewPlayer);// 0x3122db4
	void SyncNewPlayer(STExtraPlayerController* NewPlayer);// 0x3122d38
	void SubmitTrainData(TargetTrainData TrainData, TargetTrainComponent* TargetTrain);// 0x3122bc0
	void ShowAllPlayersMark(float VisDistance);// 0x3122b44
	void SetCompressEnable(bool bEnable);// 0x3122ac0
	void ResetRoomTimeInfo(out IslandRoomData RoomData, bool bPlayerNumIsEnough);// 0x31229a8
	void RefreshTeammate(out const FString[] teammates);// 0x3122894
	void OnIslandAIMarkInfoChangedDelegate__DelegateSignature(out const SIslandAIPlayerMarkInfo[] SIslandPlayerMarkInfoArray, float VisDistance);// 0x3b98fe4
	void NotifyPlayersEndStateTimeChange(out IslandRoomData RoomData);// 0x31227cc
	bool IsNonePlayerOnIsland();// 0x3122794
	void GMCleintShowAllMark(const SIslandAIPlayerMarkInfo[] AllAIs, float VisDistance);// 0x3122658
	void CheckPlayerNum(out IslandRoomData RoomData, bool bForceCheck);// 0x3122540
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x3122470
	void CheckAllRooms();// 0x3122454
	int BroadcastMessageToIsland(int ID, out const byte[] Content, int LandId, uint64 ExcludeUid);// 0x31222d0
	void BroadcastHighTargetScore(FString UIDStr, int Score, int IslandID);// 0x3122178
	void AddTrainDataToRank(out TargetTrainData[] Rank, TargetTrainData TrainData);// 0x3121f6c

--------------------------------
Class: IslandGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bEnableClearIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e4, Size: 1]
	bool bEnableInactiveClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e5, Size: 1]
	float CurrentTimeCheckCD;//[Offset: 0x11e8, Size: 4]
	float TotalTimeCheckCD;//[Offset: 0x11ec, Size: 4]
	FString ExitReason;//[Offset: 0x11f0, Size: 16]
	int IslandStartShowLifeTime;//[Offset: 0x1200, Size: 4]
	int IslandDuration;//[Offset: 0x1204, Size: 4]
	int IslandStartTime;//[Offset: 0x1208, Size: 4]
	int IslandLeftTime;//[Offset: 0x120c, Size: 4]
	int IslandEndStateTime;//[Offset: 0x1210, Size: 4]
	int IslandDefaultLifeTime;//[Offset: 0x1214, Size: 4]
	int IslandSpecialLifeTime;//[Offset: 0x1218, Size: 4]
	int IslandMinimumPlayerNum;//[Offset: 0x121c, Size: 4]
	int IslandMinimumAliveTime;//[Offset: 0x1220, Size: 4]
	IslandRoomData[] RoomDatas;//[Offset: 0x1228, Size: 16]
	IslandGameMode* IslandGameMode;//[Offset: 0x1238, Size: 8]
	enum IslandStateType;//[Offset: 0x1240, Size: 1]
	IslandRoomData GetRoomData(int LandId);// 0x303eddc

--------------------------------
Class: IslandGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bCanSendStopJoinSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f24, Size: 1]
	bool bEnableOverWriteLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f25, Size: 1]
	bool bEnableSetExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f26, Size: 1]
	float CloseDSDelayTime;//[Offset: 0x1f28, Size: 4]
	IslandGameState* IslandGameState;//[Offset: 0x1f30, Size: 8]
	TimerHandle DelayCloseDSTimer;//[Offset: 0x1f38, Size: 8]
	bool bSentStopJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f40, Size: 1]
	int IslandInactivePlayerKickoutTime;//[Offset: 0x1f44, Size: 4]
	void StopJoin();// 0x303e71c
	void NotifyDSToClose();// 0x303e700
	void CloseIsland();// 0x303e6e4

--------------------------------
Class: BP_VH_Buggy_2_C.BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object

--------------------------------
Class: BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passenger;//[Offset: 0x1528, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1530, Size: 8]

--------------------------------
Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool DefaultLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x220, Size: 16]
	void OnIdleAnimListAsyncLoadingFinished();// 0x37a5dc4
	void OnAnimListAsyncLoadingFinished(AsyncLoadCharVehAnimParams LoadingParam);// 0x37a5ba0

--------------------------------
Class: BP_MegaDrop_C.STExtraMegaDropVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x14f0, Size: 8]
	void EnableWingAvatar(STExtraBaseCharacter* Character, bool IsEnable, BP_PlayerWing_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void ExitVehicleOnTimer(Controller* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, VehicleUserComponent* CallFunc_GetVehicleUserComp_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x3b98fe4
	void ResetSeatLocationOnClient(Rotator CallFunc_GetReplicatedRotator_ReturnValue, Vector CallFunc_GetReplicatedLocation_ReturnValue, bool CallFunc_IsServer_ReturnValue);// 0x3b98fe4
	void PrintCurrentLocation(FText Info, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_VectorToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_GetDisplayName_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_TransformToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData K2Node_MakeStruct_FormatArgumentData4, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x3b98fe4
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm, bool CallFunc_IsValid_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x3b98fe4
	void DropAllPlayerWhenInvalid(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, STExtraPlayerCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, VehicleUserComponent* CallFunc_GetVehicleUserComp_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void GetLaunchSpeed(out Vector Speed, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue);// 0x3b98fe4
	void ShowExhaustFx(bool Show, ParticleSystemComponent* PS, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue);// 0x3b98fe4
	void SetMeshLocationHeight(float Height, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult);// 0x3b98fe4
	void LaunchSeatPlayer(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, STExtraPlayerCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, VehicleUserComponent* CallFunc_GetVehicleUserComp_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void AddEventMapCount(STExtraBaseCharacter* Character, enum Key, int ___int_Variable, bool CallFunc_IsValid_ReturnValue, UAEPlayerState* K2Node_DynamicCast_AsUAEPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x3b98fe4
	void OnArrivalBottom();// 0x3b98fe4
	void LaunchPlayer(STExtraPlayerController* Controller, Vector CallFunc_GetLaunchSpeed_Speed, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void TimelineLaunchHeight__FinishedFunc();// 0x3b98fe4
	void TimelineLaunchHeight__UpdateFunc();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void OnBoostingChanged();// 0x3b98fe4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3b98fe4
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x3b98fe4
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x3b98fe4
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x3b98fe4
	void SetNeedInitWingAvatar(STExtraBaseCharacter* Character);// 0x3b98fe4
	void OnBecomeViewTarget(PlayerController* PC);// 0x3b98fe4
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x3b98fe4
	void ExecuteUbergraph_BP_MegaDrop(int EntryPoint, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, FText CallFunc_Conv_RotatorToText_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_VectorToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerCharacter* K2Node_Event_Player3, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerCharacter* K2Node_Event_Player2, STExtraPlayerCharacter* K2Node_Event_Player, bool CallFunc_IsServer_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, VehicleSpringArmComponent* CallFunc_GetVehicleSpringArm_ReturnValue, bool CallFunc_IsValid_ReturnValue2, VehicleSpringArmComponent* CallFunc_GetVehicleSpringArm_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, STExtraBaseCharacter* K2Node_Event_Character2, FText CallFunc_Conv_BoolToText_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, bool CallFunc_IsValid_ReturnValue4, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, PlayerController* K2Node_Event_PC, FString CallFunc_GetObjectName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData4, TimerHandle CallFunc_K2_SetTimer_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, bool K2Node_Event_IsDriver, STExtraPlayerCharacter* K2Node_Event_Character, bool CallFunc_IsValid_ReturnValue5);// 0x3b98fe4
	CameraComponent* Camera;//[Offset: 0x14f8, Size: 8]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x1500, Size: 8]
	ParticleSystemComponent* PSCExhaust;//[Offset: 0x1508, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passenger;//[Offset: 0x1510, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1518, Size: 8]
	float TimelineLaunchHeight_Height_8D423A264DF7F2AB76DC4CBAC0BD0AC9;//[Offset: 0x1520, Size: 4]
	byte TimelineLaunchHeight__Direction_8D423A264DF7F2AB76DC4CBAC0BD0AC9;//[Offset: 0x1524, Size: 1]
	TimelineComponent* TimelineLaunchHeight;//[Offset: 0x1528, Size: 8]
	STExtraPlayerController* TempPlayerController;//[Offset: 0x1530, Size: 8]
	bool isMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1538, Size: 1]
	float LaunchTime;//[Offset: 0x153c, Size: 4]
	float ForwardLaunchSpeed;//[Offset: 0x1540, Size: 4]
	float UpLaunchSpeed;//[Offset: 0x1544, Size: 4]
	float CameraYawRange;//[Offset: 0x1548, Size: 4]
	TimerHandle ExitVehicleTimer;//[Offset: 0x1550, Size: 8]

--------------------------------
Class: STExtraMegaDropVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	Vector MegaSeatLocation;//[Offset: 0x14d0, Size: 12]
	Rotator MegaSeatRotator;//[Offset: 0x14dc, Size: 12]
	float validTime;//[Offset: 0x14e8, Size: 4]
	bool IsCannotEnterWhileBornland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ec, Size: 1]
	bool EnableMegaDropWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ed, Size: 1]
	bool EnableMegaDropDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ee, Size: 1]
	bool NeedInitWingAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ef, Size: 1]
	void SetNeedInitWingAvatar(STExtraBaseCharacter* Character);// 0x3b98fe4
	void SendControlRotationToServer();// 0x31d2e90
	void OnBecomeViewTarget(PlayerController* PC);// 0x3b98fe4
	Rotator GetReplicatedRotator();// 0x31d2e58
	Vector GetReplicatedLocation();// 0x31d2e20

--------------------------------
Class: BP_Ammo_556mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_556mm;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MachineGun_MP5K_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_MP5K;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_MachineGun_PP19_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* StaticMesh;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_TommyGun;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Pistol_DesertEagle_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DesertEagle;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Pistol_Vz61_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_Vz61;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Rifle_G36_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* ST_WEP_G36C_Lod;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* SM_M416;//[Offset: 0x7b0, Size: 8]

--------------------------------
Class: BP_Pistol_P1911_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_P1911;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ShotGun_DP12_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DP12;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Rifle_M16A4_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* SM_M16A4;//[Offset: 0x7b0, Size: 8]

--------------------------------
Class: BP_Ammo_Bolt_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_Bolt;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Ammo_9mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_9mm;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Ammo_300Magnum_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_300Magnum;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Rifle_M416_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* ST_WEP_M416_Lod;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* SM_M416;//[Offset: 0x7b0, Size: 8]

--------------------------------
Class: BP_Rifle_Mk47_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* ADS;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* Mag;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* SM_M762;//[Offset: 0x7b0, Size: 8]

--------------------------------
Class: BP_Ammo_762mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_762mm;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Ammo_12Guage_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_12Guage;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_Win94_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Scope;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Sniper_QBU_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_QBU;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_MachineGun_TommyGun_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Grip;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* SM_TommyGun;//[Offset: 0x7b0, Size: 8]

--------------------------------
Class: BP_Other_DP28_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DP28;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_SLR_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_SLR;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Rifle_M762_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_M762;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_WEP_Sickle_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WEP_Pan_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WEP_Machete_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WEP_Cowbar_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ShotGun_S12K_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_S12K;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_VSS_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* StaticMesh;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_VSS;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Sniper_SKS_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_SKS;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WEP_Mk14_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Mk14;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_Mini14_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Mini14;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_Kar98k_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_AWM_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_AWM;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ShotGun_S686_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_S686;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ShotGun_S1897_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_S1897;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Other_M249_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Stock;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* Mag;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* SM_M249;//[Offset: 0x7b0, Size: 8]

--------------------------------
Class: BP_WB_Angled_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WB_Vertical_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_WB_Vertical;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WB_Lasersight_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_WB_Vertical;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WB_ThumbGrip_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ZDD_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_ZDD_Sniper;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ZDD_Crossbow_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_ZDD_Crossbow_Q;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Rifle_QBZ_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_QBZ;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_QK_DuckBill_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Duckbill;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MachineGun_Uzi_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Uzi;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MachineGun_UMP9_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_UMP9;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Other_CrossBow_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_CrossBow;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MachineGun_Vector_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* StaticMesh;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_Vector;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Pistol_P18C_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_P18C;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: Drink_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Pistol_R1895_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_R1895;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Pistol_P92_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_P92;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ShotGun_SawedOff_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_SawedOff;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Pistol_R45_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_P1911;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Rifle_AUG_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* ST_WEP_M416_Lod;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_M416;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Rifle_AKM_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_AKM;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: BP_Grenade_Apple_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* M18;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Rifle_Groza_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Groza;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: Injection_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: Pills_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Mid_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Mid_FlashHider;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Large_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Large_Suppressor;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_M24_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_M24;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Sniper_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Sniper_FlashHider;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Sniper_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Sniper_Suppressor;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Sniper_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Sniper_Compensator;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WB_HalfGrip_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Mid_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Mid_Compensator;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Large_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Large_Compensator;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Large_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Large_FlashHider;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QT_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QT_A;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Choke_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Choke;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QT_A_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QT_A;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QT_UZI_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QT_UZI;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Bag_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_WB_LightGrip_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Armor_Lv3_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Rifle_SCAR_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Mag;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* SM_SCAR-L;//[Offset: 0x7a8, Size: 8]

--------------------------------
Class: PickUp_BP_Bag_Lv3_B_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Ammo_45ACP_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Ammo_45ACP;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_3X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_3X;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_6X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_6X;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_4X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_4X;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_HD_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_HD;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_8X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_8X;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_2X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_2X;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_QX_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_QX;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Helmet_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Helmet_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Large_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Helmet_Lv3_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Sniper_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Sniper_EQ;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Mid_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Mid_Q;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Sniper_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Sniper_Q;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Sniper_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Mid_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Mid_E;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Mid_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Mid_EQ;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Large_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Large_EQ;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_DJ_Large_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_DJ_Large_Q;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Armor_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Armor_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_ShotGun_M1014_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_SPAS-12;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_Mosin_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_Sniper_MK12_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Muzzle;//[Offset: 0x7a0, Size: 8]
	StaticMeshComponent* Scope;//[Offset: 0x7a8, Size: 8]
	StaticMeshComponent* Mag;//[Offset: 0x7b0, Size: 8]
	StaticMeshComponent* SM_QBU;//[Offset: 0x7b8, Size: 8]

--------------------------------
Class: BP_Rifle_FAMAS_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* WEP_Famas_Lod;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_MZJ_SideRMR_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_MZJ_HD;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: PickUp_BP_Bag_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: BP_QK_Mid_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* SM_QK_Mid_Suppressor;//[Offset: 0x7a0, Size: 8]

--------------------------------
Class: AquaRail_1_C.BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passengers;//[Offset: 0x1278, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1280, Size: 8]

--------------------------------
Class: BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1250, Size: 8]
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x3b98fe4
	void UpdateEffects(float CallFunc_GetForwardSpeed_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3b98fe4
	void OnUpdateEffects();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_1_DriverChangeDelegate__DelegateSignature(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x3b98fe4
	void OnRep_CandidateAvatar();// 0x3b98fe4
	void ExecuteUbergraph_BP_StextraBoatBase(int EntryPoint, BP_StextraBoatBase_C* ___object_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_OldChara, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_NewChara, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, BP_StextraBoatBase_C* ___object_Variable2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x3b98fe4
	BoatAvatarComponent_BP_C* BoatAvatarComponent_BP;//[Offset: 0x1258, Size: 8]
	CameraComponent* Camera;//[Offset: 0x1260, Size: 8]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x1268, Size: 8]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 1]

--------------------------------
Class: BoatAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 8]
	FString GetItemAvatarHandlePath(int ItemID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x3b98fe4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, class Object CallFunc_GetClass_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess);// 0x3b98fe4
	void OnLoaded_5D98FAF940B1D039C5FC33AEF60CE902(Object* Loaded);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void BoatAvatarEquiped();// 0x3b98fe4
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x3b98fe4
	void BoatFPPMeshLoaded();// 0x3b98fe4
	void LoadedBrokenMat();// 0x3b98fe4
	void ExecuteUbergraph_BoatAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, float K2Node_Event_DeltaSeconds, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess2, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x3b98fe4
	ParticleSystem* CurLightEffect;//[Offset: 0x548, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x570, Size: 8]

--------------------------------
Class: VH_Motorcycle_1_C.VH_Motorcycle_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object

--------------------------------
Class: VH_Motorcycle_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1528, Size: 8]
	void OnAddExhaustEffect(bool bLobbyShow, bool ___bool_Variable, MotorcycleAvatarExhaustStruct[] ___struct_Variable, MotorcycleAvatarExhaustStruct[] ___struct_Variable2, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, VehicleAvatarHandle_BP_VH_Motorcycle_C* K2Node_DynamicCast_AsVehicle_Avatar_Handle_BP_VH_Motorcycle, bool K2Node_DynamicCast_bSuccess, class VehicleAvatarHandle_BP_VH_Motorcycle_C CallFunc_GetObjectClass_ReturnValue, MotorcycleAvatarExhaustStruct[] K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3, bool CallFunc_IsValidSoftObjectReference_ReturnValue2, bool CallFunc_IsValidSoftObjectReference_ReturnValue3);// 0x3b98fe4
	void OnDestroyExhaustEffect(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3b98fe4
	void TickUpdateAvatarExhaust(bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetForwardSpeed_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void OnLoaded_137D0BCB4CD69E5EDCDF0F8D76242729(Object* Loaded);// 0x3b98fe4
	void OnLoaded_471C3E774367461D12A732AB89B9E676(Object* Loaded);// 0x3b98fe4
	void OnLoaded_150A821A4E34995C45C96B98B9184D62(Object* Loaded);// 0x3b98fe4
	void OnAddExhaustEffectEvent2(FString SocketName, Transform Transform, ParticleSystem* ParticleSystem);// 0x3b98fe4
	void OnEngineStop();// 0x3b98fe4
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleAvatarEquiped__DelegateSignatu();// 0x3b98fe4
	void OnAddExhaustEffectEvent1(FString SocketName, Transform Transform, ParticleSystem* ParticleSystem);// 0x3b98fe4
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void OnAddExhaustEffectEvent3(FString SocketName, Transform Transform, ParticleSystem* ParticleSystem);// 0x3b98fe4
	void OnClientVehicleHealthStateChangedToDestory();// 0x3b98fe4
	void ExecuteUbergraph_VH_Motorcycle(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Object* K2Node_CustomEvent_Loaded3, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, Object* K2Node_CustomEvent_Loaded2, Object* ___object_Variable2, ParticleSystem* K2Node_DynamicCast_AsParticle_System2, bool K2Node_DynamicCast_bSuccess2, Object* K2Node_CustomEvent_Loaded, Object* ___object_Variable3, ParticleSystem* K2Node_DynamicCast_AsParticle_System3, bool K2Node_DynamicCast_bSuccess3, FString K2Node_CustomEvent_SocketName3, Transform K2Node_CustomEvent_Transform3, ParticleSystem* K2Node_CustomEvent_ParticleSystem3, delegate K2Node_CreateDelegate_OutputDelegate3, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FName CallFunc_Conv_StringToName_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FString K2Node_CustomEvent_SocketName2, Transform K2Node_CustomEvent_Transform2, ParticleSystem* K2Node_CustomEvent_ParticleSystem2, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, FName CallFunc_Conv_StringToName_ReturnValue2, float K2Node_Event_DeltaSeconds, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue2, FString K2Node_CustomEvent_SocketName, Transform K2Node_CustomEvent_Transform, ParticleSystem* K2Node_CustomEvent_ParticleSystem, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, FName CallFunc_Conv_StringToName_ReturnValue3, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue3, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue);// 0x3b98fe4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x1530, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passenger;//[Offset: 0x1538, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1540, Size: 8]
	VehicleMotorbikeComponent* VehicleMotorbike;//[Offset: 0x1548, Size: 8]
	bool bHadAddPSCExhaust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 1]
	<FString,ParticleSystemComponent*> PSCExhaustEffect;//[Offset: 0x1558, Size: 80]

--------------------------------
Class: VehicleAvatarHandle_BP_VH_Motorcycle_C.VehicleAvatarHandleBase_BP_C.BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	MotorcycleAvatarExhaustStruct[] ExhaustFx;//[Offset: 0x350, Size: 16]
	MotorcycleAvatarExhaustStruct[] LobbyExhaustFx;//[Offset: 0x360, Size: 16]

--------------------------------
Class: VehicleAvatarHandleBase_BP_C.BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: VehicleAdvanceAvatarComp_BP_C.VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x940, Size: 8]
	FName GetReflectionCubeName_Lobby();// 0x3b98fe4
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x3b98fe4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_Old_ReturnValue, bool CallFunc_GenerateDefaultAvatarConfig_ReturnValue, VehicleAvatarData K2Node_MakeStruct_VehicleAvatarData, bool CallFunc_InitVehicleAvatar_ReturnValue);// 0x3b98fe4
	void PutOffItemIDInLobby(int InItemID, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x3b98fe4
	void PutOnItemIDInLobby(int InItemID, int ColorID, int PatternID, int Particle ID, out bool Result, FString CallFunc_Conv_IntToString_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x3b98fe4
	void PutOffSlotInLobby(byte InSlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x3b98fe4
	void BP_ProcessStyleUnequipped(int OldStyleID, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int CallFunc_IsStyleHasModelConfig_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipStyle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue2, int CallFunc_IsStyleHasModelConfig_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);// 0x3b98fe4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x3b98fe4
	void BP_ProcessStyleEquipped(int NewStyleID, int OldStyleID);// 0x3b98fe4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x3b98fe4
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle, class VAH_Pattern_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Pattern_BP_Base, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, VAH_Pattern_BP_Base_C* CallFunc_SpawnObject_ReturnValue, BP_STRUCT_VehicleRefitPatternTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitColorTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, class Object CallFunc_GetClass_ReturnValue, class VAH_Particle_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Particle_BP_Base, bool K2Node_ClassDynamicCast_bSuccess2, VAH_Particle_BP_Base_C* CallFunc_SpawnObject_ReturnValue2, class VAH_Color_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Color_BP_Base, bool K2Node_ClassDynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue2, VAH_Color_BP_Base_C* CallFunc_SpawnObject_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, AvatarCustomBase*[] K2Node_MakeArray_Array);// 0x3b98fe4
	VehicleStyleData MakeVehicleStyleData(int InStyleID, VehicleStyle[] Temp, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitStyle_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, VehicleStyle K2Node_MakeStruct_VehicleStyle, int CallFunc_Array_Add_ReturnValue, VehicleStyle K2Node_MakeStruct_VehicleStyle2, byte CallFunc_Conv_IntToByte_ReturnValue3, int CallFunc_Array_Add_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue3, VehicleStyleData K2Node_MakeStruct_VehicleStyleData);// 0x3b98fe4
	bool GenerateDefaultAvatarConfig(int InBaseSkinID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AvatarBPUtils* CallFunc_GetBPUtils_ReturnValue, int[] CallFunc_GetVehicleDefaultStyleID_OutStyleIDList, bool CallFunc_GetVehicleDefaultStyleID_ReturnValue, int CallFunc_Array_Get_Item, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, int CallFunc_IsStyleHasModelConfig_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID);// 0x3b98fe4
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_ReturnValue);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x3b98fe4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x3b98fe4
	void BP_EventStyleEquipped(int NewStyleID, int OldStyleID);// 0x3b98fe4
	void BP_EventStyleUnequipped(int OldStyleID);// 0x3b98fe4
	void ExecuteUbergraph_VehicleAdvanceAvatarComp_BP(int EntryPoint, int K2Node_CustomEvent_OldStyleID, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, int K2Node_CustomEvent_NewStyleID, int K2Node_CustomEvent_OldStyleID2);// 0x3b98fe4
	int[] DefaultStyleIDList;//[Offset: 0x948, Size: 16]

--------------------------------
Class: VAH_Pattern_BP_Base_C.AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	void InitPatternInfo(float Scale1, float Scale2, FString Path1, FString Path2, FString Offset);// 0x2f897dc

--------------------------------
Class: VAH_Particle_BP_Base_C.AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleAsset[] ParticleDataList;//[Offset: 0x50, Size: 16]
	ParticleGroup ParticleGroup;//[Offset: 0x60, Size: 48]
	bool ClearCustomInfo();// 0x2f8949c
	void AsyncLoadCustomParticleDone();// 0x2f89488
	bool ApplyCustomInfo();// 0x2f89448

--------------------------------
Class: VAH_Color_BP_Base_C.AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	void InitColorInfo(float Gray, FString Color1, FString Color2, FString Color3);// 0x2f88dd4

--------------------------------
Class: AvatarBPUtils.Object
	CreateAvatarHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0x148, Size: 16]
	<int,CreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x158, Size: 80]
	<int,WeaponAttachmentsDataRow> WeaponAttachmentsTableRowMap;//[Offset: 0x1f8, Size: 80]
	FString InitedUpWeaponTableName;//[Offset: 0x248, Size: 16]
	<int,UpWeaponDataRow> UpWeaponTableRowMap;//[Offset: 0x258, Size: 80]
	<int,int> UpWeaponBPIDMap;//[Offset: 0x2a8, Size: 80]
	FString InitedUpWeaponAttachmentTableName;//[Offset: 0x2f8, Size: 16]
	<int,UpWeaponAttachmentDataRow> UpWeaponAttachmentTableRowMap;//[Offset: 0x308, Size: 80]
	FString InitedUpBulletTableName;//[Offset: 0x358, Size: 16]
	<int,UpBulletTableDataRow> UpBulletTableRowMap;//[Offset: 0x368, Size: 80]
	<int,SupportUpBullets> AvailableBulletsMap;//[Offset: 0x3b8, Size: 80]
	FString InitedChipSupportTableName;//[Offset: 0x408, Size: 16]
	<int,ChipSupportDataRow> ChipSupportDataRowMap;//[Offset: 0x418, Size: 80]
	<int,ChipSupportItem> ChipSupportItemMap;//[Offset: 0x468, Size: 80]
	FString InitedChipTableName;//[Offset: 0x4b8, Size: 16]
	<int,ChipDataRow> ChipDataRowMap;//[Offset: 0x4c8, Size: 80]
	void StringToArrayString(FString str, out FString[] OutArray, FString Sign);// 0x2efe3a8
	void StringToArrayName(FString str, out FName[] OutArray, FString Sign);// 0x2efe198
	void StringToArray(FString str, out int[] OutArray, FString Sign);// 0x2efdf88
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x2efdee0
	void InitWeaponAttrBPTable();// 0x2efdecc
	void InitWeaponAttachmentsTable();// 0x2efdeb8
	void InitUpWeaponTable(FString tableName);// 0x2efde10
	void InitUpWeaponAttachmentsTable(FString tableName);// 0x2efdd68
	void InitUpBulletTable(FString tableName);// 0x2efdcc0
	void Initialize();// 0x2efdcac
	void InitChipTable(FString tableName);// 0x2efdc04
	void InitChipSupportTable(FString tableName);// 0x2efdb5c
	int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x2efdac8
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x2efd9b4
	FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x2efd8b8
	int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x2efd810
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x2efd710
	int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x2efd668
	void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x2efd50c
	int GetBPIDByResID(int resID);// 0x2efd478
	FString GetAvatarHandlePath(ItemDefineID DefineID, bool bLobby);// 0x2efd31c
	void GetAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x2efd1f4
	int GetAdjustWeaponBPID_Lobby(int WeaponId);// 0x2efd160
	ItemHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x2efd038
	void ConstructAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x2efcf08

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0x110, Size: 16]
	CurveFloat* Curve_Roll;//[Offset: 0x120, Size: 8]
	CurveFloat* Curve_ReturnClamp;//[Offset: 0x128, Size: 8]
	CurveFloat* Curve_Steer;//[Offset: 0x130, Size: 8]
	CurveFloat* Curve_Yaw;//[Offset: 0x138, Size: 8]
	CurveFloat* Curve_TorqueStab;//[Offset: 0x140, Size: 8]
	CurveFloat* Curve_Roll_Cart;//[Offset: 0x148, Size: 8]
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0x150, Size: 8]
	CurveFloat* Curve_Steer_Cart;//[Offset: 0x158, Size: 8]
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0x160, Size: 8]
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0x168, Size: 8]
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	FName LowStabBoneName;//[Offset: 0x178, Size: 8]
	FName HighStabBoneName;//[Offset: 0x180, Size: 8]
	Vector SideCartHighStabCOM;//[Offset: 0x188, Size: 12]
	float MinSuspensionOffsetForContact;//[Offset: 0x194, Size: 4]
	Vector StabStaticVector;//[Offset: 0x198, Size: 12]
	Vector2D StabXVelocityIn;//[Offset: 0x1a4, Size: 8]
	Vector2D StabXVelocityOut;//[Offset: 0x1ac, Size: 8]
	Vector2D StabXPitchIn;//[Offset: 0x1b4, Size: 8]
	Vector2D StabXPitchOut;//[Offset: 0x1bc, Size: 8]
	Vector2D StabZVelocityIn;//[Offset: 0x1c4, Size: 8]
	Vector2D StabZVelocityOut;//[Offset: 0x1cc, Size: 8]
	Vector2D StabZRollIn;//[Offset: 0x1d4, Size: 8]
	Vector2D StabZRollOut;//[Offset: 0x1dc, Size: 8]
	Vector2D StabZPitchIn;//[Offset: 0x1e4, Size: 8]
	Vector2D StabZPitchOut;//[Offset: 0x1ec, Size: 8]
	Vector2D StabTorqueIn;//[Offset: 0x1f4, Size: 8]
	Vector2D StabTorqueOut;//[Offset: 0x1fc, Size: 8]
	float StabTorqueForceScalar;//[Offset: 0x204, Size: 4]
	Vector2D StabTorquePitchIn;//[Offset: 0x208, Size: 8]
	Vector2D StabTorquePitchOut;//[Offset: 0x210, Size: 8]
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float ScaleTorque;//[Offset: 0x21c, Size: 4]
	float ScaleCenterOfMass;//[Offset: 0x220, Size: 4]
	Vector CurrentTorque;//[Offset: 0x224, Size: 12]
	Vector CurrentCenterOfMass;//[Offset: 0x230, Size: 12]
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	float KickstandAngularDamping;//[Offset: 0x240, Size: 4]
	float KickstandMaxAngVelocity;//[Offset: 0x244, Size: 4]
	float KickstandEnableMaxSpeed;//[Offset: 0x248, Size: 4]
	Vector2D AirControlFVelMap;//[Offset: 0x24c, Size: 8]
	Vector2D AirControlBVelMap;//[Offset: 0x254, Size: 8]
	float AirControlFBTorque;//[Offset: 0x25c, Size: 4]
	bool bResetRotationSafeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool bShouldResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 1]
	float COMOffsetSteer;//[Offset: 0x270, Size: 4]
	float RotSteeringFinal;//[Offset: 0x274, Size: 4]
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x32e919c
	void ForceSyncVelocity(Vector ServerLinearVelocity, Vector ServerAngularVelocity);// 0x32e90dc

--------------------------------
Class: VH_Dacia_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1528, Size: 8]
	OwnershipComponent* GetOwnershipComponent();// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void OnBoostingChanged();// 0x3b98fe4
	void ExecuteUbergraph_VH_Dacia(int EntryPoint);// 0x3b98fe4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x1530, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersL;//[Offset: 0x1538, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersR;//[Offset: 0x1540, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1548, Size: 8]

--------------------------------
Class: OwnershipComponent.ActorComponent.Object
	delegate OnOwnershipChanged;//[Offset: 0x110, Size: 16]
	uint32 BelongToPlayerKey;//[Offset: 0x120, Size: 4]
	uint32[] Borrowers;//[Offset: 0x128, Size: 16]
	bool bCanBorrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 1]
	void SetOwnershipBP(FString InPlayerKey);// 0x3098740
	void SetOwnership(uint32 InPlayerKey);// 0x30986c4
	void ReturnBP(FString InBorrowerKey);// 0x3098560
	void Return(uint32 InBorrowerKey);// 0x30984e4
	void RequireReturn(uint32 InBorrowerKey);// 0x3098434
	void RequireBorrow(uint32 InBorrowerKey);// 0x3098384
	void ReleaseOwnership();// 0x3098370
	void OnRep_Borrowers();// 0x309835c
	void OnRep_BelongToActorChanged();// 0x3098348
	FString GetOwnershipBP();// 0x3098298
	uint32 GetOwnership();// 0x309827c
	void EnableBorrow(bool InEnable);// 0x30981f0
	bool CanBorrow();// 0x30981d0
	bool BorrowedByBP(FString InBorrowerKey);// 0x3098030
	bool BorrowedBy(uint32 InBorrowerKey);// 0x3097f74
	void BorrowBP(FString InBorrowerKey);// 0x3097e10
	void Borrow(uint32 InBorrowerKey);// 0x3097d94
	bool BelongToBP(FString InPlayerKey);// 0x3097c20
	bool BelongTo(uint32 InPlayerKey);// 0x3097b90

--------------------------------
Class: Mirado_open_4_C.Mirado_open_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBR;//[Offset: 0x1550, Size: 8]
	ParticleSystemComponent* PSCExhaust1;//[Offset: 0x1558, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBL;//[Offset: 0x1560, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0x1568, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1570, Size: 8]

--------------------------------
Class: Mirado_open_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1528, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void OnBoostingChanged();// 0x3b98fe4
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleAvatarEquiped__DelegateSignatu();// 0x3b98fe4
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_1_VehicleLoadedBrokenMat__DelegateSigna();// 0x3b98fe4
	void ExecuteUbergraph_Mirado_open(int EntryPoint, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue);// 0x3b98fe4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBR;//[Offset: 0x1530, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBL;//[Offset: 0x1538, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0x1540, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1548, Size: 8]

--------------------------------
Class: BP_VH_Buggy_3_C.BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object

--------------------------------
Class: VH_PG117_C.BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passengers;//[Offset: 0x1278, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1280, Size: 8]

--------------------------------
Class: VH_UAZ01_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1528, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void OnBoostingChanged();// 0x3b98fe4
	void ExecuteUbergraph_VH_UAZ01(int EntryPoint);// 0x3b98fe4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x1530, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersR;//[Offset: 0x1538, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersL;//[Offset: 0x1540, Size: 8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1548, Size: 8]

--------------------------------
Class: SmartBearerManager.Actor.Object
	BaseBearerUnit*[] AllBearerUnit;//[Offset: 0x398, Size: 16]
	BaseBearerUnit*[] WaitForInitUnit;//[Offset: 0x3a8, Size: 16]
	STExtraPetCharacter*[] WaitForAddPet;//[Offset: 0x458, Size: 16]
	STExtraWeapon*[] WaitForAddWeapon;//[Offset: 0x4b8, Size: 16]
	void SetEnabled(bool Enable);// 0x311edb4
	void SetBandWeaponDIYUnit(bool Enable);// 0x311ed30
	void SetBandPetUnit(bool Enable);// 0x311ecac
	void SetBandOtherCharacterUnit(bool Enable);// 0x311ec28
	void SetBandAdvanceVehicleUnit(bool Enable);// 0x311eba4
	void OnSwitchGameStatusEvent(FString Status);// 0x311eafc
	void OnPreMatchSuccess(int submode_id);// 0x311ea80
	bool IsEnabled();// 0x311ea48

--------------------------------
Class: BaseBearerUnit.Object

--------------------------------
Class: BP_DecalBakingActor_C.DecalBakingActorMgr.DecalBakingActor.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x418, Size: 8]

--------------------------------
Class: VehicleDataMgr.Actor.Object
	STExtraVehicleBase*[] VehiclesDataMap;//[Offset: 0x398, Size: 16]
	STExtraVehicleBase*[] uavDataMap;//[Offset: 0x3a8, Size: 16]
	UAEDataTable* VehicleSpawnTable;//[Offset: 0x408, Size: 8]
	UAEDataTable* VehicleMaxHPTable;//[Offset: 0x410, Size: 8]
	UAEDataTable* CarMusicTable;//[Offset: 0x468, Size: 8]
	void UnRegisterVehicle(STExtraVehicleBase* Vehicle);// 0x32e7b70
	void UnRegisterUAV(STExtraVehicleBase* uav);// 0x32e7af4
	void RemoveNoFreezeOn(SceneComponent* Actor);// 0x32e7a78
	void RegisterVehicle(STExtraVehicleBase* Vehicle);// 0x32e79fc
	void RegisterUAV(STExtraVehicleBase* uav);// 0x32e7980
	static VehicleDataMgr* GetInstance(World* World);// 0x32e7904
	void AddNoFreezeOn(SceneComponent* Actor);// 0x32e7888

--------------------------------
Class: BP_ObjectPoolManager_AllMode_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4d0, Size: 8]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	enum PawnState;//[Offset: 0x6d1, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d3, Size: 1]
	int CastFailTipsID;//[Offset: 0x6d4, Size: 4]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 1]
	UTSkillBaseWidget* GetSkillEffect(FString PhaseName, FString EffectName);// 0x3293948
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x32938cc

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x6c0, Size: 16]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x328bfbc

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_GasCan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_RapidAidbox_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_Frag_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_Molotov_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_PoisonApple_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_Smoke_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_Stun_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_Smoke_BP_2_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_ProjSpikeTrap_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor5;//[Offset: 0x750, Size: 8]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor4;//[Offset: 0x758, Size: 8]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor3;//[Offset: 0x760, Size: 8]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor2;//[Offset: 0x768, Size: 8]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor1;//[Offset: 0x770, Size: 8]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor;//[Offset: 0x778, Size: 8]
	UAESkillAction_SetPlayerState* UAESkillAction_SetPlayerState1;//[Offset: 0x780, Size: 8]
	UAESkillAction_SetPlayerState* UAESkillAction_SetPlayerState;//[Offset: 0x788, Size: 8]
	UAESkillPhase* UAESkillPhase9;//[Offset: 0x790, Size: 8]
	UAESkillPhase* UAESkillPhase7;//[Offset: 0x798, Size: 8]
	UAESkillPhase* UAESkillPhase6;//[Offset: 0x7a0, Size: 8]
	UAESkillPhase* UAESkillPhase5;//[Offset: 0x7a8, Size: 8]
	UAESkillPhase* UAESkillPhase4;//[Offset: 0x7b0, Size: 8]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x7b8, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x7c0, Size: 8]

--------------------------------
Class: UAESkillAction_SetPlayerState.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	enum PawnState;//[Offset: 0x188, Size: 1]
	bool SetEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]

--------------------------------
Class: UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x160, Size: 4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0x168, Size: 8]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	Object* EventObj;//[Offset: 0x178, Size: 8]
	void UpdateAction_Internal(float DeltaSeconds);// 0x60863b8
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x6086274
	void UndoAction_Internal();// 0x608620c
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x6086134
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x608605c
	void Reset_Internal();// 0x6085ff4
	void Reset(ActorComponent* SkillManagerComponent);// 0x6085f1c
	bool RealDoAction_Internal();// 0x6085ea8
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x6085dc4
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x6085c70
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x6085b1c
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x60859c8
	void OnAsyncLoadAssetDone(UTSkillManagerComponent* SkillManagerComponent);// 0x60858f0
	bool JudgeNeedPhaseWait();// 0x608587c
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x608578c

--------------------------------
Class: UAESkillPhase.UTSkillPhase.ActorComponent.Object
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x32b2130

--------------------------------
Class: Skill_Boss_StartFall_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	float MaxCastDistance;//[Offset: 0x6d0, Size: 4]
	float MinCastDistance;//[Offset: 0x6d4, Size: 4]

--------------------------------
Class: Skill_Boss_StartFall_Delay_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_IceDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Zombie10_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie10_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie10_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie10_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie11_CeilingLand_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie11_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie11_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie11_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie11_Skill3_frozen_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie1_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie1_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie1_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie1_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie1_Skill4_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie2_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie3_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie4_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie4_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie4_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie4_Skill5_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie4_Skill6_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie5_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie6_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie6_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie6_Skill1_killself_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie6_Skill1_L_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie7_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie7_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie8_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie8_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Zombie8_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_HitGround_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_JumpAndAttack_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_MegaThunder_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_RunAndAttack_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ShieldHit_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ShieldHit_L_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ShieldHitGround_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ShieldHitGround_L_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_SummonMonster_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowLandmine_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowPoisonBall_BP_1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowPoisonBall_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowPoisonBall_HighArc_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowPoisonBall_Ray_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowPoisonBall_RaySlow_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_VomitToixContinued_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_Zombie_Explosion_1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_Zombie_Explosion_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_Zombie_Explosion_L_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill1_Tyrant_Hit_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_Boss_Landed_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_JumpMechanism_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_JumpMechanismByAssignPos_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_StickHitGround_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ThrowOilTank_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_TyranSummonMonster_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_Tyrant_HitAndMove_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_Tyrant_ThrowRock_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: ZombieDrG_JumpAndAttack_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: ZombieDrG_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6e0, Size: 8]

--------------------------------
Class: Skill_ClientShowUI_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_TrainCoin_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_RoastChicken_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_DuckHunt_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_ParachuteLand_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_DuelFail_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_PickupIce_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_WingUp_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_GiveBackpackItem_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Swing_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_GiveHeart_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Make_Wish_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_GoldCrowInteraction_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_Grenade_Sticky_Bomb_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: SliceMusicalNote_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: StartMusicGame_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: Skill_FinishInteractAtOnce_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x750, Size: 8]

--------------------------------
Class: BP_FerrisWheelCar_C.FerrisWheelCar.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b8, Size: 8]
	void RevertCamearaOffset(const TemBPDataAddr[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x3b98fe4
	void SetCameraOffset(float Alpha, float tmp, CustomSpringArmComponent* SpringArm, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x3b98fe4
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveTick(float DeltaSeconds);// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void StoreCamearaOffset();// 0x3b98fe4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b98fe4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3b98fe4
	void ExecuteUbergraph_BP_FerrisWheelCar(int EntryPoint, const TemBPDataAddr[] K2Node_MakeArray_Array, float K2Node_Event_DeltaSeconds, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character2, bool K2Node_DynamicCast_bSuccess2, PlayerController* CallFunc_GetPlayerController_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue3, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue3, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x3b98fe4
	BoxComponent* Box;//[Offset: 0x3c0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3c8, Size: 8]
	bool HasPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	float StoreLength;//[Offset: 0x3d4, Size: 4]

--------------------------------
Class: FerrisWheelCar.Actor.Object
	SceneComponent* FollowSceneComp;//[Offset: 0x398, Size: 8]
	float TriggerEnableDistSq;//[Offset: 0x3a0, Size: 4]
	BoxComponent* CameraTrigger;//[Offset: 0x3a8, Size: 8]
	void StoreCamearaOffset();// 0x3b98fe4

--------------------------------
Class: ShareWidgetRTManager.Actor.Object
	<Object*,ShareWidgetRT*> SharedWidgetRTMap;//[Offset: 0x398, Size: 80]

--------------------------------
Class: ShareWidgetRT.Object
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x28, Size: 8]
	<Object*> AllSharedWidget;//[Offset: 0x30, Size: 80]

--------------------------------
Class: BP_PlayerRifleBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* BulletMesh;//[Offset: 0x640, Size: 8]

--------------------------------
Class: BP_PlayerShotgunBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x3b98fe4
	StaticMeshComponent* BulletMesh;//[Offset: 0x640, Size: 8]

--------------------------------
Class: BP_PlayerSniperBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x640, Size: 8]
	void UserConstructionScript();// 0x3b98fe4
	void ReceiveBeginPlay();// 0x3b98fe4
	void ResetParticle();// 0x3b98fe4
	void ExecuteUbergraph_BP_PlayerSniperBullet(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate);// 0x3b98fe4
	ParticleSystemComponent* P_Sniper_bullet_01;//[Offset: 0x648, Size: 8]
	StaticMeshComponent* BulletMesh;//[Offset: 0x650, Size: 8]
	float EffectFxDelayShowTime;//[Offset: 0x658, Size: 4]

--------------------------------
