Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c, Size: 132]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x104, Size: 4]
	NavigationSystem* NavigationSystem;//[Offset: 0x164, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x168, Size: 4]
	GameStateBase* GameState;//[Offset: 0x16c, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x170, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x174, Size: 4]
	Level*[] Levels;//[Offset: 0x178, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x184, Size: 12]
	Level* CurrentLevel;//[Offset: 0x194, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x198, Size: 4]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x19c, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1ac, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x704, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74a, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x29fa2f4

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x158, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x168, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x16c, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x178, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x178, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x178, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x1c0, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1c8, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x580, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x264, Size: 4]
	float MinDrawDistance;//[Offset: 0x268, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x26c, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x270, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x274, Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x278, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x279, Size: 1]
	enum LightmapType;//[Offset: 0x27a, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27b, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27b, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27b, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27b, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27d, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27d, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27d, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x280, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x294, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x299, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x29c, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x2ac, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bc, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bc, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bc, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bc, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bc, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bc, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bd, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bd, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bd, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bd, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bd, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bd, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bd, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bd, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2be, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2be, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2be, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2be, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2be, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2be, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2be, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2be, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bf, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bf, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bf, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bf, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bf, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2c0, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x2c2, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2c3, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2c4, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2c8, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2cc, Size: 4]
	int VisibilityId;//[Offset: 0x2d0, Size: 4]
	bool bUseAsyncCompilePSO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x2e0, Size: 4]
	float BoundsScale;//[Offset: 0x2e8, Size: 4]
	float OCBoundsScale;//[Offset: 0x2ec, Size: 4]
	int OCBoundsExtent;//[Offset: 0x2f0, Size: 4]
	float LastSubmitTime;//[Offset: 0x2f4, Size: 4]
	float LastRenderTime;//[Offset: 0x2f8, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x2fc, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x300, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x304, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x310, Size: 12]
	MaterialInterface*[] LODDefault;//[Offset: 0x324, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x340, Size: 320]
	delegate OnComponentHit;//[Offset: 0x480, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x48c, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x498, Size: 12]
	delegate OnComponentWake;//[Offset: 0x4a4, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x4b0, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x4c8, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x4d4, Size: 12]
	delegate OnClicked;//[Offset: 0x4e0, Size: 12]
	delegate OnReleased;//[Offset: 0x4ec, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x4f8, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x504, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x510, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x51c, Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x534, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x538, Size: 60]
	void WakeRigidBody(FName BoneName);// 0x4237d78
	void WakeAllRigidBodies();// 0x1e513d8
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x4237ce0
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x4237c5c
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4237be4
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x4237b64
	void SetSimulatePhysics(bool bSimulate);// 0x4237adc
	void SetRenderInMono(bool bValue);// 0x4237a5c
	void SetRenderInMainPass(bool bValue);// 0x42379dc
	void SetRenderCustomDepth(bool bValue);// 0x423795c
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x42378dc
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x423785c
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4237748
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4237624
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4237624
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4237510
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x42373fc
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x42372c4
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x42372c4
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x4237244
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x42371c4
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x4237140
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x42370b8
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x4236ee8
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x4236d3c
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x4236c78
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x4236bb4
	void SetMassScale(FName BoneName, float InMassScale);// 0x4236ae8
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x42369cc
	void SetMaskFilter(int InMaskFilter);// 0x4236954
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x4236898
	void SetLockedAxis(byte LockedAxis);// 0x4236818
	void SetLinearDamping(float InDamping);// 0x20af8c4
	void SetEnableGravity(bool bGravityEnabled);// 0x4236790
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x4236710
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x4236698
	void SetDrawDyeing(bool bNewDrawOutline);// 0x4236618
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x42365a0
	void SetCustomDepthStencilValue(int Value);// 0x4236528
	void SetCullDistance(float NewCullDistance);// 0x42364b0
	void SetConstraintMode(byte ConstraintMode);// 0x4236430
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x423636c
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x42362ec
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x423626c
	void SetCollisionObjectType(byte Channel);// 0x42361ec
	void SetCollisionEnabled(byte NewType);// 0x423616c
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x42360ac
	void SetCastShadow(bool NewCastShadow);// 0x41f4540
	void SetBoundsScale(float NewBoundsScale);// 0x4236034
	void SetAngularDamping(float InDamping);// 0x20a5d48
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x4235f68
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x4235e8c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4235d84
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x4235ca8
	void SetAllMassScale(float InMassScale);// 0x4235c28
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x4235b3c
	void PutRigidBodyToSleep(FName BoneName);// 0x4235ac4
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x42359fc
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x4235928
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x42358b4
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x42355c4
	bool K2_IsQueryCollisionEnabled();// 0x4235584
	bool K2_IsPhysicsCollisionEnabled();// 0x4235544
	bool K2_IsCollisionEnabled();// 0x423550c
	int K2_GetMoveIgnoreMask();// 0x42354f0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4235470
	bool IsOverlappingActor(const Actor* Other);// 0x42353f0
	bool IsGravityEnabled();// 0x1e4ee74
	bool IsAnyRigidBodyAwake();// 0x42353c0
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x42352fc
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x4235238
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x42351fc
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4235118
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4235084
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4234ff0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4234f44
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4234f44
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x4234e78
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4234d64
	int GetNumMaterials();// 0x413d394
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4234c88
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4234c00
	float GetMassScale(FName BoneName);// 0x4234b78
	float GetMass();// 0x4234b48
	int GetMaskFilter();// 0x4234b2c
	float GetLinearDamping();// 0x4234afc
	Vector GetInertiaTensor(FName BoneName);// 0x4234a60
	byte GetCollisionResponseToChannel(byte Channel);// 0x42349d8
	FName GetCollisionProfileName();// 0x4234998
	byte GetCollisionObjectType();// 0x1de6aec
	byte GetCollisionEnabled();// 0x4234968
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4234838
	Vector GetCenterOfMass(FName BoneName);// 0x42347a4
	float GetAngularDamping();// 0x4234774
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x42346a8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x42345dc
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4234554
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x4234494
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x42343d4
	void ClearMoveIgnoreComponents();// 0x42343a4
	void ClearMoveIgnoreActors();// 0x4234390
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4234308
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x42340c4
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x42341d4
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x42340c4
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4233f20
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x4233d7c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4233c64
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4233b4c
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x4233a34
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x423391c
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x4233804
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x42336ec
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x42335b0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4233498

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc8, Size: 4]
	FName AttachSocketName;//[Offset: 0xd0, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd8, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe4, Size: 12]
	Vector RelativeLocation;//[Offset: 0x118, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1a0, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x1b0, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x1b8, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x1c0, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x1c8, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x1d0, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x1d8, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 1]
	byte Mobility;//[Offset: 0x1dd, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x1e0, Size: 4]
	byte DetailMode;//[Offset: 0x1e4, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x230, Size: 12]
	void ToggleVisibility(bool bPropagateToChildren);// 0x1f442d4
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x4248704
	void SetWorldScale3D(Vector NewScale);// 0x4248694
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x42485bc
	void SetRelativeScale3D(Vector NewScale3D);// 0x4248544
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x4248470
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x4248350
	void ResetRelativeTransform();// 0x424833c
	void OnRep_Visibility(bool OldValue);// 0x42482bc
	void OnRep_Transform();// 0x42482a8
	void OnRep_AttachSocketName();// 0x4248294
	void OnRep_AttachParent();// 0x4248294
	void OnRep_AttachChildren();// 0x4248280
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x42480a0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4247f18
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4247d5c
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4247be0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4247a00
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4247884
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x42476c8
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x424754c
	Transform K2_GetComponentToWorld();// 0x42474ec
	Vector K2_GetComponentScale();// 0x42474a4
	Rotator K2_GetComponentRotation();// 0x424745c
	Vector K2_GetComponentLocation();// 0x4247414
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x42472c4
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x42470dc
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x4246f80
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4246da0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4246c24
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4246aa8
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x424692c
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x42467b0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x42465d0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x424644c
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x42462d0
	bool IsVisible();// 0x1db6a40
	bool IsSimulatingPhysics(FName BoneName);// 0x4246248
	bool IsAnySimulatingPhysics();// 0x4246218
	Vector GetUpVector();// 0x42461d0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x42460d4
	Rotator GetSocketRotation(FName InSocketName);// 0x4246038
	Quat GetSocketQuaternion(FName InSocketName);// 0x4245f9c
	Vector GetSocketLocation(FName InSocketName);// 0x4245f00
	Vector GetRightVector();// 0x4245eb8
	Transform GetRelativeTransform();// 0x4245e58
	PhysicsVolume* GetPhysicsVolume();// 0x4245e30
	void GetParentComponents(out SceneComponent*[] Parents);// 0x4245d64
	int GetNumChildrenComponents();// 0x4245d3c
	Vector GetForwardVector();// 0x421d878
	Vector GetComponentVelocity();// 0x4245cec
	Transform GetComponentTransformViewTranslatedBP();// 0x4245cb0
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x4245bb0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4245a90
	SceneComponent* GetChildComponent(int ChildIndex);// 0x4245a10
	FName GetAttachSocketName();// 0x42459f4
	SceneComponent* GetAttachParent();// 0x1f4a748
	FName[] GetAllSocketNames();// 0x4245934
	bool DoesSocketExist(FName InSocketName);// 0x42458ac
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x42457d4

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87, Size: 1]
	enum CreationMethod;//[Offset: 0x89, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c, Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8, Size: 12]
	void ToggleActive();// 0x1f53eb8
	void SetTickGroup(byte NewTickGroup);// 0x410af44
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x410aec4
	void SetIsReplicated(bool ShouldReplicate);// 0x410ae44
	void SetComponentTickInterval(float TickInterval);// 0x410adcc
	void SetComponentTickEnabled(bool bEnabled);// 0x410ad44
	void SetAutoActivate(bool bNewAutoActivate);// 0x1debba0
	void SetActive(bool bNewActive, bool bReset);// 0x410ac6c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x410abec
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x410ab6c
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void ReceiveEndPlay(byte EndPlayReason);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnRep_Replicates();// 0x410ab58
	void OnRep_IsActive();// 0x410ab44
	void K2_DestroyComponent(Object* Object);// 0x410aacc
	bool IsComponentTickEnabled();// 0x410aaa4
	bool IsBeingDestroyed();// 0x410aa84
	bool IsActive();// 0x2220610
	Actor* GetOwner();// 0x410aa68
	float GetComponentTickInterval();// 0x410aa40
	void ForceNetUpdate();// 0x1f59cc4
	void Deactivate();// 0x1f53e80
	bool ComponentHasTag(FName Tag);// 0x410a9c0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x410a940
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x410a8c0
	void Activate(bool bReset);// 0x1debb18

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c, Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x62, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]
	byte RemoteRole;//[Offset: 0x64, Size: 1]
	Actor* Owner;//[Offset: 0x68, Size: 4]
	byte WorldParallelismID;//[Offset: 0x6c, Size: 1]
	FName NetDriverName;//[Offset: 0x78, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x80, Size: 52]
	float InitialLifeSpan;//[Offset: 0xb4, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xb8, Size: 56]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf2, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 4]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0xfc, Size: 4]
	int NetTag;//[Offset: 0x100, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x108, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x10c, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x110, Size: 4]
	float NetPriority;//[Offset: 0x118, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x120, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x120, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x120, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x120, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x120, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x121, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x121, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x121, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x121, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x121, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x122, Size: 1]
	Pawn* Instigator;//[Offset: 0x130, Size: 4]
	Actor*[] Children;//[Offset: 0x134, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x140, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x144, Size: 12]
	FName[] Layers;//[Offset: 0x158, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x164, Size: 8]
	FName[] Tags;//[Offset: 0x16c, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x178, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x18c, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x198, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1a4, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1b0, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1bc, Size: 12]
	delegate OnClicked;//[Offset: 0x1c8, Size: 12]
	delegate OnReleased;//[Offset: 0x1d4, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1e0, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1ec, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x1f8, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x204, Size: 12]
	delegate OnActorHit;//[Offset: 0x210, Size: 12]
	delegate OnDestroyed;//[Offset: 0x21c, Size: 12]
	delegate OnEndPlay;//[Offset: 0x228, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2ac, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2b8, Size: 12]
	bool WasRecentlyRendered(float Tolerance);// 0x4107b7c
	void UserConstructionScript();// 0x29fa2f4
	void TearOff();// 0x1e13bd4
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x4107ac0
	void SetTickGroup(byte NewTickGroup);// 0x4107a48
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x41079c8
	void SetReplicates(bool bInReplicates);// 0x4107948
	void SetReplicateMovement(bool bInReplicateMovement);// 0x41078c0
	void SetOwner(Actor* NewOwner);// 0x1e4c0e8
	void SetNetDormancy(byte NewDormancy);// 0x4107848
	void SetLifeSpan(float InLifespan);// 0x41077c8
	void SetActorTickInterval(float TickInterval);// 0x4107750
	void SetActorTickEnabled(bool bEnabled);// 0x41076d0
	void SetActorScale3D(Vector NewScale3D);// 0x4107660
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x41075f0
	void SetActorHiddenInGame(bool bNewHidden);// 0x4107568
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x41074e8
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1e54d58
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1e54dd8
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void ReceiveReInitForReplay();// 0x29fa2f4
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x29fa2f4
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x29fa2f4
	void ReceiveEndPlay(byte EndPlayReason);// 0x29fa2f4
	void ReceiveDestroyed();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x29fa2f4
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x29fa2f4
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x29fa2f4
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x29fa2f4
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x29fa2f4
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x29fa2f4
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x29fa2f4
	void ReceiveActorEndCursorOver();// 0x29fa2f4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x29fa2f4
	void ReceiveActorBeginCursorOver();// 0x29fa2f4
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x41073d4
	void OnRep_ReplicateMovement();// 0x1f1af58
	void OnRep_ReplicatedMovement();// 0x1dbb2c0
	void OnRep_Owner();// 0x1f53eb8
	void OnRep_Instigator();// 0x1e1a3ac
	void OnRep_AttachmentReplication();// 0x1f5a6ac
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4107238
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x2224224
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4107170
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4106f80
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x4106eb0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4106cd0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4106b4c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x41069d0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4106800
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4106680
	void K2_OnReset();// 0x29fa2f4
	void K2_OnEndViewTarget(PlayerController* PC);// 0x29fa2f4
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x29fa2f4
	SceneComponent* K2_GetRootComponent();// 0x4106664
	Rotator K2_GetActorRotation();// 0x4106570
	Vector K2_GetActorLocation();// 0x4106530
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4106430
	void K2_DestroyComponent(ActorComponent* Component);// 0x41063b8
	void K2_DestroyActor();// 0x1de8914
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x41061d8
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4105ff8
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4105ea4
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4105d50
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4105b70
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x41059ec
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4105870
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4105690
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x410550c
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4105390
	bool IsOverlappingActor(const Actor* Other);// 0x4105310
	bool IsChildActor();// 0x41052e8
	bool IsActorTickEnabled();// 0x41052c0
	bool IsActorBeingDestroyed();// 0x410529c
	bool HasAuthority();// 0x4105274
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x41051f4
	Vector GetVelocity();// 0x41051a4
	Transform GetTransform();// 0x4105158
	bool GetTickableWhenPaused();// 0x4105130
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x41050b0
	byte GetRole();// 0x4105088
	byte GetRemoteRole();// 0x410506c
	ChildActorComponent* GetParentComponent();// 0x4105044
	Actor* GetParentActor();// 0x410501c
	Actor* GetOwner();// 0x4105000
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x4104f34
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4104e20
	float GetLifeSpan();// 0x4104df0
	Controller* GetInstigatorController();// 0x4104dc8
	Pawn* GetInstigator();// 0x4104da0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x4104a9c
	float GetInputAxisValue(const FName InputAxisName);// 0x4104a1c
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x4104724
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x41046a4
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x4104624
	float GetGameTimeSinceCreation();// 0x41045fc
	float GetDotProductTo(const Actor* OtherActor);// 0x410457c
	float GetDistanceTo(const Actor* OtherActor);// 0x41044fc
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x41043a8
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x41042a0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x4104220
	FName GetAttachParentSocketName();// 0x41041e0
	Actor* GetAttachParentActor();// 0x41041b8
	void GetAttachedActors(out Actor*[] OutActors);// 0x41040ec
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x4103fd0
	Vector GetActorUpVector();// 0x4103f5c
	float GetActorTimeDilation();// 0x4103f34
	float GetActorTickInterval();// 0x1ecc448
	Vector GetActorScale3D();// 0x4103eec
	Vector GetActorRightVector();// 0x4103e78
	Vector GetActorRelativeScale3D();// 0x4103e30
	Vector GetActorForwardVector();// 0x4103dbc
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x4103cdc
	bool GetActorEnableCollision();// 0x4103cbc
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x4103b94
	void ForceNetUpdate();// 0x1f59cc4
	void ForceNetConsider();// 0x1db690c
	void FlushNetDormancy();// 0x4103b80
	void EnableInput(PlayerController* PlayerController);// 0x4103b00
	void DisableInput(PlayerController* PlayerController);// 0x4103a80
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x4103a00
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4103980
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4103900
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x4103740
	bool ActorHasTag(FName Tag);// 0x41036b8

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x417ea80
	bool WasControllerKeyJustPressed(Key Key);// 0x417ea80
	bool IsControllerKeyDown(Key Key);// 0x417ea80
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x417e900
	Vector GetControllerVectorKeyState(Key Key);// 0x417e5fc
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x417e51c
	float GetControllerKeyTimeDown(Key Key);// 0x417e100
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x417e3f8
	float GetControllerAnalogKeyState(Key Key);// 0x417e100

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	float BaseEyeHeight;//[Offset: 0x2d4, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x2d8, Size: 1]
	enum AutoPossessAI;//[Offset: 0x2d9, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x2dc, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2e0, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x2e4, Size: 1]
	Controller* LastHitBy;//[Offset: 0x2e8, Size: 4]
	Controller* Controller;//[Offset: 0x2ec, Size: 4]
	Vector ControlInputVector;//[Offset: 0x2f8, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x304, Size: 12]
	void SpawnDefaultController();// 0x20a75c4
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x216cb48
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x42172f8
	void ReceiveUnpossessed(Controller* OldController);// 0x29fa2f4
	void ReceivePossessed(Controller* NewController);// 0x29fa2f4
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x42171a4
	void OnRep_PlayerState();// 0x1e7a590
	void OnRep_Controller();// 0x4144780
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4217090
	Vector K2_GetMovementInputVector();// 0x4216fc0
	bool IsPlayerControlled();// 0x4217060
	bool IsMoveInputIgnored();// 0x1e4f7e0
	bool IsLocallyControlled();// 0x4217030
	bool IsControlled();// 0x4217008
	Vector GetPendingMovementInputVector();// 0x4216fc0
	Vector GetNavAgentLocation();// 0x4144558
	PawnMovementComponent* GetMovementComponent();// 0x21876f0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4216f48
	Vector GetLastMovementInputVector();// 0x1f1c6ec
	Rotator GetControlRotation();// 0x4216ef8
	Controller* GetController();// 0x4216edc
	Rotator GetBaseAimRotation();// 0x4216e8c
	void DetachFromControllerPendingDestroy();// 0x20a7310
	Vector ConsumeMovementInputVector();// 0x4216e3c
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4216d28
	void AddControllerYawInput(float Val);// 0x1db7658
	void AddControllerRollInput(float Val);// 0x1db6e4c
	void AddControllerPitchInput(float Val);// 0x4216ca8

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2d0, Size: 4]
	Character* Character;//[Offset: 0x2dc, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2e0, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2e4, Size: 4]
	Rotator ControlRotation;//[Offset: 0x2e8, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 1]
	FName StateName;//[Offset: 0x300, Size: 8]
	Actor* ObservedActor;//[Offset: 0x308, Size: 4]
	delegate OnInstigatedAnyDamage;//[Offset: 0x30c, Size: 12]
	void UnPossess();// 0x41449c4
	void StopMovement();// 0x41449a8
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x41448c8
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x4144840
	void SetIgnoreLookInput(bool bNewLookInput);// 0x41447b8
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x208f550
	void ResetIgnoreMoveInput();// 0x2175254
	void ResetIgnoreLookInput();// 0x1e513d8
	void ResetIgnoreInputFlags();// 0x414479c
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x29fa2f4
	void Possess(Pawn* InPawn);// 0x1db6204
	void OnRep_PlayerState();// 0x1e7a590
	void OnRep_Pawn();// 0x4144780
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4144664
	Pawn* K2_GetPawn();// 0x414463c
	bool IsPlayerController();// 0x414461c
	bool IsMoveInputIgnored();// 0x41445ec
	bool IsLookInputIgnored();// 0x1e4f7e0
	bool IsLocalPlayerController();// 0x41445a8
	bool IsLocalController();// 0x1e6f3f4
	Actor* GetViewTarget();// 0x413d3c4
	Rotator GetDesiredRotation();// 0x4144558
	Rotator GetControlRotation();// 0x4144508
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x414443c
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4144374
	PlayerController* CastToPlayerController();// 0x414434c

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x310, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x314, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x318, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x320, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x350, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x380, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x384, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x390, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3a0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3b0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3b4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3b8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3bc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3c0, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x3c8, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 1]
	byte Ping;//[Offset: 0x3cd, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ce, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ce, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ce, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ce, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ce, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ce, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ce, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ce, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x3d0, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x3d4, Size: 4]
	int JumpMaxCount;//[Offset: 0x3d8, Size: 4]
	int JumpCurrentCount;//[Offset: 0x3dc, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x3e4, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x3fc, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x408, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x414, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4b0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4f0, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x500, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x413ad48
	void StopJumping();// 0x413ad2c
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x204e964
	void SetReplicateMovement(bool bInReplicateMovement);// 0x41078c0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x413ac68
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x413ab50
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x413a9d0
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x413a9bc
	void OnRep_RootMotion();// 0x413a9a8
	void OnRep_ReplicatedBasedMovement();// 0x1fdfe74
	void OnRep_IsCrouched();// 0x413a98c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x29fa2f4
	void OnLanded(out const HitResult Hit);// 0x29fa2f4
	void OnJumped();// 0x413a970
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x413a854
	void K2_UpdateCustomMovement(float DeltaTime);// 0x29fa2f4
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x29fa2f4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x29fa2f4
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x29fa2f4
	void Jump();// 0x413a838
	bool IsPlayingRootMotion();// 0x413a810
	bool IsPlayingNetworkedRootMotionMontage();// 0x413a7e8
	bool IsJumpProvidingForce();// 0x413a7b8
	AnimMontage* GetCurrentMontage();// 0x413a790
	Vector GetBaseTranslationOffset();// 0x413a76c
	Rotator GetBaseRotationOffsetRotator();// 0x413a708
	float GetAnimRootMotionTranslationScale();// 0x413a6e0
	void Crouch(bool bClientSimulation);// 0x413a658
	void ClientCheatWalk();// 0x1f863fc
	void ClientCheatGhost();// 0x413a63c
	void ClientCheatFly();// 0x20cd3f4
	bool CanJumpInternal();// 0x413a60c
	bool CanJump();// 0x413a5e4
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x413a51c

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x6a0, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a4, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6ac, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x6b0, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6bc, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x6f4, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x700, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x720, Size: 4]
	enum UseAsyncScene;//[Offset: 0x724, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x725, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x726, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x727, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x728, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x728, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x728, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x728, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x728, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x728, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x72c, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x738, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x738, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x738, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x738, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x738, Size: 1]
	float ClothBlendWeight;//[Offset: 0x73c, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x744, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x750, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x750, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x752, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x754, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x759, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x759, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x759, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x759, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x759, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x759, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x759, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x759, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x75a, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x75c, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x76c, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x838, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x83c, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x840, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x930, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0x9c4, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0x9c8, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9cc, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9cc, Size: 1]
	float DefaultPosition;//[Offset: 0x9d0, Size: 4]
	float DefaultPlayRate;//[Offset: 0x9d4, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0x9d8, Size: 4]
	float LastPoseTickTime;//[Offset: 0x9dc, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0a, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x424f704
	void SuspendClothingSimulation();// 0x424f6f0
	void Stop();// 0x424f6dc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x424f5cc
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x1e54e6c
	void SetTeleportRotationThreshold(float Threshold);// 0x424f554
	void SetTeleportDistanceThreshold(float Threshold);// 0x424f4dc
	void SetPosition(float InPos, bool bFireNotifies);// 0x424f418
	void SetPlayRate(float Rate);// 0x424f3a0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x424f328
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x424f204
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x424f0f0
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x424f070
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x424ef54
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x424ee8c
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x424ee0c
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x424ed40
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x424ec24
	void SetClothMaxDistanceScale(float Scale);// 0x424ebac
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x424eadc
	void SetAnimInstanceClass(class Object NewClass);// 0x424ea64
	void SetAnimationMode(byte InAnimationMode);// 0x424e9ec
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x424e974
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x424e820
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x424e704
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x424e684
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x424e564
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x424e444
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x424e2f4
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x424e274
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x424e1b0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x424e084
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x424df10
	void ResumeClothingSimulation();// 0x424defc
	void ResetClothTeleportMode();// 0x424dee8
	void ResetAllowedAnimCurveEvaluation();// 0x424ded4
	void ResetAllBodiesSimulatePhysics();// 0x424dec0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x424ddfc
	void Play(bool bLooping);// 0x424dd7c
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x424dbd4
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x424d9e8
	bool IsPlaying();// 0x424d9c0
	bool IsClothingSimulationSuspended();// 0x424d998
	bool IsBodyGravityEnabled(FName BoneName);// 0x424d918
	float GetTeleportRotationThreshold();// 0x424d8f0
	float GetTeleportDistanceThreshold();// 0x424d8f0
	AnimInstance*[] GetSubAnimInstances();// 0x424d830
	Vector GetSkeletalCenterOfMass();// 0x424d7e8
	AnimInstance* GetPostProcessInstance();// 0x424d7c0
	float GetPosition();// 0x424d798
	float GetPlayRate();// 0x424d770
	float GetMorphTarget(FName MorphTargetName);// 0x424d6f0
	bool GetDisableAnimCurves();// 0x424d6cc
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x424d54c
	float GetClothMaxDistanceScale();// 0x424d524
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x424d450
	AnimInstance* GetAnimInstance();// 0x424d428
	byte GetAnimationMode();// 0x424d400
	bool GetAllowedAnimCurveEvaluate();// 0x424d3e0
	void ForceClothNextUpdateTeleportAndReset();// 0x424d3cc
	void ForceClothNextUpdateTeleport();// 0x424d3b8
	FName FindConstraintBoneName(int ConstraintIndex);// 0x424d330
	void ClearMorphTargets();// 0x424d31c
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x424d20c
	void BindClothToMasterPoseComponent();// 0x424d1f8
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x424d12c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x424cfc4
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x424ce5c
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x424cd3c

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x594, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x598, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e4, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x600, Size: 4]
	int ForcedLodModel;//[Offset: 0x604, Size: 4]
	int MinLodModel;//[Offset: 0x608, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x618, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x624, Size: 4]
	Color WireframeColor;//[Offset: 0x628, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62c, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62c, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x62c, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x62c, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63c, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x63c, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x63c, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x63d, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63e, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63f, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x63f, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64c, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64c, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x64d, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64e, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64e, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x650, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x654, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x66c, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68b, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x4253358
	void UnHideBoneByName(FName BoneName);// 0x42532e0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x425311c
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4252f58
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x4252e48
	bool SetSkinWeightProfile(FName InProfileName);// 0x4252dc8
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4252cb8
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x4225ac8
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x4252bec
	void SetMinLOD(int InNewMinLOD);// 0x4252b74
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x4252afc
	void SetForcedLOD(int InNewForcedLOD);// 0x4252a84
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x4252a04
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4252984
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x425290c
	bool IsUsingSkinWeightProfile();// 0x42528ec
	bool IsBoneHiddenByName(FName BoneName);// 0x425286c
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x42527a8
	FName GetSocketBoneName(FName InSocketName);// 0x425271c
	FName GetParentBone(FName BoneName);// 0x4252690
	int GetNumLODs();// 0x4252668
	int GetNumBones();// 0x4252640
	FName GetCurrentSkinWeightProfileName();// 0x425261c
	FName GetBoneName(int BoneIndex);// 0x4252594
	int GetBoneIndex(FName BoneName);// 0x4252514
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x425239c
	void ClearVertexColorOverride(int LODIndex);// 0x4252324
	void ClearSkinWeightProfile();// 0x1dd8bcc
	void ClearSkinWeightOverride(int LODIndex);// 0x42522ac
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x42521e0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x574, Size: 12]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x41f49d4
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x41f4910
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x41f47f4
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x41f471c
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x41f4650
	void SetLayerCastShadowEnable(bool Enable);// 0x41f45c8
	void SetCastShadow(bool NewCastShadow);// 0x41f4540
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x41f442c
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x41f43a4
	FName[] GetMaterialSlotNames();// 0x41f42dc
	MaterialInterface*[] GetMaterials();// 0x41f4214
	int GetMaterialIndex(FName MaterialSlotName);// 0x41f418c
	bool GetLayerVisibilityValue(byte Layer);// 0x41f4104
	bool GetLayerCastShadowValue(byte Layer);// 0x41f407c

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x34, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x50, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x6c, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x78, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x84, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xb0, Size: 12]
	MaterialInterface* ReplaceMaterialInterface;//[Offset: 0xbc, Size: 4]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc0, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0xcc, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0xcd, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd0, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdc, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdc, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xdc, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xdc, Size: 1]
	BodySetup* BodySetup;//[Offset: 0xe0, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe4, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xe8, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xec, Size: 12]
	MorphTarget*[] MorphTargets;//[Offset: 0xf8, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x214, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x220, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x224, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x230, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x240, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x258, Size: 12]
	int NumSockets();// 0x424b55c
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x424b490
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x424b410
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x424b390
	BoxSphereBounds GetImportedBounds();// 0x424b33c
	BoxSphereBounds GetBounds();// 0x424b2e8
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x424b20c
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x424b18c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x42511c4
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4251134

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x41f1bd8
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x41f1a70
	PhysicalMaterial* GetPhysicalMaterial();// 0x246bb6c
	Material* GetBaseMaterial();// 0x41f1a48

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float Density;//[Offset: 0x2c, Size: 4]
	float RaiseMassToPower;//[Offset: 0x30, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38, Size: 4]
	byte SurfaceType;//[Offset: 0x3c, Size: 1]
	float TireFrictionScale;//[Offset: 0x40, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44, Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d2, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d3, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d4, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d4, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d4, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d4, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d4, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d4, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d4, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d4, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d5, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	float MaxDisplacement;//[Offset: 0x7d8, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7dc, Size: 1]
	int EditorX;//[Offset: 0x7e0, Size: 4]
	int EditorY;//[Offset: 0x7e4, Size: 4]
	int EditorPitch;//[Offset: 0x7e8, Size: 4]
	int EditorYaw;//[Offset: 0x7ec, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f0, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x7fc, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x808, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x814, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x814, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x814, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x814, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x814, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x814, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x814, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x815, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x815, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x818, Size: 4]
	byte BlendableLocation;//[Offset: 0x81c, Size: 1]
	int BlendablePriority;//[Offset: 0x820, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	byte RefractionMode;//[Offset: 0x825, Size: 1]
	float RefractionDepthBias;//[Offset: 0x828, Size: 4]
	Guid stateID;//[Offset: 0x82c, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8d4, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	byte CompressionSettings;//[Offset: 0x4d, Size: 1]
	byte Filter;//[Offset: 0x4e, Size: 1]
	byte LODGroup;//[Offset: 0x4f, Size: 1]
	byte CrunchSetting;//[Offset: 0x50, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x54, Size: 4]
	byte BasisSetting;//[Offset: 0x58, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204, Size: 532]
	FName[] RemovedBones;//[Offset: 0x418, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430, Size: 4]
	FString SourceImportFilename;//[Offset: 0x434, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSize;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSize;//[Offset: 0x9c, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x108, Size: 1]
	byte RefPoseType;//[Offset: 0x109, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x10c, Size: 4]
	int RefFrameIndex;//[Offset: 0x110, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x114, Size: 4]
	FName RetargetSource;//[Offset: 0x118, Size: 8]
	enum Interpolation;//[Offset: 0x120, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x122, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x128, Size: 12]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x411b8a8

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	FName SyncGroup;//[Offset: 0xe0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float blendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x4146c10

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x414664c
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x414656c

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x29fa2f4
	FString GetNotifyName();// 0x41198e0

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x29fa2f4
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x29fa2f4
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x29fa2f4
	FString GetNotifyName();// 0x41198e0

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 4]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x60, Size: 12]
	byte CollisionReponse;//[Offset: 0x6c, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x70, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x7c, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x88, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0x94, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xa0, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xac, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xb0, Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1f0, Size: 16]
	float BuildScale;//[Offset: 0x200, Size: 4]
	Vector BuildScale3D;//[Offset: 0x204, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: StaticMesh.Object
	MaterialInterface* ReplaceMaterial;//[Offset: 0x28, Size: 4]
	int MinLOD;//[Offset: 0x2c, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c, Size: 12]
	float LightmapUVDensity;//[Offset: 0x48, Size: 4]
	int LightMapResolution;//[Offset: 0x4c, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x50, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x54, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5c, Size: 4]
	int LODForCollision;//[Offset: 0x60, Size: 4]
	float CullingScreenSize;//[Offset: 0x64, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa4, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd4, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xe8, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xf4, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x100, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x11c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x128, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x138, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x13c, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x148, Size: 4]
	int GetNumSections(int InLOD);// 0x42652e4
	int GetNumLODs();// 0x42652bc
	int GetMaterialIndex(FName MaterialSlotName);// 0x426523c
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x42651bc
	BoxSphereBounds GetBounds();// 0x4265168
	Box GetBoundingBox();// 0x4265114

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 4]
	float MassInKgOverride;//[Offset: 0x64, Size: 4]
	float LinearDamping;//[Offset: 0x68, Size: 4]
	float AngularDamping;//[Offset: 0x6c, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 12]
	Vector COMNudge;//[Offset: 0x7c, Size: 12]
	float MassScale;//[Offset: 0x88, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 12]
	byte ObjectType;//[Offset: 0x98, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x29c, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x4147e80

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x4146ff8

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x4113c08
	Pawn* TryGetPawnOwner();// 0x1f1c068
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x4113b4c
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4113a34
	void SetRootMotionMode(byte Value);// 0x41139b4
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x41138f0
	void SavePoseSnapshot(FName SnapshotName);// 0x4113870
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x41135f8
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x4113410
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x4113354
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x4113298
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x41131dc
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x41130d4
	void Montage_Resume(const AnimMontage* Montage);// 0x411305c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x20c7b6c
	void Montage_Pause(const AnimMontage* Montage);// 0x4112fe4
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x4112f28
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x4112e6c
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x4112dec
	bool Montage_IsActive(const AnimMontage* Montage);// 0x4112d6c
	float Montage_GetPosition(const AnimMontage* Montage);// 0x4112cec
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x4112c6c
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x4112b94
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x4112b14
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x4112a8c
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x4112a0c
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x411293c
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x41127cc
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x4112708
	bool IsAnyMontagePlaying();// 0x41126e0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x4112614
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x41124e4
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x411244c
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x4112388
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x41122c4
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x4112200
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x411213c
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x4112078
	SkeletalMeshComponent* GetOwningComponent();// 0x4112050
	Actor* GetOwningActor();// 0x4112028
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x4111f64
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x4111ea0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x4111ddc
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x4111d18
	float GetInstanceMachineWeight(int MachineIndex);// 0x4111c98
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x4111c18
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x4111b98
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x4111b18
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x4111a98
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x4111a18
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x4111998
	float GetCurveValue(FName CurveName);// 0x4111918
	FName GetCurrentStateName(int MachineIndex);// 0x4111890
	AnimMontage* GetCurrentActiveMontage();// 0x4111868
	void ClearMorphTargets();// 0x4111854
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x4111774
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x29fa2f4
	void BlueprintPostEvaluateAnimation();// 0x29fa2f4
	void BlueprintInitializeAnimation();// 0x29fa2f4
	void BlueprintBeginPlay();// 0x29fa2f4

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float GravityScale;//[Offset: 0x134, Size: 4]
	float MaxStepHeight;//[Offset: 0x138, Size: 4]
	float JumpZVelocity;//[Offset: 0x13c, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144, Size: 4]
	float WalkableFloorZ;//[Offset: 0x148, Size: 4]
	byte MovementMode;//[Offset: 0x14c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d, Size: 1]
	float GroundFriction;//[Offset: 0x170, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c, Size: 4]
	float MaxFlySpeed;//[Offset: 0x180, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184, Size: 4]
	float MaxAcceleration;//[Offset: 0x188, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190, Size: 4]
	float BrakingFriction;//[Offset: 0x194, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8, Size: 4]
	float AirControl;//[Offset: 0x1ac, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4, Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc, Size: 4]
	float Buoyancy;//[Offset: 0x1c0, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8, Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0, Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4, Size: 4]
	float Mass;//[Offset: 0x1e8, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8, Size: 4]
	float PushForceFactor;//[Offset: 0x1fc, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200, Size: 4]
	float TouchForceFactor;//[Offset: 0x204, Size: 4]
	float MinTouchForce;//[Offset: 0x208, Size: 4]
	float MaxTouchForce;//[Offset: 0x20c, Size: 4]
	float RepulsionForce;//[Offset: 0x210, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c, Size: 4]
	Vector Acceleration;//[Offset: 0x220, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c, Size: 12]
	float AnalogInputModifier;//[Offset: 0x278, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x360, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x361, Size: 1]
	byte GroundMovementMode;//[Offset: 0x362, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x363, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x363, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x363, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x363, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x363, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x363, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x363, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x363, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x364, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x364, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x364, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x364, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x365, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x365, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x365, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x365, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x365, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x365, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x366, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x366, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x366, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x378, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x37c, Size: 12]
	int AvoidanceUID;//[Offset: 0x388, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x38c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x390, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x394, Size: 4]
	float AvoidanceWeight;//[Offset: 0x398, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x39c, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x448, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x44c, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x450, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x454, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x458, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x45c, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x460, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4a4, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4a8, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5d0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x610, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x413eaa4
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x413ea2c
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x413e968
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x413e8e4
	void SetGroupsToIgnore(int GroupFlags);// 0x1e7d6b0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x413e860
	void SetGroupsToAvoid(int GroupFlags);// 0x1e7d728
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x413e7dc
	void SetAvoidanceGroup(int GroupFlags);// 0x413e764
	void SetAvoidanceEnabled(bool bEnable);// 0x413e6e4
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x413e590
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x413e058
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x413db20
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x413d794
	float K2_GetWalkableFloorZ();// 0x413d76c
	float K2_GetWalkableFloorAngle();// 0x413d744
	float K2_GetModifiedMaxAcceleration();// 0x20d5cec
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x413d65c
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x413d49c
	bool IsWalking();// 0x413d46c
	bool IsWalkable(out const HitResult Hit);// 0x1fe440c
	float GetValidPerchRadius();// 0x413d444
	float GetPerchRadiusThreshold();// 0x413d41c
	PrimitiveComponent* GetMovementBase();// 0x413d3f4
	float GetMinAnalogSpeed();// 0x413d3c4
	float GetMaxJumpHeightWithJumpTime();// 0x413d394
	float GetMaxJumpHeight();// 0x413d364
	float GetMaxBrakingDeceleration();// 0x413d334
	float GetMaxAcceleration();// 0x20d5e04
	Vector GetImpartedMovementBaseVelocity();// 0x413d2e4
	Vector GetCurrentAcceleration();// 0x413d29c
	Character* GetCharacterOwner();// 0x20b9d2c
	float GetAnalogInputModifier();// 0x413d274
	void DisableMovement();// 0x413d258
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x413d018
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x413cc10
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x413c8ec
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x413c644
	void ClientAckGoodMove(float TimeStamp);// 0x2008a80
	void ClearAccumulatedForces();// 0x1e515cc
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x413c440
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x413c2e4
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x413c218
	void AddForce(Vector force);// 0x413c1a0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120, Size: 4]
	Vector K2_GetInputVector();// 0x4218070
	bool IsMoveInputIgnored();// 0x42180b8
	Vector GetPendingInputVector();// 0x4218070
	Pawn* GetPawnOwner();// 0x2146f90
	Vector GetLastInputVector();// 0x4218028
	Vector ConsumeInputVector();// 0x4217fd8
	void AddInputVector(Vector WorldVector, bool bForce);// 0x1ebb058

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4, Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 1]
	MovementProperties MovementState;//[Offset: 0x114, Size: 4]
	void StopMovementKeepPathing();// 0x42001d0
	void StopActiveMovement();// 0x1e6a3e0
	bool IsSwimming();// 0x42001a0
	bool IsMovingOnGround();// 0x413d46c
	bool IsFlying();// 0x4200170
	bool IsFalling();// 0x4123784
	bool IsCrouching();// 0x25f837c

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0, Size: 4]
	Vector Velocity;//[Offset: 0xc8, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 1]
	void StopMovementImmediately();// 0x1efd8a0
	void SnapUpdatedComponentToPlane();// 0x1fb1958
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x25e9f20
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x41f74a8
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x41f7430
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x41f7368
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x41f72e0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x41f7260
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x1fabb28
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x41f709c
	float K2_GetModifiedMaxSpeed();// 0x41f706c
	float K2_GetMaxSpeedModifier();// 0x41f703c
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x41f6fb4
	Vector GetPlaneConstraintOrigin();// 0x41f6f80
	Vector GetPlaneConstraintNormal();// 0x41f6f4c
	enum GetPlaneConstraintAxisSetting();// 0x41f6f30
	PhysicsVolume* GetPhysicsVolume();// 0x1f078d8
	float GetMaxSpeed();// 0x41f6f00
	float GetGravityZ();// 0x41f6ed0
	Vector ConstrainNormalToPlane(Vector Normal);// 0x41f6e34
	Vector ConstrainLocationToPlane(Vector Location);// 0x41f6d98
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x41f6cfc

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2cc, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x2d0, Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x320, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x320, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x320, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x320, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x321, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x324, Size: 4]
	uint32 DataVersion;//[Offset: 0x328, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3b4, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18, Size: 8]
	Color Color;//[Offset: 0x20, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2f4, Size: 4]
	int Priority;//[Offset: 0x2f8, Size: 4]
	float FluidFriction;//[Offset: 0x2fc, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2cc, Size: 1]
	Color BrushColor;//[Offset: 0x2d0, Size: 4]
	int PolyFlags;//[Offset: 0x2d4, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8, Size: 1]
	Model* Brush;//[Offset: 0x2dc, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x2e0, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x2e8, Size: 12]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x574, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x578, Size: 4]
	Vector PrePivot;//[Offset: 0x57c, Size: 12]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 136]

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x584, Size: 4]
	float CapsuleRadius;//[Offset: 0x588, Size: 4]
	float CapsuleHeight;//[Offset: 0x58c, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x41394cc
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x4139404
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x413933c
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4139250
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x413916c
	float GetUnscaledCapsuleRadius();// 0x4139150
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x413911c
	float GetUnscaledCapsuleHalfHeight();// 0x4139100
	float GetShapeScale();// 0x4139090
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4138f38
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4138de8
	float GetScaledCapsuleRadius();// 0x4138d68
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4138cd8
	float GetScaledCapsuleHalfHeight();// 0x4138c58

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x574, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x578, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57c, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57c, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57c, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x580, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2cc, Size: 4]
	byte Ping;//[Offset: 0x2d0, Size: 1]
	FString PlayerName;//[Offset: 0x2d4, Size: 12]
	int PlayerID;//[Offset: 0x2ec, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 1]
	int StartTime;//[Offset: 0x2f4, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f8, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x300, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x30c, Size: 12]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x29fa2f4
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x29fa2f4
	void OnRep_UniqueId();// 0x1e30268
	void OnRep_Score();// 0x1dcbc3c
	void OnRep_PlayerName();// 0x1e2df90
	void OnRep_bIsInactive();// 0x1dd37a8

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x318, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x320, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x324, Size: 4]
	HUD* MyHUD;//[Offset: 0x32c, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x330, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x334, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x33c, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x354, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x358, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x364, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x374, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x378, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x384, Size: 12]
	int ClientCap;//[Offset: 0x390, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x394, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x398, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x39c, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3a0, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40e, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x40f, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x43c, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x440, Size: 4]
	float InputYawScale;//[Offset: 0x450, Size: 4]
	float InputPitchScale;//[Offset: 0x454, Size: 4]
	float InputRollScale;//[Offset: 0x458, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x45c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x460, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x464, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4f8, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4fc, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x508, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x54c, Size: 4]
	Vector SpawnLocation;//[Offset: 0x550, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x562, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x564, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x422b354
	bool WasInputKeyJustPressed(Key Key);// 0x422b060
	void ToggleSpeaking(bool bInSpeaking);// 0x422afd8
	void SwitchLevel(FString URL);// 0x2604f34
	void StopHapticEffect(enum Hand);// 0x422af60
	void StartFire(byte FireModeNum);// 0x422aee0
	void SetVirtualJoystickVisibility(bool bVisible);// 0x422ae58
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x422acb8
	void SetName(FString S);// 0x422abf4
	void SetMouseLocation(const int X, const int Y);// 0x422ab38
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x422aa7c
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x422a97c
	void SetControllerLightColor(Color Color);// 0x422a90c
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x422a740
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x422a634
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x422a524
	void ServerViewPrevPlayer();// 0x422a4c8
	void ServerViewNextPlayer();// 0x422a46c
	void ServerVerifyViewTarget();// 0x422a410
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x422a304
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x422a200
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x4229ce4
	void ServerToggleAILogging();// 0x4229c88
	void ServerShortTimeout();// 0x4229c2c
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x4229b64
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4229a4c
	void ServerRestartPlayer();// 0x42299f0
	void ServerPause();// 0x4229994
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x42298f0
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x42293d4
	void ServerCheckClientPossessionReliable();// 0x4229378
	void ServerCheckClientPossession();// 0x422931c
	void ServerChangeName(FString S);// 0x4229228
	void ServerCamera(FName NewMode);// 0x4229174
	void ServerAcknowledgePossession(Pawn* P);// 0x42290c0
	void SendToConsole(FString Command);// 0x4228ffc
	void RestartLevel();// 0x4228fe0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x4228ec0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4228d70
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x4228a90
	void Pause();// 0x4228a6c
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x42289e4
	void LocalTravel(FString URL);// 0x4228920
	bool IsInputKeyDown(Key Key);// 0x422862c
	void GetViewportSize(out int SizeX, out int SizeY);// 0x422854c
	SpectatorPawn* GetSpectatorPawn();// 0x4228530
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x4228448
	Vector GetInputVectorKeyState(Key Key);// 0x4228144
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4227fc4
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4227ee4
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x4227d60
	float GetInputKeyTimeDown(Key Key);// 0x4227a68
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4227944
	float GetInputAnalogKeyState(Key Key);// 0x422764c
	HUD* GetHUD();// 0x4227624
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4227450
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x42272d4
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4227158
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4226fc8
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4226e90
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4226d58
	Vector GetFocalLocation();// 0x207d224
	void FOV(float NewFOV);// 0x2603ae8
	void EnableCheats();// 0x4226d3c
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x4226bd0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4226af0
	void ConsoleKey(Key Key);// 0x42267fc
	void ClientWasKicked(const FText KickReason);// 0x4226668
	void ClientVoiceHandshakeComplete();// 0x260457c
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x42264b0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x4226144
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4225f94
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4225df4
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4225c58
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4225b94
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4225ac8
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x4225a48
	void ClientStartOnlineSession();// 0x205837c
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x1feccec
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4225940
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x42258b8
	void ClientSetHUD(class HUD NewHUDClass);// 0x1f80a04
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x42257b0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x4225634
	void ClientSetCameraMode(FName NewCamMode);// 0x42255b4
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x4225410
	void ClientSetBlockOnAsyncLoading();// 0x42253f4
	void ClientReturnToMainMenu(FString ReturnReason);// 0x4225330
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x42252b0
	void ClientRestart(Pawn* NewPawn);// 0x4225230
	void ClientReset();// 0x4225214
	void ClientRepObjRef(Object* Object);// 0x4225194
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x4224ffc
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4224ea0
	void ClientPrepareMapChange(FName levelName, bool bFirst, bool bLast);// 0x4224d7c
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x4224c28
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x4224b20
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x42249b4
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4224860
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4224590
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x4224224
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x42240d0
	void ClientIgnoreMoveInput(bool bIgnore);// 0x4224048
	void ClientIgnoreLookInput(bool bIgnore);// 0x4223fc0
	void ClientGotoState(FName NewState);// 0x4223f40
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x4223e74
	void ClientForceGarbageCollection();// 0x2603ab0
	void ClientFlushLevelStreaming();// 0x4223e60
	void ClientEndOnlineSession();// 0x20580d0
	void ClientEnableNetworkVoice(bool bEnable);// 0x4223dd8
	void ClientCommitMapChange();// 0x2603acc
	void ClientClearCameraLensEffects();// 0x4223dbc
	void ClientCapBandwidth(int Cap);// 0x4223d3c
	void ClientCancelPendingMapChange();// 0x4223d20
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x4223c14
	void ClearAudioListenerOverride();// 0x4223c00
	void Camera(FName NewMode);// 0x4223b80
	void AddYawInput(float Val);// 0x4223b00
	void AddRollInput(float Val);// 0x4223a80
	void AddPitchInput(float Val);// 0x4223a00
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x2075cec

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2cc, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x2d4, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x2e8, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x2f4, Size: 12]
	Canvas* Canvas;//[Offset: 0x300, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x304, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x308, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x314, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x318, Size: 4]
	Actor* UpdateShowDebugTargetActor();// 0x29fa2f4
	void ShowHUD();// 0x1dcbc3c
	void ShowDebugToggleSubCategory(FName Category);// 0x417a230
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x417a1b8
	void ShowDebugForMoifiedTargetActor();// 0x417a1a4
	void ShowDebug(FName DebugType);// 0x417a124
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x417a060
	void RemoveAllDebugStrings();// 0x417a04c
	void ReceiveHitBoxRelease(const FName BoxName);// 0x29fa2f4
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x29fa2f4
	void ReceiveHitBoxClick(const FName BoxName);// 0x29fa2f4
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x29fa2f4
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x29fa2f4
	Vector Project(Vector Location);// 0x4179fb8
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x4179dbc
	PlayerController* GetOwningPlayerController();// 0x1e88ac8
	Pawn* GetOwningPawn();// 0x4179d94
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x4179b3c
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x41799a4
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x417952c
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x41792b4
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x4179118
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x4178d94
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x4178b6c
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4178794
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x41785b0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x417844c
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x41782b0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x4177ec0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4137d2c
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4137c1c
	Vector K2_Project(Vector WorldLocation);// 0x4137b88
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x41379e4
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4137710
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4137308
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4137174
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4136fd0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4136db8
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4136c60
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x4136b60
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4136640
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4136524

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa0, Size: 4]
	int LevelIndex;//[Offset: 0xa4, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xa8, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xac, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xb8, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2, Size: 1]
	byte AddressX;//[Offset: 0xc3, Size: 1]
	byte AddressY;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x426ad34
	int Blueprint_GetSizeX();// 0x426ad0c

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc, Size: 12]
	float ScalingFactor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2cc, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2d0, Size: 4]
	float DefaultFOV;//[Offset: 0x2e0, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x2e8, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x2f0, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x340, Size: 1424]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8d0, Size: 1424]
	TViewTarget ViewTarget;//[Offset: 0xe60, Size: 1440]
	TViewTarget PendingViewTarget;//[Offset: 0x1400, Size: 1440]
	CameraModifier*[] ModifierList;//[Offset: 0x19b4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19c0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19cc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x19d0, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x19dc, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x19f8, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1a04, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1a08, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a28, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a40, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a4c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a58, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a5c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a5c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a5c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a5d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a60, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a64, Size: 4]
	float ViewYawMin;//[Offset: 0x1a68, Size: 4]
	float ViewYawMax;//[Offset: 0x1a6c, Size: 4]
	float ViewRollMin;//[Offset: 0x1a70, Size: 4]
	float ViewRollMax;//[Offset: 0x1a74, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4221268
	void StopCameraFade();// 0x1e513f4
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x422119c
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x42210d0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x4221004
	void StopAllCameraShakes(bool bImmediately);// 0x4220f7c
	void StopAllCameraAnims(bool bImmediate);// 0x4220ef4
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4220d08
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4220bf4
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x416389c
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x1e4e080
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4220a98
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4220774
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x422060c
	void OnPhotographySessionStart();// 0x1e30268
	void OnPhotographySessionEnd();// 0x1dd37a8
	void OnPhotographyMultiPartCaptureStart();// 0x1e2df90
	void OnPhotographyMultiPartCaptureEnd();// 0x1dcbc3c
	PlayerController* GetOwningPlayerController();// 0x42205dc
	float GetFOVAngle();// 0x413d364
	Rotator GetCameraRotation();// 0x4220594
	Vector GetCameraLocation();// 0x422054c
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x42204c4
	void ClearCameraLensEffects();// 0x42204a8
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x29fa2f4
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4220420
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4220398

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1328]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x570, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	float AutoExposureBias;//[Offset: 0x318, Size: 4]
	float HistogramLogMin;//[Offset: 0x31c, Size: 4]
	float HistogramLogMax;//[Offset: 0x320, Size: 4]
	float LensFlareIntensity;//[Offset: 0x324, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x328, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x338, Size: 4]
	int LensFlareCount;//[Offset: 0x33c, Size: 4]
	float LensFlareThreshold;//[Offset: 0x340, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x344, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x348, Size: 16]
	float VignetteIntensity;//[Offset: 0x3c8, Size: 4]
	float GrainJitter;//[Offset: 0x3cc, Size: 4]
	float GrainIntensity;//[Offset: 0x3d0, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3d4, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3d8, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3dc, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3e8, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3ec, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x404, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x408, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x418, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x41c, Size: 4]
	float SRTOcclusionContrast;//[Offset: 0x420, Size: 4]
	float SRTOcclusionExponent;//[Offset: 0x424, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x428, Size: 4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x42c, Size: 4]
	float SRTSpecularMinOcclusion;//[Offset: 0x430, Size: 4]
	LinearColor SRTOcclusionTint;//[Offset: 0x434, Size: 16]
	float SRTFilterSmoothness;//[Offset: 0x444, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x448, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x458, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x45c, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x460, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x464, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x465, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x468, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x470, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x474, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x478, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x480, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x484, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x488, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x490, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x494, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x498, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a8, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4ac, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4b0, Size: 4]
	float MotionBlurMax;//[Offset: 0x4b4, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 4]
	float LPVSize;//[Offset: 0x4c4, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f0, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f4, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f8, Size: 4]
	float LPVFadeRange;//[Offset: 0x4fc, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x500, Size: 4]
	float ScreenPercentage;//[Offset: 0x504, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x508, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x514, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x518, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x51c, Size: 4]
	Object*[] Blendables;//[Offset: 0x520, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]
	PlayerState* PlayerState;//[Offset: 0x590, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x1ed133c
	Actor* GetViewTarget();// 0x1dcdf68
	void EnableModifier();// 0x1fc7f20
	void DisableModifier(bool bImmediate);// 0x413470c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x29fa2f4
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x29fa2f4

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x304, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x308, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x30c, Size: 4]
	Transform RelativeTransform;//[Offset: 0x310, Size: 48]
	float BaseFOV;//[Offset: 0x340, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x348, Size: 12]
	float DistFromCamera;//[Offset: 0x354, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2cc, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x2d4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x2e0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x2ec, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x2f8, Size: 12]
	void ToggleActive();// 0x415424c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x415418c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x1e2e074
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x41540d0
	void SetFloatParameter(FName ParameterName, float Param);// 0x415400c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4153f44
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4153e88
	void OnRep_bCurrentlyActive();// 0x1e2df90
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x1dc7034
	bool IsActive();// 0x4153e60
	void Deactivate();// 0x4153e4c
	void Activate();// 0x4153e38

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmupTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	byte LODMethod;//[Offset: 0x4d, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	float Delay;//[Offset: 0x94, Size: 4]
	float DelayLow;//[Offset: 0x98, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0, Size: 12]
	float MacroUVRadius;//[Offset: 0xbc, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe0, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xec, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x42133f0

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	byte SortMode;//[Offset: 0x49, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 1]
	float EmitterDuration;//[Offset: 0x4c, Size: 4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	int EmitterLoops;//[Offset: 0x58, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 12]
	float EmitterDelay;//[Offset: 0x94, Size: 4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	float RandomImageTime;//[Offset: 0xac, Size: 4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 12]
	float MacroUVRadius;//[Offset: 0xc4, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd4, Size: 4]
	byte BoundingMode;//[Offset: 0xd8, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xd9, Size: 1]
	float AlphaThreshold;//[Offset: 0xdc, Size: 4]
	int CutoutSubImagesX;//[Offset: 0xe0, Size: 4]
	int CutoutSubImagesY;//[Offset: 0xe4, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe8, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xec, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x114, Size: 12]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 1]
	FName EventName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x574, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x578, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x584, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x590, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x591, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x591, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x591, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x591, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x592, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x592, Size: 1]
	byte LODMethod;//[Offset: 0x594, Size: 1]
	enum RequiredSignificance;//[Offset: 0x595, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x598, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x5a4, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x5b0, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x5bc, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x5c8, Size: 12]
	Vector OldPosition;//[Offset: 0x5d4, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x5e0, Size: 12]
	float WarmupTime;//[Offset: 0x5ec, Size: 4]
	float WarmupTickRate;//[Offset: 0x5f0, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x5f8, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x600, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x620, Size: 12]
	float CustomTimeDilation;//[Offset: 0x634, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x678, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x680, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x688, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x689, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x68a, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x6b4, Size: 12]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4215d40
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4215be8
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4215b70
	void SetSocketName(FName InSocketName);// 0x4215af8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4215a3c
	void SetLODLevel(int InLODLevel);// 0x42159bc
	void SetFloatParameter(FName ParameterName, float Param);// 0x42158f8
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4215824
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x421575c
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4215650
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4215548
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x421543c
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4215330
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4215228
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x421511c
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x4215058
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x4214f28
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4214d84
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4214cc8
	int GetNumActiveParticles();// 0x4214ca0
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4214c18
	int GetLODLevel();// 0x4214be8
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x4214acc
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x42149ac
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x4214890
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4214774
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4214654
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4214538
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x4214460
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x42142c0
	void EndTrails();// 0x42142ac
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x42141e0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4214088

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x41f1308
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x41f124c
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x41f1188
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x41f1088
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x41f0ff8
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x41f0f78
	float K2_GetScalarParameterValue(FName ParameterName);// 0x41f0ef8
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x41f0e80
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x41f0e08
	void CopyInterpParameters(MaterialInstance* Source);// 0x41f0d90

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x5c, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x68, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x74, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x80, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x8c, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf0, Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float ShakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x29fa2f4
	void ReceivePlayShake(float Scale);// 0x29fa2f4
	bool ReceiveIsFinished();// 0x1e65bd4
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x29fa2f4

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1328]
	float BasePostProcessBlendWeight;//[Offset: 0x580, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x41331b4
	void SetScale(float NewDuration);// 0x1f1a90c
	void SetDuration(float NewDuration);// 0x413313c
	void SetCurrentTime(float NewTime);// 0x41330c4

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2cc, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x2d0, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x2d4, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	float AspectRatio;//[Offset: 0x2e4, Size: 4]
	float FOVAngle;//[Offset: 0x2e8, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x2ec, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 1328]
	int GetAutoActivatePlayerIndex();// 0x4132b14

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x260, Size: 4]
	float OrthoWidth;//[Offset: 0x264, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x268, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x26c, Size: 4]
	float AspectRatio;//[Offset: 0x270, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274, Size: 1]
	byte ProjectionMode;//[Offset: 0x275, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x278, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280, Size: 1328]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fc, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4133bbc
	void SetProjectionMode(byte InProjectionMode);// 0x4133b48
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4133ad4
	void SetOrthoWidth(float InOrthoWidth);// 0x4133a60
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x41339ec
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4133978
	void SetFieldOfView(float InFieldOfView);// 0x1f0fd70
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x41338f0
	void SetAspectRatio(float InAspectRatio);// 0x413387c
	void SetActive(bool bNewActive, bool bReset);// 0x410ac6c
	void RemoveBlendable(interface classByteProperty InBlendableObject);// 0x413378c
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x1f481c0
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x4133714
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x41335e4

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x1fc7f20
	void ViewSelf();// 0x1e1a3ac
	void ViewPlayer(FString S);// 0x4140e7c
	void ViewClass(class Actor DesiredClass);// 0x20621ec
	void ViewActor(FName actorName);// 0x1de8c70
	void TriggerCrash();// 0x4140e68
	void ToggleDebugCamera();// 0x4140e4c
	void ToggleAILogging();// 0x1de8338
	void TestCollisionDistance();// 0x1e77e24
	void Teleport();// 0x1f53e9c
	void Summon(FString ClassName);// 0x4140d88
	void StreamLevelOut(FName PackageName);// 0x4140d08
	void StreamLevelIn(FName PackageName);// 0x4140c88
	void Slomo(float NewTimeDilation);// 0x4140c08
	void SetWorldOrigin();// 0x4140bf4
	void SetNavDrawDistance(float DrawDistance);// 0x4140b7c
	void SetMouseSensitivityToDefault();// 0x4140b68
	void ServerToggleAILogging();// 0x4140b0c
	void ReceiveInitCheatManager();// 0x29fa2f4
	void ReceiveEndPlay();// 0x29fa2f4
	void RebuildNavigation();// 0x4140af0
	void PlayersOnly();// 0x1debe7c
	void OnlyLoadLevel(FName PackageName);// 0x1ff138c
	void LogLoc();// 0x4140ad4
	void InvertMouse();// 0x4140ac0
	void God();// 0x1e8fce8
	void Ghost();// 0x1e90bf0
	void FreezeFrame(float Delay);// 0x1dee38c
	void Fly();// 0x1debe60
	void FlushLog();// 0x4140aa4
	void EnableDebugCamera();// 0x4140a88
	void DumpVoiceMutingState();// 0x2172cfc
	void DumpPartyState();// 0x4140a6c
	void DumpOnlineSessionState();// 0x4140a50
	void DumpChatState();// 0x2172c30
	void DisableDebugCamera();// 0x4140a34
	void DestroyTarget();// 0x1dec2a0
	void DestroyPawns(class Pawn aClass);// 0x41409b4
	void DestroyAllPawnsExceptTarget();// 0x4140998
	void DestroyAll(class Actor aClass);// 0x3653e1c
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x41408d4
	void DebugCapsuleSweepPawn();// 0x41408b8
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x1ff15b4
	void DebugCapsuleSweepClear();// 0x414089c
	void DebugCapsuleSweepChannel(byte Channel);// 0x1ff1700
	void DebugCapsuleSweepCapture();// 0x4140880
	void DebugCapsuleSweep();// 0x1de8d8c
	void DamageTarget(float DamageAmount);// 0x4140800
	void CheatScript(FString ScriptName);// 0x41406a8
	void ChangeSize(float F);// 0x1fc7214
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x41404ac
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x41402cc
	void BugIt(FString ScreenShotDescription);// 0x4140208

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 4]
	float SpeedScale;//[Offset: 0x584, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x588, Size: 4]
	float InitialAccel;//[Offset: 0x58c, Size: 4]
	float InitialDecel;//[Offset: 0x590, Size: 4]
	void ToggleDisplay();// 0x4149c30
	void ShowDebugSelectedInfo();// 0x4149c14
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4149b9c
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x29fa2f4
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x29fa2f4
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x29fa2f4
	Actor* GetSelectedActor();// 0x4149b74

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x574, Size: 4]
	float FrustumAngle;//[Offset: 0x578, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x57c, Size: 4]
	float FrustumStartDist;//[Offset: 0x580, Size: 4]
	float FrustumEndDist;//[Offset: 0x584, Size: 4]
	Texture* Texture;//[Offset: 0x588, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x422ecac
	void SetBind(FName BindName, FString Command);// 0x422eba4
	void InvertAxisKey(const Key AxisKey);// 0x422e8b8
	void InvertAxis(const FName AxisName);// 0x422e840
	void ClearSmoothing();// 0x422e82c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	Actor* ObserveTarget;//[Offset: 0x68, Size: 4]
	int MaxPacket;//[Offset: 0x6c, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xf0, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	Channel*[] ChannelsToTick;//[Offset: 0x294f0, Size: 12]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x2952c, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	float ConnectionTimeout;//[Offset: 0x54, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x64, Size: 12]
	World* World;//[Offset: 0x7c, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90, Size: 4]
	Property* RoleProperty;//[Offset: 0x94, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x404, Size: 60]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	Vector2D Center;//[Offset: 0x8, Size: 8]
	Vector2D VisualSize;//[Offset: 0x10, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x18, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x20, Size: 8]
	Vector2D InputScale;//[Offset: 0x28, Size: 8]
	Key MainInputKey;//[Offset: 0x30, Size: 16]
	Key AltInputKey;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x310, Size: 4]
	float BaseLookUpRate;//[Offset: 0x314, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x318, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x31c, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x320, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	void TurnAtRate(float Rate);// 0x414c22c
	void MoveUp_World(float Val);// 0x20a5d48
	void MoveRight(float Val);// 0x20a5b8c
	void MoveForward(float Val);// 0x20af8c4
	void LookUpAtRate(float Rate);// 0x414c1b4

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x584, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x425b294
	float GetUnscaledSphereRadius();// 0x4139100
	float GetShapeScale();// 0x4139090
	float GetScaledSphereRadius();// 0x4138c58

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x594, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x598, Size: 4]
	int PreviousLODLevel;//[Offset: 0x59c, Size: 4]
	int MinLOD;//[Offset: 0x5a0, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x5a4, Size: 4]
	byte TileLength;//[Offset: 0x5a8, Size: 1]
	byte TileNum;//[Offset: 0x5a9, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x5ac, Size: 4]
	Vector2D TileLocalMin;//[Offset: 0x5b0, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b8, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b8, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b8, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b8, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b8, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b8, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b8, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b9, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b9, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b9, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b9, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b9, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b9, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b9, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x5bc, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x5c0, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5c4, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5d0, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x5e0, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x61c, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x634, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x648, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x654, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x3825abc
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x4265f14
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x4265e9c
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x4265e24
	void SetForcedLodModel(int NewForcedLodModel);// 0x4265dac
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x1e836a4
	void SetDirty();// 0x4265d98
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x4265d20
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x4265c48

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf0, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x110, Size: 16]
	Margin Padding;//[Offset: 0x120, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x130, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x13c, Size: 12]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x148, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x154, Size: 4]
	int Priority;//[Offset: 0x158, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15c, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15c, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x160, Size: 12]
	InputComponent* InputComponent;//[Offset: 0x16c, Size: 4]
	void UnregisterInputComponent();// 0x367af40
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x29fa2f4
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x367ae74
	void StopListeningForAllInputActions();// 0x367ae60
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x367ade8
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x367ad28
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x367ac6c
	void SetPadding(Margin InPadding);// 0x367abe4
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x367ab6c
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x367aaf4
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x367aa38
	void SetInputActionPriority(int NewPriority);// 0x367a9c0
	void SetInputActionBlocking(bool bShouldBlock);// 0x367a940
	void SetForegroundColor(SlateColor InForegroundColor);// 0x367a620
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x367a5a0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x367a530
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x367a4b4
	void SetAnchorsInViewport(Anchors Anchors);// 0x367a42c
	void SetAlignmentInViewport(Vector2D Alignment);// 0x367a3bc
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x367a344
	void RemoveFromViewport();// 0x367a330
	void RegisterInputComponent();// 0x367a31c
	void PreConstruct(bool IsDesignTime);// 0x29fa2f4
	void PlaySound(SoundBase* SoundToPlay);// 0x367a2a4
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x367a0d0
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3679f40
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3679ec0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29fa2f4
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29fa2f4
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x29fa2f4
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29fa2f4
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x29fa2f4
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29fa2f4
	void OnPaint(out PaintContext Context);// 0x29fa2f4
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x29fa2f4
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	void OnMouseCaptureLost();// 0x29fa2f4
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x29fa2f4
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x29fa2f4
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29fa2f4
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29fa2f4
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x29fa2f4
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x29fa2f4
	void OnFocusLost(FocusEvent InFocusEvent);// 0x29fa2f4
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29fa2f4
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29fa2f4
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29fa2f4
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29fa2f4
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x29fa2f4
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29fa2f4
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3679e40
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1de8930
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x29fa2f4
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x29fa2f4
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3679cb0
	bool IsPlayingAnimation();// 0x3679c88
	bool IsListeningForInputAction(FName ActionName);// 0x3679c08
	bool IsInViewport();// 0x36799d4
	bool IsInteractable();// 0x29fa2f4
	bool IsAnyAnimationPlaying();// 0x3679be0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3679b60
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3679ae0
	Widget* GetWidgetFromName(out const FName Name);// 0x3679a4c
	Pawn* GetOwningPlayerPawn();// 0x3679a24
	PlayerController* GetOwningPlayer();// 0x1dcdf68
	LocalPlayer* GetOwningLocalPlayer();// 0x36799fc
	bool GetIsVisible();// 0x36799d4
	bool GetDontPaintWhenChildEmpty();// 0x36799ac
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x367992c
	Anchors GetAnchorsInViewport();// 0x36798e8
	Vector2D GetAlignmentInViewport();// 0x36798a8
	void Destruct();// 0x29fa2f4
	void Construct();// 0x29fa2f4
	void AddToViewport(int ZOrder);// 0x3679830
	bool AddToPlayerScreen(int ZOrder);// 0x36797b0

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d, Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e, Size: 1]
	byte Cursor;//[Offset: 0x9f, Size: 1]
	enum Clipping;//[Offset: 0xa0, Size: 1]
	enum Visibility;//[Offset: 0xa1, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa4, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc0, Size: 12]
	void SetVisibility(enum InVisibility);// 0x367f06c
	void SetUserFocus(PlayerController* PlayerController);// 0x367eff4
	void SetToolTipText(out const FText InToolTipText);// 0x367ee50
	void SetToolTip(Widget* Widget);// 0x367edd8
	void SetRenderTranslation(Vector2D Translation);// 0x367ed68
	void SetRenderTransformPivot(Vector2D Pivot);// 0x367ecf8
	void SetRenderTransform(WidgetTransform InTransform);// 0x367ec20
	void SetRenderShear(Vector2D Shear);// 0x367ebb0
	void SetRenderScale(Vector2D Scale);// 0x367eb40
	void SetRenderAngle(float Angle);// 0x367eac8
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x367e9c0
	void SetKeyboardFocus();// 0x367e9ac
	void SetIsEnabled(bool bInIsEnabled);// 0x1debb18
	void SetCursor(byte InCursor);// 0x367e934
	void SetClipping(enum InClipping);// 0x367e8bc
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x367e800
	void ResetCursor();// 0x367e7ec
	void RemoveFromParent();// 0x1f53e9c
	EventReply OnReply__DelegateSignature();// 0x29fa2f4
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29fa2f4
	bool IsVisible();// 0x367e7c4
	bool IsHovered();// 0x367e79c
	void InvalidateLayoutAndVolatility();// 0x367e788
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x367e708
	bool HasUserFocus(PlayerController* PlayerController);// 0x367e688
	bool HasMouseCapture();// 0x367e660
	bool HasKeyboardFocus();// 0x367e638
	bool HasFocusedDescendants();// 0x367e610
	bool HasAnyUserFocus();// 0x367e5e8
	Widget* GetWidget__DelegateSignature();// 0x29fa2f4
	enum GetVisibility();// 0x367e5c0
	Widget* GetTheTemplate();// 0x367e598
	FText GetText__DelegateSignature();// 0x29fa2f4
	enum GetSlateVisibility__DelegateSignature();// 0x29fa2f4
	SlateColor GetSlateColor__DelegateSignature();// 0x29fa2f4
	SlateBrush GetSlateBrush__DelegateSignature();// 0x29fa2f4
	PanelWidget* GetParent();// 0x367e570
	PlayerController* GetOwningPlayer();// 0x1dcdf68
	byte GetMouseCursor__DelegateSignature();// 0x29fa2f4
	LinearColor GetLinearColor__DelegateSignature();// 0x29fa2f4
	bool GetIsEnabled();// 0x367e548
	int GetInt32__DelegateSignature();// 0x29fa2f4
	float GetFloat__DelegateSignature();// 0x29fa2f4
	Vector2D GetDesiredSize();// 0x367e508
	enum GetClipping();// 0x367e4e0
	enum GetCheckBoxState__DelegateSignature();// 0x29fa2f4
	Geometry GetCachedGeometry();// 0x367e4b0
	Geometry GetCachedAllottedGeometry();// 0x367e480
	bool GetBool__DelegateSignature();// 0x29fa2f4
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x29fa2f4
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x29fa2f4
	void ForceVolatile(bool bForce);// 0x367e400
	void ForceLayoutPrepass();// 0x367e3ec
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x367e35c

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	float GetStartTime();// 0x367feb4
	float GetEndTime();// 0x367fe8c

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	Widget*[] AllWidgets;//[Offset: 0x20, Size: 12]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x1f1af58
	void ShowTitleSafeArea();// 0x1e13bd4
	void SetConsoleTarget(int PlayerIndex);// 0x1dee38c

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x29fa2f4
	void ReceiveInit();// 0x29fa2f4
	void HandleTravelError(byte FailureType);// 0x29fa2f4
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x29fa2f4
	int GetDeviceLevel();// 0x1e18080
	void DebugRemovePlayer(int ControllerId);// 0x4140c08
	void DebugCreatePlayer(int ControllerId);// 0x1fcf890

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x365b704
	void Dragged(out const PointerEvent PointerEvent);// 0x365b4d0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x365b29c

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xcc, Size: 12]
	bool RemoveChildAt(int Index);// 0x36654d4
	bool RemoveChild(Widget* Content);// 0x3665454
	bool HasChild(Widget* Content);// 0x36653d4
	bool HasAnyChildren();// 0x36653ac
	int GetChildrenCount();// 0x3665384
	int GetChildIndex(Widget* Content);// 0x3665304
	Widget* GetChildAt(int Index);// 0x3665284
	void ClearChildren();// 0x3665270
	PanelSlot* AddChild(Widget* Content);// 0x36651f0

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Object* ResourceObject;//[Offset: 0x3c, Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40, Size: 40]
	FName ResourceName;//[Offset: 0x68, Size: 8]
	Box2D UVRegion;//[Offset: 0x70, Size: 20]
	byte DrawAs;//[Offset: 0x84, Size: 1]
	byte Tiling;//[Offset: 0x85, Size: 1]
	byte Mirroring;//[Offset: 0x86, Size: 1]
	byte ImageType;//[Offset: 0x87, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2cc, Size: 4]
	FName MatineeControllerName;//[Offset: 0x2d0, Size: 8]
	float PlayRate;//[Offset: 0x2d8, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 1]
	float ForceStartPosition;//[Offset: 0x2e0, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e4, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e4, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e4, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e4, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e4, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e4, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x2e8, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ec, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ec, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2f0, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x300, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x30c, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318, Size: 1]
	float InterpPosition;//[Offset: 0x31c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x324, Size: 1]
	delegate OnPlay;//[Offset: 0x328, Size: 12]
	delegate OnStop;//[Offset: 0x334, Size: 12]
	delegate OnPause;//[Offset: 0x340, Size: 12]
	void Stop();// 0x1dd37a8
	void SetPosition(float NewPosition, bool bJump);// 0x41f3524
	void SetLoopingState(bool bNewLooping);// 0x41f349c
	void Reverse();// 0x1e30268
	void Play();// 0x1e2df90
	void Pause();// 0x1e2d7ec
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x41f32f4
	void ChangePlaybackDirection();// 0x1e2d7d0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x260, Size: 4]
	Actor* ChildActor;//[Offset: 0x264, Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x268, Size: 4]
	void SetChildActorClass(class Actor InClass);// 0x4142284

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x29fa2f4
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x41db9d0
	bool RemoteEvent(FName EventName);// 0x41db948
	void LevelReset();// 0x29fa2f4

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d0, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2d4, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2d8, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x574, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 1]
	float ScreenSize;//[Offset: 0x57c, Size: 4]
	float U;//[Offset: 0x580, Size: 4]
	float UL;//[Offset: 0x584, Size: 4]
	float V;//[Offset: 0x588, Size: 4]
	float VL;//[Offset: 0x58c, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4127754
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x41275bc
	void SetSprite(Texture2D* NewSprite);// 0x1f8605c

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x2d4, Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e0, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e0, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2e0, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2e0, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e1, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e1, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e1, Size: 1]
	float KillZ;//[Offset: 0x2e4, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x2e8, Size: 4]
	float WorldGravityZ;//[Offset: 0x2ec, Size: 4]
	float GlobalGravityZ;//[Offset: 0x2f0, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2f4, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2f8, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2fc, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x300, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x304, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x30c, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x318, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x31c, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	float MaxWorldSize;//[Offset: 0x324, Size: 4]
	int RegionSizeNear;//[Offset: 0x328, Size: 4]
	int RegionSizeFar;//[Offset: 0x32c, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	int Graduation;//[Offset: 0x334, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x338, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 1]
	int VisibilityCellSize;//[Offset: 0x340, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x344, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x345, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x348, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x398, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x3fc, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x40c, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x430, Size: 4]
	float WorldToMeters;//[Offset: 0x434, Size: 4]
	float MonoCullingDistance;//[Offset: 0x438, Size: 4]
	BookMark* BookMarks;//[Offset: 0x43c, Size: 4]
	float TimeDilation;//[Offset: 0x464, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x468, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x46c, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x470, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x474, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x478, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x47c, Size: 4]
	PlayerState* Pauser;//[Offset: 0x480, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x488, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x494, Size: 12]
	float[] LODRelativeDistances;//[Offset: 0x4a0, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	int WorldCompositionNums;//[Offset: 0x4b0, Size: 4]
	int CompositionBlockLength;//[Offset: 0x4b4, Size: 4]
	void OnRep_WorldGravityZ();// 0x1e2df90

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2cc, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x2d8, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x2dc, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2e0, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x2e4, Size: 4]
	class HUD* HUDClass;//[Offset: 0x2e8, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x2ec, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2f0, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2f4, Size: 4]
	GameSession* GameSession;//[Offset: 0x2f8, Size: 4]
	GameStateBase* GameState;//[Offset: 0x2fc, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x300, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30c, Size: 1]
	void StartPlay();// 0x1dc969c
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x4163a60
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4163930
	bool ShouldReset(Actor* ActorToReset);// 0x416389c
	void ReturnToMainMenuHost();// 0x4163880
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4163760
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1f7e98c
	void RestartPlayer(Controller* NewPlayer);// 0x1db6e4c
	void ResetLevel();// 0x1eb1380
	bool PlayerCanRestart(PlayerController* Player);// 0x41636d0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x4163648
	void K2_PostLogin(PlayerController* NewPlayer);// 0x29fa2f4
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x29fa2f4
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x29fa2f4
	void K2_OnLogout(Controller* ExitingController);// 0x29fa2f4
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x29fa2f4
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x4163540
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x2102574
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1dc7034
	bool HasMatchStarted();// 0x1e6f3f4
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x41634c0
	int GetNumSpectators();// 0x413d3c4
	int GetNumPlayers();// 0x413d394
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x4163438
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x4163328
	Actor* ChoosePlayerStart(Controller* Player);// 0x41632a0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x26037a0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x41631d4

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2cc, Size: 4]
	int MaxPlayers;//[Offset: 0x2d0, Size: 4]
	int MaxPartySize;//[Offset: 0x2d4, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2d8, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	FName SessionName;//[Offset: 0x2e0, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2cc, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2d0, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2d4, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x2d8, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2e8, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2ec, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2f0, Size: 4]
	void OnRep_SpectatorClass();// 0x4144780
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1dc96cc
	void OnRep_ReplicatedHasBegunPlay();// 0x1e7a590
	void OnRep_GameModeClass();// 0x1e50178
	bool HasMatchStarted();// 0x4173ef8
	bool HasBegunPlay();// 0x214880c
	float GetServerWorldTimeSeconds();// 0x21876f0
	float GetPlayerStartTime(Controller* Controller);// 0x4173e70
	float GetPlayerRespawnDelay(Controller* Controller);// 0x4173de8

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2cc, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2d0, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x2d4, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x2d8, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x2dc, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x2e4, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x2e8, Size: 4]
	int BadPingThreshold;//[Offset: 0x2ec, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x2f0, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x2f4, Size: 4]
	float PercentForBadPing;//[Offset: 0x2f8, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2fc, Size: 4]
	float MoveRepSize;//[Offset: 0x300, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x304, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x308, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x30c, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x310, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x314, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x318, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x31c, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x320, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x324, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x328, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x330, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x338, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x33c, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x340, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x344, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa1, Size: 1]
	int LevelLODIndex;//[Offset: 0xa4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 1]
	Color DrawColor;//[Offset: 0xac, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc0, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc, Size: 4]
	FString[] Keywords;//[Offset: 0xd4, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec, Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104, Size: 12]
	delegate OnStatusChanged;//[Offset: 0x110, Size: 12]
	Level* LoadedLevel;//[Offset: 0x11c, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x120, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x124, Size: 12]
	bool IsStreamingStatePending();// 0x41dc334
	bool IsLevelVisible();// 0x41dc30c
	bool IsLevelLoaded();// 0x41dc2e8
	FName GetWorldAssetPackageFName();// 0x41dc2a8
	LevelScriptActor* GetLevelScriptActor();// 0x41dc280
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x41dc120

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2f4, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 1]
	byte StreamingUsage;//[Offset: 0x301, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x52c, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x7ac, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d5, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x7e8, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bEnabledAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4, Size: 60]
	int iInitedClassConfigGroup;//[Offset: 0x40, Size: 4]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x44, Size: 60]
	bool bInitedIgnoringProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	enum AcceptableNetRole;//[Offset: 0x4, Size: 1]
	int ObjectLifePeriodTime;//[Offset: 0x8, Size: 4]
	Object* pDefaultObject;//[Offset: 0xc, Size: 4]
	Object*[] Pool;//[Offset: 0x10, Size: 12]
	<Object*,uint32> RecycleTime;//[Offset: 0x1c, Size: 60]
	int Size;//[Offset: 0x58, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	ResetObjectPoolDataInfo[] ResetInfoPool;//[Offset: 0x60, Size: 12]
	CachedBlueprintComponentTemplate[] CachedTemplates;//[Offset: 0x6c, Size: 12]
	bool bAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]

--------------------------------
Class: ResetObjectPoolDataInfo
	Struct* pStruct;//[Offset: 0x0, Size: 4]

--------------------------------
Class: CachedBlueprintComponentTemplate
	Struct* pStruct;//[Offset: 0x0, Size: 4]
	FString ComponentName;//[Offset: 0x4, Size: 12]
	Object* ComponentTemplate;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ObjectPoolClassConfig
	int GroupID;//[Offset: 0x0, Size: 4]
	FName ObjectClassName;//[Offset: 0x8, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool ObjectPoolEnableAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	int PoolSize;//[Offset: 0x14, Size: 4]
	int LifePeriodTime;//[Offset: 0x18, Size: 4]
	enum AcceptableNetRole;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	enum DataGatheringMode;//[Offset: 0x29, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x30, Size: 12]
	float UpdateInterval;//[Offset: 0x3c, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x44, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x50, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0, Size: 12]
	enum OperationMode;//[Offset: 0x158, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x41fcfec
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x41fcf74
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x41fceb4
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x41fce00
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x41fcd88
	void SetGeometryGatheringMode(enum NewMode);// 0x41fcd10
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x41fccfc
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x41fcbfc
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x41fca50
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x41fc9d8
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x41fc7d8
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x41fc5e8
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x41fc3f8
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x41fc208
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x41fc190
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x41fc118
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x41fbf6c
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x41fbdc0
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x41fbbbc
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x41fb9b8
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x41fb940
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x41fb794
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x41fb5b4

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2f4, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x41fa1b4
	bool IsStringPulled();// 0x1ec6304
	bool IsPartial();// 0x41fa18c
	float GetPathLength();// 0x41fa164
	float GetPathCost();// 0x41fa13c
	FString GetDebugString();// 0x41fa07c
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x41f9ffc
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x41f9f2c

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x412719c
	int GetObjectCount();// 0x4127174
	int GetNewAvoidanceUID();// 0x412714c
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x41270bc

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x98, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4, Size: 4]
	FString PVEBordersName;//[Offset: 0xb8, Size: 12]
	FString[] UnloadTileOnServer;//[Offset: 0xc4, Size: 12]
	<FString> UnloadTileSet;//[Offset: 0xd0, Size: 60]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: Water_C.OceanManager.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x368, Size: 4]

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	Vector2D GlobalWaveDirection;//[Offset: 0x2d0, Size: 8]
	float GlobalWaveSpeed;//[Offset: 0x2d8, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x2dc, Size: 4]
	float DistanceCheck;//[Offset: 0x2e0, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x2e4, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x2f0, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x2fc, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	float ModulationStartHeight;//[Offset: 0x304, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x308, Size: 4]
	float ModulationPower;//[Offset: 0x30c, Size: 4]
	Landscape* Landscape;//[Offset: 0x310, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x314, Size: 4]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x33c, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x34c, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x358, Size: 12]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x4d64f68
	Vector GetWaveHeightValue(out const Vector Location, const World* World, bool HeightOnly, bool TwoIterations);// 0x4d64de4
	LinearColor GetHeightmapPixel(float U, float V);// 0x4d64d14

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2cc, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x2d0, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2e0, Size: 8]
	int MaxLODLevel;//[Offset: 0x2e8, Size: 4]
	float LODDistanceFactor;//[Offset: 0x2ec, Size: 4]
	byte LODFalloff;//[Offset: 0x2f0, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x2f4, Size: 4]
	float LODDistributionSetting;//[Offset: 0x2f8, Size: 4]
	int StaticLightingLOD;//[Offset: 0x2fc, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x300, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x304, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30c, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x310, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x314, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x354, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x360, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x364, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x368, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x36c, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x370, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x378, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x380, Size: 12]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x38c, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x398, Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	float StaticLightingResolution;//[Offset: 0x3f0, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f4, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f4, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3f5, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f6, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f6, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x3f8, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3fc, Size: 24]
	int CollisionMipLevel;//[Offset: 0x414, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x418, Size: 4]
	float CollisionThickness;//[Offset: 0x41c, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x420, Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x560, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x560, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x560, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x564, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x568, Size: 4]
	int NumSubsections;//[Offset: 0x56c, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x571, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x3437f18
	void ChangeLODDistributionSettingConsoleVariable();// 0x1e30268
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x1dd37c4
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x1dd37a8
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x1ee5ae8

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x574, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x580, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x58c, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x664, Size: 88]
	Vector SplineUpDir;//[Offset: 0x6bc, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c8, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c8, Size: 1]
	byte ForwardAxis;//[Offset: 0x6c9, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x6cc, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x6d0, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x6d4, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x6d8, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e8, Size: 1]
	void UpdateMesh();// 0x42630dc
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x4263018
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x4262f58
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x4262e94
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x4262dd0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x4262d10
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x4262b70
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x4262a9c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x42629d8
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x4262914
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x4262854
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x4262790
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x42626cc
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x426260c
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x4262548
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x4262484
	Vector GetStartTangent();// 0x426243c
	Vector2D GetStartScale();// 0x42623fc
	float GetStartRoll();// 0x42623d4
	Vector GetStartPosition();// 0x426238c
	Vector2D GetStartOffset();// 0x426234c
	Vector GetSplineUpDir();// 0x4262304
	byte GetForwardAxis();// 0x42622dc
	Vector GetEndTangent();// 0x4262294
	Vector2D GetEndScale();// 0x4262254
	float GetEndRoll();// 0x2057bac
	Vector GetEndPosition();// 0x426220c
	Vector2D GetEndOffset();// 0x42621cc
	float GetBoundaryMin();// 0x42621a4
	float GetBoundaryMax();// 0x426217c

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x574, Size: 4]
	int SectionBaseY;//[Offset: 0x578, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x57c, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x580, Size: 4]
	int NumSubsections;//[Offset: 0x584, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x588, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x58c, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x590, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x5cc, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e4, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x5e8, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x5f4, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x600, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x63c, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x648, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x654, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x658, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x660, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x670, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x680, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x690, Size: 4]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694, Size: 1]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x698, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x6d4, Size: 12]
	Box CachedLocalBox;//[Offset: 0x6e0, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x6fc, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x718, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x728, Size: 12]
	int CollisionMipLevel;//[Offset: 0x734, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x738, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x73c, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x740, Size: 4]
	float StaticLightingResolution;//[Offset: 0x744, Size: 4]
	int ForcedLOD;//[Offset: 0x748, Size: 4]
	int LODBias;//[Offset: 0x74c, Size: 4]
	Guid stateID;//[Offset: 0x750, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x760, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x770, Size: 4]
	StaticMesh* OccluderMesh;//[Offset: 0x774, Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x778, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x77c, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x780, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x7bc, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x7c8, Size: 4]
	uint16[] CachedHeightData;//[Offset: 0x7cc, Size: 12]
	FName UsedOtherMaterialName;//[Offset: 0x820, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x574, Size: 12]
	int SectionBaseX;//[Offset: 0x580, Size: 4]
	int SectionBaseY;//[Offset: 0x584, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x588, Size: 4]
	float CollisionScale;//[Offset: 0x58c, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x590, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x594, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x5a0, Size: 16]
	Box CachedLocalBox;//[Offset: 0x5b0, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x5cc, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x5f4, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x74c, Size: 12]
	int NumBuiltInstances;//[Offset: 0x758, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x760, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x77c, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x798, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x7a4, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b0, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x7d0, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x7d4, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f5, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x7f8, Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x41777e0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x660, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x66c, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x670, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x674, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x678, Size: 12]
	int[] RemovedInstances;//[Offset: 0x684, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x6f0, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x6f4, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x734, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x738, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x4181ae0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x4181a24
	bool RemoveInstance(int InstanceIndex);// 0x418199c
	bool HideInstance(out const int[] InstanceIndices);// 0x41818c0
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x4181750
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x4181594
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x41813fc
	int GetInstanceCount();// 0x1f28764
	void ClearInstances();// 0x41813e0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x4181300
	int AddInstance(out const Transform InstanceTransform);// 0x4181210

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x574, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x5c4, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5d8, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5ec, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x600, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x618, Size: 4]
	float Duration;//[Offset: 0x61c, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x623, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 1]
	float LoopPosition;//[Offset: 0x628, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x62c, Size: 12]
	void UpdateSpline();// 0x42600d8
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x4260004
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x425fea4
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x425f6fc
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x425fcf0
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x425fb90
	void SetSplineWorldPoints(out const Vector[] Points);// 0x425fabc
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x425f9b4
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x425f854
	void SetSplineLocalPoints(out const Vector[] Points);// 0x425f780
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x425f6fc
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x425f59c
	void SetDrawDebug(bool bShow);// 0x425f51c
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x425f450
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x425f33c
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x425f26c
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x425f1a8
	bool IsClosedLoop();// 0x425f180
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x425f0ec
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x425f008
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x425ef74
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x425ee90
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x425edfc
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x425ed68
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x425ec84
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x425ebf0
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425eacc
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425e9f8
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425e924
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x425e798
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x425e65c
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x425e520
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425e3fc
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425d200
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425e328
	byte GetSplinePointType(int PointIndex);// 0x425e2a8
	float GetSplineLength();// 0x425e280
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x425e1a4
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x425e114
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x425e084
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425df60
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425de8c
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425ddb8
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425dca8
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425dbe4
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425db20
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425d9fc
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425d928
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425d854
	int GetNumberOfSplinePoints();// 0x425d82c
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425d708
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425d634
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425d560
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x425d3f8
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x425d2d4
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425d200
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x425d180
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x425d100
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x425cfdc
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425cf08
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x425ce34
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x425cda4
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x425ccd0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425cbec
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x425caa0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425c9bc
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x425c920
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425c83c
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425c768
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425c684
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425c5a0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x425c514
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x425c430
	void ClearSplinePoints(bool bUpdateSpline);// 0x425c3b0
	void AddSplineWorldPoint(out const Vector Position);// 0x425c324
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x425c1c4
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x425c0ac
	void AddSplineLocalPoint(out const Vector Position);// 0x425c020
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x425bf04
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x425bdfc

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2cc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	void OnRep_bEnabled();// 0x1dcbc3c

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x260, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x264, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x274, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x278, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x27c, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x28c, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x290, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x294, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x2a4, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2b4, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x2b8, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2bc, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2cc, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2d0, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2d4, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2d8, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2dc, Size: 16]
	float FogHeightFalloff;//[Offset: 0x2ec, Size: 4]
	float FogMaxOpacity;//[Offset: 0x2f0, Size: 4]
	float StartDistance;//[Offset: 0x2f4, Size: 4]
	float FogCutoffDistance;//[Offset: 0x2f8, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x300, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x304, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x308, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x318, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x31c, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x320, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x328, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x32c, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x330, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x415ec48
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x415ebd0
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x415eaf0
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x415ea70
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x415e9f8
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x415e97c
	void SetVolumetricFogDistance(float NewValue);// 0x415e904
	void SetVolumetricFogAlbedo(Color NewValue);// 0x415e894
	void SetVolumetricFog(bool bNewValue);// 0x415e814
	void SetStartDistance(float Value);// 0x415e79c
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x415e724
	void SetInscatteringTextureTint(LinearColor Value);// 0x415e6a8
	void SetInscatteringColorCubemapAngle(float Value);// 0x415e630
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x415e5b8
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x415e540
	void SetFogMaxOpacity(float Value);// 0x415e4c8
	void SetFogInscatteringColor(LinearColor Value);// 0x415e44c
	void SetFogHeightFalloff(float Value);// 0x415e3d4
	void SetFogDensity(float Value);// 0x4122900
	void SetFogCutoffDistance(float Value);// 0x415e35c
	void SetDirectionalInscatteringStartDistance(float Value);// 0x415e2e4
	void SetDirectionalInscatteringExponent(float Value);// 0x415e26c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x415e1f0
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x415e130
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x415e074

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: BP_STPlayerStart_C.STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x2ec, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	int PlayerBornPointID;//[Offset: 0x2f4, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 1]
	int CampID;//[Offset: 0x2fc, Size: 4]
	int TeamID;//[Offset: 0x300, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	void SetMarkOccupied();// 0x20a4be8
	bool IsMarkOccupied();// 0x20a4bc0

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2e0, Size: 8]

--------------------------------
Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x300, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ExecuteUbergraph_BP_MiniMapStandardPoint(int EntryPoint, float CallFunc_MakeLiteralFloat_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x304, Size: 4]

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x2cc, Size: 4]
	float EachTileExtent;//[Offset: 0x2d0, Size: 4]
	FString levelName;//[Offset: 0x2d4, Size: 12]
	float FakeEdgeExtent;//[Offset: 0x2e0, Size: 4]
	enum GameModeType;//[Offset: 0x2e4, Size: 1]
	Vector2D AirDropBoundOffset;//[Offset: 0x2e8, Size: 8]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x2f0, Size: 12]

--------------------------------
Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0, Size: 4]
	float LayerRoofHeight;//[Offset: 0x4, Size: 4]
	int LayerID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: TemBPDataAddr
	uint64 Value;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PostProcessMgr_C.PostProcessManager.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x320, Size: 4]

--------------------------------
Class: PostProcessManager.Actor.Object
	LinearColor OutlineColor;//[Offset: 0x2cc, Size: 16]
	float OutlineThickness;//[Offset: 0x2dc, Size: 4]
	bool IsPPEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	<enum,OutlineConfig> DifferentOutline;//[Offset: 0x2e4, Size: 60]
	void SetMobileCustomDepth(bool IsEnable, int Depth);// 0x1f74c0c
	PostProcessVolume* GetPPVByTag(FName TagName);// 0x1f74b8c
	static PostProcessManager* GetInstance();// 0x1f74b64
	PostProcessVolume* GetActivePPV();// 0x1f74b3c
	void EnableDrawOutlineEffect(bool IsEnable);// 0x1f74abc

--------------------------------
Class: OutlineConfig
	LinearColor Color;//[Offset: 0x0, Size: 16]
	float Thickness;//[Offset: 0x10, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x300, Size: 1328]
	float Priority;//[Offset: 0x830, Size: 4]
	float BlendRadius;//[Offset: 0x834, Size: 4]
	float BlendWeight;//[Offset: 0x838, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 1]
	void RemoveBlendable(interface classByteProperty InBlendableObject);// 0x42320e4
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x4231fb4

--------------------------------
Class: SociallandWaterSwimObject_C.WaterSwimObject_C.WaterSwimActor.Actor.Object
	void HandleWaterSwimObject();// 0x29fa2f4
	void SetWaterPos(Vector Offset, HitResult CallFunc_K2_AddLocalOffset_SweepHitResult);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 4]
	void SetWaterMaterial(int NewParam, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x29fa2f4
	void RefreshWaterMaterial(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFight_ReturnValue);// 0x29fa2f4
	void DoTrySetWaterMaterial(int NewParam, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void TrySetWaterMaterial(int NewParam);// 0x29fa2f4
	void IsSupportIndex(int NewParam, out bool NewParam1, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetWaterReflectionSetting_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, bool CallFunc_IsOpenMSAA_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSupportLDR_ReturnValue, bool CallFunc_IsOpenHDR_ReturnValue);// 0x29fa2f4
	void isNewIphone(out bool isNewIphone, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x29fa2f4
	void SetWateMaterial(bool bHDR, bool CallFunc_IsNewIphone_isNewIphone, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x29fa2f4
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x29fa2f4
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x29fa2f4
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x29fa2f4
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void CustomEvent(byte gamePawnEvent);// 0x29fa2f4
	void CustomEvent(int UserQualitySettingLevel);// 0x29fa2f4
	void ReceiveEndPlay(byte EndPlayReason);// 0x29fa2f4
	void CustomEvent(bool UserMsaaSetting);// 0x29fa2f4
	void CustomEvent(bool bOpenWaterReflection);// 0x29fa2f4
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, interface classByteProperty K2Node_DynamicCast_AsPet_Swim_Interface, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character2, bool K2Node_DynamicCast_bSuccess4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess5, interface classByteProperty K2Node_DynamicCast_AsPet_Swim_Interface2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, byte K2Node_CustomEvent_gamePawnEvent, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess7, int K2Node_CustomEvent_UserQualitySettingLevel, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool K2Node_CustomEvent_UserMsaaSetting, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess8, bool K2Node_CustomEvent_bOpenWaterReflection, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x29fa2f4
	GameEventListener* GameEventListener;//[Offset: 0x30c, Size: 4]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x310, Size: 4]
	AkComponent* Ak;//[Offset: 0x314, Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x318, Size: 4]
	BoxComponent* PostSceneBox;//[Offset: 0x31c, Size: 4]
	StaticMeshComponent* watermesh;//[Offset: 0x320, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x324, Size: 4]
	float Gamma;//[Offset: 0x328, Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x330, Size: 1328]
	STExtraBaseCharacter*[] playerList;//[Offset: 0x860, Size: 12]
	byte NewVar;//[Offset: 0x86c, Size: 1]
	float FogDensity;//[Offset: 0x870, Size: 4]
	ExponentialHeightFog* HeightFog;//[Offset: 0x874, Size: 4]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x878, Size: 4]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x87c, Size: 4]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x880, Size: 4]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x884, Size: 4]
	MaterialInterface* SUPHDROceanMaterial;//[Offset: 0x888, Size: 4]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0x88c, Size: 4]
	MaterialInterface* SUPHDRSwampMaterial;//[Offset: 0x890, Size: 4]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0x894, Size: 4]
	int CurrentMaterialIndex;//[Offset: 0x898, Size: 4]
	MaterialInterface*[] MaterialList;//[Offset: 0x89c, Size: 12]
	bool IsSetSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 1]
	<FString> newIOSDevice;//[Offset: 0x8ac, Size: 60]
	MaterialInterface* WaterMaterial_SUP_HDR;//[Offset: 0x8e8, Size: 4]
	MaterialInterface* WaterMaterial_HDR;//[Offset: 0x8ec, Size: 4]
	MaterialInterface* WaterMaterial_Normal;//[Offset: 0x8f0, Size: 4]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x2cc, Size: 4]
	float interval;//[Offset: 0x2d0, Size: 4]
	class DamageType* DamageType;//[Offset: 0x2d4, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x2d8, Size: 12]
	int[] BuffIDs;//[Offset: 0x2e4, Size: 12]
	int[] SkillBuffIDs;//[Offset: 0x2f0, Size: 12]
	BoxComponent* WaterBoxComp;//[Offset: 0x2fc, Size: 4]
	bool IsLocationInWater(out const Vector Location);// 0x216c6d0
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x216c5e8

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x584, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x4131358
	Vector GetUnscaledBoxExtent();// 0x413132c
	Vector GetScaledBoxExtent();// 0x41312d4

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xbfc, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xc00, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xc08, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xc44, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0xc45, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xc48, Size: 4]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0xc98, Size: 60]
	FName FeatureActorName;//[Offset: 0xcd8, Size: 8]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xce0, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xcec, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xcf8, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xd05, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xd08, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xd0c, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xd10, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xd14, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xd18, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xd1c, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xd20, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xd24, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xd28, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xd2c, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xd30, Size: 4]
	Vector2D StartPosition;//[Offset: 0xd34, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xd3c, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xd44, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xd50, Size: 12]
	FString FollowCandidateName;//[Offset: 0xd60, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xd6c, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xda8, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xdc0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xdf0, Size: 1]
	bool GMShowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf1, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0xdf2, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xdf4, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfa, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xdfc, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xe08, Size: 16]
	byte AutoAimType;//[Offset: 0xe18, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe31, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe32, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0xe34, Size: 12]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xe40, Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xe4c, Size: 180]
	SensibilityConfig SensibilityConfig;//[Offset: 0xf00, Size: 196]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc5, Size: 1]
	int UseMotionControlType;//[Offset: 0xfc8, Size: 4]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0xfcc, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0xfd8, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0xfe4, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0xff0, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0xffc, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x1008, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x1014, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x1020, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x102c, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x1038, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x1044, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x1050, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x105c, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1068, Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x1074, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1080, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x108c, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x1098, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x10a4, Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0x10b0, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x10bc, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x10c8, Size: 12]
	delegate OnNightEnded;//[Offset: 0x10d4, Size: 12]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x10e0, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x10ec, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x10f0, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x10fc, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x1108, Size: 12]
	delegate OnPlayerEnterArea;//[Offset: 0x1114, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x1120, Size: 12]
	delegate OnPickupItem;//[Offset: 0x112c, Size: 12]
	delegate OnDropItem;//[Offset: 0x1138, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x1144, Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0x1150, Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0x115c, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1188, Size: 68]
	delegate OnKillOrPutDownMessage;//[Offset: 0x11cc, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x11d8, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x11e4, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x11f0, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x11fc, Size: 12]
	delegate OnFingerMove;//[Offset: 0x1208, Size: 12]
	delegate OnHandleCameraModeChanged;//[Offset: 0x1214, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x1220, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x122c, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x1238, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x1244, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1250, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x125c, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x1268, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x1274, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x1280, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x128c, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x1298, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x12a4, Size: 12]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x12b0, Size: 12]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x12bc, Size: 12]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x12c8, Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0x12d4, Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0x12e0, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x12ec, Size: 12]
	delegate OnRank;//[Offset: 0x12f8, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x1304, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x1310, Size: 12]
	delegate OnUseMainSlot;//[Offset: 0x131c, Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0x1328, Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0x1334, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x1340, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x134c, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x1358, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x1368, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x1374, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1380, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x138c, Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x1398, Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x13a4, Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x13b0, Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x13bc, Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x13c8, Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x13d4, Size: 12]
	delegate OnGameStateChange;//[Offset: 0x13e0, Size: 12]
	delegate OnSelfPlayerKilledOthersPlayer;//[Offset: 0x13ec, Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x13f8, Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1404, Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1410, Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x141c, Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x1438, Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x1444, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1460, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1464, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x1470, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x147c, Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x149c, Size: 12]
	delegate OnLostConnection;//[Offset: 0x14a8, Size: 12]
	delegate OnReconnected;//[Offset: 0x14b4, Size: 12]
	delegate OnExitGame;//[Offset: 0x14c0, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x14cc, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x14d8, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x14e4, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x14f0, Size: 4]
	int MaternalZombieWeight;//[Offset: 0x14f4, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x14f8, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x14fc, Size: 4]
	HiggsBosonComponent* HiggsBosonComponent;//[Offset: 0x1500, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1504, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1508, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x16dc, Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x16e8, Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f8, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f9, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fa, Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fb, Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fc, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fd, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fe, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1700, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1704, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1708, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x170c, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1710, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1714, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1718, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x171c, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1740, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1764, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x176c, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1774, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1798, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x17a0, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x17a8, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x17cc, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1808, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x180c, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x1810, Size: 60]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x184c, Size: 12]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1858, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1859, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1860, Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1864, Size: 1]
	byte CurCameraMode;//[Offset: 0x1865, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x1868, Size: 12]
	FName AutoScopeAimCompName;//[Offset: 0x1878, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1880, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1884, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1885, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1886, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1887, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1888, Size: 4]
	float CanMoveCDTime;//[Offset: 0x188c, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1890, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1894, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1898, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x189c, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a0, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x18a4, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x18b0, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x18b4, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x18b8, Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f4, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f5, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f6, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x18f8, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fc, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fd, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x1900, Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1908, Size: 1]
	float AccumulateYawInput;//[Offset: 0x190c, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1910, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1914, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1915, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1916, Size: 1]
	float NoRespondArea;//[Offset: 0x1918, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x191c, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1920, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1921, Size: 1]
	byte sprintOptType;//[Offset: 0x1922, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1924, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1928, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x192c, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1930, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1934, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1935, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1938, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193c, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1940, Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x197c, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1980, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x1984, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1988, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x198c, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1990, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x1994, Size: 4]
	byte TouchFireType;//[Offset: 0x1998, Size: 1]
	float TestForce;//[Offset: 0x199c, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x19a0, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x19ac, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b8, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b9, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ba, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19bb, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x19bc, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x19c0, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x19c4, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x19c8, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x19cc, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x19d0, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d4, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x19d8, Size: 4]
	float MinFovChangeView;//[Offset: 0x19dc, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x19e0, Size: 40]
	int GameTipMsgID;//[Offset: 0x1a08, Size: 4]
	FString GameTipParam1;//[Offset: 0x1a0c, Size: 12]
	FString GameTipParam2;//[Offset: 0x1a18, Size: 12]
	float AutoSprintCD;//[Offset: 0x1a60, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1a64, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1aa0, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1adc, Size: 60]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1c, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x1b20, Size: 12]
	delegate OnReceiveHasSignal;//[Offset: 0x1b2c, Size: 12]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1b60, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1c28, Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x1c2c, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1c30, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1c34, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1c44, Size: 4]
	FString[] ForbitPickList;//[Offset: 0x1c50, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c68, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x1c6c, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c70, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c71, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x1c74, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1c78, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c7c, Size: 1]
	float FreeViewUpRate;//[Offset: 0x1c80, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1c84, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1c88, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8c, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8e, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x1c90, Size: 12]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x1c9c, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb0, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x1cb1, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb2, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb3, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x1cfc, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1d64, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x1df0, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x1df4, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x1df8, Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x1dfc, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x1e00, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x1e04, Size: 4]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x1e0c, Size: 12]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e25, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x1e26, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x1e28, Size: 12]
	BattleItemData[] ObservedItemList;//[Offset: 0x1e50, Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0x1ef8, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x1f04, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x1f10, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x1f1c, Size: 12]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x1f28, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f34, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x1f38, Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x1f48, Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x1f4c, Size: 12]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x1f58, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x1f64, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x1f70, Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x1f7c, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x1f88, Size: 60]
	ObservedData ObservedData;//[Offset: 0x1fc8, Size: 72]
	delegate OnSignalHPChanged;//[Offset: 0x201c, Size: 12]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202d, Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x2030, Size: 12]
	delegate OnToggleOBMapShowHide;//[Offset: 0x2040, Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x204c, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x2060, Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x206c, Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2078, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x2084, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x2090, Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x209c, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x20a8, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x20c4, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x20c8, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x20cc, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x20d0, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d1, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d2, Size: 1]
	int FireMode;//[Offset: 0x20d4, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d8, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d9, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20da, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20db, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x20dc, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x20e8, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x20f4, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2100, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x210c, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x2118, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2124, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2128, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2134, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2140, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x214c, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2158, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2165, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2168, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x2174, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2180, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2184, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x2190, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219c, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x21a0, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x21a4, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x21a8, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x21ac, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x21b0, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x21c0, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x21dc, Size: 20]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x21f0, Size: 12]
	Actor* ThePlane;//[Offset: 0x21fc, Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2208, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x220c, Size: 12]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x2218, Size: 12]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2224, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x2228, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x223c, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2250, Size: 4]
	FString LastBreathMurder;//[Offset: 0x2258, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2264, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x2268, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x2270, Size: 4]
	FString murderName;//[Offset: 0x2274, Size: 12]
	FString FinalMurderName;//[Offset: 0x2280, Size: 12]
	uint64 MurderUID;//[Offset: 0x2290, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2298, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2299, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229a, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x22e0, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x231c, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x2360, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x2364, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2368, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x236c, Size: 60]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x247c, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2480, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x2484, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x24cc, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d0, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x24d4, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d8, Size: 1]
	enum ServerStateType;//[Offset: 0x24d9, Size: 1]
	enum ClientStateType;//[Offset: 0x24da, Size: 1]
	bool bRepServerMsgType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24db, Size: 1]
	enum GameStateMsgType;//[Offset: 0x24dc, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f4, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f5, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f6, Size: 1]
	float ObservingTime;//[Offset: 0x24f8, Size: 4]
	KillerTracker* tracker;//[Offset: 0x24fc, Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2510, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2511, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x255c, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x2560, Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2580, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x258c, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2590, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2591, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x2594, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x2598, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x259c, Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x25d4, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x25e0, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x25e4, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x25e8, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x2624, Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x2664, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2668, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x2674, Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x26d0, Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x26d4, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x26d8, Size: 4]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x2704, Size: 12]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x2710, Size: 12]
	delegate OnEnterVehicleDelegate;//[Offset: 0x273c, Size: 12]
	delegate ClientOnEnterVehicle;//[Offset: 0x2748, Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x2754, Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x2760, Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x276c, Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2778, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2779, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x277c, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2780, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x278c, Size: 8]
	int IdCardMarkType;//[Offset: 0x2798, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b8, Size: 1]
	int VehicleControlMode;//[Offset: 0x27bc, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c0, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x27c4, Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x27d0, Size: 12]
	float StreamingDistanceScaleFlying;//[Offset: 0x27dc, Size: 4]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27e0, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x27e4, Size: 12]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27f0, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x27f4, Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2800, Size: 4]
	float SpeedRecordTime;//[Offset: 0x2804, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2808, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x280c, Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2818, Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2824, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2828, Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x2834, Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2840, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2841, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x2844, Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2850, Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x285c, Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x2868, Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x2874, Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2880, Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2884, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2888, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2889, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2894, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2895, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2896, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x2898, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x289c, Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x28a8, Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x28b4, Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c0, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x28c4, Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x28d0, Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x28dc, Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x28e8, Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x28f4, Size: 12]
	Actor* InteractiveActor;//[Offset: 0x2900, Size: 4]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x2904, Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2910, Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x291c, Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2928, Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x2934, Size: 4]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x294c, Size: 12]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x2958, Size: 60]
	enum CurrentWeaponFunction;//[Offset: 0x2994, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x2998, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299c, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x29a0, Size: 4]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x29a4, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x29a8, Size: 4]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b8, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c8, Size: 1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x29cc, Size: 12]
	double LastFlyLeapPlatfromTime;//[Offset: 0x2ef0, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f34, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f35, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x2f38, Size: 60]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x2f88, Size: 16]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x2f98, Size: 16]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x2fa8, Size: 48]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd8, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fda, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fdb, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x2fdc, Size: 4]
	<int,enum> PlayerAvatarHideState;//[Offset: 0x2fe0, Size: 60]
	void VW_Seat(int change);// 0x2094f2c
	void VisualizeItem();// 0x1dd8bcc
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x2094e28
	void ViewPlane();// 0x2094e14
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x29fa2f4
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation);// 0x2094da4
	void VehicleResetTo(float X, float Y, float Z);// 0x2094ca4
	void VehicleMoveTo(float X, float Y, float Z);// 0x2094ba4
	void UseZombieModeSkill();// 0x2094b90
	void UserDropItemOperation(ItemDefineID DefineID);// 0x2094b08
	void UseItem(int ID);// 0x2094a90
	void UpdateSurfboardUI();// 0x2094a7c
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x20949fc
	void UpdatePoseViewPitchLimit();// 0x20949e8
	void UpdatePoseState(byte PoseType);// 0x2094970
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x20948a8
	void UnLoadAllCollision(bool Unload);// 0x2094828
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x2094688
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x20943d8
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x20944e0
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x20943d8
	void TriggerHunterRevival();// 0x20943c4
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x2094308
	void TouchMove(Vector Loc, byte FingerIndex);// 0x209424c
	bool TouchEnd(byte PressType);// 0x20941cc
	void TouchBegin(byte PressType);// 0x2094154
	void ToggleVehicleSync(bool Val);// 0x1e54e6c
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x1e54e6c
	void ToggleUserCmdDeltaFlag(bool Val);// 0x1e54e6c
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x1e54e6c
	void ToggleUserCmdDelta(bool Val);// 0x1e54e6c
	void ToggleServerAcknowledgePossession(bool Val);// 0x1e54e6c
	void ToggleOBTPPFollowFreeView();// 0x2094140
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x20940c0
	void ToggleCheatLocation(bool Val);// 0x1e54e6c
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x2093fc0
	void TestLowProbCircle(bool UseLowProb, int LoopCount);// 0x2093ef8
	void TestLaunchFly(float Speed);// 0x2093e80
	void TestGlueHia(int GlueType, int GlueValue);// 0x2093dc4
	void TestBiAim();// 0x1dd8bcc
	void TestAutoMoveToShootingMachine();// 0x2093db0
	void TestAutoMoveToLocation(float X, float Y, float Z);// 0x2093cb0
	void TestAutoMoveToCharacter(FString TargetPlayerUID);// 0x2093b58
	void TempleStopMoving();// 0x2093b44
	void TempleStartMoving();// 0x2093b30
	void TempleSpawnBoss();// 0x2093b1c
	void TempleDisappear();// 0x2093b08
	void TeleportToTemple(byte bOutCollisionTeleportPoint);// 0x2093a90
	void TeleportAIToLoc(float X, float Y, float Z);// 0x2093990
	void TeamNoAlwaysRelevant();// 0x209397c
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x20938a0
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, byte HealthBYTE, int VoiceID);// 0x20936c4
	void SwitchViewTarget();// 0x1dd8bcc
	void SwitchToTeamByNumPressed();// 0x20936b0
	void SwitchToPlayerByNumPressed();// 0x209369c
	void SwitchToDeadBox();// 0x2093688
	void SwitchShowUI();// 0x2093674
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x2093578
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x2093428
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x2093364
	void SwitchMouseCursorShowState();// 0x2093350
	void SwitchGenerateItem();// 0x20932f4
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x2093238
	void SwitchCameraModeByOrder();// 0x2093224
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x20930c8
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x2092fc0
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x2092ee8
	void StopAbsorb();// 0x2092e8c
	void StartReadyCountDown();// 0x2092e78
	void StartLandOnGroundAfterJumpPlane();// 0x2092e64
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x2092d4c
	void StartGame();// 0x2092d38
	void StartFreeCamera(byte FigerIndex);// 0x2092cc0
	void StartAirDropSpecified(float X, float Y);// 0x2092c04
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x2092b04
	void StartAirDrop(int Index);// 0x2092a8c
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x209298c
	void StartAirAttack(int Index);// 0x2092914
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x209284c
	void SpawnVehicleWithPath(FString Path, int Num);// 0x209274c
	void SpawnVehicle();// 0x2092738
	void SpawnFloatingTemple();// 0x2092724
	void SpawnAllVehicle(FString Path);// 0x2092668
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x2092568
	void SpawnAI(int Num);// 0x20924f0
	void SpawnActorWithPath(FString Path, float X, float Y, float Z);// 0x2092364
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x20922ec
	void ShutDownItemGenerate(bool IsOpen);// 0x209226c
	void ShowWeaponRecordInfo();// 0x1dd8bcc
	void ShowVaultEnable();// 0x1fe6354
	void ShowStringMsg(const FString Message, FString FromPlayerName, int MsgID);// 0x2091fb8
	void ShowResultWeaponRecordInfo();// 0x1dd8bcc
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x2091e74
	void ShowOpenSequence(float Time);// 0x2091dfc
	void ShowNavOperator();// 0x2091de8
	void ShowMovePath(const Vector[] Path);// 0x2091d24
	void ShowGameTips(int TipsID, FString Params);// 0x2091c1c
	void ShowFireBtn(bool bShow);// 0x29fa2f4
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x2091b54
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x2091a84
	void ShowAllRoles();// 0x1dd8bcc
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x2091a04
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x2091984
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x2091904
	void SetViewYawLimit(float YawMin, float YawMax);// 0x2091848
	void SetViewTargetTest(Actor* NewViewTarget);// 0x20917d0
	void SetVehicleWeakTickEnable(bool InVal);// 0x2091750
	void SetUAETriggerEnable(bool IsEnbale);// 0x20916d0
	void SetTimeSpeedFactor(float Val);// 0x1e836a4
	void SetTimeSpeedCheck(bool Val);// 0x1e54e6c
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x20915c0
	void SetStateLeftTime(int leftTime);// 0x2091548
	void SetSpeed(float Modifier);// 0x20914d0
	void SetSnowBoradRotationInAir(float Pitch, float Yaw, float Roll);// 0x20913d0
	void SetSkillFingerIndex(byte FingerIndex);// 0x2091358
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x20912d8
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x2091210
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x1e54e6c
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x2091148
	void SetReconnectZombieWaveDataToClient(const ZombieWaveUIState[] ZombieWaveUIState, float PastTime);// 0x2090fa4
	void SetPoisonFogEnable(bool IsEnbale);// 0x2090f24
	void SetPlayerTeamBodyInstMask(int Mask);// 0x2090eac
	void SetPlayerMark(Vector Loc);// 0x2090e00
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x2090c40
	void SetPlayerBodyInstMask(int Mask);// 0x2090bc8
	void SetPlaneEnabled(bool InEnable);// 0x2090b48
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x2090a34
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x2090970
	void SetObservingTime(float Time);// 0x20908f8
	void SetMovable(bool IsMovable);// 0x2090878
	void SetMaxHealth(float HP);// 0x2090800
	void SetLowProbCircle(float X, float Y, float R, float Prob);// 0x20906b8
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x20905e8
	void SetLaunchFlyStateOnServer(enum StateType);// 0x2090570
	void SetLaunchFlyState(enum StateType);// 0x20904f8
	void SetJoyStickScale(float JSScale);// 0x2090480
	void SetJoyStickPtrFireMode(int FireMode);// 0x2090408
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x209034c
	void SetJoyStickOpacity(float JSOpacity);// 0x20902d4
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x2090264
	void SetJoyStickCenter(Vector2D JSCenter);// 0x20901f4
	void SetIsSnowy(bool bSnowy);// 0x2090174
	void SetIsShowBlood(bool InIsShowBlood);// 0x20900f4
	void SetIsRainy(bool bRainy);// 0x2090074
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x208fff4
	void SetIsBlizzard(bool bBlizzard);// 0x208ff74
	void SetInfectResetPlayerInterTime(float InterTime);// 0x208fefc
	void SetHasResultState(bool InState);// 0x208fe7c
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x208fcac
	void SetFuelByPercent(float percent);// 0x208fc34
	void SetEnterInteractiveActor(Actor* IActor, bool IsIn);// 0x208fb70
	void SetEnableWingAvatar(bool Val);// 0x208faf0
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x208fa2c
	void SetDisableTouchMoveInput(bool bDisable);// 0x208f9ac
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x208f8ac
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x208f764
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x208f668
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x208f550
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x208f3cc
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x208f23c
	void SetCircleCenter(FString PointString);// 0x208f180
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x208f074
	void SetCanDropItem(bool bCanDrop);// 0x208eff4
	void SetBeKickedPlayerName(FString InPlayerName);// 0x208ee9c
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x208edd4
	void SetAllInfectedAreaLevel(int LevelId);// 0x208ed5c
	void SetAirDropEnable(bool Enable);// 0x208ecdc
	void SetAirAttackEnable(bool Enable);// 0x208ec5c
	void Set2x2ForceCircleLastR(float R);// 0x208ebe4
	void Set2x2ForceCircle(float X, float Y, float R);// 0x208eae4
	void Set2x2CircleCenter(int Index, float X, float Y);// 0x208e9e4
	void Set2x2Circle3Center(float x1, float y1, float x2, float y2, float x3, float y3);// 0x208e80c
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x208e650
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x208e4e8
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x208e434
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x208e380
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x208e2cc
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x208e218
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x208e064
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x208dd24
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x208d9e4
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x208d930
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x208d834
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x208d58c
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x208d3a8
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x208d264
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x208d1b0
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x208d0b4
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x208d000
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType);// 0x208cf04
	void ServerSetSelfForceHideState(int SlotID, bool bSelfHide);// 0x208cdf4
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x208ccb0
	void ServerSetObsverLocation(const Vector locat);// 0x208cc04
	void ServerSetIsFreeView(bool isFreeView);// 0x208cb3c
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x208ca28
	void ServerSetFreeCamera(Rotator InRotation);// 0x208c97c
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x208c868
	void ServerSetControlRotation(const Rotator NewRotation);// 0x208c7bc
	void ServerSendLogToLobby(FString ErrorLog);// 0x208c700
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x208c594
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x208c330
	void ServerRemoteDestroyAllActor();// 0x208c310
	void ServerRemoteDestroyActor(int SingleId);// 0x208c298
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x208c13c
	void ServerReceiveThePlane(int64 TimeStamp);// 0x208c084
	void ServerReceiveServerStateType(enum ReceivedType, enum ClientType, int64 TimeStamp);// 0x208bf2c
	void ServerQuitSpectating();// 0x208bed0
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x208badc
	void ServerOpenParachute();// 0x208ba80
	void ServerObserveKiller();// 0x208ba24
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x208b970
	void ServerObserveAirDropBox(int boxId);// 0x208b8bc
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x208b7ac
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x208b6f8
	void ServerJumpFromPlane();// 0x208b69c
	void ServerInterruptGame();// 0x208b640
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x208b54c
	void ServerHandleMsg(enum Msg);// 0x208b498
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x208b368
	void ServerGetTotalPlayers();// 0x208b30c
	void ServerGetPlayerAliasInfoList();// 0x208b2b0
	void ServerGetCircleInfo();// 0x208b254
	void ServerFight();// 0x208b1f8
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x208b144
	void ServerExitFreeCamera();// 0x208b0e8
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x208af84
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x208ae74
	void ServerDoPickupRevivalFlag();// 0x208ae18
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x208acfc
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x208ac00
	void ServerCMD_RPC(FString Cmd);// 0x208ab0c
	void ServerCMD(FString Cmd);// 0x1df6a20
	void ServerClearTeammatesCache();// 0x208aab0
	void ServerChangeWeaponScheme(int Index);// 0x208a9fc
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x208a948
	void ServerChangeStatePC(enum TargetStateType);// 0x208a8d0
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x208a76c
	void SendStringMsg(FString Message, int MsgID, int ItemID, FString PlayerKeyString);// 0x208a5a0
	void SendLogToLobbyOnece(byte LogType);// 0x208a528
	void SendGameStateInitOK();// 0x208a4cc
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x208a400
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x208a284
	void ScopeOut();// 0x208a270
	void ScopeIn();// 0x208a25c
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x208a074
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x2089f1c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x2089dc4
	void RunOnNextFrameEvent();// 0x2089db0
	void RunOnNextFrame__DelegateSignature();// 0x29fa2f4
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x2089cec
	void RPC_UseInteractiveActor();// 0x2089c90
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x2089c34
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x2089ab0
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x20896f0
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x2089380
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x2089010
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x2088f50
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x2088e9c
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x2088dd8
	void RPC_Server_SendLog(FString ErrorLog);// 0x2088ce4
	void RPC_Server_ReqHealth();// 0x2088c88
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x2088b94
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x2088ad4
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x2088930
	void RPC_Server_PrintHP();// 0x20888d4
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x20887d8
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x2088724
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x2088670
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x208857c
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x2088488
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x2088334
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x2088180
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x208808c
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x2087ce0
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x2087c78
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x2087ae0
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(bool bFinishAllWeapon, const ItemDefineID[] WeaponIDArray);// 0x2087990
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x208789c
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x20877a8
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x20876b4
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x20875b8
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x2087470
	void RPC_Server_ClientHasReactivated();// 0x2087414
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x20872b0
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x208714c
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x2087050
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x2086f9c
	void RPC_ReviveState_GiveUpRevive();// 0x2086f40
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x2086e8c
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x2086c78
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x2086ab4
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x2086938
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x2086838
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x2086784
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x208662c
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x20864d0
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x20862c8
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x20860c0
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x2085ff8
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x2085e20
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x2085d24
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x2085c28
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x2085b2c
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x20859d4
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x20858bc
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x2085778
	void RPC_GiveUpGame();// 0x208571c
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x20855dc
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x20854a4
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x2085424
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x208531c
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x2085108
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x2084f3c
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x2084d70
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x2084ba4
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeID);// 0x2084a9c
	void RPC_Client_RemoteDestroyAllActor();// 0x2084a80
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x2084a00
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x208486c
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x20845d4
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x20844bc
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x2084214
	void RPC_Client_NotifyHealth(float Health);// 0x2084160
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x20840e0
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x2083f7c
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x2083e88
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x2083d8c
	void RPC_Client_BeginInteractiveProcess();// 0x2083d70
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc);// 0x2083c38
	void RPC_CancelUseInteractiveActor();// 0x2083bdc
	void RevivalTemateSuccess();// 0x2083bc0
	void RevivalTemateFail(FString Reason);// 0x2083afc
	float RetriveMobileContentScaleFactor();// 0x2083ad4
	void RetrievePlayerBattleResultData();// 0x1dd8bcc
	void RestoreDefaultInteractionSize(int JSIndex);// 0x2083a5c
	void RespHasSignalBar(bool bHas);// 0x20839d4
	void RespawnRecoverData(UAEPlayerController* PC);// 0x208395c
	void ResetVehicleEngine();// 0x2083948
	void ResetMissingUIUpdate();// 0x29fa2f4
	void RequireNetCullingDistanceByDevice();// 0x20838ec
	void RequireDeviceInfo();// 0x20838d0
	void RequestServerHandleMsg();// 0x2083874
	void RequestPlayerNewbieInfo();// 0x2083860
	void RequestHasSignalBar();// 0x2083804
	bool RequestChangeWearInBattle(int NewIndex);// 0x2083784
	bool RequestChangeWear(int NewIndex);// 0x2083704
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x208363c
	void ReqRecordEnterIceMountain();// 0x20835e0
	void ReqLeaveVehicle();// 0x20835cc
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x2083518
	void ReqExchangeVehicleCharacter(int Param);// 0x20834a0
	void ReqEnterVehicle(float dis);// 0x2083428
	void ReqEnterSnowBoard();// 0x2083414
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x208339c
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x2083240
	void ReportAntiCheatInfo();// 0x208322c
	void ReplaceVehicleWithPath(FString Path);// 0x2083170
	void ReplaceVehicle();// 0x208315c
	void Rep_RefreshInteractiveActor();// 0x2083148
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x20830d0
	void RemoveAllDoors();// 0x20830bc
	void ReleaseFire();// 0x29fa2f4
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x2083044
	void ReInitParachuteItem();// 0x2083030
	void RefreshTopMostUIPanel(byte Type);// 0x29fa2f4
	void RefreshShootDetailInfo();// 0x208301c
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x29fa2f4
	void RecoverStatusAfterReconnecting();// 0x2083000
	void RecordPathPoint();// 0x2082fec
	void ReceiveClientRestart();// 0x29fa2f4
	void ReceiveBackpackComponent();// 0x2082fd0
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x2082e80
	void PrintMovementLog(int PrintLog);// 0x2082e08
	void PrintDownCollision();// 0x2082df4
	void PrintAllPickupWarpper();// 0x2082de0
	void PressGrenade(bool isThrow);// 0x29fa2f4
	void PressFire(int FingerIndex);// 0x29fa2f4
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x2082d24
	void PlayerKillingDelegate__DelegateSignature();// 0x29fa2f4
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x29fa2f4
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x29fa2f4
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x29fa2f4
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x29fa2f4
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x29fa2f4
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x29fa2f4
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x29fa2f4
	void PlayBattleSound(FString BankName, FString SoundName);// 0x2082be4
	void OpenParachute();// 0x2082bd0
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x29fa2f4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x29fa2f4
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x29fa2f4
	void OnWallFeedBack(bool _WallFeedBack);// 0x2082b50
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x2082ad8
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x2082a1c
	void OnViewTargetPlayerStateChanged();// 0x2082a08
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x2082990
	void OnViewTargetChangeVehicleSeat();// 0x208297c
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x2082904
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x29fa2f4
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x29fa2f4
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x29fa2f4
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x29fa2f4
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x29fa2f4
	void OnUseVehicleWarWeapon();// 0x20828f0
	void OnUseVehicleWarItem();// 0x20828dc
	void OnUseVehicleWarEyes();// 0x20828c8
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x29fa2f4
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x29fa2f4
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x29fa2f4
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x29fa2f4
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x20826e8
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x29fa2f4
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x29fa2f4
	void OnTeammatesAllDie();// 0x20826d4
	void OnTeammateLogin(int InTeamID);// 0x208265c
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x29fa2f4
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x29fa2f4
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x29fa2f4
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x29fa2f4
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x29fa2f4
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x29fa2f4
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x29fa2f4
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x29fa2f4
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x29fa2f4
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x29fa2f4
	void OnStopFireDelegate__DelegateSignature();// 0x29fa2f4
	void OnStartFireDelegate__DelegateSignature();// 0x29fa2f4
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x29fa2f4
	void OnSpectatorChange__DelegateSignature();// 0x29fa2f4
	void OnSpectatorCameraChange(bool bDie);// 0x29fa2f4
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x29fa2f4
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime, bool bCanCancelSkill);// 0x29fa2f4
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x29fa2f4
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x29fa2f4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x208258c
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x29fa2f4
	void OnServerFinishPickupRevivalFlag();// 0x2082570
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0x29fa2f4
	void OnSelfPlayerKilledOthersPlayer__DelegateSignature(int CauserWeaponAvatarID);// 0x29fa2f4
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x29fa2f4
	void OnRepTeammateChange__DelegateSignature();// 0x29fa2f4
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x29fa2f4
	void OnRepPlayerState__DelegateSignature();// 0x29fa2f4
	void OnRepNotify_SetBattleOwner();// 0x208255c
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x1dd8bcc
	void OnRep_WeatherFog();// 0x2082548
	void OnRep_WeaponSystemReconnectReplicateData();// 0x2082534
	void OnRep_WeaponFunctionChanged();// 0x2082520
	void OnRep_WeaponAvatarDataList();// 0x2082504
	void OnRep_UsedSimulation();// 0x20824e8
	void OnRep_SwitchWeather();// 0x20824d4
	void OnRep_STExtraBaseCharacter();// 0x20824c0
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x20824ac
	void OnRep_ShowWeaponHitDetailInfo();// 0x2082498
	void OnRep_ServerStateType();// 0x2082484
	void OnRep_RefreshTotalPlayers();// 0x2082470
	void OnRep_RefreshAirDropBox();// 0x208245c
	void OnRep_Plane();// 0x2082448
	void OnRep_ObservedItemList();// 0x2082434
	void OnRep_InWateringRangeBP();// 0x29fa2f4
	void OnRep_InWateringCRange();// 0x20823e0
	void OnRep_InitialEquipmentAvatar();// 0x20823c4
	void OnRep_InitialConsumableAvatar();// 0x20823a8
	void OnRep_ImprisonmentTeammateSucess();// 0x2082394
	void OnRep_GameStateMsgType();// 0x2082380
	void OnRep_ForbitPickEffect();// 0x208236c
	void OnRep_ForbitPick();// 0x2082358
	void OnRep_FiringPlayerList();// 0x2082344
	void OnRep_EnableDeathPlaybackDelay();// 0x2082330
	void OnRep_DeadTombBox();// 0x208231c
	void OnRep_CanOpenParachute();// 0x2082308
	void OnRep_CanJump();// 0x20822f4
	void OnRep_CanImprisonmentTeammate();// 0x20822e0
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x20822cc
	void OnRep_BackpackComponent();// 0x20822b8
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x29fa2f4
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x29fa2f4
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x29fa2f4
	void OnReleaseFire();// 0x20822a4
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x29fa2f4
	void OnReconnected__DelegateSignature();// 0x29fa2f4
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0x29fa2f4
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x29fa2f4
	void OnPressVehicleWarMatchData();// 0x2082290
	void OnPressVampireClothSlotBtn();// 0x208227c
	void OnPressTurnplateQuickMsgBtn();// 0x2082268
	void OnPressTriggerEntireMapBtn();// 0x2082254
	void OnPressShowTagVehileSeatListBtn();// 0x2082240
	void OnPressRolewearChangeBtn(int Index);// 0x20821c8
	void OnPressItemSKillBtn();// 0x20821b4
	void OnPressFire();// 0x20821a0
	void OnPressBackpackBtn();// 0x208218c
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x29fa2f4
	void OnPlayerUseRecoverItem();// 0x2082178
	void OnPlayerStateChanged();// 0x2082164
	void OnPlayerReConnected(int LostPlayerKey);// 0x20820b0
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x29fa2f4
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x29fa2f4
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x29fa2f4
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x29fa2f4
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x29fa2f4
	void OnPlayerLostConnection(int LostPlayerKey);// 0x2081ffc
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x29fa2f4
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x29fa2f4
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x29fa2f4
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x2081f7c
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x29fa2f4
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x29fa2f4
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x29fa2f4
	void OnPlayerClickDriveBtn();// 0x2081f68
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x29fa2f4
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x29fa2f4
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x2081e24
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x29fa2f4
	void OnPickUpExpand();// 0x2081dbc
	void OnPickUpCollapsed(bool isCollapsed);// 0x2081d3c
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x29fa2f4
	void OnOneFloatValueDelegate__DelegateSignature(float TheValue);// 0x29fa2f4
	void OnOccupyNewbieGuide(int inGuideID);// 0x2081cc4
	void OnObserverLevelLoaded();// 0x2081cb0
	void OnObservedUsingWeaponChanged();// 0x2081c9c
	void OnObservedPoisonFogStageChanged();// 0x2081c88
	void OnObservedItemsChanged();// 0x2081c74
	void OnObservedBulletNumChanged();// 0x2081c60
	void OnNightStateChangedDelegate__DelegateSignature();// 0x29fa2f4
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x2081be8
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x29fa2f4
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x29fa2f4
	void OnLostConnection__DelegateSignature();// 0x29fa2f4
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x29fa2f4
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0x29fa2f4
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float RatioSignalHP);// 0x29fa2f4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x29fa2f4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x29fa2f4
	void OnKillerNotify(Actor* Killer);// 0x2081b70
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x2081a60
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x2081980
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2081870
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x29fa2f4
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x29fa2f4
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x29fa2f4
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x29fa2f4
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x29fa2f4
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x29fa2f4
	void OnGameStartDelegate__DelegateSignature();// 0x29fa2f4
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x29fa2f4
	void OnGameModeStateChanged();// 0x29fa2f4
	void OnFingerMove__DelegateSignature(Vector Loc);// 0x29fa2f4
	void OnExitGame__DelegateSignature();// 0x29fa2f4
	void OnEquipWeaponDelegate__DelegateSignature();// 0x29fa2f4
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x29fa2f4
	void OnEquipmentAvatarChange__DelegateSignature();// 0x29fa2f4
	void OnEnterBattleResultStep();// 0x208185c
	void OnDropItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x29fa2f4
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x29fa2f4
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x29fa2f4
	void OnDeadBoxExpand();// 0x2081848
	void OnDeadBoxCollapsed(bool isCollpased);// 0x20817c8
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x29fa2f4
	void OnConsumableAvatarChange__DelegateSignature();// 0x29fa2f4
	void OnClientWillGotoSpectating();// 0x20817b4
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamId, Actor*[] PeerVisualFieldActorList);// 0x29fa2f4
	void OnClickVehicleWarBuff();// 0x20817a0
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x29fa2f4
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x29fa2f4
	void OnCharacterRecoveryHealthEvent();// 0x208178c
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x29fa2f4
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x29fa2f4
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x29fa2f4
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x29fa2f4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x208170c
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x29fa2f4
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x29fa2f4
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x29fa2f4
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x29fa2f4
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x208168c
	void OnBuyRevivalSign();// 0x2081670
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x29fa2f4
	void OnAutoSprintActive__DelegateSignature();// 0x29fa2f4
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x2081508
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x29fa2f4
	void ObserveWhoKilledMe();// 0x20814f4
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x2081440
	void ObserveCharacter(FString InPlayerName);// 0x20812e8
	void ObserveAirDropBox(int boxId);// 0x2081270
	void OBCameraTurnSlower();// 0x208125c
	void OBCameraTurnFaster();// 0x2081248
	void OBCameraMoveSlower();// 0x2081234
	void OBCameraMoveNear();// 0x2081220
	void OBCameraMoveFaster();// 0x208120c
	void OBCameraMoveFar();// 0x20811f8
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x2080fe0
	void NotifyIsInResultView(bool isInResultView);// 0x2080f5c
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x29fa2f4
	void MoveUp(float Rate);// 0x2080ee4
	void MoveToVehicle(int ItemID);// 0x2080e6c
	void MoveToNearestVehicle(float IgnoreDistance);// 0x2080df4
	void MoveToItem(int ItemID);// 0x2080d7c
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x2080bf0
	void MoveToAIByDropItem(int ItemID);// 0x2080b78
	void MoveToAI();// 0x2080b64
	void MoveTo(float X, float Y, float Z);// 0x2080a64
	void MoveTempleToSelf();// 0x2080a50
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x2080994
	void ModifyStreamingDistance(int Distance);// 0x208091c
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x208081c
	void MemberVoice(int member, int Status);// 0x29fa2f4
	void MarkStartFireFrame();// 0x2080808
	void MakeVehicleFly(int isFly, bool bIsUp);// 0x1ed63fc
	void LogAIItemCount(int ItemID, float Distance);// 0x208074c
	void LocalProfileFootprint();// 0x2080738
	void LocalGetGameStateReconnectInfo();// 0x2080724
	void LoadAllLand(bool bLoadAll);// 0x20806a4
	void LerpFPPCamera();// 0x2080690
	void KillSomeOne(FString InPlayerName);// 0x20805d4
	void KillAllEnermyVehicle();// 0x20805c0
	void KillAll();// 0x20805ac
	void Kill(int GivenNumber);// 0x2080534
	void KickPlayerFromGame();// 0x2080520
	void JumpFromPlane();// 0x208050c
	void JoystickTriggerSprint(bool bIsSprint);// 0x29fa2f4
	bool IsViewTarget(const Actor* pActor);// 0x2080484
	bool IsUse3DTouch();// 0x208045c
	bool IsTouchToRotControl();// 0x208042c
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x20803ac
	bool IsToggleOBBulletTrackEffect();// 0x2080384
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x2080304
	bool IsStandalone();// 0x20802d0
	bool IsShowBlood();// 0x20802b0
	bool IsSameTeam(Pawn* Other);// 0x2080230
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x20801b0
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x2080130
	bool IsMurderSelfDefense(FString InformMurderName);// 0x208006c
	bool IsMoveable_DontConsiderFollowingState();// 0x2080044
	bool IsMoveable();// 0x208001c
	bool IsLastBreathOrRescueingOther();// 0x207fff4
	bool IsInRevival();// 0x207ffcc
	bool IsInPlane();// 0x207ffa4
	bool IsInParachuteOpen();// 0x207ff7c
	bool IsInParachuteJump();// 0x207ff54
	bool IsInParachute();// 0x207ff2c
	bool IsInObservingPlayback();// 0x207ff04
	bool IsInInitial();// 0x207fedc
	bool IsInFreeCameraView();// 0x207fec0
	bool IsInFinish();// 0x207fe98
	bool IsInFight();// 0x207fe70
	bool IsInDeathReplay();// 0x207fe48
	bool IsInDead();// 0x207fe20
	bool IsForbitPickMakeEffect();// 0x207fdf8
	bool IsForbitPick(out const FName TombName);// 0x207fd64
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x207fc98
	bool IsCanViewEnemy();// 0x207fc70
	bool IsCanSpectateTeammate();// 0x207fc48
	bool IsCanImprisonmentTeammate();// 0x207fc20
	bool IsCacheReceiveRespawnZombie();// 0x207fbf8
	bool IsAllowActorTouchMove();// 0x207fbd0
	bool IsAGMPlayer();// 0x207fba8
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x207faec
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x207fa74
	void InputCameraMoveTest(float DeltaSeconds);// 0x207f9fc
	void InitWeatherConfigComponent();// 0x207f9e8
	void InitTaskDatas(uint32 InPlayerKey);// 0x207f970
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0x29fa2f4
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x207f788
	void InitTaskComponent();// 0x207f774
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x29fa2f4
	void InitJoyStickAfterActivation();// 0x29fa2f4
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0x29fa2f4
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x207f674
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x29fa2f4
	void InfectionEndRound();// 0x207f660
	void ImprisonmentTeammate(FString TeammateName, bool IsSelfDef);// 0x207f510
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x29fa2f4
	void HandleUpdateShovelingRelease();// 0x207f4fc
	void HandleUpdateShovelingPressed();// 0x207f4e8
	void HandleUpdateShoveling();// 0x207f4d4
	void HandleTogglePlayerListInOB();// 0x207f4c0
	void HandleToggleOBTeamList(bool InShow);// 0x207f440
	void HandleToggleMapInOB();// 0x207f42c
	void HandleToggleHitDamageDisplay();// 0x207f418
	void HandleToggleBulletTrack();// 0x207f404
	void HandleTipInfo(FString FullMsg);// 0x207f348
	void HandleSwitchToTeammatePrev();// 0x207f334
	void HandleSwitchToTeammateNext();// 0x207f320
	void HandleSwitchToTeam(int InTeamID);// 0x207f2a8
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x207f230
	void HandleLeaveFreeViewInOB();// 0x207f1ac
	void HandleLandOnGroundEnd();// 0x207f21c
	void HandleFlyLeapPlatform();// 0x207f1c0
	void HandleEnterFreeViewInOB();// 0x207f1ac
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x207f0dc
	void HandleClientHasReactivated();// 0x207f0c8
	void HandleChangeRolewearDone();// 0x29fa2f4
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x207f00c
	int GotoSpectating(int TeammatePlayerid);// 0x207ef84
	void GotoFlying();// 0x207ef70
	void GotoDoubleCircleEdge(float Z);// 0x207eef8
	void GMTeleport(FName Teleporter);// 0x207ee80
	void GMSpawnTrueAI(int playerCount);// 0x207ee08
	void GMSetScalarParam(FString Name, FString ShaderName, float Value);// 0x207eb54
	void GMSetCampId(int CamId);// 0x207eadc
	void GMSetBoolPoisonCircle();// 0x207eac8
	void GMSetBoolAirDrop();// 0x207eab4
	void GMSetBoolAirAttack();// 0x207eaa0
	void GMSetBoolAI();// 0x207ea8c
	void GMSendDailyTaskReport();// 0x207ea78
	void GMOpenWeather(int OpenWeatherID);// 0x207ea00
	void GMFormationAITeam();// 0x207e9ec
	void GMEnableRandom();// 0x207e9d8
	void GMEnableAllComponent();// 0x207e9c4
	void GMDisableRandom();// 0x207e9b0
	void GMDisableAllComponent();// 0x207e99c
	void GMCloseWeather(int CloseWeatherID);// 0x207e924
	void GMChangeFinalCircleAI();// 0x207e910
	void GMBroastSyncTaskInfo();// 0x207e8fc
	int GetWriteCircleDistance();// 0x207e8d4
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x207e8ac
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x207e7b0
	int GetWeaponDIYPlanID(int WeaponId);// 0x207e730
	int GetWeaponAvatarItemId(int BPID);// 0x207e6a8
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x207e5dc
	float GetViewPortDPIScale();// 0x207e5ac
	VehicleUserComponent* GetVehicleUserComp();// 0x207e584
	bool GetUseMotionControlLog();// 0x207e55c
	bool GetUseMotionControlEnable();// 0x207e534
	int GetUnlockWearCount();// 0x207e50c
	float GetTouchForce(byte FingerIndex);// 0x207e48c
	Actor* GetThePlane();// 0x207e46c
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x207e3ec
	SpringArmComponent* GetTargetedSpringArm();// 0x207e3c4
	int GetStatTriangles();// 0x1dfdcb0
	FString GetStatMemory();// 0x2053118
	int GetStatDrawCalls();// 0x1dfdcb0
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x207e26c
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x207e164
	int[] GetSpecialAreaList();// 0x207e0a4
	int GetSpecialAreaID();// 0x207e07c
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x207e054
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x207dfbc
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x207de60
	int GetRevivalCountDownTime();// 0x207de38
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x29fa2f4
	QuickSignComponent* GetQuickSignComponent();// 0x207de10
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x207dde8
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x207dd00
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x207dcd8
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x207dc14
	Transform GetPaintDecalTargetTransform();// 0x207dbb4
	ObservingReplay* GetObservingPlayback();// 0x207db8c
	Vector GetNewestAirDropBoxPos();// 0x207db44
	PlayerInfoInOB[] GetNearPlayerList();// 0x207da34
	FString GetMurderUIDStr();// 0x207d938
	FString GetMurderName();// 0x207d878
	bool GetMurderIsAI();// 0x207d840
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x207d604
	byte GetMaxTouchForceFinger();// 0x207d5c4
	Vector2D GetJoyStickVisualSize();// 0x207d584
	Vector2D GetJoyStickCenter();// 0x207d544
	int GetItemUseSpecialAreaID(int ItemID);// 0x207d4c4
	bool GetIsRespawn();// 0x207d4a4
	bool GetIsMurderSameTeam();// 0x207d46c
	bool GetIsFreeCamera();// 0x207d44c
	enum GetInfectionPawnSubType();// 0x207d424
	enum GetInfectionPawnMainType();// 0x207d3fc
	IdeaDecalManager* GetIdeaDecalManager();// 0x207d3d4
	void GetGameStateReconnectInfoOnServer();// 0x207d378
	void GetGameScreenSize();// 0x1dd8bcc
	void GetGameResult();// 0x207d364
	LastGameRemainItemData GetGameRemainItems();// 0x207d274
	int GetFriendDistance();// 0x1dfdcb0
	Vector GetFocalLocation();// 0x207d224
	FString GetFinalMurderName();// 0x207d104
	WeaponHitDetailInfo GetDetailHitInfo();// 0x207cfd0
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x207ce54
	enum GetCurrentStateType();// 0x207ce2c
	Vector GetCurrentLevelOffset();// 0x207cde4
	STExtraPlayerState* GetCurPlayerState();// 0x207cdbc
	int GetCurPlayerId();// 0x207cd94
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x207cd6c
	Vector GetCurPawnLocation();// 0x207cd24
	Pawn* GetCurPawn();// 0x207ccfc
	float GetCurFPS();// 0x1dfdcb0
	Rotator GetControlLookRotation();// 0x207ccac
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x207cbc0
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x207ca68
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x207c9e8
	ChatComponent* GetChatComponent();// 0x207c9c0
	BackpackComponent* GetBackpackComponent();// 0x207c998
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x207c834
	void GameModeGotoNextState();// 0x207c820
	void GameModeGotoFightingState();// 0x207c80c
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x207c750
	void ForceServerSetControlRotationOnVehicle();// 0x207c73c
	void ForceReleaseCurTouchMoveFinger();// 0x207c728
	void ForceDropItemsWithType(int TypeItem);// 0x207c6b0
	void ForceDropItems(out const int[] ItemTableList);// 0x207c5e4
	void ForceDropAllItem();// 0x207c5d0
	void FlushItem(int onlyStatic);// 0x207c558
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x207c4e8
	void FireOrGrenade();// 0x207c4d4
	void FindAIDropItem(int ItemID);// 0x207c45c
	void Fight();// 0x207c448
	void FadeSceneToGrayOnDeath(bool bSet);// 0x207c3c8
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x207c224
	void ExitNightState();// 0x207c210
	void ExitFreeCamera(bool IsForceReset);// 0x207c190
	void ExecDSCommand(const FString DSCommand);// 0x207c0cc
	void EquipIceDrinkItems(out const int[] ItemList);// 0x207c000
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x29fa2f4
	void EnterNightState();// 0x207bfec
	void EnterExtreme(bool enterOrQuit);// 0x207bf6c
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x207be64
	void EndForceTouchFire(Vector Loc);// 0x207bdf4
	void EnablePlayerInHouse(bool bIsIn);// 0x207bd74
	void EnableMyLandscapeDraw();// 0x1dd8bcc
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x29fa2f4
	void DynamicCreateComponents();// 0x207bd60
	void DsLuaGM(const FString CMDString);// 0x207bc08
	void DsLuaDoString(FString LuaString);// 0x207bb4c
	void DropItemsWithType(int TypeItem);// 0x207bad4
	void DropItem(int ID);// 0x207ba5c
	void DropAllItem();// 0x207ba48
	void DoUITouchMove(Vector Loc);// 0x29fa2f4
	void DoubleClickCancel(const byte FingerIndex);// 0x207b9d0
	void DoTouchMove(float Yaw, float Pitch);// 0x29fa2f4
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x207b91c
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x207b868
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x29fa2f4
	void DisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x207b65c
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x207b3a4
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x207b0ec
	void DisplayGameTipWithMsgID(int ID);// 0x207b074
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x207adbc
	void DisplayBattleGeneralTip(int ID, FString param1, FString param2);// 0x207ab04
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x207aa8c
	void DispatchPlayerReconnectedEvent();// 0x207aa78
	void DispatchPlayerLostEvent();// 0x207aa64
	void DispatchPlayerExitEvent();// 0x207aa50
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x207a9d8
	void DisableMyLandscapeDraw();// 0x1dd8bcc
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x29fa2f4
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x29fa2f4
	void DelayGotoSpectating();// 0x207a9c4
	void DelayForceExitFreeCamera();// 0x207a9b0
	void DebugWorldPlayerAvatarInfo();// 0x207a99c
	void DebugSetUIVisibility(bool bUIVisibility);// 0x29fa2f4
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x207a91c
	void DebugEnableDrawSearchLine(int bEnabled);// 0x1e836a4
	void DebugEnableBulletImpact(int bEnabled);// 0x1e836a4
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x207a78c
	void DealGetAllNearShotWeapon(float disRate);// 0x207a714
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x207a658
	void DealGetAllNearMoveCharacter(float checkDis);// 0x207a5e0
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x207a51c
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x207a360
	void ConsumeRevivalSign();// 0x207a344
	void CollectAllPlayerWeaponPosInfo();// 0x1dd8bcc
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x207a22c
	void ClientStopShoveling();// 0x207a1d0
	void ClientStartOnlineGame();// 0x207a1b4
	void ClientShowInfectAreaWarning();// 0x207a158
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x2079fd0
	void ClientSetPoisonSmogStage(int SmogStage);// 0x2079f1c
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x2079e14
	void ClientSetControlRotation(const Rotator NewRotation);// 0x2079d9c
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x2079ca0
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x2079bd8
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x2079ac4
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x20799f4
	void ClientQuitViewEnemy();// 0x20799d8
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x20798d8
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x29fa2f4
	void ClientOnHurt();// 0x20798bc
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x29fa2f4
	void ClientOnDamageToOther(float _DamageToOther);// 0x207983c
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x29fa2f4
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x2079728
	void ClientInterruptGame();// 0x20796cc
	void ClientInitIngameUIAfterRespawn();// 0x2079670
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x20795b4
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x20794ec
	void ClientGotoSpectating();// 0x20794d0
	void ClientGiveUpRevivalTemmates();// 0x20794bc
	void ClientGameStarted();// 0x20794a0
	void ClientFriendBattleEnd();// 0x2079484
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x20793fc
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x2079374
	void ClientEnterViewBox(int boxId);// 0x20792f4
	void ClientEndOnlineGame();// 0x20792d8
	void ClientDisplayNormalTips(FString Content);// 0x2079214
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x2079000
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x2078e3c
	void ClientDisplayGameTipWithMsgID(int ID);// 0x2078d88
	void ClientCheckStartShovelingFail();// 0x2078d2c
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x2078c78
	void ClientChangeStatePC(enum TargetStateType);// 0x2078bf8
	void ClearParachuteAnimAssetCache();// 0x2078be4
	void ClearBossBornPoint();// 0x2078bd0
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x2078b30
	bool CientRevivalTemmates();// 0x2078b08
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x2078a3c
	void CheckConsumeGlideItem();// 0x2078a28
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x20789a0
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x2078920
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x20788a8
	void ChangeToWalkingDead();// 0x2078894
	void ChangeStatePC(enum TargetStateType);// 0x207881c
	void ChangeSpectatorStateToFreeView();// 0x2078808
	bool ChangeRolewearIndex(int NewIndex);// 0x2078788
	void ChangePVELevel(int Lv);// 0x2078710
	void ChangeFinishTime(int RestTime);// 0x2078698
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x29fa2f4
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x29fa2f4
	void ChangeAIBehaviorTree(int TreeIndex);// 0x2078620
	void CanSeeAllUI(bool bUIVisibility);// 0x1e54e6c
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x2078580
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x2078470
	void CallZombieFlowAirDrop(int ZombieID);// 0x20783f8
	void CallZombieAirDrop(int ZombieID);// 0x2078380
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x20782c8
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x20780e4
	void CallShowTouchInterface(bool InShow);// 0x207805c
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x2077a8c
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x207792c
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x20778b4
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x207783c
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x29fa2f4
	void C2S_RequestSkillPrompt();// 0x20777e0
	void C2S_RequestBeingRescuedRemainingTime();// 0x2077784
	void BroadcastFatalDamageToClient(FString CauserName, FString VictimName, FString FuzzyCauserName, FString FuzzyVictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int Relationship, int PreviousHealthStatus, FString RealKillerName, int realKillerNewKillNum, FString CauserNation, FString VictimNation, uint32 causerKey, uint32 victimKey, int causerAnchorPlatformResID, int causerAnchorPlatformColorID, int victimAnchorPlatformResID, int victimAnchorPlatformColorID, int realKillerAnchorPlatformResID, int realKillerAnchorPlatformColorID, int CauserWeaponAvatarID, int CauserClothAvatarID, int CauserType, int VictimType);// 0x2076e04
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x2076ba0
	bool BPGetIsAndroidSimulator();// 0x2076b78
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x207692c
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x2076768
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x29fa2f4
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x20766f0
	void BindVoiceCheckFunction();// 0x20766dc
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x2076620
	void BeginAbsorb();// 0x20765c4
	void BackToGameDataRefresh();// 0x20765b0
	bool AutoSelectViewTarget();// 0x2076588
	void AutoSelectTeammateToView();// 0x2076574
	void AddWeaponPendantItem(int WeaponId, int pendantID);// 0x20764b8
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x20763ac
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x20762ac
	void AddItemAttachList(int BaseItemID);// 0x2076234
	void AddItem(int ID, int Count, int PickupType);// 0x2076134
	void AddBossBornPoint(float BornX, float BornY);// 0x2076078
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x2075f30
	void AddAIItem(int ID, int Count, float Distance);// 0x2075e30
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x2075d6c
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x2075cec

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x608, Size: 8]
	FString PlayerName;//[Offset: 0x610, Size: 12]
	uint32 PlayerKey;//[Offset: 0x61c, Size: 4]
	uint64 UId;//[Offset: 0x620, Size: 8]
	int TeamID;//[Offset: 0x634, Size: 4]
	int CampID;//[Offset: 0x638, Size: 4]
	Vector CharacterLocation;//[Offset: 0x63c, Size: 12]
	int RoomMode;//[Offset: 0x648, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x64c, Size: 20]
	int planeAvatarId;//[Offset: 0x660, Size: 4]
	int DyeDebugFlag;//[Offset: 0x664, Size: 4]
	int PlayerStartID;//[Offset: 0x668, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x670, Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x6a4, Size: 12]
	int InPacketLossRate;//[Offset: 0x6b0, Size: 4]
	int OutPacketLossRate;//[Offset: 0x6b4, Size: 4]
	int ClientNetworkType;//[Offset: 0x6b8, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d5, Size: 1]
	int GameReplayType;//[Offset: 0x6d8, Size: 4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x6dc, Size: 44]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x708, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x714, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x720, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	FString Nation;//[Offset: 0x728, Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x73c, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x740, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x744, Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x750, Size: 12]
	int RolewearIndex;//[Offset: 0x75c, Size: 4]
	int[] equip_plating_list;//[Offset: 0x760, Size: 12]
	int VehicleSkinInReady;//[Offset: 0x76c, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x774, Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x780, Size: 24]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x798, Size: 12]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0x7a4, Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x7b0, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x7bc, Size: 4]
	int PveLevel;//[Offset: 0x7c0, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0x7c4, Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x7d0, Size: 12]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0x7dc, Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x7e8, Size: 12]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0x7f4, Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x800, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x810, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x81c, Size: 60]
	<int,int> GrenadeAvatarItemList;//[Offset: 0x894, Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x8d0, Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x8dc, Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x918, Size: 60]
	int[] VehicleMusicList;//[Offset: 0x954, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x960, Size: 12]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0x96c, Size: 12]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0x978, Size: 60]
	<int,int> InitialWeaponPendantList;//[Offset: 0x9b4, Size: 60]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x9f0, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0x9fc, Size: 12]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xa08, Size: 12]
	uint32 TaskSyncToDsTs;//[Offset: 0xa14, Size: 4]
	BornItem[] BornItems;//[Offset: 0xa18, Size: 12]
	int AnchorPlatResID;//[Offset: 0xa24, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xa28, Size: 4]
	int64 LastGameResultTime;//[Offset: 0xa40, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa49, Size: 1]
	FString IpCountryStr;//[Offset: 0xa4c, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5b, Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0xa5c, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xa64, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xa68, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	FString[] FriendObservers;//[Offset: 0xa70, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa88, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xad0, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xaec, Size: 12]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xaf8, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xb04, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xb10, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xb1c, Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xb28, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xb34, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xb40, Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xb4c, Size: 12]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xb58, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xb80, Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	float NotifyTimeOut;//[Offset: 0xb90, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xb94, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xb98, Size: 12]
	int AntiDataCD;//[Offset: 0xbb0, Size: 4]
	int ModeID;//[Offset: 0xbb4, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0xbe0, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0xbe4, Size: 4]
	bool UseingWeaponScheme();// 0x260e72c
	void TestShowLongTimeNoOperation();// 0x260e6f0
	void TestShowConfirmDialogOfMisKill();// 0x260e6dc
	void TestRespawn();// 0x1dd8bcc
	void TestLogout();// 0x1dd8bcc
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x260e558
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x260e3fc
	void SetUsedSimulationCVar(bool Value);// 0x260e37c
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x260e29c
	void SetPanels(out const UAEUserWidget*[] panels);// 0x260e1c8
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x260e12c
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x260e04c
	void ServerTestLogout();// 0x260dff0
	void ServerSetVoiceId(int VoiceID);// 0x260df3c
	void ServerKickSelf();// 0x260dee0
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x260de2c
	void ServerExitGame();// 0x260ddd0
	void ServerAcknowledgeReconnection(uint32 Token);// 0x260dd1c
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x260dc0c
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x260dafc
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x260d9b8
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x260d6a0
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x260d564
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x260d428
	void Respawn();// 0x260d40c
	void ResetUsedSimulationCVar();// 0x260d3f8
	void ReleaseInGameUI();// 0x260d3dc
	void ReceivePostLoginInit();// 0x29fa2f4
	void PrintStatistics();// 0x1dd8bcc
	void PlayerStartIDReceived();// 0x260d3c8
	void OnRep_WeaponAvatarDataList();// 0x2082504
	void OnRep_WatchPlayerKey();// 0x260d3ac
	void OnRep_UsedSimulation();// 0x20824e8
	void OnRep_PveLevel();// 0x260d390
	void OnRep_PlayerOBInfoList();// 0x260d37c
	void OnRep_LastGameResultTime();// 0x260d360
	void OnRep_IsSpectatingEnemy();// 0x260d344
	void OnRep_IsSpectating();// 0x260d328
	void OnRep_IsObserver();// 0x260d30c
	void OnRep_InitialWeaponSchemeInfo();// 0x260d2f8
	void OnRep_InitialEquipmentAvatar();// 0x20823c4
	void OnRep_InitialConsumableAvatar();// 0x20823a8
	void OnRep_FriendObservers();// 0x260d2dc
	void OnRep_CurWeaponSchemeIndex();// 0x1dd8bcc
	void OnRep_bRoomOwner();// 0x260d2c0
	void NotifyEnterBattle();// 0x260d2ac
	void LuaDoString(FString LuaString);// 0x260d1e8
	void KickSelf();// 0x1dd8bcc
	bool IsSpectator();// 0x260d1c0
	bool IsRoomMode();// 0x260d19c
	bool IsPureSpectator();// 0x260d174
	bool IsObserver();// 0x260d14c
	bool IsInSpectatingEnemy();// 0x260d124
	bool IsInSpectating();// 0x260d0fc
	bool IsFriendOrEnemySpectator();// 0x260d0d4
	bool IsFriendObserver();// 0x260d0ac
	bool IsExited();// 0x260d084
	bool IsDemoRecSpectator();// 0x260d05c
	bool IsDemoPlaySpectator();// 0x260d034
	bool IsDemoPlayGlobalObserver();// 0x260d00c
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x260cf60
	void InitWeaponAvatarItems();// 0x260cf44
	void InitVehicleMusicList();// 0x260cf28
	void InitVehicleAvatarList();// 0x260cf0c
	void InitVehicleAdvanceAvatarList();// 0x260cef0
	void InitIngameUI();// 0x260ced4
	void InitGrenadeAvatarList(bool ReInitial);// 0x260ce4c
	int GotoSpectating(int PlayerID);// 0x207ef84
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x260cd78
	int GetWeaponAvatarItemId(int ID);// 0x207e6a8
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskID);// 0x260cce8
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x260ccc0
	uint32 GetCurrentOBPlayerKey();// 0x260cc90
	int GetCurrentOBPlayerInfoIndex();// 0x260cc68
	void ForceNetReady();// 0x260cc54
	void ExitGame();// 0x260cc40
	void ExhaustCPU();// 0x260cc2c
	void ExecDSCommand(const FString DSCommand);// 0x207c0cc
	void ExcuteIntRecord(FString Key, int Count);// 0x260ca90
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x260c8f4
	void EnableInGameUI();// 0x260c8e0
	void DumpUAENetActors();// 0x260c8cc
	void DumpRegions();// 0x260c8b8
	void DumpNetActors();// 0x1dd8bcc
	void DumpCharacters();// 0x260c8a4
	void DumpAllUI();// 0x1dd8bcc
	void DumpAllObjects();// 0x1dd8bcc
	void DumpAllActors();// 0x1dd8bcc
	void DoLuaFile(FString Filename);// 0x260c7e0
	void DoCrash();// 0x1dd8bcc
	void DisableInGameUI();// 0x260c7cc
	void ClientShowTeammateEscapeNotice();// 0x260c7b0
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString param1, FString param2);// 0x260c514
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x260c388
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x260c240
	void ClientInitPlayerOBInfoButton();// 0x260c224
	void ClientBroadcastRespawnComplete();// 0x260c208
	void ClientBroadcastReconnectionSuccessful();// 0x260c1ec
	void ClientAcknowledgeReconnection(uint32 Token);// 0x260c16c
	void CheckPlayerOBInfoButtonInit();// 0x260c150
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x260c0c8
	void CastUIMsg(FString strMsg, FString module);// 0x260bf80
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x260be38
	void CallLuaGlobalFunction(FString FunctionName);// 0x260bd74

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x5b0, Size: 60]
	FString LuaFilePath;//[Offset: 0x5ec, Size: 12]

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherID;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int upassKeepBuy;//[Offset: 0x20, Size: 4]
	int upassCurValue;//[Offset: 0x24, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UId;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	float KDNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int[] PetAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 72]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	int WearIndex;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4, Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskID;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BornItem
	int BornItemID;//[Offset: 0x0, Size: 4]
	int BornItemCount;//[Offset: 0x4, Size: 4]
	int BornItemFlags;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1b8, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1bc, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1c0, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1c4, Size: 4]
	Property*[] Params;//[Offset: 0x240, Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x254, Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x260, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x280, Size: 32]
	float TickRate;//[Offset: 0x2a0, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2a8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2b0, Size: 8]
	enum FadingStatus;//[Offset: 0x2c0, Size: 1]
	float CurrentOpacity;//[Offset: 0x2c4, Size: 4]
	float FadingInTime;//[Offset: 0x2c8, Size: 4]
	float FadingOutTime;//[Offset: 0x2cc, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x2d4, Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x2e0, Size: 12]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x2f0, Size: 12]
	bool Visible();// 0x43453e0
	void UnRegistFromGameFrontendHUD();// 0x43453cc
	void SynchronizeBlueprintProperties();// 0x29fa2f4
	void Show();// 0x43453b8
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x4345340
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x43452c8
	static void SetOnWidgetShow(delegate onShow);// 0x434522c
	static void SetOnWidgetHide(delegate OnHide);// 0x4345190
	static void SetOnClearUIStack(delegate onClear);// 0x43450f4
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x4344fac
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x4344f34
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x4344e70
	void ReceiveShow();// 0x29fa2f4
	void ReceiveHide();// 0x29fa2f4
	void ReceivedMountWidget();// 0x1efd8a0
	void ReceivedInitWidget();// 0x29fa2f4
	void ReCachedUIMsgFunction();// 0x4344e5c
	static void PushOpenedUIStack(FString Name);// 0x4344da8
	static void PopOpenedUIStack(FString curOpen);// 0x4344cf4
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x29fa2f4
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x29fa2f4
	void OnRightClicked(Vector2D TempScreenPos);// 0x29fa2f4
	void OnFadeOutFinished();// 0x1efd6b0
	void OnFadeInFinished();// 0x1efd694
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x29fa2f4
	void OnClicked(Vector2D TempScreenPos);// 0x29fa2f4
	void OnClearUIStack__DelegateSignature();// 0x29fa2f4
	bool IntCompare(int A, int B, enum CompareType);// 0x4344bec
	void InitWidget(bool Recursive);// 0x4344b6c
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x1f9d780
	void Hide();// 0x4344b58
	void HandleUIMessageBattle(FString UIMessage);// 0x4344a9c
	void HandleUIMessage(FString UIMessage);// 0x43449e0
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x434484c
	Widget* GetWidgetContainsName(FString Name);// 0x4344788
	UAEUserWidget* GetParentWidget();// 0x4344760
	PlayerController* GetOwningPlayer();// 0x1dcdf68
	LogicManagerBase* GetOwningLogicManager();// 0x4344738
	FrontendHUD* GetOwningFrontendHUD();// 0x4344710
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x4344690
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x4344544
	UserWidget* GetChildWidget(FString WName);// 0x4344480
	Margin GetAdapation();// 0x4344458
	bool FloatCompare(float A, float B, enum CompareType);// 0x4344350
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x43442d8
	void DestroyWidget();// 0x43442c4
	static void ClearOpenedUIStack();// 0x43442b0
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x43441f4
	void ClearFunctionCache();// 0x43441e0
	void ClearClassWidgetTree();// 0x43441cc
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x1f0aaf0

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0, Size: 8]
	FName LastGameStatus;//[Offset: 0xb8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0, Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc, Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8, Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4, Size: 12]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x10c, Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x118, Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x124, Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x130, Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x13c, Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x148, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x154, Size: 4]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x43402cc
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x4340118
	void OnPreLoadMap(FString MapName);// 0x4340054
	void OnPostLoadMapWithWorld(World* World);// 0x41077c8
	void OnGameViewportClientCreated();// 0x1dd8bcc
	World* GetWorld();// 0x213e580
	FrontendUtils* GetUtils();// 0x434002c
	PlayerController* GetPlayerController();// 0x4340004
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x433fea4
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x433fe24
	GameViewportClient* GetGameViewportClient();// 0x433fdfc
	GameMode* GetGameMode();// 0x433fdd4
	GameInstance* GetGameInstance();// 0x4174cb8
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x433fc0c
	void EnableGuiTest(bool bEnable);// 0x433fb8c
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x433fa8c
	void ClearLogicManagerByName(FString managerName);// 0x433f934

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20, Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x38, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x44, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x80, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x8c, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xc8, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xd4, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x110, Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1a8, Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1b4, Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1b8, Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1bc, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x1c8, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x1d4, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x210, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x21c, Size: 60]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x280, Size: 60]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x4341cb0
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x4341b90
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x43419c0
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x4341760
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x4341540
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x434147c
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x43413c0
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x4341304
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x4341248
	void PopAllPushedUI();// 0x4341234
	void OnAllSceneCamerasRegistered();// 0x1debe60
	bool IsPushedPanel(out const FName managerName);// 0x43411a0
	bool IsNoRenderClient();// 0x4341178
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x4341018
	FString GetUIStackTopSrcTag();// 0x4340f58
	FString GetUIStackTopDstTag();// 0x4340e98
	FString GetUIStackTop();// 0x4340dd8
	CameraActor* GetSceneCamera();// 0x4340db0
	FrontendHUD* GetOwningFrontendHUD();// 0x4340d88
	Object* GetGlobalUIEventDispatcher();// 0x4340d60
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x4340ce0
	void EnableLobbyMainLight(bool NewEnable);// 0x4340c60
	void ClearAllSceneCameras();// 0x4340c4c

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2cc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	void ToggleEnabled();// 0x41dd428
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x41dd3b8
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x41dd340
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x41dd2c8
	void SetLightColor(LinearColor NewLightColor);// 0x41dd24c
	void SetEnabled(bool bSetEnabled);// 0x41dd1cc
	void SetCastShadows(bool bNewValue);// 0x41dd14c
	void SetBrightness(float NewBrightness);// 0x41dd0d4
	void SetAffectTranslucentLighting(bool bNewValue);// 0x41dd054
	void OnRep_bEnabled();// 0x1dcbc3c
	bool IsEnabled();// 0x41dd02c
	LinearColor GetLightColor();// 0x41dcfe8
	float GetBrightness();// 0x41dcfc0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x288, Size: 4]
	float MaxDrawDistance;//[Offset: 0x28c, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x290, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	int ShadowMapChannel;//[Offset: 0x298, Size: 4]
	float MinRoughness;//[Offset: 0x2a0, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x2a4, Size: 4]
	int LightPriority;//[Offset: 0x2a8, Size: 4]
	float ShadowBias;//[Offset: 0x2ac, Size: 4]
	float ShadowSharpen;//[Offset: 0x2b0, Size: 4]
	float ContactShadowLength;//[Offset: 0x2b4, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2b9, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2bc, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x2c0, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2cc, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	float IESBrightnessScale;//[Offset: 0x2d4, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2d8, Size: 4]
	float DisabledBrightness;//[Offset: 0x2dc, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	float BloomScale;//[Offset: 0x2e4, Size: 4]
	float BloomThreshold;//[Offset: 0x2e8, Size: 4]
	Color BloomTint;//[Offset: 0x2ec, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2f4, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x41de370
	void SetTemperature(float NewTemperature);// 0x41de2f8
	void SetShadowBias(float NewValue);// 0x41de280
	void SetLightPriority(int Priority);// 0x41de208
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x41de198
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x41de120
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x41de0a8
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x41de030
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x41ddf68
	void SetIntensity(float NewIntensity);// 0x41ddef0
	void SetIndirectLightingIntensity(float NewIntensity);// 0x41dde78
	void SetIESTexture(TextureLightProfile* NewValue);// 0x41dde00
	void SetEnableLightShaftBloom(bool bNewValue);// 0x41ddd80
	void SetBloomTint(Color NewValue);// 0x41ddd10
	void SetBloomThreshold(float NewValue);// 0x41ddc98
	void SetBloomScale(float NewValue);// 0x41ddc20
	void SetAffectTranslucentLighting(bool bNewValue);// 0x41ddba0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x41ddb20
	void ForceUpdateShadowState();// 0x41ddb0c

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x260, Size: 16]
	float Brightness;//[Offset: 0x270, Size: 4]
	float Intensity;//[Offset: 0x274, Size: 4]
	Color LightColor;//[Offset: 0x278, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x280, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x284, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x41df4a8
	void SetCastShadows(bool bNewValue);// 0x41df428
	LinearColor GetLightColor();// 0x41df3e4

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xd8, Size: 4]
	float TextureMultiplier;//[Offset: 0xdc, Size: 4]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2d4, Size: 4]
	void SetRadius(float NewRadius);// 0x422fab4
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x422fa3c

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x35c, Size: 4]
	float AttenuationRadius;//[Offset: 0x360, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	float LightFalloffExponent;//[Offset: 0x368, Size: 4]
	float SourceRadius;//[Offset: 0x36c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x370, Size: 4]
	float SourceLength;//[Offset: 0x374, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x37c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x380, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x388, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x42301c8
	void SetSourceLength(float NewValue);// 0x4230150
	void SetSoftSourceRadius(float bNewValue);// 0x42300d8
	void SetSimulateRectLight(bool NewValue);// 0x4230058
	void SetSimulatePortalLight(bool NewValue);// 0x422ffd8
	void SetRectLightSourceWidth(float NewValue);// 0x422ff60
	void SetRectLightSourceHeight(float NewValue);// 0x422fee8
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x422fe70
	void SetAttenuationRadius(float NewRadius);// 0x422fdf8

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2cc, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	void OnRep_bEnabled();// 0x1dcbc3c

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x288, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x28c, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x290, Size: 4]
	int CubemapResolution;//[Offset: 0x294, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x298, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2a0, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x2b0, Size: 4]
	float Contrast;//[Offset: 0x2b4, Size: 4]
	float OcclusionExponent;//[Offset: 0x2b8, Size: 4]
	float MinOcclusion;//[Offset: 0x2bc, Size: 4]
	Color OcclusionTint;//[Offset: 0x2c0, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x2c4, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x368, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4254c5c
	void SetOcclusionTint(out const Color InTint);// 0x4254bd8
	void SetOcclusionExponent(float InOcclusionExponent);// 0x4254b60
	void SetOcclusionContrast(float InOcclusionContrast);// 0x4254ae8
	void SetMinOcclusion(float InMinOcclusion);// 0x4254a70
	void SetLightColor(LinearColor NewLightColor);// 0x42549f4
	void SetIntensity(float NewIntensity);// 0x425497c
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4254904
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x4254804
	void SetCubemap(TextureCube* NewCubemap);// 0x425478c
	void RecaptureSky();// 0x4254778

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x304, Size: 12]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x1efcd04
	void RemoveWidget(UserWidget* Widget);// 0x4346654
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x1f40560
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x4346598
	void AddWidgetInternal(UserWidget* Widget);// 0x20edc88
	void AddWidget(UserWidget* Widget);// 0x4346520

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	int iUIControlState;//[Offset: 0x38, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c, Size: 4]
	FName[] GameStatusList;//[Offset: 0x4c, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0x7c, Size: 12]
	UAEUserWidget*[] WidgetList;//[Offset: 0x88, Size: 12]
	Object*[] DelayMessage_Obj;//[Offset: 0xa4, Size: 12]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x4342bd8
	bool IsEnableRemoveDynamicWidgets();// 0x4342bb0
	UAEUserWidget*[] GetWidgetList();// 0x4342af0
	UAEUserWidget* GetWidgetByName(FString InName);// 0x4342a2c
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x43429ac
	FrontendHUD* GetOwningFrontendHUD();// 0x4174654
	int GetDefaultSceneCamera();// 0x41747b8
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x43427cc

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x320, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 1]
	int NumSpectators;//[Offset: 0x32c, Size: 4]
	int NumPlayers;//[Offset: 0x330, Size: 4]
	int NumBots;//[Offset: 0x334, Size: 4]
	float MinRespawnDelay;//[Offset: 0x338, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x33c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x340, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x344, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x350, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	void StartMatch();// 0x1e2fe3c
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x4162388
	void Say(FString Msg);// 0x41622c4
	void RestartGame();// 0x1e2fde8
	bool ReadyToStartMatch();// 0x20af988
	bool ReadyToEndMatch();// 0x4162294
	void K2_OnSetMatchState(FName NewState);// 0x29fa2f4
	bool IsMatchInProgress();// 0x20af944
	bool HasMatchEnded();// 0x20a7290
	FName GetMatchState();// 0x4162270
	void EndMatch();// 0x1e2fe20
	void AbortMatch();// 0x1e2fdcc

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x591, Size: 1]
	enum TimingPolicy;//[Offset: 0x592, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x594, Size: 4]
	IntPoint DrawSize;//[Offset: 0x598, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	float RedrawTime;//[Offset: 0x5a4, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x5b0, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	Vector2D Pivot;//[Offset: 0x5bc, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5c8, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x5cc, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x5dc, Size: 16]
	float OpacityFromTexture;//[Offset: 0x5ec, Size: 4]
	enum BlendMode;//[Offset: 0x5f0, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f2, Size: 1]
	UserWidget* Widget;//[Offset: 0x5f4, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x608, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x60c, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x610, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x614, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x618, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x61c, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x620, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x624, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x628, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 1]
	FName SharedLayerName;//[Offset: 0x630, Size: 8]
	int LayerZOrder;//[Offset: 0x638, Size: 4]
	enum GeometryMode;//[Offset: 0x63c, Size: 1]
	float CylinderArcAngle;//[Offset: 0x640, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x1e2592c
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x36860a0
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x3686028
	void SetDrawSize(Vector2D Size);// 0x3685fb8
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x3685f3c
	void RequestRedraw();// 0x2186984
	UserWidget* GetUserWidgetObject();// 0x3685f14
	TextureRenderTarget2D* GetRenderTarget();// 0x3685eec
	LocalPlayer* GetOwnerPlayer();// 0x3685ec4
	MaterialInstanceDynamic* GetMaterialInstance();// 0x3685e9c
	Vector2D GetDrawSize();// 0x3685e5c

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xa8, Size: 4]
	int SizeY;//[Offset: 0xac, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb0, Size: 16]
	byte AddressX;//[Offset: 0xc0, Size: 1]
	byte AddressY;//[Offset: 0xc1, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xc3, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	byte OverrideFormat;//[Offset: 0xc5, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0, Size: 152]
	delegate BrushDelegate;//[Offset: 0x168, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x178, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x188, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	FString imageSrcPath;//[Offset: 0x19c, Size: 12]
	float HitTestAreaRadius;//[Offset: 0x1a8, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1b0, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	void SetOpacity(float InOpacity);// 0x365febc
	void SetDontPaintWhenColorZero(bool Enable);// 0x365fe3c
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x365fdbc
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x365fd40
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x365fc7c
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x365fbb8
	void SetBrushFromPathAsync(FString ResourcePath);// 0x365fafc
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x365fa84
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x365fa0c
	void SetBrush(out const SlateBrush InBrush);// 0x365f8a4
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x365f87c
	bool GetDontPaintWhenColorZero();// 0x365f854
	bool GetDontPaintWhenAlphaZero();// 0x365f82c

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 152]

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x4, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int8 PlatID;//[Offset: 0x24, Size: 1]
	FName PlayerType;//[Offset: 0x28, Size: 8]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	uint32 PlayerKey;//[Offset: 0x3c, Size: 4]
	int TeamID;//[Offset: 0x40, Size: 4]
	int PlayerBornPointID;//[Offset: 0x44, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	byte gender;//[Offset: 0x4a, Size: 1]
	FString PIC_URL;//[Offset: 0x4c, Size: 12]
	int Level;//[Offset: 0x58, Size: 4]
	int Segment_Level;//[Offset: 0x5c, Size: 4]
	int AceImprintShowId;//[Offset: 0x60, Size: 4]
	int AvatarBoxId;//[Offset: 0x64, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x6c, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x78, Size: 12]
	int[] equip_plating_list;//[Offset: 0x84, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x90, Size: 12]
	int RolewearIndex;//[Offset: 0x9c, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xa0, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xac, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xb8, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xc4, Size: 12]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0xd0, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0xdc, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0xe8, Size: 12]
	int VehicleSkinInReady;//[Offset: 0xf4, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xf8, Size: 48]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x128, Size: 44]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x154, Size: 24]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x16c, Size: 12]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x178, Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x184, Size: 4]
	int PveLevel;//[Offset: 0x188, Size: 4]
	int[] CharSkillList;//[Offset: 0x18c, Size: 12]
	GameModePlayerBanChat banChat;//[Offset: 0x198, Size: 16]
	GameModePlayerBanChat banTarget;//[Offset: 0x1a8, Size: 16]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x1b8, Size: 12]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x1c4, Size: 12]
	int[] audioChat;//[Offset: 0x1d0, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x1e0, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x1e8, Size: 8]
	float SyncedTimestamp;//[Offset: 0x1f0, Size: 4]
	float DestinyValue;//[Offset: 0x1f4, Size: 4]
	float WarmScore;//[Offset: 0x1f8, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x1fc, Size: 4]
	int LeaderCount;//[Offset: 0x200, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x208, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x210, Size: 12]
	uint64 LastGameBattleID;//[Offset: 0x220, Size: 8]
	float RatingScore;//[Offset: 0x228, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	float MaxRankingScore;//[Offset: 0x230, Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	uint64 WatchPlayerKey;//[Offset: 0x238, Size: 8]
	byte PlatformGender;//[Offset: 0x240, Size: 1]
	int planeAvatarId;//[Offset: 0x244, Size: 4]
	int DyeDebugFlag;//[Offset: 0x248, Size: 4]
	FString Nation;//[Offset: 0x24c, Size: 12]
	int MatchLabel;//[Offset: 0x258, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x25c, Size: 4]
	int AnchorPlatResID;//[Offset: 0x260, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x268, Size: 8]
	int64 CorpsID;//[Offset: 0x270, Size: 8]
	int64 CampID;//[Offset: 0x278, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	FString IpCountryStr;//[Offset: 0x284, Size: 12]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x294, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x298, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x29c, Size: 12]
	int LandId;//[Offset: 0x2a8, Size: 4]
	int FollowType;//[Offset: 0x2ac, Size: 4]
	uint64 FollowUID;//[Offset: 0x2b0, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x2b8, Size: 4]
	BornItem[] BornItems;//[Offset: 0x2bc, Size: 12]
	uint64 LuckmateUID;//[Offset: 0x2c8, Size: 8]

--------------------------------
Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x4, Size: 12]
	FString AliasNation;//[Offset: 0x10, Size: 12]
	int AliasRank;//[Offset: 0x1c, Size: 4]
	FString AliasPartnerName;//[Offset: 0x20, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xb78, Size: 12]
	delegate OnDeath;//[Offset: 0xb84, Size: 12]
	delegate OnBulletChange;//[Offset: 0xb90, Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0xb9c, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xba8, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xbb4, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xbc0, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xbcc, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xbd8, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xbe4, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xbf0, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xbfc, Size: 12]
	delegate OnFollowStateChanged;//[Offset: 0xc08, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xc34, Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0xc40, Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0xc4c, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xc58, Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0xc64, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xc70, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xc7c, Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0xc88, Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0xc94, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xcd0, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xcdc, Size: 12]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0xce8, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xcf4, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xd00, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xd0c, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xd18, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xd24, Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xd30, Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xd3c, Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xd48, Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xd54, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xd60, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xd64, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xd68, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xd6c, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xd70, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xd74, Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd78, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd78, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd78, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xd7c, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	float Money;//[Offset: 0xd84, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd89, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd89, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8a, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8b, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xd8c, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd90, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd91, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd92, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd93, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xd98, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xda0, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0xda4, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xda8, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0xdac, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0xdb0, Size: 4]
	FName HeadSocketName;//[Offset: 0xdb8, Size: 8]
	FName LFootSocketName;//[Offset: 0xdc0, Size: 8]
	FName RFootSocketName;//[Offset: 0xdc8, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xdd0, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xdd4, Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xdd8, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xddc, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xde0, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xde4, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xde8, Size: 4]
	GroupPhysicsComponent* GroupPhysics;//[Offset: 0xdec, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xdf4, Size: 12]
	byte PoseState;//[Offset: 0xe00, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xe04, Size: 4]
	Actor* ThePlane;//[Offset: 0xe08, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xe0c, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xe10, Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1c, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1d, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	float RadialDamageScale;//[Offset: 0xe30, Size: 4]
	byte LastPoseState;//[Offset: 0xe34, Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe35, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0xe38, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe41, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe42, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0xe44, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0xe4c, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0xe50, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0xe5c, Size: 12]
	Actor*[] InventoryData;//[Offset: 0xe68, Size: 12]
	AkComponent* SoundComp;//[Offset: 0xecc, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0xed0, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed4, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed5, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0xed8, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0xedc, Size: 4]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0xee0, Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0xf1c, Size: 4]
	int CurrentTaskTriggerAreaID;//[Offset: 0xf20, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0xf24, Size: 4]
	float ProduceSoundInterval;//[Offset: 0xf28, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0xf2c, Size: 4]
	float HearRadius;//[Offset: 0xf30, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf39, Size: 1]
	Actor* WaterObj;//[Offset: 0xf3c, Size: 4]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xf42, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xf44, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xf48, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xf4c, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0xf54, Size: 4]
	float NearDeathBreath;//[Offset: 0xf58, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5c, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xf60, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0xf6c, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0xf70, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0xf78, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0xf80, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0xf88, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0xf90, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xf98, Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0xfd4, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0xfe0, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0xfec, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0xff0, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0xffc, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1000, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1004, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x100c, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1018, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x101c, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1020, Size: 4]
	float ScopeLagScale;//[Offset: 0x1028, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x102c, Size: 4]
	float ScopeFov;//[Offset: 0x1030, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1034, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1038, Size: 4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x103c, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1040, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x1044, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1048, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x104c, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x1058, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1064, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x1068, Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x106c, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x1070, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x1074, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x1078, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x107c, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1080, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1084, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x1088, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1098, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x10a4, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x10b0, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x10bc, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c9, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ca, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x10cc, Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0x10d0, Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x10dc, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x10e8, Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x10f4, Size: 4]
	float PickUpRadius;//[Offset: 0x10f8, Size: 4]
	SimViewData SimulateViewData;//[Offset: 0x10fc, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1102, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x1104, Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1110, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1138, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x114c, Size: 12]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1158, Size: 12]
	float MaxDispalyFootprintDistance;//[Offset: 0x1168, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x116c, Size: 12]
	KilledTipsBlock BlockData;//[Offset: 0x1178, Size: 40]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x11a0, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x11a4, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ac, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x11b0, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x11b8, Size: 12]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x11c4, Size: 12]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x11d0, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x11e0, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1208, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x120c, Size: 4]
	float AIThrowPitch;//[Offset: 0x1214, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x1218, Size: 8]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x1220, Size: 60]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x125c, Size: 12]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1269, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x126c, Size: 4]
	Vector CurInputVector;//[Offset: 0x1270, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x127c, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x128c, Size: 4]
	float voiceCheckCD;//[Offset: 0x1290, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1294, Size: 4]
	float VoiceCheckDis;//[Offset: 0x1298, Size: 4]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x129c, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x12b8, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x12f4, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x1304, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1308, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x130c, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1310, Size: 4]
	int HandFolderRatio;//[Offset: 0x1314, Size: 4]
	float SwimUpRate;//[Offset: 0x1318, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x131c, Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1320, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1321, Size: 1]
	Vector MoveInputState;//[Offset: 0x1354, Size: 12]
	float SwitchPoseCD;//[Offset: 0x1380, Size: 4]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a0, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x13bc, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x13c4, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x13e0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1410, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1458, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x145c, Size: 4]
	float DelayHideDuration;//[Offset: 0x1460, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1464, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1468, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146c, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1470, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1480, Size: 148]
	AnimParamList CurAnimParamList;//[Offset: 0x1514, Size: 284]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1630, Size: 120]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x16a8, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x16d8, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x16f8, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1718, Size: 12]
	byte ThrowGrenadeMode;//[Offset: 0x1724, Size: 1]
	byte PrevThrowGrenadeMode;//[Offset: 0x1725, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1734, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1735, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1738, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1740, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1744, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1748, Size: 4]
	float HighWalkSpeed;//[Offset: 0x1764, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1768, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x176c, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1770, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1774, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1778, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x177c, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1780, Size: 4]
	float HealthPredict;//[Offset: 0x1784, Size: 4]
	float BreathAmount;//[Offset: 0x1788, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178c, Size: 1]
	int PoisonSmogStage;//[Offset: 0x1790, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1794, Size: 4]
	float AntidoteExeTime;//[Offset: 0x1798, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x179c, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x17a0, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x17a4, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x17a8, Size: 12]
	byte HealthStatus;//[Offset: 0x17b4, Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x17b8, Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f4, Size: 1]
	float SpeedRate;//[Offset: 0x17f8, Size: 4]
	float EnergySpeedScale;//[Offset: 0x17fc, Size: 4]
	float RecoveryScale;//[Offset: 0x1800, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1804, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1808, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x180c, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x1810, Size: 48]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1840, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184c, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1850, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1854, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1858, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x185c, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1864, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1868, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1870, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1874, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1878, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x187c, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1880, Size: 4]
	float StandHalfHeight;//[Offset: 0x1884, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1888, Size: 4]
	float ProneHalfHeight;//[Offset: 0x188c, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1890, Size: 4]
	float StandRadius;//[Offset: 0x1894, Size: 4]
	float DyingRadius;//[Offset: 0x1898, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x189c, Size: 12]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x18a8, Size: 12]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x18b4, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x18c0, Size: 4]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d0, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x18d4, Size: 12]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e0, Size: 1]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x18e4, Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x18e8, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x18f0, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fa, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x18fc, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1918, Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x191c, Size: 4]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x1920, Size: 4]
	<enum,int> AvatarRectifyData;//[Offset: 0x1924, Size: 60]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x1960, Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x1968, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x1974, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x1980, Size: 12]
	delegate OnPlayerStateUpdated;//[Offset: 0x198c, Size: 12]
	float MaxLeaveVehicleVelocity;//[Offset: 0x19a4, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x19b4, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x19c0, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1a94, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a98, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x1a9c, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x1aa0, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x1aa8, Size: 60]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1ae4, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x1afc, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1b00, Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b20, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x1b24, Size: 4]
	float MoveRightInputValue;//[Offset: 0x1b28, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2c, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x1b30, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b34, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b35, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1b38, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1b3c, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x1b44, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x1b48, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x1b54, Size: 4]
	enum FollowState;//[Offset: 0x1b58, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x1b5c, Size: 12]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x1b68, Size: 12]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x1b74, Size: 12]
	FString LatestInviter;//[Offset: 0x1b80, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8c, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x1b94, Size: 4]
	float maxShowAlpha;//[Offset: 0x1b9c, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x1ba0, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x1ba4, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x1ba8, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x1bdc, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1be0, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x1be4, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x1c3c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x1c4c, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x1cc8, Size: 4]
	Vector EmoteColBox;//[Offset: 0x1d08, Size: 12]
	int IsEnableLogAIPlayerPos;//[Offset: 0x1d1c, Size: 4]
	float CompVisionOpDis;//[Offset: 0x1d20, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x1d24, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d28, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x1d38, Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d74, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x1d7c, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x1d80, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x1d84, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x1d88, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x1d8c, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x1d90, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x1d94, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x1d98, Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9c, Size: 1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x1da8, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db0, Size: 1]
	float EquipingScopeDelay;//[Offset: 0x1db4, Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db9, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x1dbc, Size: 12]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x1dcc, Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x1de4, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x1df4, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e20, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e21, Size: 1]
	int AloneDistance;//[Offset: 0x1e24, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x1e28, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x1e30, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x1e58, Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x1e5c, Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x1e60, Size: 12]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x1e6c, Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x1e70, Size: 12]
	Vector ChangeWearingColBox;//[Offset: 0x1ebc, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x1ec8, Size: 4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x1ecc, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed0, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed1, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x1ed4, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x1ed8, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x1edc, Size: 4]
	Actor* DecalActor;//[Offset: 0x1ee0, Size: 4]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x1ee4, Size: 4]
	Actor* PuzzleTraceLineActor;//[Offset: 0x1ee8, Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eec, Size: 1]
	float OutBattleStateTime;//[Offset: 0x1ef0, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x1ef8, Size: 12]
	BonfireActor* CurBonfire;//[Offset: 0x1f04, Size: 4]
	BonfireActor* BuiltBonfire;//[Offset: 0x1f08, Size: 4]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x1f10, Size: 40]
	delegate OnCharacterPlayEmote;//[Offset: 0x1f38, Size: 12]
	delegate OnCharacterWin;//[Offset: 0x1f44, Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x1f50, Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x1f5c, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x1f68, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x1f69, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6a, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x1f6c, Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x1f78, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x1f7c, Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x1fb8, Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fca, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x1fcc, Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x1fd8, Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x1fdc, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x1fe0, Size: 152]
	byte MeleeAutoAimType;//[Offset: 0x2078, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2084, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x2088, Size: 28]
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a4, Size: 1]
	TimerHandle CharacterShowWeaponTimerHandle;//[Offset: 0x20a8, Size: 8]
	float CharacterShowWeaponTime;//[Offset: 0x20b0, Size: 4]
	enum CharacterMainType;//[Offset: 0x20b4, Size: 1]
	enum CharacterSubType;//[Offset: 0x20b5, Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x20b8, Size: 12]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x20c4, Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x20c8, Size: 4]
	delegate BulletTrackShowDelegate;//[Offset: 0x20cc, Size: 12]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x20d8, Size: 12]
	delegate MarkPlayerPosDelegate;//[Offset: 0x20e4, Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x20f0, Size: 4]
	PlayerVaultComponent* VaultControllerComp;//[Offset: 0x20f4, Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f8, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f9, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x20fc, Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x2108, Size: 4]
	float FallingTime;//[Offset: 0x2110, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2114, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2115, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x2118, Size: 4]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211c, Size: 1]
	Actor* MyConstActor;//[Offset: 0x2120, Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2124, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x2128, Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x2134, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x213c, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x2148, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x214c, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x2150, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x2164, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2168, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2169, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x216a, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x216c, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x2174, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x2180, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x21b0, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x21b4, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x21c0, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c8, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c9, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x21d0, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x21f8, Size: 12]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2204, Size: 4]
	float RTNoDamageTime;//[Offset: 0x2208, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220c, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2214, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x2220, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x2224, Size: 4]
	FString DebugInfoWidgetPath;//[Offset: 0x2228, Size: 12]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x2234, Size: 12]
	Vector DebugInfoLocation;//[Offset: 0x2240, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x224c, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2254, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2255, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x2258, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x225c, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x2260, Size: 12]
	Actor*[] OverlapDarkAreas;//[Offset: 0x226c, Size: 12]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x2278, Size: 4]
	int PrepareEmoteId;//[Offset: 0x2280, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x2284, Size: 12]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2290, Size: 4]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2294, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2295, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2296, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x2298, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229d, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229e, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229f, Size: 1]
	bool bRepShoulderState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a0, Size: 1]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a1, Size: 1]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x2013518
	void VaultFailPawnCPP(const FString Content);// 0x2013454
	void VaultFailPawnBluePrint(out const FString Content);// 0x2013380
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x20132c4
	void UseSpringJump(int SpringID);// 0x201324c
	void UserCancelRescue();// 0x2013238
	void UpdateUnderGroundArea(bool bEnterUnderGroundArea);// 0x20131b8
	bool UpdateShovelingState();// 0x2013190
	void UpdateShovelingHoldStateRelease();// 0x201317c
	void UpdateShovelingHoldStatePressed();// 0x2013168
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x20130ac
	void UpdateFallingTime(float Delta);// 0x2013034
	void UpdateDynamicHoldGunOption();// 0x2013020
	void UpdateCurrentShootWeaponTick();// 0x201300c
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x2012e78
	void UpdateAllInstanceBodyTransform(int Type);// 0x2012e00
	void UnequipWeaponFinish();// 0x1dd8bcc
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x2012d3c
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x2012b74
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x2012aa4
	void TryFollowInitialParachuteLeader(FString Name);// 0x201294c
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x2012878
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x20127f0
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x29fa2f4
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x29fa2f4
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x201268c
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x201260c
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x2012538
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x20123d0
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x2012300
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x2012230
	void SwitchShoulderStateServer(bool bShoulder);// 0x2012168
	void SwitchShoulderStateLocal(bool bShoulder);// 0x20120e0
	void SwitchShoulderState(bool bShoulder);// 0x2012060
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x2011ea0
	void SwapMainWeapon();// 0x2011e8c
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x2011d04
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x2011bf4
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x2011b74
	void StopMove();// 0x2011b60
	bool StopFireFilter();// 0x2011b30
	void StopFire();// 0x2011b1c
	void StopFillGas();// 0x2011b08
	bool StopChangeWearingAnim();// 0x2011ae0
	void StartWaitRefreshShootDetailInfo();// 0x2011acc
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x2011a4c
	void StartFireSimple(byte ShootMode);// 0x20119cc
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x2011944
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x2011758
	void StartFillGas();// 0x2011744
	bool StartChangeWearingAnim();// 0x201171c
	void SpawnFootprint(enum FootprintType);// 0x20116a4
	void SpawnAndSwithToGrenadeServerCall(byte grenadeType);// 0x20115f0
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x2011570
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x20114f0
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x2011334
	void ShowPlayerDebugInfo(bool bShow);// 0x1e54e6c
	void ShowNightVisionFrame();// 0x2011318
	void ShowInjuryScreenEffect();// 0x2011304
	void ShowDebugRole();// 0x20112f0
	void ShowDebugRecordData();// 0x20112dc
	void ShowDebugPickUpFlow();// 0x20112c8
	void ShowDebugEquipOrUnequipFlow();// 0x20112b4
	void ShowDebugBornLandFlow();// 0x20112a0
	void ShowConfirmDialogOfMisKill();// 0x2011284
	bool ShouldUpdateHPOnUI();// 0x2011254
	bool ShouldShowCorp();// 0x201122c
	bool ShouldShowAnchor();// 0x2011204
	bool ShouldAutoScopeWhenPeek();// 0x20111d4
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x2010fe8
	void SetWeaponShootType(byte shootType);// 0x2010f70
	void SetViewTargetAgainForOB();// 0x2010f5c
	void SetThrowGrenadeMode(byte ThrowMode);// 0x2010ee4
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x2010e6c
	void SetSightVision(bool Enable, enum Flag);// 0x2010da4
	void SetSightCondition(bool Enable, enum Flag);// 0x2010da4
	void SetRTNoDamageTimer(float Timer);// 0x2010d2c
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x2010c68
	void SetPrepareEmoteId(int InEmoteID);// 0x2010bf0
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x2010b2c
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x2010aa4
	void SetIsDuringTransferLeader(bool isTransfer);// 0x2010a24
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x201095c
	void SetInsectCameraEnable(bool bEnable);// 0x20108dc
	void SetHighWalkSpeed(float WalkSpeed);// 0x2010864
	void SetHealthSafety(float NewHealth, byte Reason);// 0x20107a8
	void SetHandFoldRatio(int Ratio);// 0x2010730
	void SetExitingParachute(bool ExitParachute);// 0x20106b0
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x2010630
	void SetEmoteSouceEventName(FString EventName);// 0x20104d8
	void SetDelayStateSwitchTime(float DelayTime);// 0x2010460
	void SetCurScopeFov(float InFov);// 0x20103e8
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x2010310
	void SetCurrentFloor(Actor* floor);// 0x2010298
	void SetCurBonfire(BonfireActor* newBonfire);// 0x2010220
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x2010154
	void SetCheatSpeedModifier(float NewModifier);// 0x20100d4
	void SetCharacterHideInGame(bool bHide);// 0x2010054
	void SetChangeWearingPromptEnable(bool bShow);// 0x200ffd4
	void SetAntidoteMaxTime(float MaxTime);// 0x200ff5c
	void SetAntidoteExeTime(float ExeTime);// 0x200fee4
	void SetAnimParamIsRescueing(bool Val);// 0x200fe64
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x200fde4
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x200fd64
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x200fca8
	void SetAmbientRTPC(FString RTPC, float Value);// 0x200fb0c
	void SetAIActive(bool bActive);// 0x200fa8c
	void SetActorLocationServerAndClient(Vector Location);// 0x200fa1c
	void ServerUpdateShovelingHoldState(bool ishold);// 0x200f954
	void ServerTriggerJump();// 0x200f8f8
	void ServerSetPoisonSmogStage(int SmogStage);// 0x200f880
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x200f75c
	void ServerSetPeekCollision(bool HasCollision);// 0x200f694
	void ServerSetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x200f584
	void ServerSetMovementState(Vector Input);// 0x200f4d8
	void ServerSendToLobbyServerUseItem(int ItemID, int Count);// 0x200f41c
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x200f238
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x200f084
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x200ef48
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x200ee34
	void ServerFollowTeammate(FString Name);// 0x200ed40
	void ServerEndZombieModePropSkill();// 0x1dd8bcc
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x200ec8c
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x200ebd8
	void ServerCancelFollow();// 0x200eb7c
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x200ea44
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x200e8cc
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x200e754
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x200e630
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x200e52c
	void Scoping(byte NewType);// 0x200e4b4
	void ScopeOut(byte NewType);// 0x200e43c
	void ScopeInterrupt(byte NewType);// 0x200e3c4
	void ScopeIn(byte NewType);// 0x200e34c
	void SaveMeshUpdateFlag();// 0x200e32c
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x200e278
	void RspPlayInteractionEmote(int EmoteId);// 0x200e1c4
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x200e13c
	void RPC_Server_UseZombieModeSkill();// 0x200e0e0
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x200dfd0
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x200df1c
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x200dd50
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x200dc9c
	void RPC_Server_SwapMainWeapon();// 0x200dc40
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x200db8c
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x200dad8
	void RPC_Server_SetCurScopeFov(float InFov);// 0x200da24
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x200d9c8
	void RPC_Server_ChangeToShootGrenade();// 0x200d96c
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x200d8b8
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x200d804
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x200d638
	void RPC_Client_SwapMainWeapon();// 0x200d5dc
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x200d528
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x200d3e4
	void RPC_Client_ShootVertifyRes(const byte VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x200d1f0
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x200d13c
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x200d088
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x200cfd4
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x200ce98
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x200cd48
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x200cc0c
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x200ca60
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x200c7b8
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x200c6c4
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x200c450
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x200c220
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x200c1c4
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x200c06c
	void RestoreMeshUpdateFlag();// 0x200c04c
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x200beb8
	void ResetValueLimitForHealthPredict();// 0x200bea4
	void ResetSignalOnServer(bool bRescued);// 0x200be24
	void ResetCharacterEnergy();// 0x200be10
	void ResetCharacter();// 0x200bdf4
	void ResetCamera();// 0x200bde0
	void RequestUserCancleRescue();// 0x200bd84
	void RequestServerSureLeaveVehicle();// 0x200bd28
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x200bc60
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x200bb50
	bool RequestPaintDecal(int DecalId);// 0x200bad0
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x200b9d4
	void ReqStartPlayEmote(int EmoteIndex);// 0x200b920
	void ReqStartChangeWearing();// 0x200b8c4
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x200b7fc
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x200b748
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x200b604
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x200b550
	void ReqInteruptChangeWearing();// 0x200b4f4
	void ReqEmotePlayFinished(int EmoteIndex);// 0x200b440
	void ReqChangeWearingFinished(int Index);// 0x200b38c
	void ReqAcceptInteractionEmote();// 0x200b330
	void ReportAntiCheatInfo();// 0x1dd8bcc
	void RemoveClientLeaveStateCheck(enum State);// 0x200b2b8
	void RemoveBuffWhenGotoPlane();// 0x200b2a4
	bool ReloadWeaponFilter();// 0x200b274
	bool ReloadCurrentWeapon();// 0x200b24c
	void RegisterPlayerPickUpList();// 0x200b238
	void RefreshPersonPerspective();// 0x200b224
	void RefreshPawnVaultTypeServer();// 0x200b1c8
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x200b140
	void RefreshMoveAttrModifier();// 0x200b12c
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemID);// 0x200b020
	void RecordFinalParachuteLeader();// 0x200b00c
	void PrintAIPolicyDecisionData();// 0x200aff8
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x200af80
	void PostGetPlayerAnimation();// 0x29fa2f4
	void PlaySwitchSightSound();// 0x200af6c
	void PlaySwitchFireModeSound();// 0x200af58
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x200aee0
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x200ad88
	void PlaySelfThrowAwayWeaponSound();// 0x200ad74
	void PlayPullBoltSound();// 0x200ad60
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x200aaf0
	void PlayMountAccessoriesSound();// 0x200aadc
	void PlayMagOUTSound();// 0x200aac8
	void PlayMagINSound();// 0x200aab4
	void PlayLocalShellDropFX();// 0x200aaa0
	void PlayLoadBulletSound();// 0x200aa8c
	void PlayFootstepSound(byte FootStepState);// 0x200aa0c
	bool PlayerConfirmToRescue();// 0x200a9e4
	void PlayChangeMagazineSound();// 0x200a9d0
	void PlayAmbientSound();// 0x200a9bc
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x200a788
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x200a564
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x200a41c
	void PawnVaultStopCPP();// 0x200a400
	void PawnVaultStopBluePrint();// 0x200a3e4
	void PawnVaultServerStopCheckCPP();// 0x200a388
	void PawnVaultServerStopCheckBluePrint();// 0x200a36c
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x2009ee4
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x2009b08
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x2009794
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x2009404
	void PawnLeaveState(enum State);// 0x2009384
	bool PawnHasState(enum PawnState);// 0x20092fc
	bool PawnEnterState(enum State);// 0x2009274
	bool PawnAllowState(enum State, bool withLog);// 0x20091a0
	void OnWeaponEquipmentUpdateHandled();// 0x2009184
	void OnWeaponEquipmentUpdate();// 0x2009168
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x20090f0
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x2009078
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x2008fb4
	void OnUnEquipWeapon();// 0x29fa2f4
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x2008eb4
	void OnStateLeave(enum EnteredState);// 0x2008e34
	void OnStateEnter(enum EnteredState);// 0x2008db4
	void OnShowName(bool _IsShow, FString _Name);// 0x29fa2f4
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x2008d34
	void OnScopeNotHandFold();// 0x2008d20
	void OnScopeHandFold();// 0x2008d0c
	void OnRepAttachmentDelegate__DelegateSignature();// 0x29fa2f4
	void OnRep_ZombieModeSkillPropLevel();// 0x2008cf8
	void OnRep_ZombieModeSkillPropChanged();// 0x2008ce4
	void OnRep_WaterObj();// 0x2008cd0
	void OnRep_VehicleSeatIdx();// 0x2008cbc
	void OnRep_UnmannedVehicleSyncData();// 0x2008ca0
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x2008c28
	void OnRep_Temperature(float LastValue);// 0x2008ba8
	void OnRep_SwitchWeaponSpeedScale();// 0x2008b94
	void OnRep_StatusChanged(byte prevStatus);// 0x2008b14
	void OnRep_SignalHPRemainingTime();// 0x2008b00
	void OnRep_SignalHP(float PrevVal);// 0x2008a80
	void OnRep_SightVisionMask();// 0x2008a6c
	void OnRep_ShowRevivalPointIcon();// 0x2008a58
	void OnRep_ShoulderStateChanged();// 0x2008a3c
	void OnRep_ScopeFov();// 0x2008a28
	void OnRep_ResetDataOnRespawn();// 0x2008a14
	void OnRep_ReplicatedParachuteState();// 0x1dd8bcc
	void OnRep_ReplicatedMoveState();// 0x2008a00
	void OnRep_ReplicatedIsStartParachute();// 0x20089ec
	void OnRep_RemainUseSupplySpotTimes();// 0x20089d8
	void OnRep_RemainUseEnhancerSpotTimes();// 0x20089c4
	void OnRep_PoseStateNotify(byte LastState);// 0x200894c
	void OnRep_PoisonFogStageChange();// 0x2008938
	void OnRep_PlayerKey();// 0x1f37898
	void OnRep_PeekHasCollision();// 0x2008924
	void OnRep_MoneyNotify();// 0x2008910
	void OnRep_KillTipsNotify();// 0x1dd8bcc
	void OnRep_IsWingUpControl();// 0x20088fc
	void OnRep_IsRescueingOtherStatusChange();// 0x20088e8
	void OnRep_IsInvincible();// 0x20088cc
	void OnRep_IsFPPChanged();// 0x20088b8
	void OnRep_IsFakeOnVehicle();// 0x200889c
	void OnRep_IsBeingRescuedStatusChange();// 0x2008888
	void OnRep_InAssistantState();// 0x2008874
	void OnRep_HealthPredict();// 0x2008860
	void OnRep_Health(float PrevHealth);// 0x20087e0
	void OnRep_HandFolderRatio();// 0x20087cc
	void OnRep_FollowState();// 0x20087b8
	void OnRep_EnergyChange();// 0x20087a4
	void OnRep_DisabledPawnStates();// 0x2008788
	void OnRep_DamageMagnifierIdx();// 0x2008774
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x20086fc
	void OnRep_CurrentStates(uint64 prevStates);// 0x2008678
	void OnRep_CurBonFire();// 0x2008664
	void OnRep_CharacterHideInGame();// 0x2008650
	void OnRep_CharacterFallingVelocityZFactor();// 0x200863c
	void OnRep_ChangeHalloweenVampireCloth();// 0x2008628
	void OnRep_BreathAmmountChange();// 0x2008614
	void OnRep_bIsCallingForRevival();// 0x2008600
	void OnRep_AntidoteMaxTimeSync();// 0x1dd8bcc
	void OnRep_AntidoteExeTimeSync();// 0x1dd8bcc
	void OnRep_AngleSightRotOffsetChanged();// 0x20085ec
	void OnRep_AnchorPlat();// 0x20085d8
	void OnRep_AKEventNotify();// 0x20085c4
	void OnPoseStateChange(byte LastState, byte CurState);// 0x29fa2f4
	void OnPlayEmoteStop(int EmoteIndex);// 0x200854c
	void OnPlayEmoteEnd(int EmoteIndex);// 0x20084d4
	bool OnPlayEmote(int EmoteId);// 0x2008454
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x200838c
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x20082c8
	void OnNotifyHurt();// 0x29fa2f4
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex);// 0x200820c
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x2008050
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x2007fd8
	void OnInterruptCurrentEmote();// 0x2007fc4
	void OnInterruptChangeWearing();// 0x2007fb0
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x2007ef4
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x29fa2f4
	void OnFollowStateChange();// 0x2007ee0
	void OnEquipWeapon(byte Slot);// 0x29fa2f4
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x2007e68
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x2007dac
	void OnEndChangeWearing(int StopReason);// 0x2007d34
	void OnDetectPaintDecalTarget(bool bStart);// 0x29fa2f4
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x2007c78
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x2007b78
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x2007a78
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x2007a00
	bool OnChangeWearing(int Index);// 0x2007980
	void OnBPMoneyChange();// 0x29fa2f4
	void OnBPIsInvincibleChange();// 0x29fa2f4
	void OnBPHealthChange();// 0x29fa2f4
	void OnBeforeGetUp();// 0x29fa2f4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex);// 0x2007778
	void OnAsyncLoadChangeWearingAnim();// 0x2007764
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x20075fc
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x2007524
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x2007428
	void MulticastStartPlayEmote(int EmoteIndex);// 0x2007374
	void MulticastStartChangeWearing();// 0x2007318
	void MulticastPlayerSoundByID(int SoundID);// 0x2007264
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x20071b0
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x20070fc
	void MulticastInteruptChangeWearingOnServer();// 0x20070a0
	void MulticastInteruptChangeWearing();// 0x2007044
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x2006fc4
	void MeleeServer();// 0x2006f68
	void MeleeReleased();// 0x2006f54
	void MeleeLocal();// 0x29fa2f4
	void MeleeBroadcastOtherClients();// 0x2006ef8
	void Melee(bool IsForCE);// 0x2006e78
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x2006e64
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x2006dec
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x2006cc4
	bool LocalStartPlayEmote(int EmoteIndex);// 0x2006c44
	bool LocalStartChangeWearing();// 0x2006c1c
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x2006b9c
	bool LocalInteruptChangeWearing();// 0x2006b74
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x2006ab8
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x2006a38
	void LeaveState(enum State);// 0x20069b8
	void LeaveServerState(enum State);// 0x2006904
	void LeaveBattleState();// 0x20068f0
	bool IsWeaponOwnerLocallyControlled();// 0x20068c0
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x2006778
	bool IsValidPaintDecalTarget_Simple();// 0x2006758
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x2006620
	bool IsUsingGrenade();// 0x20065f8
	bool IsThermalImagingValid();// 0x20065d0
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x2006550
	bool IsSameTeamWithLocal();// 0x2006528
	bool IsSameTeam(Pawn* Other);// 0x20064a0
	bool IsReplayViewTarget();// 0x2006478
	bool IsProneMove();// 0x2006450
	bool IsOnVehicleNotUAV();// 0x2006410
	bool IsOnVehicle();// 0x20063ec
	bool IsOnFireBalloon();// 0x20063c4
	bool IsNowUpWater();// 0x200639c
	bool IsNightVisionValid();// 0x2006374
	bool IsNearDeath();// 0x200634c
	bool IsLocalViewed();// 0x200631c
	bool IsLocalControlorView();// 0x20062f4
	bool IsInFlyingTeam();// 0x20062cc
	bool IsInExtreme();// 0x20062a4
	bool IsInEditor();// 0x1ec6304
	bool IsHealthyAlive();// 0x200627c
	bool IsHandleInFold();// 0x2006254
	bool IsGunADS();// 0x2006224
	bool IsFirstPerson();// 0x20061fc
	bool IsExitingParachute();// 0x20061d4
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x2006154
	bool IsEnableBulletFlySound();// 0x2006124
	bool IsDetectingPaintDecalTarget();// 0x2006104
	bool IsDefaultCharType();// 0x20060d4
	bool IsClient_WeaponOwner();// 0x20060a4
	bool IsCharacterSprinting();// 0x200607c
	bool IsChangeWearingState();// 0x2006054
	bool IsCanDriveSnowBoard();// 0x200602c
	bool IsBattleState();// 0x2006004
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x2005f7c
	bool IsAngledSight();// 0x2005f54
	bool IsAllowScopeIn();// 0x2005f2c
	bool IsAlive();// 0x2005efc
	void InviteTeammate(FString Name, enum InvitationType);// 0x2005dfc
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x2005d40
	void InitCharacterSkillList();// 0x2005d2c
	bool InDarkArea();// 0x2005d04
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x2005c48
	void HidePlayerMagOnGunReload();// 0x2005c34
	void HideNightVisionFrame();// 0x2005c18
	bool HaveAngledSight();// 0x2005bf0
	bool HasState(enum State);// 0x2005b68
	bool HasSightCondition(enum Flags);// 0x2005ae8
	bool HasAnySightVision(enum Flags);// 0x2005a68
	void HandleWeaponShootLost();// 0x2005a4c
	void HandleWeaponOnShoot();// 0x2005a38
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x2005938
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x20058b8
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x2005838
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x20057b8
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x20056fc
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x200567c
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x20055c0
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x2005504
	void HandleOpenPickUpBoxAction();// 0x20054f0
	void HandleOnCharAnimLoadingFinished();// 0x20054d4
	void HandleMoveAntiShootVerifyMiss();// 0x20054b8
	void HandleConsumeItemSkillBreak();// 0x20054a4
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x2005400
	void HandleAutoSwitchWeaponDelay();// 0x20053ec
	void GrenadeBackToWeaponServerCall();// 0x2005390
	void GMTestZengzuo();// 0x200537c
	void GMShowName();// 0x1dd8bcc
	Actor* GetWeaponUserConst();// 0x200534c
	float GetWeaponOwnerPawnHealth();// 0x200531c
	WeaponManagerComponent* GetWeaponManager();// 0x20052ec
	Rotator GetViewRotation();// 0x200529c
	PlayerVaultComponent* GetVaultComponent();// 0x2005274
	float GetValueLimitForHealthPredict();// 0x200524c
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x2005224
	Vector GetUIHelmetPosition();// 0x20051d4
	enum GetUAVState();// 0x20051b8
	byte GetThrowGrenadeMode();// 0x2005198
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x2005118
	STExtraBaseCharacter* GetTargetPlayer();// 0x20050f8
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x20050c8
	AkComponent* GetSoundComponent();// 0x20050a0
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x2004ec0
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x29fa2f4
	SecuryInfoComponent* GetSecuryComponent();// 0x2004e98
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x2004e78
	int GetRedClothIDByEmote(int EmoteIndex);// 0x2004df0
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x2004d60
	BoxComponent* GetProneShapeComponent();// 0x2004d40
	byte GetPlayerWeaponFireMode();// 0x1f55128
	byte GetPlayerWeaponEquipSlot();// 0x2004d18
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x2004c54
	PlayerVehAnimList GetPlayerVehAnimation();// 0x2004c20
	int GetPlayerTeamIndex();// 0x2004bf8
	STExtraPlayerState* GetPlayerStateSafety();// 0x2004bd0
	STExtraPlayerState* GetPlayerState();// 0x2004ba0
	FString GetPlayerNameSafety();// 0x2004ad8
	Vector GetPlayerMovementDir();// 0x2004a88
	FString GetPlayerDetailInfo();// 0x20049c8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x2004998
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x2004970
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x2004830
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x20047a8
	PlayerAnimList GetPlayerAnimation();// 0x20046e0
	Vector GetOwnerShootStartLocation();// 0x2004690
	int GetNearTeamPlayerNum();// 0x2004668
	Vector GetMoveInputLocalDir();// 0x2004620
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x20045f0
	FString GetLatestInviter();// 0x2004530
	STExtraPlayerState* GetLastInviterPlayerState();// 0x2004508
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x20044d8
	float GetKdValue();// 0x20044b0
	bool GetIsPlayingEmote();// 0x2004490
	bool GetIsFPP();// 0x2004460
	bool GetIsChangeWearing();// 0x2004440
	float GetInjuryFreeRate(int BodyPart);// 0x20043b8
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x2004244
	Vector GetHeadLocation(bool bUseHeadBone);// 0x20041ac
	int GetHandFolderRatio();// 0x200417c
	Vector GetGunOwnerHeadLocation();// 0x200412c
	GroupPhysicsComponent* GetGroupPhysicsComponent();// 0x2004110
	FString GetGrenadeNameByGrenadeType(byte grenadeType);// 0x29fa2f4
	enum GetGender();// 0x20040f4
	BaseFPPComponent* GetFPPComp();// 0x20040cc
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x200403c
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x2003fac
	float GetExtraDamageBySignalHP(float InDamge);// 0x2003f2c
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x29fa2f4
	FString GetEmote(int ItemDefineID);// 0x29fa2f4
	STExtraWeapon* GetCurrentWeapon();// 0x2003f04
	int GetCurrentVehicleAnimVehicleType();// 0x2003edc
	STExtraVehicleBase* GetCurrentVehicle();// 0x2003eac
	uint64 GetCurrentStatesInterface();// 0x2003e7c
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x2003e54
	STExtraWeapon* GetCurrentShieldWeapon();// 0x2003e2c
	int GetCurrentFloorType();// 0x2003e04
	FString GetCorpName();// 0x2003d44
	Controller* GetControllerSafety();// 0x2003d14
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x2003cec
	float GetCharacterXYPlaneVelocity();// 0x2003cc4
	enum GetCharacterSubType();// 0x2003c9c
	enum GetCharacterMainType();// 0x2003c74
	CharacterEnergyData GetCharacterEnergy();// 0x2003a88
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x2003a58
	CapsuleComponent* GetCapsuleComponentInterface();// 0x2003a28
	Rotator GetCachedControlRotation();// 0x20039e0
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x20039b8
	CharacterAvatarComponent2* getAvatarComponent2();// 0x2003990
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x2003910
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x200384c
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x2003798
	SpringArmComponent* GetActiveSpringArm();// 0x2003768
	void GeneratePlayerBackpackWrappersToGround();// 0x200374c
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x2003480
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x200323c
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x20031bc
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x20030f0
	void ForcePlayerUpdateAnimation();// 0x20030dc
	void ForceDestroyWeaponInventoryAndClearData();// 0x20030c8
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x2002fd8
	void FollowTeammate(FString Name);// 0x2002e80
	enum FindBuffRelatedPawnState(FName _buffName);// 0x2002e00
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x2002c78
	bool FillGasWeaponFilter();// 0x2002c50
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x2002b8c
	void ExecFollowTeammate(FString Name);// 0x2002a34
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x2002978
	void EquipWeaponFinish();// 0x1dd8bcc
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x20028b4
	bool EnterState(enum State);// 0x200282c
	void EnterServerState(enum State);// 0x2002778
	void EnterFire();// 0x200275c
	void EnterBattleState();// 0x2002748
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x20026c8
	void EnableStanbyAnim(bool bIsEnable);// 0x2002648
	bool EmoteAnimFinishedSuccessfully();// 0x2002620
	void DoPuzzleActorTickable(bool bStart);// 0x20025a0
	void DoDetectPaintDecalTarget(bool bStart);// 0x2002520
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x20024a8
	void DisappearOnDeath();// 0x2002494
	void DettachWeapon();// 0x1dd8bcc
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x20023c8
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x20022f4
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x20022e0
	void DelayResetStandState();// 0x20022cc
	void DelayMoveEnd();// 0x20022b8
	void DelayMove(float Time);// 0x2002240
	void DelayHidden();// 0x2002224
	void DelayCustomDepth(float Time);// 0x20021ac
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x200205c
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x2001fd4
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x2001f54
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x2001ed4
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x2001e54
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x2001cd8
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x2001b8c
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x2001a84
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString param1, FString param2);// 0x20018f8
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x20017e4
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x200176c
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x20016a8
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x20015dc
	void ClientResponseFeedback(enum res);// 0x200155c
	void ClientPlayVehicleOverlapCameraShake();// 0x2001500
	void ClientPlayInteractEmote(int EmoteId);// 0x2001480
	void ClientOnPossessBy(Controller* NewController);// 0x20013cc
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x20011fc
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x2001018
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShot);// 0x2000e48
	void ClientChangeCharacterMesh(int MeshID);// 0x2000dc8
	void ClientBulletLineTrace(Vector BornPos, Vector EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x2000c64
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x2000ba0
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x2000ae4
	void ClearHPUI();// 0x2000ac8
	void ClearClientJump();// 0x2000ab4
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x2000a2c
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x2000994
	bool CheckPickWeaponCanAutoUse();// 0x2000964
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x20008a0
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x20007cc
	bool CheckIsWearingThisCloth(int InClothID);// 0x200074c
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x20006c4
	void CheckCharacterDelayHide();// 0x20006b0
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x2000628
	bool CheckBuffTarget(STBuff* Buff);// 0x20005a0
	bool CheckBaseIsMoving();// 0x2000578
	bool CheckBaseIsMoveable();// 0x2000550
	void CharacterStateReset();// 0x200053c
	void CharacterShowWeaponDelay();// 0x2000528
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x20004b0
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x20003a4
	bool ChangeWearingAnimFinishedSuccessfully();// 0x200037c
	void ChangeVehWeaponCameraData(bool Enable);// 0x20002fc
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x20001f4
	bool CanRegisterToPickUpList(Actor* Actor);// 0x200016c
	bool CanPaintDecal(int DecalId);// 0x20000ec
	bool CanHearWeaponLockSound();// 0x20000bc
	bool CanEnterWaterArea(enum[] disallowedState);// 0x1ffff5c
	bool CanEnterState(enum NewState);// 0x1fffedc
	bool CanChangeThrowMode();// 0x1fffeb4
	void CancelFollow();// 0x1fffea0
	void CalculateUseBuffFlow(int InBuffID);// 0x1fffe28
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x1fffd6c
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1fffbf8
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x1fffa14
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x1fff880
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x1fff7c4
	void CalculateBornLandThrowGrenade(int ID);// 0x1fff74c
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x1fff688
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x1fff5cc
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x1fff4f4
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x1fff3a8
	void BulletChange();// 0x1fff34c
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x1fff0e8
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x1ffee34
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x1ffec70
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffe9a4
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffe728
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffe334
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffdffc
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffdd14
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffda48
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffd7cc
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffd500
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffd284
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffcfa4
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffcd14
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffca48
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffc7cc
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffc500
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffc284
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffbfb4
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffbd34
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffba5c
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffb7d4
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x1ffb49c
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x1ffb1b4
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x1ffb038
	void BPResetCharacter();// 0x29fa2f4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x29fa2f4
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x29fa2f4
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x1ffaec4
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x29fa2f4
	int BP_GetWeaponSyncTicket();// 0x1ffae94
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x1ffae0c
	void AutoScopeWhenPeek();// 0x1ffadf8
	void AttachWeapon();// 0x1dd8bcc
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x1ffad80
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x1ffad10
	bool AllowState(enum State, bool withLog);// 0x1ffac3c
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x1ffaae8
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x1ffa928
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x1ffa828
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x1ffa674
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x1ffa5b8
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x1ffa540

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0x828, Size: 12]
	delegate CharacterCommonEventDelegate;//[Offset: 0x834, Size: 12]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0x868, Size: 12]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0x874, Size: 12]
	uint64 CurrentStates;//[Offset: 0x910, Size: 8]
	float Health;//[Offset: 0x918, Size: 4]
	float HealthMax;//[Offset: 0x91c, Size: 4]
	float SignalHP;//[Offset: 0x920, Size: 4]
	float PreSignalHP;//[Offset: 0x924, Size: 4]
	float PreviousSignalHP;//[Offset: 0x928, Size: 4]
	float SignalHPMax;//[Offset: 0x92c, Size: 4]
	FString EnergyBuffListName;//[Offset: 0x930, Size: 12]
	float ResetSignalHP_FatalDamage;//[Offset: 0x93c, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x940, Size: 4]
	int[] TypeIds;//[Offset: 0x944, Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x950, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x954, Size: 1]
	float threatenValue;//[Offset: 0x958, Size: 4]
	float HurtParticleOffset;//[Offset: 0x95c, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0x968, Size: 12]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0x974, Size: 12]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x980, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x984, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0x98c, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0x994, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x998, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 1]
	FString CharacterStateType;//[Offset: 0x9a4, Size: 12]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	delegate OnHandleSkillStartDelegate;//[Offset: 0x9fc, Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xa08, Size: 12]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xa2c, Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xa30, Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xa34, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xa38, Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xa3c, Size: 4]
	delegate StateEnterHandler;//[Offset: 0xa40, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0xa4c, Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0xa6c, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xa78, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xa84, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa89, Size: 1]
	byte TeamNum;//[Offset: 0xa98, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xa9c, Size: 4]
	float SpeedScale;//[Offset: 0xaa8, Size: 4]
	float SpeedValue;//[Offset: 0xaac, Size: 4]
	float Temperature;//[Offset: 0xab0, Size: 4]
	float TemperatureMax;//[Offset: 0xab4, Size: 4]
	float TemperatureMin;//[Offset: 0xab8, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac9, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xad0, Size: 4]
	float VehicleDetailedTraceDist;//[Offset: 0xad4, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xad8, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0xadc, Size: 60]
	ActivitySyncData ActicitySyncData;//[Offset: 0xb18, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x2039d74
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x2039ca8
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x2012878
	bool TriggerEntryEventWithID_Implementation(int SkillID, byte SkillEventType);// 0x2039bdc
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x20127f0
	void TriggerCustomEvent_Implementation(byte EventType);// 0x2039b5c
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x2039a88
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x20399c4
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x2039900
	void ResetPawnStateDisabled(enum State);// 0x2039888
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x2039778
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x2039620
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x20394fc
	void RemoveBaseBuffSystemComponent();// 0x20394e8
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x2039388
	void OnRep_UnmannedVehicleSyncData();// 0x2008ca0
	void OnRep_Temperature(float LastValue);// 0x2008ba8
	void OnRep_SignalHP(float PrevVal);// 0x2008a80
	void OnRep_HealthMax();// 0x203936c
	void OnRep_Health(float PrevHealth);// 0x20087e0
	void OnRep_DisabledPawnStates();// 0x2008788
	void OnRep_CurrentStates(uint64 prevStates);// 0x2008678
	void OnRep_ActivitySyncData();// 0x2039358
	void OnLeaveStateForBp(enum State);// 0x29fa2f4
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x29fa2f4
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x29fa2f4
	void OnEnterStateForBp(enum State);// 0x29fa2f4
	void LeaveState(enum State);// 0x20069b8
	bool IsPawnStateDisabledByWeapon(enum State);// 0x20392d0
	bool IsPawnStateDisabled(enum State);// 0x2039250
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x20391ac
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x2039108
	bool IsAlive();// 0x2005efc
	bool HasState(enum State);// 0x2005b68
	bool HasBuffID(int BuffID);// 0x2039080
	bool HasBuff(FName BuffName);// 0x2038ff8
	STExtraVehicleBase* GetUnmannedVehicle();// 0x1eb43fc
	UTSkillManagerComponent* GetSkillManager();// 0x2038fc8
	float GetScaledSpeed();// 0x2038f98
	FString GetPlayerNameSafety();// 0x2004ad8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x2004998
	enum GetObserverType();// 0x2038f68
	enum[] GetDamageableGameObjectType();// 0x2038ea0
	UTSkill* GetCurSkill();// 0x2038e70
	STExtraVehicleBase* GetCurrentVehicle();// 0x2003eac
	float GetBuffExpiry(FName BuffName);// 0x2038de8
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x2038d1c
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x2038c9c
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x2038b14
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x20389d4
	bool EnterState(enum State);// 0x200282c
	void DelayHidden();// 0x2002224
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x2038800
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x20386b4
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x2038568
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x2038384
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x2038158
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x2037fb4
	void ClearBuff();// 0x2037f98
	void CheckSignalHP();// 0x2037f84
	bool CanBeAttackedByWeapon(int WeaponId);// 0x2037efc
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	bool AllowState(enum State, bool withLog);// 0x1ffac3c
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x2037dec
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x2037c94
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x2037af0

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x624, Size: 4]
	FName PlayerType;//[Offset: 0x630, Size: 8]
	FString PlayerName;//[Offset: 0x638, Size: 12]
	FString Nation;//[Offset: 0x644, Size: 12]
	uint32 PlayerKey;//[Offset: 0x650, Size: 4]
	FString PlayerUID;//[Offset: 0x654, Size: 12]
	int TeamID;//[Offset: 0x660, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	int CampID;//[Offset: 0x668, Size: 4]
	int resID;//[Offset: 0x66c, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x670, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x674, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x680, Size: 44]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x6ac, Size: 24]
	int planeAvatarId;//[Offset: 0x6c4, Size: 4]
	int DyeDebugFlag;//[Offset: 0x6c8, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x6cc, Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	FString LuaFilePath;//[Offset: 0x700, Size: 12]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x70c, Size: 60]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x25fa744
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x25fa608
	void OnRep_UseWholeModel();// 0x25fa5f4
	void OnRep_TeamID();// 0x25fa5e0
	void OnRep_PlayerUID();// 0x25fa5cc
	void OnRep_PlayerKey();// 0x1f37898
	void OnRep_CampID();// 0x25fa5b8
	bool IsDefaultCharType();// 0x20060d4
	int GetTeamId();// 0x1e6e560
	FString GetPlayerKey();// 0x25fa4f8
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x25fa430
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x25fa368
	ActorComponent*[] GetNonSimulatedComponents();// 0x25fa2a0
	ActorComponent*[] GetNonDedicatedComponents();// 0x25fa1d8
	int GetCampId();// 0x25fa1b0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x1dcfe60

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x400, Size: 4]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	enum VehicleType;//[Offset: 0x405, Size: 1]
	enum VehicleShapeType;//[Offset: 0x406, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x408, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x420, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x438, Size: 4]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x440, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x468, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x46c, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x4a8, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x4e4, Size: 4]
	byte CameraDataType;//[Offset: 0x4e8, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x4ec, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x4f0, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x4f8, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x500, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x508, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x510, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 1]
	int MainMaterialIndex;//[Offset: 0x518, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x51c, Size: 12]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x52c, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x538, Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x540, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 1]
	float BackpackCapacity;//[Offset: 0x54c, Size: 4]
	FName BackpackName;//[Offset: 0x550, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x558, Size: 12]
	int[] marr_MidIndexes;//[Offset: 0x564, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x570, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x574, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x578, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x580, Size: 4]
	float voiceCheckCD;//[Offset: 0x584, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x588, Size: 4]
	float VoiceCheckDis;//[Offset: 0x58c, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x590, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x594, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	delegate OnSeatAttached;//[Offset: 0x5b8, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x5c4, Size: 12]
	delegate OnSeatChange;//[Offset: 0x5d0, Size: 12]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	FString LuaFilePath;//[Offset: 0x5e0, Size: 12]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x5f0, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	ParticleSystem* ParticleExplosion;//[Offset: 0x630, Size: 4]
	enum VehicleHealthState;//[Offset: 0x634, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x636, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x637, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x63c, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x648, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x64c, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x650, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x654, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x658, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x65c, Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x660, Size: 4]
	VehicleComponent*[] VehicleComps;//[Offset: 0x664, Size: 12]
	float EnActiveTimeThreshold;//[Offset: 0x678, Size: 4]
	float VehicleHitThreshold;//[Offset: 0x698, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x69c, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x6ac, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x6b8, Size: 12]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x6c8, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x6d4, Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x6e4, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x6e8, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x6ec, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x6fc, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x700, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x70c, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x710, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x714, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x720, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x72c, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x730, Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x740, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x744, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x748, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x780, Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x784, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x788, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x78c, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x790, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x794, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x798, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x79c, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x7a0, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x7a4, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x7a8, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x7ac, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x7b0, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x7b4, Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x7b8, Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x7bc, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x7c0, Size: 4]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0x7c4, Size: 12]
	float EngineSfxEndDelayTime;//[Offset: 0x7d0, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x7d8, Size: 84]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x82c, Size: 84]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x880, Size: 84]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0x8d4, Size: 84]
	AkComponent* SoundComponent;//[Offset: 0x928, Size: 4]
	float RPMSfxScale;//[Offset: 0x95c, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0x960, Size: 4]
	float PlayMusicChance;//[Offset: 0x96c, Size: 4]
	int CurMusicIndex;//[Offset: 0x970, Size: 4]
	enum VehicleSyncTag;//[Offset: 0x981, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x984, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0x998, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0x99c, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0x9a0, Size: 4]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0x9e0, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec, Size: 1]
	float MinRideAngleDgree;//[Offset: 0x9f0, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa01, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xa04, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xa08, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	float StuckMinImpulse;//[Offset: 0xa30, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xa34, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xa38, Size: 4]
	float StuckResovingTime;//[Offset: 0xa3c, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xa44, Size: 4]
	float StuckResovingTimer;//[Offset: 0xa48, Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xa94, Size: 4]
	float RespawnTickInterval;//[Offset: 0xa98, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xb30, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xb3c, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xb48, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xba4, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xba8, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xbb0, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xbd8, Size: 4]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xc78, Size: 12]
	FName SeekLockSocket;//[Offset: 0xc88, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xc90, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xc98, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xca4, Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xca8, Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xcbc, Size: 4]
	float OverlapDamageRate;//[Offset: 0xcc4, Size: 4]
	float OverlapImpulseRate;//[Offset: 0xcc8, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xccc, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xcd0, Size: 4]
	float MinOverlapSpeed;//[Offset: 0xcd4, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xcd8, Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0xce0, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xce4, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xcec, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xcfc, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xd04, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xd08, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd19, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xd1c, Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xd20, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xd24, Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xd28, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xd2c, Size: 12]
	bool bEnterSocketChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xd3c, Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xd48, Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xd4c, Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	int nAvatarID;//[Offset: 0xd54, Size: 4]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 1]
	int CandidateAvatarID;//[Offset: 0xd5c, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd68, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0xd6c, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 1]
	float MaxLinearVelocity;//[Offset: 0xd80, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd84, Size: 1]
	int TeamID;//[Offset: 0xd88, Size: 4]
	int CampID;//[Offset: 0xd8c, Size: 4]
	float VehicleGoStraight;//[Offset: 0xd90, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd94, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xd98, Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xd9c, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xda4, Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xdb0, Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xdb4, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb9, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xdbc, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xdc0, Size: 4]
	enum UAVOperateState;//[Offset: 0xdc8, Size: 1]
	float SingleMoveRate;//[Offset: 0xdcc, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xdd0, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xde8, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xe00, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xe10, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xe1c, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xe30, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xe38, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xe3c, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe41, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe42, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0xe44, Size: 4]
	float StaticFixAngel;//[Offset: 0xe48, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xe4c, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xe50, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xe58, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xe5c, Size: 4]
	int CannotEnterTips;//[Offset: 0xe68, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0xe70, Size: 12]
	Vector AttachedRelLoc;//[Offset: 0xe7c, Size: 12]
	Actor* AttachedActor;//[Offset: 0xe88, Size: 4]
	int HasAttachedActorTips;//[Offset: 0xe8c, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	void WeakTick(float DeltaTime);// 0x20ce22c
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x20ce1b4
	void TickEnableAvatarOutline();// 0x20ce1a0
	void StartFireSimple(byte ShootMode);// 0x20ce128
	void StartAirDrop();// 0x20ce114
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x20ce068
	void ShowBoostingEffect(bool bShow);// 0x29fa2f4
	bool ShouldUseSpecialHitEffect();// 0x20ce038
	byte ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, out const LocalShootHitData LocalShootHitData, STExtraShootWeapon* Weapon);// 0x20cde4c
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x20cddcc
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x20cdcc0
	void SetUsingHorn(bool bUse);// 0x20cdc40
	void SetUAVOperateState(enum NewState);// 0x20cdbc8
	void SetSpawnedInReady(bool bFlag);// 0x20cdb4c
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x20cdadc
	void ServerSetUsingHorn(bool bUse);// 0x20cda14
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x20cd94c
	void ServerSetBoosting(bool bEnalbed);// 0x20cd884
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x20cd80c
	void ServerSetAirControlF(float Rate);// 0x20cd758
	void ServerSetAirControlB(float Rate);// 0x20cd6a4
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x20cd5d4
	void SendVehicleInAirChangedTimeToServer();// 0x20cd578
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x20cd4c4
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x20cd410
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x20cd3f4
	void ResetJoystickMove();// 0x20cd3e0
	void RequestChangeVehicleAvatar();// 0x20cd384
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x20cd274
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x20cd11c
	void RemoveAntiStuckBox();// 0x20cd108
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x20cd090
	void ProcessAvatarOutline();// 0x20cd074
	void PrintStats();// 0x1e1c828
	bool PreChangeVehicleFPPAvatar();// 0x20cd04c
	bool PreChangeVehicleBrokenMat();// 0x20cd024
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x20ccf60
	void PostLoadFPPMesh();// 0x20ccf44
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x20ccecc
	bool PawnHasState(enum PawnState);// 0x20cce44
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x20ccd80
	void OnUpdateEffects();// 0x29fa2f4
	void OnStopFire();// 0x29fa2f4
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x20cccc4
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x20ccc08
	void OnSetTailLightValue(float LightValue);// 0x29fa2f4
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x29fa2f4
	void OnRep_VehicleSyncFlag();// 0x20ccbf4
	void OnRep_VehicleHealthState();// 0x20ccbe0
	void OnRep_TeamID();// 0x20c4238
	void OnRep_SimulateViewData();// 0x20ccbcc
	void OnRep_SimulateFreeCameraViewData();// 0x20ccbb8
	void OnRep_ServerLastReplicatedServer();// 0x20ccba4
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x20ccb90
	void OnRep_IsForbidNightVehicle();// 0x20ccb7c
	void OnRep_IsEngineStarted();// 0x20ccb68
	void OnRep_IsBoosting();// 0x20ccb54
	void OnRep_IsAirdroppingVehicle();// 0x20ccb40
	void OnRep_FrozenStatic();// 0x20ccb2c
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x20ccab4
	void OnRep_CandidateAvatar();// 0x29fa2f4
	void OnRep_CampID();// 0x1dd8bcc
	void OnRep_AttachedRelLoc();// 0x20ccaa0
	void OnRep_AttachedActor();// 0x20cca8c
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x20cca0c
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x29fa2f4
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x29fa2f4
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x20cc8a0
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x20cc828
	void OnEngineStop();// 0x29fa2f4
	void OnEngineStart();// 0x29fa2f4
	void OnBoostingChanged();// 0x29fa2f4
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x20cc754
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x20cc654
	void LoadFPPVehicleModel();// 0x20cc640
	bool IsVehicleWarVehicle();// 0x20cc610
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x20cc544
	bool IsUsingFPPModel();// 0x20cc51c
	bool IsUCAV();// 0x20cc4f4
	bool IsUAV();// 0x20cc4c4
	bool IsSpawnedInReady();// 0x20cc4a8
	bool IsNotInWater();// 0x20cc478
	bool IsMotorbike();// 0x20cc450
	bool IsInMidAir();// 0x20cc420
	bool IsInBuffSpeedState();// 0x20cc404
	bool IsHelicopter();// 0x20cc3dc
	bool IsEntirelyUnderWater();// 0x20cc3b4
	bool IsElectronic_Failure();// 0x20cc38c
	bool IsClient_WeaponOwner();// 0x20cc35c
	bool IsCanEnter();// 0x20cc32c
	bool IsArmedVehicle();// 0x20cc304
	bool IsAmphibiousVehicle();// 0x20cc2dc
	bool IsAlive();// 0x20cc2ac
	bool IsAirVehicle();// 0x204e0d0
	bool IsAI();// 0x20cc27c
	bool IsActiveEffect(FName EffectName);// 0x20cc1fc
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x20cc0e0
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x20cc060
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x20cbf9c
	bool HasSkillID(int SkillID);// 0x20cbf1c
	bool HasBuffID(int BuffID);// 0x20cbe94
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x20cbe14
	void HandleOnVehicleAvatarDataCopied();// 0x20cbe00
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x20cbcf8
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x20cbb60
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x20cba58
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x20c2c20
	void HandleMoveAntiShootVerifyMiss();// 0x1e27c54
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x20cb9d8
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x20cb958
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x20cb8e0
	Actor* GetWeaponUserConst();// 0x20cb8b0
	Actor* GetWeaponUser();// 0x20cb880
	int GetWeaponReconnectIdx();// 0x20cb850
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x20cb820
	uint32 GetWeaponOwnerPlayerKey();// 0x20cb7f0
	float GetWeaponOwnerPawnHealth();// 0x20cb7c0
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x20cb790
	WeaponManagerComponent* GetWeaponManager();// 0x20cb760
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x20cb738
	VehicleShootWeapon* GetVehicleWeapon(int SeatId, int WeaponListID);// 0x20cb674
	VehicleSyncComponent* GetVehicleSync();// 0x1e6e57c
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x20cb64c
	int GetVehicleSkinItemID();// 0x20cb624
	VehicleSeatComponent* GetVehicleSeats();// 0x20cb608
	VehicleDamageComponent* GetVehicleDamage();// 0x20cb5ec
	VehicleCommonComponent* GetVehicleCommon();// 0x20cb5d0
	VehicleAvatarComponent* GetVehicleAvatar();// 0x20cb5a8
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x20cb580
	bool GetUsingHorn();// 0x20cb558
	int GetTeamId();// 0x20cb530
	MaterialInstanceDynamic* GetTailLightDIM();// 0x20cb508
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x1f006dc
	Vector GetRotationInputDir();// 0x1feda58
	float GetReloadAllWeaponTime();// 0x20cb4e0
	SkeletalMeshComponent* GetMesh();// 0x20cb4c4
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x20cb494
	BattleItemHandleBase* GetItemHandle();// 0x20cb478
	bool GetIsOpenVertify();// 0x20cb45c
	Vector GetGunOwnerHeadLocation();// 0x20cb40c
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x20cb3e4
	float GetForwardSpeed();// 0x2060978
	STExtraPlayerCharacter* GetFirstPassenger();// 0x20cb3bc
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x20cb394
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x20cb364
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x20cb348
	STExtraPlayerCharacter* GetDriver();// 0x20cb320
	uint64 GetCurrentStatesInterface();// 0x20cb2f0
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x20cb224
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x20cb098
	int GetCampId();// 0x20cb070
	BuoyancyForceComponent* GetBuoyancyForce();// 0x20cb054
	int GetAvatarID();// 0x20cb038
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x20caf6c
	void ExitFPPVehicle();// 0x20caf58
	void EnterFPPVehicle();// 0x20caf44
	void EnableWeakTick(bool Enabled);// 0x20caebc
	void EnablePlayMusic(bool InEnable);// 0x20cae40
	void EnableAvatarOutline(enum OutlineType);// 0x20cadc8
	void DestroyAndRespawnSelf();// 0x20cadb4
	void DeactiveEffect(FName EffectName);// 0x20cad3c
	void CreateAntiStuckBox();// 0x20cad28
	void ClientPlayVehicleCameraShake();// 0x20caccc
	void ClientFeedbackPointDamage(Actor* DamageCauser);// 0x20cac18
	void ClearInputs();// 0x20cac04
	void ClearBuff();// 0x20cabe8
	bool CheckHaveSpecialAttachActor();// 0x20bf4f8
	void CheckEnableAvatarOutline();// 0x29fa2f4
	void CheckAvatarModifyEnterSocket(STExtraBaseCharacter* InCharacter, bool UseInCharacter, int InAvatarID);// 0x20caadc
	bool CheckAllWeaponIsReadyForFire();// 0x20caab4
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x20caa34
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x20ca9bc
	bool CanVehicleJump();// 0x20ca994
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x20ca90c
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x20ca844
	void BroadcastClientVehicleExplosionEffect();// 0x20ca828
	void BPPostLoadFPPMesh();// 0x29fa2f4
	void BPPlayOverlapDamageCameraShake();// 0x29fa2f4
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x20af8c4
	void AutoLoadEffect();// 0x20ca814
	bool ApplyAnimation();// 0x20ca7ec
	void AfterBeginPlay();// 0x29fa2f4
	void AddHealthSafety(float AddVal);// 0x20ca76c
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x20ca65c
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x20ca504
	void ActiveEffectAsync(FName EffectName);// 0x20ca48c
	void ActiveEffect(FName EffectName);// 0x20ca414

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	STExtraVehicleSeat[] Seats;//[Offset: 0xbc, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0xc8, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0xd4, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0xe0, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0xec, Size: 12]
	delegate OnSeatOccupiersChanged;//[Offset: 0xf8, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x104, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x110, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x11c, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x12c, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x138, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x144, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x150, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x15c, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x168, Size: 12]
	delegate OnDriverChange;//[Offset: 0x174, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x180, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x190, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x198, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x1a0, Size: 4]
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x29fa2f4
	void ReAttachCharacterOnSeat(STExtraBaseCharacter* InCharacter);// 0x214ecf8
	void ReAttachAllCharacters();// 0x214ece4
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x214ec28
	void OnRep_VehicleWeapons();// 0x214ec14
	void OnRep_Occupiers();// 0x214ec00
	void OnRep_Attachments();// 0x214ebec
	bool IsSeatIndexAvailable(int SeatIndex);// 0x214eb6c
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x214eaec
	bool IsSeatAvailable(enum SeatType);// 0x214ea6c
	int GetSeatNum();// 0x1fe6418
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x214e850
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x214e7d0
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x214e750
	STExtraPlayerCharacter* GetFirstPassenger();// 0x214e728
	STExtraPlayerCharacter* GetDriver();// 0x214e700
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x214e680
	int GetAvailableSeatIndex(enum SeatType);// 0x214e600
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x214e504
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x214e440
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x214e2fc
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x214e230

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 1]
	byte SeatSpecialType;//[Offset: 0x22, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x2c, Size: 4]
	Rotator CharRotVsVehiRot;//[Offset: 0x30, Size: 12]
	byte SeatSideType;//[Offset: 0x3c, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x40, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x50, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float Radius;//[Offset: 0x5c, Size: 4]
	float HalfHeight;//[Offset: 0x60, Size: 4]
	Transform CollisionOffset;//[Offset: 0x70, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xc90, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc94, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc95, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc96, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xc98, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xca0, Size: 28]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0xcc0, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xcc8, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xccc, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xcd0, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0xcd4, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xcd8, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xce0, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xce8, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf1, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf2, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf3, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd05, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd06, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd09, Size: 1]
	FName CharacterSocket;//[Offset: 0xd10, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd19, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1a, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1b, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1d, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0xd20, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0xd28, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0xd30, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34, Size: 1]
	float FuelConsumptionRate;//[Offset: 0xd38, Size: 4]
	float StartReloadDelayTime;//[Offset: 0xd50, Size: 4]
	float EndReloadDelayTime;//[Offset: 0xd60, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0xd64, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd68, Size: 1]
	Actor* OwnerActor;//[Offset: 0xd6c, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xd70, Size: 4]
	int BulletTypeTipMsgID;//[Offset: 0xd78, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0xd7c, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0xd80, Size: 4]
	void StartReloadAnim();// 0x214fe00
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x214fcec
	void OnVehicleExplode();// 0x214fcd0
	void OnRep_OwnerActor();// 0x214fcbc
	void NetMulticastReturnBullets();// 0x214fc60
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x214fb04
	void K2_SetSpecialMeshHide(bool isHide);// 0x29fa2f4
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x29fa2f4
	void K2_OnReturnBullets();// 0x29fa2f4
	MeshComponent* K2_GetWeaponMeshComp();// 0x29fa2f4
	void HnadleScopeInAfterReload();// 0x214faf0
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x214fa34
	void HandleWeaponStartReload();// 0x214fa20
	void HandleWeaponEndReload();// 0x214fa0c
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x214f98c
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x214f908
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x214f8e0
	STExtraVehicleBase* GetOwnerVehicle();// 0x214f8b8
	Rotator GetOwnerCameraRotator();// 0x214f870
	Transform GetCharacterSocketTransform();// 0x214f810
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x214f798
	bool CheckIsAutonomousOrObTarget();// 0x214f770
	void AfterReloadEnd();// 0x214f75c

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	float voiceCheckCD;//[Offset: 0x7ac, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x7b0, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x7d0, Size: 60]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80d, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x810, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x81c, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x828, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x834, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x840, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x84c, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x858, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x864, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x870, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x87c, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x888, Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x894, Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x8a0, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x8ac, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x8b8, Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x8d0, Size: 12]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0x8dc, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x8e8, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0x8f4, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0x900, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0x90c, Size: 12]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0x918, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0x91c, Size: 4]
	delegate OnScopeIn;//[Offset: 0x920, Size: 12]
	delegate OnScopeOut;//[Offset: 0x92c, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0x938, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0x944, Size: 4]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0x948, Size: 4]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0x94c, Size: 4]
	FillGasComponent* FillGasComponent;//[Offset: 0x950, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x954, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0x958, Size: 16]
	int CurMaxBulletNumInOneClip;//[Offset: 0x968, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0x96c, Size: 4]
	byte ShootMode;//[Offset: 0x970, Size: 1]
	byte CurShootType;//[Offset: 0x971, Size: 1]
	int CurShootTotalType;//[Offset: 0x974, Size: 4]
	float VoiceCheckDis;//[Offset: 0x978, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0x97c, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0x980, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0x984, Size: 12]
	int AngledSightID;//[Offset: 0x99c, Size: 4]
	byte TraceChannel;//[Offset: 0x9a0, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0x9a4, Size: 12]
	float LastImpactEffectTime;//[Offset: 0x9b0, Size: 4]
	int CurBurstShootIndex;//[Offset: 0x9b8, Size: 4]
	Transform BoltActionTransform;//[Offset: 0x9c0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	int ClientShootTimes;//[Offset: 0x9f4, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0x9f8, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x9fc, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xa00, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xa04, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xa08, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xa0c, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xa10, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xa1c, Size: 16]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2d, Size: 1]
	float DropDuration;//[Offset: 0xa30, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xa34, Size: 4]
	float AIShootLoudness;//[Offset: 0xa38, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xa3c, Size: 4]
	float AIShootMaxDis;//[Offset: 0xa40, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xa44, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xa48, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xa4c, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xa51, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xa60, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xa64, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xa68, Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6d, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6e, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xa70, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xa7c, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xa88, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xa94, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xaa0, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xaac, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xab8, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xac4, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xad0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xadc, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xae8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xaf4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xb00, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xb0c, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xb28, Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xb34, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xb38, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xb44, Size: 12]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xb50, Size: 12]
	uint32 ShootID;//[Offset: 0xb5c, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xb60, Size: 4]
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0xb64, Size: 12]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xb70, Size: 12]
	bool UseNewSimulateHitInfoData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 1]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb85, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	bool UseNewShotGunDevation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc79, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0xc7c, Size: 12]
	int WeaponDurability;//[Offset: 0xc88, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0xc8c, Size: 1]
	void UpdateComponentTick();// 0x20b04b0
	bool StopFireFilter();// 0x20a7290
	void StopFire(byte ToState);// 0x20b0430
	void StopFillGas();// 0x20b041c
	int StartReload();// 0x20b03ec
	bool StartFireFilter();// 0x20b03bc
	void StartFire();// 0x1e2fe3c
	void StartFillGas();// 0x20b03a8
	void StartDoPreBarrel(float HandledTime);// 0x20b0328
	void StartDoBarrel();// 0x1e2fdcc
	void ShowDefaultScope(bool bShow);// 0x20b02a8
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x20b01e4
	void ShootIDIsNotValid();// 0x20a73b8
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x20b008c
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x20b000c
	void SetRearSightIndex(int Index);// 0x20aff94
	void SetCurShootType(byte shootType);// 0x20aff1c
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x20afdb8
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x20afc54
	void SetCurReloadMethod(byte method);// 0x20afbdc
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x20afac8
	void SetBaseImpactDamageEntity(float Damage);// 0x1e836a4
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x20af9b8
	bool ScopeOut();// 0x20af988
	void ScopeInContinue();// 0x20af974
	bool ScopeIn();// 0x20af944
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x20af8c4
	void RPC_ServerStopReload(int InterruptState);// 0x20af810
	void RPC_ServerSetMaxBulletNum();// 0x20af7b4
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x20af700
	void RPC_Server_SetRearSightIndex(int Index);// 0x20af64c
	void RPC_ClientSetCurShootType(byte shootType);// 0x20af598
	void RPC_ClientSetCurReloadMethod(byte method);// 0x20af4e4
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x20af464
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x20af368
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x20af120
	void RotateCrossHair(Rotator Rot);// 0x20af0b0
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x20af030
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x20aeecc
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x20aee54
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x20aed90
	void RefreshBulletInClip(int Count);// 0x20aed18
	void ReduceWeaponDurability(int ReduceAmount);// 0x20aeca0
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x20aeb3c
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x29fa2f4
	void OnWeaponShootDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x29fa2f4
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x29fa2f4
	void OnWeaponEquipDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x29fa2f4
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x29fa2f4
	void OnStopFireDelegate__DelegateSignature();// 0x29fa2f4
	void OnStartFireDelegate__DelegateSignature();// 0x29fa2f4
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x29fa2f4
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x29fa2f4
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x29fa2f4
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x29fa2f4
	void OnScopeInContinue__DelegateSignature();// 0x29fa2f4
	void OnRep_WeaponDurability();// 0x20aeb28
	void OnRep_SimulateHitDataArray();// 0x20aeb14
	void OnRep_HitDataArray();// 0x20aeb00
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x20aea88
	void OnRep_CurMaxBulletNumChange();// 0x20aea74
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x20aea60
	void OnMaxBulletChange__DelegateSignature();// 0x29fa2f4
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x29fa2f4
	void OnCurBulletChange__DelegateSignature();// 0x29fa2f4
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x29fa2f4
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x29fa2f4
	void NotifyServerNoneShootAction();// 0x20aea04
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x20ae98c
	void NotifyClientNoneShootAction();// 0x20ae930
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x20ae7cc
	bool IsWeaponDurabilityLoss();// 0x20ae7a4
	bool IsWeaponAttachmentFullEquiped();// 0x20ae77c
	bool IsVehicleWeapon();// 0x20ae754
	bool IsUsingGrenadeLaunch();// 0x20ae72c
	bool IsSupportAutoAim();// 0x20ae704
	bool IsInPreFire();// 0x20ae6dc
	static bool IsGHasInfiniteBullets();// 0x20ae6b4
	bool IsEnableReloadADS();// 0x20ae698
	bool IsEnableDropBullet();// 0x20ae670
	bool IsDriverVehicleWeapon();// 0x20ae648
	bool IsAutoDrop();// 0x20ae620
	void InitWeaponDurability(int NewVal);// 0x20ae5a8
	bool HasMultiBullet();// 0x20ae580
	void HandleWeaponScopeUnEquiped(enum Type);// 0x20ae508
	void HandleWeaponScopeEquiped(enum Type);// 0x20ae490
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x20ae3c0
	void HandleAllWeaponAvatarLoaded();// 0x20ae3ac
	byte GetWeaponReloadType();// 0x20ae384
	int GetWeaponIDFromEntity();// 0x20ae35c
	int GetWeaponID();// 0x20ae334
	int GetWeaponDurability();// 0x20ae30c
	float GetWeaponBodyLength();// 0x20ae2e4
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x20ae14c
	ParticleSystem* GetVisualBulletTrackFX();// 0x20ae124
	bool GetVisualBulletTrackEnabled();// 0x20ae0fc
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x20ae0bc
	FName GetVerifyScopeSocketNameFromEntity();// 0x20ae07c
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x20ae054
	float GetTraceDistanceFromEntity();// 0x20ae02c
	FName GetSilencerSocketNameFromEntity();// 0x20adfec
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x20adfc4
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x20adf9c
	byte GetShootTypeFromEntity();// 0x20adf74
	int GetShootReduceDurabilityAmount();// 0x20adf4c
	float GetShootIntervalFromEntity();// 0x20adf24
	FName GetShellDropSocketNameFromEntity();// 0x20adee4
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x20addd4
	int GetScopeID(bool bIsAngledOpticalSight);// 0x20add4c
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x20adc38
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x20adb28
	bool GetReloadWithNoCostFromEntity();// 0x20adb00
	float GetReloadTimeMagOutFromEntity();// 0x20adad8
	float GetReloadTimeMagInFromEntity();// 0x20adab0
	float GetReloadTimeFromEntity();// 0x20ada88
	FName GetReloadTIDName(byte method);// 0x20ad9f8
	float GetReloadTacticalTimeFromEntity();// 0x20ad9d0
	int GetReloadSpecificBulletNumFromEntity();// 0x20ad9a8
	float GetReloadRateFromEntity();// 0x20ad980
	float GetReloadDurationStartFromEntity();// 0x20ad958
	float GetReloadDurationLoopFromEntity();// 0x20ad930
	Transform GetRelativeMuzzleTransform();// 0x20ad8c8
	float GetReferenceDistance();// 0x20ad8a0
	FName GetRearSightSocket(int Index);// 0x20ad818
	Rotator GetRearSightRot();// 0x20ad7d0
	int GetRearSightIndex();// 0x20ad7a8
	Rotator GetRearSightHandRotOffset();// 0x20ad760
	float GetRangeModifier();// 0x20ad738
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x20ad678
	float GetPreFireTimeFromEntity();// 0x20ad650
	float GetPostFireTimeFromEntity();// 0x20ad628
	float GetPostFillGasTime();// 0x20ad600
	FName GetOverrideScopeAimSocketName();// 0x20ad5c0
	Transform GetMuzzleTransform();// 0x20ad558
	FName GetMuzzleSocketNameFromEntity();// 0x20ad510
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x20ad4e8
	float GetMaxValidHitTimeFromEntity();// 0x20ad4c0
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x20ad498
	int GetMaxBulletNumInOneClipFromEntity();// 0x20ad470
	int GetMaxBulletNumInBarrelFromEntity();// 0x20ad448
	bool GetIsNeedOffsetVelocityFromEntity();// 0x20ad420
	bool GetIsEnableScopeInFromEntity();// 0x20ad3f8
	float GetImpactEffectSkipDistanceFromEntity();// 0x20ad3d0
	float GetIgnoreRangeAttenuatDis();// 0x20ad3a8
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x20ad314
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x20ad2ec
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x20ad190
	float GetGasAddDamageRate();// 0x20ad168
	float GetGameDeviationFactor();// 0x20ad140
	FName GetFiringSuppressorSocketNameFromEntity();// 0x20ad100
	float GetFireSensitiveYawRate();// 0x20ad0d8
	float GetFireSensitivePitchRate();// 0x20ad0b0
	<int,bool> GetEquipAttachSlotMap();// 0x20acee0
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x20ace54
	byte GetCurSightVisionType();// 0x20ace2c
	byte GetCurSightType();// 0x20ace04
	int GetCurrentBulletNumInClip();// 0x20acde8
	float GetCurReloadTime();// 0x20acdc0
	byte GetCurReloadMethod();// 0x20acd98
	float GetCurGasRate();// 0x20acd70
	float GetCurGasAngle();// 0x20acd48
	float GetCrossHairInitSize();// 0x20acd20
	float GetCrossHairBurstSpeed();// 0x20accf8
	float GetCrossHairBurstIncreaseSpeed();// 0x20accd0
	byte GetControllerRole();// 0x1eb148c
	int GetConstantWeaponDurabilityFromEntity();// 0x20acca8
	bool GetClipHasInfiniteBulletsFromEntity();// 0x20acc80
	MeshComponent* GetChildMeshComp(FName compTag);// 0x20acc00
	bool GetCanRecordHitDetailFromEntity();// 0x20acbd8
	float GetBurstShootIntervalFromEntity();// 0x20acbb0
	float GetBurstShootCDFromEntity();// 0x20acb88
	int GetBurstShootBulletsNumFromEntity();// 0x20acb60
	ItemDefineID GetBulletTypeFromEntity();// 0x20acb14
	float GetBulletRangeEntity();// 0x20acaec
	float GetBulletNumSingleShotFromEntity();// 0x20acac4
	float GetBulletMomentumFromEntity();// 0x20aca9c
	float GetBulletFireSpeedFromEntity();// 0x20aca74
	float GetBaseReloadTime(bool bTactical);// 0x20ac9ec
	float GetBaseImpactDamageEntity();// 0x20ac9c4
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x20ac8ac
	bool GetAutoReloadFromEntity();// 0x20ac884
	bool GetADSManualStop();// 0x20ac85c
	float GetAccessoriesVRecoilFactor();// 0x20ac834
	float GetAccessoriesRecoveryFactor();// 0x20ac80c
	float GetAccessoriesHRecoilFactor();// 0x20ac7e4
	float GetAccessoriesDeviationFactor();// 0x20ac7bc
	void ForceSyncAllClientsBulletsNumOnServer();// 0x20ac7a8
	void FixBulletNumWithValideData();// 0x20ac794
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x20ac714
	void DoGrenadeLaunchStartReload();// 0x20ac700
	void CostGasByOneShoot();// 0x20ac6ec
	void ClearWeaponAttrModifier();// 0x20ac6d8
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x20ac61c
	void CheckReloadAttr();// 0x20ac608
	bool CheckNeedClientSetMaxBulletNum();// 0x20ac5e0
	bool CanSwitchToGrenade();// 0x20ac5c4
	void BP_OnSyncSimulatedClientsCurBullets();// 0x29fa2f4
	void AddWeaponDurability(int AddAmount);// 0x20ac54c
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x20ac4c8
	void AddFillGas(float AddTime);// 0x20ac450
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x20ac2b4

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x330, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x334, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x340, Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x350, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x380, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x3b0, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x3e0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x410, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x440, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x470, Size: 48]
	int CrossHairType;//[Offset: 0x4a0, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x4a4, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x4a8, Size: 4]
	PredictLineComponent* PredictLine;//[Offset: 0x4ac, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x4b0, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x4b8, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x4bc, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x4c8, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x4d4, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x4e0, Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x4ec, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x4f8, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x504, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x510, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x51c, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x528, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x534, Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x538, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x53c, Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x548, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x550, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 1]
	float MaxReconnectTime;//[Offset: 0x55c, Size: 4]
	float StartReconnectTime;//[Offset: 0x560, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x568, Size: 104]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x5d8, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x5e8, Size: 88]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x644, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x64c, Size: 4]
	byte CurWeaponState;//[Offset: 0x650, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x654, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x658, Size: 4]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x660, Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x6a8, Size: 4]
	MeshSynData[] synData;//[Offset: 0x6b0, Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x6c0, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x6c4, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x6cc, Size: 12]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x6e4, Size: 4]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x6ec, Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x6fc, Size: 12]
	byte WeaponUIType;//[Offset: 0x708, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x710, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x740, Size: 12]
	int FuncFlag;//[Offset: 0x74c, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x755, Size: 1]
	FString LuaFilePath;//[Offset: 0x758, Size: 12]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x29fa2f4
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x29fa2f4
	void UpdateWeaponAvatar(float DeltaTime);// 0x29fa2f4
	void TriggerWeaponEvent(enum Event);// 0x20d6738
	void SpecialResetForWeaponCrosshair();// 0x29fa2f4
	void SetWeaponMeshHidden(bool Hidden, bool CastShadow);// 0x20d6668
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x20d65b4
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x20d6500
	void RespawnData();// 0x29fa2f4
	void ResetData();// 0x29fa2f4
	void PlayLocalShellDropFX();// 0x29fa2f4
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x29fa2f4
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x29fa2f4
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x29fa2f4
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x29fa2f4
	void OnRep_WeaponReconnectReplicateData();// 0x20d64ec
	void OnRep_WeaponAttachSocketName();// 0x20d64d8
	void OnRep_SimulatedOwnerPawn();// 0x20d64c4
	void OnRep_OwnerClientCreateWeaponData();// 0x20d64b0
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x20d649c
	void OnRep_AvatarMeshChanged();// 0x20d6488
	void OnRep_AttachmentReplication();// 0x1f5a6ac
	void OnReleaseTrigger();// 0x1dc96cc
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x29fa2f4
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x29fa2f4
	void OnPushTrigger();// 0x20d646c
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x29fa2f4
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x29fa2f4
	void NewInitWeapon();// 0x20d6458
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x20d63d8
	bool IsSimulated();// 0x20d63b0
	bool IsLocalOrSpectorPlayer();// 0x20d6388
	bool IsAutonomous();// 0x20d6360
	void InitWeapon();// 0x20d634c
	bool HasComponentSlot(byte Slot);// 0x20d62cc
	void HandleReconnectNew(Actor* WeaponOwner);// 0x20d6254
	byte GetWeaponTypeNew();// 0x20d622c
	byte GetWeaponType();// 0x20d6204
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x20d61dc
	byte GetWeaponStateType();// 0x20d61b4
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x20d618c
	enum GetWeaponOwnerObserverType();// 0x20d6164
	FString GetWeaponName();// 0x20d60a4
	MeshComponent* GetWeaponMeshComponent();// 0x1fb5908
	byte GetWeaponHoldType();// 0x20d607c
	byte GetWeaponFireMode();// 0x20d604c
	WeaponEntity* GetWeaponEntityComponent();// 0x20d6024
	FString GetWeaponDetailInfo();// 0x20d5f64
	FName GetWeaponAttachSocket();// 0x20d5f1c
	WeaponSpecificHandler* GetSpecificHandler();// 0x20d5ef4
	FString GetOwnerPlayerName();// 0x20d5e34
	PlayerController* GetOwnerPlayerController();// 0x20d5e04
	Pawn* GetOwnerPawn();// 0x20d5ddc
	FString GetOwnerName();// 0x20d5d1c
	Controller* GetOwnerController();// 0x20d5cec
	Actor* GetOwnerActor();// 0x20d5cbc
	ItemDefineID GetItemDefineID();// 0x20d5c70
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x20d5c48
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x20d5b04
	LinearColor GetColorByTeamID(int TeamID);// 0x29fa2f4
	ItemHandleBase* GetBackpackItemHandle();// 0x20d5adc
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x29fa2f4
	void DelayHandleAvatarMeshChanged();// 0x20d5ac8
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x20d59fc
	void ClientLoadDefaultMesh();// 0x20d59e8
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x20d5970
	bool CheckHasFuncByInt(int Func);// 0x20d58f0
	bool CheckHasFunc(enum Func);// 0x20d58f0
	void ChangeSequenceState(byte StateType);// 0x20d5870
	void CallForceHideWeaponWidgetDel();// 0x20d585c

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool SetAutonomousLoadRes();// 0x1de6aec
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x216fd28
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x216fc58

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x408, Size: 4]
	delegate OnScopeEquipDelegate;//[Offset: 0x410, Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x41c, Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x428, Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x434, Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x440, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x450, Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x474, Size: 60]
	MeshSynData[] DefaultSynData;//[Offset: 0x4b0, Size: 12]
	WeaponDIYData WeaponDIYData;//[Offset: 0x4d0, Size: 60]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x514, Size: 12]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x528, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x2171c7c
	void SetPendantSocketType(enum SocketType);// 0x2171c04
	bool SetAutonomousLoadRes();// 0x1de6aec
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x2171a68
	void ResetAttachmentSocket();// 0x2171a54
	void ResetAttachmentParent();// 0x2171a40
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x21718fc
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1de267c
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x217187c
	void RefreshAvatarStateChanged();// 0x1de6754
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x2171804
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x2171784
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x21716c8
	bool PutOnEquipmentByResID(int resID);// 0x1fb64a0
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x2171648
	bool PutOffEquimentByResID(int resID);// 0x1fb6418
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x2171584
	void ProcessLoadAllMesh();// 0x1de6738
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x21714a8
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x29fa2f4
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x29fa2f4
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x29fa2f4
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x29fa2f4
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x29fa2f4
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x29fa2f4
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x21713dc
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x21712c4
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x1de63a8
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x2171198
	bool IsTeammate();// 0x1de264c
	bool IsSelf();// 0x1de25f4
	void InitMasterComponent();// 0x2171184
	void InitialAvatarParam();// 0x2171170
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x21710f8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x2171080
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x2171008
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x2170f2c
	Controller* GetWeaponController();// 0x2170f04
	STExtraWeapon* GetOwnerWeapon();// 0x2170edc
	STExtraBaseCharacter* GetOwnerCharacter();// 0x2170eb4
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x2170e20
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x2170da0
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x2170ca8
	AvatarDIYEntityFactory* GetEntityFactory();// 0x1de5f40
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x1de5fe0
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x2170be4
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x2170b64
	void DestroyWeapon();// 0x2170b50
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x2170a34
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x1f0fd70
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x2170968
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x21708d8
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x217080c
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1de21dc
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x2170794
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x2170644

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x1b0, Size: 12]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x1bc, Size: 60]
	int[] PendingDeleteSlotID;//[Offset: 0x1f8, Size: 12]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x204, Size: 4]
	<int,FName> SlotToSocket;//[Offset: 0x208, Size: 60]
	int StepCount;//[Offset: 0x244, Size: 4]
	delegate asyncLoadAssetsDelegate;//[Offset: 0x248, Size: 12]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x254, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x2f8, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x2fc, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	enum DisplayQuality;//[Offset: 0x311, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x314, Size: 60]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x370, Size: 60]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x3b0, Size: 60]
	int CurrentDecalBakingRequestID;//[Offset: 0x3ec, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x3f0, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x3fc, Size: 12]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1de6e90
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x1de6dbc
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x1de6c98
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x1de6b90
	void SetDisplayQuality(enum Quality);// 0x1de6b1c
	bool SetAutonomousLoadRes();// 0x1de6aec
	void RequestSyncLoadMeshes();// 0x1de6ad8
	void RequestSyncLoadHandles();// 0x1de6ac4
	void RequestAsyncLoadMeshes();// 0x1de6aa8
	void RequestAsyncLoadHandles();// 0x1de6a8c
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x1de6a14
	void RemoveAllDIYRTCacheInBattle();// 0x1de6a00
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x1de68f8
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x1de67f0
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x1de6770
	void RefreshAvatarStateChanged();// 0x1de6754
	void ProcessLoadAllMesh();// 0x1de6738
	void PreProcessBeforeLoadMesh();// 0x1de671c
	void PostProcessAfterLoadMesh();// 0x1de6700
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x1de6620
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x29fa2f4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x29fa2f4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1de65a0
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x1de64cc
	void OnAllAvatarHandleLoadedDone();// 0x1de64b0
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x1de63a8
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x1de62dc
	bool IsAutonomousAvatar();// 0x1de62b4
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x1de61f0
	<int,MeshComponent*> GetMeshComponentList();// 0x1de6060
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x1de5fe0
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x1de5f70
	AvatarDIYEntityFactory* GetEntityFactory();// 0x1de5f40
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x1de5ec0
	enum GetDisplayQuality();// 0x1de5ea4
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x1de5dd0
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x1de5d0c
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x1de5c44
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x1de5bc4
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x1de5af4
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x1de5a30
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1de595c
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x1de58a0
	int AddAction_Modle(int SlotID, int ModleID);// 0x1de57dc
	int AddAction_Material(int SlotID, int MaterialID);// 0x1de5718
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x1de5644
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x1de54c4
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x1de53ac
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x1de5294
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x1de51a0

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x124, Size: 4]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	FName LightVectorName;//[Offset: 0x130, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x138, Size: 4]
	delegate OnItemDownloadDelegate;//[Offset: 0x140, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x150, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x160, Size: 60]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	FString LuaFilePath;//[Offset: 0x1a0, Size: 12]
	void RequestDownloadItemInBattle(int InItemID);// 0x1de2750
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1de267c
	bool IsTeammate();// 0x1de264c
	bool IsServerMode();// 0x1de2624
	bool IsSelf();// 0x1de25f4
	bool IsLogicRunningMode();// 0x1de25cc
	bool IsLobbyAvatar();// 0x1de25b0
	bool IsLobbyActor();// 0x1de2594
	bool IsForceClientMode();// 0x1de2578
	uint32 GetPlayerKey();// 0x1de2548
	GameInstance* GetGameInstance();// 0x1de2518
	void DownloadItemInBattleCallBack(uint32 ItemID, uint32 ErrorCode);// 0x1de2454
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1de21dc

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 328]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	enum ItemStoreArea;//[Offset: 0x85, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x88, Size: 12]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float UnitWeight;//[Offset: 0x98, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 1]
	void UpdateAttributeModify(bool bEnable);// 0x1e5d64c
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x2220640
	bool HanldeDropAssociationData();// 0x2220610
	bool HanldeCleared();// 0x1f3db10
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1dfb724
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1dfb300
	bool HandleEnable(bool bEnable);// 0x1dfade8
	bool HandleDrop(int InCount, enum Reason);// 0x1dfad1c
	bool HandleDisuse(enum Reason);// 0x1dec17c
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x2220588
	bool HandleBindToTargetItem();// 0x1ed0be0
	World* GetWorldInternal();// 0x2220558
	BattleItemData ExtractItemData();// 0x1e01328
	void ClearAdditionalData();// 0x2220544
	bool CheckCanUse(out const interface classByteProperty ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x22203e4

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x222788c
	void RemoveAssociation(FName Name);// 0x2227814
	void Init(ItemDefineID InDefineID);// 0x2227784
	ItemDefineID GetDefineID();// 0x2227740
	<FName,ItemAssociation> GetAssociationMap();// 0x22275c0
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x22274b0
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x2227404
	ItemAssociation GetAssociation(FName Name);// 0x2227364
	void Constuct(out const ItemDefineID InDefineID);// 0x22272cc
	void AddAssociation(FName Name, ItemAssociation Association);// 0x22271c4

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0xc, Size: 12]
	int IntData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	FName TargetAssociationName;//[Offset: 0x18, Size: 8]
	Actor* TargetActor;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 40]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50, Size: 12]
	int Durability;//[Offset: 0x5c, Size: 4]
	enum ItemStoreArea;//[Offset: 0x60, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x64, Size: 40]
	ItemAssociation[] Associations;//[Offset: 0x8c, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 12]
	FString Desc;//[Offset: 0x2c, Size: 12]
	FString Icon;//[Offset: 0x38, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int SortingPriority;//[Offset: 0x14, Size: 4]
	int Worth;//[Offset: 0x18, Size: 4]
	int ItemCapacity;//[Offset: 0x1c, Size: 4]
	int ItemDurability;//[Offset: 0x20, Size: 4]
	int itemType;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x134, Size: 12]
	enum meshType;//[Offset: 0x140, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0xc, Size: 12]
	int[] MatParam;//[Offset: 0x18, Size: 12]
	int[] MirroParam;//[Offset: 0x24, Size: 12]
	int[] SlotMatParam;//[Offset: 0x30, Size: 12]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 12]
	int TexPathID;//[Offset: 0xc, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x10, Size: 48]
	int SlotID;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x1c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x20, Size: 4]
	MeshGroup MeshGroup;//[Offset: 0x24, Size: 36]
	ItemDefineID ParentDefineID;//[Offset: 0x48, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x60, Size: 60]
	int SlotID;//[Offset: 0xb4, Size: 4]
	int SubSlotID;//[Offset: 0xb8, Size: 4]
	FName SocketName;//[Offset: 0xc0, Size: 8]
	enum meshType;//[Offset: 0xc8, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0xcc, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0xd0, Size: 4]
	MeshData EntityMeshData;//[Offset: 0xd8, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x138, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x1a0, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x1b0, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x1c8, Size: 60]
	void UpdateVisibility();// 0x1de8d8c
	void UnRegisterTick();// 0x1de8d70
	void TickEntity(float DeltaTime);// 0x1de8cf0
	void SetSocketName(FName InName);// 0x1de8c70
	void SetParentDefineID(ItemDefineID ParentID);// 0x1de8be4
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x1de8b0c
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x1de8a84
	void RevertEntityMeshData();// 0x1de8a70
	void RenderEntity();// 0x1de8a54
	void RegisterTick();// 0x1de8a38
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1de89b0
	void PutOnDefaultEquipment(int InSlotID);// 0x1de8930
	void PrepareEntity();// 0x1de8914
	void OnPreRender();// 0x1de88f8
	void OnPostRender();// 0x1de88dc
	void MaskActionDirty(bool bFlag);// 0x1de885c
	bool IsEntityAvailable(enum VisibilityType);// 0x1de87d4
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x1de8708
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x1de8600
	bool HasSomeAction(enum InActionType);// 0x1de8580
	bool HasMainAction();// 0x1de8558
	FName GetSocketName();// 0x1de8510
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x1de8488
	ItemDefineID GetParentDefineID();// 0x1de8434
	MeshData GetMeshData();// 0x1de83d0
	BattleItemHandleBase* GetLoadedHandle();// 0x1de83a8
	ItemDefineID GetDefineID();// 0x1de8354
	void EnterRenderPipeline();// 0x1de8338
	void EnterLogicPipeline();// 0x1de831c
	void DrawOutline(bool bEnable);// 0x1de8294
	bool CreateAndApplyResource();// 0x1de8264
	void ClearRenderEntity();// 0x1de8248
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x1de817c
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x1de80a4
	void ClearEntity(bool ForceClear);// 0x1de801c

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 12]
	Object*[] MeshObjectList;//[Offset: 0xc, Size: 12]
	MeshComponent*[] MeshCompList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x8c, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28, Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34, Size: 12]
	ItemDefineID definedID;//[Offset: 0x40, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x65c, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x660, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x664, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x668, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x1e6e5a0
	Actor* GetBindOwner();// 0x1e6e57c
	MeshComponent* GetAttachedMeshComponent();// 0x1e6e560
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x1e6e3b0
	void BindOwner(Actor* Owner);// 0x1e6e334
	void BindEvent(bool bShowWidget);// 0x1e6e2ac

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x1de98f0

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x4, Size: 4]
	DecalParameter[] DecalParams;//[Offset: 0xc, Size: 12]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x18, Size: 4]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x2172d18
	void SetSocketName(FName InName);// 0x1de8c70
	void RenderEntity();// 0x1de8a54
	void RemoveParticleEffect();// 0x2172cfc
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1de89b0
	void PrepareEntity();// 0x1de8914
	void OnPreRender();// 0x1de88f8
	void OnPostRender();// 0x1de88dc
	bool IsForceEnableAnim();// 0x2172ccc
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x1de8488
	ItemDefineID GetDefineID();// 0x1de8354
	void EnterLogicPipeline();// 0x1de831c
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x1de80a4
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x2172c4c
	void ApplyParticleEffect();// 0x2172c30
	void AddWeaponHandleAction();// 0x2172c1c

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Actor* PredictActorTemplate;//[Offset: 0x638, Size: 4]
	StaticMesh* MeshTemplate;//[Offset: 0x640, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x668, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x690, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x6b8, Size: 100]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x71c, Size: 12]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x728, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x738, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x748, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x758, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x768, Size: 16]
	PredictProjectilePathResult PredictResult;//[Offset: 0x788, Size: 176]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0x838, Size: 4]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0x83c, Size: 4]
	StaticMesh* SplineMeshTemplate;//[Offset: 0x840, Size: 4]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0x848, Size: 12]
	int RedrawCounter;//[Offset: 0x854, Size: 4]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity);// 0x1f7551c
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x1f754a4

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 4]
	float MaxSimTime;//[Offset: 0x20, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	byte TraceChannel;//[Offset: 0x25, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 12]
	Actor*[] ActorsToIgnore;//[Offset: 0x34, Size: 12]
	float SimFrequency;//[Offset: 0x40, Size: 4]
	float OverrideGravityZ;//[Offset: 0x44, Size: 4]
	float GravityScale;//[Offset: 0x48, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x4c, Size: 4]
	byte DrawDebugType;//[Offset: 0x50, Size: 1]
	float DrawDebugTime;//[Offset: 0x54, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 4]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 12]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0xc, Size: 28]
	HitResult HitResult;//[Offset: 0x28, Size: 136]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 4]
	Controller* OwnerController;//[Offset: 0x30, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x29fa2f4
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x217e90c
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x217e850
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x217e828
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x217e800
	PlayerController* GetOwnerPlayerController();// 0x217e7d8
	Pawn* GetOwnerPawn();// 0x217e7b0
	Controller* GetOwnerController();// 0x217e788
	Actor* GetOwnerActor();// 0x217e76c

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0xcc, Size: 4]
	byte WeaponType;//[Offset: 0xd0, Size: 1]
	byte weaponTypeNew;//[Offset: 0xd1, Size: 1]
	byte WeaponHoldType;//[Offset: 0xd2, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0xd8, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xe8, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	int MaxNoGravityRange;//[Offset: 0xf4, Size: 4]
	float LaunchGravityScale;//[Offset: 0xf8, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x100, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x108, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int UnablePeekTipID;//[Offset: 0x110, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x118, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x154, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x190, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x194, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x198, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x1a4, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x1a8, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1b0, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x1e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x210, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x240, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x270, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2a0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x2d0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x300, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x330, Size: 60]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x36c, Size: 60]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x3a8, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x3b0, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xc0, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xc8, Size: 4]
	void UpdateComponentTick();// 0x1e63624
	STExtraWeapon* TryGetOwnerWeapon();// 0x21762a4
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x217627c
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x21761b8
	bool IsWeaponOwnerOBTarget();// 0x2176190
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x2176110
	bool IsWeaponLogicComponentTickEnabled();// 0x21760e8
	bool IsLocalOrSpectorPlayer();// 0x21760c0
	FString GetWeaponDetailInfo();// 0x2176000
	byte GetOwnerPawnRole();// 0x2175fd8

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 352]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x160, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 152]
	SlateBrush LargerProfileImage;//[Offset: 0xa8, Size: 152]
	FString Name;//[Offset: 0x140, Size: 12]
	FString Description;//[Offset: 0x14c, Size: 12]
	int DisplayPriority;//[Offset: 0x158, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4, Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x20, Size: 16]
	uint32 WeaponShootID;//[Offset: 0x30, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x34, Size: 4]
	byte CurWeaponState;//[Offset: 0x38, Size: 1]
	byte CurShootType;//[Offset: 0x39, Size: 1]
	int CurShootTotalType;//[Offset: 0x3c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x40, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x58, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int OperationIndex;//[Offset: 0x60, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x2cc, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x2d8, Size: 12]
	byte ThrowMode;//[Offset: 0x2e4, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x2e8, Size: 4]
	float MaxSimTime;//[Offset: 0x2ec, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x2f0, Size: 40]
	float GrenadeRadius;//[Offset: 0x318, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x31c, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x328, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x334, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x22e8, Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x2310, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x231c, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2328, Size: 12]
	delegate OnPlayerInteractiveStateChange;//[Offset: 0x2334, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2340, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x234c, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2358, Size: 12]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x2364, Size: 12]
	delegate OnParachuteStateChanged;//[Offset: 0x2370, Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x237c, Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x2380, Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x2384, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2388, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x238c, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x2390, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2394, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x2398, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x239c, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a0, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x23a4, Size: 4]
	float fTickDuration;//[Offset: 0x23a8, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x23b0, Size: 24]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c8, Size: 1]
	enum ParachuteState;//[Offset: 0x23d8, Size: 1]
	enum LastParachuteState;//[Offset: 0x23da, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x23dc, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e0, Size: 1]
	float SwimZDir;//[Offset: 0x23e4, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e8, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e9, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x23ec, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x23f0, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x23f4, Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x23f8, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x23fc, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x2400, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x2404, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x2408, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x240c, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x2410, Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x2418, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x2468, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x24b8, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x2508, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x2570, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2574, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2575, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x2578, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x257c, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2580, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x258c, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x25e8, Size: 4]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fb, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25fc, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x2600, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2604, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x2605, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x2608, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x260c, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x2610, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x2614, Size: 72]
	FName FeatureActorName;//[Offset: 0x26b0, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b8, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b9, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ba, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x26bc, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x26c8, Size: 4]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x26d0, Size: 12]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26dc, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26dd, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x26de, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x26e0, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x26ec, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x26f0, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f4, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f5, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x26f8, Size: 4]
	bool bRecommendSignalRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2705, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270c, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x2710, Size: 12]
	int CurrentActivityID;//[Offset: 0x271c, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x2720, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x2724, Size: 4]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2728, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x2730, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x2740, Size: 12]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x2068bec
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x2068b20
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x2068aa8
	void UpdateIndoorState(bool IsInDoor);// 0x20689e0
	void UpdateEnableGoldenSuitCheck();// 0x20689c4
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x20688fc
	void TriggerZombieBornSkills();// 0x20688e8
	void TouchCancelSkillLock();// 0x20688d4
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x2068820
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x201260c
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x2068710
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x2068644
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x2068580
	void SwitchCameraToParachuteOpening();// 0x2068564
	void SwitchCameraToParachuteFalling();// 0x2068548
	void SwitchCameraToNormal();// 0x206852c
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x20684b4
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x29fa2f4
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x20684a0
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x29fa2f4
	void StopCamShake();// 0x2068484
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x206840c
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x2068394
	void StartCamShake();// 0x2068378
	void ShowNightVisionFrame();// 0x2011318
	void ShowConfirmDialogOfMisKill();// 0x2011284
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x20682f8
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x2068260
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x20681e8
	void SetSpecifiedItemConsumed(int ItemID);// 0x29fa2f4
	void SetSelfAndVehicleShadow(bool IsShow);// 0x2068168
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x20680ac
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x2067fa0
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x2067edc
	void SetParachuteState(enum State);// 0x2067e5c
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x2067d90
	void SetFPPDeafultFov(float InFov);// 0x2067d18
	void SetBodyIndoor(bool IsInDoor);// 0x2067c98
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x2067ba4
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x2067a48
	void ServerOnApplicationactivated(bool bActive);// 0x2067980
	void RPC_Server_OnMiniGameEnd(int Score, int Duration, ActivityActorBase* ActiveActor);// 0x206783c
	void RPC_Server_CheckActivityOverlap(ActivityActorBase* ActiveActor, bool IsBeginOverlap);// 0x206772c
	void RPC_Client_NotifyActivityOverlap(ActivityActorBase* ActiveActorn, bool IsBeginOverlap);// 0x206761c
	void RPC_Client_CheckedActivityOverlap(ActivityActorBase* ActiveActorn, bool IsOverlaped, bool IsBegin);// 0x20674b0
	void ResetCharacter();// 0x200bdf4
	void RequestLoadParachuteAnim();// 0x2067494
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x20673cc
	void RemoveParachuteAnim();// 0x20673b8
	void ReleaseTrigger(enum Hand);// 0x2067338
	void PushTrigger(enum Hand);// 0x20672b8
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x2067164
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x29fa2f4
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x29fa2f4
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x29fa2f4
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x29fa2f4
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x29fa2f4
	void OnRep_STPlayerController();// 0x2067150
	void OnRep_ParachuteState(enum State);// 0x20670d0
	void OnRep_InjuryFreeData();// 0x20670bc
	void OnRep_CurrentActivityID();// 0x20670a8
	void OnRep_AngleSightStateChanged();// 0x2067094
	void OnRep_ActivityAnimationRepData();// 0x2067080
	void OnRank(int Kills, int Rank);// 0x2066fc4
	void OnPlayerInteractiveStateChange__DelegateSignature(STExtraBaseCharacter* BaseCharacter, ActivityActorBase* ActivityActor, enum Status);// 0x29fa2f4
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x2066f4c
	void OnPlayerControllerStateChanged(enum TargetStateType);// 0x2066ecc
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x29fa2f4
	void OnMiniTreeTriggerServerLogicCPP();// 0x2066eb0
	void OnLockUpdateAroundPickupEnd();// 0x2066e9c
	void OnLoadParachuteAnimCompleted();// 0x2066e88
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x29fa2f4
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x29fa2f4
	void OnBPStateCheckIn();// 0x29fa2f4
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x2066d7c
	void OnAllAvatarEquippedSucc();// 0x2066d68
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x2066ce0
	void MiniTreeTriggerServerLogic();// 0x2066c84
	bool IsSwitchCoolingDownFinish();// 0x2066c50
	bool IsSpecifiedItemInCD(int ItemID);// 0x2066bc8
	bool IsInLaunchSeat();// 0x2066b98
	bool IsGrenadeEmpty();// 0x2066b70
	bool IsBodyIndoorFuc();// 0x2066b50
	bool IsBodyIndoorCheck();// 0x2066b28
	bool IsAllowSyncControllerRotationInActived();// 0x2066b00
	bool IsAllowPickupActor();// 0x2066ad8
	void InitAirAttackLocatorComponent();// 0x2066ac4
	void HideNightVisionFrame();// 0x2005c18
	bool HasParachuteAnimLoaded();// 0x2066a9c
	void HandleParachuteStateChanged(enum NewState);// 0x2066a1c
	void HandleParachuteAnimChanged(enum TargetStateType, bool bIsReconnecting);// 0x2066958
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x20667e0
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x2066668
	SpringArmComponent* GetThirdPersonSpringArm();// 0x29fa2f4
	CameraComponent* GetThirdPersonCamera();// 0x29fa2f4
	float GetSwimRotateX_Ex();// 0x2066640
	int GetSkillIndexByActivityID();// 0x29fa2f4
	SpringArmComponent* GetScopeSpringArm();// 0x29fa2f4
	CameraComponent* GetScopeCamera();// 0x29fa2f4
	bool GetPlayerVisibile();// 0x2066618
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x2066598
	STExtraPlayerController* GetPlayerControllerSafety();// 0x2004998
	void GetOnVehicleDelegate__DelegateSignature();// 0x29fa2f4
	SceneComponent* GetMoveableComp();// 0x2066570
	bool GetIsInDoor();// 0x2066540
	bool GetIsGunADS();// 0x2066510
	float GetInjuryFreeRate(int BodyPart);// 0x20043b8
	SpringArmComponent* GetFPPSpringArm();// 0x29fa2f4
	float GetFPPDeafultFov();// 0x20664e8
	CameraComponent* GetFPPCamera();// 0x29fa2f4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x29fa2f4
	CameraComponent* GetFirstPersonCamera();// 0x29fa2f4
	enum[] GetDisallowedStates(int ActivityID);// 0x29fa2f4
	Vector GetBonePos(FName BoneName);// 0x2066454
	void FreeFallShakeCam();// 0x2066440
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x20663c8
	void EnablePet(bool Enable);// 0x2066340
	void DynamicCreateComponents();// 0x206632c
	void DumpCharacterAnimBPVars();// 0x2066318
	void DelayRemoveParachuteAnim();// 0x2066304
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x2066200
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x2066188
	void ClearHPUI();// 0x2000ac8
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x2066108
	void CallRefreshBPStateCheckIn();// 0x20660f4
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x2065f88
	void AnimInstanceCacheParachuteAnimVars();// 0x2065f74
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x2065eec

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xd0, Size: 20]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe4, Size: 20]
	Vector2D AimTargetScreenPos;//[Offset: 0xf8, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	PlayerController* PlayerController;//[Offset: 0x104, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x108, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x118, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x11c, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x120, Size: 4]
	FName[] Bones;//[Offset: 0x130, Size: 12]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x140, Size: 4]
	void OnUnEquipWeapon();// 0x216f784
	void OnShoot(STExtraWeapon* Weapon);// 0x216f70c
	void OnEquipWeapon();// 0x216f6f8
	bool IsCurrentWeaponSupportAutoAim();// 0x216f6d0
	void Init(Controller* Controller);// 0x216f658
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x216f58c
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x216f47c
	bool CheckBuffStun();// 0x216f454
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x216f388

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xbc, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xc0, Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0xcc, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0xd0, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0xdc, Size: 12]
	FName ScreenPlane;//[Offset: 0xe8, Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0xf0, Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0xfc, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x108, Size: 4]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x118, Size: 12]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x20de8f4
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x20de838
	void StopScreenParticleEffect(byte EffectType);// 0x20de7c0
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x20de6b8
	void StopAllScreenParticleEffect();// 0x20de6a4
	void StopAllScreenAppearance();// 0x20de690
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x20de54c
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x20de490
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x20de33c
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x20de210
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x20de140
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x20de0c0
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x20ddfc0
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x20ddf04
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x20ddda4
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x20ddbc4
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x20dd99c
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x20dd76c
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x20dd6f4
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x20dd630
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x20dd4d8
	void HandleEffectLoadFinish(byte EffectType);// 0x20dd460
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x20dd2fc

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44, Size: 4]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x50, Size: 48]
	FName MatInstParamName;//[Offset: 0x80, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x88, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x4, Size: 12]
	ParticleSystem* ParticleEffect;//[Offset: 0x10, Size: 40]
	FName ParticleParamName;//[Offset: 0x38, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x40, Size: 12]
	Vector ScreenParticleEffectLoc;//[Offset: 0x4c, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x58, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	float CurrentParamValue;//[Offset: 0x60, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x64, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 4]
	float MatialAlpha;//[Offset: 0x54, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c, Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float GradualFrag;//[Offset: 0x64, Size: 4]
	float DelayTime;//[Offset: 0x68, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x660, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x690, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x6c0, Size: 48]
	void SetActivate(bool _IsActivate);// 0x1f43bfc

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x764, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x1e6ac78

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 4]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc, Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0, Size: 4]
	float OpenAALFOV;//[Offset: 0xc4, Size: 4]
	int MaxDist;//[Offset: 0xc8, Size: 4]
	int minDist;//[Offset: 0xcc, Size: 4]
	int DangerDist;//[Offset: 0xd0, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148, Size: 4]
	float ShortDis;//[Offset: 0x14c, Size: 4]
	byte ChannelType;//[Offset: 0x150, Size: 1]
	Vector TargetLocation;//[Offset: 0x154, Size: 12]
	void SetItemExsist(bool bExsist);// 0x1dc6104
	void SetFinalLocation();// 0x1dc60f0
	void SetAALFov(bool bOpen);// 0x1dc6070
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x1dc5f58
	void OnFreeArrowLoadFinsh();// 0x1dc5f44
	void OnCalledActorLoadFinsh(Vector Location);// 0x1dc5ed4
	float GetTargetDistance();// 0x1dc5eac
	bool GetAALAvaliable();// 0x1dc5e84

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x310, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x314, Size: 4]
	int SkillID;//[Offset: 0x318, Size: 4]
	int IconID;//[Offset: 0x31c, Size: 4]
	float AttackAreaRadius;//[Offset: 0x320, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 12]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	enum PickerType;//[Offset: 0x2d, Size: 1]
	enum PickerTargetType;//[Offset: 0x2e, Size: 1]
	int PickerMaxCount;//[Offset: 0x30, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	Character* ClientMainCharacter;//[Offset: 0x3a4, Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x3ac, Size: 8]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	bool bClientActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b7, Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	MeshComponent* Mesh;//[Offset: 0x3bc, Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x3c0, Size: 4]
	delegate OnActorReset;//[Offset: 0x3c4, Size: 12]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool bUseDSOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	bool bEanbleSimulatedInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 1]
	FString actorName;//[Offset: 0x3d4, Size: 12]
	FString ActivityName;//[Offset: 0x3e0, Size: 12]
	int SkillIndex;//[Offset: 0x3ec, Size: 4]
	enum SkillEntry;//[Offset: 0x3f0, Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x3f8, Size: 40]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	int ButtonShowTextID;//[Offset: 0x424, Size: 4]
	FString ButtonShowAdditionalTextString;//[Offset: 0x428, Size: 12]
	Object* ButtonShowPic;//[Offset: 0x438, Size: 40]
	int ButtonShowConsumeItemID;//[Offset: 0x460, Size: 4]
	int CancleButtonShowTextID;//[Offset: 0x464, Size: 4]
	Object* CancleButtonShowPic;//[Offset: 0x468, Size: 40]
	enum[] SpecialInteractivePawnState;//[Offset: 0x490, Size: 12]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	bool bEnablePickupInActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 1]
	bool bEnableSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 1]
	bool bButtonShowCheckObstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 1]
	float CoolDownTime;//[Offset: 0x4a0, Size: 4]
	int ConsumeItemType;//[Offset: 0x4a4, Size: 4]
	int ConsumeItemID;//[Offset: 0x4a8, Size: 4]
	int ConsumeItemNum;//[Offset: 0x4ac, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x4b4, Size: 4]
	int NetRegionSize;//[Offset: 0x4b8, Size: 4]
	bool bUseDefautInteractiveBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 1]
	int CodeKey;//[Offset: 0x4c0, Size: 4]
	delegate OnOccupyDelegate;//[Offset: 0x4dc, Size: 12]
	delegate OnCoolDownDelegate;//[Offset: 0x4e8, Size: 12]
	delegate OnUpdateButton;//[Offset: 0x4f4, Size: 12]
	delegate OnActivityEnableUpdated;//[Offset: 0x500, Size: 12]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x1db76d8
	void TriggerSkillEvent(Character* Character);// 0x1db7658
	void StartOccupied();// 0x1db7644
	void StartCoolDown();// 0x1db7630
	void SetEnable(bool bIsEnable);// 0x1db75b0
	void OnRep_bIsOccupied();// 0x1db759c
	void OnRep_bIsCoolingDown();// 0x1db7588
	void OnRep_bActivityEnable();// 0x1db7574
	void OnRep_bActived();// 0x1db7560
	void OnOccupyFinished();// 0x1db754c
	void OnNotifyActivityOverlap(Character* Character, bool IsBegin);// 0x1db7488
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x1db7380
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1db7230
	void OnCoolDownFinished();// 0x1db721c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1db7018
	void NotifyActivityOverlap(Character* Character, bool IsBegin);// 0x1db6f54
	bool LocalStartActive(Character* Character);// 0x1db6ecc
	void LocalReset(Character* Character);// 0x1db6e4c
	bool LocalInterruptActive(Character* Character);// 0x1db6dc4
	bool LocalActiveFinished(Character* Character);// 0x1db6d3c
	bool IsOccupied();// 0x1db6d14
	bool IsCoolingDown();// 0x1db6cec
	bool IsConsumeItemEnough();// 0x1db6cc4
	bool IsCharaterInActived(Character* InCharacter);// 0x1db6c3c
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x1db6b18
	void GetRegionID(out RegionID OutRegionID);// 0x1db6a70
	bool GetRegionBasedNetConsideration();// 0x1db6a40
	MeshComponent* GetMesh();// 0x1db6a24
	Character* GetMainCharacter();// 0x1db69fc
	byte GetIsWeakNetUpdate();// 0x1db69cc
	int GetConsumeItemNum();// 0x1db69a4
	int GetConsumeItemID();// 0x1db697c
	int GetConsumeItemCurCount();// 0x1db6954
	Character* GetActivedCharacter();// 0x1db6928
	void ForceNetConsider();// 0x1db690c
	bool ClientClickCancleButton(Character* Character, out int OutReason);// 0x1db6838
	bool ClientClickButton(Character* Character, out int OutReason);// 0x1db675c
	void CheckedActivityOverlap(Character* Character, bool IsServerOverlaped, bool IsBegin);// 0x1db6640
	void CheckActivityOverlap(Character* Character, bool IsBegin);// 0x1db657c
	void BPUpdateInteractiveUI(Character* Character);// 0x1db64fc
	void BPUpdateButtonInfo();// 0x29fa2f4
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x1db63d8
	bool BPShowButton(Character* Character, bool bShow);// 0x1db6304
	void BPReset(Character* Character);// 0x1db6284
	void BPOnCharacterAttached(Character* InCharacter);// 0x1db6204
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x1db60e0
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x1db5ff4
	bool BPClientClickCancleButton(Character* Character, int Reason);// 0x29fa2f4
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x29fa2f4
	bool BPClickButton(Character* Character, int Reason);// 0x1db5f28
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x1db5e4c
	bool BPAllowInteractive(Character* Character);// 0x1db5dc4
	bool BPAllowClickButton(Character* Character);// 0x1db5d3c
	void BPActiveStateChange();// 0x29fa2f4
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x1db5c18
	bool AllowShowButton(Character* Character, out int Reason);// 0x1db5b3c
	bool AllowInteractive(Character* Character, out int Reason);// 0x1db5a60
	bool AllowClickButton(Character* Character, out int Reason);// 0x1db5984

--------------------------------
Class: CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	int[] CustomIntValueArray;//[Offset: 0x394, Size: 12]
	bool SetCustomIntValue(int Index, int Value);// 0x1e698f8
	int GetCustomIntValue(int Index);// 0x1e69878

--------------------------------
Class: DecoratorActor.LuaActor.Actor.Object
	int resID;//[Offset: 0x36c, Size: 4]
	int TlogID;//[Offset: 0x370, Size: 4]
	int Health;//[Offset: 0x374, Size: 4]
	int TeamID;//[Offset: 0x378, Size: 4]
	int IconID;//[Offset: 0x37c, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bDisableCollisionOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	delegate OnHealthChangeNotify;//[Offset: 0x384, Size: 12]
	bool bShowBulletImpactEffectInOnlyAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	void ShowIconInPlayerMap(uint32 PlayerKey);// 0x1e7aa10
	void ShowIconInMap();// 0x1e7a9fc
	bool ShouldTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1e7a880
	void SetHealth(int ToHealth);// 0x1e7a80c
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x1e7a6fc
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x1e7a5c0
	void OnRep_Health();// 0x1e7a5ac
	void OnDie();// 0x1e7a590
	void OnBPRespawned();// 0x1e2d7ec
	bool IsDead();// 0x1e7a568
	void HideIconInMap();// 0x1e7a554
	int GetHitBodyType(FString HitPart);// 0x1e7a3ec
	int GetActorResId();// 0x1e7a3d0
	void EatEffectMulticast(FString DriverKey);// 0x1e7a30c
	void Client_OnEatEffect(FString DriverKey);// 0x29fa2f4

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x30c, Size: 60]
	FString LuaFilePath;//[Offset: 0x348, Size: 12]
	void UnRegistLuaTick();// 0x4d4e158
	void RegistLuaTick(float TickInterval);// 0x4d4e0e0

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RegionID

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x320, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x32c, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x338, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x348, Size: 12]
	float CurrentScale;//[Offset: 0x354, Size: 4]
	int CurActTime;//[Offset: 0x358, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x35c, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	FName SocketBaseTags;//[Offset: 0x370, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x378, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x37c, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x380, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x384, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x388, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x394, Size: 12]
	int AttachedNumber;//[Offset: 0x3a4, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x3a8, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x3e4, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x3fc, Size: 12]
	enum DropOffLocationType;//[Offset: 0x408, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x40c, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x410, Size: 12]
	byte IsDayTime;//[Offset: 0x41c, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x420, Size: 12]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x42d, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x430, Size: 12]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool UseDropFixedPosition();// 0x216b90c
	void StopDancing_Multicast(const Actor*[] Players);// 0x216b818
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x216b6dc
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x216b628
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x216b520
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x216b4a8
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x29fa2f4
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x216b3ec
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x216b348
	void OnStopDancing(out const Actor*[] Players);// 0x216b274
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x216b15c
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x216b0dc
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x29fa2f4
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x29fa2f4
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x216b040
	void OnRep_SkeletalAnimationSyncData();// 0x216b02c
	void OnRep_ShowRabbitAnim();// 0x1e2d7ec
	void OnRep_PawnDoneList();// 0x1e30268
	void OnRep_IsDayTime();// 0x1e2d7d0
	void OnRep_CurrentScaleCPP();// 0x216b018
	void OnRep_CurrentScaleBP();// 0x29fa2f4
	void OnRep_CurrentInteractingPlayerCount();// 0x216afc4
	void OnRep_CurActTimeCPP();// 0x216af70
	void OnRep_CurActTimeBP();// 0x29fa2f4
	void OnRep_AttachedNumber();// 0x216af10
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x216adb0
	void OnPlayerNumberChanged(int Number);// 0x29fa2f4
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x29fa2f4
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x29fa2f4
	void OnPCCDCleared(PlayerController* PlayerController);// 0x29fa2f4
	void OnClientCurrentInteractingPlayerCountChanged();// 0x29fa2f4
	bool IsDropFixedRelativePositionSetUp();// 0x216ad80
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x216ad00
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x216ac68
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x216aae4
	bool CanTriggertEvent(Pawn* CurPawn);// 0x29fa2f4
	int CacheAssociatedSkillIndex();// 0x29fa2f4

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	enum RegionSize;//[Offset: 0x2d1, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 1]

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x35c, Size: 12]
	FName TombName;//[Offset: 0x368, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x374, Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x378, Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x380, Size: 24]
	int DeadTime;//[Offset: 0x398, Size: 4]
	int BoxLifeSpan;//[Offset: 0x39c, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x3a4, Size: 12]
	byte AttackRules;//[Offset: 0x3b0, Size: 1]
	Actor* AttachedActor;//[Offset: 0x3b4, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	enum BoxType;//[Offset: 0x3b9, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x3bc, Size: 12]
	uint32 OwnerUniqueID;//[Offset: 0x3c8, Size: 4]
	int TargetPlayerKey;//[Offset: 0x3cc, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x3d4, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x3dc, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x3e4, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x3ec, Size: 4]
	void SwitchToDeadTombBox();// 0x1e30268
	void SetVisible(bool IsVisible);// 0x1f6aa80
	void RegisterToPlayerPickUpList();// 0x1f6aa6c
	void OnRep_VisibilityChange();// 0x1f6aa58
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x1f6aa44
	void OnRep_BoxLifeSpan();// 0x1f6aa30
	void OnRep_AttachmentReplication();// 0x1f5a6ac
	void OnRep_AttachedActor();// 0x1f6aa1c
	void OnRefreshItemEffect();// 0x1f6aa08
	void HideDeadTombApparence();// 0x1dd37a8
	int GetUniqueInstanceID();// 0x1f6a9e0
	int GetTombboxLifespan();// 0x1f6a9b8
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x1f6a99c
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x1f6a8f0
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x1f6a8c4
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x1f6a7a8
	void GeneratePlayerBackpackWrappers();// 0x1f6a794
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x1f6a5fc
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x1f6a500
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x1f6a40c
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x1f6a2ac

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]
	<int> ItemSpecificIDArray;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x620, Size: 12]
	enum BoxType;//[Offset: 0x638, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x1f56ae0
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x1f56a0c
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x29fa2f4
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x29fa2f4
	void OnRep_PickUpDataList();// 0x1f569f8
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x29fa2f4
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x29fa2f4
	PickUpItemData[] GetDataList();// 0x1f5698c
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x1f5683c

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x380, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x388, Size: 24]
	int Count;//[Offset: 0x3a0, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x3a8, Size: 12]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	FName OwnerName;//[Offset: 0x3b8, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x3c0, Size: 4]
	float OwnerTime;//[Offset: 0x3c4, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x3cc, Size: 12]
	Actor* AttachedActor;//[Offset: 0x3d8, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x3dc, Size: 12]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x3ec, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x3f0, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x418, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x420, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x424, Size: 4]
	FString ItemValue;//[Offset: 0x428, Size: 12]
	FString ItemCategory;//[Offset: 0x434, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x448, Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x458, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x45c, Size: 4]
	int ObjectPoolSize;//[Offset: 0x460, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x468, Size: 4]
	FString EffectPath;//[Offset: 0x46c, Size: 12]
	FString DurationTime;//[Offset: 0x478, Size: 12]
	int ItemID;//[Offset: 0x484, Size: 4]
	Color DefaultColor;//[Offset: 0x488, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x490, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x510, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x590, Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x5d0, Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x5e0, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x5f8, Size: 4]
	int SpotDataIndex;//[Offset: 0x600, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	int DropGroupID;//[Offset: 0x610, Size: 4]
	Vector DropStartLocation;//[Offset: 0x614, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x1f5ae38
	FString ToDetailString();// 0x1f5ad70
	void ShowMesh(bool bShow);// 0x1f5acf0
	void ShowActor();// 0x1f5acdc
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x1f5ab74
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x1f5aae4
	void SetDefineID(out const ItemDefineID DID);// 0x1f5aa54
	void SetCountOnServerAfterSpawn(int _Count);// 0x1f5a9dc
	void SetActorToGround(Actor* IgnoreActor);// 0x1f5a928
	void ServerResetShowActor();// 0x1f5a914
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x1f5a7b8
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x1f5a704
	void RegisterToCurveAnimComponent();// 0x1f5a6f0
	void PickUpWrapperShow__DelegateSignature();// 0x29fa2f4
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x29fa2f4
	void OnWrapperPickedDelegate__DelegateSignature();// 0x29fa2f4
	void OnRespawnedEvent();// 0x1e2d7d0
	void OnRep_PickUpColdCountDown();// 0x1f5a6dc
	void OnRep_DropGroundEffectInfo();// 0x1f5a6c8
	void OnRep_AttachmentReplication();// 0x1f5a6ac
	void OnRep_AttachedActor();// 0x1f5a698
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x1f5a480
	void OnHideActor(bool bHide);// 0x1f5a3f8
	void OnActorDestroyed();// 0x1f5a3dc
	void ModifyData(int _Count);// 0x1f5a364
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x1f5a2ec
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x1f5a224
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x1f5a140
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x1f59de8
	bool HasWrapperContainsAttachment(int AttachmentID);// 0x1f59d60
	StaticMeshComponent* GetPickupMesh();// 0x1f59d38
	int GetNetGUIDOffsetValue();// 0x1f59d10
	bool GetHasBeenPickedUp();// 0x1f59ce0
	PickUpItemData[] GetDataList();// 0x1f5698c
	void ForceNetUpdate();// 0x1f59cc4
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x1f5683c
	void ColdTimeCountDown();// 0x1f59cb0
	void ClientResetShowActor();// 0x1f59c9c
	bool CheckPickUpDataIsWeapon();// 0x1f59c74
	void BroadcastResetShowActor();// 0x1f59c18
	void BroadcastDataToAllClients(int Count_New);// 0x1f59b64
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x1f59ae4
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x1f598d0

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x35c, Size: 4]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x274, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	byte SpotGroupType;//[Offset: 0x27a, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x27c, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x280, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x284, Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x290, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x294, Size: 60]
	Actor*[] CacheItems;//[Offset: 0x2d0, Size: 12]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x25ec2e4
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x25ec22c
	bool GenerateSpot();// 0x25ec1fc
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x25ec0f8
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x25ebe88
	int CountCacheItemValeCategory();// 0x25ebe60
	void ClearCacheItems();// 0x25ebe4c

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x25d, Size: 1]
	int WorldCompositionID;//[Offset: 0x260, Size: 4]
	float HalfHeight;//[Offset: 0x264, Size: 4]
	int SpotProbability;//[Offset: 0x268, Size: 4]
	float LineOffsetZ;//[Offset: 0x26c, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	void SetSpotValid(bool Valid);// 0x25f8668
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x25f83ac
	bool IsSpotValid();// 0x25f837c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x25f81b0
	bool GenerateSpot();// 0x25ec1fc
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x25f8038

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int Weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x174, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x180, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x184, Size: 208]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x254, Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x290, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 1]
	FString[] AreaIDList;//[Offset: 0x2a0, Size: 12]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x2ac, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x2b8, Size: 12]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x2c4, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x2d0, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x30c, Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x32c, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x330, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x334, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x370, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x3ac, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x3b8, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c6, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x3c8, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x3d0, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x418, Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x430, Size: 12]
	FString CookedBandFilePath;//[Offset: 0x478, Size: 12]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x4c4, Size: 12]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x4d0, Size: 60]
	void WriteItemSpotStatisticsDatas();// 0x25ea280
	void WriteItemClassStatisticsDatas_V15();// 0x1dd8bcc
	void WriteItemClassStatisticsDatas();// 0x25ea26c
	void WriteGroupStatisticsDatas();// 0x25ea258
	void WriteBuildingStatisticsDatas();// 0x25ea244
	void WriteAreaItemStatisticsDatas();// 0x25ea230
	void WriteAllStatisticsDatasToLog();// 0x20ee6ec
	void WriteAllStatisticsDatas();// 0x1de6754
	void SetCatetoryRate(<FString,float> Rates);// 0x25ea084
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x25e9fa0
	void RegisterBornIslandItem(Actor* Item);// 0x25e9f20
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x25e9d68
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x25e9b3c
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x25e9a24
	void RandomGroups();// 0x1dbb2c0
	void RandomBornIslandGroups();// 0x25e9a08
	void LoadItemGenerateTable();// 0x25e99ec
	bool IsCatetoryEnabled();// 0x25e99c4
	void InitCatetorys();// 0x25e99b0
	void InitCategoryEx();// 0x25e999c
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x25e9874
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x25e9594
	int GetItemDefineID(class Object PickUpClass);// 0x29fa2f4
	float GetCatetoryRate(FString Catetory);// 0x25e94cc
	void GenerateSpotOnTick(float DeltaTime);// 0x1e4c368
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x25e93f4
	void DeleteValidGroups();// 0x25e93e0
	void DeleteBornIslandItems();// 0x25e93cc
	bool CheckShouldGenerateItem(int ItemID);// 0x25e9344
	void CheckRecoverItems();// 0x25e9330
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x25e91fc

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0xc0, Size: 4]
	FString ItemTableName;//[Offset: 0xc4, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0xd0, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0xd8, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x114, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x120, Size: 60]
	FString CookedFilePath;//[Offset: 0x15c, Size: 12]
	FString[] CookedFileAddPathArray;//[Offset: 0x168, Size: 12]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x1e4c0e8
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x1e4c2e8
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1e4c168
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x25d119c
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x25d10d0
	void GenerateSpots();// 0x1f365e4
	void GenerateSpotOnTick(float DeltaTime);// 0x1e4c368
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x25d0e88
	void CheckTileLevelsVisible();// 0x25d0e74

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0xc4, Size: 12]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x4, Size: 12]
	int UId;//[Offset: 0x10, Size: 4]
	int ItemID;//[Offset: 0x14, Size: 4]
	int GroupType;//[Offset: 0x18, Size: 4]
	int SpotType;//[Offset: 0x1c, Size: 4]
	FString AreaName;//[Offset: 0x20, Size: 12]
	Vector Location;//[Offset: 0x2c, Size: 12]
	float X;//[Offset: 0x38, Size: 4]
	float Y;//[Offset: 0x3c, Size: 4]
	int GameTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x4, Size: 12]
	FString SpawnItemCategory;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0x78, Size: 60]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x25d, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	int WorldCompositionID;//[Offset: 0x260, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x264, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x268, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	void SetGroupValid(bool Valid);// 0x25e5f54
	bool IsValidGroup();// 0x25e5f24
	int FindWorldCompositionID();// 0x25e5efc
	void DoPickUp();// 0x25e5ee8

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	int ItemWeight;//[Offset: 0x1c, Size: 4]
	FString ItemPath;//[Offset: 0x20, Size: 12]
	int ItemStackCount;//[Offset: 0x2c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x270, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x274, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x280, Size: 12]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x25eb9e4
	void RepeatSpots();// 0x25eb9d0
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x25eb958
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x25eb7bc
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x25eb66c
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x25eb548

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xa0, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xa8, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xb0, Size: 60]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	int ItemCount;//[Offset: 0x8, Size: 4]
	FString MetaData;//[Offset: 0xc, Size: 12]
	FString ItemValue;//[Offset: 0x18, Size: 12]
	FString ItemCategory;//[Offset: 0x24, Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Actor* HostActor;//[Offset: 0x6c, Size: 4]
	Actor* AttachedActor;//[Offset: 0x70, Size: 4]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 12]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GenerateItemLimit
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 12]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x1c, Size: 60]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x58, Size: 60]

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 12]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x520, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x4a4, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x4b4, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x4b8, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x4bc, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x4c0, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x514, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x518, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x260, Size: 4]
	Vector SocketOffset;//[Offset: 0x264, Size: 12]
	Vector TargetOffset;//[Offset: 0x270, Size: 12]
	float ProbeSize;//[Offset: 0x27c, Size: 4]
	byte ProbeChannel;//[Offset: 0x280, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x281, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x281, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x281, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x281, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x281, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x281, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x281, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 1]
	float CameraLagSpeed;//[Offset: 0x284, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x288, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x28c, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x290, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x410ac6c
	Rotator GetTargetRotation();// 0x20c0c08

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0x5c0, Size: 1008]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0x9b4, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0x9c0, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cd, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ce, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cf, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d2, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d3, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4, Size: 1]
	Rotator SwimRotate;//[Offset: 0x9d8, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 1]
	float C_SwimSpeed;//[Offset: 0x9e8, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0x9ec, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0x9f4, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 1]
	byte C_SeatSpecialType;//[Offset: 0x9fa, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0x9fc, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa01, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xa04, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xa08, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xa0c, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xa10, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xa14, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xa18, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xa1c, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xa20, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xa24, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xa28, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xa2c, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xa30, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xa34, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xa38, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0xa3c, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0xa40, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0xa44, Size: 4]
	float NeckTurnSpeed;//[Offset: 0xa48, Size: 4]
	enum C_ParachuteState;//[Offset: 0xa4c, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0xa50, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0xa5c, Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa69, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6a, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6b, Size: 1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0xa70, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0xa74, Size: 4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xa78, Size: 4]
	AnimSequence* C_ShieldAddtive;//[Offset: 0xa7c, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0xa80, Size: 4]
	BlendSpace* C_BSFreeFalling;//[Offset: 0xa84, Size: 4]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0xa88, Size: 4]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0xa8c, Size: 4]
	BlendSpace* C_BSParachute;//[Offset: 0xa90, Size: 4]
	AnimSequence* C_ParachuteEnter;//[Offset: 0xa94, Size: 4]
	AnimSequence* C_ParachuteLand;//[Offset: 0xa98, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0xa9c, Size: 4]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa1, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0xaa4, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xab0, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xabc, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0xac8, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad5, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad6, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad7, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xada, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadb, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadd, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xade, Size: 1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadf, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae1, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xae4, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xae8, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaed, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaee, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaef, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0xaf4, Size: 12]
	float C_LeanOut_AimAngle;//[Offset: 0xb00, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xb08, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xb0c, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2a, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2b, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0xb2c, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0xb30, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0xb34, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0xb38, Size: 12]
	int[] ColdGameModeIDList;//[Offset: 0xb44, Size: 12]
	enum[] StandbyGameModeType;//[Offset: 0xb50, Size: 12]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0xb6c, Size: 4]
	void TryToFireFlareGun();// 0x1fee71c
	void TryPlayStandbyAnim();// 0x1fee708
	bool ShouldDestoryParachuteAnimAsset();// 0x1fee6e0
	void SetVelocityZFactor(float NewFactor);// 0x1fee668
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x1fee5a4
	void PostCacheParamList(float DeltaSeconds);// 0x29fa2f4
	void PendingKillParachuteAnim(Object* InObject);// 0x1fee52c
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x1fee470
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x1fee3f8
	void DumpAllProperties();// 0x1fee3e4
	void DumpAllAnimInstancesInThisWorld();// 0x1dd8bcc
	void ClearStandbyAnimState();// 0x1fee3d0
	void ClearParachuteAnimVars();// 0x1fee3bc
	AnimParamList CacheParamList(float DeltaSeconds);// 0x1fee27c
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x1fee1fc
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x1fee138
	PlayerAnimList CacheAnimVarList();// 0x1fee068
	void AsyncAnimStandbyCallback(AnimationAsset* retAsset);// 0x1fedff0

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x357, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 1]
	byte C_LODLevel;//[Offset: 0x367, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x368, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x36c, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x374, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x380, Size: 4]
	byte C_PoseType;//[Offset: 0x384, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x385, Size: 1]
	byte C_WeaponType;//[Offset: 0x386, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x387, Size: 1]
	byte C_WeaponState;//[Offset: 0x388, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x38c, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x398, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x39c, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x3a0, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x3a4, Size: 4]
	float C_FireAlpha;//[Offset: 0x3a8, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x3ac, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x3b0, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x3b4, Size: 4]
	float PeekFrameRate;//[Offset: 0x3b8, Size: 4]
	float PeekSpeed;//[Offset: 0x3bc, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x3c0, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x3c4, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x3c8, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x3cc, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x3d0, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x3d4, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x3dc, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x3e8, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x3f4, Size: 12]
	Vector C_MoveDir;//[Offset: 0x400, Size: 12]
	Vector C_HurtDir;//[Offset: 0x40c, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x418, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x424, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x430, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x43c, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x448, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x454, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x460, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x46c, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x478, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x484, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x490, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x49c, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x4a8, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x4b4, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x4c0, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x4cc, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x4d8, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x4e4, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x4f0, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x4fc, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x508, Size: 4]
	Rotator OwnerRotation;//[Offset: 0x50c, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x51c, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x528, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x52c, Size: 12]
	Rotator FloorRotation;//[Offset: 0x538, Size: 12]
	byte Role;//[Offset: 0x544, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x547, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x54c, Size: 4]
	BlendSpace* C_MovementBSCache;//[Offset: 0x550, Size: 4]
	BlendSpace* C_MovementBSCache_Dest;//[Offset: 0x554, Size: 4]
	AnimSequence* C_IdleAddtive;//[Offset: 0x558, Size: 4]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x55c, Size: 4]
	BlendSpace1D* C_FallingBS;//[Offset: 0x560, Size: 4]
	AnimSequence* C_JumpStart;//[Offset: 0x564, Size: 4]
	AnimSequence* C_LandLight;//[Offset: 0x568, Size: 4]
	AnimSequence* C_LandHeavy;//[Offset: 0x56c, Size: 4]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x570, Size: 4]
	AnimSequence* C_TurnAnim;//[Offset: 0x574, Size: 4]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x578, Size: 4]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x57c, Size: 4]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x580, Size: 4]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x584, Size: 4]
	AnimMontage* C_MontageRescue;//[Offset: 0x588, Size: 4]
	AnimMontage* C_MontageDead;//[Offset: 0x58c, Size: 4]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x590, Size: 4]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x594, Size: 4]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x598, Size: 4]
	enum AnimInstanceType;//[Offset: 0x59c, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x5a0, Size: 4]
	byte LastPoseTypeCache;//[Offset: 0x5a4, Size: 1]
	int ForceLODLevel;//[Offset: 0x5b4, Size: 4]
	void RefreshPeekState();// 0x1ff18b4
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x1ff1834
	void PlayPostReloadWeaponAnimation();// 0x1ff1820
	void PlayPostFillGasWeaponAnimation();// 0x1ff180c
	void PlayPlayerDeadAnimation();// 0x1ff17f8
	void PlayAnimationByEventType(byte Type);// 0x1ff1780
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x1ff1700
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x1ff163c
	void HandlePlayerPickUp();// 0x1de88f8
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x1ff15b4
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x29fa2f4
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x1ff140c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x1ff138c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x1ff11e0
	byte GetRole();// 0x1ff11b8
	void EnableAnimFlag(enum PlayFlag);// 0x1ff1140
	void DisableAnimFlag(enum PlayFlag);// 0x1ff10c8

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x32c, Size: 4]
	FString LuaFilePath;//[Offset: 0x330, Size: 12]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x29fa2f4
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x20dbb08
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x1ff140c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x1ff138c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x1ff11e0

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x3d8, Size: 4]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x3dc, Size: 4]

--------------------------------
Class: AnimInstanceProxy

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte PoseType;//[Offset: 0x1d, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	enum ParachuteState;//[Offset: 0xf3, Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool bFreeFallingShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float HandleFolderFactor;//[Offset: 0xfc, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0x100, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4, Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc, Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14, Size: 8]
	PlayerAnimData FillGasAnim;//[Offset: 0x1c, Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x24, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x2c, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x34, Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x3c, Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x44, Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x4c, Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x54, Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x5c, Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x64, Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x6c, Size: 8]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x74, Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x7c, Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x88, Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float Rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0xcc, Size: 60]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x108, Size: 12]
	float PistolCenterDownDis;//[Offset: 0x114, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x11c, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x124, Size: 4]
	float RotateAngle;//[Offset: 0x128, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x12c, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x130, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x134, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x138, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x13c, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x140, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x144, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x148, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x14c, Size: 4]
	void UpdateComponentTick();// 0x1e63624
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x1e63560
	void DrawSpreadEnd();// 0x1e6354c
	void DrawDebugPointEnd();// 0x1e63538

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x3c0, Size: 4]
	float BulletFireSpeed;//[Offset: 0x3c4, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x3cc, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x3d0, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x3d4, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x3d8, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x3dc, Size: 12]
	float ShootInterval;//[Offset: 0x3e8, Size: 4]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x3f0, Size: 4]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x3f8, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x3fc, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x400, Size: 12]
	float BurstShootInterval;//[Offset: 0x40c, Size: 4]
	float BurstShootCD;//[Offset: 0x410, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x414, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x418, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x420, Size: 8]
	FName SilencerSocketName;//[Offset: 0x428, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x430, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x438, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x440, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x448, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x44c, Size: 4]
	byte shootType;//[Offset: 0x450, Size: 1]
	int ShootTotalType;//[Offset: 0x454, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x45c, Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x460, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x474, Size: 20]
	float BaseImpactDamage;//[Offset: 0x488, Size: 4]
	float BulletMomentum;//[Offset: 0x48c, Size: 4]
	float BulletRange;//[Offset: 0x490, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x494, Size: 4]
	byte ImpactDirType;//[Offset: 0x498, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x49c, Size: 12]
	float RangeModifier;//[Offset: 0x4a8, Size: 4]
	float ReferenceDistance;//[Offset: 0x4ac, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x4b0, Size: 4]
	class DamageType* DamageType;//[Offset: 0x4b4, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x4b8, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x4d0, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	int InitBulletInClip;//[Offset: 0x4ec, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	float TraceDistance;//[Offset: 0x4f4, Size: 4]
	float MaxValidHitTime;//[Offset: 0x4f8, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x4fc, Size: 60]
	float MaxDamageRate;//[Offset: 0x538, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x53c, Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x57c, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x580, Size: 56]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x5b8, Size: 8]
	float DamageImpulse;//[Offset: 0x5c0, Size: 4]
	byte ReloadType;//[Offset: 0x5c4, Size: 1]
	float PreFireTime;//[Offset: 0x5c8, Size: 4]
	float PostFireTime;//[Offset: 0x5cc, Size: 4]
	float PostReloadTime;//[Offset: 0x5d0, Size: 4]
	float ReloadDurationStart;//[Offset: 0x5d4, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x5d8, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x5dc, Size: 4]
	float ReloadTime;//[Offset: 0x5e0, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x5e4, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x5e8, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x5ec, Size: 4]
	float ReloadRate;//[Offset: 0x5f0, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x5f8, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x600, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x60c, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x612, Size: 1]
	float DropDuration;//[Offset: 0x614, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x61c, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x620, Size: 152]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x6b8, Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x6c8, Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x72c, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x730, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x734, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x738, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0x77c, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0x780, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x784, Size: 4]
	float GameDeviationFactor;//[Offset: 0x788, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x78c, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x790, Size: 4]
	byte CrossHairType;//[Offset: 0x794, Size: 1]
	float CrossHairInitialSize;//[Offset: 0x798, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x79c, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x7a0, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x7a4, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0x7b0, Size: 8]
	FName DefaultGripSocket;//[Offset: 0x7b8, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x7c0, Size: 8]
	FName DefaultMagSocket;//[Offset: 0x7c8, Size: 8]
	float WeaponBodyLength;//[Offset: 0x7d0, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x7d4, Size: 12]
	float WeaponAimFOV;//[Offset: 0x7e4, Size: 4]
	float WeaponAimInTime;//[Offset: 0x7e8, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x7ec, Size: 4]
	float WeaponAimYawRate;//[Offset: 0x7f0, Size: 4]
	float GameMotionYawRate;//[Offset: 0x7f4, Size: 4]
	float GameMotionPitchRate;//[Offset: 0x7f8, Size: 4]
	float ForegripParam;//[Offset: 0x7fc, Size: 4]
	float MagParam;//[Offset: 0x800, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x808, Size: 4]
	byte SightType;//[Offset: 0x80c, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0x810, Size: 4]
	byte SightVisionType;//[Offset: 0x814, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x818, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x830, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x834, Size: 4]
	float RecoilKickADS;//[Offset: 0x838, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x83c, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x840, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	enum ReleaseFireType;//[Offset: 0x845, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x848, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x84c, Size: 4]
	float AnimationKick;//[Offset: 0x850, Size: 4]
	int ReloadAnimSlot;//[Offset: 0x854, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0x85c, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0x864, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x868, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0x86c, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0x878, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0x884, Size: 12]
	int RearSightRotIndex;//[Offset: 0x890, Size: 4]
	byte[] CoronaEffectCfg;//[Offset: 0x894, Size: 12]
	ItemDefineID GetBulletType();// 0x1fa40d0

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2dc, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x2e4, Size: 4]
	float LaunchGravityScale;//[Offset: 0x2e8, Size: 4]
	int PunctureTimes;//[Offset: 0x2ec, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x2f0, Size: 4]
	class DamageType* DamageType;//[Offset: 0x2f4, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x2f8, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x300, Size: 4]
	Vector RootScale;//[Offset: 0x304, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	Vector ShootDir;//[Offset: 0x314, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x410, Size: 4]
	delegate OnResetBullet;//[Offset: 0x414, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x420, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x42c, Size: 12]
	delegate OnRecycleBullet;//[Offset: 0x438, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x444, Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x448, Size: 4]
	float WeaponFloorHeight;//[Offset: 0x4f4, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x4f8, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x504, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x508, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	int MaxTraceTimes;//[Offset: 0x510, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x29fa2f4
	void ReloadNoEncodeAttr();// 0x1e2d7d0
	void OnRecycleBulletDelegate__DelegateSignature();// 0x29fa2f4
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x1e2ea4c
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x29fa2f4
	void OnImpact(out const HitResult _ImpactResult);// 0x1e2e9a8
	bool NeedCheckBulletFlySound();// 0x20b3ec4
	void LaunchBulletDelegate__DelegateSignature();// 0x29fa2f4
	float GetMaxBulletFlySpeed();// 0x1f9c4a0
	Controller* GetInstigatorControllerSafe();// 0x20b3e9c
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x20b3e74
	bool ClientVerifyBlock(out Vector MuzzlePos, out Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x20b3d04

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x15c, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x1e497f8
	void ResetTickDelay();// 0x1e497dc
	void IgnoreBounceReflectOnce();// 0x1e497c0
	void ForceStop();// 0x1e497ac

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4, Size: 4]
	float MaxSpeed;//[Offset: 0xf8, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc, Size: 1]
	float PreviousHitTime;//[Offset: 0x100, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110, Size: 4]
	float Buoyancy;//[Offset: 0x114, Size: 4]
	float Bounciness;//[Offset: 0x118, Size: 4]
	float Friction;//[Offset: 0x11c, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x150, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x423b744
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x423b6cc
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x29fa2f4
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x29fa2f4
	Vector LimitVelocity(Vector NewVelocity);// 0x423b638

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x2cc, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x308, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x30c, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x310, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x314, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x318, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x31c, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x320, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x324, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x328, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x32c, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x330, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x334, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x338, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x33c, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x340, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x344, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x348, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x358, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x35c, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x360, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x364, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x368, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x370, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x374, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x378, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x37c, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x380, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x384, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x388, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x38c, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x390, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x394, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x398, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x39c, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3a0, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3a4, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3a8, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3ac, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x3b0, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x3b4, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x3b8, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x3bc, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* WindBreakSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x3dc, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x3e0, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x3fc, Size: 28]
	DecalData DirtDecal;//[Offset: 0x418, Size: 28]
	DecalData WaterDecal;//[Offset: 0x434, Size: 28]
	DecalData MetalDecal;//[Offset: 0x450, Size: 28]
	DecalData WoodDecal;//[Offset: 0x46c, Size: 28]
	DecalData GrassDecal;//[Offset: 0x488, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4a4, Size: 28]
	DecalData FleshDecal;//[Offset: 0x4c0, Size: 28]
	DecalData SteelDecal;//[Offset: 0x4dc, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x4f8, Size: 28]
	DecalData SandDecal;//[Offset: 0x514, Size: 28]
	DecalData ClothDecal;//[Offset: 0x530, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x54c, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x568, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x584, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5a0, Size: 28]
	DecalData StoneDecal;//[Offset: 0x5bc, Size: 28]
	DecalData SnowDecal;//[Offset: 0x5d8, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x5f4, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x610, Size: 28]
	DecalData LeafDecal;//[Offset: 0x62c, Size: 28]
	DecalData CarDecal;//[Offset: 0x648, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x664, Size: 28]
	DecalData IceDecal;//[Offset: 0x680, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x6a0, Size: 240]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x792, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x794, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x798, Size: 4]
	SceneComponent* TargetImpactComp;//[Offset: 0x7c0, Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x800, Size: 4]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0x804, Size: 60]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 1]
	void TimerHideDecal();// 0x1feb454
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x1feb260
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x1feb160
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x1feafc4

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector VictimLocation;//[Offset: 0x24, Size: 12]
	Vector BulletPos;//[Offset: 0x30, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte HitBodyType;//[Offset: 0x78, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	Transform BoneTrans;//[Offset: 0xb0, Size: 48]
	byte ImpactEffectMask;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x260, Size: 4]
	int SortOrder;//[Offset: 0x264, Size: 4]
	float FadeScreenSize;//[Offset: 0x268, Size: 4]
	float FadeStartDelay;//[Offset: 0x26c, Size: 4]
	float FadeDuration;//[Offset: 0x270, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	Vector DecalSize;//[Offset: 0x278, Size: 12]
	void SetSortOrder(int Value);// 0x414bcc0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x414bc48
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x414bb40
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x414bac8
	float GetFadeStartDelay();// 0x414baa0
	float GetFadeDuration();// 0x414ba78
	MaterialInterface* GetDecalMaterial();// 0x414ba50
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x414ba20

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x30, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 72]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x48, Size: 72]
	float followTimeMax;//[Offset: 0x90, Size: 4]
	float MaxAngle;//[Offset: 0x94, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float RangeRate;//[Offset: 0x4, Size: 4]
	float SpeedRate;//[Offset: 0x8, Size: 4]
	float RangeRateSight;//[Offset: 0xc, Size: 4]
	float SpeedRateSight;//[Offset: 0x10, Size: 4]
	float CrouchRate;//[Offset: 0x14, Size: 4]
	float ProneRate;//[Offset: 0x18, Size: 4]
	float DyingRate;//[Offset: 0x1c, Size: 4]
	float DriveVehicleRate;//[Offset: 0x20, Size: 4]
	float InVehicleRate;//[Offset: 0x24, Size: 4]
	float FreeFallRate;//[Offset: 0x28, Size: 4]
	float OpeningRate;//[Offset: 0x2c, Size: 4]
	float LandingRate;//[Offset: 0x30, Size: 4]
	float adsorbMaxRange;//[Offset: 0x34, Size: 4]
	float adsorbMinRange;//[Offset: 0x38, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x4, Size: 152]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xcc, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xd4, Size: 4]
	int UseTss;//[Offset: 0x138, Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x144, Size: 100]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1a8, Size: 68]
	void OnWeaponStopFire();// 0x1e49fa8
	void OnWeaponStartFire();// 0x1e49f94
	void OnWeaponShoot();// 0x1e49f80
	void GetDataFromWeaponEntity();// 0x1e49f6c
	Vector GetCurRecoilInfo();// 0x1e49f24
	float GetCurDeviation();// 0x1e49efc
	void CheckComponentTick();// 0x1e49ee8

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x1ef6754
	void SetHidden(bool bIsHidden);// 0x1ef66cc
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x1ef645c
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x1ef62c8
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x1ef6174
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x1ef6068
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x1ef5bdc
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x1ef5470
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x1ef5044
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x1ef4f88
	void Draw(float DeltaTime);// 0x1e4ba80
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x1ef4eec

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x370, Size: 1]
	Vector MarkerPosition;//[Offset: 0x374, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x384, Size: 116]
	Texture2D* HUDMainTexture;//[Offset: 0x3f8, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x3fc, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x400, Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x408, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x414, Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x42c, Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x430, Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x494, Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x4a8, Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x4bc, Size: 20]
	CanvasIcon Marker;//[Offset: 0x4e4, Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x4f8, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x4fc, Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x510, Size: 4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x20e375c
	void OnAsyncLoadingFinished();// 0x20e3748
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x20e367c
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x20e35e8
	LinearColor GetColorByTeamID(int TeamID);// 0x20e3554
	void EnableCrosshair(bool bEnable);// 0x20e34d8
	void DrawScreenString(FText Text, float X, float Y);// 0x20e31a8
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x20e2fcc

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float AddSpreadScale;//[Offset: 0x14, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x18, Size: 4]
	float DefaultOffset;//[Offset: 0x1c, Size: 4]
	float DefaultAlpha;//[Offset: 0x20, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x24, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x2c, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x3c, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x4c, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x5c, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x64, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x68, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0xcc, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xd8, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x134, Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	void HandleOnWeaponStopFire();// 0x1e487c8
	void HandleOnWeaponStartFire();// 0x1e487b4
	bool CheckCloseDSTick();// 0x1e4878c
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x1e485f4

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xd0, Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xd8, Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	float DrawShootLineTime;//[Offset: 0xe4, Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0xec, Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0xf0, Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0xf4, Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0xf8, Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0xfc, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x100, Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x108, Size: 4]
	delegate OnShoot;//[Offset: 0x10c, Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x118, Size: 4]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x40c, Size: 12]
	void VehicleShoot();// 0x20b4ce0
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x20b4b68
	void ShootDelegate__DelegateSignature();// 0x29fa2f4
	void ReInitWeaponOwnerData();// 0x20b4b54
	void OnWeaponClipMaxBulletChanged();// 0x20b4b40
	void OnWeaponBulletChanged();// 0x20b4b2c
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x29fa2f4
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x29fa2f4
	void LocalShowDamageFloatingText(Actor* AttackWeaponOwner, Actor* VictimeActor, float Damage, byte HitBodyType, Vector ImpactPoint);// 0x20b4998
	float GetDamageAfterModify(float Damage, out const DamageEvent DamageEvent, Actor* AttackActor, Actor* VictimActor);// 0x20b4824
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x20b474c
	bool CheckShootState();// 0x1f4590c
	Vector CalcShootTargetLocByStartAndRot(Vector Start, Rotator ShootRot, out HitResult OutHitResult);// 0x20b4604

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0xcc, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0xd0, Size: 12]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0xe0, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xf8, Size: 4]
	void SetFirstAddBullet(int BulletID);// 0x1f352d4
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x1f3512c
	void SetBulletAttr(int ReloadBulletID);// 0x1f350b4
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x1f34f54
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x1f34e44
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x1f34ce0
	bool HasMultiBullet();// 0x1f34cb8
	int GetShootBulletType();// 0x1f34c90
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x1f34c10
	int GetNextBulletID();// 0x1f34be8
	BackpackComponent* GetBackpackComponent();// 0x1f34bc0
	float GetAdjustBulletMomentum();// 0x1f34b98
	float GetAdjustBulletDamage();// 0x1f34b70
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x1f34a14
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x1f347e0

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x104, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x110, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x11c, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x128, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x134, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x140, Size: 12]
	delegate AssociationOperationDelegate;//[Offset: 0x14c, Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x158, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x164, Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x170, Size: 12]
	delegate ItemHandleAddDelegate;//[Offset: 0x17c, Size: 12]
	delegate ItemUpdatedDelegate;//[Offset: 0x188, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x194, Size: 12]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x1a0, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x1ac, Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x1c4, Size: 24]
	BattleItemData[] CachItemList;//[Offset: 0x1dc, Size: 12]
	IncNetArray ItemListNetCache;//[Offset: 0x1e8, Size: 24]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x208, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x214, Size: 60]
	int CapacityThreshold;//[Offset: 0x250, Size: 4]
	float Capacity;//[Offset: 0x254, Size: 4]
	float OccupiedCapacity;//[Offset: 0x258, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x25c, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x260, Size: 4]
	int virtualitemid;//[Offset: 0x274, Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x27c, Size: 12]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x288, Size: 12]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x2a0, Size: 12]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x2b0, Size: 12]
	FString LuaFilePath;//[Offset: 0x2bc, Size: 12]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x25cf17c
	float UpdateCapacity();// 0x1e588ec
	void UnequipItem(ItemDefineID DefineID);// 0x25cf0f4
	void TryMergeItemHandles(ItemDefineID DefineID, enum InItemStoreArea);// 0x25cf028
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x25cef04
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x25cee18
	void ServerSetShowBounty(bool bInShowBounty);// 0x25ced50
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x25cec20
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x25ceafc
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x25cea64
	void ReceiveItemList();// 0x25cea48
	void ReceiveCapacity();// 0x1efd8a0
	bool PickupItemFromWrapperDetail(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x25ce700
	bool PickUpItem_Default(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x25ce400
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x25ce0b8
	void PickupBattleItemOnPlane();// 0x25ce0a4
	bool PickItem_IntoSafetyBox(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x25cdda4
	bool PickItem_IntoBackpack(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x25cdaa4
	void OnRep_specialCountLimit();// 0x25cda90
	void OnRep_ItemListNet();// 0x25cda7c
	void OnRep_ItemList();// 0x25cda68
	void OnRep_Capacity();// 0x25cda54
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x25cd9c4
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x25cd934
	void NotifyItemListUpdated();// 0x1e2bb0c
	void NotifyCapacityUpdated();// 0x25cd918
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x25cd880
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x25cd7bc
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x25cd700
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x25cd64c
	void ModifyAimNotAutoUse(bool bAdd);// 0x25cd584
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x25cd3c0
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x25cd340
	bool IsItemExist(out const ItemDefineID DefineID);// 0x25cd2a0
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x25cd270
	bool IsAutoUse(int ItemID);// 0x29fa2f4
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x25cd1ac
	bool HasTagSub(int ItemID, out const FName TagName);// 0x29fa2f4
	bool HasItemBySubType(int SubType);// 0x25cd12c
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x25cd09c
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x25ccfd8
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x25cce70
	World* GetWorld_BP();// 0x25cce48
	int GetUnEquipItemNumByItemId(int ItemID);// 0x25ccdc8
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x25ccd28
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x25ccc98
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x25ccac4
	int GetItemSubType(int ItemID);// 0x29fa2f4
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x25cc954
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x25cc91c
	ItemHandleBase*[] GetItemHandleList();// 0x25cc8ac
	int GetItemCountByType(int InItemType);// 0x25cc82c
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x25cc7ac
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x25cc6f0
	float GetItemAssociateWeights(BattleItemData InItemData);// 0x25cc62c
	BattleItemData GetFirstItemBySubType(int SubType);// 0x25cc580
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x25cc4c4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x25cc410
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x25cc2b8
	enum GetAIPickupType(int ItemID);// 0x25cc230
	void ForceNetUpdate();// 0x1f59cc4
	void EquipItem(ItemDefineID DefineID);// 0x25cc1a8
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x25cc088
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x25cbfac
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x25cbf14
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x25cbe7c
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x25cbda8
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x25cbd28
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x25cbc8c
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x25cbbf0
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x25cbad8
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x25cb9c0
	int CheckSpecialMaxCountForItem(ItemDefineID DefineID, int Count);// 0x25cb8ec
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x25cb80c
	int CheckCapacityForItem(ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x25cb6f4
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x25cb5d4
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x25cb53c
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x25cb460
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int Count);// 0x25cb350
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x25cb2b4
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x25cb1a4
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x25cb094
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x25cafb8
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x25cad18

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo pickupInfo;//[Offset: 0x18, Size: 72]
	enum Reason;//[Offset: 0x60, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x61, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 64]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c, Size: 12]
	int Durability;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0xcc, Size: 4]
	float BulletSpeed;//[Offset: 0xd0, Size: 4]
	int CurBulletNum;//[Offset: 0xd4, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0xdc, Size: 4]
	ItemDefineID BulletType;//[Offset: 0xe0, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0xfc, Size: 12]
	class CameraShake* ShootCameraShake;//[Offset: 0x108, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x10c, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x110, Size: 4]
	float CameraShakFalloff;//[Offset: 0x114, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x118, Size: 4]
	float ReloadTime;//[Offset: 0x11c, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x120, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x124, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x128, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x12c, Size: 4]
	BackpackComponent* OwnerBackPack;//[Offset: 0x130, Size: 4]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x1ee79ac
	void SetUseGreanadeLaunch(bool bIsUse);// 0x1ee792c
	void RemoveBullet(int RemoveNum);// 0x1ee78b4
	int ReloadGrenadeLaunch();// 0x1ee788c
	void OnRep_UseGrenadeLaunchState();// 0x1ee7878
	void OnRep_CurBulletNum();// 0x1ee7864
	void OnRep_CanUseGrenadeLaunch();// 0x1ee7850
	void LaunchGrenadeBullet(Transform Trans, uint32 ShootID, int Pellet);// 0x1ee76e0
	bool JudgeMustReload();// 0x1ee76ac
	bool IsUseGreanadeLaunch();// 0x1eb6f74
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x1ee762c
	BackpackComponent* GetBackpackComp();// 0x1ee7604
	void DoGrenadeLaunchStartReload();// 0x1ee75f0
	bool CheckCanReload();// 0x1ee75c8

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0xcc, Size: 4]
	float DownGasSpeed;//[Offset: 0xd0, Size: 4]
	float CostGasOneShoot;//[Offset: 0xd4, Size: 4]
	float MaxGas;//[Offset: 0xd8, Size: 4]
	float GasAddDamageRate;//[Offset: 0xdc, Size: 4]
	float MaxGasAngle;//[Offset: 0xe0, Size: 4]
	float PostFillGasTime;//[Offset: 0xe4, Size: 4]
	float GasUpdateInterval;//[Offset: 0xe8, Size: 4]
	int CurGas;//[Offset: 0xec, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xf0, Size: 4]
	void OnRep_CurGas();// 0x1dd8bcc
	void CostGassByShoot();// 0x1eb7d30
	void CheckNeedRep();// 0x1eb7d1c
	void AddFillGass(float AddFillGasTime);// 0x1eb7ca4

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x43c, Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x440, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x46c, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	float CurShootLockInterval;//[Offset: 0x480, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x1f4593c
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x29fa2f4
	bool CheckShootState();// 0x1f4590c

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x430, Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x114, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x118, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x11c, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x120, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x124, Size: 4]
	float CameraShakFalloff;//[Offset: 0x128, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x130, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x134, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x140, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x144, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x150, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x154, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x160, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x170, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x174, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x180, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x184, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x190, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x194, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x1a0, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1b0, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x1b4, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1c0, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x1c4, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1d0, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x1d4, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x1e0, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x1f0, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x1f4, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x200, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x204, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x210, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x214, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x224, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x228, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x234, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x238, Size: 12]
	float ShootLightCD;//[Offset: 0x244, Size: 4]
	float LastShootLightTime;//[Offset: 0x248, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x24c, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x250, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x254, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x258, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x25c, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x260, Size: 4]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x264, Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x270, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x27c, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x290, Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x2a0, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x2b0, Size: 8]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	void ReloadAttr(int WeaponId);// 0x1fa39fc
	void OnWeaponUnEquiped();// 0x1fa39e8
	void OnWeaponEuiped();// 0x1fa39d4
	void HandleWeaponAction(byte Action);// 0x1fa3954
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x1fa392c
	OBEffectBullet* GetOBEffectBullet();// 0x1fa3904
	int GetAvailableOBEffectBulletNum();// 0x1fa38dc
	void CheckOptimizeMuzzleFX();// 0x1efd8a0
	void ChangeShellDropFx();// 0x1fa38c8
	void ActiveShootLight();// 0x1fa38b4
	void ActiveLocalShellDropFX();// 0x1fa38a0

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0xcc, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x108, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x10c, Size: 4]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x110, Size: 4]
	void HandleWeaponAction(byte Action);// 0x1fa3954

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2cc, Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2d0, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2e0, Size: 4]
	float CurMovingTime;//[Offset: 0x30c, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x310, Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	delegate OnAttrModified;//[Offset: 0xc4, Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0xd0, Size: 4]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0xd4, Size: 12]
	RepAttributeModify DynamicModifierRep;//[Offset: 0xe0, Size: 16]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0xf0, Size: 12]
	AttributeExpand[] AttributeExpands;//[Offset: 0x250, Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x25c, Size: 124]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x2d8, Size: 60]
	enum ActorAttrType;//[Offset: 0x314, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x3dc, Size: 12]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x221cd74
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x221cc74
	void SetAttrModifyStateValue(int Index, bool Value);// 0x221cbb0
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x221cab0
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x221c974
	void RequestAttrValue(FString AttrName);// 0x221c880
	void RemoveDynamicModifyItemForLua(uint32 ModifyUID);// 0x221c808
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x221c67c
	void OnRep_ModSimulateSyncList();// 0x221c668
	void OnRep_DynamicModifierList();// 0x221c654
	void OnRep_DynamicModifier();// 0x221c640
	void OnRep_AttrModifyStateList();// 0x221c62c
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x29fa2f4
	bool IsAttrModifyStateValidIndex(int Index);// 0x221c5ac
	bool HasDynamicModifier(FString AttrModifyId);// 0x221c4e8
	bool GetAttrModifyStateValue(int Index);// 0x221c468
	int GetAttrModifyStateNum();// 0x1fe63fc
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x221c18c
	float GetAttributeValue(FString AttrName);// 0x221c0c4
	float GetAttributeOrignalValue(FString AttrName);// 0x221bffc
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x221bf7c
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x221be1c
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x221bd9c
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x221bc3c
	void AddValueToAttribute(FString AttrName, float Value);// 0x221bb3c
	uint32 AddDynamicModifyItemForLua(FString AttrName, byte ModifyType, float Value, bool bEnable, Object* Causer);// 0x221b958
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x221b800

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc, Size: 12]
	FString AttrName;//[Offset: 0x18, Size: 12]
	int AttrId;//[Offset: 0x24, Size: 4]
	int CompareId;//[Offset: 0x28, Size: 4]
	enum ModifierOp;//[Offset: 0x2c, Size: 1]
	float ModifierValue;//[Offset: 0x30, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 12]
	FString AttrDesc;//[Offset: 0xc, Size: 12]
	int RelateTypeId;//[Offset: 0x18, Size: 4]
	FString RelateGroup;//[Offset: 0x1c, Size: 12]
	float Value;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c, Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x4, Size: 12]
	FString LimitAttrName;//[Offset: 0x10, Size: 12]
	FString MaxAttrName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 12]
	enum AttrVariableType;//[Offset: 0xc, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xcc, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0xfc, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x104, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x10c, Size: 4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float MaxParachuteHeightDist;//[Offset: 0x114, Size: 4]
	float MaxParachutePlaneDist;//[Offset: 0x118, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x15c, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x160, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x164, Size: 4]
	float ShootTimeGunPosMaxZDif;//[Offset: 0x168, Size: 4]
	float ShootTimeGunPosMaxForwadDif;//[Offset: 0x16c, Size: 4]
	float ShootTimeGunPosMaxForwadDifInVehicle;//[Offset: 0x170, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x174, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x178, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x17c, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x180, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x184, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x18c, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x190, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x194, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x19c, Size: 4]
	float TolerateFlyTime;//[Offset: 0x1a0, Size: 4]
	float TolerateFlyDis;//[Offset: 0x1a4, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x216eb08

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xa5, Size: 1]
	float DamageImpulse;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 136]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int SyncTicket;//[Offset: 0x50, Size: 4]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x218076c
	static int[] GetWeaponSkillIDList(STExtraWeapon* Weapon);// 0x2180d8c

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x218076c
	void ProcessTriggerEvent(enum Event);// 0x1fa3954

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xcc, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0xd0, Size: 4]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0xd4, Size: 60]
	WeaponStateBase* GetCurrentState();// 0x1de83a8
	byte GetCurrentFreshWeaponStateType();// 0x21802e4

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0xcc, Size: 12]
	delegate OnEndState;//[Offset: 0xd8, Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0xe5, Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x334, Size: 12]
	void PreChangeGrenadeAvatar(int InItemID);// 0x1ee7164
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x1ee70dc
	FString GetItemAvatarHandlePath(int ItemID);// 0x29fa2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x29fa2f4
	int GetDefaultAvatarID(int InAvatarID);// 0x29fa2f4
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x1ee6fa0

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x1ac, Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x1c0, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x1dc, Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x1e0, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x298, Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x29c, Size: 4]
	int itemType;//[Offset: 0x2a0, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x2a8, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x2d0, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x2f8, Size: 60]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x29fa2f4
	void SyncChangeItemAvatar(int InItemID);// 0x1f00ac8
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x1f009c0
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x1f008b8
	void ResetItemAvatar();// 0x1f008a4
	void RequestDownloadItemInBattle(int InItemID);// 0x1de2750
	void PreChangeItemAvatar(int InItemID);// 0x1f00824
	void OnRep_ItemAvatarChanged();// 0x1f00810
	bool IsValidAvatar();// 0x1f007e8
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x1f007b8
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x1f006dc
	MeshComponent* GetItemBodyMesh();// 0x1f006c0
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x1e2d68c
	void DownloadItemInBattleCallBack(uint32 ItemID, uint32 ErrorCode);// 0x1de2454
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x1f00584
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x1f004b8
	void AsyncChangeItemAvatar(int InItemID);// 0x1f00438
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x1f00328
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x1f00228
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x1ee6fa0

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0xa0, Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xb0, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0xd8, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x100, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1dfb724
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1dfb300
	bool HandleDrop(int InCount, enum Reason);// 0x1dfad1c
	bool HandleDisuse(enum Reason);// 0x1dec17c
	BackpackComponent* GetBackpackComponent();// 0x1dfdcb0
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1dfdbec

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x670, Size: 60]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x6ac, Size: 60]
	int gender;//[Offset: 0x6e8, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x6ec, Size: 12]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x6f8, Size: 120]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0x770, Size: 60]
	int HeadAvatarID;//[Offset: 0x7c0, Size: 4]
	int PreHeadAvatarID;//[Offset: 0x7c4, Size: 4]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x7dc, Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x818, Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x824, Size: 60]
	int[] ignoreSlots;//[Offset: 0x860, Size: 12]
	int WholeBodyModelID;//[Offset: 0x86c, Size: 4]
	int CurrentClothID;//[Offset: 0x870, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0x874, Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x884, Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x8c0, Size: 60]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0x8fc, Size: 60]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0x938, Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0x974, Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0x9b0, Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0x9bc, Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0x9c8, Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0xa04, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xa08, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xa0c, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xa10, Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xa1c, Size: 12]
	int EnableEquipAvatarPendant;//[Offset: 0xa28, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2d, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xa30, Size: 60]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xa70, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xaa8, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xad4, Size: 4]
	int TypeToInt(enum InSlotType);// 0x1e5235c
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x1e522dc
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1e521a0
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x1e520cc
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1e51ff8
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x1e51ed8
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x1e51d60
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1e51c3c
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x1e51bc4
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x1e51ab0
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x1e51974
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x1e51860
	void SetAvatarGender(int AGender);// 0x1e50100
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x1e517a4
	void SetAllMeshCharMode(bool bMainChar);// 0x1e51724
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x1e51668
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x1e515e8
	void ResetAllAnimDynamics();// 0x1e515cc
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1e51500
	void RemoveClothParticleEffect(int SlotID);// 0x1e51488
	void RemoveAttachMesh(int SlotID);// 0x1e51410
	void ProcessClothSuits();// 0x1e513f4
	void ProcessAvatarRectify();// 0x1e513d8
	void PreProcessBeforeLoadMesh();// 0x1e513bc
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x29fa2f4
	void PostProcessAfterLoadMesh();// 0x1e513a0
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x1e512d4
	void OnRep_BodySlotStateChangedInternal();// 0x1e512c0
	void OnRep_BodySlotStateChanged();// 0x1e512a4
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1e511d0
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x1e510fc
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1e50fdc
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x29fa2f4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1e50eb0
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x1e50dd4
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x1e50c9c
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemID);// 0x1e50b90
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x29fa2f4
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemID);// 0x29fa2f4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1e50b10
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x1e509f8
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles);// 0x1e508e0
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x1e507b8
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x1e50690
	bool IsTeammate();// 0x1de264c
	bool IsSelf();// 0x1de25f4
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1e50594
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1e50498
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x1e50418
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1e5034c
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1e5021c
	enum IntToType(int InSlotID);// 0x1e501a8
	void InitMasterComponent();// 0x1e50194
	void Initialize();// 0x1e50178
	void InitialAvatarParam(int AGender);// 0x1e50100
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x1e50088
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x1e4ff88
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1e4fea4
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x29fa2f4
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x1e4fe0c
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x1e4fd30
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x1e4fcb8
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x1e4fc40
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x1e4fb64
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x1e4fa88
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x1e4f9d4
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1e4f8c4
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x1e4f810
	enum GetPendantSlotType();// 0x1e4f7e0
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x1e4f758
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x1e4f694
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x1e4f5e0
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x1e4f560
	int GetEquipmentSkinItemID(int InItemID);// 0x1e4f4d8
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x1e4f3e0
	int[] GetDefaultBodyItemIDList();// 0x1e4f320
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x1e4f24c
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x1e4f178
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x1e4f070
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x29fa2f4
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x1e4ef68
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x1e4eea4
	enum GetAttachPartSlotType();// 0x1e4ee74
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x1e4edec
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x1e4ec68
	void GetAllEquipItems(out int[] EquipItems);// 0x1e4eb9c
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x29fa2f4
	bool EnableEquipAvatarPendantFeature();// 0x1e4eb74
	bool DeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x1e4eaa0
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x29fa2f4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x29fa2f4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x1e4e9bc
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x1e4e924
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x1e4e89c
	bool CheckIsHiddenByOther(int InItemResID);// 0x1e4e81c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1e4e748
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1e4e68c
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1e4e5d0
	void ApplyMeshCompCollision(int SlotID);// 0x1e4e558
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x1e4e48c
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x1e4e3d0
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x1e4e288
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x1e4e1cc
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x1e4e100
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x1e4e080

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x3b4, Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x3f0, Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x42c, Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x468, Size: 60]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x4a4, Size: 12]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x4b0, Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x4bc, Size: 12]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x4c8, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x4d8, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x57c, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x580, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x59c, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x5a8, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x5e4, Size: 4]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1e521a0
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x1e520cc
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x1e51ff8
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1e51c3c
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x1fb69cc
	void ResetSlotSyncData();// 0x1fb69b0
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x1fb687c
	void RequestSyncLoadMeshes();// 0x1fb6868
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x1de267c
	void RequestAsyncLoadMeshes();// 0x1fb6854
	void RequestAsyncLoadHandles();// 0x1fb6840
	void RemoveEquippedAvatar(int InSlotID);// 0x1fb67c0
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x1fb6738
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x1fb6628
	void ReloadAllLogicAvatar(enum ReloadType);// 0x1fb65a8
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x1fb6528
	bool PutOnEquipmentByResID(int resID);// 0x1fb64a0
	bool PutOffEquimentByResID(int resID);// 0x1fb6418
	void PreProcessBeforeLoadMesh();// 0x1e513bc
	void PostProcessAfterLoadMesh();// 0x1e513a0
	void OnSyncLoadMeshesDone();// 0x1fb6404
	void OnRep_BodySlotStateChanged();// 0x1e512a4
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x1e510fc
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x29fa2f4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x1e50eb0
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemID);// 0x29fa2f4
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x29fa2f4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x29fa2f4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x1e50b10
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x1fb6330
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x1fb625c
	void OnAllAvatarHandleLoadedDoneSync();// 0x1fb6248
	void OnAllAvatarHandleLoadedDone();// 0x1fb6234
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x1e507b8
	bool IsValidStateToRequestDownload();// 0x1fb620c
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x1fb6140
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x1e5034c
	bool IsItemHasEquipped(int InItemID);// 0x1fb2e28
	bool IsEnableItemDownload(int ItemID);// 0x29fa2f4
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x1fb2cf0
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1e6f7b8
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x1fb60b8
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x1fb5ff4
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1e4f8c4
	enum GetMeshTypeBySlot(int InSlotID);// 0x1fb5f74
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x1fb5ef4
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x1e4f758
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x1fb5e84
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x1fb5d74
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x1fb5c64
	AvatarEntityFactory* GetEntityFactory();// 0x1fb5c34
	SoftObjectPath GetBatchDefaultBodyPath();// 0x29fa2f4
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x1fb5b50
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x1fb5a48
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x1e4edec
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x1fb5938
	int GetAdvanceVehicleInsideSlotID();// 0x1fb5908
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x29fa2f4
	bool DeleteAvatarMeshData(int InSlotID, bool DestroyComp);// 0x1e4eaa0
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x1e4e9bc
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x1fb5844
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x1fb565c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x1e4e748
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x1fb54f0
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1fb53e0
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x29fa2f4
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x1de21dc

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x1ac, Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x1e8, Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x224, Size: 24]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x23c, Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x248, Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x254, Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x260, Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x26c, Size: 12]
	int itemType;//[Offset: 0x278, Size: 4]
	enum CustomType;//[Offset: 0x27c, Size: 1]
	<int,AvatarSlotDesc> ForceEquipItemLogic;//[Offset: 0x280, Size: 60]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c7, Size: 1]
	int SubSlotStartNum;//[Offset: 0x2c8, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x2cc, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x2d0, Size: 60]
	int[] AlawysHideResetOperation;//[Offset: 0x390, Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x3a0, Size: 12]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x1fb3a24
	void RemoveForceEquipItem(int SlotID);// 0x1fb39ac
	void RemoveAllEquippedItem();// 0x1fb3998
	void OnRep_BodySlotStateChanged();// 0x1e512a4
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x1e511d0
	void OnHandleUnequipSlot(int InSlotID);// 0x1fb3920
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x1fb3878
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x1fb37d0
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x1e50fdc
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x29fa2f4
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x1e50dd4
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x1e50c9c
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x29fa2f4
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x29fa2f4
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x29fa2f4
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x1fb36c0
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x1fb35b0
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x1fb34e4
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x1fb33d4
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x1fb32c4
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x1fb3200
	int MakeStateInfo(out const int[] InSlotDesc);// 0x1fb312c
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x1fb3060
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x1e50594
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x1fb2f7c
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x1e5021c
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x1fb2ea8
	bool IsEquippedItemID(int InItemID);// 0x1fb2e28
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x1fb2d90
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x1fb2cf0
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x1fb2c58
	bool HandleUnequipSlot(int InSlotID);// 0x1fb2bd8
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x1fb2b40
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x1fb2960
	void HandleItemResetOrderDesc();// 0x1fb294c
	void HandleItemResetOperation();// 0x1fb2938
	void HandleItemReplaceRelation();// 0x1fb2924
	void HandleItemHideRelation();// 0x1fb2910
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x1fb2814
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1fb266c
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1fb24c4
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x1fb23e8
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x1fb22d0
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1fb2128
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x1fb1f80
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x1fb1ea4
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x1fb1db0
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x1fb1d18
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x1fb1c78
	enum GetForceHideState(int InSlotID);// 0x1fb1bf0
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x1fb1ac0
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x1fb1a2c
	int GetAvatarSlotID(int InSubSlotID);// 0x1fb19ac
	void ClientPostProcessViewDataMiddle();// 0x1fb1990
	void ClientPostProcessViewDataBefore();// 0x1fb1974
	void ClientPostProcessViewDataAfter();// 0x1fb1958
	void ClientBuildAvatarRelationData();// 0x1fb1944
	void ClientBodySlotStateChanged();// 0x1fb1930
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x1fb17e8
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x1fb1608
	bool BPClientPostProcessViewDataMiddle();// 0x1f9edf8
	bool BPClientPostProcessViewDataBefore();// 0x1fb15d8
	bool BPClientPostProcessViewDataAfter();// 0x1db69cc
	void AddForceEquipItem(int SlotID, int ItemID);// 0x1fb151c

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 12]
	int gender;//[Offset: 0xc, Size: 4]
	int BaseID;//[Offset: 0x10, Size: 4]
	int UpdateFlag;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemID;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 12]
	int[] ReplaceFlags;//[Offset: 0x14, Size: 12]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x20, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x2c, Size: 12]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x38, Size: 12]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x44, Size: 12]
	int[] ConflictConfig;//[Offset: 0x50, Size: 12]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x5c, Size: 12]
	int HideBoneSlotID;//[Offset: 0x68, Size: 4]
	int HideBoneType;//[Offset: 0x6c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x70, Size: 12]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc, Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 12]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0xc, Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0xc, Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30, Size: 12]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x1e670d8
	void AsyncLoadCustomAssetDone();// 0x1e670c4
	bool ApplyCustomInfo();// 0x1e65bd4

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28, Size: 8]
	void SetCustomID(int InCustomID);// 0x1e66d4c
	MeshComponent* GetOwnerMeshComp();// 0x1e66d24
	ActorComponent* GetOwnerComp();// 0x1e66cfc
	bool ClearCustomInfo();// 0x1e65c18
	bool ApplyCustomInfo();// 0x1e65bd4

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14, Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 60]
	<enum,FString> FemaleSlotName;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24, Size: 12]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x1dfcd20
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1dfcc64

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x1dfc650
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x1dfc548
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x1dfc434
	CharacterAvatarComponent2* GetOwnerComponent();// 0x1dfc40c

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4, Size: 12]
	float GrayScale;//[Offset: 0x10, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24, Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x1dfd584
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x1dfd4c8
	bool IsPatternNumMode();// 0x1dfd4a0
	void InitPatternNumID(int InNumID);// 0x1dfd42c
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x29fa2f4

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x6c, Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]

--------------------------------
Class: AssetPackage

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemID;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x9f, Size: 1]
	enum SubSlot;//[Offset: 0xa0, Size: 1]
	enum specialType;//[Offset: 0xa1, Size: 1]
	enum ForceMeshType;//[Offset: 0xa2, Size: 1]
	enum ForceLODMeshType;//[Offset: 0xa3, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0xa4, Size: 60]
	MeshPackage MeshPack;//[Offset: 0xe0, Size: 568]
	MeshPackage replacedMeshPack;//[Offset: 0x318, Size: 568]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x550, Size: 12]
	enum[] hiddenFlags;//[Offset: 0x55c, Size: 12]
	enum[] subHiddenFlags;//[Offset: 0x568, Size: 12]
	enum[] ReplaceFlags;//[Offset: 0x574, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x580, Size: 12]
	AvatarPostOperation[] postOperation;//[Offset: 0x58c, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x598, Size: 4]
	int ItemCapacity;//[Offset: 0x59c, Size: 4]
	int Durability;//[Offset: 0x5a0, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x5ac, Size: 36]
	enum hideBoneSlot;//[Offset: 0x5d0, Size: 1]
	FName hideBoneName;//[Offset: 0x5d8, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x5e0, Size: 12]
	enum HideBoneType;//[Offset: 0x5ec, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x5f0, Size: 60]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x62c, Size: 12]
	int PendantConfigIndex;//[Offset: 0x638, Size: 4]
	float PendantScale;//[Offset: 0x63c, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x640, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x644, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x650, Size: 1]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x658, Size: 72]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x6a0, Size: 12]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x6ac, Size: 12]
	void SetItemDurability(int InDurability);// 0x1dfba68
	void SetItemCapacity(int InCapacity);// 0x1dfb9f0
	void PreLocalHandleDisuse();// 0x1dfb9dc
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x1dfb850
	bool HasCustomInfo();// 0x1dfb828
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1dfb724
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x1dfb60c
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1dfb300
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x1dfb1bc
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x1dfb0bc
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x1dfaf44
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x1dfae78
	bool HandleEnable(bool bEnable);// 0x1dfade8
	bool HandleDrop(int InCount, enum Reason);// 0x1dfad1c
	bool HandleDisuse(enum Reason);// 0x1dec17c
	BackpackComponent* GetBackpackComponent();// 0x1dfacf4
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x1dfab9c
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x1dfab14
	void AutoEquipChips();// 0x1de8d70

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1b0, Size: 4]
	class AnimInstance* animBP;//[Offset: 0x1b4, Size: 4]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1b8, Size: 40]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	enum EffectCreateType;//[Offset: 0x1e1, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1e4, Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x1f0, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x200, Size: 40]

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x174, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x10c, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x148, Size: 12]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	FName SlotName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98, Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	FName SocketName;//[Offset: 0x100, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x108, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x148, Size: 60]
	void UpdateVisibility();// 0x1dec52c
	void UnRegisterTick();// 0x1dec510
	void TickEntity();// 0x1de8a38
	void SetSocketName();// 0x1de8248
	void SetParentDefineID(ItemDefineID ParentID);// 0x1dec484
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x1dec3ac
	void RevertEntityMeshData();// 0x1dec398
	void RenderEntity(out SoftObjectPath SoftPath);// 0x1dec2bc
	void RegisterTick();// 0x1dec2a0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x1deb314
	void PutOnDefaultEquipment(enum SlotType);// 0x1dec220
	void OnPostRender();// 0x1dec204
	bool IsEntityAvailable(enum VisibilityType);// 0x1dec17c
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x1dec0b0
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x1debfa8
	enum GetMeshType();// 0x1debf78
	MeshData GetMeshData();// 0x1debf14
	BattleItemHandleBase* GetLoadedHandle();// 0x1debeec
	ItemDefineID GetDefineID();// 0x1debe98
	void EnterRenderPipeline();// 0x1debe7c
	void EnterLogicPipeline();// 0x1debe60
	void DrawOutline(bool bEnable);// 0x1debdd8
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x1debcf4
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x1debc28
	void ClearEquipmentLogic(bool putDefault);// 0x1debba0
	void ClearEntity(bool ForceClear);// 0x1debb18
	void ApplyAnimation();// 0x1debafc
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x1deba7c

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x1de98f0

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0xd0, Size: 24]
	FName LogicSocket;//[Offset: 0xe8, Size: 8]
	FName AttachSocket;//[Offset: 0xf0, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0xf8, Size: 1]
	float AIMinAttackDist;//[Offset: 0xfc, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x100, Size: 4]
	float AIAttackDist;//[Offset: 0x104, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x217fd28
	int GetAvailableBulletsNumInBackpack();// 0x217fd00

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float HitSelfModifier;//[Offset: 0x2d8, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x2dc, Size: 4]
	float HitOthersModifier;//[Offset: 0x2e0, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x2e4, Size: 4]
	float HitCharacterModifier;//[Offset: 0x2e8, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0xbc, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0xc0, Size: 4]
	float ImpactModifier;//[Offset: 0xc4, Size: 4]
	float ImpactAbsorption;//[Offset: 0xc8, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0xcc, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0xd0, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0xd4, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0xd8, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0xdc, Size: 4]
	float DamageCharacterCD;//[Offset: 0xe0, Size: 4]
	float DamageSelfCD;//[Offset: 0xe8, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0xf4, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0xf8, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x100, Size: 4]
	float DamageReduce;//[Offset: 0x104, Size: 4]
	float ExplosionBaseDamage;//[Offset: 0x108, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x10c, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x110, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x114, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x118, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x11c, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x120, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x128, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x12c, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x130, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x174, Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x178, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x180, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x188, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x18c, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x190, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x194, Size: 4]
	float ImpactModifierFront;//[Offset: 0x198, Size: 4]
	float ImpactModifierRear;//[Offset: 0x19c, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x1a0, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x1a4, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x1a8, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x1b0, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x1b4, Size: 4]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x2149220
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x21490b4

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0xbc, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0xc8, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0xd4, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0xe0, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0xec, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0xf8, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	float HPMax;//[Offset: 0x108, Size: 4]
	float HP;//[Offset: 0x10c, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x110, Size: 12]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	float FuelMax;//[Offset: 0x120, Size: 4]
	float Fuel;//[Offset: 0x124, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x128, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x12c, Size: 4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x130, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x214799c
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x2147798
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x214757c
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x2147360
	void SetHPFuel(float InHp, float InFuel);// 0x21472a4
	void RefreshWheelState();// 0x2147290
	void OnRep_WheelsCurrentHP();// 0x214727c
	void OnRep_HP();// 0x2147268
	void OnRep_Fuel();// 0x2147254
	bool NoFuel();// 0x214722c
	void Maintenance(float addpercenthp, bool fixtire);// 0x2147168
	bool IsDontDamage();// 0x214714c
	bool IsDontConsumeFuel();// 0x2147130
	bool IsDestroyed();// 0x2147108
	int GetWheelsHPNum();// 0x21470e0
	float GetWheelHPMax(int WheelIdx);// 0x2147060
	float GetWheelHP(int WheelIdx);// 0x2146fe0
	float GetVehicleHPMax();// 0x1f34b98
	float GetVehicleHP();// 0x2146fb8
	float GetFuelMax();// 0x2146f90
	float GetFuelConsumeFactor();// 0x2146f68
	float GetFuel();// 0x2146f40
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x2146ec8

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x260, Size: 4]
	float MeshDensity;//[Offset: 0x264, Size: 4]
	float FluidDensity;//[Offset: 0x268, Size: 4]
	float FluidLinearDamping;//[Offset: 0x26c, Size: 4]
	float FluidAngularDamping;//[Offset: 0x270, Size: 4]
	Vector VelocityDamper;//[Offset: 0x274, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x284, Size: 4]
	float TestPointRadius;//[Offset: 0x288, Size: 4]
	Vector[] TestPoints;//[Offset: 0x28c, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x29c, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x2a8, Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 1]
	float StayUprightStiffness;//[Offset: 0x2b8, Size: 4]
	float StayUprightDamping;//[Offset: 0x2bc, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2c0, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2d0, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2d4, Size: 4]
	byte TickGroup;//[Offset: 0x2d8, Size: 1]
	bool IsEntirelyUnderWater();// 0x4d63cc0
	bool IsContactedWater();// 0x4d63c98

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0xbc, Size: 12]
	float MinCorrectionInterval;//[Offset: 0xc8, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0xcc, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd0, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd4, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0xd8, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0xdc, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0xe0, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0xe4, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0xe8, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0xec, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0xf0, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0xf4, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0xf8, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0xfc, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x100, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	float StaticFixLocation;//[Offset: 0x108, Size: 4]
	float StaticFixAngel;//[Offset: 0x10c, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x110, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x114, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x11c, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x120, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x21c, Size: 60]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x2153bf4
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x2153a38
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x2153840
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x2153648
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x21533ec
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x21531e0
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x2152fd0
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x2152cfc
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x2152a28
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x21528c0
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x2152758
	void OnDriverRide();// 0x2152744
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x215263c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x21524a4
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x215239c
	STExtraBaseCharacter*[] GetRiders();// 0x21522dc
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x2152250
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x2152170
	void DragUnderGround();// 0x215215c
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x2152044
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x2151f10
	bool CheckAndLoadLandscape(float DeltaTime);// 0x1f8e4a0
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x2151e40
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x2151cb8

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0xd4, Size: 12]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0xe0, Size: 12]
	float fRewindMaxSeconds;//[Offset: 0xec, Size: 4]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0xf8, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xfc, Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x104, Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0x108, Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float TolerateFlyTime;//[Offset: 0x118, Size: 4]
	float TolerateFlyDis;//[Offset: 0x11c, Size: 4]
	bool bOpenStillLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x124, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x128, Size: 4]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x130, Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x134, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x138, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x13c, Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x140, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x144, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x148, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x14c, Size: 4]
	float TolerateShootRange;//[Offset: 0x150, Size: 4]
	byte[] traceObjectTypes;//[Offset: 0x154, Size: 12]
	float ShooterWeaponRange;//[Offset: 0x160, Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x164, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x16c, Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x170, Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x178, Size: 4]
	float TolerateLocusDist;//[Offset: 0x17c, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x180, Size: 4]
	float TolerateBoxExpand;//[Offset: 0x184, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x188, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x18c, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x190, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x194, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x198, Size: 4]
	float MaxGunPosLength;//[Offset: 0x19c, Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x1a0, Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x1ac, Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	float BonePointTorelate;//[Offset: 0x1bc, Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x1c0, Size: 12]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x1cc, Size: 4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	Character* CharacterOwner;//[Offset: 0x1d4, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x1dc, Size: 4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x1e0, Size: 4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x1e8, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x1ec, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1f0, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1f4, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1f8, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1fc, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x200, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x204, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x208, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x20c, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x210, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x214, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x218, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x21c, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x220, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x224, Size: 4]
	float TolerateNetDelay;//[Offset: 0x228, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x22c, Size: 4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x234, Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x238, Size: 4]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x23c, Size: 4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x240, Size: 4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x244, Size: 4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x248, Size: 4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x24c, Size: 4]
	float VerifyDownShootCD;//[Offset: 0x250, Size: 4]
	bool GM_VerifyActorPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	float GrayWeaponAndShootAngle;//[Offset: 0x260, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x264, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x268, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x26c, Size: 4]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x270, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x288, Size: 12]
	byte VertifyMuzzleHeight(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x1f07e2c
	byte VertifyImpactActorPosWithNoLagCompensation(STExtraShootWeapon* ShootWeapon, Pawn* VictmPawn, out const Vector InImpactActorPos);// 0x1f07d18
	byte VertifyClientAntiCheatResult(uint16 ClientAntiCheatResult, STExtraShootWeapon* ShootWeapon);// 0x1f07c54
	byte VerityOwnerAndGunBlock(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* ShootWeapon);// 0x1f07b40
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x1f06b9c
	byte VerifyWeaponOwnerPos(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x1f07a24
	byte VerifyWeaponOwnerAndMuzzleDis(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x1f07908
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x1f06a3c
	float SimulatedCharacterServerTimeHighPrecision();// 0x1f078d8
	float SimulatedCharacterServerTime();// 0x1f06a0c
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x1f077fc
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x1f076f0
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x1f0762c
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x1f07568
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x1f074a4
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x1f07424
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x1f07360
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x1f0729c
	float GetNearAvgNetDelay(Pawn* TargetPawn, float NearNum);// 0x1f071d8

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xc0, Size: 16]
	float TolerateOwnerAndBulletDist;//[Offset: 0xd0, Size: 4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	enum MoveBaseState;//[Offset: 0x60, Size: 1]

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x264, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x270, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x274, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x278, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x282, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x284, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x288, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x28c, Size: 4]
	FString EventName;//[Offset: 0x290, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x4be825c
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x4be7f28
	void Stop();// 0x4be7f14
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x4be7c9c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x4be7c1c
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x4be7a80
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4be78a0
	void SetOutputBusVolume(float BusVolume);// 0x4be7828
	void SetListeners(out const AkComponent*[] Listeners);// 0x4be775c
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x4be76e4
	void SetAutoDestroy(bool in_AutoDestroy);// 0x4be7668
	void SetAttenuationScalingFactor(float Value);// 0x4be75f0
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x4be74e8
	void PostTrigger(FString Trigger);// 0x4be7390
	int PostAssociatedAkEvent();// 0x4be7368
	int PostAkEventByName(FString in_EventName);// 0x4be72a4
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x4be719c
	float GetAttenuationRadius();// 0x4be7174

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x318, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x31c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x320, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	Rotator RelativeToOwnerRotator;//[Offset: 0x328, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x334, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float MinPitch;//[Offset: 0x34c, Size: 4]
	float MaxPitch;//[Offset: 0x350, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x358, Size: 4]
	float ResultMinPitch;//[Offset: 0x39c, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3a0, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x3a4, Size: 4]
	float LeaveMaxTime;//[Offset: 0x3a8, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x3b4, Size: 4]
	float ApproachTime;//[Offset: 0x3bc, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x3cc, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x3d0, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x2150b78
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x2150af8
	void SetFreeCameraInput(Rotator deltaRot);// 0x2150a88
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x2150a08
	void ResetSmartCamera();// 0x21509f4
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1e6d510
	void DelayRotationLagEnabledEnd();// 0x1dd8bcc
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x21508e8
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x215082c

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0xbc, Size: 12]
	FString OneceBuffTableName;//[Offset: 0xc8, Size: 12]
	FString ConditionBuffTableName;//[Offset: 0xd4, Size: 12]
	float RPCSyncInterval;//[Offset: 0xe0, Size: 4]
	bool IsPreloadUClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	int[] PreloadBuffIDList;//[Offset: 0xe8, Size: 12]
	delegate OnClientAddBuffEvent;//[Offset: 0xf4, Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0x100, Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0x10c, Size: 12]
	STBuff*[] Buffs;//[Offset: 0x118, Size: 12]
	int SyncBriefNum;//[Offset: 0x124, Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0x128, Size: 32]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x1e8, Size: 32]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x2a8, Size: 60]
	<int> BriefRemoveInstIds;//[Offset: 0x2e4, Size: 60]
	bool UpdateServerSyncBuff(STBuff* Buff);// 0x223503c
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID, Actor* CauseActor, float DSEndTime);// 0x2234e68
	void UpdateBriefs();// 0x2234e54
	void RPC_Server_ReqBriefs();// 0x2234df8
	void RPC_Client_SyncBrief(ClientSyncBrief Brief);// 0x2234d44
	void RPC_Client_RspBriefs(const ClientSyncBrief[] Briefs);// 0x2234c80
	void RemoveClientBuff(int InstID);// 0x2234c08
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x2234ab8
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x2234970
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x22348f8
	void RemoveAllBuffs();// 0x22348e4
	void OnRep_SyncBriefs();// 0x22348d0
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x29fa2f4
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x29fa2f4
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x29fa2f4
	bool HasSkillID(int SkillID);// 0x2234850
	bool HasBuff(int BuffID);// 0x22347d0
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x2234714
	bool HandleBuffTypeMutex(int BuffID);// 0x2234694
	void HandleBuffTypeExclude(int BuffID);// 0x223461c
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x2234514
	BuffTableConfig* GetTableConfig();// 0x22344ec
	STBuff*[] GetBuffs();// 0x223442c
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x2234368
	STBuff* GetBuffByBuffID(int BuffID);// 0x22342e8
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x2234198
	void CompareBuffPower(STBuff* Buff);// 0x2234120
	bool ClientGetBuffInfo(int BuffID, out ClientSyncBrief OutBuff);// 0x2234034
	void ClearBuffs(bool IsClearAll);// 0x2233fb4
	bool CheckBuffTargetClient(STBuff* Buff);// 0x2233f34
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x2233de4

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x1c, Size: 12]
	FString Desc;//[Offset: 0x28, Size: 12]
	int LayerMax;//[Offset: 0x34, Size: 4]
	int InitialLayerCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	float ClientSyncInterval;//[Offset: 0x40, Size: 4]
	enum ClientSyncType;//[Offset: 0x44, Size: 1]
	enum TargetType;//[Offset: 0x45, Size: 1]
	enum RefreshType;//[Offset: 0x46, Size: 1]
	enum ReActionType;//[Offset: 0x47, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x48, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x49, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x4c, Size: 12]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int LocalizeDescID;//[Offset: 0x5c, Size: 4]
	FString IconPath;//[Offset: 0x60, Size: 12]
	int TipsOnAddBuff;//[Offset: 0x6c, Size: 4]
	DataProviderBase*[] DataProviders;//[Offset: 0x70, Size: 12]
	int InstID;//[Offset: 0x7c, Size: 4]
	int BuffID;//[Offset: 0x80, Size: 4]
	int LayerCount;//[Offset: 0x84, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float EndTime;//[Offset: 0x8c, Size: 4]
	float DSEndTime;//[Offset: 0x90, Size: 4]
	Actor* Causer;//[Offset: 0x94, Size: 8]
	Actor* Owner;//[Offset: 0x9c, Size: 8]
	int CauseSkillID;//[Offset: 0xa4, Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0xa8, Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float PowerValue;//[Offset: 0xb4, Size: 4]
	float LastSyncClientTime;//[Offset: 0xb8, Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	UAEBlackboard* Blackborad;//[Offset: 0xc0, Size: 4]
	int LastLayerCount;//[Offset: 0x13c, Size: 4]
	void Tick(float DetalTime, float TimeSeconds);// 0x2231a40
	void ResetActionExecute();// 0x2231a2c
	void RefreshEndTime();// 0x2231a18
	void Initialize();// 0x2231a04
	void HandleLayer(int AddLayerCount, bool IsNewBuff);// 0x2231940
	void End();// 0x223192c
	void EnabledRemove();// 0x2231918
	void Destroy();// 0x2231904
	bool CopyActions();// 0x22318dc
	void CheckOnceBuffForClient();// 0x22318c8
	void ChangeNotify();// 0x22318b4
	void ChangeDuration(float NewDuration);// 0x223183c

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x1c, Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x20, Size: 8]
	int ArrayIndex;//[Offset: 0x28, Size: 4]
	void Tick(float DetalTime);// 0x22324e0
	void SetEnabled(bool Enabled);// 0x2232460
	void ResetExecute(bool IgnoreEnd);// 0x1debb18
	void OnTick(float DetalTime);// 0x1fc7214
	void OnInitialize();// 0x1f53e80
	void OnExecute();// 0x1f53e9c
	void OnEnd();// 0x1debe60
	void OnDestroy();// 0x1fc7f20
	void OnChangeNotify();// 0x1e90bf0
	void Initialize();// 0x223244c
	STBuff* GetOwnerBuff();// 0x2232424
	Actor* GetOwner();// 0x1fca3e8
	bool GetIsExecute();// 0x2232408
	Actor* GetCauser();// 0x22323e0
	void End();// 0x22323cc
	void Destroy();// 0x22323b8
	STBuffAction* CopyAction(Object* Outer);// 0x2232330
	void ChangeNotify();// 0x223231c

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4cb0438
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x4cb0364
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x4cb01b0
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x4cb00dc
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4cb0008
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x4caff34
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x4cafe60
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x4cafd8c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x4cafcb8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x4cafbe4
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x4cafb08
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x4cafa74
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x4caf9e0
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x4caf94c
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x4caf8b8
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x4caf824
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x4caf790
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x4caf6fc
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x4caf668
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x4caf5d4
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x4caf540
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x4caf4ac
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x4caf418
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x4caf334
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x4caf290
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x4caf174
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x4caf0d0
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x4caf03c
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x4caefa0
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x4caef0c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x4caee78
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x4caede4
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x4caed50
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x4caecbc
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x4caebd8
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x4caea2c

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 4]
	float SyncTime;//[Offset: 0x14, Size: 4]
	float EndTime;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: BuffTableConfig.Object
	<int,BuffTableRow> Table;//[Offset: 0x40, Size: 60]
	<FString,class Object> BuffClassMap;//[Offset: 0x7c, Size: 60]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0xc, Size: 12]
	FString Name;//[Offset: 0x18, Size: 12]
	FString IconPath;//[Offset: 0x24, Size: 12]
	FString BPPath;//[Offset: 0x30, Size: 12]
	FString Desc;//[Offset: 0x3c, Size: 12]
	<FString> MutexBuffTypes;//[Offset: 0x48, Size: 60]
	<FString> ExcludeBuffTypes;//[Offset: 0x84, Size: 60]
	enum RefreshType;//[Offset: 0xc0, Size: 1]
	enum ReActionType;//[Offset: 0xc1, Size: 1]
	enum TargetType;//[Offset: 0xc2, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0xc3, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0xc4, Size: 1]
	enum ClientSyncType;//[Offset: 0xc5, Size: 1]
	float ClientSyncInterval;//[Offset: 0xc8, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	int LocalizeDescID;//[Offset: 0xd0, Size: 4]
	int TipsOnAddBuff;//[Offset: 0xd4, Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x378, Size: 12]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x384, Size: 12]
	delegate OnEndChangeItemAvatar;//[Offset: 0x390, Size: 12]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x3a0, Size: 12]
	bool bFPPMeshLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x3b0, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x3c0, Size: 8]
	FName TailMatSlotName;//[Offset: 0x3c8, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x3d0, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x3d8, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x3dc, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x3e0, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x3e4, Size: 4]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	void WakeUpVehicle();// 0x2141fa8
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x29fa2f4
	void PreChangeVehicleFPPMode();// 0x2144e4c
	void PreChangeVehicleBrokenMataterial();// 0x2144e38
	void PreChangeVehicleAvatar(int InItemID);// 0x1ee7164
	void PreChangeItemAvatar(int InItemID);// 0x1f00824
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x1ee70dc
	void OverrideVehiclePhysX();// 0x2144e24
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x2144da0
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x2144d1c
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x2144cb8
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x2144c54
	FName GetReflectionCubeName_Lobby();// 0x29fa2f4
	FName GetReflectionCubeName();// 0x2144c14
	FString GetItemAvatarHandlePath(int ItemID);// 0x29fa2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID);// 0x29fa2f4
	int GetDefaultAvatarID();// 0x2144bec
	int GetCurrentAvatarID();// 0x2144bd0
	void ExitFPPVehicle();// 0x2144bbc
	void EnterFPPVehicle();// 0x2144ba8
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x29fa2f4
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x1f00584
	void ClearVehicleLightEffect();// 0x29fa2f4
	bool CheckIsNeedEnterFPPVehicle();// 0x2144b80
	bool CheckAvatarChanged();// 0x2144b58
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x2144ae0
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x1f00228

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x20, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x28, Size: 160]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0xc8, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x5c, Size: 12]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x68, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x74, Size: 40]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x5278464
	float GetSuspensionOffset();// 0x527843c
	float GetSteerAngle();// 0x5278414
	float GetRotationAngle();// 0x52783ec

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c, Size: 12]
	float Mass;//[Offset: 0x138, Size: 4]
	float DragCoefficient;//[Offset: 0x13c, Size: 4]
	float ChassisWidth;//[Offset: 0x140, Size: 4]
	float ChassisHeight;//[Offset: 0x144, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	float DragArea;//[Offset: 0x14c, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150, Size: 4]
	float MaxEngineRPM;//[Offset: 0x154, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x184, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0, Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1d4, Size: 20]
	float RawSteeringInput;//[Offset: 0x1ec, Size: 4]
	float RawThrottleInput;//[Offset: 0x1f0, Size: 4]
	float RawBrakeInput;//[Offset: 0x1f4, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 1]
	float SteeringInput;//[Offset: 0x1fc, Size: 4]
	float ThrottleInput;//[Offset: 0x200, Size: 4]
	float BrakeInput;//[Offset: 0x204, Size: 4]
	float HandbrakeInput;//[Offset: 0x208, Size: 4]
	float IdleBrakeInput;//[Offset: 0x20c, Size: 4]
	float StopThreshold;//[Offset: 0x210, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x214, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x218, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x220, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x228, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x230, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x5279680
	void SetThrottleInput(float Throttle);// 0x5279600
	void SetTargetGear(int GearNum, bool bImmediate);// 0x527953c
	void SetSteeringInput(float Steering);// 0x52794bc
	void SetPhysActive(bool bActive);// 0x527943c
	void SetHandbrakeInput(bool bNewHandbrake);// 0x52793b4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x5279330
	void SetGroupsToIgnore(int GroupFlags);// 0x52792b8
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5279234
	void SetGroupsToAvoid(int GroupFlags);// 0x52791bc
	void SetGearUp(bool bNewGearUp);// 0x527913c
	void SetGearDown(bool bNewGearDown);// 0x52790bc
	void SetBrakeInput(float Brake);// 0x527903c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5278fb8
	void SetAvoidanceGroup(int GroupFlags);// 0x5278f40
	void SetAvoidanceEnabled(bool bEnable);// 0x5278ec0
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x5278cdc
	bool GetUseAutoGears();// 0x5278cb4
	int GetTargetGear();// 0x5278c8c
	float GetForwardSpeed();// 0x5278c64
	float GetEngineRotationSpeed();// 0x5278c3c
	float GetEngineMaxRotationSpeed();// 0x5278c14
	int GetCurrentGear();// 0x5278bec

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62e, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x630, Size: 4]
	int VehicleSkinID;//[Offset: 0x634, Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x640, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x668, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x690, Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x69c, Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x6a8, Size: 12]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x6b4, Size: 12]
	FName FrontMatSlotName;//[Offset: 0x6c0, Size: 8]
	FName TailMatSlotName;//[Offset: 0x6c8, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x6d0, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x6d8, Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x6dc, Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x6e0, Size: 4]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x6e4, Size: 4]
	void WakeUpVehicle();// 0x2141fa8
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x2141f30
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x1e521a0
	void SetVehicleAvatarNormalMode();// 0x2141f1c
	void SetVehicleAvatarFPPMode();// 0x2141f08
	void SetVehicleAvatarBroken();// 0x2141ef4
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow);// 0x1e51c3c
	void SetMasterBaseMeshPath(FString InPath);// 0x2141e38
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x2141d7c
	void ResetAdvanceVehicleSkinID();// 0x2141d60
	void RemoveAllEquippedStyle();// 0x2141d4c
	bool ProcessHandleUnequip(enum InSlotType);// 0x2141ccc
	bool ProcessHandleEquip(enum InSlotType);// 0x2141c4c
	void PreProcessBeforeLoadMesh();// 0x1e513bc
	void PostProcessAfterLoadMesh();// 0x1e513a0
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x2141bd4
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x2141b5c
	void OverrideVehiclePhysX();// 0x2141b48
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x29fa2f4
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x29fa2f4
	void OnRep_BodySlotStateChanged();// 0x1e512a4
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x29fa2f4
	bool IsValidAvatar();// 0x2141b20
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x2141a44
	bool IsAvatarFPPMode();// 0x2141a1c
	bool IsAvatarBroken();// 0x21419f4
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x1e6f7b8
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x1fb60b8
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x1db5d3c
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x214196c
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x2141860
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x2141708
	void InitMasterComponent();// 0x21416f4
	void Initialize();// 0x1e50178
	void InitialAvatarParam();// 0x1dd8bcc
	int HasStyleEquipped(int InStyleID);// 0x2141674
	int HasEquippedSameStyle(int InStyleID);// 0x21415f4
	bool HandleUnequipStyle(int InStyleID);// 0x2141574
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x1fb5ff4
	bool HandleEquipStyle(int InStyleID);// 0x21414f4
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x21414cc
	MeshComponent* GetVehicleBodyMeshComp();// 0x21414a4
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x1e4f8c4
	FName GetReflectionCubeName_Lobby();// 0x29fa2f4
	FName GetReflectionCubeName();// 0x2141464
	bool CanBeMeshMerge(int SlotID);// 0x21413e4
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x2141328

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x488, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x494, Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x4a0, Size: 12]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x217760c
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x2177594
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x217750c
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x2177450
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x2177210
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x2176ffc
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x2176f74
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x2176ef4
	void OnRep_CurrentWeaponReplicated();// 0x1f3ae60
	void OnReconnectOnServer();// 0x1de6aa8
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x2176e7c
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x2176d30
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x2176cb8
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x2176c08
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x2176b4c
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x2176ad4
	void DelayFire(float DelayTime, byte ShootMode);// 0x2176a10

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xbc, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0xf8, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x100, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x108, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x144, Size: 60]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x180, Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1bc, Size: 4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1c0, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1c8, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1d8, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1e0, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 1]
	float ResyncTimeBias;//[Offset: 0x1ec, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x1f0, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x1f8, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x204, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x210, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x21c, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x228, Size: 12]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x24c, Size: 60]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x288, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x2c4, Size: 12]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x2d4, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x2e4, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x2f0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x328, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x360, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x398, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3d0, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x40c, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x410, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x414, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x418, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x41c, Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x44c, Size: 4]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x29fa2f4
	void UpdateOwnerClientCreateWeapon();// 0x21798c8
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x2179804
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x21797f0
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x29fa2f4
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x2176ffc
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x29fa2f4
	void SetGrenadeLogicSocketToWeaponClassMap(<FName,class STExtraWeapon> GrenadeLogicToWeaponClass);// 0x2179644
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x2179580
	void SetAllWeaponMeshsHidden(bool bHidden, bool bCastShadow, bool bCacheHidden, bool bIgnoreCharHide);// 0x217940c
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x2179394
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x21792ac
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x2179298
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x2179284
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x2179270
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x217925c
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x2179248
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x21791d0
	void OnRep_CurrentWeaponReplicated();// 0x1f3ae60
	void OnRep_CurrentWeaponLogicSocket();// 0x21791bc
	void OnRep_CurrentShieldWeaponReplicated();// 0x21791a8
	void OnReconnectOnServer();// 0x1de6aa8
	void OnReconnectOnClient();// 0x1e58930
	void LogInventoryDataInfo();// 0x2179194
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x2179084
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x2176c08
	void LocalForceFinishSwitchWeapon();// 0x2179070
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x29fa2f4
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x217905c
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x2178f80
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x2178f6c
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x29fa2f4
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x2178f44
	bool IsCreatingWeaponOnServer();// 0x2178f10
	static void InitializeTable(FString MainWeaponTableName);// 0x2178dc0
	void HandleGetWeaponFinished(byte Slot);// 0x1e67c6c
	FName GetShieldWeaponSlot();// 0x2178d80
	STExtraWeapon* GetShieldWeapon();// 0x2178d58
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x2178cd8
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x2178bd0
	FName GetLogicSocketBySlot(byte Slot);// 0x2178b48
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x2178ac8
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x2178a48
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x21789c8
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x2178938
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x21788b0
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x2178818
	STExtraWeapon* GetCurrentUsingWeapon();// 0x21787f0
	byte GetCurrentUsingPropSlot();// 0x21787c8
	FName GetCurrentUsingLogicSocketOnServer();// 0x2178788
	FName GetCurrentUsingLogicSocket();// 0x2178788
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x2178760
	int GetBagLevel();// 0x1e588ec
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x2178650
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x2178540
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x217852c
	void EnableAllBroadcast(bool bEnable);// 0x21784b0
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x21783ec
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x2178374
	void DebugReconnectToClientOnServer();// 0x2178360
	void DebugDisconnetToServerOnClient();// 0x217834c
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x29fa2f4
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x29fa2f4
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x2178278

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 104]
	STExtraWeapon* Weapon;//[Offset: 0x68, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 4]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1e87cb8
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1e87a94
	void S2A_EndEffectGraph(int UId);// 0x1dbb240
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x1e87828

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x260, Size: 4]
	float TriggerInterval;//[Offset: 0x264, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x268, Size: 4]
	void OnTriggered();// 0x29fa2f4

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0xc28, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0xc2c, Size: 4]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc31, Size: 1]
	delegate OnDeath;//[Offset: 0xc34, Size: 12]
	float DelayHideDuration;//[Offset: 0xc40, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0xc44, Size: 4]
	float DelayHideDurationByHeadShoot;//[Offset: 0xc48, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0xc4c, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0xc50, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0xc54, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0xc58, Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0xc5c, Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0xc60, Size: 4]
	int MonsterSpawnTime;//[Offset: 0xc64, Size: 4]
	int MonsterDeathTime;//[Offset: 0xc68, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0xc6c, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0xc74, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0xc7c, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0xc80, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0xc84, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xc98, Size: 88]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xcf0, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xcf4, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xcf8, Size: 4]
	float SensedRadius;//[Offset: 0xcfc, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xd00, Size: 4]
	float HeardRadius;//[Offset: 0xd04, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0xd08, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xd0c, Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0xd10, Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0xd14, Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xd18, Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0xd1c, Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xd2c, Size: 4]
	int SyncAIState;//[Offset: 0xd30, Size: 4]
	int AIState;//[Offset: 0xd3c, Size: 4]
	float HurtAnimTime;//[Offset: 0xd40, Size: 4]
	float BackAnimPerc;//[Offset: 0xd44, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0xd48, Size: 4]
	delegate OnEnterAIState;//[Offset: 0xd58, Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xd64, Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xd70, Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xd7c, Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xd88, Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xd94, Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xda0, Size: 12]
	delegate OnCharacterHitPointDelgate;//[Offset: 0xdc0, Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 1]
	int FlowId;//[Offset: 0xdd0, Size: 4]
	FString MonsterName;//[Offset: 0xdd4, Size: 12]
	FString MonsterNameID;//[Offset: 0xde0, Size: 12]
	int MonsterSyncID;//[Offset: 0xdec, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 1]
	int Gold;//[Offset: 0xdf4, Size: 4]
	int SuperGold;//[Offset: 0xdf8, Size: 4]
	int[] BornSkill;//[Offset: 0xdfc, Size: 12]
	int[] AloneSkillIdList;//[Offset: 0xe08, Size: 12]
	int HealthBarCount;//[Offset: 0xe14, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xe1c, Size: 4]
	float TakeDamageScale;//[Offset: 0xe20, Size: 4]
	Actor* AttackTarget;//[Offset: 0xe24, Size: 8]
	int[] DecalIndexArray;//[Offset: 0xe2c, Size: 12]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0xe38, Size: 60]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0xe74, Size: 60]
	byte HitPartJudgment;//[Offset: 0xeb0, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xeb4, Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0xef0, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0xef8, Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xefc, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0xf00, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0xf04, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0xf08, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0xf0c, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0xf10, Size: 4]
	float[] CircleDamageRate;//[Offset: 0xf14, Size: 12]
	int ObjectPoolSize;//[Offset: 0xf20, Size: 4]
	int LifePeriodTime;//[Offset: 0xf24, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0xf28, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0xf2c, Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf30, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0xf34, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 1]
	int RageLevel;//[Offset: 0xf5c, Size: 4]
	float AloneRageTimerRate;//[Offset: 0xf68, Size: 4]
	float ImpluseScale;//[Offset: 0xf6c, Size: 4]
	float ImpluseZScale;//[Offset: 0xf70, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf75, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0xf78, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0xf7c, Size: 4]
	float MinDamageInterval;//[Offset: 0xf80, Size: 4]
	float MovementTickInterval;//[Offset: 0xf84, Size: 4]
	float DsActorTickInterval;//[Offset: 0xf88, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8c, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0xf94, Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0xf98, Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0xf9c, Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0xfa0, Size: 4]
	float NoPathToTargetTimer;//[Offset: 0xfa4, Size: 4]
	enum AnimGroupMask;//[Offset: 0xfa8, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa9, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfaa, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb0, Size: 1]
	int ExplodeSkillID;//[Offset: 0xfb4, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0xfb8, Size: 4]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfbc, Size: 1]
	float LagCompensationRecordInterval;//[Offset: 0x1080, Size: 4]
	float HearRadius;//[Offset: 0x10c4, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x10c8, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d2, Size: 1]
	bool TestPathSyncToLocation(Vector Location);// 0x20ba664
	bool TestPathSyncToActor(Actor* Actor);// 0x20ba5e4
	void StopMovementMode();// 0x2009184
	void StartMovementMode();// 0x2008a3c
	void ShowHeadShootDeadEffect();// 0x20ba5d0
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x20ba558
	void ResetCharAnimParam();// 0x20ba544
	void OnSmoothComponentSnapshotPreReplicate();// 0x20ba530
	void OnRep_SyncAIState();// 0x20ba51c
	void OnRep_ReplicatedMovement();// 0x1dbb2c0
	void OnRep_RageLevel();// 0x20ba508
	void OnRep_MonsterSyncID();// 0x20ba4f4
	void OnRep_MonsterNameID();// 0x20ba4e0
	void OnRep_IsLeftRightMove();// 0x20ba4cc
	void OnRep_IdleBlendSpaceValue();// 0x20ba4cc
	void NotifyInitial();// 0x20ba4b8
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x20ba3f4
	bool IsSameTeam(Pawn* Other);// 0x20064a0
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x20ba308
	bool IsCanCopyBone();// 0x20ba2e0
	bool IsBoss();// 0x20ba2b8
	bool IsBigBoss();// 0x20ba290
	bool IsBehemoth();// 0x20ba268
	void InitCharAnimParam();// 0x20ba254
	bool HasAIState(enum NewState);// 0x20ba1d4
	void HandleHitByBullet(Actor* Causer);// 0x20ba15c
	void GotoEarthAndDie();// 0x20ba140
	Vector GetServerHeadLocation();// 0x20ba0f8
	STExtraPlayerController* GetPlayerControllerSafety();// 0x2004998
	int GetMonsterType();// 0x20ba0dc
	FString GetMonsterName();// 0x20ba014
	float GetHitBoxRadius();// 0x20b9ff8
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x20b9e84
	ExFootIKComponent* GetExFootIKComponent();// 0x20b9e54
	class PlayerTombBox GetDropTomb();// 0x20b9e24
	byte GetCurHitPartJugementType();// 0x20b9dfc
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x20b9dd4
	SimpleCharAnimParamList GetAnimParam();// 0x20b9d48
	int GetAliveTimeSeconds();// 0x20b9d2c
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x20b9a70
	void EnterAIState(enum NewState, bool bIsNotify);// 0x20b99ac
	void EnableDSAnim(bool bEnable);// 0x20b992c
	void DisappearOnDeath();// 0x20b9918
	void DieAfterExplode();// 0x20b9904
	void DelayHidden();// 0x2002224
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x20b9824
	bool CheckPlayerNeedUpdateAnimation();// 0x20b97fc
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x20b96f0
	void ChangeSourceType(byte NewSourceType);// 0x20b9678
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x20b9568
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x20b9458
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b91dc
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b8ef4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b8c78
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b89fc
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b876c
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b84f0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b8274
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b7ff8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b7d70
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20b7a88
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x20b78f4
	void BroadcastClientsDebugSpeed(float Speed);// 0x20b7840
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x20b778c
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x29fa2f4
	void BPPreRespawned();// 0x1eff778
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void BPNotifyInitial();// 0x29fa2f4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void BPMonsterInitTableDone();// 0x29fa2f4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x20b7618
	bool BP_HasAIState(enum NewState);// 0x20b7598
	RoadPointInfo[] BleCallGetRoadPoints();// 0x20b74d0
	bool AllowAIState(enum NewState);// 0x1f8e4a0
	void AddWeaponDamageAddition(byte WeaponType);// 0x20b7458

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x144, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x148, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x14c, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x154, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x158, Size: 4]
	delegate OnSnapshotPreReplicate;//[Offset: 0x15c, Size: 12]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x16c, Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x248, Size: 12]
	void TeleportNextSync();// 0x1fa8f64
	void StopPredict();// 0x1fa8f50
	void SetVelocity(out const Vector Velocity);// 0x1fa8ecc
	void SetEnable(bool bInEnable);// 0x1fa8e50
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x1fa8d50
	void OnRep_Snapshot();// 0x1fa8d3c
	Vector GetVelocity();// 0x1fa8cf4
	bool GetEnable();// 0x1fa8cd8
	Vector FindFloor(const Vector InLocation);// 0x1fa8c44

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc, Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0, Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xe4, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xe8, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xec, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0, Size: 4]
	float Stride_Duration;//[Offset: 0xf4, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8, Size: 4]
	float Stride_HeightOffset;//[Offset: 0xfc, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x100, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x104, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108, Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c, Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	int iWallClimbState;//[Offset: 0x114, Size: 4]
	int iWallJumpState;//[Offset: 0x118, Size: 4]
	int iStrideState;//[Offset: 0x11c, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x1f21ddc
	void WallJump(Vector DstLocation);// 0x1f21d6c
	void WallClimbExit();// 0x1f21d58
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x1f21c50
	void TickWallJump_Turn(float DeltaTime);// 0x1f21bd8
	void TickWallJump(float DeltaTime);// 0x1f21b60
	void TickWallClimb_Turn(float DeltaTime);// 0x1f21ae8
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x1f21a70
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x1f219f8
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x1f21980
	void TickWallClimb(float DeltaTime);// 0x1f21908
	void TickStride_Turn(float DeltaTime);// 0x1f21890
	void TickStride_Stride(float DeltaTime);// 0x1f21818
	void TickStride_MoveToWall(float DeltaTime);// 0x1f217a0
	void TickStride(float DeltaTime);// 0x1f21728
	void StrideJump();// 0x1f21714
	void StrideExit();// 0x1f21700
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x1f21628
	void OnMobDie();// 0x1f21614
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x1f21508
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x1f213fc
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x1f212f0
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x1f2109c
	bool IsInAdvancedMovement();// 0x1f21074
	int GetWallJumpState();// 0x1f2104c
	int GetWallClimbState();// 0x1f21024
	int GetStrideState();// 0x1f20ffc
	void BPWallJump(Vector DstLocation);// 0x1f20f84
	void BPWallClimb(Vector DstLocation);// 0x1f20f0c

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0xc0, Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xcc, Size: 1]
	int NoisePoolSize;//[Offset: 0xd0, Size: 4]
	float NoiseRememberTime;//[Offset: 0xd4, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xd8, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x1f2493c
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x1f2482c
	void OnMobDie();// 0x1f24818
	void ClearNoisePool();// 0x1f24818
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x1f24678
	float Attenuation(out AIStimulus Stimulus);// 0x1f244e0
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x1f242c4

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x110, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x37f9970
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x37f98f0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x37f97dc

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0, Size: 4]
	AIController* AIOwner;//[Offset: 0xc4, Size: 4]
	void StopLogic(FString Reason);// 0x37fcff0
	void RestartLogic();// 0x1dbb2c0
	bool IsRunning();// 0x1de25f4
	bool IsPaused();// 0x37fcfc0

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xdc, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x37fb5bc
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x37fb408
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x37fb334
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x37fb260
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x37fb18c
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x37fb0b8
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x37fafe4
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x37faf10
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x37fae3c
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x37fad60
	bool IsVectorValueSet(out const FName KeyName);// 0x37faccc
	Vector GetValueAsVector(out const FName KeyName);// 0x37fac28
	FString GetValueAsString(out const FName KeyName);// 0x37fab0c
	Rotator GetValueAsRotator(out const FName KeyName);// 0x37faa68
	Object* GetValueAsObject(out const FName KeyName);// 0x37fa9d4
	FName GetValueAsName(out const FName KeyName);// 0x37fa938
	int GetValueAsInt(out const FName KeyName);// 0x37fa8a4
	float GetValueAsFloat(out const FName KeyName);// 0x37fa810
	byte GetValueAsEnum(out const FName KeyName);// 0x37fa77c
	class Object GetValueAsClass(out const FName KeyName);// 0x37fa6e8
	bool GetValueAsBool(out const FName KeyName);// 0x37fa654
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x37fa56c
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x37fa484
	void ClearValue(out const FName KeyName);// 0x37fa3f8

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x33c, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x340, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x344, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x348, Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x34c, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x350, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x354, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x358, Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x368, Size: 12]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x37f0ddc
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x37f0d64
	void SetMoveBlockDetection(bool bEnable);// 0x37f0ce4
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x37f0c5c
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x29fa2f4
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x29fa2f4
	void OnPossess(Pawn* PossessedPawn);// 0x29fa2f4
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x37f0b98
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x37f08f0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x37f06a8
	void K2_SetFocus(Actor* NewFocus);// 0x37f0630
	void K2_SetFocalPoint(Vector FP);// 0x37f05c0
	void K2_ClearFocus();// 0x37f05ac
	bool HasPartialPath();// 0x37f0584
	PathFollowingComponent* GetPathFollowingComponent();// 0x3484cb0
	byte GetMoveStatus();// 0x37f055c
	Vector GetImmediateMoveDestination();// 0x37f0514
	Actor* GetFocusActor();// 0x37f04ec
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x37f0454
	Vector GetFocalPoint();// 0x37f040c
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x37f03f0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x37f0378

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0, Size: 4]
	NavigationData* MyNavData;//[Offset: 0xfc, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x380db78
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x380da08
	Vector GetPathDestination();// 0x380d9c0
	byte GetPathActionType();// 0x380d998

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xbc, Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8, Size: 4]
	AIController* AIOwner;//[Offset: 0xe0, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x37f2c38
	void RequestStimuliListenerUpdate();// 0x37f2c24
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x37f2b68
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x37f2a9c
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x37f298c
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x37f287c
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x37f276c
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x37f2644

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x37f3bf0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x37f3b78
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x37f3a78
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x37f39bc
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x37f37e8

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x380f378
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x380f270
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x380f1f0
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x380f170

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x380e254
	void Finish(byte WithResult);// 0x380e1cc
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x380e110

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xcc, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xe4, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0xf0, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100, Size: 12]
	void OnRep_SimulatedTasks();// 0x3742d28
	static enum K2_RunGameplayTask(interface classByteProperty TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x37429b4

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x3741034
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x29fa2f4
	void EndTask();// 0x3741020

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc0, Size: 4]
	float StepHeight;//[Offset: 0xc4, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xc8, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xcc, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xd0, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xd4, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x114, Size: 4]
	bool StopSkillSimulate();// 0x20beb04
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x20bea38
	void SetVelocity(Vector InVelocity);// 0x20be9c8
	void SetSimulatePhysics(bool bInEnabled);// 0x20be94c
	void SetEnabled(bool InEnabled);// 0x20be8d0
	void SetCharacterMovementActive(bool _bIsActive);// 0x20be850
	bool IsOnGround();// 0x20be828
	Vector GetVelocity();// 0x20be7e0
	bool FindGround();// 0x20be7b8
	void AddVelocity(Vector InVelocity);// 0x20be748
	void ActivatePhysics();// 0x20be734

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc, Size: 1]
	byte Type;//[Offset: 0xbd, Size: 1]
	int TypeID;//[Offset: 0xc0, Size: 4]
	void SetActorVisible(bool bEnable);// 0x1e1ea9c

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x144, Size: 12]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool bMakePainToHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x158, Size: 12]
	float DestinyThreshold;//[Offset: 0x164, Size: 4]
	int RoundNum;//[Offset: 0x168, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x170, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x178, Size: 4]
	float LowProbRatio;//[Offset: 0x17c, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x184, Size: 4]
	float TimeForForbidMakePain;//[Offset: 0x188, Size: 4]
	Actor* InnerCircle;//[Offset: 0x18c, Size: 4]
	Vector InnerCircleInfo;//[Offset: 0x190, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	Vector BlueCircle;//[Offset: 0x1c4, Size: 12]
	Vector WhiteCircle;//[Offset: 0x1d0, Size: 12]
	int CurrentIndex;//[Offset: 0x1dc, Size: 4]
	Actor* ContainActor;//[Offset: 0x1e0, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	delegate OnCircleBegin;//[Offset: 0x2d4, Size: 12]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x2e0, Size: 12]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x2ec, Size: 12]
	delegate OnCircleInfoChanged;//[Offset: 0x2f8, Size: 12]
	delegate OnWaveEnded;//[Offset: 0x304, Size: 12]
	delegate OnCircleEnded;//[Offset: 0x310, Size: 12]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x31c, Size: 4]
	bool WhitCircleIsOutOfBlueCircle();// 0x1e5e8a0
	void StartCircleFromBegin();// 0x1e5e88c
	void SetGMCicleTime(float cdTime, float LastTime);// 0x1e5e790
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x1e5e6c8
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x1e5e5ec
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int Index);// 0x1e5e4e0
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x1e5e418
	void MakePain(Actor* _actor, float _desireDamage);// 0x1e5e35c
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x1e5e2a4
	bool MakeCurrentWhiteCircle(int Index);// 0x1e5e21c
	bool IsUseCustomWhiteCircle();// 0x1e5e1f4
	bool IsPositionInBlueCircle(out const Vector Position);// 0x1e5e168
	bool IsInBlueCircle(Actor* _actor);// 0x1e5e0e8
	bool HasDoubleCircleEnabled();// 0x1e5e0cc
	Vector GetWhiteCircle(int Index);// 0x1e5e03c
	Vector GetInnerCircleInfo();// 0x1e5e018
	Vector GetCustomWhiteCircleConfigByIndex(int Index, int RandomIndex);// 0x1e5df44
	Vector GetCustomBlueCircleConfigByIndex(int Index);// 0x1e5deb4
	Vector GetCurrentWhiteCircle();// 0x1e5de90
	int GetCurrentCircleIndex();// 0x1e5de68
	Vector GetCurrentBlueCircle();// 0x1e5de44
	void ApplyCircleOffset(Vector InOffset);// 0x1e5ddd4

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0, Size: 12]
	FString TimerName;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	float[] BlueCirclePreWarning;//[Offset: 0x10, Size: 12]
	float LastTime;//[Offset: 0x1c, Size: 4]
	float Pain;//[Offset: 0x20, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	Vector2D bluepoint;//[Offset: 0x28, Size: 8]
	float blueradius;//[Offset: 0x30, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x38, Size: 12]
	float whiteradius;//[Offset: 0x44, Size: 4]
	float Alpha;//[Offset: 0x48, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float DestinyChance;//[Offset: 0x50, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x58, Size: 4]
	float ExtraRadius;//[Offset: 0x5c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x64, Size: 4]
	float DamageMagnifier;//[Offset: 0x68, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x6c, Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x70, Size: 12]
	float EdgeDistance;//[Offset: 0x7c, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2cc, Size: 4]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool IsInWater(Vector Position);// 0x1e5f418
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x1e5f2ec

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float SimulatedCharacterServerTimeHighPrecision();// 0x1f078d8
	float SimulatedCharacterServerTime();// 0x1f06a0c
	byte ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* shooter, out const BulletHitInfoUploadData ShootData);// 0x1f876a8

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x2fc, Size: 44]
	int KeepStillMinTime;//[Offset: 0x328, Size: 4]
	float StillMaxSpeed;//[Offset: 0x32c, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x330, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x33c, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x348, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x354, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x360, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x36c, Size: 12]
	byte VerifyWeaponOwnerPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x1f06b9c
	byte VerifyServerVictmPosByNetDelay(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon, STExtraCharacter* Victim);// 0x1f06a3c
	float SimulatedCharacterServerTime();// 0x1f06a0c

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x578, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x57c, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x580, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x584, Size: 1]
	float InterpSpeed;//[Offset: 0x588, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58d, Size: 1]
	float ScaleOfPawn;//[Offset: 0x590, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x594, Size: 60]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x5d4, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x5dc, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x1eadc30
	Vector GetIKEffectorOffsetMinValue();// 0x1eadc04
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x1eada20

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	float BulletHitTime;//[Offset: 0x18, Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x516, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x517, Size: 1]
	Vector ServerShootPos;//[Offset: 0x518, Size: 12]
	float ServerShootTime;//[Offset: 0x524, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x530, Size: 80]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x5a0, Size: 4]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x1e2eaf0
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x1f78c48
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x1f78b30
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x1e2ea4c
	void OnImpact(out const HitResult _ImpactResult);// 0x1e2e9a8
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1f78934

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x12c, Size: 12]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x138, Size: 12]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x148, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x170, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x198, Size: 12]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x1a4, Size: 60]
	ParticleSystem* ExplosionParticle;//[Offset: 0x1e0, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x208, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x230, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x258, Size: 60]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	<int,FName> SeatSockets;//[Offset: 0x298, Size: 60]

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0xcc, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0xd8, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0xdc, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0xe4, Size: 8]
	float ScopeInDelayTime;//[Offset: 0xec, Size: 4]
	float InitialLockFrameLength;//[Offset: 0xf0, Size: 4]
	float FinalLockFrameLength;//[Offset: 0xf4, Size: 4]
	float MaxSeekDeistance;//[Offset: 0xf8, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0xfc, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x100, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x104, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x108, Size: 4]
	float TraceTargetInterval;//[Offset: 0x10c, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x110, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x114, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x150, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x18c, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1c8, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x1cc, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x1d0, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x1d4, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1d8, Size: 4]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x1e0, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x1ec, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x1f8, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x214, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x218, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x21c, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 1]
	void ShowEnemyLaunchRocketTips();// 0x1efd694
	void SetCurrentLockTarget(Actor* InTarget);// 0x1f9f36c
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x1f9f270
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x1f9f1bc
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x1f9f0c0
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x1f9f00c
	void RemoveTargetList(Actor*[] TargetList);// 0x1f9eeb4
	void RemoveTarget(Actor* Target);// 0x1f9ee3c
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x29fa2f4
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x29fa2f4
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x29fa2f4
	void InitComplete();// 0x1dd8bcc
	void HandleTargetOutOfSeekArea();// 0x1f9ee28
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x1f0b978
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x1f00824
	enum GetCurrentSeekAndLockStage();// 0x1f9edf8
	Actor* GetCurrentLockTarget();// 0x1f9edd0
	bool CheckTargetIsVisible(Actor* Target);// 0x1f0b7ac
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x1f9ed50
	void AddTarget(Actor* Target);// 0x1f9ecd8

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xd0, Size: 12]
	delegate OnBuffDetached;//[Offset: 0xdc, Size: 12]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x128, Size: 12]
	FString ServerBuffString;//[Offset: 0x134, Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x140, Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x144, Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x2230be0
	void ResetForDeath();// 0x2230bcc
	void RepBuffSyncList();// 0x2230bb8
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x2230a9c
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x2230940
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x2230824
	void RefreshAllBuffs();// 0x1f36600
	bool IsBufferMutexed(FName NewBuffName);// 0x22307a4
	bool HasBuffID(int BuffID);// 0x2230724
	bool HasBuff(FName BuffName);// 0x22306a4
	Pawn* GetPawnOwner();// 0x223067c
	FName GetBuffName(int BuffID);// 0x22305f4
	int GetBuffID(FName BuffName);// 0x2230574
	float GetBuffExpiry(out const FName BuffName);// 0x22304e0
	STBaseBuff* GetBuffByName(FName BuffName);// 0x2230460
	Actor* GetActorOwner();// 0x2230438
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x22301d8
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x22302ec
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x22301d8
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x223008c
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x222ffc8
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x222fef8
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x222fe24
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x29fa2f4
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x29fa2f4
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x222fd60
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x222fc94
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x222fb3c
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x222f9a0

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0, Size: 8]
	Controller* BuffCauser;//[Offset: 0x8, Size: 4]
	int LayerCount;//[Offset: 0xc, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x10, Size: 4]
	float RemainingTime;//[Offset: 0x14, Size: 4]
	float ExpireTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 8]
	int LayerCount;//[Offset: 0x14, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x18, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float Expiry;//[Offset: 0x20, Size: 4]
	Actor* Target;//[Offset: 0x24, Size: 4]
	Actor* BuffApplier;//[Offset: 0x28, Size: 4]
	int BuffIndex;//[Offset: 0x2c, Size: 4]
	uint32 DamageCauseID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x24, Size: 12]
	FString DisplayName;//[Offset: 0x30, Size: 12]
	FString Message;//[Offset: 0x3c, Size: 12]
	Texture2D* Icon;//[Offset: 0x48, Size: 4]
	SoundBase* SoundData;//[Offset: 0x4c, Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	int LayerMax;//[Offset: 0x58, Size: 4]
	int InitialLayerCount;//[Offset: 0x5c, Size: 4]
	int LayerCount;//[Offset: 0x60, Size: 4]
	float ValidityTime;//[Offset: 0x64, Size: 4]
	float Internal;//[Offset: 0x68, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x6c, Size: 12]
	float Expiry;//[Offset: 0x78, Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0x7c, Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x8a, Size: 1]
	FName[] MutexBuffers;//[Offset: 0x8c, Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0x98, Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xa4, Size: 12]
	float fADScale;//[Offset: 0xb0, Size: 4]
	float fAPScale;//[Offset: 0xb4, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	Controller* CauserPawnController;//[Offset: 0xbc, Size: 4]
	Actor* CauserPawnActor;//[Offset: 0xc0, Size: 4]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0xd0, Size: 12]
	Actor* BuffApplier;//[Offset: 0xdc, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xe0, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x4c86e74
	bool IsOK_Internal();// 0x4c86e00
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x4c86d10
	UTSkill* GetOwnerSkill();// 0x4c86ca8

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	FString EffectName;//[Offset: 0xc4, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0xd0, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0xd4, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0xdc, Size: 4]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4c8a704
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x4c8a588
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x4c8a380
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x4c8a204
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x4c8a088
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x4c89f14
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x4c89d98
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x4c89c10
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x4c89a90
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x4c89914
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x4c89760
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x4c89640
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x4c89520
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x4c89400
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x4c892e0
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x4c891c0
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x4c890a0
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x4c88f80
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x4c88e60
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x4c88d40
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x4c88c20
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x4c88b00
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x4c889e4
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x4c88870
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x4c88730
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x4c885e4
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x4c884a4
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x4c88388
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x4c88250
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x4c88134
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x4c88014
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x4c87ef8
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x4c87ddc
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x4c87cbc
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x4c87b48
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x4c87a5c
	UAEBlackboard* GetUAEBlackboard();// 0x4c879ec
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x4c8797c
	Actor* GetOwnerPawn();// 0x4c8790c
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x4c87804
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x4c87770

--------------------------------
Class: UTSkill.Actor.Object
	Pawn* OwnerPawn;//[Offset: 0x2d4, Size: 8]
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	FString SkillName;//[Offset: 0x2e8, Size: 12]
	FName SkillGroup;//[Offset: 0x2f8, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bOBResimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	enum SkillCastType;//[Offset: 0x302, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x303, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	int SkillID;//[Offset: 0x308, Size: 4]
	enum SkillTargetType;//[Offset: 0x30c, Size: 1]
	FString SkillDescription;//[Offset: 0x310, Size: 12]
	FString SkillDetailDes;//[Offset: 0x31c, Size: 12]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b, Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x330, Size: 312]
	int SkillCategory;//[Offset: 0x468, Size: 4]
	Texture2D* SkillIcon;//[Offset: 0x46c, Size: 4]
	Texture2D* SkillVehicleIcon;//[Offset: 0x470, Size: 4]
	FString SkillVehicleName;//[Offset: 0x474, Size: 12]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 1]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x483, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x484, Size: 12]
	bool IsCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x494, Size: 12]
	Actor* LastSpawnedActor;//[Offset: 0x4a0, Size: 8]
	Pawn* LastSpawnedPawn;//[Offset: 0x4a8, Size: 8]
	float PhasePercentage;//[Offset: 0x4c8, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x4cc, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x508, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x50c, Size: 12]
	int64 LastEditBluePrintTime;//[Offset: 0x518, Size: 8]
	int CurComponentNameIndex;//[Offset: 0x520, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	SkillGlobalUIDDataAsset* LoadedGlobalUIDDataAsset;//[Offset: 0x52c, Size: 4]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x530, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x538, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x4c7e3e4
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x4c7e2a0
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x4c7e0d4
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7dfe4
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x4c7df7c
	UAEBlackboard* GetSpecificBlackboard();// 0x4c7df14
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7de38
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x4c7dd4c
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x4c7dbfc
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x4c7daac
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x4c7d928

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillGroupIndex;//[Offset: 0x4, Size: 4]
	float interval;//[Offset: 0x8, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0xc, Size: 4]
	FString CoolDownMessage;//[Offset: 0x10, Size: 12]
	int CoolDownMessageID;//[Offset: 0x1c, Size: 4]
	float Range;//[Offset: 0x20, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x24, Size: 12]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x34, Size: 12]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x40, Size: 60]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x7c, Size: 60]
	SoftClassPath SkillMainWidget;//[Offset: 0xb8, Size: 24]
	FName SkillWidgetAttachPanelName;//[Offset: 0xd0, Size: 8]
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	<enum,SlateBrush> SkillIcons;//[Offset: 0xdc, Size: 60]
	int SkillMainWidgetHandle;//[Offset: 0x118, Size: 4]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x120, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x12c, Size: 12]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0xc0, Size: 12]
	FString PhaseDescription;//[Offset: 0xcc, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0xdc, Size: 8]
	int ActionsTopHalfCount;//[Offset: 0xfc, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x100, Size: 100]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x164, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x4c9df6c
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4c9de88
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4c9dda4
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4c9dcc0
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4c9db64
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4c9da08
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x4c9d924
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x4c9d7c4
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x4c9d664
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x4c9d588
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x4c9d498
	bool ClearAttachments();// 0x4c9d42c

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4, Size: 12]
	float AltPhaseDuration;//[Offset: 0x10, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x14, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	int CoolDownIndex;//[Offset: 0x1c, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x20, Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x2c, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x30, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x3c, Size: 12]
	enum PhaseType;//[Offset: 0x48, Size: 1]
	FString EnterPhaseTipString;//[Offset: 0x4c, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x58, Size: 12]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0xe0, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x10c, Size: 12]
	Actor*[] IgnoreTargets;//[Offset: 0x118, Size: 12]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	byte hitPhysMatType;//[Offset: 0x2c, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0xe0, Size: 4]
	float fAPScale;//[Offset: 0xe4, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0xe8, Size: 12]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x4c8bb64
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4c8ba80
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4c7f588
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4c7f438
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4c7f2e8
	void OnAsyncLoadSoftPathDone();// 0x4c8ba20
	UTSkill* GetOwnerSkill();// 0x4c86ca8
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x4c8b8d0
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7f0b4

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x150, Size: 4]
	Actor* OwnerActor;//[Offset: 0x164, Size: 4]
	int[] SkillInitIndices;//[Offset: 0x168, Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177, Size: 1]
	bool NeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x17c, Size: 60]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x1b8, Size: 12]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x1c4, Size: 4]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x1c8, Size: 4]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x1cc, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x208, Size: 60]
	delegate ChangeActorBlackboard;//[Offset: 0x244, Size: 12]
	Actor* Target;//[Offset: 0x250, Size: 4]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x254, Size: 60]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x290, Size: 12]
	delegate OnSkillHit;//[Offset: 0x29c, Size: 12]
	delegate OnSkillCast;//[Offset: 0x2a8, Size: 12]
	float PhasePercentage;//[Offset: 0x2cc, Size: 4]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x2d0, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x30c, Size: 12]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x318, Size: 60]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x354, Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x364, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x38c, Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x3b4, Size: 12]
	FString LastESkillTargetDesc;//[Offset: 0x3c4, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x3d0, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x3d4, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x3dc, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x3e0, Size: 60]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	float ZombieModeUseSkillCD;//[Offset: 0x42c, Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x434, Size: 4]
	SkillParamater[] SkillParamaters;//[Offset: 0x448, Size: 12]
	UTMutilSkillSynData[] SkillSynData;//[Offset: 0x454, Size: 12]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x46c, Size: 12]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x488, Size: 60]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x4c4, Size: 60]
	delegate OnSkillInitSignature;//[Offset: 0x548, Size: 12]
	delegate SkillStartEvent;//[Offset: 0x554, Size: 12]
	delegate SkillStopEvent;//[Offset: 0x560, Size: 12]
	delegate SkillNormalStopEvent;//[Offset: 0x56c, Size: 12]
	int[] PendingRemoveSkillID;//[Offset: 0x578, Size: 12]
	<int,byte> CurSKillLevels;//[Offset: 0x584, Size: 60]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x5c0, Size: 12]
	void UpdateSyncSkillCDData(int SkillID);// 0x4c980d4
	void UpdateSyncSkillActiveState(int SkillID);// 0x4c98004
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x4c97f34
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x4c97dc4
	void TryAddOneSkill(int SkillID, bool bActive);// 0x4c97c54
	void TriggerEvent(int SkillID, byte EventType);// 0x4c97b00
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x4c977f4
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x4c975dc
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x4c97480
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x4c97344
	void StopSkillAll(enum StopReason);// 0x4c9725c
	void StopSkill_WithID(int SkillID, enum StopReason);// 0x4c9710c
	int StopSkill_Mutil(int SkillID, enum StopReason);// 0x4c96fb4
	void StopSkill(int SkillID, enum StopReason);// 0x4c96e64
	bool ShouldTriggerEvent_WithID(int SkillID, byte EventType);// 0x4c96d04
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x4c96ba4
	bool SetupOwnerAndSystem();// 0x4c96b38
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x4c969ec
	void SetSkillOwner(Actor* tempActor);// 0x4c96908
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x4c967d0
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x4c96698
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x4c96560
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet);// 0x4c96344
	void SetCurSkill(int SkillID, int SkillSlot);// 0x4c9620c
	void ServerTriggerEvent_WithID(int SkillID, byte EventType);// 0x4c96074
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x4c95edc
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x4c95d58
	void ServerNotifyRandomSeed(int Seed);// 0x4c95c38
	void ResimulateAllSynData();// 0x4c95bd0
	void ResetSkillCollDown(int SkillID);// 0x4c95aec
	void ResetAllSkillCollDown();// 0x4c95a84
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestIDs);// 0x4c957a4
	void RepSkillHitInfo();// 0x4c95744
	void RepOneSkillSynData(int SkillSlot, int InLastSkillID);// 0x4c9560c
	void RepLastCastTime();// 0x4c955ac
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x4c95474
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath ObjPath);// 0x4c95248
	void RemoveReplacedSkill(int OldSkillID);// 0x4c95178
	void RemoveAllSkillUIWidget();// 0x4c95118
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath ObjPath);// 0x4c94eec
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x4c94db4
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x4c94c74
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x4c94b2c
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x4c949dc
	static bool OnSameTeam(Actor* A, Actor* B);// 0x4c948a4
	void OnRep_SkillSynSinglePhaseData();// 0x4c9483c
	void OnRep_SkillSynData();// 0x4c947d4
	void OnRep_SkillHitInfo();// 0x4c9476c
	void OnRep_SkillCDDatas();// 0x4c9470c
	void OnRep_SkillActiveState();// 0x4c946ac
	void OnRep_ReplaceSkill();// 0x4c9464c
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x4c944fc
	bool IsUsingSkill(int SkillID);// 0x4c94420
	bool IsSkillActived(int SkillID);// 0x4c94344
	bool IsReadyToCastSkill(int SkillID);// 0x4c94254
	bool IsCurrentUseSkillID(int InSkillID);// 0x4c94178
	bool IsCastingSkill();// 0x4c94104
	void InitSkillSystem_WithID(bool IsDedicateServer);// 0x4c93ff4
	void InitSkillSystem(bool IsDedicateServer);// 0x4c93ee4
	UAEBlackboard* GetUAEBlackboardBySkillId(int SkillID);// 0x4c93df8
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x4c93d20
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x4c93c34
	UTSkillStateSyncData[] GetSkillState();// 0x4c93ba0
	int GetSkillSlotBySkillID(int SkillID);// 0x4c93ac8
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x4c939f0
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x4c938bc
	int GetSkillLevel(int SkillID);// 0x4c937e4
	int GetSkillLastPhase(UTSkill* Skill);// 0x4c9370c
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x4c93620
	int GetSkillIDByClass(class Object SkillClass);// 0x4c93534
	int GetSkillCurPhase(UTSkill* Skill);// 0x4c9345c
	UTSkill* GetSkillByName(FString SkillName);// 0x4c932e4
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x4c9316c
	UTSkillCreateData GetSkillBaseDataBySkill(UTSkill* Skill);// 0x4c93078
	UTSkillCreateData GetSkillBaseDataByClass(class Object SkillClass);// 0x4c92f84
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x4c92e90
	UTSkill* GetSkill(int SkillID);// 0x4c92da4
	int GetReplacedSkill(int OldSkillID);// 0x4c92ccc
	byte GetRealOwnerRoleSafety();// 0x4c92c44
	float GetLastCastTime_WithID(int SkillID);// 0x4c92b68
	float GetLastCastFinishTime_WithID(int SkillID);// 0x4c92a8c
	int[] GetCurUsingSkillIDS();// 0x4c929f8
	UTSkill*[] GetCurSkills();// 0x4c92964
	UTSkillPhase*[] GetCurSkillPhases();// 0x4c928d0
	UTSkillPhase* GetCurSkillPhase_Mutil(int SkillSlot);// 0x4c927f8
	UTSkillPhase* GetCurSkillPhase(int SkillSlot);// 0x4c92720
	int[] GetCurSkillIDs();// 0x4c926a0
	int GetCurSkillID(UTSkill* Skill);// 0x4c925c8
	UTSkill* GetCurSkill_Mutil(int SkillSlot);// 0x4c924f0
	UTSkill* GetCurSkill(int SkillSlot);// 0x4c92418
	int[] GetCurMonopolizeSkills();// 0x4c92384
	int FindRelatedCurSkillID(int SkillID, out int OutRelatedSkillSlot, bool bPeekSlotIndex);// 0x4c9216c
	UTSkill* FetchSkill_WithID(out int SkillID);// 0x4c92048
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x4c91ed0
	void ClearSkill();// 0x4c91e68

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0xfc, Size: 60]
	FString LuaFilePath;//[Offset: 0x138, Size: 12]
	void UnRegistLuaTick();// 0x4d4e158
	void RegistLuaTick(float TickInterval);// 0x4d4e574

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int SkillLevel;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	float LastActiveTime;//[Offset: 0x4, Size: 4]
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float InitEnergy;//[Offset: 0xc, Size: 4]
	float MaxEnergy;//[Offset: 0x10, Size: 4]
	float CurEnergy;//[Offset: 0x14, Size: 4]
	float DeltaEnergy;//[Offset: 0x18, Size: 4]
	float SyncCount;//[Offset: 0x1c, Size: 4]
	float TickCountTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTMutilSkillSynData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int Token;//[Offset: 0x4, Size: 4]
	int PhaseIndexes;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int CurSkillPhase;//[Offset: 0x4, Size: 4]
	byte UpdateFlag;//[Offset: 0x8, Size: 1]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x354, Size: 4]
	int SkillID;//[Offset: 0x358, Size: 4]
	float TickInterval;//[Offset: 0x35c, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	void TriggerPassiveEvent(byte SkillEvent);// 0x4ca0fcc
	void TriggerEvent(byte SkillEvent);// 0x4ca0ef8
	void SetSkillManager(UTSkillManagerComponent* manager);// 0x4ca0e28
	void SetSkillID(int InSkillID);// 0x4ca0d58
	void RemoveSkillUI();// 0x4ca0cf0
	void RemoveFromUIManager();// 0x4ca0c90
	void OnSkillStopEvent(int InSkillID, enum InStopReason);// 0x4ca0b40
	void OnSkillStartEvent(int InSkillID);// 0x4ca0a5c
	bool IsTickFinish();// 0x4ca09f0
	bool IsCDReady();// 0x4ca0984
	FString GetSkillName();// 0x4ca08f0
	UTSkillManagerComponent* GetSkillManager();// 0x4ca0888
	int GetSkillID();// 0x4ca0820
	float[] GetSkillCDProgess();// 0x4ca078c
	float[] GetSkillCDByType(int Type);// 0x4ca0684
	UTSkillCDBase*[] GetSkillCDBases();// 0x4ca05f0
	UTSkill* GetSkill();// 0x4ca0588
	float GetMaxEnergy(int Index);// 0x4ca04ac
	PlayerController* GetLocalPlayerController();// 0x4ca0444
	float GetEnergyValue(int Index);// 0x4ca0368
	float GetEnergyThreshold(int Index);// 0x4ca028c
	float GetDeltaEnergy(int Index);// 0x4ca01b0
	void DoRemove();// 0x4ca0150

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x344, Size: 12]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x68, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x70, Size: 8]
	enum cdType;//[Offset: 0x78, Size: 1]
	FString cdTypeStr;//[Offset: 0x7c, Size: 12]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x88, Size: 4]
	bool StopConsumCD();// 0x4c86060
	bool IsTickFinish();// 0x4c85fec
	bool IsCDReady();// 0x4c85f78
	float GetCurrentTime();// 0x4c85f04
	bool ForceConsumCD();// 0x4c85e90
	bool ConsumCD();// 0x4c85e1c

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0xe0, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0xe4, Size: 12]
	FName PreEventActionTag;//[Offset: 0xf0, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0xf8, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0xfc, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x108, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SkillGlobalUIDDataAsset.DataAsset.Object
	<FString,int> AllSkillUIDMap;//[Offset: 0x20, Size: 60]
	<int,FString> AllSkillPathMap;//[Offset: 0x5c, Size: 60]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0xf4, Size: 4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0xf8, Size: 4]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	Object* EventObj;//[Offset: 0x100, Size: 4]
	void UpdateAction_Internal(float DeltaSeconds);// 0x4c7fcac
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x4c7fb68
	void UndoAction_Internal();// 0x4c7fb00
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7fa30
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7f960
	void Reset_Internal();// 0x4c7f8f8
	void Reset(ActorComponent* SkillManagerComponent);// 0x4c7f828
	bool RealDoAction_Internal();// 0x4c7f7b4
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7f6d8
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4c7f588
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4c7f438
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x4c7f2e8
	void OnAsyncLoadAssetDone(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7f218
	bool JudgeNeedPhaseWait();// 0x4c7f1a4
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x4c7f0b4

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	void UpdateAttribute(int TemplateID);// 0x1dbb2dc
	void InitializeFollow();// 0x1dbb2c0
	void Initialize(Actor* Actor);// 0x1dbb240

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xc8, Size: 12]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xd4, Size: 12]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0xe0, Size: 12]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0xec, Size: 12]
	FString HitBox_Stand_Tag;//[Offset: 0xfc, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108, Size: 12]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x118, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x124, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x128, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x12c, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x130, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x138, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x140, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x148, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x150, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x158, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x160, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x19c, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1a4, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x1dd8b4c
	void UpdateAllInstanceBodyTransform(int Type);// 0x1f4ed24
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x1f4eca4
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x1f4ec10
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x1f4eb44
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x1f4e9d0
	byte GetCurHitPartJugementType();// 0x1f4e9a8
	void CloseBodyBulletCollision();// 0x1dbb2c0
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x1f4e80c

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0, Size: 4]
	int MaxCheatTimes;//[Offset: 0xc4, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xc8, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe4, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xe8, Size: 4]
	float MaxSkeletonLength;//[Offset: 0xec, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0, Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0xfc, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x100, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x104, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x108, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x114, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x120, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x12c, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x138, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x144, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x150, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x15c, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x168, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x174, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x180, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x18c, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x198, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1a4, Size: 12]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x220, Size: 136]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2a8, Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x2f8, Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x330, Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x3a8, Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x410, Size: 32]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x430, Size: 1396]
	float MaxJumpHeight;//[Offset: 0x9a8, Size: 4]
	Character* CharacterOwner;//[Offset: 0x9ac, Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1c, Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0xa24, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x1f34060
	void RefreshRealMaxJumpHeight();// 0x1dd8bcc
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x1f33ee4
	void Ping2Client(float ServerTime);// 0x1f33e6c
	void OnPreReconnectOnServer();// 0x1f33e58
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x1f33bec
	void DebugDrawLine(const Vector Start, const Vector End);// 0x1f33b40
	void ClearJumpLimit();// 0x1dd8bcc

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int VerifyFailedCnt;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24, Size: 4]
	int MaxClientSpeed;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xbc, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xc0, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0xfc, Size: 12]
	byte RoleBits;//[Offset: 0x108, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0, Size: 4]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1e1cf78

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0xc4, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0xd8, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0xdc, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0xe0, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0xe4, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0xe8, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0xec, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0xf0, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0xf4, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0xf8, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0xfc, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x100, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x104, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x108, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x10c, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x110, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x114, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x118, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	float Opened_AcceFall;//[Offset: 0x120, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x124, Size: 4]
	float Opened_AcceForward;//[Offset: 0x128, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x12c, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x130, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x134, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x138, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x13c, Size: 4]
	float Opened_AcceRight;//[Offset: 0x140, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x144, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x148, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x14c, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x150, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x154, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x158, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x15c, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x160, Size: 12]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x16c, Size: 12]
	Vector Launch_Accel;//[Offset: 0x178, Size: 12]
	float Launch_YawRandomDelta;//[Offset: 0x184, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x188, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x18c, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x190, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x194, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x198, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x19c, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x1a0, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x1a4, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x1a8, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x1ac, Size: 12]
	delegate OnResetLaunch;//[Offset: 0x1b8, Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x1c4, Size: 12]
	float CurrentFallSpeed;//[Offset: 0x1d0, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x1d4, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x1d8, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	float FollowerDist;//[Offset: 0x200, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x204, Size: 4]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x250, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x278, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x1e570b0
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x1e56f14
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x1e56dcc
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x1e56c30
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x1e56b30
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x1e56a30
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x1e568e4
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x1e56790
	void StopParachute();// 0x1e5677c
	void StartParachute();// 0x1e56768
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x1e566e8
	void ResetVelocity();// 0x1e566d4
	void RemoveRadiouBlur();// 0x1e566c0
	void PostNetReceiveNewState();// 0x1e566ac
	void OnPreReconnectOnServer();// 0x1e56698
	void OnAsyncLoadRadiouBlurDone();// 0x1e56684
	void InvalidateAdjustFollowerLocation();// 0x1e56670
	void InitRadiouBlurMat();// 0x1e5665c
	float GetReplicatedRightInput();// 0x1e56634
	float GetReplicatedForwardInput();// 0x1e5660c
	Vector GetParachuteVelocity();// 0x1e565c4
	Vector GetLaunchInitVelocity();// 0x1e56574
	void ClearParachuteStatusCache();// 0x1e56560
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1e5643c
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1e56320
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1e561fc
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x1e560e0
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x1e55f90
	void AdjustFollowerLocation();// 0x1e55f7c
	void AddRadiouBlur(float InWeight);// 0x1e55f04

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc, Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: GroupPhysicsComponent.ActorComponent.Object
	PrimitiveComponent*[] PrimitiveComponents;//[Offset: 0xe4, Size: 12]
	void ResetPhysicsGroup();// 0x1dbb2c0
	void K2_GroupPhysics(int InMaskFilter, bool EnableCache);// 0x1ee8de8
	int K2_GetQueryMask();// 0x1ee8dc0
	int K2_GetPhysicsGroup();// 0x1ee8d98
	bool IsPhysicsGrouped();// 0x1ee8d7c
	void GroupPhysics(byte MaskFilter, bool EnableCache);// 0x1ee8cb0
	byte GetQueryMask();// 0x1ee8c88
	byte GetPhysicsGroup();// 0x1ee8c60

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0xcc, Size: 4]
	float AssistAccountableDuration;//[Offset: 0xd0, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0xd4, Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0xdc, Size: 4]
	int MaxDeathTimes;//[Offset: 0xe0, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0xe8, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xec, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0xf0, Size: 4]
	float Breath;//[Offset: 0xf4, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0xf8, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0xfc, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x108, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x10c, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x110, Size: 8]
	float SetHealthSafety(float AddVal);// 0x1fe6980
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x1fe686c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x1fe6758
	void ResetDataOnRespawn();// 0x1fe6744
	void RescueFinishSuccessfully();// 0x1fe6730
	void OnRep_BreathChanged();// 0x1fe6354
	bool IsNearDeathInvincible();// 0x1fe6708
	bool IsHealthAlive();// 0x1fe66e0
	bool IsHaveLastBreathStatus();// 0x1fe66b8
	bool IsFinishedLastBreathStatus();// 0x1fe6690
	void InitializeOwner(Pawn* TempPawn);// 0x1fe6618
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x1fe6450
	Controller* GetRecordedEventInstigator();// 0x1fe6434
	float GetBreathMax();// 0x1fe6418
	float GetBreath();// 0x1fe63fc
	void EnterSwimWhileDying();// 0x1fe63e8
	void EnableDirectlyDie(bool bEnable);// 0x1fe6368
	void DoFinishLastBreath();// 0x1fe6354
	void ClearNearDeathTeammate();// 0x1fe6340
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x1fe6274
	void AddDeadBuff();// 0x1fe6260

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xbc, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xc0, Size: 4]
	anPickerData FanData;//[Offset: 0xc4, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0xf0, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0xf4, Size: 4]
	float RestoringDuration;//[Offset: 0x110, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x114, Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x120, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x128, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x1fe785c
	void WaitingConfirmState_ActOnUnsatisfied();// 0x1fe7848
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x1e836a4
	void TickAsHelper(float DeltaTime);// 0x1fe77d0
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x1fe771c
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x1fe76a4
	bool RescueingState_IsConditionSatisfied();// 0x1fe767c
	void RescueingState_ActOnUnsatisfied();// 0x1fe7668
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x1e836a4
	void RescueingProcessFinished();// 0x1fe7654
	bool PlayerConfirmToRescueClientSide();// 0x1fe762c
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x1fe7558
	void OnRep_IsRescueingOtherStatusChange();// 0x1fe7544
	bool IsInRescueingStatus();// 0x1fe751c
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x1fe7460
	float GetRestoringDuration();// 0x1fe7438
	void DrawDebugFan();// 0x1dd8bcc

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8, Size: 4]
	float CanFollowDist;//[Offset: 0xcc, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0, Size: 4]
	float QuitFollowDist;//[Offset: 0xd4, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8, Size: 4]
	float DistThrehold;//[Offset: 0xdc, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x124, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x1fe2be0
	void WaitingConfirmState_ActOnUnsatisfied();// 0x1fe2bcc
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x1e836a4
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x1fe2b54
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x1fe2adc
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x1fe2a64
	bool PlayerStopFollow();// 0x1fe2a3c
	bool PlayerConfirmToFollow();// 0x1fe2a14
	void InitializeOwner(Pawn* _TempPawn);// 0x1fe299c
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x1fe2924
	bool FollowingState_IsConditionSatisfied();// 0x1fe28fc
	void FollowingState_ActOnUnsatisfied();// 0x1fe28e8
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x1fe2870

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x1f53eb8
	byte Start();// 0x1e65bd4
	bool IsValidate();// 0x1f3db10
	void DebugDraw(Color DebugColor, bool isPersist);// 0x20e5ec8
	void Awake();// 0x1f53e9c

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80, Size: 4]
	byte Update(float DeltaTime);// 0x1e7bda4
	FString ToString();// 0x20e5f8c
	void TaskRemoved();// 0x1f53eb8
	byte Start();// 0x1e65bd4
	bool IsValidate();// 0x1f3db10
	bool IsReachable();// 0x1ed0be0
	byte Finish();// 0x1ed0d18
	void DebugDraw(Color DebugColor, bool isPersist);// 0x20e5ec8
	void Awake();// 0x1f53e9c

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x3ac, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x3b0, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x3b4, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x3b8, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 1]
	float ResultMinPitch;//[Offset: 0x3dc, Size: 4]
	float ResultMaxPitch;//[Offset: 0x3e0, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x3e8, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x3ec, Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x408, Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x424, Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x440, Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x45c, Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x478, Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x494, Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x4b0, Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x4cc, Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x4e8, Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x504, Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x520, Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x53c, Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x558, Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x574, Size: 28]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x590, Size: 28]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x5ac, Size: 28]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x5c8, Size: 28]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x5e4, Size: 28]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x600, Size: 28]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x61c, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x620, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x624, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x628, Size: 28]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x648, Size: 28]
	float AdditionalSocketOffetZMax;//[Offset: 0x668, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x66c, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x674, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x678, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x67c, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x686, Size: 1]
	float OffsetCountTime;//[Offset: 0x688, Size: 4]
	float OffSetDurTime;//[Offset: 0x68c, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x690, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x694, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x6a0, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x6d0, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x6e0, Size: 16]
	void SetSelfieCameraDefRotation();// 0x1e6d84c
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x1e6d740
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1e6d67c
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1e6d510
	void DelayRotationLagEnabledEnd();// 0x1e6d4fc
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x1e6d434

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x318, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x31c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x320, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x36c, Size: 28]
	CameraOffsetData DefaultCameraData;//[Offset: 0x388, Size: 28]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x3a8, Size: 4]
	void OnRespawned();// 0x1e2bb0c
	Rotator GetTargetRotation();// 0x20c0c08
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x1e6d510
	void ClearCameraData();// 0x20c0bec

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int WeaponId;//[Offset: 0x1c, Size: 4]
	int FloorType;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x690, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x694, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x698, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x69c, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x6bc, Size: 4]
	float EnterShovelCD;//[Offset: 0x6c0, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x6c4, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x6c8, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x6cc, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x6d0, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x6d4, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x6d8, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x6dc, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x6e0, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x6e4, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x6e8, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x6ec, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x6f0, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x6f4, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x6f8, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x700, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x704, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x708, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x70c, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x710, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x714, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x718, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x71c, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x720, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x724, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x728, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x72c, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x730, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x734, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x738, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x740, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x758, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x75c, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x760, Size: 4]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x768, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x76c, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x77b, Size: 1]
	float PreShovelFov;//[Offset: 0x77c, Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x7a4, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x7ac, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b1, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x7b4, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ba, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x7bc, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c1, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x7c4, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c8, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x7cc, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x7d0, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x7d4, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x7d8, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x7dc, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x7e0, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x7e4, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x7e8, Size: 4]
	float ProneFloorAngle;//[Offset: 0x7ec, Size: 4]
	float ProneFloorZ;//[Offset: 0x7f0, Size: 4]
	float JumpFloorAngle;//[Offset: 0x7f4, Size: 4]
	float JumpFloorZ;//[Offset: 0x7f8, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x7fc, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x800, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x808, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x80c, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x828, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82a, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x82c, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 1]
	float CheckDistanceAhead;//[Offset: 0x918, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x920, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0x934, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0x938, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0x93c, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0x940, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0x948, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0x94c, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0x950, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0x958, Size: 12]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0x970, Size: 12]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0x97c, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0x994, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x99c, Size: 4]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 1]
	float MaxFlyAcceleration;//[Offset: 0x9b8, Size: 4]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x1fe5228
	void ToggleUserCmdDelta(bool Val);// 0x1fe5170
	void TimeSpeedCheck(bool Val);// 0x1fe50b8
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x1fe500c
	void SetProneFloorZ(float InProneFloorZ);// 0x1fe4f94
	void SetProneFloorAngle(float InProneFloorAngle);// 0x1fe4f1c
	void SetJumpFloorZ(float InJumpFloorZ);// 0x1fe4ea4
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x1fe4e2c
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x1fe4d14
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x1fe4be8
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x1fe499c
	void ServerUserMoveCmd(uint32 Sequence, uint32 CheckSum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x1fe47dc
	void RefreshCharacterWithBase();// 0x1fe47c8
	void Ping2Server(float ServerTime, float ClientTime);// 0x1fe46dc
	void Ping2Client(float ServerTime);// 0x1fe4664
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x1fe459c
	void OnRecoverOnServer();// 0x1fe4580
	void OnPreReconnectOnServer();// 0x1fe456c
	void OnClientCloseUserCmdDelta();// 0x1fe4558
	float K2_GetProneFloorZ();// 0x1fe4530
	float K2_GetProneFloorAngle();// 0x1fe4508
	float K2_GetJumpFloorZ();// 0x1fe44e0
	float K2_GetJumpFloorAngle();// 0x1fe44b8
	bool IsWalkable(out const HitResult Hit);// 0x1fe440c
	bool IsProning();// 0x1fe43e4
	STExtraBaseCharacter* GetSTCharacter();// 0x1fe43bc
	Vector GetPendingImpulse();// 0x1fe4398
	Vector GetLocationOffsetToBase();// 0x1fe4350
	float GetLastServerMoveTime();// 0x1fe4328
	bool GetIsOpenShovelingAbility();// 0x1fe4300
	Vector GetBaseLocation();// 0x1fe42b8
	bool DragOnGround(float DeltaTime);// 0x1fe4238
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1fe3f90
	void ClientUserMoveCmdAck(int Sequence);// 0x1fe3f18
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1fe3c10
	void ChangePhysxShapeFlag();// 0x1dd8bcc

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2cc, Size: 4]
	float MaxQuadLength;//[Offset: 0x2d0, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2d4, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2d8, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x2dc, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	float DefaultTrailLength;//[Offset: 0x2e4, Size: 4]
	float TextureLength;//[Offset: 0x2e8, Size: 4]
	int USegmentNum;//[Offset: 0x2ec, Size: 4]
	int CoordU;//[Offset: 0x2f0, Size: 4]
	int SlippingCoordU;//[Offset: 0x2f4, Size: 4]
	int BrokenCoordU;//[Offset: 0x2f8, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x300, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x304, Size: 4]
	int AdditionalCoordU;//[Offset: 0x308, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x30c, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x310, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x318, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x20f2bc4
	void StopUpdate();// 0x20f2bb0
	bool IsUpdating();// 0x20f2b88

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x598, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a6, Size: 1]
	enum CollisionMode;//[Offset: 0x5a7, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x5a8, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x5cc, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x5d8, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x5e4, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x600, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x63c, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x509ea00
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x509e8a0
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x509e7dc
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x509e718
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x509e654
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x509e4ac
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x29fa2f4
	bool IsMeshSectionVisible(int SectionIndex);// 0x509e42c
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x509e3ac
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x509e32c
	int GetNumSections();// 0x509e304
	int GetLastSectionIndex();// 0x509e2dc
	int FirstAvailableMeshSectionIndex();// 0x509e2b4
	void EndBatchUpdates();// 0x509e2a0
	bool DoesSectionExist(int SectionIndex);// 0x509e220
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x509dc30
	void CookCollisionNow();// 0x509dc1c
	void ClearMeshSection(int SectionIndex);// 0x509dba4
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x509db2c
	void ClearCollisionConvexMeshes();// 0x509db18
	void ClearAllMeshSections();// 0x509db04
	void ClearAllMeshCollisionSections();// 0x509daf0
	void BeginBatchUpdates();// 0x509dad4
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x509d978

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: KilledTipsBlock
	byte DamageType;//[Offset: 0x0, Size: 1]
	FString attackerName;//[Offset: 0x4, Size: 12]
	FString WeaponName;//[Offset: 0x10, Size: 12]
	FString DeadName;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc, Size: 4]
	int DetectThreshold;//[Offset: 0xc0, Size: 4]
	float FoldFactor;//[Offset: 0xc4, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8, Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c, Size: 12]
	int FoldFactorDelt;//[Offset: 0x138, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c, Size: 4]
	int TraceDis;//[Offset: 0x140, Size: 4]
	float TickDeltTime;//[Offset: 0x144, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x150, Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x1f6529c
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x1f65164

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xbe0, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0xbe4, Size: 12]
	enum LiveState;//[Offset: 0xbf0, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xbf4, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xbfc, Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0xc00, Size: 4]
	float PlayerHealth;//[Offset: 0xc04, Size: 4]
	float PlayerHealthMax;//[Offset: 0xc08, Size: 4]
	float PlayerTemperature;//[Offset: 0xc0c, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xc10, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xc14, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xc2c, Size: 24]
	enum EUAVUseType;//[Offset: 0xc44, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc45, Size: 1]
	enum eCurVehicleType;//[Offset: 0xc46, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xc47, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xc48, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xc54, Size: 12]
	Vector MapMark;//[Offset: 0xc60, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 1]
	Vector RestartLocation;//[Offset: 0xc70, Size: 12]
	Rotator RestartRotate;//[Offset: 0xc7c, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0xc88, Size: 60]
	<int,int> UseWheelMsgMap;//[Offset: 0xcc4, Size: 60]
	byte PlayerUseQuickSight;//[Offset: 0xd00, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0xd01, Size: 1]
	byte ShowMsgCnt;//[Offset: 0xd02, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xd03, Size: 1]
	byte UserCancelCnt;//[Offset: 0xd04, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xd05, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xd08, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xd0c, Size: 4]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xd28, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xd2c, Size: 12]
	int TeamMatePlayerStateIndex;//[Offset: 0xd38, Size: 4]
	int PlayerLayerID;//[Offset: 0xd3c, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xd40, Size: 16]
	int Breath;//[Offset: 0xd50, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xd54, Size: 12]
	float EnegyBuffStage1;//[Offset: 0xd60, Size: 4]
	float EnegyBuffStage2;//[Offset: 0xd64, Size: 4]
	float EnegyBuffStage3;//[Offset: 0xd68, Size: 4]
	float EnegyBuffStage4;//[Offset: 0xd6c, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xd70, Size: 4]
	float CurEnegyBuff;//[Offset: 0xd74, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xd78, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xd7c, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xd80, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xd84, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xd88, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xd8c, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xd90, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xd94, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xd98, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xda4, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb1, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbd, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0xdc0, Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcd, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdce, Size: 1]
	int PlayersCountOnPlane;//[Offset: 0xdd8, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0xddc, Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0xde8, Size: 4]
	int ContinuousKillsNum;//[Offset: 0xdec, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0xdf0, Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xdfc, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xe08, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xe0c, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0xe10, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0xe18, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0xe24, Size: 12]
	int MaxDecalCount;//[Offset: 0xe48, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0xe4c, Size: 12]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0xeac, Size: 12]
	float SignalHP;//[Offset: 0xeb8, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0xebc, Size: 12]
	float SignalHPRemainingTime;//[Offset: 0xec8, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0xecc, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xed0, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0xed4, Size: 12]
	int RemainingRevivalTime;//[Offset: 0xee0, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee5, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee6, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee7, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0xeec, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xef8, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xf00, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xf0c, Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xf18, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xf24, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0xf30, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0xf3c, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xf48, Size: 12]
	float KdValue;//[Offset: 0xf54, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0xf68, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0xf7c, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0xf88, Size: 12]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf94, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0xf98, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0xfa4, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0xfb0, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0xfbc, Size: 12]
	Actor* Plane;//[Offset: 0xfc8, Size: 4]
	int FlightNo;//[Offset: 0xfcc, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x20a8008
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x20a7eb8
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x20a7d60
	void SetPlayerGiveUp(bool InGiveUp);// 0x20a7ce0
	void SetForceSyncTeammateData(bool IsForCE);// 0x20a7c64
	void SetAirplaneStopLoc(Vector StopLoc);// 0x20a7bf0
	void SetAirplaneStartLoc(Vector StarLoc);// 0x20a7b7c
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x20a7b08
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x20a7a98
	void SaveBuffData();// 0x204e4f8
	void RestoreBuffData();// 0x20a7a7c
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x20a78d8
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x20a77d0
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x20a76d0
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x20a7658
	void RefreshRevivalState();// 0x20a7644
	void RefreshFollowMark();// 0x20a7630
	void RefreshAirplaneRoute();// 0x20a761c
	int PlayersCountOnMyPlane();// 0x20a75f4
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x29fa2f4
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x29fa2f4
	void OnRep_VisualFieldInfo();// 0x20a75e0
	void OnRep_UpdateKillMonsterNum();// 0x20a75c4
	void OnRep_TeamMatePlayerStateList();// 0x20a75b0
	void OnRep_TeamMatePlayerStateIndex();// 0x20a759c
	void OnRep_SingleRoundTotalDamage();// 0x20a7588
	void OnRep_SignalHP();// 0x20a7574
	void OnRep_RemainingRevivalTime();// 0x20a7560
	void OnRep_RankNotify();// 0x20a754c
	void OnRep_PlayerTemperatureChanged();// 0x20a7538
	void OnRep_PlayersCountOnPlane();// 0x20a7524
	void OnRep_PlayerReconnectEvent();// 0x20a7510
	void OnRep_PlayerName();// 0x1e2df90
	void OnRep_PlayerLostConnectionEvent();// 0x20a74fc
	void OnRep_PlayerLiveStateInternal();// 0x20a74e8
	void OnRep_PlayerLiveState();// 0x20a74cc
	void OnRep_PlayerKillsChange();// 0x20a74b0
	void OnRep_PlayerIsFollowing();// 0x20a749c
	void OnRep_PlayerGiveUp();// 0x1e513d8
	void OnRep_PlayerGameOver();// 0x20a7488
	void OnRep_PlayerExitGameEvent();// 0x20a7474
	void OnRep_PlayerAliasShowInfoList();// 0x20a7460
	void OnRep_Plane();// 0x20a744c
	void OnRep_MarkSyncData();// 0x20a7438
	void OnRep_MarkSelfSyncData();// 0x20a7424
	void OnRep_MapMarkNotify();// 0x20a7410
	void OnRep_LastVehicleLocation();// 0x20a73fc
	void OnRep_IsIDCardCaptured();// 0x20a73e8
	void OnRep_HPChanged();// 0x1dd8bcc
	void OnRep_HasRevivalSign();// 0x1e513f4
	void OnRep_HasEscaped();// 0x20a73d4
	void OnRep_ChangeRevivalState();// 0x20a73b8
	void OnRep_ChangeInRevivingState();// 0x20a73a4
	void OnRep_BreathChanged();// 0x20a7390
	void OnRep_BPS();// 0x20a737c
	void OnRep_AirplaneStopLoc();// 0x20a7368
	void OnRep_AirplaneStartLoc();// 0x20a7354
	void OnRep_AirplaneForceJumpLoc();// 0x20a7340
	void OnRep_AirplaneCanJumpLoc();// 0x20a732c
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x29fa2f4
	void OnNewRound();// 0x1f866e0
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x29fa2f4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x29fa2f4
	void OnClientVeteranRecruitIndexUpdated();// 0x20a7310
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x1f8661c
	void OnClientAddBuff(int BuffID, int SkillID);// 0x1f86558
	void LuaReceiveBeginPlay();// 0x1fdfea4
	bool IsSinglePlayer();// 0x20a72e8
	bool IsLocalPlayerState();// 0x20a72c0
	bool IsInGame();// 0x2059c64
	bool IsInBetrayState();// 0x20a7290
	bool IsAlive();// 0x20a7268
	uint32 GetUserIDByMemberID(int memberID);// 0x20a71e0
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x20a70bc
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x20a703c
	int GetTeamMateIndexByName(FString TeammateName);// 0x20a6f78
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x20a6ef8
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x20a6e34
	FString GetStringPlayerKey();// 0x20a6d74
	float GetPlayerTemperature();// 0x20a6d4c
	int GetPlayerTeamIndex2();// 0x20a6d24
	int GetPlayerTeamIndex();// 0x20a6cfc
	float GetPlayerMaxTemperature();// 0x20a6cd4
	float GetPlayerMaxHealth();// 0x20a6cac
	float GetPlayerHealthPercent();// 0x20a6c84
	float GetPlayerHealth();// 0x20a6c5c
	STExtraBaseCharacter* GetPlayerCharacter();// 0x20a6c34
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x20a6b88
	float GetMaxEnegyBuff();// 0x20a6b38
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x20a69d8
	Vector GetForceJumpLoc();// 0x20a69ac
	Vector GetCanJumpLoc();// 0x20a6984
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x20a6868
	float GetBreathPercentage();// 0x20a6840
	int GetBountyGold();// 0x29fa2f4
	MarkSyncData[] GetAllSelfMarkData();// 0x20a67dc
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x20a6710
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x20a65ec
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x20a6540
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x20a636c
	Vector GetAirplaneStopLoc();// 0x20a6340
	Vector GetAirplaneStartLoc();// 0x20a6314
	void ForceNotifyAlertUpdate();// 0x20a6300
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x20a61a8
	void FadeTeammatesMapMark();// 0x20a6194
	void DispatchPlayerExitEvent();// 0x20a6178
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x20a60b0
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x20a5eec
	void ChangeFadeMapMarkDist(float NewDist);// 0x20a5e70
	bool CanSelfRevive();// 0x20a5e40
	bool CanRevivalTeammate();// 0x20a5e18
	bool CanBeRevival();// 0x20a5df0
	byte CalculateEnegyStage();// 0x20a5dc8
	void BPKill(Character* VictimPawn);// 0x20a5d48
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x20a5c84
	void AddEnegySafety(float AddVal);// 0x20a5c0c
	void AddDamager(STExtraBaseCharacter* Damager);// 0x20a5b8c
	void AddDamageAmount(Character* VictimPawn, out const DamageEvent DamageEvent, float FinalDamage, bool bHitHead);// 0x20a5a0c

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x3b8, Size: 4]
	float Pronetime;//[Offset: 0x3bc, Size: 4]
	float marchDistance;//[Offset: 0x3c8, Size: 4]
	float travelDistance;//[Offset: 0x3cc, Size: 4]
	float DriveDistance;//[Offset: 0x3d0, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x3d4, Size: 4]
	int destroyVehicleNum;//[Offset: 0x3d8, Size: 4]
	int rescueTimes;//[Offset: 0x3dc, Size: 4]
	int NormalItemsNum;//[Offset: 0x3e0, Size: 4]
	int SeniorItemsNum;//[Offset: 0x3e4, Size: 4]
	int GVMemberID;//[Offset: 0x3e8, Size: 4]
	FName PlayerType;//[Offset: 0x3f0, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x3f8, Size: 8]
	uint32 PlayerKey;//[Offset: 0x400, Size: 4]
	FString PlayerUID;//[Offset: 0x404, Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	FString iconUrl;//[Offset: 0x414, Size: 12]
	int gender;//[Offset: 0x420, Size: 4]
	int PlayerLevel;//[Offset: 0x424, Size: 4]
	int SegmentLevel;//[Offset: 0x428, Size: 4]
	int AceImprintShowId;//[Offset: 0x42c, Size: 4]
	int AvatarBoxId;//[Offset: 0x430, Size: 4]
	int CampID;//[Offset: 0x434, Size: 4]
	int resID;//[Offset: 0x438, Size: 4]
	uint64 UId;//[Offset: 0x440, Size: 8]
	FString OpenID;//[Offset: 0x448, Size: 12]
	FString Nation;//[Offset: 0x454, Size: 12]
	int TeamID;//[Offset: 0x460, Size: 4]
	int PlayerBornPointID;//[Offset: 0x464, Size: 4]
	int Kills;//[Offset: 0x468, Size: 4]
	int KillsBeforeDie;//[Offset: 0x46c, Size: 4]
	int Knockouts;//[Offset: 0x470, Size: 4]
	int Assists;//[Offset: 0x47c, Size: 4]
	byte PlatformGender;//[Offset: 0x480, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x484, Size: 4]
	int MatchLabel;//[Offset: 0x488, Size: 4]
	uint32 Killer;//[Offset: 0x48c, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x490, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x494, Size: 12]
	FString KillerName;//[Offset: 0x4a0, Size: 12]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x4b0, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x4b8, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4bc, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x4c0, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x4c4, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x4c8, Size: 4]
	int HeadShotNum;//[Offset: 0x4cc, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x4d0, Size: 4]
	int KillNumByGrende;//[Offset: 0x4d4, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x4d8, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x4dc, Size: 4]
	int MaxKillDistance;//[Offset: 0x4e0, Size: 4]
	int HealTimes;//[Offset: 0x4e4, Size: 4]
	float DamageAmount;//[Offset: 0x4e8, Size: 4]
	float HealAmount;//[Offset: 0x4ec, Size: 4]
	FString[] KillFlow;//[Offset: 0x4f0, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x4fc, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x508, Size: 12]
	float InDamageAmount;//[Offset: 0x514, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x524, Size: 12]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x534, Size: 60]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x570, Size: 72]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x5bc, Size: 60]
	GameModeLikeResultData[] Like;//[Offset: 0x5f8, Size: 12]
	uint32 Switch;//[Offset: 0x604, Size: 4]
	uint32[] Self;//[Offset: 0x608, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x614, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x620, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x62c, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x638, Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x644, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x680, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x68c, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x690, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x69c, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x6a0, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x6a4, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x6a8, Size: 4]
	int[] BuildFlow;//[Offset: 0x6ac, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x6b8, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x6c4, Size: 4]
	float HitShelterDamage;//[Offset: 0x6c8, Size: 4]
	Vector LandLocation;//[Offset: 0x6cc, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x6d8, Size: 12]
	int LandTime;//[Offset: 0x6e4, Size: 4]
	Vector DeadLocation;//[Offset: 0x6e8, Size: 12]
	FString DeadDamangeType;//[Offset: 0x6f4, Size: 12]
	int PveDeadAttacker;//[Offset: 0x700, Size: 4]
	int PveStageId;//[Offset: 0x704, Size: 4]
	FString DeadTimeStr;//[Offset: 0x708, Size: 12]
	int NearDeathDamageType;//[Offset: 0x714, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x718, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	EquipmentData EquipmentData;//[Offset: 0x728, Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	int GamePlayingTime;//[Offset: 0x784, Size: 4]
	int ObserverTime;//[Offset: 0x788, Size: 4]
	int TouchDownAreaID;//[Offset: 0x78c, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x790, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x794, Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x7a4, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x7b0, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x7bc, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x7c8, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x7d4, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x7e0, Size: 4]
	float InHelicopterTime;//[Offset: 0x7e4, Size: 4]
	int RevivalNum;//[Offset: 0x7e8, Size: 4]
	int BeRevivedNum;//[Offset: 0x7ec, Size: 4]
	int KillNumInVehicle;//[Offset: 0x7f0, Size: 4]
	int KillPlayerNum;//[Offset: 0x7f4, Size: 4]
	int KillAINum;//[Offset: 0x7f8, Size: 4]
	float TotalSprintDistance;//[Offset: 0x7fc, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x800, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x804, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x808, Size: 12]
	int ProneTimes;//[Offset: 0x814, Size: 4]
	int CrouchTimes;//[Offset: 0x818, Size: 4]
	int JumpTimes;//[Offset: 0x81c, Size: 4]
	int KillMonsterNum;//[Offset: 0x820, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x824, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x860, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x864, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x868, Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x8a4, Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0x8e0, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x8e4, Size: 4]
	int LightCandleNum;//[Offset: 0x8e8, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x8ec, Size: 60]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x928, Size: 12]
	float BattleStateTime;//[Offset: 0x934, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0x93c, Size: 4]
	int FistKillingCount;//[Offset: 0x940, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0x944, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0x948, Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0x984, Size: 12]
	int UseHelicoperNum;//[Offset: 0x990, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x994, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x9a0, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x9ac, Size: 32]
	float UseHelicoperDistance;//[Offset: 0x9cc, Size: 4]
	byte CharmRankIndex;//[Offset: 0x9d0, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0x9d4, Size: 60]
	int SnowBoardJumpActionCount;//[Offset: 0xa14, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xa18, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xa1c, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xa20, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xa24, Size: 12]
	int KillSnowManCount;//[Offset: 0xa30, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xa38, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xa40, Size: 60]
	int VeteranRecruitIndex;//[Offset: 0xa7c, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xa80, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xa8c, Size: 48]
	int MemberIdInVoiceRoom;//[Offset: 0xabc, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xac4, Size: 44]
	int UpassShow;//[Offset: 0xaf0, Size: 4]
	int upassKeepBuy;//[Offset: 0xaf4, Size: 4]
	int upassCurValue;//[Offset: 0xaf8, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xb00, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xb18, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xb1c, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xb20, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xb24, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xb28, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xb2c, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xb30, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xb34, Size: 4]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xb78, Size: 104]
	void SetGVMemberIDServerCall(int memberID);// 0x2612560
	void SetGVMemberID(int memberID);// 0x26124e8
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess);// 0x2612424
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x2612314
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x26121d8
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x2612038
	void ReportTaskData(int TaskID, int process);// 0x2611f7c
	void ReportSpecialCollection(int ItemID, int Count);// 0x2611ec0
	void ReportSecretAreaID(int SecretAreaID);// 0x2611e48
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x2611d88
	void ReportLikeSwitch(int SwitchSetting);// 0x2611d10
	void ReportLikeSelf(int LikeType);// 0x2611c98
	void ReportLandLocType(int TouchDownLocType);// 0x2611c20
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x2611b54
	void ReportLandArea(int TouchDownArea);// 0x2611adc
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x2611a64
	void OnRepCampIDBP();// 0x29fa2f4
	void OnRep_VeteranRecruitIndex();// 0x2611a50
	void OnRep_UpdateKillMonsterNum();// 0x20a75c4
	void OnRep_UID();// 0x2611a3c
	void OnRep_PlayerKillsChange();// 0x20a74b0
	void OnRep_MatchLabel();// 0x1dd8bcc
	void OnRep_CollectItemRecord();// 0x2611a28
	void OnRep_CampID();// 0x2611a14
	void OnRep_AliasInfo();// 0x2611a00
	void OnClientVeteranRecruitIndexUpdated();// 0x20a7310
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x2611980
	bool IsSpecialPickItem(int ItemID);// 0x2611900
	bool IsItemForbidMerge(int ItemResId);// 0x2611878
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x2611794
	int GetVeteranPlayerLevel();// 0x2611764
	uint32 GetUserIDByMemberID(int memberID);// 0x20a71e0
	FString GetUIDString();// 0x26116a4
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x2611638
	uint32 GetPlayerKey();// 0x2611610
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x261152c
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x26114c0
	enum GetMentorPlayerType();// 0x2611490
	void ForceUpdateCampCharacterList();// 0x2611474
	void ClearTlogData();// 0x2611458
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x2611394
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x261128c

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x370, Size: 60]
	FString LuaFilePath;//[Offset: 0x3ac, Size: 12]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x1c, Size: 12]
	uint64 InstanceID;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UId;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 60]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x24, Size: 12]
	int TotalUseTime;//[Offset: 0x30, Size: 4]
	int KillCount;//[Offset: 0x34, Size: 4]
	int KnockNumber;//[Offset: 0x38, Size: 4]
	int[] Associations;//[Offset: 0x3c, Size: 12]
	int AvatarID;//[Offset: 0x48, Size: 4]
	int DIYPlanID;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventId;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0xc, Size: 12]
	int ArmorID;//[Offset: 0x18, Size: 4]
	int HelmetID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	uint16 AreaID;//[Offset: 0x24, Size: 2]
	int8 PlatID;//[Offset: 0x26, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 12]
	WeaponReport[] Weapons;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int HitCount;//[Offset: 0x8, Size: 4]
	int UniqueHitCount;//[Offset: 0xc, Size: 4]
	int KillCount;//[Offset: 0x10, Size: 4]
	float TotalDamage;//[Offset: 0x14, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x18, Size: 4]
	int TotalOwnTime;//[Offset: 0x1c, Size: 4]
	int TotalUseTime;//[Offset: 0x20, Size: 4]
	int KnockDownCount;//[Offset: 0x24, Size: 4]
	int HeadShootCount;//[Offset: 0x28, Size: 4]
	int KillAICount;//[Offset: 0x2c, Size: 4]
	int KnockDownAICount;//[Offset: 0x30, Size: 4]
	int HeadShootAICount;//[Offset: 0x34, Size: 4]
	int HitAICount;//[Offset: 0x38, Size: 4]
	int UniqueHitAICount;//[Offset: 0x3c, Size: 4]
	int UseCount;//[Offset: 0x40, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x44, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UId;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 12]
	float travelDistance;//[Offset: 0x2c, Size: 4]
	float marchDistance;//[Offset: 0x30, Size: 4]
	float DriveDistance;//[Offset: 0x34, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x38, Size: 4]
	float DamageAmount;//[Offset: 0x3c, Size: 4]
	float HealAmount;//[Offset: 0x40, Size: 4]
	int AssistNum;//[Offset: 0x44, Size: 4]
	int HeadShotNum;//[Offset: 0x48, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x4c, Size: 4]
	float surviveTime;//[Offset: 0x50, Size: 4]
	int rescueTimes;//[Offset: 0x54, Size: 4]
	int DestroyVehicles;//[Offset: 0x58, Size: 4]
	FString[] KillFlow;//[Offset: 0x5c, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x68, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x74, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x78, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x84, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x88, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x8c, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x90, Size: 12]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x9c, Size: 4]
	float InDamageAmount;//[Offset: 0xa0, Size: 4]
	int ProneTimes;//[Offset: 0xa4, Size: 4]
	int CrouchTimes;//[Offset: 0xa8, Size: 4]
	int JumpTimes;//[Offset: 0xac, Size: 4]
	int KillMonsterNum;//[Offset: 0xb0, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xb4, Size: 60]
	int LightCandleNum;//[Offset: 0xf0, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xf4, Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x130, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x134, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x138, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x13c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int mainWeaponID;//[Offset: 0x144, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x148, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x14c, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	uint64 Killer;//[Offset: 0x20, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x28, Size: 8]
	FString KillerName;//[Offset: 0x30, Size: 12]
	FString BeKilledOpenID;//[Offset: 0x3c, Size: 12]
	int ShootWeaponShotNum;//[Offset: 0x48, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4c, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x50, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x54, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x58, Size: 4]
	int HealTimes;//[Offset: 0x5c, Size: 4]
	FString[] KillFlow;//[Offset: 0x60, Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x6c, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x78, Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x84, Size: 60]
	<int,int> TLog_BulletCount;//[Offset: 0xc0, Size: 60]
	uint64 parachute_leader_uid;//[Offset: 0x100, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x108, Size: 12]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x114, Size: 12]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x120, Size: 12]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x12c, Size: 12]
	int destroyVehicleNum;//[Offset: 0x138, Size: 4]
	int is_escape;//[Offset: 0x13c, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x140, Size: 12]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x14c, Size: 12]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x158, Size: 32]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x178, Size: 12]
	GameModeLikeResultData[] Like;//[Offset: 0x184, Size: 12]
	uint32 Switch;//[Offset: 0x190, Size: 4]
	uint32[] Self;//[Offset: 0x194, Size: 12]
	Vector LandLocation;//[Offset: 0x1a0, Size: 12]
	int LandTime;//[Offset: 0x1ac, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x1b0, Size: 12]
	Vector DeadLocation;//[Offset: 0x1bc, Size: 12]
	FString DeadDamangeType;//[Offset: 0x1c8, Size: 12]
	int PveDeadAttacker;//[Offset: 0x1d4, Size: 4]
	int PveStageId;//[Offset: 0x1d8, Size: 4]
	FString DeadTimeStr;//[Offset: 0x1dc, Size: 12]
	FString logoutime;//[Offset: 0x1e8, Size: 12]
	float Pronetime;//[Offset: 0x1f4, Size: 4]
	float BeInWaterTime;//[Offset: 0x1f8, Size: 4]
	float SwimmingDistance;//[Offset: 0x1fc, Size: 4]
	int BeDownTimes;//[Offset: 0x200, Size: 4]
	int BeSavedTimes;//[Offset: 0x204, Size: 4]
	int PickUpAirDrops;//[Offset: 0x208, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x20c, Size: 80]
	int Rank;//[Offset: 0x25c, Size: 4]
	int TotalScore;//[Offset: 0x260, Size: 4]
	int ProneTimes;//[Offset: 0x264, Size: 4]
	int CrouchTimes;//[Offset: 0x268, Size: 4]
	int JumpTimes;//[Offset: 0x26c, Size: 4]
	int TouchDownAreaID;//[Offset: 0x270, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x274, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x278, Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x284, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x290, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x29c, Size: 12]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x2a8, Size: 28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x2c4, Size: 32]
	int[] SecretAreaIDList;//[Offset: 0x2e4, Size: 12]
	int KillNumInVehicle;//[Offset: 0x2f0, Size: 4]
	float TotalSprintDistance;//[Offset: 0x2f4, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x2f8, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x2fc, Size: 4]
	int[] BuildFlow;//[Offset: 0x300, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x30c, Size: 12]
	float ShelterTakeDamage;//[Offset: 0x318, Size: 4]
	float HitShelterDamage;//[Offset: 0x31c, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x320, Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x32c, Size: 12]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int KillMonsterNum;//[Offset: 0x33c, Size: 4]
	int LightCandleNum;//[Offset: 0x340, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x344, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x348, Size: 4]
	float BattleStateTime;//[Offset: 0x34c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x354, Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x390, Size: 8]
	float TotalDamage;//[Offset: 0x398, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x39c, Size: 4]
	int FollowState;//[Offset: 0x3a0, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x3a4, Size: 12]
	int UseHelicoperNum;//[Offset: 0x3b0, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x3b4, Size: 4]
	int RevivalNum;//[Offset: 0x3b8, Size: 4]
	int BeRevivedNum;//[Offset: 0x3bc, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x3c0, Size: 4]
	int InHelicopterTime;//[Offset: 0x3c4, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x3c8, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x3cc, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x3d0, Size: 12]
	int KillSnowManCount;//[Offset: 0x3dc, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x3e0, Size: 60]
	TLog_Micphone MicphoneTlog;//[Offset: 0x41c, Size: 24]
	int NormalItemNum;//[Offset: 0x434, Size: 4]
	int SeniorItemNum;//[Offset: 0x438, Size: 4]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x4, Size: 12]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x10, Size: 12]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x14, Size: 12]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xe9c, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xea0, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0xeb0, Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xec0, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xee8, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xef0, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xef8, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xefc, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0xf04, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xf08, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xf14, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xf18, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xf2c, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xf30, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xf34, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xf38, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0xf3c, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xf40, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xf44, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xf48, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0xf4c, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0xf50, Size: 84]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0xfa4, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0xff0, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1004, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1008, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x1030, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1038, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x103c, Size: 12]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1048, Size: 5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104d, Size: 1]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x20d8714
	void PostLoadFPPMesh();// 0x20ccf44
	void OnWheelsLanded();// 0x20d8700
	void OnRep_ReplicatedState();// 0x1dd8bcc
	void OnGearChanged(bool bIsUp);// 0x20d8680
	float GetVehicleSpeed();// 0x20d8658
	float GetVehicleSlip();// 0x20d8628
	Vector GetRotationInputDir();// 0x1feda58
	void BroadcastClientVehicleWheelDestroyEffect();// 0x20d860c

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4, Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8, Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc, Size: 4]
	float minSpeed;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x36c, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x378, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x394, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x398, Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3ac, Size: 4]
	float MaxRPMLimit;//[Offset: 0x4d4, Size: 4]
	float TorqueRate;//[Offset: 0x4d8, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x4dc, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x4e8, Size: 12]
	FName RootBodyName;//[Offset: 0x4f8, Size: 8]
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x20d2490
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x20d2418
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x20d22b0
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x20d222c
	void RefreshBodyCollision();// 0x20d2218
	void OnExpoldeStopWheel();// 0x20d2204
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x20d2104
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x20d1f78
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x20d1e78
	int GetSuspensionIgnoreMask();// 0x20d1e50
	void ForceWheelsRotate(float DriveTorque);// 0x20d1dd8
	void ClearDestroyedWheel();// 0x20d1dc4

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x260, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2cc, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2e8, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x310, Size: 88]
	float AckermannAccuracy;//[Offset: 0x368, Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 48]
	FString PlayerName;//[Offset: 0x30, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2cc, Size: 4]
	int DecalId;//[Offset: 0x2d0, Size: 4]
	int TeamID;//[Offset: 0x2d4, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x2e0, Size: 128]
	STExtraPlayerState* OwnerPS;//[Offset: 0x360, Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x364, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x36c, Size: 4]
	int PostEventID;//[Offset: 0x370, Size: 4]
	void OnRep_DecalInfo();// 0x1ef8218

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	enum ParentType;//[Offset: 0x5d, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x60, Size: 8]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString TeamName;//[Offset: 0x28, Size: 12]
	uint64 UId;//[Offset: 0x38, Size: 8]
	uint32 PlayerKey;//[Offset: 0x40, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	int TypeID;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	int InstanceID;//[Offset: 0x20, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x24, Size: 28]
	enum MapAdded;//[Offset: 0x40, Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x44, Size: 12]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 4]
	int CustomState;//[Offset: 0x4, Size: 4]
	FString CustomString;//[Offset: 0x8, Size: 12]
	enum InWhichMap;//[Offset: 0x14, Size: 1]
	int CustomCanvasTag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x100, Size: 12]
	float MaxBreathAmount;//[Offset: 0x10c, Size: 4]
	float DrowningHurtHight;//[Offset: 0x110, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x114, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x118, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x11c, Size: 4]
	float BreathDeltaTime;//[Offset: 0x120, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x124, Size: 4]
	float MinSpeedScale;//[Offset: 0x128, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x12c, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x130, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x134, Size: 4]
	float RollMaxAngle;//[Offset: 0x138, Size: 4]
	float DistoVolume;//[Offset: 0x13c, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x15c, Size: 4]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x164, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x168, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x170, Size: 4]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x174, Size: 4]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x178, Size: 4]
	void UpdateSwimCollisionHeightCpp();// 0x1f69a20
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x1f699a8
	void LeaveWater();// 0x1f69994
	Actor* GetWaterObject();// 0x1f6996c
	void EnterWater_BluePrint();// 0x29fa2f4
	void EnterWater(Actor* WaterObject);// 0x1f698f4
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x29fa2f4

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4c8, Size: 4]
	float AttachCheckDistance;//[Offset: 0x4cc, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4d0, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4d4, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4d8, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4f4, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x500, Size: 12]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x1e58ad8
	void UpdateDataWhenBagChangedOnAutonomous();// 0x1e58ac4
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x1e58968
	void OnRecoverOnServer();// 0x1e5894c
	void OnReconnectOnServer();// 0x1de6aa8
	void OnReconnectOnClient();// 0x1e58930
	void OnDisconnectToClientOnServer();// 0x1e5891c
	int GetBagLevel();// 0x1e588ec

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x1c, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x20, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x24, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x28, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x30, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x44, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x48, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x4c, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x50, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x54, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x58, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x5c, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0x74, Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	byte SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0xc, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x10, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x14, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]
	float MomentumResistance;//[Offset: 0x24, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float EnergyPredict;//[Offset: 0x14, Size: 4]
	float AttenuationPeriod;//[Offset: 0x18, Size: 4]
	float AttenuationAmount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0xf8, Size: 104]
	UAEGameMode* UAEGM;//[Offset: 0x160, Size: 4]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x1f9b4a4
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x1f9b3f4
	void ReportVerifyInfoFlow();// 0x1f9b398
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x1f9b2c8
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x1f9b1d8
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x1f9b0e8
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x1f9b018
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x1f9af48
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x1f9ae18
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x1f9ace8
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x1f9abe4
	void ReportGameSetting(const GameSetting GameSetting);// 0x1f9aaf4
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x1f9aa24
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x1f9a924
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x1f9a854
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x1f9a784
	void ReportAimFlow(const AimFlow AimFlow);// 0x1f9a6b4
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x1f9a624
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x1f9a460
	void CheckSendGameStartFlow();// 0x1f9a44c
	void CheckSendGameEndFlow();// 0x1f9a438

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x3a4, Size: 8]
	float GridCheckSize;//[Offset: 0x3ac, Size: 4]
	float DeepCheckSize;//[Offset: 0x3b0, Size: 4]
	float HeightCheckSize;//[Offset: 0x3b4, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x3b8, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 1]
	int AntiDataCD;//[Offset: 0x3d0, Size: 4]
	int WeatherID;//[Offset: 0x3d4, Size: 4]
	FString WeatherName;//[Offset: 0x3d8, Size: 12]
	int RoomMode;//[Offset: 0x3e4, Size: 4]
	int SeasonIdx;//[Offset: 0x3e8, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x3ec, Size: 4]
	FString ItemTableName;//[Offset: 0x3f0, Size: 12]
	FString ItemClassPath;//[Offset: 0x3fc, Size: 12]
	FString ReplayPushURL;//[Offset: 0x408, Size: 12]
	int ReplayType;//[Offset: 0x414, Size: 4]
	FString ReplayTitle;//[Offset: 0x418, Size: 12]
	enum EnableObserverEnemyTrace;//[Offset: 0x424, Size: 1]
	FString[] IgnoreItemClassPathList;//[Offset: 0x428, Size: 12]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x434, Size: 12]
	uint32 ServerStartTime;//[Offset: 0x440, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x448, Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x458, Size: 12]
	FString VehicleTableName;//[Offset: 0x464, Size: 12]
	FString VehicleClassPath;//[Offset: 0x470, Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	Vector RegionCenter;//[Offset: 0x480, Size: 12]
	float RegionRadius;//[Offset: 0x48c, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x490, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x4cc, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x4d0, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x4d4, Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x4dc, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x4e0, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x4e4, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x4e8, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x4ec, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 1]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x4f4, Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x500, Size: 4]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x504, Size: 12]
	Actor*[] DynamicTriggers;//[Offset: 0x510, Size: 12]
	int IsGameModeFpp;//[Offset: 0x51c, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x524, Size: 12]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x530, Size: 60]
	BornItem[] BornItems;//[Offset: 0x56c, Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x57c, Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x588, Size: 12]
	int[] DynamicLevelArray;//[Offset: 0x594, Size: 12]
	FString RoomType;//[Offset: 0x5a0, Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ae, Size: 1]
	int ZoneID;//[Offset: 0x5b0, Size: 4]
	int nClientType;//[Offset: 0x5b4, Size: 4]
	int nBattleType;//[Offset: 0x5b8, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0x8a8, Size: 12]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	float OBInfoTimeStep;//[Offset: 0x980, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0x9a0, Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0x9ac, Size: 12]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x9b8, Size: 12]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xa58, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xa64, Size: 12]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0xa70, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xa80, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xa8c, Size: 12]
	FString GrenadeEffectPath;//[Offset: 0xa98, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa5, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa6, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa7, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa9, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0xaac, Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 1]
	float FestivalAirDropProb;//[Offset: 0xabc, Size: 4]
	float MonsterDropPar;//[Offset: 0xac0, Size: 4]
	float SceneDropParam;//[Offset: 0xac4, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0xac8, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xacc, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xad0, Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0xad8, Size: 12]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0xae4, Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xaf0, Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xafc, Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xb08, Size: 84]
	int BattleStopJoin;//[Offset: 0xb5c, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0xb60, Size: 12]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0xbe4, Size: 12]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc29, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0xc2c, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0xc30, Size: 8]
	void WriteStatistics();// 0x26060f8
	void SyncPlayerNames();// 0x26060dc
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x2605fa0
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x2605e60
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x2605d54
	void SetGameEndReportData();// 0x1e284dc
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x2605ca0
	void RetrieveBattleData(out BattleData OutBattleData);// 0x2605c0c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1f7e98c
	void ResetGameParamsFromGameMode();// 0x2605bf0
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x2605b2c
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x26059f8
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x26058c4
	bool ReportCollectedEventData(out const FString UId, byte EventId, out const CollectedEventData Data);// 0x26056cc
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x2605608
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x2605588
	void RefreshWorldActiveRange();// 0x260556c
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x26054a8
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UId);// 0x2605218
	int RecoardAlivePlayerNum();// 0x26051e8
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x2605160
	void OnStandAloneGameEnd();// 0x1fe4580
	void OnReportNetworkData();// 0x1e27d0c
	void OnPlayerFiring(uint32 InPlayerKey);// 0x26050e8
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1e27c8c
	void OnObserverLogout(UAEPlayerController* InController);// 0x2605070
	void OnObserverLogin(UAEPlayerController* InController);// 0x2604ff8
	void OnMsg(FString Msg);// 0x2604f34
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x2604e64
	void OnAirDropBoxEmpty(int boxId);// 0x2604de4
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x2185c20
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x2185924
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x2604d20
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x2604c88
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x2604bb0
	void NotifyGameModeInit();// 0x21881d0
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x2604b30
	void NotifyAIPlayerEnter(uint32 PlayerKey);// 0x2604ab0
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1e27adc
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x215afb0
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x26048ec
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x2604778
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x26046ec
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x260466c
	bool IsCollectedEventEnabled(byte EventId);// 0x26045ec
	void InitWorldActiveRange();// 0x26045d0
	void InitSeasonStatue();// 0x26045b4
	void InitMissionBoard();// 0x20c4238
	void InitGenerator();// 0x2604598
	void InitGameParamsFromGameMode();// 0x260457c
	void InitDynamicTriggers();// 0x2604560
	void InitDynamicBuildingGroups();// 0x2604544
	void InitBornWithApple();// 0x2604528
	void InitAdvertisement();// 0x260450c
	void Heartbeat();// 0x26044f8
	bool HasDynamicBuildingGroup();// 0x26044d0
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x2604334
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x1fe9204
	int GetSurvivingTeamCount();// 0x2604304
	int GetSurvivingCharacterCount();// 0x26042d4
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x2604180
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x260402c
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x2603f88
	UAEPlayerController*[] GetObserverControllerList();// 0x2603ec8
	void GetMonsterNum(out HeartBeatData Data);// 0x2603e24
	Vector GetClassicPlaneDirection();// 0x2603dd4
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x2603d10
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x2603c4c
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x1e27440
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x2603b68
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x2603ae8
	void DestroyAllPickUpObjs();// 0x1dd8bcc
	void DeleteSeasonStatue();// 0x2603acc
	void DeleteDynamicLoadItem();// 0x2603ab0
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x2603a30
	void CreateDynamicBuildingGroups(Vector Offset);// 0x26039c0
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x29fa2f4
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x26038f4
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x26037a0
	void AddAirDropBox(int boxId, out const Vector pos);// 0x26036d0

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x398, Size: 12]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 12]
	FString TriggerClassPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 12]
	int ActID;//[Offset: 0xc, Size: 4]
	FString Path;//[Offset: 0x10, Size: 12]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	int[] PosIdxList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: DynamicBuildingGroupTransform
	float LocX;//[Offset: 0x0, Size: 4]
	float LocY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x2d4, Size: 4]
	FString StaticMeshPath;//[Offset: 0x2d8, Size: 12]
	FString PicUrl;//[Offset: 0x2e4, Size: 12]
	int ID;//[Offset: 0x2f0, Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x2f4, Size: 4]
	float NetCullDistance;//[Offset: 0x2fc, Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x25f8ea8
	void OnRep_PicURL();// 0x25f8e80
	void OnRep_MeshPath();// 0x25f8e94
	void OnRep_Id();// 0x25f8e80

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2cc, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2d1, Size: 1]

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	float Progress;//[Offset: 0x30, Size: 4]
	FString CountOrTime;//[Offset: 0x34, Size: 12]
	int TipId;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x178, Size: 12]
	byte RegionType;//[Offset: 0x184, Size: 1]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x188, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x194, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x1a4, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x1e0, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x21c, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x258, Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x2a0, Size: 4]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x1dd8bcc
	void WriteVehicleSpotStatisticsDatas();// 0x1dd8bcc
	void WriteVehicleClassStatisticsDatas_V15();// 0x1dd8bcc
	void WriteVehicleClassStatisticsDatas();// 0x1dd8bcc
	void WriteAllVehicleStatisticsDatasToLog();// 0x1dd8bcc
	void WriteAllVehicleStatisticsDatas_V15();// 0x1dd8bcc
	void WriteAllVehicleStatisticsDatas();// 0x1dd8bcc
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x2617698
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x1e4c168
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x26174c4
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x26172f0
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x261711c
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x2616f48
	void RandomGroups();// 0x1dbb2c0
	void LoadVehicleGenerateTable();// 0x29fa2f4
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x2616db8
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x2616b70
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x2616928
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x26166bc
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x25d119c
	void GenerateSpotOnTick(float DeltaTime);// 0x1e4c368
	void DeleteGroups();// 0x26166a8
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x2616430
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x2616244

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x278, Size: 1]
	byte RegionType;//[Offset: 0x279, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b, Size: 1]
	float RandomRotationMin;//[Offset: 0x27c, Size: 4]
	float RandomRotationMax;//[Offset: 0x280, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x284, Size: 32]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x2a8, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x261cee0
	bool GenerateSpot();// 0x25ec1fc

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehiclePath;//[Offset: 0x10, Size: 12]
	int VehicleWeight;//[Offset: 0x1c, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 12]
	Vector Loc;//[Offset: 0xc, Size: 12]
	Rotator Rot;//[Offset: 0x18, Size: 12]
	Vector Scale;//[Offset: 0x24, Size: 12]
	FString Nation;//[Offset: 0x30, Size: 12]
	int AGender;//[Offset: 0x3c, Size: 4]
	int Head;//[Offset: 0x40, Size: 4]
	int Hair;//[Offset: 0x44, Size: 4]
	int WeaponId;//[Offset: 0x48, Size: 4]
	int[] AvatarList;//[Offset: 0x4c, Size: 12]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x58, Size: 12]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 12]
	FString MatPath;//[Offset: 0xc, Size: 12]
	FString TeamFlag;//[Offset: 0x18, Size: 12]
	FString TeamName;//[Offset: 0x24, Size: 12]
	Vector Loc;//[Offset: 0x30, Size: 12]
	Rotator Rot;//[Offset: 0x3c, Size: 12]
	Vector Scale;//[Offset: 0x48, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 12]
	float AttrValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	float PlaneDirectionX;//[Offset: 0x14, Size: 4]
	float PlaneDirectionY;//[Offset: 0x18, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x1c, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x58, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UId;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	FString ItemList;//[Offset: 0x24, Size: 12]
	int8 TeamType;//[Offset: 0x30, Size: 1]
	int TeamID;//[Offset: 0x34, Size: 4]
	FString TeamPlayer1;//[Offset: 0x38, Size: 12]
	FString TeamPlayer2;//[Offset: 0x44, Size: 12]
	FString TeamPlayer3;//[Offset: 0x50, Size: 12]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x5c, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x60, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x6c, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x78, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString ClientVersion;//[Offset: 0x14, Size: 12]
	uint32 OverTime;//[Offset: 0x20, Size: 4]
	int8 EndType;//[Offset: 0x24, Size: 1]
	byte KillCount;//[Offset: 0x25, Size: 1]
	byte AssistsCount;//[Offset: 0x26, Size: 1]
	byte DropCount;//[Offset: 0x27, Size: 1]
	byte SaveCount;//[Offset: 0x28, Size: 1]
	byte RebornCount;//[Offset: 0x29, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 1]
	int GoldGet;//[Offset: 0x2c, Size: 4]
	int DiamondGet;//[Offset: 0x30, Size: 4]
	int ExpGet;//[Offset: 0x34, Size: 4]
	byte WinRank;//[Offset: 0x38, Size: 1]
	byte TotalPlayers;//[Offset: 0x39, Size: 1]
	int PlayerRank;//[Offset: 0x3c, Size: 4]
	int RankEnd;//[Offset: 0x40, Size: 4]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 12]
	FString TeamPlayer2;//[Offset: 0x54, Size: 12]
	FString TeamPlayer3;//[Offset: 0x60, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x6d, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6e, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6f, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x70, Size: 4]
	byte RoundCircleCount;//[Offset: 0x74, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x78, Size: 12]
	int[] UseQuickMsgCountArray;//[Offset: 0x84, Size: 12]
	int[] UseWheelMsgIDArray;//[Offset: 0x90, Size: 12]
	int[] UseWheelMsgCountArray;//[Offset: 0x9c, Size: 12]
	int[] InexistentAvatarStat;//[Offset: 0xa8, Size: 12]
	int[] InexistentAvatarInBornStat;//[Offset: 0xb4, Size: 12]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xc0, Size: 12]
	int[] InexistentVehicleAvatarStat;//[Offset: 0xcc, Size: 12]
	int InexistentPlaneAvatarStat;//[Offset: 0xd8, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0xdc, Size: 4]
	byte ShowMsgCnt;//[Offset: 0xe0, Size: 1]
	byte UserConfirmCnt;//[Offset: 0xe1, Size: 1]
	byte UserCancelCnt;//[Offset: 0xe2, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xe3, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xe4, Size: 4]
	float FPSAfterAdapt;//[Offset: 0xe8, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0xec, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf0, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf4, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf8, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xfc, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x100, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x104, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x105, Size: 1]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	FString TargetUserName;//[Offset: 0x58, Size: 12]
	FString TargetOpenID;//[Offset: 0x64, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x70, Size: 8]
	FString HitPart;//[Offset: 0x78, Size: 12]
	int GunID;//[Offset: 0x84, Size: 4]
	byte PlayerKill;//[Offset: 0x88, Size: 1]
	uint64 AttackFlowID;//[Offset: 0x90, Size: 8]
	int KillAICnt;//[Offset: 0x98, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x9c, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x6c, Size: 12]
	uint64 PawnState;//[Offset: 0x78, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x80, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x44, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x48, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x4c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x50, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x54, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x58, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x5c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x60, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x64, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x68, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x6c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x70, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x74, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x80, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x8c, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x90, Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	uint16 AreaID;//[Offset: 0x32, Size: 2]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	int CircleIndex;//[Offset: 0xf8, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd4, Size: 56]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString PicUrl;//[Offset: 0x14, Size: 12]
	uint32 GameStartTime;//[Offset: 0x20, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x24, Size: 4]
	int NewCirclePositionX;//[Offset: 0x28, Size: 4]
	int NewCirclePositionY;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x30, Size: 4]
	int NewCircleCount;//[Offset: 0x34, Size: 4]
	int PlayerPositionX;//[Offset: 0x38, Size: 4]
	int PlayerPositionY;//[Offset: 0x3c, Size: 4]
	int PlayerPositionZ;//[Offset: 0x40, Size: 4]
	int PlayerHP;//[Offset: 0x44, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x48, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x4c, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x50, Size: 4]
	int CirclePoisonCount;//[Offset: 0x54, Size: 4]
	int CirclePoisonMin;//[Offset: 0x58, Size: 4]
	int CirclePoisonMax;//[Offset: 0x5c, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x60, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x64, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x68, Size: 4]
	int CirclePoisonDead;//[Offset: 0x6c, Size: 4]
	int RecoveryCount;//[Offset: 0x70, Size: 4]
	int RecoveryMin;//[Offset: 0x74, Size: 4]
	int RecoveryMax;//[Offset: 0x78, Size: 4]
	int RecoveryTotal;//[Offset: 0x7c, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x80, Size: 4]
	int EnergyRecoveryMin;//[Offset: 0x84, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x88, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x8c, Size: 4]
	int EnergyStartLv;//[Offset: 0x90, Size: 4]
	int EnergyStartTime;//[Offset: 0x94, Size: 4]
	FString EnergyItemUse;//[Offset: 0x98, Size: 12]
	int EnergyLvTimeInfo;//[Offset: 0xa4, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xa8, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xb4, Size: 12]
	int EnergyEndLv;//[Offset: 0xc0, Size: 4]
	int EnergyEndTime;//[Offset: 0xc4, Size: 4]
	int PlayerMoveDis;//[Offset: 0xc8, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xcc, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xd0, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xd4, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xd8, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xdc, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xe0, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xe4, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0xe8, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0xec, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0xf0, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0xf4, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0xf8, Size: 4]
	int PlayerCar;//[Offset: 0xfc, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x100, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x104, Size: 4]
	byte AutoAimType;//[Offset: 0x108, Size: 1]
	int AutoAimTime;//[Offset: 0x10c, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x110, Size: 12]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 4]
	int GunID;//[Offset: 0x184, Size: 4]
	int IfIsOnCar;//[Offset: 0x188, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	int KillAICnt;//[Offset: 0x190, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x194, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x50, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x260, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x268, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x270, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x2a0, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x2a4, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2a8, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x2ac, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x2b0, Size: 4]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x2b4, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2c0, Size: 12]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2cc, Size: 4]
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x20c7688
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x20c7610

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int HalloweenVampireClothItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x180, Size: 12]
	void ReleaseParachuteAnimAssets();// 0x25f98c0
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x1ed6c0c
	void OnAnimListAsyncLoadingFinished();// 0x25f98ac
	bool HasAnimAsyncLoadingFinished();// 0x25f9884
	void HandleAsyncLoadingFinishedEvent();// 0x25f9870
	FString GetOwnerName();// 0x25f97a8
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x25f9728

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	byte Roll;//[Offset: 0xc, Size: 1]
	uint32 View;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x180, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x18c, Size: 12]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x198, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1a4, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1b0, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1bc, Size: 4]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x1c0, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x1cc, Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x25fbf98
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x25fbcfc
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x25fba60
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x25fb958
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x25fb7d0

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x2d4, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x2dc, Size: 4]
	void RemingLifeTimeChanged(float previousRemaining);// 0x1e2e074
	void RecordBonFireSuccess();// 0x1e2e060
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x1e2dfe8
	void OnRep_HasBurnOut();// 0x1e2dfd4
	void OnRep_HasBeenLit();// 0x1e2dfc0
	void OnRep_CurRoastMeat();// 0x1e2dfac
	void IsBurnOutChanged();// 0x1e2df90
	FString CastMsg_Implementation(FString Msg);// 0x1e2de44

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x2cc, Size: 4]
	Controller* GetTheInstigatorController();// 0x1dce6d4

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x2cc, Size: 8]
	enum AnimalType;//[Offset: 0x2d4, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	void RecordRoastMeatSuccess();// 0x1f9265c
	void OnRep_IsDone();// 0x1f92648
	void CastActorMsg(FString Msg);// 0x1f92584

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0xbc, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0xd0, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xd8, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0xe0, Size: 12]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x1fe2400
	void InitializeOwner(Pawn* _TempPawn);// 0x1fe2388
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x1fe2310

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float Angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	<byte,VaultAnimData> VaultAnimSoftPtrMap;//[Offset: 0x104, Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0x140, Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x144, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x14c, Size: 4]
	bool VaultFromCPP();// 0x1e1e220
	void UpdateVault_BluePrint();// 0x1e63624
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x1f73870
	void StartAsyncLoadTeamVaultAnimRes();// 0x1f7385c
	FString GetVaultKeyByBlockHeight(float Height);// 0x1f7374c
	Rotator GetRelicateRotator();// 0x1f73704
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1f734c0
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x1f7327c
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x1f73204

--------------------------------
Class: VaultAnimData
	AnimationAsset* VaultAnimSoftPtr;//[Offset: 0x0, Size: 40]
	AnimationAsset* TeamVaultAnimSoftPtr;//[Offset: 0x28, Size: 40]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint64 PlayerUID;//[Offset: 0x20, Size: 8]
	int SubType;//[Offset: 0x28, Size: 4]
	FString CauseName;//[Offset: 0x2c, Size: 12]
	FString CauseActionName;//[Offset: 0x38, Size: 12]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	int AliasID;//[Offset: 0x48, Size: 4]
	FString AliasTitle;//[Offset: 0x4c, Size: 12]
	FString AliasNation;//[Offset: 0x58, Size: 12]
	int AliasRank;//[Offset: 0x64, Size: 4]
	FString AliasPartnerName;//[Offset: 0x68, Size: 12]
	int AliasPartnerRelation;//[Offset: 0x74, Size: 4]
	int SegmentLevel;//[Offset: 0x78, Size: 4]
	float KDNum;//[Offset: 0x7c, Size: 4]
	int GameCount;//[Offset: 0x80, Size: 4]
	float Distance;//[Offset: 0x84, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0x88, Size: 28]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xa4, Size: 28]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 4]
	float MarkTimeLen;//[Offset: 0x4, Size: 4]
	int MarkIcon;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x3b4, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x3bc, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x3c4, Size: 4]
	float autoOpenAngel;//[Offset: 0x3c8, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x3cc, Size: 4]
	int doorState;//[Offset: 0x3d0, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float DoorOperateTime;//[Offset: 0x3d8, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x3dc, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x3e0, Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x3e4, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	int DoorStateEx;//[Offset: 0x3ec, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x3f4, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x3f8, Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x3fc, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x404, Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x410, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x41c, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x420, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x42c, Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x438, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x440, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x450, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	void SetDoorBroken(bool bExtraDoor);// 0x1f7bab0
	void RefreshUIOnClient();// 0x1f7ba9c
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x1f7b9d8
	void OnRep_RepDoorStateEx();// 0x1f7b9c4
	void OnRep_RepDoorState();// 0x1f7b9b0
	void OnRep_RepDoorBrokenEx();// 0x1f7b99c
	void OnRep_RepDoorBroken();// 0x1f7b988
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1f7b840
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1f7b6f8
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x1f7b634
	void OnBPRespawned();// 0x1e30570
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1f7b438
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1f7b23c
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x1f7b178
	bool IsSameDoorState(int ClientState);// 0x1f7b0f8
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x1f7aed4
	enum[] GetDamageableGameObjectType();// 0x1f7ae0c
	void ForceNetUpdate();// 0x1f59cc4
	void DeCodeKey();// 0x1e603e4
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x1f7ad48
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x1f7abe4
	void BPSetObjectPoolInitialData();// 0x1e2d7d0
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x29fa2f4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x29fa2f4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x29fa2f4

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xa0, Size: 40]
	float blendTime;//[Offset: 0xc8, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0xd0, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0xdc, Size: 12]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0xe8, Size: 12]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0xf4, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x100, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x104, Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x10c, Size: 12]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x118, Size: 12]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x1dfb724
	bool HandlePickup(out const interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x1dfb300
	bool HandleDrop(int InCount, enum Reason);// 0x1dfad1c
	bool HandleDisuse(enum Reason);// 0x1dec17c
	BackpackComponent* GetBackpackComponent();// 0x1dfdcb0
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x1dfdbec

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x94, Size: 4]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0x98, Size: 12]
	class Character* FollowerCharacter;//[Offset: 0xa8, Size: 40]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x1c, Size: 4]
	float PropEndShowTime;//[Offset: 0x20, Size: 4]
	delegate OnActionReady;//[Offset: 0x38, Size: 12]
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x1e92c74
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x1e92b98
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x1e92abc
	void Destroy();// 0x1e8fce8
	void DelayShow();// 0x1e90bf0

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0xcc, Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0xd0, Size: 8]
	FName FPPSocketName;//[Offset: 0xd8, Size: 8]
	FName BoltActionCurveName;//[Offset: 0xe0, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0xe8, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0xf0, Size: 4]
	float BoltActionFov;//[Offset: 0xf4, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0xf8, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0xfc, Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x138, Size: 4]
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x13c, Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x178, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x17c, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x18c, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0x1c8, Size: 60]
	float TanHalfFOV;//[Offset: 0x208, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x210, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x218, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x1e1ec8c
	float SwitchSightConfigMaterial();// 0x29fa2f4
	void SwitchScopeMeshAnim(byte Type);// 0x1e1ec14
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x1e1eb9c
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x1e1eb24
	void SwitchRearSight(bool IsBegin);// 0x1e1ea9c
	void SwitchCameraMode(byte Mode);// 0x1e1ea24
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x29fa2f4
	void StopScopeIn();// 0x29fa2f4
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x29fa2f4
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x29fa2f4
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x1e1e958
	void SetTagCulling(bool IsUse);// 0x29fa2f4
	void SetNearClipPlane(bool EnableNearClip);// 0x1e1e8d8
	void ScopingChange(bool InValue);// 0x1e1e858
	void Scoping(byte NewType);// 0x1e1e7e0
	void ScopeZoomUpdate(float Alpha);// 0x1e1e768
	void ScopeZoomTick(float DeltaTime);// 0x1e1e6f0
	void ScopeTimelineUpdate(float Alpha);// 0x1e1e678
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1e1e5bc
	void ScopeOutLogic();// 0x1e1e5a8
	void ScopeOutEnd();// 0x29fa2f4
	void ScopeOut(byte NewType);// 0x1e1e530
	void ScopeNotHandFold();// 0x1e1e51c
	void ScopeInterrupt(byte NewType);// 0x1e1e4a4
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x1e1e3e8
	void ScopeInLogic();// 0x1e1e3d4
	void ScopeInEnd();// 0x29fa2f4
	void ScopeInContinue();// 0x1e1e3c0
	void ScopeInAfterTimeline();// 0x1e1e3ac
	void ScopeIn(byte NewType);// 0x1e1e334
	void ScopeHandFold();// 0x1e1e320
	void PlayScopeInTimeline();// 0x29fa2f4
	bool IsUseZoomScope();// 0x1e1e2f8
	bool IsRPGScopeIn();// 0x1e1e2d0
	bool IsCurWeaponAttachedAngledSight();// 0x1e1e0bc
	bool IsAngledSightBySlot(byte Slot);// 0x1e1e250
	bool IsAngledSight();// 0x1e1e220
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x1e1e164
	bool HaveAngledSightBySlot(byte Slot);// 0x1e1e0e4
	bool HaveAngledSight();// 0x1e1e0bc
	byte GetSightType();// 0x1e1e094
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x1e1dfd0
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x1e1df04
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled);// 0x29fa2f4
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x1e1de74
	FName GetScopeAimCameraSocketName();// 0x1e1de34
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x1e1dd54
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x1e1dbf4
	void BoltAction(float DeltaSeconds);// 0x1e1db7c
	void AttachToSightKeepTransform();// 0x29fa2f4
	void AttachToSight();// 0x29fa2f4
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x1e1da9c
	void ActiveComponentTickable();// 0x1e1da88

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 12]
	FString CauserNation;//[Offset: 0xc, Size: 12]
	FString VictimName;//[Offset: 0x18, Size: 12]
	FString VictimNation;//[Offset: 0x24, Size: 12]
	FString FuzzyCauserName;//[Offset: 0x30, Size: 12]
	FString FuzzyVictimName;//[Offset: 0x3c, Size: 12]
	int DamageType;//[Offset: 0x48, Size: 4]
	int AdditionalParam;//[Offset: 0x4c, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x50, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x54, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ResultHealthStatus;//[Offset: 0x5c, Size: 4]
	byte RecordRelationShip;//[Offset: 0x60, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x64, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x68, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x6c, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x70, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x74, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x78, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x7c, Size: 4]
	FString CauserPicURL;//[Offset: 0x80, Size: 12]
	FString VictimPicURL;//[Offset: 0x8c, Size: 12]
	FString RealKillerName;//[Offset: 0x98, Size: 12]
	int RealKillNum;//[Offset: 0xa4, Size: 4]
	byte CauserType;//[Offset: 0xa8, Size: 1]
	byte VictimType;//[Offset: 0xa9, Size: 1]
	int CauserTeamID;//[Offset: 0xac, Size: 4]
	int VictimTeamID;//[Offset: 0xb0, Size: 4]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	float VehicleEye;//[Offset: 0x78, Size: 4]
	float ParachuteEye;//[Offset: 0x7c, Size: 4]
	float FPPEye;//[Offset: 0x80, Size: 4]
	int SideMirrorModeC;//[Offset: 0x84, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0x88, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 4]
	FString VictimPlayerName;//[Offset: 0x38, Size: 12]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	float GuideInterval;//[Offset: 0xc4, Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0xd0, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0xf8, Size: 12]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x104, Size: 12]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x110, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x138, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0x144, Size: 4]
	int[] FinishedTips;//[Offset: 0x148, Size: 12]
	int[] FinishedCounts;//[Offset: 0x154, Size: 12]
	int PlayerLevel;//[Offset: 0x160, Size: 4]
	byte curPlayerCategory;//[Offset: 0x164, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x1f3ea90
	void ShowHideGuide(int TipsID, bool bShow);// 0x1f3e9cc
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x1f3e8c0
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x1f3e844
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x29fa2f4
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x1f3e6c4
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x1f3e380
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x1f3e240
	void HandleNewbieGuideBegin(FString GuideID);// 0x1f3e184
	bool GetIsAllowNewGuide();// 0x1f3e15c
	bool GetIsAllowLuaNewGuide();// 0x1f3e134
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x1f3dfb4

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	int MaxGuideLevel;//[Offset: 0x18, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c, Size: 12]
	int Priority;//[Offset: 0x28, Size: 4]
	int MuteFlag;//[Offset: 0x2c, Size: 4]
	int PreconditionID;//[Offset: 0x30, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x38, Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44, Size: 4]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x48, Size: 12]
	float Duration;//[Offset: 0x54, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x58, Size: 12]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x5c, Size: 8]
	FString LuaFilePath;//[Offset: 0x64, Size: 12]
	bool ReconnectRecover();// 0x1e65bd4
	bool IsOK();// 0x1e65c18

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x1f3db10

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x1e65bd4
	void OnEventTrigger();// 0x1debe60
	Actor* GetCurrentEventOwnerActor();// 0x1dcdf68
	bool EnableListener();// 0x1ed0d18
	bool DisableListener();// 0x1e65c18

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x2c, Size: 12]
	FString MountOuterName;//[Offset: 0x38, Size: 12]
	AnchorData LayoutData;//[Offset: 0x44, Size: 40]
	FString LogicManagerNames;//[Offset: 0x6c, Size: 12]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ZOrder;//[Offset: 0x7c, Size: 4]
	Widget* UIWidget;//[Offset: 0x80, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x20f0b90
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x20f0a7c
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x20f08d0
	void RPC_GetClientTimeRequest(int Index);// 0x20f081c
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x20f0720
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x20f0660
	void ReportDebugInfo(int RporetedId);// 0x20f05ac
	void OnServerAboutToReconnect();// 0x20f0598
	void GetClientTimeInterval();// 0x20f0584
	void CheckTimeLine();// 0x20f0570

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float TimeStartDelay;//[Offset: 0xc0, Size: 4]
	float SyncInterval;//[Offset: 0xc4, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x20f1b84
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x1dbb2dc
	void OnTimeInspectorColdMove_Vehicle();// 0x20f1b70
	void OnTimeInspectorColdMove_Own();// 0x20f1b5c
	void OnServerAboutToReconnect();// 0x20f1b48
	void CheckTimeLine();// 0x20f1b34

--------------------------------
Class: HiggsBosonComponent.ActorComponent.Object
	FString TraceData;//[Offset: 0x1c8, Size: 12]
	FString GameTraceData;//[Offset: 0x1d4, Size: 12]
	uint32 HeartBreaks;//[Offset: 0x1e0, Size: 4]
	FString HeartInfo;//[Offset: 0x1e4, Size: 12]
	delegate OnSwiftHawkDelegate;//[Offset: 0x1f0, Size: 12]
	delegate OnGlueHiaRayResult;//[Offset: 0x1fc, Size: 12]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x208, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x20c, Size: 4]
	void SwiftHawk(const byte[] Hawks, uint32 Magic);// 0x1ef3464
	void RPC_ServerGlueHiaPark(int8 HeShui, const byte[] GlueHiaParkArr, uint32 HiaStatus, const byte[] GlueArg);// 0x1ef3254
	void RPC_ServerCapbo(int8 BoCapC, int8 InBoType, const byte[] BoDataArr);// 0x1ef30d0
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x1ef2f4c
	void OnWeaponAimInput(float InDistToEnemy, float InYaw, float InPitch, float InRoll);// 0x1ef2e04
	void OnTouchInput(float InYaw, float InPitch, float InRoll);// 0x1ef2d04
	void OnStopFireEvent();// 0x1ef2cf0
	void OnStartFireEvent();// 0x1ef2cdc
	void OnSkillEndVisual(const Actor* InTarget, const Actor* InCauser);// 0x1ef2c20
	void OnSkillEndTrans(const Actor* InTarget, const Actor* InCauser);// 0x1ef2b64
	void OnSkillBeginVisual(const Actor* InTarget, const Actor* InCauser);// 0x1ef2aa8
	void OnSkillBeginTrans(const Actor* InTarget, const Actor* InCauser);// 0x1ef29ec
	void OnPlayerScopeOut(bool bBegan);// 0x1ef296c
	void OnPlayerScopeIn(bool bBegan);// 0x1ef28ec
	void OnMyPawnRespawn(UAEPlayerController* InPlayerController);// 0x1ef2874
	void OnKillSomeOneEvent(const Actor* InSomeOne);// 0x1ef27fc
	void OnGyroInput(float InYaw, float InPitch, float InRoll);// 0x1ef26fc
	void OnCapboReturn(int BoCapC, int InBoType, out const byte[] RetData);// 0x1ef25a8
	void OnBulletImpactEvent(const Actor* InCauser, out const HitResult InImpactResult);// 0x1ef24c8
	void FlushGameEnd();// 0x1ef24b4
	void ClientSwiftHawk(int SequenceID);// 0x1dbb240

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x134, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x140, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x14c, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x158, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x164, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x170, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x17c, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x188, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x194, Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1a0, Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1ac, Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b8, Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1c4, Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1d0, Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1dc, Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1e8, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f4, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x200, Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x20c, Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x218, Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x224, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x230, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x248, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x254, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x260, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsBulletID;//[Offset: 0x278, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x284, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x290, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2b4, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x2c0, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2c4, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2c8, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2cc, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2d0, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2d4, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2d8, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2dc, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2e0, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2e4, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2e8, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f4, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x300, Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x30c, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x318, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x324, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x330, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x33c, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x348, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x354, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x360, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x36c, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x378, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x384, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x390, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x39c, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3a8, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3ac, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3b0, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3bc, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3c8, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3d4, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3e0, Size: 12]
	float MaxFuelConsume;//[Offset: 0x3ec, Size: 4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x470, Size: 12]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x47c, Size: 12]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x488, Size: 12]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x494, Size: 12]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x4a0, Size: 12]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x4ac, Size: 12]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x4b8, Size: 12]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x4c4, Size: 12]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x4d0, Size: 12]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x4e0, Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x4ec, Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x4f8, Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x504, Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x510, Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x51c, Size: 12]
	VerifySwitch FarJump;//[Offset: 0x528, Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x534, Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x540, Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x54c, Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x558, Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x564, Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x570, Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x57c, Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x588, Size: 12]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x594, Size: 28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x5b0, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x5b4, Size: 12]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x5dc, Size: 12]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x5e8, Size: 12]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x5f4, Size: 12]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x600, Size: 12]
	VerifySwitch BulletDirError;//[Offset: 0x60c, Size: 12]
	void ReportAntiCheatDetailData();// 0x1f60f0c
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x1f60e70
	void OnRecoverOnServer();// 0x1f60e5c
	void OnPreReconnectOnServer();// 0x1f60e48

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 4]
	uint32 EventId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x10, Size: 12]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 4]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xbc, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc0, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc4, Size: 4]
	void SetAutoOpenDoorMode(int Mode);// 0x1e61d18
	void SetAutoOpenDoorEnable(bool bEnable);// 0x1e61c98
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x1e61b9c
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int doorState);// 0x1e61aa0
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x1e61a20
	PUBGDoor* GetPriorityDoor();// 0x1e619f8
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x1e618a0
	void BP_SimulateUIClick(bool bExtraDoor);// 0x29fa2f4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x29fa2f4

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xc0, Size: 4]
	FString Reason;//[Offset: 0xc4, Size: 12]
	int[] audioChat;//[Offset: 0xd0, Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xdc, Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0xe8, Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0xf4, Size: 12]
	FString TeammateColor;//[Offset: 0x100, Size: 12]
	FString MyColor;//[Offset: 0x10c, Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x118, Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x154, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x190, Size: 12]
	float SendMsgCD;//[Offset: 0x19c, Size: 4]
	float lastShowChatTime;//[Offset: 0x1a0, Size: 4]
	float ShowChatDuration;//[Offset: 0x1a4, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x1a8, Size: 12]
	FString EndChar;//[Offset: 0x1b4, Size: 12]
	FString ColonChar;//[Offset: 0x1c0, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x1cc, Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x208, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x214, Size: 4]
	int itemIDOnGround;//[Offset: 0x228, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x22c, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x230, Size: 4]
	Vector hitItemPosition;//[Offset: 0x234, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x244, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x250, Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x25c, Size: 12]
	InGameChatMsg CurrMsg;//[Offset: 0x268, Size: 72]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x29fa2f4
	void ShowTeamMsg(out const InGameChatMsg msgItem, bool isMe, bool ShowChat);// 0x1e5bd40
	void ShowQuickPanel(bool bShow);// 0x1e5bcc0
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x1e5bb48
	void SendDirtyFilterContent(FString Content);// 0x29fa2f4
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x29fa2f4
	void ReportBattleChat(int MsgID, FString Msg);// 0x29fa2f4
	void OnInviteNextBattle(FString gid, FString Name);// 0x1e5ba08
	void OnFilterFinish(FString filterText);// 0x29fa2f4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x29fa2f4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x29fa2f4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x29fa2f4
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x1e5b8c8
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x1e5b73c
	void FindTextIDByAudioID();// 0x29fa2f4
	void CloseChatHistoryList();// 0x29fa2f4
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x1e5b5a8
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x1e5b4ec
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemID, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat);// 0x29fa2f4
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x1e5b114

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x4, Size: 12]
	int AlternateChatID;//[Offset: 0x10, Size: 4]
	int FlagIndex;//[Offset: 0x14, Size: 4]
	int traceDist;//[Offset: 0x18, Size: 4]
	float minDist;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xbc, Size: 4]
	float PickUpZLimit;//[Offset: 0xc0, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0xc8, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0xd4, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0xd8, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0xdc, Size: 4]
	Vector2D RegionXRange;//[Offset: 0xe0, Size: 8]
	Vector2D RegionYRange;//[Offset: 0xe8, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0xf4, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x100, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x104, Size: 4]
	float DrawTime;//[Offset: 0x108, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x110, Size: 4]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x114, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x120, Size: 12]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x1f58714
	void ServerPutDownTarget(Actor* Target);// 0x1f58660
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x1f584cc
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x1f58254
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x1f58194
	void PutDownTarget(Actor* Target);// 0x1f5811c
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x1f57ee8
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x1f57da0
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x1f57d28
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x1f57c64
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x1f57bd4
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x1f57ac8
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x1f579c4
	void ControlClientPutDownTarget(Actor* Target);// 0x1f57910
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x1f57814
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x1f57660
	void ClampWorldLocation(out Vector OutVector);// 0x1f575dc

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int MsgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	int ItemID;//[Offset: 0x24, Size: 4]
	FString PlayerKeyString;//[Offset: 0x28, Size: 12]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	Vector hitPosition;//[Offset: 0x38, Size: 12]
	int itemIDOnGround;//[Offset: 0x44, Size: 4]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc, Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x1eeebf8
	void CreateGuideUI();// 0x29fa2f4

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 4]
	int guildUI;//[Offset: 0x4, Size: 4]
	Vector2D Offset;//[Offset: 0x8, Size: 8]
	Vector2D Size;//[Offset: 0x10, Size: 8]
	int childData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xbc, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0xc8, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	int TextID_OutRange;//[Offset: 0xd8, Size: 4]
	FString PreFix_Command;//[Offset: 0xdc, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0xe8, Size: 12]
	FString PreFix_Mark;//[Offset: 0xf4, Size: 12]
	int MinTraceDist;//[Offset: 0x100, Size: 4]
	int MaxTraceDist;//[Offset: 0x104, Size: 4]
	int ItemTraceDist;//[Offset: 0x108, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x10c, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x110, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x114, Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x118, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x11c, Size: 60]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x158, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x194, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x1d0, Size: 60]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x20c, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x248, Size: 60]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x284, Size: 12]
	FString[] TempIDArray;//[Offset: 0x290, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x29c, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x2d8, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x314, Size: 60]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x350, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x1f8c1e4
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x29fa2f4
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x1f8c09c
	void ServerDelMsg(FString MsgID);// 0x1f8bfa8
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x29fa2f4
	void RemoveActorMask(int ActorNetGUID);// 0x1f8bef4
	void OperMark(FString MsgID);// 0x1f8be38
	void MakeQuickNeed(enum SignSubType);// 0x1f8bdc0
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x1f8bd48
	void MakeQuickMark();// 0x1f8bd34
	void MakeQuickCommand(byte SignType);// 0x1f8bcbc
	bool IsSelfMark(FString MsgID);// 0x1f8bbf8
	int GetVoiceAudioID(enum MsgType);// 0x29fa2f4
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x29fa2f4
	void DelMarkFromPool(FString MsgMark);// 0x1f8bb3c
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool IsSelf, bool ShowChat);// 0x1f8b9c8
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool IsSelf);// 0x1f8b8ac
	void ClientDelMsg(FString MsgID);// 0x1f8b7e8
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x1f8b6a8
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x1f8b5d8
	void AddActorMask(int ActorNetGUID);// 0x1f8b524

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	FString IconPath;//[Offset: 0x18, Size: 12]
	FString IconBGPath;//[Offset: 0x24, Size: 12]
	FString IconOuterPath;//[Offset: 0x30, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x3c, Size: 12]
	FString ReplyID;//[Offset: 0x48, Size: 12]
	Vector Loc;//[Offset: 0x54, Size: 12]
	int MaxNum;//[Offset: 0x60, Size: 4]
	int LifeSpan;//[Offset: 0x64, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x48, Size: 4]
	enum MsgType;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc, Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0, Size: 12]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0xcc, Size: 12]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0xd8, Size: 60]
	int RetrieveUseItemAreaType(int ItemID, Vector PlayerLocation);// 0x1e235a0
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x1e23528
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x1e2341c
	int RetrieveLandLocType(FString TargetName);// 0x1e232bc
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x1e231b4
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x1e230a4
	bool IsTriggerActive(int InTaskID);// 0x1e23024
	bool IsSpecialPickItem(int InItemID);// 0x1e22fa4
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x1e22bbc
	void HandlePlayerPickupItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x1e22abc
	void HandlePlayerKilling();// 0x1e22aa8
	void HandlePlayerEnterArea(int AreaID);// 0x1e22a30
	void HandlePlayerDropItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x1e22930
	void HandlePlayerDoEmote(int EmoteIndex);// 0x1e228b8
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x1e226d0
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x1e225d0
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x1e224f0
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x1e22464
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x29fa2f4
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x29fa2f4
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x1e222f4
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x1e221a0
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x29fa2f4
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x29fa2f4
	FString GetOwningPlayerName();// 0x1e220e0
	FString GetMapName();// 0x1e22020
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x29fa2f4
	int GetItemUseAreaIDFromDataTable(int ItemID, Vector InPlayerLocation);// 0x29fa2f4
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x1e21e34
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1e21d70
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x1e21ca4
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x1e21a64
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x1e2195c
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x1e21898

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c, Size: 1]
	enum TriggerObjectType;//[Offset: 0x1d, Size: 1]
	int EventDelayTime;//[Offset: 0x20, Size: 4]
	int ActionDelayTime;//[Offset: 0x24, Size: 4]
	FString TriggerName;//[Offset: 0x28, Size: 12]
	Actor* OuterActor;//[Offset: 0x34, Size: 4]
	class Object[] TriggerEventsClass;//[Offset: 0x38, Size: 12]
	TriggerAction*[] TriggerActions;//[Offset: 0x44, Size: 12]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x50, Size: 12]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x5c, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0x70, Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0x78, Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0x80, Size: 4]
	FString DelayEventName;//[Offset: 0x84, Size: 12]
	FString FiredEventName;//[Offset: 0x90, Size: 12]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x9c, Size: 60]
	<TriggerAction*> CompleteActions;//[Offset: 0xd8, Size: 60]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x118, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float TickInterval;//[Offset: 0x138, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	Property*[] eventParams;//[Offset: 0x140, Size: 12]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum ExecPolicy;//[Offset: 0x29, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x2c, Size: 4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x30, Size: 4]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58, Size: 64]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x2d0, Size: 12]
	FString[] ClassPaths;//[Offset: 0x2dc, Size: 12]
	FString ConfigFilePath;//[Offset: 0x2e8, Size: 12]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x2f4, Size: 4]
	FString ClientConfigFilePath;//[Offset: 0x2f8, Size: 12]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x304, Size: 16]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x314, Size: 60]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x350, Size: 12]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x35c, Size: 4]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x360, Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x39c, Size: 4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x3a0, Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x3a4, Size: 4]
	FString DescData;//[Offset: 0x3a8, Size: 12]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x3b4, Size: 4]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x3b8, Size: 60]
	TaskRepData TaskData;//[Offset: 0x3fc, Size: 16]
	bool StartLevelDirector();// 0x4db12b0
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x4db1114
	void SetEnable(bool Enab);// 0x4db1098
	void S2Sim_CallExcuteAction();// 0x1dcbc3c
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x4db0fe4
	void OnRep_LevelDirectorData();// 0x4db0fd0
	bool InitialLevelDirector();// 0x4db0fa0
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x4db0d28
	bool GetHasBeenInit();// 0x4db0d00
	VariableSet* GetDataSet();// 0x4db0cd8
	int GetCurTaskID();// 0x2170edc
	void ForceExecuteTrigger(FString TriggerName);// 0x1ed6c0c
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x4db0a70
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x4db0808
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x4db0590
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x4db0328
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x4db0070
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x4dafe00
	void DeactiveNode(FString NodeName);// 0x4dafca8
	void ClientExecuteAction(FString ActionClassName, int64 UId, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x4dafa50
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x4daf8b4
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x4daf710
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x4daf56c
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x4daf2fc
	void ActiveNode(FString NodeName);// 0x4daf1a4

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerAction* Action;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x2cc, Size: 12]
	uint32 UniqueId;//[Offset: 0x2d8, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x2dc, Size: 4]
	void OnRep_LevelDirector();// 0x4db20e4
	void OnRep_ActionRepDatas();// 0x4db20d0
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x4db1fe8

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 8]
	int64 UId;//[Offset: 0x8, Size: 8]
	FString ActionClassName;//[Offset: 0x10, Size: 12]
	TriggerParamRepData[] ParamDatas;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 1]
	byte ParamSubType;//[Offset: 0x1, Size: 1]
	FString ParamName;//[Offset: 0x4, Size: 12]
	byte[] ParamData;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 12]
	int NodeID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c, Size: 12]
	VariableSet* DataSet;//[Offset: 0x28, Size: 4]
	Actor* GetLastIteratorActor();// 0x4db35b0

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 12]
	FString ClassFullPath;//[Offset: 0xc, Size: 12]
	float RandomRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24, Size: 4]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x28, Size: 60]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c, Size: 4]
	UFlowNodeRepData RepData;//[Offset: 0x20, Size: 16]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x44, Size: 4]
	enum NodeType;//[Offset: 0x48, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x28, Size: 60]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x68, Size: 60]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	Object* EventInstigator;//[Offset: 0x28, Size: 4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x38, Size: 60]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 4]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x28, Size: 60]
	<FString> ObjectRelevantEvents;//[Offset: 0x64, Size: 60]
	Actor* ListenerEntity;//[Offset: 0xa0, Size: 4]
	Property*[] Params;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 12]
	int TaskID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	TriggerCondition*[] ChildConditions;//[Offset: 0x20, Size: 12]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38, Size: 4]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x4dadd74

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x150, Size: 4]
	byte[] TaskEventTypes;//[Offset: 0x154, Size: 12]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x160, Size: 12]
	int TaskID;//[Offset: 0x16c, Size: 4]
	byte TaskType;//[Offset: 0x170, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x212e0e4
	void RedoAction();// 0x1de831c
	void NofityTriggerComplete();// 0x1e8fce8
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x1deb314
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x212df00
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x212de34
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x212ddac
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x212dd2c
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x212dca4
	TriggerAction* CreateRedoAction(byte ActionType);// 0x212dc1c
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x212dabc
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x212d914
	TriggerCondition* CreateKillPlayerCondition();// 0x212d8ec
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x212d86c
	TriggerAction* CreateDoAction(byte ActionType);// 0x212d7e4
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x212d764
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x212d6a0
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x212d540
	TriggerAction* CreateAction(byte ActionType);// 0x212d4b8
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x212d280
	byte[] ConstructRedoActions();// 0x29fa2f4
	byte[] ConstructEvents();// 0x29fa2f4
	TriggerCondition* ConstructConditions();// 0x29fa2f4
	byte[] ConstructActions();// 0x29fa2f4
	void AddEventTypes(byte[] EventTypes);// 0x212d128
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x212d054

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x3c, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	void SetTargetParam(int Value);// 0x20fff14
	void SetConditionParam(int Value);// 0x1dee38c
	bool IsSatisfy(const TriggerEvent* Event);// 0x1dc7f48
	bool IsSameCondition(byte InTaskConditionType);// 0x20ffe8c
	bool FillDataSource(VariableSet* InDataSource);// 0x1e7bda4
	bool DeactiveCondition(VariableSet* InDataSource);// 0x1e11b38
	bool CompareParam(VariableSet* InDataSource);// 0x1e135c8
	bool ActiveCondition(VariableSet* InDataSource);// 0x1deb314

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0, Size: 4]
	int PosY;//[Offset: 0x4, Size: 4]
	int PosZ;//[Offset: 0x8, Size: 4]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	float SignalHP;//[Offset: 0x20, Size: 4]
	uint32 PlayerKey;//[Offset: 0x24, Size: 4]
	int GotAirDropNum;//[Offset: 0x28, Size: 4]
	int MaxKillDistance;//[Offset: 0x2c, Size: 4]
	int Damage;//[Offset: 0x30, Size: 4]
	int InDamage;//[Offset: 0x34, Size: 4]
	int Heal;//[Offset: 0x38, Size: 4]
	int HeadShotNum;//[Offset: 0x3c, Size: 4]
	int KillNumInVehicle;//[Offset: 0x40, Size: 4]
	int SurvivalTime;//[Offset: 0x44, Size: 4]
	int DriveDistance;//[Offset: 0x48, Size: 4]
	int marchDistance;//[Offset: 0x4c, Size: 4]
	int MonsterCatchupDistance;//[Offset: 0x50, Size: 4]
	int Assists;//[Offset: 0x54, Size: 4]
	int KillNumByGrenade;//[Offset: 0x58, Size: 4]
	int Rank;//[Offset: 0x5c, Size: 4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x64, Size: 4]
	int Knockouts;//[Offset: 0x68, Size: 4]
	int rescueTimes;//[Offset: 0x6c, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x70, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x74, Size: 4]
	int CurWeaponID;//[Offset: 0x78, Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UId;//[Offset: 0x80, Size: 8]
	FString PlayerName;//[Offset: 0x88, Size: 12]
	FString PlayerOpenID;//[Offset: 0x94, Size: 12]
	FString PicUrl;//[Offset: 0xa0, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int TeamID;//[Offset: 0xb0, Size: 4]
	FString TeamName;//[Offset: 0xb4, Size: 12]
	Pawn* Character;//[Offset: 0xc0, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x4, Size: 12]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString LogoPicUrl;//[Offset: 0x14, Size: 12]
	int KillNum;//[Offset: 0x20, Size: 4]
	int LiveMemberNum;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	uint64 UId;//[Offset: 0x20, Size: 8]
	Vector[] PosList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]
	int SyncTicket;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2cc, Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x2d0, Size: 12]
	Actor* ReturnActor;//[Offset: 0x2dc, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x300, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x304, Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x308, Size: 12]
	float MinMovingSpeed;//[Offset: 0x314, Size: 4]
	float MaxMovingTime;//[Offset: 0x318, Size: 4]
	float ObservingTime;//[Offset: 0x31c, Size: 4]
	float TrackingDelay;//[Offset: 0x320, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x324, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x328, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x330, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x338, Size: 4]
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x1f064d0
	void ForceEnd();// 0x1f064bc

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xc0, Size: 24]
	float LastFinishCD;//[Offset: 0xd8, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0xe0, Size: 4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xe4, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0xe8, Size: 4]
	enum VehicleUserState;//[Offset: 0xec, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0xf0, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0xf4, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0xfc, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x108, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x114, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x120, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x134, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x148, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x158, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x168, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x16c, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x170, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x174, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x17c, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x180, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x184, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x188, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x190, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1a0, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1a4, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x1a8, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x1b4, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x1c4, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x1fc, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x204, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x20c, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x210, Size: 4]
	enum CurrentSeatType;//[Offset: 0x214, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x240, Size: 4]
	float FastestAllowDistance;//[Offset: 0x244, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x248, Size: 4]
	int VehicleIconID;//[Offset: 0x24c, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x268, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x278, Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x284, Size: 12]
	void UseVehicleWeaponOrNot();// 0x2158824
	void UpdateVehWeaponPassengerViewLimit();// 0x2158810
	void UpdatePassengerViewPitchLimit();// 0x21587fc
	void TurnVehicle(float Rate);// 0x2158784
	void TryUseHorn(bool bUse);// 0x2158704
	void TryShutDownUnmannedVehicle();// 0x21586f0
	void TryPauseUnmannedVehicle();// 0x21586dc
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x2158604
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x215858c
	void TryLaunchCurrentUnmannedVehicle();// 0x215856c
	void TryExitVehicle();// 0x2158558
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x215849c
	void TryChangeVehicleSeat();// 0x2158488
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x2158408
	bool TryChangeFreeFireSeatAndScopeIn();// 0x21583e0
	bool TryChangeFreeFireSeatAndLeanOut();// 0x21583b8
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x29fa2f4
	void TestMoveVehicleRight(float Rate);// 0x2158340
	void TestMoveVehicleForward(float Rate);// 0x21582c8
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x2158204
	void StopFireVehicleWeapon();// 0x21581f0
	bool ShowVehicleWeaponUI();// 0x21581c8
	void SetVehicleUserState(enum UserState);// 0x2158154
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x21580d4
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x1dd8ce8
	void SetIsAutoMoveForward(bool IsEnable);// 0x2158054
	void SetBrake(float Rate);// 0x2157fdc
	void SetBoosting(bool bEnabled);// 0x2157f5c
	void SetAirControlF(float Rate);// 0x2157ee4
	void SetAirControlB(float Rate);// 0x2157e6c
	void ServerUseVehicleWeaponOrNot(int SeatId, bool bUse);// 0x2157d5c
	void ServerStopFireVehicleWeapon();// 0x2157d00
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x2157c4c
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x2157b88
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x2157b10
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x2157a48
	void Server_JoystickCenterClickHandler();// 0x21579ec
	void SendToServerUnmannedVehicleUse();// 0x2157990
	void SendToServerUnmannedVehicleRecall();// 0x2157934
	void SendToServerUnmannedVehiclePause();// 0x21578d8
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x1ee70dc
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x1f004b8
	void RspLeanOut(bool bOut);// 0x2157850
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x2157784
	void RspExitVehicle(bool bSuccess);// 0x21576fc
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x21575f0
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x2157494
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn);// 0x21572e0
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x21571e4
	void ReqShutDownUnmannedVehicle();// 0x2157188
	void ReqQuickSwitchSeat();// 0x2157174
	void ReqPauseUnmannedVehicle();// 0x2157118
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x215701c
	void ReqLeanOut(bool IsLeanOut);// 0x2156f54
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x2156ea0
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x2156df4
	void ReqExchangeVehicleSeat();// 0x2156d98
	void ReqEraseLastDriveVehicle();// 0x2156d3c
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x2156c40
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x2156b8c
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x2156ac4
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x21569fc
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x2156934
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x21568bc
	void OnUnmannedVehicle_Standby_Reconnet();// 0x29fa2f4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x29fa2f4
	void OnServerReconnected();// 0x21568a8
	void OnScopeInAfterChangeSeat();// 0x2156894
	void OnRep_DefineID();// 0x2156880
	void OnRep_BornInVehicle();// 0x215686c
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x29fa2f4
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x29fa2f4
	void OnPauseUnmannedVehicleCompleted();// 0x29fa2f4
	void OnLeanOutAfterChangeSeat();// 0x2156858
	void OnLaunchUnmannedVehicleCompleted();// 0x29fa2f4
	void OnInputAxisMoveRight(float Rate);// 0x29fa2f4
	void OnInputAxisMoveForward(float Rate);// 0x29fa2f4
	void OnExitVehicleCompleted();// 0x29fa2f4
	void OnEnterVehicleCompleted(enum SeatType);// 0x29fa2f4
	void OnCurrrentClosestVehicleChanged();// 0x29fa2f4
	void OnClientReconnected();// 0x2156844
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x29fa2f4
	void NotifyLeaveVehicleFailed();// 0x1e6a3e0
	void MoveVehicleUp(float Rate);// 0x21567cc
	void MoveVehicleRight(float Rate);// 0x2156754
	void MoveVehicleForward(float Rate);// 0x21566dc
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x2156618
	bool IsControllingUnmannedVehicle();// 0x21565f0
	bool IgnoreVehicleLookInput();// 0x21565c8
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x2156550
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x215653c
	void HandleLocalBackpackCurrentWeaponFinished();// 0x2156528
	bool HandleClientReconnecting();// 0x2156500
	enum GetVehicleUserState();// 0x21564e4
	STExtraVehicleBase* GetVehicle();// 0x21564c8
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x21564ac
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x2156484
	bool GetAssistantState();// 0x215645c
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x2156304
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x21561a8
	void FlipTrackVehicleDirection();// 0x2156194
	void FireVehicleWeapon();// 0x2156180
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x21560b0
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x2155ffc
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x1dbb240
	void Client_UnbindTouchEvents();// 0x2155fa0
	void Client_ShouldBindTouchEvents();// 0x2155f44
	bool CheckCanLeanOutVehicle();// 0x2155f1c
	void ChangeAssistantState(bool bEnter);// 0x2155e9c
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x2155e1c
	bool CanUseVehicleHorn();// 0x2155df4
	void BrakeTrackVehicle(bool bIsBrake);// 0x2155d74
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x2155cf4
	void AddVehicleFuel(float amount);// 0x2155c7c

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xbc, Size: 12]
	enum StartStateType;//[Offset: 0xc8, Size: 1]
	enum FinishStateType;//[Offset: 0xc9, Size: 1]
	State* CurrentState;//[Offset: 0xcc, Size: 4]
	enum CurrentStateType;//[Offset: 0xd0, Size: 1]
	enum LastStateType;//[Offset: 0xd1, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x468, Size: 12]
	FString TreasureBoxName;//[Offset: 0x474, Size: 12]
	float TotalHP;//[Offset: 0x480, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x484, Size: 4]
	float TotalTime;//[Offset: 0x488, Size: 4]
	int boxId;//[Offset: 0x48c, Size: 4]
	Vector GroupLoc;//[Offset: 0x490, Size: 12]
	float DestroyTime;//[Offset: 0x49c, Size: 4]
	float OperationalDistance;//[Offset: 0x4a0, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x4a4, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x4a8, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x4b0, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x4e0, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x4f0, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x520, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x530, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x560, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x570, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x5a0, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x5b0, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x5e0, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x5e4, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x5e8, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x5ec, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x5f8, Size: 12]
	enum PickUpBoxType;//[Offset: 0x604, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x606, Size: 1]
	int IconID;//[Offset: 0x608, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x663, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x664, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x668, Size: 4]
	int HideLightColumn;//[Offset: 0x66c, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x670, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x674, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x678, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x680, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x684, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x688, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x694, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x6a4, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x6a8, Size: 4]
	float StartedTime;//[Offset: 0x6c8, Size: 4]
	enum CurState;//[Offset: 0x6cc, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x6d0, Size: 4]
	int StartedTeamId;//[Offset: 0x6d4, Size: 4]
	float CountdownTime;//[Offset: 0x6d8, Size: 4]
	float StartDestroytime;//[Offset: 0x6dc, Size: 4]
	int MonsterBoxId;//[Offset: 0x6e0, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x6e4, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x6e8, Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x728, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x72c, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x730, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x734, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x738, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x73c, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x770, Size: 4]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x29fa2f4
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x1f28a84
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x29fa2f4
	void SetClientClientAutoActiveBoxCD(int CD);// 0x1f28a0c
	void SetAutoActiveBoxCD(int leftTime);// 0x1f28994
	void OnTreasureBoxPicked__DelegateSignature();// 0x29fa2f4
	void OnSomeonePickItem(uint32 InPC);// 0x1f2891c
	void OnRep_HideLightColumn();// 0x1f28908
	void OnRep_CurState();// 0x1f288f4
	void OnBoxEmpty();// 0x1f288e0
	void OnAnimationStop();// 0x1f288cc
	bool IsShowIcon();// 0x1f288a4
	int GetMonsterBoxId();// 0x1f2887c
	enum[] GetDamageableGameObjectType();// 0x1f287b4
	enum GetCurState();// 0x1f2878c
	int GetClientClientAutoActiveBoxCD();// 0x1f28764
	void DeActiveMonsterTreasureBox();// 0x1f28750
	bool CanBeDamaged();// 0x1f28728
	void BPRepCurState();// 0x29fa2f4
	void BPOnStopMonsterTreasureBox();// 0x29fa2f4
	void BPOnStartMonsterTreasureBox();// 0x29fa2f4
	void BPOnHideLightColumn();// 0x29fa2f4
	void BPOnCountdownEnd();// 0x29fa2f4
	void BPOnBreakMonsterTreasureBox();// 0x29fa2f4
	void BPOnAnimationStop();// 0x29fa2f4
	void BPOnAnimationAkAudioStop();// 0x29fa2f4
	void BPOnAnimationAkAudioStart();// 0x29fa2f4
	FString BPGetTreasureBoxName();// 0x29fa2f4

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x364, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x368, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x36c, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x370, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x374, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x378, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x384, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	byte[] SerializeData;//[Offset: 0x418, Size: 12]
	void OnRep_WindowList();// 0x2609398
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x2609170

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x660, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x668, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x66c, Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x670, Size: 4]
	void NotifyServerBroken();// 0x29fa2f4
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x26157a0
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x29fa2f4
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x26156d0
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x261560c
	UAEWindowRepData GetRepData();// 0x26154d4

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0xc0, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0xc8, Size: 136]
	int produceID;//[Offset: 0x150, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x154, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x15c, Size: 12]
	int GridStep;//[Offset: 0x168, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x16c, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x174, Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0x180, Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x18c, Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x198, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x1a8, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x1e0, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x210, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x215, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x218, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x220, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x22c, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x230, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x234, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x238, Size: 4]
	int OpenDropGroundEffect;//[Offset: 0x23c, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x240, Size: 4]
	float MaxTraceDist;//[Offset: 0x244, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x24c, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x258, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x1f77dd8
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x1f77d1c
	void SetProduceID(int produceID);// 0x1f77ca8
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x1f77b44
	void SetDropPlanIDList(out int[] IDList);// 0x1f77a78
	void SetDropItemLifeSpan(int ItemTime);// 0x1f77a00
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x1f77810
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x1f77610
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x1f774a0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x1f77380
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x1f772e8
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x1f771d0
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x1f77074
	int GetCountStrNum(FString CountStr);// 0x1f76f14
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x1f76dc0
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x1f76c6c
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x1f768f4
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x1f767f8
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x1f766e0
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x1f76430
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x1f76308
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x1f761a8
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x1f76070
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x1f75f54

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0xbc, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xc4, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xd4, Size: 4]
	float CustomGravity;//[Offset: 0xd8, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xdc, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xe0, Size: 4]
	float ParticleScale;//[Offset: 0xe4, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0xe8, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x110, Size: 4]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x118, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x120, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x148, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x14c, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x158, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x1e7f3fc
	void OnDropGroundLoadFinsh();// 0x1e7f3e8
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x1e7f298
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x1e7f194

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2cc, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x2d0, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2d4, Size: 4]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x2d8, Size: 12]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x2e4, Size: 60]
	class AnimInstance* animBP;//[Offset: 0x320, Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x324, Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x330, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x338, Size: 60]
	FName OBPlayerName;//[Offset: 0x378, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x380, Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x384, Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x388, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x38c, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x398, Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x3a4, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x3a8, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x3b4, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x3c0, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x3cc, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x3d0, Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x1de147c
	void SetEnable(bool IsEnable);// 0x1de13fc
	void ResetWeaponPendant(int WeaponId);// 0x1de1384
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x1de130c
	void RenderCaptureScene();// 0x1de12f8
	void RefreshAvatar();// 0x1de12e4
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x1de123c
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x1de116c
	void OnSimulatedWeaponChanged();// 0x1de1158
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemID);// 0x1de104c
	void OnAvatarAllMeshLoaded();// 0x1de1038
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x1de0f1c
	int[] GetWeaponSkinIDs();// 0x1de0e5c
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x1de0e34
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x1de0cc0
	void EquipWeapon();// 0x1de0cac
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x1de0c34
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x1de0b6c
	void CreateWeapon(bool IsSkeletalMesh);// 0x1de0aec
	void BluePrintSetEnable(bool IsEnable);// 0x29fa2f4
	void ApplyAnimation();// 0x1de0ad8

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2c4, Size: 1]
	float FOVAngle;//[Offset: 0x2c8, Size: 4]
	float OrthoWidth;//[Offset: 0x2cc, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2d0, Size: 4]
	byte CaptureSource;//[Offset: 0x2d4, Size: 1]
	byte CompositeMode;//[Offset: 0x2d5, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0, Size: 1328]
	float PostProcessBlendWeight;//[Offset: 0x810, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x820, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x864, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x870, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87c, Size: 1]
	void CaptureScene();// 0x4244f24
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x4244df4

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x25d, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x260, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x26c, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x278, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x284, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	float LODDistanceFactor;//[Offset: 0x294, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x298, Size: 4]
	int CaptureSortPriority;//[Offset: 0x29c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2a0, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4244858
	void ShowOnlyActorComponents(Actor* InActor);// 0x42447e0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x4244768
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x42446f0
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x4244678
	void HideComponent(PrimitiveComponent* InComponent);// 0x4244600
	void HideActorComponents(Actor* InActor);// 0x4244588
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x4244510
	void ClearHiddenComponents();// 0x42444fc

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x359, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x35c, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x360, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x364, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x370, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x374, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x378, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x37c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x380, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x384, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x388, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x390, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x394, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x39c, Size: 4]
	float FarShadowDistance;//[Offset: 0x3a0, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x3a4, Size: 4]
	float LightSourceAngle;//[Offset: 0x3a8, Size: 4]
	float TraceDistance;//[Offset: 0x3ac, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3b0, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x3c4, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x3c8, Size: 12]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	float ShadowControl;//[Offset: 0x3d8, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x3e0, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x3e4, Size: 4]
	float CloudShadowDensity;//[Offset: 0x3e8, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x3ec, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x414f3b0
	void SetOcclusionMaskDarkness(float NewValue);// 0x414f338
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x414f2c8
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x414f248
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x414f1d0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x414f158
	void SetDynamicShadowCascades(int NewValue);// 0x414f0e0
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x414f05c
	void SetCloudShadowTileSize(float InValue);// 0x414efe4
	void SetCloudShadowTexture(Texture* InTexture);// 0x414ef6c
	void SetCloudShadowDensity(float InDensity);// 0x414eef4
	void SetCastsCloudShadow(bool InValue);// 0x414ee74
	void SetCascadeTransitionFraction(float NewValue);// 0x414edfc
	void SetCascadeDistributionExponent(float NewValue);// 0x414ed84

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2cc, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x2cc, Size: 60]
	class Actor[] IgnoreActorClass;//[Offset: 0x308, Size: 12]
	float DecalLongestDistance;//[Offset: 0x314, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x358, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x600, Size: 4]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x1ef8c60
	bool RemoveDecal(const int ID);// 0x1ef8be0
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x1ef8860

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xa0, Size: 4]
	Texture* DecalTexure;//[Offset: 0xa4, Size: 4]
	int CoordX;//[Offset: 0xa8, Size: 4]
	int CoordY;//[Offset: 0xac, Size: 4]
	Vector2D DecalSize;//[Offset: 0xb0, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int GifDecalFrameNum;//[Offset: 0xbc, Size: 4]
	float GifDecalFrameTime;//[Offset: 0xc0, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0xc4, Size: 4]
	float AttenuationRadius;//[Offset: 0xc8, Size: 4]
	float OutputVolume;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2cc, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x2d0, Size: 4]
	int SupplyBulletNum;//[Offset: 0x2d4, Size: 4]
	float ValidDistance;//[Offset: 0x2d8, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x2dc, Size: 12]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x1dc7034

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x2cc, Size: 12]
	int AddMonsterExpNum;//[Offset: 0x2d8, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x2dc, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x2e0, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x2e4, Size: 4]
	float ValidDistance;//[Offset: 0x2e8, Size: 4]
	float SelfResetTime;//[Offset: 0x2ec, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	enum EnhancerState;//[Offset: 0x2f1, Size: 1]
	float ReadyTime;//[Offset: 0x2f4, Size: 4]
	float FixReadyTime;//[Offset: 0x2f8, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x2fc, Size: 12]
	void StateChangeDelegate();// 0x1e30268
	void SetReadyTime(float SReadyTime);// 0x1e9440c
	void SetEState(enum EState);// 0x1e94394
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x1e94298
	void ResetTimes();// 0x1e94284
	void ResetSelf();// 0x1e94270
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x1e941f0
	void ReadyTimeChangeDelegate();// 0x1dd37a8
	void OpenEffect();// 0x1e2d7d0
	void OnRep_StateChange();// 0x1e941dc
	void OnRep_ReadyTimeChange();// 0x1e941c8
	void OnRep_FixReadyTimeChange();// 0x1e941c8
	enum GetSpotState();// 0x1e941ac
	void DelayResetSelf();// 0x1e94198
	void CloseEffect();// 0x1e2d7ec

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0xbc, Size: 4]
	int GotoSpectatingTime;//[Offset: 0xc0, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0xc8, Size: 8]
	int64 StartObserverTime;//[Offset: 0xd0, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0xd8, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0xdc, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe8, Size: 104]
	DateTime BePickupTime;//[Offset: 0x150, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x1f6852c
	void SetRemainingRevivalTime(int InValue);// 0x1f684b4
	void SetCaptureIDCardStatus(bool InValue);// 0x1f68434
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x1f683bc
	void OnPlayerQuitSpectating();// 0x1f683a8
	void OnPlayerGotoSpectating();// 0x1f68394
	void OnPlayerExitGame();// 0x1f68380
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x1f68300
	void LeaveRevivalState(uint32 SaviorKey);// 0x1f68288
	bool IsInWaittingRevivalState();// 0x1f68260
	int GetRevivalCountDownTime();// 0x1f68244
	int GetRemainingRevivalTime();// 0x1f6821c
	bool GetCaptureIDCardStatus();// 0x1f681f4
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x1f68174
	void EnterRevivalState();// 0x1f68160
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x1f68064
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x1f67f68

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x2cc, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x2d0, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x2d4, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x2d8, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x2dc, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	float RevivalCDTime;//[Offset: 0x2e4, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int RevivalCount;//[Offset: 0x2ec, Size: 4]
	int ID;//[Offset: 0x2f0, Size: 4]
	enum CurState;//[Offset: 0x2f4, Size: 1]
	enum PreState;//[Offset: 0x2f5, Size: 1]
	int RevivalTime;//[Offset: 0x2f8, Size: 4]
	int CurRevivalTime;//[Offset: 0x2fc, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	int OperationalDistance;//[Offset: 0x304, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x308, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x350, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x380, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x3bc, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x3c8, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x404, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x408, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	int IconID;//[Offset: 0x410, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x414, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x420, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x428, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x440, Size: 8]
	void StartRevival();// 0x1f91cac
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x1f91c2c
	bool RecheckCurrentRevivingPlayers();// 0x1f91c04
	void OnRep_ShowSmoking();// 0x1f91bf0
	void OnRep_RevivalPointState(enum LastPreState);// 0x1f91b78
	void OnRep_RevivalCDTimeCur();// 0x1f91b64
	void OnRep_CurrentRevivingPlayers();// 0x1f91b50
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x1f91ad0
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x1f91a50
	float GetRevivalCDTimeCurPercent();// 0x1f91a28
	float GetRevivalCDTimeCur();// 0x1f91a00
	float GetRevivalCDTime();// 0x1f919d8
	int GetId();// 0x1f919b0
	void DistanceChangedEvent(float Scale);// 0x29fa2f4

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xd0, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xd4, Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xd8, Size: 4]
	Vector RandomVector;//[Offset: 0xdc, Size: 12]
	float TextScale;//[Offset: 0xe8, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xec, Size: 16]
	float HeadShotTextScale;//[Offset: 0xfc, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x100, Size: 16]
	float BigDamageTextScale;//[Offset: 0x110, Size: 4]
	float BigDamage;//[Offset: 0x114, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x118, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x128, Size: 4]
	int FloatTextZorder;//[Offset: 0x12c, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x134, Size: 12]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x140, Size: 12]
	float[] RecycleTimeList;//[Offset: 0x14c, Size: 12]
	float RecycleTime;//[Offset: 0x158, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x15c, Size: 4]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x1eba90c
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x1eba880
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x29fa2f4
	void ReycleFloatingTextWidget();// 0x1eba86c
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadShot);// 0x1eba74c
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x1eba568
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x1eba4c0
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x1eba3cc

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 4]
	float RecycleTime;//[Offset: 0x4, Size: 4]
	Vector ShowWorldPos;//[Offset: 0x8, Size: 12]
	Vector RandomOffset;//[Offset: 0x14, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 60]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xc0, Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xd4, Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xe0, Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	void UnloadStreamLevel(FString levelName);// 0x261da80
	void SyncWeatherLevelInfo();// 0x261da6c
	void OnWeatherLevelChanged();// 0x29fa2f4
	void OnUnLoadStreamLevelCompleted();// 0x261da58
	void OnRep_WeatherSyncCount();// 0x261da44
	void OnLoadStreamLevelCompleted();// 0x261da30
	void LoadWeatherLevel();// 0x261da1c
	void LoadStreamLevel(FString levelName, int WeatherID);// 0x261d880
	void LoadDefaultWeatherLevel();// 0x261d86c
	void Init();// 0x1e94e14

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	int CircleIndex;//[Offset: 0x3f8, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x3fc, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x418, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x438, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x458, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x45c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x460, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x464, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x468, Size: 4]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x470, Size: 68]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x4c0, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x4cc, Size: 12]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x1e85144
	void BlendToWeather(bool bDstWeather);// 0x1e850c4

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2cc, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x310, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x314, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x330, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x36c, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x388, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3a4, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3ad, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3b0, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3bc, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x3dc, Size: 4]
	enum UICountDownType;//[Offset: 0x3f2, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f3, Size: 1]
	void StartTransition();// 0x1e85ef4
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x1e85e7c
	void RPCRequireControl();// 0x1e85e68
	void RPCRequire();// 0x1e85e54
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x1e85dd4
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x1dcbc3c
	void ReinitInDemoReplay();// 0x1e85b68
	void RefreshWeatherPredictionUI();// 0x1e85dc0
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x1e85d34
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x1e85ca8
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x1e85c1c
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x1e85b90
	void OnRep_NextWeatherCountDownTime();// 0x1e85b54
	void OnRep_ControllerDataForReplay();// 0x1e85b7c
	void OnRep_ControllerData();// 0x1e85b68
	void OnRep_bEnableWeatherPredictionUI();// 0x1e85b54
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x29fa2f4
	void HandleClientHasReactivated();// 0x1e85b40
	void GotoSpecificWeather(int WeatherIndex);// 0x1e85ac8
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x1e859ec
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x1e85958
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x1e858d8
	float GetInProgressElapsedTimeSecWithWeather();// 0x1e858b0
	float GetGlobalWeatherSystemTimeOnServer();// 0x1e85888
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x1e85840
	void ForceStopDynamicWeatherChangeOnServer();// 0x1e8582c
	void ForceStartNextWeatherChangeOnServer();// 0x1e85818
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x1e85768

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xbc, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xc8, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xd4, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xe0, Size: 12]
	delegate WeatherRecover;//[Offset: 0xec, Size: 12]
	enum DynamicWeatherType;//[Offset: 0xf8, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0xfc, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x100, Size: 4]
	float TargetLightValue;//[Offset: 0x104, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x10c, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x110, Size: 4]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x114, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x118, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x11c, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x120, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x124, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x128, Size: 12]
	int ChangeStartUINotifyID;//[Offset: 0x134, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x138, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x140, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x148, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x150, Size: 28]
	float RuningDirection;//[Offset: 0x16c, Size: 4]
	float RuningTime;//[Offset: 0x170, Size: 4]
	float LerpTotalTime;//[Offset: 0x174, Size: 4]
	FString WeatherName;//[Offset: 0x178, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x184, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x188, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x18c, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x190, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x1f8, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x264, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x2cc, Size: 12]
	void UINotifyCallbackOnServer();// 0x1e841c8
	void OnUserQualitySettingChanged(int renderlevel);// 0x1dbb240

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	WeatherDstFog DstWeatherFog;//[Offset: 0x10, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x24, Size: 12]
	float blendTime;//[Offset: 0x30, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x41c, Size: 60]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	Vector BlueCircle;//[Offset: 0x45c, Size: 12]
	Vector WhiteCircle;//[Offset: 0x468, Size: 12]
	float CirclePain;//[Offset: 0x474, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	AirAttackOrder AirAttackOrder;//[Offset: 0x47c, Size: 48]
	Vector AirAttackArea;//[Offset: 0x4ac, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x4b8, Size: 12]
	delegate OnHideCircle;//[Offset: 0x4c4, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x4d0, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x4dc, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x4e8, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x4f4, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x500, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x50c, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x518, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x524, Size: 12]
	int PlayerNum;//[Offset: 0x53c, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x544, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x550, Size: 12]
	delegate OnGameEnd;//[Offset: 0x55c, Size: 12]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56b, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56e, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56f, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x573, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x576, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x577, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x57c, Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x588, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x590, Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59f, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5a4, Size: 12]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f2, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f3, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x5f8, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x5fc, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x600, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x604, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60a, Size: 1]
	delegate OnAirAttack;//[Offset: 0x60c, Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x618, Size: 12]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x624, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x632, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x634, Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x640, Size: 12]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x64c, Size: 4]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x650, Size: 4]
	class ModAdapter* ModAdapterClass;//[Offset: 0x654, Size: 4]
	ModAdapter* ModAdapter;//[Offset: 0x658, Size: 4]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x660, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x664, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x66c, Size: 36]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x690, Size: 4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	int ReadyStateTime;//[Offset: 0x6a0, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x6a4, Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x6b4, Size: 12]
	int CurCircleWave;//[Offset: 0x6c0, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c5, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x6c8, Size: 4]
	FName GameModeState;//[Offset: 0x6e0, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	float timeFromLessen;//[Offset: 0x6ec, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x6f0, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x6fc, Size: 12]
	float timeForLessen;//[Offset: 0x708, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x718, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x71c, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x720, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x724, Size: 4]
	byte CurAirAttackType;//[Offset: 0x728, Size: 1]
	int CurAirAttackWave;//[Offset: 0x72c, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x734, Size: 4]
	float ExtraRadius;//[Offset: 0x738, Size: 4]
	int AlivePlayerNum;//[Offset: 0x73c, Size: 4]
	int AliveTeamNum;//[Offset: 0x740, Size: 4]
	int NoneAIGameTime;//[Offset: 0x744, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x748, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x754, Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x760, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x764, Size: 12]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0x770, Size: 116]
	enum GameModeType;//[Offset: 0x9b4, Size: 1]
	enum GameModeConfigType;//[Offset: 0x9b5, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0x9b6, Size: 1]
	enum GameModeSubType;//[Offset: 0x9b7, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0x9b8, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0x9bc, Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c9, Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ca, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0x9d8, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0x9dc, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0x9e0, Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0x9ec, Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0x9f8, Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0xa04, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xa08, Size: 60]
	float InviteCountDownTime;//[Offset: 0xa44, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xa48, Size: 12]
	Vector[] CircleArray;//[Offset: 0xa54, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0xa60, Size: 60]
	uint64 GameID;//[Offset: 0xaa0, Size: 8]
	FString GameModeID;//[Offset: 0xaa8, Size: 12]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xab4, Size: 12]
	FString ModLogicSwitchTag;//[Offset: 0xac0, Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xacc, Size: 12]
	bool bClientEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool bServerEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	FString GameScriptPath;//[Offset: 0xadc, Size: 12]
	FString LuaFileEntryFile;//[Offset: 0xae8, Size: 12]
	FString PreloadLuaFile;//[Offset: 0xaf4, Size: 12]
	GameLuaEnv* LuaEnv;//[Offset: 0xb00, Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xb04, Size: 4]
	Character* CurCastActorMsgOwner;//[Offset: 0xb08, Size: 8]
	float StartFlyTime;//[Offset: 0xb10, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xb18, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xb20, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xb28, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb42, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xb44, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xb4c, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xb50, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xb6c, Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0xb78, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xb84, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xb8c, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xb98, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba5, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba6, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba7, Size: 1]
	FString GuideImageName;//[Offset: 0xba8, Size: 12]
	FString GuideLuaTableName;//[Offset: 0xbb4, Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0xbc0, Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcc, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xbd0, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xbd4, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xbdc, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe4, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe5, Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0xbe8, Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xbec, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xbf0, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xbfc, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xc08, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xc14, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xc20, Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0xc28, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0xc50, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0xc78, Size: 12]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0xc84, Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0xcc0, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xcc4, Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc9, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0xccc, Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 1]
	bool bEnableVehicleDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcda, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0xcdc, Size: 12]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	FString FServerStartTime;//[Offset: 0xcec, Size: 12]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0xcfc, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0xd00, Size: 12]
	FString MainWeaponTableName;//[Offset: 0xd0c, Size: 12]
	class Object[] PlaneAvatarClassArray;//[Offset: 0xd18, Size: 12]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0xd38, Size: 60]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0xd74, Size: 60]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xdb0, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xdb4, Size: 4]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	bool bEnablePlayerEventSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb9, Size: 1]
	bool bEnableAttrMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdba, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbb, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbd, Size: 1]
	int PlayerAddonCount;//[Offset: 0xdc0, Size: 4]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x29fa2f4
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x29fa2f4
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x20500c4
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x204feb8
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x204fb30
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x204f96c
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x204f80c
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x204f728
	void StartGameLua(out FString TGameScriptPath, out FString TLuaFileEntryFile, out FString TPreloadLuaFile);// 0x204f52c
	void SimulateAirAttackOver();// 0x204f4d0
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x204f38c
	void SetTagCulling(bool IsUse);// 0x1e54e6c
	void SetServerStartTime(uint32 nServerStartTime);// 0x204f314
	void SetSendStartFlow(uint32 PlayerKey);// 0x204f29c
	void SetSendEndFlow(uint32 PlayerKey);// 0x204f224
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x204f0ec
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x204f050
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x204efb4
	void SetIsLowMatch(int nClientType);// 0x204ef3c
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x204ee64
	void SetCurAirAttackWave(int AirAttackWave);// 0x204edec
	void SetCurAirAttackType(byte airattacktype);// 0x204ed74
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x204ec68
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x204ebe8
	void ServerRemoteDestroyAllActor();// 0x204ebd4
	void ServerRemoteDestroyActor(int SingleId);// 0x204eb5c
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x204ea00
	void RPC_Client_RemoteDestroyAllActor();// 0x204e9e4
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x204e964
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x204e7d0
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x204e62c
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x29fa2f4
	void OnRep_WeatherStateChanged();// 0x204e618
	void OnRep_VisualFieldFeatureParam();// 0x204e604
	void OnRep_VeteranRecruitListUpdate();// 0x204e5f0
	void OnRep_UpassInfoList();// 0x204e5dc
	void OnRep_StartFlyTime();// 0x204e5c8
	void OnRep_ResetWeatherPlaySpeed();// 0x204e5b4
	void OnRep_ReadyStateTime();// 0x1f37be8
	void OnRep_ReadyStateCountingDown();// 0x1dd8bcc
	void OnRep_PlayerNumChange();// 0x1dd8bcc
	void OnRep_PlayerAddonCount();// 0x1fdfe74
	void OnRep_MarkSyncData();// 0x204e5a0
	void OnRep_IsTrainingMode();// 0x204e58c
	void OnRep_IsShowDeadBox();// 0x204e578
	void OnRep_IsOpenDuelMode();// 0x1dd8bcc
	void OnRep_IsFPPMode();// 0x204e564
	void OnRep_IsDark();// 0x204e550
	void OnRep_GameTerminatorPlayerKey();// 0x204e53c
	void OnRep_GameModeType();// 0x204e528
	void OnRep_GameModeSubType();// 0x204e514
	void OnRep_GameModeState();// 0x204e4f8
	void OnRep_GameModeFeatureSet();// 0x1dd8bcc
	void OnRep_FinalWinTeams();// 0x1dd8bcc
	void OnRep_FinalWinPlayers();// 0x1dd8bcc
	void OnRep_EnableSignalSystem();// 0x204e4e4
	void OnRep_DynamicWeatherState();// 0x204e4d0
	void OnRep_CircleArray();// 0x1dd8bcc
	void OnRep_AliveTeamNum();// 0x204e4bc
	void OnRep_AlivePlayerNum();// 0x204e4a8
	void OnRep_AirDropPathData();// 0x204e494
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x1f8238c
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x204e3c8
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x29fa2f4
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x29fa2f4
	void OnGameModeDisplayNameChange();// 0x204e3b4
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x1f81e88
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x1f81d80
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x204e2f8
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x204e278
	bool IsSendStartFlow(uint32 PlayerKey);// 0x204e1f8
	bool IsSendEndFlow(uint32 PlayerKey);// 0x204e178
	bool IsRevivalGame();// 0x204e150
	bool IsPVEMode();// 0x204e128
	bool IsNoCircleInfo();// 0x204e100
	bool IsMapUseTeamPattern();// 0x204e0d0
	bool IsInNight();// 0x204e0a0
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x204e020
	bool IsInBlueCircle(out const Vector pos);// 0x204df94
	bool IsFeatureSupported(enum SubSystemType);// 0x204df0c
	bool IsEnableDamageInfo();// 0x1faad6c
	GameLuaEnv* InitGameLua();// 0x204dee4
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x204debc
	int GetServerStartUnixTimestamp();// 0x204de94
	FString GetServerStartTime();// 0x204ddd4
	float GetRepServerWorldTimeSeconds();// 0x204ddac
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x204dd00
	int GetPVEWeatherPhaseIndex();// 0x204dcd8
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x204dc54
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x204dc2c
	bool GetIsReadyStateReport();// 0x204dbfc
	FName GetGameModeState();// 0x204dbbc
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x204db94
	FString GetDSSwitchValue(const int InSwitchId);// 0x204da8c
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x204da64
	enum GetCurWeatherState();// 0x204da3c
	enum GetCurDynamicWeatherState();// 0x204da14
	int GetCurCircleWave();// 0x204d9f8
	byte GetCurCircleState();// 0x204d9b8
	int GetCurCircleIndex();// 0x204d990
	GetCircleInfo GetCircleStateInfo();// 0x204d904
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x204d858
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x204d7ac
	int GetAlivePlayerNum();// 0x204d784
	AirDropPathData3D GetAirDropPathData();// 0x204d5e8
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x204d488
	void ExecuteCVarConfig();// 0x204d474
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x204d3b0
	void ClearAirDropPathData();// 0x204d39c
	bool CheckIsLowMatch();// 0x204d374
	void CheckInitLuaRemoteEvent();// 0x204d360
	bool CheckDSSwitchOpen(const int SwitchId);// 0x204d2e0
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x1fbc5e0
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x204d268
	void ChangeDynamicWeatherState(enum DayState);// 0x204d1f0
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x204d0e8
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x204ced4
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x204cd08
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x204cb3c
	void BroadcastTemporaryMessage(FString Message);// 0x204ca78
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x204c970
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x204c75c
	void BroadcastEndCircle();// 0x204c700
	void BroadcastCircleWaveOver(int Index);// 0x204c64c
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x204c338
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex);// 0x204c168
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex);// 0x204c0ac
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex);// 0x204bf30
	void AsyncLoadResFinishCallback();// 0x204bf1c
	void AsyncLoadCommonResFinishCallback();// 0x204bf08
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x1f80884
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x1f807c0
	void AddPveZombieGrenadeCount(int Value);// 0x204be90
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x204be18
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x1f804b8

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x3ec, Size: 12]
	FString VehicleAttrReloadTableName;//[Offset: 0x3f8, Size: 12]
	FString DamageSearchTableName;//[Offset: 0x404, Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x2608010
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x2607ed4
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x2607e30
	static VehicleAttrReloadTableStruct GetVehicleAttrReloadTableRow(int ID);// 0x2607da8

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x360, Size: 60]
	FString LuaFilePath;//[Offset: 0x39c, Size: 12]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x300, Size: 8]
	FName PreviousMatchState;//[Offset: 0x308, Size: 8]
	int ElapsedTime;//[Offset: 0x310, Size: 4]
	void OnRep_MatchState();// 0x1eb1380
	void OnRep_ElapsedTime();// 0x4163880

--------------------------------
Class: WeaponAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float AutoAimingConfig_InnerRange_Speed;//[Offset: 0x4, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRate;//[Offset: 0x8, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRate;//[Offset: 0xc, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRateSight;//[Offset: 0x10, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRateSight;//[Offset: 0x14, Size: 4]
	float AutoAimingConfig_InnerRange_CrouchRate;//[Offset: 0x18, Size: 4]
	float AutoAimingConfig_InnerRange_ProneRate;//[Offset: 0x1c, Size: 4]
	float AutoAimingConfig_InnerRange_DyingRate;//[Offset: 0x20, Size: 4]
	float AutoAimingConfig_InnerRange_DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float AutoAimingConfig_InnerRange_InVehicleRate;//[Offset: 0x28, Size: 4]
	float AutoAimingConfig_InnerRange_FreeFallRate;//[Offset: 0x2c, Size: 4]
	float AutoAimingConfig_InnerRange_OpeningRate;//[Offset: 0x30, Size: 4]
	float AutoAimingConfig_InnerRange_LandingRate;//[Offset: 0x34, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxRange;//[Offset: 0x38, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinRange;//[Offset: 0x3c, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbActiveMinRange;//[Offset: 0x48, Size: 4]
	float AutoAimingConfig_OuterRange_Speed;//[Offset: 0x4c, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRate;//[Offset: 0x50, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRate;//[Offset: 0x54, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRateSight;//[Offset: 0x58, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRateSight;//[Offset: 0x5c, Size: 4]
	float AutoAimingConfig_OuterRange_CrouchRate;//[Offset: 0x60, Size: 4]
	float AutoAimingConfig_OuterRange_ProneRate;//[Offset: 0x64, Size: 4]
	float AutoAimingConfig_OuterRange_DyingRate;//[Offset: 0x68, Size: 4]
	float AutoAimingConfig_OuterRange_DriveVehicleRate;//[Offset: 0x6c, Size: 4]
	float AutoAimingConfig_OuterRange_InVehicleRate;//[Offset: 0x70, Size: 4]
	float AutoAimingConfig_OuterRange_FreeFallRate;//[Offset: 0x74, Size: 4]
	float AutoAimingConfig_OuterRange_OpeningRate;//[Offset: 0x78, Size: 4]
	float AutoAimingConfig_OuterRange_LandingRate;//[Offset: 0x7c, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxRange;//[Offset: 0x80, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinRange;//[Offset: 0x84, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinAttenuationDis;//[Offset: 0x88, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxAttenuationDis;//[Offset: 0x8c, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbActiveMinRange;//[Offset: 0x90, Size: 4]
	float AutoAimingConfig_FollowTimeMax;//[Offset: 0x94, Size: 4]
	float AutoAimingConfig_MaxAngle;//[Offset: 0x98, Size: 4]
	float AccessoriesVRecoilFactor;//[Offset: 0x9c, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0xa0, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0xa4, Size: 4]
	float DeviationBase;//[Offset: 0xa8, Size: 4]
	float DeviationBaseAim;//[Offset: 0xac, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xb0, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0xb4, Size: 4]
	float DeviationMaxMove;//[Offset: 0xb8, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0xbc, Size: 4]
	float DeviationStanceJump;//[Offset: 0xc0, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0xc4, Size: 4]
	float GameDeviationFactor;//[Offset: 0xc8, Size: 4]
	float HitPartCoffHead;//[Offset: 0xcc, Size: 4]
	float HitPartCoffBody;//[Offset: 0xd0, Size: 4]
	float HitPartCoffLimbs;//[Offset: 0xd4, Size: 4]
	float HitPartCoffHand;//[Offset: 0xd8, Size: 4]
	float HitPartCoffFoot;//[Offset: 0xdc, Size: 4]
	float ZombileHitPartCoffHead;//[Offset: 0xe0, Size: 4]
	float ZombileHitPartCoffBody;//[Offset: 0xe4, Size: 4]
	float ZombileHitPartCoffLimbs;//[Offset: 0xe8, Size: 4]
	float ZombileHitPartCoffHand;//[Offset: 0xec, Size: 4]
	float ZombileHitPartCoffFoot;//[Offset: 0xf0, Size: 4]
	float BaseImpactDamage;//[Offset: 0xf4, Size: 4]
	float RangeModifier;//[Offset: 0xf8, Size: 4]
	float ReferenceDistance;//[Offset: 0xfc, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x100, Size: 4]
	float ReloadTime;//[Offset: 0x104, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x108, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x10c, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x110, Size: 4]
	float ReloadDurationStart;//[Offset: 0x114, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x118, Size: 4]
	float MaxBulletNumInOneClip;//[Offset: 0x11c, Size: 4]
	float InitBulletInClip;//[Offset: 0x120, Size: 4]
	float BulletFireSpeed;//[Offset: 0x124, Size: 4]
	int bEnableVehicleShoot;//[Offset: 0x128, Size: 4]
	int bEnableLeanOutHolding;//[Offset: 0x12c, Size: 4]
	float Bullet_RadialDamageParams_BaseDamage;//[Offset: 0x130, Size: 4]
	float Bullet_RadialDamageParams_MinimumDamage;//[Offset: 0x134, Size: 4]
	float Bullet_RadialDamageParams_DamageInnerRadius;//[Offset: 0x138, Size: 4]
	float Bullet_RadialDamageParams_DamageOuterRadius;//[Offset: 0x13c, Size: 4]
	float Bullet_RadialDamageParams_DamageFalloff;//[Offset: 0x140, Size: 4]
	float Bullet_MaxNoGravityRange;//[Offset: 0x144, Size: 4]
	float Bullet_LaunchGravityScale;//[Offset: 0x148, Size: 4]
	FString Bullet_RadialDamageParams_DamageTypeClass;//[Offset: 0x14c, Size: 12]
	FString ImpactActorTemplatePath;//[Offset: 0x158, Size: 12]
	FString BulletTemplatePath;//[Offset: 0x164, Size: 12]
	int ReloadWithNoCost;//[Offset: 0x170, Size: 4]
	FString MuzzleFX;//[Offset: 0x174, Size: 12]
	FString ScopeMuzzleFX;//[Offset: 0x180, Size: 12]
	FString RemoteMuzzleFX;//[Offset: 0x18c, Size: 12]
	FString LocalSilencerMuzzleFX;//[Offset: 0x198, Size: 12]
	FString ScopeSilencerMuzzleFX;//[Offset: 0x1a4, Size: 12]
	FString RemoteSilencerMuzzleFX;//[Offset: 0x1b0, Size: 12]
	FString LocalFiringSuppressorMuzzleFX;//[Offset: 0x1bc, Size: 12]
	FString ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1c8, Size: 12]
	FString RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1d4, Size: 12]
	FString LocalCompensatorMuzzleFX;//[Offset: 0x1e0, Size: 12]
	FString ScopeCompensatorMuzzleFX;//[Offset: 0x1ec, Size: 12]
	FString RemoteCompensatorMuzzleFX;//[Offset: 0x1f8, Size: 12]
	int WeaponDurability;//[Offset: 0x204, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x208, Size: 4]

--------------------------------
Class: VehicleAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float HealthMax;//[Offset: 0x4, Size: 4]
	float Health;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	float FlightHeight;//[Offset: 0x4, Size: 4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 4]
	int16[] bombsInterval;//[Offset: 0xc, Size: 12]
	Vector2D[] bombsPosition2D;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x1c, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x20, Size: 12]
	void SetViewMaskType(enum NewMaskType);// 0x2162f70
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x2162ef0
	void Init();// 0x2162edc
	int ClearViewMaskForActor(Actor* MaskActor);// 0x2162e5c
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x2162ddc
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x2162d18

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x1f25280
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x1f250d0

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 4]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x40, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x48, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x84, Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int updateTime;//[Offset: 0xc, Size: 4]
	int upassLevel;//[Offset: 0x10, Size: 4]
	int upassScore;//[Offset: 0x14, Size: 4]
	int planeAvatarId;//[Offset: 0x18, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	FString Nation;//[Offset: 0x2c, Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38, Size: 48]
	int upassKeepBuy;//[Offset: 0x68, Size: 4]
	int upassCurValue;//[Offset: 0x6c, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x70, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	GameWatchReport[] WatchReport;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x4, Size: 12]
	uint64 player_uid;//[Offset: 0x10, Size: 8]
	float total_time;//[Offset: 0x18, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameLuaEnv.Object
	FString GameScriptPath;//[Offset: 0x1c, Size: 12]
	FString LuaFileEntryFile;//[Offset: 0x28, Size: 12]
	FString PreloadLuaFile;//[Offset: 0x34, Size: 12]
	FString[] ExportClasses;//[Offset: 0x40, Size: 12]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x4c, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x54, Size: 4]
	LuaTimerManager* LuaTimerMgr;//[Offset: 0x5c, Size: 4]
	LuaTriggerManager* LuaTriggerMgr;//[Offset: 0x60, Size: 4]
	GameLuaAPI* GameLuaAPI;//[Offset: 0x64, Size: 4]
	void SetStepGCLimitTime(double GCLimitTime);// 0x1ecc658
	void PullLevelActors(Level* InLevel);// 0x1ecc5e0
	void PullDynamicLevelActors(Level* InLevel);// 0x1ecc568
	void LuaDoString(FString LuaString);// 0x1ecc4ac
	void InitLuaGlobalVariable();// 0x1ecc498
	void InitLuaGlobalTools();// 0x1ecc484
	void InitLuaFile();// 0x1ecc470
	LuaEventBridge* GetLuaEventBridge();// 0x1ecc448
	void CheckCreateSluaState();// 0x1ecc434
	void CallLuaWaitGlobalScriptFunction(FString InFunctionName);// 0x1ecc378
	void CallLuaGlobalScriptFunction(FString InFunctionName);// 0x1ecc2bc

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x28, Size: 60]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x64, Size: 60]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xa0, Size: 60]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0xdc, Size: 12]
	Property*[] Params;//[Offset: 0xe8, Size: 12]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x22296e8
	LuaTemBPData*[] GetCurrentParam();// 0x2229680
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x22295f8
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId);// 0x2229460

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 12]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 12]
	FString EventType;//[Offset: 0x14, Size: 12]
	FString EventId;//[Offset: 0x20, Size: 12]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: LuaTimerManager.Object
	STExtraGameInstance* GameInstance;//[Offset: 0x1c, Size: 4]
	<int,TimerHandle> _timers;//[Offset: 0x24, Size: 60]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x314, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x320, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x32c, Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x338, Size: 12]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x344, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x350, Size: 3]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x353, Size: 3]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x356, Size: 3]
	UserDetailSetting UserDetailSetting;//[Offset: 0x35c, Size: 100]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	int iEnableRegionID;//[Offset: 0x3f0, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x3f4, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x400, Size: 12]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x40c, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x418, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x424, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x430, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x43c, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x448, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x454, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x460, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x46c, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x478, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x484, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x490, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x49c, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x4a8, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x4b4, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x4c0, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x4cc, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x4d8, Size: 12]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x4e4, Size: 12]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x4f0, Size: 12]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x4fc, Size: 12]
	FString AutoTestMissionType;//[Offset: 0x514, Size: 12]
	FString CustomLineStr;//[Offset: 0x520, Size: 12]
	enum GamePlayMode;//[Offset: 0x52c, Size: 4]
	Vector2D FOVRange;//[Offset: 0x530, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x538, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	float SwimRotateX;//[Offset: 0x544, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x568, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x56c, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x570, Size: 4]
	ObservingReplay* ObservingReplay;//[Offset: 0x574, Size: 4]
	ReplayUIManager* ReplayUIManager;//[Offset: 0x578, Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x57c, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x5d8, Size: 4]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x5dc, Size: 4]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x5e0, Size: 12]
	float DefaultGray;//[Offset: 0x5ec, Size: 4]
	RemoteControlManager* RemoteControlManager;//[Offset: 0x62c, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x29fa2f4
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x29fa2f4
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x29fa2f4
	void UpdateWorldCullDistanceVolumes();// 0x2044308
	void TestAyncLoad();// 0x20442f4
	void SuperBattle(FString IP);// 0x1ed6c0c
	void StopRemoteControl();// 0x1dd8bcc
	void StartRemoteControlWithFile();// 0x1dd8bcc
	void StartRemoteControl(FString Name, FString Host, int Port);// 0x2044040
	void SetWorldDoorCullDistance(int Distance);// 0x2043fc8
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x2043e2c
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x2043d70
	void SetWaterReflectionSetting(bool bDoOpen);// 0x2043cf0
	void SetUserVulkanSetting(bool Enable);// 0x2043c70
	void SetUserSetingShadowQuality(bool bShadow);// 0x2043bf0
	void SetUserSetingMobilceContentSCale(float mcs);// 0x2043b78
	bool SetSoundEffectQuality(int Type);// 0x2043af8
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x2043a64
	void SetKillZValue(float KillZ);// 0x20439ec
	void SetHZBMobileState();// 0x1dd8bcc
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x2043974
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x20437cc
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x2043624
	static void SetCustomRouteLine();// 0x2043610
	static void SetAutoMissionType();// 0x20435fc
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x29fa2f4
	void ReSetFOVScreenSizeCullingFactor();// 0x20435e8
	void RenderForLowFPS();// 0x20435d4
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x204355c
	void RefuseRenderForLowFPS();// 0x2043548
	void QuitGame();// 0x2043534
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x204344c
	void OnStopAutoTest();// 0x2043438
	void OnStartAutoTest();// 0x2043424
	void ObjectPoolServerSwitch(bool bOn);// 0x20433a4
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x1e836a4
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x2043390
	bool IsViewedByReplay(const Actor* InActor);// 0x2043310
	bool isUsingAssumedNameInReplay();// 0x20432e8
	bool IsSupportTagCulling();// 0x20432cc
	bool IsSupportSwitchSoundEffectQuality();// 0x20432a4
	bool IsSupportSwitchRenderLevelRuntime();// 0x204327c
	bool IsSupportMSAA();// 0x2043254
	bool IsSupportLDR();// 0x204322c
	static bool IsSecAutoRunTest();// 0x1f7ce20
	bool IsRunningOnVulkan();// 0x2043204
	bool IsPVENightChangeCullDistance();// 0x20431dc
	bool IsPlayingObservingReplay();// 0x20431b4
	bool IsOpenMSAA();// 0x204318c
	bool IsOpenHDR();// 0x2043164
	bool IsIOSOneGigabyteDevice();// 0x1ec6304
	static bool IsGAutomatorTest();// 0x204313c
	static bool IsAutoRunTestGamePVEProfile();// 0x2043114
	static bool IsAutoRunTestGamePVE();// 0x20430ec
	static bool IsAutoRunTestGameBindCompoment();// 0x20430c4
	static bool IsAutoRunTestGame();// 0x204309c
	void GVoiceCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x29fa2f4
	void GMStandalone(FString Map);// 0x2042f44
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x2042f1c
	bool GetWaterReflectionSetting();// 0x2042ef4
	bool GetUserVulkanSetting();// 0x2042ecc
	bool GetUserSetingShadowQuality();// 0x2042ea4
	int GetUserQualitySettingLevel();// 0x1e7a3d0
	int GetSoundEffectQuality();// 0x2042e7c
	ReplayUIManager* GetReplayUIManager();// 0x2042e54
	RenderQualitySettings GetRenderQualityLastSet();// 0x2042e04
	RenderQualitySettings GetRenderQualityApplying();// 0x2042db4
	ObservingReplay* GetObservingReplay();// 0x2042d8c
	bool GetIsFirstInitWaterReflectionSetting();// 0x2042d64
	static STExtraGameInstance* GetInstance();// 0x2042d3c
	int GetExactDeviceLevel();// 0x2042d14
	int GetDeviceUpdateVersionFlag();// 0x2042ce4
	FString GetDeviceProfilerLevel();// 0x2042c24
	byte GetDeviceMaxSupportSoundEffect();// 0x2042bfc
	byte GetDeviceMaxSupportLevel();// 0x2042bd4
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x2042b54
	int GetDeviceLimit();// 0x2042b2c
	int GetDeviceLevel();// 0x1e18080
	bool GetDefaultSoundEffectQuality();// 0x2042b04
	DeathPlayback* GetDeathPlayback();// 0x2042adc
	FString GetCurrentRHI();// 0x2042a1c
	CompletePlayback* GetCompletePlayback();// 0x20429f4
	static int GetAutoRunTestServerIdx();// 0x20429cc
	static FString GetAutoRunPassWD();// 0x2042914
	static FString GetAutoRunLuaTest();// 0x204285c
	static FString GetAutoRunAccount();// 0x20427a4
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x204277c
	bool GetApplyingShadowQuality();// 0x2042754
	FString GetActiveDeviceProfile();// 0x2042694
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x2042424
	void EnableStreamingLevelLOD(bool bEnable);// 0x20423a4
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x20422a4
	bool DeleteSavedFiles(bool allfilesSaved);// 0x204221c
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x2042158
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x2042094
	void ChangeLevelFXActor(FString levelName, bool isLoad);// 0x2041f8c
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x2041f0c
	void bHideGroundLevels(bool Disable);// 0x2041e8c
	void AutoActiveUltralHighRenderItems();// 0x2041e78
	void AutoActiveLDR();// 0x2041e64
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x2041dec
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x2041d30
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x2041c20
	void ActiveStyle_PP(byte Level);// 0x2041ba0
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x2041a90
	void ActiveStyle(byte Level);// 0x2041a10
	void ActiveNightVision(bool bSet);// 0x2041990
	void ActiveMSAA(bool bOpenMSAA);// 0x2041910
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x20417ac

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x1d0, Size: 224]
	delegate EnginePreTick;//[Offset: 0x2b0, Size: 12]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x2dc, Size: 4]
	UIMsgBus* AssociatedUIMsgBus;//[Offset: 0x2e4, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x2e8, Size: 4]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x308, Size: 12]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x2237e48
	void OpenAssetLoadLog();// 0x1dd8bcc
	void OnPreBattleResult__DelegateSignature();// 0x29fa2f4
	void LuaLeakDetect();// 0x2237e34
	void LuaDoString(FString LuaString);// 0x2237d78
	float GetWeatherTime();// 0x2237d5c
	int GetWeatherID();// 0x2237d3c
	UIMsgBus* GetUIMsgBus();// 0x2237d14
	LuaStateWrapper* GetLuaStateWrapper();// 0x204ddac
	FString GetGameID();// 0x2237c48
	int GetDeviceLevel();// 0x1e18080
	UAEDataTable* GetDataTable(FString tableName);// 0x2237b84
	FrontendHUD* GetAssociatedFrontendHUD();// 0x2237b5c
	void CloseAssetLoadLog();// 0x1dd8bcc

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int8 WeatherID;//[Offset: 0x80, Size: 1]
	FString WeatherLevelName;//[Offset: 0x84, Size: 12]
	float WeatherTime;//[Offset: 0x90, Size: 4]
	int[] MrpcsData;//[Offset: 0x94, Size: 12]
	<int,FString> AdvConfig;//[Offset: 0xa4, Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float UserMCSSetting;//[Offset: 0x28, Size: 4]
	int UserShadowSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSwitch;//[Offset: 0x30, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x34, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x38, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x54, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x5c, Size: 4]
	int UserVulkanSetting;//[Offset: 0x60, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 12]
	MaterialParameterFloat[] Floats;//[Offset: 0xc, Size: 12]
	MaterialParameterVector[] Vectors;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UIMsgBus.CustomMsgBus.BlueprintFunctionLibrary.Object
	static UIMsgBus* GetUIMsgBus(Object* WorldContextObj);// 0x22269d4

--------------------------------
Class: CustomMsgBus.BlueprintFunctionLibrary.Object
	<FString,CustomGameMsgGroup*> MsgListenerGroupMap;//[Offset: 0x1c, Size: 60]
	<FString,CustomTaggedGameMsgGroup*> TaggedMsgListenerGroupMap;//[Offset: 0x58, Size: 60]
	void UnRegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, const Object* InMsgLisenter);// 0x22262b8
	void UnRegistMsgListener(FString InMsgName, const Object* InMsgLisenter);// 0x2226114
	void RegistTaggedMsgListener(FString InMsgName, FString InMsgTagName, Object* InMsgLisenter);// 0x2225e58
	void RegistMsgListener(FString InMsgName, Object* InMsgLisenter);// 0x2225cb4
	void PushTaggedMsg(FString InMsgName, FString InMsgTagName, CustomGameMsg* InTargetMsg, int TaggedMsgMaxProcessCount);// 0x22259b0
	void PushMsg(FString InMsgName, CustomGameMsg* InTargetMsg);// 0x222580c

--------------------------------
Class: CustomGameMsgGroup.Object
	FString MsgName;//[Offset: 0x1c, Size: 12]
	Object*[] MsgListenerGroup;//[Offset: 0x28, Size: 12]

--------------------------------
Class: CustomTaggedGameMsgGroup.CustomGameMsgGroup.Object
	FString MsgTagName;//[Offset: 0x34, Size: 12]
	GameMsgCache[] CachedMsgList;//[Offset: 0x40, Size: 12]

--------------------------------
Class: GameMsgCache
	CustomGameMsg* CachedGameMsg;//[Offset: 0x0, Size: 4]
	int ProcessedCount;//[Offset: 0x4, Size: 4]
	int MaxProcessCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CustomGameMsg.Object

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x2182528
	void StartRecord();// 0x2182514
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x21822d8
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x21821a4
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x2181ec8
	void BuildOutputData();// 0x2181eb4
	void BuildContinuousKillOutputData();// 0x2181ea0

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsNewDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0xe8, Size: 192]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x1a8, Size: 4]
	void SetReplayTimeDilation(float InDilation);// 0x1e77fe0
	void SetMurderInfo();// 0x1e77fcc
	void SetDeathReplayStatus(enum InDeathReplayStatus);// 0x1e77f54
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x1e77e40
	void PlayReplayInTeam();// 0x1e77e24
	void OnKillOrPutDownMessageEvent();// 0x1e77e10
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x1e77d98
	void OnClientObserveCharacterEvent();// 0x1e77d84
	bool IsSwitchedOffByDevice();// 0x1e77d5c
	bool IsDeathReplayStatus(enum InDeathReplayStatus);// 0x1e77cdc
	bool HaveRecordingData_New();// 0x1e77cb4
	FString GetReplayTargetName();// 0x1e77bf4
	STExtraPlayerCharacter* GetDeadCharacter();// 0x1e77bcc
	void EnableSwitchBattleResultUI(bool Enable);// 0x1e77b4c
	void EnableDeathPlayback(bool bEnable);// 0x1e77acc

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x24, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x28, Size: 40]
	enum ReplayType;//[Offset: 0x50, Size: 1]
	ReplayUIManager* pReplayUIMgr;//[Offset: 0x5c, Size: 4]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0xcc, Size: 4]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0xd4, Size: 12]
	bool StopRecordingReplay();// 0x1e65c18
	bool StopPlay();// 0x1ed133c
	bool StartRecordingReplay();// 0x1e65bd4
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x1ed1194
	void SetReplayStreamer(FString InReplayStreamer);// 0x1ed0ffc
	void SetIsGMSpectator(bool bGM);// 0x1ed0f80
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x1ed0f08
	void SetCanChangeViewTarget(bool bCanChange);// 0x1ed0e88
	void ResetPlaybackData();// 0x1ed0e74
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1ed0dfc
	void ReplayOnWeaponChanged();// 0x1ed0de8
	void ReplayOnSimulatedWeaponChanged();// 0x1ed0dd4
	void ReplayOnBulletNumChanged();// 0x1ed0dc0
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x1ed0d48
	bool PlayReplay();// 0x1ed0d18
	bool PauseReplay(bool bPaused);// 0x1ed0c88
	bool IsInRecordState();// 0x1ed0c60
	bool IsInPlayState();// 0x1ed0c38
	bool IsFastForwarding();// 0x1ed0c10
	bool HaveRecordingData();// 0x1ed0be0
	void HandleChangeStatePC();// 0x1ed0bcc
	STExtraBaseCharacter* GetViewCharacter();// 0x1ed0ba4
	FString GetSpectatorName();// 0x1e77bf4
	PlayerCameraManager* GetPlayerCameraManager();// 0x1ed0b7c
	float GetCurrentReplayTotalTimeInSeconds();// 0x1ed0b54
	float GetCurrentReplayCurTimeInSeconds();// 0x1ed0b2c
	bool GetCanChangeViewTarget();// 0x1ed0b04

--------------------------------
Class: ReplayUIManager.Object
	STExtraPlayerController* pSTExtraPC;//[Offset: 0x20, Size: 4]
	STExtraGameInstance* pExtraInst;//[Offset: 0x24, Size: 4]
	STExtraPlayerState* pExtraPS;//[Offset: 0x28, Size: 4]
	STExtraBaseCharacter* pViewCharacter;//[Offset: 0x2c, Size: 4]
	class UserWidget* ReplayUIPath;//[Offset: 0x30, Size: 40]
	ReplayUserWidget* pReplayUserWidget;//[Offset: 0x58, Size: 4]
	ReplayTeammateInfo[] SavedTeammateInfoArray;//[Offset: 0x5c, Size: 12]
	<uint32,FString> AssumedMap_Key2name;//[Offset: 0x68, Size: 60]
	<FString,FString> AssumedMap_Name2name;//[Offset: 0xa4, Size: 60]
	int ReplayTargetTeamID;//[Offset: 0xf0, Size: 4]
	FString ReplayTargetName;//[Offset: 0xf4, Size: 12]
	void UpdateReplayUI();// 0x1f8ebf4
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x1ed0dfc
	void ReplayOnWeaponChanged();// 0x1f8ebe0
	void ReplayOnSimulatedWeaponChanged();// 0x1f8ebcc
	void ReplayOnBulletNumChanged();// 0x1f8ebb8
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* InCharacter);// 0x1ed0d48
	void ReleaseManager();// 0x1f8eba4
	void InitManager();// 0x1f8eb90
	void ChangeProgress();// 0x1f8eb7c

--------------------------------
Class: ReplayUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	byte DemoType;//[Offset: 0x304, Size: 1]
	FString ReplayNameStr;//[Offset: 0x308, Size: 12]
	int ReplayTeamID;//[Offset: 0x314, Size: 4]
	ReplayUIManager* pReplayUIManager;//[Offset: 0x318, Size: 4]
	Vector UIOffsetVec;//[Offset: 0x31c, Size: 12]
	<int,ReplayEnemyUIInfo> CurEnemyUIMapTable;//[Offset: 0x328, Size: 60]
	void UpdateWeaponUI();// 0x1e58930
	void UpdateReplayUI();// 0x1de671c
	void UpdateOneEnemyUI(int _Index, ReplayEnemyUIInfo inUIInfo);// 0x1f8f468
	void UpdateBulletUI();// 0x1de6aa8
	void OnReplayProgressChange();// 0x1de6738
	void InitIngameUI();// 0x1f0b8e4
	void HideUnnecessaryUI();// 0x1e512a4
	void HideOneEnemyUI(int _Index);// 0x1efcd04
	void ForceUpdateUI();// 0x1de6700
	void ClearLastReplayUI();// 0x1f4bf9c
	int AddOneEnemyUI(STExtraPlayerState* InPlayerState);// 0x1f8f3e0

--------------------------------
Class: ReplayEnemyUIInfo
	int UIIndex;//[Offset: 0x0, Size: 4]
	Vector WordLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ReplayTeammateInfo

--------------------------------
Class: KillInfoRecordData
	FString SafeLabel;//[Offset: 0x30, Size: 12]
	int SafeParam1;//[Offset: 0x3c, Size: 4]
	int SafeParam2;//[Offset: 0x40, Size: 4]
	float RecordTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x30c, Size: 12]
	void StopCameraShot();// 0x1dcbc3c
	void StartCameraShot(PlayerController* PlayerController);// 0x1dd37c4

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0xe0, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x108, Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0x10c, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x114, Size: 12]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x128, Size: 12]
	bool PlayDemoWithFilename(FString DemoName);// 0x1e624e4
	FString GetDemoPlayTime();// 0x1e62424

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0xe0, Size: 12]
	FString ReplayServerURL;//[Offset: 0x118, Size: 12]
	void RequestReplaysFromServer(FString URLString);// 0x1f48884
	void ClearStreams();// 0x1f48870

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x40, Size: 12]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x4c, Size: 12]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x58, Size: 12]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x64, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x1c, Size: 4]
	void StartDownloadItem(uint32 ItemID, uint32 Priority, delegate OnItemDownloadDelegate);// 0x1dee620
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x1dee40c
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x1dee38c
	int GetDisableInBattleThreshold();// 0x1dcdf38

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: RemoteControlManager.Object
	bool Tick(float DeltaTime);// 0x1f8e4a0
	void Stop();// 0x1dd8bcc
	bool BeginWithFile();// 0x1ec6304
	bool Begin(FString Name, FString Host, int Port);// 0x1f8e1e4

--------------------------------
Class: LuaTriggerManager.Object
	<FString,int> EventListenMap;//[Offset: 0x1c, Size: 60]
	bool SetEventListen(FString EventString, int EventNum);// 0x1f18bac
	bool RemoveEventListen(FString EventString, int EventNum);// 0x1f18a08
	void Init();// 0x1dd8bcc
	bool AddEventListen(FString EventString, int EventNum);// 0x1f18864

--------------------------------
Class: GameLuaAPI.Object
	void UIShowTips(FString FunctionName, uint32 PlayerKey, int TipType, FString Params1, FString Params2, bool IsToAll);// 0x1ec9430
	void UISetWidgetVisibility(uint32 PlayerKey, FString WidgetTag, int Visibility, bool IsToAll);// 0x1ec91fc
	void UISetWidgetText(uint32 PlayerKey, FString WidgetTag, FString SText, int TextId, FString Params, bool IsToAll);// 0x1ec8d94
	void UIOperateWidget(uint32 PlayerKey, FString WidgetTag, FString SOperation, FString Params, bool IsToAll);// 0x1ec8974
	void UICustomBehavior(uint32 PlayerKey, FString UIBehavior, int TipType, FString Params, bool IsToAll);// 0x1ec8624
	bool TeleportPlayerToVehicle(STExtraBaseCharacter* Player, STExtraVehicleBase* Vehicle, int SeatIdx);// 0x1ec851c
	bool TeleportPawn(STExtraBaseCharacter* Player, Vector Position, Rotator Rotation);// 0x1ec8408
	void TaskModifyTaskExtraSyncData(uint32 PlayerKey, XTaskExtraSyncData ExtraData);// 0x1ec82f4
	void TaskModifyTaskBySaveData(uint32 PlayerKey, XTaskSaveData SaveData);// 0x1ec8214
	void TaskModifyTask(uint32 PlayerKey, int TaskID, int Progress, int State);// 0x1ec80cc
	XTaskExtraSyncData TaskGetTaskExtraDataByTaskId(uint32 PlayerKey, int TaskID);// 0x1ec7ff4
	void TaskDeleteTask(uint32 PlayerKey, int TaskID);// 0x1ec7f38
	void TaskAddTask(uint32 PlayerKey, int TaskID, int Aim);// 0x1ec7e38
	void StopPlayerJoin();// 0x1ec7e24
	STExtraVehicleBase* SpawnVehicle(int resID, Vector Position, Rotator Rotation);// 0x1ec7d10
	void ShowMessage(FString Message);// 0x1ec7bb8
	void SetTeamID(Actor* TActor, int TeamID);// 0x1ec7afc
	int SetHealth(Pawn* Player, float SetHealth);// 0x1ec7a38
	void RevivePlayerAtPosition(uint32 PlayerKey, Vector Position, Rotator Rotation);// 0x1ec792c
	void RevivePlayer(uint32 PlayerKey);// 0x1ec78b4
	bool RemoveBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x1ec77ac
	bool RemoveActor(Actor* TActor);// 0x1ec772c
	void RemoteDestroyAllActor(uint32 PlayerKey, bool IsToAll);// 0x1ec7668
	void RemoteDestroyActor(uint32 PlayerKey, int SingleId, bool IsToAll);// 0x1ec7560
	int RemoteCreateActor(uint32 PlayerKey, int TeamID, int resID, Vector Position, Rotator Rotation, bool IsToAll);// 0x1ec737c
	void RegisterComponent(ActorComponent* Component);// 0x1ec7304
	STExtraSimpleCharacter*[] QueryRingMobCharacters(out const Vector Center, float RangeMin, float RangeMax);// 0x1ec7160
	STExtraBaseCharacter*[] QueryRingCharacters(out const Vector Center, float RangeMin, float RangeMax);// 0x1ec6fbc
	Vector[] QueryOcclusionPoints(out const Vector Center, float Range, const byte AcceptableOcclusionPoseFlag);// 0x1ec6e18
	STExtraBaseCharacter*[] QueryCharacters(out const Vector Center, float Range);// 0x1ec6cbc
	bool ProjectPointToNavigation(out const Vector Point, out Vector ProjectedLocation, out const Vector QueryExtent);// 0x1ec6b88
	void MulticastSoundByID(STExtraBaseCharacter* MyPawn, int SoundID);// 0x1ec6acc
	Object* LoadOjectFromPath(FString InObjectPath);// 0x1ec6a08
	Object* LoadOjectFromBPPath(FString InBPPath, Object* InOuter);// 0x1ec6900
	class Object LoadClassFromBPPath(FString InBPPath, Object* InOuter);// 0x1ec67f8
	bool KillPawn(STExtraCharacter* Pawn);// 0x1ec6778
	bool IsVehicle(Actor* TActor);// 0x1ec66f8
	bool IsValid(Object* TObject);// 0x1ec6678
	bool IsTargetPosVisible(Vector PosSource, Vector PosTarget);// 0x1ec65b0
	bool IsPlayerAlive(uint32 PlayerKey);// 0x1ec6530
	bool IsPlayer(Actor* TActor);// 0x1ec64b0
	bool IsInArea(Vector Position, int AreaID);// 0x1ec63f0
	bool IsFileExists(FString Filename);// 0x1ec632c
	bool IsEditor();// 0x1ec6304
	bool IsDamageOfType(out const DamageEvent DamageEvent, int DamageEventClassId);// 0x1ec6218
	static bool IsClassOf(const Object* Object, const class Object Class);// 0x1ec615c
	bool HasBuff(int ID, Pawn* TargetPawn);// 0x1ec6098
	void GrenadeLastGameRemainItems(LastGameRemainItemData LastGameRemainItemData);// 0x1ec5f5c
	int GetWeaponBulletResId(STExtraWeapon* TWeapon);// 0x1ec5edc
	int64 GetUnixTimestamp();// 0x1ec5eb4
	STExtraPlayerState*[] GetTeamMatePlayerStateList(uint32 PlayerKey, bool ExcludeSelf);// 0x1ec5d60
	FString GetSubLevel();// 0x1ec5ca0
	Vector GetRandomPosForTeleport(Pawn* TargetPawn, float MinRadius, float MaxRadius, int InMaxTryNum);// 0x1ec5b3c
	STExtraPlayerCharacter*[] GetPlayersOnVehicle(STExtraVehicleBase* Vehicle);// 0x1ec5a34
	float GetPlayerRealSpeed(STExtraBaseCharacter* Character);// 0x1ec59b4
	STExtraPlayerController* GetPlayerControllerByUID(uint64 UId);// 0x1ec5930
	STExtraPlayerController* GetPlayerControllerByPlayerKey(uint32 PlayerKey);// 0x1ec58b0
	STExtraBaseCharacter* GetPlayerByPlayerKey(uint32 PlayerKey);// 0x1ec5830
	FString GetPlainName(Object* Object);// 0x1ec5728
	STExtraBaseCharacter* GetOneRealPlayer();// 0x1ec5700
	STExtraBaseCharacter* GetOnePlayerBase();// 0x1ec56d8
	STExtraPlayerCharacter* GetOnePlayer();// 0x1ec56b0
	UAENetConnection* GetNetConnection(STExtraPlayerController* PlayerController);// 0x1ec5630
	FString GetMapName();// 0x1ec5570
	FString GetLuaRootDir();// 0x1ec54b0
	FString GetLevelPath(Level* Level);// 0x1ec53a8
	uint64 GetItemReviseInstanceId(ItemDefineID ItemDefineID);// 0x1ec5318
	int GetItemNumByResID(STExtraBaseCharacter* Player, int resID);// 0x1ec5254
	uint64 GetItemInstanceId(ItemDefineID ItemDefineID);// 0x1ec51c4
	Vector GetGroundLocation(Vector TraceStart, float TranceLength);// 0x1ec50e8
	LastGameRemainItemData GetGameRemainItems(PlayerController* PC);// 0x1ec4fb0
	int[] GetEquipWeaponList(STExtraBaseCharacter* Pawn);// 0x1ec4ea8
	FString GetDSSwitchValue(const int InSwitchId);// 0x1ec4da0
	STExtraBaseCharacter*[] GetDistanceEnemies(STExtraBaseCharacter* MyPawn, float FDistance);// 0x1ec4c54
	DecoratorActor*[] GetDecratorActorsByVolume(int resID, AreaVolume* VolumeSphere);// 0x1ec4b08
	DecoratorActor*[] GetDecratorActorsByShpere(int resID, AreaSphere* PointSphere);// 0x1ec49bc
	DecoratorActor*[] GetDecratorActors(int resID, AreaBase* Area);// 0x1ec4870
	STExtraWeapon* GetCurrentUseWeapon(STExtraBaseCharacter* Pawn);// 0x1ec47f0
	Actor* GetAttachParentActor(Actor* TActor);// 0x1ec4770
	STExtraVehicleBase*[] GetAllVehicles();// 0x1ec46b0
	STExtraPlayerState*[] GetAllPlayerStates();// 0x1ec45f0
	STExtraPlayerCharacter*[] GetAllPlayerPawns();// 0x1ec4530
	STExtraPlayerController*[] GetAllPlayerControllers();// 0x1ec4470
	Actor*[] GetAllChildActorsByClass(Actor* pActor, class Object Class, bool bIncludeDescendants);// 0x1ec42d4
	Actor*[] GetAllChildActors(Actor* pActor, bool bIncludeDescendants);// 0x1ec4180
	Actor*[] GetActorsInSphere(const Vector SpherePos, float SphereRadius, class Object ActorClass);// 0x1ec3fe4
	Actor*[] GetActorsInActorBoundingBox(Actor* TargetActor, class Object ActorClass);// 0x1ec3e98
	Actor*[] GetActorsByTag(FName Tag);// 0x1ec3d8c
	Actor*[] GetActorsByClass(class Object TargetClass);// 0x1ec3c84
	int GetActorResId(Actor* TActor);// 0x1ec3c04
	float GetActorDistance(Actor* fromActor, Actor* toActor);// 0x1ec3b40
	uint64 GenerateRandomInstanceID();// 0x1ec3b18
	STExtraBaseCharacter* FindFakePlayer();// 0x1ec3af0
	void EndMatch(int TeamID, int Reason);// 0x1ec3a34
	bool DropItemsInBackpackWithTypes(STExtraBaseCharacter* Player, int[] FilterTypeList);// 0x1ec388c
	void DamageTarget(Actor* SourceActor, Actor* TargetActor, float Damage, int TypeID);// 0x1ec3744
	PickUpWrapperActor* CreatePickup(int TeamID, int resID, Vector Position, Rotator Rotation, int Num);// 0x1ec359c
	STExtraCharacter* CreatePawn(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x1ec3440
	STExtraBaseCharacter* CreateFakePlayer(int TeamID, int resID, Vector Posi, Rotator Rota, int AttributeID, bool bUsePool, int CampID);// 0x1ec3204
	AreaVolume* CreateAreaVolume(Vector Posi, Rotator Rota, Vector Volume);// 0x1ec30ec
	AreaSphere* CreateAreaSphere(Vector Posi, float Radius);// 0x1ec3028
	Actor* CreateActor(int TeamID, int resID, Vector Position, Rotator Rotation);// 0x1ec2ecc
	bool CheckDSSwitchOpen(const int SwitchId);// 0x1ec2e4c
	STExtraVehicleBase* CastToVehicle(Actor* TActor);// 0x1ec2dcc
	STExtraPlayerState* CastToPlayerState(Actor* TActor);// 0x1ec2d4c
	STExtraPlayerCharacter* CastToPlayer(Actor* TActor);// 0x1ec2ccc
	void AttachToActor(Actor* ParentActor, Actor* ChildActor);// 0x1ec2c10
	bool AddWeaponPack(STExtraBaseCharacter* Player, GameModePlayerWeaponPackInfo WeaponData, enum PickupType);// 0x1ec29ec
	bool AddItemPack(STExtraBaseCharacter* Player, GameModePlayerItemPackInfo ArmorData, enum PickupType);// 0x1ec27c8
	bool AddItemByResID(STExtraBaseCharacter* Player, int resID, int Num, bool bWithTips, uint64 InstanceID, int Durability, enum PickupType, bool bAutoEquip);// 0x1ec253c
	int AddHealth(Pawn* Player, float AddHealth);// 0x1ec2478
	bool AddBuff(int ID, Pawn* TargetPawn, Actor* Causer);// 0x1ec2370
	bool AddArmorPack(STExtraBaseCharacter* Player, GameModePlayerArmorPackInfo ArmorData, enum PickupType);// 0x1ec2150

--------------------------------
Class: XTaskExtraSyncData
	int TaskID;//[Offset: 0x0, Size: 4]
	enum TaskType;//[Offset: 0x4, Size: 1]
	bool TimerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float CurAccumTime;//[Offset: 0x8, Size: 4]
	float TotalTime;//[Offset: 0xc, Size: 4]
	float ServerStartTime;//[Offset: 0x10, Size: 4]
	Vector Position;//[Offset: 0x14, Size: 12]

--------------------------------
Class: XTaskSaveData
	int TaskID;//[Offset: 0x0, Size: 4]
	int CurProgress;//[Offset: 0x4, Size: 4]
	int AimProgress;//[Offset: 0x8, Size: 4]
	int FobidShow;//[Offset: 0xc, Size: 4]
	enum State;//[Offset: 0x10, Size: 1]
	enum TaskType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x14, Size: 12]
	RemainItemData[] RemainItemDataList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RemainItemData
	int ItemID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 12]
	int SlotID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: UAENetConnection.IpConnection.NetConnection.Player.Object
	int InitialHandshakeTimeoutNumThreshold;//[Offset: 0x295e4, Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Server_Global;//[Offset: 0x295ec, Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_Global;//[Offset: 0x295f0, Size: 4]
	int ActorChannelProcessBunchErrorNumThreshold_Client_PerActor;//[Offset: 0x295f4, Size: 4]
	bool bEnableHTTPDNS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29634, Size: 1]
	FString HTTPDNSServerAddr;//[Offset: 0x29638, Size: 12]
	float HTTPDNSResponseTimeout;//[Offset: 0x29644, Size: 4]
	NetRelevancyGroup* RelevancyGroup;//[Offset: 0x29658, Size: 4]
	PendingRegionNetworkObject[] PendingRegionNetworkObjects;//[Offset: 0x29700, Size: 12]
	float MinRegionActorTickDelta;//[Offset: 0x2970c, Size: 4]
	float MaxRegionActorTickDelta;//[Offset: 0x29710, Size: 4]
	bool EnableWeakNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29720, Size: 1]
	float MinWeakNetUpdateDelay;//[Offset: 0x29724, Size: 4]
	float MaxWeakNetUpdateDelay;//[Offset: 0x29728, Size: 4]
	float SquareSegmentSize;//[Offset: 0x2972c, Size: 4]
	float MaxSegmentDistance;//[Offset: 0x29730, Size: 4]
	int MaxObjectNumInSegments;//[Offset: 0x29734, Size: 4]
	bool bRecreateSocketOnLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29745, Size: 1]
	float UpdateClientPingTimeThreshold;//[Offset: 0x29758, Size: 4]

--------------------------------
Class: IpConnection.NetConnection.Player.Object

--------------------------------
Class: NetRelevancyGroup.Object
	NetRelevancyGroupID GroupID;//[Offset: 0x1c, Size: 4]
	UAENetConnection*[] Connections;//[Offset: 0x20, Size: 12]

--------------------------------
Class: NetRelevancyGroupID

--------------------------------
Class: PendingRegionNetworkObject
	Object* RegionObject;//[Offset: 0x0, Size: 4]
	RegionID OldRegionID;//[Offset: 0x4, Size: 12]
	RegionID NewRegionID;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AreaVolume.AreaBase.Object
	Vector Position;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Volume;//[Offset: 0x34, Size: 12]

--------------------------------
Class: AreaBase.Object

--------------------------------
Class: AreaSphere.AreaBase.Object
	Vector Position;//[Offset: 0x1c, Size: 12]
	float Radius;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModePlayerWeaponPackInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]
	int WeaponDurability;//[Offset: 0x18, Size: 4]
	GameModePlayerWeaponAttachData[] AttachList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: GameModePlayerWeaponAttachData
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameModePlayerItemPackInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]
	int ItemDurability;//[Offset: 0x18, Size: 4]
	GameModePlayerItemAttachData[] AttachList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: GameModePlayerItemAttachData
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameModePlayerArmorPackInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]
	int ItemDurability;//[Offset: 0x10, Size: 4]
	GameModePlayerArmorAttachData[] AttachList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: GameModePlayerArmorAttachData
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xbc, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0xc0, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xc4, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xd0, Size: 12]
	int MarkCountProcessed;//[Offset: 0xdc, Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x1f1a5c4
	int GenerateNewLocalInstanceID();// 0x1f1a59c
	int GenerateNewInstanceID();// 0x1f1a578
	void DispatchMarkData(MarkDispatchAction Data);// 0x1f1a3c0
	void ClearMarkDataByTypeID(int TypeID, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x1f1a2c0

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 80]
	float DispatchDelayTime;//[Offset: 0x54, Size: 4]
	float RangeRad;//[Offset: 0x58, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x5c, Size: 8]
	float DispatchTime;//[Offset: 0x64, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x70, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 12]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0xbc, Size: 60]
	float EventCDTime;//[Offset: 0xf8, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x2187a5c

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1eb74c4
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x1e4ba80
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x1eb73f0
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x1eb7378
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x29fa2f4
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x29fa2f4

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xbc, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0xc8, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0xcc, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0xd8, Size: 1]
	bool IsNotificationWorking();// 0x1eb6fc8
	static int IsGlobalDebugLineTraceDrawn();// 0x1eb6f9c
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x29fa2f4
	enum GetFieldOfViewNotificationStatus();// 0x1eb6f74

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 12]
	FString Value;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x2e4, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x348, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x34c, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x2103b10
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x2103a00
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x1edb3a0
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x2103868

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 12]
	float Time;//[Offset: 0x3c, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x40, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 4]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x1c, Size: 12]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ZombieWaveUIState
	int TypeID;//[Offset: 0x0, Size: 4]
	int CountdownTime;//[Offset: 0x4, Size: 4]
	FString ShowString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	double StartFireSysTime;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2cc, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2d0, Size: 4]
	float NearToFarDistance;//[Offset: 0x2d4, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2d8, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x2dc, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x2e0, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0xc, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x18, Size: 12]
	int ShootTimes;//[Offset: 0x24, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x28, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x34, Size: 4]
	int NetworkStatus;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 12]
	Vector GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	double ShootSystemTime;//[Offset: 0x80, Size: 8]
	byte ShootTimeConDelta;//[Offset: 0x88, Size: 1]
	float ShootLevelTime;//[Offset: 0x8c, Size: 4]
	Vector GunTailPos;//[Offset: 0x90, Size: 12]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x314, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x318, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x31c, Size: 4]
	int MapMarkTypeID;//[Offset: 0x320, Size: 4]
	enum MapMarkFlag;//[Offset: 0x324, Size: 1]
	Pawn* Driver;//[Offset: 0x32c, Size: 4]
	float MoveUpValue;//[Offset: 0x330, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x370, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x374, Size: 4]
	float MoveUpScale;//[Offset: 0x378, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x380, Size: 4]
	Vector ControlInputVector;//[Offset: 0x384, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x390, Size: 12]
	float TickInterval;//[Offset: 0x39c, Size: 4]
	FString LuaFilePath;//[Offset: 0x3a4, Size: 12]
	Vector2D FObservationArea;//[Offset: 0x3b0, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x203ee3c
	void SetMoveUpValue(float InMoveUpValue);// 0x203edc4
	void SetDriver(Pawn* InPawn);// 0x1dd37c4
	void OnRep_Driver(Pawn* PrevDriver);// 0x1e2e074
	Pawn* GetDriver();// 0x203eda8
	void CheckWishTask();// 0x29fa2f4
	bool CanBeDriver(Pawn* InPawn);// 0x203ed20
	void BPUpdateUIVisible();// 0x29fa2f4
	void BPUpdateObservationArea();// 0x29fa2f4
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x29fa2f4
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x29fa2f4

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x135, Size: 1]
	float MaxFlyHeight;//[Offset: 0x138, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x13c, Size: 4]
	Vector InitialLocation;//[Offset: 0x140, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x14c, Size: 12]
	Actor* ActorOwner;//[Offset: 0x158, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x203e8e0
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x29fa2f4
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x29fa2f4
	float GetMaxFlyHeight();// 0x203e8b8

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x124, Size: 4]
	float Acceleration;//[Offset: 0x128, Size: 4]
	float Deceleration;//[Offset: 0x12c, Size: 4]
	float TurningBoost;//[Offset: 0x130, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x3f0, Size: 12]
	int MiniMapIconID;//[Offset: 0x3fc, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x400, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x1f66f70
	void HandleBoxIsSearched();// 0x1f66f54

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 12]
	int8 PlatID;//[Offset: 0x14, Size: 1]
	uint16 AreaID;//[Offset: 0x16, Size: 2]
	FString ZoneID;//[Offset: 0x18, Size: 12]
	VehicleMovePoint[] PointList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 12]
	int CaculateType;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0xbc, Size: 4]
	float InactiveCheckGap;//[Offset: 0xc0, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0xc8, Size: 4]
	float PreActiveTime;//[Offset: 0xcc, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0xd4, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	enum SIslandActiveType;//[Offset: 0xd9, Size: 1]
	Vector PrePawnLoc;//[Offset: 0xdc, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0xe8, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0xf4, Size: 12]
	void ServerMarkPlayerActive();// 0x1facefc
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x29fa2f4
	void MarkPlayerActive();// 0x1facee8
	void KickOutPlayer();// 0x1faced4
	void ClientShowKickOutTip(float RemainTime);// 0x1dbb240
	void ClientCachedActiveState();// 0x1facec0
	bool CheckForMovement();// 0x1face98
	void CheckForInactive();// 0x1f36600

--------------------------------
Class: DailyTaskReportInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskID;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TaskAwardItemInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x27b0, Size: 4]
	void OnRep_Cache(ForceStill)();// 0x29fa2f4
	void SetCapsuleParentBounds(bool UseParentBounds);// 0x29fa2f4
	void ClearDecalBakingRTCache(GameStateBase* CallFunc_GetGameState_ReturnValue, DecalBakingActorMgr* CallFunc_GetWorldInstance_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x29fa2f4
	void GetGrenadeWeaponMap(out <FName,class STExtraWeapon> OutWeaponMap, <FName,class STExtraWeapon> CallFunc_GetGrenadeLogicSocketToWeaponClassMap_ReturnValue, bool CallFunc_EnableLoadWeaponClassMapOptimize_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, <FName,FString> CallFunc_GetGrenadeLogicSocketToWeaponPathMap_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, class STExtraWeapon CallFunc_GetWeaponClassFromPath_ReturnValue);// 0x29fa2f4
	void TriggerActivityByID(bool GetNameOnly, out FString UIName, out int ActivityID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BattleInteractiveDataStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x29fa2f4
	void RegisterInitGrenadeMap(delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void InitGrenadeMapData(<FName,class STExtraWeapon> CallFunc_GetGrenadeWeaponMap_OutWeaponMap, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, int[] CallFunc_GetGrenadeIDsOrder_ReturnValue, bool CallFunc_IsValid_ReturnValue, <int,FName> CallFunc_GetGrenadeIDToNameDict_ReturnValue, <byte,FString> CallFunc_GetGrenadeToSlotIndexDict_ReturnValue);// 0x29fa2f4
	bool IsAngledSightAvailable(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x29fa2f4
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ShowAngledSightState(bool IsAngled, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x29fa2f4
	void GetAngledSightRotator(STExtraShootWeapon* NewParam, out Rotator NewParam1, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x29fa2f4
	void AngledSightAnimLogic(byte Selection, STExtraShootWeapon* ShootWeapon, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetAngledSightRotator_NewParam1, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, DollyZoomParam CallFunc_UpdateScopeCameraOffsets_Param, float CallFunc_GetScopeFov_ReturnValue, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2);// 0x29fa2f4
	void AngledSightAnimUpdate(float InputPin, bool bIsOnlyTurn, Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsAngledSightAvailable_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_SwitchSightConfigMaterial_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, bool CallFunc_IsAngledSight_ReturnValue2, Rotator CallFunc_RLerp_ReturnValue);// 0x29fa2f4
	void Replay_CreateEnemyFrameUI(bool isPlayingCompletePlayback, bool is enemy, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x29fa2f4
	void Replay_SetVisiableOfFrameUI(bool is Visiable, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void UpdateEmoteWeaponIdInfo(int ID, out bool Ret, int Length, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon*[] CallFunc_GetAllInventoryWeaponList_ReturnValue, int CallFunc_Array_Length_ReturnValue, STExtraWeapon* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x29fa2f4
	void AllowWater(out bool bCanEnter, bool CallFunc_CanEnterWaterArea_ReturnValue);// 0x29fa2f4
	bool ShouldRedBlood(bool CallFunc_GetRedBloodSwitch_ReturnValue);// 0x29fa2f4
	void CheckHasVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* PlayerCharacter, out int InItemID, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x29fa2f4
	void ChangeCurVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsDedicatedServer_ReturnValue, STExtraPlayerController* CallFunc_GetController_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsDriver_ReturnValue);// 0x29fa2f4
	void HandleOnChangedVehicleSeat(STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void GetMasterBoneComponent(out MeshComponent* MasterBoneComponent);// 0x29fa2f4
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x29fa2f4
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	BackpackEmoteHandle* GetEmoteHandle(int ItemID, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2, BackpackEmoteHandle* CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x29fa2f4
	FString GetShootWeaponNameByWeapon(int ItemDefineID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x29fa2f4
	CameraComponent* GetThirdPersonCamera();// 0x29fa2f4
	SpringArmComponent* GetThirdPersonSpringArm();// 0x29fa2f4
	CameraComponent* GetFPPCamera();// 0x29fa2f4
	SpringArmComponent* GetFPPSpringArm();// 0x29fa2f4
	CameraComponent* GetFirstPersonCamera();// 0x29fa2f4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x29fa2f4
	CameraComponent* GetScopeCamera();// 0x29fa2f4
	SpringArmComponent* GetScopeSpringArm();// 0x29fa2f4
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x29fa2f4
	bool ShouldAutoScopeWhenPeek(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	FString GetGrenadeNameByGrenadeType(byte grenadeType, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x29fa2f4
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x29fa2f4
	void GetControllerViewCamera(out CameraComponent* Camera, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x29fa2f4
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x29fa2f4
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x29fa2f4
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x29fa2f4
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	SpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x29fa2f4
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x29fa2f4
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x29fa2f4
	void ResetBPCameraSetting();// 0x29fa2f4
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x29fa2f4
	void IsAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void PickUp(PickUpWrapperActor* NewParam);// 0x29fa2f4
	void DoPickUpTarget();// 0x29fa2f4
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x29fa2f4
	void SetAllCollisionEnabled(bool bEnable);// 0x29fa2f4
	void MoveOutScope();// 0x29fa2f4
	void MoveInScope(bool bHasSetMesh);// 0x29fa2f4
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x29fa2f4
	void SwitchCrouch(byte NewParam, byte PreState, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);// 0x29fa2f4
	void UserConstructionScript(CameraComponent* ___object_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6);// 0x29fa2f4
	void ParachuteCamBlend__FinishedFunc();// 0x29fa2f4
	void ParachuteCamBlend__UpdateFunc();// 0x29fa2f4
	void LerpAlpha__FinishedFunc();// 0x29fa2f4
	void LerpAlpha__UpdateFunc();// 0x29fa2f4
	void ScopeTimeline__FinishedFunc();// 0x29fa2f4
	void ScopeTimeline__UpdateFunc();// 0x29fa2f4
	void AngledSigntTimeline__FinishedFunc();// 0x29fa2f4
	void AngledSigntTimeline__UpdateFunc();// 0x29fa2f4
	void RearSightTimeline__FinishedFunc();// 0x29fa2f4
	void RearSightTimeline__UpdateFunc();// 0x29fa2f4
	void TurnLerpAlpha__FinishedFunc();// 0x29fa2f4
	void TurnLerpAlpha__UpdateFunc();// 0x29fa2f4
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Vault_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_V_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_C_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_F10_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void CE(ForceStill)(bool ForceStill);// 0x29fa2f4
	void CE(ForceStill(ServerOnly))(bool ForceStill);// 0x29fa2f4
	void OnPetOwnerPossessed();// 0x29fa2f4
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x29fa2f4
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void ReloadEvent();// 0x29fa2f4
	void OnEquipWeapon(byte Slot);// 0x29fa2f4
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x29fa2f4
	void OnNotifyHurt();// 0x29fa2f4
	void NotifyPickUp(bool bIsAvailable);// 0x29fa2f4
	void OnLanded(out const HitResult Hit);// 0x29fa2f4
	void OnPoseStateChange(byte LastState, byte CurState);// 0x29fa2f4
	void K2_UpdateCustomMovement(float DeltaTime);// 0x29fa2f4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x29fa2f4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	void ParachuteOnWater();// 0x29fa2f4
	void NotifyTombBox(bool bIsAvailable);// 0x29fa2f4
	void DoAutoReloadCurrentWeapon();// 0x29fa2f4
	void OnUnEquipWeapon();// 0x29fa2f4
	void BPResetCharacter();// 0x29fa2f4
	void OnInitGrenadeData();// 0x29fa2f4
	void VaultFailPawnBluePrint(out const FString Content);// 0x29fa2f4
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x29fa2f4
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x29fa2f4
	void ScopeInStop();// 0x29fa2f4
	void PlayScopeInTimeline(float Rate);// 0x29fa2f4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x29fa2f4
	void ReceivePossessed(Controller* NewController);// 0x29fa2f4
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x29fa2f4
	void OnWeaponEquipmentUpdate();// 0x29fa2f4
	void BindAndExecStateChanged();// 0x29fa2f4
	void StateEnterHandler_Event(enum State);// 0x29fa2f4
	void OnHitByCake();// 0x29fa2f4
	void EnablePet(bool Enable);// 0x29fa2f4
	void OnEnterStateForBp(enum State);// 0x29fa2f4
	void OnLeaveStateForBp(enum State);// 0x29fa2f4
	void ReceiveDestroyed();// 0x29fa2f4
	void PawnVaultServerStopCheckBluePrint();// 0x29fa2f4
	void PawnVaultStopBluePrint();// 0x29fa2f4
	void OnMiniTreeTriggerServerLogicCPP();// 0x29fa2f4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x29fa2f4
	void DoAngledSight(bool IsPush);// 0x29fa2f4
	void DoNormalSight(bool IsPush);// 0x29fa2f4
	void StopSwitchAngledSight();// 0x29fa2f4
	void CustomEvent(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x29fa2f4
	void CustomEvent(bool bIsBegin);// 0x29fa2f4
	void CustomEvent();// 0x29fa2f4
	void OnBPStateCheckIn();// 0x29fa2f4
	void DynamicHoldGun(bool BoolValue);// 0x29fa2f4
	void LuaReceiveBeginPlay();// 0x29fa2f4
	void SwitchRearSight(int PrevIndex, int NewIndex, Rotator AngleRotator);// 0x29fa2f4
	void StopTurningInPlace();// 0x29fa2f4
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x29fa2f4
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, Key K2Node_InputKeyEvent_Key13, Key ___struct_Variable, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, Key K2Node_InputKeyEvent_Key14, Key K2Node_InputKeyEvent_Key15, bool ___bool_IsClosed_Variable2, bool ___bool_Has_Been_Initd_Variable2, bool K2Node_CustomEvent_ForceStill2, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_ForceStill, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, byte K2Node_Event_slot, delegate K2Node_CreateDelegate_OutputDelegate, STExtraShootWeapon* CallFunc_GetShootWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate2, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_bIsAvailable2, HitResult K2Node_Event_Hit, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Controller* CallFunc_GetController_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, byte K2Node_Event_LastState, byte K2Node_Event_CurState, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Key K2Node_InputActionEvent_Key, float K2Node_Event_DeltaTime, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_Not_PreBool_ReturnValue2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, bool K2Node_CustomEvent_bIsAvailable, const TemBPDataAddr[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Controller* CallFunc_GetController_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, int CallFunc_PostEvent_ReturnValue3, int CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, bool K2Node_SwitchEnum2_CmpSuccess, Controller* CallFunc_GetController_ReturnValue5, int CallFunc_PostEvent_ReturnValue5, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, bool K2Node_SwitchInteger_CmpSuccess, Key ___struct_Variable2, Key K2Node_InputActionEvent_Key2, bool CallFunc_IsLocalControlOrView_ReturnValue, CameraComponent* CallFunc_GetControllerViewCamera_Camera, Controller* CallFunc_GetController_ReturnValue6, bool CallFunc_IsValid_ReturnValue4, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess6, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess7, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess8, Key K2Node_InputActionEvent_Key3, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, Controller* CallFunc_GetController_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate6, Controller* CallFunc_GetController_ReturnValue8, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess10, FString CallFunc_GetPlayerKey_ReturnValue, bool CallFunc_HaveAngledSightBySlot_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, Key K2Node_InputKeyEvent_Key16, delegate K2Node_CreateDelegate_OutputDelegate7, bool CallFunc_SetCurrentPersonPerspective_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue2, float K2Node_CustomEvent_Rate, bool CallFunc_IsCharacterSprinting_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, bool CallFunc_IsValid_ReturnValue7, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess11, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess12, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, bool CallFunc_IsValid_ReturnValue8, CameraShake* CallFunc_PlayCameraShake_ReturnValue, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue9, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue10, int CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate8, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsLocalControlOrView_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue2, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue12, Actor* CallFunc_GetOwner_ReturnValue2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess13, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate10, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_ShouldRedBlood_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue7, bool CallFunc_IsValid_ReturnValue15, enum K2Node_CustomEvent_state, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue8, bool CallFunc_AllowWater_bCanEnter, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess14, int ___int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsLocalControlOrView_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraComponent* CallFunc_GetControllerViewCamera_Camera2, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_IsValid_ReturnValue16, bool CallFunc_BooleanAND_ReturnValue4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsShowBlood_ReturnValue, bool K2Node_Event_Enable, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_IsValid_ReturnValue17, enum K2Node_Event_State2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_IsValid_ReturnValue18, enum K2Node_Event_State, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_IsValid_ReturnValue19, bool CallFunc_IsValid_ReturnValue20, byte ___byte_Variable, int ___int_Array_Index_Variable2, int CallFunc_Array_Get_Item2, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_IsValid_ReturnValue22, Controller* CallFunc_GetController_ReturnValue9, bool CallFunc_IsAngledSight_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess16, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_IsAngledSight_ReturnValue2, byte K2Node_Event_type, bool K2Node_Event_IsOnlyTurn, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool K2Node_CustomEvent_IsPush2, Controller* CallFunc_GetController_ReturnValue10, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_Not_PreBool_ReturnValue6, bool K2Node_SwitchInteger2_CmpSuccess, int CallFunc_PostEvent_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue8, byte ___byte_Variable2, bool ___bool_Variable, bool CallFunc_IsAngledSight_ReturnValue4, bool K2Node_CustomEvent_IsPush, Controller* CallFunc_GetController_ReturnValue11, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess18, bool CallFunc_Not_PreBool_ReturnValue9, bool K2Node_SwitchInteger3_CmpSuccess, bool CallFunc_IsAngledSight_ReturnValue5, bool CallFunc_IsAngledSight_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue8, bool CallFunc_IsAngledSight_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue9, delegate K2Node_CreateDelegate_OutputDelegate11, int CallFunc_PostEvent_ReturnValue7, bool CallFunc_IsAngledSightAvailable_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsAngledSightAvailable_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue11, STExtraShootWeapon* K2Node_CustomEvent_Weapon, enum K2Node_CustomEvent_type, bool K2Node_CustomEvent_bEquip, bool CallFunc_IsAngledSightBySlot_ReturnValue, byte K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, Controller* CallFunc_GetController_ReturnValue12, bool K2Node_CustomEvent_bIsBegin, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess19, Controller* CallFunc_GetController_ReturnValue13, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller13, bool K2Node_DynamicCast_bSuccess20, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue12, bool CallFunc_IsAngledSight_ReturnValue11, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkComponent* CallFunc_GetAkComponent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue12, int CallFunc_PostAkEvent_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue13, bool CallFunc_IsValid_ReturnValue23, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_BooleanAND_ReturnValue14, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue15, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsAngledSight_ReturnValue13, bool CallFunc_HaveAngledSight_ReturnValue2, bool CallFunc_IsValid_ReturnValue24, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, bool K2Node_CustomEvent_BoolValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue3, FString CallFunc_GetPlayerNameSafety_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, Key ___struct_Variable3, Controller* CallFunc_GetControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue25, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller14, bool K2Node_DynamicCast_bSuccess21, bool CallFunc_IsLocallyControlled_ReturnValue3, int K2Node_CustomEvent_PrevIndex, int K2Node_CustomEvent_NewIndex, Rotator K2Node_CustomEvent_AngleRotator, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue26, FName CallFunc_GetRearSightSocket_ReturnValue, FName CallFunc_GetRearSightSocket_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue27, Key K2Node_InputKeyEvent_Key2, bool CallFunc_IsLocalControlorView_ReturnValue4, bool CallFunc_EnterState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue16, Key K2Node_InputKeyEvent_Key3, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key5, Key K2Node_InputKeyEvent_Key6, Key ___struct_Variable4, Key K2Node_InputKeyEvent_Key7, Key K2Node_InputKeyEvent_Key8, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, Key K2Node_InputKeyEvent_Key9, Rotator CallFunc_RLerp_ReturnValue, Key K2Node_InputKeyEvent_Key10, Key K2Node_InputKeyEvent_Key11, Key ___struct_Variable5, Key K2Node_InputKeyEvent_Key12);// 0x29fa2f4
	void OnCakePlacement__DelegateSignature(bool Success);// 0x29fa2f4
	void UnequipWeaponComplete__DelegateSignature();// 0x29fa2f4
	void EquipWeaponComplete__DelegateSignature();// 0x29fa2f4
	HoldComponent_C* ShoulderHoldComp;//[Offset: 0x27b4, Size: 4]
	BP_SkillManagerComponent_C* BP_SkillManagerComponent;//[Offset: 0x27b8, Size: 4]
	CustomCameraComponent* Camera;//[Offset: 0x27bc, Size: 4]
	CapsuleComponent* ShareBounds;//[Offset: 0x27c0, Size: 4]
	ChildActorComponent* BP_PaintDecalDetectLine1;//[Offset: 0x27c4, Size: 4]
	CapsuleComponent* Capsule;//[Offset: 0x27c8, Size: 4]
	HoldComponent_C* AngledSightHoldComp;//[Offset: 0x27cc, Size: 4]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x27d0, Size: 4]
	CharacterAnimList_Parachute_C* CharacterAnimList_Parachute;//[Offset: 0x27d4, Size: 4]
	StaticMeshComponent* Scope;//[Offset: 0x27d8, Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x27dc, Size: 4]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x27e0, Size: 4]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x27e4, Size: 4]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x27e8, Size: 4]
	SplineComponent* PetParachuteSpline;//[Offset: 0x27ec, Size: 4]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x27f0, Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x27f4, Size: 4]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x27f8, Size: 4]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x27fc, Size: 4]
	HoldComponent_C* AimHoldComp;//[Offset: 0x2800, Size: 4]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x2804, Size: 4]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x2808, Size: 4]
	FPPComponent_C* FPPComponent;//[Offset: 0x280c, Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x2810, Size: 4]
	CameraComponent* ScopingCamera;//[Offset: 0x2814, Size: 4]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x2818, Size: 4]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x281c, Size: 4]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x2820, Size: 4]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x2824, Size: 4]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x2828, Size: 4]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x282c, Size: 4]
	CharacterWeaponManagerComponent* CharacterWeaponManager;//[Offset: 0x2830, Size: 4]
	PickupManagerComponent* PickupManager;//[Offset: 0x2834, Size: 4]
	SceneComponent* CameraRoot;//[Offset: 0x2838, Size: 4]
	CustomSpringArmComponent* CustomSpringArm;//[Offset: 0x283c, Size: 4]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x2840, Size: 4]
	float RearSightTimeline_RearSightUpdate_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x2844, Size: 4]
	byte RearSightTimeline__Direction_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x2848, Size: 1]
	TimelineComponent* RearSightTimeline;//[Offset: 0x284c, Size: 4]
	float AngledSigntTimeline_NewTrack_0_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x2850, Size: 4]
	byte AngledSigntTimeline__Direction_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x2854, Size: 1]
	TimelineComponent* AngledSigntTimeline;//[Offset: 0x2858, Size: 4]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x285c, Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x2860, Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x2864, Size: 4]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x2868, Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x286c, Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x2870, Size: 4]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x2874, Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x2878, Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x287c, Size: 4]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x2880, Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x2884, Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x2888, Size: 4]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x288c, Size: 4]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2890, Size: 1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2891, Size: 1]
	float ReloadingCDMax;//[Offset: 0x2894, Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x2898, Size: 12]
	Vector VelocityVector;//[Offset: 0x28a4, Size: 12]
	float Speed;//[Offset: 0x28b0, Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b4, Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x28b8, Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x28c4, Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x28d0, Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x28dc, Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e8, Size: 1]
	byte LocomotionState;//[Offset: 0x28e9, Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28ea, Size: 1]
	float ProneCameraHeight;//[Offset: 0x28ec, Size: 4]
	float CameraMoveSpeed;//[Offset: 0x28f0, Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f4, Size: 1]
	float MeleeAttackRange;//[Offset: 0x28f8, Size: 4]
	Vector Melee Attack Location;//[Offset: 0x28fc, Size: 12]
	float MeleeAttackDamage;//[Offset: 0x2908, Size: 4]
	byte CurCameraMode;//[Offset: 0x290c, Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x2910, Size: 20]
	Rotator TerreneNormal;//[Offset: 0x2924, Size: 12]
	Vector Normal;//[Offset: 0x2930, Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x293c, Size: 4]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2940, Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x2944, Size: 12]
	delegate UnequipWeaponComplete;//[Offset: 0x2950, Size: 12]
	float CrouchCameraHeight;//[Offset: 0x295c, Size: 4]
	float PickupDelayTime;//[Offset: 0x2960, Size: 4]
	float DefaultCapsuleRadius;//[Offset: 0x2964, Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x2968, Size: 4]
	float SwimCameraHeight;//[Offset: 0x296c, Size: 4]
	float SwimTargetRoll;//[Offset: 0x2970, Size: 4]
	float SwimUpRateFix;//[Offset: 0x2974, Size: 4]
	float SwimRotateSpeed;//[Offset: 0x2978, Size: 4]
	<byte,FString> GrenadeToSlotIndexDict;//[Offset: 0x297c, Size: 60]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b8, Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x29c0, Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x29d8, Size: 12]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e4, Size: 1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x29e8, Size: 12]
	CameraComponent*[] Cameras;//[Offset: 0x29f4, Size: 12]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x2a00, Size: 4]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a04, Size: 1]
	<int,FName> GrenadeIDToNameDict;//[Offset: 0x2a08, Size: 60]
	int[] GrenadeIDsOrder;//[Offset: 0x2a44, Size: 12]
	float ElapseTime;//[Offset: 0x2a50, Size: 4]
	float SwimRotateX;//[Offset: 0x2a54, Size: 4]
	SpringArmComponent* NewVar;//[Offset: 0x2a58, Size: 4]
	byte CurPoseState;//[Offset: 0x2a5c, Size: 1]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x2a60, Size: 60]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x2a9c, Size: 4]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x2aa0, Size: 4]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x2aa4, Size: 4]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x2aa8, Size: 4]
	enum[] DisallowedWateringStates;//[Offset: 0x2aac, Size: 12]
	delegate OnCakePlacement;//[Offset: 0x2ab8, Size: 12]
	Actor* PaintDecalDetector;//[Offset: 0x2ac4, Size: 4]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x2ac8, Size: 4]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2acc, Size: 1]
	Actor* CurEmoteActor;//[Offset: 0x2ad0, Size: 4]
	STExtraWeapon* CurUseingEmoteWeapon;//[Offset: 0x2ad4, Size: 4]
	MaterialBillboardComponent* FrameUIBillboard;//[Offset: 0x2ad8, Size: 4]
	bool bIsAngledSightOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2adc, Size: 1]
	MeshComponent* OriginAttachComponent;//[Offset: 0x2ae0, Size: 4]
	MeshComponent* TargetAttachComponent;//[Offset: 0x2ae4, Size: 4]
	Rotator OriginRotOffset;//[Offset: 0x2ae8, Size: 12]
	DollyZoomParam OriginDollyZoomParam;//[Offset: 0x2af4, Size: 12]
	DollyZoomParam TargetDollyZoomParam;//[Offset: 0x2b00, Size: 12]
	<FName,class STExtraWeapon> GrenadeWeaponMaps;//[Offset: 0x2b0c, Size: 60]
	bool Cache(ForceStill);//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b48, Size: 1]

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x304, Size: 12]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x310, Size: 12]
	float RTCacheLifeTime;//[Offset: 0x31c, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x320, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x324, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x328, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x32c, Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x1e79b38
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x1e79ac0
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x1e79980
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x1e79870
	static DecalBakingActorMgr* GetInstance();// 0x1e79848
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x1e79740
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x1e79664
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x1e795a0
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x1e794a0
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x1e7936c
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x1e791cc
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x1e78fdc

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x2cc, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x2d0, Size: 12]
	void SetMaxDecalProcessPerFame(int InValue);// 0x1fd82d0
	int GetMaxDecalProcessPerFame();// 0x1e2cdd0
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x414b03c
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x414afc4
	void CancelDecalBakingRequest(int RequestID);// 0x414af4c
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x414aed4
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x414ac98
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x414aa5c

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 1]
	FString PlayerUID;//[Offset: 0x4, Size: 12]
	int WeaponAvatarID;//[Offset: 0x10, Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x14, Size: 4]
	float LastActiveTime;//[Offset: 0x18, Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	LinearColor Color;//[Offset: 0x4, Size: 16]
	Vector2D Scale;//[Offset: 0x14, Size: 8]
	Vector2D Offset;//[Offset: 0x1c, Size: 8]
	float Rotation;//[Offset: 0x24, Size: 4]
	enum Direction;//[Offset: 0x28, Size: 1]
	LinearColor UVClip;//[Offset: 0x2c, Size: 16]
	LinearColor UVInfo;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x260, Size: 4]
	Vector DecalSize;//[Offset: 0x264, Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x270, Size: 16]
	LinearColor TintColor;//[Offset: 0x280, Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x290, Size: 16]
	float CropRotation;//[Offset: 0x2a0, Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	LinearColor GetUVScaleBias();// 0x414b7d8
	BoxSphereBounds GetDecalBounds();// 0x414b784
	LinearColor GetCropUVScaleBias();// 0x414b764

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x2cc, Size: 4]

--------------------------------
Class: BattleInteractiveDataStruct
	int SkillIndex_2_1D6468514D718E7627333080FB209A4A;//[Offset: 0x0, Size: 4]
	FText IconName_6_22CFFB1A44CD620353D81E87883E0DA7;//[Offset: 0x4, Size: 12]
	SlateBrush Image_9_01E299E646738D7FC060038B27EF9890;//[Offset: 0x10, Size: 152]
	float CDTime_12_BC8E32844653869F92AF27AFA2C8A0B2;//[Offset: 0xa8, Size: 4]
	enum[] DisallowedPawnState_16_ACA978204905C4EF34088B9F68648767;//[Offset: 0xac, Size: 12]
	bool TriggerActivityFromSkillAction_18_BFD8BC9C41BC0FA191B542862807C9F0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]

--------------------------------
Class: BP_STRUCT_WeaponScopeFOV_type
	FString ScopeGroupID_6_49CF3E400C41B18D667A9238018BF244;//[Offset: 0x0, Size: 12]
	float ScopeFov_f_7_6553D3C0033D7BFF701FD78D06949766;//[Offset: 0xc, Size: 4]
	int AimedAngle_8_3E02AB0072EDDA440E9C5E950B8A5745;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3020, Size: 4]
	void InitLocalHelmetDisplay(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void MapFromCBToESBH(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x29fa2f4
	void ReceiveLuaTick();// 0x29fa2f4
	void ReceiveLuaBeginPlay();// 0x29fa2f4
	void StopAvatarDownload(GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void SetMultiVersionRedSwitchConfig(SettingConfig_C* SettingConfig, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void MapFromCBToESGlobal(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x29fa2f4
	void MapFromCBToESVN(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x29fa2f4
	void MapFromCBToESJK(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool K2Node_SwitchInteger3_CmpSuccess, FString CallFunc_GetAccountRegion_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void MapFromCBToES(SettingConfig_C* SettingConfig, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ReadConfigEffectSettingColorSingleLayer(int NewParam, LinearColor LayerColor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHurtEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHurtEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, BP_STRUCT_JapanHurtEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, BP_STRUCT_VNHurtEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, BP_STRUCT_GlobalHurtEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue17, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue18, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue19, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue20, LinearColor CallFunc_MakeColor_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, FString CallFunc_GetPublishRegion_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void ReadConfigEffectSettingColorMultiLayer(int NewParam, EffectSettingMgr* EffectSettingMgr, LinearColor Layer4Color, LinearColor Layer3Color, LinearColor Layer2Color, LinearColor Layer1Color, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHitEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHitEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, float CallFunc_Conv_StringToFloat_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue18, LinearColor CallFunc_MakeColor_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue20, float CallFunc_Conv_StringToFloat_ReturnValue21, LinearColor CallFunc_MakeColor_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue22, float CallFunc_Conv_StringToFloat_ReturnValue23, float CallFunc_Conv_StringToFloat_ReturnValue24, float CallFunc_Conv_StringToFloat_ReturnValue25, LinearColor CallFunc_MakeColor_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue26, float CallFunc_Conv_StringToFloat_ReturnValue27, float CallFunc_Conv_StringToFloat_ReturnValue28, float CallFunc_Conv_StringToFloat_ReturnValue29, LinearColor CallFunc_MakeColor_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue30, float CallFunc_Conv_StringToFloat_ReturnValue31, float CallFunc_Conv_StringToFloat_ReturnValue32, BP_STRUCT_JapanHitEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue8, BP_STRUCT_VNHitEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue33, float CallFunc_Conv_StringToFloat_ReturnValue34, float CallFunc_Conv_StringToFloat_ReturnValue35, float CallFunc_Conv_StringToFloat_ReturnValue36, float CallFunc_Conv_StringToFloat_ReturnValue37, float CallFunc_Conv_StringToFloat_ReturnValue38, float CallFunc_Conv_StringToFloat_ReturnValue39, LinearColor CallFunc_MakeColor_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue40, float CallFunc_Conv_StringToFloat_ReturnValue41, float CallFunc_Conv_StringToFloat_ReturnValue42, float CallFunc_Conv_StringToFloat_ReturnValue43, LinearColor CallFunc_MakeColor_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue44, float CallFunc_Conv_StringToFloat_ReturnValue45, float CallFunc_Conv_StringToFloat_ReturnValue46, float CallFunc_Conv_StringToFloat_ReturnValue47, LinearColor CallFunc_MakeColor_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue48, float CallFunc_Conv_StringToFloat_ReturnValue49, float CallFunc_Conv_StringToFloat_ReturnValue50, float CallFunc_Conv_StringToFloat_ReturnValue51, LinearColor CallFunc_MakeColor_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue52, LinearColor CallFunc_MakeColor_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue53, float CallFunc_Conv_StringToFloat_ReturnValue54, float CallFunc_Conv_StringToFloat_ReturnValue55, float CallFunc_Conv_StringToFloat_ReturnValue56, float CallFunc_Conv_StringToFloat_ReturnValue57, LinearColor CallFunc_MakeColor_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue58, float CallFunc_Conv_StringToFloat_ReturnValue59, float CallFunc_Conv_StringToFloat_ReturnValue60, float CallFunc_Conv_StringToFloat_ReturnValue61, LinearColor CallFunc_MakeColor_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue62, float CallFunc_Conv_StringToFloat_ReturnValue63, float CallFunc_Conv_StringToFloat_ReturnValue64, BP_STRUCT_GlobalHitEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue65, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue66, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue67, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue68, LinearColor CallFunc_MakeColor_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue69, float CallFunc_Conv_StringToFloat_ReturnValue70, float CallFunc_Conv_StringToFloat_ReturnValue71, float CallFunc_Conv_StringToFloat_ReturnValue72, float CallFunc_Conv_StringToFloat_ReturnValue73, LinearColor CallFunc_MakeColor_ReturnValue18, float CallFunc_Conv_StringToFloat_ReturnValue74, float CallFunc_Conv_StringToFloat_ReturnValue75, float CallFunc_Conv_StringToFloat_ReturnValue76, float CallFunc_Conv_StringToFloat_ReturnValue77, LinearColor CallFunc_MakeColor_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue78, float CallFunc_Conv_StringToFloat_ReturnValue79, float CallFunc_Conv_StringToFloat_ReturnValue80, LinearColor CallFunc_MakeColor_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x29fa2f4
	void InitNewbieCounts(FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, bool CallFunc_IsValid_ReturnValue, NewbieGuideItem CallFunc_Array_Get_Item, NewbieGuideItem CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_GuideText_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, NewbieGuideItem K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x29fa2f4
	void AddIgnoreCameraMoveIndex(byte _Index, int CallFunc_Array_AddUnique_ReturnValue);// 0x29fa2f4
	void ReadConfigColorBlindnessTypeBoolDelegate(bool NewParam);// 0x29fa2f4
	void ReadConfigColorBlindnessTypeIntDelegate(int NewParam);// 0x29fa2f4
	void CheckGlobalReadRed(FString StrID, out bool bIsRed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void CheckIsBood(FString StrID, out bool bIsBlood, int CallFunc_FindSubstring_ReturnValue, int CallFunc_FindSubstring_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void CheckJapnReadRed(FString StrID, out bool bIsRed, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood);// 0x29fa2f4
	void GetJKCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_JKColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x29fa2f4
	void GetVNCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_VNColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x29fa2f4
	void GetCBColor(BP_STRUCT_ColorBlindnessConfig_type tempCBData, out LinearColor Color, BP_STRUCT_ColorBlindnessConfig_type localTempCBData, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetVNCBColor_bFind, LinearColor CallFunc_GetVNCBColor_Color, bool CallFunc_CheckGlobalReadRed_bIsRed, bool CallFunc_CheckJapnReadRed_bIsRed, bool CallFunc_GetJKCBColor_bFind, LinearColor CallFunc_GetJKCBColor_Color);// 0x29fa2f4
	void ReadConfigColorBlindnessType(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetGameFrontendHUDByGameInstance_ReturnValue, ColorBlindnessMgr* CallFunc_GetColorBlindnessMgr_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_ColorBlindnessConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor CallFunc_GetCBColor_color, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void CurGameMode(out int GameMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x29fa2f4
	void IsFPP(out bool IsFPP, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void OnRep_InWateringRange();// 0x29fa2f4
	void LoadAllBattleSound(FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, FName CallFunc_Array_Get_Item, BP_STRUCT_BattleSound_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x29fa2f4
	void AsyncLoadBattleSound(Object* Object, int SoundID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void LoadBattleSound(FString BankName, FString EventName, int SoundID, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Map_Contains_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Map_Contains_ReturnValue2);// 0x29fa2f4
	void SetAlwaysHideTouchInterface(bool Hide);// 0x29fa2f4
	void PlayBattleSoundInBP(int SoundID, bool bPlayed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, AkAudioEvent* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_PostEvent_ReturnValue);// 0x29fa2f4
	bool IsReleasePosInAimBtnRange(Vector Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x29fa2f4
	void ReadEmoteDataRowPC(int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int ___int_Loop_Counter_Variable, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int ___int_Loop_Counter_Variable2, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, FName CallFunc_Array_Get_Item2, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x29fa2f4
	void IsAtaptation(out bool adaptation);// 0x29fa2f4
	void ReadAdaptationTable(bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_Array_Get_Item, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x29fa2f4
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x29fa2f4
	void SetMotionParam(float GravityX, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x29fa2f4
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x29fa2f4
	void ShowFightingUI();// 0x29fa2f4
	void ShowAutoSprintBtn(bool Visible, Vector2D showPos_, bool inside, Vector iPhoneXWidgetOffset, Vector2D touchPos);// 0x29fa2f4
	void ReadConfigCrossHairColor(int NewParam, int ___int_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable2, LinearColor ___struct_Variable3, LinearColor ___struct_Variable4, LinearColor ___struct_Variable5, LinearColor ___struct_Variable6, LinearColor ___struct_Variable7, LinearColor ___struct_Variable8, LinearColor ___struct_Variable9, LinearColor ___struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x29fa2f4
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ReadConfigFromHUD(float CallFunc_Get3DTouchValue_TouchValue, bool CallFunc_Get3DTouchSwitch_TouchSwitch, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, SensibilityMode K2Node_MakeStruct_SensibilityMode, SensibilityMode K2Node_MakeStruct_SensibilityMode2, SensibilityMode K2Node_MakeStruct_SensibilityMode3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig2, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig4, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig5, <int,SightMaterialConfig> K2Node_MakeMap_Map, SensibilityConfig K2Node_MakeStruct_SensibilityConfig);// 0x29fa2f4
	void MakeFireModeEffect(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFPP_IsFPP, BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSGBySetting_SaveGame, float CallFunc_GetRushTriggerLengthByType_RushTriggerLength);// 0x29fa2f4
	void DebugNotDrawGuideLine();// 0x29fa2f4
	void ShowBackpackTombBox(bool Show);// 0x29fa2f4
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x29fa2f4
	void CreateRank(int Kills, int Rank);// 0x29fa2f4
	void DisableAimIfUnEquipWeapon(byte WeaponType);// 0x29fa2f4
	void SwitchAimMode();// 0x29fa2f4
	void DoInitUI(bool CallFunc_IsInFight_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x29fa2f4
	void HandleJumpBtnPressEvent();// 0x29fa2f4
	void OnRep_bInCar();// 0x29fa2f4
	void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void UpdateInputPanel();// 0x29fa2f4
	void ShowBackpackIconSplash(bool bShow);// 0x29fa2f4
	void RefreshWeaponPanel();// 0x29fa2f4
	void SetTouchInputEnabled(bool bEnabled);// 0x29fa2f4
	void ShowMainInputControl(bool bShow);// 0x29fa2f4
	void ShowTouchInterface(bool bShow, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x29fa2f4
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	void SetDeathGrayLerpValue(float Lerp);// 0x29fa2f4
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void GrayToOne__FinishedFunc();// 0x29fa2f4
	void GrayToOne__UpdateFunc();// 0x29fa2f4
	void GrayToZero__FinishedFunc();// 0x29fa2f4
	void GrayToZero__UpdateFunc();// 0x29fa2f4
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent(Key Key);// 0x29fa2f4
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x29fa2f4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnSpectatorCameraChange(bool bDie);// 0x29fa2f4
	void OnStopFireEventHandle();// 0x29fa2f4
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x29fa2f4
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x29fa2f4
	void OnSwitchWeaponHandle();// 0x29fa2f4
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void OnUseInventoryitemHandle();// 0x29fa2f4
	void ServerStartBattle();// 0x29fa2f4
	void ServerAfterLand();// 0x29fa2f4
	void ClientAfterLand();// 0x29fa2f4
	void RefreshTopMostUIPanel(byte Type);// 0x29fa2f4
	void GameStart();// 0x29fa2f4
	void RemoveWeaponAim(byte Slot);// 0x29fa2f4
	void SetMoveableAirborne(bool NewParam);// 0x29fa2f4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x29fa2f4
	void JoystickTriggerSprint(bool bIsSprint);// 0x29fa2f4
	void OnPlane();// 0x29fa2f4
	void SetPanels(out const UAEUserWidget*[] panels);// 0x29fa2f4
	void InitOprate();// 0x29fa2f4
	void OnFiremodeChange(int IntValue);// 0x29fa2f4
	void ChangeToMale();// 0x29fa2f4
	void ChangeToFemale();// 0x29fa2f4
	void DoUITouchMove(Vector Loc);// 0x29fa2f4
	void PressFire(int FingerIndex);// 0x29fa2f4
	void ShowFireBtn(bool bShow);// 0x29fa2f4
	void PressGrenade(bool isThrow);// 0x29fa2f4
	void InitJoyStickAfterActivation();// 0x29fa2f4
	void MemberVoice(int member, int Status);// 0x29fa2f4
	void ReceiveClientRestart();// 0x29fa2f4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x29fa2f4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x29fa2f4
	void ResetMissingUIUpdate();// 0x29fa2f4
	void MotionControliOS(Vector AxisValue);// 0x29fa2f4
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x29fa2f4
	void MotionControlAndroidTick();// 0x29fa2f4
	void MotionControlAndroid(Vector AxisValue);// 0x29fa2f4
	void ReceiveBackpackComponent();// 0x29fa2f4
	void InitWallFeedBack();// 0x29fa2f4
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x29fa2f4
	void DebugOpenGuide();// 0x29fa2f4
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x29fa2f4
	void CallShowTouchInterface(bool InShow);// 0x29fa2f4
	void OnGameModeStateChanged();// 0x29fa2f4
	void ReleaseFire();// 0x29fa2f4
	void OnFireModeChangeTD(int IntValue);// 0x29fa2f4
	void OnRep_InWateringRangeBP();// 0x29fa2f4
	void PlayerExitJumpEvent();// 0x29fa2f4
	void EnterFightingStateDelegate();// 0x29fa2f4
	void GameStartCountDownDelegate(float CountdownTime);// 0x29fa2f4
	void LuaReceiveBeginPlay();// 0x29fa2f4
	void AddPubgmAutoComp();// 0x29fa2f4
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key3, bool ___bool_Variable, FString ___string_Variable, FString ___string_Variable2, Key K2Node_InputActionEvent_Key5, Key K2Node_InputActionEvent_Key4, Key ___struct_Variable, Key K2Node_InputActionEvent_Key3, Key K2Node_InputActionEvent_Key2, Key K2Node_InputActionEvent_Key, int ___int_Variable, byte ___byte_Variable, byte ___byte_Variable2, byte ___byte_Variable3, byte ___byte_Variable4, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key, FString CallFunc_Conv_IntToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Transform ___struct_Variable2, delegate K2Node_CreateDelegate_OutputDelegate6, PubgmAutoRun* CallFunc_AddComponent_ReturnValue, Transform ___struct_Variable3, Transform ___struct_Variable4, AutoTestInterface* CallFunc_AddComponent_ReturnValue2, AutoRunTest* CallFunc_AddComponent_ReturnValue3, Transform ___struct_Variable5, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_CurrentActivityID, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, BP_PlayerPawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess3, delegate K2Node_CreateDelegate_OutputDelegate7, byte K2Node_Event_type, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Slot, Pawn* CallFunc_K2_GetPawn_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_CustomEvent_NewParam, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue2, FString CallFunc_Conv_IntToString_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess5, delegate K2Node_CreateDelegate_OutputDelegate8, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess6, Vector K2Node_Event_Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int K2Node_Event_fingerIndex, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate9, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate13, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, int K2Node_Event_member, int K2Node_Event_status, bool CallFunc_IsOnVehicle_ReturnValue, bool K2Node_Event_IsShow, int K2Node_Event_NewUIType, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, delegate K2Node_CreateDelegate_OutputDelegate14, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, Vector K2Node_CustomEvent_AxisValue2, int CallFunc_Divide_IntInt_ReturnValue, Vector K2Node_InputVectorAxisEvent_AxisValue, int ___int_Array_Index_Variable, BP_PlayerPawn_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_AxisValue, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate16, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess7, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, byte K2Node_Select2_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsObserver_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, bool K2Node_Event_InShow, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess8, FName CallFunc_GetGameModeState_ReturnValue, bool K2Node_SwitchName_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_IsObserver_ReturnValue2, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess10, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess11, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, bool CallFunc_IsInSpectating_ReturnValue, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsOnVehicle_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue4, GameStateBase* CallFunc_GetGameState_ReturnValue2, bool CallFunc_IsWindowOB_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate17, bool CallFunc_IsFPP_IsFPP, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger2_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue3, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance3, bool K2Node_DynamicCast_bSuccess14, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue3, int CallFunc_CurGameMode_GameMode, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue3, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager3, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsFPP_IsFPP2, int K2Node_CustomEvent_IntValue, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Conv_IntToString_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate18, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate19, delegate K2Node_CreateDelegate_OutputDelegate20, delegate K2Node_CreateDelegate_OutputDelegate21, GameInstance* CallFunc_GetGameInstance_ReturnValue4, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance4, bool K2Node_DynamicCast_bSuccess16, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate22, bool CallFunc_IsValid_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate23, Rotator CallFunc_GetControlRotation_ReturnValue, float K2Node_CustomEvent_CountDownTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_IsAutoRunTestGameBindCompoment_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x29fa2f4
	void VaultFailDS__DelegateSignature();// 0x29fa2f4
	void BindEventToBackpackComponent__DelegateSignature();// 0x29fa2f4
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x29fa2f4
	void PlayerEnterWater__DelegateSignature();// 0x29fa2f4
	void AirborneLanded__DelegateSignature();// 0x29fa2f4
	void ReloadingCDEnd__DelegateSignature();// 0x29fa2f4
	void ReloadingCDStart__DelegateSignature(float CD);// 0x29fa2f4
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x3024, Size: 4]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x3028, Size: 4]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x302c, Size: 4]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x3030, Size: 4]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x3034, Size: 4]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x3038, Size: 4]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x303c, Size: 4]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x3040, Size: 4]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x3044, Size: 4]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x3048, Size: 4]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x304c, Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3050, Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x3054, Size: 4]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3058, Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x305c, Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x3060, Size: 4]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x3064, Size: 4]
	byte LastCameraMode;//[Offset: 0x3068, Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x306c, Size: 4]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3070, Size: 1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x3074, Size: 4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x3078, Size: 4]
	Object* WaitingUI;//[Offset: 0x307c, Size: 4]
	Object* SimulatePlane;//[Offset: 0x3080, Size: 4]
	float PlaneStartYaw;//[Offset: 0x3084, Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x3088, Size: 12]
	delegate ReloadingCDEnd;//[Offset: 0x3094, Size: 12]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a0, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x30a4, Size: 4]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x30a8, Size: 12]
	float CloseDistance;//[Offset: 0x30b4, Size: 4]
	byte AutoAimDrawType;//[Offset: 0x30b8, Size: 1]
	delegate AirborneLanded;//[Offset: 0x30bc, Size: 12]
	float MotionRate_Yaw;//[Offset: 0x30c8, Size: 4]
	float MotionRate_Pitch;//[Offset: 0x30cc, Size: 4]
	float MotionAimRate_Pitch;//[Offset: 0x30d0, Size: 4]
	float MotionAimRate_Yaw;//[Offset: 0x30d4, Size: 4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x30d8, Size: 4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x30dc, Size: 4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x30e0, Size: 4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x30e4, Size: 4]
	float MotionTouchRate_Yaw;//[Offset: 0x30e8, Size: 4]
	float MotionTouchRate_Pitch;//[Offset: 0x30ec, Size: 4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f0, Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f1, Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f2, Size: 1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f3, Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x30f4, Size: 12]
	delegate PlayerLeaveWater;//[Offset: 0x3100, Size: 12]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310c, Size: 1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310d, Size: 1]
	float PitchReverce;//[Offset: 0x3110, Size: 4]
	float Left;//[Offset: 0x3114, Size: 4]
	float Right;//[Offset: 0x3118, Size: 4]
	float LastTime;//[Offset: 0x311c, Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x3120, Size: 12]
	Vector CurMotionData;//[Offset: 0x312c, Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x3138, Size: 12]
	delegate VaultFailDS;//[Offset: 0x3144, Size: 12]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x3150, Size: 60]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x318c, Size: 28]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x31a8, Size: 28]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c4, Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c5, Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c6, Size: 1]
	FString ActiveDevicProfileName;//[Offset: 0x31c8, Size: 12]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d4, Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d5, Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d6, Size: 1]
	float UITouchMoveX;//[Offset: 0x31d8, Size: 4]
	float UITouchMoveY;//[Offset: 0x31dc, Size: 4]
	int PressFireFingerIndex;//[Offset: 0x31e0, Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e4, Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e5, Size: 1]
	int VoiceMemberID;//[Offset: 0x31e8, Size: 4]
	int VoiceMemberStatus;//[Offset: 0x31ec, Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x31f0, Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x31f8, Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x3210, Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3218, Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3219, Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321a, Size: 1]
	byte UnequipWeaponType;//[Offset: 0x321b, Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321c, Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x3220, Size: 8]
	int InputTeamID;//[Offset: 0x3228, Size: 4]
	int EmoteItemType;//[Offset: 0x322c, Size: 4]
	ItemRecordData[] EmoteDataRow;//[Offset: 0x3230, Size: 12]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323c, Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323d, Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x3240, Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x3248, Size: 8]
	int PeekMode;//[Offset: 0x3250, Size: 4]
	int AimMode;//[Offset: 0x3254, Size: 4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x3258, Size: 60]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x3294, Size: 60]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x32d0, Size: 60]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x330c, Size: 60]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3348, Size: 1]
	<int,AkAudioEvent*> BattleSoundMap;//[Offset: 0x334c, Size: 60]
	<int,FString> BattleBankMap;//[Offset: 0x3388, Size: 60]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c4, Size: 1]
	BP_SAVEGAME_UIElemLayout_C* SaveGameUIElemLayout;//[Offset: 0x33c8, Size: 4]
	int GameMode;//[Offset: 0x33cc, Size: 4]
	int currentColorBlindnessType;//[Offset: 0x33d0, Size: 4]
	int CurrentHitEffectIndex;//[Offset: 0x33d4, Size: 4]
	int CurrentHurtEffectIndex;//[Offset: 0x33d8, Size: 4]
	Rotator CurControllerRotation;//[Offset: 0x33dc, Size: 12]
	bool IsCurExitJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e8, Size: 1]
	bool bStopDownloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e9, Size: 1]
	int ShoulderMode;//[Offset: 0x33ec, Size: 4]

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x1dcdf38
	static GameBackendHUD* GetInstance();// 0x246ab50
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x246aad0
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x246aa50

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x3c, Size: 60]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x433f104
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x433f084

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x246a7a4

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x28, Size: 12]
	FString ManualTableDirectory;//[Offset: 0x34, Size: 12]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x80, Size: 12]
	World* CurWorld;//[Offset: 0x8c, Size: 4]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x90, Size: 60]
	FString PathCompressionConfigsPath;//[Offset: 0x144, Size: 12]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x154, Size: 4]
	FString BaseTableRelativeDir;//[Offset: 0x15c, Size: 12]
	FString ModTableRelativeDir;//[Offset: 0x168, Size: 12]
	<FName,ModTable*> ModTableMap;//[Offset: 0x174, Size: 60]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x1b0, Size: 60]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x1ec, Size: 12]
	<FName,bool> CheckNeedModMap;//[Offset: 0x1f8, Size: 60]
	FString CurrentModName;//[Offset: 0x234, Size: 12]
	FString EmptyModName;//[Offset: 0x240, Size: 12]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x24c, Size: 60]
	<FString,bool> CheckMapTable;//[Offset: 0x288, Size: 60]
	void ReleaseTable(FName tableName);// 0x223bca8
	UAEDataTable* GetTablePtr(FName tableName);// 0x223bc28
	BaseTableResMap* GetTableMap(FString tableName);// 0x223bb64
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x223b270
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x223b1b4

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x4f0, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x508, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x520, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x524, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x528, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x530, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x548, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x558, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x564, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x570, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x57c, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x588, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x594, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5a0, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5ac, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5b0, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5b4, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5b8, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5bc, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5c4, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5c8, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5cc, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5dc, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x5ec, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x5f8, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x600, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x618, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x624, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x630, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x63c, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x648, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x650, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x668, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x670, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x688, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x690, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6a8, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6b0, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6cc, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6d0, Size: 12]
	int TickCycles;//[Offset: 0x6dc, Size: 4]
	int GameCycles;//[Offset: 0x6e0, Size: 4]
	int ClientCycles;//[Offset: 0x6e4, Size: 4]
	float NearClipPlane;//[Offset: 0x6e8, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ec, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ec, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ec, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x6f0, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f4, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f4, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f4, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f4, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f4, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f4, Size: 1]
	float FixedFrameRate;//[Offset: 0x6f8, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x6fc, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70c, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x710, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	Color C_WorldBox;//[Offset: 0x718, Size: 4]
	Color C_BrushWire;//[Offset: 0x71c, Size: 4]
	Color C_AddWire;//[Offset: 0x720, Size: 4]
	Color C_SubtractWire;//[Offset: 0x724, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x728, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x72c, Size: 4]
	Color C_WireBackground;//[Offset: 0x730, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x734, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x738, Size: 4]
	Color C_BSPCollision;//[Offset: 0x73c, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x740, Size: 4]
	Color C_Volume;//[Offset: 0x744, Size: 4]
	Color C_BrushShape;//[Offset: 0x748, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x74c, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x750, Size: 12]
	byte TransitionType;//[Offset: 0x75c, Size: 1]
	FString TransitionDescription;//[Offset: 0x760, Size: 12]
	FString TransitionGameMode;//[Offset: 0x76c, Size: 12]
	float MeshLODRange;//[Offset: 0x778, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x780, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x784, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x788, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x78c, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	int MaxParticleResize;//[Offset: 0x794, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x798, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x79c, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7a8, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x7c4, Size: 4]
	float DisplayGamma;//[Offset: 0x7c8, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x7cc, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x7d0, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x7d4, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x7e4, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x7f4, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x804, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x814, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x825, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x825, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x825, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x825, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x828, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x830, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x838, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x850, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x854, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x858, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x85c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x860, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x9b4, Size: 12]
	FString[] ServerActors;//[Offset: 0x9c0, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9cc, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d8, Size: 1]
	int NextWorldContextHandle;//[Offset: 0x9e8, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 Version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x1f53eb8
	bool SupportsHDRDisplayOutput();// 0x41755b8
	void SetVSyncEnabled(bool bEnable);// 0x4175538
	void SetVisualEffectQuality(int Value);// 0x248b704
	void SetViewDistanceQuality(int Value);// 0x41754c0
	void SetToDefaults();// 0x1de8248
	void SetTextureQuality(int Value);// 0x4175448
	void SetShadowQuality(int Value);// 0x41753d0
	void SetScreenResolution(IntPoint Resolution);// 0x4175360
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x41752e8
	void SetResolutionScaleValue(int NewScaleValue);// 0x4175270
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x41751f8
	void SetPostProcessingQuality(int Value);// 0x4175180
	void SetOverallScalabilityLevel(int Value);// 0x1dee38c
	void SetFullscreenMode(byte InFullscreenMode);// 0x4175108
	void SetFrameRateLimit(float NewLimit);// 0x4175090
	void SetFoliageQuality(int Value);// 0x4175018
	void SetBenchmarkFallbackValues();// 0x4175004
	void SetAudioQualityLevel(int QualityLevel);// 0x4174f8c
	void SetAntiAliasingQuality(int Value);// 0x4174f14
	void SaveSettings();// 0x1fc7f20
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x4174e0c
	void RevertVideoMode();// 0x4174df8
	void ResetToCurrentSettings();// 0x1e90bf0
	void LoadSettings(bool bForceReload);// 0x413470c
	bool IsVSyncEnabled();// 0x4174dd0
	bool IsVSyncDirty();// 0x4174da8
	bool IsScreenResolutionDirty();// 0x4174d80
	bool IsHDREnabled();// 0x4174d58
	bool IsFullscreenModeDirty();// 0x4174d30
	bool IsDirty();// 0x1ed133c
	int GetVisualEffectQuality();// 0x4174d08
	int GetViewDistanceQuality();// 0x1debeec
	int GetTextureQuality();// 0x4174ce0
	int GetShadowQuality();// 0x4174cb8
	IntPoint GetScreenResolution();// 0x4174c70
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x4174adc
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x4174948
	float GetRecommendedResolutionScale();// 0x4174918
	byte GetPreferredFullscreenMode();// 0x41748f0
	int GetPostProcessingQuality();// 0x2472b6c
	int GetOverallScalabilityLevel();// 0x41748c8
	IntPoint GetLastConfirmedScreenResolution();// 0x4174880
	byte GetLastConfirmedFullscreenMode();// 0x4174858
	static GameUserSettings* GetGameUserSettings();// 0x4174830
	byte GetFullscreenMode();// 0x4174808
	float GetFrameRateLimit();// 0x41747e0
	int GetFoliageQuality();// 0x41747b8
	IntPoint GetDesktopResolution();// 0x4174770
	static IntPoint GetDefaultWindowPosition();// 0x4174730
	static byte GetDefaultWindowMode();// 0x1f8a2e4
	float GetDefaultResolutionScale();// 0x4174700
	static IntPoint GetDefaultResolution();// 0x41746c0
	int GetCurrentHDRDisplayNits();// 0x4174698
	int GetAudioQualityLevel();// 0x417467c
	int GetAntiAliasingQuality();// 0x4174654
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x417458c
	void ConfirmVideoMode();// 0x4174578
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x41744f0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x4174470
	void ApplyNonResolutionSettings();// 0x1e13bd4
	void ApplyHardwareBenchmarkResults();// 0x1de831c

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x1bc, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d4, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] colorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x15c, Size: 12]
	delegate OnHandleServerListDownload;//[Offset: 0x168, Size: 12]
	FString CSVTableRelativeDir;//[Offset: 0x174, Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0x180, Size: 60]
	<FString,bool> LanguageMap;//[Offset: 0x1bc, Size: 60]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x1fc, Size: 4]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	BugReporter* BugReporter;//[Offset: 0x204, Size: 4]
	GMLogShare* logShare;//[Offset: 0x208, Size: 4]
	int MaxUpdateRetryTimes;//[Offset: 0x20c, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x218, Size: 4]
	Translator* Translator;//[Offset: 0x21c, Size: 4]
	GCPufferDownloader* GPuffer;//[Offset: 0x220, Size: 4]
	LaggingReporter* LaggingReporter;//[Offset: 0x224, Size: 4]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x22c, Size: 4]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x284, Size: 4]
	int ODPaksPoolSize;//[Offset: 0x288, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x28c, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x290, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x2b8, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x2d0, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x2e4, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x2ec, Size: 12]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x2fc, Size: 4]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x300, Size: 4]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x304, Size: 4]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x308, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x310, Size: 12]
	FString ScriptRelativeDir;//[Offset: 0x31c, Size: 12]
	FString InGameLuaDir;//[Offset: 0x328, Size: 12]
	FString PreloadLuaFileRelativePath;//[Offset: 0x334, Size: 12]
	FString[] LuaDirList;//[Offset: 0x340, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x34c, Size: 12]
	float LuaTickTime;//[Offset: 0x358, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x388, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x38c, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x390, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x394, Size: 4]
	TssManager* TssMgr;//[Offset: 0x398, Size: 4]
	float PingReportInterval;//[Offset: 0x3b8, Size: 4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x458, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x45c, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x468, Size: 12]
	delegate GetUserSettingsDelegate;//[Offset: 0x478, Size: 16]
	delegate SaveUserSettingsDelegate;//[Offset: 0x488, Size: 16]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x498, Size: 12]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x4a4, Size: 12]
	FString UserSettingsClassName;//[Offset: 0x4b0, Size: 12]
	FString LanguageSettingsClassName;//[Offset: 0x4bc, Size: 12]
	FString ActiveSaveGameName;//[Offset: 0x4c8, Size: 12]
	FString CachedSaveGameName;//[Offset: 0x4d4, Size: 12]
	FString LanguageSaveGameName;//[Offset: 0x4e0, Size: 12]
	class Object* UserSettingsClass;//[Offset: 0x4ec, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x4f0, Size: 4]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x4f4, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x584, Size: 4]
	int FpsForWindowClient;//[Offset: 0x588, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x58c, Size: 4]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x596, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x597, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	int GDPRUserType;//[Offset: 0x59c, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x5a4, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x5a8, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x5ac, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x5b0, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x5b4, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x5b8, Size: 4]
	float fFPSReportInterval;//[Offset: 0x5bc, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x5d0, Size: 12]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5df, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x668, Size: 4]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x66c, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x670, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x680, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x684, Size: 4]
	FString BattleUtilsClassName;//[Offset: 0x688, Size: 12]
	BattleUtils* BattleUtils;//[Offset: 0x694, Size: 4]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x246e610
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x246e4b8
	void TimeStatisticStop(int Type, FString Name);// 0x246e318
	void TimeStatisticStart(int Type);// 0x246e2a0
	void TickUdpCollector(float DeltaTime);// 0x246e228
	void StatisVisibilityWidget(Widget* Widget);// 0x1e836a4
	void StatisLoadedTexture(Texture* Texture);// 0x1e836a4
	bool StartGrayUpdate();// 0x246e200
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x246e1ec
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x246e1d8
	void ShutdownUnrealNetwork();// 0x1f53eb8
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x246e158
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x246dfac
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x246dd58
	bool SaveUserSettingsByDelegate(SaveGame* SaveGame, FString LayoutName);// 0x246dc50
	void RetryDownload();// 0x246dc3c
	void RetryCDNDownload();// 0x246dc28
	void ResetUserSettings();// 0x246dc14
	void ReleaseBattleUtils();// 0x246dc00
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x246da38
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x246da38
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x246da38
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x246da38
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x246d994
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x246d7cc
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x246d6c4
	void OnWebviewActionNotify(FString URL);// 0x246d56c
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x246d460
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x246d354
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x246d288
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x246d098
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x246cf8c
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x246ce7c
	void OnNotUpdateFinished();// 0x246ce68
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x246cc80
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x246cbc4
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x246cb04
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x246c964
	void OnGetCountryNoNotify(int country);// 0x246c8ec
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x246c7a8
	void OnGCloudNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x246c660
	void OnGameMasterEvent(FString EventName, int Ret);// 0x246c4c4
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x246c3bc
	void NotifyLoadingUIOperation(int OperationType);// 0x246c344
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x246c2cc
	void LuaDoString(FString LuaString);// 0x246c208
	bool IsWindowOB();// 0x1ec6304
	bool IsInstallPlatform(FString Platform);// 0x246c0a8
	bool IsCEHideLobbyUI();// 0x246c080
	bool HasAnyNetMsgToHandle();// 0x246c058
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x246bf94
	SaveGame* GetUserSettings();// 0x1e18380
	GDolphinUpdater* GetUpdater();// 0x246bf78
	Translator* GetTranslator();// 0x246bf5c
	bool GetShouldShowAdaptTipInLobby();// 0x246bf34
	GCPufferDownloader* GetPufferDownloader();// 0x246bf18
	FString GetPingReportInfo();// 0x246be58
	FString GetPacketLossReportInfo();// 0x246bd98
	LuaStateWrapper* GetLuaStateWrapper();// 0x246bd70
	LuaEventBridge* GetLuaEventBridge();// 0x1e73990
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x246bd48
	GVoiceInterface* GetGVoiceInterface();// 0x1e1946c
	GameStateBase* GetGameState();// 0x246bd20
	FString GetFPSReportInfo();// 0x246bc60
	EffectSettingMgr* GetEffectSettingMgr();// 0x1fcc0f8
	int GetDetailNetInfoFromGCloud();// 0x1dfdcb0
	SaveGame* GetCustomSetting(FString InSlotName);// 0x246bb9c
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x246bb6c
	Object* GetClientNetObj();// 0x246bb44
	BugReporter* GetBugReporter();// 0x246bb1c
	BattleUtils* GetBattleUtils();// 0x246baf4
	FString GetBattleIDHexStr();// 0x246ba34
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x246ba0c
	void FinishModifyUserSettings();// 0x246b9f8
	void EnableFPSAndMemoryLog(bool bEnable);// 0x246b978
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x246b8f0
	void DispatchConfirmMisKill(FString KillerName);// 0x246b834
	void CreateBattleUtils();// 0x246b820
	void ClearUIElemSettings();// 0x246b80c
	void CheckLocalizationLanguage();// 0x246b7f8
	void CallGlobalScriptFunction(FString InFunctionName);// 0x246b734
	void BeginModifyUserSettings();// 0x246b720
	void BattleUtilsGameEnd();// 0x246b70c
	void AfterLoadedEditorLogin();// 0x246b6f8
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x246b5f8
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x246b580
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x246b508

--------------------------------
Class: GVoiceInterface.Object
	int lbsRoomMemberID;//[Offset: 0x54, Size: 4]
	delegate CheckTempLbsRoomOnJoinRoom;//[Offset: 0x90, Size: 16]
	delegate CheckTempLbsRoomOnQuitRoom;//[Offset: 0xa0, Size: 16]
	delegate OnSTTReportCallback;//[Offset: 0xb0, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0xc0, Size: 16]
	FString ServerInfo;//[Offset: 0xd0, Size: 12]
	uint32 openGvoiceLog;//[Offset: 0xdc, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0xe0, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0xe4, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xf4, Size: 4]
	void UploadRecordFile();// 0x247b8f0
	void TestMic();// 0x247b8dc
	bool TeamSpeakerEnable();// 0x247b8c0
	bool TeamMicphoneEnable();// 0x247b8a4
	void SwitchMode(enum CharMode);// 0x247b82c
	void SwitchMicphoneWhenCorpsMode();// 0x247b818
	void SwitchCampRoom(enum campMode);// 0x247b7a0
	void StopRecord();// 0x247b78c
	void StopPlayRecordFile();// 0x247b778
	void StopInterphone();// 0x247b764
	void StopCampMode();// 0x247b750
	void StartRecord();// 0x247b73c
	void StartInterphone();// 0x247b728
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x247b564
	void SpeechToText();// 0x247b550
	void ShowOpenSpeakerAtFirstMsg();// 0x247b53c
	void ShowCorpsModeCannotUseLBSVoice();// 0x247b528
	void SetVoiceMode(int Type);// 0x247b4b0
	void SetSpeakerVolum(float Value);// 0x247b438
	void SetSpeakerStatus(bool Flag);// 0x247b3b8
	void SetPlayerVolume(FString InPlayerid, int InVol);// 0x247b21c
	void SetMicphoneVolum(float Value);// 0x247b1a4
	void SetMicphoneStatus(bool Flag);// 0x247b124
	void SetLbsVoiceRadius(float Radius);// 0x247b0b0
	void SetLbsRoomEnableStatus(bool Flag);// 0x247b030
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x247afb8
	void SetCurrentDownloadFieldID(FString filedId);// 0x247ae5c
	void SetAllVoiceStatus(bool Flag);// 0x247addc
	void ResetWhenLogOut();// 0x247adc8
	bool ReportPlayers(FString InExtraInfo);// 0x247ac68
	void ReactiveLbsStatus();// 0x247ac54
	void QuitTempLbsRoom(FString roomStr);// 0x247aafc
	void QuitRoom();// 0x247aae8
	void PlayRecordFile();// 0x247aad4
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x247aa54
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x247a9cc
	int OpenTeamInterphone();// 0x247a9a4
	void OpenSpeakerByTempLbs(bool Open);// 0x247a924
	int OpenSpeaker();// 0x247a8fc
	void OpenMicByTempLbs(bool Open);// 0x247a87c
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x247a868
	int OpenMic();// 0x247a840
	void OpenIngameSpeaker();// 0x247a82c
	int OpenIngameMicphone();// 0x247a804
	void OpenAllSpeaker(bool ShowTips);// 0x247a784
	int OpenAllMicphone(bool ShowTips);// 0x247a6fc
	int OpenAllInterphone();// 0x247a6d4
	void OnRoomTypeChanged(FString itemtext);// 0x1ed6c0c
	bool LbsSpeakerEnable();// 0x247a6b8
	bool LbsMicphoneEnable();// 0x20eeb70
	void JoinTempLbsRoom(FString room, FString userId);// 0x247a448
	void JoinRoom(FString room, FString userId);// 0x247a1d8
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x2479f68
	bool IsTeamInterphoneOpenned();// 0x1e5e0cc
	bool IsLbsInterphoneOpenned();// 0x2479f4c
	bool IsInterphoneMode();// 0x2479f10
	void InitGVoiceComponent(FString userId);// 0x2479db8
	bool HaveTeamRoom();// 0x2479d90
	bool HaveLbsRoom();// 0x2479d68
	float GetVoiceLength();// 0x2479d40
	int GetPlayerVolume(FString InPlayerid);// 0x2479be0
	void GetAuthKey();// 0x2479bcc
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x2479b08
	void EnbleMicAndSpeakerByRoomName(FString roomName, bool Enable);// 0x2479960
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x2479840
	void DownloadRecordFile();// 0x247982c
	void CommonTestMic();// 0x2479818
	void CloseSpeaker();// 0x2479804
	void CloseMic();// 0x24797f0
	void CloseIngameSpeaker();// 0x24797dc
	void CloseIngameMicphone();// 0x24797c8
	void CloseAllSpeaker(bool ShowTips);// 0x2479748
	void CloseAllMicphone(bool ShowTips);// 0x24796c8
	void CheckAndEnableRoomSpeaker();// 0x24796b4
	void ChatShowAgeRestrictionMsgInLobby();// 0x24796a0
	void ChatShowAgeRestrictionMsgInFighting();// 0x247968c
	void ChatShowAgeRestrictionMsgInChat();// 0x2479678
	void ChatRequestPrivacyInSetting();// 0x2479664
	void ChatRequestPrivacyInGame();// 0x2479650

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x245f960
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x245f57c
	void ReadZipLog(FString Filename);// 0x245f424
	byte[] CompressLog(bool pullAllLog);// 0x245f314

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x2048378
	static void Init();// 0x2479290

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x50, Size: 60]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x124, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x128, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x12c, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x144, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	void StartAppUpdate();// 0x2472e1c
	void SetEnableCDNGetVersion(bool Enable);// 0x2472d9c
	void OnDolphinBGDownloadDone();// 0x2472d88
	bool IsUpdating();// 0x2472d60
	bool IsGrayUpdate();// 0x2472d38
	bool IsExamine();// 0x1ec6304
	void Install();// 0x2472d24
	int GetTotalValue();// 0x2472cfc
	int GetCurValue();// 0x2472cd4
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x2472b94
	float GetCurPercent();// 0x2472b6c
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x2472aec
	uint32 GetChannelID();// 0x2472ac4
	void FinishUpdate();// 0x2472ab0
	void FinishPufferUpdate();// 0x2472a9c
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x1e54e6c
	bool EnableCDNGetVersion();// 0x2472a74
	void ContinueUpdate();// 0x2472a60
	void CancelUpdate();// 0x2472a4c
	void CancelAppUpdate();// 0x2472a38

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x1c, Size: 12]
	FString StoredAccessToken;//[Offset: 0x28, Size: 12]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x38, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x48, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x58, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 4]
	void TranslateV2(int Channel, int ID, FString Text);// 0x248101c
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2480cdc
	void PostMsg(FString URL, FString Content);// 0x2480b9c
	void OnTranslateV2(bool Success, FString Data);// 0x2480a90
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x29fa2f4
	void OnTranslate(bool Success, FString Data);// 0x2480984
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x2480878
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x29fa2f4
	void OnGetAccessToken(bool Success, FString Data);// 0x248076c
	void OnDetectV2(bool Success, FString Data);// 0x2480660
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x29fa2f4
	void OnDetect(bool Success, FString Data);// 0x2480554
	bool HasTranslating();// 0x248052c
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x2480198
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x247fe58

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	FString DownloadDir;//[Offset: 0x294, Size: 12]
	FString PufferTmpDir;//[Offset: 0x2a0, Size: 12]
	uint32 CleanFlagVer;//[Offset: 0x2ac, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x2b0, Size: 12]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x2c0, Size: 12]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x2cc, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x2d4, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x2d8, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x2dc, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x2e0, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x2e4, Size: 12]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x2f4, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x2f8, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x2fc, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x304, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x308, Size: 12]
	bool StopTask(uint64 TaskID);// 0x2478088
	int StopMergeBinDiffPak(int outterTaskID);// 0x2478008
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x2477f88
	void StopBGDownloadNotification();// 0x2477f74
	bool StopAllTask();// 0x2477f4c
	void StartDownloadItem(uint32 ItemID, uint32 Priority, delegate downloadDelegate);// 0x2477e20
	void StartBGDownloadNotification(uint32 InDownloadedSize);// 0x2477da8
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x2477b9c
	void SetTempProductIdBase(int ProductIdRaw);// 0x2477b24
	void SetTempProductId(FString ProductIdRaw);// 0x24779cc
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x24776a8
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x2477548
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x24774c4
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x24752ec
	static int ReturnLocalFiles_LuaState();// 0x24752ec
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x2477314
	bool RemountPakFiles();// 0x24772ec
	FString ReadFile(FString Filename);// 0x247710c
	bool PreFetchPakFiles();// 0x24770e4
	int PreFetchODPakFilesUpdate();// 0x24770bc
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x2477034
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x2476fb4
	bool PreFetchODPakFiles(bool Start);// 0x2476f2c
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x2476cbc
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x2476b1c
	int MoveFileTo(FString Filename, FString from, FString to);// 0x247678c
	int MoveFile(FString from, FString to);// 0x2476514
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x24760ec
	bool IsODPaks(FString FilePath);// 0x2475f8c
	bool IsODFileExists(FString Path);// 0x2475ec8
	bool IsInitSuccess();// 0x2475ea0
	bool IsFileReady(FString FilePath);// 0x2475d40
	bool IsFileExist(FString Filename, FString extension);// 0x2475ac8
	bool InitializeODPaks();// 0x2475aa0
	FString GetTempWorkPath();// 0x24759e0
	void GetProductIDBase(out int[] ProductIDs);// 0x2475914
	void GetProductID(out int[] ProductIDs);// 0x2475848
	int GetODPakNum();// 0x2475820
	FString GetODPakName(FString Path);// 0x24756dc
	uint32 GetInitErrcode();// 0x24756b4
	uint32 GetFileSizeCompressed(FString FilePath);// 0x2475554
	float GetFileSize(FString Filename);// 0x24753f0
	FString GetDownloadPath();// 0x2475330
	float GetCurrentSpeed();// 0x2475308
	int GetBatchODPaksDownloadList_LuaState();// 0x24752ec
	void EnableUseOldInterface(bool Enable);// 0x247526c
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x247510c
	static bool DeleteFile(FString fullPath);// 0x2474fb4
	bool ConvertPreFetchFiles();// 0x2474f8c
	FString ConvertItemIdToPakName(uint32 ItemID);// 0x2474e84
	bool ClearUselessODPaks();// 0x2474e5c
	bool ClearPreFetchODPaksFiles();// 0x2474e34
	bool ClearPreFetchFiles();// 0x2474e0c
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x2474c20

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x3c, Size: 12]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x245b4cc

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x1f1af58

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x90, Size: 4]
	void StartUpdateApp();// 0x2468460
	void StartAppUpdate(bool StartGrayUpdate);// 0x24683e0
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x2468314
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x2468248
	bool IsUpdating();// 0x2468220
	bool IsGrayUpdate();// 0x24681f8
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x24680b8
	void FinishUpdate();// 0x24680a4
	void ContinueUpdate();// 0x2468090
	void CancelUpdate();// 0x246807c

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x1c, Size: 8]
	FString LuaManagerName;//[Offset: 0x24, Size: 12]
	FString ShowUI;//[Offset: 0x30, Size: 12]
	FString HideUI;//[Offset: 0x3c, Size: 12]
	FString CheckWindowOpen;//[Offset: 0x48, Size: 12]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x1c, Size: 60]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x24869dc
	void AddSystem(const FString SystemName, const FString BPPath);// 0x248676c

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	void Init();// 0x29fa2f4

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x1c, Size: 12]
	FString TssBuildInIpInfo;//[Offset: 0x28, Size: 12]
	static int SendSkdData_LuaState();// 0x24752ec
	static int SendEigeninfoData_LuaState();// 0x24752ec
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x24752ec
	static int OnRecvData_LuaState();// 0x24752ec
	static int GetUserTag4Lua_LuaState();// 0x24752ec
	static int GetDeviceFeature_LuaState();// 0x24752ec
	static int EigenArrayObfuscationVerify_LuaState();// 0x24752ec

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString FileSavePath;//[Offset: 0x40, Size: 12]
	FString UrlHash;//[Offset: 0x4c, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	void Start(FString URL);// 0x2481894
	static ImageDownloader* MakeDownloaderInGame();// 0x248186c
	static ImageDownloader* MakeDownloader();// 0x2481844
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x24816e4

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x44, Size: 60]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0x90, Size: 12]
	void TickUDPPing(float DeltaTime);// 0x24c7c34
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x24c7938
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x24c7758
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x29fa2f4
	bool IsChooingZoneAccess();// 0x24c7730
	bool isAllZoneHasPingValue();// 0x24c7708
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x24c7578
	float GetZoneServerDelay(FString ServerAddress);// 0x24c7414
	int GetMinDealyAddress();// 0x24c73ec
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x24c724c

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x1c, Size: 60]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x58, Size: 60]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0x94, Size: 60]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0xd0, Size: 60]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x10c, Size: 60]
	void Reset();// 0x1e6112c
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x1e610b4
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x1e6103c
	void RemoveImage(Image* Image);// 0x1e60fc4
	void HandleUserSettingChange();// 0x1e60fb0
	LinearColor GetColorByType(int Type);// 0x1e60f24
	void Clear();// 0x1e60f10
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x1e60e54
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x1e60d98
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x1e60c8c
	void AddColorByType(FString Type, LinearColor Color);// 0x1e60ae8

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x1c, Size: 12]
	FString MultiLayerColorTable;//[Offset: 0x28, Size: 12]
	void UpdateSingleLayerColor(LinearColor Color);// 0x1e8868c
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x1e884e8
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x1e88470
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x1e883f8

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x1c, Size: 60]
	void SetMaxTaskNum(int Num);// 0x1eb031c
	void RunNextTask();// 0x245a678
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x245a50c
	void ClearOneTask(FString ObjectPath);// 0x245a3b4
	void ClearAllTask();// 0x245a3a0
	void AddTask(FString ObjectPath, int LoadPriority);// 0x245a204

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x5c, Size: 4]
	UAEGameMode* BattleGameMode;//[Offset: 0x70, Size: 4]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0x74, Size: 12]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0x80, Size: 48]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xb0, Size: 728]
	FString LuaFilePath;//[Offset: 0x388, Size: 12]
	uint32 SyncNewBattlePlayer(uint64 UId, out const PlayerInfoData Info);// 0x245df78
	void SyncGameInfo(out const BattleGameInfo Info);// 0x245de6c
	void SyncGameExit();// 0x245de58
	void SyncBattlePlayerExit(uint64 UId, FName PlayerType, FString Reason);// 0x245dc5c
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x245db84
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x245daa4
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x245d978
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x245d7dc
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x245d6d4
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x245d60c
	void RequestAllPlayersBattleData(byte DataType);// 0x245d594
	void OnPostLoadMapWithWorld(World* World);// 0x245d51c
	BattlePlayer* NewBattlePlayer();// 0x245d4f4
	BattleAIPlayer* NewBattleAIPlayer();// 0x245d4cc
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x245d43c
	UAEGameMode* GetBattleGameMode();// 0x245d414
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x245d300
	BattlePlayer* FindPlayerByUID(uint64 UId, FName PlayerType);// 0x245d234
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x245d08c
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x245cfc8

--------------------------------
Class: BattlePlayer.Object
	uint64 UId;//[Offset: 0x20, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x28, Size: 152]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xc0, Size: 16]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0xd0, Size: 60]
	BattleUtils* OwningBattleUtils;//[Offset: 0x10c, Size: 4]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x245c84c

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x4, Size: 12]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte PlayerGender;//[Offset: 0x21, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	int64 CampID;//[Offset: 0x28, Size: 8]
	int PlayerBornPointID;//[Offset: 0x30, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x34, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x40, Size: 12]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x4c, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x58, Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x64, Size: 44]
	int planeAvatarId;//[Offset: 0x90, Size: 4]
	int RolewearIndex;//[Offset: 0x94, Size: 4]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 12]
	int GameMapID;//[Offset: 0x14, Size: 4]
	int WeatherID;//[Offset: 0x18, Size: 4]
	FString WeatherName;//[Offset: 0x1c, Size: 12]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x245cd04

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 12]
	FString RetsultMsg;//[Offset: 0x14, Size: 12]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x4, Size: 12]
	FString ExtraJson;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x4, Size: 60]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int Platform;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x4, Size: 12]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int BytesSent;//[Offset: 0x14, Size: 4]
	int BytesReceived;//[Offset: 0x18, Size: 4]
	int ContentType;//[Offset: 0x1c, Size: 4]
	int ResponseCode;//[Offset: 0x20, Size: 4]
	FString StringContent;//[Offset: 0x24, Size: 12]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x29fa2f4
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int FireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SpeakerVolumValue;//[Offset: 0xc0, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	int LimitBandage;//[Offset: 0xd8, Size: 4]
	int LimitMedical;//[Offset: 0xdc, Size: 4]
	int LimitAnodyne;//[Offset: 0xe0, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe4, Size: 4]
	int LimitAdrenaline;//[Offset: 0xe8, Size: 4]
	int LimitShouliudan;//[Offset: 0xec, Size: 4]
	int LimitYanwudan;//[Offset: 0xf0, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf4, Size: 4]
	int LimitRanshaodan;//[Offset: 0xf8, Size: 4]
	int LimitBullet9mm;//[Offset: 0xfc, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x100, Size: 4]
	int Limit12koujing;//[Offset: 0x104, Size: 4]
	int Limit45koujing;//[Offset: 0x108, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x10c, Size: 4]
	int Limitbolt;//[Offset: 0x110, Size: 4]
	int LimitBullet5;//[Offset: 0x114, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	int FPSLevel;//[Offset: 0x11c, Size: 4]
	int ArtStyle;//[Offset: 0x120, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x124, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x128, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x164, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a4, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1e4, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f0, Size: 12]
	int LRShootMode;//[Offset: 0x1fc, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x204, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x210, Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	int NewGetActorID;//[Offset: 0x220, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float 3DTouchValue;//[Offset: 0x228, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	int ShotGunShootMode;//[Offset: 0x230, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x234, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x238, Size: 4]
	float VehicleEye;//[Offset: 0x23c, Size: 4]
	float ParachuteEye;//[Offset: 0x240, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x244, Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x250, Size: 4]
	int DrivingViewMode;//[Offset: 0x254, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	int FpViewValue;//[Offset: 0x25c, Size: 4]
	float CamFpFreeEye;//[Offset: 0x260, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x264, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x268, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x26c, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x274, Size: 4]
	FString currentLanguage;//[Offset: 0x278, Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	FString lastViewDayTime;//[Offset: 0x288, Size: 12]
	FString lastViewWeekTime;//[Offset: 0x294, Size: 12]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a4, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2a8, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2ac, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b0, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b4, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2b8, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	int RedDotCHColor;//[Offset: 0x2c0, Size: 4]
	int RedDotCHType;//[Offset: 0x2c4, Size: 4]
	int HolographicCHColor;//[Offset: 0x2c8, Size: 4]
	int HolographicCHType;//[Offset: 0x2cc, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d0, Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d4, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2dc, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e4, Size: 60]
	int LimitFirstAidKit;//[Offset: 0x320, Size: 4]
	FString XGLanguageTag;//[Offset: 0x324, Size: 12]
	FString XGTimezoneTag;//[Offset: 0x330, Size: 12]
	FString XGPushNightTag;//[Offset: 0x33c, Size: 12]
	FString XGPushDayTag;//[Offset: 0x348, Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x358, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x35c, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x360, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	int LimitSniper2X;//[Offset: 0x368, Size: 4]
	int LimitSniper3X;//[Offset: 0x36c, Size: 4]
	int LimitSniper4X;//[Offset: 0x370, Size: 4]
	int LimitSniper6X;//[Offset: 0x374, Size: 4]
	int LimitSniper8X;//[Offset: 0x378, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	int SidewaysMode;//[Offset: 0x380, Size: 4]
	int OpenMirrorMode;//[Offset: 0x384, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	int LobbyStyleID;//[Offset: 0x390, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397, Size: 1]
	float ScreenLightness;//[Offset: 0x398, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a0, Size: 12]
	FString RechargePosSave;//[Offset: 0x3ac, Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3bc, Size: 60]
	int LimitZombieGrenade;//[Offset: 0x3f8, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x400, Size: 4]
	int SideMirrorMode;//[Offset: 0x404, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x408, Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x417, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x418, Size: 4]
	int LimitAntidote;//[Offset: 0x41c, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x424, Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x434, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	int FPPFireMode;//[Offset: 0x43c, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x440, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x444, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x448, Size: 4]
	byte TurboLastQuality;//[Offset: 0x44c, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x450, Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x48c, Size: 60]
	int[] UselessWeakGuidIDs;//[Offset: 0x4c8, Size: 12]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x4d8, Size: 12]
	int[] ChatOptiongList6;//[Offset: 0x4e4, Size: 12]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	int TD_FireMode;//[Offset: 0x4f4, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x4f8, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x500, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x508, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	int LimitSnowMan;//[Offset: 0x510, Size: 4]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x515, Size: 1]
	int ColorBlindnessType;//[Offset: 0x518, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51e, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x520, Size: 4]
	float UAVScopePercent;//[Offset: 0x524, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	int SideMirrorType;//[Offset: 0x52c, Size: 4]
	int SideMirrorColor;//[Offset: 0x530, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x538, Size: 12]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x545, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x547, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 1]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	int AutoPickClipType;//[Offset: 0x550, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x554, Size: 12]
	int[] QuickSignWheelIDList;//[Offset: 0x560, Size: 12]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56d, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56e, Size: 1]
	int HitEffectColor;//[Offset: 0x570, Size: 4]
	int HurtEffectColor;//[Offset: 0x574, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x57c, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	int BuildDoubleClick;//[Offset: 0x584, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x588, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x58c, Size: 4]
	int DoubleClickDistance;//[Offset: 0x590, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	int BattleFPS;//[Offset: 0x598, Size: 4]
	int BattleRenderStyle;//[Offset: 0x59c, Size: 4]
	int BattleRenderQuality;//[Offset: 0x5a0, Size: 4]
	int LobbyFPS;//[Offset: 0x5a4, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x5a8, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x5ac, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b3, Size: 1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x5b8, Size: 60]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x5f4, Size: 60]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x630, Size: 60]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x66c, Size: 60]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x6a8, Size: 60]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x6e4, Size: 60]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x723, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x725, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x726, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x728, Size: 60]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x764, Size: 60]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x7a0, Size: 60]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x7dc, Size: 60]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81a, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81b, Size: 1]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81d, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0x820, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0x824, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0x828, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0x82c, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0x830, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0x834, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x839, Size: 1]
	int ShoulderMode;//[Offset: 0x83c, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 1]

--------------------------------
Class: BP_STRUCT_BlueholeHurtEffectConfig_type
	FString ColorA_0_53F9F300120D08787CAD4F6400DF1E21;//[Offset: 0x0, Size: 12]
	FString ColorB_1_53FAF340120D08797CAD4F6500DF1E22;//[Offset: 0xc, Size: 12]
	FString ColorG_2_53FFF480120D087E7CAD4F6E00DF1E27;//[Offset: 0x18, Size: 12]
	FString ColorR_3_540AF740120D08897CAD4F7500DF1E32;//[Offset: 0x24, Size: 12]
	FString ID_4_722F46406A7371C3780F88AE0B284084;//[Offset: 0x30, Size: 12]
	FString ResPath_5_101890C0245C77892EEC8CC30D7AECB8;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_KoreaHurtEffectConfig_type
	FString ColorA_0_463EE38073B0E8305CFF6EAE0F8DA261;//[Offset: 0x0, Size: 12]
	FString ColorB_1_463FE3C073B0E8315CFF6EAF0F8DA262;//[Offset: 0xc, Size: 12]
	FString ColorG_2_4644E50073B0E8365CFF6EA80F8DA267;//[Offset: 0x18, Size: 12]
	FString ColorR_3_464FE7C073B0E8415CFF6E9F0F8DA272;//[Offset: 0x24, Size: 12]
	FString ID_4_7F7536C04FE524AB454A945D09B40F34;//[Offset: 0x30, Size: 12]
	FString ResPath_5_0DED414024DEE0F1299E986806532848;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_JapanHurtEffectConfig_type
	FString ColorA_0_7161A1805092E8283C37D458017CA281;//[Offset: 0x0, Size: 12]
	FString ColorB_1_7162A1C05092E8293C37D459017CA282;//[Offset: 0xc, Size: 12]
	FString ColorG_2_7167A3005092E82E3C37D442017CA287;//[Offset: 0x18, Size: 12]
	FString ColorR_3_7172A5C05092E8393C37D449017CA292;//[Offset: 0x24, Size: 12]
	FString ID_4_4B93F4C06A90502378DD12550EB4E124;//[Offset: 0x30, Size: 12]
	FString ResPath_5_5790FF405EB723F9117DDA6C072326A8;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_VNHurtEffectConfig_type
	FString ColorA_0_7D96F0000B2443BE0817B8950597C5D1;//[Offset: 0x0, Size: 12]
	FString ColorB_1_7D97F0400B2443BF0817B8940597C5D2;//[Offset: 0xc, Size: 12]
	FString ColorG_2_7D9CF1800B2443C40817B8930597C5D7;//[Offset: 0x18, Size: 12]
	FString ColorR_3_7DA7F4400B2443CF0817B8840597C5C2;//[Offset: 0x24, Size: 12]
	FString ID_5_57064340101F06091D643D670393B5C4;//[Offset: 0x30, Size: 12]
	FString ResPath_6_41070DC0638F9D1F5F3BC77009F153E8;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_GlobalHurtEffectConfig_type
	FString ColorA_0_22F27B40670E563B084B4DAB0F7D1981;//[Offset: 0x0, Size: 12]
	FString ColorB_1_22F37B80670E563C084B4DA80F7D1982;//[Offset: 0xc, Size: 12]
	FString ColorG_2_22F87CC0670E5641084B4DAD0F7D1987;//[Offset: 0x18, Size: 12]
	FString ColorR_3_23037F80670E564C084B4DB80F7D1992;//[Offset: 0x24, Size: 12]
	FString ID_4_1EC84E807CB64F767420B3EF092FEF24;//[Offset: 0x30, Size: 12]
	FString ResPath_5_7AD0F90011863CA45B459C05075A9648;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: BP_STRUCT_BlueholeHitEffectConfig_type
	FString ID_0_2E9026C02E6AE54D311F78F4021D9A54;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_62E27F005A367E3856CC8AD60E50D7A1;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_62E37F405A367E3956CC8AD50E50D7A2;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_62E880805A367E3E56CC8AD80E50D7A7;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_62F383405A367E4956CC8AC50E50D7B2;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_21EABF4028E6A19F15CD6A640D50D7A1;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_21EBBF8028E6A1A015CD6A650D50D7A2;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_21F0C0C028E6A1A515CD6A6E0D50D7A7;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_21FBC38028E6A1B015CD6A750D50D7B2;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_60F2FF807796C50644BCCD790C50D7A1;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_60F3FFC07796C50744BCCD780C50D7A2;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_60F901007796C50C44BCCD770C50D7A7;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_610403C07796C51744BCCD080C50D7B2;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_1FFB3FC04646E86D222AAFA20350D7A1;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_1FFC40004646E86E222AAFA10350D7A2;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_200141404646E873222AAFA40350D7A7;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_200C44004646E87E222AAFB10350D7B2;//[Offset: 0xc0, Size: 12]
	FString ResPath_17_5CB03140570F34CF370E01C100E9B118;//[Offset: 0xcc, Size: 12]
	FString SettingColorA_18_78BEEB001EC66138380176F00A906191;//[Offset: 0xd8, Size: 12]
	FString SettingColorB_19_78BFEB401EC66139380176F70A906192;//[Offset: 0xe4, Size: 12]
	FString SettingColorG_20_78C4EC801EC6613E380176CA0A906197;//[Offset: 0xf0, Size: 12]
	FString SettingColorR_21_78CFEF401EC66149380176C70A906182;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_KoreaHitEffectConfig_type
	FString ID_0_24E657402045C5513215900907325EE4;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_78362F806C3EB5A27592B9890A9BF861;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_78372FC06C3EB5A37592B98A0A9BF862;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_783C31006C3EB5A87592B98F0A9BF867;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_784733C06C3EB5B37592B99A0A9BF872;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_373E6FC03E5CF0D969850E51099BF861;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_373F70003E5CF0DA69850E56099BF862;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_374471403E5CF0DF69850E2B099BF867;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_374F74003E5CF0EA69850E26099BF872;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_7646B000107B2C1063163E5F089BF861;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_7647B040107B2C1163163E5E089BF862;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_764CB180107B2C1663163E25089BF867;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_7657B440107B2C2163163E2E089BF872;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_354EF0406299674731C7E897079BF861;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_354FF0806299674831C7E896079BF862;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_3554F1C06299674D31C7E891079BF867;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_355FF4806299675831C7E886079BF872;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_17_7E425B802DDA8C3E19FFB76F013EBDD1;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_18_7E435BC02DDA8C3F19FFB76C013EBDD2;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_19_7E485D002DDA8C4419FFB751013EBDD7;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_20_7E535FC02DDA8C4F19FFB75C013EBDC2;//[Offset: 0xf0, Size: 12]
	FString ResPath_21_4EF521C06CF12EC7512E0C520BBB4D58;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_JapanHitEffectConfig_type
	FString ID_0_2004154035E60089325471EE00425C34;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_56DDED805AB1952A7719137C086EA861;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_56DEEDC05AB1952B7719137D086EA862;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_56E3EF005AB195307719137A086EA867;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_56EEF1C05AB1953B7719136D086EA872;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_15E62DC02CCFD06102CF06030B6EA861;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_15E72E002CCFD06202CF06020B6EA862;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_15EC2F402CCFD06702CF061D0B6EA867;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_15F732002CCFD07202CF06120B6EA872;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_54EE6E007EEE0B9813DAB5170A6EA861;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_54EF6E407EEE0B9913DAB5080A6EA862;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_54F46F807EEE0B9E13DAB50D0A6EA867;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_54FF72407EEE0BA913DAB5780A6EA872;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_13F6AE40510C46CF68D4DCAF056EA861;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_13F7AE80510C46D068D4DCA0056EA862;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_13FCAFC0510C46D568D4DCA5056EA867;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_1407B280510C46E068D4DC50056EA872;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_17_08EB1980027FAA0615B3A9020C6BBDF1;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_18_08EC19C0027FAA0715B3A9030C6BBDF2;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_19_08F11B00027FAA0C15B3A91C0C6BBDF7;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_20_08FC1DC0027FAA1715B3A9130C6BBDE2;//[Offset: 0xf0, Size: 12]
	FString ResPath_21_7A17DFC049D32EBF221C5AF806CC4D78;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_VNHitEffectConfig_type
	FString ID_17_1855A3C018BE7CE74928E35406902744;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_4996FC000E081E3E2ECB32D60D3C5A11;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_4997FC400E081E3F2ECB32C90D3C5A12;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_499CFD800E081E442ECB32CC0D3C5A17;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_49A800400E081E4F2ECB33390D3C5A02;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_089F3C405B10804508668D7F0E3C5A11;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_08A03C805B10804608668D700E3C5A12;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_08A53DC05B10804B08668D750E3C5A17;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_08B040805B10805608668D600E3C5A02;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_47A77C802818E24C47025FA50F3C5A11;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_47A87CC02818E24D47025FA40F3C5A12;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_47AD7E002818E25247025FAF0F3C5A17;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_47B880C02818E25D47025FB40F3C5A02;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_06AFBCC0752144532F29F712003C5A11;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_06B0BD00752144542F29F713003C5A12;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_06B5BE40752144592F29F6EC003C5A17;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_06C0C100752144642F29F6E3003C5A02;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_18_5304E80078FE8A3257CFE4B00B489841;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_19_5305E84078FE8A3357CFE4B10B489842;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_20_530AE98078FE8A3857CFE48E0B489847;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_21_5315EC4078FE8A4357CFE4810B489852;//[Offset: 0xf0, Size: 12]
	FString ResPath_22_064D2E40633E42F55CDC31C801A16AC8;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_GlobalHitEffectConfig_type
	FString ID_0_0DB94F0058294F3A04F02029003DEC94;//[Offset: 0x0, Size: 12]
	FString Layer1ColorA_1_193A67401A3937D379BAA750090EF7D1;//[Offset: 0xc, Size: 12]
	FString Layer1ColorB_2_193B67801A3937D479BAA753090EF7D2;//[Offset: 0x18, Size: 12]
	FString Layer1ColorG_3_194068C01A3937D979BAA756090EF7D7;//[Offset: 0x24, Size: 12]
	FString Layer1ColorR_4_194B6B801A3937E479BAA763090EF7C2;//[Offset: 0x30, Size: 12]
	FString Layer2ColorA_5_5842A7807EFA541A4F4A16C50C0EF7D1;//[Offset: 0x3c, Size: 12]
	FString Layer2ColorB_6_5843A7C07EFA541B4F4A16C40C0EF7D2;//[Offset: 0x48, Size: 12]
	FString Layer2ColorG_7_5848A9007EFA54204F4A16C30C0EF7D7;//[Offset: 0x54, Size: 12]
	FString Layer2ColorR_8_5853ABC07EFA542B4F4A16F40C0EF7C2;//[Offset: 0x60, Size: 12]
	FString Layer3ColorA_9_174AE7C063BB706137E935960B0EF7D1;//[Offset: 0x6c, Size: 12]
	FString Layer3ColorB_10_174BE80063BB706237E935950B0EF7D2;//[Offset: 0x78, Size: 12]
	FString Layer3ColorG_11_1750E94063BB706737E935980B0EF7D7;//[Offset: 0x84, Size: 12]
	FString Layer3ColorR_12_175BEC0063BB707237E935850B0EF7C2;//[Offset: 0x90, Size: 12]
	FString Layer4ColorA_13_56532800487C8CA85663AED0060EF7D1;//[Offset: 0x9c, Size: 12]
	FString Layer4ColorB_14_56542840487C8CA95663AED1060EF7D2;//[Offset: 0xa8, Size: 12]
	FString Layer4ColorG_15_56592980487C8CAE5663AEDA060EF7D7;//[Offset: 0xb4, Size: 12]
	FString Layer4ColorR_16_56642C40487C8CB95663AEC1060EF7C2;//[Offset: 0xc0, Size: 12]
	FString SettingColorA_17_5126B340631EA20D7C7C0CF6066E64F1;//[Offset: 0xcc, Size: 12]
	FString SettingColorB_18_5127B380631EA20E7C7C0CF7066E64F2;//[Offset: 0xd8, Size: 12]
	FString SettingColorG_19_512CB4C0631EA2137C7C0CF0066E64F7;//[Offset: 0xe4, Size: 12]
	FString SettingColorR_20_5137B780631EA21E7C7C0CE7066E64E2;//[Offset: 0xf0, Size: 12]
	FString ResPath_21_2BA8B9801447FA32396A63CB0CCBB678;//[Offset: 0xfc, Size: 12]

--------------------------------
Class: BP_STRUCT_GuideText_type
	int GuideID_0_A5FF72E542F02CBBCE5E2696B9B5AE1E;//[Offset: 0x0, Size: 4]
	int TriggerTimes_1_092A596A4CD84CDBCEAB7CAC1E5C6784;//[Offset: 0x4, Size: 4]
	FString text4_2_0681BED6478BF4BE2672C1B126FF6E1E;//[Offset: 0x8, Size: 12]
	FString text1_3_0B618F7F449909BFB58A3E98E3DB73DE;//[Offset: 0x14, Size: 12]
	FString text2_4_F5471C1F44A2ADB1B71AD3A2991F2C29;//[Offset: 0x20, Size: 12]
	FString text3_5_5E534A744DCD782353B99F94D72CF42E;//[Offset: 0x2c, Size: 12]
	int IsFloat_7_5631F6C015B003AF4D2C60B3037F0B64;//[Offset: 0x38, Size: 4]
	int ShapeType_8_6317EF000ACBA582315244FA09B48A85;//[Offset: 0x3c, Size: 4]
	int XOffset_10_1D6AFA00689E1E0E6D67A078005D0714;//[Offset: 0x40, Size: 4]
	int YOffset_11_5C733A401ADE00450611FA950F5D0704;//[Offset: 0x44, Size: 4]
	int OutOffset_12_336A92002DF8BFBC469DDB2F0A823C04;//[Offset: 0x48, Size: 4]

--------------------------------
Class: BP_STRUCT_JKColorBlindnessConfig_type
	FString CBBlueColorA_0_1A321BC068EC5CE10F6EEF990DA69541;//[Offset: 0x0, Size: 12]
	FString CBBlueColorB_1_1A331C0068EC5CE20F6EEF9E0DA69542;//[Offset: 0xc, Size: 12]
	FString CBBlueColorG_2_1A381D4068EC5CE70F6EEF930DA69547;//[Offset: 0x18, Size: 12]
	FString CBBlueColorR_3_1A43200068EC5CF20F6EEFAE0DA69552;//[Offset: 0x24, Size: 12]
	FString CBGreenColorA_4_4571D60028624EFE0DB593EC02ABB561;//[Offset: 0x30, Size: 12]
	FString CBGreenColorB_5_4572D64028624EFF0DB593E302ABB562;//[Offset: 0x3c, Size: 12]
	FString CBGreenColorG_6_4577D78028624F040DB593E602ABB567;//[Offset: 0x48, Size: 12]
	FString CBGreenColorR_7_4582DA4028624F0F0DB5939302ABB572;//[Offset: 0x54, Size: 12]
	FString CBRedColorA_8_41F0E0805F44DE5C3DFB5D0601E64FD1;//[Offset: 0x60, Size: 12]
	FString CBRedColorB_9_41F1E0C05F44DE5D3DFB5D0701E64FD2;//[Offset: 0x6c, Size: 12]
	FString CBRedColorG_10_41F6E2005F44DE623DFB5D0C01E64FD7;//[Offset: 0x78, Size: 12]
	FString CBRedColorR_11_4201E4C05F44DE6D3DFB5D1701E64FC2;//[Offset: 0x84, Size: 12]
	FString ID_12_0AB56BC00DEC06DD7427B978061094A4;//[Offset: 0x90, Size: 12]
	FString NormalColorA_13_71D012C041F9112D68401C9A05E69591;//[Offset: 0x9c, Size: 12]
	FString NormalColorB_14_71D1130041F9112E68401C9B05E69592;//[Offset: 0xa8, Size: 12]
	FString NormalColorG_15_71D6144041F9113368401C9405E69597;//[Offset: 0xb4, Size: 12]
	FString NormalColorR_16_71E1170041F9113E68401CAB05E69582;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: BP_STRUCT_VNColorBlindnessConfig_type
	FString CBBlueColorA_0_48A05F80565F18D25FB7B3780DADA841;//[Offset: 0x0, Size: 12]
	FString CBBlueColorB_1_48A15FC0565F18D35FB7B3790DADA842;//[Offset: 0xc, Size: 12]
	FString CBBlueColorG_2_48A66100565F18D85FB7B3760DADA847;//[Offset: 0x18, Size: 12]
	FString CBBlueColorR_3_48B163C0565F18E35FB7B3090DADA852;//[Offset: 0x24, Size: 12]
	FString CBGreenColorA_4_797A39C016C4BF072EFE2933021A8561;//[Offset: 0x30, Size: 12]
	FString CBGreenColorB_5_797B3A0016C4BF082EFE2932021A8562;//[Offset: 0x3c, Size: 12]
	FString CBGreenColorG_6_79803B4016C4BF0D2EFE290D021A8567;//[Offset: 0x48, Size: 12]
	FString CBGreenColorR_7_798B3E0016C4BF182EFE2902021A8572;//[Offset: 0x54, Size: 12]
	FString CBRedColorA_8_77B50440671A3E3B5F43162201E6BC01;//[Offset: 0x60, Size: 12]
	FString CBRedColorB_9_77B60480671A3E3C5F43162101E6BC02;//[Offset: 0x6c, Size: 12]
	FString CBRedColorG_10_77BB05C0671A3E415F43162401E6BC07;//[Offset: 0x78, Size: 12]
	FString CBRedColorR_11_77C60880671A3E4C5F43163101E6BC12;//[Offset: 0x84, Size: 12]
	FString ID_19_20AE6F800EBB4E6435B639D10F2D94A4;//[Offset: 0x90, Size: 12]
	FString NormalColorA_13_203E56802F6BCD1E3143D4E005EDA891;//[Offset: 0x9c, Size: 12]
	FString NormalColorB_14_203F56C02F6BCD1F3143D4E105EDA892;//[Offset: 0xa8, Size: 12]
	FString NormalColorG_15_204458002F6BCD243143D4EA05EDA897;//[Offset: 0xb4, Size: 12]
	FString NormalColorR_16_204F5AC02F6BCD2F3143D49105EDA882;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: BP_STRUCT_ColorBlindnessConfig_type
	FString CBBlueColorA_19_362F368060B105F828F4BADE0EAF4721;//[Offset: 0x0, Size: 12]
	FString CBBlueColorB_27_363036C060B105F928F4BADF0EAF4722;//[Offset: 0xc, Size: 12]
	FString CBBlueColorG_29_3635380060B105FE28F4BAA40EAF4727;//[Offset: 0x18, Size: 12]
	FString CBBlueColorR_23_36403AC060B1060928F4BAAF0EAF4732;//[Offset: 0x24, Size: 12]
	FString CBGreenColorA_17_5F0D90C03949D01D2EBEC7C9023492B1;//[Offset: 0x30, Size: 12]
	FString CBGreenColorB_28_5F0E91003949D01E2EBEC7CE023492B2;//[Offset: 0x3c, Size: 12]
	FString CBGreenColorG_32_5F1392403949D0232EBEC7C3023492B7;//[Offset: 0x48, Size: 12]
	FString CBGreenColorR_25_5F1E95003949D02E2EBEC7DE023492A2;//[Offset: 0x54, Size: 12]
	FString CBRedColorA_18_12FF5B40473229556BCC523607F696F1;//[Offset: 0x60, Size: 12]
	FString CBRedColorB_26_13005B80473229566BCC522907F696F2;//[Offset: 0x6c, Size: 12]
	FString CBRedColorG_30_13055CC04732295B6BCC522C07F696F7;//[Offset: 0x78, Size: 12]
	FString CBRedColorR_24_13105F80473229666BCC521907F696E2;//[Offset: 0x84, Size: 12]
	FString ID_35_5A5046801FF3596E474DD8DF0D82F7A4;//[Offset: 0x90, Size: 12]
	FString NormalColorA_31_0DCD2D8036DBB8744E67B41408EF47F1;//[Offset: 0x9c, Size: 12]
	FString NormalColorB_22_0DCE2DC036DBB8754E67B41508EF47F2;//[Offset: 0xa8, Size: 12]
	FString NormalColorG_21_0DD32F0036DBB87A4E67B41E08EF47F7;//[Offset: 0xb4, Size: 12]
	FString NormalColorR_20_0DDE31C036DBB8854E67B42508EF47E2;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: BP_STRUCT_BattleSound_type
	FString Bank_0_184E3DC068C2BF413A229E4A0982F59B;//[Offset: 0x0, Size: 12]
	int ID_1_2A476200426F1DEA2637969B03D982A4;//[Offset: 0xc, Size: 4]
	FString Region_2_79F1F7C0268B0C797F1F0D4403F807DE;//[Offset: 0x10, Size: 12]
	FString Event_3_1B79FF4077296A014966EB0F082BF7C4;//[Offset: 0x1c, Size: 12]
	int SoundID_4_46DBA4405283EB7B3BA231390F57D0E4;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 12]
	byte ArgumentValueType;//[Offset: 0xc, Size: 1]
	FText ArgumentValue;//[Offset: 0x10, Size: 12]
	int ArgumentValueInt;//[Offset: 0x1c, Size: 4]
	float ArgumentValueFloat;//[Offset: 0x20, Size: 4]
	enum ArgumentValueGender;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BP_STRUCT_EmoteBPTable_type
	FString Path_0_247605C000C1809320361CC70BC26958;//[Offset: 0x0, Size: 12]
	FString CName_1_20BFF38058E1993E3181765E0C385985;//[Offset: 0xc, Size: 12]
	int ID_2_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x18, Size: 4]
	FString LobbyPath_3_17CBE3C0186812E1377BBB6D07222BE8;//[Offset: 0x1c, Size: 12]
	FString LobbyEmoteAdapt_4_6274998039C4B44E5D4A1AFE0DB5A954;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ItemRecordData
	int ItemID;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int BPID;//[Offset: 0x10, Size: 4]
	int WeightforOrder;//[Offset: 0x14, Size: 4]
	int Worth;//[Offset: 0x18, Size: 4]
	int ItemCapacity;//[Offset: 0x1c, Size: 4]
	int[] Attach;//[Offset: 0x20, Size: 12]
	int BulletID;//[Offset: 0x2c, Size: 4]
	int ProposeBulletNum;//[Offset: 0x30, Size: 4]
	int Durability;//[Offset: 0x34, Size: 4]
	int ItemSoundID;//[Offset: 0x38, Size: 4]
	int ItemQuality;//[Offset: 0x3c, Size: 4]
	int ItemPickupRule;//[Offset: 0x40, Size: 4]
	int AIFullVaule;//[Offset: 0x44, Size: 4]
	float Weight;//[Offset: 0x48, Size: 4]
	int MaxCount;//[Offset: 0x4c, Size: 4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	FString ItemName;//[Offset: 0x54, Size: 12]
	FString ItemBigIcon;//[Offset: 0x60, Size: 12]
	FString ItemDesc;//[Offset: 0x6c, Size: 12]
	FString ItemSmallIcon;//[Offset: 0x78, Size: 12]
	FString KillWhiteIcon;//[Offset: 0x84, Size: 12]
	FString ItemWhiteIcon;//[Offset: 0x90, Size: 12]
	FString RedEmotionSoundPath;//[Offset: 0x9c, Size: 12]
	FString PickupDesc;//[Offset: 0xa8, Size: 12]
	FString BackpackSimple;//[Offset: 0xb4, Size: 12]
	FString SpecialIcon;//[Offset: 0xc0, Size: 12]
	FString ItemBigIcon2;//[Offset: 0xcc, Size: 12]
	FString ItemSmallIcon2;//[Offset: 0xd8, Size: 12]
	int Electricity;//[Offset: 0xe4, Size: 4]
	FString ArmorySimpleDesc;//[Offset: 0xe8, Size: 12]

--------------------------------
Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0, Size: 12]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0xc, Size: 4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x10, Size: 4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x14, Size: 4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x18, Size: 4]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	void Init();// 0x1e2df90

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x20, Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x5c, Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0x98, Size: 60]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float RushTriggerLength1;//[Offset: 0xd8, Size: 4]
	float RushTriggerLength2;//[Offset: 0xdc, Size: 4]
	float RushTriggerLength3;//[Offset: 0xe0, Size: 4]
	FString SaveSlotName;//[Offset: 0xe4, Size: 12]
	FString LayoutName1;//[Offset: 0xf0, Size: 12]
	FString LayoutName2;//[Offset: 0xfc, Size: 12]
	FString LayoutName3;//[Offset: 0x108, Size: 12]
	int TimeTag;//[Offset: 0x114, Size: 4]
	int[] InvalidArray1;//[Offset: 0x118, Size: 12]
	int[] InvalidArray2;//[Offset: 0x124, Size: 12]
	int[] InvalidArray3;//[Offset: 0x130, Size: 12]

--------------------------------
Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0, Size: 4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4, Size: 8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc, Size: 4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10, Size: 16]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20, Size: 8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28, Size: 8]

--------------------------------
Class: PubgmAutoRun.ActorComponent.Object
	delegate PubgmAutoRunSimulateAction;//[Offset: 0xbc, Size: 12]
	bool bRoutePointInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	XTPoint*[] RoutePoints;//[Offset: 0xcc, Size: 12]
	void VehicleTowardTo(float X, float Y, float Z);// 0x1f7d120
	void VehicleMoveTo(float X, float Y, float Z);// 0x1f7d020
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float x1, float y1, float Z1);// 0x1f7ce48
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);// 0x29fa2f4
	static bool NeedCmdAutoRun();// 0x1f7ce20
	void NativeSimulateAction(int SimActionType);// 0x1f7cda8
	void InitRoutePoint();// 0x1f7cd94
	void GMGotoPosition(int X, int Y, int Z);// 0x1f7cc94
	Vector[] GetRangeActorsPostions(int ActorType, Vector OriginPos, float RangeRadius);// 0x1f7cafc
	Vector GetPoisonCircleLocation();// 0x1f7cab4
	static float GetPlayerSpeed(int SpeedIdx);// 0x1f7ca30
	bool GetNearestXTPointToVehicle(out Transform FirstPoint, out Transform SecendPoint, bool bNext);// 0x1f7c880
	float ForceVehiclePosPull(bool bNext);// 0x1f7c7f0

--------------------------------
Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x2cc, Size: 4]
	int GetIntValueTwo();// 0x21876f0
	int GetIntValueThree();// 0x1dce6d4
	int GetIntValueOne();// 0x20e4088

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StarJumpPlane();// 0x1dd7f08

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x108, Size: 12]
	<FString,UAEUserWidget*> WidgetsMap;//[Offset: 0x160, Size: 60]
	<int,DynamicWidgetAsyncLoadData> PandingAsyncLoadRequests;//[Offset: 0x19c, Size: 60]
	void SubUIWidgetListWithMountData(out const InGameWidgetData[] InGameWidgetDataList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly, int inUIControlState);// 0x2482a28
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x2482780
	void SubDynamicUIWidgetList(out const DynamicWidgetData[] DynamicWidgetMap);// 0x248263c
	void OnAsyncLoadWidgetClassObj(Object* ClassObj, int RequestID);// 0x2482580
	void HandleUIMessage(FString UIMessage);// 0x24824c4
	void HandleMountWidget(InGameUIManager* IngameManager);// 0x248244c
	void HandleDynamicDestroy();// 0x2482438
	void HandleDynamicCreation(bool isAsyncLoad);// 0x24823b8
	void GetWidgetHandleAsyncWithCallBack(FString WidgetKey, delegate Callback);// 0x248228c
	UAEUserWidget* GetWidgetHandle(FString WidgetKey);// 0x24821c8
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x248211c

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xb0, Size: 12]
	UAEPlayerController* OwningController;//[Offset: 0xf8, Size: 4]
	LuaClassObj* LuaObject;//[Offset: 0x100, Size: 4]
	UAEUserWidget* GetWidget(int Index);// 0x246b01c
	LuaClassObj* GetLuaObject();// 0x1f34c90
	GameFrontendHUD* GetGameFrontendHUD();// 0x246aff4

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 12]
	FString Container;//[Offset: 0xc, Size: 12]
	int ZOrder;//[Offset: 0x18, Size: 4]
	class Object* WidgetClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: DynamicWidgetAsyncLoadData
	FString WidgetKey;//[Offset: 0x0, Size: 12]
	DynamicWidgetData DynamicWidgetData;//[Offset: 0xc, Size: 116]
	delegate Callback;//[Offset: 0x80, Size: 16]

--------------------------------
Class: DynamicWidgetData
	bool bAutoDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString MountModule;//[Offset: 0x4, Size: 12]
	InGameWidgetData InGameWidgetData;//[Offset: 0x10, Size: 100]

--------------------------------
Class: InGameWidgetData
	int bAutoShow;//[Offset: 0x0, Size: 4]
	GameWidgetConfig GameWidgetConfig;//[Offset: 0x4, Size: 32]
	WidgetMountData WidgetMountData;//[Offset: 0x24, Size: 64]

--------------------------------
Class: WidgetMountData
	Margin MarginData;//[Offset: 0x0, Size: 16]
	Anchors AnchorsData;//[Offset: 0x10, Size: 16]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	FString MountName;//[Offset: 0x28, Size: 12]
	FString MountOuterName;//[Offset: 0x34, Size: 12]

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x2d8, Size: 4]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2de, Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x2487e0c
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x2487cd8
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x2487c60
	void SubDefaultChildUI(out const FString[] childList);// 0x2487b2c
	void SubDefaultBaseUI(FString baseUI);// 0x2487a70
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x24878b8
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x24877fc
	void RestoreWidgetZorder(const int Index);// 0x2487784
	void RestoreAllWidgetZorder();// 0x2487770
	bool IsTopStackPanel();// 0x2487748
	bool IsPushedPanel();// 0x2487720
	bool InCombatState();// 0x24876f8
	void HandleUIMessageNoFetch(FString UIMessage);// 0x248763c
	void HandleUIMessage(FString UIMessage);// 0x2487580
	void HandleStopAsyncLoad();// 0x248756c
	void HandleDynamicDestroy();// 0x2487558
	void HandleDynamicCreationInternal(bool isAsyncLoad);// 0x24874d8
	void HandleDynamicCreation(bool isAsyncLoad);// 0x2487458
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x248739c
	FString GetTopStackPanelSrcTag();// 0x24872dc
	FString GetTopStackPanelDstTag();// 0x248721c
	FString GetGameStatus();// 0x248715c
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x24870b0
	void AddToTopStackPanel();// 0x248709c

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x2cc, Size: 4]
	Object* OwningObject;//[Offset: 0x2d0, Size: 4]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x2d4, Size: 4]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0xc0, Size: 4]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x4c18270
	void PushOneScriptPropertyValues(FString ParamName);// 0x4c18110
	void PushAllScriptPropertyValues();// 0x1f36600
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x4c17f74
	void FetchOneScriptPropertyValues(FString ParamName);// 0x4c17e14
	void FetchAllScriptPropertyValues();// 0x1e63624
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x4c17cbc
	void CallScriptFunction(FString FunctionName);// 0x4c17b64

--------------------------------
Class: QuickSignComponent_BP_C.QuickSignComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390, Size: 4]
	void GetAudioEventAndBank(int audioID, int ActorId, out FString OutBankName, out FString OutEventName, FString BankName, FString EventName, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Format_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetActorBankByID_BankName);// 0x29fa2f4
	void GetLocalizeActorID(int AudioKey, out int ActorId, int CallFunc_Divide_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBankExistByActorID_bExist, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void PlayVoiceAndText(QuickSignMsg msgItem, bool IsSelf, int SignType, int TextId, int audioID, int ActorId, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetLocalizeActorID_ActorID, FString CallFunc_GetAudioEventAndBank_OutBankName, FString CallFunc_GetAudioEventAndBank_OutEventName, QuickSignMsg K2Node_MakeStruct_QuickSignMsg, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_GetQuickSignText_TextID, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetAudioIDSignType_AudioID, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString);// 0x29fa2f4
	int GetVoiceAudioID(enum MsgType, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetQuickSignAudio_AudioID);// 0x29fa2f4
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, FString CallFunc_GetLocalizeBattleText_Text, FString CallFunc_GetLocalizeBattleText_Text2, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetLocalizeBattleText_Text3, FString CallFunc_GetLocalizeBattleText_Text4, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue5, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue3, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text5, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x29fa2f4
	void OrganizeMsg(int TextId, FString PlayerName, bool IsSelf, FString StrParam, out FString MsgString, FString msgContent, bool CallFunc_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_GetLocalizeText_Text, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_SelectString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10);// 0x29fa2f4
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x29fa2f4
	bool GenerateMarkInfo(out QuickSignMsg msgItem, out QuickSignMark MarkInfo, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x29fa2f4
	void LoadConfig(int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_QuickSignTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int CallFunc_Array_Length_ReturnValue2, FName CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, BP_STRUCT_QuickSignCfg_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x29fa2f4
	void PlayVoiceCD(float Duration);// 0x29fa2f4
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x29fa2f4
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, int ___int_Variable, QuickSignMsg K2Node_Event_MsgItem2, bool K2Node_Event_IsSelf, float K2Node_CustomEvent_Duration, QuickSignMsg K2Node_Event_MsgItem, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x29fa2f4
	UAEDataTable* QuickSignDataTable;//[Offset: 0x394, Size: 4]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x398, Size: 60]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x3d4, Size: 60]
	FString TeammateColor;//[Offset: 0x410, Size: 12]
	FString SelfColor;//[Offset: 0x41c, Size: 12]
	FString ColonChar;//[Offset: 0x428, Size: 12]
	FString EndChar;//[Offset: 0x434, Size: 12]
	FString SelfName;//[Offset: 0x440, Size: 12]
	QuickSignMsg CurrMsg;//[Offset: 0x44c, Size: 80]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	<enum,int> WeaponAttachmentSocketTextIDMap;//[Offset: 0x4a0, Size: 60]
	<int,int> DefaultAudioMap;//[Offset: 0x4dc, Size: 60]

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b0, Size: 4]
	void GetActorNameByID(int ActorId, out FString actorName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x29fa2f4
	void GetLocalText(int MsgID, int ItemID, FString PlayerKeyString, out FString ContentMsg, FString Msg2Split, int RealTextID, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_GetLocalizeVoiceText_Text, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Divide_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, int ___int_Array_Index_Variable, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_TextMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int ___int_Loop_Counter_Variable, STExtraPlayerState* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeVoiceText_Text2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, FString CallFunc_SelectString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x29fa2f4
	void LoadVehicleModeQuickMsg(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int ___int_Array_Index_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable3, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleWarModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3);// 0x29fa2f4
	void IsVehicleWarMode(out bool IsVehicleWarMode, GameStateBase* CallFunc_GetGameState_ReturnValue, VehicleWarGameState* K2Node_DynamicCast_AsVehicle_War_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void InitActorIDList(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x29fa2f4
	void UpdateInfectModeMsgByPlayerType(enum PlayerType, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Loop_Counter_Variable4, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ConvertSubTypeToMainType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Percent_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Percent_IntInt_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio3, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Percent_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio4, int CallFunc_Array_AddUnique_ReturnValue2);// 0x29fa2f4
	void LoadInfectModeQuickMsg(FString NewLocalVar, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Loop_Counter_Variable4, int ___int_Loop_Counter_Variable5, int CallFunc_Add_IntInt_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue5, int ___int_Array_Index_Variable3, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVEInfectionGameState* K2Node_DynamicCast_AsPVEInfection_Game_State, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable4, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Array_Index_Variable5, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_GetMainType_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STRUCT_InfectModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue4, FString CallFunc_Array_Get_Item4, FString CallFunc_Array_Get_Item5, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue5);// 0x29fa2f4
	void IsInfectMode(out bool IsInfectMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	void InitChatFlagList(enum ___byte_Variable, enum ___byte_Variable2, enum ___byte_Variable3, int ___int_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_FlagIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item2, enum K2Node_Select_Default, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, QuickChatFlag K2Node_MakeStruct_QuickChatFlag, int CallFunc_Array_AddUnique_ReturnValue2);// 0x29fa2f4
	void SetTurnplateQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_TextMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	void GetActorBankByID(int ActorId, out FString BankName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x29fa2f4
	void SwitchActorAudio(int ActorId, int LocalActorID);// 0x29fa2f4
	void LoadSingleAudio(int chatTextID, FString CallFunc_Conv_IntToString_ReturnValue, QuickChatOption K2Node_MakeStruct_QuickChatOption, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Add_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);// 0x29fa2f4
	void LoadAllAudio(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, int ___int_Loop_Counter_Variable4, int CallFunc_Add_IntInt_ReturnValue4, int ___int_Loop_Counter_Variable5, int ___int_Loop_Counter_Variable6, int CallFunc_Add_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue6, int ___int_Array_Index_Variable5, int ___int_Array_Index_Variable6, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, int CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Array_Get_Item6, int CallFunc_Array_Length_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue6);// 0x29fa2f4
	void CreateAudio(Object* audio, int resID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void SetQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int chatQuickID, bool bFind, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, const TemBPDataAddr[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_TextMapping_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	void InitFromSetting(FString CallFunc_GetPublishRegion_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2);// 0x29fa2f4
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void PlaySound(int MsgID, int ActorId, int LocalActorID, bool CallFunc_IsBankExistByActorID_bExist, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Set_Contains_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Set_Contains_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_GetActorBankByID_BankName, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_GetPublishRegion_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x29fa2f4
	void AddToArray(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x29fa2f4
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemID, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat);// 0x29fa2f4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x29fa2f4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x29fa2f4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x29fa2f4
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x29fa2f4
	void OnFilterFinish(FString filterText);// 0x29fa2f4
	void CloseChatHistoryList();// 0x29fa2f4
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ReportBattleChat(int MsgID, FString Msg);// 0x29fa2f4
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue2, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller2, bool K2Node_DynamicCast_bSuccess2, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, Actor* CallFunc_GetOwner_ReturnValue3, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller3, bool K2Node_DynamicCast_bSuccess3, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, Actor* CallFunc_GetOwner_ReturnValue4, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_name, FString K2Node_Event_content, bool K2Node_Event_isMe, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Event_name2, FString K2Node_Event_content2, int K2Node_Event_msgID3, int K2Node_Event_audioID, int K2Node_Event_itemID, FString K2Node_Event_PlayerKeyString, bool K2Node_Event_isMe2, bool K2Node_Event_playSound, bool K2Node_Event_ShowChat, FString CallFunc_GetLocalText_ContentMsg, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString K2Node_Event_filterText, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID2, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue3, FString CallFunc_GetLocalizeText_Text, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_GetLocalizeText_Text4, FString CallFunc_GetLocalizeText_Text5, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue17, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess9, BP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_GetLocalizeText_Text7, FString CallFunc_Concat_StrStr_ReturnValue18, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_GetLocalizeText_Text9, FString CallFunc_Concat_StrStr_ReturnValue19, FString CallFunc_Concat_StrStr_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue21, FString CallFunc_Concat_StrStr_ReturnValue22, bool CallFunc_IsInfectMode_IsInfectMode, bool CallFunc_IsVehicleWarMode_IsVehicleWarMode, int K2Node_Event_MsgID, FString K2Node_Event_msg, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess10, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess11);// 0x29fa2f4
	FString addToUIText;//[Offset: 0x2b4, Size: 12]
	FString[] UITextArray;//[Offset: 0x2c0, Size: 12]
	int FirstIndex;//[Offset: 0x2cc, Size: 4]
	FString currContentMsg;//[Offset: 0x2d0, Size: 12]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	FString FriendChatStrGid;//[Offset: 0x2e0, Size: 12]
	FString FriendChatSenderName;//[Offset: 0x2ec, Size: 12]
	FString FriendChatContent;//[Offset: 0x2f8, Size: 12]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x308, Size: 12]
	FString FriendInviteSenderName;//[Offset: 0x314, Size: 12]
	FString FriendInviteBattleTextValue;//[Offset: 0x320, Size: 12]
	FString FriendReplyStrGid;//[Offset: 0x32c, Size: 12]
	FString FriendReplySenderName;//[Offset: 0x338, Size: 12]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 1]
	int UI_MsgID;//[Offset: 0x348, Size: 4]
	FString UI_ItemName;//[Offset: 0x34c, Size: 12]
	int UI_AlternateMsgID;//[Offset: 0x358, Size: 4]
	SettingConfig_C* SettingConfig;//[Offset: 0x35c, Size: 4]
	int[] ChatFlagTypeList;//[Offset: 0x360, Size: 12]
	int[] TmpChatIDList;//[Offset: 0x36c, Size: 12]
	bool bIsInfectMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	int[] ChatQuikcTextIDList_HumanMenu;//[Offset: 0x37c, Size: 12]
	int[] ChatQuikcTextIDList_HumanTurnplate;//[Offset: 0x388, Size: 12]
	int[] ChatQuikcTextIDList_ZombieMenu;//[Offset: 0x394, Size: 12]
	int[] ChatQuikcTextIDList_ZombieTurnplate;//[Offset: 0x3a0, Size: 12]
	int[] InfectModePlayerType;//[Offset: 0x3ac, Size: 12]
	enum CurInfectModePlayerType;//[Offset: 0x3b8, Size: 1]
	QuickChatIDAndAudio QuickChat;//[Offset: 0x3bc, Size: 12]
	<int> GlobalActorIDList;//[Offset: 0x3c8, Size: 60]
	bool bIsVehicleWarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	int[] ChatQuikcTextIDList_VWMenu;//[Offset: 0x408, Size: 12]
	int[] ChatQuikcTextIDList_VWTurnplate;//[Offset: 0x414, Size: 12]
	int TraceItemID;//[Offset: 0x420, Size: 4]
	<int> MuteOnGlobal;//[Offset: 0x424, Size: 60]

--------------------------------
Class: BP_STRUCT_VoiceActorCfg_type
	int ActorItemID_1_7EA64A805D4CF7C83F9ED7C20956DD34;//[Offset: 0x0, Size: 4]
	int ActorID_2_66EEA6C00EC097255E83F50D0C7CE884;//[Offset: 0x4, Size: 4]
	FString ActorName_5_084563C0289004B337AECB5D0CE91C45;//[Offset: 0x8, Size: 12]
	int IsShow_4_5FD5FC807DD5DDEA1A7B8E0106B58787;//[Offset: 0x14, Size: 4]
	int IsShowJP_7_264263001934747024EBA4C105878D40;//[Offset: 0x18, Size: 4]
	int IsShowKR_8_554943C0790E5DDB24EBA4E605878EB2;//[Offset: 0x1c, Size: 4]
	int SortKey_9_023E1980778A370A5BD689D703B81F89;//[Offset: 0x20, Size: 4]
	int IsShowOther_10_07A39D0000338BAE43AF48D808EDF6B2;//[Offset: 0x24, Size: 4]
	int IsUnLock_11_5BD327406959D86F0700649705BBD32B;//[Offset: 0x28, Size: 4]
	bool IsPlayInGlobal_12_14DF9BC04FFBCB15583BB67E0769332C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool IsShowOnlyUnlocked_13_57763240781486F56DF002AB0BE738F4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool notShowInOtherRegion_14_25A049000CE0A9141E395268023C6F2E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	FString OpenTime_15_14046D8013EB228646C4CC690BBB4AE5;//[Offset: 0x30, Size: 12]
	FString BankDepend_16_1453384006553C13591DBA5107495114;//[Offset: 0x3c, Size: 12]
	FString BankName_17_72DF248073CEC0563E7F45210B58A305;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BP_STRUCT_SupplyText_type
	int ChatID_0_55CE55406726E16144B6347C05241D24;//[Offset: 0x0, Size: 4]
	int AlternateTextID_1_1256E6805FE8A11C280F72C50934EDE4;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_STRUCT_TextMapping_type
	int TextID_0_737B2E400AB8E75B6D83691E079C6174;//[Offset: 0x0, Size: 4]
	int VoiceKey_1_7379E980228E962423E84820056049C9;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_STRUCT_VehicleWarModeMsgIDCfg_type
	FString MenuChatIDList_0_07E0C1C07AEC576705A4CE190E543504;//[Offset: 0x0, Size: 12]
	FString TurnplateChatIDList_1_2B152C4068877793720058A50A584EB4;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleWarGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int MatchCountDownTime;//[Offset: 0xdcc, Size: 4]
	VehicleBattleResultData CurResultData;//[Offset: 0xdd0, Size: 84]
	delegate OnShowGeneralTip;//[Offset: 0xe30, Size: 12]
	delegate OnMatchCountDownTime;//[Offset: 0xe3c, Size: 12]
	float FightStartTime;//[Offset: 0xe48, Size: 4]
	int RoundNum;//[Offset: 0xe4c, Size: 4]
	int IconID;//[Offset: 0xe50, Size: 4]
	int InstanceID;//[Offset: 0xe54, Size: 4]
	Vector CircleCenter;//[Offset: 0xe58, Size: 12]
	float Radius;//[Offset: 0xe64, Size: 4]
	VehicleGemRoundData[] RoundData;//[Offset: 0xe68, Size: 12]
	Vector[] TreasureLocations;//[Offset: 0xe74, Size: 12]
	delegate OnGemStoneNumChangeDelegate;//[Offset: 0xe80, Size: 12]
	delegate OnDestoryVehicleCountDelegate;//[Offset: 0xe8c, Size: 12]
	int GemStoneForMatchPoint;//[Offset: 0xe98, Size: 4]
	delegate OnGemStoneForMatchPointChangedDelegate;//[Offset: 0xe9c, Size: 12]
	delegate OnVehicleEatSuperDelegate;//[Offset: 0xea8, Size: 12]
	VehicleWarRankData[] TeamRankData;//[Offset: 0xeb4, Size: 12]
	delegate OnVehicleWarRankDataDelegate;//[Offset: 0xec0, Size: 12]
	<int,VehicleWarRouteDetailData> RouteDetailMap;//[Offset: 0xecc, Size: 60]
	VehicleWarRouteDetailData[] TeamRankDetailData;//[Offset: 0xf08, Size: 12]
	XTPoint*[] RoutePoints;//[Offset: 0xf14, Size: 12]
	float RouteLength;//[Offset: 0xf20, Size: 4]
	VehicleWarTeamKillData[] VehicleWarTeamKillDataArray;//[Offset: 0xf24, Size: 12]
	delegate OnVehicleWarTeamKillDataDelegate;//[Offset: 0xf30, Size: 12]
	VehicleWarCampGroup[] VehicleWarCampGroupArray;//[Offset: 0xf3c, Size: 12]
	delegate OnVehicleWarCampGroupArrayDelegate;//[Offset: 0xf48, Size: 12]
	VehicleWarGemMatchState VehicleWarGemMatchState;//[Offset: 0xf54, Size: 12]
	delegate VehicleWarGemMatchStateDelegate;//[Offset: 0xf60, Size: 12]
	delegate VehicleWarKillInfoDelegate;//[Offset: 0xf6c, Size: 12]
	delegate BoxRoundNumDelegate;//[Offset: 0xf78, Size: 12]
	delegate FightStartTimeDelegate;//[Offset: 0xf84, Size: 12]
	delegate OnTeamContinueKillNumChangedDelegate;//[Offset: 0xf90, Size: 12]
	int MatchPointContinueTime;//[Offset: 0xf9c, Size: 4]
	int ShowContinueKillEffectNumV1;//[Offset: 0xfa0, Size: 4]
	int ShowContinueKillEffectNumV2;//[Offset: 0xfa4, Size: 4]
	bool IsCampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	int RemainMatchTime;//[Offset: 0xfac, Size: 4]
	delegate OnRemainMatchTimeDelegate;//[Offset: 0xfb0, Size: 12]
	delegate OnVehicleAddHPDelegate;//[Offset: 0xfbc, Size: 12]
	BattleOpenSequencerInfo OpenSequencerInfo;//[Offset: 0xfd0, Size: 80]
	delegate OpenSequencerStartVehicleDelegate;//[Offset: 0x1020, Size: 12]
	FString SequenceName;//[Offset: 0x1030, Size: 12]
	<int,uint32> TeamVehicleDriverMap;//[Offset: 0x103c, Size: 60]
	<int,TeamMedalTotalKillData> TeamTotalKillMap;//[Offset: 0x1078, Size: 60]
	<int,int> TeamContinueKillMap;//[Offset: 0x10b4, Size: 60]
	<int,TeamMedalBeAttackedData> TeamRecentBeAttackedMap;//[Offset: 0x10f0, Size: 60]
	<int,VehicleBeAttackMapData> TeamBeAttackedMap;//[Offset: 0x112c, Size: 60]
	float FarMedalRadius;//[Offset: 0x1168, Size: 4]
	float AssistMedalTime;//[Offset: 0x116c, Size: 4]
	float CooperationMedalTime;//[Offset: 0x1170, Size: 4]
	AutoChangeSeatData[] AutoChangeSeatDataArray;//[Offset: 0x1174, Size: 12]
	int WinCampID;//[Offset: 0x1180, Size: 4]
	float GamePlayTime;//[Offset: 0x1184, Size: 4]
	int MatchPointNum;//[Offset: 0x1188, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x118c, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x1190, Size: 4]
	<int,VehicleBattleVehicleStatiscs> VehicleStaticsMap;//[Offset: 0x1194, Size: 60]
	<int,VehicleBattleWeaponStatiscs> WeaponStatiscsMap;//[Offset: 0x11d0, Size: 60]
	int VehicleStuckResetTimes;//[Offset: 0x120c, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x1210, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x1214, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x1218, Size: 4]
	<int,int> TeamLastChooseVehicleIDMap;//[Offset: 0x121c, Size: 60]
	<int,int> TeamLastChooseVehicleShapeMap;//[Offset: 0x1258, Size: 60]
	VehicleCampKills[] VehicleCampsKills;//[Offset: 0x1294, Size: 12]
	delegate OnVehicleCampsKillsChangedDelegate;//[Offset: 0x12a0, Size: 12]
	TireConfig*[] TireConfigCahce;//[Offset: 0x12ac, Size: 12]
	void VehicleTakeDamageForMedal(uint32 KillerPlayKey, int VictimTeamID, float Damage);// 0x215dc20
	void UpdateRank();// 0x215dc0c
	void ShowOpenSequencer(float showTime);// 0x215db94
	void ShowBoxWarning();// 0x215db80
	void SetWinCamp(int InCampId);// 0x215db08
	void SetUseWeaponID(uint32 PlayerKey, int FirstWeaponID, int SecondWeaponID);// 0x215da08
	void SetGemMatchState(int GemMatchState, int CampID, float ServerEndTime);// 0x215d908
	void SetCanAutoChangeSeat(int TeamID, bool bCanAutoChangeSeat);// 0x215d844
	void ServerUpdateVechicleResult();// 0x215d830
	void RecordTeamChooseVehicle(int TeamID, int VehicleId, int VehicleShapeType);// 0x215d730
	void OnRep_VehicleWarTeamRankData();// 0x215d71c
	void OnRep_VehicleWarTeamKillDataArray();// 0x215d708
	void OnRep_VehicleWarRemainMatchTime();// 0x215d6f4
	void OnRep_VehicleWarGemMatchState();// 0x215d6e0
	void OnRep_VehicleWarCampGroupArray();// 0x215d6cc
	void OnRep_VehicleCampsKills();// 0x215d6b8
	void OnRep_RoundNum();// 0x215d6a4
	void OnRep_MatchPointContinueTime();// 0x1dd8bcc
	void OnRep_MatchCountDownTime();// 0x215d690
	void OnRep_GemStoneForMatchPoint();// 0x215d67c
	void OnRep_FightStartTime();// 0x215d668
	void OnContinueKillNumChanged(int CampID, int TeamID);// 0x215d5ac
	void InitRoutePoint();// 0x215d598
	void HideBoxWarning();// 0x215d584
	float GetVehicleTotalDamageByPlayerKey(int VictimTeamID, uint32 KillerPlayerKey);// 0x215d4c0
	int GetTotalContinueKillNum(int CampID, int TeamID);// 0x215d3fc
	VehicleWarRankData GetTeamRankDataByTeamId(int TeamID);// 0x215d368
	int GetTeamKillDataIndexByTeamID(int TeamID);// 0x215d2e8
	bool GetTeamKillDataByTeamID(int TeamID, out VehicleWarTeamKillData TeamKillData);// 0x215d208
	STExtraPlayerState*[] GetPlayerStateListByTeamId(int TeamID);// 0x215d100
	bool GetPlayersByCampAndTeamID(int CampID, int TeamID, out VehicleWarTeamGroupInfo OutPlayers);// 0x215cfa4
	int GetPlayerChoose(uint32 PlayerKey);// 0x215cf24
	bool GetIsCooperationKill(int VicTeamId, int KillerTeamId, uint32 KillerPlayerKey);// 0x215ce1c
	FString GetFormatRemainTimeText();// 0x215cd5c
	Vector GetFootOfPerpendicularXY(out Vector OutPoint, out Vector BeginPoint, out Vector EndPoint);// 0x215cc14
	VehicleWarRankData[] GetCampSortedTeamRankData();// 0x215cb54
	int GetCampKillNum(int CampID);// 0x215cad4
	bool GetCampGroupByCampID(int CampID, out VehicleWarCampGroup VehicleWarCampGroup);// 0x215c94c
	void GenerateVehicleRole(VehicleWarPlayerState* PS);// 0x215c8d4
	void GenerateCampInfo();// 0x215c8c0
	void FinishTeamRoute(int TeamID);// 0x215c848
	void DropWeapons(uint32 PlayerKey);// 0x215c7d0
	void CountAttackForMedal(int KillerTeamId, STExtraBaseCharacter* Killer, int VictimTeamID, int DamageType);// 0x215c688
	void ClearAllPlayerStateChoose();// 0x215c674
	void CheckPlayIsDriver(VehicleWarPlayerState* PS);// 0x1e836a4
	void ChangeMatchCountDownTime();// 0x215c660
	bool CanAutoChangeSeat(int TeamID);// 0x215c5e0
	void BroadcastTemporaryMessage(FString Message);// 0x204ca78
	void BroadcastGeneralTip(int TipType, FString AdditionParam);// 0x215c4d8
	void BroadCast_OnVehicleEatSuper(int CampID);// 0x1f80a04
	void BroadCast_OnVehicleAddHP(STExtraVehicleWarVehicle* Vehicle);// 0x1e2592c
	void BeginMatchCountDown(int TimeSeconds);// 0x215c460
	void AddWeaponKillTimes(int WeaponId, int Num);// 0x215c3a4
	void AddWeaponDamage(int WeaponId, float Damage);// 0x215c2e8
	void AddWeaponChooseTimes(int WeaponId, int Num);// 0x215c22c
	void AddVehicleWeaponDamage(int VehicleType, float Damage);// 0x215c170
	void AddVehicleKillTimes(int VehicleType, int Num);// 0x215c0b4
	void AddVehicleHitDamage(int VehicleType, float Damage);// 0x215bff8
	void AddVehicleDeadTimes(int VehicleType, int Num);// 0x215bf3c
	void AddVehicleChooseTimes(int VehicleType, int Num);// 0x215be80
	void AddTeamBeDestoryedNum(int TeamID, int AddDestoryCount);// 0x215bdc4
	void AddMedalForPlayer(STExtraBaseCharacter* Killer, FString MedalMessage);// 0x215bcc4
	void AddCooperationBuffToTeam(int TeamID);// 0x215bc4c
	void AddCampKillNum(int CampID, int Num);// 0x215bb90

--------------------------------
Class: VehicleBattleResultData
	VehiclePlayerBattleResultData[] playerList;//[Offset: 0x0, Size: 12]
	VehicleCampKills[] VehicleCampKills;//[Offset: 0xc, Size: 12]
	int WinCampID;//[Offset: 0x18, Size: 4]
	float GamePlayTime;//[Offset: 0x1c, Size: 4]
	int MatchPointNum;//[Offset: 0x20, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x24, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x28, Size: 4]
	VehicleBattleVehicleStatiscs[] VehicleStaticsList;//[Offset: 0x2c, Size: 12]
	VehicleBattleWeaponStatiscs[] WeaponStatiscsList;//[Offset: 0x38, Size: 12]
	int VehicleStuckResetTimes;//[Offset: 0x44, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x48, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x4c, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x50, Size: 4]

--------------------------------
Class: VehiclePlayerBattleResultData
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	int TeamID;//[Offset: 0x18, Size: 4]
	int CampID;//[Offset: 0x1c, Size: 4]
	int Score;//[Offset: 0x20, Size: 4]
	int Distance;//[Offset: 0x24, Size: 4]
	int KillNum;//[Offset: 0x28, Size: 4]
	int AssistKillNum;//[Offset: 0x2c, Size: 4]
	int DriverKillNum;//[Offset: 0x30, Size: 4]
	int ShooterKillNum;//[Offset: 0x34, Size: 4]
	int BeKillNum;//[Offset: 0x38, Size: 4]
	int TeamKillNum;//[Offset: 0x3c, Size: 4]
	int GetItemNum;//[Offset: 0x40, Size: 4]
	int OpenTreasureNum;//[Offset: 0x44, Size: 4]
	int ShootTreasureNum;//[Offset: 0x48, Size: 4]
	UseItemFlow[] UseItemFlow;//[Offset: 0x4c, Size: 12]
	int StrikeKillVehicleNum;//[Offset: 0x58, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x5c, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x60, Size: 4]
	float CauseDamage;//[Offset: 0x64, Size: 4]
	int GemStoneCount;//[Offset: 0x68, Size: 4]
	bool HasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float FinishedTime;//[Offset: 0x70, Size: 4]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int VehicleId;//[Offset: 0x78, Size: 4]
	int VehicleShapeType;//[Offset: 0x7c, Size: 4]
	float ExitPlayerPlayTime;//[Offset: 0x80, Size: 4]

--------------------------------
Class: VehicleCampKills
	int CampID;//[Offset: 0x0, Size: 4]
	int Kills;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleBattleVehicleStatiscs
	int VehicleId;//[Offset: 0x0, Size: 4]
	int ChooseTimes;//[Offset: 0x4, Size: 4]
	int DeadTimes;//[Offset: 0x8, Size: 4]
	int Kills;//[Offset: 0xc, Size: 4]
	float VehicleWeaponDamage;//[Offset: 0x10, Size: 4]
	float HitDamage;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleBattleWeaponStatiscs
	int WeaponId;//[Offset: 0x0, Size: 4]
	int ChooseTimes;//[Offset: 0x4, Size: 4]
	int TotalDamage;//[Offset: 0x8, Size: 4]
	int Kills;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleGemRoundData
	float RoundTime;//[Offset: 0x0, Size: 4]
	int TreasureNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleWarRankData
	int RoundNo;//[Offset: 0x0, Size: 4]
	int TeamID;//[Offset: 0x4, Size: 4]
	int Distance;//[Offset: 0x8, Size: 4]
	int Score;//[Offset: 0xc, Size: 4]
	int GemStoneNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleWarRouteDetailData
	int TeamID;//[Offset: 0x0, Size: 4]
	int RoundNo;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	bool IsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FinishTime;//[Offset: 0x10, Size: 4]
	Vector ProjectionPoint;//[Offset: 0x14, Size: 12]
	int CompleteLogicCircleNum;//[Offset: 0x20, Size: 4]
	int[] LastRoutePointRecord;//[Offset: 0x24, Size: 12]

--------------------------------
Class: VehicleWarTeamKillData
	int TeamID;//[Offset: 0x0, Size: 4]
	int ContinueKillNum;//[Offset: 0x4, Size: 4]
	int TotalKillNum;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleWarCampGroup
	int CampID;//[Offset: 0x0, Size: 4]
	VehicleWarTeamGroupInfo[] CampGroups;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleWarTeamGroupInfo
	int TeamID;//[Offset: 0x0, Size: 4]
	VehicleWarPlayerState*[] TeamPlayers;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleWarPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	NetVehilceProps NetVehicleProps;//[Offset: 0xfd4, Size: 40]
	delegate OnVehilcePropsChangeDel;//[Offset: 0xffc, Size: 12]
	int GemStoneNum;//[Offset: 0x1008, Size: 4]
	delegate OnPlayerGemStoneNumChangeDelegate;//[Offset: 0x100c, Size: 12]
	int TeamGemStoneNum;//[Offset: 0x1018, Size: 4]
	delegate OnTeamGemStoneNumChangeDelegate;//[Offset: 0x101c, Size: 12]
	int DestoryVehicleCount;//[Offset: 0x1028, Size: 4]
	delegate OnDestoryVehicleCountChangeDelegate;//[Offset: 0x102c, Size: 12]
	int BeDestoryedCount;//[Offset: 0x1038, Size: 4]
	int DriverKillNum;//[Offset: 0x103c, Size: 4]
	int ShooterKillNum;//[Offset: 0x1040, Size: 4]
	int AssistKillNum;//[Offset: 0x1044, Size: 4]
	int ContinueDestoryVehicleCount;//[Offset: 0x1048, Size: 4]
	delegate OnContinueDestoryVehicleCountChangeDelegate;//[Offset: 0x104c, Size: 12]
	STExtraVehicleWarVehicle* CurAttackSignTarget;//[Offset: 0x1058, Size: 4]
	STExtraVehicleWarVehicle* CurAttackTarget;//[Offset: 0x105c, Size: 8]
	float CurCumulativeDamage;//[Offset: 0x1064, Size: 4]
	float CumulativeDamageForSign;//[Offset: 0x1068, Size: 4]
	float CurCumulativeDamageTime;//[Offset: 0x106c, Size: 4]
	float CumulativeDamageCalcuTime;//[Offset: 0x1070, Size: 4]
	float SignExistTime;//[Offset: 0x1074, Size: 4]
	float SignStartTime;//[Offset: 0x1078, Size: 4]
	delegate OnCurAttackSignTargetChangeDelegate;//[Offset: 0x107c, Size: 12]
	int OpenTreasureNum;//[Offset: 0x1088, Size: 4]
	int ShootTreasureNum;//[Offset: 0x108c, Size: 4]
	int StrikeKillVehicleNum;//[Offset: 0x1090, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x1094, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x1098, Size: 4]
	float TotalCauseDamage;//[Offset: 0x109c, Size: 4]
	int ClientTotalDamage;//[Offset: 0x10a0, Size: 4]
	delegate OnClientTotalDamageChangeDelegate;//[Offset: 0x10a4, Size: 12]
	delegate OnBeDestoryedCountChangeDelegate;//[Offset: 0x10b0, Size: 12]
	bool PlayerIsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	delegate OnPlayerDriverStateChanged;//[Offset: 0x10c0, Size: 12]
	float VehicleSpawnServerTime;//[Offset: 0x10cc, Size: 4]
	bool PlayerHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	float VehicleMoveRecordInstance;//[Offset: 0x10d4, Size: 4]
	int VehicleMoveFlowCount;//[Offset: 0x10dc, Size: 4]
	int VehicleN2oSkillId;//[Offset: 0x10e0, Size: 4]
	int VehicleCarPetSkillId;//[Offset: 0x10e4, Size: 4]
	bool CanShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1108, Size: 1]
	bool FinishedShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1109, Size: 1]
	bool CanShowUseItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110a, Size: 1]
	bool CanShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110b, Size: 1]
	bool FinishedShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110c, Size: 1]
	bool CanShowEyesGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110d, Size: 1]
	bool CanShowBuffGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110e, Size: 1]
	bool CanShowAnimFrameGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110f, Size: 1]
	float PlayerExitTime;//[Offset: 0x1110, Size: 4]
	bool PlayerHasExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	void SetVehicleSpawnServerTime(float STime);// 0x2160c4c
	void OnRep_VehicleProps();// 0x2160c38
	void OnRep_TeamGemStoneNum();// 0x2160c24
	void OnRep_PlayerIsDriver();// 0x2160c10
	void OnRep_GemStoneNum();// 0x2160bfc
	void OnRep_DestoryVehicleCount();// 0x2160be8
	void OnRep_CurAttackSignTarget();// 0x2160bd4
	void OnRep_ContinueDestoryVehicleCount();// 0x2160bc0
	void OnRep_ClientTotalDamage();// 0x2160bac
	void OnRep_BeDestoryedCount();// 0x2160b98
	int GetVehiclePropsItem(int Index);// 0x2160b18
	void DispatchPlayerExitEvent();// 0x20a6178

--------------------------------
Class: NetVehilceProps
	int ItemNum;//[Offset: 0x0, Size: 4]
	ItemDefineID[] PropsItem;//[Offset: 0x4, Size: 12]
	VehicleWarEquipItem[] ChooseEquip;//[Offset: 0x10, Size: 12]
	int PlayerChoose;//[Offset: 0x1c, Size: 4]
	int FirstWeaponID;//[Offset: 0x20, Size: 4]
	int SecondWeaponID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleWarEquipItem
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWarVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	VehicleWarLockData VehicleWarLockData;//[Offset: 0x1108, Size: 8]
	byte CurVehicleWarBeLockedState;//[Offset: 0x1110, Size: 1]
	delegate OnVehicleWarBeLockedStateChangedDelegate;//[Offset: 0x1114, Size: 12]
	delegate OnVehicleWarKillInfoDelegate;//[Offset: 0x1120, Size: 12]
	VehicleWarVehicleReceiveDamageRecord[] VehicleWarVehicleReceiveDamageRecordArray;//[Offset: 0x112c, Size: 12]
	delegate ForceShowVehicleHPBarDelegate;//[Offset: 0x1138, Size: 12]
	float DamageRecordExitTime;//[Offset: 0x1144, Size: 4]
	float TickVehicleTireFrictionInterval;//[Offset: 0x1148, Size: 4]
	float DefaultTurnOverBroadcastTime;//[Offset: 0x1150, Size: 4]
	float CurTurnOverBroadcastTime;//[Offset: 0x1154, Size: 4]
	delegate OnVehicleWarVehicleTurnOver;//[Offset: 0x1158, Size: 12]
	float MinTurnOverDegree;//[Offset: 0x1164, Size: 4]
	float CheckBlockInterval;//[Offset: 0x1168, Size: 4]
	float BlockResetInterval;//[Offset: 0x1170, Size: 4]
	float MaxBlockVelocity;//[Offset: 0x1174, Size: 4]
	float MaxBlockNotInAirWheelNums;//[Offset: 0x1178, Size: 4]
	int MaxCheckTurnOverCount;//[Offset: 0x1180, Size: 4]
	int MaxCheckBlockCount;//[Offset: 0x1188, Size: 4]
	delegate OnVehicleWarVehicleBlockedDelegate;//[Offset: 0x1190, Size: 12]
	bool bOpenShieldHitProtectEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c, Size: 1]
	int ShieldSkillID;//[Offset: 0x11a0, Size: 4]
	SoftObjectPath ShieldHitProtectEffectPath;//[Offset: 0x11a8, Size: 24]
	bool bTeammateVehicleDamageFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 1]
	bool bEnableActivePhysicsWhenChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c1, Size: 1]
	PhysicsAsset* SimplePhysicsAsset;//[Offset: 0x11c4, Size: 4]
	bool bEnableCheckBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 1]
	void UpdateOwnerLockedState();// 0x20d4700
	void TickCheckBlockAndAutoTurn();// 0x20d46ec
	void StartAllowAvatarOutline();// 0x20d46d8
	void SetVehicleMass(float NewMass, bool bAddToCurrent);// 0x20d4614
	void ServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator InRot);// 0x20d4550
	void Server_ChangeLockState(byte InState, Actor* CurLockTarget);// 0x20d4454
	void RPCServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator Rot);// 0x20d4350
	void ReqResetBlockPosition();// 0x20d42f4
	void RemoveOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x29fa2f4
	void ProcessAvatarOutline();// 0x20cd074
	void OnVehicleWarKillInfoDelegate__DelegateSignature(out const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x29fa2f4
	void OnVehicleWarBeLockedStateChangedDelegate__DelegateSignature(byte VehicleWarBeLockedState);// 0x29fa2f4
	void OnRep_VehicleWarVehicleReceiveDamageRecordArray();// 0x20d42e0
	void OnRep_VehicleWarLockData();// 0x20d42cc
	bool IsVehicleTurnOver();// 0x20d42a4
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x20cbb60
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x20cba58
	void ForceShowVehicleHPBarDelegate__DelegateSignature(bool bNewShow);// 0x29fa2f4
	void DelayNotifyClientVehicleWarRespawnCallback();// 0x20d4290
	void CheckOnePlayerInFighting();// 0x20d427c
	void ChangeToSimplePhysicsAsset();// 0x20d4268
	void BroadCastFatalDamage(const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x20d4168
	void BPTickCheckBlockAndAutoTurn();// 0x29fa2f4
	void AddOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x29fa2f4

--------------------------------
Class: VehicleWarLockData
	byte LockState;//[Offset: 0x0, Size: 1]
	Actor* LockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleWarVehicleReceiveDamageRecord
	int DamageFromTeamID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleWarKillInfoData
	int DamageType;//[Offset: 0x0, Size: 4]
	int AdditionalParam;//[Offset: 0x4, Size: 4]
	FString CauserName;//[Offset: 0x8, Size: 12]
	FString CauserNation;//[Offset: 0x14, Size: 12]
	FString VictimName;//[Offset: 0x20, Size: 12]
	FString VictimNation;//[Offset: 0x2c, Size: 12]
	FString KillerIconURL;//[Offset: 0x38, Size: 12]
	int KillerPlayerLevel;//[Offset: 0x44, Size: 4]
	int KillerAvatarBoxId;//[Offset: 0x48, Size: 4]
	float TotalDamage;//[Offset: 0x4c, Size: 4]
	bool IsCooperationKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int KillerTeamId;//[Offset: 0x54, Size: 4]
	int VictimTeamID;//[Offset: 0x58, Size: 4]
	float ThisDamage;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: VehicleWarGemMatchState
	enum GemMatchState;//[Offset: 0x0, Size: 1]
	int CampID;//[Offset: 0x4, Size: 4]
	float CampWinServerTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TeamMedalTotalKillData
	<int> TotalKillData;//[Offset: 0x0, Size: 60]

--------------------------------
Class: TeamMedalBeAttackedData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VehicleBeAttackMapData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: AutoChangeSeatData
	int TeamID;//[Offset: 0x0, Size: 4]
	bool bCanAutoChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: PVEInfectionPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float CurExp;//[Offset: 0x1014, Size: 4]
	int CurLevel;//[Offset: 0x101c, Size: 4]
	int MainSkillId;//[Offset: 0x1020, Size: 4]
	bool IsUseMainSkillInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1024, Size: 1]
	int CurAssistLevel;//[Offset: 0x1028, Size: 4]
	delegate OnPlayerLevelChanged;//[Offset: 0x102c, Size: 12]
	delegate OnPlayerExpChanged;//[Offset: 0x1038, Size: 12]
	int SelectCombieCount;//[Offset: 0x1054, Size: 4]
	delegate InfectionClientOnRespawn;//[Offset: 0x1058, Size: 12]
	delegate InfectionClientOnBeKilled;//[Offset: 0x1064, Size: 12]
	bool bSwitchTeammateStateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 1]
	enum PawnSubType;//[Offset: 0x1071, Size: 1]
	int ShowKillNum;//[Offset: 0x1074, Size: 4]
	delegate OnInfectionKillNumChanged;//[Offset: 0x1078, Size: 12]
	enum RespawnBeforeType;//[Offset: 0x1084, Size: 1]
	float PlayerRoundStartTime;//[Offset: 0x1088, Size: 4]
	float PlayerMoveDistance;//[Offset: 0x108c, Size: 4]
	float PlayerMoveTime;//[Offset: 0x1090, Size: 4]
	float[] PlayerMoveSpeedArray;//[Offset: 0x1094, Size: 12]
	int PlayerJumpHeightMax;//[Offset: 0x10a0, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x10a4, Size: 4]
	uint32 RoundStartTime;//[Offset: 0x10a8, Size: 4]
	int8 RoleTypeStart;//[Offset: 0x10ac, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x10ad, Size: 1]
	int RoleTypeSwitchTime;//[Offset: 0x10b0, Size: 4]
	float AbsorbTime;//[Offset: 0x10b4, Size: 4]
	bool IsInAbsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool IsInfectionDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	bool IsClientChangeDeathPosi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ba, Size: 1]
	void StartMainSkill();// 0x1f86a7c
	void SetPawnSubType(enum SubType);// 0x1f86a04
	void ServerRPC_ClientStartRound(int64 ClientRoundStartTime);// 0x1f8694c
	void ServerRPC_ActorGuidTrigger_TLog(int GuidID);// 0x1f86898
	void ServerRPC_ActorGuidClose_TLog(int GuidID, bool bArriveClose);// 0x1f86788
	void RespawnBufferReplay();// 0x1f86774
	void ResetOnRoundStart();// 0x1f86760
	void OnRep_ShowKillNum();// 0x1f8674c
	void OnRep_PawnSubType();// 0x1f86738
	void OnRep_CurLevel();// 0x1f86724
	void OnRep_CurExp();// 0x1f86710
	void OnRep_CurAssistLevel();// 0x1f866fc
	void OnNewRound();// 0x1f866e0
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x1f8661c
	void OnClientAddBuff(int BuffID, int SkillID);// 0x1f86558
	bool IsPlayer();// 0x1f86530
	bool IsCanUseMainSkill();// 0x1f86508
	int GetShowKillNum();// 0x1f864e0
	enum GetMainType();// 0x1f864b8
	float GetMainSkillInterval();// 0x1f86490
	int GetMainSkillId();// 0x1f86468
	float GetMainSkillCD();// 0x1f86440
	float GetExpPercent();// 0x1f86418
	enum ConvertSubTypeToMainType(enum SubType);// 0x1f7e40c
	void ClientRPC_OnRevengerSpawn();// 0x1f863fc
	void ClientRPC_OnRespawnInfectionPawn(enum PrevType, enum NewType);// 0x1f86338
	void ClientRPC_OnKilled(Pawn* VictimPawn, const DamageType* DamageType, bool bIsRoundEnd);// 0x1f86228
	void ClientRPC_OnGeneraterMaternalZombies(enum CurSubType);// 0x1f861a8
	void ClientRPC_OnBeKilled(Pawn* KillerPawn, bool bIsRoundEnd);// 0x1f860dc
	void ClientRPC_BroadcastInfectionLevelUp(int Level);// 0x1f8605c
	void ClientRoundStart();// 0x1f86048
	void AddShowKillNum(int AddNum);// 0x1f85fd0
	void AddExpOnNextFrame();// 0x1f85fbc
	void AddCurLevelUpBuffCallback();// 0x1f85fa8

--------------------------------
Class: PVEInfectionGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int RespawnInvincibleTime;//[Offset: 0xdcc, Size: 4]
	delegate OnInfectionTeamMarkGlobalNotifyDelegate;//[Offset: 0xdd0, Size: 12]
	delegate GameStart;//[Offset: 0xddc, Size: 12]
	delegate GameEnd;//[Offset: 0xde8, Size: 12]
	delegate RoundStart;//[Offset: 0xdf4, Size: 12]
	delegate RoundEnd;//[Offset: 0xe00, Size: 12]
	delegate RoundCountDownEnd;//[Offset: 0xe0c, Size: 12]
	delegate OnPlayerPawnActive;//[Offset: 0xe18, Size: 12]
	delegate OnInfectionSelfChangeType;//[Offset: 0xe24, Size: 12]
	delegate OnPlayerUseSkill;//[Offset: 0xe30, Size: 12]
	delegate OnInfectionPlayerAssistNumChanged;//[Offset: 0xe3c, Size: 12]
	InfectionGainExpInfo PlayerGainExpConfig;//[Offset: 0xe48, Size: 28]
	InfectionGainExpInfo ZombieGainExpConfig;//[Offset: 0xe64, Size: 28]
	<int,InfectionRoleLevelMap> RoleLevelConfig;//[Offset: 0xe80, Size: 60]
	int CurRoundNum;//[Offset: 0xebc, Size: 4]
	enum CurRoundState;//[Offset: 0xec0, Size: 1]
	enum CurInfectionBGMStateType;//[Offset: 0xec1, Size: 1]
	int MaxRoundNum;//[Offset: 0xec4, Size: 4]
	delegate OnCurRoundNumChanged;//[Offset: 0xec8, Size: 12]
	float BeforeRoundTime;//[Offset: 0xed4, Size: 4]
	FString RoleInfoTablePath;//[Offset: 0xed8, Size: 12]
	FString ScoreInfoTablePath;//[Offset: 0xee4, Size: 12]
	int MaxPersonScore;//[Offset: 0xef0, Size: 4]
	int MaxMonsterScore;//[Offset: 0xef4, Size: 4]
	float RoundEndWorldTimeSeconds;//[Offset: 0xef8, Size: 4]
	int RoundPlayerNum;//[Offset: 0xefc, Size: 4]
	int RoundZombieNum;//[Offset: 0xf00, Size: 4]
	int RoundAllPlayerNum;//[Offset: 0xf04, Size: 4]
	int RoundAllZombieNum;//[Offset: 0xf08, Size: 4]
	int PersonWinRoundNum;//[Offset: 0xf0c, Size: 4]
	int ZombieWinRoundNum;//[Offset: 0xf10, Size: 4]
	int KillZombieNum;//[Offset: 0xf14, Size: 4]
	int InfectedHumanNum;//[Offset: 0xf18, Size: 4]
	int BecomeHeroNum;//[Offset: 0xf1c, Size: 4]
	int CurRoundWinRole;//[Offset: 0xf20, Size: 4]
	float CurRoundStartTime;//[Offset: 0xf24, Size: 4]
	delegate ShowRoundResultDelegate;//[Offset: 0xf28, Size: 12]
	InfectionRoundResultData CurRoundResultData;//[Offset: 0xf38, Size: 248]
	int CurRoundResultShowTime;//[Offset: 0x1030, Size: 4]
	delegate OnInfectionKillInfoChanged;//[Offset: 0x1034, Size: 12]
	<uint32,InfectionPlayerScoreData> InfectionPlayerStateDataMap;//[Offset: 0x1040, Size: 60]
	<int,InfectionRoundTlogCountData> InfectionRoundTlogCountDataMap;//[Offset: 0x107c, Size: 60]
	<int,InfectionRoleTableRow> RoleTableMap;//[Offset: 0x10b8, Size: 60]
	delegate RoundPlayerNumChanged;//[Offset: 0x10f4, Size: 12]
	delegate RoundZombieNumChanged;//[Offset: 0x1100, Size: 12]
	<FString,InfectionScoreTableRow> ScoreTableMap;//[Offset: 0x110c, Size: 60]
	delegate ShowInfectionKillTipsDelegate;//[Offset: 0x1148, Size: 12]
	delegate InfectionRoundStateChanged;//[Offset: 0x1154, Size: 12]
	delegate InfectionBGMStateChanged;//[Offset: 0x1160, Size: 12]
	int HaveShowRoundResultNum;//[Offset: 0x116c, Size: 4]
	void ShowRoundResult(InfectionRoundResultData RoundData, int showTime);// 0x1f82778
	void ShowInfectionKillTips__DelegateSignature(FString KillerName, FString VictimName, FString killerKey, FString victimKey, enum killerSubType, enum victimSubType);// 0x29fa2f4
	void SetRoundZombieNum(int Num);// 0x1f82700
	void SetRoundPlayerNum(int Num);// 0x1f82688
	void ServerOnRoundStart(int RoundNum);// 0x1f82610
	void ServerOnRoundEnd(int RoundNum);// 0x1f82598
	void OnUseSpringJump(STExtraPlayerCharacter* Character, int SpringID);// 0x1f824dc
	void OnRoundZombieNumChange();// 0x1f824c8
	void OnRoundPlayerNumChange();// 0x1f824b4
	void OnRep_RoundZombieNumChange();// 0x1f824a0
	void OnRep_RoundStateChanged();// 0x1f8248c
	void OnRep_RoundPlayerNumChange();// 0x1f82478
	void OnRep_ReadyStateTime();// 0x1f37be8
	void OnRep_InfectionBGMStateChanged();// 0x1f82464
	void OnRep_CurRoundNum();// 0x1f82450
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x1f8238c
	void OnKillInfoChanged(out const InfectionContinuousKillInfo Info);// 0x1f822b4
	void OnKilledTlog(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x1f82164
	void OnKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x1f82014
	void OnFinishRestartPlayer(Controller* NewPlayer, out const Rotator StartRotation);// 0x1f81f4c
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x1f81e88
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x1f81d80
	void MulticastRPC_InfectionKillInfoChanged(const InfectionContinuousKillInfo Info);// 0x1f81cb4
	void MulticastRPC_InfectionCharacterList(const STExtraBaseCharacter*[] CharacterList);// 0x1f81bf0
	void MulticastRPC_BroadcastTeamMarkNotify(const PVEInfectionPlayerState*[] PlayerStateArray);// 0x1f81b2c
	bool IsVisibleType(enum OriginType, enum TargetType);// 0x1f81a68
	void InitScoreTable();// 0x1f81a54
	void InitRoleTable();// 0x1f81a40
	FString GetSkillIcon(enum SubType);// 0x1f81938
	InfectionRoundResultPlayerShowData GetRoundResultByPlayerKey(FString PlayerKey);// 0x1f8168c
	int GetRoundPlayerNum();// 0x1f81664
	InfectionPlayerScoreData GetPlayerScoreData(uint32 PlayerKey);// 0x1f815dc
	InfectionRoundScoreData GetPlayerRoundScoreData(uint32 PlayerKey, int RoundNum);// 0x1f8150c
	float GetLeftRoundTime();// 0x1f814e4
	InfectionRoleTableRow GetInfectionRoleInfo(enum FindPawnType);// 0x1f81438
	enum GetCurRoundWinCamp();// 0x1f81410
	InfectionRoundTlogCountData GetCurRoundTlogCountData();// 0x1f813e0
	STExtraBaseCharacter* GetCharacterByPlayerKey(FString PlayerKey);// 0x1f81280
	<STExtraBaseCharacter*> GetAllCharacterSetWithoutSelf();// 0x1f81100
	<STExtraBaseCharacter*> GetAllCharacterSet();// 0x1f80f80
	STExtraBaseCharacter*[] GetAllCharacter();// 0x1f80eb8
	enum ConvertSubTypeToMainType(enum SubType);// 0x1f7e40c
	STExtraBaseCharacter* ClientGetCharacterByPlayerKey(FString PlayerKey);// 0x1f80d58
	void ClientBroadcast_InfectionShowKilledTip(FString KillerName, FString VictimName, uint32 killerKey, uint32 victimKey, enum killerSubType, enum victimSubType);// 0x1f80afc
	void CheckInitMatrixEffect(PlayerState* PState);// 0x1f80a84
	void BroadcastClientOnRoundStart(int RoundNum);// 0x1e31dd8
	void BroadcastClientOnRoundEnd(int RoundNum);// 0x1f80a04
	void BeginShowRoundResult(int RoundNum, int showTime);// 0x1f80948
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x1f80884
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x1f807c0
	void AddRoundWinScore();// 0x1f807ac
	void AddRevengerPlayerKillWinTimes(uint32 PlayerKey, int Times);// 0x1f806f0
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x1f804b8
	void AddDamageToRevengerPlayer(uint32 PlayerKey, int Damage);// 0x1f803fc
	void AddDamageToMonster(uint32 PlayerKey, int Damage);// 0x1f80340
	void AddChooseZombieTimes(uint32 PlayerKey, enum SubType, int Times);// 0x1f80240
	void AddBeRevengerPlayerTimes(uint32 PlayerKey, int Times);// 0x1f80184
	void AddBePersonWinTimes(uint32 PlayerKey, int Times);// 0x1f800c8
	void AddBeMonsterWinTimes(uint32 PlayerKey, int Times);// 0x1f8000c
	void AddBeMatrixMonsterTimes(uint32 PlayerKey, int Times);// 0x1f7ff50

--------------------------------
Class: InfectionGainExpInfo
	int KillExp;//[Offset: 0x0, Size: 4]
	int AssistExp;//[Offset: 0x4, Size: 4]
	float AssistExpAcceptRange;//[Offset: 0x8, Size: 4]
	float DamageExpRate;//[Offset: 0xc, Size: 4]
	float HealthExpRate;//[Offset: 0x10, Size: 4]
	float SecondExp;//[Offset: 0x14, Size: 4]
	float GainExpInterval;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionRoleLevelMap
	<int,InfectionRoleLevelInfo> LevelMap;//[Offset: 0x0, Size: 60]
	int MaxLevel;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: InfectionRoleLevelInfo
	int Exp;//[Offset: 0x0, Size: 4]
	int BuffID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InfectionRoundResultData
	int RoundNum;//[Offset: 0x0, Size: 4]
	enum WinType;//[Offset: 0x4, Size: 1]
	InfectionRoundResultPlayerShowData BestPerson;//[Offset: 0x8, Size: 112]
	InfectionRoundResultPlayerShowData BestMonster;//[Offset: 0x78, Size: 112]
	InfectionRoundResultPlayerShowData[] AllDataArray;//[Offset: 0xe8, Size: 12]

--------------------------------
Class: InfectionRoundResultPlayerShowData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	int TeamID;//[Offset: 0x10, Size: 4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x18, Size: 64]
	InfectionShowRoundScoreData RoundScoreData;//[Offset: 0x58, Size: 20]

--------------------------------
Class: InfectionPlayerInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	FString UIDString;//[Offset: 0x8, Size: 12]
	FString PlayerName;//[Offset: 0x14, Size: 12]
	FString iconUrl;//[Offset: 0x20, Size: 12]
	byte gender;//[Offset: 0x2c, Size: 1]
	byte PlatformGender;//[Offset: 0x2d, Size: 1]
	int PlayerLevel;//[Offset: 0x30, Size: 4]
	int SegmentLevel;//[Offset: 0x34, Size: 4]
	int AvatarBoxId;//[Offset: 0x38, Size: 4]

--------------------------------
Class: InfectionShowRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 4]
	int MonsterScore;//[Offset: 0x4, Size: 4]
	int PersonScore;//[Offset: 0x8, Size: 4]
	int KillMonsters;//[Offset: 0xc, Size: 4]
	int KillPersons;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InfectionPlayerScoreData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	int TeamID;//[Offset: 0x10, Size: 4]
	float PlayerEnterGameTime;//[Offset: 0x14, Size: 4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x18, Size: 64]
	<int,InfectionRoundScoreData> RoundScoreData;//[Offset: 0x58, Size: 60]

--------------------------------
Class: InfectionRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 4]
	float MonsterScore;//[Offset: 0x4, Size: 4]
	float PersonScore;//[Offset: 0x8, Size: 4]
	int KillMonsters;//[Offset: 0xc, Size: 4]
	int KillPersons;//[Offset: 0x10, Size: 4]
	float RoundDamage;//[Offset: 0x14, Size: 4]
	int BeMatrixMonsterTimes;//[Offset: 0x18, Size: 4]
	int BeRevengerPlayerTimes;//[Offset: 0x1c, Size: 4]
	uint32 Headshot4Avenger;//[Offset: 0x20, Size: 4]
	int RevengerPlayerKillWinTimes;//[Offset: 0x24, Size: 4]
	int BeMonsterWinTimes;//[Offset: 0x28, Size: 4]
	int BePersonWinTimes;//[Offset: 0x2c, Size: 4]
	int UseSpringJumpTimes;//[Offset: 0x30, Size: 4]
	int UseEnhancerTimes;//[Offset: 0x34, Size: 4]
	int DamageToMonster;//[Offset: 0x38, Size: 4]
	int DamageToRevengerPlayer;//[Offset: 0x3c, Size: 4]
	int ChooseZombieFirstTimes;//[Offset: 0x40, Size: 4]
	int ChooseZombieSecondTimes;//[Offset: 0x44, Size: 4]
	int ChooseZombieThirdTimes;//[Offset: 0x48, Size: 4]
	uint32 PlayerKilled;//[Offset: 0x4c, Size: 4]
	uint32 PlayerHurtCount;//[Offset: 0x50, Size: 4]
	uint32 PlayerDamageCount;//[Offset: 0x54, Size: 4]
	uint32 HeadshotCounts;//[Offset: 0x58, Size: 4]
	uint32 GunKillingTimes;//[Offset: 0x5c, Size: 4]
	int8 RoleType;//[Offset: 0x60, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x61, Size: 1]
	uint32 RoleTypeSwitchTime;//[Offset: 0x64, Size: 4]
	int PlayerJumpHeightMax;//[Offset: 0x68, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x6c, Size: 4]
	uint32 PlayerMoveDistance;//[Offset: 0x70, Size: 4]
	uint32 PlayerMoveTime;//[Offset: 0x74, Size: 4]
	int PlayerMoveSpeedAvg;//[Offset: 0x78, Size: 4]

--------------------------------
Class: InfectionRoundTlogCountData
	float RoundStartTime;//[Offset: 0x0, Size: 4]
	float RoundEndTime;//[Offset: 0x4, Size: 4]
	int WinCamp;//[Offset: 0x8, Size: 4]
	bool bSpawnRevenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float RevengerSpawmTime;//[Offset: 0x10, Size: 4]
	int RevengerDoSkillCount;//[Offset: 0x14, Size: 4]
	int ZombieReviveCount;//[Offset: 0x18, Size: 4]
	int NormalZombieDoSkillCount;//[Offset: 0x1c, Size: 4]
	int InvisibleZombieDoSkillCount;//[Offset: 0x20, Size: 4]
	int ThrowerZombieDoSkillCount;//[Offset: 0x24, Size: 4]
	int MotherZombieDoSkillCount;//[Offset: 0x28, Size: 4]
	<int,InfectionRoundTlogGuidData> GuidCount;//[Offset: 0x2c, Size: 60]
	InfectionPlayerDeadTlogData[] DeadList;//[Offset: 0x68, Size: 12]
	<int,int> ZombieLevelNumMap;//[Offset: 0x74, Size: 60]
	int[] EnhancerUserList;//[Offset: 0xb0, Size: 12]
	<int,InfectionSpringUseData> SpringUseMap;//[Offset: 0xbc, Size: 60]

--------------------------------
Class: InfectionRoundTlogGuidData
	int GuidTriggerCount;//[Offset: 0x0, Size: 4]
	int GuidHandCloseCount;//[Offset: 0x4, Size: 4]
	int GuidArriveCloseCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InfectionPlayerDeadTlogData
	int DeadPawnSubType;//[Offset: 0x0, Size: 4]
	float DeadPosiX;//[Offset: 0x4, Size: 4]
	float DeadPosiY;//[Offset: 0x8, Size: 4]
	float DeadPosiZ;//[Offset: 0xc, Size: 4]
	int KillPawnSubType;//[Offset: 0x10, Size: 4]
	float KillPosiX;//[Offset: 0x14, Size: 4]
	float KillPosiY;//[Offset: 0x18, Size: 4]
	float KillPosiZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InfectionSpringUseData
	int SpringTag;//[Offset: 0x0, Size: 4]
	int NormalPlayerUseTimes;//[Offset: 0x4, Size: 4]
	int AvengerPlayerUseTimes;//[Offset: 0x8, Size: 4]
	int MotherZombieUseTimes;//[Offset: 0xc, Size: 4]
	int NormalZombieUseTimes;//[Offset: 0x10, Size: 4]
	int InvisibleZombieUseTimes;//[Offset: 0x14, Size: 4]
	int ThrowerZombieUseTimes;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionRoleTableRow
	int ID;//[Offset: 0x0, Size: 4]
	FString RoleName;//[Offset: 0x4, Size: 12]
	int DieExchange;//[Offset: 0x10, Size: 4]
	int MatrixEffect;//[Offset: 0x14, Size: 4]
	int BornChoose;//[Offset: 0x18, Size: 4]
	FString WeIcon;//[Offset: 0x1c, Size: 12]
	FString EnemyIcon;//[Offset: 0x28, Size: 12]
	enum[] VisibleRange;//[Offset: 0x34, Size: 12]
	int MainSkillId;//[Offset: 0x40, Size: 4]
	int[] BornSkillList;//[Offset: 0x44, Size: 12]
	FString SkillIcon;//[Offset: 0x50, Size: 12]
	FString SkillCDIcon;//[Offset: 0x5c, Size: 12]
	FString SkillName;//[Offset: 0x68, Size: 12]
	FString SkillDetail;//[Offset: 0x74, Size: 12]
	float SkillCD;//[Offset: 0x80, Size: 4]
	FString HeroIcon;//[Offset: 0x84, Size: 12]

--------------------------------
Class: InfectionScoreTableRow
	int ID;//[Offset: 0x0, Size: 4]
	int Identity;//[Offset: 0x4, Size: 4]
	FString Action;//[Offset: 0x8, Size: 12]
	int param1;//[Offset: 0x14, Size: 4]
	int Score;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionContinuousKillInfo
	enum PawnType;//[Offset: 0x0, Size: 1]
	int KillNumber;//[Offset: 0x4, Size: 4]
	FString KillerName;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_STRUCT_InfectModeMsgIDCfg_type
	int FlagType_0_72B3F500739E321A0A23CC9D077EF635;//[Offset: 0x0, Size: 4]
	FString TurnplateChatIDList_1_096F880020F397FC54CCF31403E9DA74;//[Offset: 0x4, Size: 12]
	FString MenuChatIDList_2_3D047D80224763B807E924800784F994;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BP_STRUCT_FlagIDCfg_type
	FString MinDist_6_0B46994033686B57353ADBF500714494;//[Offset: 0x0, Size: 12]
	FString ChatIDList_1_4EF37580641F954251E0DAFB019B9714;//[Offset: 0xc, Size: 12]
	int FlagType_2_11577240100B60A917DCD1AD0B460365;//[Offset: 0x18, Size: 4]
	int FlagIndex_3_792107C04BF74D1D091F4261042C7A78;//[Offset: 0x1c, Size: 4]
	FString TraceDist_7_58300C000EE7C4781954B3CD040DA8B4;//[Offset: 0x20, Size: 12]
	int AlternateChatID_5_30B4D68067E6F79C260EA2C400C3E5D4;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 12]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BP_STRUCT_QuickSignCfg_type
	FString AudioPath_15_542FCCC0273B734F1E867B74099F88F8;//[Offset: 0x0, Size: 12]
	FString IconBGPath_16_5BDF54C04BC63EDF39F3D4B505D210D8;//[Offset: 0xc, Size: 12]
	FString IconPath_17_79023280522DA7F41B3040310874D6D8;//[Offset: 0x18, Size: 12]
	FString ID_18_3F8DB04004E99B570550F27B0E37BE54;//[Offset: 0x24, Size: 12]
	int LifeSpan_19_0AFEB18006FB71A602526E5601FD19DE;//[Offset: 0x30, Size: 4]
	int MaxNum_20_73CA82807AF1FB3255FB24340FB7020D;//[Offset: 0x34, Size: 4]
	FString RespondID_21_0E2787006157EE48655D98DC092FB8F4;//[Offset: 0x38, Size: 12]
	FString ScriptParam_22_3C7BC68011D8B81C27E5F03F0C67C40D;//[Offset: 0x44, Size: 12]
	int TextID_23_7A2819807E81ADFC4845A72A0F22CF64;//[Offset: 0x50, Size: 4]
	int SignSubType_24_6FD8044017325E7F589E0E8C0146BF25;//[Offset: 0x54, Size: 4]

--------------------------------
Class: BP_STRUCT_QuickSignTable_type
	int ActorID_0_0D7584803CD8766E275EB40E0304E344;//[Offset: 0x0, Size: 4]
	int Key_1_6896AD40175E4F276C3808C30985A569;//[Offset: 0x4, Size: 4]
	int SignType_2_5FF28FC0324BCF5509666846055BF8B5;//[Offset: 0x8, Size: 4]
	FString VoiceDescription_3_143861807650037E4710F80D0AC5FA9E;//[Offset: 0xc, Size: 12]
	int VoiceID_4_32A883C0154DF9132C2708A709F61C54;//[Offset: 0x18, Size: 4]
	int VoiceType_5_5FCEA900026DBDD257C5818D061F4995;//[Offset: 0x1c, Size: 4]
	int ID_6_318A46400CE7791F40E51D350A985994;//[Offset: 0x20, Size: 4]
	int DescID_7_745EC6000764B6F0688F28A909E60F84;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.ActorComponent.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0xc0, Size: 12]
	MapUIBase* m_pMiniMap;//[Offset: 0xcc, Size: 4]
	MapUIBase* m_pEntireMap;//[Offset: 0xd0, Size: 4]
	int[] CurMarkInstList;//[Offset: 0xd4, Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x158, Size: 12]
	delegate OnMiniMapPointerException;//[Offset: 0x164, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x170, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x174, Size: 4]
	float TickRate_Internal;//[Offset: 0x1a4, Size: 4]
	float TickRate_Callback;//[Offset: 0x1a8, Size: 4]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x1f1d720
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x29fa2f4
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x29fa2f4

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x4, Size: 12]
	FString UIDescription;//[Offset: 0x10, Size: 12]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x1c, Size: 12]
	delegate OnUpdateMark;//[Offset: 0x28, Size: 12]
	delegate OnUpdateMultiMark;//[Offset: 0x34, Size: 12]
	delegate OnRepositionItemOnMap;//[Offset: 0x40, Size: 12]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x4c, Size: 4]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x50, Size: 12]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x5c, Size: 60]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	Vector LevelLandScapeCenterC;//[Offset: 0x9c, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0xa8, Size: 8]
	Image* Image_Inner;//[Offset: 0xb0, Size: 8]
	Image* Image_CarTips;//[Offset: 0xb8, Size: 8]
	Image* Image_AirIcon;//[Offset: 0xc0, Size: 8]
	Image* Image_PassedRoute;//[Offset: 0xc8, Size: 8]
	Image* Image_LineUV;//[Offset: 0xd0, Size: 8]
	CanvasPanel* CanvasPanel_Airline;//[Offset: 0xd8, Size: 4]
	bool bFixedAirlineScaleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0xe0, Size: 12]
	FakeRadiationCircle* InnerCircle;//[Offset: 0xec, Size: 4]
	Border* Border_RingFX;//[Offset: 0xf0, Size: 8]
	Border* Border_FullRing;//[Offset: 0xf8, Size: 8]
	float ImageBlueCircleScale;//[Offset: 0x100, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x104, Size: 216]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x1dc, Size: 216]
	MapDataBase* CurrentMapData;//[Offset: 0x2b4, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x2bc, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x2c4, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x2cc, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x2d8, Size: 4]
	float MapScaleCpp;//[Offset: 0x2dc, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x2e0, Size: 8]
	float MapScalingRadio;//[Offset: 0x2e8, Size: 4]
	delegate OnDrawOrHideAirDropPath;//[Offset: 0x2ec, Size: 12]
	int LocalPlayerIndexC;//[Offset: 0x2f8, Size: 4]
	float MapImageExtentC;//[Offset: 0x2fc, Size: 4]
	float MapWindowExtentC;//[Offset: 0x300, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x308, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x318, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x32c, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x330, Size: 4]
	Vector2D MapAdjustLocation;//[Offset: 0x334, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x33c, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x344, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x34c, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 1]
	int AirDropIndex;//[Offset: 0x358, Size: 4]
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x1e954c4
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x1f1b34c
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x1f1b1fc
	void UpdateLeftRouteLengthC();// 0x1dec2a0
	void UpdateLastDriveVehicleC();// 0x1f1b1e8
	void UpdateAirIconC();// 0x1f1b1d4
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x1e953cc
	bool TickInnerCircleC();// 0x1e906d4
	void TickCircleC();// 0x1f1b1c0
	void SetupUIMarkRoot();// 0x1f1b1ac
	void RepositionMapMultiMarkC(int PlayerIndex, Vector2D CurSize);// 0x1f1b0f8
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x1f1aff8
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x1f1af88
	void ReCalMapInfoC();// 0x1f1af74
	void OnUpdateUIMarks();// 0x1f1af58
	void OnPaint(PaintContext InContext);// 0x1f1aec4
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x1e95308
	void HideAllMapMarkC();// 0x1f1aeb0
	World* GetWorldInternal();// 0x1f1ae88
	float GetLevelToMapScale();// 0x1e952d8
	void DrawOrHideAirDropPath();// 0x1f1ae74

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x3657150
	bool GetDontPaintWhenChildEmpty();// 0x3657128
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x36570a8

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	void SetZOrder(int InZOrder);// 0x3657da0
	void SetSupportNotch(bool InSupportNotch);// 0x3657d20
	void SetSize(Vector2D InSize);// 0x3657cb0
	void SetPosition(Vector2D InPosition);// 0x3657c40
	void SetOffsets(Margin InOffset);// 0x3657bb8
	void SetMinimum(Vector2D InMinimumAnchors);// 0x3657b48
	void SetMaximum(Vector2D InMaximumAnchors);// 0x3657ad8
	void SetLayout(out const AnchorData InLayoutData);// 0x3657a40
	void SetAutoSize(bool InbAutoSize);// 0x36579c0
	void SetAnchors(Anchors InAnchors);// 0x3657938
	void SetAlignment(Vector2D InAlignment);// 0x36578c8
	int GetZOrder();// 0x36578a0
	Vector2D GetSize();// 0x3657860
	Vector2D GetPosition();// 0x3657820
	Margin GetOffsets();// 0x36577dc
	AnchorData GetLayout();// 0x3657788
	bool GetAutoSize();// 0x3657760
	Anchors GetAnchors();// 0x365771c
	Vector2D GetAlignment();// 0x36576dc
	bool GeSupportNotch();// 0x36576b4

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31e, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31f, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x320, Size: 8]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x1f1cc04
	void UpdateMarkSize(float inScale);// 0x1efcd04
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x1f1cab4
	bool ShouldLimitedInMinimap();// 0x1f1ca8c
	void SetWidgetCurRotation(Rotator WorldRot3D);// 0x1f1ca1c
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x1f1c9ac
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x1f1c8b8
	void OnUIBPDestroy();// 0x1de64b0
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x1f1c77c
	void OnEnterEntireMap();// 0x29fa2f4
	Rotator GetWidgetCurWorldRot();// 0x1f1c734
	Vector GetWidgetCurWorldPos();// 0x1f1c6ec

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0xd9, Size: 1]
	byte VerticalAlignment;//[Offset: 0xda, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0xdc, Size: 16]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0xf0, Size: 16]
	Margin Padding;//[Offset: 0x100, Size: 16]
	SlateBrush Background;//[Offset: 0x110, Size: 152]
	delegate BackgroundDelegate;//[Offset: 0x1a8, Size: 16]
	LinearColor BrushColor;//[Offset: 0x1b8, Size: 16]
	delegate BrushColorDelegate;//[Offset: 0x1c8, Size: 16]
	Vector2D DesiredSizeScale;//[Offset: 0x1d8, Size: 8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1e0, Size: 16]
	delegate OnMouseButtonUpEvent;//[Offset: 0x1f0, Size: 16]
	delegate OnMouseMoveEvent;//[Offset: 0x200, Size: 16]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x210, Size: 16]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x36553b0
	void SetPadding(Margin InPadding);// 0x3655328
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x36552b0
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x3655230
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x36551b0
	void SetDesiredSizeScale(Vector2D inScale);// 0x3655140
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x36550c4
	void SetBrushFromTexture(Texture2D* Texture);// 0x365504c
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x365504c
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3654fd4
	void SetBrushColor(LinearColor InBrushColor);// 0x3654f58
	void SetBrush(out const SlateBrush InBrush);// 0x3654df0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3654dc8
	bool GetDontPaintWhenChildEmpty();// 0x3654da0
	bool GetDontPaintWhenAlphaZero();// 0x3654d78

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x365a414
	PanelSlot* GetContentSlot();// 0x365a3ec
	Widget* GetContent();// 0x365a3c4

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x54, Size: 76]
	AirDropPathData AirDropPathData;//[Offset: 0xa0, Size: 56]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x3c, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x44, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x1c, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x28, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x1c, Size: 12]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x28, Size: 12]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x34, Size: 12]
	MapUIBase* CurrentMapUI;//[Offset: 0x40, Size: 4]
	void Init(MapUIBase* INMapUI);// 0x1f1a90c
	World* GetWorldInternal();// 0x1f1a8e4

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	World* GetWorldInternal();// 0x1f1c068

--------------------------------
Class: UIBPAsyncParams

--------------------------------
Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0xbc, Size: 4]
	float CoolDownTime;//[Offset: 0xc0, Size: 4]
	float SocialIslandCoolDownTime;//[Offset: 0xc4, Size: 4]
	float LastChangeWearTime;//[Offset: 0xc8, Size: 4]
	void ServerRequestChangeWear(int Index);// 0x1e4ce58
	bool RequestChangeWearInBattle(int Index);// 0x1e4cdd8
	bool RequestChangeWear(int Index);// 0x1e4cd58
	void RealChangeWearInBattle(int Index);// 0x1e4cce0
	bool IsInCoolDownTime(bool bWithLog);// 0x1e4cc58
	bool IsInBattleState(bool bWithLog);// 0x1e4cbd0
	bool IsChangeWearingOpend();// 0x1e4cba8
	bool IsAllowChangeWearingState(bool bWithLog);// 0x1e4cb20
	float GetCoolDownTime();// 0x1e4caf8
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x1e4c9cc
	bool CheckCanChangeWearing(bool bWithLog);// 0x1e4c944

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x170, Size: 4]
	void SetDefaultNearClipPlane(bool CallFunc_IsIOSPlatform_IsIOS);// 0x29fa2f4
	void IsIOSPlatform(out bool IsIOS, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x29fa2f4
	void SetDefaultRendering();// 0x29fa2f4
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ChangeStreamingLevel(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x29fa2f4
	void InitIncaseReconnect(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void CustomEvent(byte gamePawnEvent);// 0x29fa2f4
	void ReceiveEndPlay(byte EndPlayReason);// 0x29fa2f4
	void UnloadTree();// 0x29fa2f4
	void LoadTree();// 0x29fa2f4
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess3);// 0x29fa2f4

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0xbc, Size: 12]
	float HeightCheck_High;//[Offset: 0xc8, Size: 4]
	float HeightCheck_Mid;//[Offset: 0xcc, Size: 4]
	float HeightCheck_Low;//[Offset: 0xd0, Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0xd8, Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0xdc, Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0xe0, Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0xe4, Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0xe8, Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0xec, Size: 4]
	float HighFastSpeedMoveScreenFactor;//[Offset: 0xf0, Size: 4]
	float HighFastSpeedMoveCullFactor;//[Offset: 0xf4, Size: 4]
	float MidLowFastSpeedScreenFactor;//[Offset: 0xf8, Size: 4]
	float MidLowFastSpeedMoveCullFactor;//[Offset: 0xfc, Size: 4]
	float DelaySecondsForExitNgiht;//[Offset: 0x104, Size: 4]
	float[] LODDistanceScaleAtNight;//[Offset: 0x108, Size: 12]
	float[] ViewDistanceScaleAtNight;//[Offset: 0x118, Size: 12]
	float[] FoliageViewDistanceScaleAtNight;//[Offset: 0x128, Size: 12]
	float[] ScreenSizeCullingFactorAtNight;//[Offset: 0x138, Size: 12]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 1]
	int NearClipLanded;//[Offset: 0x14c, Size: 4]
	int NearClipFlying;//[Offset: 0x150, Size: 4]
	void StarCalcJump();// 0x1ebdd1c
	void SetClearPlaneFast(int Val);// 0x1ebdca4
	void ScaleScreenSizeCulling(byte pawnevent);// 0x1ebdc2c
	void ScaleCullingFastMode(byte pawnevent);// 0x1ebdbb4
	bool ScaleCullingFast(float ScreenSize, float Distance);// 0x1ebdaf0
	void OnChangeViewTarget();// 0x1ebdadc
	bool IsPlayerLandFromTheAir();// 0x1ebdab4
	bool IsPlayerLanded();// 0x1ebda8c
	bool IsPlayerFlying();// 0x1ebda64
	void HeightCheck();// 0x1ebda50
	void GameEventReBirth();// 0x1ebda3c
	void GameEventPlane_KeepNearClipNotChanged();// 0x1ebda28
	void GameEventPlane();// 0x1ebda14
	void GameEventParachute();// 0x1ebda00
	void GameEventLanded();// 0x1ebd9ec
	void GameEventJump();// 0x1ebd9d8
	void GameEventFinished();// 0x1ebd9c4
	void GameEventFighting();// 0x1ebd9b0
	void GameEventExitNight();// 0x1ebd99c
	void GameEventEnterNight();// 0x1ebd988
	void GameEventDie(float currentHP, float ratioHP);// 0x1ebd8cc
	void GameEventBirth();// 0x1ebd8b8
	void ChangeViewtargetToPlane();// 0x1ebd8a4

--------------------------------
Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe0, Size: 4]
	void ShowGuideByStep(int Data, Vector2D Offset, Vector2D focusAbsPos, Vector2D focusAbsSize, Widget* FocusWidget, Image* guideImage, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void AddUIGuide(Widget* widget1, int guildUI1, Vector2D offset1, Vector2D size1, int childData1, GuideInfo K2Node_MakeStruct_GuideInfo, int CallFunc_Array_Add_ReturnValue);// 0x29fa2f4
	void InitUIGuide(Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void CreateGuideUI();// 0x29fa2f4
	void ExecuteUbergraph_GuideComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	int guideStep;//[Offset: 0xe4, Size: 4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x118, Size: 4]
	void ReceiveBeginPlay();// 0x29fa2f4
	void CustomEvent(bool BoolValue);// 0x29fa2f4
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0xbc, Size: 12]
	delegate OnFPSLowWarning;//[Offset: 0xc8, Size: 12]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0xd4, Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0xe8, Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0xec, Size: 12]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	void RequireConfigRPC();// 0x1fa0e54
	void OnUserQualitySettingChanged(int renderlevel);// 0x1fa0ddc
	void MakeLowFPSWarningEx();// 0x1fa0dc8
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x1fa0d0c
	void CountingDown();// 0x1fa0cf8
	void CloseFPSCheck();// 0x1fa0ce4
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x1fa0c30

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float FPSCollectInternal;//[Offset: 0x4, Size: 4]
	int FPSCollectCountForGroup;//[Offset: 0x8, Size: 4]
	float FPSThreshold;//[Offset: 0xc, Size: 4]
	int FPSLowActionType;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 4]
	void OnChangeOpenDoorMode(int openmode);// 0x29fa2f4
	void UnRegistShowDoorButton();// 0x29fa2f4
	void OnShowDoorButton(byte Type);// 0x29fa2f4
	void RegistShowDoorButton();// 0x29fa2f4
	void ShowDoorButton(bool Show, bool Open, int openmode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x29fa2f4
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x29fa2f4
	void PlayerControllerReconnectedDelegate_Event();// 0x29fa2f4
	void UI_Click(bool bSimulateExtraDoor);// 0x29fa2f4
	void ToogleDoor();// 0x29fa2f4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x29fa2f4
	void AutoOpenDoor(bool BoolValue);// 0x29fa2f4
	void BP_SimulateUIClick(bool bExtraDoor);// 0x29fa2f4
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAimingExtraDoor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool ___bool_Has_Been_Initd_Variable, bool ___bool_Variable, bool ___bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, bool CallFunc_IsValid_ReturnValue3, BP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue4, BP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue5, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_BoolValue, bool K2Node_Event_bExtraDoor, bool ___bool_Variable2, bool K2Node_Select_Default);// 0x29fa2f4
	int openmode;//[Offset: 0xd4, Size: 4]
	byte BtnType;//[Offset: 0xd8, Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]

--------------------------------
Class: BP_DoorMetallic_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x478, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void Timeline_0__FinishedFunc();// 0x29fa2f4
	void Timeline_0__UpdateFunc();// 0x29fa2f4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x29fa2f4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x29fa2f4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x29fa2f4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnBPRespawned();// 0x29fa2f4
	void ExecuteUbergraph_BP_DoorMetallic(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor2, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4);// 0x29fa2f4
	BoxComponent* InterForce;//[Offset: 0x47c, Size: 4]
	BoxComponent* Interaction;//[Offset: 0x480, Size: 4]
	SceneComponent* Scene;//[Offset: 0x484, Size: 4]
	BoxComponent* Box;//[Offset: 0x488, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x48c, Size: 4]
	float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x490, Size: 4]
	byte Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x494, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x498, Size: 4]
	float from;//[Offset: 0x49c, Size: 4]
	float to;//[Offset: 0x4a0, Size: 4]
	int FromState;//[Offset: 0x4a4, Size: 4]
	int ToState;//[Offset: 0x4a8, Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x4ac, Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x4b0, Size: 4]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0, Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x426cf18
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x426ce5c
	void SetTimelineLengthMode(byte NewLengthMode);// 0x426cde4
	void SetTimelineLength(float NewLength);// 0x426cd6c
	void SetPlayRate(float NewRate);// 0x426ccf4
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x426cbe0
	void SetNewTime(float NewTime);// 0x426cb68
	void SetLooping(bool bNewLooping);// 0x426cae8
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x426ca2c
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x426c9ac
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x426c8f0
	void ReverseFromEnd();// 0x426c8dc
	void Reverse();// 0x426c8c8
	void PlayFromStart();// 0x426c8b4
	void Play();// 0x426c8a0
	void OnRep_Timeline();// 0x426c88c
	bool IsReversing();// 0x426c864
	bool IsPlaying();// 0x426c83c
	bool IsLooping();// 0x426c814
	float GetTimelineLength();// 0x426c7ec
	float GetPlayRate();// 0x1de83a8
	float GetPlaybackPosition();// 0x3665384
	bool GetIgnoreTimeDilation();// 0x426c7c4

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: BP_DoorNormal_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x478, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void ZeroToOne__FinishedFunc();// 0x29fa2f4
	void ZeroToOne__UpdateFunc();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x29fa2f4
	void EventTimer();// 0x29fa2f4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x29fa2f4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x29fa2f4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x29fa2f4
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x29fa2f4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x29fa2f4
	void OnBPRespawned();// 0x29fa2f4
	void ExecuteUbergraph_BP_DoorNormal(int EntryPoint, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, FString CallFunc_Concat_StrStr_ReturnValue, const BP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_HasState_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, bool K2Node_Event_isBeginPlay, bool K2Node_Event_bExtraDoor2, bool CallFunc_SetStaticMesh_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue5, int CallFunc_PostEventAtLocation_ReturnValue3);// 0x29fa2f4
	BoxComponent* InterForce;//[Offset: 0x47c, Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x480, Size: 4]
	BoxComponent* Interaction;//[Offset: 0x484, Size: 4]
	SceneComponent* Scene;//[Offset: 0x488, Size: 4]
	BoxComponent* Box;//[Offset: 0x48c, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x490, Size: 4]
	float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x494, Size: 4]
	byte ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x498, Size: 1]
	TimelineComponent* ZeroToOne;//[Offset: 0x49c, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x4a0, Size: 4]
	float HP;//[Offset: 0x4a4, Size: 4]
	float HPTimer;//[Offset: 0x4a8, Size: 4]
	float to;//[Offset: 0x4ac, Size: 4]
	float from;//[Offset: 0x4b0, Size: 4]
	float HPDummy;//[Offset: 0x4b4, Size: 4]
	TimerHandle DummyTimerHandler;//[Offset: 0x4b8, Size: 8]
	float GrenadeDamageRatio;//[Offset: 0x4c0, Size: 4]
	int FromState;//[Offset: 0x4c4, Size: 4]
	int ToState;//[Offset: 0x4c8, Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x4cc, Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x4d0, Size: 4]

--------------------------------
Class: BP_GrenadeDamageType_C.DamageType.Object

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 4]
	void EditorAxisMoveFreezed();// 0x29fa2f4
	void SetUAVSpeedPercent(float SpeedPercent);// 0x29fa2f4
	void SetUAVCameraMode(bool FreeCamera);// 0x29fa2f4
	void OnUnmanedVehicleHPChanged(float HP, float MaxHp, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void OnUnmanedVehicleFuelChanged(float Fuel, float MacFuel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_PostEvent_ReturnValue, STExtraUAVVehicleBase* K2Node_DynamicCast_AsSTExtra_UAVVehicle_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3);// 0x29fa2f4
	void SendUIMsgWhenChangeSeatCompleted(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void SendUIMsgWhenEnterVehicleCompleted(bool CallFunc_IsUAV_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	void SendUIMsgWhenExitVehicleCompleted(class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsUAV_ReturnValue, FString CallFunc_GetClassDisplayName_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	void GetVehicleGoStraight(out float VehicleGoStraight, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x29fa2f4
	void HandleCharacterUnequipWeapon(STExtraWeapon* NewParam);// 0x29fa2f4
	void HandleCharacterEquipWeapon(STExtraWeapon* NewWeapon, byte Slot);// 0x29fa2f4
	void SwitchToLastWeapon(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void CacheLastUseWeaponSlot(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue);// 0x29fa2f4
	void SetPlayMusic(bool Enabled);// 0x29fa2f4
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x29fa2f4
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ExitVehicle();// 0x29fa2f4
	void EnterVehicle(bool IsDriver, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void OnEnterVehicleCompleted(enum SeatType);// 0x29fa2f4
	void OnExitVehicleCompleted();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x29fa2f4
	void OnCurrrentClosestVehicleChanged();// 0x29fa2f4
	void EventSetDrivingViewMode(int IntValue);// 0x29fa2f4
	void OnInputAxisMoveForward(float Rate);// 0x29fa2f4
	void OnInputAxisMoveRight(float Rate);// 0x29fa2f4
	void EventSetCarMusicSwitch(bool BoolValue);// 0x29fa2f4
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x29fa2f4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x29fa2f4
	void OnLaunchUnmannedVehicleCompleted();// 0x29fa2f4
	void OnPauseUnmannedVehicleCompleted();// 0x29fa2f4
	void EventSetUAVFreeCamera(bool BoolValue);// 0x29fa2f4
	void EventSetSpeedPercent(float FloatValue);// 0x29fa2f4
	void EventUAVSingleOperate(bool BoolValue);// 0x29fa2f4
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, enum K2Node_Event_SeatType2, enum K2Node_Event_SeatType, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate3, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate4, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, bool CallFunc_IsValid_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate8, GameBackendHUD* CallFunc_GetInstance_ReturnValue, int K2Node_CustomEvent_IntValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, float K2Node_Event_rate2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, float K2Node_Event_rate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool K2Node_CustomEvent_BoolValue4, bool CallFunc_IsValid_ReturnValue9, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue10, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate10, bool K2Node_CustomEvent_BoolValue3, float CallFunc_GetVehicleGoStraight_VehicleGoStraight, float CallFunc_FixGoStraight_OutMoveRightRate, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate11, float K2Node_Event_cdTime, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, bool K2Node_CustomEvent_BoolValue2, float K2Node_CustomEvent_FloatValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController7, bool K2Node_CustomEvent_BoolValue, bool CallFunc_IsValid_ReturnValue12, delegate K2Node_CreateDelegate_OutputDelegate12, delegate K2Node_CreateDelegate_OutputDelegate13, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate14, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_GetActorEnableCollision_ReturnValue);// 0x29fa2f4
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	float Fuel;//[Offset: 0x298, Size: 4]
	float FuelMax;//[Offset: 0x29c, Size: 4]
	float HP;//[Offset: 0x2a0, Size: 4]
	float HPMax;//[Offset: 0x2a4, Size: 4]
	float OutMoveRightRate;//[Offset: 0x2a8, Size: 4]
	float RawSpeed;//[Offset: 0x2ac, Size: 4]
	enum SeatType;//[Offset: 0x2b0, Size: 1]
	byte LastWeaponSlot;//[Offset: 0x2b1, Size: 1]
	float UnmanedFuel;//[Offset: 0x2b4, Size: 4]
	float UnmanedFuelMax;//[Offset: 0x2b8, Size: 4]
	float UnmanedHP;//[Offset: 0x2bc, Size: 4]
	float UnmanedHPMax;//[Offset: 0x2c0, Size: 4]
	float UnmanedCallBackTime;//[Offset: 0x2c4, Size: 4]
	bool bShowUnmanedLowPowerTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]

--------------------------------
Class: STExtraUAVVehicleBase.STExtraVehicleBase.Pawn.Actor.Object
	VehicleUserComponent* UAVVehicleUserComponent;//[Offset: 0xea0, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0xea4, Size: 4]
	SpringArmComponent* SpringArmComp;//[Offset: 0xea8, Size: 4]
	FName CameraBoneName;//[Offset: 0xeb0, Size: 8]
	delegate OnVehicleUAVStateChanged;//[Offset: 0xec0, Size: 12]
	float FPP_TargetArmLength;//[Offset: 0xecc, Size: 4]
	float TPP_TargetArmLength;//[Offset: 0xed0, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0xed4, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	enum UAVVehicleState;//[Offset: 0xee0, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0xee4, Size: 4]
	float CoolDownTimeMin;//[Offset: 0xee8, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0xeec, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0xef0, Size: 4]
	float LowFuelWarning;//[Offset: 0xef4, Size: 4]
	float SkillRecallingTime;//[Offset: 0xef8, Size: 4]
	float SkillDisappearingTime;//[Offset: 0xefc, Size: 4]
	float SkillDestoryTime;//[Offset: 0xf00, Size: 4]
	float MaxCameraFOV;//[Offset: 0xf20, Size: 4]
	float MinCameraFOV;//[Offset: 0xf24, Size: 4]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0xf28, Size: 12]
	void SetViewTargetAgainForOB();// 0x20c3434
	void SetUAVVehicleState(enum NewState);// 0x20c33c0
	void SetFPPCameraFov(float factor);// 0x20c3348
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x20c3270
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x20c31bc
	void SendToServerIsFPP(bool IsFirstPerson);// 0x20c30f4
	void SendToServerClientInitOK();// 0x20c3098
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x20c2fd0
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x20c2f48
	void OnRep_UAVVehicleState();// 0x20c2f2c
	void OnRep_IsFPPChanged();// 0x20c2f18
	void OnRep_FPPCameraFovChanged();// 0x20c2f04
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x20c2ddc
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x20c2c20
	float GetDisToPlayer();// 0x20c2bf8
	bool CheckCanSwitchFPP();// 0x20c2bc8

--------------------------------
Class: DriverAttachmentData
	FName AttachmentDataName;//[Offset: 0x0, Size: 8]
	StaticMesh* AttachmentMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* AttachmentMeshLod;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	float AttachDelayTime;//[Offset: 0x60, Size: 4]
	float DettachDelayTime;//[Offset: 0x64, Size: 4]
	StaticMeshComponent* AttachmentComponentInstance;//[Offset: 0x70, Size: 4]
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x74, Size: 4]

--------------------------------
Class: SurfBoardComp.ActorComponent.Object
	float SpeedThresholds;//[Offset: 0xbc, Size: 4]
	float JumpImpulse;//[Offset: 0xc0, Size: 4]
	float JumpImpulseBig;//[Offset: 0xc4, Size: 4]
	float MaxStateTime_Jump;//[Offset: 0xc8, Size: 4]
	float RealStateTime_Jump;//[Offset: 0xcc, Size: 4]
	float FloorInWaterLow;//[Offset: 0xd0, Size: 4]
	float HalfInWaterLow;//[Offset: 0xd4, Size: 4]
	float RealInWaterLow;//[Offset: 0xd8, Size: 4]
	float MaxHalfInWaterLowTime;//[Offset: 0xdc, Size: 4]
	float JumpCeilingHeight;//[Offset: 0xe0, Size: 4]
	float HalfJumpHeight;//[Offset: 0xe4, Size: 4]
	float RealJumpHeight;//[Offset: 0xe8, Size: 4]
	float MaxInHalfJumpHeightTime;//[Offset: 0xec, Size: 4]
	float MaxSpeed;//[Offset: 0xf0, Size: 4]
	float RealMaxSpeed;//[Offset: 0xf4, Size: 4]
	float InWaterTolerance;//[Offset: 0xf8, Size: 4]
	int LeaveFlyPointNum;//[Offset: 0x108, Size: 4]
	int PersistanceFrameThreshold;//[Offset: 0x10c, Size: 4]
	float AutoExitHeightThreshold;//[Offset: 0x110, Size: 4]
	float HitTestToSeaLevelBias;//[Offset: 0x114, Size: 4]
	enum SurfBoardState;//[Offset: 0x118, Size: 1]
	void ServerSetSurfBoardState(enum InState);// 0x20e26b4
	void OnRep_SurfBoardState();// 0x20e26a0
	void ClientSetSurfBoardState(enum InState);// 0x20e25ec

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10a0, Size: 4]
	void OnClientVehicleHealthStateChangedToDestory();// 0x29fa2f4
	void CreateDMI();// 0x29fa2f4
	void SetDMIParam(MaterialInstanceDynamic* Dim, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void UpdateExhaustFx(FName ExhaustName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSoftWrapperArray CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSoftWrapper CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x29fa2f4
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x29fa2f4
	void OnSetTailLightValue(float LightValue);// 0x29fa2f4
	void OnBoostingChanged();// 0x29fa2f4
	void OnEngineStart();// 0x29fa2f4
	void OnEngineStop();// 0x29fa2f4
	void VehicleMeshChanged();// 0x29fa2f4
	void BPPlayOverlapDamageCameraShake();// 0x29fa2f4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x29fa2f4
	void AdvanceVehicleMeshChanged();// 0x29fa2f4
	void OnRep_CandidateAvatar();// 0x29fa2f4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_1_DriverChangeDelegate__DelegateSignature(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x29fa2f4
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, BP_STExtraWheeledVehicle_C* ___object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_STExtraWheeledVehicle_C* ___object_Variable2, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, float K2Node_Event_LightValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraShake* CallFunc_PlayCameraShake_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* K2Node_Event_OtherActor, VehicleAdvanceAvatarComponent* CallFunc_GetVehicleAdvanceAvatar_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetTailLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_OldChara, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_NewChara, bool CallFunc_NotEqual_IntInt_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x29fa2f4
	BP_VehicleShowFrameComp_C* BP_VehicleShowFrameComp;//[Offset: 0x10a4, Size: 4]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x10a8, Size: 4]
	CameraComponent* Camera;//[Offset: 0x10ac, Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x10b0, Size: 4]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	FName TailLightParamName;//[Offset: 0x10b8, Size: 8]
	FName FrontLightParamName;//[Offset: 0x10c0, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x10c8, Size: 8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	float LastOverlapShakeTime;//[Offset: 0x10d4, Size: 4]
	float OverlapShakeInterval;//[Offset: 0x10d8, Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 1]

--------------------------------
Class: BP_VehicleShowFrameComp_C.ShowActorFrameComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x260, Size: 64]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x2a0, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x2a8, Size: 4]
	MaterialInterface* Material;//[Offset: 0x2ac, Size: 4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x2b0, Size: 4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x2b8, Size: 4]
	FString FrameDetailsUIPath;//[Offset: 0x2bc, Size: 12]
	FString FrameDetailsParentWidgetName;//[Offset: 0x2c8, Size: 12]
	FString FrameDetailsParentOuterName;//[Offset: 0x2d4, Size: 12]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x2e0, Size: 12]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x2ec, Size: 12]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x2f8, Size: 4]
	ActorPositionWidget* GetDetailsWidget();// 0x1fa4a6c
	void DestroyFrameUI();// 0x1fa4a58
	bool CreateFrameUI(int ParamIfNecessary);// 0x1fa49d8

--------------------------------
Class: FrameUITransformData
	Transform Offset;//[Offset: 0x0, Size: 48]
	float BaseSizeX;//[Offset: 0x30, Size: 4]
	float BaseSizeY;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x574, Size: 12]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x41e1e3c
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x41e1c58

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x4, Size: 4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float BaseSizeX;//[Offset: 0xc, Size: 4]
	float BaseSizeY;//[Offset: 0x10, Size: 4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x304, Size: 4]
	TextBlock* TextBlockDist;//[Offset: 0x308, Size: 4]
	Actor* AttachedActor;//[Offset: 0x30c, Size: 4]
	Vector4 Limit;//[Offset: 0x310, Size: 16]
	Vector2D UIOffset;//[Offset: 0x320, Size: 8]
	Vector LocOffset;//[Offset: 0x328, Size: 12]
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	float AlphaBegin;//[Offset: 0x338, Size: 4]
	float AlphaEnd;//[Offset: 0x33c, Size: 4]
	float AlphaStep;//[Offset: 0x340, Size: 4]
	float AlphaBeginDistance;//[Offset: 0x344, Size: 4]
	float AlphaEndDistance;//[Offset: 0x348, Size: 4]
	float ScaleBegin;//[Offset: 0x34c, Size: 4]
	float ScaleEnd;//[Offset: 0x350, Size: 4]
	float ScaleStep;//[Offset: 0x354, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x358, Size: 4]
	float ScaleEndDistance;//[Offset: 0x35c, Size: 4]
	float MaxShowDistance;//[Offset: 0x360, Size: 4]
	int TargetDistance;//[Offset: 0x364, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x374, Size: 4]
	void ShowArrowAngle(bool Visible, float Angle);// 0x29fa2f4
	void SetCurrentWidgetVisible(bool Visible);// 0x29fa2f4
	void SetActorImage(Texture2D* Texture);// 0x29fa2f4
	void PostAttachmentChanged();// 0x29fa2f4
	void DetachFromActor(Actor* InActor);// 0x1dbc074
	void AttachToActor(Actor* InActor);// 0x1dbbffc

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0, Size: 12]
	delegate TextDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x140, Size: 28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x15c, Size: 28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	SlateFontInfo Font;//[Offset: 0x180, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1c0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1c8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1d8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1e8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x366f00c
	void SetText(FText InText);// 0x366ed5c
	void SetShadowOffset(Vector2D InShadowOffset);// 0x366ecec
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x366ec70
	void SetSelectColor(bool bIsSelect);// 0x366ebf0
	void SetOpacity(float InOpacity);// 0x366eb78
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x366eb00
	void SetJustification(byte InJustification);// 0x366ea88
	void SetFont(SlateFontInfo InFontInfo);// 0x366e770
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x366e450
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x366e3cc
	FText GetText();// 0x366e270

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcc, Size: 4]
	byte Justification;//[Offset: 0xd0, Size: 1]
	byte VerticalJustification;//[Offset: 0xd1, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	float WrapTextAt;//[Offset: 0xd4, Size: 4]
	enum WrappingPolicy;//[Offset: 0xd8, Size: 1]
	Margin Margin;//[Offset: 0xdc, Size: 16]
	float LineHeightPercentage;//[Offset: 0xec, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x29fa2f4
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x29fa2f4
	FString GetItemAvatarHandlePath(int ItemID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x29fa2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, bool NewLocalVar, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue2, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x29fa2f4
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void VehicleAvatarEquiped();// 0x29fa2f4
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x29fa2f4
	void VehicleFPPMeshLoaded();// 0x29fa2f4
	void LoadedBrokenMat();// 0x29fa2f4
	void ClearVehicleLightEffect();// 0x29fa2f4
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	ParticleSystem* CurLightEffect;//[Offset: 0x410, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x438, Size: 4]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]

--------------------------------
Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x1c, Size: 60]
	<int,FString> BPTableNameMap;//[Offset: 0x58, Size: 60]
	FString LoadedClassManagerClassName;//[Offset: 0x94, Size: 12]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x1ec, Size: 60]
	void InitTableData();// 0x1f1af58
	void InitBPTableMap();// 0x29fa2f4
	FString GetWrapperPath(FString BPTableName, int ID);// 0x2239f18
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x2239e10
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x2239be8
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby);// 0x2239a4c
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x2239944
	class Object GetClass(FString BPTableName, int ID, bool IsLobby);// 0x22397f0
	FString GetBPTableName(int Type);// 0x22396e8
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x2239508
	static UAELoadedClassManager* Get();// 0x22394e0
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x223941c
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x2239378
	void ClearAllData();// 0x2239364

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c, Size: 12]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28, Size: 60]
	FString GetWrapperPath(int ID);// 0x2238da4
	class Object GetWrapperClass(int ID);// 0x2238d24
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x2238b7c
	Object* GetObject(int ID, Object* Outer, bool IsLobby);// 0x2238a6c
	class Object GetCustom1Class(int ID);// 0x22389ec
	class Object GetClass(int ID, bool IsLobby);// 0x2238920
	void ConvertPath(int ID);// 0x22388a8

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	FString Path;//[Offset: 0x10, Size: 12]
	FString LobbyPath;//[Offset: 0x1c, Size: 12]
	FString WrapperPath;//[Offset: 0x28, Size: 12]
	FString Custom1;//[Offset: 0x34, Size: 12]

--------------------------------
Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0, Size: 4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4, Size: 4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8, Size: 12]

--------------------------------
Class: HoldComponent_C.ActorComponent.Object
	void HoldTime(out float Time, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	void Release(byte FingerIndex, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_HoldTime_Time, PlayerController* CallFunc_GetPlayerController_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	void Push(int FingerIndex, float CallFunc_GetTimeSeconds_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void HoldAndRelease__DelegateSignature(int FingeerIndex);// 0x29fa2f4
	delegate HoldAndRelease;//[Offset: 0xc0, Size: 12]
	float HoldTimeThreshold;//[Offset: 0xcc, Size: 4]
	int HoldFingerIndex;//[Offset: 0xd0, Size: 4]
	byte HoldMode;//[Offset: 0xd4, Size: 1]
	float PushTime;//[Offset: 0xd8, Size: 4]
	bool IsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]

--------------------------------
Class: BP_SkillManagerComponent_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	void TriggerEvent(int SkillID, byte EventType);// 0x2105fa0
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x2105edc
	void SetSkillOwner(Actor* Pawn);// 0x2105e5c

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	<int,int> IndexOfMapID;//[Offset: 0x5cc, Size: 60]
	UAESkillPoolManager* SkillPoolManager;//[Offset: 0x644, Size: 4]
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x648, Size: 12]
	FString SkillTableName;//[Offset: 0x654, Size: 12]
	FString SkillBuffTableName;//[Offset: 0x660, Size: 12]
	FString PropSkillMapTableName;//[Offset: 0x66c, Size: 12]
	byte TriggerSkillEventFromRole;//[Offset: 0x68c, Size: 1]
	GSListenerBase* CurrentGSListener;//[Offset: 0x690, Size: 8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0x698, Size: 12]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0x6a4, Size: 12]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0x6b0, Size: 12]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0x6bc, Size: 12]
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x2120c00
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillID, byte InFromRole);// 0x2120af8
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillID, byte InFromRole);// 0x21209ac
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillID, byte InFromRole);// 0x21208a4
	void TriggerEvent(int SkillID, byte EventType);// 0x2105fa0
	void TriggerCurSkillEvent_Mutil(byte UAEEvent, int SkillID);// 0x21207e0
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x2105edc
	void SetIsAutoAddSkill(bool InAutoAdd);// 0x2120760
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x2120624
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x2120528
	void OnSkillManagerInitFinish();// 0x2120514
	void OnRep_SkillSynSinglePhaseData();// 0x1e513bc
	void OnRep_SkillSynData();// 0x21204f8
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x2120480
	void InitSkillSystem_WithID(bool IsDedicateServer);// 0x21203f8
	void InitSkillSystem(bool IsDedicateServer);// 0x2120370
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x21202e8
	FString GetSkillIconBySkillID(int SkillID);// 0x21201e0
	UTSkill* GetSkillByEntry(enum Entry);// 0x2120158
	byte GetRealOwnerRoleSafety();// 0x2120128
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x2120064
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x211fe8c
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x211fdc8
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x211fcc0

--------------------------------
Class: UAESkillPoolManager.Object
	AESkillPool* Pool;//[Offset: 0x1c, Size: 4]
	AESkillPool* ClientPool;//[Offset: 0x20, Size: 4]
	bool IsCurAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	AESkillPool*[] DirtyPools;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AESkillPool.Object
	World* CurWorldRef;//[Offset: 0x1c, Size: 8]
	<int,UTSkillWidget*> SkillWidgetCaches;//[Offset: 0x60, Size: 60]
	<int,SkillInstArrayTemplate> SkillInstanceTeamplates;//[Offset: 0xd8, Size: 60]
	UAESkillPoolManager* SkillManager;//[Offset: 0x118, Size: 4]
	void OnAsyncLoadingFinished(SkillPoolAysncLoadParams loadParams);// 0x2123928

--------------------------------
Class: SkillInstArrayTemplate
	SkillInstItem[] SkillInstArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillInstItem
	UTSkill* SkillInst;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkillPoolAysncLoadParams

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0, Size: 1]
	int SkillIndex;//[Offset: 0x4, Size: 4]
	int SkillID;//[Offset: 0x8, Size: 4]
	FString Interrupts;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	FString EventString;//[Offset: 0x114, Size: 12]

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte UAESkillEventType;//[Offset: 0x114, Size: 1]

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0x114, Size: 4]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]

--------------------------------
Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PropSkillMapTableRow
	int SkillMapID;//[Offset: 0x0, Size: 4]
	int PropID;//[Offset: 0x4, Size: 4]
	int PropSkillLevel;//[Offset: 0x8, Size: 4]
	int PropSkillID;//[Offset: 0xc, Size: 4]
	int AuxPropSkillID;//[Offset: 0x10, Size: 4]
	int[] FilterGunIDs;//[Offset: 0x14, Size: 12]
	FString PropSkillIconPath;//[Offset: 0x20, Size: 12]
	FString PropSkillUseIconPath;//[Offset: 0x2c, Size: 12]
	FString PropSkillDesc;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);// 0x1e675d8

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CharacterAnimList_Parachute_C.UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x270, Size: 1328]
	float Priority;//[Offset: 0x7a0, Size: 4]
	float BlendRadius;//[Offset: 0x7a4, Size: 4]
	float BlendWeight;//[Offset: 0x7a8, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ac, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ac, Size: 1]
	void AddOrUpdateBlendable(interface classByteProperty InBlendableObject, float InWeight);// 0x4231be0

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 4]
	void IsFppMode(out bool Out, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void GetPetOwnerPlayerPawn(out BP_PlayerPawn_C* Out, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void GetPetPawn(out BasePetCharacter_BP_C* Out, BasePetCharacter_BP_C* K2Node_DynamicCast_AsBase_Pet_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void SetPetPawn(STExtraPetCharacter* InPetPawn, out STExtraPetCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x29fa2f4
	void SetPetOwnerPlayerPawn(STExtraBaseCharacter* InPlayerPawn, out STExtraBaseCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x29fa2f4
	void ResetAttachTrans(BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x29fa2f4
	void SpawnPetWithInfo(GameModePlayerPetInfo Info, bool ___bool_Variable, bool CallFunc_IsFppMode_Out, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Select_Default, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class BasePetCharacter_BP_C K2Node_ClassDynamicCast_AsBase_Pet_Character_BP, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x29fa2f4
	void SpawnPet(class BasePetCharacter_BP_C PetClass);// 0x29fa2f4
	void RemovePet();// 0x29fa2f4
	void PlayerStateChange(enum State, byte changeType);// 0x29fa2f4
	void OnOwnerPlayerPossessed(GameModePlayerPetInfo PetInfo);// 0x29fa2f4
	void OnOwnerDetachedVehicle();// 0x29fa2f4
	void OnRep_PetPawn();// 0x29fa2f4
	void OnRep_PetOwnerPlayerPawn();// 0x29fa2f4
	void ExecuteUbergraph_PetComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, Actor*[] K2Node_MakeArray_Array, STExtraBaseCharacter* CallFunc_SetPetOwnerPlayerPawn_out, class BasePetCharacter_BP_C K2Node_CustomEvent_PetClass, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, enum K2Node_Event_State, byte K2Node_Event_changeType, FString CallFunc_Concat_StrStr_ReturnValue, GameModePlayerPetInfo K2Node_CustomEvent_PetInfo, STExtraPetCharacter* CallFunc_SetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, interface classByteProperty K2Node_DynamicCast_AsPlayer_Event_for_Pet, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out5, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out6, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out7, FString CallFunc_Concat_StrStr_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out8, bool CallFunc_IsValid_ReturnValue8, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out9, FString CallFunc_Conv_BoolToString_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out2, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out3, bool CallFunc_IsValid_ReturnValue10, FString CallFunc_Conv_BoolToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue8, PetLevelInfo K2Node_MakeStruct_PetLevelInfo, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, BasePetCharacter_BP_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, STExtraPetCharacter* CallFunc_SetPetPawn_Out2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, Vector CallFunc_Add_VectorVector_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, Transform CallFunc_MakeTransform_ReturnValue);// 0x29fa2f4
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x274, Size: 4]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x278, Size: 24]
	Transform SpawnTrans;//[Offset: 0x290, Size: 48]
	Actor*[] NewVar;//[Offset: 0x2c0, Size: 12]

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x260, Size: 4]
	STExtraPetCharacter* PetPawn;//[Offset: 0x264, Size: 4]
	void OnRep_PetPawn();// 0x29fa2f4
	void OnRep_PetOwnerPlayerPawn();// 0x29fa2f4

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0xb60, Size: 12]
	bool[] ClientDiffPetStateList;//[Offset: 0xb6c, Size: 12]
	float MovementTickInterval;//[Offset: 0xb78, Size: 4]
	int PetStateNum;//[Offset: 0xb7c, Size: 4]
	int RelevantCloseTime;//[Offset: 0xb80, Size: 4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0xb84, Size: 8]
	PetLevelInfo PetLevelInfo;//[Offset: 0xb8c, Size: 8]
	bool OwnerPlayerIsOnMoveBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 1]
	float OwnerPlayerMoveBaseCheckTime;//[Offset: 0xb98, Size: 4]
	float OwnerPlayerCurMoveBaseCheckTime;//[Offset: 0xb9c, Size: 4]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0xba4, Size: 4]
	byte PetRelevantType;//[Offset: 0xba8, Size: 1]
	byte CurPetState;//[Offset: 0xba9, Size: 1]
	delegate OnPetStateChangeDelegate;//[Offset: 0xbac, Size: 12]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0xbb8, Size: 12]
	delegate OnPetMontageDelegate;//[Offset: 0xbc4, Size: 12]
	PetEventItem* CurExecuteEvent;//[Offset: 0xbd0, Size: 4]
	PetMontageData PetCurMontage;//[Offset: 0xbd4, Size: 8]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x29fa2f4
	void SetPetVisibility(bool Visible);// 0x29fa2f4
	void SetPetMontage(out const PetMontageData Data);// 0x206350c
	void SetCurExecuteEvent(PetEventItem* Event);// 0x2063494
	bool PetOwnerIsAutonomous();// 0x206346c
	void PetOwnerCharacterBecomeValid();// 0x29fa2f4
	void PetLeaveState(byte State);// 0x20633f4
	bool PetHasState(byte State);// 0x2063374
	bool PetEnterState(byte ToState);// 0x20632f4
	void OwnerPlayerMoveBaseCheck();// 0x20632e0
	void OnRep_PetVisibilityInfo();// 0x20632cc
	void OnRep_PetStateList();// 0x20632b8
	void OnRep_PetStateChange();// 0x1dd8bcc
	void OnRep_PetOwnerCharacter();// 0x20632a4
	void OnRep_PetCurMontageChange();// 0x2063290
	void OnRep_CurExecuteEvent();// 0x206327c
	void OnRep_AttachmentReplication();// 0x1f5a6ac
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x2063168
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x29fa2f4
	bool IsPetCanAppear();// 0x2063138
	bool IsAnimLimited(int AnimId);// 0x20630b0
	int[] GetPetUnlockAnimIds();// 0x29fa2f4
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x29fa2f4
	FString GetPetAnimLimitePlayerState(int AnimId);// 0x29fa2f4
	bool ClientPredictEnterState(byte ToState);// 0x2063030
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x2062fa8
	void BroadcastPetLeaveDisappear();// 0x2009184
	void BindDelegateInCpp();// 0x2062f8c

--------------------------------
Class: PetVisibilityInfo
	bool Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x1c, Size: 1]
	int EventPriority;//[Offset: 0x20, Size: 4]
	float EventExecTime;//[Offset: 0x24, Size: 4]
	float EventMaxWaitTime;//[Offset: 0x28, Size: 4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte EnterPetState;//[Offset: 0x2d, Size: 1]
	byte LeavePetState;//[Offset: 0x2e, Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x30, Size: 4]
	int AnimationAssetId;//[Offset: 0x34, Size: 4]
	PetMontageConfig[] MontageList;//[Offset: 0x38, Size: 12]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x44, Size: 12]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x50, Size: 12]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	delegate OnPetEventStartDelegate;//[Offset: 0x60, Size: 12]
	delegate OnPetEventEndDelegate;//[Offset: 0x6c, Size: 12]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x78, Size: 4]
	void UpdateCanPlayMontageList();// 0x1f53eb8
	void SelectRandomMontage();// 0x1f53e9c
	void OnEventStart(STExtraPetCharacter* Pet);// 0x1eb74c4
	void OnEventEnd();// 0x1f53e80
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x1dc7f48

--------------------------------
Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x1c, Size: 1]
	float EventMaxWaitTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0, Size: 4]
	float MontageStartTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc00, Size: 4]
	void GetGameModeType(out enum GameModeType, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void HandleOnOwnerWin(int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	void OnPetOwnerFallingModeChange(bool IsFalling, Vector PlayerLoc, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x29fa2f4
	void StopCurMontage(AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void ChangeToDefaultAttachInfo(PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult);// 0x29fa2f4
	void OnDelayLeaveDisappear();// 0x29fa2f4
	void OnPetLeaveState(byte LeaveState, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPetDefaultFollowType_FollowType, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void OnPetEnterState(byte EnterState, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x29fa2f4
	void OnPetAppearAnimEnd();// 0x29fa2f4
	void OnPetDisappearStateChange(bool IsEnter, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void GetPetParachuteEquipments(out int[] Out);// 0x29fa2f4
	void HandlePetStopParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	void HandlePetStartParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x29fa2f4
	void DetachFromOwnerPlayer();// 0x29fa2f4
	void InitPetAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x29fa2f4
	void SetPetFollowType(byte Type, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue);// 0x29fa2f4
	void PetHasDisappearState(out bool Out, bool CallFunc_PetHasState_ReturnValue, bool CallFunc_PetHasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void OnPetFlyAroundStateChange(bool IsEnter, bool CallFunc_IsServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	void OnPetFollowStateChange(bool IsEnter, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	void UpdateAttachInfoByOwnerDefaultAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, AvatarSlotDesc[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, AvatarSlotDesc CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x29fa2f4
	void ResetAttachInfo(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x29fa2f4
	void GetPetInfo(out GameModePlayerPetInfo PetInfo);// 0x29fa2f4
	void GetPetEntity(out PetEntityComponent_BP_C* PetEntity);// 0x29fa2f4
	void DisableUnuseComponent();// 0x29fa2f4
	void CalcInAirAttackArea(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	void OnAirAttackOver();// 0x29fa2f4
	void OnAirAttackWarning(GameStateBase* CallFunc_GetGameState_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void SelfPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue);// 0x29fa2f4
	void OtherPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue);// 0x29fa2f4
	void PetOtherVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void PetSelfVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, bool ___bool_Variable, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_Select_Default, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void GetPetDefaultFollowType(out byte FollowType);// 0x29fa2f4
	void DrawPetDebugInfo(bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x29fa2f4
	void OnRep_AttachToOwner(Transform TempTrans, bool CallFunc_PetEnterState_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_K2_SetActorRotation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, Transform CallFunc_GetFollowPos_out);// 0x29fa2f4
	void AttachToOwnerPlayer(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x29fa2f4
	void PetOwnerStopEmote(int EmoteId, int StopReason, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void PetOwnerPlayEmote(int EmoteId, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetEmotionEventInfo* CallFunc_SpawnObject_ReturnValue, bool CallFunc_PetEnterState_ReturnValue, DateTime CallFunc_Now_ReturnValue, int CallFunc_GetSecond_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PetVisibilityInfo K2Node_MakeStruct_PetVisibilityInfo, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AnimIdIsValid_IsValid);// 0x29fa2f4
	void AnimIdIsValid(int AnimId, out bool IsValid, int[] CallFunc_GetPetUnlockAnimIds_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsAnimLimited_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void GetPetRspInfoWithPlayerEmoteId(int PlayerEmoteId, out BP_STRUCT_PetPlayerEmoteTable_type Out Row, out bool found, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x29fa2f4
	FString GetPetAnimLimitePlayerState(int AnimId, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetActPlayerStateTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x29fa2f4
	int[] GetPetUnlockAnimIds(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x29fa2f4
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x29fa2f4
	void GetPetAttachInfo(out PetAttachInfo AttachInfo, PetAttachInfo CallFunc_GetCurrentAttachInfo_ReturnValue);// 0x29fa2f4
	void GetPetEventManager(out PetEventManagerComponent* PetEventManager);// 0x29fa2f4
	void SetOwnerCharacterPC(STExtraPlayerController* CallFunc_GetController_ReturnValue);// 0x29fa2f4
	void GetOwnerCharacter(out BP_PlayerPawn_C* OwnerCharacter, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void SetOwnerCharacter(BP_PlayerPawn_C* Owner, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Controller* CallFunc_GetController_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetPetDefaultFollowType_FollowType, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x29fa2f4
	void GetFollowPos(float MinRadius, float MaxRadius, out Transform Out, WaterSwimActor* NewLocalVar, Vector ActorLoc, Rotator ActorRot, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue2, Rotator CallFunc_MakeRotFromZY_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector K2Node_MathExpression_ReturnValue, Actor*[] ___object_Variable, Vector K2Node_MathExpression_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, WaterSwimActor* K2Node_DynamicCast_AsWater_Swim_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void Timeline_0__FinishedFunc();// 0x29fa2f4
	void Timeline_0__UpdateFunc();// 0x29fa2f4
	void PlayerStateChange(enum State, byte changeType);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void PetOwnerCharacterBecomeValid();// 0x29fa2f4
	void UpdateSplineInfo();// 0x29fa2f4
	void PetStopParchute();// 0x29fa2f4
	void PetStartParachute();// 0x29fa2f4
	void BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature(PetWaitEventInfo* EventInfo);// 0x29fa2f4
	void OnPetStateChangeEvent(byte State, bool IsEnter);// 0x29fa2f4
	void BindEvent();// 0x29fa2f4
	void OnPetMontageEvent(PetMontageData MontageData);// 0x29fa2f4
	void OnAsyncLoadPetAnimRes(Object* LoadObject);// 0x29fa2f4
	void SetPetVisibility(bool Visible);// 0x29fa2f4
	void OnOwnerWinEvent();// 0x29fa2f4
	void OnOwnerKillSomeone();// 0x29fa2f4
	void OnOwnerAssistKill();// 0x29fa2f4
	void OnMoveVoiceAround(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x29fa2f4
	void OnShotVoiceAround(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x29fa2f4
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x29fa2f4
	void OnAirAttackEvent(byte airattacktype, int waveindex);// 0x29fa2f4
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x29fa2f4
	void DebugLineTimerEvent();// 0x29fa2f4
	void OnPetOwnerStateInterruptEvent(enum State, enum InterruptedBy);// 0x29fa2f4
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x29fa2f4
	void PetEnterPlane();// 0x29fa2f4
	void OnPetOwnerFallingModeChangeEvent(bool IsFalling);// 0x29fa2f4
	void OnOwnerPerspectiveChanged(bool IsFPP);// 0x29fa2f4
	void OnOwnerHoldGrenadeStateChange();// 0x29fa2f4
	void OnPetOwnerShoot(enum State);// 0x29fa2f4
	void OnPetVisibility_EnterHide();// 0x29fa2f4
	void OnPetVisibility_EnterVisible();// 0x29fa2f4
	void OnPlayerEnterParachute();// 0x29fa2f4
	void OnPlayerExitParachute();// 0x29fa2f4
	void ExecuteUbergraph_BasePetCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, enum K2Node_Event_State, byte K2Node_Event_changeType, delegate K2Node_CreateDelegate_OutputDelegate8, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate9, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, delegate K2Node_CreateDelegate_OutputDelegate10, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, SplineComponent*[] CallFunc_GetComponentsByTag_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate13, SplineComponent* CallFunc_Array_Get_Item, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager2, PetWaitEventInfo* K2Node_ComponentBoundEvent_EventInfo, byte K2Node_CustomEvent_State3, bool K2Node_CustomEvent_IsEnter, delegate K2Node_CreateDelegate_OutputDelegate14, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, PetMontageData K2Node_CustomEvent_MontageData, Object* K2Node_CustomEvent_LoadObject, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetActionTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool K2Node_Event_Visible, bool CallFunc_IsServer_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_PetSelfVisibleSetting_out, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue2, bool CallFunc_PetOtherVisibleSetting_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate15, delegate K2Node_CreateDelegate_OutputDelegate16, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue4, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager5, STExtraBaseCharacter* K2Node_CustomEvent_nowCharacter, Vector K2Node_CustomEvent_posVector2, float K2Node_CustomEvent_showTime2, Vector CallFunc_GetLocationAtTime_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, STExtraShootWeapon* K2Node_CustomEvent_nowWeapon, Vector K2Node_CustomEvent_posVector, float K2Node_CustomEvent_showTime, bool K2Node_CustomEvent_isslience, bool K2Node_CustomEvent_isExplosion, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager6, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue5, PetWaitEventInfo* K2Node_Event_Event, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager7, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, byte K2Node_CustomEvent_airattacktype, int K2Node_CustomEvent_waveindex, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_IsServer_ReturnValue3, bool K2Node_Event_Draw, bool CallFunc_IsServer_ReturnValue4, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager8, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue6, enum K2Node_Event_slotType, bool K2Node_Event_isEquipped, int K2Node_Event_InItemID, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, delegate K2Node_CreateDelegate_OutputDelegate17, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter3, bool CallFunc_PetHasDisappearState_out, bool CallFunc_IsHiddenByOtherSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter4, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_HasState_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate18, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate19, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType4, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, FixPetAttachInfo K2Node_MakeStruct_FixPetAttachInfo, delegate K2Node_CreateDelegate_OutputDelegate20, bool CallFunc_IsServer_ReturnValue5, bool CallFunc_PetOwnerIsAutonomous_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager9, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue5, PetEventPlayerStateTypeSt K2Node_MakeStruct_PetEventPlayerStateTypeSt, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager10, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, byte CallFunc_GetPredictPetOwnerState_Enter, byte CallFunc_GetPredictPetOwnerState_Leave, bool CallFunc_GetPredictPetOwnerState_ReturnValue, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_ClientPredictEnterState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue6, bool K2Node_CustomEvent_IsFalling, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_PetEnterState_ReturnValue2, bool K2Node_CustomEvent_IsFPP, delegate K2Node_CreateDelegate_OutputDelegate21, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_PetSelfVisibleSetting_out2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter5, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate22, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue13, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue7, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager11, bool CallFunc_PetEnterState_ReturnValue3, bool CallFunc_PetEnterState_ReturnValue4, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x29fa2f4
	void PetOwnerStateChangeDispatcher__DelegateSignature(enum State, byte changeType);// 0x29fa2f4
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0xc04, Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0xc08, Size: 4]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0xc0c, Size: 4]
	PetEventManagerComponent* PetEventManager;//[Offset: 0xc10, Size: 4]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0xc14, Size: 4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0xc18, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0xc1c, Size: 4]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0xc20, Size: 4]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0xc24, Size: 12]
	int[] UnlockAnimIds;//[Offset: 0xc30, Size: 12]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3c, Size: 1]
	SplineComponent* PetParachuteSpline;//[Offset: 0xc40, Size: 4]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0xc44, Size: 4]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0xc50, Size: 8]
	Vector CurAttackArea;//[Offset: 0xc58, Size: 12]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 1]
	TimerHandle DebugLineTimer;//[Offset: 0xc68, Size: 8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	float PetAppearTime;//[Offset: 0xc74, Size: 4]
	float PetDelayLeaveDisappearTime;//[Offset: 0xc78, Size: 4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0xc80, Size: 8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 1]
	enum TPlayerState;//[Offset: 0xc89, Size: 1]
	byte TChangeType;//[Offset: 0xc8a, Size: 1]
	float TeleportMinAngle;//[Offset: 0xc8c, Size: 4]
	float TeleportMaxAngle;//[Offset: 0xc90, Size: 4]
	bool ShouldHideOnFirstPersonView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc94, Size: 1]
	Vector SwimOffset;//[Offset: 0xc98, Size: 12]
	int CountToPlayWinAnim;//[Offset: 0xca4, Size: 4]
	int MaxCountToPlayWinAnim;//[Offset: 0xca8, Size: 4]
	float IntervalToPlayWinAnim;//[Offset: 0xcac, Size: 4]

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdc, Size: 1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdd, Size: 1]
	float DefaultTraceDeltaTime;//[Offset: 0xbe0, Size: 4]
	float TraceLength;//[Offset: 0xbe4, Size: 4]
	float CurrentTraceDeltaTime;//[Offset: 0xbe8, Size: 4]
	byte[] TraceTypeConfig;//[Offset: 0xbec, Size: 12]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0xbf8, Size: 4]
	void TraceForward();// 0x203e084
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x203e05c

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0xbc, Size: 12]
	PetEventItemIns[] EventConfigs;//[Offset: 0xc8, Size: 12]
	BehaviorTree* DefaultBT;//[Offset: 0xd4, Size: 4]
	BehaviorTree* CurrentBT;//[Offset: 0xd8, Size: 4]
	STExtraPetController* PetController;//[Offset: 0xdc, Size: 4]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xe0, Size: 4]
	PetEventItem* CurExecuteEvent;//[Offset: 0xe4, Size: 4]
	int MaxWaitEventNum;//[Offset: 0xe8, Size: 4]
	delegate OnPetEventDelegate;//[Offset: 0xec, Size: 12]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x1f5556c
	void StartEventExecTimer(float ExecTime);// 0x1f554f4
	void ProcessWaitEvent(float Delta);// 0x1f5547c
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x1f55348
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x1f552c8
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x1f55250
	void DequeueWaitEvent(bool bNeedExec);// 0x1f551d0
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x1f55150
	bool CanResponseEvent();// 0x1f55128

--------------------------------
Class: PetEventItemIns
	FString Tips;//[Offset: 0x0, Size: 12]
	PetEventItem* EventItem;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x1ef3e8c

--------------------------------
Class: PetEventPlayerStateTypeSt
	enum PawnState;//[Offset: 0x0, Size: 1]
	byte StateChangeType;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, FString CallFunc_Array_Get_Item5, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, FString CallFunc_Array_Get_Item6, float CallFunc_Conv_StringToFloat_ReturnValue6, Rotator CallFunc_MakeRotator_ReturnValue, PetAttachInfo K2Node_MakeStruct_PetAttachInfo);// 0x29fa2f4

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0xbc, Size: 4]
	PetAttachInfo AttachInfo;//[Offset: 0xc0, Size: 32]
	PetAttachInfo FollowAttachInfo;//[Offset: 0xe0, Size: 32]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x100, Size: 32]
	PetAttachInfo CurAttachInfo;//[Offset: 0x120, Size: 32]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x140, Size: 12]
	byte FollowType;//[Offset: 0x14c, Size: 1]
	int[] ParachuteEquipItems;//[Offset: 0x150, Size: 12]
	enum[] PredictOwnerStates;//[Offset: 0x15c, Size: 12]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x1f538b8
	void OnPetStateChanged(byte State, bool IsEnter);// 0x1ee8cb0
	STExtraPetCharacter* GetPetCharacter();// 0x1f53890
	PetAttachInfo GetCurrentAttachInfo();// 0x1f53844
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x29fa2f4

--------------------------------
Class: FixPetAttachInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int PetId;//[Offset: 0x4, Size: 4]
	int Priority;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0, Size: 8]
	Vector AttachOffset;//[Offset: 0x8, Size: 12]
	Rotator AttachRotation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BP_STRUCT_PetPlayerOffsetTable_type
	int Priority_0_4534D740055E57BF79E04F1E0692B319;//[Offset: 0x0, Size: 4]
	FString ItemPetId_1_71823800373EB13632B5E93E0D64F5B4;//[Offset: 0x4, Size: 12]
	FString RelativeRotation_2_622D21C02715F60B1B6C03BB0A3B34BE;//[Offset: 0x10, Size: 12]
	FString RelativeLocation_3_7CA9FC003FA2AAD634B0A8A1090B10DE;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: BP_STRUCT_PetPlayerEmoteTable_type
	int PetAnimID_0_0B8EF24060CA81E759CB86EB0B9DC804;//[Offset: 0x0, Size: 4]
	int PetResponse_1_315B018079F8B5826BBD3D2B05F09FE5;//[Offset: 0x4, Size: 4]
	FString PlayerEmotePetId_2_6616D2C02A115EB56446D9F30AF4E924;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BasePetController_BP_C.STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x388, Size: 4]
	void CalcInAirAttackArea();// 0x29fa2f4
	void OnPlayerStopEmote(int EmoteId, int Reason, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x29fa2f4
	void OnPlayerPlayEmote(int Emote, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnAirAttackEvent(byte airattacktype, int waveindex);// 0x29fa2f4
	void ExecuteUbergraph_BasePetController_BP(int EntryPoint, BehaviorTreeComponent* CallFunc_GetComponentByClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_airattacktype, int K2Node_CustomEvent_waveindex, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsServer_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue2, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue3, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess2);// 0x29fa2f4
	BehaviorTree* CurBT;//[Offset: 0x38c, Size: 4]
	FName PetOwnerEmoteId;//[Offset: 0x390, Size: 8]
	FName IsAirAttacking;//[Offset: 0x398, Size: 8]
	FName AirAttackArea;//[Offset: 0x3a0, Size: 8]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x3a8, Size: 8]
	Vector CurAttackArea;//[Offset: 0x3b0, Size: 12]

--------------------------------
Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float PetBlockDetectionDistance;//[Offset: 0x378, Size: 4]
	float PetBlockDetectionInterval;//[Offset: 0x37c, Size: 4]
	int PetBlockDetectionSampleCount;//[Offset: 0x380, Size: 4]

--------------------------------
Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BP_STRUCT_PetActPlayerStateTable_type
	int PetID_0_7B9998C012D880D53C70B12C0D2280B4;//[Offset: 0x0, Size: 4]
	int PetActionID_1_26FA70406D0CF0E967A9660B078EE2C4;//[Offset: 0x4, Size: 4]
	FString PetLimiteState_3_107B0EC027578F8F39A3C9B002BE9A85;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_STRUCT_PetLevelTable_type
	int ActionID1_0_54564EC00C46D1792A24097D014062A1;//[Offset: 0x0, Size: 4]
	int KeyID_1_38C8754040A625D32E969D6F0A59B604;//[Offset: 0x4, Size: 4]
	int ActionID2_2_54574F000C46D17A2A24097C014062A2;//[Offset: 0x8, Size: 4]
	int PetLevel_3_0EFEB00033E6898053D6CAD40B4F695C;//[Offset: 0xc, Size: 4]
	int ActionCnt_4_6ED1A8806F6E05482A2429B001406784;//[Offset: 0x10, Size: 4]
	int PetID_5_0C7F3540138C63E52ED3D2E20A5EB304;//[Offset: 0x14, Size: 4]
	int ActionID5_6_545A4FC00C46D17D2A240979014062A5;//[Offset: 0x18, Size: 4]
	int ActionID4_7_54594F800C46D17C2A24097A014062A4;//[Offset: 0x1c, Size: 4]
	int ActionID3_8_54584F400C46D17B2A24097B014062A3;//[Offset: 0x20, Size: 4]
	int PetNeedExp_9_5C9DFC4020A68805594D9EAF091E67B0;//[Offset: 0x24, Size: 4]
	FString PetCharacter_10_0EB0D54006ABD083521623E20D6C9E82;//[Offset: 0x28, Size: 12]
	FString AllAction_11_64FEE580365AA5C6529430360BA1003E;//[Offset: 0x34, Size: 12]
	FString LobbyPetBP_12_6856D48026D8CEBA5718878204437A40;//[Offset: 0x40, Size: 12]
	FString PetFPPCharacter_13_2475CEC05F8CAFC156D174270BE8BD92;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x24, Size: 1]
	byte StateChangeType;//[Offset: 0x25, Size: 1]

--------------------------------
Class: BP_STRUCT_PetActionTable_type
	int PetID_7_6745CEC017101D417C9B58B90A755B44;//[Offset: 0x0, Size: 4]
	FString PetAnimRes_8_1054B74062846F873F7F61870FE97D73;//[Offset: 0x4, Size: 12]
	FString PetActionName_9_59EBE3401D89CA4B649608870B1AA8E5;//[Offset: 0x10, Size: 12]
	int PetActionID_10_44C4A640765EB8DD578572F800DB1934;//[Offset: 0x1c, Size: 4]
	FString PetActionIcon_11_0E01054077EEE9A96496CC090B191A8E;//[Offset: 0x20, Size: 12]
	int PetActionScale_13_14B83D0078112AE64FD26A6101879B95;//[Offset: 0x2c, Size: 4]
	FString PetActionOffset_14_563A3CC0122E069573D974410ABC02D4;//[Offset: 0x30, Size: 12]
	int SortKey_15_4284558068BCA7003662F2D30BFA2BB9;//[Offset: 0x3c, Size: 4]
	int ShowInLobby_17_19FCF54003CF4A8B499026D50669DDB9;//[Offset: 0x40, Size: 4]
	int PetLevelSequence_18_620F97C0416DE81971E437D407E050C5;//[Offset: 0x44, Size: 4]
	int MasterLevelSequence_19_7E9F6880389AC7D05D27B6F50E5E3325;//[Offset: 0x48, Size: 4]
	int MasterActionID_20_41F257005172E64A6B5508ED0B3D43A4;//[Offset: 0x4c, Size: 4]
	FString PetActionDes_21_4DEDCA007AFFDB12510AFD0F0DB194C3;//[Offset: 0x50, Size: 12]
	int PetActionQuality_22_0B0B3D40109F72EB3D20AE6206BBA139;//[Offset: 0x5c, Size: 4]
	FString LobbyPetAnimRes_23_14DFB5407421995D3FD421710D4C3683;//[Offset: 0x60, Size: 12]
	int NeedResetTransform_24_2D3D5000702BED64355585DF0DB7ED2D;//[Offset: 0x6c, Size: 4]
	int IsShowInWorkshop_25_6C8D7D80144A232A340D11C70E5E4DE0;//[Offset: 0x70, Size: 4]

--------------------------------
Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void PetHasEquippedItem(int ID, out bool Out, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HasLogicEquipped_ReturnValue);// 0x29fa2f4
	void PetUnequipItemById(int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x29fa2f4
	void PetEquipItemById(int ID, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x29fa2f4
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x29fa2f4

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void InitMasterComponent();// 0x1f51784
	void Initialize();// 0x1e50178
	void InitialAvatarParam();// 0x1dd8bcc

--------------------------------
Class: BP_STRUCT_PetDressBlueprintTable_type
	int Slot_0_31125FC006688BBB2E6646B20FAFCD34;//[Offset: 0x0, Size: 4]
	int ID_1_688F3A8033A7814C565560B30E5FAEF4;//[Offset: 0x4, Size: 4]
	FString Path_2_51589A804E9002622E9485530FAF46F8;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xad8, Size: 4]
	enum GetForceHideState(int InSlotID, Actor* CallFunc_GetOwner_ReturnValue, enum CallFunc_GetForceHideState_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x29fa2f4
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	bool IsEnableItemDownload(int ItemID);// 0x29fa2f4
	SoftObjectPath GetBatchDefaultBodyPath(int ___int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x29fa2f4
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x29fa2f4
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnequipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x29fa2f4
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x29fa2f4
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x29fa2f4
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, int ___int_Variable2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, int ___int_Variable3);// 0x29fa2f4
	bool BPClientPostProcessViewDataMiddle();// 0x29fa2f4
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x29fa2f4
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x29fa2f4
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x29fa2f4
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum ___byte_Variable, enum CallFunc_IntToType_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int ___int_Variable7, int ___int_Variable8, int ___int_Variable9, int ___int_Variable10, int ___int_Variable11, int ___int_Variable12, int ___int_Variable13, int ___int_Variable14, int ___int_Variable15, int ___int_Variable16, int ___int_Variable17, int ___int_Variable18, int K2Node_Select_Default);// 0x29fa2f4
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x29fa2f4
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x29fa2f4
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x29fa2f4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x29fa2f4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x29fa2f4
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x29fa2f4
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x29fa2f4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x29fa2f4
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x29fa2f4
	void ClearEventFromOnAvatarEquippedEvent();// 0x29fa2f4
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason);// 0x29fa2f4
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xadc, Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xae0, Size: 4]
	int[] HoodClothSubTypeMap;//[Offset: 0xae4, Size: 12]
	enum PreEquipClothReason;//[Offset: 0xaf0, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0xaf8, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0xb20, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 1]

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x29fa2f4
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x29fa2f4
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x29fa2f4
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x29fa2f4
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x29fa2f4
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x29fa2f4
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_WrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x29fa2f4
	bool HandlePickup(out interface classByteProperty ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x29fa2f4
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, ItemAssociation K2Node_MakeStruct_ItemAssociation, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue3, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x29fa2f4
	STExtraPlayerController* OwningPlayerController;//[Offset: 0x8f0, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x8f4, Size: 4]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0x8f8, Size: 4]
	Transform SourceWrapperTrans;//[Offset: 0x900, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0x930, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x960, Size: 4]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0x964, Size: 4]
	byte SlotNameConfig;//[Offset: 0x968, Size: 1]
	byte ForceGender;//[Offset: 0x969, Size: 1]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xb4, Size: 12]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xc0, Size: 60]
	<int,enum> TClipTypeMap;//[Offset: 0xfc, Size: 60]
	<int,ItemRecordData> mapItemRecord;//[Offset: 0x138, Size: 60]
	<FString,ItemBeOverrideRecordData> BeOverrideMapItemMap;//[Offset: 0x174, Size: 60]
	<int,int> mapPickupBullet;//[Offset: 0x1b0, Size: 60]
	<int,enum> mapAttachPos;//[Offset: 0x1ec, Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x228, Size: 372]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x39c, Size: 364]
	PickupProposeData proposeData;//[Offset: 0x508, Size: 332]
	int[] NeedToShowTypeList;//[Offset: 0x654, Size: 12]
	int[] ConsumeableMissionItemID;//[Offset: 0x660, Size: 12]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x66c, Size: 12]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x678, Size: 60]
	<FName,TagItemList> ItemTag;//[Offset: 0x6b4, Size: 60]
	<int,ItemTagList> ItemTagMap;//[Offset: 0x6f0, Size: 60]
	enum CurrentGameModeType;//[Offset: 0x738, Size: 1]
	FString ItemTableName;//[Offset: 0x73c, Size: 12]
	FString ItemTagTableName;//[Offset: 0x748, Size: 12]
	FString AttachTableName;//[Offset: 0x754, Size: 12]
	FString SuitEmoteTableName;//[Offset: 0x760, Size: 12]
	FString OccupationTableName;//[Offset: 0x76c, Size: 12]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x778, Size: 12]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x784, Size: 60]
	ActivityItemData ActivityData;//[Offset: 0x7c0, Size: 48]
	ActivityConfigData ActivityConfig;//[Offset: 0x7f0, Size: 60]
	SpecialItemData SpecialData;//[Offset: 0x82c, Size: 1]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82d, Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0x830, Size: 60]
	<int,int> gunMainTypeUseful;//[Offset: 0x86c, Size: 60]
	<int,int> attachMainTypeUseful;//[Offset: 0x8a8, Size: 60]
	<int,int> bulletMainTypeUseful;//[Offset: 0x8e4, Size: 60]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x920, Size: 60]
	<int,int> constructTypeUseful;//[Offset: 0x95c, Size: 60]
	<int,int> skillpropsTypeUseful;//[Offset: 0x998, Size: 60]
	<int,bool> itemPathExist;//[Offset: 0x9d4, Size: 60]
	int[] ItemToDownload;//[Offset: 0xa10, Size: 12]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0xa1c, Size: 4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0xa24, Size: 60]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 1]
	int[] TombBoxItemBlackList;//[Offset: 0xa64, Size: 12]
	int CharacterVirtualItem_Type;//[Offset: 0xa70, Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0xa74, Size: 4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0xa78, Size: 60]
	<int> NoUseVirtualItemIDs;//[Offset: 0xab4, Size: 60]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	void ResetItemToDownload();// 0x1e13d3c
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x1e13cac
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x1e13bf0
	void OnGameModeTypeChanged();// 0x1e13bd4
	void ItemTableAdditiveOverride(FString OverrideItemTableName, bool bOverride);// 0x1e13acc
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x1e13a10
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x1e138b4
	bool IsParachuteItemType(int ItemID);// 0x1deb314
	bool IsInPveMode();// 0x29fa2f4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x1e137e8
	bool IsGrenadeCanAutoSwitch(int ItemID);// 0x1dc7f48
	bool IsGlideItemType(int ItemID);// 0x1e13760
	bool IsGhillieSuitItemType(int ItemID);// 0x1e136d8
	bool IsEquipmentItem(int ItemID);// 0x1e13650
	bool IsConsumableMissionItemType(int ItemID);// 0x1e135c8
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x1e13504
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache, bool bLobby, bool bForceLobby);// 0x1e1337c
	bool Is3BackpackID(int ID);// 0x29fa2f4
	void Initialize();// 0x1e13368
	void InitialItemTable();// 0x1de831c
	bool HasTagSub(int ItemID, out const FName TagName);// 0x1e13290
	bool HasTag(int ItemID, out const FName TagName);// 0x1e131b8
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x29fa2f4
	FString GetRawBattleTextByType(enum Type, int InSubType);// 0x1e13064
	FString GetRawBattleTextByRawTextID(int ID);// 0x1e12f54
	int GetPendantIDByWeaponID(int WeaponId);// 0x1e12ecc
	int GetItemSubTypeID(int SpecificID);// 0x29fa2f4
	ItemRecordData GetItemRecord(int ItemID);// 0x1e12e20
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x29fa2f4
	int GetGrenadePriorityByType(const byte grenadeType);// 0x1e12d98
	int GetEquipmentLevel(int ItemID);// 0x1df65b0
	int GetEquipmentBagLevel(int ItemID);// 0x1e12d10
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x1e12c5c
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x1e12bd4
	FString GetBPTableNameByItemID(out const ItemDefineID DefineID);// 0x1e12aac
	int GetBPIDByResID(int resID);// 0x1e12a24
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out const ItemDefineID DefineID);// 0x1e1289c
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID);// 0x1e1277c
	FString GetBattleItemHandlePath(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x1e125b4
	class Object GetBattleItemHandleClass(out const ItemDefineID DefineID);// 0x1e12514
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x1e12458
	int[] GetAttachOfWeapon(int WeaponId);// 0x1e12350
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x1e12224
	TagItemList FindItemTag(out const FName TagName);// 0x1e1214c
	BattleItemHandleBase* CreateVirtualItemHandle(out const ItemDefineID DefineID, Object* Outer);// 0x1e12068
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer);// 0x1e11f8c
	BattleItemHandleBase* CreateBattleItemHandle(out const ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x1e11e5c
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x1e11da8
	BattleItemData ConstructBattleItemDataByDefineID(out const ItemDefineID DefineID);// 0x1e11cdc
	void ClearItemRecord();// 0x1e11cc8
	bool CheckItem(int ItemTableID);// 0x1e11c40
	bool CheckHasItemRecord(int ItemID);// 0x1e11bc0
	bool CanNotAutoSwitchToGrenade(int InGrenadeID);// 0x1e11b38
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x1e11a74

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ItemBeOverrideRecordData
	<int,ItemRecordData> BeOverrideMapItemRecord;//[Offset: 0x0, Size: 60]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 4]
	int LimitMedical;//[Offset: 0x4, Size: 4]
	int LimitFirstAidKit;//[Offset: 0x8, Size: 4]
	int LimitAnodyne;//[Offset: 0xc, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x10, Size: 4]
	int LimitAdrenaline;//[Offset: 0x14, Size: 4]
	int LimitShouliudan;//[Offset: 0x18, Size: 4]
	int LimitYanwudan;//[Offset: 0x1c, Size: 4]
	int LimitZhenbaodan;//[Offset: 0x20, Size: 4]
	int LimitRanshaodan;//[Offset: 0x24, Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x28, Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x2c, Size: 4]
	int LimitAntidote;//[Offset: 0x30, Size: 4]
	int LimitBatteryChip;//[Offset: 0x34, Size: 4]
	int LimitGameCoin;//[Offset: 0x38, Size: 4]
	int LimitBullet9mm;//[Offset: 0x3c, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x40, Size: 4]
	int Limit12koujing;//[Offset: 0x44, Size: 4]
	int Limit45koujing;//[Offset: 0x48, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x4c, Size: 4]
	int Limitbolt;//[Offset: 0x50, Size: 4]
	int LimitBullet5;//[Offset: 0x54, Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	int LimitSniper2X;//[Offset: 0x5c, Size: 4]
	int LimitSniper3X;//[Offset: 0x60, Size: 4]
	int LimitSniper4X;//[Offset: 0x64, Size: 4]
	int LimitSniper6X;//[Offset: 0x68, Size: 4]
	int LimitSniper8X;//[Offset: 0x6c, Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int LimitSkillProps;//[Offset: 0x74, Size: 4]
	int LimitSnowMan;//[Offset: 0x78, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	int AutoPickClipType;//[Offset: 0x80, Size: 4]
	<int,int> LimitDrugMap;//[Offset: 0x84, Size: 60]
	<int,int> LimitThrowObjMap;//[Offset: 0xc0, Size: 60]
	<int,int> LimitMultipleMirrorMap;//[Offset: 0xfc, Size: 60]
	<int,int> LimitFixConsumeItemMap;//[Offset: 0x138, Size: 60]

--------------------------------
Class: PickupSettingForTPlan
	int LimitSkillProps;//[Offset: 0x0, Size: 4]
	<int,int> LimitBulletMap_XT;//[Offset: 0x4, Size: 60]
	<int,int> LimitDrugMap_XT;//[Offset: 0x40, Size: 60]
	<int,int> LimitThrowObjMap_XT;//[Offset: 0x7c, Size: 60]
	<int,int> LimitMultipleMirrorMap_XT;//[Offset: 0xb8, Size: 60]
	<int,int> LimitNormalInfillingMap_XT;//[Offset: 0xf4, Size: 60]
	<int,int> LimitHalloweenInfillingMap_XT;//[Offset: 0x130, Size: 60]

--------------------------------
Class: PickupProposeData
	PickupFirstCount[] pickFirst;//[Offset: 0x0, Size: 12]
	int closeSubType;//[Offset: 0xc, Size: 4]
	int crossbowSubType;//[Offset: 0x10, Size: 4]
	int panID;//[Offset: 0x14, Size: 4]
	int pistolSubType;//[Offset: 0x18, Size: 4]
	int gunType;//[Offset: 0x1c, Size: 4]
	int specialType;//[Offset: 0x20, Size: 4]
	int specialType2;//[Offset: 0x24, Size: 4]
	int lens2ID;//[Offset: 0x28, Size: 4]
	int lens3ID;//[Offset: 0x2c, Size: 4]
	int lens4ID;//[Offset: 0x30, Size: 4]
	int lens6ID;//[Offset: 0x34, Size: 4]
	int lens8ID;//[Offset: 0x38, Size: 4]
	int ID2Type;//[Offset: 0x3c, Size: 4]
	int pistolClipSubType;//[Offset: 0x40, Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x44, Size: 4]
	int SniperClipSubType;//[Offset: 0x48, Size: 4]
	int RifleClipSubType;//[Offset: 0x4c, Size: 4]
	int gasSubID;//[Offset: 0x50, Size: 4]
	int backSubType;//[Offset: 0x54, Size: 4]
	int back3ID;//[Offset: 0x58, Size: 4]
	int BandageID;//[Offset: 0x5c, Size: 4]
	int QuickBandageID;//[Offset: 0x60, Size: 4]
	int EnergyDrinksID;//[Offset: 0x64, Size: 4]
	int AdrenalineID;//[Offset: 0x68, Size: 4]
	int AnodyneID;//[Offset: 0x6c, Size: 4]
	int Medical1ID;//[Offset: 0x70, Size: 4]
	int QuickMedical1ID;//[Offset: 0x74, Size: 4]
	int Medical2ID;//[Offset: 0x78, Size: 4]
	int AntidoteID;//[Offset: 0x7c, Size: 4]
	int BatteryChipID;//[Offset: 0x80, Size: 4]
	int GameCoinID;//[Offset: 0x84, Size: 4]
	int ZhenBaoDan;//[Offset: 0x88, Size: 4]
	int YanWuDan;//[Offset: 0x8c, Size: 4]
	int RanShaoPing;//[Offset: 0x90, Size: 4]
	int ShouLei;//[Offset: 0x94, Size: 4]
	int[] SideMirrorList;//[Offset: 0x98, Size: 12]
	int[] MirrorList;//[Offset: 0xa4, Size: 12]
	int GrenadeZombie;//[Offset: 0xb0, Size: 4]
	int GrenadeYedan;//[Offset: 0xb4, Size: 4]
	int DefaultMedicineNum;//[Offset: 0xb8, Size: 4]
	int helmetSubType;//[Offset: 0xbc, Size: 4]
	int armorSubType;//[Offset: 0xc0, Size: 4]
	int ScoreItemSubType;//[Offset: 0xc4, Size: 4]
	int SpecialNoDropItemSubType;//[Offset: 0xc8, Size: 4]
	int IceDrinkItemSubType;//[Offset: 0xcc, Size: 4]
	int IsAutoPickUpTaskSubType;//[Offset: 0xd0, Size: 4]
	int[] carryOnPlane;//[Offset: 0xd4, Size: 12]
	int CapacityThreshold;//[Offset: 0xe0, Size: 4]
	int GlideSubType;//[Offset: 0xe4, Size: 4]
	int ParachuteItemSubType;//[Offset: 0xe8, Size: 4]
	int revivalCardID;//[Offset: 0xec, Size: 4]
	int SnowManID;//[Offset: 0xf0, Size: 4]
	float revivalCardValidTime;//[Offset: 0xf4, Size: 4]
	int[] firewoodPriority;//[Offset: 0xf8, Size: 12]
	int[] meatPriority;//[Offset: 0x104, Size: 12]
	int[] UAVList;//[Offset: 0x110, Size: 12]
	int[] ElectricityList;//[Offset: 0x11c, Size: 12]
	int[] ToUseInBackpackSubList;//[Offset: 0x128, Size: 12]
	int[] ToUseInBackpackIDList;//[Offset: 0x134, Size: 12]
	int[] notExtractItemIDList;//[Offset: 0x140, Size: 12]

--------------------------------
Class: PickupFirstCount
	int pickID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TagItemList
	int[] tagList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ItemTagList
	<FName,int> TagValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ActivityItemData
	ItemDefineID PumpkinLanternItem;//[Offset: 0x0, Size: 24]
	ItemDefineID PumpkinEnergyItem;//[Offset: 0x18, Size: 24]

--------------------------------
Class: ActivityConfigData
	<int,int> Lv2EnergyCount;//[Offset: 0x0, Size: 60]

--------------------------------
Class: SpecialItemData

--------------------------------
Class: EquipmentBrief
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemSubType;//[Offset: 0x4, Size: 4]
	int BPID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 12]
	FString WhiteIconPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xaf8, Size: 4]
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue);// 0x29fa2f4
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x29fa2f4
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int ___int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x29fa2f4
	bool IsConsumableMissionItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x29fa2f4
	int GetGrenadePriorityByType(byte grenadeType, int CallFunc_MakeLiteralInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_MakeLiteralInt_ReturnValue2, int CallFunc_MakeLiteralInt_ReturnValue3, int CallFunc_MakeLiteralInt_ReturnValue4, int CallFunc_MakeLiteralInt_ReturnValue5, int CallFunc_MakeLiteralInt_ReturnValue6, int CallFunc_MakeLiteralInt_ReturnValue7, int CallFunc_MakeLiteralInt_ReturnValue8, int CallFunc_MakeLiteralInt_ReturnValue9, int CallFunc_MakeLiteralInt_ReturnValue10, int CallFunc_MakeLiteralInt_ReturnValue11, int CallFunc_MakeLiteralInt_ReturnValue12, int CallFunc_MakeLiteralInt_ReturnValue13, int CallFunc_MakeLiteralInt_ReturnValue14, int CallFunc_MakeLiteralInt_ReturnValue15);// 0x29fa2f4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	bool IsEquipmentItem(int ItemID, bool CallFunc_Map_Contains_ReturnValue);// 0x29fa2f4
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	int GetPendantIDByWeaponID(int WeaponId, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x29fa2f4
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x29fa2f4
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x29fa2f4
	bool IsGlideItemType(int ItemID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	bool IsGhillieSuitItemType(int ItemID, bool CallFunc_Array_Contains_ReturnValue);// 0x29fa2f4
	int GetEquipmentBagLevel(int ItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetGameStatus_ReturnValue, FString CallFunc_ToLower_ReturnValue, bool K2Node_SwitchString_CmpSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x29fa2f4
	int GetEquipmentLevel(int ItemID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x29fa2f4
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x29fa2f4
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	void ModifySetting();// 0x29fa2f4
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x29fa2f4
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FName CallFunc_Array_Get_Item, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x29fa2f4
	int GetBPIDByResID(int resID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x29fa2f4
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x29fa2f4
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x29fa2f4
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x29fa2f4
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x29fa2f4
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x29fa2f4
	int GetItemSubTypeID(int SpecificID, ItemRecordData CallFunc_GetItemRecord_ReturnValue);// 0x29fa2f4
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x29fa2f4
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow);// 0x29fa2f4
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x29fa2f4
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface classByteProperty CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue);// 0x29fa2f4
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x29fa2f4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x29fa2f4
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle);// 0x29fa2f4
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x29fa2f4
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x29fa2f4
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, ItemRecordData CallFunc_GetItemTableRowByItemTableID_ItemTableRow, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x29fa2f4
	void GetItemTableRowByItemTableID(int ID, out ItemRecordData ItemTableRow, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x29fa2f4
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x29fa2f4
	void InitialItemTable();// 0x29fa2f4
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x29fa2f4
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0xafc, Size: 12]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0xb08, Size: 60]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xb44, Size: 12]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xb50, Size: 60]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xb8c, Size: 60]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xbc8, Size: 60]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xc04, Size: 60]
	int[] GhillieSuitItem;//[Offset: 0xc40, Size: 12]

--------------------------------
Class: BP_STRUCT_DrinkCompoundConfig_type
	int awardID_0_2BBEB1403F5A9B0B0EB1D00709609964;//[Offset: 0x0, Size: 4]
	int awardNum_1_37D1DA0026A0923C7757AA8B0609AE2D;//[Offset: 0x4, Size: 4]
	int descID_2_1FD235403A90703F024A7AEA0BB716C4;//[Offset: 0x8, Size: 4]
	int ID_3_2F902D8037E77FA46237D6880B8119C4;//[Offset: 0xc, Size: 4]
	int isMayCarry_4_2AB2AB40581603397B72EE3809C59429;//[Offset: 0x10, Size: 4]
	int JpKrAwardID_5_49A847000D2541FE5295535A097982A4;//[Offset: 0x14, Size: 4]
	int JpKrAwardNum_6_2ECC8FC045A856D735DAF8570798322D;//[Offset: 0x18, Size: 4]
	FString Name_7_3AE82A806F13962C42B917EB011A5DB5;//[Offset: 0x1c, Size: 12]
	FString solt_8_7F0FFAC007CB390F4285A58D011A9FB4;//[Offset: 0x28, Size: 12]
	int EmoteID_9_4C84EC007C583218352536360B9EB844;//[Offset: 0x34, Size: 4]
	FString PhizExplain_10_2575C54064E510CF536AC4300D724F0E;//[Offset: 0x38, Size: 12]
	FString EmoteVoiceName_11_60ECC6803A15389C4AA097EC0673F2D5;//[Offset: 0x44, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponAttrBPTable_type
	FString AttachmentSkinIDList_1_68C117003440A0EE1A2DDA300D678804;//[Offset: 0x0, Size: 12]
	int BPID_2_5A4F6D006A4E746E1527F1660046AA94;//[Offset: 0xc, Size: 4]
	int[] AttachmentIDList_a_5_6E7001C028E30A41653FBE36025F1751;//[Offset: 0x10, Size: 12]
	int[] ParentIDList_a_6_3486FA0030D9987A663B62F90FFCB731;//[Offset: 0x1c, Size: 12]
	FString DeadInventoryBoxPath_7_1883E1C0339C8C7958767FF2080EC2C8;//[Offset: 0x28, Size: 12]
	int PendantID_8_32B77B0039C6C1D620F9E77400A423B4;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0, Size: 12]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0xc, Size: 4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x10, Size: 4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x14, Size: 12]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x20, Size: 12]

--------------------------------
Class: BP_STRUCT_ItemSoundTable_type
	FString EquipSound_0_068B68C066212493052EBF3305D63E14;//[Offset: 0x0, Size: 12]
	FString DropSound_1_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0xc, Size: 12]
	int ID_2_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0x18, Size: 4]
	FString PickUpSound_3_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x1c, Size: 12]
	FString DropBank_4_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x28, Size: 12]
	FString EquipBank_5_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x34, Size: 12]
	FString UnEquipBank_6_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x40, Size: 12]
	FString UnEquipSound_7_0376B980772F43423C77A2D80D665704;//[Offset: 0x4c, Size: 12]
	FString PickUpBank_8_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x58, Size: 12]

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0, Size: 12]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc, Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10, Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14, Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c, Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24, Size: 12]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30, Size: 12]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c, Size: 12]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48, Size: 12]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54, Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c, Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60, Size: 12]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c, Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x70, Size: 12]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x7c, Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x80, Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x84, Size: 12]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x90, Size: 12]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0x9c, Size: 12]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xa8, Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xac, Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xb4, Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xb8, Size: 4]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xbc, Size: 12]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0xc8, Size: 12]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0xd4, Size: 12]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0xe0, Size: 12]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0xec, Size: 4]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0xf0, Size: 4]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0xf4, Size: 12]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x100, Size: 12]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x10c, Size: 4]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x110, Size: 4]
	FString QualityRate_78_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x114, Size: 12]
	int character_param_81_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x120, Size: 4]
	int JKBPID_82_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x124, Size: 4]
	int ItemSoundID_83_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x128, Size: 4]
	int ResSeprateType_84_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x12c, Size: 4]
	int CanIntoBag_85_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x130, Size: 4]
	int Electricity_86_19A7E9806DE4A79A2FAD5505041B42E9;//[Offset: 0x134, Size: 4]
	int ItemPickupRule_87_49300E005A58193E16239C7A00F80F05;//[Offset: 0x138, Size: 4]

--------------------------------
Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0, Size: 4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4, Size: 4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8, Size: 4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc, Size: 4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10, Size: 4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14, Size: 4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18, Size: 4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x29fa2f4

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: BP_STRUCT_AvatarDefaultConfig_type
	int id_0_582DD74020EEE8C12D00E1A40C84B664;//[Offset: 0x0, Size: 4]
	FString pant_1_00F930C0654EFFCD6B08CAF404B7FCD4;//[Offset: 0x4, Size: 12]
	FString shirt_2_53D54E8062374FD817805CCA0B7038D4;//[Offset: 0x10, Size: 12]
	FString shoe_3_12522FC065073BE56B0E507104B703D5;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x800, Size: 4]
	float FreeCameraOffsetRadius;//[Offset: 0x820, Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x824, Size: 60]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x864, Size: 12]
	float ProbeRadius;//[Offset: 0x870, Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x874, Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x878, Size: 4]
	float DefaultFieldOfView;//[Offset: 0x87c, Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x880, Size: 4]
	bool EnableUsePawnRotationCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x1f481c0

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x3ac, Size: 28]
	Transform InVehicleCameraTrans;//[Offset: 0x3d0, Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x400, Size: 28]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x1ebcf0c

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 4]
	void ResetScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x29fa2f4
	void DownScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x29fa2f4
	void ChangeScopeTPPGlassMat(MeshComponent* ScopeMeshComp, int ScopeID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_WeaponScopeGlassMat_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x29fa2f4
	void GetScopeMatTableKey(STExtraPlayerController* PlayerController, STExtraShootWeapon* Weapon, enum ScopeType, out FString Key, int MatTableKey, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsScopeSpecialMatExist_exist, int CallFunc_IsScopeSpecialMatExist_MatTableKey, int CallFunc_GetScopeID_ReturnValue, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x29fa2f4
	void IsScopeSpecialMatExist(STExtraWeapon* Weapon, enum ScopeType, out bool exist, out int MatTableKey, int ___int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AvatarDIYEntity* CallFunc_GetAvatarEntity_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_GetLoadedHandle_ReturnValue, BackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable2, WeaponAttachmentConfig CallFunc_GetAttachmentConfig_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x29fa2f4
	float SwitchAngledSightConfigMaterial(bool forceSwitch, MeshComponent* ScopeMeshComp, int AngledSightID, bool CallFunc_IsServer_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue3, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, MaterialInterface* CallFunc_GetMaterial_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x29fa2f4
	float ShowAngledSightTPPMaterial(bool forceADSState, float CallFunc_SwitchAngledSightConfigMaterial_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	float SwitchSightConfigMaterial(int SpecialMatFlag, STExtraShootWeapon* CurShootWeapon, MeshComponent* ScopeMeshComp, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x29fa2f4
	float ShowReflectorSightTPPMaterial(bool forceADSState, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, float CallFunc_SwitchSightConfigMaterial_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, byte CallFunc_GetCurSightType_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetScopeID_ReturnValue);// 0x29fa2f4
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled, float CallFunc_GetCurrentScopeZoomFov_MinFov, float CallFunc_GetCurrentScopeZoomFov_CurFov, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, byte CallFunc_GetSightType_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FName CallFunc_GetFNameFromTwoID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, int CallFunc_GetPlatformInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue);// 0x29fa2f4
	void ReloadEvent();// 0x29fa2f4
	void SetTagCulling(bool IsUse);// 0x29fa2f4
	void PlayScopeInTimeline();// 0x29fa2f4
	void ScopeInEnd();// 0x29fa2f4
	void ScopeOutEnd();// 0x29fa2f4
	void StopScopeIn();// 0x29fa2f4
	void AttachToSight();// 0x29fa2f4
	void AttachTo(SceneComponent* NewParam);// 0x29fa2f4
	void Detach(SceneComponent* NewParam);// 0x29fa2f4
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void AutoReloadEvent(STExtraShootWeapon* ShootWeapon);// 0x29fa2f4
	void AttachToSightKeepTransform();// 0x29fa2f4
	void ExecuteUbergraph_FPPComponent(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetSightType_ReturnValue, bool K2Node_Event_IsUse, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue3, bool CallFunc_IsValid_ReturnValue, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, SceneComponent* K2Node_CustomEvent_NewParam2, SceneComponent* K2Node_CustomEvent_NewParam, float K2Node_Event_DeltaSeconds, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_K2_AttachToComponent_ReturnValue2);// 0x29fa2f4
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x224, Size: 4]
	float DeltaTime;//[Offset: 0x228, Size: 4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x22c, Size: 4]
	StaticMesh* SightLens;//[Offset: 0x230, Size: 4]

--------------------------------
Class: BP_STRUCT_WeaponScopeGlassMat_type
	FString MaterialPath_0_5C2E3480396102E244C9A5850B9B5408;//[Offset: 0x0, Size: 12]
	FString ScopeID_1_0872E740109AD1491DFC990E05CF6BF4;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xb0, Size: 496]
	class AnimInstance* animBP;//[Offset: 0x2a0, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x2a8, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x2d0, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x2dc, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x2e8, Size: 4]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x1e18548
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x1e1852c
	bool IsVirtualAvatarHandle();// 0x1e184fc
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x1e18484
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x1e183b0
	int GetSubSlotID();// 0x1e18380
	int GetSlotID();// 0x1e18350
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x1e182e4
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x1e1811c
	WeaponAttachmentConfig GetAttachmentConfig();// 0x1e180b0
	class Object GetAnimationBP();// 0x1e18080
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x1e17f6c

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum SubSlot;//[Offset: 0xd, Size: 1]
	enum SightType;//[Offset: 0xe, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x20, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x2c, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68, Size: 328]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1b0, Size: 12]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1bc, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1c8, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1d8, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 328]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x158, Size: 12]
	int replacedAttachmentMatIndex;//[Offset: 0x164, Size: 4]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponScopeMaterial_type
	FString ScopeGroupID_0_289E4F406E35B6A1337959050F04DD14;//[Offset: 0x0, Size: 12]
	FString ScopeMaterial_1_4BEFD48030177D8A6925FD700F8D124C;//[Offset: 0xc, Size: 12]
	FString ScopeMaterialSocket_2_63700EC07064DCC960E067A00E289394;//[Offset: 0x18, Size: 12]
	FString ScopeMaterialColor_3_1DC014403E6A0BAB129284A605F29442;//[Offset: 0x24, Size: 12]

--------------------------------
Class: Vault_Controller_C.PlayerVaultComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x150, Size: 4]
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart, Vector CurPosition, bool CallFunc_IsVaultOnBase_ShouldVault, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetBaseLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue);// 0x29fa2f4
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos, bool CallFunc_IsVaultOnBase_ShouldVault, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x29fa2f4
	void PrintStartPosition(FString Prefix, Vector Position, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x29fa2f4
	void IsVaultOnBase(out bool ShouldVault, bool CallFunc_CheckBaseIsMoveable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void PrintHeight(float ShouldHeight, float NowHeight, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x29fa2f4
	void GetRealStartZHeight(out float ResStartZ, bool CallFunc_IsVaultOnBase_ShouldVault, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_Conv_TextToString_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2);// 0x29fa2f4
	void GetDataStartPosition(out Vector StartPos, bool CallFunc_IsVaultOnBase_ShouldVault, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_Conv_TextToString_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue2);// 0x29fa2f4
	void PrintDebugString(float shoulddis, float nowDis, float ZOffset, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x29fa2f4
	void EnsurePawnClientLeaveVault();// 0x29fa2f4
	void JumpVaultCheck(out bool Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	void SetShouldAdjustHeight(int CallFunc_FindSubstring_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x29fa2f4
	void SetNowUseFpsVault(STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void ServerCrossingBlockCheck(Vector StartPos, float distoblock, float blockheight, Rotator movedir, out bool Result, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, Actor*[] K2Node_MakeArray_Array, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x29fa2f4
	void UpdateMoveMode(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	FString GetVaultKeyByBlockHeight(float Height, float CallFunc_GetJumpLengthByHeight_length);// 0x29fa2f4
	void fpsVaultGetRotaion(out Rotator rotion, Rotator CallFunc_GetRelicateRotator_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void SetFpsVaultSpeed(float nowDataHeight, float nowfpsBlockheight, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x29fa2f4
	void FpsVaultGetTppAnimationInfo(out FString AnimationName, out float animationTime, out float PlayRate, float animationrate, float nowfpsBlockheight, float nowDataHeight, float nowTime, FString nowAnimationName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x29fa2f4
	void FpsGetTotalTime(out float TotalTime, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue2, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue2);// 0x29fa2f4
	void FpsTestLimitPostion(Vector nowPostion, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x29fa2f4
	void FpsVaultTrigger(Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_GetPlayerStartPositionInternal_StartPos);// 0x29fa2f4
	void FpsVaultServerCheating(Vector playerpos, Vector topPos, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void FpsVaultStart(Vector StartPos, Vector topPos, float offsetMaxX, float offsetMaxY, bool isjump, Rotator palyerRtion, float blocklength, Vector toblockHitVec, float CallFunc_VSize_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_FpsVaultGetTppAnimationInfo_animationname, float CallFunc_FpsVaultGetTppAnimationInfo_animationTime, float CallFunc_FpsVaultGetTppAnimationInfo_playrate, FName CallFunc_Conv_StringToName_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_FpsGetTotalTime_totalTime, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Normal_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_PlayAnimMontage_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue2, float CallFunc_PlayAnimMontage_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_EnterState_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_HasState_ReturnValue);// 0x29fa2f4
	void FpsVaultGetNowPostion(float nowPastTime, out Vector nowPostion, out bool IsGet, float OnBlockTime, float DownTotalTime, float UpTotalTime, float PastTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_VLerp_ReturnValue2, float CallFunc_VSize_ReturnValue2, bool CallFunc_FpsTestLimitPostion_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue5, Vector CallFunc_VLerp_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue6);// 0x29fa2f4
	void FpsVualtUpdate(Vector NowTargetPostion, float nowPastTime, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_FpsVaultGetNowPostion_nowPostion, bool CallFunc_FpsVaultGetNowPostion_isGet, Rotator CallFunc_fpsVaultGetRotaion_rotion, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, Actor*[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x29fa2f4
	void SetStopForwardDis(float shoulddis, out float Result, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void DealBrokenWindows(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable2, BP_WindowCompBase_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_WindowCompBase_C* CallFunc_Array_Get_Item2, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_VSize2D_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	bool VaultFromCPP(bool CallFunc_CheckCanVault_isActive);// 0x29fa2f4
	void CheckVaultWindows(Vector CheckStart, Vector CheckEnd, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_SphereTraceMultiForObjects_OutHits, bool CallFunc_SphereTraceMultiForObjects_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_WindowCompBase_C* K2Node_DynamicCast_AsBP_Window_Comp_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x29fa2f4
	void EnableCulling(bool bEnable, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void GetCliblastCheckDis(out float Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x29fa2f4
	void NowStateCheck(bool sprint, bool Walk, bool stand, out bool Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x29fa2f4
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation, float nowtestHeight, float nowSelectThickLength, FString nowkey, float nowThcklength, float NowHeight, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4);// 0x29fa2f4
	void CheckIsValidByHeightCheckDis(float NowHeight, float checkDis, out bool isVaild, float nowChckDis, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, vaultCheckRule CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	void IsValidVault(out bool IsValid, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_GetRealStartZHeight_ResStartZ, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2);// 0x29fa2f4
	void GetTestObjectChannels(out byte[] Channels, byte[] K2Node_MakeArray_Array);// 0x29fa2f4
	void UpdateMontageSpeed(bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3);// 0x29fa2f4
	void ServerCheckBlockDis(Vector HitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float blocklength, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_VSize_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Abs_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_LessEqual_FloatFloat_ReturnValue5);// 0x29fa2f4
	void GetNowOppSideDis(out float Result, float totalLength, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x29fa2f4
	void CheckUpLengthBlock(out bool Result, float nowHeightTestHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue);// 0x29fa2f4
	void GetCrossMaxBlockDisOffsset(out bool Result, float TestCrossBlockMaxDis, float NowTestHalfHeight, Actor*[] ___object_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetNowOppSideDis_result, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue4, float CallFunc_VSize_ReturnValue);// 0x29fa2f4
	void SetLimitPostion(float XValue, float ZVaule, Vector realPos, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_GetRealStartZHeight_ResStartZ, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x29fa2f4
	void CheckForward(out bool IsActive, float nowCheckDis, Vector nowNormal, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_MakeVector_ReturnValue3, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_NotEqual_ObjectObject_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos2, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue4, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit2, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_ForwardTestObjectType_result, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x29fa2f4
	void CheckHeight(float Height, out bool IsActive, out Vector Point, float nowminheight, float testCapsuleRadius, Vector nowHitPoint, float nowCheckHeight, float nowHeightTestHeight, int ___int_Array_Index_Variable, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] K2Node_MakeArray_Array, float CallFunc_Add_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, byte[] CallFunc_GetTestObjectChannels_channels2, byte[] CallFunc_GetTestObjectChannels_channels3, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_Not_PreBool_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue3, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Actor*[] K2Node_MakeArray_Array3, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, int ___int_Loop_Counter_Variable, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X7, float CallFunc_BreakVector_Y7, float CallFunc_BreakVector_Z7, float CallFunc_BreakVector_X8, float CallFunc_BreakVector_Y8, float CallFunc_BreakVector_Z8, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x29fa2f4
	void GetJumpLengthByHeight(float Height, out float Length, float TestHeight, float NowHeight, FString nowkey, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x29fa2f4
	void printReason(FString Result);// 0x29fa2f4
	void PrintEnable(PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_BoolToText_ReturnValue);// 0x29fa2f4
	void CacultLimitData(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetBaseLocation_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4);// 0x29fa2f4
	void GetCrossMaxBlockDisForward(out bool Result, float NowTestHalfHeight, float CallFunc_GetNowOppSideDis_result, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetParentActor_ReturnValue, Actor*[] K2Node_MakeArray_Array, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x29fa2f4
	void GetPlayerStartZ(out float Result, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x29fa2f4
	void GetCrossBlockMaxFallingHeight(float capsuleTestLefHeight, Actor*[] ___object_Variable, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_GetPlayerStartZ_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x29fa2f4
	void ForwardTestObjectType(Actor* Actor, out bool Result, Actor* NewLocalVar, LandscapeStreamingProxy* K2Node_DynamicCast_AsLandscape_Streaming_Proxy, bool K2Node_DynamicCast_bSuccess, Landscape* K2Node_DynamicCast_AsLandscape, bool K2Node_DynamicCast_bSuccess2, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess3);// 0x29fa2f4
	void SetEnd(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValidVault_isvalid, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir, bool CallFunc_IsValid_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue);// 0x29fa2f4
	void UpdatePostion2(float testhalfHeight, float ZOffset, Vector nowmoveOffset, float preTime, bool isUping, float ShouldHeight, float NowHeight, float shoulddis, float nowDis, bool CallFunc_Not_PreBool_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float CallFunc_GetRealStartZHeight_ResStartZ, Vector CallFunc_GetDataStartPosition_StartPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_SetStopForwardDis_result, float CallFunc_GetAnimMontagePlayRate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Actor*[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, float CallFunc_GetTimeSeconds_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue4, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue5, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array3, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue4, float CallFunc_GetFloatValue_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue5, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_IsStandalone_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, HitResult CallFunc_UpdatedComponentWithBase_OutHit, bool CallFunc_UpdatedComponentWithBase_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue6, float CallFunc_Subtract_FloatFloat_ReturnValue7, float CallFunc_Subtract_FloatFloat_ReturnValue8, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x29fa2f4
	void GetNowData(bool IsInFalling, out bool IsGet, float nowtestHeight, float nowSelectThickLength, float TestHeight, bool IsGetData, int ___int_Array_Index_Variable, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, FString CallFunc_Array_Get_Item, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_EqualEqual_BoolBool_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue5, int ___int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x29fa2f4
	void CheckCanVault(out bool IsActive, bool IsInFalling, float nowHeightTestHeight, Vector nowHeightHitPoint, bool nowResult, Actor*[] ___object_Variable, int ___int_Array_Index_Variable, bool CallFunc_JumpVaultCheck_result, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckBaseIsMoving_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GetNowData_IsGet, bool CallFunc_CheckHeight_isActive, Vector CallFunc_CheckHeight_point, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_CheckHeight_isActive2, Vector CallFunc_CheckHeight_point2, float CallFunc_GetCliblastCheckDis_result, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_CheckNowisJumpAnimation_result, bool CallFunc_CheckNowisJumpAnimation_ishasAnimation, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_CheckIsValidByHeightCheckDis_isVaild, byte[] CallFunc_GetTestObjectChannels_channels2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] ___object_Variable2, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_CheckUpLengthBlock_result, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, bool CallFunc_GetCrossMaxBlockDisOffsset_result, bool CallFunc_CheckHeight_isActive3, Vector CallFunc_CheckHeight_point3, bool CallFunc_CheckForward_isActive, bool CallFunc_CheckHeight_isActive4, Vector CallFunc_CheckHeight_point4, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GetCrossMaxBlockDisForward_result, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue3, int ___int_Loop_Counter_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_AllowState_ReturnValue, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x29fa2f4
	void StartVault();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void JumpVault();// 0x29fa2f4
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x29fa2f4
	void vaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir);// 0x29fa2f4
	void jumpfromUI();// 0x29fa2f4
	void VaultFail(FString Reason);// 0x29fa2f4
	void UpdateVault_BluePrint();// 0x29fa2f4
	void interrupted(enum State, enum InterruptedBy);// 0x29fa2f4
	void vaultLeave(enum State);// 0x29fa2f4
	void DsCheckStopVault();// 0x29fa2f4
	void StopVault();// 0x29fa2f4
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x29fa2f4
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x29fa2f4
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, bool CallFunc_AllowState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_AllowState_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_HasAuthority_ReturnValue3, bool CallFunc_EnterState_ReturnValue, bool CallFunc_HasState_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos, bool CallFunc_IsStandalone_ReturnValue, STCharacterMovementComponent* K2Node_DynamicCast_AsSTCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess2, Vector CallFunc_GetBaseLocation_ReturnValue, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, bool CallFunc_IsLocallyControlled_ReturnValue2, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_HitPoint, Rotator K2Node_CustomEvent_movedir, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess3, UAEGameMode* K2Node_DynamicCast_AsUAEGame_Mode, bool K2Node_DynamicCast_bSuccess4, Controller* CallFunc_GetController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess5, FString K2Node_CustomEvent_reason, bool CallFunc_CheckAcknowledgedPawn_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess6, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsLocallyControlled_ReturnValue4, bool CallFunc_EnterState_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, Vector K2Node_Event_startPos2, Vector K2Node_Event_topPos2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, bool K2Node_Event_isjump2, Rotator K2Node_Event_movedir2, float K2Node_Event_blobkthick2, Vector K2Node_Event_startPos, Vector K2Node_Event_topPos, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, bool K2Node_Event_isjump, Rotator K2Node_Event_movedir, float K2Node_Event_blobkthick, Vector CallFunc_Subtract_VectorVector_ReturnValue3, bool CallFunc_FpsVaultServerCheating_result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue3, float CallFunc_VSize2D_ReturnValue, bool CallFunc_ServerCrossingBlockCheck_result, bool CallFunc_BooleanAND_ReturnValue3, float CallFunc_GetAnimMontagePlayRate_ReturnValue, Vector CallFunc_GetPlayerStartPositionInternal_StartPos2, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector CallFunc_GetPlayerStartPositionInternal_StartPos3, bool CallFunc_IsStandalone_ReturnValue2, bool CallFunc_ServerCrossingBlockCheck_result2, bool CallFunc_ServerCheckBlockDis_Result, bool CallFunc_BooleanAND_ReturnValue4);// 0x29fa2f4
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x154, Size: 4]
	float DeltaTime;//[Offset: 0x158, Size: 4]
	float NowBlockDis;//[Offset: 0x15c, Size: 4]
	float NowBlockHeight;//[Offset: 0x160, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x164, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x168, Size: 4]
	float NowBlockLength;//[Offset: 0x16c, Size: 4]
	float maxCheckDis;//[Offset: 0x170, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x174, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x178, Size: 4]
	float MaxCheckHeight;//[Offset: 0x17c, Size: 4]
	Actor* checkActor;//[Offset: 0x180, Size: 4]
	Vector PlayerStartPostion;//[Offset: 0x184, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x190, Size: 12]
	Vector HitPoint;//[Offset: 0x19c, Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x1a8, Size: 4]
	float CapsuleRadius;//[Offset: 0x1ac, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x1b0, Size: 4]
	Vector blockDir;//[Offset: 0x1b4, Size: 12]
	VaultData NowVaultData;//[Offset: 0x1c0, Size: 80]
	float MaxJumpLength;//[Offset: 0x210, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	float CountTime;//[Offset: 0x218, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	byte NowDrawDebugType;//[Offset: 0x21d, Size: 1]
	float realStartTime;//[Offset: 0x220, Size: 4]
	Vector DataStartpos;//[Offset: 0x224, Size: 12]
	FString nowVaultKey;//[Offset: 0x230, Size: 12]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x23c, Size: 60]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float nowMaxX;//[Offset: 0x27c, Size: 4]
	float nowMinFallingY;//[Offset: 0x280, Size: 4]
	float realStartZ;//[Offset: 0x284, Size: 4]
	float offsetSpeed;//[Offset: 0x288, Size: 4]
	byte gunSlot;//[Offset: 0x28c, Size: 1]
	Vector oppsiteHitPoint;//[Offset: 0x290, Size: 12]
	Vector uphitPoint;//[Offset: 0x29c, Size: 12]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	float heightoffsetcheck;//[Offset: 0x2ac, Size: 4]
	float HeightFowardCheck;//[Offset: 0x2b0, Size: 4]
	float minVaultHeight;//[Offset: 0x2b4, Size: 4]
	float nowAnimSpeed;//[Offset: 0x2b8, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x2bc, Size: 4]
	float animChangegSpeedRate;//[Offset: 0x2c0, Size: 4]
	bool ischangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	vaultCheckRule[] checkRuleList;//[Offset: 0x2c8, Size: 12]
	float laststandDis;//[Offset: 0x2d4, Size: 4]
	float lastwalkDis;//[Offset: 0x2d8, Size: 4]
	float lastsprintDis;//[Offset: 0x2dc, Size: 4]
	BP_WindowCompBase_C*[] VaultWindows;//[Offset: 0x2e0, Size: 12]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x2f0, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	Vector PlayerStartDir;//[Offset: 0x2f8, Size: 12]
	bool waitStopvaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	float stopVaultOppDis;//[Offset: 0x308, Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x30c, Size: 4]
	float FpsVaultSpeed;//[Offset: 0x310, Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x314, Size: 12]
	Vector FpsvVaultTopoffsetPostion;//[Offset: 0x320, Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x32c, Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x338, Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	float FpsVaultMontangeTotalTime;//[Offset: 0x348, Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x34c, Size: 12]
	float FpsVaultMontageTopTime;//[Offset: 0x358, Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x35c, Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x360, Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x364, Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float FpsCheatingVaule;//[Offset: 0x36c, Size: 4]
	float FpsMinHtight;//[Offset: 0x370, Size: 4]
	FpsVaultData[] FpsVaultAnimationList;//[Offset: 0x374, Size: 12]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x384, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x388, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x38c, Size: 4]
	float blockledgeZ;//[Offset: 0x390, Size: 4]
	float MoveSeconds;//[Offset: 0x394, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x398, Size: 12]
	float StartZToBase;//[Offset: 0x3a4, Size: 4]

--------------------------------
Class: VaultData
	FString montageSectionName_7_0E6EFDD2441CFF562A032DAC952922CF;//[Offset: 0x0, Size: 12]
	CurveFloat* upCurve_69_EB26D4B04E0BF112150F9DAEBC25B4F7;//[Offset: 0xc, Size: 4]
	CurveFloat* fowardCurve_31_D55B5E974DFC24E74019D6A31F141C7C;//[Offset: 0x10, Size: 4]
	float blockdis_28_FAA34AE04D5F621CD5FA08B1C4D4B37E;//[Offset: 0x14, Size: 4]
	float blockheight_27_6E4FCDFF4446BA2250C19BB28913EBD8;//[Offset: 0x18, Size: 4]
	float blokcThicklength_70_9688AE2B4F2BEF79873A64A463F93E21;//[Offset: 0x1c, Size: 4]
	bool IsJump_18_602D0B664C933E0434EF71A8DFFDBD7F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool forceStartSync_39_921F70144A2C12C3A5C929BEE107315F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float CountTime_44_F467486040D210D7A55E3A93FD62BD77;//[Offset: 0x24, Size: 4]
	float playSpeed_50_D2F6C3D243B8799B4E0FE88E44823E6D;//[Offset: 0x28, Size: 4]
	float speedChangeTime_58_14BE38BF403A2B6F8E94E387CB638965;//[Offset: 0x2c, Size: 4]
	float changeSpeedRate_61_5D150C9C4C80B4F16BD0EF8309AC2BEA;//[Offset: 0x30, Size: 4]
	bool standState_63_6706D1D149B7C65CE7BCB0B80179A054;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool walkState_65_CABF0046484F703B4F0E4BA3AC9869C4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool SprintState_67_661945074C9AB243C7C7B98121DC76CC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool isPutUpGun_73_29CDC65141670209C60AC7B5423932FF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	float BreakWindowDelayTime_76_9869354F4F44910A229A82B65F612FF6;//[Offset: 0x38, Size: 4]
	bool IsCancelable_78_298DE56E46F42A44C1EC8F9E8BA27BD0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MinCancelVTimer_84_5B6F3A36470D81814354F49C1D1C7B1B;//[Offset: 0x40, Size: 4]
	float MaxCancelVTimer_85_94626C4447005BBF447CAE8AC5AEE74F;//[Offset: 0x44, Size: 4]
	bool fallingVault_88_3046B4B14EF3BA7227B5539D7C499A1A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float fallingvaultMinHeight_90_25148B5C4D1A78FCE3A2BF9FD6B3E882;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: FpsVaultData
	float height_2_6778DFBB410A85EE91BEA6B781695021;//[Offset: 0x0, Size: 4]
	FString montageName_7_CA242A584BEEC1452642F38AA6D6DBDC;//[Offset: 0x4, Size: 12]
	float TimeLength_6_7FB8643042854CAE734259ADA01E6C94;//[Offset: 0x10, Size: 4]
	bool isJunp_9_ACBB864A4F8D9AC4532F6A813ABF2CA8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float movespeed_12_E5EBE4EE4240C619828D8BAC783C265D;//[Offset: 0x18, Size: 4]
	float speedrate_15_62D9B9D84072A09B660969889D7617FC;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BP_WindowCompBase_C.UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6d0, Size: 4]
	void callvoicecheck(Vector CallFunc_K2_GetComponentLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue);// 0x29fa2f4
	void NotifyServerBroken();// 0x29fa2f4
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x29fa2f4
	void ExecuteUbergraph_BP_WindowCompBase(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, UAEHouseActor* K2Node_DynamicCast_AsUAEHouse_Actor, bool K2Node_DynamicCast_bSuccess, UAEWindowRepData CallFunc_GetRepData_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_Event_bInitial, bool K2Node_Event_bLocal, AkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue3, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_OnSameTeam_ReturnValue, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	AkAudioEvent* BrokenSound;//[Offset: 0x6d4, Size: 4]
	float voiceShowTime;//[Offset: 0x6d8, Size: 4]

--------------------------------
Class: vaultCheckRule
	float checkHeight_2_1D446F924C9CBEF38F85E98E23C9A735;//[Offset: 0x0, Size: 4]
	float standCheckDis_4_6FA8D6F44D0D081ED0F3788E1A234DF9;//[Offset: 0x4, Size: 4]
	float walkCheckDis_6_A9F1514E4E30403EBE914D903334720A;//[Offset: 0x8, Size: 4]
	float sprintCheckDis_8_FF31D1CF4AEB4B77FA132F9E1414F0B4;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x628, Size: 28]

--------------------------------
Class: CH_Base_AnimBP_C.STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb70, Size: 4]
	void InitAnimVarDefaultValue();// 0x29fa2f4
	void OnLoaded_07E11265406458F82393EB8FC1226A75(Object* Loaded);// 0x29fa2f4
	void OnLoaded_5940795549B02FD11AE012AECD0C8F1D(Object* Loaded);// 0x29fa2f4
	void OnLoaded_07E11265406458F82393EB8F6614FD3E(Object* Loaded);// 0x29fa2f4
	void OnLoaded_5940795549B02FD11AE012AE6A3A1856(Object* Loaded);// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_F424266543();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2206D95943();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_97C9DD7042();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_32DC37424DD();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6CF6435B47C();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_ABEDB0A44F8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_437BD5D743();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_53B0BE0449();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1A0C29A443();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_837F227A49();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B21C791E4F6();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_221FDF904E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B4BEF55F4CD();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_294C9DA24DC8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A36E11F8481();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_685FBAA748B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E984013F46EB();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E70758DA4530();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_4FC4303F434A();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_BDDF4979418();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_E2AD35CF44C3();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_6D4489FE4834();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A6095F204D7();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_206FE734463();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_B2AE2791460F();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A7C68107474();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FE75F6FF482D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByInt_0EE19D1F4FA5();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6FF139464B0();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9C71DC8F4C33B19();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B809929A4E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_78C7AFFE461E9736();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6AE6DAEC4BF();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3C1C448E4BF();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_8CB4644A4B0();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_92AE7AD9406();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E44874194BB();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4CCED32C412();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_6D0039F746();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_C9E5C2DD4EE03();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA0526D343();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_43D12E0C4B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_99A0D43B46();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_3BF44D68441();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_308955ED4D3EEBF();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_152281A847();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_9AA3C81A4813();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B59343664AC();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_FFBFF4D34DF();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B682FC3D408();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_072677AC41();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_71504472478();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_6E46129C4B61CAA4();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F645305E417();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EBA89DFF4E8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_0923836A4A1();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_9E98E94647();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F7();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5BC93D324FE();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_CB4E3CD2403();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_618C7B784C8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_F034CE2B40();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_7FF39F494AA();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0A3738E649();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_AF7A57D443();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_DAC68D834D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA5DE6F9455();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_59FA3FD140F();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E5D2926F471();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D9EA1E284D0();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6904FBD042F();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C3774AAD495();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_4C();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D87B9FFF40B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_AnimDynamics_B24FC8AA42B8AD();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_94723F30492();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_48F9D2164A0();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_B7();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_839E288E459();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4DBD0FB34AC9AE0D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_CopyBone_1F1A7FFD4436DA20E2();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_CopyBone_C4BA145E4DC4ACE6C8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_7BF763274431A1A8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_44B488A74A6F8181();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5712297844B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_834824394BB861D5();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C83EC5E2446();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9691FE64441FA81C();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4D371676441();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DC60C41B4AC();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_D136BCBC4F26DC28();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3F9623C4422();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_351245E0496();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_18375F964C();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_764410DB4E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_12BAF2314F2();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DBE3C8ED47E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_8919B31E42985B72();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_DCFFAEA6498F4FAD();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_5556764F492E2C6D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6585C49F4E4();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_31DAF3FB48F3FEDE();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotateRootBone_3379463249DB();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_6BCD08EB410E0();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_C85B89004FD20DB2();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C489CE0542F6();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EC58EF22440();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C042155F4FE();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_4546C2E14396773A();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_06F8D9E54D6A();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_665225D3426();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_437A1FA2477();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_5D86B57B40F();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F4();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_5DD0B0D24ED8();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_B5E3D5F54B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FFF262E84F13();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_6EC9AC294C();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_DCA0AEF54F2();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA8D769941();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_506C44CC40();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4CB09782415();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_5728823B46D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_0D5DE5104B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_613B68EF42();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_2223AA0840();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_9E88F58F4A();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F2A9F84DD();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_0E34DB824E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AFABCF7848();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6DBDD079430();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9629294C46AC6A26();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F88A7F4A4();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_201A359C4C0();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1873132544();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_51F2F2CE4F9();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA59500540C();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_326A87BA48();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1CA6B8D549();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_80DFA2864D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FE06234541();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_8E329B0A47();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_895296D24A();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4B9202814E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_76B99DC840();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_73F3E7F249();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B50C1AE84D();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_61316C7E46();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_A056BFBD46();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_99288328421();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_EC7772CA47();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_8CCABF8A43();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_BB16DD9C481();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F246D3BC436();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FD44ACE04895();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_923ECC9946();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FD5B9C494E();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_EA8583CF48();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_ACDC5F0141();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1B8C2144F2();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_D3DD31C0472B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_A39C00F94B();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_693DD741490F();// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4A2747AE48();// 0x29fa2f4
	void BlueprintInitializeAnimation();// 0x29fa2f4
	void HandleMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x29fa2f4
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x29fa2f4
	void AnimNotify_TakeOutPhone();// 0x29fa2f4
	void AnimNotify_DestroyPhone();// 0x29fa2f4
	void DelayLeaveCallingState();// 0x29fa2f4
	void CustomEvent(Rotator Rot);// 0x29fa2f4
	void CE(ShowOrHideCurrentWeapon)(bool Visibility);// 0x29fa2f4
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_70C7519648();// 0x29fa2f4
	void AnimNotify_SpawnRFootprint();// 0x29fa2f4
	void AnimNotify_SpawnLFootprint();// 0x29fa2f4
	void AnimNotify_PlayFallSound();// 0x29fa2f4
	void AnimNotify_PlayShellDropFX();// 0x29fa2f4
	void AnimNotify_PlayMagOUTSound();// 0x29fa2f4
	void AnimNotify_PlayMagINSound();// 0x29fa2f4
	void AnimNotify_PlayBoltSound();// 0x29fa2f4
	void AnimNotify_PlayChangeMagazineSound();// 0x29fa2f4
	void AnimNotify_PlayLoadBulletSound();// 0x29fa2f4
	void AnimNotify_PlayCrawlSound();// 0x29fa2f4
	void AnimNotify_PlaySquatSound();// 0x29fa2f4
	void AnimNotify_PlayRunSound();// 0x29fa2f4
	void AnimNotify_PlayWalkSound();// 0x29fa2f4
	void AnimNotify_LandHardCameraShake();// 0x29fa2f4
	void AnimNotify_LandCameraShake();// 0x29fa2f4
	void ExecuteUbergraph_CH_Base_AnimBP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Rotator CallFunc_ComposeRotators_ReturnValue, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_MapRangeClamped_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue3, float CallFunc_BreakRotator_Roll5, float CallFunc_BreakRotator_Pitch5, float CallFunc_BreakRotator_Yaw5, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue5, float CallFunc_GetRelevantAnimTimeFraction_ReturnValue5, bool CallFunc_Greater_FloatFloat_ReturnValue6, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_BreakRotator_Roll6, float CallFunc_BreakRotator_Pitch6, float CallFunc_BreakRotator_Yaw6, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue7, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, bool CallFunc_Greater_FloatFloat_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool ___bool_Variable, bool ___bool_Variable2, float CallFunc_BreakRotator_Roll7, float CallFunc_BreakRotator_Pitch7, float CallFunc_BreakRotator_Yaw7, bool ___bool_Variable3, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_EqualEqual_RotatorRotator_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate3, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate4, Object* ___object_Variable, FString CallFunc_GetDisplayName_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, Object* K2Node_CustomEvent_Loaded, float CallFunc_BreakRotator_Roll8, float CallFunc_BreakRotator_Pitch8, float CallFunc_BreakRotator_Yaw8, Rotator CallFunc_MakeRotator_ReturnValue2, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Object* ___object_Variable2, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, Object* K2Node_CustomEvent_Loaded2, bool CallFunc_BooleanAND_ReturnValue5, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, Object* ___object_Variable3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, AnimMontage* K2Node_DynamicCast_AsAnim_Montage2, bool K2Node_DynamicCast_bSuccess5, Object* K2Node_CustomEvent_Loaded3, Object* ___object_Variable4, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh2, bool K2Node_DynamicCast_bSuccess6, Object* K2Node_CustomEvent_Loaded4, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate5, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_BooleanAND_ReturnValue6, AnimMontage* K2Node_CustomEvent_Montage, bool K2Node_CustomEvent_bInterrupted, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue9, bool K2Node_Event_bBeginCalling, Actor* CallFunc_GetOwningActor_ReturnValue, SkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue3, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_RevivalPhone_C* CallFunc_FinishSpawningActor_ReturnValue, SkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue2, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate6, float CallFunc_Montage_Play_ReturnValue, bool CallFunc_IsValid_ReturnValue5, FString CallFunc_GetDisplayName_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue7, Rotator K2Node_CustomEvent_rot, bool K2Node_CustomEvent_Visibility, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue8, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess7, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess8, Pawn* CallFunc_TryGetPawnOwner_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess9, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character4, bool K2Node_DynamicCast_bSuccess10, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character5, bool K2Node_DynamicCast_bSuccess11, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character6, bool K2Node_DynamicCast_bSuccess12, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character7, bool K2Node_DynamicCast_bSuccess13, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character8, bool K2Node_DynamicCast_bSuccess14, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character9, bool K2Node_DynamicCast_bSuccess15, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character10, bool K2Node_DynamicCast_bSuccess16, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character11, bool K2Node_DynamicCast_bSuccess17, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character12, bool K2Node_DynamicCast_bSuccess18, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character13, bool K2Node_DynamicCast_bSuccess19, delegate K2Node_CreateDelegate_OutputDelegate7, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue9, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue8);// 0x29fa2f4
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_7F8BF32A483C05C104D27D84BDDB8047;//[Offset: 0xb78, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1B8C2144F2B644B0EDF5890856C8E8F;//[Offset: 0xbd0, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6E2A7352482A91283D96DEA609E8844D;//[Offset: 0xc68, Size: 128]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_ACDC5F01413E6CDDD5E26290FB0D2A28;//[Offset: 0xce8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_EA8583CF48558D8742D60989B755AECF;//[Offset: 0xd20, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_923ECC9946F87BD9304658A4C6C371E1;//[Offset: 0xd58, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_7D4B6F6A41970A5756B8039B8D969461;//[Offset: 0xe48, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8CCABF8A4335407291BE5F82A4F2DF4C;//[Offset: 0xe80, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_E36EB3AF45864D643ACA079211777C8E;//[Offset: 0xf70, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_BD0EC74E47B535EF6B18C4A8DED838DD;//[Offset: 0xfa8, Size: 168]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_61316C7E46619171838C3F963F405D2A;//[Offset: 0x1050, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_73F3E7F2496DAAE3A9468BA610F07723;//[Offset: 0x1088, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_76B99DC84072BA3C0786C29E9E29BB65;//[Offset: 0x10c0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3;//[Offset: 0x10f8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69;//[Offset: 0x1130, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2;//[Offset: 0x1168, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1CA6B8D5497E74E6F43CAEB6DDEFBBC5;//[Offset: 0x11a0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781;//[Offset: 0x11d8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_9E88F58F4AB6EE52BA9A69BFC886550A;//[Offset: 0x1210, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5728823B46DD91085913488705443014;//[Offset: 0x1248, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A7D241414814F8E5A09B52966CE404BD;//[Offset: 0x12e0, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9F72D4B94021E469192C2CBDEFA3A310;//[Offset: 0x1340, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4CB09782415875D7C20612AB985BF542;//[Offset: 0x13a0, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E863709E496990EBB00A21AAF576AFA8;//[Offset: 0x1438, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8D7C844E4C2FC5B9D1C4E6BDF1AA520A;//[Offset: 0x14e8, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_6EE4B10C4F3719B4949ABCA78FCDF831;//[Offset: 0x1528, Size: 176]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_506C44CC40D48CDDB51D41AD425CF6AD;//[Offset: 0x15d8, Size: 240]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DCA0AEF54F2D744F5E49D4BD5D4E8A18;//[Offset: 0x16c8, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_6EC9AC294CDBB6CEEDC18296B5CAB9B0;//[Offset: 0x1760, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_4F9BC4314BE4DA84F20AD4A27AAC395A;//[Offset: 0x1850, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696;//[Offset: 0x1888, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_9D9D8FCC441A7F05532D81BE6C797E4A;//[Offset: 0x18e8, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5DD0B0D24ED85ACF9D4CB39EE7DC6F51;//[Offset: 0x1920, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_6E1D113D4A61E2CDD8D86989D7072B12;//[Offset: 0x1980, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_437A1FA247704E25D96300A58FFE1BEA;//[Offset: 0x19b8, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3DD0E8F5448E61732836FBAFB99C3779;//[Offset: 0x1a50, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_665225D34261C82C7467159E69A783C4;//[Offset: 0x1ab0, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_908E083B49E7626C7EEE2792B56CF70A;//[Offset: 0x1b48, Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_DD3620824CBA4C8FF8D92F862EBF2307;//[Offset: 0x1bf8, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_06F8D9E54D6A670C97160781AAC21798;//[Offset: 0x1c58, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_A5BBC01C4E35430A5EA3F7B595589567;//[Offset: 0x1cb8, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36577154A84E9638340B19CB439624A;//[Offset: 0x1cf0, Size: 64]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1CF150234CC2C8D35D381F9C7E447C27;//[Offset: 0x1d30, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B;//[Offset: 0x1d90, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28;//[Offset: 0x1e28, Size: 96]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228;//[Offset: 0x1e88, Size: 88]
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone_3379463249DB5026719BCDA500803EDE;//[Offset: 0x1ee0, Size: 80]
	AnimNode_Root AnimGraphNode_StateResult_B02F45DC49034869CCF72E8A45EDDEDA;//[Offset: 0x1f30, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_58F3F41C45E674D0FEBB6DAE55DA0751;//[Offset: 0x1f68, Size: 168]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA0526D343FA015B28DF25921C724329;//[Offset: 0x2010, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_6D0039F746DBFEE3FB7C8793D9CC4D70;//[Offset: 0x2048, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3C1C448E4BFC14F4DF9541BD7B686D80;//[Offset: 0x2080, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_5E984FB544A69AFB45E68B8479EA9A9D;//[Offset: 0x2118, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B370B18543B80658FC331D8359BDA455;//[Offset: 0x2170, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8886315C46DC93464C7004BEE2E45D9B;//[Offset: 0x21b0, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2F713306402D4EB35FA74BA217F872DE;//[Offset: 0x21f0, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3E7F3743411A3726D8BD919415CBB1AE;//[Offset: 0x22a0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A7754639472ADB097643B9B30CBCBC66;//[Offset: 0x22e0, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_528D52F7443BB34F0313688FCBD2C6F0;//[Offset: 0x2320, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_60E3C51F409D1CB237D47FADD6617FFD;//[Offset: 0x23d0, Size: 88]
	AnimNode_Root AnimGraphNode_StateResult_D4B28F76445E4C2A222EAD9D1E15415D;//[Offset: 0x2428, Size: 56]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9C71DC8F4C33B198444F7C860CA9B2D8;//[Offset: 0x2460, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_B05C2817432BE401F7B2AA8B35E660D7;//[Offset: 0x24b8, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_ADFECE884DDFA760BE194D95CF505B1B;//[Offset: 0x2568, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9C97AC3A4768C65F9848A6B45C8A2CE8;//[Offset: 0x25c0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F76A1B564C0AB0CDC902FDADE5EB1D8E;//[Offset: 0x2600, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_621247A0484FCFD01F297BB0395CB22C;//[Offset: 0x2640, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6FF139464B00144F23F55998D70D7E1C;//[Offset: 0x2680, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_C38330AC46F4FC63A1076BBA42F95A8F;//[Offset: 0x2718, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8DCD1B664029019AAAC154833EBBBF51;//[Offset: 0x2770, Size: 64]
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt_0EE19D1F4FA55EE1D1B16C98C0B0100C;//[Offset: 0x27b0, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6EA8DDAA431D79F20387029260BDEF69;//[Offset: 0x2848, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_523A3E6E4683C51F1E5CC4AF6807DE0F;//[Offset: 0x2888, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_392FC0DA47DC7390C0A0749B48807A2A;//[Offset: 0x28e0, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E7271F7D49FEFD1AEED08FB827CB3FC5;//[Offset: 0x2920, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B21C791E4F6507EE4B837EA53759AC45;//[Offset: 0x29d0, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_35D89A8B46E713CE1BA82A841A699365;//[Offset: 0x2a68, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_3CF398DD455CB914F5F554A6ED9CDF19;//[Offset: 0x2aa8, Size: 88]
	AnimNode_Root AnimGraphNode_StateResult_D7000B504F670B39E309E4AA59C5664A;//[Offset: 0x2b00, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_49DA45D64C0BEAD52ED89AA2C5B48025;//[Offset: 0x2b38, Size: 168]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0D5DE5104BA2B987043F35BB5E86F0F4;//[Offset: 0x2be0, Size: 240]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F2A9F84DD9DFF0A114D6921E50F2C3;//[Offset: 0x2cd0, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_174894E5463498BD5CE2C58529C87F63;//[Offset: 0x2d68, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_458080404F9C55B75C14EF80F4847606;//[Offset: 0x2dc0, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_319716464D13C4ECDD98CB9595742352;//[Offset: 0x2e70, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA59500540C87D28E005F0BD7F172675;//[Offset: 0x2ec8, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_43A9039E41EF41FC5803878ECCF2115F;//[Offset: 0x2f60, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C52841094FE8E562E2A56D8B627DB87F;//[Offset: 0x2fe0, Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_E94CE6A24C14A812C27178A06F48CDC2;//[Offset: 0x3060, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_669C6C0C4F1D960F8CF708B30A34DE05;//[Offset: 0x30b8, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DE00E31C423EDB53B1E7F4A812674E66;//[Offset: 0x3168, Size: 64]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_80DFA2864DFC581215F60B95F7DC9380;//[Offset: 0x31a8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_8E329B0A47E416418324F99CE29A2401;//[Offset: 0x31e0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_B50C1AE84D9436FFBC33709F6F0EB106;//[Offset: 0x3218, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FD5B9C494EBA47F8974327B3D99915E2;//[Offset: 0x3250, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_A39C00F94B8B17F3DF23A99C3DDB2E88;//[Offset: 0x3288, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_70C75196485F1D5760DEEA95ED192B22;//[Offset: 0x32c0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4A2747AE48EAD59BF53D288CCDE102BD;//[Offset: 0x32f8, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_693DD741490FB5D23D825FBDF1CAF303;//[Offset: 0x3330, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_04DFCD6146926108DD38F59F6296BDC1;//[Offset: 0x3390, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_D3DD31C0472B6C0F4726D7BCD13BE4FD;//[Offset: 0x33c8, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_32A4049D45BACC2F0CF64A83AC96F015;//[Offset: 0x3428, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FD44ACE0489529B1B1E3468593ABF6EC;//[Offset: 0x3460, Size: 96]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_3C4F258E4B055030C88841AC216C055E;//[Offset: 0x34c0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F246D3BC43638C1E4A0CD7A4093ECFE3;//[Offset: 0x3518, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_61E0CF97485E1F3792FC1AA15BF9199A;//[Offset: 0x35b0, Size: 88]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_6D8F6D4B44582CFC42357EA838EF8EBA;//[Offset: 0x3608, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_41FE3C53498375A67AA95F8E978689DD;//[Offset: 0x3640, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6F58BAA54B219C34FE70588BF70586AC;//[Offset: 0x36e0, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_CED299CA481478CB316239B95C32C8B6;//[Offset: 0x3718, Size: 160]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_BB16DD9C48109CFD1788B3B60A435C67;//[Offset: 0x37b8, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_EC7772CA4717595422791DB0356E7446;//[Offset: 0x3850, Size: 240]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_99288328421057D37BB1198AA773CFA8;//[Offset: 0x3940, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_A056BFBD463DEDE48A2C01ADD882CC16;//[Offset: 0x39d8, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_E61FA9B94E955F50CF334983A7D033E8;//[Offset: 0x3ac8, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_326A87BA48D64DA8E0BC20B8D64A8B2D;//[Offset: 0x3b00, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_3DD95A6A4389DA801A52ADA435C84617;//[Offset: 0x3bf0, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_D405617F41B462783757E3BD69CB5422;//[Offset: 0x3c28, Size: 168]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_51F2F2CE4F9082CAD0AD7189F7934CB0;//[Offset: 0x3cd0, Size: 168]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4B788175470581A209B76B973D807262;//[Offset: 0x3d78, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_FF22DAD4497C34327A559AA3DCF2AE45;//[Offset: 0x3db0, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_201A359C4C06F74821DF918ED7086E55;//[Offset: 0x3de8, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_E1876D99465C1BE509443BAE29D33409;//[Offset: 0x3e80, Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_3C5A5896446BC6123B3769AAE4322641;//[Offset: 0x3f00, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F88A7F4A4C63B386ED5BBFAFF8ABCE;//[Offset: 0x3f58, Size: 152]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_9629294C46AC6A26181183837695EE4C;//[Offset: 0x3ff0, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2A1F872D45E5392E9F1F09A1B323C944;//[Offset: 0x4090, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E6B21B0C4937DF1281AB46ACB479F1A8;//[Offset: 0x40c8, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3CF2A8814FF520521F709DB0D580B2AA;//[Offset: 0x4100, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6DBDD07943048BB8FB1AB1872A66392C;//[Offset: 0x4180, Size: 152]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AFABCF7848AD1903BD064AA242AF9E4F;//[Offset: 0x4218, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_0E34DB824EFF3ABFE5A086B6B6631475;//[Offset: 0x4250, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_2223AA0840552DE31079948F03279486;//[Offset: 0x4288, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_613B68EF425D2703703F949AFD400692;//[Offset: 0x42c0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA8D769941A6176D083567B1DEC7F88E;//[Offset: 0x42f8, Size: 56]
	AnimNode_Root AnimGraphNode_StateResult_2D0E9935487AC2B8048629B6F4680D07;//[Offset: 0x4330, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_5591C71F4B499957FC9875869010AFBD;//[Offset: 0x4368, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_06C18A774D8A7CAF0CEA61B5AAF8FE06;//[Offset: 0x43c8, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_B5E3D5F54BF49B7FEA2836B43904823D;//[Offset: 0x4400, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_FD74DAEC46FC936302EAC2AA96FE5A26;//[Offset: 0x44f0, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_5E1D47794DDE33EFBAA0658413060407;//[Offset: 0x4528, Size: 168]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_334079BF4A13B2F29708F5AD7E43BC4C;//[Offset: 0x45d0, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7797FEE34831097BF63BF69B63F59DA9;//[Offset: 0x4610, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3719DDAD40D1FF3394A7D0B80B9261EB;//[Offset: 0x4690, Size: 64]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F4294E2340D99B17779EAAB0ED7F1A6D;//[Offset: 0x46d0, Size: 272]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_5D86B57B40F785D5CBDD7FAFDEB10D85;//[Offset: 0x47e0, Size: 168]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_4546C2E14396773A08760F87EC7A5030;//[Offset: 0x4888, Size: 160]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DF0B9A3F4A87F2F63283E3B7F893A693;//[Offset: 0x4928, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D45B3A8B440B8F75AC62669D80085DEC;//[Offset: 0x49a8, Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_EE180C9B4A80C7B3A22DAEA399479C78;//[Offset: 0x49e8, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C22296634B3329DCD18642899124C07B;//[Offset: 0x4a20, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9078DB934183E6FE05BE3281437127A2;//[Offset: 0x4aa0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_71F7B5004EAE8C9FAD7F5EB7EAB7B2B7;//[Offset: 0x4ae0, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C042155F4FEE0D669BE9538048391AEC;//[Offset: 0x4b20, Size: 152]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_C85B89004FD20DB22B7620BCA4F74F9B;//[Offset: 0x4bb8, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_7CF1CF344753662A1160AE885528C832;//[Offset: 0x4c58, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_31DAF3FB48F3FEDEE067079557EEB502;//[Offset: 0x4c90, Size: 160]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_329338674411ED2637246E918B0C8247;//[Offset: 0x4d30, Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_A208C4634FF28D66ADBE8894952EBF91;//[Offset: 0x4d70, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6A4D4BB543581CEA78717FAE00540633;//[Offset: 0x4da8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7598CC394959662FCA78AC8C45BFA981;//[Offset: 0x4de8, Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_AB1D4C514AD9020A44FE8E99D5E88556;//[Offset: 0x4e28, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4E98CC1C42BDBE0649258FB8F995D839;//[Offset: 0x4e60, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_622244D444EE7EE65F88C8957C185EEF;//[Offset: 0x4e98, Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8EB0E4584E691BA977D67E8623780010;//[Offset: 0x4ed8, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_433E01AA46322548F90AAC9A54AA867B;//[Offset: 0x4f68, Size: 144]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0DEEA3AF4E997C82A08BD2BB8D58B653;//[Offset: 0x4ff8, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6585C49F4E4165EE151CC2B97C7B2F66;//[Offset: 0x5030, Size: 152]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_13AC8CA44937FBA30AB9C392D3298681;//[Offset: 0x50c8, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_5556764F492E2C6DA3D2878EEAC0F256;//[Offset: 0x5100, Size: 160]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_DCFFAEA6498F4FADF4518C97538818ED;//[Offset: 0x51a0, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_457372C34A3A70E9726335ABBA036702;//[Offset: 0x5240, Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_93C780F94070F509C4F343B8D8068090;//[Offset: 0x5278, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_8919B31E42985B72D0E33C8776686E74;//[Offset: 0x52b0, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1112DC0A47EE06CCC0FB99A6D56C5D7E;//[Offset: 0x5350, Size: 56]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_866CD31C4BAF4E2E8B4E54AF4690FC6B;//[Offset: 0x5388, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_8E1711044635813E18A35BABACA19DF6;//[Offset: 0x53e0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B682FC3D408904703D3DECB95804E4C6;//[Offset: 0x5438, Size: 152]
	bool __SUBINSTANCE_IsFPPVehicleAnimInstace_B6EA793741EF081F1D4B18BE9B29A9E8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d0, Size: 1]
	AnimNode_SubInstance AnimGraphNode_SubInstance_B6EA793741EF081F1D4B18BE9B29A9E8;//[Offset: 0x54d8, Size: 144]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_16B201EE496A66D027E50CB55A8ABD62;//[Offset: 0x5568, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F75C21C84EB4D615E9FC2F9A9D8853F5;//[Offset: 0x55e8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9101E8B941BCBB1C76031A872C91A3FC;//[Offset: 0x5628, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_FFBFF4D34DF5B64FD6C889BE58395DC3;//[Offset: 0x5668, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_43D12E0C4B649EFEFCAA0AAD51F83A9F;//[Offset: 0x5700, Size: 240]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_C9E5C2DD4EE0358504AB258E8E111BFB;//[Offset: 0x57f0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6AE6DAEC4BF6E0703556299166FEC2E0;//[Offset: 0x5848, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A143725F42DD4467D41CA0BFB906A522;//[Offset: 0x58e0, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_0712F5734AC37790D9A12F8096EE9C4E;//[Offset: 0x5920, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_0F051A204E1F9A9172B92E86CB305A1E;//[Offset: 0x5978, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D9BDED8D4B7DE338450804B21CB65D90;//[Offset: 0x5a28, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1DB39F3145453030AB0728B31A1B2049;//[Offset: 0x5a68, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F70F6EE744718CA0AA76638976CD41C5;//[Offset: 0x5aa8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A31BBF2D4CD8CE0BDF9AEB9FDDF8B096;//[Offset: 0x5b28, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45E193384DE39BDB8BF5949428D8CDC4;//[Offset: 0x5b68, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_78C7AFFE461E973613B6EB970B5A2AB8;//[Offset: 0x5ba8, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_115F73CC4F4EB99D57153CA9C0B25298;//[Offset: 0x5c48, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5E08C82C430E1441B11FF599B3529D1D;//[Offset: 0x5c80, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_B809929A4E022092F286288F5F93A314;//[Offset: 0x5cb8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_221FDF904EABAA8FD8141FA5D0EB8FB9;//[Offset: 0x5cf0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_837F227A4947B468B67220AC380EAAD1;//[Offset: 0x5d28, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_072677AC41CA4240D324B3930D3EA4DB;//[Offset: 0x5d60, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_F4242665439204DAB075CC98D620A811;//[Offset: 0x5d98, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_2206D959438B4BEE00C4CEAEB75AAAE1;//[Offset: 0x5dd0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_97C9DD70426F218F493E08BA6BD0BD12;//[Offset: 0x5e08, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_32DC37424DD152B3F8EF3DBEAB4EBF83;//[Offset: 0x5e40, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_29DD2E28468591C6095CD7A3AD6DAC18;//[Offset: 0x5ed8, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_120389DF411D33D4B2E752AA77D6B104;//[Offset: 0x5f38, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A3D4D5BC4BCF44C5A7625D9CDDDAA43E;//[Offset: 0x5f98, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6CF6435B47C6D6FA3E03ADA3649C655E;//[Offset: 0x5ff8, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_ABEDB0A44F8378AFF796BB96A50F800D;//[Offset: 0x6090, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_CDA7A21E4F4C6B5DBD1DED83EA2E76DF;//[Offset: 0x6128, Size: 176]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_437BD5D7434D51A4298EF0BAD81ECCEB;//[Offset: 0x61d8, Size: 240]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_53B0BE04494EF67E8FDEB6A1DF81C855;//[Offset: 0x62c8, Size: 240]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_C82BDE6C463D87DBEED7D19513DDEC60;//[Offset: 0x63b8, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1A0C29A443C740127B2ED82398261E2;//[Offset: 0x6468, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_7BACE1B54980ADF59D47668BB5013453;//[Offset: 0x6500, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_EF5795A34020DD57DA2077ABB2721FF8;//[Offset: 0x6560, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_5C6E456F49E65EDD6DCFC48A3EDC66DE;//[Offset: 0x65c0, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B4BEF55F4CD7EBFFAF3567ABC6561FB6;//[Offset: 0x65f8, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_294C9DA24DC88217804F21B0B768EF06;//[Offset: 0x6690, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A36E11F848104874004A0EA937685026;//[Offset: 0x66f0, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_685FBAA748B657A5F1CA91AB9A06340F;//[Offset: 0x6788, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E984013F46EBA945E02060B22F1CA22D;//[Offset: 0x6820, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E70758DA45306D77E11E48B00883A1A7;//[Offset: 0x6880, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4FC4303F434A7C649A1850B8F7105593;//[Offset: 0x68e0, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_BDDF49794188B0D27505648D4FF4BDFE;//[Offset: 0x6940, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_E2AD35CF44C3089D183CE08C5BE5D76E;//[Offset: 0x69d8, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_6D4489FE4834A16A5FD0EA8B24C4CD81;//[Offset: 0x6a38, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A6095F204D70BB6F5571BA9939AF7E9B;//[Offset: 0x6a98, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_206FE7344638CC583269308655C407B0;//[Offset: 0x6b30, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_B2AE2791460FFB0402C9CEA62019090F;//[Offset: 0x6bc8, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A7C68107474558727766BD9DB8D6D4AB;//[Offset: 0x6c28, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FE75F6FF482D51621CACB29FCA2B53F1;//[Offset: 0x6cc0, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_8761D4234454F907141A9DB6AE9ADF6E;//[Offset: 0x6d20, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8CB4644A4B07CDC406F3949F2594A013;//[Offset: 0x6d58, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_92AE7AD94067F32AC1E7AE9100083522;//[Offset: 0x6df0, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2765085C404B221C695CFC8DB0FB5A77;//[Offset: 0x6e88, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_09660AB141D61DA80F17428B3C121C7A;//[Offset: 0x6ee8, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_968A01664DCDBB3075404780A3342A5F;//[Offset: 0x6f48, Size: 96]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_8381DEC7439769A10C5C5D923B0F25ED;//[Offset: 0x6fa8, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E44874194BB77928CBDB14BFDB186BC0;//[Offset: 0x7008, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4CCED32C412BFA9309CCE8A02CB8259B;//[Offset: 0x70a0, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C35E23A14E85719855687CAD78D326FB;//[Offset: 0x7138, Size: 96]
	AnimNode_Root AnimGraphNode_StateResult_ED1DED144668BF6F586CBCA6FA9D0E02;//[Offset: 0x7198, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_99A0D43B4625DB28C707B296F897BFAD;//[Offset: 0x71d0, Size: 240]
	AnimNode_Root AnimGraphNode_StateResult_A7C94BC84D1B4DE1402B89BCA46090CB;//[Offset: 0x72c0, Size: 56]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_3BF44D684416DBC0C708E58C7CD4A7C2;//[Offset: 0x72f8, Size: 168]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4811E10648172D98758E1381F6F55E0D;//[Offset: 0x73a0, Size: 96]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_308955ED4D3EEBF6702EBDAF6A6919F3;//[Offset: 0x7400, Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_A39D5C2A4186712ECAE4069B55FBDACC;//[Offset: 0x7458, Size: 96]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_152281A847360EF3EF568390687AFDDF;//[Offset: 0x74b8, Size: 240]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9AA3C81A481374C893DB60AC7BD47D37;//[Offset: 0x75a8, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B59343664AC4B234A509C6A416B8827B;//[Offset: 0x7608, Size: 152]
	AnimNode_Root AnimGraphNode_StateResult_5FA6ECDD4695357A89E7C290FB015914;//[Offset: 0x76a0, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_27FA876E4F2C51AB4FBB54A4314A9AF1;//[Offset: 0x76d8, Size: 168]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6B33B0BF4CFBDF576C90BD8B97298239;//[Offset: 0x7780, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_220F99A04986C25E9539B2A92C64D7A8;//[Offset: 0x7800, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0DA5260C449DE23EFBC503A7C77F7E00;//[Offset: 0x7880, Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_7A8F51D9413B323BAE44DE93B45D3E3F;//[Offset: 0x78c0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_FF7C88124B1026BF8DCDC88396D68D5B;//[Offset: 0x7a50, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_50B56FAC4284F32E25CFCEB28B6C5E3A;//[Offset: 0x7ae0, Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_E5E672DB4B056FA5A45612B8931A18B6;//[Offset: 0x7b70, Size: 400]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8D15414541B3EB717FE0CF94A60DBD3B;//[Offset: 0x7d00, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_71504472478A09FF13DFE68B69DFEF98;//[Offset: 0x7db0, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E1808C9D43A40CE46EB8F6A534DC1ABC;//[Offset: 0x7e48, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_6E46129C4B61CAA43CEB07ADE4C3FD59;//[Offset: 0x7e88, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F95908034B8D9CFB2B155BB5933D94A9;//[Offset: 0x7f28, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0AFC812147DFC014CDE3A3825EA3CBE5;//[Offset: 0x7f60, Size: 56]
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_8CF51CA948DE444C840E599C64AC2CEE;//[Offset: 0x7f98, Size: 88]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_9F7F3F294E1BFE8DBC60DEB297EA85BE;//[Offset: 0x7ff0, Size: 88]
	AnimNode_Slot AnimGraphNode_Slot_DDA68583465674C7C37912B7D4A4E50F;//[Offset: 0x8048, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F645305E41722890FC22B391480ADEBD;//[Offset: 0x80a0, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EBA89DFF4E86CAD0DB7051A88EA338B1;//[Offset: 0x8138, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_0923836A4A1516BEF39634B6DCB6E5B2;//[Offset: 0x81d0, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_66CC0D1349829696746E958E9ACAFC19;//[Offset: 0x8268, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8B02E1854C22FFA0A02A53B3DC679824;//[Offset: 0x82e8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6BFA14514C88A4E80BBF529D327F9E58;//[Offset: 0x8328, Size: 64]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_9E98E946479BB6F25CF86B8F6C0246AD;//[Offset: 0x8368, Size: 240]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F73C783C46F301367C465EAFEBA8559A;//[Offset: 0x8458, Size: 272]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DCFADC264F289627ED48DF95EF386452;//[Offset: 0x8568, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B070AF83456F0A61C74614987FAE7C80;//[Offset: 0x85e8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_500C364647FAF281EAF7EEB643A787BE;//[Offset: 0x8628, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5BC93D324FE71B76644074976E6CC454;//[Offset: 0x8668, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C5A628AA4F9EFD70D6EA9BBA06098B5C;//[Offset: 0x8700, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F1AEDBA24520120F9AAA378FB7CD4DA9;//[Offset: 0x8780, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_8BC235B84F01BD46AFCB7E8A2C2DCBF0;//[Offset: 0x87c0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_CB4E3CD2403BE017D2C5D89D248B5649;//[Offset: 0x8818, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E4815A17400837DC67A56FBF630677D7;//[Offset: 0x88b0, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_94FCE2534A41922F6EE0ADA29204CE8A;//[Offset: 0x88f0, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_7B2D93424224E2D8E11889A1FEEFC604;//[Offset: 0x89a0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8C883397463C220B272CCABCB5D4D97B;//[Offset: 0x8b30, Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_99AA80B74BFC6E1FE4D50E87F3928EE6;//[Offset: 0x8bc0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_0FC7D45C43128D12BE8455A82451691C;//[Offset: 0x8d50, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_B87ABCF942126AAD092D9CB6CD312ABE;//[Offset: 0x8de0, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_F4E64E8C460933CD02F14487E409ECDE;//[Offset: 0x8e18, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_618C7B784C8FE43D3670018E65458BAA;//[Offset: 0x8e50, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_F034CE2B40AD3A98AA00AB94BA8C47A0;//[Offset: 0x8ee8, Size: 240]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0D4679C242F79898D029EBB785DC10B3;//[Offset: 0x8fd8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C4F7B15F4B32CBCC8519998F035B4536;//[Offset: 0x9018, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F4FF06B9462B60471B5E3393887C9E40;//[Offset: 0x9058, Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_9FE09B1343F08E378CD23D91CD58C223;//[Offset: 0x90a0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_732A767340B20CBF50397390E4CEDBA3;//[Offset: 0x9230, Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_1671B2AE4B1E0D2F8E9B769F78DAEA52;//[Offset: 0x92c0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4C4DC3E64381363E5EB6DC83B485A653;//[Offset: 0x9450, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_45B840D54A0CF19F97483E8C8401F0F4;//[Offset: 0x94e0, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D5C6F74A469FBCDA23ED1A86EF582F78;//[Offset: 0x9518, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_7FF39F494AAC7A8DAF913B9B553FA09E;//[Offset: 0x9550, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_0A3738E649065C63DAA33B871C8BF5F4;//[Offset: 0x95e8, Size: 240]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F5AB53FE422F92A928203CA78734E9FD;//[Offset: 0x96d8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0F0A9BAD4E606ACC202A4DB1099E3308;//[Offset: 0x9758, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5E6F01C2463734AFD033FAA526A4C777;//[Offset: 0x9798, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_0855A2E34D22984F160B23AF245637C9;//[Offset: 0x97d8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_195026BB4D191A5BA75F678ED0E00504;//[Offset: 0x9858, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_860DABD84F12647CE8D454BD09849965;//[Offset: 0x9898, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8D5A1C1D46D889D39B5C94B51A8DEDBC;//[Offset: 0x98d8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7FABE8F146269258F98D4DB2127E44F5;//[Offset: 0x9918, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_AF7A57D443A79482DEF1D6ACDD5C6523;//[Offset: 0x9958, Size: 176]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_ACF67F1E415D08A812090AB622DCCD30;//[Offset: 0x9a08, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_48F0801842A1711B2F754F9B57EB1D49;//[Offset: 0x9ab8, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_99EE1C4C462B5FAF5497CC8797147246;//[Offset: 0x9af0, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_66D65871430ED6892C1881A104B0E942;//[Offset: 0x9b28, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E1359FE7442EFE77E9A20CA77B1E7F9C;//[Offset: 0x9bb8, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_F8FEDE8E49559DF8564C41AC8B4D4EA7;//[Offset: 0x9c48, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_7559E28148D5A1854B4449AFE35775A4;//[Offset: 0x9cd8, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_31EC7AC7485DA0182DF0B6BDAA97518B;//[Offset: 0x9d10, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_8F1F12BC4AC3516664F4FA94842EB52B;//[Offset: 0x9d48, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_40675A604F741DE7D23CDCB96236DFDE;//[Offset: 0x9dd8, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_224B6CE84DED53427C30A5B097637DC3;//[Offset: 0x9e68, Size: 144]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_A1C2F7C94638F977D5756296C143FD33;//[Offset: 0x9ef8, Size: 176]
	AnimNode_Fabrik AnimGraphNode_Fabrik_2E172EDF47AD035573128B9FD045F96D;//[Offset: 0x9fb0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_D20A990341B6273527E362A8003BAD4B;//[Offset: 0xa140, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_E87DE78A49CA468213C3F39A2BC45209;//[Offset: 0xa1d0, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_DAC68D834DE4C43D88EE82BD65EE333D;//[Offset: 0xa208, Size: 240]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1C330930432AD1BE3D174BA53AEBB464;//[Offset: 0xa2f8, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_EAE8A28B4FAA1B286FE8D082AFE9C15D;//[Offset: 0xa330, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E41F37504D764B67A0181BAEA80B1467;//[Offset: 0xa368, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E6DB53504F13AB2A5A80CCBB5D8730E8;//[Offset: 0xa3f8, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4DD8DC06479B8335789C08914DFAD26C;//[Offset: 0xa488, Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_87C9E41347749FE2FC4E23A0FA1BA51A;//[Offset: 0xa520, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_FB9B34734FB8B82EAE8AE3B24B7B289F;//[Offset: 0xa6b0, Size: 144]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_44DA701B440A2261258F17B3DE55970B;//[Offset: 0xa740, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA5DE6F9455753B758D53EA53E0A6DE8;//[Offset: 0xa778, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_C090D630420677578B2503A4E2194A6E;//[Offset: 0xa810, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12CEB9124449465AF873EC9C930C2384;//[Offset: 0xa868, Size: 64]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_81B7406A4DB3C66810974698CE096CB7;//[Offset: 0xa8a8, Size: 96]
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive_3BC5777744E78472F0CFDC86099EBC4A;//[Offset: 0xa908, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_69EE9A0448E1F9BF4DA327809542DE2A;//[Offset: 0xa960, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_68FDCC6744F4FA2465AC5E8899EBEB74;//[Offset: 0xa9e0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_64F01EC84D64FFCA245AA69D6B25BC20;//[Offset: 0xaa60, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E5A32E2F4A834F3E591E16BAA9B687C5;//[Offset: 0xaaa0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0750FAD645DF45DCE778BD8D2FF74FCD;//[Offset: 0xaae0, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E96936184419968456EAF08AA37E47CD;//[Offset: 0xab20, Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_777AB74C446D5144FF93159CB523BE1E;//[Offset: 0xabd0, Size: 96]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_59FA3FD140FC92E48DC88B84BC476BF9;//[Offset: 0xac30, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C2CE9AD3498C3538A6EE53B91B22A2A2;//[Offset: 0xacc8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F32ADA954F63A00AFD64EC946F11CBDF;//[Offset: 0xad08, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E5D2926F471A9EFFAAA308A0F6E4EC6C;//[Offset: 0xad48, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_FB6CC4D741D5FDCBC54FA2A5A47A7363;//[Offset: 0xade0, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D9EA1E284D09B9B6E286988290F65187;//[Offset: 0xae38, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6B3D2423482F7E30EE4DB883F5218900;//[Offset: 0xaed0, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6904FBD042F55B5E17696E9EFB800E69;//[Offset: 0xaf10, Size: 152]
	AnimNode_Root AnimGraphNode_Root_54C1F0ED422F557A3D58A1B8B79F8C7E;//[Offset: 0xafa8, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C444C4FD4729985BDCCDED9E316E8717;//[Offset: 0xafe0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_62837EB942922DA14A60FB885FE8903E;//[Offset: 0xb060, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D4154717432C4F79E3AD4A9D4CB7023A;//[Offset: 0xb0a0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9EE7DC224B48B5460FE2C39B9BF71043;//[Offset: 0xb120, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_94656FBC478E9C84F652EF9CF4358064;//[Offset: 0xb160, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7C8105A245E522BB023434A9626A1857;//[Offset: 0xb1a0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B811170549581ECAF70A6AB4EDF14F79;//[Offset: 0xb1e0, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C3774AAD49537B5E5580C8AD7B82845A;//[Offset: 0xb220, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8678E8794F2ADC6611F61EB69D756B81;//[Offset: 0xb2b8, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_1E2AC0854DB34634B8628FA06761103D;//[Offset: 0xb2f8, Size: 88]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_4C594B0E4880E2C129748CAC58560FFD;//[Offset: 0xb350, Size: 272]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4A1B031341D802FD273D66A0FE2D12E4;//[Offset: 0xb460, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_FA9D1FF8475F807E37176089F0E37413;//[Offset: 0xb510, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EFA5139944DB2CCA9CF74F9D66E75FBA;//[Offset: 0xb550, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D87B9FFF40BE0E4CA6C92F8D7E97DD44;//[Offset: 0xb590, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_A0EFD9664DD84B310B99C984DD6A4AAA;//[Offset: 0xb628, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45D324AB4849DA27CD476BB1276165C7;//[Offset: 0xb680, Size: 64]
	AnimNode_AnimDynamics AnimGraphNode_AnimDynamics_B24FC8AA42B8ADDB9CEA3B85CCF3783A;//[Offset: 0xb6c0, Size: 616]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_39BC5C5244C7C0702026B984069F9592;//[Offset: 0xb928, Size: 128]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_7517B75048FFBB6AF0EFE6BBF40B008E;//[Offset: 0xb9a8, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_1484B1BF4561229759BC4591C997673F;//[Offset: 0xba58, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_1F8EEC8D4046BCC5598106B3F45CF06D;//[Offset: 0xbab0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C6C90C5D464FD0A38F2B69A4744AE086;//[Offset: 0xbb30, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A930BC944D56D9E49F368FBACB3C47CB;//[Offset: 0xbb70, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_2BD588374099005EAEDF26833F93BB85;//[Offset: 0xbbb0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_858FC7BB46C4EEE973537F842BB8D43A;//[Offset: 0xbc30, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_94723F3049227328EB601682845C07E6;//[Offset: 0xbc70, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E340BD354BE2DE050CCBDD859EEDD74B;//[Offset: 0xbd08, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_5697A2704506EC1D37930782F5E89BA1;//[Offset: 0xbd48, Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_142C4AFB42245BCB34C928AF4E1E45A9;//[Offset: 0xbda0, Size: 96]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_04984E4D4F3C30CF30CAF792C054BE5B;//[Offset: 0xbe00, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E601DF6741CF7C3CF12C739C05B0606C;//[Offset: 0xbeb0, Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_F77B751A43E602B81F3D04BEFF0CE731;//[Offset: 0xbef0, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E518F09D4602077F30BFE39254041671;//[Offset: 0xc080, Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_46D5A9EA4C1CDC66134D089C80FDAFC2;//[Offset: 0xc110, Size: 400]
	AnimNode_CopyBone AnimGraphNode_CopyBone_9F139F6C4C558D3A1E6AE1A6B6463A78;//[Offset: 0xc2a0, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_40D4ED794CEBF824F7E90895F02C15A3;//[Offset: 0xc330, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6677BDA045FF9B2BDFAD97B5A7020449;//[Offset: 0xc368, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_48F9D2164A0C89EA4899B2833EC5E91C;//[Offset: 0xc3e8, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C48B4F5540F59FEA77ABCA91A94ACDB0;//[Offset: 0xc480, Size: 64]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_B7DCB1F545BBA03C6F70009ECBE46581;//[Offset: 0xc4c0, Size: 272]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_BA6CBBAC4A94CB17AFD44CAF9033BAC2;//[Offset: 0xc5d0, Size: 128]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D168967647B889BED6C4A193DBCAA5C7;//[Offset: 0xc650, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_366EE6DE4B8C3E772CD8A5B06B7C4016;//[Offset: 0xc688, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_839E288E459F37C0A34590A3ABC589A6;//[Offset: 0xc6c8, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2C6839A2476C41A5BC7041A4922C0BE8;//[Offset: 0xc760, Size: 64]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2A8BCC054AC3D281CAA6A4BFCCAF87B7;//[Offset: 0xc7a0, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_4DBD0FB34AC9AE0D9F7FCA85FC9441E4;//[Offset: 0xc7d8, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5C66128947FE3D52CD27B8A88E67845A;//[Offset: 0xc878, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B8DDB48247B9D99582285799A6065950;//[Offset: 0xc8b0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_866C9DE74ECB92FB2890369644C0F642;//[Offset: 0xc8f0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EBADCBDF4A69491C77469FB34974ADEC;//[Offset: 0xc930, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_44DFDE8D470A517B52C6B386662E0FE8;//[Offset: 0xc970, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5B41CD394E15933CC2B93E84F85859CE;//[Offset: 0xc9f0, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D55BADD744107EEFD6387E96310F553A;//[Offset: 0xca30, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_72A4A7894E234479B2E6D5A835D302F4;//[Offset: 0xcab0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_07C4529D4CA3F2473FEF8AB06DD3C672;//[Offset: 0xcb30, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F5490B6042F791766F79608C0C916C9F;//[Offset: 0xcb70, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_9CEF7C4F422C35E8CBA17197CFFCE062;//[Offset: 0xcbb0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_47F5E8B740E6125B1C5BB2B657D51286;//[Offset: 0xcc30, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F122FFAF47B7AB324070E687EE3295EA;//[Offset: 0xcc70, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_B2F5526743D81C1EA005C2B0D35B5BA3;//[Offset: 0xccb0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DD2F1D7B4E912E680D078795D5161F4E;//[Offset: 0xcd30, Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_1F1A7FFD4436DA20E26672AEFD579C4A;//[Offset: 0xcd70, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_C4BA145E4DC4ACE6C892259348091355;//[Offset: 0xce00, Size: 144]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9C28ED25440F0CA694235F92AD6D2523;//[Offset: 0xce90, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A0F2B2244E4EAA661F8B0CBFE29D0E82;//[Offset: 0xced0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_580A0C09416E430F2C16F393FA7E3591;//[Offset: 0xcf10, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C1BBBC8E4CD4089C7C0496AE32ECD5DE;//[Offset: 0xcf50, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C2ECF66D425B817D7167C4938789E2CC;//[Offset: 0xcf90, Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2B8F937349EA6ECF964E5DAF74BEFB84;//[Offset: 0xcfd0, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_7BF763274431A1A8A12D8FBE09000DF7;//[Offset: 0xd008, Size: 160]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_44B488A74A6F8181701D71BD7B808C4C;//[Offset: 0xd0a8, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_56BEB7194549CB12B5813AA01F0AF407;//[Offset: 0xd148, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_5712297844B4AD111AFC43BD00B534C1;//[Offset: 0xd180, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_101514FB4670448CA055E0A7EE93E0CE;//[Offset: 0xd218, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_0EEB1C9F4D53FF1CC39F39914A4AC99B;//[Offset: 0xd258, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6C44F45D4971E8198A94E9BE929900D6;//[Offset: 0xd2d8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_33DC962B431C5ADD456E7881DE870123;//[Offset: 0xd318, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_20196C9C44B0597A14C9A6BB5B8B9BF6;//[Offset: 0xd358, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_834824394BB861D5963F2692C8CF823C;//[Offset: 0xd398, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_D57EB48D428FD4F7F348E2AB8B5AB544;//[Offset: 0xd438, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C83EC5E2446D282877E71DB92A10B997;//[Offset: 0xd470, Size: 152]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_42303ED043F46ABF72C219A17D37F6E5;//[Offset: 0xd508, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_076BA5F64300538E5CFE1FB1CB904F07;//[Offset: 0xd540, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_9691FE64441FA81C8F7E7EB9270605DA;//[Offset: 0xd580, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E742431245294D20A869D08063C84107;//[Offset: 0xd620, Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_DD7D8AFD4EDD6AA0FB861695CF9A3B57;//[Offset: 0xd658, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4D3716764417292D20F5F0AE5A0DCBC0;//[Offset: 0xd690, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_030CAE2840F90981DC4A87A7FCD7F793;//[Offset: 0xd728, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D1F16F664D6EC308C0F82D8DFF839601;//[Offset: 0xd780, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DC60C41B4AC8D48B0D3D148DE1347F29;//[Offset: 0xd800, Size: 152]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_D136BCBC4F26DC28695C49BC65316E5B;//[Offset: 0xd898, Size: 160]
	AnimNode_Slot AnimGraphNode_Slot_2B912B2843A2AC19C6B24B81629AED79;//[Offset: 0xd938, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3F9623C4422821095FBBD8B1564675C0;//[Offset: 0xd990, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_27F9605F4A457C959C1206B8E5518E7D;//[Offset: 0xda28, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_BCC00FA0442E3027321663ABB638CFA5;//[Offset: 0xdad8, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_9CB5DD4A480E01C81156FF82401F76F6;//[Offset: 0xdb18, Size: 88]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_351245E0496727C1BEDBD7883F6B168E;//[Offset: 0xdb70, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_00459A0141F9186700C690B4A57B99F0;//[Offset: 0xdc08, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_18375F964C0C7DB2B9734D8DB9465D04;//[Offset: 0xdc48, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_349F6B894877B31B66CB2ABB12A9BB0E;//[Offset: 0xdcf8, Size: 64]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_764410DB4ED190224CDE6B9836782122;//[Offset: 0xdd38, Size: 240]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_EFCCB34248FA1B28FCB2D0B61343EABB;//[Offset: 0xde28, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_26D571DF49CD11A390229AB538452139;//[Offset: 0xdea8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_BECB92E745B35326503FB38AE94CA14C;//[Offset: 0xdee8, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_12BAF2314F226FBCBCE26E928230FC34;//[Offset: 0xdf28, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1A6FDE8D41457834579D2583193492A0;//[Offset: 0xdfc0, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_EEE8FB7449C423BCF447CD9007C94405;//[Offset: 0xe000, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_F5F055884EF50CC6A9FC4F810A8B70D6;//[Offset: 0xe058, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_DBE3C8ED47EF28AA01ECC187CCDD952E;//[Offset: 0xe108, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_86D3E42E474A250DF34A9B8986E0F1DC;//[Offset: 0xe1a0, Size: 88]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8CE5B2584A68A7A6619A73A3D8D0E203;//[Offset: 0xe1f8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_05C3EBED44C7FA5BC74573A0B46AC77A;//[Offset: 0xe278, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F07606C642AECA9DD806B6AE08C69770;//[Offset: 0xe2b8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5D49D5704D8235EB5903B4998023720C;//[Offset: 0xe2f8, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_41D14A4A477961FEFE6638BFB4EA8258;//[Offset: 0xe338, Size: 128]
	float MoveRight;//[Offset: 0xe3b8, Size: 4]
	float MoveForward;//[Offset: 0xe3bc, Size: 4]
	float AnimRate;//[Offset: 0xe3c0, Size: 4]
	float HandFavoring;//[Offset: 0xe3c4, Size: 4]
	float HandIKWeight;//[Offset: 0xe3c8, Size: 4]
	float FallingVelocityZFactor;//[Offset: 0xe3cc, Size: 4]
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0xe3d0, Size: 12]
	Vector FirstAimSpine_Prone;//[Offset: 0xe3dc, Size: 12]
	Object* SpecialRescueMontageAsset;//[Offset: 0xe3e8, Size: 40]
	Object* PhoneMeshAsset;//[Offset: 0xe410, Size: 40]
	StaticMesh* PhoneMesh;//[Offset: 0xe438, Size: 4]
	BP_RevivalPhone_C* PhoneActor;//[Offset: 0xe43c, Size: 4]
	TimerHandle TimerHandle_DelayLeaveCallingState;//[Offset: 0xe440, Size: 8]
	float LeaveShovel_Rate;//[Offset: 0xe448, Size: 4]
	bool RevivalPhoneCanDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe44c, Size: 1]

--------------------------------
Class: BP_RevivalPhone_C.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* StaticMesh;//[Offset: 0x2d0, Size: 4]

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x2c, Size: 12]
	PoseLink Additive;//[Offset: 0x38, Size: 12]
	float Alpha;//[Offset: 0x44, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48, Size: 8]
	int LODThreshold;//[Offset: 0x50, Size: 4]
	float ActualAlpha;//[Offset: 0x54, Size: 4]

--------------------------------
Class: AnimNode_Base
	ExposedValueHandler EvaluateGraphExposedInputs;//[Offset: 0x8, Size: 32]

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 8]
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ExposedValueCopyRecord
	Property* SourceProperty;//[Offset: 0x0, Size: 4]
	FName SourcePropertyName;//[Offset: 0x8, Size: 8]
	FName SourceSubPropertyName;//[Offset: 0x10, Size: 8]
	int SourceArrayIndex;//[Offset: 0x18, Size: 4]
	Property* DestProperty;//[Offset: 0x1c, Size: 4]
	int DestArrayIndex;//[Offset: 0x20, Size: 4]
	int Size;//[Offset: 0x24, Size: 4]
	bool bInstanceIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum PostCopyOperation;//[Offset: 0x29, Size: 1]
	enum CopyType;//[Offset: 0x2a, Size: 1]
	Property* CachedSourceProperty;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 4]
	float Bias;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x2c, Size: 12]
	float[] blendTime;//[Offset: 0x38, Size: 12]
	enum BlendType;//[Offset: 0x44, Size: 1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x48, Size: 4]
	BlendProfile* BlendProfile;//[Offset: 0x4c, Size: 4]
	AlphaBlend[] Blends;//[Offset: 0x50, Size: 12]
	float[] BlendWeights;//[Offset: 0x5c, Size: 12]
	float[] RemainingBlendTimes;//[Offset: 0x68, Size: 12]
	int LastActiveChildIndex;//[Offset: 0x74, Size: 4]
	BlendSampleData[] PerBoneSampleData;//[Offset: 0x78, Size: 12]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: BlendSampleData
	int SampleDataIndex;//[Offset: 0x0, Size: 4]
	AnimSequence* Animation;//[Offset: 0x4, Size: 4]
	float TotalWeight;//[Offset: 0x8, Size: 4]
	float Time;//[Offset: 0xc, Size: 4]
	float PreviousTime;//[Offset: 0x10, Size: 4]
	float SamplePlayRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AnimNode_SaveCachedPose.AnimNode_Base
	PoseLink Pose;//[Offset: 0x2c, Size: 12]
	FName CachePoseName;//[Offset: 0x38, Size: 8]
	float GlobalWeight;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x50, Size: 4]
	float Y;//[Offset: 0x54, Size: 4]
	float Z;//[Offset: 0x58, Size: 4]
	float PlayRate;//[Offset: 0x5c, Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float StartPosition;//[Offset: 0x64, Size: 4]
	BlendSpaceBase* BlendSpace;//[Offset: 0x68, Size: 4]
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	BlendFilter BlendFilter;//[Offset: 0x70, Size: 108]
	BlendSampleData[] BlendSampleDataCache;//[Offset: 0xdc, Size: 12]
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	int GroupIndex;//[Offset: 0x2c, Size: 4]
	byte GroupRole;//[Offset: 0x30, Size: 1]
	float BlendWeight;//[Offset: 0x34, Size: 4]
	float InternalTimeAccumulator;//[Offset: 0x38, Size: 4]

--------------------------------
Class: BlendFilter

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x2c, Size: 4]
	int MaxTransitionsPerFrame;//[Offset: 0x30, Size: 4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	int CurrentState;//[Offset: 0x3c, Size: 4]
	float ElapsedTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x50, Size: 4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	float PlayRate;//[Offset: 0x58, Size: 4]
	float StartPosition;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: AnimNode_LayeredBoneBlend.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x2c, Size: 12]
	PoseLink[] BlendPoses;//[Offset: 0x38, Size: 12]
	InputBlendPose[] LayerSetup;//[Offset: 0x44, Size: 12]
	float[] BlendWeights;//[Offset: 0x50, Size: 12]
	bool bMeshSpaceRotationBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	byte CurveBlendOption;//[Offset: 0x5d, Size: 1]
	bool bBlendRootMotionBasedOnRootBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bHasRelevantPoses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	PerBoneBlendWeight[] PerBoneBlendWeights;//[Offset: 0x60, Size: 12]
	Guid SkeletonGuid;//[Offset: 0x6c, Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0x7c, Size: 16]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 8]
	int BlendDepth;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PerBoneBlendWeight
	int SourceIndex;//[Offset: 0x0, Size: 4]
	float BlendWeight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimNode_UseCachedPose.AnimNode_Base
	PoseLink LinkToCachingNode;//[Offset: 0x2c, Size: 12]
	FName CachePoseName;//[Offset: 0x38, Size: 8]

--------------------------------
Class: AnimNode_RotateRootBone.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x2c, Size: 12]
	float Pitch;//[Offset: 0x38, Size: 4]
	float Yaw;//[Offset: 0x3c, Size: 4]
	Rotator MeshToComponent;//[Offset: 0x40, Size: 12]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x2c, Size: 12]
	FName SlotName;//[Offset: 0x38, Size: 8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AnimNode_TwoWayBlend.AnimNode_Base
	PoseLink A;//[Offset: 0x2c, Size: 12]
	PoseLink B;//[Offset: 0x38, Size: 12]
	float Alpha;//[Offset: 0x44, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48, Size: 8]
	float InternalBlendAlpha;//[Offset: 0x50, Size: 4]
	bool bAIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bBIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]

--------------------------------
Class: AnimNode_BlendListByInt.AnimNode_BlendListBase.AnimNode_Base
	int ActiveChildIndex;//[Offset: 0x94, Size: 4]

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0x58, Size: 24]
	Vector Translation;//[Offset: 0x70, Size: 12]
	Rotator Rotation;//[Offset: 0x7c, Size: 12]
	Vector Scale;//[Offset: 0x88, Size: 12]
	byte TranslationMode;//[Offset: 0x94, Size: 1]
	byte RotationMode;//[Offset: 0x95, Size: 1]
	byte ScaleMode;//[Offset: 0x96, Size: 1]
	byte TranslationSpace;//[Offset: 0x97, Size: 1]
	byte RotationSpace;//[Offset: 0x98, Size: 1]
	byte ScaleSpace;//[Offset: 0x99, Size: 1]

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x2c, Size: 12]
	float Alpha;//[Offset: 0x38, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x3c, Size: 8]
	int LODThreshold;//[Offset: 0x44, Size: 4]
	float ActualAlpha;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: AnimNode_BlendListByEnum.AnimNode_BlendListBase.AnimNode_Base
	int[] EnumToPoseIndex;//[Offset: 0x94, Size: 12]
	byte ActiveEnumValue;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: AnimNode_RotationOffsetBlendSpace.AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	PoseLink BasePose;//[Offset: 0xec, Size: 12]
	int LODThreshold;//[Offset: 0xf8, Size: 4]
	bool bIsLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float Alpha;//[Offset: 0x100, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x104, Size: 8]
	float ActualAlpha;//[Offset: 0x10c, Size: 4]

--------------------------------
Class: AnimNode_CopyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference SourceBone;//[Offset: 0x58, Size: 24]
	BoneReference TargetBone;//[Offset: 0x70, Size: 24]
	bool bCopyTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bCopyRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	bool bCopyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 1]
	byte ControlSpace;//[Offset: 0x8b, Size: 1]

--------------------------------
Class: AnimNode_SubInstance.AnimNode_Base
	PoseLink InPose;//[Offset: 0x2c, Size: 12]
	class AnimInstance* InstanceClass;//[Offset: 0x38, Size: 4]
	AnimInstance* InstanceToRun;//[Offset: 0x3c, Size: 4]
	Property*[] InstanceProperties;//[Offset: 0x40, Size: 12]
	Property*[] SubInstanceProperties;//[Offset: 0x4c, Size: 12]
	FName[] SourcePropertyNames;//[Offset: 0x58, Size: 12]
	FName[] DestPropertyNames;//[Offset: 0x64, Size: 12]

--------------------------------
Class: AnimNode_Fabrik.AnimNode_SkeletalControlBase.AnimNode_Base
	Transform EffectorTransform;//[Offset: 0x60, Size: 48]
	byte EffectorTransformSpace;//[Offset: 0x90, Size: 1]
	BoneReference EffectorTransformBone;//[Offset: 0x98, Size: 24]
	bool bUseIKFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	Vector PositionFreeze;//[Offset: 0xb4, Size: 12]
	Vector RotationFreeze;//[Offset: 0xc0, Size: 12]
	Vector ScaleFeeze;//[Offset: 0xcc, Size: 12]
	BoneSocketTarget EffectorTarget;//[Offset: 0xe0, Size: 96]
	byte EffectorRotationSource;//[Offset: 0x140, Size: 1]
	BoneReference TipBone;//[Offset: 0x148, Size: 24]
	BoneReference RootBone;//[Offset: 0x160, Size: 24]
	float Precision;//[Offset: 0x178, Size: 4]
	int MaxIterations;//[Offset: 0x17c, Size: 4]
	bool bEnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]

--------------------------------
Class: BoneSocketTarget
	bool bUseSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BoneReference BoneReference;//[Offset: 0x8, Size: 24]
	SocketReference SocketReference;//[Offset: 0x20, Size: 64]

--------------------------------
Class: SocketReference
	FName SocketName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimNode_ApplyMeshSpaceAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x2c, Size: 12]
	PoseLink Additive;//[Offset: 0x38, Size: 12]
	float Alpha;//[Offset: 0x44, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48, Size: 8]
	int LODThreshold;//[Offset: 0x50, Size: 4]
	float ActualAlpha;//[Offset: 0x54, Size: 4]

--------------------------------
Class: AnimNode_AnimDynamics.AnimNode_SkeletalControlBase.AnimNode_Base
	enum SimulationSpace;//[Offset: 0x58, Size: 1]
	BoneReference RelativeSpaceBone;//[Offset: 0x60, Size: 24]
	bool bChain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	BoneReference BoundBone;//[Offset: 0x80, Size: 24]
	BoneReference ChainEnd;//[Offset: 0x98, Size: 24]
	Vector BoxExtents;//[Offset: 0xb0, Size: 12]
	Vector LocalJointOffset;//[Offset: 0xbc, Size: 12]
	Vector OldLocalJointOffset;//[Offset: 0xc8, Size: 12]
	float GravityScale;//[Offset: 0xd4, Size: 4]
	bool bLinearSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bAngularSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	float LinearSpringConstant;//[Offset: 0xdc, Size: 4]
	float AngularSpringConstant;//[Offset: 0xe0, Size: 4]
	bool bEnableWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool bWindWasEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	float WindScale;//[Offset: 0xe8, Size: 4]
	bool bOverrideLinearDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	float LinearDampingOverride;//[Offset: 0xf0, Size: 4]
	bool bOverrideAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	float AngularDampingOverride;//[Offset: 0xf8, Size: 4]
	bool bOverrideAngularBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float AngularBiasOverride;//[Offset: 0x100, Size: 4]
	bool bDoUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bDoEval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	int NumSolverIterationsPreUpdate;//[Offset: 0x108, Size: 4]
	int NumSolverIterationsPostUpdate;//[Offset: 0x10c, Size: 4]
	AnimPhysConstraintSetup ConstraintSetup;//[Offset: 0x110, Size: 92]
	bool bUseDynamicAngularLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	Vector Dynamic_AngularLimitsMin;//[Offset: 0x170, Size: 12]
	Vector Dynamic_AngularLimitsMax;//[Offset: 0x17c, Size: 12]
	bool bUsePlanarLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	AnimPhysPlanarLimit[] PlanarLimits;//[Offset: 0x18c, Size: 12]
	bool bUseSphericalLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	AnimPhysSphericalLimit[] SphericalLimits;//[Offset: 0x19c, Size: 12]
	enum CollisionType;//[Offset: 0x1a8, Size: 1]
	float SphereCollisionRadius;//[Offset: 0x1ac, Size: 4]
	int NonEvaluateFrameNum;//[Offset: 0x1b0, Size: 4]
	Vector ExternalForce;//[Offset: 0x1b8, Size: 12]

--------------------------------
Class: AnimPhysConstraintSetup
	enum LinearXLimitType;//[Offset: 0x0, Size: 1]
	enum LinearYLimitType;//[Offset: 0x1, Size: 1]
	enum LinearZLimitType;//[Offset: 0x2, Size: 1]
	Vector LinearAxesMin;//[Offset: 0x4, Size: 12]
	Vector LinearAxesMax;//[Offset: 0x10, Size: 12]
	enum AngularConstraintType;//[Offset: 0x1c, Size: 1]
	enum TwistAxis;//[Offset: 0x1d, Size: 1]
	float ConeAngle;//[Offset: 0x20, Size: 4]
	float AngularXAngle;//[Offset: 0x24, Size: 4]
	float AngularYAngle;//[Offset: 0x28, Size: 4]
	float AngularZAngle;//[Offset: 0x2c, Size: 4]
	Vector AngularLimitsMin;//[Offset: 0x30, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x3c, Size: 12]
	enum AngularTargetAxis;//[Offset: 0x48, Size: 1]
	Vector AngularTarget;//[Offset: 0x4c, Size: 12]
	bool bLinearFullyLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: AnimPhysPlanarLimit
	BoneReference DrivingBone;//[Offset: 0x0, Size: 24]
	Transform PlaneTransform;//[Offset: 0x20, Size: 48]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AnimPhysSphericalLimit
	BoneReference DrivingBone;//[Offset: 0x0, Size: 24]
	Vector SphereLocalOffset;//[Offset: 0x18, Size: 12]
	float LimitRadius;//[Offset: 0x24, Size: 4]
	enum LimitType;//[Offset: 0x28, Size: 1]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x180, Size: 4]
	void EnterWater_BluePrint();// 0x29fa2f4
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x29fa2f4
	void ExecuteUbergraph_BP_SwimController(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool ___bool_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkAudioEvent* ___object_Variable, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AkAudioEvent* ___object_Variable2, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_Event_bEnterWater, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2);// 0x29fa2f4

--------------------------------
Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	bool CheckInAngle(STExtraBaseCharacter* MyPawn, STExtraBaseCharacter* EnemyPawn, float MaxAngle, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn, Actor*[] ___object_Variable, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x29fa2f4
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn, Vector CallFunc_GetSocketLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Actor*[] ___object_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, STExtraVehicleWarVehicle* K2Node_DynamicCast_AsSTExtra_Vehicle_War_Vehicle, bool K2Node_DynamicCast_bSuccess, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, STExtraFloatingVehicle* K2Node_DynamicCast_AsSTExtra_Floating_Vehicle, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess4);// 0x29fa2f4
	byte DrawDebugType;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0xe9c, Size: 4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0xea0, Size: 4]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x1fedaa8
	Vector GetRotationInputDir();// 0x1feda58

--------------------------------
Class: STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x124, Size: 4]
	float StartAccelerationRate;//[Offset: 0x128, Size: 4]
	float StopAccelerationRate;//[Offset: 0x12c, Size: 4]
	float MaxRotationYawAngle;//[Offset: 0x130, Size: 4]
	float RotationYawRate;//[Offset: 0x134, Size: 4]
	float BackwardForceScale;//[Offset: 0x138, Size: 4]
	float Acceleration;//[Offset: 0x13c, Size: 4]
	float RotationYawAngle;//[Offset: 0x140, Size: 4]
	FName ApplyForceSocketName;//[Offset: 0x148, Size: 8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x150, Size: 4]
	bool bClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	float STThrottleInput;//[Offset: 0x160, Size: 4]
	float STSteeringInput;//[Offset: 0x164, Size: 4]
	BuoyancyForceComponent* buoyancyForce;//[Offset: 0x16c, Size: 4]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	float MinTurnOverDegree;//[Offset: 0x178, Size: 4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x20403ec
	float GetThrottleInput();// 0x20403d0
	float GetSteeringInput();// 0x20403b4

--------------------------------
Class: CameraSettingComponent_C.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x29fa2f4
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x29fa2f4
	float Current Target Arm Length;//[Offset: 0xc0, Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0xc4, Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0xc8, Size: 12]

--------------------------------
Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0, Size: 4]
	void OnAreaOverlapEnd(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);// 0x29fa2f4
	void OnAreaOverlapBegin(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllowWater_bCanEnter, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_Contains_ReturnValue);// 0x29fa2f4
	void StartDrop(Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, WaitDropData K2Node_MakeStruct_WaitDropData, bool CallFunc_IsValid_ReturnValue, ItemDropMgrComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x29fa2f4
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x29fa2f4
	void ShowAnimationButton(BP_PlayerPawn_C* PlayerPawn, bool IsShow);// 0x29fa2f4
	void ServerDoWaterLogic(out const PlayerController* PlayerController);// 0x29fa2f4
	void OnWateringUIChanged(bool Show);// 0x29fa2f4
	void DelayResetParticleCD();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void SpawnTreeParticle();// 0x29fa2f4
	void CustomEvent();// 0x29fa2f4
	void ExecuteUbergraph_BP_WateringArea(int EntryPoint, BP_WateringArea_C* ___object_Variable, int ___int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString ___string_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_CustomEvent_PlayerPawn, bool K2Node_CustomEvent_IsShow, const PlayerController* K2Node_CustomEvent_PlayerController, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_CustomEvent_Show, FString ___string_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue4, FString K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool ___bool_Variable2, BP_WateringArea_C* K2Node_Select2_Default, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, int CallFunc_PostAkEvent_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2);// 0x29fa2f4
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x2d4, Size: 4]
	StaticMeshComponent* FormerMesh;//[Offset: 0x2d8, Size: 4]
	SceneComponent* LoopParticlePoint;//[Offset: 0x2dc, Size: 4]
	AkComponent* Ak;//[Offset: 0x2e0, Size: 4]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x2e4, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2e8, Size: 4]
	SphereComponent* Sphere;//[Offset: 0x2ec, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f0, Size: 4]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x2f4, Size: 4]
	PlayerController*[] WaterDoneList;//[Offset: 0x2f8, Size: 12]
	TimerHandle TimerHandle;//[Offset: 0x308, Size: 8]
	int[] DropPlanIDList;//[Offset: 0x310, Size: 12]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	FString ShowButtonTextID;//[Offset: 0x320, Size: 12]
	PaperSprite* ShowButtonPic;//[Offset: 0x32c, Size: 4]
	ParticleSystem* ParticleTrigger;//[Offset: 0x330, Size: 4]
	Vector ParticleTriggerPos;//[Offset: 0x334, Size: 12]
	ParticleSystem* ParticleLoop;//[Offset: 0x340, Size: 4]
	Vector ParticleLoopPos;//[Offset: 0x344, Size: 12]
	float ParticleLoopWait;//[Offset: 0x350, Size: 4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x354, Size: 4]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x358, Size: 4]
	AkAudioEvent* AudioLoop;//[Offset: 0x35c, Size: 4]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	int ActivityButtonId;//[Offset: 0x364, Size: 4]

--------------------------------
Class: WaitDropData
	STExtraBaseCharacter* KillerPawn;//[Offset: 0x0, Size: 4]
	FString DeadPawnDesc;//[Offset: 0x4, Size: 12]
	Vector DropGroundPoint;//[Offset: 0x10, Size: 12]
	class PlayerTombBox* DropTomb;//[Offset: 0x1c, Size: 4]
	int[] DropPlanIDList;//[Offset: 0x20, Size: 12]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: ItemDropMgrComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0xfc, Size: 12]
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	int GM_SpawnItemFrame;//[Offset: 0x10c, Size: 4]
	bool bEnableAIBulletDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	class PlayerTombBox* DefaultTomb;//[Offset: 0x114, Size: 4]
	class PlayerRemainTombBox* LastGameRemainTomb;//[Offset: 0x118, Size: 4]
	FString DropItemCfgTableName;//[Offset: 0x11c, Size: 12]
	FString DropItemRuleTableName;//[Offset: 0x128, Size: 12]
	int GridStep;//[Offset: 0x134, Size: 4]
	WaitDropData[] WaitDropList;//[Offset: 0x138, Size: 12]
	int MaxRandomWeight;//[Offset: 0x144, Size: 4]
	float RadiusStep;//[Offset: 0x148, Size: 4]
	float ZBias;//[Offset: 0x14c, Size: 4]
	float LookUpDistance;//[Offset: 0x150, Size: 4]
	UAEDataTable* DropRuleTable;//[Offset: 0x154, Size: 4]
	Property*[] DropRuleTablePropertys;//[Offset: 0x158, Size: 12]
	int CurSpawnItemFrame;//[Offset: 0x164, Size: 4]
	<int,DropIDData> DropIDMap;//[Offset: 0x168, Size: 60]
	FString RemainItemRuleTableName;//[Offset: 0x1a4, Size: 12]
	RemainItemRuleDataRow[] RemainItemRuleList;//[Offset: 0x1b0, Size: 12]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x1f045f8
	int PickItemByUnionRandom(float WeightCount, out RandomDropData[] WeightMap);// 0x1f04500
	int PickItemByIndependentRandom(float Weight);// 0x1f04480
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x1f042d0
	void InitRemainItemRuleTable();// 0x1f042b0
	void InitDropIDMap();// 0x1f0429c
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x1f041e0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x1f040c0
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x1f04028
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x1f03e0c
	LastGameRemainItemData GetRemainItemData(out PickUpItemData[] ItemDataList, STExtraPlayerController* PC);// 0x1f03c5c
	void GetMonsterBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x1f03a04
	FString GetDropItemCfgList(out DropItemConfig[] DropList, int DropConfigID);// 0x1f03868
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIds);// 0x1f035c4
	int GetCountStrNum(FString CountStr);// 0x1f03464
	void GetBulletDropListByPlanIDs(Actor* Killer, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList);// 0x1f03220
	PickUpItemData[] GeneratePickupListByDropID(int DropConfigID);// 0x1f03174
	DropPropData[] GenerateItemAttachments(int ItemID, int MinNum, int MaxNum);// 0x1f02fd8
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x1f02e50
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x1f02d40
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer);// 0x1f02af0
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x1f02948
	void DropLastGameRemainTombBox(LastGameRemainItemData LastGameRemainItemData);// 0x1f0280c
	void CheckNeedDropItem();// 0x1f027f8
	void CheckMonsterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x1f026a4
	void CheckCharacterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x1f02550
	bool CheckCanRemain(ItemRecordData ItemRecord);// 0x1f02454
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x1f02340
	void CalcDropItemListByDropCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] ItemList);// 0x1f02210
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x1f01e4c
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x1f01ca4
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x1f01b94

--------------------------------
Class: DropIDData
	FName[] DropRowList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: RemainItemRuleDataRow
	int KeyID;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int RemainPerc;//[Offset: 0x10, Size: 4]

--------------------------------
Class: RandomDropData
	int[] ItemIdList;//[Offset: 0x0, Size: 12]
	int RuleID;//[Offset: 0xc, Size: 4]
	int[] ItemCountList;//[Offset: 0x10, Size: 12]
	float Weight;//[Offset: 0x1c, Size: 4]
	int DropMode;//[Offset: 0x20, Size: 4]
	int MinAttachment;//[Offset: 0x24, Size: 4]
	int MaxAttachment;//[Offset: 0x28, Size: 4]
	int ItemIDStyle;//[Offset: 0x2c, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: DropToGroundData
	PickUpItemData PickUpItemData;//[Offset: 0x0, Size: 48]
	int ItemID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: MonsterSingleBulletDropIds
	int[] BulletDropIds;//[Offset: 0x0, Size: 12]
	int[] BulletDropParams;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MonsterSingleDropIds

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x24, Size: 8]
	Vector2D SourceDimension;//[Offset: 0x2c, Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x34, Size: 4]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 12]
	Vector2D BakedSourceUV;//[Offset: 0x44, Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x4c, Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x54, Size: 4]
	MaterialInterface* DefaultMaterial;//[Offset: 0x58, Size: 4]
	MaterialInterface* AlternateMaterial;//[Offset: 0x5c, Size: 4]
	PaperSpriteSocket[] Sockets;//[Offset: 0x60, Size: 12]
	byte SpriteCollisionDomain;//[Offset: 0x6c, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x70, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x74, Size: 4]
	int AlternateMaterialSplitIndex;//[Offset: 0x78, Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 48]
	FName SocketName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x2fc, Size: 12]
	FString HousePathFilePath;//[Offset: 0x308, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x318, Size: 12]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x360, Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x39c, Size: 4]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x1dcf330
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x1dcf26c
	void BreakHouse(Vector LogicAreaLoc);// 0x1dcf1fc
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x1dcf184

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x2f4, Size: 4]

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x2cc, Size: 4]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x2d0, Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2dc, Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x2e0, Size: 4]

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x1e6fb40
	int GetVehicleDamagedSpeed();// 0x29fa2f4
	int GetVehicleDamagedCoefficient();// 0x29fa2f4
	<enum,float> GetTargetDamageRateMap();// 0x1e6f9c0
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x1e6f840
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x1e6f7b8
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x1e6f620
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x1e6f574
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x1e6f4ec
	enum[] CPP_GetDamageableGameObjectType();// 0x1e6f424
	bool CPP_GetCanBePicked();// 0x1e6f3f4
	FName CPP_GetBulletBlockComponentTag();// 0x1e6f3ac
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x1e6f300
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x1e6f234
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x1e6f140
	void BroadcastDamageState(int DState);// 0x1e6f08c
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x29fa2f4
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x29fa2f4
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x29fa2f4
	float BP_GetMaxHP();// 0x29fa2f4
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x29fa2f4
	float BP_GetDamageRateByTarget(Actor* Target);// 0x29fa2f4
	enum[] BP_GetDamageableGameObjectType();// 0x29fa2f4
	float BP_GetCurrentHP();// 0x29fa2f4
	bool BP_GetCanBePicked();// 0x29fa2f4
	FName BP_GetBulletBlockComponentTag();// 0x29fa2f4
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x29fa2f4
	void BP_DamageStateChange(int DState);// 0x29fa2f4
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x29fa2f4
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x29fa2f4

--------------------------------
Class: Socialland_ObjectPoolMgr_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b0, Size: 4]

--------------------------------
Class: AObjectPoolManager.Actor.Object
	PoolPreloadObjectItem[] Preloads;//[Offset: 0x2cc, Size: 12]
	PoolPreloadClassItem[] PreloadClasses;//[Offset: 0x2d8, Size: 12]
	PoolPreloadObjectItem[] PreloadTblRes;//[Offset: 0x2e4, Size: 12]
	PoolPreloadTableConfigItem[] PreLoadConfigTable;//[Offset: 0x2f0, Size: 12]
	Object*[] PreLoadQuotes;//[Offset: 0x2fc, Size: 12]
	UAEDataTable*[] LoadedTableArray;//[Offset: 0x3a4, Size: 12]
	void PreSpawnToPool(out const PoolPreloadObjectItem Item, out SoftObjectPath SoftObjectPath);// 0x1dd3244
	void PreLocalSpawnToPool(out const PoolPreloadClassItem Item, out SoftObjectPath SoftObjectPath);// 0x1dd30a8
	void PreLoadObjectsFinish(PoolPreloadAysncLoadParams loadParams);// 0x1dd3030
	void PreLoadClassesFinish();// 0x1dd301c
	void OnOpenObjectPool();// 0x1dd3008

--------------------------------
Class: PoolPreloadObjectItem
	Object* Object;//[Offset: 0x0, Size: 40]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int PreloadNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoolPreloadClassItem
	class Object* Object;//[Offset: 0x0, Size: 40]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int PreloadNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoolPreloadTableConfigItem
	int LoadPriority;//[Offset: 0x0, Size: 4]
	FString CSVFilePath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PoolPreloadAysncLoadParams

--------------------------------
Class: BP_LevelGenerator_C.DynamicSublevelGenerator.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x360, Size: 4]
	BP_LevelStreamVolumeContainer_C*[] LevelStreamVolumeContainer;//[Offset: 0x364, Size: 12]
	BP_MiniMapStandardPoint_C*[] MinimapStandportArray;//[Offset: 0x370, Size: 12]

--------------------------------
Class: DynamicSublevelGenerator.LuaActor.Actor.Object
	void OnLevelStreamStatusChanged(LevelStreaming* LevelStream);// 0x29fa2f4
	void InitializeLevelInfo();// 0x1dd37a8
	Vector GetOffsetLocation(int subIndex);// 0x29fa2f4
	void CreateSubLevel();// 0x29fa2f4
	LevelStreaming* CopyLevelStreamVolume(LevelStreamingVolume* OriginalStreamVolume, LevelStreamingVolume* TargetStreamVolume, FString LvPackageName, Vector Location, bool bMainVolume);// 0x1e83a7c

--------------------------------
Class: BP_LevelStreamVolumeContainer_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x358, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void ExecuteUbergraph_BP_LevelStreamVolumeContainer(int EntryPoint);// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x35c, Size: 4]
	LevelStreamingVolume*[] LevelStreamVolumes;//[Offset: 0x360, Size: 12]

--------------------------------
Class: SocialIsland_Main_C.LuaLevelScriptActor.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 4]
	void ReceiveBeginPlay();// 0x29fa2f4
	void ExecuteUbergraph_SocialIsland_Main(int EntryPoint);// 0x29fa2f4

--------------------------------
Class: LuaLevelScriptActor.LevelScriptActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x310, Size: 12]

--------------------------------
Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	BP_WeatherConfig_C* BP_WeatherConfig;//[Offset: 0x2d8, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2dc, Size: 4]

--------------------------------
Class: BP_WeatherConfig_C.WeatherConfigComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf0, Size: 4]
	void ReceiveBeginPlay();// 0x29fa2f4
	void DelaySyncWeatherLevelInfo();// 0x29fa2f4
	void OnWeatherLevelChanged();// 0x29fa2f4
	void ExecuteUbergraph_BP_WeatherConfig(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, STExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameMode* K2Node_DynamicCast_AsBattle_Royale_Game_Mode, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue3, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_HasAuthority_ReturnValue2, DirectionalLight* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, FString CallFunc_Conv_ColorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x29fa2f4

--------------------------------
Class: STExtraDelegateMgr.BlueprintFunctionLibrary.Object
	delegate OnPlayerStateNameChange;//[Offset: 0x1c, Size: 12]
	delegate OnHPChange;//[Offset: 0x28, Size: 12]
	delegate OnCanRescueOtherChange;//[Offset: 0x34, Size: 12]
	delegate OnRescueingStatusChangeChange;//[Offset: 0x40, Size: 12]
	delegate OnBreathChange;//[Offset: 0x4c, Size: 12]
	delegate OnKilledTips;//[Offset: 0x58, Size: 12]
	delegate OnVehicleHPChange;//[Offset: 0x64, Size: 12]
	delegate OnCharacterStateChangeDelegate;//[Offset: 0x70, Size: 12]
	delegate OnEnterBornIsland;//[Offset: 0x7c, Size: 12]
	delegate OnCorpsOutGame;//[Offset: 0x88, Size: 12]
	delegate OnCorpsJoinGame;//[Offset: 0x94, Size: 12]
	static STExtraDelegateMgr* STExtraDelegateMgrInstance();// 0x203ce04

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x14ec, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x14f8, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x1504, Size: 12]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151c, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1528, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1529, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152a, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x152c, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1530, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x1534, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x1538, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x153c, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x1540, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1544, Size: 1]
	class ChallengeLevelRules* ChallengeLevelRulesClass;//[Offset: 0x155c, Size: 4]
	ChallengeLevelRules* ChallengeLevelRules;//[Offset: 0x1560, Size: 4]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x1564, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1568, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x156c, Size: 12]
	ChallengeLevelRules* GetChallengeLevelRules();// 0x1e263d4

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc49, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4a, Size: 1]
	bool bConfigEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4b, Size: 1]
	bool bIsRevivalGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4c, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0xc50, Size: 216]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0xd28, Size: 12]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0xd34, Size: 60]
	enum GameModeType;//[Offset: 0xd70, Size: 1]
	enum GameModeSubType;//[Offset: 0xd71, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0xd74, Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xd78, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xd7c, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xd84, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xd88, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xd8c, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	FString SubAISuffix;//[Offset: 0xd94, Size: 12]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0xda0, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0xda4, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0xda8, Size: 4]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0xdac, Size: 4]
	UAELevelDirector* LevelDirector;//[Offset: 0xdb0, Size: 4]
	byte WorldLoadedType;//[Offset: 0xdb4, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0xdb8, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xdbc, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0xdc0, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc5, Size: 1]
	FString GameModeDisplayName;//[Offset: 0xdc8, Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0xdd4, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd8, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd9, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdda, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddb, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddc, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddd, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdde, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xddf, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde1, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde2, Size: 1]
	float ResetSignalHP_FatalDamage;//[Offset: 0xde4, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0xde8, Size: 4]
	<float,float> SignalHPApplyExtraDamageConfigMap;//[Offset: 0xdec, Size: 60]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe29, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0xe2c, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0xe38, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3c, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3d, Size: 1]
	FString GameModeConfigPath;//[Offset: 0xe40, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4d, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4e, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4f, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe51, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0xe54, Size: 76]
	Vector BornLocation;//[Offset: 0xea0, Size: 12]
	Vector AIBornLocation;//[Offset: 0xeac, Size: 12]
	float BornRadius;//[Offset: 0xeb8, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0xebc, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0xebd, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0xec0, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0xec4, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0xec8, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0xee8, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0xeec, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0xef4, Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0xefc, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0xf00, Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0xf04, Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0xf08, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0c, Size: 1]
	FString GameScriptPath;//[Offset: 0xf2c, Size: 12]
	FString LuaFileEntryFile;//[Offset: 0xf38, Size: 12]
	FString PreloadLuaFile;//[Offset: 0xf44, Size: 12]
	FString LuaModPath;//[Offset: 0xf50, Size: 12]
	FString LuaSubMod;//[Offset: 0xf5c, Size: 12]
	double StepGCTimeLimit;//[Offset: 0xf68, Size: 8]
	GameLuaEnv* LuaEnv;//[Offset: 0xf70, Size: 4]
	FString[] CustomWidgets;//[Offset: 0xf74, Size: 12]
	FString CustomUIName;//[Offset: 0xf80, Size: 12]
	GameModeState* CurrentState;//[Offset: 0xf8c, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0xf90, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0xf9c, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0xfa0, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0xfa4, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0xfa8, Size: 4]
	FName CurGameModeState;//[Offset: 0xfb0, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0xfc8, Size: 4]
	Actor* PlanePawn;//[Offset: 0xfcc, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0xfd4, Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0xfe0, Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0xfe4, Size: 4]
	float OutBoundDamage;//[Offset: 0xfe8, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x106c, Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1070, Size: 4]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1074, Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0x10b0, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x10b4, Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x10b8, Size: 4]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x10bc, Size: 4]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x1148, Size: 12]
	int MatchGoal;//[Offset: 0x1198, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x11b4, Size: 56]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x11ec, Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x11fc, Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1208, Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x120c, Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1210, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1218, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1220, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1229, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x122c, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1230, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1232, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1233, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1234, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1235, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1238, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1248, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x124c, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1250, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1254, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1258, Size: 60]
	int MaxVehiclesInReady;//[Offset: 0x1294, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x1298, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129c, Size: 1]
	int SuperCarNum;//[Offset: 0x12a0, Size: 4]
	int MaxGroups;//[Offset: 0x12a4, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x12a8, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x12ac, Size: 60]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1414, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x1418, Size: 12]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x1424, Size: 12]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1430, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x1434, Size: 60]
	bool IsInitGameTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1471, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1472, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x1474, Size: 60]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x14b0, Size: 12]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bc, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x14c0, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x14c4, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x14c8, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x14cc, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x14d0, Size: 12]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14dc, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14dd, Size: 1]
	float DistanceCullFactor;//[Offset: 0x14e0, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x14e4, Size: 4]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e8, Size: 1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x1e288ec
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x1e2878c
	void UnregisterFromGroup(STExtraPlayerController* InController);// 0x1e2870c
	void StopAllFakePlayerAIBehaviorTree();// 0x1e286f8
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser);// 0x1e285f0
	void SpawnAI(int Num);// 0x1e28578
	void SetStateLeftTime(int leftTime);// 0x1e284f8
	void SetGameEndReportData();// 0x1e284dc
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x1e28464
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x1e283a8
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x1e28220
	void RestartPlayer(Controller* NewPlayer);// 0x1db6e4c
	void ResetGameMode();// 0x1e28204
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x1e28150
	bool RegisterSpawnedVehicle(int InGroupIndex);// 0x1e280c8
	int RegisterInGroupByPlayerKey(uint32 InPlayerKey);// 0x1e28048
	int RegisterInGroup(STExtraPlayerController* InController);// 0x1e27fc0
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x1e27eb0
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x1e27dec
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x1e27d28
	void OnReportNetworkData();// 0x1e27d0c
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x1e27c8c
	void OnGameModeStateChange();// 0x1e27c70
	void OnGameEnterReady();// 0x1e27c54
	void OnGameEnterFinish();// 0x1e27c38
	void OnGameEnterFight();// 0x1e27c1c
	void OnGameEnterActive();// 0x1e27c00
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1e27adc
	bool IsVisualFieldFeatureSupported();// 0x1e27ab4
	bool IsSubAIMode();// 0x1e27a8c
	bool IsRevivalGameMode();// 0x1e27a5c
	bool IsFeatureSupported(enum SubSystemType);// 0x1e279dc
	bool IsCanJump(PlayerController* PC);// 0x1e27954
	void InitlializeRespawnItemConfig();// 0x1e27940
	void InitialGameModeState();// 0x1e2792c
	void HandleGameEnd();// 0x1e27910
	void GotoReadyState();// 0x1e278fc
	void GotoFinishedState();// 0x1e278e0
	void GotoFightingState();// 0x1e278c4
	void GotoActiveState();// 0x1e278b0
	int GetMonsterCount();// 0x1e27888
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x1e27808
	byte GetDefaultAIType(uint32 PlayerKey);// 0x1e27788
	int GetCurWeatherPhaseIndex();// 0x1e27758
	GameModeParam GetCurPlaneRouteData();// 0x1e27620
	FName GetCurGameModeState();// 0x1e275fc
	AIWorldVolume* GetAIWorldVolume();// 0x1e275d4
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x1e275ac
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x1e274e0
	void GenerateRespawnItemsForAllPlayers();// 0x1e274cc
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x1e27440
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x1e273c0
	void ExecuteCVarConfig();// 0x1e273ac
	void CreateGameModeComponents();// 0x1e27390
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x1e272d4
	void ClearGroupsInReady(out const GameModeStateChangedParams InParams);// 0x1e27244
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x1e271bc
	bool CheckNoHumanExist();// 0x1e2718c
	bool CheckMatchGoalAchieved();// 0x1e2715c
	void CheckInitGameTriggerEnv();// 0x1e27148
	bool CheckGameEnd();// 0x1e27118
	void ChangeStateGM(FName TargetGameModeState);// 0x1e270a0
	bool CanCharacterCircleTakePain(STExtraCharacter* Character);// 0x1e27018
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x1e26f54
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x1e26edc
	void BPSpawnAI(int Num);// 0x1e26e64

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0xc0, Size: 24]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIActingComponent.ActorComponent.Object
	AIWayPointActor*[] WayPointActorList;//[Offset: 0xd8, Size: 12]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0xe8, Size: 12]
	AIEquipSpawnItem[] SpecialAISpawnItems;//[Offset: 0x188, Size: 12]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	int MaxActiveAI;//[Offset: 0x198, Size: 4]
	int ActiveAI_n;//[Offset: 0x19c, Size: 4]
	int ActiveAI_m;//[Offset: 0x1a0, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x1a4, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x1a8, Size: 4]
	float SelectActionPeriod;//[Offset: 0x1ac, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x1b0, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x1b4, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x1b8, Size: 12]
	int SimulateKillMinIntervalNum;//[Offset: 0x204, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x208, Size: 12]
	float MinKilledFreqScale;//[Offset: 0x214, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x218, Size: 4]
	int FullFeedLimit;//[Offset: 0x21c, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x220, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x22c, Size: 4]
	float DeliveryFreq;//[Offset: 0x230, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x234, Size: 4]
	float MinimumWarmScore;//[Offset: 0x238, Size: 4]
	float[] SpecialAIProp;//[Offset: 0x23c, Size: 12]
	float SpecialAIHpCondition;//[Offset: 0x248, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x24c, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x250, Size: 12]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x25c, Size: 12]
	bool bUseSpecialAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	SpecialAINumConfig[] SpecialAINumCfg;//[Offset: 0x26c, Size: 12]
	float SpecialDeliveryBeginTime;//[Offset: 0x278, Size: 4]
	float TeammateDistanceThresholdSqr;//[Offset: 0x27c, Size: 4]
	float SpecialDeliveryInterval;//[Offset: 0x280, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x284, Size: 4]
	int DeliveryTargetNumPerRoundForSpecialAI;//[Offset: 0x28c, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x290, Size: 4]
	float SpecialDeliveryCoolDown;//[Offset: 0x294, Size: 4]
	bool bForceDeliveryInWholeTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	FString HotValuePrefix;//[Offset: 0x29c, Size: 12]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x2a8, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x2b4, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x2c0, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x2c4, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x2c8, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x2f0, Size: 12]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x2fc, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x308, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x314, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x320, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x32c, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x330, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x334, Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x338, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x33c, Size: 4]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x3e4, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x3e8, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x408, Size: 4]
	bool EnableFinalCircleSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	int FinalCircleSpawnTrueAINum;//[Offset: 0x41c, Size: 4]
	float FinalCircleNoMarkAIDistance;//[Offset: 0x420, Size: 4]
	float FinalCircleSpawnTrueAITime;//[Offset: 0x424, Size: 4]
	int TurnOnFinalCircleAINumber;//[Offset: 0x428, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x434, Size: 4]
	FString AIActingBPAssitClassPath;//[Offset: 0x438, Size: 12]
	Actor*[] WaterSwimActors;//[Offset: 0x444, Size: 12]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x47c, Size: 12]
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x1dbf5b0
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x1dbf504
	float GetNoWhiteCirclesRadius();// 0x1dbf4e8
	void CollectAndReportAIStrategyInfo();// 0x1dbf4d4
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x1dbefe4
	bool AdjustAIAttackAnimalRatingDamage(AnimalAIController* AIC);// 0x1dbef64

--------------------------------
Class: AIActingCandidateData
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x20, Size: 4]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0x950, Size: 4]
	delegate OnEnterJumping;//[Offset: 0x954, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x96c, Size: 4]
	int PlayerTeamId;//[Offset: 0x970, Size: 4]
	uint32 PlayerKey;//[Offset: 0x974, Size: 4]
	FString PlayerName;//[Offset: 0x978, Size: 12]
	byte AIType;//[Offset: 0x984, Size: 1]
	int resID;//[Offset: 0x988, Size: 4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0x994, Size: 12]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0x9a0, Size: 4]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 1]
	int GetResId();// 0x1eb43fc

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	float CheckPeriod;//[Offset: 0x58c, Size: 4]
	float RandomDeviation;//[Offset: 0x590, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x594, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x598, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x59c, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x5a0, Size: 8]
	float TurnVelocity;//[Offset: 0x5a8, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x5ac, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x5b4, Size: 60]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	byte AIActionType;//[Offset: 0x8d8, Size: 1]
	BackpackComponent* BackpackComponent;//[Offset: 0x8dc, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x8e0, Size: 40]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0x908, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0x920, Size: 4]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0x924, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0x928, Size: 4]
	float SpecialDamageScale;//[Offset: 0x938, Size: 4]
	FString BPClassOverrideTag;//[Offset: 0x93c, Size: 12]
	Actor* Plane;//[Offset: 0x948, Size: 4]
	int FlightNo;//[Offset: 0x94c, Size: 4]
	void Respawn();// 0x1e1c828
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x1e1c7a8
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x1e1c728
	Pawn* GetCurEnemy();// 0x1e1c6f8
	void ChangeAIActionType(byte InAIActionType);// 0x1e1c678

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x378, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x37c, Size: 4]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x380, Size: 4]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x384, Size: 12]
	float ActorLocationTetherDistance;//[Offset: 0x390, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x394, Size: 4]
	FString AIFeatureInfoTableName;//[Offset: 0x398, Size: 12]
	FString AIWeaponRangeTableName;//[Offset: 0x3a4, Size: 12]
	int HitRateConfigNum;//[Offset: 0x3b0, Size: 4]
	int AIFeatureID;//[Offset: 0x3b4, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0x3f4, Size: 132]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x478, Size: 44]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x4e8, Size: 84]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x53d, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x540, Size: 4]
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x1e246d4
	void InitAIFeatureInfo(int InID);// 0x1e2465c
	int GetCurrentOrder();// 0x1e24634
	Pawn* GetCurEnemy();// 0x1e1c6f8
	BlackboardComponent* GetBlackboardComponent();// 0x1e24618

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0xbc, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x1dc0648

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x2cc, Size: 12]
	Actor*[] AIPawns;//[Offset: 0x2d8, Size: 12]
	int MaxCacheNum;//[Offset: 0x2e4, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x1fc1158
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x1fc1094
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x1fc0fc8

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0xfc, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x100, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x104, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x108, Size: 4]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0xe4, Size: 60]
	float TotalCD;//[Offset: 0x120, Size: 4]
	float SoloCD;//[Offset: 0x124, Size: 4]

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x30c, Size: 4]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x310, Size: 4]
	FString LuaFilePath;//[Offset: 0x314, Size: 12]
	Pawn*[] AliveBots;//[Offset: 0x320, Size: 12]
	void Stop();// 0x1e2df90
	Actor* SpawnUnit();// 0x1dce6d4
	void Run();// 0x1dd37a8
	void RemoveAliveBot(Pawn* BotPawn);// 0x1fc16e0
	GameLevelManagerComponent* GetGameLevelManager();// 0x1fc16b8
	Pawn*[] GetAliveBots();// 0x1fc15f8
	void AddAliveBot(Pawn* BotPawn);// 0x1fc1580

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	SpawnerBase* GetSpawner();// 0x2139f54
	Transform Generate();// 0x213a3d4

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x5c, Size: 12]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	void PostConfig(Actor* Actor);// 0x1e4ba80
	SpawnerBase* GetSpawner();// 0x2139f54

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0xbc, Size: 12]
	delegate OnRemoveEliteGroup;//[Offset: 0xc8, Size: 12]
	int EliteWarningItemIconID;//[Offset: 0xd4, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0xd8, Size: 60]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x114, Size: 12]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x120, Size: 12]
	int TotalAliveMonsterNum;//[Offset: 0x12c, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x130, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x134, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x138, Size: 60]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x174, Size: 12]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x180, Size: 20]
	float LevelBeginTime;//[Offset: 0x194, Size: 4]
	float LevelEndTime;//[Offset: 0x198, Size: 4]
	int GM_Diffcult;//[Offset: 0x19c, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 1]
	float NavTickInterval;//[Offset: 0x1a4, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x1a8, Size: 12]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x1b8, Size: 12]
	FString MonsterTableName;//[Offset: 0x1c4, Size: 12]
	FString MonsterBPTableName;//[Offset: 0x1d0, Size: 12]
	FString MonsterSpecialStateTableName;//[Offset: 0x1dc, Size: 12]
	FString DecoratorTableName;//[Offset: 0x1e8, Size: 12]
	FString MonsterDropTableName;//[Offset: 0x1f4, Size: 12]
	int RelifePosOffsetZ;//[Offset: 0x200, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x1ec0f50
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x1ec0d40
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x1ec0c64
	void RegisterGameEvent();// 0x1ec0c50
	void OnRep_CurGameLevelChanged();// 0x1dd8bcc
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x1ec0b30
	void OnGameStart();// 0x1ec0b1c
	void OnGameEnd();// 0x1ec0b08
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x1ec0a4c
	void OnBotBorn(Actor* Actor);// 0x1ec09d4
	void OnActorUniqueIdRemove(uint32 SId);// 0x1ec095c
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x1ec08a0
	void OnActorSpawn(Actor* Actor);// 0x1ec0828
	void OnActorDespawn(Actor* Actor);// 0x1ec07b0
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x1ec06e4
	bool KillUnitBySelf(Actor* TActor);// 0x1ec0664
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x1ec0554
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x1ec0488
	void InitUnit(Actor* TActor, byte Category);// 0x1ec03cc
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x1ec018c
	void InitLuaLevelActors();// 0x1ec0178
	void InitLevelAddObjs(out LevelData LevelData);// 0x1ec0070
	void Init();// 0x1ec005c
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x1ebff84
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x1ebfe64
	Actor* GetUnit(byte Category, int TypeID);// 0x1ebfda0
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x1ebfc70
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x1ebfa3c
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x1ebf6d4
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x1ebf5d0
	int GetAliveMonsterNum(byte SourceType);// 0x1ebf550
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x1ebf44c
	void EndLevelAddObjs(out LevelData LevelData);// 0x1ebf344
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x1ebf288
	void BroadRemoveEliteGroup(int LevelId, Vector pos);// 0x1ebf1c4
	void BroadAppendEliteGroup(int LevelId, Vector pos);// 0x1ebf100
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x1ebef40
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x1ebedc8

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 4]
	int LevelId;//[Offset: 0x4, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 12]

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	FString[] TargetClassPaths;//[Offset: 0x14, Size: 12]
	FString LeveDirectorFilePath;//[Offset: 0x20, Size: 12]
	byte EndCondType;//[Offset: 0x2c, Size: 1]
	FString EndCondPar;//[Offset: 0x30, Size: 12]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int DiffcultPerc;//[Offset: 0x40, Size: 4]
	Vector[] TaskPointLocations;//[Offset: 0x44, Size: 12]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x50, Size: 12]
	PVECircle[] PVECircleInfo;//[Offset: 0x5c, Size: 12]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x68, Size: 12]
	Vector pos;//[Offset: 0x74, Size: 12]
	LevelObjets[] LevelAddObjs;//[Offset: 0x80, Size: 12]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 4]
	Vector2D targetPos;//[Offset: 0x4, Size: 8]
	float Radius;//[Offset: 0xc, Size: 4]
	float MoveTime;//[Offset: 0x10, Size: 4]
	float Pain;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x4, Size: 12]
	FString Desc;//[Offset: 0x10, Size: 12]
	byte EndCondType;//[Offset: 0x1c, Size: 1]
	int EndCondPar;//[Offset: 0x20, Size: 4]
	int ID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	byte ChooseGroupSpotType;//[Offset: 0xc, Size: 1]
	int NearPlayTeamIdx;//[Offset: 0x10, Size: 4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x14, Size: 12]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x20, Size: 12]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x2c, Size: 12]
	int ID;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x260, Size: 12]
	ZMonsterSpot*[] SpotList;//[Offset: 0x26c, Size: 12]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x260, Size: 12]
	byte MonsterSpotType;//[Offset: 0x26c, Size: 1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x270, Size: 12]
	byte SpotRadius;//[Offset: 0x27c, Size: 1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x260, Size: 4]
	int Radius;//[Offset: 0x264, Size: 4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 12]
	Vector pos;//[Offset: 0xc, Size: 12]
	MonsterSpot[] SpotList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 12]
	byte MonsterSpotType;//[Offset: 0xc, Size: 1]
	Vector pos;//[Offset: 0x10, Size: 12]
	RoadPointInfo[] RoadPointList;//[Offset: 0x1c, Size: 12]
	byte SpotRadius;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 12]
	int PlanWeight;//[Offset: 0xc, Size: 4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x10, Size: 12]
	int ID;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 4]
	FString Desc;//[Offset: 0x4, Size: 12]
	byte SpotType;//[Offset: 0x10, Size: 1]
	int MonsterNum;//[Offset: 0x14, Size: 4]
	float RandomGenerateDelayTime;//[Offset: 0x18, Size: 4]
	int ReBornTimes;//[Offset: 0x1c, Size: 4]
	int ReBornDelay;//[Offset: 0x20, Size: 4]
	float GenerateDelayTime;//[Offset: 0x24, Size: 4]
	int ID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 4]
	byte SourceType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 20]
	RelifePointInfo[] RelifePointList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 48]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MonsterParams

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xbc, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0xf8, Size: 12]

--------------------------------
Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 12]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x1c, Size: 60]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0x5c, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0x64, Size: 8]
	float MissOnPurposeCD;//[Offset: 0x6c, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0x70, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0x74, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0x78, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0x7c, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 12]
	Vector[] CrouchOffset;//[Offset: 0xc, Size: 12]
	Vector TargetLoc;//[Offset: 0x18, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x24, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum TargetPawnState;//[Offset: 0x29, Size: 1]

--------------------------------
Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 12]
	float CrouchToStandHeightOffset;//[Offset: 0xc, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x10, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x18, Size: 60]

--------------------------------
Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	float maxCheckDis;//[Offset: 0x270, Size: 4]
	float maxCheckDisTime;//[Offset: 0x274, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x280, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x284, Size: 4]
	float MaxTransferDis;//[Offset: 0x288, Size: 4]

--------------------------------
Class: AIEquipSpawnItem
	enum itemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 4]

--------------------------------
Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x1c, Size: 4]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x1dc7f48
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x1e7bda4

--------------------------------
Class: SpecialAINumConfig
	float NumScale;//[Offset: 0x0, Size: 4]
	float SectionRightValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x29fa2f4
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x29fa2f4
	float GetRealTimeSeconds();// 0x1dbd134

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimalAIController.BasicAIController.AIController.Controller.Actor.Object
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x58c, Size: 4]
	float TurnVelocity;//[Offset: 0x590, Size: 4]
	float SetAirDropTargetInterval;//[Offset: 0x594, Size: 4]
	float IgnoreMoveCollisionTimeWhenBlocked;//[Offset: 0x598, Size: 4]
	float IgnoreMoveCollisionSetInterval;//[Offset: 0x59c, Size: 4]
	float DragOnGroundCheckInterval;//[Offset: 0x5a0, Size: 4]
	float DragOnGroundMaxOverGroundHeight;//[Offset: 0x5a4, Size: 4]
	float DragOnGroundMaxRayLen;//[Offset: 0x5a8, Size: 4]
	float DragOnGroundMaxFloorThickness;//[Offset: 0x5ac, Size: 4]
	float DragOnGroundMaxSubsidenceDepth;//[Offset: 0x5b0, Size: 4]
	float DragOnGroundNavRandomRadius;//[Offset: 0x5b4, Size: 4]
	bool EnableUpdateRotatition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	Box[] FindMovePointLimitArea;//[Offset: 0x600, Size: 12]
	TickControlComponent* TickControlComp;//[Offset: 0x60c, Size: 4]
	void SetMoveTargetLoc(out const Vector TargetLoc);// 0x1dcff60
	void SetCaughtOwner(Actor* CaughtOwner);// 0x1dcfee0
	void RunBehaviorTreeWithIndex(int TreeIndex);// 0x1dcfe60
	void OnAirDropLandGroup(Actor* AirDropBoxActor, bool bIsInWater);// 0x1dcfd9c

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x48, Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x1f05aa4
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x1f058c4
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x1f05804
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x1f05744

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x20, Size: 12]
	float RandomStartJumpTime;//[Offset: 0x2c, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x30, Size: 4]
	float JumpRadius;//[Offset: 0x34, Size: 4]
	float JumpHeight;//[Offset: 0x38, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x3c, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x40, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x44, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x48, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x4c, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x50, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x54, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x58, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x5c, Size: 4]
	float StopdeliverTime;//[Offset: 0x60, Size: 4]
	float NoCirlceRadius;//[Offset: 0x64, Size: 4]
	float TraceHeight;//[Offset: 0x68, Size: 4]
	float RangeMin;//[Offset: 0x6c, Size: 4]
	float RangeMax;//[Offset: 0x70, Size: 4]
	float OriginCheckSquare;//[Offset: 0x74, Size: 4]
	float DestCheckSquare;//[Offset: 0x78, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x7c, Size: 8]
	float FlyToCircleRadius;//[Offset: 0x84, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0x88, Size: 4]

--------------------------------
Class: ChallengeLevelRules.Object
	UAELevelDirector* LevelDirector;//[Offset: 0x1c, Size: 4]
	void SpawnLevelDirector(class UAELevelDirector LevelDirectorClass);// 0x1e4ba80
	void OnReceiveTriggerMsg(TriggerAction* TriggerAction, FString Msg);// 0x1e4b8d8
	void InitLevel();// 0x1e13bd4

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc, Size: 4]
	float AvoidanceWeight;//[Offset: 0xc0, Size: 4]
	float CohesionWeight;//[Offset: 0xc4, Size: 4]
	float AlignmentWeight;//[Offset: 0xc8, Size: 4]
	float ArriveWeight;//[Offset: 0xcc, Size: 4]
	float PushedWeight;//[Offset: 0xd0, Size: 4]
	float SeparationWeight;//[Offset: 0xd4, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xdc, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe0, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x4fc, Size: 60]
	void SetQueryInterfaceBlueprint(AIWorldVolume* query);// 0x1e64ea0
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x1e64e28
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x1e64d18
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x1e64ab0

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float FixedJumpPointRate;//[Offset: 0x48, Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0xc0, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0xcc, Size: 60]
	void InitialItemTable();// 0x1e63624

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xbc, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0xf8, Size: 12]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x104, Size: 8]
	void ProduceSoundInPos(enum soundType, out const Vector pos, Actor* SourceActor);// 0x1dceda8
	void OnProjectileExplode(Actor* Projectile);// 0x1dced30

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x1f9713c

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 12]
	FString TeamFlag;//[Offset: 0xc, Size: 12]
	FString TeamName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x30, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x34, Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x38, Size: 4]
	void GotoNextState();// 0x1e90bf0

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0xbc, Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0xbc, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x140, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x4, Size: 12]
	float NoBlueCircleRadius;//[Offset: 0x10, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x14, Size: 4]
	float EndRespawnTime;//[Offset: 0x18, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x1c, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x20, Size: 12]
	Vector AnimalGenerateOffset;//[Offset: 0x2c, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0xc14, Size: 12]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xc24, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xc28, Size: 4]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0xc2c, Size: 4]
	Vector RelativeLocation;//[Offset: 0xc30, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0xc3c, Size: 4]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0xc44, Size: 4]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0xc48, Size: 4]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0xc4c, Size: 4]
	int AnimalGroupID;//[Offset: 0xc50, Size: 4]
	enum AnimalType;//[Offset: 0xc5e, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0xc60, Size: 60]
	float HearRadius;//[Offset: 0xc9c, Size: 4]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0xca0, Size: 12]
	MaterialInterface*[] RandomMaterials;//[Offset: 0xcac, Size: 12]
	delegate CustomObjectEvent;//[Offset: 0xcb8, Size: 12]
	ParticleSystem* FootPrintRes;//[Offset: 0xcc4, Size: 4]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0xcc8, Size: 4]
	FName AttachedSocket;//[Offset: 0xcd0, Size: 8]
	float MovementTickInterval;//[Offset: 0xcd8, Size: 4]
	void ShowFootPrintEffect(bool IsEnabled);// 0x1fc53b4
	void SetExtendData(FString Key, int Value);// 0x1fc5210
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x1fc5140
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x1fc50f8
	void DisappearOnDeath();// 0x1fc50dc
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x1fc5018
	void BeforeDestroyed();// 0x1eff778

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xb60, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xb64, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xb68, Size: 4]
	float SensedRadius;//[Offset: 0xb6c, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xb70, Size: 4]
	float HeardRadius;//[Offset: 0xb74, Size: 4]
	float DelayHideDuration;//[Offset: 0xb78, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7d, Size: 1]
	Vector HurtDir;//[Offset: 0xb80, Size: 12]
	float HurtDistance;//[Offset: 0xb8c, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xb90, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0xb9c, Size: 12]
	delegate StateEnterEvent;//[Offset: 0xba8, Size: 12]
	delegate StateLeaveEvent;//[Offset: 0xbb4, Size: 12]
	delegate OnDeath;//[Offset: 0xbd4, Size: 12]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0xbe0, Size: 24]
	int[] randomIndexes;//[Offset: 0xbf8, Size: 12]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0xc04, Size: 4]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0xc08, Size: 4]
	byte NetRelevantType;//[Offset: 0xc0c, Size: 1]
	void SetNetRelevantType(byte InType);// 0x20bdf68
	void OnRep_SimpleDamageData();// 0x20bdf54
	void DisappearOnDeath();// 0x1fc50dc
	void CurrentStatesRemove(int State);// 0x20bded4
	void CurrentStatesAdd(int State);// 0x1e284f8
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x1fc5018
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bdc58
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bd970
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bd6f4
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bd478
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bd1e8
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bcf6c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bccf0
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bca68
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x20bc780
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x29fa2f4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x20bc60c

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0xc, Size: 4]
	Pawn* DamageReceiver;//[Offset: 0x10, Size: 4]
	int NetCounter;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x124, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	float ScalePower;//[Offset: 0x12c, Size: 4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	float AvoidanceWeight;//[Offset: 0x134, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x138, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x13c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x140, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x144, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x14c, Size: 12]
	Character* CharacterOwner;//[Offset: 0x158, Size: 4]
	int AvoidanceUID;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x174, Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x180, Size: 4]
	<int,float> moveAnimSpeed;//[Offset: 0x184, Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1c0, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1c4, Size: 12]
	void SortAnimations();// 0x1fa5cf0
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x1e4c268
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x1fa5a6c
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x1e63560

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x2ec, Size: 4]
	FString OwnerClassPath;//[Offset: 0x2fc, Size: 12]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x318, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x324, Size: 4]
	void ResetAnimState();// 0x1de88dc
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x1fc4608
	void OnLeaveState(int State);// 0x1fc4588
	void OnEnterState(int State);// 0x1fc4508
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x1fc427c
	void CacheAnimState(float DeltaSeconds);// 0x1deba7c
	void CacheAnimDataList(bool ForceRefreshVar);// 0x1fc41f4

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x1e0, Size: 12]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x1ec, Size: 12]

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 1]
	float f_MoveRate;//[Offset: 0x330, Size: 4]
	Vector v_HitVector;//[Offset: 0x334, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	AnimSequence* A_Idle;//[Offset: 0x344, Size: 4]
	AnimMontage* A_Idle_Arder;//[Offset: 0x348, Size: 4]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x34c, Size: 4]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x350, Size: 4]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x354, Size: 4]
	BlendSpace* A_HitAnim;//[Offset: 0x358, Size: 4]
	AnimMontage* A_DeadAnim;//[Offset: 0x35c, Size: 4]
	AnimMontage* A_FearAnim;//[Offset: 0x360, Size: 4]
	AnimMontage* A_CuteAnim;//[Offset: 0x364, Size: 4]
	void ResetAnimState();// 0x1de88dc
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x1fc4608
	void OnLeaveState(int State);// 0x1fc4588
	void OnEnterState(int State);// 0x1fc4508
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x1fc427c
	void CacheAnimState(float DeltaSeconds);// 0x1deba7c
	void CacheAnimDataList(bool ForceRefreshVar);// 0x1fc41f4

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0xc0, Size: 12]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0xcc, Size: 12]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0xd8, Size: 12]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0xe4, Size: 12]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0xf0, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0xfc, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x104, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x10c, Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x110, Size: 4]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x114, Size: 60]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x150, Size: 60]
	<enum,int> DeleverCountPerWave;//[Offset: 0x294, Size: 60]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 60]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x1c, Size: 12]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c, Size: 1]
	enum SortStrategy;//[Offset: 0x5c, Size: 1]
	enum SelectStrategy;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0xbc, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0xc0, Size: 60]
	class Pawn* PlaneClass;//[Offset: 0xfc, Size: 4]
	BehaviorTree* PlaneBT;//[Offset: 0x100, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x108, Size: 12]
	AIController*[] CachedTotalAI;//[Offset: 0x114, Size: 12]
	int FlightTimes;//[Offset: 0x120, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x124, Size: 4]
	int CustomFlightTimes;//[Offset: 0x130, Size: 4]
	void StartFlight(int FlightNo);// 0x1f5f070
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x1f5ee1c
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x1f5ec00
	void NotifyEndFlight();// 0x1f5ebec
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x1f5eb28

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c, Size: 8]
	float PlaneHeight;//[Offset: 0x44, Size: 4]
	int TotalPlayerNum;//[Offset: 0x48, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x4c, Size: 12]
	PlayerController*[] CurPlayers;//[Offset: 0x58, Size: 12]
	int TotalAINum;//[Offset: 0x64, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x68, Size: 12]
	int CurAINum;//[Offset: 0x74, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x78, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc0, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc4, Size: 4]
	enum RespawnPointType;//[Offset: 0xc8, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0xcc, Size: 12]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0xd8, Size: 12]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe4, Size: 12]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0xf0, Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x12c, Size: 24]
	int[] DefaultWeaponList;//[Offset: 0x144, Size: 12]
	float bRestoreDataDelay;//[Offset: 0x150, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x20c, Size: 4]
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x1f67a64
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x1f67994
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x1f678d8
	void ChangeWeaponSchemeIndex(int InIndex);// 0x1dbb240

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: ReplaceWeaponData
	int WeaponId;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 152]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xa0, Size: 12]

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x18, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShowVehicleComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0xbc, Size: 4]
	float DropHeightOffset;//[Offset: 0xc0, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0xc4, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0xc8, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0xcc, Size: 12]
	<uint32,Actor*> VehicleContainers;//[Offset: 0xf0, Size: 60]
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x1fa5078
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x1fa4fe8
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x1fa4f70

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc, Size: 12]
	FString FakePlayerCampNameTableName;//[Offset: 0xc8, Size: 12]
	FString FakePlayerRandomNameTableName;//[Offset: 0xd4, Size: 12]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0xe0, Size: 60]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x11c, Size: 60]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x158, Size: 12]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x164, Size: 12]
	void InitRowDataMap();// 0x1eb4990
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x1eb48a0
	FString GetControllerPath(int resID);// 0x1eb4798

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x4, Size: 12]
	FString Name;//[Offset: 0x10, Size: 12]
	int gender;//[Offset: 0x1c, Size: 4]
	FString ItemStr;//[Offset: 0x20, Size: 12]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x2c, Size: 12]
	int IsUseRandomName;//[Offset: 0x38, Size: 4]

--------------------------------
Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AIControllerList

--------------------------------
Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x24, Size: 12]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 4]
	int DelayTime;//[Offset: 0x4, Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	int LastTime;//[Offset: 0xc, Size: 4]
	int CircleDamage;//[Offset: 0x10, Size: 4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BP_PlayerController_SI_C.BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x33f0, Size: 4]
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, SocialIslandPlayerState* K2Node_DynamicCast_AsSocial_Island_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasInteractiveState_ReturnValue, bool CallFunc_HasInteractiveState_ReturnValue2);// 0x29fa2f4
	void PlayerInteractExtreme(bool bEnterOrExit);// 0x29fa2f4
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnSocialIslandCanAcceptDuelChanged(bool BoolValue);// 0x29fa2f4
	void EnterFightingStateDelegate();// 0x29fa2f4
	void LuaReceiveBeginPlay();// 0x29fa2f4
	void ExecuteUbergraph_BP_PlayerController_SI(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, RankBoard_C*[] CallFunc_GetAllActorsOfClass_OutActors, RankBoard_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_CustomEvent_BoolValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, int ___int_Loop_Counter_Variable, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x29fa2f4
	void OnOpenTask__DelegateSignature();// 0x29fa2f4
	void OnPlayerInteractExtreme__DelegateSignature(bool bEnterOrExit);// 0x29fa2f4
	void OnOpenTop10RankWindow__DelegateSignature();// 0x29fa2f4
	void OnOpenRankBoard__DelegateSignature();// 0x29fa2f4
	SoundFilterComponent* SoundFilter;//[Offset: 0x33f4, Size: 4]
	BP_IslandInteractEmoteCom_C* BP_IslandInteractEmoteCom;//[Offset: 0x33f8, Size: 4]
	BP_TouchSelectComponent_C* BP_TouchSelectComponent;//[Offset: 0x33fc, Size: 4]
	TargetTrainComponent* TargetTrain;//[Offset: 0x3400, Size: 4]
	BP_AutoNav_C* BP_AutoNav;//[Offset: 0x3404, Size: 4]
	BP_IslandInactiveClearCom_C* BP_IslandInactiveClearCom;//[Offset: 0x3408, Size: 4]
	LuaTaskComponent* LuaTask;//[Offset: 0x340c, Size: 4]
	delegate OnOpenRankBoard;//[Offset: 0x3410, Size: 12]
	bool bCanAcceptSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341c, Size: 1]
	delegate OnOpenTop10RankWindow;//[Offset: 0x3420, Size: 12]
	delegate OnPlayerInteractExtreme;//[Offset: 0x342c, Size: 12]
	bool bExtremeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3438, Size: 1]
	delegate OnOpenTask;//[Offset: 0x343c, Size: 12]
	bool bSportCarOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3448, Size: 1]

--------------------------------
Class: SocialIslandPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	delegate OnInteractiveStateChange;//[Offset: 0xfd4, Size: 12]
	uint64 RoomId;//[Offset: 0xfe0, Size: 8]
	int RoomMode;//[Offset: 0xfe8, Size: 4]
	int LandId;//[Offset: 0xfec, Size: 4]
	uint64 FollowUID;//[Offset: 0xff0, Size: 8]
	int FollowType;//[Offset: 0xff8, Size: 4]
	int EndStateTime;//[Offset: 0xffc, Size: 4]
	bool bIsInExtreme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 1]
	int TeamState;//[Offset: 0x1004, Size: 4]
	Actor* Character;//[Offset: 0x1008, Size: 4]
	int EnterTime;//[Offset: 0x100c, Size: 4]
	SocialIslandGameResult GameResult;//[Offset: 0x1010, Size: 88]
	int LBSMemberID;//[Offset: 0x1068, Size: 4]
	int InteractiveState;//[Offset: 0x106c, Size: 4]
	int BattleID;//[Offset: 0x1070, Size: 4]
	IslandDuelData DuelData;//[Offset: 0x1074, Size: 12]
	IslandBattleData BattleData;//[Offset: 0x1080, Size: 12]
	void SetRepDuelState(int iState, float EndTime);// 0x1fbe868
	void SetRepDuelData(int iState, float EndTime, STExtraBaseCharacter* DuelPlayer);// 0x1fbe768
	void SetRepBattleState(int iState, float EndTime);// 0x1fbe6ac
	void SetRepBattleData(int iState, float EndTime, STExtraBaseCharacter* BattlePlayer);// 0x1fbe5ac
	void ServerSetLBSMemberId(int memberID);// 0x1fbe4f8
	void OnRep_LandId();// 0x1fbe4e4
	void OnRep_InteractiveState(int OldState);// 0x1fbe46c
	void OnRep_FollowType();// 0x1dd8bcc
	void OnRep_DuelData(out const IslandDuelData PreDuelData);// 0x1fbe3dc
	void OnRep_BattleData(out const IslandBattleData PreBattleData);// 0x1fbe34c
	void OnDuelDataChange(out const IslandDuelData PreDuelData);// 0x1fbe2b4
	void OnBattleDataChange(out const IslandBattleData PreBattleData);// 0x1fbe21c
	bool HasInteractiveState(enum StateType);// 0x1fbe19c
	void HandleFollowReq();// 0x1fbe188
	enum GetRepBattleState();// 0x1fbe160
	void ExitInteractiveState(enum StateType);// 0x1fbe0e8
	bool EqualInteractiveState(int InState);// 0x1fbe068
	void EnterInteractiveState(enum StateType);// 0x1fbdff0
	void EnableDuelOutline(bool bEnable);// 0x1fbdf70
	void ClientPreEnterInteractiveState(enum StateType, float Duration);// 0x1fbdeb4
	void ClearDuelData();// 0x1fbdea0
	void ClearBattleData();// 0x1fbde8c
	bool CanPlayerStartDuel();// 0x1fbde5c
	bool CanPlayerStartBattle();// 0x1fbde2c
	void BP_PlayerInfoNotify(int LandId);// 0x29fa2f4
	void AddDuelDuelApplyCount(int numb);// 0x1fbddb4

--------------------------------
Class: SocialIslandGameResult
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0xc, Size: 12]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x18, Size: 12]
	int HighScoreCount;//[Offset: 0x24, Size: 4]
	int TrainCount;//[Offset: 0x28, Size: 4]
	int TotalTargetScore;//[Offset: 0x2c, Size: 4]
	uint64[] Interaction;//[Offset: 0x30, Size: 12]
	int StayTime;//[Offset: 0x3c, Size: 4]
	int[] DuelDurations;//[Offset: 0x40, Size: 12]
	int DuelApplyCount;//[Offset: 0x4c, Size: 4]
	int DuelStartCount;//[Offset: 0x50, Size: 4]

--------------------------------
Class: IslandDuelData
	enum DState;//[Offset: 0x0, Size: 1]
	float EndTime;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* DuelPlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IslandBattleData
	enum BattleState;//[Offset: 0x0, Size: 1]
	float EndTime;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BattlePlayer;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RankBoard_C.ClientActivityActor.ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x510, Size: 4]
	void Create3DWidget(bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_CreateWidgetByPathName_ReturnValue);// 0x29fa2f4
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ExecuteUbergraph_RankBoard(int EntryPoint);// 0x29fa2f4
	WidgetComponent* Widget;//[Offset: 0x514, Size: 4]
	BoxComponent* Box;//[Offset: 0x518, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x51c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x520, Size: 4]
	bool bWidgetCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]

--------------------------------
Class: ClientActivityActor.ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	bool bEanbleBlueprintClickButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x1db7230
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1db7018
	bool ClientClickButton(Character* Character, out int OutReason);// 0x1db675c
	bool BPClientClickButton(Character* Character);// 0x29fa2f4

--------------------------------
Class: SoundFilterComponent.ActorComponent.Object
	void SetFilterActor(Actor* Filter, bool bSet);// 0x1fc0c2c

--------------------------------
Class: BP_IslandInteractEmoteCom_C.SIslandInteractEmoteComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x110, Size: 4]
	void ClearOldSelect(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void OnTargetEmoteMontageFinished(int EmoteIndex, int StopReason, bool CallFunc_Greater_IntInt_ReturnValue);// 0x29fa2f4
	void ResponseInteractEmote(STExtraBaseCharacter* OrignPlayer, SocialIslandInteractEmoteData EmoteData, bool bRespone, bool bIsDelayResponse, byte CurResponseType, int ___int_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Variable2, bool ___bool_Variable, byte ___byte_Variable, byte ___byte_Variable2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_Select_Default, byte ___byte_Variable3, int ___int_Variable3, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, int ___int_Variable4, bool CallFunc_HasState_ReturnValue, bool CallFunc_OnPlayEmote_ReturnValue, int ___int_Variable5, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, int ___int_Variable6, int K2Node_Select2_Default, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x29fa2f4
	void RotatorToInteractTarget(STExtraBaseCharacter* Target, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x29fa2f4
	void ClearInteractData(SocialIslandInteractEmoteData K2Node_MakeStruct_SocialIslandInteractEmoteData);// 0x29fa2f4
	void OnSelfEmoteStart(int EmoteIndex, BackpackEmoteHandle* Handle, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_Array_Contains_ReturnValue2);// 0x29fa2f4
	void CheckCanRequreInteract(STExtraBaseCharacter* Target, out bool res, out int TipId, float CurDistance, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_HasState_ReturnValue3, bool CallFunc_HasState_ReturnValue4, bool CallFunc_HasState_ReturnValue5, bool CallFunc_HasState_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue);// 0x29fa2f4
	void OnSelfEmoteFinished(int EmoteIndex, int StopReason, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	void TryGetOwnerPlayerAndBindDel(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void RequreInteractEmote(STExtraPlayerCharacter* TargetPlayer, int EmoteId, bool CallFunc_CheckCanRequreInteract_res, int CallFunc_CheckCanRequreInteract_TipID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasState_ReturnValue, SocialIslandInteractEmoteData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_OnPlayEmote_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnServerReqPlayInteractEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID, int EmoteId, int TargetEmoteID);// 0x29fa2f4
	void OnClientRecInteractEmoteReq(STExtraBaseCharacter* OrignTarget, out const SocialIslandInteractEmoteData EmoteDat);// 0x29fa2f4
	void OnServerResponseInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x29fa2f4
	void OnClientRecResponseInteractEmoteResponse(STExtraBaseCharacter* EmoteTarget, out const SocialIslandInteractEmoteData EmoteData, int IslandInteractEmoteResponse);// 0x29fa2f4
	void OnServerStopReqInteractEmote(int EmoteDataID);// 0x29fa2f4
	void OnClientStopReqInteractEmote(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x29fa2f4
	void ExecuteUbergraph_BP_IslandInteractEmoteCom(int EntryPoint, bool ___bool_True_if_break_was_hit_Variable, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SocialIslandInteractEmoteData[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, STExtraBaseCharacter* K2Node_Event_SelectTarget, int K2Node_Event_EmoteDataID4, int K2Node_Event_EmoteID, int K2Node_Event_TargetEmoteID, SocialIslandInteractEmoteData K2Node_MakeStruct_SocialIslandInteractEmoteData, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI, bool K2Node_DynamicCast_bSuccess, byte ___byte_Variable, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue2, STExtraBaseCharacter* K2Node_Event_OrignTarget3, SocialIslandInteractEmoteData K2Node_Event_EmoteDat, bool CallFunc_IsValid_ReturnValue3, int ___int_Variable, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, STExtraBaseCharacter* K2Node_Event_OrignTarget2, int K2Node_Event_EmoteDataID3, int K2Node_Event_IslandInteractEmoteResponse2, byte CallFunc_Conv_IntToByte_ReturnValue, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI2, bool K2Node_DynamicCast_bSuccess2, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue3, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, int ___int_Variable2, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI3, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsPlayerCurStateCanInteractEmote_ReturnValue4, int ___int_Variable3, STExtraBaseCharacter* K2Node_Event_EmoteTarget, SocialIslandInteractEmoteData K2Node_Event_EmoteData, int K2Node_Event_IslandInteractEmoteResponse, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, FString CallFunc_GetPlayerNameSafety_ReturnValue, int ___int_Variable4, bool CallFunc_IsValid_ReturnValue6, int ___int_Variable5, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_HasState_ReturnValue, bool CallFunc_OnPlayEmote_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_Event_EmoteDataID2, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue8, SocialIslandInteractEmoteData CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, STExtraBaseCharacter* K2Node_Event_OrignTarget, int K2Node_Event_EmoteDataID, BP_PlayerController_SI_C* K2Node_DynamicCast_AsBP_Player_Controller_SI4, bool K2Node_DynamicCast_bSuccess4, int ___int_Variable6, int K2Node_Select_Default);// 0x29fa2f4
	void OnRecStopInteractEmoteEvent__DelegateSignature(STExtraBaseCharacter* OrignPlayer);// 0x29fa2f4
	void OnRecInteractEmoteEvent__DelegateSignature(STExtraBaseCharacter* OrignTarget, SocialIslandInteractEmoteData LocalData);// 0x29fa2f4
	STExtraBaseCharacter* OwnerPlayerCharacter;//[Offset: 0x114, Size: 4]
	byte InteractEmoteState;//[Offset: 0x118, Size: 1]
	float MaxInteractAllowDistance;//[Offset: 0x11c, Size: 4]
	float MinInteractAllowDistance;//[Offset: 0x120, Size: 4]
	SocialIslandInteractEmoteData CurEmoteDataSave;//[Offset: 0x124, Size: 32]
	int[] PrepareEmotes;//[Offset: 0x144, Size: 12]
	STExtraBaseCharacter* CurSelectTarget;//[Offset: 0x150, Size: 4]
	delegate OnRecInteractEmoteEvent;//[Offset: 0x154, Size: 12]
	delegate OnRecStopInteractEmoteEvent;//[Offset: 0x160, Size: 12]
	int[] ResponseEmotes;//[Offset: 0x16c, Size: 12]
	STExtraBaseCharacter* IntertactOrign;//[Offset: 0x178, Size: 4]
	int ResponseEmoteID;//[Offset: 0x17c, Size: 4]
	STExtraBaseCharacter* CurEmoteOrignInResponse;//[Offset: 0x180, Size: 4]
	BP_IslandInteractEmoteCom_C* SelfInteractCom;//[Offset: 0x184, Size: 4]
	BP_IslandInteractEmoteCom_C* OrignInteractCom;//[Offset: 0x188, Size: 4]
	bool bIsInteractStopAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	bool bIsAgreeAndDelayResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 1]

--------------------------------
Class: SIslandInteractEmoteComponent.ActorComponent.Object
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xbc, Size: 4]
	<int,SocialIslandInteractEmoteData> SIslandInteractEmoteTableMap;//[Offset: 0xc0, Size: 60]
	FString SIslandInteractEmoteTablePath;//[Offset: 0xfc, Size: 12]
	float InteactViewPitch;//[Offset: 0x108, Size: 4]
	void SetInteractEmoteRotation(STExtraBaseCharacter* Target);// 0x1fae328
	void ServerStopReqInteractEmote(int EmoteDataID);// 0x1fae274
	void ServerResponseInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x1fae130
	void ServerReqPlayInteractEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID, int EmoteId, int TargetEmoteID);// 0x1fadf9c
	void ServerFinishEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID);// 0x1fadea0
	void OnServerStopReqInteractEmote(int EmoteDataID);// 0x1e4c0e8
	void OnServerResponseInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x1fadd98
	void OnServerReqPlayInteractEmote(STExtraBaseCharacter* SelectTarget, int EmoteDataID, int EmoteId, int TargetEmoteID);// 0x1fadc48
	void OnClientStopReqInteractEmote(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x1fadb84
	void OnClientRecResponseInteractEmoteResponse(STExtraBaseCharacter* EmoteTarget, out const SocialIslandInteractEmoteData EmoteData, int IslandInteractEmoteResponse);// 0x1fada20
	void OnClientRecInteractEmoteReq(STExtraBaseCharacter* OrignTarget, out const SocialIslandInteractEmoteData EmoteDat);// 0x1fad900
	bool IsPlayerCurStateCanInteractEmote(STExtraPlayerController* STPlayer);// 0x1fad878
	void InitSIslandInteractEmoteTable();// 0x1fad864
	void ClientStopReqInteractEmote(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x1f17c44
	void ClientRecResponseInteractEmoteResponse(STExtraBaseCharacter* EmoteTarget, int EmoteDataID, int IslandInteractEmoteResponse);// 0x1fad75c
	void ClientRecInteractEmoteReq(STExtraBaseCharacter* OrignTarget, int EmoteDataID);// 0x1e831c8

--------------------------------
Class: SocialIslandInteractEmoteData
	int ID;//[Offset: 0x0, Size: 4]
	int MyEmoteID;//[Offset: 0x4, Size: 4]
	int TargetEmoteID;//[Offset: 0x8, Size: 4]
	int PrepareEmoteId;//[Offset: 0xc, Size: 4]
	int EmoteTipTextID;//[Offset: 0x10, Size: 4]
	FString EmoteTipTexPath;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BP_TouchSelectComponent_C.STTouchSelectComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x120, Size: 4]
	Vector2D ModifyTouchLoc(out Geometry MyGeometry, out Vector2D TouchLoc, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetWidgetsByName_ReturnValue, Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ExecuteUbergraph_BP_TouchSelectComponent(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	Vector2D ViewportLocalSize;//[Offset: 0x124, Size: 8]

--------------------------------
Class: STTouchSelectComponent.ActorComponent.Object
	float TouchMoveDistanceAllow;//[Offset: 0xf8, Size: 4]
	float TouchEndGapAllow;//[Offset: 0xfc, Size: 4]
	float TraceSelectCD;//[Offset: 0x100, Size: 4]
	float TraceRange;//[Offset: 0x104, Size: 4]
	byte CollisionChannel;//[Offset: 0x108, Size: 1]
	class Actor* SelectTargetClass;//[Offset: 0x10c, Size: 4]
	delegate OnTouchSelectActorEvent;//[Offset: 0x110, Size: 12]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x11c, Size: 4]
	Actor* TraceForTarget(out const Vector2D TouchLoc);// 0x20e1068
	void OnJoystickTouchEvent(out const Geometry MyGeometry, out const Vector2D TouchLoc, int FingerIndex, bool bIsStart);// 0x20e0ef0
	Vector2D ModifyTouchLoc(out const Geometry MyGeometry, out const Vector2D TouchLoc);// 0x20e0df8
	void BindTouchDelegate();// 0x20e0de4

--------------------------------
Class: TargetTrainComponent.ActorComponent.Object
	TargetTrainData[] TrainDataRank;//[Offset: 0xbc, Size: 12]
	TargetTrainData[] TrainDataList;//[Offset: 0xc8, Size: 12]
	int InAreaID;//[Offset: 0xd4, Size: 4]
	bool IsBanned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	delegate OnUpdateRankData;//[Offset: 0xdc, Size: 12]
	delegate OnFullRankUpdate;//[Offset: 0xe8, Size: 12]
	delegate OnTrainDataListUpdate;//[Offset: 0xf4, Size: 12]
	delegate OnInAreaIDUpdate;//[Offset: 0x100, Size: 12]
	delegate OnEndPlay;//[Offset: 0x10c, Size: 12]
	int CurrentCanDamagePart;//[Offset: 0x118, Size: 4]
	int ShootingAreaID;//[Offset: 0x11c, Size: 4]
	void SubmitRecentTrain();// 0x20e8a88
	void OnRep_TrainDataRank();// 0x20e8a74
	void OnRep_TrainDataList();// 0x20e8a60
	void OnRep_InAreaID();// 0x20e8a4c
	FString GetNowTimeStamp();// 0x20e898c
	static DateTime GetDateTime(int TimeStamp);// 0x20e890c
	void ClientUpdateRankData(TargetTrainData NewData);// 0x20e8798
	void ClientUpdateFullRank(const TargetTrainData[] Rank);// 0x20e866c
	bool CheckNeedShowHitDamage(out bool OutHitHead, enum HitBodyType, const ShootingPracticeScoreTarget* HitScoreTarget);// 0x20e8550
	void AddTrainData(int Score, int Duration);// 0x20e8494

--------------------------------
Class: TargetTrainData
	FString UId;//[Offset: 0x0, Size: 12]
	int TimeStamp;//[Offset: 0xc, Size: 4]
	int Score;//[Offset: 0x10, Size: 4]
	int Duration;//[Offset: 0x14, Size: 4]
	int IslandID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ShootingPracticeScoreTarget.DecoratorActor.LuaActor.Actor.Object
	SceneComponent* MoveRoot;//[Offset: 0x394, Size: 4]
	<FString,TargetBodyData> TargetBodyDataMap;//[Offset: 0x398, Size: 60]
	int CurrentWave;//[Offset: 0x3d4, Size: 4]
	bool bIsUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bIsRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	float UpDownChangeSpeed;//[Offset: 0x3dc, Size: 4]
	Rotator HorizontalMeshRelativeRot;//[Offset: 0x3e0, Size: 12]
	Rotator VerticalMeshRelativeRot;//[Offset: 0x3ec, Size: 12]
	bool bMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bClearBulletHole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	Vector Point1;//[Offset: 0x3fc, Size: 12]
	Vector Point2;//[Offset: 0x408, Size: 12]
	float centerZ;//[Offset: 0x414, Size: 4]
	int nPosX;//[Offset: 0x418, Size: 4]
	float nMoveSpeed;//[Offset: 0x41c, Size: 4]
	float nRandomPosition;//[Offset: 0x420, Size: 4]
	int nCurrentIndex;//[Offset: 0x424, Size: 4]
	bool bSetDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	void ShowUpAndPos(int PosX);// 0x1fa1fdc
	void ShowUp(float MoveSpeed);// 0x1fa1f64
	void SetUpOrDown(bool bUp);// 0x1fa1ee4
	int SetProperty(int Index, float RandomPosition, bool retRandom);// 0x1fa1dd4
	void SetDebug();// 0x1fa1dc0
	void RotateUp(bool IsUp);// 0x1fa1d40
	void OnUp();// 0x29fa2f4
	int GetHitBodyType(FString HitPart);// 0x1e7a3ec
	void ClientHitEffect(int Score);// 0x29fa2f4
	void ClearBulletHoles();// 0x1fa1d2c
	bool CheckDebug();// 0x1ec6304

--------------------------------
Class: TargetBodyData
	enum DamagePosition;//[Offset: 0x0, Size: 1]
	enum TargetBodyType;//[Offset: 0x1, Size: 1]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_AutoNav_C.PlayerAutoNavComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x168, Size: 4]
	bool IsSwim(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x29fa2f4
	void GetLastMinDistance(out float Distance, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x29fa2f4
	bool CheckCharacterPoseState(STExtraPlayerController* PC, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, SocialIslandPlayerState* K2Node_DynamicCast_AsSocial_Island_Player_State, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_HasInteractiveState_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x29fa2f4
	void StopPlayerAutoSprint(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ShowStopMoveResult(enum Result, FText CallFunc_Conv_ByteToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_IsAutoSpint_bAutoSprint);// 0x29fa2f4
	void ShowTips(int ID, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void CallSetPlayerAutoSprint(STExtraPlayerController* Target, STExtraBaseCharacter* Character, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_HasState_ReturnValue);// 0x29fa2f4
	void IsAutoSpint(out bool bAutoSprint, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	Rotator GetRotatorToDesc(Vector ActorLocation, Vector CallFunc_GetDesc_Desc, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue);// 0x29fa2f4
	void ResetMinDistanceToDesc(Vector ActorLocation, float CallFunc_GetDescDistance_ReturnValue);// 0x29fa2f4
	float GetDescDistance(Vector ActorLocation, Vector CallFunc_GetDesc_Desc, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue);// 0x29fa2f4
	bool IsLastPoint(int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x29fa2f4
	void GotoNextPoint();// 0x29fa2f4
	bool IsArrivalDesc(Vector ActorLocation, float CallFunc_GetLastMinDistance_Distance, bool CallFunc_IsLastPoint_ReturnValue, Vector CallFunc_GetDesc_Desc, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x29fa2f4
	void GetDesc(out Vector Desc, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x29fa2f4
	void TickCloseToTarget(STExtraPlayerController* PC, float DeltaTime);// 0x29fa2f4
	void OnStartAutoMove(STExtraPlayerController* PC);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void CustomEvent(enum FindResult);// 0x29fa2f4
	void StopMove();// 0x29fa2f4
	void OnRepPlayerState();// 0x29fa2f4
	void ExecuteUbergraph_BP_AutoNav(int EntryPoint, bool CallFunc_IsSwim_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraPlayerController* K2Node_Event_PC2, float K2Node_Event_DeltaTime, Rotator CallFunc_GetControlRotation_ReturnValue, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsOnVehicle_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_GetRotatorToDesc_ReturnValue, float CallFunc_GetDescDistance_ReturnValue, bool CallFunc_IsArrivalDesc_ReturnValue, bool CallFunc_IsLastPoint_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, STExtraPlayerController* K2Node_Event_PC, bool CallFunc_IsValid_ReturnValue2, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsOnVehicle_ReturnValue2, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_RInterpTo_ReturnValue, bool CallFunc_IsAutoSpint_bAutoSprint, bool CallFunc_EqualEqual_RotatorRotator_ReturnValue, bool CallFunc_IsAutoSpint_bAutoSprint2, bool CallFunc_IsAutoSpint_bAutoSprint3, enum K2Node_CustomEvent_FindResult, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetMoveParam_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x29fa2f4
	float MinDistanceToDesc;//[Offset: 0x16c, Size: 4]
	float MaxFailMoveDescTime;//[Offset: 0x170, Size: 4]
	float CurFailMoveDescTime;//[Offset: 0x174, Size: 4]
	float RotationSpeed;//[Offset: 0x178, Size: 4]
	<enum,int> ResultTipMap;//[Offset: 0x17c, Size: 60]

--------------------------------
Class: PlayerAutoNavComponent.ActorComponent.Object
	delegate OnPlayerAutoNavStartMoveDelegate;//[Offset: 0xbc, Size: 12]
	delegate OnPlayerAutoNavFindPathDelegate;//[Offset: 0xc8, Size: 12]
	delegate OnPlayerAutoNavFinishDelegate;//[Offset: 0xd4, Size: 12]
	Vector[] PathPoints;//[Offset: 0xe0, Size: 12]
	enum CurMode;//[Offset: 0xec, Size: 1]
	PlayerAutoNavOperator NavOperator;//[Offset: 0xf0, Size: 28]
	float CheckPathLastPointDistance;//[Offset: 0x10c, Size: 4]
	float RandomPointInNavigableRadius;//[Offset: 0x110, Size: 4]
	float CharacterModeRefreshInterval;//[Offset: 0x114, Size: 4]
	float MinPointDistance;//[Offset: 0x140, Size: 4]
	float LastMinPointDistance;//[Offset: 0x144, Size: 4]
	float LastMinLocationPointDistance;//[Offset: 0x148, Size: 4]
	bool IsAutoMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x150, Size: 12]
	Vector[] ShootingMachineLocationList;//[Offset: 0x15c, Size: 12]
	void TryReqMoveToLocationByParam(Vector Desc, FString Param);// 0x1f62504
	void TryReqMoveToLocation(Vector Desc);// 0x1f62494
	void TryReqMoveToCharacter(FString PlayerUID);// 0x1f623d8
	void TickCloseToTarget(STExtraPlayerController* PC, float DeltaTime);// 0x1de2454
	void StopMove();// 0x1f623bc
	void ServerCacheMoveToLocationByParam(Vector Desc, FString Param);// 0x1f622bc
	void ServerCacheMoveToCharacter(FString PlayerUID);// 0x1f62200
	void RspGetPath(const Vector[] RspPathPoints, enum FindResult, FString PlayerName);// 0x1f62074
	void RspGetMoveOperatorCache(PlayerAutoNavOperator Operator);// 0x1f61ef4
	void ReqMoveToLocation(Vector Desc);// 0x1f61e48
	void ReqMoveToCharacter(FString PlayerUID);// 0x1f61d54
	void ReqMoveOperatorCache();// 0x1f61cf8
	void OnStartAutoMove(STExtraPlayerController* PC);// 0x1f61c78
	Vector GetNearestShootingMachineLocation();// 0x1f61c30
	FString GetMoveParam();// 0x1f61b70
	bool CheckCharacterPoseState(STExtraPlayerController* PC);// 0x1f61ae8

--------------------------------
Class: PlayerAutoNavOperator
	bool bIsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CurMode;//[Offset: 0x1, Size: 1]
	FString TargetParam;//[Offset: 0x4, Size: 12]
	Vector TargetDesc;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BP_IslandInactiveClearCom_C.SIslandInactiveClearComponent.ActorComponent.Object

--------------------------------
Class: LuaTaskComponent.ActorComponent.Object
	XTaskSyncData[] TaskSyncList;//[Offset: 0xbc, Size: 12]
	XTaskSaveData[] TaskList;//[Offset: 0xc8, Size: 12]
	DailyTaskAwardInfo[] RewardList;//[Offset: 0xd4, Size: 12]
	delegate TaskSyncListRefreshDelegate;//[Offset: 0xe0, Size: 12]
	delegate OnEndPlay;//[Offset: 0xec, Size: 12]
	delegate TaskAreaStateChangeDelegate;//[Offset: 0xf8, Size: 12]
	XTaskExtraSyncData[] TaskExtraSyncData;//[Offset: 0x104, Size: 12]
	delegate TaskExtraSyncDataRefreshDelegate;//[Offset: 0x110, Size: 12]
	void SyncTaskList(out XTaskSaveData[] SyncList);// 0x1f17dd0
	void SetTestTaskReportData();// 0x1f17dbc
	void RPC_Server_GetReward(int TaskID);// 0x1f17d08
	void RPC_Client_GetRewardRes(bool IsSuccess);// 0x1e1ea9c
	void RPC_Client_ExitTaskArea(int TaskID);// 0x1e4c168
	void RPC_Client_EnterTaskArea(int TaskID, float Duration);// 0x1f17c44
	void RefreshSyncTaskList();// 0x1f17c30
	void RefreshPlayerDailyTaskStoreInfo();// 0x1f17c1c
	void RecordRewardInfo(int TaskID, TaskAwardItemInfo[] AwardList);// 0x1f17a7c
	void OnRep_TaskSyncList();// 0x1f17a68
	void OnRep_TaskExtraSyncData();// 0x1f17a54
	void ModifyTaskExtraSyncData(int TaskID, XTaskExtraSyncData SaveData);// 0x1f17940
	void ModifyTaskBySaveData(int TaskID, XTaskSaveData SaveData);// 0x1f17860
	void ModifyTask(int TaskID, int Progress, int State);// 0x1f17760
	void ModifySyncTask(int TaskID);// 0x1f176e8
	bool IsTaskDone(int TaskID);// 0x1f17668
	enum GetTaskStateByTaskId(int TaskID);// 0x1f175e8
	XTaskExtraSyncData GetTaskExtraDataByTaskId(int TaskID);// 0x1f17554
	XTaskSyncData GetTaskDataByTaskId(int TaskID);// 0x1f174b8
	DailyTaskReportInfo GetDailyTaskReportData();// 0x1f172dc
	void DeleteTask(int TaskID);// 0x1e836a4
	void CollapseTaskInfo();// 0x1f172c8
	void AddTask(int TaskID, int Aim);// 0x1edb3a0

--------------------------------
Class: XTaskSyncData
	int TaskID;//[Offset: 0x0, Size: 4]
	int CurProgress;//[Offset: 0x4, Size: 4]
	int AimProgress;//[Offset: 0x8, Size: 4]
	enum State;//[Offset: 0xc, Size: 1]
	enum TaskType;//[Offset: 0xd, Size: 1]

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	bool InVehicleFPPViewPitchLimitMinPositiveDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a78, Size: 1]
	bool InVehicleFPPViewPitchLimitMaxDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a79, Size: 1]
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x1a7c, Size: 4]
	float InVehicleFPPViewPitchLimitMax;//[Offset: 0x1a80, Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x1a84, Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x1a88, Size: 4]

--------------------------------
Class: BP_HUD_SocialIsland_C.SurviveHUD.HUD.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x540, Size: 4]

--------------------------------
Class: BP_PlayerPawn_SI_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b4c, Size: 4]
	bool CheckIsValidEmoteIDBP(int EmoteIndex, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnBPIsInvincibleChange();// 0x29fa2f4
	void OnIsInvincibleChange();// 0x29fa2f4
	void RefreshPetInfo();// 0x29fa2f4
	void HandleParachuteStateChanged(enum NewState);// 0x29fa2f4
	void ReceiveDestroyed();// 0x29fa2f4
	void LuaReceiveBeginPlay();// 0x29fa2f4
	void OnSelfPerspectiveChanged(bool IsFPP);// 0x29fa2f4
	void ExecuteUbergraph_BP_PlayerPawn_SI(int EntryPoint, BP_PlayerPawn_SI_C* ___object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, CharacterAvatarComponent2* CallFunc_getAvatarComponent2_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classByteProperty CallFunc_OnIsInvincibleChange_self_CastInput, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, enum K2Node_Event_NewState, bool CallFunc_IsValid_ReturnValue3, BP_PlayerPawn_SI_C* ___object_Variable2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr[] K2Node_MakeArray_Array2, bool K2Node_CustomEvent_IsFPP, Actor* CallFunc_GetAttachParentActor_ReturnValue, ActivityActorBase* K2Node_DynamicCast_AsActivity_Actor_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_ClientClickCancleButton_OutReason, bool CallFunc_ClientClickCancleButton_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue);// 0x29fa2f4
	BP_PlayerWing_C* BP_PlayerWing;//[Offset: 0x2b50, Size: 4]
	BP_EmoteBubbleCom_C* BP_EmoteBubbleCom;//[Offset: 0x2b54, Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x2b58, Size: 4]
	SkeletalMeshComponent* CurEmotePropMesh;//[Offset: 0x2b5c, Size: 4]
	TimerHandle ClearPropHandle;//[Offset: 0x2b60, Size: 8]
	DJStageBaseActor* currDJStage;//[Offset: 0x2b68, Size: 4]

--------------------------------
Class: BP_PlayerWing_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc0, Size: 4]
	void EnableWingAvatar(bool IsEnable, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void ResetWingUpCloud(Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void PlayLaunchMontage(Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, float CallFunc_PlayAnimMontage_ReturnValue);// 0x29fa2f4
	void OnParachuteStateChanged(enum State, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void OnParachuteLaunch();// 0x29fa2f4
	void InitParachuteComponent(CharacterParachuteComponent* ParachuteComponent, delegate K2Node_CreateDelegate_OutputDelegate);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ChangeParachuteAvatar(bool IsEnable);// 0x29fa2f4
	void OnExitParachute();// 0x29fa2f4
	void ExecuteUbergraph_BP_PlayerWing(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_CustomEvent_IsEnable, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue2, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3);// 0x29fa2f4
	CharacterParachuteComponent* CharacterParachuteComponent;//[Offset: 0xc4, Size: 4]
	bool IsWingAvatarEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	int WingAvatarId;//[Offset: 0xcc, Size: 4]
	int WingParticleAvatarId;//[Offset: 0xd0, Size: 4]
	AnimMontage* LaunchMontage;//[Offset: 0xd4, Size: 4]
	ParticleSystem* WingUpCloud;//[Offset: 0xd8, Size: 4]
	float LaunchPitchInput;//[Offset: 0xdc, Size: 4]
	LaunchOverrideParam ParachuteLaunchParam;//[Offset: 0xe0, Size: 136]
	int ParachuteAvatarID;//[Offset: 0x168, Size: 4]
	bool HasBindExitParachuteDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]

--------------------------------
Class: LaunchOverrideParam
	float FreeFall_InputTriggerThreshold_2_B6A98779400C57684B02118185E01964;//[Offset: 0x0, Size: 4]
	float FreeFall_AcceFall_4_B185AE8C48A313CF3E4CB09BA92FED69;//[Offset: 0x4, Size: 4]
	float FreeFall_MaxFreeFallSpeed_6_239B23C6495BAFBE66FC2B8A30869CC7;//[Offset: 0x8, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel_8_4F17B1FD4E71957A7548489398C36597;//[Offset: 0xc, Size: 4]
	float FreeFall_AcceForward_14_A509383D4BDCA53B5B22AD9CDD1A8B5F;//[Offset: 0x10, Size: 4]
	float FreeFall_MaxForwardSpeed_15_55E0098F448FCA2C1B88B597F11593CC;//[Offset: 0x14, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed_16_1DEF2D9F4E7E48BD423A64AC94D89317;//[Offset: 0x18, Size: 4]
	float FreeFall_AcceRight_17_FBCD844245E2CA390155FBB380AD7BC1;//[Offset: 0x1c, Size: 4]
	float FreeFall_MaxRightSpeed_18_9FE68D9B4A6EC8DA3F852395054C6AA9;//[Offset: 0x20, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed_24_0B3D637441F0991E2FDDF49252A840AB;//[Offset: 0x24, Size: 4]
	float FreeFall_MaxPitchForwardAngle_25_9FC7922C4B2957AEAE290F9388CF422D;//[Offset: 0x28, Size: 4]
	float FreeFall_MaxPitchBackAngle_26_CE1DEA464F7560C7A8B0D5B01E64B63F;//[Offset: 0x2c, Size: 4]
	float FreeFall_RotationYawInterpSpeed_27_741D7F8243AD22D9B12FAD9F26809967;//[Offset: 0x30, Size: 4]
	float FreeFall_RotationPitchInterpSpeed_28_9C0B58D843791FAD45C05ABC295F3843;//[Offset: 0x34, Size: 4]
	float FreeFall_MinDiveAngle_31_F6BDA42F405A3FCDF19D5B961924C81A;//[Offset: 0x38, Size: 4]
	float FreeFall_DiveExtraAcceFall_32_E1D56DB5462E66E9FA5F9E84DBC595FA;//[Offset: 0x3c, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed_38_145758CA4584FDA642543388219D1DC1;//[Offset: 0x40, Size: 4]
	bool bOpened_EnableInputMode8Dirs_69_04E00D814E26AD7C43C90B8919D630FD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float Opened_AcceFall_40_EB868C04445363431FDA55984C6444AD;//[Offset: 0x48, Size: 4]
	float Opened_MaxFreeFallSpeed_41_AF9BD59548A9424254ABE785BE03E36D;//[Offset: 0x4c, Size: 4]
	float Opened_AcceForward_42_089F0D1442EEB8BAB002A6832FDD7337;//[Offset: 0x50, Size: 4]
	float Opened_MaxForwardSpeed_47_CA95593A4B685B862FB36E93582F7DA5;//[Offset: 0x54, Size: 4]
	float Opened_MaxBackwardSpeed_48_FA1095B944D090D0E71ED6A687ABC508;//[Offset: 0x58, Size: 4]
	float Opened_MaxForwardExtraFallSpeed_49_D98CA76240F80759A13AACA5672DF754;//[Offset: 0x5c, Size: 4]
	float Opened_MaxBackExtraFallSpeed_50_7187DA1D40416DBD172579867064DA9A;//[Offset: 0x60, Size: 4]
	float Opened_GlidingSpeedRemainPercent_53_26F1E2574310F8938E3A88A3CA6CC6CC;//[Offset: 0x64, Size: 4]
	float Opened_AcceRight_60_CD2C6AB3465E8B4FD9B48B8D32352EEE;//[Offset: 0x68, Size: 4]
	float Opened_MaxRightSpeed_61_3BD9663044A7D1D1AE583ABFAC923189;//[Offset: 0x6c, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed_62_48BAFDAA4E3F1599300EC191A2CC2120;//[Offset: 0x70, Size: 4]
	float Opened_MaxRollAngle_63_F4D8AD0A40FD66C5CF46CCA8A3CDA211;//[Offset: 0x74, Size: 4]
	float Opened_MaxPitchForwardAngle_64_3D2466384C679725BF599CA7F981E2E7;//[Offset: 0x78, Size: 4]
	float Opened_MaxPitchBackAngle_65_EEE3B73249B865753DD7ADB329D53C42;//[Offset: 0x7c, Size: 4]
	float Opened_MaxYawAngleSpeed_66_D0DEFBB4419472E040EFECA5D46A455B;//[Offset: 0x80, Size: 4]
	float Opened_RotationInterpSpeed_68_2E5DDDE540A0FD56FB1C92AC4CBBF1DD;//[Offset: 0x84, Size: 4]

--------------------------------
Class: BP_EmoteBubbleCom_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc0, Size: 4]
	void SpawnEmoteBubble(int BubbleID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_IngameBubbleCfg_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_AsyncLoadAssetInstWithCallback_ReturnValue);// 0x29fa2f4
	void OnLoadBubbleTextureCallBack(Object* Asset, int ID);// 0x29fa2f4
	void OnLoadEffect(Object* LoadedObject, FName TexParamName);// 0x29fa2f4
	void CustomEvent(Object* LoadedObject, int RequestID);// 0x29fa2f4
	void CustomEvent(Object* LoadedObject, int RequestID);// 0x29fa2f4
	void ExecuteUbergraph_BP_EmoteBubbleCom(int EntryPoint, Object* K2Node_CustomEvent_LoadedObject, int K2Node_CustomEvent_RequestID, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_AsyncLoadAssetInstWithCallback_ReturnValue, Object* K2Node_CustomEvent_Asset, int K2Node_CustomEvent_id, Actor* CallFunc_GetOwner_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Texture* K2Node_DynamicCast_AsTexture, bool K2Node_DynamicCast_bSuccess2, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate2, Object* K2Node_CustomEvent_LoadedObject3, FName K2Node_CustomEvent_TexParamName, int CallFunc_AsyncLoadAssetInstWithCallback_ReturnValue2, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess3, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool K2Node_SwitchInteger_CmpSuccess, Object* K2Node_CustomEvent_LoadedObject2, int K2Node_CustomEvent_RequestID2);// 0x29fa2f4
	ParticleSystemComponent* BubbleParticle;//[Offset: 0xc4, Size: 4]
	int CurBubbleType;//[Offset: 0xc8, Size: 4]
	Texture* BubbleTexture;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: BP_STRUCT_IngameBubbleCfg_type
	int BubbleSkillID_0_1809A6C0180DD79F38CF233A06FD9BB4;//[Offset: 0x0, Size: 4]
	int EmojiID_1_3ABD110029DD9B9431E894EC0F7F1414;//[Offset: 0x4, Size: 4]
	FString PicturePath_2_44E1AB003F99151A6FB100C50559C908;//[Offset: 0x8, Size: 12]
	FString BubbleEffectIcon_3_4EEA1940055C741F7735B2D1011D8CAE;//[Offset: 0x14, Size: 12]
	int BubbleEffectType_4_71A15F807B33FB4E77514747011CD295;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DJStageBaseActor.STExtraHouseActor.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int DJStageID;//[Offset: 0x45c, Size: 4]

--------------------------------
Class: STExtraHouseActor.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	Vector[] itemSpotPosList;//[Offset: 0x424, Size: 12]
	BuildingSearchPath[] searchPathList;//[Offset: 0x430, Size: 12]
	Vector[] cornerPointList;//[Offset: 0x43c, Size: 12]
	Vector centerPoint;//[Offset: 0x448, Size: 12]
	bool isAddInAIList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bDebugReplicateOnEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	void SetShareBoundsEnable_New(SceneComponent* Root, bool Val);// 0x2054fd0
	void SetGStreaingDistanceScale(float Scale);// 0x2054f58

--------------------------------
Class: BuildingSearchPath
	BuildingSearchPathLink[] itemPosLinkList;//[Offset: 0x0, Size: 12]
	int8 buildingPartIndext;//[Offset: 0xc, Size: 1]

--------------------------------
Class: BuildingSearchPathLink
	Vector[] WayPointList;//[Offset: 0x0, Size: 12]
	int targetSpotIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BP_PaintDecalDetectLine1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0, Size: 4]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void StopDetecting();// 0x29fa2f4
	void StartDetecting();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ExecuteUbergraph_BP_PaintDecalDetectLine1(int EntryPoint, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x29fa2f4
	StaticMeshComponent* StaticMesh;//[Offset: 0x2d4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2d8, Size: 4]
	Vector CachePos;//[Offset: 0x2dc, Size: 12]

--------------------------------
Class: BP_PlayerState_SocialIsland_C.SocialIslandPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10c8, Size: 4]
	void CheckAndSetDuelMap(IslandBattleData BattleData, float DuelMapScale, FString DuelMapTexture, float Zero, FString EmptyString, bool K2Node_SwitchEnum_CmpSuccess, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue5, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue6, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x29fa2f4
	void HandleBattleStateChange(IslandBattleData BattleData, bool CallFunc_IsValid_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, TemBPDataAddr[] K2Node_MakeArray_Array, const TemBPDataAddr[] K2Node_MakeArray_Array2, const TemBPDataAddr[] K2Node_MakeArray_Array3);// 0x29fa2f4
	void EnableInvincible(STExtraBaseCharacter* Pawn, float InvincibleTime, BP_PlayerPawn_SI_C* K2Node_DynamicCast_AsBP_Player_Pawn_SI, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x29fa2f4
	void ClearInvincible(bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void HandleDuelStateChange(IslandDuelData NewDuelData, LuaBPVar CallFunc_BoolToLVar_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool CallFunc_IsValid_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerState* CallFunc_GetPlayerStateSafety_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue3, SocialIslandPlayerState* K2Node_DynamicCast_AsSocial_Island_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool K2Node_SwitchEnum2_CmpSuccess, LuaBPVar CallFunc_BoolToLVar_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void BP_PlayerInfoNotify(int LandId);// 0x29fa2f4
	void OnDuelDataChange(out const IslandDuelData PreDuelData);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnBattleDataChange(out const IslandBattleData PreBattleData);// 0x29fa2f4
	void OnReconnectResetUIByPlayerControllerStateDelegate_Event();// 0x29fa2f4
	void ExecuteUbergraph_BP_PlayerState_SocialIsland(int EntryPoint, GameStateBase* CallFunc_GetGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_GameState_SocialIsland_C* K2Node_DynamicCast_AsBP_Game_State_Social_Island, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_LandID, GameInstance* CallFunc_GetGameInstance_ReturnValue, IslandDuelData K2Node_Event_PreDuelData, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, IslandBattleData K2Node_Event_PreBattleData, PlayerController* CallFunc_GetPlayerController_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_MakeLiteralBool_ReturnValue, bool CallFunc_MakeLiteralBool_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr[] K2Node_MakeArray_Array2, TemBPDataAddr[] K2Node_MakeArray_Array3, PlayerController* CallFunc_GetPlayerController_ReturnValue3, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess4, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3);// 0x29fa2f4
	void OnDuelStateChangedEvent__DelegateSignature(bool IsInDuel);// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x10cc, Size: 4]
	int iShootScoreSum;//[Offset: 0x10d0, Size: 4]
	int[] iShootScoreArray;//[Offset: 0x10d4, Size: 12]
	BP_PlayerPawn_SI_C* PreInvincible;//[Offset: 0x10e0, Size: 4]
	TimerHandle IncincibleProtectTimer;//[Offset: 0x10e8, Size: 8]
	delegate OnDuelStateChangedEvent;//[Offset: 0x10f0, Size: 12]
	FString CachDuelTargetUID;//[Offset: 0x10fc, Size: 12]
	float DuelInvincibleTime;//[Offset: 0x1108, Size: 4]
	float BattleInvincibleTime;//[Offset: 0x110c, Size: 4]
	bool bMapReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 1]

--------------------------------
Class: LuaBPVar

--------------------------------
Class: BP_GameState_SocialIsland_C.SocialIslandGameState.IslandGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	void NotifyUpdateExtremeRankButton(bool Show);// 0x29fa2f4
	void NotifyUpdateExtremeWeaponButton(bool Show);// 0x29fa2f4
	void NotifyUpdateExtremeButton(bool Show);// 0x29fa2f4
	void NotifyUpdateIceDrinkButton(bool bShow);// 0x29fa2f4
	void NotifyDuelEnd(FString OrignUID, FString TargetUID, int DuelType, FString WinnerUID);// 0x29fa2f4
	void NotifyPlayerGetNewAlias(FString UId, int AliasID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x29fa2f4
	void NotifyUpdateTrainButton(bool bShow, int iMachineID);// 0x29fa2f4
	void NewPlayerState(BP_PlayerState_SocialIsland_C* PlayerState);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void OnUpdateExtremeRankButton__DelegateSignature(bool Show);// 0x29fa2f4
	void OnUpdateExtremeWeaponButton__DelegateSignature(bool Show);// 0x29fa2f4
	void OnUpdateExtremeButton__DelegateSignature(bool Show);// 0x29fa2f4
	void OnUpdateIceDrinkButton__DelegateSignature(bool bShow);// 0x29fa2f4
	void NotifyDuelResult__DelegateSignature(FString OrignUID, FString TargetUID, int DuelType, FString WinnerUID);// 0x29fa2f4
	void OnPlayerGetNewAlias__DelegateSignature(FString UId, int AliasID);// 0x29fa2f4
	void OnUpdateTrainButton__DelegateSignature(bool bShow, int iMachineID);// 0x29fa2f4
	void OnNewPlayerState__DelegateSignature(BP_PlayerState_SocialIsland_C* PlayerState);// 0x29fa2f4
	GameLevelManagerComponent* GameLevelManager;//[Offset: 0xe98, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xe9c, Size: 4]
	delegate OnNewPlayerState;//[Offset: 0xea0, Size: 12]
	delegate OnUpdateTrainButton;//[Offset: 0xeac, Size: 12]
	delegate OnPlayerGetNewAlias;//[Offset: 0xeb8, Size: 12]
	delegate NotifyDuelResult;//[Offset: 0xec4, Size: 12]
	delegate OnUpdateIceDrinkButton;//[Offset: 0xed0, Size: 12]
	delegate OnUpdateExtremeButton;//[Offset: 0xedc, Size: 12]
	delegate OnUpdateExtremeWeaponButton;//[Offset: 0xee8, Size: 12]
	delegate OnUpdateExtremeRankButton;//[Offset: 0xef4, Size: 12]

--------------------------------
Class: SocialIslandGameState.IslandGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int CheckPlayerNumTimeInter;//[Offset: 0xe1c, Size: 4]
	int RankLimit;//[Offset: 0xe20, Size: 4]
	bool ShowDuelEnemyInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	int FirstShowEnemyTime;//[Offset: 0xe28, Size: 4]
	int EnemyShowingTimes;//[Offset: 0xe2c, Size: 4]
	int EnemyShowingInterval;//[Offset: 0xe30, Size: 4]
	TargetTrainData[] Rank1;//[Offset: 0xe34, Size: 12]
	TargetTrainData[] Rank2;//[Offset: 0xe40, Size: 12]
	TargetTrainData[] Rank3;//[Offset: 0xe4c, Size: 12]
	TargetTrainData[] Rank4;//[Offset: 0xe58, Size: 12]
	delegate OnBroadcastHighTargetScore;//[Offset: 0xe64, Size: 12]
	delegate OnIslandPlayerChangeDelegate;//[Offset: 0xe70, Size: 12]
	delegate OnIslandPlayerTeamInfoChangedDelegate;//[Offset: 0xe7c, Size: 12]
	delegate OnIslandAIMarkInfoChangedDelegate;//[Offset: 0xe88, Size: 12]
	bool bIsSystemIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe94, Size: 1]
	bool bEnabeleNetPriorityModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe95, Size: 1]
	void TestSislandPlayerTeam(FString mate1, FString mate2, FString mate, FString mate4);// 0x1fbd008
	void SyncPlayerExit(STExtraPlayerController* NewPlayer);// 0x1fbcf90
	void SyncNewPlayer(STExtraPlayerController* NewPlayer);// 0x1fbcf18
	void SubmitTrainData(TargetTrainData TrainData, TargetTrainComponent* TargetTrain);// 0x1fbcd68
	void ShowAllPlayersMark(float VisDistance);// 0x1fbccf0
	void SetCompressEnable(bool bEnable);// 0x1fbcc70
	void ResetRoomTimeInfo(out IslandRoomData RoomData, bool bPlayerNumIsEnough);// 0x1fbcb48
	void RefreshTeammate(out const FString[] teammates);// 0x1fbca14
	void OnIslandAIMarkInfoChangedDelegate__DelegateSignature(out const SIslandAIPlayerMarkInfo[] SIslandPlayerMarkInfoArray, float VisDistance);// 0x29fa2f4
	void NotifyPlayersEndStateTimeChange(out IslandRoomData RoomData);// 0x1fbc93c
	bool IsNonePlayerOnIsland();// 0x1fbc914
	void GMCleintShowAllMark(const SIslandAIPlayerMarkInfo[] AllAIs, float VisDistance);// 0x1fbc7d4
	void CheckPlayerNum(out IslandRoomData RoomData, bool bForceCheck);// 0x1fbc6ac
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x1fbc5e0
	void CheckAllRooms();// 0x1fbc5c4
	int BroadcastMessageToIsland(int ID, out const byte[] Content, int LandId, uint64 ExcludeUid);// 0x1fbc414
	void BroadcastHighTargetScore(FString UIDStr, int Score, int IslandID);// 0x1fbc290
	void AddTrainDataToRank(out TargetTrainData[] Rank, TargetTrainData TrainData);// 0x1fbc01c

--------------------------------
Class: IslandGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bEnableClearIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 1]
	bool bEnableInactiveClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcd, Size: 1]
	float CurrentTimeCheckCD;//[Offset: 0xdd0, Size: 4]
	float TotalTimeCheckCD;//[Offset: 0xdd4, Size: 4]
	FString ExitReason;//[Offset: 0xdd8, Size: 12]
	int IslandStartShowLifeTime;//[Offset: 0xde4, Size: 4]
	int IslandDuration;//[Offset: 0xde8, Size: 4]
	int IslandStartTime;//[Offset: 0xdec, Size: 4]
	int IslandLeftTime;//[Offset: 0xdf0, Size: 4]
	int IslandEndStateTime;//[Offset: 0xdf4, Size: 4]
	int IslandDefaultLifeTime;//[Offset: 0xdf8, Size: 4]
	int IslandSpecialLifeTime;//[Offset: 0xdfc, Size: 4]
	int IslandMinimumPlayerNum;//[Offset: 0xe00, Size: 4]
	int IslandMinimumAliveTime;//[Offset: 0xe04, Size: 4]
	IslandRoomData[] RoomDatas;//[Offset: 0xe08, Size: 12]
	IslandGameMode* IslandGameMode;//[Offset: 0xe14, Size: 4]
	enum IslandStateType;//[Offset: 0xe18, Size: 1]
	IslandRoomData GetRoomData(int LandId);// 0x1effd30

--------------------------------
Class: IslandRoomData
	int LandId;//[Offset: 0x0, Size: 4]
	int EndStateTime;//[Offset: 0x4, Size: 4]
	int PlayerNum;//[Offset: 0x8, Size: 4]
	PlayerController*[] Players;//[Offset: 0xc, Size: 12]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int FirstPlayerEnterTime;//[Offset: 0x1c, Size: 4]
	bool bArenaOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bForceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: IslandGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bCanSendStopJoinSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588, Size: 1]
	bool bEnableOverWriteLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1589, Size: 1]
	bool bEnableSetExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158a, Size: 1]
	float CloseDSDelayTime;//[Offset: 0x158c, Size: 4]
	IslandGameState* IslandGameState;//[Offset: 0x1590, Size: 4]
	TimerHandle DelayCloseDSTimer;//[Offset: 0x1598, Size: 8]
	bool bSentStopJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a0, Size: 1]
	int IslandInactivePlayerKickoutTime;//[Offset: 0x15a4, Size: 4]
	void StopJoin();// 0x1eff7b0
	void NotifyDSToClose();// 0x1eff794
	void CloseIsland();// 0x1eff778

--------------------------------
Class: SIslandAIPlayerMarkInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	GameModePlayerAliasInfo PlayerAliasInfo;//[Offset: 0x10, Size: 48]
	STExtraBaseCharacter* AIPlayer;//[Offset: 0x40, Size: 4]

--------------------------------
Class: BP_VH_Buggy_2_C.BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object

--------------------------------
Class: BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passenger;//[Offset: 0x10e0, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x10e4, Size: 4]

--------------------------------
Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool DefaultLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x184, Size: 12]
	void OnIdleAnimListAsyncLoadingFinished();// 0x2602d5c
	void OnAnimListAsyncLoadingFinished(AsyncLoadCharVehAnimParams LoadingParam);// 0x2602af8

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadCharVehAnimParams

--------------------------------
Class: BP_MegaDrop_C.STExtraMegaDropVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10c0, Size: 4]
	void EnableWingAvatar(STExtraBaseCharacter* Character, bool IsEnable, BP_PlayerWing_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void ExitVehicleOnTimer(Controller* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, VehicleUserComponent* CallFunc_GetVehicleUserComp_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x29fa2f4
	void ResetSeatLocationOnClient(Rotator CallFunc_GetReplicatedRotator_ReturnValue, Vector CallFunc_GetReplicatedLocation_ReturnValue, bool CallFunc_IsServer_ReturnValue);// 0x29fa2f4
	void PrintCurrentLocation(FText Info, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_VectorToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FString CallFunc_GetDisplayName_ReturnValue, Transform CallFunc_GetTransform_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_TransformToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData K2Node_MakeStruct_FormatArgumentData4, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x29fa2f4
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm, bool CallFunc_IsValid_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x29fa2f4
	void DropAllPlayerWhenInvalid(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, STExtraPlayerCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, VehicleUserComponent* CallFunc_GetVehicleUserComp_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void GetLaunchSpeed(out Vector Speed, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue);// 0x29fa2f4
	void ShowExhaustFx(bool Show, ParticleSystemComponent* PS, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue);// 0x29fa2f4
	void SetMeshLocationHeight(float Height, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult);// 0x29fa2f4
	void LaunchSeatPlayer(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, STExtraPlayerCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, VehicleUserComponent* CallFunc_GetVehicleUserComp_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void AddEventMapCount(STExtraBaseCharacter* Character, enum Key, int ___int_Variable, bool CallFunc_IsValid_ReturnValue, UAEPlayerState* K2Node_DynamicCast_AsUAEPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x29fa2f4
	void OnArrivalBottom();// 0x29fa2f4
	void LaunchPlayer(STExtraPlayerController* Controller, Vector CallFunc_GetLaunchSpeed_Speed, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void TimelineLaunchHeight__FinishedFunc();// 0x29fa2f4
	void TimelineLaunchHeight__UpdateFunc();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void OnBoostingChanged();// 0x29fa2f4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x29fa2f4
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x29fa2f4
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x29fa2f4
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x29fa2f4
	void SetNeedInitWingAvatar(STExtraBaseCharacter* Character);// 0x29fa2f4
	void OnBecomeViewTarget(PlayerController* PC);// 0x29fa2f4
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x29fa2f4
	void ExecuteUbergraph_BP_MegaDrop(int EntryPoint, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, FText CallFunc_Conv_RotatorToText_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_VectorToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerCharacter* K2Node_Event_Player3, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerCharacter* K2Node_Event_Player2, STExtraPlayerCharacter* K2Node_Event_Player, bool CallFunc_IsServer_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, VehicleSpringArmComponent* CallFunc_GetVehicleSpringArm_ReturnValue, bool CallFunc_IsValid_ReturnValue2, VehicleSpringArmComponent* CallFunc_GetVehicleSpringArm_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, STExtraBaseCharacter* K2Node_Event_Character2, FText CallFunc_Conv_BoolToText_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, bool CallFunc_IsValid_ReturnValue4, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, PlayerController* K2Node_Event_PC, FString CallFunc_GetObjectName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData4, TimerHandle CallFunc_K2_SetTimer_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue2, bool K2Node_Event_IsDriver, STExtraPlayerCharacter* K2Node_Event_Character, bool CallFunc_IsValid_ReturnValue5);// 0x29fa2f4
	CameraComponent* Camera;//[Offset: 0x10c4, Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x10c8, Size: 4]
	ParticleSystemComponent* PSCExhaust;//[Offset: 0x10cc, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passenger;//[Offset: 0x10d0, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x10d4, Size: 4]
	float TimelineLaunchHeight_Height_8D423A264DF7F2AB76DC4CBAC0BD0AC9;//[Offset: 0x10d8, Size: 4]
	byte TimelineLaunchHeight__Direction_8D423A264DF7F2AB76DC4CBAC0BD0AC9;//[Offset: 0x10dc, Size: 1]
	TimelineComponent* TimelineLaunchHeight;//[Offset: 0x10e0, Size: 4]
	STExtraPlayerController* TempPlayerController;//[Offset: 0x10e4, Size: 4]
	bool isMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	float LaunchTime;//[Offset: 0x10ec, Size: 4]
	float ForwardLaunchSpeed;//[Offset: 0x10f0, Size: 4]
	float UpLaunchSpeed;//[Offset: 0x10f4, Size: 4]
	float CameraYawRange;//[Offset: 0x10f8, Size: 4]
	TimerHandle ExitVehicleTimer;//[Offset: 0x1100, Size: 8]

--------------------------------
Class: STExtraMegaDropVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	Vector MegaSeatLocation;//[Offset: 0x109c, Size: 12]
	Rotator MegaSeatRotator;//[Offset: 0x10a8, Size: 12]
	float validTime;//[Offset: 0x10b4, Size: 4]
	bool IsCannotEnterWhileBornland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool EnableMegaDropWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	bool EnableMegaDropDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ba, Size: 1]
	bool NeedInitWingAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bb, Size: 1]
	void SetNeedInitWingAvatar(STExtraBaseCharacter* Character);// 0x29fa2f4
	void SendControlRotationToServer();// 0x205e540
	void OnBecomeViewTarget(PlayerController* PC);// 0x29fa2f4
	Rotator GetReplicatedRotator();// 0x205e4f8
	Vector GetReplicatedLocation();// 0x205e4b0

--------------------------------
Class: BP_Ammo_556mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_556mm;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MachineGun_MP5K_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_MP5K;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_MachineGun_PP19_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* StaticMesh;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_TommyGun;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Pistol_DesertEagle_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DesertEagle;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Pistol_Vz61_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_Vz61;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Rifle_G36_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* ST_WEP_G36C_Lod;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* SM_M416;//[Offset: 0x628, Size: 4]

--------------------------------
Class: BP_Pistol_P1911_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_P1911;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ShotGun_DP12_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DP12;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Rifle_M16A4_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* SM_M16A4;//[Offset: 0x628, Size: 4]

--------------------------------
Class: BP_Ammo_Bolt_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_Bolt;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Ammo_9mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_9mm;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Ammo_300Magnum_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_300Magnum;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Rifle_M416_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* ST_WEP_M416_Lod;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* SM_M416;//[Offset: 0x628, Size: 4]

--------------------------------
Class: BP_Rifle_Mk47_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* ADS;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* Mag;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* SM_M762;//[Offset: 0x628, Size: 4]

--------------------------------
Class: BP_Ammo_762mm_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_762mm;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Ammo_12Guage_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_12Guage;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_Win94_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Scope;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Sniper_QBU_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_QBU;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_MachineGun_TommyGun_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Grip;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* SM_TommyGun;//[Offset: 0x628, Size: 4]

--------------------------------
Class: BP_Other_DP28_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DP28;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_SLR_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_SLR;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Rifle_M762_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_M762;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_WEP_Sickle_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WEP_Pan_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WEP_Machete_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WEP_Cowbar_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_M4A1;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ShotGun_S12K_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_S12K;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_VSS_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* StaticMesh;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_VSS;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Sniper_SKS_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_SKS;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WEP_Mk14_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Mk14;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_Mini14_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Mini14;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_Kar98k_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_AWM_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_AWM;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ShotGun_S686_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_S686;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ShotGun_S1897_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_S1897;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Other_M249_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Stock;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* Mag;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* SM_M249;//[Offset: 0x628, Size: 4]

--------------------------------
Class: BP_WB_Vertical_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_WB_Vertical;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WB_Angled_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WB_ThumbGrip_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WB_Lasersight_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_WB_Vertical;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ZDD_Crossbow_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_ZDD_Crossbow_Q;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ZDD_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_ZDD_Sniper;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Rifle_QBZ_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_QBZ;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_QK_DuckBill_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Duckbill;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MachineGun_Uzi_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Uzi;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MachineGun_UMP9_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_UMP9;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Other_CrossBow_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_CrossBow;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MachineGun_Vector_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* StaticMesh;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_Vector;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Pistol_P18C_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_P18C;//[Offset: 0x620, Size: 4]

--------------------------------
Class: Drink_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Pistol_R1895_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_R1895;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Pistol_P92_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_P92;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ShotGun_SawedOff_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_SawedOff;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Pistol_R45_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_P1911;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Rifle_AUG_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* ST_WEP_M416_Lod;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_M416;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Rifle_AKM_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_AKM;//[Offset: 0x624, Size: 4]

--------------------------------
Class: BP_Grenade_Apple_Weapon_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* M18;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Rifle_Groza_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Groza;//[Offset: 0x620, Size: 4]

--------------------------------
Class: Injection_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: Pills_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Mid_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Mid_FlashHider;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Large_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Large_Suppressor;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_M24_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_M24;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Sniper_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Sniper_FlashHider;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Sniper_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Sniper_Suppressor;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Sniper_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Sniper_Compensator;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WB_HalfGrip_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Mid_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Mid_Compensator;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Large_Compensator_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Large_Compensator;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Large_FlashHider_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Large_FlashHider;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QT_Sniper_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QT_A;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Choke_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Choke;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QT_A_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QT_A;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QT_UZI_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QT_UZI;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_WB_LightGrip_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_WB_Angled;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv3_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Rifle_SCAR_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Mag;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* SM_SCAR-L;//[Offset: 0x624, Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv3_B_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Ammo_45ACP_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Ammo_45ACP;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Large_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Helmet_Lv3_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Sniper_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Sniper_EQ;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Mid_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Mid_Q;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Sniper_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Sniper_Q;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Sniper_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Large_E;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Mid_E_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Mid_E;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Mid_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Mid_EQ;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Large_EQ_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Large_EQ;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_DJ_Large_Q_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_DJ_Large_Q;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv1_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Armor_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_ShotGun_M1014_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_SPAS-12;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_Mosin_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_Kar98K;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_Sniper_MK12_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Muzzle;//[Offset: 0x620, Size: 4]
	StaticMeshComponent* Scope;//[Offset: 0x624, Size: 4]
	StaticMeshComponent* Mag;//[Offset: 0x628, Size: 4]
	StaticMeshComponent* SM_QBU;//[Offset: 0x62c, Size: 4]

--------------------------------
Class: BP_Rifle_FAMAS_Wrapper_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* WEP_Famas_Lod;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_SideRMR_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_HD;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_3X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_3X;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_6X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_6X;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_4X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_4X;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_HD_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_HD;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_8X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_8X;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_2X_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_2X;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_MZJ_QX_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_MZJ_QX;//[Offset: 0x620, Size: 4]

--------------------------------
Class: PickUp_BP_Bag_Lv2_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* Bag_03_icon;//[Offset: 0x620, Size: 4]

--------------------------------
Class: BP_QK_Mid_Suppressor_Pickup_C.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* SM_QK_Mid_Suppressor;//[Offset: 0x620, Size: 4]

--------------------------------
Class: AquaRail_1_C.BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passengers;//[Offset: 0xec4, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0xec8, Size: 4]

--------------------------------
Class: BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xeb0, Size: 4]
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x29fa2f4
	void UpdateEffects(float CallFunc_GetForwardSpeed_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x29fa2f4
	void OnUpdateEffects();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_1_DriverChangeDelegate__DelegateSignature(STExtraPlayerCharacter* OldChara, STExtraPlayerCharacter* NewChara);// 0x29fa2f4
	void OnRep_CandidateAvatar();// 0x29fa2f4
	void ExecuteUbergraph_BP_StextraBoatBase(int EntryPoint, BP_StextraBoatBase_C* ___object_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_OldChara, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_NewChara, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, BP_StextraBoatBase_C* ___object_Variable2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, TemBPDataAddr[] K2Node_MakeArray_Array, TemBPDataAddr[] K2Node_MakeArray_Array2);// 0x29fa2f4
	BoatAvatarComponent_BP_C* BoatAvatarComponent_BP;//[Offset: 0xeb4, Size: 4]
	CameraComponent* Camera;//[Offset: 0xeb8, Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0xebc, Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]

--------------------------------
Class: BoatAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 4]
	FString GetItemAvatarHandlePath(int ItemID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x29fa2f4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemID, UAELoadedClassManager* CallFunc_Get_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, class Object CallFunc_GetClass_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess);// 0x29fa2f4
	void OnLoaded_5D98FAF940B1D039C5FC33AEF60CE902(Object* Loaded);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void BoatAvatarEquiped();// 0x29fa2f4
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x29fa2f4
	void BoatFPPMeshLoaded();// 0x29fa2f4
	void LoadedBrokenMat();// 0x29fa2f4
	void ExecuteUbergraph_BoatAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, float K2Node_Event_DeltaSeconds, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess2, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x29fa2f4
	ParticleSystem* CurLightEffect;//[Offset: 0x410, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x438, Size: 4]

--------------------------------
Class: VH_Motorcycle_1_C.VH_Motorcycle_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object

--------------------------------
Class: VH_Motorcycle_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10e0, Size: 4]
	void OnAddExhaustEffect(bool bLobbyShow, bool ___bool_Variable, MotorcycleAvatarExhaustStruct[] ___struct_Variable, MotorcycleAvatarExhaustStruct[] ___struct_Variable2, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, VehicleAvatarHandle_BP_VH_Motorcycle_C* K2Node_DynamicCast_AsVehicle_Avatar_Handle_BP_VH_Motorcycle, bool K2Node_DynamicCast_bSuccess, class VehicleAvatarHandle_BP_VH_Motorcycle_C CallFunc_GetObjectClass_ReturnValue, MotorcycleAvatarExhaustStruct[] K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3, bool CallFunc_IsValidSoftObjectReference_ReturnValue2, bool CallFunc_IsValidSoftObjectReference_ReturnValue3);// 0x29fa2f4
	void OnDestroyExhaustEffect(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x29fa2f4
	void TickUpdateAvatarExhaust(bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetForwardSpeed_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void OnLoaded_137D0BCB4CD69E5EDCDF0F8D76242729(Object* Loaded);// 0x29fa2f4
	void OnLoaded_471C3E774367461D12A732AB89B9E676(Object* Loaded);// 0x29fa2f4
	void OnLoaded_150A821A4E34995C45C96B98B9184D62(Object* Loaded);// 0x29fa2f4
	void OnAddExhaustEffectEvent2(FString SocketName, Transform Transform, ParticleSystem* ParticleSystem);// 0x29fa2f4
	void OnEngineStop();// 0x29fa2f4
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleAvatarEquiped__DelegateSignatu();// 0x29fa2f4
	void OnAddExhaustEffectEvent1(FString SocketName, Transform Transform, ParticleSystem* ParticleSystem);// 0x29fa2f4
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void OnAddExhaustEffectEvent3(FString SocketName, Transform Transform, ParticleSystem* ParticleSystem);// 0x29fa2f4
	void OnClientVehicleHealthStateChangedToDestory();// 0x29fa2f4
	void ExecuteUbergraph_VH_Motorcycle(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Object* K2Node_CustomEvent_Loaded3, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, Object* K2Node_CustomEvent_Loaded2, Object* ___object_Variable2, ParticleSystem* K2Node_DynamicCast_AsParticle_System2, bool K2Node_DynamicCast_bSuccess2, Object* K2Node_CustomEvent_Loaded, Object* ___object_Variable3, ParticleSystem* K2Node_DynamicCast_AsParticle_System3, bool K2Node_DynamicCast_bSuccess3, FString K2Node_CustomEvent_SocketName3, Transform K2Node_CustomEvent_Transform3, ParticleSystem* K2Node_CustomEvent_ParticleSystem3, delegate K2Node_CreateDelegate_OutputDelegate3, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FName CallFunc_Conv_StringToName_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FString K2Node_CustomEvent_SocketName2, Transform K2Node_CustomEvent_Transform2, ParticleSystem* K2Node_CustomEvent_ParticleSystem2, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, FName CallFunc_Conv_StringToName_ReturnValue2, float K2Node_Event_DeltaSeconds, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue2, FString K2Node_CustomEvent_SocketName, Transform K2Node_CustomEvent_Transform, ParticleSystem* K2Node_CustomEvent_ParticleSystem, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, FName CallFunc_Conv_StringToName_ReturnValue3, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue3, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue);// 0x29fa2f4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x10e4, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passenger;//[Offset: 0x10e8, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x10ec, Size: 4]
	VehicleMotorbikeComponent* VehicleMotorbike;//[Offset: 0x10f0, Size: 4]
	bool bHadAddPSCExhaust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f4, Size: 1]
	<FString,ParticleSystemComponent*> PSCExhaustEffect;//[Offset: 0x10f8, Size: 60]

--------------------------------
Class: MotorcycleAvatarExhaustStruct
	FString AttachSocketName_5_7915502941B3002B794291BEDECE88A5;//[Offset: 0x0, Size: 12]
	Transform Transform_7_BA6507A54AA956EF72856FA2A67BB4F4;//[Offset: 0x10, Size: 48]
	ParticleSystem* ParticleSystem_12_B2652F65427A48A50AE001B766CF08A6;//[Offset: 0x40, Size: 40]

--------------------------------
Class: VehicleAvatarHandle_BP_VH_Motorcycle_C.VehicleAvatarHandleBase_BP_C.BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	MotorcycleAvatarExhaustStruct[] ExhaustFx;//[Offset: 0x2d8, Size: 12]
	MotorcycleAvatarExhaustStruct[] LobbyExhaustFx;//[Offset: 0x2e4, Size: 12]

--------------------------------
Class: VehicleAvatarHandleBase_BP_C.BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: VehicleAdvanceAvatarComp_BP_C.VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x708, Size: 4]
	FName GetReflectionCubeName_Lobby();// 0x29fa2f4
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x29fa2f4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_Old_ReturnValue, bool CallFunc_GenerateDefaultAvatarConfig_ReturnValue, VehicleAvatarData K2Node_MakeStruct_VehicleAvatarData, bool CallFunc_InitVehicleAvatar_ReturnValue);// 0x29fa2f4
	void PutOffItemIDInLobby(int InItemID, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x29fa2f4
	void PutOnItemIDInLobby(int InItemID, int ColorID, int PatternID, int Particle ID, out bool Result, FString CallFunc_Conv_IntToString_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x29fa2f4
	void PutOffSlotInLobby(byte InSlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x29fa2f4
	void BP_ProcessStyleUnequipped(int OldStyleID, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int CallFunc_IsStyleHasModelConfig_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipStyle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue2, int CallFunc_IsStyleHasModelConfig_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);// 0x29fa2f4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x29fa2f4
	void BP_ProcessStyleEquipped(int NewStyleID, int OldStyleID);// 0x29fa2f4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x29fa2f4
	void BPCreateAvatarCustomHandle(int SlotID, int ItemID, out AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle, class VAH_Pattern_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Pattern_BP_Base, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, VAH_Pattern_BP_Base_C* CallFunc_SpawnObject_ReturnValue, BP_STRUCT_VehicleRefitPatternTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitColorTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, class Object CallFunc_GetClass_ReturnValue, class VAH_Particle_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Particle_BP_Base, bool K2Node_ClassDynamicCast_bSuccess2, VAH_Particle_BP_Base_C* CallFunc_SpawnObject_ReturnValue2, class VAH_Color_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Color_BP_Base, bool K2Node_ClassDynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue2, VAH_Color_BP_Base_C* CallFunc_SpawnObject_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, AvatarCustomBase*[] K2Node_MakeArray_Array);// 0x29fa2f4
	VehicleStyleData MakeVehicleStyleData(int InStyleID, VehicleStyle[] Temp, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitStyle_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, VehicleStyle K2Node_MakeStruct_VehicleStyle, int CallFunc_Array_Add_ReturnValue, VehicleStyle K2Node_MakeStruct_VehicleStyle2, byte CallFunc_Conv_IntToByte_ReturnValue3, int CallFunc_Array_Add_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue3, VehicleStyleData K2Node_MakeStruct_VehicleStyleData);// 0x29fa2f4
	bool GenerateDefaultAvatarConfig(int InBaseSkinID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AvatarBPUtils* CallFunc_GetBPUtils_ReturnValue, int[] CallFunc_GetVehicleDefaultStyleID_OutStyleIDList, bool CallFunc_GetVehicleDefaultStyleID_ReturnValue, int CallFunc_Array_Get_Item, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, int CallFunc_IsStyleHasModelConfig_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID);// 0x29fa2f4
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_ReturnValue);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x29fa2f4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x29fa2f4
	void BP_EventStyleEquipped(int NewStyleID, int OldStyleID);// 0x29fa2f4
	void BP_EventStyleUnequipped(int OldStyleID);// 0x29fa2f4
	void ExecuteUbergraph_VehicleAdvanceAvatarComp_BP(int EntryPoint, int K2Node_CustomEvent_OldStyleID, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, int K2Node_CustomEvent_NewStyleID, int K2Node_CustomEvent_OldStyleID2);// 0x29fa2f4
	int[] DefaultStyleIDList;//[Offset: 0x70c, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitBPTable_type
	FString Path_0_367735C04445450711936E2507D65338;//[Offset: 0x0, Size: 12]
	int SkinID_1_178D3B00586DF4A03398AF2E06BA7504;//[Offset: 0xc, Size: 4]
	int TemplateID_2_188844C035CA84B912116AE102FE3804;//[Offset: 0x10, Size: 4]
	int ID_3_7E5115C05AFA7931402A62180B97D7E4;//[Offset: 0x14, Size: 4]
	FString LobbyPath_6_1DD513C07D99921F4DE3874A01E3EA48;//[Offset: 0x18, Size: 12]

--------------------------------
Class: VAH_Pattern_BP_Base_C.AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	void InitPatternInfo(float Scale1, float Scale2, FString Path1, FString Path2, FString Offset);// 0x1e65fe8

--------------------------------
Class: BP_STRUCT_VehicleRefitPatternTable_type
	int IconScale2_0_46572E4071F9B3293BE305FF087656B2;//[Offset: 0x0, Size: 4]
	FString IconPath2_1_024EF7804CE8216627C3CAFF038879F2;//[Offset: 0x4, Size: 12]
	int IconScale1_2_46562E0071F9B3283BE305F8087656B1;//[Offset: 0x10, Size: 4]
	FString IconPath1_3_024DF7404CE8216527C3CAFC038879F1;//[Offset: 0x14, Size: 12]
	int ID_4_3B4768C07AEB475737EB9B560A7BEF14;//[Offset: 0x20, Size: 4]
	FString IconOffset_5_59F5A18037D665B02424026A0AB3EDF4;//[Offset: 0x24, Size: 12]
	FString PatternBPPath_6_4B5944C06FBA413D7EB727A808597AD8;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BP_STRUCT_VehicleRefitColorTable_type
	int ID_0_7607F1003C307130785E051708091744;//[Offset: 0x0, Size: 4]
	int Gray_1_23C2528073E753A86CAE45C709177089;//[Offset: 0x4, Size: 4]
	FString Color3_2_133F1A40217781872E65F412071E3F43;//[Offset: 0x8, Size: 12]
	FString Color2_3_133E1A00217781862E65F413071E3F42;//[Offset: 0x14, Size: 12]
	FString Color1_4_133D19C0217781852E65F410071E3F41;//[Offset: 0x20, Size: 12]
	FString ColorBPPath_5_507BD54027F0DEF913818BAA07048B58;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: VAH_Particle_BP_Base_C.AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleAsset[] ParticleDataList;//[Offset: 0x3c, Size: 12]
	ParticleGroup ParticleGroup;//[Offset: 0x48, Size: 36]
	bool ClearCustomInfo();// 0x1e65c18
	void AsyncLoadCustomParticleDone();// 0x1e65c04
	bool ApplyCustomInfo();// 0x1e65bd4

--------------------------------
Class: VAH_Color_BP_Base_C.AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object

--------------------------------
Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	void InitColorInfo(float Gray, FString Color1, FString Color2, FString Color3);// 0x1e653d0

--------------------------------
Class: BP_STRUCT_VehicleRefitStyle_type
	int cost_id1_21_40D3BDC00FA1EC252A325218091B0AE1;//[Offset: 0x0, Size: 4]
	int cost_id2_2_40D4BE000FA1EC262A325219091B0AE2;//[Offset: 0x4, Size: 4]
	int auto_unlock_3_70A1E14054C1515F34AD00AA03FE271B;//[Offset: 0x8, Size: 4]
	int part_id_19_2960F1004F796BBC287325E80772B0B4;//[Offset: 0xc, Size: 4]
	int part_group_id_20_580314001313FC7E5037A1C0001EF544;//[Offset: 0x10, Size: 4]
	int style_id_6_3334EF8009D542BA023C1EFF04520144;//[Offset: 0x14, Size: 4]
	int vehicle_group_id_7_2FA91E401396E1572443357005BAE444;//[Offset: 0x18, Size: 4]
	int cost_num2_8_567B5EC042ECFAD5581D19B001B10392;//[Offset: 0x1c, Size: 4]
	int cost_num1_9_567A5E8042ECFAD4581D19B101B10391;//[Offset: 0x20, Size: 4]
	FString style_icon_10_2B88068062961F24124419A202014E0E;//[Offset: 0x24, Size: 12]
	FString part_name_11_242D66002BB47CD41AA53D3702B10145;//[Offset: 0x30, Size: 12]
	FString part_group_icon_12_75E1AB0010031F6A4A4800D10EF54A4E;//[Offset: 0x3c, Size: 12]
	FString style_name_13_7772E4800830FFC6124AFDB20202F465;//[Offset: 0x48, Size: 12]
	int value1_14_12B54BC05132BBB9260C3FBC04D988D1;//[Offset: 0x54, Size: 4]
	int value2_15_12B64C005132BBBA260C3FBF04D988D2;//[Offset: 0x58, Size: 4]
	int real_part_16_420F46C07AAD2FE77C0DB8570D3321D4;//[Offset: 0x5c, Size: 4]
	int type2_17_243BF54066D327F75079C483054BFDB2;//[Offset: 0x60, Size: 4]
	int type1_18_243AF50066D327F65079C482054BFDB1;//[Offset: 0x64, Size: 4]
	int can_fit_22_68F7CD4000E30BD17923736E08996A54;//[Offset: 0x68, Size: 4]
	FString part_group_tab_icon_23_089B9080591DEC3273FD6659077B104E;//[Offset: 0x6c, Size: 12]
	int real_part2_24_0189F34001B6E9815CB7C17003321DA2;//[Offset: 0x78, Size: 4]
	int type21_25_7B46618009DF2DB0732EC53204BFDB01;//[Offset: 0x7c, Size: 4]
	int value21_26_048158402E894EF74D0737BF0D988D11;//[Offset: 0x80, Size: 4]

--------------------------------
Class: AvatarBPUtils.Object
	CreateAvatarHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0xf0, Size: 12]
	<int,CreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0xfc, Size: 60]
	<int,WeaponAttachmentsDataRow> WeaponAttachmentsTableRowMap;//[Offset: 0x174, Size: 60]
	FString InitedUpWeaponTableName;//[Offset: 0x1b0, Size: 12]
	<int,UpWeaponDataRow> UpWeaponTableRowMap;//[Offset: 0x1bc, Size: 60]
	<int,int> UpWeaponBPIDMap;//[Offset: 0x1f8, Size: 60]
	FString InitedUpWeaponAttachmentTableName;//[Offset: 0x234, Size: 12]
	<int,UpWeaponAttachmentDataRow> UpWeaponAttachmentTableRowMap;//[Offset: 0x240, Size: 60]
	FString InitedUpBulletTableName;//[Offset: 0x27c, Size: 12]
	<int,UpBulletTableDataRow> UpBulletTableRowMap;//[Offset: 0x288, Size: 60]
	<int,SupportUpBullets> AvailableBulletsMap;//[Offset: 0x2c4, Size: 60]
	FString InitedChipSupportTableName;//[Offset: 0x300, Size: 12]
	<int,ChipSupportDataRow> ChipSupportDataRowMap;//[Offset: 0x30c, Size: 60]
	<int,ChipSupportItem> ChipSupportItemMap;//[Offset: 0x348, Size: 60]
	FString InitedChipTableName;//[Offset: 0x384, Size: 12]
	<int,ChipDataRow> ChipDataRowMap;//[Offset: 0x390, Size: 60]
	void StringToArrayString(FString str, out FString[] OutArray, FString Sign);// 0x1df6fc4
	void StringToArrayName(FString str, out FName[] OutArray, FString Sign);// 0x1df6d50
	void StringToArray(FString str, out int[] OutArray, FString Sign);// 0x1df6adc
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x1df6a20
	void InitWeaponAttrBPTable();// 0x1df6a0c
	void InitWeaponAttachmentsTable();// 0x1df69f8
	void InitUpWeaponTable(FString tableName);// 0x1df693c
	void InitUpWeaponAttachmentsTable(FString tableName);// 0x1df6880
	void InitUpBulletTable(FString tableName);// 0x1df67c4
	void Initialize();// 0x1df67b0
	void InitChipTable(FString tableName);// 0x1df66f4
	void InitChipSupportTable(FString tableName);// 0x1df6638
	int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x1df65b0
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x1df6490
	FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x1df6380
	int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1df62e0
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x1df61c8
	int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x1df6128
	void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x1df5fb4
	int GetBPIDByResID(int resID);// 0x1df5f2c
	FString GetAvatarHandlePath(ItemDefineID DefineID, bool bLobby);// 0x1df5dbc
	void GetAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1df5c50
	int GetAdjustWeaponBPID_Lobby(int WeaponId);// 0x1df5bc8
	ItemHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x1df5a9c
	void ConstructAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x1df5928

--------------------------------
Class: CreateAvatarHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CreateAvatarHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	delegate Callback;//[Offset: 0x20, Size: 16]

--------------------------------
Class: WeaponAttachmentsDataRow
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletID;//[Offset: 0x4, Size: 4]
	int ProposeBulletNum;//[Offset: 0x8, Size: 4]
	int AIMinAttackDist;//[Offset: 0xc, Size: 4]
	int AIMaxAttackDist;//[Offset: 0x10, Size: 4]
	int[] MuzzleIDList;//[Offset: 0x14, Size: 12]
	int[] UpperIDList;//[Offset: 0x20, Size: 12]
	int[] StockIDList;//[Offset: 0x2c, Size: 12]
	int[] MagazineIDList;//[Offset: 0x38, Size: 12]
	int[] LowerIDList;//[Offset: 0x44, Size: 12]
	int[] UpperSideIDList;//[Offset: 0x50, Size: 12]

--------------------------------
Class: UpWeaponDataRow

--------------------------------
Class: UpWeaponAttachmentDataRow

--------------------------------
Class: UpBulletTableDataRow
	int MiltiBulletID;//[Offset: 0x0, Size: 4]
	int ParentBulletID;//[Offset: 0x4, Size: 4]
	float BulletImpactDamagePerc;//[Offset: 0x8, Size: 4]
	int BulletImpactDamageAddVal;//[Offset: 0xc, Size: 4]
	float BulletMomentumPerc;//[Offset: 0x10, Size: 4]
	int BulletMomentumAddVal;//[Offset: 0x14, Size: 4]
	int DefaultPriority;//[Offset: 0x18, Size: 4]
	int[] BulletHitBuffIdList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SupportUpBullets
	SupportUpBullet[] SupportUpBulletList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ChipSupportDataRow
	int ItemID;//[Offset: 0x0, Size: 4]
	int[] SupportChipSupTypeList;//[Offset: 0x4, Size: 12]
	int SupportChipNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ChipSupportItem
	int ChipSubType;//[Offset: 0x0, Size: 4]
	<int,bool> SupportItemDic;//[Offset: 0x4, Size: 60]

--------------------------------
Class: ChipDataRow
	int ItemID;//[Offset: 0x0, Size: 4]
	AttrModifyData[] AttrModifyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AttrModifyData

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0xbc, Size: 12]
	CurveFloat* Curve_Roll;//[Offset: 0xc8, Size: 4]
	CurveFloat* Curve_ReturnClamp;//[Offset: 0xcc, Size: 4]
	CurveFloat* Curve_Steer;//[Offset: 0xd0, Size: 4]
	CurveFloat* Curve_Yaw;//[Offset: 0xd4, Size: 4]
	CurveFloat* Curve_TorqueStab;//[Offset: 0xd8, Size: 4]
	CurveFloat* Curve_Roll_Cart;//[Offset: 0xdc, Size: 4]
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0xe0, Size: 4]
	CurveFloat* Curve_Steer_Cart;//[Offset: 0xe4, Size: 4]
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0xe8, Size: 4]
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0xec, Size: 4]
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	FName LowStabBoneName;//[Offset: 0xf8, Size: 8]
	FName HighStabBoneName;//[Offset: 0x100, Size: 8]
	Vector SideCartHighStabCOM;//[Offset: 0x108, Size: 12]
	float MinSuspensionOffsetForContact;//[Offset: 0x114, Size: 4]
	Vector StabStaticVector;//[Offset: 0x118, Size: 12]
	Vector2D StabXVelocityIn;//[Offset: 0x124, Size: 8]
	Vector2D StabXVelocityOut;//[Offset: 0x12c, Size: 8]
	Vector2D StabXPitchIn;//[Offset: 0x134, Size: 8]
	Vector2D StabXPitchOut;//[Offset: 0x13c, Size: 8]
	Vector2D StabZVelocityIn;//[Offset: 0x144, Size: 8]
	Vector2D StabZVelocityOut;//[Offset: 0x14c, Size: 8]
	Vector2D StabZRollIn;//[Offset: 0x154, Size: 8]
	Vector2D StabZRollOut;//[Offset: 0x15c, Size: 8]
	Vector2D StabZPitchIn;//[Offset: 0x164, Size: 8]
	Vector2D StabZPitchOut;//[Offset: 0x16c, Size: 8]
	Vector2D StabTorqueIn;//[Offset: 0x174, Size: 8]
	Vector2D StabTorqueOut;//[Offset: 0x17c, Size: 8]
	float StabTorqueForceScalar;//[Offset: 0x184, Size: 4]
	Vector2D StabTorquePitchIn;//[Offset: 0x188, Size: 8]
	Vector2D StabTorquePitchOut;//[Offset: 0x190, Size: 8]
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	float ScaleTorque;//[Offset: 0x19c, Size: 4]
	float ScaleCenterOfMass;//[Offset: 0x1a0, Size: 4]
	Vector CurrentTorque;//[Offset: 0x1a4, Size: 12]
	Vector CurrentCenterOfMass;//[Offset: 0x1b0, Size: 12]
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	float KickstandAngularDamping;//[Offset: 0x1c0, Size: 4]
	float KickstandMaxAngVelocity;//[Offset: 0x1c4, Size: 4]
	float KickstandEnableMaxSpeed;//[Offset: 0x1c8, Size: 4]
	Vector2D AirControlFVelMap;//[Offset: 0x1cc, Size: 8]
	Vector2D AirControlBVelMap;//[Offset: 0x1d4, Size: 8]
	float AirControlFBTorque;//[Offset: 0x1dc, Size: 4]
	bool bResetRotationSafeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bShouldResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 1]
	float COMOffsetSteer;//[Offset: 0x1f0, Size: 4]
	float RotSteeringFinal;//[Offset: 0x1f4, Size: 4]
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x214ac7c
	void ForceSyncVelocity(Vector ServerLinearVelocity, Vector ServerAngularVelocity);// 0x214abb4

--------------------------------
Class: VH_Dacia_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10e0, Size: 4]
	OwnershipComponent* GetOwnershipComponent();// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void OnBoostingChanged();// 0x29fa2f4
	void ExecuteUbergraph_VH_Dacia(int EntryPoint);// 0x29fa2f4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x10e4, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersL;//[Offset: 0x10e8, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersR;//[Offset: 0x10ec, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x10f0, Size: 4]

--------------------------------
Class: OwnershipComponent.ActorComponent.Object
	delegate OnOwnershipChanged;//[Offset: 0xbc, Size: 12]
	uint32 BelongToPlayerKey;//[Offset: 0xc8, Size: 4]
	uint32[] Borrowers;//[Offset: 0xd0, Size: 12]
	bool bCanBorrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	void SetOwnershipBP(FString InPlayerKey);// 0x1f4ac50
	void SetOwnership(uint32 InPlayerKey);// 0x1f4abd8
	void ReturnBP(FString InBorrowerKey);// 0x1f4aa48
	void Return(uint32 InBorrowerKey);// 0x1f4a9d0
	void RequireReturn(uint32 InBorrowerKey);// 0x1f4a91c
	void RequireBorrow(uint32 InBorrowerKey);// 0x1f4a868
	void ReleaseOwnership();// 0x1f4a854
	void OnRep_Borrowers();// 0x1f4a840
	void OnRep_BelongToActorChanged();// 0x1f4a82c
	FString GetOwnershipBP();// 0x1f4a764
	uint32 GetOwnership();// 0x1f4a748
	void EnableBorrow(bool InEnable);// 0x1f4a6c0
	bool CanBorrow();// 0x1f4a6a0
	bool BorrowedByBP(FString InBorrowerKey);// 0x1f4a4dc
	bool BorrowedBy(uint32 InBorrowerKey);// 0x1f4a42c
	void BorrowBP(FString InBorrowerKey);// 0x1f4a29c
	void Borrow(uint32 InBorrowerKey);// 0x1f4a224
	bool BelongToBP(FString InPlayerKey);// 0x1f4a084
	bool BelongTo(uint32 InPlayerKey);// 0x1f49ffc

--------------------------------
Class: Mirado_open_4_C.Mirado_open_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBR;//[Offset: 0x10f4, Size: 4]
	ParticleSystemComponent* PSCExhaust1;//[Offset: 0x10f8, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBL;//[Offset: 0x10fc, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0x1100, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1104, Size: 4]

--------------------------------
Class: Mirado_open_1_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10e0, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void OnBoostingChanged();// 0x29fa2f4
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_0_VehicleAvatarEquiped__DelegateSignatu();// 0x29fa2f4
	void BndEvt__VehicleAvatarComponent_BP_K2Node_ComponentBoundEvent_1_VehicleLoadedBrokenMat__DelegateSigna();// 0x29fa2f4
	void ExecuteUbergraph_Mirado_open(int EntryPoint, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue);// 0x29fa2f4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBR;//[Offset: 0x10e4, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersBL;//[Offset: 0x10e8, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersFR;//[Offset: 0x10ec, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x10f0, Size: 4]

--------------------------------
Class: BP_VH_Buggy_3_C.BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object

--------------------------------
Class: VH_PG117_C.BP_StextraBoatBase_C.STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Passengers;//[Offset: 0xec4, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0xec8, Size: 4]

--------------------------------
Class: VH_UAZ01_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10e0, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void OnBoostingChanged();// 0x29fa2f4
	void ExecuteUbergraph_VH_UAZ01(int EntryPoint);// 0x29fa2f4
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x10e4, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersR;//[Offset: 0x10e8, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersL;//[Offset: 0x10ec, Size: 4]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x10f0, Size: 4]

--------------------------------
Class: SmartBearerManager.Actor.Object
	BaseBearerUnit*[] AllBearerUnit;//[Offset: 0x2cc, Size: 12]
	BaseBearerUnit*[] WaitForInitUnit;//[Offset: 0x2d8, Size: 12]
	STExtraPetCharacter*[] WaitForAddPet;//[Offset: 0x35c, Size: 12]
	STExtraWeapon*[] WaitForAddWeapon;//[Offset: 0x3a4, Size: 12]
	void SetEnabled(bool Enable);// 0x1fb8c28
	void SetBandWeaponDIYUnit(bool Enable);// 0x1fb8ba8
	void SetBandPetUnit(bool Enable);// 0x1fb8b28
	void SetBandOtherCharacterUnit(bool Enable);// 0x1fb8aa8
	void SetBandAdvanceVehicleUnit(bool Enable);// 0x1fb8a28
	void OnSwitchGameStatusEvent(FString Status);// 0x1fb896c
	void OnPreMatchSuccess(int submode_id);// 0x1fb88f4
	bool IsEnabled();// 0x1f55128

--------------------------------
Class: BaseBearerUnit.Object

--------------------------------
Class: BP_DecalBakingActor_C.DecalBakingActorMgr.DecalBakingActor.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x338, Size: 4]

--------------------------------
Class: VehicleDataMgr.Actor.Object
	STExtraVehicleBase*[] VehiclesDataMap;//[Offset: 0x2cc, Size: 12]
	STExtraVehicleBase*[] uavDataMap;//[Offset: 0x2d8, Size: 12]
	UAEDataTable* VehicleSpawnTable;//[Offset: 0x320, Size: 4]
	UAEDataTable* VehicleMaxHPTable;//[Offset: 0x324, Size: 4]
	UAEDataTable* CarMusicTable;//[Offset: 0x364, Size: 4]
	void UnRegisterVehicle(STExtraVehicleBase* Vehicle);// 0x2149900
	void UnRegisterUAV(STExtraVehicleBase* uav);// 0x2149888
	void RemoveNoFreezeOn(SceneComponent* Actor);// 0x2149810
	void RegisterVehicle(STExtraVehicleBase* Vehicle);// 0x2149798
	void RegisterUAV(STExtraVehicleBase* uav);// 0x2149720
	static VehicleDataMgr* GetInstance(World* World);// 0x21496a8
	void AddNoFreezeOn(SceneComponent* Actor);// 0x2149630

--------------------------------
Class: BP_ObjectPoolManager_AllMode_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b0, Size: 4]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	enum PawnState;//[Offset: 0x54d, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 1]
	int CastFailTipsID;//[Offset: 0x550, Size: 4]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 1]
	UTSkillBaseWidget* GetSkillEffect(FString PhaseName, FString EffectName);// 0x2109fac
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x2109f34

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x540, Size: 12]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x2105304

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_GasCan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_RapidAidbox_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_Frag_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_Molotov_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_PoisonApple_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_Smoke_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_Stun_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_Smoke_BP_2_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_ProjSpikeTrap_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor5;//[Offset: 0x5b0, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor4;//[Offset: 0x5b4, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor3;//[Offset: 0x5b8, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor2;//[Offset: 0x5bc, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor1;//[Offset: 0x5c0, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor;//[Offset: 0x5c4, Size: 4]
	UAESkillAction_SetPlayerState* UAESkillAction_SetPlayerState1;//[Offset: 0x5c8, Size: 4]
	UAESkillAction_SetPlayerState* UAESkillAction_SetPlayerState;//[Offset: 0x5cc, Size: 4]
	UAESkillPhase* UAESkillPhase9;//[Offset: 0x5d0, Size: 4]
	UAESkillPhase* UAESkillPhase7;//[Offset: 0x5d4, Size: 4]
	UAESkillPhase* UAESkillPhase6;//[Offset: 0x5d8, Size: 4]
	UAESkillPhase* UAESkillPhase5;//[Offset: 0x5dc, Size: 4]
	UAESkillPhase* UAESkillPhase4;//[Offset: 0x5e0, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x5e4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5e8, Size: 4]

--------------------------------
Class: UAESkillAction_SetPlayerState.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	enum PawnState;//[Offset: 0x108, Size: 1]
	bool SetEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]

--------------------------------
Class: UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillPhase.UTSkillPhase.ActorComponent.Object
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x1dbb2dc

--------------------------------
Class: Skill_Boss_StartFall_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	float MaxCastDistance;//[Offset: 0x54c, Size: 4]
	float MinCastDistance;//[Offset: 0x550, Size: 4]

--------------------------------
Class: Skill_Boss_StartFall_Delay_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_IceDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Zombie10_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie10_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie10_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie10_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie11_CeilingLand_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie11_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie11_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie11_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie11_Skill3_frozen_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie1_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie1_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie1_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie1_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie1_Skill4_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie2_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie3_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie4_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie4_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie4_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie4_Skill5_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie4_Skill6_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie5_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie6_GoToEarth_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie6_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie6_Skill1_killself_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie6_Skill1_L_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie7_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie7_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie8_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie8_Skill2_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Zombie8_Skill3_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_HitGround_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_JumpAndAttack_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_MegaThunder_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_RunAndAttack_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ShieldHit_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ShieldHit_L_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ShieldHitGround_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ShieldHitGround_L_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_SummonMonster_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowLandmine_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowPoisonBall_BP_1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowPoisonBall_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowPoisonBall_HighArc_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowPoisonBall_Ray_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowPoisonBall_RaySlow_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_VomitToixContinued_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_Zombie_Explosion_1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_Zombie_Explosion_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_Zombie_Explosion_L_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill1_Tyrant_Hit_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_Boss_Landed_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_JumpMechanism_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_JumpMechanismByAssignPos_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_StickHitGround_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ThrowOilTank_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_TyranSummonMonster_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_Tyrant_HitAndMove_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_Tyrant_ThrowRock_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: ZombieDrG_JumpAndAttack_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: ZombieDrG_Skill1_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x560, Size: 4]

--------------------------------
Class: Skill_ClientShowUI_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_TrainCoin_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_RoastChicken_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_DuckHunt_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_ParachuteLand_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_DuelFail_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_PickupIce_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_WingUp_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_GiveBackpackItem_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Swing_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_GiveHeart_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Make_Wish_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_GoldCrowInteraction_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_Grenade_Sticky_Bomb_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: SliceMusicalNote_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: StartMusicGame_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: Skill_FinishInteractAtOnce_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5b0, Size: 4]

--------------------------------
Class: BP_FerrisWheelCar_C.FerrisWheelCar.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 4]
	void RevertCamearaOffset(const TemBPDataAddr[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x29fa2f4
	void SetCameraOffset(float Alpha, float tmp, CustomSpringArmComponent* SpringArm, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x29fa2f4
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveTick(float DeltaSeconds);// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void StoreCamearaOffset();// 0x29fa2f4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x29fa2f4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x29fa2f4
	void ExecuteUbergraph_BP_FerrisWheelCar(int EntryPoint, const TemBPDataAddr[] K2Node_MakeArray_Array, float K2Node_Event_DeltaSeconds, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character2, bool K2Node_DynamicCast_bSuccess2, PlayerController* CallFunc_GetPlayerController_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue3, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess5, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue3, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x29fa2f4
	BoxComponent* Box;//[Offset: 0x2e4, Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2e8, Size: 4]
	bool HasPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float StoreLength;//[Offset: 0x2f0, Size: 4]

--------------------------------
Class: FerrisWheelCar.Actor.Object
	SceneComponent* FollowSceneComp;//[Offset: 0x2cc, Size: 4]
	float TriggerEnableDistSq;//[Offset: 0x2d0, Size: 4]
	BoxComponent* CameraTrigger;//[Offset: 0x2d4, Size: 4]
	void StoreCamearaOffset();// 0x29fa2f4

--------------------------------
Class: ShareWidgetRTManager.Actor.Object
	<Object*,ShareWidgetRT*> SharedWidgetRTMap;//[Offset: 0x2cc, Size: 60]

--------------------------------
Class: ShareWidgetRT.Object
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x1c, Size: 4]
	<Object*> AllSharedWidget;//[Offset: 0x20, Size: 60]

--------------------------------
Class: BP_PlayerRifleBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* BulletMesh;//[Offset: 0x520, Size: 4]

--------------------------------
Class: BP_PlayerShotgunBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x29fa2f4
	StaticMeshComponent* BulletMesh;//[Offset: 0x520, Size: 4]

--------------------------------
Class: BP_PlayerSniperBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x520, Size: 4]
	void UserConstructionScript();// 0x29fa2f4
	void ReceiveBeginPlay();// 0x29fa2f4
	void ResetParticle();// 0x29fa2f4
	void ExecuteUbergraph_BP_PlayerSniperBullet(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate);// 0x29fa2f4
	ParticleSystemComponent* P_Sniper_bullet_01;//[Offset: 0x524, Size: 4]
	StaticMeshComponent* BulletMesh;//[Offset: 0x528, Size: 4]
	float EffectFxDelayShowTime;//[Offset: 0x52c, Size: 4]

--------------------------------
